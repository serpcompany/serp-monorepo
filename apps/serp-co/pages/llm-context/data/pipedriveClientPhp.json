[
  {
    "owner": "pipedrive",
    "repo": "client-php",
    "content": "TITLE: Complete OAuth 2.0 Flow Example: index.php (PHP)\nDESCRIPTION: Provides the main application file (`index.php`) for a complete OAuth 2.0 authentication flow. It configures the client, checks for a stored token in the session, makes an API call if the token exists, or redirects the user to the Pipedrive authorization page if no token is found. It relies on `authcallback.php` to handle the redirect.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/README.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Pipedrive\\versions\\v1\\Api\\DealsApi;\nuse Pipedrive\\versions\\v1\\Configuration;\n\nrequire_once('../../sdks/php/vendor/autoload.php');\n\nsession_start();\n\n$config = (new Pipedrive\\versions\\v1\\Configuration());\n$config->setOauthRedirectUri('http://' . $_SERVER['HTTP_HOST'] . '/authcallback.php');\n$config->setClientSecret('YOUR_CLIENT_SECRET');\n$config->setClientId('YOUR_CLIENT_ID');\n\n//$usersApiInstance = new UsersApi(null, $config);\n$dealsApiInstance = new DealsApi(null, $config);\n\n// check if a token is available\nif (isset($_SESSION['token']) && $_SESSION['token']) {\n    // set access token in configuration\n    $config->updateOAuthRelatedFields($_SESSION['token']);\n\n    try {\n        $dealsResponse = $dealsApiInstance->getDeals();\n        echo '<pre>';\n        print_r($dealsResponse);\n        echo '</pre>';\n    } catch (Exception $e) {\n        echo 'Exception when trying to get deals data', $e, PHP_EOL;\n    }\n} else {\n    header('Location: ' . filter_var($config->getAuthorizationPageUrl(), FILTER_SANITIZE_URL));\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Installment to a Deal with Pipedrive API - PHP\nDESCRIPTION: Adds an installment to a specific deal if it contains at least one one-time product and no recurring products. This functionality is limited to Advanced and above subscription plans. Requires providing the deal ID and a request body object describing the installment. Utilizes API key or OAuth2 authorization and returns an AddInstallmentResponse model confirming the addition.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v2/Api/DealsApi.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n$apiInstance = new Pipedrive\\versions\\v2\\Api\\DealsApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | ID of the deal\n$body = new \\stdClass; // object | Request body for installment data\n\ntry {\n    $result = $apiInstance->postInstallment($id, $body);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling DealsApi->postInstallment: ', $e->getMessage(), PHP_EOL;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Adding a Deal using Pipedrive API\nDESCRIPTION: This snippet demonstrates how to add a new deal to Pipedrive using the `addDeal()` method. It requires the Pipedrive PHP client library and API credentials. The example constructs a `NewDeal` object and then calls the `addDeal()` function to create the deal.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/DealsApi.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n```php\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\DealsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$new_deal = new \\Pipedrive\\versions\\v1\\Model\\NewDeal(); // \\Pipedrive\\versions\\v1\\Model\\NewDeal\n\ntry {\n    $result = $apiInstance->addDeal($new_deal);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling DealsApi->addDeal: ', $e->getMessage(), PHP_EOL;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Adding a new deal using Pipedrive PHP client\nDESCRIPTION: Example code showing how to add a new deal using the Pipedrive PHP client. Requires API authentication either via API key or OAuth2 token.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v2/Api/DealsApi.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v2\\Api\\DealsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$deal_request_body = new \\Pipedrive\\versions\\v2\\Model\\DealRequestBody(); // \\Pipedrive\\versions\\v2\\Model\\DealRequestBody\n\ntry {\n    $result = $apiInstance->addDeal($deal_request_body);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling DealsApi->addDeal: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Deal Files Pipedrive PHP\nDESCRIPTION: This snippet demonstrates how to list files attached to a specific Pipedrive deal using the PHP client. It outlines the process of configuring API key or OAuth2 authentication, creating an instance of the Deals API, specifying parameters including the deal ID and optional pagination and sorting options (start, limit, sort), executing the API call, printing the successful response, and catching any exceptions that might occur.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/DealsApi.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\DealsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the deal\n$start = 0; // int | Pagination start\n$limit = 56; // int | Items shown per page. Please note that a maximum value of 100 is allowed.\n$sort = 'sort_example'; // string | Supported fields: `id`, `update_time`\n\ntry {\n    $result = $apiInstance->getDealFiles($id, $start, $limit, $sort);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling DealsApi->getDealFiles: ', $e->getMessage(), PHP_EOL;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Complete OAuth Implementation - Authorization Callback (authcallback.php)\nDESCRIPTION: Complete example of a callback page that handles the OAuth authorization response, stores the token, and redirects back to the main application.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v2/README.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nrequire_once('../../sdks/php/vendor/autoload.php');\n\nuse Pipedrive\\versions\\v2\\Configuration;\n\nsession_start();\n\n$config = (new Pipedrive\\versions\\v2\\Configuration());\n\n$config->setOauthRedirectUri('http://' . $_SERVER['HTTP_HOST'] . '/authcallback.php');\n$config->setClientSecret('YOUR_CLIENT_SECRET');\n$config->setClientId('YOUR_CLIENT_ID');\n$config->setAuthorizationPageUrl('https://oauth.pipedrive.com/oauth/authorize?client_id=YOUR_CLIENT_ID&redirect_uri=http%3A%2F%2Flocalhost%3A8081%2Fauthcallback.php');\n\n$config->setOAuthTokenUpdateCallback(function ($token) {\n    $_SESSION['token'] = $token;\n});\n\n// if authorization code is absent, redirect to authorization page\nif (!isset($_GET['code'])) {\n    header('Location: ' . filter_var($config->getAuthorizationPageUrl(), FILTER_SANITIZE_URL));\n} else {\n    try {\n        $config->authorize($_GET['code']);\n\n        // resume user activity\n        $redirect_uri = 'http://' . $_SERVER['HTTP_HOST'] . '/';\n        header('Location: ' . filter_var($redirect_uri, FILTER_SANITIZE_URL));\n    } catch (Exception $ex) {\n        print_r($ex);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Person from Pipedrive - PHP\nDESCRIPTION: This snippet illustrates how to mark a person as deleted using the Pipedrive PHP client. It requires the ID of the person to be deleted and API key or OAuth2 authentication. The person is marked for deletion and permanently removed after 30 days. It returns a DeletePersonResponse model.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v2/Api/PersonsApi.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v2\\Api\\PersonsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the person\n\ntry {\n    $result = $apiInstance->deletePerson($id);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling PersonsApi->deletePerson: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Person Followers using Pipedrive Persons API in PHP\nDESCRIPTION: This snippet demonstrates how to list the followers of a specific person using the Pipedrive PHP client library. It covers configuring authentication (API key or OAuth2), creating an instance of `PersonsApi`, and invoking the `getPersonFollowers` method with the person's ID. The response containing the list of followers or an error message is then printed.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/PersonsApi.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\PersonsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the person\n\ntry {\n    $result = $apiInstance->getPersonFollowers($id);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling PersonsApi->getPersonFollowers: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Update Lead in Pipedrive with PHP\nDESCRIPTION: This code snippet demonstrates how to update a lead's properties in Pipedrive using the PHP client library. It requires the Pipedrive PHP client library and Guzzle HTTP client. The code configures API key and OAuth2 authorization, instantiates the LeadsApi, and calls the updateLead method with the lead ID and an UpdateLeadRequest object.  Error handling is included to catch and display any exceptions that occur during the API call.  The ID parameter specifies the lead to be updated, and update_lead_request contains the properties to change. It returns a GetLeadResponse object.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/LeadsApi.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\LeadsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 'id_example'; // string | The ID of the lead\n$update_lead_request = new \\Pipedrive\\versions\\v1\\Model\\UpdateLeadRequest(); // \\Pipedrive\\versions\\v1\\Model\\UpdateLeadRequest\n\ntry {\n    $result = $apiInstance->updateLead($id, $update_lead_request);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling LeadsApi->updateLead: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Adding Note with Pipedrive NotesApi in PHP\nDESCRIPTION: This snippet shows how to add a new note using the Pipedrive Notes API. It configures API key and OAuth2 authorization, creates an instance of the NotesApi, and calls the addNote method with an AddNoteRequest object.  It requires the Pipedrive PHP client library and Guzzle HTTP client.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/NotesApi.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\NotesApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$add_note_request = new \\Pipedrive\\versions\\v1\\Model\\AddNoteRequest(); // \\Pipedrive\\versions\\v1\\Model\\AddNoteRequest\n\ntry {\n    $result = $apiInstance->addNote($add_note_request);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling NotesApi->addNote: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Getting Deal Details using Pipedrive PHP Client\nDESCRIPTION: This PHP snippet illustrates how to fetch detailed information for a specific deal using the Pipedrive v1 API client. It requires setting up authentication (API Key or OAuth2), creating a `DealsApi` instance, and calling the `getDeal` method with the target deal's ID. The response includes standard and additional fields like deal age and stage duration.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/DealsApi.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\DealsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the deal\n\ntry {\n    $result = $apiInstance->getDeal($id);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling DealsApi->getDeal: ', $e->getMessage(), PHP_EOL;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Product using Pipedrive PHP SDK\nDESCRIPTION: Illustrates how to fetch details for a specific Pipedrive product using the `getProduct` method of the `ProductsApi` class. Requires the product ID (`id`). Requires authentication (API key or OAuth2) and the Pipedrive v2 SDK.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v2/Api/ProductsApi.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v2\\Api\\ProductsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the product\n\ntry {\n    $result = $apiInstance->getProduct($id);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling ProductsApi->getProduct: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Person Files using Pipedrive Persons API in PHP\nDESCRIPTION: This snippet demonstrates how to retrieve files associated with a specific person using the Pipedrive PHP client library. It includes setting up API key or OAuth2 authentication, instantiating the `PersonsApi` client, and calling the `getPersonFiles` method with parameters for person ID, pagination (start, limit), and sorting. The result or an exception message is printed.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/PersonsApi.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\PersonsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the person\n$start = 0; // int | Pagination start\n$limit = 56; // int | Items shown per page. Please note that a maximum value of 100 is allowed.\n$sort = 'sort_example'; // string | Supported fields: `id`, `update_time`\n\ntry {\n    $result = $apiInstance->getPersonFiles($id, $start, $limit, $sort);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling PersonsApi->getPersonFiles: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Searching Persons with Pipedrive API v2 in PHP\nDESCRIPTION: This snippet shows how to search for persons in Pipedrive using the PHP SDK. It covers configuring authentication (API key or OAuth2), creating a PersonsApi instance, setting search parameters (term, fields to search, exact_match flag, organization_id filter, optional included fields, limit, cursor), and executing the searchPersons method. The example includes basic error handling using a try-catch block. Requires the Pipedrive PHP SDK and GuzzleHttp.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v2/Api/PersonsApi.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v2\\Api\\PersonsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$term = 'term_example'; // string | The search term to look for. Minimum 2 characters (or 1 if using `exact_match`). Please note that the search term has to be URL encoded.\n$fields = 'fields_example'; // string | A comma-separated string array. The fields to perform the search from. Defaults to all of them. Only the following custom field types are searchable: `address`, `varchar`, `text`, `varchar_auto`, `double`, `monetary` and `phone`. Read more about searching by custom fields <a href=\"https://support.pipedrive.com/en/article/search-finding-what-you-need#searching-by-custom-fields\" target=\"_blank\" rel=\"noopener noreferrer\">here</a>.\n$exact_match = True; // bool | When enabled, only full exact matches against the given term are returned. It is <b>not</b> case sensitive.\n$organization_id = 56; // int | Will filter persons by the provided organization ID. The upper limit of found persons associated with the organization is 2000.\n$include_fields = 'include_fields_example'; // string | Supports including optional fields in the results which are not provided by default\n$limit = 100; // int | For pagination, the limit of entries to be returned. If not provided, 100 items will be returned. Please note that a maximum value of 500 is allowed.\n$cursor = 'cursor_example'; // string | For pagination, the marker (an opaque string value) representing the first item on the next page\n\ntry {\n    $result = $apiInstance->searchPersons($term, $fields, $exact_match, $organization_id, $include_fields, $limit, $cursor);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling PersonsApi->searchPersons: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating an Organization in Pipedrive using PHP\nDESCRIPTION: This code snippet shows how to update an existing organization in Pipedrive using the PHP client library. It configures API key or OAuth2 authentication, instantiates the OrganizationsApi, creates an UpdateOrganization object, and calls the updateOrganization method with the organization ID and the update object. Requires the Pipedrive PHP client library and Guzzle HTTP client.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/OrganizationsApi.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\OrganizationsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the organization\n$update_organization = new \\Pipedrive\\versions\\v1\\Model\\UpdateOrganization(); // \\Pipedrive\\versions\\v1\\Model\\UpdateOrganization\n\ntry {\n    $result = $apiInstance->updateOrganization($id, $update_organization);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling OrganizationsApi->updateOrganization: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Updating a Pipedrive Pipeline in PHP\nDESCRIPTION: This PHP script demonstrates updating a Pipedrive pipeline using the official client library. It first includes the Composer autoloader and configures authentication using either an API key or an OAuth2 access token. An instance of `PipelinesApi` is created, optionally passing a custom Guzzle HTTP client. The script then prepares the pipeline ID and an empty `PipelineRequestBody` (which should be populated with actual update data). Finally, it calls the `updatePipeline` method within a try-catch block, printing the successful response (a `PostPatchGetPipeline` object) or catching and displaying any exceptions. Key dependencies are the `pipedrive/client-php` library and `GuzzleHttp`. The main inputs are the pipeline ID (`$id`) and the request body object (`$pipeline_request_body`).\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v2/Api/PipelinesApi.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v2\\Api\\PipelinesApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the pipeline\n$pipeline_request_body = new \\Pipedrive\\versions\\v2\\Model\\PipelineRequestBody(); // \\Pipedrive\\versions\\v2\\Model\\PipelineRequestBody\n\ntry {\n    $result = $apiInstance->updatePipeline($id, $pipeline_request_body);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling PipelinesApi->updatePipeline: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting an Organization using Pipedrive PHP SDK\nDESCRIPTION: This snippet shows how to mark an organization as deleted using the Pipedrive PHP SDK. The organization ID is required and passed to deleteOrganization() method. The deletion is a soft delete and the organization will be permanently removed after 30 days. The method returns a DeleteOrganizationResponse model. API key or OAuth2 token authorizes the call. Exception handling is included to catch and display API errors.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v2/Api/OrganizationsApi.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n$apiInstance = new Pipedrive\\versions\\v2\\Api\\OrganizationsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the organization\n\ntry {\n    $result = $apiInstance->deleteOrganization($id);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling OrganizationsApi->deleteOrganization: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Searching Deals via Pipedrive PHP SDK\nDESCRIPTION: This snippet demonstrates how to perform a search for deals using the Pipedrive PHP SDK. It sets up API configurations with API key or OAuth2 token, initializes the DealsApi instance, and calls the searchDeals method with various search parameters. The result is expected to be a DealSearchResponse object, containing matched deals based on the provided criteria.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/DealsApi.md#_snippet_28\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\DealsApi(\n    // Optionally pass custom HTTP client\n    new GuzzleHttp\\Client(),\n    $config\n);\n$term = 'term_example'; // Search term, minimum 2 characters\n$fields = 'fields_example'; // Comma-separated fields to search\n$exact_match = true; // If true, performs exact match, case-insensitive\n$person_id = 56; // Filter deals by person ID\n$organization_id = 56; // Filter deals by organization ID\n$status = 'status_example'; // Filter by deal status\n$include_fields = 'include_fields_example'; // Include additional fields\n$start = 0; // Pagination start\n$limit = 56; // Results per page\n\ntry {\n    $result = $apiInstance->searchDeals($term, $fields, $exact_match, $person_id, $organization_id, $status, $include_fields, $start, $limit);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling DealsApi->searchDeals: ', $e->getMessage(), PHP_EOL;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Duplicating a Deal using Pipedrive PHP Client\nDESCRIPTION: This PHP example demonstrates duplicating an existing deal via the Pipedrive v1 API client. After configuring authentication and instantiating the `DealsApi`, the `duplicateDeal` method is invoked with the ID of the deal to be duplicated. The script prints the result containing details of the newly created duplicate deal or catches and displays any exceptions.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/DealsApi.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\DealsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the deal\n\ntry {\n    $result = $apiInstance->duplicateDeal($id);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling DealsApi->duplicateDeal: ', $e->getMessage(), PHP_EOL;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Updating a Product with Pipedrive API in PHP\nDESCRIPTION: This code snippet shows how to update a product's details using the Pipedrive API.  It requires configuration of the API key or OAuth2 token, the product ID to update, and a request body with the updated information.  It relies on the Pipedrive PHP client library and Guzzle HTTP client. The API response is printed to the console.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v2/Api/ProductsApi.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v2\\Api\\ProductsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the product\n$update_product_request_body = new \\Pipedrive\\versions\\v2\\Model\\UpdateProductRequestBody(); // \\Pipedrive\\versions\\v2\\Model\\UpdateProductRequestBody\n\ntry {\n    $result = $apiInstance->updateProduct($id, $update_product_request_body);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling ProductsApi->updateProduct: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Initializing Pipedrive Client with API Key (PHP)\nDESCRIPTION: Demonstrates how to configure and initialize the Pipedrive API client using a pre-set API token. It involves setting the API key in the Configuration object and instantiating an API class (e.g., ActivitiesApi) with the configuration. An optional GuzzleHttp client can be provided.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/README.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Pipedrive\\versions\\v1\\Configuration;\n\nrequire_once('/path/to/client/vendor/autoload.php');\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\ActivitiesApi(\n// If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n// This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n\ntry {\n    $result = $apiInstance->getActivities();\n    echo '<pre>';\n    print_r($result);\n    echo '</pre>';\n} catch (Exception $e) {\n    echo 'Exception when calling ActivitiesApi->getActivities: ', $e->getMessage(), PHP_EOL;\n}\n\n?>\n```\n\n----------------------------------------\n\nTITLE: Search Persons with Pipedrive PHP\nDESCRIPTION: Searches for person records in Pipedrive using the `searchPersons` method based on a search term and optional filters. It supports searching by name, email, phone, notes, and custom fields, with options for exact match, organization ID, and pagination. The API client is configured with API key or OAuth2 token. It includes error handling and outputting the result.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/PersonsApi.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\PersonsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$term = 'term_example'; // string | The search term to look for. Minimum 2 characters (or 1 if using `exact_match`). Please note that the search term has to be URL encoded.\n$fields = 'fields_example'; // string | A comma-separated string array. The fields to perform the search from. Defaults to all of them. Only the following custom field types are searchable: `address`, `varchar`, `text`, `varchar_auto`, `double`, `monetary` and `phone`. Read more about searching by custom fields <a href=\\\"https://support.pipedrive.com/en/article/search-finding-what-you-need#searching-by-custom-fields\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">here</a>.\n$exact_match = True; // bool | When enabled, only full exact matches against the given term are returned. It is <b>not</b> case sensitive.\n$organization_id = 56; // int | Will filter persons by the provided organization ID. The upper limit of found persons associated with the organization is 2000.\n$include_fields = 'include_fields_example'; // string | Supports including optional fields in the results which are not provided by default\n$start = 0; // int | Pagination start. Note that the pagination is based on main results and does not include related items when using `search_for_related_items` parameter.\n$limit = 56; // int | Items shown per page\n\ntry {\n    $result = $apiInstance->searchPersons($term, $fields, $exact_match, $organization_id, $include_fields, $start, $limit);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling PersonsApi->searchPersons: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Pipelines using PHP\nDESCRIPTION: This snippet illustrates how to call the getPipelines method to fetch data about all pipelines. It sets up the API configuration with necessary authorization tokens, initializes the API client, and executes the call within a try-catch block to handle exceptions. No parameters are needed for this endpoint.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/PipelinesApi.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\PipelinesApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\ntry {\n    $result = $apiInstance->getPipelines();\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling PipelinesApi->getPipelines: ', $e->getMessage(), PHP_EOL;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Searching Leads with Pipedrive PHP Client\nDESCRIPTION: This snippet illustrates how to search leads in the Pipedrive CRM using the PHP client. It involves configuring API key or OAuth2 authorization and invoking the searchLeads method with parameters such as search term, fields to search, exact match flag, filters by person and organization IDs, optional inclusion of fields, and pagination controls. The method returns a LeadSearchResponse containing leads matching the search criteria. Dependencies include Pipedrive PHP SDK and GuzzleHttp. Inputs include the search term which must be URL encoded and optional filters; output is the search result object. Example includes exception management for errors during API invocation.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/LeadsApi.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\LeadsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$term = 'term_example'; // string | The search term to look for. Minimum 2 characters (or 1 if using `exact_match`). Please note that the search term has to be URL encoded.\n$fields = 'fields_example'; // string | A comma-separated string array. The fields to perform the search from. Defaults to all of them.\n$exact_match = True; // bool | When enabled, only full exact matches against the given term are returned. It is <b>not</b> case sensitive.\n$person_id = 56; // int | Will filter leads by the provided person ID. The upper limit of found leads associated with the person is 2000.\n$organization_id = 56; // int | Will filter leads by the provided organization ID. The upper limit of found leads associated with the organization is 2000.\n$include_fields = 'include_fields_example'; // string | Supports including optional fields in the results which are not provided by default\n$start = 0; // int | Pagination start. Note that the pagination is based on main results and does not include related items when using `search_for_related_items` parameter.\n$limit = 56; // int | Items shown per page\n\ntry {\n    $result = $apiInstance->searchLeads($term, $fields, $exact_match, $person_id, $organization_id, $include_fields, $start, $limit);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling LeadsApi->searchLeads: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Followers of an Organization Using Pipedrive API in PHP\nDESCRIPTION: This snippet shows how to fetch a list of followers associated with a given organization using the Pipedrive PHP client. It requires authentication via API key or OAuth2. The OrganizationsApi client is instantiated with a Guzzle HTTP client and configuration. The primary parameter is the organization ID. The method returns an OrganizationFollowersListResponse object containing the followers information. Error handling is implemented to catch exceptions during the API call.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/OrganizationsApi.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\OrganizationsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the organization\n\ntry {\n    $result = $apiInstance->getOrganizationFollowers($id);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling OrganizationsApi->getOrganizationFollowers: ', $e->getMessage(), PHP_EOL;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Pipedrive Client for OAuth 2.0 (PHP)\nDESCRIPTION: Shows the initial setup for OAuth 2.0 authentication. This involves creating a Configuration object and setting the Client ID, Client Secret, and Redirect URI obtained from your Pipedrive app settings. This configured object is then used to instantiate API clients like DealsApi.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/README.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$oAuthClientId = 'oAuthClientId'; // OAuth 2 Client ID\n$oAuthClientSecret = 'oAuthClientSecret'; // OAuth 2 Client Secret\n$oAuthRedirectUri = 'https://example.com/oauth/callback'; // OAuth 2 Redirection endpoint or Callback Uri\n\n$config = (new Pipedrive\\versions\\v1\\Configuration());\n$config->setClientId($oAuthClientId);\n$config->setClientSecret($oAuthClientSecret);\n$config->setOauthRedirectUri($oAuthRedirectUri);\n\n$dealsApiInstance = new DealsApi(null, $config);\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Product by ID with Pipedrive Client - PHP\nDESCRIPTION: This snippet demonstrates how to retrieve detailed information for a single product from Pipedrive using the PHP client library. It requires either an API key or OAuth2 access token for authentication. Key parameters include the product's integer ID, and the endpoint returns a ProductResponse object. Error handling is implemented for API call exceptions. The client must be installed with its dependencies (autoload.php), and GuzzleHttp\\Client is used as the HTTP handler by default.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/ProductsApi.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\ProductsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the product\n\ntry {\n    $result = $apiInstance->getProduct($id);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling ProductsApi->getProduct: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Searching for Products using Pipedrive PHP SDK\nDESCRIPTION: This PHP code snippet enables searching for products by term across name, code, and custom fields, utilizing the searchProducts method. It involves setting up authentication tokens and making the API call with search parameters, returning a ProductSearchResponse object with matched results.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v2/Api/ProductsApi.md#_snippet_16\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n// Note: The actual code snippet for searchProducts is not provided in the text. Based on the pattern, it would involve setting up configuration and calling the method as follows:\n// require_once(__DIR__ . '/vendor/autoload.php');\n// $config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// OR\n// $config = (new Pipedrive\\versions\\v2\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n// $apiInstance = new Pipedrive\\versions\\v2\\Api\\ProductsApi(new GuzzleHttp\\Client(), $config);\n// try {\n//     $result = $apiInstance->searchProducts('search_term', ['name', 'code'], false, ['custom_field1', 'custom_field2'], 10, 'cursor_value');\n//     print_r($result);\n// } catch (Exception $e) {\n//     echo 'Error: ', $e->getMessage();\n// }\n// This snippet is illustrative, actual implementation may vary based on SDK version.\n\n```\n\n----------------------------------------\n\nTITLE: Listing files attached to a person using getPersonFiles() in PHP\nDESCRIPTION: This PHP snippet illustrates how to list files associated with a person by calling getPersonFiles() with person ID, pagination, and sorting parameters. It includes API credential setup, API client initialization, and response handling. Dependencies include GuzzleHttp and the SDK. Parameters involve person ID, start index, limit, and sorting preferences.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/PersonsApi.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\PersonsApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n$start = 0; // int | Pagination start\n$limit = 20; // int | Items shown per page\n$sort = 'date_desc'; // string | Sorting parameter, e.g., 'date_desc' or 'name_asc'\n\ntry {\n    $result = $apiInstance->getPersonFiles($id, $start, $limit, $sort);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling PersonsApi->getPersonFiles: ', $e->getMessage(), PHP_EOL;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Adding an Activity Using Pipedrive Activities API in PHP\nDESCRIPTION: This snippet shows how to add a new activity in Pipedrive using the ActivitiesApi PHP client. It requires setting up authentication either by API key or OAuth2 access token and initializing the API client with an HTTP client. The method accepts an ActivityPostObject representing the activity details and returns an AddActivityResponse object. The response includes a flag indicating if more related activities are scheduled. The snippet handles exceptions on API call failure and outputs the result for further processing.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/ActivitiesApi.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\ActivitiesApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$activity_post_object = new \\Pipedrive\\versions\\v1\\Model\\ActivityPostObject(); // \\Pipedrive\\versions\\v1\\Model\\ActivityPostObject\n\ntry {\n    $result = $apiInstance->addActivity($activity_post_object);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling ActivitiesApi->addActivity: ', $e->getMessage(), PHP_EOL;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving Leads with Pipedrive PHP Client\nDESCRIPTION: This snippet demonstrates how to retrieve multiple leads from the Pipedrive CRM using the PHP client. It includes configuration of API key or OAuth2 token authorization, setting pagination parameters such as limit and start, filtering by archived status, owner ID, person ID, organization ID, filter ID, and sorting options. The method returns a structured GetLeadsResponse containing lead data including custom fields inherited from deals. Dependencies include the Pipedrive PHP SDK and GuzzleHttp client. Inputs are query parameters controlling pagination and filtering, while output is a leads response model. Exception handling for API call failures is also included.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/LeadsApi.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\LeadsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$limit = 100; // int | For pagination, the limit of entries to be returned. If not provided, 100 items will be returned.\n$start = 0; // int | For pagination, the position that represents the first result for the page\n$archived_status = 'archived_status_example'; // string | Filtering based on the archived status of a lead. If not provided, `All` is used.\n$owner_id = 1; // int | If supplied, only leads matching the given user will be returned. However, `filter_id` takes precedence over `owner_id` when supplied.\n$person_id = 1; // int | If supplied, only leads matching the given person will be returned. However, `filter_id` takes precedence over `person_id` when supplied.\n$organization_id = 1; // int | If supplied, only leads matching the given organization will be returned. However, `filter_id` takes precedence over `organization_id` when supplied.\n$filter_id = 1; // int | The ID of the filter to use\n$sort = 'sort_example'; // string | The field names and sorting mode separated by a comma (`field_name_1 ASC`, `field_name_2 DESC`). Only first-level field keys are supported (no nested keys).\n\ntry {\n    $result = $apiInstance->getLeads($limit, $start, $archived_status, $owner_id, $person_id, $organization_id, $filter_id, $sort);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling LeadsApi->getLeads: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Pipedrive Client from Stored OAuth Token (PHP)\nDESCRIPTION: Explains how to re-initialize the client using a previously stored OAuth 2.0 token (e.g., from `$_SESSION`). You can set the token directly using `setAccessToken()` or use `updateOAuthRelatedFields()` for convenience. Client ID, secret, and redirect URI are still needed for automatic token refreshing.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/README.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n// load token later...\n$config->setAccessToken($_SESSION['token']->access_token);\n\n// If you want to set all of the OAuth2 related fields at once from the token gotten from Pipedrive OAuth server\n// you can use the updateOAuthRelatedFields() function\n$config->updateOAuthRelatedFields($_SESSION['token']);\n// This will set the access token, expiresIn, expiresAt, scope and host attributes in the Configuration class\n// In order to get automatic access token refreshing, you will still need the client ID, client secret and redirectURI\n\n// Set other configuration, then instantiate client\n$activitiesApiInstance = new ActivitiesApi(null, $config);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Updates About an Organization in PHP using Pipedrive API\nDESCRIPTION: Makes an API call to list updates/activities associated with a specific organization. Supports pagination and filtering options for specific update types and custom field changes.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/OrganizationsApi.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\OrganizationsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the organization\n$start = 0; // int | Pagination start\n$limit = 56; // int | Items shown per page\n$all_changes = 'all_changes_example'; // string | Whether to show custom field updates or not. 1 = Include custom field changes. If omitted, returns changes without custom field updates.\n$items = 'items_example'; // string | A comma-separated string for filtering out item specific updates. (Possible values - activity, plannedActivity, note, file, change, deal, follower, participant, mailMessage, mailMessageWithAttachment, invoice, activityFile, document).\n\ntry {\n    $result = $apiInstance->getOrganizationUpdates($id, $start, $limit, $all_changes, $items);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling OrganizationsApi->getOrganizationUpdates: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Stage via Pipedrive PHP SDK\nDESCRIPTION: This snippet demonstrates adding a new stage to the Pipedrive system using the PHP client. It requires configuring API key or OAuth2 authorization before creating an instance of StagesApi and calling addStage with a Stage model object. The method returns the created stage's ID wrapped inside a GetAddUpdateStage model. Key parameter: stage (Pipedrive\\versions\\v1\\Model\\Stage) representing the data of the stage to add.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/StagesApi.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\StagesApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$stage = new \\Pipedrive\\versions\\v1\\Model\\Stage(); // \\Pipedrive\\versions\\v1\\Model\\Stage\n\ntry {\n    $result = $apiInstance->addStage($stage);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling StagesApi->addStage: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a product to a deal using Pipedrive PHP client\nDESCRIPTION: Example code showing how to add a product to a deal using the Pipedrive PHP client. This creates a new deal-product relationship with specified product details.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v2/Api/DealsApi.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v2\\Api\\DealsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the deal\n$new_deal_product_request_body = new \\Pipedrive\\versions\\v2\\Model\\NewDealProductRequestBody(); // \\Pipedrive\\versions\\v2\\Model\\NewDealProductRequestBody\n\ntry {\n    $result = $apiInstance->addDealProduct($id, $new_deal_product_request_body);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling DealsApi->addDealProduct: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Stage using Pipedrive v2 StagesApi PHP Client\nDESCRIPTION: Deletes (marks as deleted) an existing stage by its ID with a DELETE request to /stages/{id}. Takes the stage ID as an integer parameter. Returns a DeleteStageResponse model indicating the success or failure of the deletion operation. Utilizes GuzzleHttp client and supports API key or OAuth2 for authorization. Handles exceptions thrown during the API call.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v2/Api/StagesApi.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n$apiInstance = new Pipedrive\\versions\\v2\\Api\\StagesApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the stage\n\ntry {\n    $result = $apiInstance->deleteStage($id);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling StagesApi->deleteStage: ', $e->getMessage(), PHP_EOL;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving Multiple Stages using Pipedrive v2 StagesApi PHP Client\nDESCRIPTION: Retrieves a list of stages optionally filtered by pipeline ID and sorted by specified criteria through a GET request to /stages. Supports parameters such as pipeline_id, sort_by, sort_direction, limit (max 500), and cursor for pagination. Returns a GetStages model containing the result set. Uses GuzzleHttp client and supports authorization with API key or OAuth2. Implements exception handling for API call errors.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v2/Api/StagesApi.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n$apiInstance = new Pipedrive\\versions\\v2\\Api\\StagesApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$pipeline_id = 56; // int | The ID of the pipeline to fetch stages for. If omitted, stages for all pipelines will be fetched.\n$sort_by = 'id'; // string | The field to sort by. Supported fields: `id`, `update_time`, `add_time`, `order_nr`.\n$sort_direction = 'asc'; // string | The sorting direction. Supported values: `asc`, `desc`.\n$limit = 100; // int | For pagination, the limit of entries to be returned. If not provided, 100 items will be returned. Please note that a maximum value of 500 is allowed.\n$cursor = 'cursor_example'; // string | For pagination, the marker (an opaque string value) representing the first item on the next page\n\ntry {\n    $result = $apiInstance->getStages($pipeline_id, $sort_by, $sort_direction, $limit, $cursor);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling StagesApi->getStages: ', $e->getMessage(), PHP_EOL;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Updating a Pipeline with Pipedrive API - PHP\nDESCRIPTION: This snippet isn't included in the text but can be inferred. It would involve updating the properties of a pipeline. It would require `pipedrive/client-php` and proper API key/OAuth2 configuration. It would use the `updatePipeline` method, passing the pipeline ID and a `PipelineRequestBody` containing updated fields. The output would return the modified pipeline.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v2/Api/PipelinesApi.md#_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: Listing Followers of a Person using Pipedrive API in PHP\nDESCRIPTION: This code snippet demonstrates how to retrieve a list of followers for a specific person from the Pipedrive API. It initializes the Pipedrive API client, configures authentication using either an API key or an OAuth2 token, and then calls the `getPersonFollowers` method of the `PersonsApi` class. It handles pagination using the `limit` and `cursor` parameters.  The snippet includes exception handling for API errors and prints the resulting follower data. It requires the Pipedrive PHP client library and Guzzle HTTP client.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v2/Api/PersonsApi.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v2\\Api\\PersonsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the person\n$limit = 100; // int | For pagination, the limit of entries to be returned. If not provided, 100 items will be returned. Please note that a maximum value of 500 is allowed.\n$cursor = 'cursor_example'; // string | For pagination, the marker (an opaque string value) representing the first item on the next page\n\ntry {\n    $result = $apiInstance->getPersonFollowers($id, $limit, $cursor);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling PersonsApi->getPersonFollowers: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Update Recurring Subscription in Pipedrive using PHP\nDESCRIPTION: This example demonstrates how to update a recurring subscription using the Pipedrive API in PHP. It sets up the API client with authentication, creates a `SubscriptionRecurringUpdateRequest` object (which should be populated with the new subscription details), and then calls the `updateRecurringSubscription` method with the subscription ID and the update request object. Requires the Pipedrive PHP client library and GuzzleHttp.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/SubscriptionsApi.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\SubscriptionsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the subscription\n$subscription_recurring_update_request = new \\Pipedrive\\versions\\v1\\Model\\SubscriptionRecurringUpdateRequest(); // \\Pipedrive\\versions\\v1\\Model\\SubscriptionRecurringUpdateRequest\n\ntry {\n    $result = $apiInstance->updateRecurringSubscription($id, $subscription_recurring_update_request);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling SubscriptionsApi->updateRecurringSubscription: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Registering OAuth 2.0 Token Update Callback (PHP)\nDESCRIPTION: Demonstrates how to register a callback function using `setOAuthTokenUpdateCallback()`. This function is automatically executed whenever the access token is initially obtained or refreshed, allowing persistent storage (like `$_SESSION`) to be updated.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/README.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$config->setOAuthTokenUpdateCallback(function ($token) {\n    $_SESSION['token'] = $token;\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching Deals Summary - Pipedrive API - PHP\nDESCRIPTION: This code snippet demonstrates how to retrieve a summary of deals from the Pipedrive API using the `getDealsSummary` method. It configures API key or OAuth2 authentication, instantiates the `DealsApi` class, and calls the `getDealsSummary` method with optional parameters for status, filter ID, user ID, pipeline ID, and stage ID.  The `vendor/autoload.php` file is required to include the necessary dependencies. The result is then printed using `print_r`.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/DealsApi.md#_snippet_25\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\DealsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$status = 'status_example'; // string | Only fetch deals with a specific status. open = Open, won = Won, lost = Lost.\n$filter_id = 56; // int | <code>user_id</code> will not be considered. Only deals matching the given filter will be returned.\n$user_id = 56; // int | Only deals matching the given user will be returned. `user_id` will not be considered if you use `filter_id`.\n$pipeline_id = 56; // int | Only deals within the given pipeline will be returned\n$stage_id = 56; // int | Only deals within the given stage will be returned\n\ntry {\n    $result = $apiInstance->getDealsSummary($status, $filter_id, $user_id, $pipeline_id, $stage_id);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling DealsApi->getDealsSummary: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Updating a Pipedrive Goal using PHP SDK\nDESCRIPTION: This example illustrates updating a specific Pipedrive goal using its ID and a `BasicGoal` object containing the updated data. It demonstrates configuring the Pipedrive PHP client (with API key or OAuth2), instantiating the `GoalsApi`, and calling the `updateGoal` method with the goal ID and the `BasicGoal` payload. Basic error handling using a try-catch block is included.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/GoalsApi.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\GoalsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 'id_example'; // string | The ID of the goal\n$basic_goal = new \\Pipedrive\\versions\\v1\\Model\\BasicGoal(); // \\Pipedrive\\versions\\v1\\Model\\BasicGoal\n\ntry {\n    $result = $apiInstance->updateGoal($id, $basic_goal);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling GoalsApi->updateGoal: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring and Retrieving Product Fields via Pipedrive PHP Client\nDESCRIPTION: This code initializes the Pipedrive API client with API key and OAuth2 tokens, then retrieves a paginated list of product fields by calling getProductFields(). It requires the Guzzle HTTP client and handles exceptions. The main parameters are start (pagination start) and limit (items per page). The response contains a list of all product fields available in the account.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/ProductFieldsApi.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\ProductFieldsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$start = 0; // int | Pagination start\n$limit = 56; // int | Items shown per page\n\ntry {\n    $result = $apiInstance->getProductFields($start, $limit);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling ProductFieldsApi->getProductFields: ', $e->getMessage(), PHP_EOL;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Listing Activities for an Organization Using Pipedrive API in PHP\nDESCRIPTION: This snippet provides functionality to list activities associated with a specific organization by calling getOrganizationActivities on the OrganizationsApi. It accepts several parameters including organization ID, pagination start, limit per page, whether the activity is done, and a list of activity IDs to exclude. The API client must be pre-configured with an API key or OAuth2 token. The method returns a ListActivitiesResponse object. The code includes proper try-catch blocks to handle API call exceptions.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/OrganizationsApi.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\OrganizationsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the organization\n$start = 0; // int | Pagination start\n$limit = 56; // int | Items shown per page\n$done = new \\Pipedrive\\versions\\v1\\Model\\\\Pipedrive\\versions\\v1\\Model\\NumberBoolean(); // \\Pipedrive\\versions\\v1\\Model\\NumberBoolean | Whether the activity is done or not. 0 = Not done, 1 = Done. If omitted returns both Done and Not done activities.\n$exclude = 'exclude_example'; // string | A comma-separated string of activity IDs to exclude from result\n\ntry {\n    $result = $apiInstance->getOrganizationActivities($id, $start, $limit, $done, $exclude);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling OrganizationsApi->getOrganizationActivities: ', $e->getMessage(), PHP_EOL;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Listing All Products Using Pipedrive PHP Client\nDESCRIPTION: This snippet illustrates how to retrieve a list of products with optional filtering parameters such as owner ID, filter ID, specific product IDs, initial character of product names, and pagination controls. It involves configuring credentials, initializing the API class, setting parameters, and executing the `getProducts` method to return a `ProductsResponse` object containing product data.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/ProductsApi.md#_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\ProductsApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n$user_id = 56; // int | If supplied, only products owned by the given user will be returned\n$filter_id = 56; // int | The filter ID to use\n$ids = array(56); // int[] | Array of product IDs to filter\n$first_char = 'first_char_example'; // string | Filter products starting with this letter\n$get_summary = True; // bool | Include summary info\n$start = 0; // int | Pagination start\n$limit = 56; // int | Items per page\n\ntry {\n    $result = $apiInstance->getProducts($user_id, $filter_id, $ids, $first_char, $get_summary, $start, $limit);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling ProductsApi->getProducts: ', $e->getMessage(), PHP_EOL;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Adding Project using Pipedrive PHP Client\nDESCRIPTION: Demonstrates how to add a new project using the Pipedrive PHP client library. This involves configuring authorization (API key or OAuth2), instantiating the `ProjectsApi` client, preparing a `ProjectPostObject`, and calling the `addProject` method. The example includes basic exception handling.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/ProjectsApi.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\ProjectsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$project_post_object = new \\Pipedrive\\versions\\v1\\Model\\ProjectPostObject(); // \\Pipedrive\\versions\\v1\\Model\\ProjectPostObject\n\ntry {\n    $result = $apiInstance->addProject($project_post_object);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling ProjectsApi->addProject: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching All Deals in PHP using Pipedrive API\nDESCRIPTION: This example demonstrates how to retrieve all deals using the Pipedrive API. It configures authentication, initializes the DealsApi client, and calls the getDeals method with various filtering options including filter ID, owner, person, organization, pipeline, stage, status, update time, and supports pagination and sorting.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v2/Api/DealsApi.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v2\\Api\\DealsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$filter_id = 56; // int | If supplied, only deals matching the specified filter are returned\n$ids = 'ids_example'; // string | Optional comma separated string array of up to 100 entity ids to fetch. If filter_id is provided, this is ignored. If any of the requested entities do not exist or are not visible, they are not included in the response.\n$owner_id = 56; // int | If supplied, only deals owned by the specified user are returned. If filter_id is provided, this is ignored.\n$person_id = 56; // int | If supplied, only deals linked to the specified person are returned. If filter_id is provided, this is ignored.\n$org_id = 56; // int | If supplied, only deals linked to the specified organization are returned. If filter_id is provided, this is ignored.\n$pipeline_id = 56; // int | If supplied, only deals in the specified pipeline are returned. If filter_id is provided, this is ignored.\n$stage_id = 56; // int | If supplied, only deals in the specified stage are returned. If filter_id is provided, this is ignored.\n$status = 'status_example'; // string | Only fetch deals with a specific status. If omitted, all not deleted deals are returned. If set to deleted, deals that have been deleted up to 30 days ago will be included. Multiple statuses can be included as a comma separated array. If filter_id is provided, this is ignored.\n$updated_since = 'updated_since_example'; // string | If set, only deals with an `update_time` later than or equal to this time are returned. In RFC3339 format, e.g. 2025-01-01T10:20:00Z.\n$updated_until = 'updated_until_example'; // string | If set, only deals with an `update_time` earlier than this time are returned. In RFC3339 format, e.g. 2025-01-01T10:20:00Z.\n$sort_by = 'id'; // string | The field to sort by. Supported fields: `id`, `update_time`, `add_time`.\n$sort_direction = 'asc'; // string | The sorting direction. Supported values: `asc`, `desc`.\n$include_fields = 'include_fields_example'; // string | Optional comma separated string array of additional fields to include\n$custom_fields = 'custom_fields_example'; // string | Optional comma separated string array of custom fields keys to include. If you are only interested in a particular set of custom fields, please use this parameter for faster results and smaller response.<br/>A maximum of 15 keys is allowed.\n$limit = 100; // int | For pagination, the limit of entries to be returned. If not provided, 100 items will be returned. Please note that a maximum value of 500 is allowed.\n$cursor = 'cursor_example'; // string | For pagination, the marker (an opaque string value) representing the first item on the next page\n\ntry {\n    $result = $apiInstance->getDeals($filter_id, $ids, $owner_id, $person_id, $org_id, $pipeline_id, $stage_id, $status, $updated_since, $updated_until, $sort_by, $sort_direction, $include_fields, $custom_fields, $limit, $cursor);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling DealsApi->getDeals: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Notes with Filters via Pipedrive NotesApi in PHP\nDESCRIPTION: This snippet shows how to retrieve a list of all notes, applying various optional filters and pagination/sorting options. It requires standard setup (autoloader, authentication, `NotesApi` instantiation). The `getNotes` method is called with numerous optional parameters like user ID, related entity IDs (lead, deal, person, org), pagination (`start`, `limit`), sorting (`sort`), date range (`start_date`, `end_date`), and pinning flags. Error handling is included.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/NotesApi.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\NotesApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$user_id = 56; // int | The ID of the user whose notes to fetch. If omitted, notes by all users will be returned.\n$lead_id = 'lead_id_example'; // string | The ID of the lead which notes to fetch. If omitted, notes about all leads will be returned.\n$deal_id = 56; // int | The ID of the deal which notes to fetch. If omitted, notes about all deals will be returned.\n$person_id = 56; // int | The ID of the person whose notes to fetch. If omitted, notes about all persons will be returned.\n$org_id = 56; // int | The ID of the organization which notes to fetch. If omitted, notes about all organizations will be returned.\n$start = 0; // int | Pagination start\n$limit = 56; // int | Items shown per page\n$sort = 'sort_example'; // string | The field names and sorting mode separated by a comma (`field_name_1 ASC`, `field_name_2 DESC`). Only first-level field keys are supported (no nested keys). Supported fields: `id`, `user_id`, `deal_id`, `person_id`, `org_id`, `content`, `add_time`, `update_time`.\n$start_date = new \\DateTime(\"2013-10-20T19:20:30+01:00\"); // \\DateTime | The date in format of YYYY-MM-DD from which notes to fetch\n$end_date = new \\DateTime(\"2013-10-20T19:20:30+01:00\"); // \\DateTime | The date in format of YYYY-MM-DD until which notes to fetch to\n$pinned_to_lead_flag = new \\Pipedrive\\versions\\v1\\Model\\\\Pipedrive\\versions\\v1\\Model\\NumberBoolean(); // \\Pipedrive\\versions\\v1\\Model\\NumberBoolean | If set, the results are filtered by note to lead pinning state\n$pinned_to_deal_flag = new \\Pipedrive\\versions\\v1\\Model\\\\Pipedrive\\versions\\v1\\Model\\NumberBoolean(); // \\Pipedrive\\versions\\v1\\Model\\NumberBoolean | If set, the results are filtered by note to deal pinning state\n$pinned_to_organization_flag = new \\Pipedrive\\versions\\v1\\Model\\\\Pipedrive\\versions\\v1\\Model\\NumberBoolean(); // \\Pipedrive\\versions\\v1\\Model\\NumberBoolean | If set, the results are filtered by note to organization pinning state\n$pinned_to_person_flag = new \\Pipedrive\\versions\\v1\\Model\\\\Pipedrive\\versions\\v1\\Model\\NumberBoolean(); // \\Pipedrive\\versions\\v1\\Model\\NumberBoolean | If set, the results are filtered by note to person pinning state\n\ntry {\n    $result = $apiInstance->getNotes($user_id, $lead_id, $deal_id, $person_id, $org_id, $start, $limit, $sort, $start_date, $end_date, $pinned_to_lead_flag, $pinned_to_deal_flag, $pinned_to_organization_flag, $pinned_to_person_flag);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling NotesApi->getNotes: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Add New Deal 5.x - Pipedrive PHP\nDESCRIPTION: In version 5.x, adding a deal uses the `addDeal()` method of the `DealsApi` instance. Deal details are encapsulated in a model object, specifically `Pipedrive\\Model\\NewDeal`, which is instantiated and passed as an argument.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/MIGRATION-5.x.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nuse Pipedrive\\Client;\nuse Pipedrive\\Model\\NewDeal;\nuse Pipedrive\\Configuration;\nuse Pipedrive\\Api\\DealsApi;\n\n$config = new Configuration();\n\n/* ...configuration needed here... */\n\n$dealsApiInstance = new DealsApi(null, $config);\n$response = $dealsApiInstance->addDeal(new NewDeal([\n    'title' => 'DEAL_TITLE',\n]));\n```\n\n----------------------------------------\n\nTITLE: Listing activities associated with a person using getPersonActivities() in PHP\nDESCRIPTION: This PHP code snippet demonstrates how to fetch activities related to a specific person by calling getPersonActivities() with parameters such as person ID, pagination, and filtering options. It configures API credentials, initializes the API client, and handles the response or exceptions. Required dependencies include GuzzleHttp and the Pipedrive SDK. Parameters include person ID, start index, limit, activity completion status, and exclusions.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/PersonsApi.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\PersonsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the person\n$start = 0; // int | Pagination start\n$limit = 56; // int | Items shown per page\n$done = new \\Pipedrive\\versions\\v1\\Model\\NumberBoolean(); // \\Pipedrive\\versions\\v1\\Model\\NumberBoolean | Whether the activity is done or not. 0 = Not done, 1 = Done. If omitted, returns both Done and Not done activities.\n$exclude = 'exclude_example'; // string | A comma-separated string of activity IDs to exclude from result\n\ntry {\n    $result = $apiInstance->getPersonActivities($id, $start, $limit, $done, $exclude);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling PersonsApi->getPersonActivities: ', $e->getMessage(), PHP_EOL;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Complete Example of Updating an Organization Relationship in Pipedrive\nDESCRIPTION: A full PHP example showing how to update an organization relationship using the Pipedrive API client. Includes authentication setup, creating the API instance, defining parameters, making the API call, and handling responses and exceptions.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/OrganizationRelationshipsApi.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\OrganizationRelationshipsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the organization relationship\n$organization_relationship = new \\Pipedrive\\versions\\v1\\Model\\OrganizationRelationship(); // \\Pipedrive\\versions\\v1\\Model\\OrganizationRelationship\n\ntry {\n    $result = $apiInstance->updateOrganizationRelationship($id, $organization_relationship);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling OrganizationRelationshipsApi->updateOrganizationRelationship: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a User with Pipedrive Users API in PHP\nDESCRIPTION: Adds a new user to the company using the Pipedrive Users API and returns the created user's information, including their ID. Requires an AddUserRequest model as an input parameter. Authorization is supported by either API key or OAuth2 token. The snippet shows setting up the API client, configuring authentication, and handling exceptions during the add user operation.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/UsersApi.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\UsersApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$add_user_request = new \\Pipedrive\\versions\\v1\\Model\\AddUserRequest(); // \\Pipedrive\\versions\\v1\\Model\\AddUserRequest\n\ntry {\n    $result = $apiInstance->addUser($add_user_request);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling UsersApi->addUser: ', $e->getMessage(), PHP_EOL;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Fetching Deals in a Specific Pipedrive Pipeline using PHP\nDESCRIPTION: This snippet demonstrates how to call the getPipelineDeals method to retrieve deals within a specific pipeline, with options for filtering by user, stage, and including summaries. It sets up API configuration with API key or OAuth2 token, initializes the API client, defines parameters, and executes the call with exception handling.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/PipelinesApi.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\PipelinesApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int\n$filter_id = 56; // int\n$user_id = 56; // int\n$everyone = new \\Pipedrive\\versions\\v1\\Model\\NumberBoolean();\n$stage_id = 56; // int\n$start = 0; // int\n$limit = 56; // int\n$get_summary = new \\Pipedrive\\versions\\v1\\Model\\NumberBoolean();\n$totals_convert_currency = 'totals_convert_currency_example'; // string\n\ntry {\n    $result = $apiInstance->getPipelineDeals($id, $filter_id, $user_id, $everyone, $stage_id, $start, $limit, $get_summary, $totals_convert_currency);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling PipelinesApi->getPipelineDeals: ', $e->getMessage(), PHP_EOL;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Updating a Deal using Pipedrive PHP Client\nDESCRIPTION: This PHP snippet demonstrates how to update an existing deal in Pipedrive using the v2 API client. It requires the Pipedrive PHP client library and GuzzleHttp. The example shows configuring authentication via API key or OAuth2, instantiating the `DealsApi` client, preparing the `id` of the deal and an empty `DealRequestBody`, and calling the `updateDeal` method within a try-catch block. The updated deal information is returned as a `PostPatchGetDeal` object.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v2/Api/DealsApi.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v2\\Api\\DealsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the deal\n$deal_request_body = new \\Pipedrive\\versions\\v2\\Model\\DealRequestBody(); // \\Pipedrive\\versions\\v2\\Model\\DealRequestBody\n\ntry {\n    $result = $apiInstance->updateDeal($id, $deal_request_body);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling DealsApi->updateDeal: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Followers of a Product with Pipedrive Client - PHP\nDESCRIPTION: This code snippet lists all followers for a specific product via the Pipedrive PHP client and requires either API key or OAuth2 authentication. Primary parameters are the product's ID, along with optional pagination controls for start and limit. The API returns a ListProductFollowersResponse object, and the code demonstrates error handling for API exceptions. The Pipedrive SDK and Guzzle HTTP client are required dependencies.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/ProductsApi.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\ProductsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the product\n$start = 0; // int | Pagination start\n$limit = 56; // int | Items shown per page\n\ntry {\n    $result = $apiInstance->getProductFollowers($id, $start, $limit);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling ProductsApi->getProductFollowers: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Bulk Deleting Multiple Organizations Using Pipedrive API in PHP\nDESCRIPTION: This snippet illustrates how to mark multiple organizations as deleted via the deleteOrganizations method in the OrganizationsApi of the Pipedrive PHP client. It accepts a comma-separated string of organization IDs to be deleted. The API client requires configuration with an API key or OAuth2 token before use. This function marks the organizations as deleted and they are permanently removed after 30 days. Proper exception handling is included to catch errors during the API call.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/OrganizationsApi.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\OrganizationsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$ids = 'ids_example'; // string | The comma-separated IDs that will be deleted\n\ntry {\n    $result = $apiInstance->deleteOrganizations($ids);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling OrganizationsApi->deleteOrganizations: ', $e->getMessage(), PHP_EOL;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Listing Product Followers using Pipedrive PHP SDK\nDESCRIPTION: Provides an example of how to list the followers of a Pipedrive product using the `getProductFollowers` method of the `ProductsApi` class. Requires the product ID (`id`) and supports optional pagination parameters (`limit`, `cursor`). Requires authentication (API key or OAuth2) and the Pipedrive v2 SDK.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v2/Api/ProductsApi.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v2\\Api\\ProductsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the product\n$limit = 100; // int | For pagination, the limit of entries to be returned. If not provided, 100 items will be returned. Please note that a maximum value of 500 is allowed.\n$cursor = 'cursor_example'; // string | For pagination, the marker (an opaque string value) representing the first item on the next page\n\ntry {\n    $result = $apiInstance->getProductFollowers($id, $limit, $cursor);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling ProductsApi->getProductFollowers: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Multiple Pipedrive Organization Fields in PHP\nDESCRIPTION: Illustrates deleting multiple organization fields in bulk via the Pipedrive PHP client's `deleteOrganizationFields` method. Requires authentication setup and passing a comma-separated string `ids` containing the IDs of the fields to delete. This method returns a `\\Pipedrive\\versions\\v1\\Model\\BulkDeleteResponse` object. The example demonstrates API client initialization, the method call with a sample `ids` string, and exception handling.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/OrganizationFieldsApi.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\ndeleteOrganizationFields($ids): \\Pipedrive\\versions\\v1\\Model\\BulkDeleteResponse\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\OrganizationFieldsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$ids = 'ids_example'; // string | The comma-separated field IDs to delete\n\ntry {\n    $result = $apiInstance->deleteOrganizationFields($ids);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling OrganizationFieldsApi->deleteOrganizationFields: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a New Activity Type Using PHP SDK\nDESCRIPTION: This PHP snippet demonstrates how to create and send a request to add a new activity type via the Pipedrive API. It includes setup for API credentials, SDK initialization, and invocation of the addActivityType method, along with basic error handling.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/ActivityTypesApi.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\ActivityTypesApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n$activity_type_create_request = new \\Pipedrive\\versions\\v1\\Model\\ActivityTypeCreateRequest();\n\ntry {\n    $result = $apiInstance->addActivityType($activity_type_create_request);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling ActivityTypesApi->addActivityType: ', $e->getMessage(), PHP_EOL;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Deleting a Follower from an Organization Using Pipedrive API in PHP\nDESCRIPTION: This snippet demonstrates how to delete a follower from a specific organization by calling the deleteOrganizationFollower method of the OrganizationsApi in the Pipedrive PHP client. It requires the organization ID and the follower relationship ID as parameters. Before invoking, the API client must be configured with either an API key or OAuth2 access token. The method returns an OrganizationFollowerDeleteResponse object. Exception handling is included to manage API call errors.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/OrganizationsApi.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\OrganizationsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the organization\n$follower_id = 56; // int | The ID of the relationship between the follower and the organization\n\ntry {\n    $result = $apiInstance->deleteOrganizationFollower($id, $follower_id);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling OrganizationsApi->deleteOrganizationFollower: ', $e->getMessage(), PHP_EOL;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Fetching Deal Updates with Pipedrive API in PHP\nDESCRIPTION: Demonstrates how to retrieve updates for a specific Pipedrive deal using the `getDealUpdates` method of the `DealsApi` class. The example covers configuring API authentication (API Key or OAuth2), instantiating the API client with an optional Guzzle HTTP client, setting required parameters like `id`, and optional parameters for pagination (`start`, `limit`), including custom field changes (`all_changes`), and filtering specific item types (`items`). Includes basic error handling.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/DealsApi.md#_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\DealsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the deal\n$start = 0; // int | Pagination start\n$limit = 56; // int | Items shown per page\n$all_changes = 'all_changes_example'; // string | Whether to show custom field updates or not. 1 = Include custom field changes. If omitted returns changes without custom field updates.\n$items = 'items_example'; // string | A comma-separated string for filtering out item specific updates. (Possible values - call, activity, plannedActivity, change, note, deal, file, dealChange, personChange, organizationChange, follower, dealFollower, personFollower, organizationFollower, participant, comment, mailMessage, mailMessageWithAttachment, invoice, document, marketing_campaign_stat, marketing_status_change).\n\ntry {\n    $result = $apiInstance->getDealUpdates($id, $start, $limit, $all_changes, $items);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling DealsApi->getDealUpdates: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Follower to an Organization using Pipedrive PHP SDK\nDESCRIPTION: This code snippet illustrates how to add a user as a follower to an existing organization in Pipedrive via the PHP SDK. It requires the organization ID and a FollowerRequestBody instance describing the follower. The method returns a PostFollower model upon success. Authorization is via API key or OAuth2 token, using the OrganizationsApi addOrganizationFollower() method. The snippet handles exceptions and outputs the API response.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v2/Api/OrganizationsApi.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n$apiInstance = new Pipedrive\\versions\\v2\\Api\\OrganizationsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the organization\n$follower_request_body = new \\Pipedrive\\versions\\v2\\Model\\FollowerRequestBody(); // \\Pipedrive\\versions\\v2\\Model\\FollowerRequestBody\n\ntry {\n    $result = $apiInstance->addOrganizationFollower($id, $follower_request_body);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling OrganizationsApi->addOrganizationFollower: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Organization via Pipedrive API in PHP\nDESCRIPTION: This code snippet illustrates how to delete an organization in Pipedrive using the PHP client library. It configures API key or OAuth2 authentication, initializes the OrganizationsApi, and then calls the deleteOrganization method with the organization ID. The organization is marked as deleted and will be permanently removed after 30 days. It requires the Pipedrive PHP client library, a valid API key or OAuth2 token, and an organization ID.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/OrganizationsApi.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\OrganizationsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the organization\n\ntry {\n    $result = $apiInstance->deleteOrganization($id);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling OrganizationsApi->deleteOrganization: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Getting Current Authorized User Data with Pipedrive Users API in PHP\nDESCRIPTION: Retrieves detailed information about the currently authorized user, including associated company data such as company ID, name, and domain, using the Pipedrive Users API. No input parameters are required for this operation. Supports API key and OAuth2 authentication methods. Demonstrates configuration of the client, invoking the method, and handling possible exceptions.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/UsersApi.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\UsersApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n\ntry {\n    $result = $apiInstance->getCurrentUser();\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling UsersApi->getCurrentUser: ', $e->getMessage(), PHP_EOL;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving Deal Updates - PHP\nDESCRIPTION: This snippet provides an example of how to list updates about a deal using the `getDealUpdates()` function. However, the provided code for this function is not complete. The function is expected to take parameters like deal ID, pagination parameters (start, limit), `all_changes` and `items`. It requires authentication and utilizes the Pipedrive PHP client library and GuzzleHttp client.  A proper implementation would initialize the API client, configure authorization with an API key or OAuth2 token, and call `getDealUpdates()` with relevant parameters to fetch and display the updates.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/DealsApi.md#_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\DealsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the deal\n$start = 0; // int | Pagination start\n$limit = 56; // int | Items shown per page\n$all_changes = true; // bool | Whether to include all changes or not\n$items = []; // array[] | The list of items\n\ntry {\n    $result = $apiInstance->getDealUpdates($id, $start, $limit, $all_changes, $items);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling DealsApi->getDealUpdates: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Project Activities with Pipedrive API in PHP\nDESCRIPTION: This code snippet retrieves activities associated with a specific project ID using the Pipedrive API. It configures API key or OAuth2 authentication, instantiates the `ProjectsApi` class, and calls the `getProjectActivities` method. The `id` parameter specifies the target project.  Error handling is included to catch and display exceptions during the API call.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/ProjectsApi.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\ProjectsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the project\n\ntry {\n    $result = $apiInstance->getProjectActivities($id);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling ProjectsApi->getProjectActivities: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Project Template via Pipedrive PHP Client\nDESCRIPTION: This PHP snippet demonstrates how to fetch details of a specific project template using the Pipedrive PHP client library. Dependencies include installing the pipedrive/client-php package and GuzzleHttp, as well as having either an API key or OAuth2 access token for authentication. The function requires an integer ID for the project template and returns a GetProjectTemplateResponse object; errors are handled via Exception blocks, and the script expects PHP >= 7.2. The code also shows how to optionally set an API key prefix (e.g., Bearer) if needed.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/ProjectTemplatesApi.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\ProjectTemplatesApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the project template\n\ntry {\n    $result = $apiInstance->getProjectTemplate($id);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling ProjectTemplatesApi->getProjectTemplate: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Lead using Pipedrive PHP Client\nDESCRIPTION: Illustrates how to delete a specific lead by its ID using the `deleteLead` method. Requires authentication (API key or OAuth2) and the lead's unique ID as input. Returns a `GetLeadIdResponse` object containing the ID of the deleted lead upon success.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/LeadsApi.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ndeleteLead($id): \\Pipedrive\\versions\\v1\\Model\\GetLeadIdResponse\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\LeadsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 'id_example'; // string | The ID of the lead\n\ntry {\n    $result = $apiInstance->deleteLead($id);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling LeadsApi->deleteLead: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Follower to a Product in PHP\nDESCRIPTION: This snippet shows how to add a follower to a specific product using `addProductFollower()`. It requires the product's ID and a `FollowerRequestBody` to specify the user to be added as a follower. The method returns a `PostFollower` object upon success.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v2/Api/ProductsApi.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v2\\Api\\ProductsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the product\n$follower_request_body = new \\Pipedrive\\versions\\v2\\Model\\FollowerRequestBody(); // \\Pipedrive\\versions\\v2\\Model\\FollowerRequestBody\n\ntry {\n    $result = $apiInstance->addProductFollower($id, $follower_request_body);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling ProductsApi->addProductFollower: ', $e->getMessage(), PHP_EOL;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Searching Products with Pipedrive API in PHP\nDESCRIPTION: This code snippet demonstrates how to search for products using the Pipedrive API. It configures the API key or OAuth2 access token, sets search parameters such as the search term, fields to search, and pagination limits.  It requires the Pipedrive PHP client library and Guzzle HTTP client. The output is the search result from the API.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v2/Api/ProductsApi.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v2\\Api\\ProductsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$term = 'term_example'; // string | The search term to look for. Minimum 2 characters (or 1 if using `exact_match`). Please note that the search term has to be URL encoded.\n$fields = 'fields_example'; // string | A comma-separated string array. The fields to perform the search from. Defaults to all of them. Only the following custom field types are searchable: `address`, `varchar`, `text`, `varchar_auto`, `double`, `monetary` and `phone`. Read more about searching by custom fields <a href=\\\"https://support.pipedrive.com/en/article/search-finding-what-you-need#searching-by-custom-fields\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">here</a>.\n$exact_match = True; // bool | When enabled, only full exact matches against the given term are returned. It is <b>not</b> case sensitive.\n$include_fields = 'include_fields_example'; // string | Supports including optional fields in the results which are not provided by default\n$limit = 100; // int | For pagination, the limit of entries to be returned. If not provided, 100 items will be returned. Please note that a maximum value of 500 is allowed.\n$cursor = 'cursor_example'; // string | For pagination, the marker (an opaque string value) representing the first item on the next page\n\ntry {\n    $result = $apiInstance->searchProducts($term, $fields, $exact_match, $include_fields, $limit, $cursor);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling ProductsApi->searchProducts: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Deal Details with Pipedrive PHP SDK\nDESCRIPTION: Retrieves details of a specified deal from Pipedrive using the getDeal method of the DealsApi in PHP. This snippet allows you to include additional fields and specific custom fields, with a maximum of 15 allowed, by providing comma-separated lists. Input parameters include deal ID (integer), include_fields (string, optional), and custom_fields (string, optional). Requires pipedrive/client-php, an API key or OAuth2 token, and optionally a custom Guzzle client. Returns a PostPatchGetDeal object. Handles exceptions if the API call fails.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v2/Api/DealsApi.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n$apiInstance = new Pipedrive\\versions\\v2\\Api\\DealsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the deal\n$include_fields = 'include_fields_example'; // string | Optional comma separated string array of additional fields to include\n$custom_fields = 'custom_fields_example'; // string | Optional comma separated string array of custom fields keys to include. If you are only interested in a particular set of custom fields, please use this parameter for faster results and smaller response.<br/>A maximum of 15 keys is allowed.\n\ntry {\n    $result = $apiInstance->getDeal($id, $include_fields, $custom_fields);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling DealsApi->getDeal: ', $e->getMessage(), PHP_EOL;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Adding an Organization using Pipedrive PHP SDK\nDESCRIPTION: This snippet demonstrates how to add a new organization using the Pipedrive PHP SDK. It requires setting API key or OAuth2 token for authorization and uses the OrganizationsApi class to invoke addOrganization(), passing an OrganizationRequestBody model instance as input. The method returns a PostPatchGetOrganization model with details of the created organization. The snippet includes error handling and prints the API response.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v2/Api/OrganizationsApi.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n$apiInstance = new Pipedrive\\versions\\v2\\Api\\OrganizationsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$organization_request_body = new \\Pipedrive\\versions\\v2\\Model\\OrganizationRequestBody(); // \\Pipedrive\\versions\\v2\\Model\\OrganizationRequestBody\n\ntry {\n    $result = $apiInstance->addOrganization($organization_request_body);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling OrganizationsApi->addOrganization: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Obtaining User Consent for OAuth 2.0 Authorization in Pipedrive PHP Client\nDESCRIPTION: Code snippet for redirecting the user to the Pipedrive authorization page to obtain consent for OAuth 2.0 authentication.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v2/README.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n$authUrl = $config->getAuthorizationPageUrl();\nheader('Location: ' . filter_var($authUrl, FILTER_SANITIZE_URL));\n```\n\n----------------------------------------\n\nTITLE: Listing All Products with Filters and Sorting in Pipedrive PHP SDK\nDESCRIPTION: This PHP example demonstrates fetching a list of all products with optional filters such as owner ID, specific IDs, filters, pagination, sorting field, and direction, as well as custom fields. It showcases configuring API credentials and calling the getProducts method with multiple optional parameters for precise data retrieval.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v2/Api/ProductsApi.md#_snippet_15\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n$apiInstance = new Pipedrive\\versions\\v2\\Api\\ProductsApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n$owner_id = 56; // int\n$ids = 'ids_example'; // string\n$filter_id = 56; // int\n$cursor = 'cursor_example'; // string\n$limit = 100; // int\n$sort_by = 'id'; // string\n$sort_direction = 'asc'; // string\n$custom_fields = 'custom_fields_example'; // string\n\ntry {\n    $result = $apiInstance->getProducts($owner_id, $ids, $filter_id, $cursor, $limit, $sort_by, $sort_direction, $custom_fields);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling ProductsApi->getProducts: ', $e->getMessage(), PHP_EOL;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Adding a Product using Pipedrive PHP SDK\nDESCRIPTION: Example code demonstrating how to add a new product to the Pipedrive Products inventory using the PHP SDK. Requires authentication via API key or OAuth2 token and uses the addProduct method.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/ProductsApi.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\ProductsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$add_product_request_body = new \\Pipedrive\\versions\\v1\\Model\\AddProductRequestBody(); // \\Pipedrive\\versions\\v1\\Model\\AddProductRequestBody\n\ntry {\n    $result = $apiInstance->addProduct($add_product_request_body);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling ProductsApi->addProduct: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Recent Changes from Pipedrive API using PHP\nDESCRIPTION: This snippet demonstrates how to configure API key or OAuth2 authorization to authenticate with the Pipedrive API, create an instance of the RecentsApi client, and call the getRecents method. The method fetches recent updates after a given UTC timestamp, supports optional filtering by item types, and handles pagination via start and limit parameters. Required dependencies include the Pipedrive PHP SDK and GuzzleHttp client. Inputs include since_timestamp (string, UTC timestamp), items (optional filter string), start (int, pagination start), and limit (int, items per page). The output is a GetRecents model object containing recent changes data. Exception handling is included to catch API call errors.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/RecentsApi.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\RecentsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$since_timestamp = 'since_timestamp_example'; // string | The timestamp in UTC. Format: YYYY-MM-DD HH:MM:SS.\n$items = 'items_example'; // string | Multiple selection of item types to include in the query (optional)\n$start = 0; // int | Pagination start\n$limit = 56; // int | Items shown per page\n\ntry {\n    $result = $apiInstance->getRecents($since_timestamp, $items, $start, $limit);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling RecentsApi->getRecents: ', $e->getMessage(), PHP_EOL;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Updating a Note in PHP\nDESCRIPTION: This snippet illustrates how to update an existing note within the Pipedrive system using the PHP API client. The process involves setting up authorization (API key or OAuth2), instantiating the NotesApi, and using the `updateNote` method. The ID of the note to be updated and a `Note` object with the new data are required parameters. Error handling via a try-catch block is included.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/NotesApi.md#_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\n```php\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\NotesApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the note\n$note = new \\Pipedrive\\versions\\v1\\Model\\Note(); // \\Pipedrive\\versions\\v1\\Model\\Note\n\ntry {\n    $result = $apiInstance->updateNote($id, $note);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling NotesApi->updateNote: ', $e->getMessage(), PHP_EOL;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Project Board via Pipedrive PHP Client\nDESCRIPTION: This PHP example shows how to fetch information about a particular project board by its integer ID using the pipedrive/client-php library. It requires either an API key or an OAuth2 access token for authentication, with optional configuration for API key prefix. The snippet instantiates the API client, sends the request, and outputs the result as a GetProjectBoardResponse object, handling any exceptions thrown during the process.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/ProjectTemplatesApi.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\ProjectTemplatesApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the project board\n\ntry {\n    $result = $apiInstance->getProjectsBoard($id);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling ProjectTemplatesApi->getProjectsBoard: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Goal via Pipedrive API in PHP\nDESCRIPTION: This snippet shows how to delete an existing goal using the Pipedrive API with the PHP client. It initializes the API client with API key or OAuth2 authentication, sets the ID of the goal to be deleted, and then calls the `deleteGoal` method. Error handling is implemented to manage any exceptions that occur during the API call. Requires the Pipedrive PHP client library and Guzzle HTTP client.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/GoalsApi.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\GoalsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 'id_example'; // string | The ID of the goal\n\ntry {\n    $result = $apiInstance->deleteGoal($id);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling GoalsApi->deleteGoal: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Fetching All Activities Collection (BETA) with Pipedrive API\nDESCRIPTION: This snippet illustrates how to retrieve all activities from the Pipedrive API using the `getActivitiesCollection` method (BETA endpoint). It demonstrates API key and OAuth2 configuration, along with optional parameters like cursor for pagination, limit, since and until for date range filtering, user ID, done status, and activity type. It handles exceptions and is intended for global admins due to permission constraints. Requires the Pipedrive PHP client library and Guzzle HTTP client.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/ActivitiesApi.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\ActivitiesApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$cursor = 'cursor_example'; // string | For pagination, the marker (an opaque string value) representing the first item on the next page\n$limit = 100; // int | For pagination, the limit of entries to be returned. If not provided, 100 items will be returned. Please note that a maximum value of 500 is allowed.\n$since = 'since_example'; // string | The time boundary that points to the start of the range of data. Datetime in ISO 8601 format. E.g. 2022-11-01 08:55:59. Operates on the `update_time` field.\n$until = 'until_example'; // string | The time boundary that points to the end of the range of data. Datetime in ISO 8601 format. E.g. 2022-11-01 08:55:59. Operates on the `update_time` field.\n$user_id = 56; // int | The ID of the user whose activities will be fetched. If omitted, all activities are returned.\n$done = True; // bool | Whether the activity is done or not. `false` = Not done, `true` = Done. If omitted, returns both done and not done activities.\n$type = 'type_example'; // string | The type of the activity, can be one type or multiple types separated by a comma. This is in correlation with the `key_string` parameter of ActivityTypes.\n\ntry {\n    $result = $apiInstance->getActivitiesCollection($cursor, $limit, $since, $until, $user_id, $done, $type);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling ActivitiesApi->getActivitiesCollection: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Complete OAuth Implementation - Main Page (index.php)\nDESCRIPTION: Complete example of a main page that checks for an existing token, uses it to make API calls, or redirects to the authorization page if no token exists.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v2/README.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nuse Pipedrive\\versions\\v2\\Api\\DealsApi;\nuse Pipedrive\\versions\\v2\\Configuration;\n\nrequire_once('../../sdks/php/vendor/autoload.php');\n\nsession_start();\n\n$config = (new Pipedrive\\versions\\v2\\Configuration());\n$config->setOauthRedirectUri('http://' . $_SERVER['HTTP_HOST'] . '/authcallback.php');\n$config->setClientSecret('YOUR_CLIENT_SECRET');\n$config->setClientId('YOUR_CLIENT_ID');\n\n//$usersApiInstance = new UsersApi(null, $config);\n$dealsApiInstance = new DealsApi(null, $config);\n\n// check if a token is available\nif (isset($_SESSION['token']) && $_SESSION['token']) {\n    // set access token in configuration\n    $config->updateOAuthRelatedFields($_SESSION['token']);\n\n    try {\n        $dealsResponse = $dealsApiInstance->getDeals();\n        echo '<pre>';\n        print_r($dealsResponse);\n        echo '</pre>';\n    } catch (Exception $e) {\n        echo 'Exception when trying to get deals data', $e, PHP_EOL;\n    }\n} else {\n    header('Location: ' . filter_var($config->getAuthorizationPageUrl(), FILTER_SANITIZE_URL));\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Deal Changelog - PHP\nDESCRIPTION: This snippet demonstrates how to retrieve the changelog of participants associated with a deal using the `getDealParticipantsChangelog()` function. It uses cursor-based pagination. It requires the deal ID, limit and cursor. Authentication using API key or OAuth2 access token is required, similarly to the previous example. The example initializes the API client, sets the API key (or OAuth2 token), and then calls the function with a sample deal ID and cursor to display the results. It depends on the Pipedrive PHP client library, GuzzleHttp client and `YOUR_API_KEY` or `YOUR_ACCESS_TOKEN` being replaced with actual values.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/DealsApi.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\DealsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the deal\n$limit = 56; // int | Items shown per page\n$cursor = 'cursor_example'; // string | For pagination, the marker (an opaque string value) representing the first item on the next page\n\ntry {\n    $result = $apiInstance->getDealParticipantsChangelog($id, $limit, $cursor);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling DealsApi->getDealParticipantsChangelog: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Call Log Using Pipedrive CallLogsApi in PHP\nDESCRIPTION: Demonstrates how to create and add a new call log to Pipedrive via the CallLogsApi's addCallLog method. Requires instantiating the API client with authentication (API key or OAuth2) and preparing a CallLogObject model as input. The method sends a POST request with 'application/json' content type and returns a CallLogResponse200 model containing the created call log details. Proper exception handling is included to catch API communication errors.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/CallLogsApi.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\CallLogsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$call_log_object = new \\Pipedrive\\versions\\v1\\Model\\CallLogObject(); // \\Pipedrive\\versions\\v1\\Model\\CallLogObject\n\ntry {\n    $result = $apiInstance->addCallLog($call_log_object);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling CallLogsApi->addCallLog: ', $e->getMessage(), PHP_EOL;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Updating a Person in Pipedrive using PHP SDK\nDESCRIPTION: Example code demonstrating how to update the properties of a person record in Pipedrive using the updatePerson method from the PersonsApi class. The example initializes the API client with both API key and OAuth2 authentication options, then makes a request to update a person with a specified ID.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v2/Api/PersonsApi.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v2\\Api\\PersonsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the person\n$person_request_body = new \\Pipedrive\\versions\\v2\\Model\\PersonRequestBody(); // \\Pipedrive\\versions\\v2\\Model\\PersonRequestBody\n\ntry {\n    $result = $apiInstance->updatePerson($id, $person_request_body);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling PersonsApi->updatePerson: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Activities using Pipedrive API v2 (PHP)\nDESCRIPTION: This snippet demonstrates fetching multiple activities using the `getActivities` method. It covers authentication configuration and `ActivitiesApi` instantiation. The example shows how to use various optional parameters for filtering (e.g., `filter_id`, `ids`, `owner_id`, `deal_id`, `person_id`, `org_id`, `updated_since`), sorting (`sort_by`, `sort_direction`), selecting fields (`include_fields`), and pagination (`limit`, `cursor`). The fetched activities are returned in the result, and potential exceptions are caught.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v2/Api/ActivitiesApi.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v2\\Api\\ActivitiesApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$filter_id = 56; // int | If supplied, only activities matching the specified filter are returned\n$ids = 'ids_example'; // string | Optional comma separated string array of up to 100 entity ids to fetch. If filter_id is provided, this is ignored. If any of the requested entities do not exist or are not visible, they are not included in the response.\n$owner_id = 56; // int | If supplied, only activities owned by the specified user are returned. If filter_id is provided, this is ignored.\n$deal_id = 56; // int | If supplied, only activities linked to the specified deal are returned. If filter_id is provided, this is ignored.\n$lead_id = 'lead_id_example'; // string | If supplied, only activities linked to the specified lead are returned. If filter_id is provided, this is ignored.\n$person_id = 56; // int | If supplied, only activities whose primary participant is the given person are returned. If filter_id is provided, this is ignored.\n$org_id = 56; // int | If supplied, only activities linked to the specified organization are returned. If filter_id is provided, this is ignored.\n$updated_since = 'updated_since_example'; // string | If set, only activities with an `update_time` later than or equal to this time are returned. In RFC3339 format, e.g. 2025-01-01T10:20:00Z.\n$updated_until = 'updated_until_example'; // string | If set, only activities with an `update_time` earlier than this time are returned. In RFC3339 format, e.g. 2025-01-01T10:20:00Z.\n$sort_by = 'id'; // string | The field to sort by. Supported fields: `id`, `update_time`, `add_time`.\n$sort_direction = 'asc'; // string | The sorting direction. Supported values: `asc`, `desc`.\n$include_fields = 'include_fields_example'; // string | Optional comma separated string array of additional fields to include\n$limit = 100; // int | For pagination, the limit of entries to be returned. If not provided, 100 items will be returned. Please note that a maximum value of 500 is allowed.\n$cursor = 'cursor_example'; // string | For pagination, the marker (an opaque string value) representing the first item on the next page\n\ntry {\n    $result = $apiInstance->getActivities($filter_id, $ids, $owner_id, $deal_id, $lead_id, $person_id, $org_id, $updated_since, $updated_until, $sort_by, $sort_direction, $include_fields, $limit, $cursor);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling ActivitiesApi->getActivities: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Generating OAuth 2.0 Authorization URL (PHP)\nDESCRIPTION: Demonstrates how to obtain the Pipedrive authorization URL to redirect the user for granting consent. It uses the `getAuthorizationPageUrl()` method on the previously configured Configuration object.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/README.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$authUrl = $config->getAuthorizationPageUrl();\nheader('Location: ' . filter_var($authUrl, FILTER_SANITIZE_URL));\n```\n\n----------------------------------------\n\nTITLE: Retrieving Organization Details Using Pipedrive API in PHP\nDESCRIPTION: This snippet shows how to fetch detailed information for a single organization by calling getOrganization on the OrganizationsApi client. It requires the organization ID as input and returns an OrganizationDetailsGetResponse object that includes additional fields not present in bulk queries and hashed custom fields. The snippet includes configuration for API key or OAuth2 authorization and exception handling for request errors.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/OrganizationsApi.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\OrganizationsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the organization\n\ntry {\n    $result = $apiInstance->getOrganization($id);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling OrganizationsApi->getOrganization: ', $e->getMessage(), PHP_EOL;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Fetching All Persons with Filters Using Pipedrive API in PHP\nDESCRIPTION: This snippet provides a PHP example of retrieving a list of persons from the Pipedrive system using the getPersons method of the Persons API. It supports optional filtering by user ownership, filter ID, first character of the person's name, pagination via start and limit parameters, and sorting order. Authentication using API key or OAuth2 token is configured before instantiating the API client. The call returns a GetAllPersonsResponse representing the requested persons' data. Errors during the API call are handled with exception catching.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/PersonsApi.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\PersonsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$user_id = 56; // int | If supplied, only persons owned by the given user will be returned. However, `filter_id` takes precedence over `user_id` when both are supplied.\n$filter_id = 56; // int | The ID of the filter to use\n$first_char = 'first_char_example'; // string | If supplied, only persons whose name starts with the specified letter will be returned (case-insensitive)\n$start = 0; // int | Pagination start\n$limit = 56; // int | Items shown per page\n$sort = 'sort_example'; // string | The field names and sorting mode separated by a comma (`field_name_1 ASC`, `field_name_2 DESC`). Only first-level field keys are supported (no nested keys).\n\ntry {\n    $result = $apiInstance->getPersons($user_id, $filter_id, $first_char, $start, $limit, $sort);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling PersonsApi->getPersons: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Permissions with Pipedrive PHP Client - PHP\nDESCRIPTION: This snippet shows how to list aggregated user permissions across all assigned permission sets using the Pipedrive PHP API client. It includes API key and OAuth2 configuration, UsersApi instantiation, supplying a user ID, and calling getUserPermissions. You must have the pipedrive/client-php library and appropriate credentials. The required $id parameter specifies the user, and output is a \\Pipedrive\\versions\\v1\\Model\\UserPermissions object. Error handling and result display are included.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/UsersApi.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\UsersApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the user\n\ntry {\n    $result = $apiInstance->getUserPermissions($id);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling UsersApi->getUserPermissions: ', $e->getMessage(), PHP_EOL;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Bulk Deleting Activity Types via PHP SDK\nDESCRIPTION: This snippet illustrates how to mark multiple activity types as deleted by passing a comma-separated string of IDs to deleteActivityTypes method. It shows SDK setup, authentication, and handling of bulk delete requests.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/ActivityTypesApi.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\ActivityTypesApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n$ids = '1,2,3'; // string: comma-separated IDs of activity types to delete\n\ntry {\n    $result = $apiInstance->deleteActivityTypes($ids);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling ActivityTypesApi->deleteActivityTypes: ', $e->getMessage(), PHP_EOL;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Adding a Person to Pipedrive - PHP\nDESCRIPTION: This snippet demonstrates how to add a new person using the Pipedrive PHP client library. It requires configuring API key or OAuth2 authorization and providing a PersonRequestBody object with the new person's details. The method returns a PostPatchGetPerson model upon success.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v2/Api/PersonsApi.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v2\\Api\\PersonsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$person_request_body = new \\Pipedrive\\versions\\v2\\Model\\PersonRequestBody(); // \\Pipedrive\\versions\\v2\\Model\\PersonRequestBody\n\ntry {\n    $result = $apiInstance->addPerson($person_request_body);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling PersonsApi->addPerson: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Person Updates Using Pipedrive API in PHP\nDESCRIPTION: This snippet demonstrates how to retrieve updates for a specific person using the Pipedrive Persons API via PHP. It requires setting up authentication using either an API key or OAuth2 access token. The snippet initializes the PersonsApi client and calls getPersonUpdates with parameters for person ID, pagination, inclusion of custom field changes, and filtering specific update items. The expected output is a PersonFlowResponse object containing the updates. It handles exceptions that may occur during the API call.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/PersonsApi.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\PersonsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the person\n$start = 0; // int | Pagination start\n$limit = 56; // int | Items shown per page\n$all_changes = 'all_changes_example'; // string | Whether to show custom field updates or not. 1 = Include custom field changes. If omitted returns changes without custom field updates.\n$items = 'items_example'; // string | A comma-separated string for filtering out item specific updates.\n\ntry {\n    $result = $apiInstance->getPersonUpdates($id, $start, $limit, $all_changes, $items);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling PersonsApi->getPersonUpdates: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Organizations using Pipedrive PHP Client\nDESCRIPTION: Demonstrates how to configure the Pipedrive API v2 client for PHP using either an API key or OAuth2 token, instantiate the OrganizationsApi, and call the getOrganizations method. It shows how to optionally filter by filter_id, ids, owner_id, update timestamps, sort results, include specific fields, and handle pagination using limit and cursor parameters. Includes basic error handling.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v2/Api/OrganizationsApi.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v2\\Api\\OrganizationsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$filter_id = 56; // int | If supplied, only organizations matching the specified filter are returned\n$ids = 'ids_example'; // string | Optional comma separated string array of up to 100 entity ids to fetch. If filter_id is provided, this is ignored. If any of the requested entities do not exist or are not visible, they are not included in the response.\n$owner_id = 56; // int | If supplied, only organization owned by the specified user are returned. If filter_id is provided, this is ignored.\n$updated_since = 'updated_since_example'; // string | If set, only organizations with an `update_time` later than or equal to this time are returned. In RFC3339 format, e.g. 2025-01-01T10:20:00Z.\n$updated_until = 'updated_until_example'; // string | If set, only organizations with an `update_time` earlier than this time are returned. In RFC3339 format, e.g. 2025-01-01T10:20:00Z.\n$sort_by = 'id'; // string | The field to sort by. Supported fields: `id`, `update_time`, `add_time`.\n$sort_direction = 'asc'; // string | The sorting direction. Supported values: `asc`, `desc`.\n$include_fields = 'include_fields_example'; // string | Optional comma separated string array of additional fields to include\n$custom_fields = 'custom_fields_example'; // string | Optional comma separated string array of custom fields keys to include. If you are only interested in a particular set of custom fields, please use this parameter for faster results and smaller response.<br/>A maximum of 15 keys is allowed.\n$limit = 100; // int | For pagination, the limit of entries to be returned. If not provided, 100 items will be returned. Please note that a maximum value of 500 is allowed.\n$cursor = 'cursor_example'; // string | For pagination, the marker (an opaque string value) representing the first item on the next page\n\ntry {\n    $result = $apiInstance->getOrganizations($filter_id, $ids, $owner_id, $updated_since, $updated_until, $sort_by, $sort_direction, $include_fields, $custom_fields, $limit, $cursor);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling OrganizationsApi->getOrganizations: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Exchanging OAuth 2.0 Authorization Code for Token (PHP)\nDESCRIPTION: Illustrates how to use the authorization code, received as a query parameter (`$_GET['code']`) after the user grants consent, to authorize the client. The `authorize()` method on the Configuration object exchanges the code for an access token.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/README.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\ntry {\n    $config->authorize($_GET['code']);\n} catch (Exception $ex) {\n    // handle exception\n}\n```\n\n----------------------------------------\n\nTITLE: Listing All Tasks with Filters Using Pipedrive API in PHP\nDESCRIPTION: This snippet retrieves a list of tasks using the getTasks method with support for cursor-based pagination and various filtering options including assignee ID, project ID, parent task ID, and completion status ('done'). Parameters such as cursor marker, limit of tasks, and boolean flags control the query. The method returns a GetTasksResponse model. The client requires API key or OAuth2 authorization and uses GuzzleHttp for HTTP requests.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/TasksApi.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\TasksApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$cursor = 'cursor_example'; // string | For pagination, the marker (an opaque string value) representing the first item on the next page\n$limit = 500; // int | For pagination, the limit of entries to be returned. If not provided, up to 500 items will be returned.\n$assignee_id = 56; // int | If supplied, only tasks that are assigned to this user are returned\n$project_id = 56; // int | If supplied, only tasks that are assigned to this project are returned\n$parent_task_id = 56; // int | If `null` is supplied then only parent tasks are returned. If integer is supplied then only subtasks of a specific task are returned. By default all tasks are returned.\n$done = new \\Pipedrive\\versions\\v1\\Model\\\\Pipedrive\\versions\\v1\\Model\\NumberBoolean(); // \\Pipedrive\\versions\\v1\\Model\\NumberBoolean | Whether the task is done or not. `0` = Not done, `1` = Done. If not omitted then returns both done and not done tasks.\n\ntry {\n    $result = $apiInstance->getTasks($cursor, $limit, $assignee_id, $project_id, $parent_task_id, $done);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling TasksApi->getTasks: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Person Details via Pipedrive API in PHP\nDESCRIPTION: This code snippet illustrates fetching a person's full details using the Pipedrive PHP SDK. It requires the person's ID as input and returns detailed information, including some custom fields and marketing status if applicable. Authentication must be set with an API key or OAuth2 token. The example showcases error handling for failed requests and requires the Pipedrive PHP client, the target person's ID, and valid credentials.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/PersonsApi.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\PersonsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the person\n\ntry {\n    $result = $apiInstance->getPerson($id);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling PersonsApi->getPerson: ', $e->getMessage(), PHP_EOL;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Searching Organizations in Pipedrive using PHP\nDESCRIPTION: This code snippet demonstrates how to search organizations in Pipedrive using the PHP client library. It configures API key or OAuth2 authorization, creates an instance of the OrganizationsApi, and calls the searchOrganization method with specified search terms, fields, and pagination parameters.  It requires the Pipedrive PHP client library and Guzzle HTTP client.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/OrganizationsApi.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\OrganizationsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$term = 'term_example'; // string | The search term to look for. Minimum 2 characters (or 1 if using `exact_match`). Please note that the search term has to be URL encoded.\n$fields = 'fields_example'; // string | A comma-separated string array. The fields to perform the search from. Defaults to all of them. Only the following custom field types are searchable: `address`, `varchar`, `text`, `varchar_auto`, `double`, `monetary` and `phone`. Read more about searching by custom fields <a href=\\\"https://support.pipedrive.com/en/article/search-finding-what-you-need#searching-by-custom-fields\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">here</a>.\n$exact_match = True; // bool | When enabled, only full exact matches against the given term are returned. It is <b>not</b> case sensitive.\n$start = 0; // int | Pagination start. Note that the pagination is based on main results and does not include related items when using `search_for_related_items` parameter.\n$limit = 56; // int | Items shown per page\n\ntry {\n    $result = $apiInstance->searchOrganization($term, $fields, $exact_match, $start, $limit);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling OrganizationsApi->searchOrganization: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Searching Items by Field with Pipedrive API in PHP\nDESCRIPTION: This snippet demonstrates how to search for items by a specific field using the Pipedrive API in PHP. It configures the API key and OAuth2, then uses the `searchItemByField` method to perform the search.  It requires the Pipedrive PHP client library and Guzzle HTTP client. The parameters include the search term, field type, field key, and optional pagination and matching parameters.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/ItemSearchApi.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\ItemSearchApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$term = 'term_example'; // string | The search term to look for. Minimum 2 characters (or 1 if using `exact_match`). Please note that the search term has to be URL encoded.\n$field_type = 'field_type_example'; // string | The type of the field to perform the search from\n$field_key = 'field_key_example'; // string | The key of the field to search from. The field key can be obtained by fetching the list of the fields using any of the fields' API GET methods (dealFields, personFields, etc.). Only the following custom field types are searchable: `address`, `varchar`, `text`, `varchar_auto`, `double`, `monetary` and `phone`. Read more about searching by custom fields <a href=\\\"https://support.pipedrive.com/en/article/search-finding-what-you-need#searching-by-custom-fields\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">here</a>.\n$exact_match = false; // bool | When enabled, only full exact matches against the given term are returned. The search <b>is</b> case sensitive.\n$return_item_ids = True; // bool | Whether to return the IDs of the matching items or not. When not set or set to `0` or `false`, only distinct values of the searched field are returned. When set to `1` or `true`, the ID of each found item is returned.\n$start = 56; // int | Pagination start\n$limit = 56; // int | Items shown per page\n\ntry {\n    $result = $apiInstance->searchItemByField($term, $field_type, $field_key, $exact_match, $return_item_ids, $start, $limit);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling ItemSearchApi->searchItemByField: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Listing User Role Assignments with Pipedrive PHP Client - PHP\nDESCRIPTION: This example lists all role assignments for a given user using the Pipedrive PHP API client. It demonstrates authentication configuration (API key or OAuth2), instantiating UsersApi, and fetching assignments using getUserRoleAssignments with parameters for user ID, pagination start, and limit. Dependencies include pipedrive/client-php and Guzzle. The API returns a \\Pipedrive\\versions\\v1\\Model\\GetRoleAssignments object; parameters $id (required), $start, and $limit control which roles are retrieved. Includes error handling.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/UsersApi.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\UsersApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the user\n$start = 0; // int | Pagination start\n$limit = 56; // int | Items shown per page\n\ntry {\n    $result = $apiInstance->getUserRoleAssignments($id, $start, $limit);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling UsersApi->getUserRoleAssignments: ', $e->getMessage(), PHP_EOL;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Listing Files Attached to a Product with Pipedrive Client - PHP\nDESCRIPTION: This snippet shows how to list all files attached to a product by making an API call through the Pipedrive PHP client. Required parameters include the product ID, start offset, limit (maximum 100 per request), and an optional sort field such as 'id' or 'update_time'. API key or OAuth2 configuration is needed for authentication. Errors are caught via exception handling. Output is a ListProductFilesResponse object.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/ProductsApi.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\ProductsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the product\n$start = 0; // int | Pagination start\n$limit = 56; // int | Items shown per page. Please note that a maximum value of 100 is allowed.\n$sort = 'sort_example'; // string | Supported fields: `id`, `update_time`\n\ntry {\n    $result = $apiInstance->getProductFiles($id, $start, $limit, $sort);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling ProductsApi->getProductFiles: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Get Subscription Details in Pipedrive using PHP\nDESCRIPTION: This code snippet shows how to retrieve the details of a subscription using its ID with the Pipedrive API in PHP. It initializes the API client with authentication (API key or OAuth2), then calls the `getSubscription` method with the subscription ID. The retrieved subscription details are then printed. Requires the Pipedrive PHP client library and GuzzleHttp.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/SubscriptionsApi.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\SubscriptionsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the subscription\n\ntry {\n    $result = $apiInstance->getSubscription($id);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling SubscriptionsApi->getSubscription: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Role Settings in Pipedrive using PHP Client Library\nDESCRIPTION: This code demonstrates how to fetch the visibility settings of a specific role in Pipedrive. It initializes the API client with authentication, creates a RolesApi instance, and calls the getRoleSettings method with a role ID to retrieve all visibility settings.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/RolesApi.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\RolesApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the role\n\ntry {\n    $result = $apiInstance->getRoleSettings($id);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling RolesApi->getRoleSettings: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching User Call Logs using Pipedrive PHP Client\nDESCRIPTION: This PHP script demonstrates how to retrieve a list of call logs associated with the authenticated user using the Pipedrive PHP client library. It shows how to configure the client with either an API key or an OAuth2 access token, instantiate the `CallLogsApi`, and call the `getUserCallLogs` method with pagination parameters (`start`, `limit`). The script includes basic error handling using a try-catch block and prints the API response or any exception message. Dependencies include the Composer autoloader, the Pipedrive client library, and GuzzleHttp\\Client (though the default client can be used).\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/CallLogsApi.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\CallLogsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$start = 0; // int | Pagination start\n$limit = 56; // int | For pagination, the limit of entries to be returned. The upper limit is 50.\n\ntry {\n    $result = $apiInstance->getUserCallLogs($start, $limit);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling CallLogsApi->getUserCallLogs: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Searching Leads API GET Endpoint\nDESCRIPTION: Searches leads. This API call uses the GET method and targets the `/leads/search` endpoint.  Input consists of the search query and filtering options.  The output contains the search results.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/README.md#_snippet_26\n\nLANGUAGE: N/A\nCODE:\n```\nN/A\n```\n\n----------------------------------------\n\nTITLE: Adding a Task Using Pipedrive API with PHP\nDESCRIPTION: This snippet demonstrates how to create a new task in Pipedrive by calling the addTask method from the TasksApi class. It requires an authorized API client configured with an API token or OAuth2 access token. The key parameter is task_post_object, an instance representing the task data to be added. The method returns an AddTaskResponse model representing the newly created task. Uses GuzzleHttp as the HTTP client.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/TasksApi.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\TasksApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$task_post_object = new \\Pipedrive\\versions\\v1\\Model\\TaskPostObject(); // \\Pipedrive\\versions\\v1\\Model\\TaskPostObject\n\ntry {\n    $result = $apiInstance->addTask($task_post_object);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling TasksApi->addTask: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Refreshing Expired OAuth 2.0 Access Token (PHP)\nDESCRIPTION: Shows how to manually refresh an expired OAuth 2.0 access token. It checks the token's expiration time using `getExpiresAt()` against the current time and calls `refreshToken()` on the Configuration object if needed. The SDK also attempts automatic refreshing.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/README.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nif ($configuration->getExpiresAt() < time()) {\n    try {\n        $config->refreshToken();\n    } catch (Exception $ex) {\n        // handle exception\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Lead Search with the Pipedrive PHP Client\nDESCRIPTION: Complete example of searching leads using the Pipedrive PHP client. It demonstrates configuring API key or OAuth2 authentication, instantiating the LeadsApi class, setting search parameters, and handling the response.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v2/Api/LeadsApi.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v2\\Api\\LeadsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$term = 'term_example'; // string | The search term to look for. Minimum 2 characters (or 1 if using `exact_match`). Please note that the search term has to be URL encoded.\n$fields = 'fields_example'; // string | A comma-separated string array. The fields to perform the search from. Defaults to all of them.\n$exact_match = True; // bool | When enabled, only full exact matches against the given term are returned. It is <b>not</b> case sensitive.\n$person_id = 56; // int | Will filter leads by the provided person ID. The upper limit of found leads associated with the person is 2000.\n$organization_id = 56; // int | Will filter leads by the provided organization ID. The upper limit of found leads associated with the organization is 2000.\n$include_fields = 'include_fields_example'; // string | Supports including optional fields in the results which are not provided by default\n$limit = 100; // int | For pagination, the limit of entries to be returned. If not provided, 100 items will be returned. Please note that a maximum value of 500 is allowed.\n$cursor = 'cursor_example'; // string | For pagination, the marker (an opaque string value) representing the first item on the next page\n\ntry {\n    $result = $apiInstance->searchLeads($term, $fields, $exact_match, $person_id, $organization_id, $include_fields, $limit, $cursor);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling LeadsApi->searchLeads: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving all Webhooks with the Pipedrive PHP client\nDESCRIPTION: Example demonstrating how to retrieve all webhooks for a company using the getWebhooks method. Requires configuration of API key or OAuth2 authentication and instantiation of the WebhooksApi class.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/WebhooksApi.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\WebhooksApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n\ntry {\n    $result = $apiInstance->getWebhooks();\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling WebhooksApi->getWebhooks: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a New Legacy Team using Pipedrive PHP SDK\nDESCRIPTION: Demonstrates how to add a new team using the `LegacyTeamsApi::addTeam` method in the Pipedrive PHP SDK. It requires configuring authentication (API key or OAuth2), instantiating the API client with optional custom HTTP client, creating a `CreateTeam` model object, and handling potential exceptions. The `create_team` parameter contains the details of the team to be created.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/LegacyTeamsApi.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\LegacyTeamsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$create_team = new \\Pipedrive\\versions\\v1\\Model\\CreateTeam(); // \\Pipedrive\\versions\\v1\\Model\\CreateTeam\n\ntry {\n    $result = $apiInstance->addTeam($create_team);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling LegacyTeamsApi->addTeam: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Role Details in Pipedrive using PHP Client Library\nDESCRIPTION: This code shows how to fetch details of a specific role in Pipedrive. It initializes the API client with authentication, creates a RolesApi instance, and calls the getRole method with a role ID to retrieve all role information.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/RolesApi.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\RolesApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the role\n\ntry {\n    $result = $apiInstance->getRole($id);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling RolesApi->getRole: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Searching Pipedrive Items via API in PHP\nDESCRIPTION: This PHP snippet demonstrates how to perform a search across multiple Pipedrive item types using the `searchItem` method of the Item Search API. It shows how to include the necessary dependencies, configure authentication using either an API key or OAuth2 token, initialize the API client with an optional custom HTTP client, set various search parameters (term, item types, fields, exact match, pagination), execute the API call, and handle potential exceptions.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/ItemSearchApi.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\ItemSearchApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$term = 'term_example'; // string | The search term to look for. Minimum 2 characters (or 1 if using `exact_match`). Please note that the search term has to be URL encoded.\n$item_types = 'item_types_example'; // string | A comma-separated string array. The type of items to perform the search from. Defaults to all.\n$fields = 'fields_example'; // string | A comma-separated string array. The fields to perform the search from. Defaults to all. Relevant for each item type are:<br> <table> <tr><th><b>Item type</b></th><th><b>Field</b></th></tr> <tr><td>Deal</td><td>`custom_fields`, `notes`, `title`</td></tr> <tr><td>Person</td><td>`custom_fields`, `email`, `name`, `notes`, `phone`</td></tr> <tr><td>Organization</td><td>`address`, `custom_fields`, `name`, `notes`</td></tr> <tr><td>Product</td><td>`code`, `custom_fields`, `name`</td></tr> <tr><td>Lead</td><td>`custom_fields`, `notes`, `email`, `organization_name`, `person_name`, `phone`, `title`</td></tr> <tr><td>File</td><td>`name`</td></tr> <tr><td>Mail attachment</td><td>`name`</td></tr> <tr><td>Project</td><td> `custom_fields`, `notes`, `title`, `description` </td></tr> </table> <br> Only the following custom field types are searchable: `address`, `varchar`, `text`, `varchar_auto`, `double`, `monetary` and `phone`. Read more about searching by custom fields <a href=\"https://support.pipedrive.com/en/article/search-finding-what-you-need#searching-by-custom-fields\" target=\"_blank\" rel=\"noopener noreferrer\">here</a>.<br/> When searching for leads, the email, organization_name, person_name, and phone fields will return results only for leads not linked to contacts. For searching leads by person or organization values, please use `search_for_related_items`.\n$search_for_related_items = True; // bool | When enabled, the response will include up to 100 newest related leads and 100 newest related deals for each found person and organization and up to 100 newest related persons for each found organization\n$exact_match = True; // bool | When enabled, only full exact matches against the given term are returned. It is <b>not</b> case sensitive.\n$include_fields = 'include_fields_example'; // string | A comma-separated string array. Supports including optional fields in the results which are not provided by default.\n$start = 0; // int | Pagination start. Note that the pagination is based on main results and does not include related items when using `search_for_related_items` parameter.\n$limit = 56; // int | Items shown per page\n\ntry {\n    $result = $apiInstance->searchItem($term, $item_types, $fields, $search_for_related_items, $exact_match, $include_fields, $start, $limit);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling ItemSearchApi->searchItem: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a new Webhook with the Pipedrive PHP client\nDESCRIPTION: Example demonstrating how to create a new webhook using the addWebhook method. Requires configuration of API key or OAuth2 authentication and instantiation of the WebhooksApi class.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/WebhooksApi.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\WebhooksApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$add_webhook_request = new \\Pipedrive\\versions\\v1\\Model\\AddWebhookRequest(); // \\Pipedrive\\versions\\v1\\Model\\AddWebhookRequest\n\ntry {\n    $result = $apiInstance->addWebhook($add_webhook_request);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling WebhooksApi->addWebhook: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Downloading a File from Pipedrive in PHP\nDESCRIPTION: Initializes a file download from Pipedrive using a file ID. Returns the file content as a string which can be saved to a local file or processed further.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/FilesApi.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\ndownloadFile($id): string\n```\n\n----------------------------------------\n\nTITLE: Searching Products via Pipedrive PHP API\nDESCRIPTION: This example shows how to perform a product search by specifying a search term, optional fields to search within, exact match toggle, additional fields to include, and pagination controls. It utilizes the `searchProducts` method to return matching products in a `ProductSearchResponse` object, facilitating advanced search capabilities with custom field considerations.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/ProductsApi.md#_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\ProductsApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n$term = 'term_example'; // string | Search term\n$fields = 'fields_example'; // string | Fields to search within\n$exact_match = True; // bool | Exact match flag\n$include_fields = 'include_fields_example'; // string | Additional fields to include\n$start = 0; // int | Pagination start\n$limit = 56; // int | Results per page\n\ntry {\n    $result = $apiInstance->searchProducts($term, $fields, $exact_match, $include_fields, $start, $limit);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling ProductsApi->searchProducts: ', $e->getMessage(), PHP_EOL;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Organizations (Cursor-Paginated, BETA) with Pipedrive Client - PHP\nDESCRIPTION: This snippet shows how to use the getOrganizationsCollection method to retrieve organizations with cursor-based pagination, which is currently in BETA and only accessible to global admins. The example uses the pipedrive/client-php library, Guzzle, and supports API key or OAuth2 authentication. Parameters such as cursor, limit, since, until, owner_id, and first_char allow fine-grained control over results, including date ranges and page sizes up to a maximum of 500 per page. The expected output is an InlineResponse200 object. Regular (non-admin) users will receive a 403 error.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/OrganizationsApi.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\OrganizationsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$cursor = 'cursor_example'; // string | For pagination, the marker (an opaque string value) representing the first item on the next page\n$limit = 100; // int | For pagination, the limit of entries to be returned. If not provided, 100 items will be returned. Please note that a maximum value of 500 is allowed.\n$since = 'since_example'; // string | The time boundary that points to the start of the range of data. Datetime in ISO 8601 format. E.g. 2022-11-01 08:55:59. Operates on the `update_time` field.\n$until = 'until_example'; // string | The time boundary that points to the end of the range of data. Datetime in ISO 8601 format. E.g. 2022-11-01 08:55:59. Operates on the `update_time` field.\n$owner_id = 56; // int | If supplied, only organizations owned by the given user will be returned\n$first_char = 'first_char_example'; // string | If supplied, only organizations whose name starts with the specified letter will be returned (case-insensitive)\n\ntry {\n    $result = $apiInstance->getOrganizationsCollection($cursor, $limit, $since, $until, $owner_id, $first_char);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling OrganizationsApi->getOrganizationsCollection: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Organization Relationship API POST Endpoint\nDESCRIPTION: Creates an organization relationship. This API call uses the POST method and targets the `/organizationRelationships` endpoint. Input will likely include details of the relationship to create.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/README.md#_snippet_61\n\nLANGUAGE: N/A\nCODE:\n```\nN/A\n```\n\n----------------------------------------\n\nTITLE: Documenting the FieldsResponseAllOf Data Model in Pipedrive PHP Client\nDESCRIPTION: This snippet details the structure of the FieldsResponseAllOf model, including its properties 'data' and 'additional_data'. The 'data' property is an array of GetField objects representing individual fields, while 'additional_data' contains extra metadata. It serves as part of the response handling in the SDK, facilitating serialization and deserialization of API responses.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Model/FieldsResponseAllOf.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# # FieldsResponseAllOf\n\n## Properties\n\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**data** | [**\\Pipedrive\\versions\\v1\\Model\\GetField[]**](GetField.md) |  |\n**additional_data** | [**\\Pipedrive\\versions\\v1\\Model\\AdditionalData**](AdditionalData.md) |  |\n\n[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)\n```\n\n----------------------------------------\n\nTITLE: Adding a Deal Field in Pipedrive using PHP\nDESCRIPTION: This snippet shows how to add a new deal field using the Pipedrive API and the PHP client library. It configures API key and OAuth2 authorization, creates an instance of the DealFieldsApi, creates a FieldCreateRequest model object, and calls the addDealField method. The example depends on the Pipedrive PHP client library and GuzzleHttp.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/DealFieldsApi.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\DealFieldsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$field_create_request = new \\Pipedrive\\versions\\v1\\Model\\FieldCreateRequest(); // \\Pipedrive\\versions\\v1\\Model\\FieldCreateRequest\n\ntry {\n    $result = $apiInstance->addDealField($field_create_request);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling DealFieldsApi->addDealField: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Deleting a Follower from a Person via Pipedrive API in PHP\nDESCRIPTION: This example shows how to remove a follower from a person using the Pipedrive PHP SDK. It requires both the person ID and the follower relationship ID as parameters. Authentication setup supports both API key and OAuth2 flows. The 'deletePersonFollower' method is used, and the response is handled accordingly; exceptions are caught and displayed if the API call fails.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/PersonsApi.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\PersonsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the person\n$follower_id = 56; // int | The ID of the relationship between the follower and the person\n\ntry {\n    $result = $apiInstance->deletePersonFollower($id, $follower_id);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling PersonsApi->deletePersonFollower: ', $e->getMessage(), PHP_EOL;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Deleting Single Product Field using Pipedrive PHP Client\nDESCRIPTION: This snippet illustrates how to delete a specific product field using its ID via the Pipedrive PHP client. It demonstrates setting up authorization (API key or OAuth2), initializing the API client, and calling the deleteProductField method with the integer ID of the field to be deleted, including error handling.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/ProductFieldsApi.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\ProductFieldsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the product field\n\ntry {\n    $result = $apiInstance->deleteProductField($id);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling ProductFieldsApi->deleteProductField: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Deal Mail Messages Pipedrive PHP\nDESCRIPTION: This snippet demonstrates how to list mail messages associated with a specific Pipedrive deal using the PHP client. It details the steps for configuring API key or OAuth2 authentication, creating a Deals API instance, specifying the deal ID and optional pagination parameters (start, limit), making the API request to retrieve mail messages, displaying the response, and implementing error handling for the API call.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/DealsApi.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\DealsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the deal\n$start = 0; // int | Pagination start\n$limit = 56; // int | Items shown per page\n\ntry {\n    $result = $apiInstance->getDealMailMessages($id, $start, $limit);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling DealsApi->getDealMailMessages: ', $e->getMessage(), PHP_EOL;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Getting User Teams API GET Endpoint\nDESCRIPTION: Gets all teams of a user.  This API call uses the GET method and targets the `/legacyTeams/user/{id}` endpoint, where `{id}` is the unique identifier of the user. The input is the user ID.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/README.md#_snippet_34\n\nLANGUAGE: N/A\nCODE:\n```\nN/A\n```\n\n----------------------------------------\n\nTITLE: PHP Method Signature for Updating Organization Relationships\nDESCRIPTION: Method signature for updating organization relationships in Pipedrive, including the required parameters and return type.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/OrganizationRelationshipsApi.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nupdateOrganizationRelationship($id, $organization_relationship): \\Pipedrive\\versions\\v1\\Model\\OrganizationRelationshipUpdateResponse\n```\n\n----------------------------------------\n\nTITLE: Defining Goal Duration (JSON)\nDESCRIPTION: Example JSON structure for specifying the start and end dates for a Pipedrive goal's duration. Dates must be provided in 'YYYY-MM-DD' format. The 'end' date can optionally be set to 'null' to represent an open-ended, ongoing goal.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Model/NewGoal.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{ \"start\": \"2019-01-01\", \"end\": \"2022-12-31\" }\n```\n\n----------------------------------------\n\nTITLE: Adding Recurring Subscription - Pipedrive API - PHP\nDESCRIPTION: This code snippet demonstrates how to add a recurring subscription using the Pipedrive API. It initializes the API client with authentication, creates a `SubscriptionRecurringCreateRequest` object, and calls the `addRecurringSubscription` method. It requires the Pipedrive PHP client library and either an API key or OAuth2 token for authentication. The function returns a `SubscriptionsIdResponse` object.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/SubscriptionsApi.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\SubscriptionsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$subscription_recurring_create_request = new \\Pipedrive\\versions\\v1\\Model\\SubscriptionRecurringCreateRequest(); // \\Pipedrive\\versions\\v1\\Model\\SubscriptionRecurringCreateRequest\n\ntry {\n    $result = $apiInstance->addRecurringSubscription($subscription_recurring_create_request);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling SubscriptionsApi->addRecurringSubscription: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Retrieving an Activity using Pipedrive API in PHP\nDESCRIPTION: Example of retrieving a specific activity from Pipedrive by its ID. This snippet demonstrates API key or OAuth2 authorization configuration, instantiation of the ActivitiesApi client, and handling the response or exceptions.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/ActivitiesApi.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\ActivitiesApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the activity\n\ntry {\n    $result = $apiInstance->getActivity($id);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling ActivitiesApi->getActivity: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Pipedrive PHP Client with API Token Authentication\nDESCRIPTION: Example of initializing and using the Pipedrive PHP client with a pre-set API token authentication to retrieve activities.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v2/README.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nuse Pipedrive\\versions\\v2\\Configuration;\n\nrequire_once('/path/to/client/vendor/autoload.php');\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n\n$apiInstance = new Pipedrive\\versions\\v2\\Api\\ActivitiesApi(\n// If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n// This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n\ntry {\n    $result = $apiInstance->getActivities();\n    echo '<pre>';\n    print_r($result);\n    echo '</pre>';\n} catch (Exception $e) {\n    echo 'Exception when calling ActivitiesApi->getActivities: ', $e->getMessage(), PHP_EOL;\n}\n\n?>\n```\n\n----------------------------------------\n\nTITLE: Updating Deal Installment using BetaApi in PHP\nDESCRIPTION: This code snippet demonstrates how to update an installment added to a deal using the Pipedrive BetaApi. It requires the deal ID, the installment ID, and a request body. The code configures API key or OAuth2 authorization, initializes the BetaApi client with Guzzle, and calls the updateInstallment method, printing the result or catching exceptions.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v2/Api/BetaApi.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v2\\Api\\BetaApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the deal\n$installment_id = 56; // int | The ID of the installment\n$body = new \\stdClass; // object\n\ntry {\n    $result = $apiInstance->updateInstallment($id, $installment_id, $body);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling BetaApi->updateInstallment: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Getting Roles with RolesApi PHP\nDESCRIPTION: This snippet demonstrates how to retrieve all roles within a company using the `getRoles()` method of the `RolesApi` class. It configures the API key or OAuth2 access token for authorization, sets pagination parameters, and calls the API endpoint. The example also includes error handling for potential exceptions.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/RolesApi.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\RolesApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$start = 0; // int | Pagination start\n$limit = 56; // int | Items shown per page\n\ntry {\n    $result = $apiInstance->getRoles($start, $limit);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling RolesApi->getRoles: ', $e->getMessage(), PHP_EOL;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Specific Note via Pipedrive NotesApi in PHP\nDESCRIPTION: This snippet illustrates fetching the details of a specific note using its ID. It involves including the Composer autoloader, setting up authentication (API Key or OAuth2), and creating an instance of the `NotesApi` client. The `getNote` method is called with the note ID, and the response is printed, with error handling via a try-catch block.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/NotesApi.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\NotesApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the note\n\ntry {\n    $result = $apiInstance->getNote($id);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling NotesApi->getNote: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Options for Set/Enum Product Fields (JSON)\nDESCRIPTION: Example JSON array structure for defining possible options for a ProductField when its 'field_type' is 'set' or 'enum'. Each option object within the array must contain a 'label' key specifying the option's display name.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Model/ProductField.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[{\\\"label\\\":\\\"red\\\"}, {\\\"label\\\":\\\"blue\\\"}, {\\\"label\\\":\\\"lilac\\\"}]\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Deals with Pipedrive API in PHP\nDESCRIPTION: Provides a PHP example for fetching all deals from Pipedrive using the `getDeals` method of the `DealsApi`. The code illustrates setting up authentication, instantiating the client, and utilizing various optional parameters for filtering (`user_id`, `filter_id`, `stage_id`, `status`, `owned_by_you`), pagination (`start`, `limit`), and sorting (`sort`). Error handling is included.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/DealsApi.md#_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\DealsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$user_id = 56; // int | If supplied, only deals matching the given user will be returned. However, `filter_id` and `owned_by_you` takes precedence over `user_id` when supplied.\n$filter_id = 56; // int | The ID of the filter to use\n$stage_id = 56; // int | If supplied, only deals within the given stage will be returned\n$status = 'all_not_deleted'; // string | Only fetch deals with a specific status. If omitted, all not deleted deals are returned. If set to deleted, deals that have been deleted up to 30 days ago will be included.\n$start = 0; // int | Pagination start\n$limit = 56; // int | Items shown per page\n$sort = 'sort_example'; // string | The field names and sorting mode separated by a comma (`field_name_1 ASC`, `field_name_2 DESC`). Only first-level field keys are supported (no nested keys).\n$owned_by_you = new \\Pipedrive\\versions\\v1\\Model\\\\Pipedrive\\versions\\v1\\Model\\NumberBoolean(); // \\Pipedrive\\versions\\v1\\Model\\NumberBoolean | When supplied, only deals owned by you are returned. However, `filter_id` takes precedence over `owned_by_you` when both are supplied.\n\ntry {\n    $result = $apiInstance->getDeals($user_id, $filter_id, $stage_id, $status, $start, $limit, $sort, $owned_by_you);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling DealsApi->getDeals: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting an existing Webhook with the Pipedrive PHP client\nDESCRIPTION: Example showing how to delete a webhook by its ID using the deleteWebhook method. Requires configuration of API key or OAuth2 authentication and instantiation of the WebhooksApi class.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/WebhooksApi.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\WebhooksApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the Webhook to delete\n\ntry {\n    $result = $apiInstance->deleteWebhook($id);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling WebhooksApi->deleteWebhook: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating a Product using Pipedrive PHP Client\nDESCRIPTION: This code snippet demonstrates how to update an existing product by providing its ID and a request body object containing updated product data. The function returns an `UpdateProductResponse` model, representing the result of the update operation. Proper exception handling ensures robustness in case the API call fails.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/ProductsApi.md#_snippet_11\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n// Function signature indicating update operation for a product\nupdateProduct($id, $update_product_request_body): \\Pipedrive\\versions\\v1\\Model\\UpdateProductResponse\n// This function updates the product data for the specified product ID using provided update data object\n// It returns an object containing the update results and confirmation information\n\n```\n\n----------------------------------------\n\nTITLE: Updating a Product via Pipedrive ProductsApi in PHP\nDESCRIPTION: This PHP snippet demonstrates updating a Pipedrive product using the `ProductsApi`. It requires the Pipedrive PHP client library (`vendor/autoload.php`). The code shows how to configure the API client with either an API key or OAuth2 token, instantiate the `ProductsApi` (optionally with a custom Guzzle client), prepare an `UpdateProductRequestBody`, and call the `updateProduct` method with the product ID. The example includes basic error handling using a try-catch block. Replace 'YOUR_API_KEY' or 'YOUR_ACCESS_TOKEN' with actual credentials and populate the `UpdateProductRequestBody` with the desired changes.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/ProductsApi.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\ProductsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the product\n$update_product_request_body = new \\Pipedrive\\versions\\v1\\Model\\UpdateProductRequestBody(); // \\Pipedrive\\versions\\v1\\Model\\UpdateProductRequestBody\n\ntry {\n    $result = $apiInstance->updateProduct($id, $update_product_request_body);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling ProductsApi->updateProduct: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Querying a Mail Message by ID with Pipedrive PHP Client\nDESCRIPTION: This code snippet shows how to fetch information about a specific mail message from Pipedrive using the PHP SDK. It guides through authentication with API key or OAuth2, constructing an API client instance, and using getMailMessage with required 'id' and optional 'include_body' (boolean flag determining if the full message body is returned). The response is a MailMessage model; errors are handled with try/catch. Dependencies include the SDK and an API key or OAuth2 setup.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/MailboxApi.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\MailboxApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the mail message to fetch\n$include_body = new \\Pipedrive\\versions\\v1\\Model\\\\Pipedrive\\versions\\v1\\Model\\NumberBooleanDefault0(); // \\Pipedrive\\versions\\v1\\Model\\NumberBooleanDefault0 | Whether to include the full message body or not. `0` = Don't include, `1` = Include.\n\ntry {\n    $result = $apiInstance->getMailMessage($id, $include_body);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling MailboxApi->getMailMessage: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Note Fields API GET Endpoint\nDESCRIPTION: Gets all note fields. This API call uses the GET method and targets the `/noteFields` endpoint. No specific input is required.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/README.md#_snippet_44\n\nLANGUAGE: N/A\nCODE:\n```\nN/A\n```\n\n----------------------------------------\n\nTITLE: Getting Lead Sources API GET Endpoint\nDESCRIPTION: Retrieves all lead sources. This API call uses the GET method and targets the `/leadSources` endpoint. No specific input is required.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/README.md#_snippet_20\n\nLANGUAGE: N/A\nCODE:\n```\nN/A\n```\n\n----------------------------------------\n\nTITLE: Getting Note Comments API GET Endpoint\nDESCRIPTION: Gets all comments for a note. This API call uses the GET method and targets the `/notes/{id}/comments` endpoint, where `{id}` is the unique identifier of the note. The input is the note ID.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/README.md#_snippet_51\n\nLANGUAGE: N/A\nCODE:\n```\nN/A\n```\n\n----------------------------------------\n\nTITLE: Adding a Stage using Pipedrive v2 StagesApi PHP Client\nDESCRIPTION: Adds a new stage to a pipeline by sending a POST request to the /stages endpoint. Requires a StageRequestBody model as input parameter encapsulating properties of the stage. Returns a PostPatchGetStage model representing the newly added stage, including its ID. Depends on GuzzleHttp client for requests and supports API key or OAuth2 authentication. Exception handling is implemented for API call failures.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v2/Api/StagesApi.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n$apiInstance = new Pipedrive\\versions\\v2\\Api\\StagesApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$stage_request_body = new \\Pipedrive\\versions\\v2\\Model\\StageRequestBody(); // \\Pipedrive\\versions\\v2\\Model\\StageRequestBody\n\ntry {\n    $result = $apiInstance->addStage($stage_request_body);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling StagesApi->addStage: ', $e->getMessage(), PHP_EOL;\n}\n\n```\n\n----------------------------------------\n\nTITLE: ProductAttachementFields Properties Definition in PHP\nDESCRIPTION: This snippet lists the properties of the ProductAttachementFields model, describing each attribute’s name, type, and purpose. It serves as a schema for managing product attachment details associated with deals in Pipedrive, enabling structured data handling.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Model/ProductAttachementFields.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n# # ProductAttachementFields\n\n## Properties\n\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**id** | **int** | The ID of the deal-product (the ID of the product attached to the deal) | [optional]\n**company_id** | **int** | The ID of the company | [optional]\n**deal_id** | **int** | The ID of the deal | [optional]\n**product_id** | **int** | The ID of the product | [optional]\n**sum** | **float** | The sum of all the products attached to the deal | [optional]\n**currency** | **string** | The currency associated with the deal product | [optional]\n**add_time** | **string** | The date and time when the product was added to the deal | [optional]\n**last_edit** | **string** | The date and time when the deal product was last edited | [optional]\n**active_flag** | **bool** | Whether the product is active or not | [optional]\n**tax** | **float** | The product tax | [optional]\n**name** | **string** | The product name | [optional]\n\n[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)\n```\n\n----------------------------------------\n\nTITLE: Deleting Multiple Activities in Bulk Using Pipedrive Activities API in PHP\nDESCRIPTION: This snippet illustrates deleting multiple activities in bulk by specifying their comma-separated IDs. It includes setup for authentication and API client instantiation identical to other methods. The deleteActivities method returns a DeleteActivitiesResponse object confirming the deletions. The snippet also contains exception handling to capture any API errors. The operation marks activities as deleted and they are permanently removed after 30 days.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/ActivitiesApi.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\ActivitiesApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$ids = 'ids_example'; // string | The comma-separated IDs of activities that will be deleted\n\ntry {\n    $result = $apiInstance->deleteActivities($ids);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling ActivitiesApi->deleteActivities: ', $e->getMessage(), PHP_EOL;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Delete Deal Pipedrive PHP\nDESCRIPTION: This snippet illustrates how to mark a specific deal in Pipedrive as deleted using its ID. It includes the standard setup for API authorization (API key or OAuth2) and demonstrates calling the `deleteDeal` method on the Deals API instance, wrapped in a try-catch block for error handling.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/DealsApi.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\DealsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the deal\n\ntry {\n    $result = $apiInstance->deleteDeal($id);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling DealsApi->deleteDeal: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Pipeline with Pipedrive API - PHP\nDESCRIPTION: This PHP snippet shows how to delete a pipeline via the Pipedrive API.  It requires the `pipedrive/client-php` library and API key or OAuth2 configuration. It calls the `deletePipeline` method with the pipeline ID. The output provides the result of deleting a pipeline.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v2/Api/PipelinesApi.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v2\\Api\\PipelinesApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the pipeline\n\ntry {\n    $result = $apiInstance->deletePipeline($id);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling PipelinesApi->deletePipeline: ', $e->getMessage(), PHP_EOL;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Fetching Deals Collection - Pipedrive API - PHP\nDESCRIPTION: This code snippet demonstrates how to retrieve a collection of deals from the Pipedrive API using the `getDealsCollection` method. It configures API key or OAuth2 authentication, instantiates the `DealsApi` class, and calls the `getDealsCollection` method with optional parameters for pagination, time boundaries, user ID, stage ID, and status. The result is then printed using `print_r`.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/DealsApi.md#_snippet_24\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\DealsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$cursor = 'cursor_example'; // string | For pagination, the marker (an opaque string value) representing the first item on the next page\n$limit = 100; // int | For pagination, the limit of entries to be returned. If not provided, 100 items will be returned. Please note that a maximum value of 500 is allowed.\n$since = 'since_example'; // string | The time boundary that points to the start of the range of data. Datetime in ISO 8601 format. E.g. 2022-11-01 08:55:59. Operates on the `update_time` field.\n$until = 'until_example'; // string | The time boundary that points to the end of the range of data. Datetime in ISO 8601 format. E.g. 2022-11-01 08:55:59. Operates on the `update_time` field.\n$user_id = 56; // int | If supplied, only deals matching the given user will be returned\n$stage_id = 56; // int | If supplied, only deals within the given stage will be returned\n$status = 'status_example'; // string | Only fetch deals with a specific status. If omitted, all not deleted deals are returned. If set to deleted, deals that have been deleted up to 30 days ago will be included.\n\ntry {\n    $result = $apiInstance->getDealsCollection($cursor, $limit, $since, $until, $user_id, $stage_id, $status);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling DealsApi->getDealsCollection: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Getting Mail Message API GET Endpoint\nDESCRIPTION: Gets one mail message. This API call uses the GET method and targets the `/mailbox/mailMessages/{id}` endpoint, where `{id}` is the unique identifier of the mail message. The input is the ID of the mail message.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/README.md#_snippet_37\n\nLANGUAGE: N/A\nCODE:\n```\nN/A\n```\n\n----------------------------------------\n\nTITLE: Listing deals associated with a person using getPersonDeals() in PHP\nDESCRIPTION: This PHP code snippet demonstrates retrieving deals linked to a specific person by calling getPersonDeals() with parameters including person ID, pagination, deal status filter, and sorting options. It includes API credentials setup, API client instantiation, and response handling. Dependencies comprise GuzzleHttp and the Pipedrive SDK. Parameters specify person ID, pagination, optional deal status, and sort order.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/PersonsApi.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\PersonsApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the person\n$start = 0; // int | Pagination start\n$limit = 56; // int | Items shown per page\n$status = 'all_not_deleted'; // string | Only fetch deals with a specific status. If omitted, all not deleted deals are returned. If set to deleted, deals that have been deleted up to 30 days ago will be included.\n$sort = 'sort_example'; // string | The field names and sorting mode separated by a comma (`field_name_1 ASC`, `field_name_2 DESC`). Only first-level field keys are supported (no nested keys).\n\ntry {\n    $result = $apiInstance->getPersonDeals($id, $start, $limit, $status, $sort);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling PersonsApi->getPersonDeals: ', $e->getMessage(), PHP_EOL;\n}\n\n```\n\n----------------------------------------\n\nTITLE: BaseNote Class Properties Definition in Markdown\nDESCRIPTION: Detailed documentation of all properties in the BaseNote class, including data types, descriptions, and optional status. The properties define the structure of a note entity in the Pipedrive system and its relationships to other entities.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Model/BaseNote.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# # BaseNote\n\n## Properties\n\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**id** | **int** | The ID of the note | [optional]\n**active_flag** | **bool** | Whether the note is active or deleted | [optional]\n**add_time** | **string** | The creation date and time of the note | [optional]\n**content** | **string** | The content of the note in HTML format. Subject to sanitization on the back-end. | [optional]\n**deal** | [**\\Pipedrive\\versions\\v1\\Model\\BaseNoteDealTitle**](BaseNoteDealTitle.md) |  | [optional]\n**lead_id** | **string** | The ID of the lead the note is attached to | [optional]\n**deal_id** | **int** | The ID of the deal the note is attached to | [optional]\n**last_update_user_id** | **int** | The ID of the user who last updated the note | [optional]\n**org_id** | **int** | The ID of the organization the note is attached to | [optional]\n**organization** | [**\\Pipedrive\\versions\\v1\\Model\\BaseNoteOrganization**](BaseNoteOrganization.md) |  | [optional]\n**person** | [**\\Pipedrive\\versions\\v1\\Model\\BaseNotePerson**](BaseNotePerson.md) |  | [optional]\n**person_id** | **int** | The ID of the person the note is attached to | [optional]\n**pinned_to_deal_flag** | **bool** | If true, the results are filtered by note to deal pinning state | [optional]\n**pinned_to_organization_flag** | **bool** | If true, the results are filtered by note to organization pinning state | [optional]\n**pinned_to_person_flag** | **bool** | If true, the results are filtered by note to person pinning state | [optional]\n**update_time** | **string** | The last updated date and time of the note | [optional]\n**user** | [**\\Pipedrive\\versions\\v1\\Model\\NoteCreatorUser**](NoteCreatorUser.md) |  | [optional]\n**user_id** | **int** | The ID of the note creator | [optional]\n```\n\n----------------------------------------\n\nTITLE: Defining ItemSearchAdditionalData Model with optional pagination property in PHP\nDESCRIPTION: This class defines the ItemSearchAdditionalData model in PHP for the Pipedrive client, including an optional pagination property of type ItemSearchAdditionalDataPagination. It allows representing search metadata with optional pagination details when querying items via the API.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Model/ItemSearchAdditionalData.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n# # ItemSearchAdditionalData\n\n## Properties\n\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**pagination** | [\\Pipedrive\\versions\\v1\\Model\\ItemSearchAdditionalDataPagination](ItemSearchAdditionalDataPagination.md) |  | [optional]\n\n[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)\n```\n\n----------------------------------------\n\nTITLE: Deleting a Follower from a Product in Pipedrive PHP SDK\nDESCRIPTION: Example showing how to remove a follower from a product using the Pipedrive PHP SDK. Requires both the product ID and the follower relationship ID as parameters to identify which follower to remove.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/ProductsApi.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\ProductsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the product\n$follower_id = 56; // int | The ID of the relationship between the follower and the product\n\ntry {\n    $result = $apiInstance->deleteProductFollower($id, $follower_id);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling ProductsApi->deleteProductFollower: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: DeleteDealParticipant Model Properties in Markdown\nDESCRIPTION: Definition of the DeleteDealParticipant model properties including their types, descriptions, and optional status. The model contains a success boolean flag and a data object of type DeleteDealParticipantData.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Model/DeleteDealParticipant.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# # DeleteDealParticipant\n\n## Properties\n\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**success** | **bool** | If the request was successful or not | [optional]\n**data** | [**\\Pipedrive\\versions\\v1\\Model\\DeleteDealParticipantData**](DeleteDealParticipantData.md) |  | [optional]\n```\n\n----------------------------------------\n\nTITLE: Deleting a Deal Field in Pipedrive using PHP\nDESCRIPTION: This snippet demonstrates how to delete a specific deal field using the Pipedrive API and the PHP client library. It initializes the API client with authorization details, sets the ID of the field to be deleted, and then calls the deleteDealField method. It depends on the Pipedrive PHP client library and GuzzleHttp.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/DealFieldsApi.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\DealFieldsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the field\n\ntry {\n    $result = $apiInstance->deleteDealField($id);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling DealFieldsApi->deleteDealField: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Adding Organization to Pipedrive API in PHP\nDESCRIPTION: This code snippet demonstrates how to add a new organization to Pipedrive using the PHP client library. It configures API key or OAuth2 authorization, initializes the OrganizationsApi, creates a NewOrganization model instance, and then calls the addOrganization method.  It requires the Pipedrive PHP client library and a valid API key or OAuth2 token.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/OrganizationsApi.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\OrganizationsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$new_organization = new \\Pipedrive\\versions\\v1\\Model\\NewOrganization(); // \\Pipedrive\\versions\\v1\\Model\\NewOrganization\n\ntry {\n    $result = $apiInstance->addOrganization($new_organization);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling OrganizationsApi->addOrganization: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Deleting an Activity Type by ID via PHP SDK\nDESCRIPTION: This code example shows how to delete a specific activity type by its ID using the SDK. It involves SDK setup, authentication configuration, and invoking deleteActivityType with the target ID, including error handling.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/ActivityTypesApi.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\ActivityTypesApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int: ID of the activity type to delete\n\ntry {\n    $result = $apiInstance->deleteActivityType($id);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling ActivityTypesApi->deleteActivityType: ', $e->getMessage(), PHP_EOL;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Deleting Users from a Legacy Team using Pipedrive PHP SDK\nDESCRIPTION: Explains how to remove users from a legacy team using `LegacyTeamsApi::deleteTeamUser`. This requires setting up authentication (API key or OAuth2), initializing the API client, providing the team ID (`$id`), and passing a `DeleteTeamUserRequest` model object specifying the users to remove. Exception handling is included.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/LegacyTeamsApi.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\LegacyTeamsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the team\n$delete_team_user_request = new \\Pipedrive\\versions\\v1\\Model\\DeleteTeamUserRequest(); // \\Pipedrive\\versions\\v1\\Model\\DeleteTeamUserRequest\n\ntry {\n    $result = $apiInstance->deleteTeamUser($id, $delete_team_user_request);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling LegacyTeamsApi->deleteTeamUser: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving person changelog using getPersonChangelog() in PHP\nDESCRIPTION: This PHP snippet shows how to list updates about a person's field values by calling getPersonChangelog() with parameters such as person ID, pagination cursor, and limit. It sets up API credentials, initializes the API client, and prints the changelog or catches exceptions. Dependencies include GuzzleHttp and the Pipedrive SDK. Parameters include person ID, a pagination cursor string, and limit for items per page.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/PersonsApi.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\PersonsApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the person\n$cursor = 'cursor_example'; // string | For pagination, the marker (an opaque string value) representing the first item on the next page\n$limit = 56; // int | Items shown per page\n\ntry {\n    $result = $apiInstance->getPersonChangelog($id, $cursor, $limit);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling PersonsApi->getPersonChangelog: ', $e->getMessage(), PHP_EOL;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Deleting Subscription - Pipedrive API - PHP\nDESCRIPTION: This code snippet demonstrates how to delete a subscription (either recurring or installment) using the Pipedrive API. It requires the subscription ID. The API client initialization is identical to the other examples. The function uses the `deleteSubscription` method, and it also returns a `SubscriptionsIdResponse`.  The ID of the subscription to delete is passed as an integer.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/SubscriptionsApi.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\SubscriptionsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the subscription\n\ntry {\n    $result = $apiInstance->deleteSubscription($id);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling SubscriptionsApi->deleteSubscription: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Single Pipeline in Pipedrive using PHP SDK\nDESCRIPTION: Fetches data about a specific pipeline including summary of deals across its stages. Supports optional currency conversion for deal amounts in each stage.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/PipelinesApi.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\PipelinesApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the pipeline\n$totals_convert_currency = 'totals_convert_currency_example'; // string | The 3-letter currency code of any of the supported currencies. When supplied, `per_stages_converted` is returned in `deals_summary` which contains the currency-converted total amounts in the given currency per each stage. You may also set this parameter to `default_currency` in which case users default currency is used.\n\ntry {\n    $result = $apiInstance->getPipeline($id, $totals_convert_currency);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling PipelinesApi->getPipeline: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Attaching an Audio File to a Call Log Using Pipedrive CallLogsApi in PHP\nDESCRIPTION: Illustrates how to attach an audio recording to an existing call log using the addCallLogAudioFile method. This requires the call log's ID and a local audio file compatible with HTML5 specification encapsulated as a \\SplFileObject. The method performs a POST request with multipart/form-data content type and returns a BaseResponse model indicating success or failure. Authentication via API key or OAuth2 is needed. Exception handling manages API call errors.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/CallLogsApi.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\CallLogsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 3cde3b05035cae14dcfc172bd8000d08; // string | The ID received when you create the call log\n$file = \"/path/to/file.txt\"; // \\SplFileObject | Audio file supported by the HTML5 specification\n\ntry {\n    $result = $apiInstance->addCallLogAudioFile($id, $file);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling CallLogsApi->addCallLogAudioFile: ', $e->getMessage(), PHP_EOL;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Users with Pipedrive PHP Client - PHP\nDESCRIPTION: This snippet shows how to retrieve data about all users in a Pipedrive company account using the PHP client library. It details authentication with API key or OAuth2, UsersApi instantiation, and calling getUsers which requires no input parameters. pipedrive/client-php and valid credentials are mandatory. The returned object is \\Pipedrive\\versions\\v1\\Model\\Users. Results are printed and errors are gracefully handled.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/UsersApi.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\UsersApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n\ntry {\n    $result = $apiInstance->getUsers();\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling UsersApi->getUsers: ', $e->getMessage(), PHP_EOL;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Getting Pipeline Conversion Statistics in Pipedrive using PHP SDK\nDESCRIPTION: Retrieves stage-to-stage conversion and pipeline-to-close rates for a specified time period. Can be filtered by user ID to get metrics for a specific user.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/PipelinesApi.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\PipelinesApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the pipeline\n$start_date = new \\DateTime(\"2013-10-20T19:20:30+01:00\"); // \\DateTime | The start of the period. Date in format of YYYY-MM-DD.\n$end_date = new \\DateTime(\"2013-10-20T19:20:30+01:00\"); // \\DateTime | The end of the period. Date in format of YYYY-MM-DD.\n$user_id = 56; // int | The ID of the user who's pipeline metrics statistics to fetch. If omitted, the authorized user will be used.\n\ntry {\n    $result = $apiInstance->getPipelineConversionStatistics($id, $start_date, $end_date, $user_id);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling PipelinesApi->getPipelineConversionStatistics: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: UpdateOrganizationAllOf Model Properties in Markdown\nDESCRIPTION: Markdown table defining the properties of the UpdateOrganizationAllOf model. It specifies the 'name' property as an optional string field used to set the organization name when updating.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Model/UpdateOrganizationAllOf.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\n\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**name** | **string** | The name of the organization | [optional]\n```\n\n----------------------------------------\n\nTITLE: Fetching Project Plan with Pipedrive API in PHP\nDESCRIPTION: This code snippet retrieves the project plan associated with a specific project ID using the Pipedrive API. It configures API key or OAuth2 authentication, instantiates the `ProjectsApi` class, and calls the `getProjectPlan` method. The `id` parameter specifies the target project. Error handling is included to catch and display exceptions during the API call.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/ProjectsApi.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\ProjectsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the project\n\ntry {\n    $result = $apiInstance->getProjectPlan($id);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling ProjectsApi->getProjectPlan: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Revoking OAuth Token in Pipedrive PHP Client\nDESCRIPTION: Example of how to revoke an OAuth token when it is no longer needed, with options to revoke either all user tokens or just the access token.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v2/README.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n$config = (new Pipedrive\\versions\\v2\\Configuration());\n$config->updateOAuthRelatedFields(/* ... */);\n\n// this will revoke all user tokens\n$config->revokeToken('refresh_token');\n\n/* OR */\n\n// this will revoke only access token\n$config->revokeToken('access_token');\n```\n\n----------------------------------------\n\nTITLE: Authorizing Pipedrive PHP Client with OAuth Code\nDESCRIPTION: Example of using the authorization code returned from the OAuth consent flow to authorize the client and obtain an access token.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v2/README.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\ntry {\n    $config->authorize($_GET['code']);\n} catch (Exception $ex) {\n    // handle exception\n}\n```\n\n----------------------------------------\n\nTITLE: Searching Item Search API GET Endpoint\nDESCRIPTION: Performs a search from multiple item types.  This API call uses the GET method and targets the `/itemSearch` endpoint. Requires appropriate authentication credentials.  The output contains search results which depend on the search parameters.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/README.md#_snippet_14\n\nLANGUAGE: N/A\nCODE:\n```\nN/A\n```\n\n----------------------------------------\n\nTITLE: WebhookBadRequest Model Properties in Markdown\nDESCRIPTION: Tabular representation of the WebhookBadRequest model properties including their types, descriptions, and additional notes.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Model/WebhookBadRequest.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# # WebhookBadRequest\n\n## Properties\n\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**success** | **bool** | If the response is successful or not | [optional]\n**status** | **string** | The status of the response | [optional]\n**errors** | **object** | List of errors | [optional]\n\n[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)\n```\n\n----------------------------------------\n\nTITLE: Adding a Product using Pipedrive API in PHP\nDESCRIPTION: This code snippet demonstrates how to add a new product to the Pipedrive inventory using the `addProduct()` method. It requires an API key or OAuth2 access token for authorization and the `AddProductRequestBody` to define the new product's details. The method returns a `ProductResponse` upon success.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v2/Api/ProductsApi.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v2\\Api\\ProductsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$add_product_request_body = new \\Pipedrive\\versions\\v2\\Model\\AddProductRequestBody(); // \\Pipedrive\\versions\\v2\\Model\\AddProductRequestBody\n\ntry {\n    $result = $apiInstance->addProduct($add_product_request_body);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling ProductsApi->addProduct: ', $e->getMessage(), PHP_EOL;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Updating a Deal Product using Pipedrive PHP Client\nDESCRIPTION: This PHP snippet demonstrates how to update a product attached to a deal in Pipedrive using the v2 API client. It requires the Pipedrive PHP client library and GuzzleHttp. The example covers configuring authentication (API key or OAuth2), creating a `DealsApi` instance, specifying the deal ID (`id`) and the product attachment ID (`product_attachment_id`), preparing an `UpdateDealProductRequestBody`, and invoking the `updateDealProduct` method. The response confirming the update is returned as an `AddDealProductResponse` object.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v2/Api/DealsApi.md#_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v2\\Api\\DealsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the deal\n$product_attachment_id = 56; // int | The ID of the deal-product (the ID of the product attached to the deal)\n$update_deal_product_request_body = new \\Pipedrive\\versions\\v2\\Model\\UpdateDealProductRequestBody(); // \\Pipedrive\\versions\\v2\\Model\\UpdateDealProductRequestBody\n\ntry {\n    $result = $apiInstance->updateDealProduct($id, $product_attachment_id, $update_deal_product_request_body);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling DealsApi->updateDealProduct: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Searching Items with searchItem in Pipedrive API (PHP)\nDESCRIPTION: This PHP code snippet demonstrates how to use the `searchItem()` method of the Pipedrive API. It performs a search across multiple item types based on a given search term and provides options for filtering by item types and fields, enabling related items, using exact matches, including specific fields, applying pagination, and handling potential exceptions during the API call.  The code configures the API key and access token for authorization.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v2/Api/ItemSearchApi.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v2\\Api\\ItemSearchApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$term = 'term_example'; // string | The search term to look for. Minimum 2 characters (or 1 if using `exact_match`). Please note that the search term has to be URL encoded.\n$item_types = 'item_types_example'; // string | A comma-separated string array. The type of items to perform the search from. Defaults to all.\n$fields = 'fields_example'; // string | A comma-separated string array. The fields to perform the search from. Defaults to all. Relevant for each item type are:<br> <table> <tr><th><b>Item type</b></th><th><b>Field</b></th></tr> <tr><td>Deal</td><td>`custom_fields`, `notes`, `title`</td></tr> <tr><td>Person</td><td>`custom_fields`, `email`, `name`, `notes`, `phone`</td></tr> <tr><td>Organization</td><td>`address`, `custom_fields`, `name`, `notes`</td></tr> <tr><td>Product</td><td>`code`, `custom_fields`, `name`</td></tr> <tr><td>Lead</td><td>`custom_fields`, `notes`, `email`, `organization_name`, `person_name`, `phone`, `title`</td></tr> <tr><td>File</td><td>`name`</td></tr> <tr><td>Mail attachment</td><td>`name`</td></tr> <tr><td>Project</td><td> `custom_fields`, `notes`, `title`, `description` </td></tr> </table> <br> Only the following custom field types are searchable: `address`, `varchar`, `text`, `varchar_auto`, `double`, `monetary` and `phone`. Read more about searching by custom fields <a href=\"https://support.pipedrive.com/en/article/search-finding-what-you-need#searching-by-custom-fields\" target=\"_blank\" rel=\"noopener noreferrer\">here</a>.<br/> When searching for leads, the email, organization_name, person_name, and phone fields will return results only for leads not linked to contacts. For searching leads by person or organization values, please use `search_for_related_items`.\n$search_for_related_items = True; // bool | When enabled, the response will include up to 100 newest related leads and 100 newest related deals for each found person and organization and up to 100 newest related persons for each found organization\n$exact_match = True; // bool | When enabled, only full exact matches against the given term are returned. It is <b>not</b> case sensitive.\n$include_fields = 'include_fields_example'; // string | A comma-separated string array. Supports including optional fields in the results which are not provided by default.\n$limit = 100; // int | For pagination, the limit of entries to be returned. If not provided, 100 items will be returned. Please note that a maximum value of 500 is allowed.\n$cursor = 'cursor_example'; // string | For pagination, the marker (an opaque string value) representing the first item on the next page\n\ntry {\n    $result = $apiInstance->searchItem($term, $item_types, $fields, $search_for_related_items, $exact_match, $include_fields, $limit, $cursor);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling ItemSearchApi->searchItem: ', $e->getMessage(), PHP_EOL;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Listing User Followers using Pipedrive UsersApi in PHP\nDESCRIPTION: Demonstrates how to use the Pipedrive PHP client library (v2) to retrieve a list of followers for a specific user ID. It involves configuring API key or OAuth2 authorization, creating an instance of UsersApi, and calling the getUserFollowers method with the user ID and optional pagination parameters (limit, cursor). The result is expected to be an instance of \\Pipedrive\\versions\\v2\\Model\\GetFollowers.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v2/Api/UsersApi.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v2\\Api\\UsersApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the user\n$limit = 100; // int | For pagination, the limit of entries to be returned. If not provided, 100 items will be returned. Please note that a maximum value of 500 is allowed.\n$cursor = 'cursor_example'; // string | For pagination, the marker (an opaque string value) representing the first item on the next page\n\ntry {\n    $result = $apiInstance->getUserFollowers($id, $limit, $cursor);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling UsersApi->getUserFollowers: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Getting a Single Organization Using Pipedrive PHP SDK\nDESCRIPTION: Retrieves comprehensive details of a specific organization identified by its ID. This method supports optional inclusion of additional standard and custom fields, allowing up to 15 custom field keys for optimized response size. Dependencies include the Pipedrive PHP client library, Guzzle HTTP client, and proper configuration of API key or OAuth2 token for authorization. Inputs are the organization's integer ID, optional comma-separated strings for additional standard and custom fields; output is a PostPatchGetOrganization model instance encapsulating the organization's data.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v2/Api/OrganizationsApi.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\ngetOrganization($id, $include_fields, $custom_fields): \\Pipedrive\\versions\\v2\\Model\\PostPatchGetOrganization\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v2\\Api\\OrganizationsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the organization\n$include_fields = 'include_fields_example'; // string | Optional comma separated string array of additional fields to include\n$custom_fields = 'custom_fields_example'; // string | Optional comma separated string array of custom fields keys to include. If you are only interested in a particular set of custom fields, please use this parameter for faster results and smaller response.<br/>A maximum of 15 keys is allowed.\n\ntry {\n    $result = $apiInstance->getOrganization($id, $include_fields, $custom_fields);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling OrganizationsApi->getOrganization: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a follower to a deal using Pipedrive PHP client\nDESCRIPTION: Example code showing how to add a user as a follower to a deal using the Pipedrive PHP client. Requires the deal ID and user ID in the request body.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v2/Api/DealsApi.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v2\\Api\\DealsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the deal\n$follower_request_body = new \\Pipedrive\\versions\\v2\\Model\\FollowerRequestBody(); // \\Pipedrive\\versions\\v2\\Model\\FollowerRequestBody\n\ntry {\n    $result = $apiInstance->addDealFollower($id, $follower_request_body);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling DealsApi->addDealFollower: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: PHP Example: Updating an Organization in Pipedrive via API\nDESCRIPTION: This code snippet demonstrates how to initialize the Pipedrive Organizations API client in PHP, authenticate with API key or OAuth2 token, create the request body object, and call 'updateOrganization' with the organization ID and request data. It includes error handling to catch exceptions during the API call.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v2/Api/OrganizationsApi.md#_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n$apiInstance = new Pipedrive\\versions\\v2\\Api\\OrganizationsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the organization\n$organization_request_body = new \\Pipedrive\\versions\\v2\\Model\\OrganizationRequestBody(); // \\Pipedrive\\versions\\v2\\Model\\OrganizationRequestBody\n\ntry {\n    $result = $apiInstance->updateOrganization($id, $organization_request_body);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling OrganizationsApi->updateOrganization: ', $e->getMessage(), PHP_EOL;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring OAuth 2.0 Token Revocation (PHP)\nDESCRIPTION: Shows the prerequisite configuration step before revoking an OAuth token. This typically involves loading the OAuth-related fields from a stored token into the Configuration object using `updateOAuthRelatedFields()`.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/README.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$config = (new Pipedrive\\versions\\v1\\Configuration());\n$config->updateOAuthRelatedFields(/* ... */);\n```\n\n----------------------------------------\n\nTITLE: Adding Pipeline with Pipedrive API - PHP\nDESCRIPTION: This snippet demonstrates how to add a new pipeline using the Pipedrive API with PHP. It requires the `pipedrive/client-php` library and configuration for API key or OAuth2 access token. It creates a `PipelineRequestBody` object and passes it to the `addPipeline` method.  The output is the result of adding a pipeline.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v2/Api/PipelinesApi.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v2\\Api\\PipelinesApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$pipeline_request_body = new \\Pipedrive\\versions\\v2\\Model\\PipelineRequestBody(); // \\Pipedrive\\versions\\v2\\Model\\PipelineRequestBody\n\ntry {\n    $result = $apiInstance->addPipeline($pipeline_request_body);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling PipelinesApi->addPipeline: ', $e->getMessage(), PHP_EOL;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Updating Role Pipelines with RolesApi PHP\nDESCRIPTION: This snippet showcases how to update pipeline visibility for a specific role using the `updateRolePipelines()` method.  It configures the API key or OAuth2 access token, sets the role ID, and prepares a `PutRolePipelinesBody` object to define the pipeline visibility settings. The example includes error handling for potential exceptions. This requires the role's ID and a PutRolePipelinesBody as parameters.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/RolesApi.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\RolesApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the role\n$put_role_pipelines_body = new \\Pipedrive\\versions\\v1\\Model\\PutRolePipelinesBody(); // \\Pipedrive\\versions\\v1\\Model\\PutRolePipelinesBody\n\ntry {\n    $result = $apiInstance->updateRolePipelines($id, $put_role_pipelines_body);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling RolesApi->updateRolePipelines: ', $e->getMessage(), PHP_EOL;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Single Stage using Pipedrive v2 StagesApi PHP Client\nDESCRIPTION: Fetches details of a specific stage identified by its stage ID via a GET request to /stages/{id}. Requires the stage ID as an integer parameter. Returns a PostPatchGetStage model encapsulating the stage's data. Employs GuzzleHttp client for request execution. Supports API key and OAuth2 authentication. Contains exception management for runtime errors during API interaction.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v2/Api/StagesApi.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n$apiInstance = new Pipedrive\\versions\\v2\\Api\\StagesApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the stage\n\ntry {\n    $result = $apiInstance->getStage($id);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling StagesApi->getStage: ', $e->getMessage(), PHP_EOL;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Fetching a Specific Organization Relationship in Pipedrive using PHP\nDESCRIPTION: Illustrates retrieving details of a single organization relationship by its ID using the Pipedrive PHP SDK (v1). It covers API client configuration, instantiation of `OrganizationRelationshipsApi`, and calling `getOrganizationRelationship` with the relationship ID and an optional base organization ID (`org_id`). Requires the Pipedrive PHP SDK and GuzzleHttp client.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/OrganizationRelationshipsApi.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\OrganizationRelationshipsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the organization relationship\n$org_id = 56; // int | The ID of the base organization for the returned calculated values\n\ntry {\n    $result = $apiInstance->getOrganizationRelationship($id, $org_id);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling OrganizationRelationshipsApi->getOrganizationRelationship: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Update OAuth Related Fields 5.x - Pipedrive PHP\nDESCRIPTION: In version 5.x, previously stored OAuth tokens and related information (like API domain) are loaded into the configuration using the `updateOAuthRelatedFields` method on the `Configuration` instance. This method accepts an associative array containing the necessary token details.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/MIGRATION-5.x.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$config->updateOAuthRelatedFields([\n    'expires_in' => 'USER_ACCESS_TOKEN_EXPIRATION_MS',\n    'access_token' => 'USER_ACCESS_TOKEN',\n    'refresh_token' => 'USER_REFRESH_TOKEN',\n    'api_domain' => 'USER_API_DOMAIN',\n]);\n```\n\n----------------------------------------\n\nTITLE: Adding Additional Discount to a Deal with Pipedrive API - PHP\nDESCRIPTION: Adds an additional discount to a specific deal, adjusting the deal value if the deal has one-time products attached. This method requires passing the deal ID and a request body object that contains the discount details. It requires API key or OAuth2 authorization, sends requests with JSON content-type, and returns an AddAdditionalDiscountResponse model reflecting the updated deal details.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v2/Api/DealsApi.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n$apiInstance = new Pipedrive\\versions\\v2\\Api\\DealsApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | ID of the deal\n$body = new \\stdClass; // object | Request body with discount details\n\ntry {\n    $result = $apiInstance->postAdditionalDiscount($id, $body);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling DealsApi->postAdditionalDiscount: ', $e->getMessage(), PHP_EOL;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Documenting PHP Model 'BasePipelineWithSelectedFlagAllOf' for Pipedrive API\nDESCRIPTION: This snippet documents the PHP model class 'BasePipelineWithSelectedFlagAllOf' used in the Pipedrive API client. It defines an optional boolean property 'selected' indicating if a pipeline is selected from a filter, including notes on its optional nature and usage context. The model facilitates serialization and deserialization of pipeline filter states in API interactions.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Model/BasePipelineWithSelectedFlagAllOf.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n# # BasePipelineWithSelectedFlagAllOf\n\n## Properties\n\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**selected** | **bool** | A boolean that shows if the pipeline is selected from a filter or not | [optional]\n\n[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)\n```\n\n----------------------------------------\n\nTITLE: Adding a File to Pipedrive in PHP\nDESCRIPTION: Uploads a file and associates it with a Pipedrive entity (deal, person, organization, etc). Uses multipart/form-data encoding to upload the file with optional parameters to link it to specific entities.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/FilesApi.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\naddFile($file, $deal_id, $person_id, $org_id, $product_id, $activity_id, $lead_id): \\Pipedrive\\versions\\v1\\Model\\AddFile\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\FilesApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$file = \"/path/to/file.txt\"; // \\SplFileObject | A single file, supplied in the multipart/form-data encoding and contained within the given boundaries\n$deal_id = 56; // int | The ID of the deal to associate file(s) with\n$person_id = 56; // int | The ID of the person to associate file(s) with\n$org_id = 56; // int | The ID of the organization to associate file(s) with\n$product_id = 56; // int | The ID of the product to associate file(s) with\n$activity_id = 56; // int | The ID of the activity to associate file(s) with\n$lead_id = 'lead_id_example'; // string | The ID of the lead to associate file(s) with\n\ntry {\n    $result = $apiInstance->addFile($file, $deal_id, $person_id, $org_id, $product_id, $activity_id, $lead_id);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling FilesApi->addFile: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Details of a Task Using Pipedrive API with PHP\nDESCRIPTION: This snippet retrieves detailed information about a specific task by ID via the getTask method. The input parameter is the integer ID of the task, and the method returns a GetTaskResponse model containing task details. The API client requires API key or OAuth2 authentication. GuzzleHttp is used as the underlying HTTP client.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/TasksApi.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\TasksApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the task\n\ntry {\n    $result = $apiInstance->getTask($id);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling TasksApi->getTask: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Comment to Note using Pipedrive API in PHP\nDESCRIPTION: This snippet demonstrates how to add a comment to a specific note using the Pipedrive Notes API. It initializes the API client with API key and OAuth2 authentication, sets the note ID and comment content, and then calls the addNoteComment method. It uses the Pipedrive PHP client library and Guzzle HTTP client.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/NotesApi.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\NotesApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the note\n$comment_post_put_object = new \\Pipedrive\\versions\\v1\\Model\\CommentPostPutObject(); // \\Pipedrive\\versions\\v1\\Model\\CommentPostPutObject\n\ntry {\n    $result = $apiInstance->addNoteComment($id, $comment_post_put_object);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling NotesApi->addNoteComment: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Deleting a Task Using Pipedrive API with PHP\nDESCRIPTION: This snippet illustrates how to delete a task by its ID using the deleteTask method. The method marks the specified task and its subtasks as deleted. It requires an integer task ID as input and returns a DeleteTaskResponse. The client must be authorized via API key or OAuth2 access token. GuzzleHttp is used as the HTTP client.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/TasksApi.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\TasksApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the task\n\ntry {\n    $result = $apiInstance->deleteTask($id);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling TasksApi->deleteTask: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Deal Installments using BetaApi in PHP\nDESCRIPTION: This code snippet demonstrates how to list installments added to a list of deals using the Pipedrive BetaApi. It requires an array of deal IDs. The code configures API key or OAuth2 authorization, initializes the BetaApi client with Guzzle, and calls the getInstallments method, printing the result or catching exceptions. It also supports pagination, limiting the number of entries returned, and sorting.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v2/Api/BetaApi.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v2\\Api\\BetaApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$deal_ids = array(56); // int[] | An array of integers with the IDs of the deals for which the attached installments will be returned. A maximum of 100 deal IDs can be provided.\n$cursor = 'cursor_example'; // string | For pagination, the marker (an opaque string value) representing the first item on the next page\n$limit = 100; // int | For pagination, the limit of entries to be returned. If not provided, 100 items will be returned. Please note that a maximum value of 500 is allowed.\n$sort_by = 'id'; // string | The field to sort by. Supported fields: `id`, `billing_date`, `deal_id`.\n$sort_direction = 'asc'; // string | The sorting direction. Supported values: `asc`, `desc`.\n\ntry {\n    $result = $apiInstance->getInstallments($deal_ids, $cursor, $limit, $sort_by, $sort_direction);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling BetaApi->getInstallments: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Model class for RelatedOrganizationDataWithActiveFlag in PHP\nDESCRIPTION: Defines the PHP class for RelatedOrganizationDataWithActiveFlag, representing an optional related organization object with an active flag. This class helps in serializing and deserializing organization data within Pipedrive API responses.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Model/ListPersonsResponseAllOfRelatedObjects.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace Pipedrive\\versions\\v1\\Model;\n\nclass RelatedOrganizationDataWithActiveFlag {\n    /**\n     * @var bool|null \n     */\n    public $active;\n\n    /**\n     * @var string|null \n     */\n    public $organization_id;\n\n    // Additional properties and methods for data handling can be added here\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating an Organization Relationship in Pipedrive using PHP\nDESCRIPTION: Demonstrates how to use the Pipedrive PHP SDK (v1) to create a new relationship between organizations. It involves configuring the API client with authentication (API key or OAuth2), instantiating `OrganizationRelationshipsApi` and `AddOrganizationRelationshipRequest`, and calling the `addOrganizationRelationship` method. Requires the Pipedrive PHP SDK and GuzzleHttp client.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/OrganizationRelationshipsApi.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\OrganizationRelationshipsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$add_organization_relationship_request = new \\Pipedrive\\versions\\v1\\Model\\AddOrganizationRelationshipRequest(); // \\Pipedrive\\versions\\v1\\Model\\AddOrganizationRelationshipRequest\n\ntry {\n    $result = $apiInstance->addOrganizationRelationship($add_organization_relationship_request);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling OrganizationRelationshipsApi->addOrganizationRelationship: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Product Variation using Pipedrive PHP SDK\nDESCRIPTION: Shows how to delete a specific variation of a Pipedrive product using the `deleteProductVariation` method of the `ProductsApi` class. Requires the product ID (`id`) and the product variation ID (`product_variation_id`). Requires authentication (API key or OAuth2) and the Pipedrive v2 SDK.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v2/Api/ProductsApi.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v2\\Api\\ProductsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the product\n$product_variation_id = 56; // int | The ID of the product variation\n\ntry {\n    $result = $apiInstance->deleteProductVariation($id, $product_variation_id);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling ProductsApi->deleteProductVariation: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Using getNoteFields Method with PHP Pipedrive SDK\nDESCRIPTION: A complete example showing how to use the getNoteFields method from the Pipedrive PHP SDK. This includes setting up API authorization (both API key and OAuth2), creating an instance of NoteFieldsApi, and handling success and error responses.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/NoteFieldsApi.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\NoteFieldsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n\ntry {\n    $result = $apiInstance->getNoteFields();\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling NoteFieldsApi->getNoteFields: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Person Field using Pipedrive PHP SDK\nDESCRIPTION: This snippet shows how to add a new person field using the Pipedrive PHP client. It initializes the API client with either API key or OAuth2 access token, prepares a FieldCreateRequest, and calls addPersonField() to create the field. It requires the Guzzle HTTP client and the Pipedrive PHP SDK. The method takes an optional FieldCreateRequest object containing the details of the new field and returns a FieldResponse object with the created field details.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/PersonFieldsApi.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\PersonFieldsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$field_create_request = new \\Pipedrive\\versions\\v1\\Model\\FieldCreateRequest(); // \\Pipedrive\\versions\\v1\\Model\\FieldCreateRequest\n\ntry {\n    $result = $apiInstance->addPersonField($field_create_request);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling PersonFieldsApi->addPersonField: ', $e->getMessage(), PHP_EOL;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Lead using Pipedrive PHP Client\nDESCRIPTION: Shows how to fetch the details of a specific lead using the `getLead` method. Requires authentication (API key or OAuth2) and the lead's unique ID. The response includes custom field values if set, inheriting the structure from Deals. Returns a `GetLeadResponse` object.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/LeadsApi.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\ngetLead($id): \\Pipedrive\\versions\\v1\\Model\\GetLeadResponse\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\LeadsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 'id_example'; // string | The ID of the lead\n\ntry {\n    $result = $apiInstance->getLead($id);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling LeadsApi->getLead: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Receiving a Message in PHP using Pipedrive API\nDESCRIPTION: Example of how to add a message to a conversation. Requires Messengers integration OAuth scope and the Messaging manifest.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/ChannelsApi.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\ChannelsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$message_object = new \\Pipedrive\\versions\\v1\\Model\\MessageObject(); // \\Pipedrive\\versions\\v1\\Model\\MessageObject\n\ntry {\n    $result = $apiInstance->receiveMessage($message_object);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling ChannelsApi->receiveMessage: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: getUserSettings Method Signature in PHP\nDESCRIPTION: Defines the `getUserSettings` method signature within the `UserSettingsApi` class. This method takes no parameters and is expected to return an object of type `\\Pipedrive\\versions\\v1\\Model\\UserSettings`, representing the settings of the authorized user.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/UserSettingsApi.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ngetUserSettings(): \\Pipedrive\\versions\\v1\\Model\\UserSettings\n```\n\n----------------------------------------\n\nTITLE: Deleting an Activity using Pipedrive API v2 (PHP)\nDESCRIPTION: This snippet shows how to delete an activity in Pipedrive using the `deleteActivity` method. It requires configuring authentication, instantiating the `ActivitiesApi` client, and providing the specific `id` of the activity to be deleted. The activity is marked as deleted and will be permanently removed after 30 days. The example includes basic error handling.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v2/Api/ActivitiesApi.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v2\\Api\\ActivitiesApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the activity\n\ntry {\n    $result = $apiInstance->deleteActivity($id);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling ActivitiesApi->deleteActivity: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Deal Product Attachment using Pipedrive PHP Client\nDESCRIPTION: This PHP snippet demonstrates how to delete a specific product attachment from a deal using the Pipedrive v1 API client. It requires vendor autoloading, configuring either API key or OAuth2 authorization, and instantiating the `DealsApi`. The `deleteDealProduct` method is called with the deal ID and product attachment ID, and the result or any exception is printed.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/DealsApi.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\DealsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the deal\n$product_attachment_id = 56; // int | The product attachment ID\n\ntry {\n    $result = $apiInstance->deleteDealProduct($id, $product_attachment_id);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling DealsApi->deleteDealProduct: ', $e->getMessage(), PHP_EOL;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Complete OAuth 2.0 Flow Example: authcallback.php (PHP)\nDESCRIPTION: Provides the callback handler file (`authcallback.php`) for a complete OAuth 2.0 authentication flow. It receives the authorization code from Pipedrive, exchanges it for an access token using `$config->authorize()`, stores the token in the session via a registered callback, and redirects the user back to the main application page (`index.php`).\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/README.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once('../../sdks/php/vendor/autoload.php');\n\nuse Pipedrive\\versions\\v1\\Configuration;\n\nsession_start();\n\n$config = (new Pipedrive\\versions\\v1\\Configuration());\n\n$config->setOauthRedirectUri('http://' . $_SERVER['HTTP_HOST'] . '/authcallback.php');\n$config->setClientSecret('YOUR_CLIENT_SECRET');\n$config->setClientId('YOUR_CLIENT_ID');\n$config->setAuthorizationPageUrl('https://oauth.pipedrive.com/oauth/authorize?client_id=YOUR_CLIENT_ID&redirect_uri=http%3A%2F%2Flocalhost%3A8081%2Fauthcallback.php');\n\n$config->setOAuthTokenUpdateCallback(function ($token) {\n    $_SESSION['token'] = $token;\n});\n\n// if authorization code is absent, redirect to authorization page\nif (!isset($_GET['code'])) {\n    header('Location: ' . filter_var($config->getAuthorizationPageUrl(), FILTER_SANITIZE_URL));\n} else {\n    try {\n        $config->authorize($_GET['code']);\n\n        // resume user activity\n        $redirect_uri = 'http://' . $_SERVER['HTTP_HOST'] . '/';\n        header('Location: ' . filter_var($redirect_uri, FILTER_SANITIZE_URL));\n    } catch (Exception $ex) {\n        print_r($ex);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating an Activity Type via PHP SDK\nDESCRIPTION: This code snippet demonstrates how to update an existing activity type by ID, providing a request object with updated data. It shows SDK setup and invocation of updateActivityType with basic error handling.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/ActivityTypesApi.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\ActivityTypesApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 10; // int: ID of the activity type to update\n$activity_type_update_request = new \\Pipedrive\\versions\\v1\\Model\\ActivityTypeCreateRequest();\n// You can set properties on $activity_type_update_request as needed\n\ntry {\n    $result = $apiInstance->updateActivityType($id, $activity_type_update_request);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling ActivityTypesApi->updateActivityType: ', $e->getMessage(), PHP_EOL;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Adding a New Pipeline in Pipedrive using PHP SDK\nDESCRIPTION: Creates a new pipeline in Pipedrive using the PHP SDK. This snippet demonstrates authentication setup with both API key and OAuth2, and making the addPipeline API call with proper error handling.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/PipelinesApi.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\PipelinesApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$pipeline = new \\Pipedrive\\versions\\v1\\Model\\Pipeline(); // \\Pipedrive\\versions\\v1\\Model\\Pipeline\n\ntry {\n    $result = $apiInstance->addPipeline($pipeline);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling PipelinesApi->addPipeline: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Pipeline with Pipedrive API - PHP\nDESCRIPTION: This PHP snippet retrieves a specific pipeline from the Pipedrive API, using its ID. It requires the `pipedrive/client-php` library and proper API key or OAuth2 configuration. The `getPipeline` method is called with the pipeline ID, and the output is the pipeline data.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v2/Api/PipelinesApi.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v2\\Api\\PipelinesApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the pipeline\n\ntry {\n    $result = $apiInstance->getPipeline($id);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling PipelinesApi->getPipeline: ', $e->getMessage(), PHP_EOL;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Pipedrive File using PHP\nDESCRIPTION: This code snippet retrieves details of a specific file from Pipedrive using its ID. It depends on the Pipedrive PHP API client and Guzzle HTTP client. The example configures API key or OAuth2 authentication, instantiates the FilesApi, and then calls the `getFile` method with the file ID.  The returned file data is printed, or an exception and its message are displayed if an error occurs.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/FilesApi.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\FilesApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the file\n\ntry {\n    $result = $apiInstance->getFile($id);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling FilesApi->getFile: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Adding a new filter in Pipedrive using PHP\nDESCRIPTION: Creates a new filter in Pipedrive. Supports complex condition groups with specific logic operators. Returns the filter ID upon success.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/FiltersApi.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\FiltersApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$add_filter_request = new \\Pipedrive\\versions\\v1\\Model\\AddFilterRequest(); // \\Pipedrive\\versions\\v1\\Model\\AddFilterRequest\n\ntry {\n    $result = $apiInstance->addFilter($add_filter_request);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling FiltersApi->addFilter: ', $e->getMessage(), PHP_EOL;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Adding a Pipedrive Organization Field in PHP\nDESCRIPTION: Demonstrates adding a new custom field to organizations using the Pipedrive PHP client's `addOrganizationField` method. It requires initializing `OrganizationFieldsApi` with authentication (API key or OAuth2) and passing a `\\Pipedrive\\versions\\v1\\Model\\FieldCreateRequest` object containing the new field's details. The method returns a `\\Pipedrive\\versions\\v1\\Model\\FieldResponse` object upon success. The example shows setup, API call execution within a try-catch block, and basic exception handling.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/OrganizationFieldsApi.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\naddOrganizationField($field_create_request): \\Pipedrive\\versions\\v1\\Model\\FieldResponse\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\OrganizationFieldsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$field_create_request = new \\Pipedrive\\versions\\v1\\Model\\FieldCreateRequest(); // \\Pipedrive\\versions\\v1\\Model\\FieldCreateRequest\n\ntry {\n    $result = $apiInstance->addOrganizationField($field_create_request);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling OrganizationFieldsApi->addOrganizationField: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the LeadSearchItem Data Model in PHP\nDESCRIPTION: This snippet defines the LeadSearchItem class with its properties: result_score (float) representing the search relevancy score, and item (LeadSearchItemItem object) representing the matching lead item. It includes optional annotations to facilitate serialization and documentation integration.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Model/LeadSearchItem.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n# <?php\n\nnamespace Pipedrive\\Versions\\V1\\Model;\n\nclass LeadSearchItem {\n    /**\n     * Search result relevancy score\n     * @var float|null\n     */\n    public $result_score;\n\n    /**\n     * Associated lead item\n     * @var LeadSearchItemItem|null\n     */\n    public $item;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Finding Users by Name with Pipedrive Users API in PHP\nDESCRIPTION: Searches for users by a given search term, optionally restricted to matching email addresses only, using the Pipedrive Users API. Accepts a string search term and an optional Boolean flag wrapped in a model to restrict the search to emails. Demonstrates client setup, parameter initialization, and error handling. Supports API key and OAuth2 for authorization.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/UsersApi.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\UsersApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$term = 'term_example'; // string | The search term to look for\n$search_by_email = new \\Pipedrive\\versions\\v1\\Model\\\\Pipedrive\\versions\\v1\\Model\\NumberBooleanDefault0(); // \\Pipedrive\\versions\\v1\\Model\\NumberBooleanDefault0 | When enabled, the term will only be matched against email addresses of users. Default: `false`.\n\ntry {\n    $result = $apiInstance->findUsersByName($term, $search_by_email);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling UsersApi->findUsersByName: ', $e->getMessage(), PHP_EOL;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Listing Person Products using Pipedrive Persons API in PHP\nDESCRIPTION: This example demonstrates listing products associated with a person using the Pipedrive PHP client library. It configures authentication (API key or OAuth2), initializes the `PersonsApi` client, and calls the `getPersonProducts` method with the person ID and pagination details (start, limit). The script prints the list of associated products or any caught exception.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/PersonsApi.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\PersonsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the person\n$start = 0; // int | Pagination start\n$limit = 56; // int | Items shown per page\n\ntry {\n    $result = $apiInstance->getPersonProducts($id, $start, $limit);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling PersonsApi->getPersonProducts: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Organizations API POST Endpoint\nDESCRIPTION: Adds an organization. This API call uses the POST method and targets the `/organizations` endpoint. The input contains the details of the new organization.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/README.md#_snippet_66\n\nLANGUAGE: N/A\nCODE:\n```\nN/A\n```\n\n----------------------------------------\n\nTITLE: Defining the OrganizationsDeleteResponseData Model in PHP\nDESCRIPTION: This snippet outlines the 'OrganizationsDeleteResponseData' class used to represent the response data after deleting organizations, including the optional 'id' property which is an array of floats. It helps in serializing and deserializing API responses to facilitate interactions with the Pipedrive API in PHP applications.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Model/OrganizationsDeleteResponseData.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n# <?php\n\n// Models the response data for organizations deletion in the Pipedrive API\nclass OrganizationsDeleteResponseData {\n    /**\n     * The IDs of the organizations that were deleted\n     * @var float[]|null\n     */\n    public $id;\n\n    // Constructor, getters, setters, or serialization methods can be added as needed\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Pipeline in Pipedrive using PHP SDK\nDESCRIPTION: Marks a pipeline as deleted in Pipedrive using the PHP SDK. This snippet shows how to set up authentication and call the deletePipeline method with the pipeline ID parameter.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/PipelinesApi.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\PipelinesApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the pipeline\n\ntry {\n    $result = $apiInstance->deletePipeline($id);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling PipelinesApi->deletePipeline: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Merging Two Organizations with Pipedrive Client - PHP\nDESCRIPTION: This snippet illustrates how to merge two organizations using the mergeOrganizations method from the OrganizationsApi class. It depends on the pipedrive/client-php library, Guzzle, and requires authentication via API key or OAuth2 token. Parameters include the target organization's ID and a MergeOrganizationsRequest object detailing the merge. The result is an OrganizationsMergeResponse object. Only valid authenticated users with proper permissions should use this method, and care should be taken as merging is irreversible.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/OrganizationsApi.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\OrganizationsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the organization\n$merge_organizations_request = new \\Pipedrive\\versions\\v1\\Model\\MergeOrganizationsRequest(); // \\Pipedrive\\versions\\v1\\Model\\MergeOrganizationsRequest\n\ntry {\n    $result = $apiInstance->mergeOrganizations($id, $merge_organizations_request);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling OrganizationsApi->mergeOrganizations: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating a User with Pipedrive PHP API Client - PHP\nDESCRIPTION: This snippet demonstrates how to configure and use the Pipedrive PHP client to update a user's information by calling the updateUser method of UsersApi. It illustrates both API key and OAuth2 authentication mechanisms, requires the guzzlehttp/guzzle package for custom HTTP client integration, and depends on pipedrive/client-php. The parameters include the user's ID (integer) and an UpdateUserRequest object with new data; it returns a User model on success. Ensure the correct authentication details are provided and handle exceptions as shown. Both API key and OAuth2 tokens must be set appropriately depending on authorization requirements.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/UsersApi.md#_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\UsersApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the user\n$update_user_request = new \\Pipedrive\\versions\\v1\\Model\\UpdateUserRequest(); // \\Pipedrive\\versions\\v1\\Model\\UpdateUserRequest\n\ntry {\n    $result = $apiInstance->updateUser($id, $update_user_request);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling UsersApi->updateUser: ', $e->getMessage(), PHP_EOL;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Adding Deal Installment using BetaApi in PHP\nDESCRIPTION: This code snippet demonstrates how to add an installment to a deal using the Pipedrive BetaApi. It requires the deal ID and a request body. The code configures API key or OAuth2 authorization, initializes the BetaApi client with Guzzle, and calls the postInstallment method, printing the result or catching exceptions. The deal must contain at least one one-time product for this to succeed.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v2/Api/BetaApi.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v2\\Api\\BetaApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the deal\n$body = new \\stdClass; // object\n\ntry {\n    $result = $apiInstance->postInstallment($id, $body);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling BetaApi->postInstallment: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Deleting a Conversation in PHP using Pipedrive API\nDESCRIPTION: Example of how to delete an existing conversation from a channel. Requires Messengers integration OAuth scope and the Messaging manifest.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/ChannelsApi.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\ChannelsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$channel_id = 'channel_id_example'; // string | The ID of the channel provided by the integration\n$conversation_id = 'conversation_id_example'; // string | The ID of the conversation provided by the integration\n\ntry {\n    $result = $apiInstance->deleteConversation($channel_id, $conversation_id);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling ChannelsApi->deleteConversation: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Deal Activities using Pipedrive PHP Client\nDESCRIPTION: This PHP code demonstrates listing activities associated with a specific deal using the Pipedrive v1 API client. After configuring authentication and instantiating `DealsApi`, it calls `getDealActivities` with the deal ID and optional parameters for pagination (`start`, `limit`), filtering by completion status (`done`), and excluding specific activities (`exclude`). The result is a list of activities linked to the deal.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/DealsApi.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\DealsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the deal\n$start = 0; // int | Pagination start\n$limit = 56; // int | Items shown per page\n$done = new \\Pipedrive\\versions\\v1\\Model\\\\Pipedrive\\versions\\v1\\Model\\NumberBoolean(); // \\Pipedrive\\versions\\v1\\Model\\NumberBoolean | Whether the activity is done or not. 0 = Not done, 1 = Done. If omitted, returns both Done and Not done activities.\n$exclude = 'exclude_example'; // string | A comma-separated string of activity IDs to exclude from result\n\ntry {\n    $result = $apiInstance->getDealActivities($id, $start, $limit, $done, $exclude);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling DealsApi->getDealActivities: ', $e->getMessage(), PHP_EOL;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Updating a Pipedrive File using PHP\nDESCRIPTION: This code snippet demonstrates how to update the details (name and description) of a file in Pipedrive using its ID. It requires the Pipedrive PHP API client and Guzzle HTTP client. The code configures API key or OAuth2 authentication, initializes the FilesApi, and then calls the `updateFile` method with the file ID, new name, and new description. The update result is printed, or an exception with its message is displayed if an error occurs.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/FilesApi.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\FilesApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the file\n$name = 'name_example'; // string | The visible name of the file\n$description = 'description_example'; // string | The description of the file\n\ntry {\n    $result = $apiInstance->updateFile($id, $name, $description);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling FilesApi->updateFile: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: PHP: Using Pipedrive API to retrieve currencies with getCurrencies()\nDESCRIPTION: This code snippet shows how to initialize the Pipedrive API client with API key or OAuth2 token, configure the HTTP client, and invoke the getCurrencies() method to fetch all supported currencies. It includes setup details, optional search term parameter, and error handling to manage API exceptions.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/CurrenciesApi.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\CurrenciesApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$term = 'term_example'; // string | Optional search term that is searched for from currency's name and/or code\n\ntry {\n    $result = $apiInstance->getCurrencies($term);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling CurrenciesApi->getCurrencies: ', $e->getMessage(), PHP_EOL;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Deleting a Mail Thread in Pipedrive with PHP\nDESCRIPTION: This snippet demonstrates how to delete an existing mail thread using the Pipedrive PHP client SDK. It shows how to authenticate with either an API key or OAuth2, configure the API client, and call the deleteMailThread method. Required parameter: 'id' (the thread's integer ID). The method returns a MailThreadDelete model response; exceptions are caught and displayed. This operation marks the thread as deleted and requires appropriate authentication via API key or OAuth2.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/MailboxApi.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\MailboxApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the mail thread\n\ntry {\n    $result = $apiInstance->deleteMailThread($id);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling MailboxApi->deleteMailThread: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Stage via Pipedrive PHP SDK\nDESCRIPTION: This code example shows how to delete a specific stage by ID using the Pipedrive PHP client. It requires proper API key or OAuth2 access token authentication and passes the stage ID as an integer parameter. The deleteStage method marks the stage as deleted and returns a DeleteStageResponse model. The HTTP Accept header expects JSON responses.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/StagesApi.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\StagesApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the stage\n\ntry {\n    $result = $apiInstance->deleteStage($id);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling StagesApi->deleteStage: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating a Comment for a Note in PHP\nDESCRIPTION: This code snippet demonstrates how to update a comment associated with a specific note using the Pipedrive API client for PHP. It requires an API key or OAuth2 token for authorization, along with the note's and comment's IDs, and a CommentPostPutObject containing the updated comment data. The example showcases how to configure the API client and make the updateCommentForNote API call, catching potential exceptions.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/NotesApi.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\n```php\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\NotesApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the note\n$comment_id = 'comment_id_example'; // string | The ID of the comment\n$comment_post_put_object = new \\Pipedrive\\versions\\v1\\Model\\CommentPostPutObject(); // \\Pipedrive\\versions\\v1\\Model\\CommentPostPutObject\n\ntry {\n    $result = $apiInstance->updateCommentForNote($id, $comment_id, $comment_post_put_object);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling NotesApi->updateCommentForNote: ', $e->getMessage(), PHP_EOL;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Canceling Recurring Subscription - Pipedrive API - PHP\nDESCRIPTION: This code snippet shows how to cancel a recurring subscription using the Pipedrive API. It requires the subscription ID and a `SubscriptionRecurringCancelRequest` object. The API client is initialized in the same way as in the previous examples. It uses the `cancelRecurringSubscription` method, and a `SubscriptionsIdResponse` is returned. An integer ID is passed to identify the subscription to be canceled.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/SubscriptionsApi.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\SubscriptionsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the subscription\n$subscription_recurring_cancel_request = new \\Pipedrive\\versions\\v1\\Model\\SubscriptionRecurringCancelRequest(); // \\Pipedrive\\versions\\v1\\Model\\SubscriptionRecurringCancelRequest\n\ntry {\n    $result = $apiInstance->cancelRecurringSubscription($id, $subscription_recurring_cancel_request);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling SubscriptionsApi->cancelRecurringSubscription: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Defining UsersAllOf Model with Optional Data Property in PHP\nDESCRIPTION: This snippet defines the UsersAllOf model class with an optional 'data' property, which is an array of BaseUser objects. It includes documentation links and annotations for API modeling, suitable for use in API SDKs to represent user data collections. Dependencies include the BaseUser model class.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Model/UsersAllOf.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n# # UsersAllOf\n\n## Properties\n\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**data** | [\\Pipedrive\\versions\\v1\\Model\\BaseUser[]**](BaseUser.md) |  | [optional]\n\n[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)\n```\n\n----------------------------------------\n\nTITLE: FindGoalResponse Model Structure in Markdown\nDESCRIPTION: Defines the properties of the FindGoalResponse model in the Pipedrive PHP client, showing that it contains an array of GoalsResponseComponent objects.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Model/FindGoalResponse.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# # FindGoalResponse\n\n## Properties\n\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**goals** | [**\\Pipedrive\\versions\\v1\\Model\\GoalsResponseComponent[]**](GoalsResponseComponent.md) |  |\n```\n\n----------------------------------------\n\nTITLE: Searching Pipedrive Items by Field in PHP\nDESCRIPTION: This PHP script demonstrates how to use the Pipedrive v2 API client to search for items by a specific field. It includes autoloading dependencies, configuring authentication (either API key or OAuth2), instantiating the `ItemSearchApi` (optionally with a custom Guzzle client), and calling the `searchItemByField` method with parameters like search term, entity type, field key, match type, limit, and cursor. The script also includes basic error handling using a try-catch block.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v2/Api/ItemSearchApi.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v2\\Api\\ItemSearchApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$term = 'term_example'; // string | The search term to look for. Minimum 2 characters (or 1 if `match` is `exact`). Please note that the search term has to be URL encoded.\n$entity_type = 'entity_type_example'; // string | The type of the field to perform the search from\n$field = 'field_example'; // string | The key of the field to search from. The field key can be obtained by fetching the list of the fields using any of the fields' API GET methods (dealFields, personFields, etc.). Only the following custom field types are searchable: `address`, `varchar`, `text`, `varchar_auto`, `double`, `monetary` and `phone`. Read more about searching by custom fields <a href=\\\"https://support.pipedrive.com/en/article/search-finding-what-you-need#searching-by-custom-fields\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">here</a>.\n$match = 'exact'; // string | The type of match used against the term. The search <b>is</b> case sensitive.<br/><br/> E.g. in case of searching for a value `monkey`, <ul> <li>with `exact` match, you will only find it if term is `monkey`</li> <li>with `beginning` match, you will only find it if the term matches the beginning or the whole string, e.g. `monk` and `monkey`</li> <li>with `middle` match, you will find the it if the term matches any substring of the value, e.g. `onk` and `ke`</li> </ul>.\n$limit = 100; // int | For pagination, the limit of entries to be returned. If not provided, 100 items will be returned. Please note that a maximum value of 500 is allowed.\n$cursor = 'cursor_example'; // string | For pagination, the marker (an opaque string value) representing the first item on the next page\n\ntry {\n    $result = $apiInstance->searchItemByField($term, $entity_type, $field, $match, $limit, $cursor);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling ItemSearchApi->searchItemByField: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Product Variation with Pipedrive API in PHP\nDESCRIPTION: This code demonstrates how to add a product variation to an existing product using the `addProductVariation()` method. It requires the ID of the product and a body containing variation data. The expected output is a `ProductVariationResponse` object.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v2/Api/ProductsApi.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v2\\Api\\ProductsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the product\n$body = new \\stdClass; // object\n\ntry {\n    $result = $apiInstance->addProductVariation($id, $body);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling ProductsApi->addProductVariation: ', $e->getMessage(), PHP_EOL;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Updating a Product Field through Pipedrive PHP SDK\nDESCRIPTION: This code demonstrates how to update a specific product field by its ID using the Pipedrive PHP SDK. It involves setting up API authentication, creating an instance of the API class, and calling updateProductField() with the target ID and an UpdateProductField model object. The snippet includes exception handling and requires appropriate configuration of API credentials and the update model. The key parameters are the product field ID and the data object representing the updates.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/ProductFieldsApi.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\ProductFieldsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the product field\n$update_product_field = new \\Pipedrive\\versions\\v1\\Model\\UpdateProductField(); // \\Pipedrive\\versions\\v1\\Model\\UpdateProductField\n\ntry {\n    $result = $apiInstance->updateProductField($id, $update_product_field);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling ProductFieldsApi->updateProductField: ', $e->getMessage(), PHP_EOL;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving Specific User Data by ID with Pipedrive Users API in PHP\nDESCRIPTION: Obtains detailed information about a specific user identified by their user ID within the company using the Pipedrive Users API. Requires an integer user ID as input. Supports authorization via API key or OAuth2 token. Illustrates the process of client setup, passing the user ID, invoking the retrieval method, and exception handling.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/UsersApi.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\UsersApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the user\n\ntry {\n    $result = $apiInstance->getUser($id);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling UsersApi->getUser: ', $e->getMessage(), PHP_EOL;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Activity Types via PHP SDK\nDESCRIPTION: This example shows how to fetch all activity types using the SDK. It includes SDK configuration, authorization setup, and calling getActivityTypes, with error handling.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/ActivityTypesApi.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\ActivityTypesApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\ntry {\n    $result = $apiInstance->getActivityTypes();\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling ActivityTypesApi->getActivityTypes: ', $e->getMessage(), PHP_EOL;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Updating Goals API PUT Endpoint\nDESCRIPTION: Updates an existing goal. This API call uses the PUT method and targets the `/goals/{id}` endpoint, where `{id}` is the unique identifier of the goal.  Input includes data needed to update a specific goal.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/README.md#_snippet_13\n\nLANGUAGE: N/A\nCODE:\n```\nN/A\n```\n\n----------------------------------------\n\nTITLE: Deleting a Single Activity Using Pipedrive Activities API in PHP\nDESCRIPTION: This snippet demonstrates how to delete a single activity by its numeric ID using the PHP client. Authentication setup remains consistent with other methods, requiring an API key or OAuth token. The deleteActivity method returns a DeleteActivityResponse object confirming the deletion. Activities marked deleted are permanently removed after 30 days. The code includes exception handling to report failure during the API call.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/ActivitiesApi.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\ActivitiesApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the activity\n\ntry {\n    $result = $apiInstance->deleteActivity($id);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling ActivitiesApi->deleteActivity: ', $e->getMessage(), PHP_EOL;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Getting Mail Thread Messages API GET Endpoint\nDESCRIPTION: Gets all mail messages of a mail thread. This API call uses the GET method and targets the `/mailbox/mailThreads/{id}/mailMessages` endpoint, where `{id}` is the unique identifier of the mail thread. The input is the mail thread ID.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/README.md#_snippet_39\n\nLANGUAGE: N/A\nCODE:\n```\nN/A\n```\n\n----------------------------------------\n\nTITLE: Listing Deal Followers Changelog with Pipedrive PHP SDK\nDESCRIPTION: Fetches the changelog of deal followers using getDealFollowersChangelog from Pipedrive's PHP SDK, allowing tracking of follow/unfollow actions by users. Accepts deal ID, optional limit (default 100, max 500), and pagination cursor. Returns a GetFollowerChangelogs object. Requires the pipedrive/client-php SDK, either API Key or OAuth2 authentication, and potentially a custom Guzzle HTTP client. Handles and reports any exceptions thrown by the API call.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v2/Api/DealsApi.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n$apiInstance = new Pipedrive\\versions\\v2\\Api\\DealsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the deal\n$limit = 100; // int | For pagination, the limit of entries to be returned. If not provided, 100 items will be returned. Please note that a maximum value of 500 is allowed.\n$cursor = 'cursor_example'; // string | For pagination, the marker (an opaque string value) representing the first item on the next page\n\ntry {\n    $result = $apiInstance->getDealFollowersChangelog($id, $limit, $cursor);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling DealsApi->getDealFollowersChangelog: ', $e->getMessage(), PHP_EOL;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Fetching Persons with Pipedrive API v2 in PHP\nDESCRIPTION: This example demonstrates how to fetch a list of persons from Pipedrive using the PHP client library. It includes setting up API key or OAuth2 authentication, instantiating the PersonsApi client (optionally with a custom GuzzleHttp client), defining various filtering and pagination parameters (like filter_id, ids, owner_id, org_id, updated_since/until, sort_by/direction, include_fields, custom_fields, limit, cursor), and calling the getPersons method within a try-catch block to handle potential exceptions. Dependencies include the Pipedrive PHP SDK (installed via Composer) and GuzzleHttp.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v2/Api/PersonsApi.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v2\\Api\\PersonsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$filter_id = 56; // int | If supplied, only persons matching the specified filter are returned\n$ids = 'ids_example'; // string | Optional comma separated string array of up to 100 entity ids to fetch. If filter_id is provided, this is ignored. If any of the requested entities do not exist or are not visible, they are not included in the response.\n$owner_id = 56; // int | If supplied, only persons owned by the specified user are returned. If filter_id is provided, this is ignored.\n$org_id = 56; // int | If supplied, only persons linked to the specified organization are returned. If filter_id is provided, this is ignored.\n$updated_since = 'updated_since_example'; // string | If set, only persons with an `update_time` later than or equal to this time are returned. In RFC3339 format, e.g. 2025-01-01T10:20:00Z.\n$updated_until = 'updated_until_example'; // string | If set, only persons with an `update_time` earlier than this time are returned. In RFC3339 format, e.g. 2025-01-01T10:20:00Z.\n$sort_by = 'id'; // string | The field to sort by. Supported fields: `id`, `update_time`, `add_time`.\n$sort_direction = 'asc'; // string | The sorting direction. Supported values: `asc`, `desc`.\n$include_fields = 'include_fields_example'; // string | Optional comma separated string array of additional fields to include. `marketing_status` and `doi_status` can only be included if the company has marketing app enabled.\n$custom_fields = 'custom_fields_example'; // string | Optional comma separated string array of custom fields keys to include. If you are only interested in a particular set of custom fields, please use this parameter for faster results and smaller response.<br/>A maximum of 15 keys is allowed.\n$limit = 100; // int | For pagination, the limit of entries to be returned. If not provided, 100 items will be returned. Please note that a maximum value of 500 is allowed.\n$cursor = 'cursor_example'; // string | For pagination, the marker (an opaque string value) representing the first item on the next page\n\ntry {\n    $result = $apiInstance->getPersons($filter_id, $ids, $owner_id, $org_id, $updated_since, $updated_until, $sort_by, $sort_direction, $include_fields, $custom_fields, $limit, $cursor);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling PersonsApi->getPersons: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Installment Subscription - Pipedrive API - PHP\nDESCRIPTION: This code snippet demonstrates how to add an installment subscription using the Pipedrive API. Similar to adding a recurring subscription, it initializes the API client, creates a `SubscriptionInstallmentCreateRequest` object, and calls the `addSubscriptionInstallment` method. It requires the same dependencies and authentication setup as the recurring subscription example. The function also returns a `SubscriptionsIdResponse` object.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/SubscriptionsApi.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\SubscriptionsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$subscription_installment_create_request = new \\Pipedrive\\versions\\v1\\Model\\SubscriptionInstallmentCreateRequest(); // \\Pipedrive\\versions\\v1\\Model\\SubscriptionInstallmentCreateRequest\n\ntry {\n    $result = $apiInstance->addSubscriptionInstallment($subscription_installment_create_request);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling SubscriptionsApi->addSubscriptionInstallment: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Listing Followers of a Deal with Pipedrive PHP SDK\nDESCRIPTION: Lists all users who are following a specified deal via the getDealFollowers method in the Pipedrive DealsApi (PHP). Accepts deal ID, limit (for pagination, defaults to 100 with a maximum of 500), and cursor (string marker for next page) as parameters. Returns a GetFollowers object, shows how to authenticate and handle API exceptions. Requires the pipedrive/client-php dependency, API credentials, and optionally a custom Guzzle client.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v2/Api/DealsApi.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n$apiInstance = new Pipedrive\\versions\\v2\\Api\\DealsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the deal\n$limit = 100; // int | For pagination, the limit of entries to be returned. If not provided, 100 items will be returned. Please note that a maximum value of 500 is allowed.\n$cursor = 'cursor_example'; // string | For pagination, the marker (an opaque string value) representing the first item on the next page\n\ntry {\n    $result = $apiInstance->getDealFollowers($id, $limit, $cursor);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling DealsApi->getDealFollowers: ', $e->getMessage(), PHP_EOL;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Add Product Pipedrive Deal PHP\nDESCRIPTION: This snippet demonstrates how to add a product to an existing deal in Pipedrive using the PHP client. It shows how to configure API key or OAuth2 authorization, instantiate the Deals API, create a NewDealProduct object, and call the `addDealProduct` method, including basic exception handling.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/DealsApi.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\DealsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the deal\n$new_deal_product = new \\Pipedrive\\versions\\v1\\Model\\NewDealProduct(); // \\Pipedrive\\versions\\v1\\Model\\NewDealProduct\n\ntry {\n    $result = $apiInstance->addDealProduct($id, $new_deal_product);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling DealsApi->addDealProduct: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Organization Field API POST Endpoint\nDESCRIPTION: Adds a new organization field. This API call uses the POST method and targets the `/organizationFields` endpoint. The input includes the details of the new organization field.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/README.md#_snippet_55\n\nLANGUAGE: N/A\nCODE:\n```\nN/A\n```\n\n----------------------------------------\n\nTITLE: Adding a Follower to a Pipedrive Person - PHP\nDESCRIPTION: This snippet shows how to add a user as a follower to an existing person in Pipedrive using the PHP client. It requires the person's ID and a FollowerRequestBody object. Authentication via API key or OAuth2 is necessary. The function returns a PostFollower model.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v2/Api/PersonsApi.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v2\\Api\\PersonsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the person\n$follower_request_body = new \\Pipedrive\\versions\\v2\\Model\\FollowerRequestBody(); // \\Pipedrive\\versions\\v2\\Model\\FollowerRequestBody\n\ntry {\n    $result = $apiInstance->addPersonFollower($id, $follower_request_body);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling PersonsApi->addPersonFollower: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Product Field using Pipedrive PHP Client\nDESCRIPTION: This snippet demonstrates how to add a new product field using the Pipedrive PHP client library. It covers configuring API key or OAuth2 authorization, initializing the ProductFieldsApi client, creating a NewProductField model instance, and calling the addProductField method with exception handling.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/ProductFieldsApi.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\ProductFieldsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$new_product_field = new \\Pipedrive\\versions\\v1\\Model\\NewProductField(); // \\Pipedrive\\versions\\v1\\Model\\NewProductField\n\ntry {\n    $result = $apiInstance->addProductField($new_product_field);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling ProductFieldsApi->addProductField: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Follower Changelogs for a Person using Pipedrive API in PHP\nDESCRIPTION: This code snippet retrieves the changelog of followers for a specified person from the Pipedrive API. It initializes the Pipedrive API client with either API key or OAuth2 authentication. The `getPersonFollowersChangelog` method of the `PersonsApi` class is called to fetch the changelog, with optional pagination using `limit` and `cursor` parameters. The snippet handles potential API exceptions and prints the returned changelog data. It requires the Pipedrive PHP client library and Guzzle HTTP client.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v2/Api/PersonsApi.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v2\\Api\\PersonsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the person\n$limit = 100; // int | For pagination, the limit of entries to be returned. If not provided, 100 items will be returned. Please note that a maximum value of 500 is allowed.\n$cursor = 'cursor_example'; // string | For pagination, the marker (an opaque string value) representing the first item on the next page\n\ntry {\n    $result = $apiInstance->getPersonFollowersChangelog($id, $limit, $cursor);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling PersonsApi->getPersonFollowersChangelog: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Deleting a Product with the Pipedrive API in PHP\nDESCRIPTION: This code snippet showcases how to delete a product using `deleteProduct()`. It takes the product's ID as input. The product is marked as deleted and will be permanently removed after 30 days. It returns a `DeleteProductResponse` upon successful deletion.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v2/Api/ProductsApi.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v2\\Api\\ProductsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the product\n\ntry {\n    $result = $apiInstance->deleteProduct($id);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling ProductsApi->deleteProduct: ', $e->getMessage(), PHP_EOL;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Updating a Stage with Pipedrive API in PHP\nDESCRIPTION: This code snippet demonstrates how to update a stage in Pipedrive using the PHP client library. It configures API key or OAuth2 authentication, creates a StagesApi instance, and calls the updateStage method with the stage ID and a StageRequestBody. It includes error handling to catch exceptions during the API call. Requires the GuzzleHttp client and Pipedrive PHP client library.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v2/Api/StagesApi.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v2\\Api\\StagesApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the stage\n$stage_request_body = new \\Pipedrive\\versions\\v2\\Model\\StageRequestBody(); // \\Pipedrive\\versions\\v2\\Model\\StageRequestBody\n\ntry {\n    $result = $apiInstance->updateStage($id, $stage_request_body);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling StagesApi->updateStage: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Updating Role Details with RolesApi PHP\nDESCRIPTION: This snippet demonstrates how to update role details using the `updateRole()` method of the `RolesApi` class.  It configures the API key or OAuth2 access token for authorization, sets the role ID, and creates a `BaseRole` object to specify the changes. The example also includes error handling for potential exceptions. This API requires the role's ID and BaseRole model as parameters.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/RolesApi.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\RolesApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the role\n$base_role = new \\Pipedrive\\versions\\v1\\Model\\BaseRole(); // \\Pipedrive\\versions\\v1\\Model\\BaseRole\n\ntry {\n    $result = $apiInstance->updateRole($id, $base_role);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling RolesApi->updateRole: ', $e->getMessage(), PHP_EOL;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Listing Permitted Users for a Deal with Pipedrive API in PHP\nDESCRIPTION: Shows how to list users permitted to access a specific Pipedrive deal using the `getDealUsers` method. This PHP example includes configuration for API key or OAuth2 authentication, creating an instance of `DealsApi`, providing the required deal `id` parameter, and handling potential exceptions during the API call. The result contains a list of permitted users.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/DealsApi.md#_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\DealsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the deal\n\ntry {\n    $result = $apiInstance->getDealUsers($id);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling DealsApi->getDealUsers: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Note Fields Definition in PHP Using Pipedrive SDK\nDESCRIPTION: Method definition for getNoteFields() that returns data about all note fields in Pipedrive. The method doesn't require any parameters and returns a NoteFieldsResponse object.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/NoteFieldsApi.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ngetNoteFields(): \\Pipedrive\\versions\\v1\\Model\\NoteFieldsResponse\n```\n\n----------------------------------------\n\nTITLE: Merge Persons using Pipedrive PHP\nDESCRIPTION: Merges two person records in Pipedrive using the `mergePersons` method. It requires the ID of the person to be merged and a `MergePersonsRequest` object. The API client is configured with API key or OAuth2 token. It catches exceptions and prints the result or error message.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/PersonsApi.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\PersonsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the person\n$merge_persons_request = new \\Pipedrive\\versions\\v1\\Model\\MergePersonsRequest(); // \\Pipedrive\\versions\\v1\\Model\\MergePersonsRequest\n\ntry {\n    $result = $apiInstance->mergePersons($id, $merge_persons_request);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling PersonsApi->mergePersons: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Fetching Team Users with Pipedrive LegacyTeamsApi in PHP\nDESCRIPTION: Demonstrates retrieving a list of user IDs associated with a specific team using the `getTeamUsers` method. The example shows how to configure API key or OAuth2 authentication, instantiate the `LegacyTeamsApi`, call the method with a team ID, and handle potential exceptions. The method returns a `UserIDs` model object.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/LegacyTeamsApi.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\LegacyTeamsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the team\n\ntry {\n    $result = $apiInstance->getTeamUsers($id);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling LegacyTeamsApi->getTeamUsers: ', $e->getMessage(), PHP_EOL;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Person by ID using Pipedrive API in PHP\nDESCRIPTION: This code snippet demonstrates how to retrieve a specific person's details from the Pipedrive API using their ID. It initializes the Pipedrive API client, sets up authentication using an API key or OAuth2 token, and then calls the `getPerson` method of the `PersonsApi` class.  The snippet includes exception handling for API errors and prints the resulting person data. It requires the Pipedrive PHP client library and Guzzle HTTP client.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v2/Api/PersonsApi.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v2\\Api\\PersonsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the person\n$include_fields = 'include_fields_example'; // string | Optional comma separated string array of additional fields to include. `marketing_status` and `doi_status` can only be included if the company has marketing app enabled.\n$custom_fields = 'custom_fields_example'; // string | Optional comma separated string array of custom fields keys to include. If you are only interested in a particular set of custom fields, please use this parameter for faster results and smaller response.<br/>A maximum of 15 keys is allowed.\n\ntry {\n    $result = $apiInstance->getPerson($id, $include_fields, $custom_fields);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling PersonsApi->getPerson: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Updating a Project Using Pipedrive PHP Client\nDESCRIPTION: Shows how to configure authentication via API key or OAuth2, instantiate the Projects API client, prepare project update data, and call the updateProject() method to update a project with a specified ID. Handles exceptions and outputs the result. Requires the Pipedrive PHP SDK, a Guzzle HTTP client for HTTP requests, and valid API credentials. The method takes an integer project ID and a ProjectPutObject containing update data, returning an UpdateProjectResponse object with the update result.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/ProjectsApi.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\ProjectsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the project\n$project_put_object = new \\Pipedrive\\versions\\v1\\Model\\ProjectPutObject(); // \\Pipedrive\\versions\\v1\\Model\\ProjectPutObject\n\ntry {\n    $result = $apiInstance->updateProject($id, $project_put_object);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling ProjectsApi->updateProject: ', $e->getMessage(), PHP_EOL;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Listing Deals Associated With an Organization Using Pipedrive API in PHP\nDESCRIPTION: This snippet illustrates how to list deals connected to a specified organization via the Pipedrive API. It requires authentication setup with an API key or OAuth2 token and instantiation of the OrganizationsApi client. Key parameters include the organization ID, pagination start, page size limit, deal status filter, sorting options, and a boolean to restrict results to only directly associated deals. The response returned is a ListDealsResponse object detailing the matched deals. Exception handling is included to manage any API request errors.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/OrganizationsApi.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\OrganizationsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the organization\n$start = 0; // int | Pagination start\n$limit = 56; // int | Items shown per page\n$status = 'all_not_deleted'; // string | Only fetch deals with a specific status. If omitted, all not deleted deals are returned. If set to deleted, deals that have been deleted up to 30 days ago will be included.\n$sort = 'sort_example'; // string | The field names and sorting mode separated by a comma (`field_name_1 ASC`, `field_name_2 DESC`). Only first-level field keys are supported (no nested keys).\n$only_primary_association = new \\Pipedrive\\versions\\v1\\Model\\\\Pipedrive\\versions\\v1\\Model\\NumberBoolean(); // \\Pipedrive\\versions\\v1\\Model\\NumberBoolean | If set, only deals that are directly associated to the organization are fetched. If not set (default), all deals are fetched that are either directly or indirectly related to the organization. Indirect relations include relations through custom, organization-type fields and through persons of the given organization.\n\ntry {\n    $result = $apiInstance->getOrganizationDeals($id, $start, $limit, $status, $sort, $only_primary_association);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling OrganizationsApi->getOrganizationDeals: ', $e->getMessage(), PHP_EOL;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Deleting Note with Pipedrive NotesApi in PHP\nDESCRIPTION: This snippet demonstrates how to delete a note using the Pipedrive Notes API. It initializes the API client with authentication credentials, specifies the note ID to be deleted, and calls the deleteNote method.  It relies on the Pipedrive PHP client library and Guzzle HTTP client.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/NotesApi.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\NotesApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the note\n\ntry {\n    $result = $apiInstance->deleteNote($id);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling NotesApi->deleteNote: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Getting Project Details using Pipedrive PHP Client\nDESCRIPTION: Provides an example of retrieving the detailed information for a specific project using the Pipedrive PHP client library. The snippet demonstrates how to set up API or OAuth2 authorization, instantiate the `ProjectsApi` client, and call the `getProject` method, passing the project's ID. It also includes basic exception handling.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/ProjectsApi.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\ProjectsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the project\n\ntry {\n    $result = $apiInstance->getProject($id);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling ProjectsApi->getProject: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting multiple filters in bulk using PHP\nDESCRIPTION: Marks multiple filters as deleted in the Pipedrive system. Takes a comma-separated list of filter IDs as input.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/FiltersApi.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\FiltersApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$ids = 'ids_example'; // string | The comma-separated filter IDs to delete\n\ntry {\n    $result = $apiInstance->deleteFilters($ids);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling FiltersApi->deleteFilters: ', $e->getMessage(), PHP_EOL;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Adding a Lead using Pipedrive PHP Client\nDESCRIPTION: Demonstrates how to create a new lead using the `addLead` method of the `LeadsApi` class. Requires configuring authentication (API key or OAuth2) and passing an `AddLeadRequest` object. Leads created via API have source/origin set to 'API' and inherit custom field structures from Deals. Returns a `GetLeadResponse` object upon successful creation.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/LeadsApi.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\naddLead($add_lead_request): \\Pipedrive\\versions\\v1\\Model\\GetLeadResponse\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\LeadsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$add_lead_request = new \\Pipedrive\\versions\\v1\\Model\\AddLeadRequest(); // \\Pipedrive\\versions\\v1\\Model\\AddLeadRequest\n\ntry {\n    $result = $apiInstance->addLead($add_lead_request);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling LeadsApi->addLead: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Deal-Attached Product via Pipedrive PHP SDK\nDESCRIPTION: This snippet shows how to update the details of a product attached to a deal by specifying the deal ID, product attachment ID, and an UpdateDealProduct object. It initializes the API client and calls updateDealProduct, returning the updated product attachment details object.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/DealsApi.md#_snippet_30\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\DealsApi(\n    // Optionally pass custom HTTP client\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // Deal ID\n$product_attachment_id = 56; // Deal-product attachment ID\n$update_deal_product = new \\Pipedrive\\versions\\v1\\Model\\UpdateDealProduct(); // Product update data\n\ntry {\n    $result = $apiInstance->updateDealProduct($id, $product_attachment_id, $update_deal_product);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling DealsApi->updateDealProduct: ', $e->getMessage(), PHP_EOL;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Getting a Stage by ID via Pipedrive PHP SDK\nDESCRIPTION: This PHP snippet retrieves details for a specific stage identified by ID, optionally including deals summary for all users if the 'everyone' flag is set. Authentication requires either an API key or OAuth2 token. The method getStage accepts an integer stage ID and an optional NumberBoolean model representing the 'everyone' parameter. It returns stage data wrapped in a GetOneStage model.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/StagesApi.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\StagesApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the stage\n$everyone = new \\Pipedrive\\versions\\v1\\Model\\\\Pipedrive\\versions\\v1\\Model\\NumberBoolean(); // \\Pipedrive\\versions\\v1\\Model\\NumberBoolean | If `everyone=1` is provided, deals summary will return deals owned by every user\n\ntry {\n    $result = $apiInstance->getStage($id, $everyone);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling StagesApi->getStage: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Organization Persons API GET Endpoint\nDESCRIPTION: Lists persons of an organization. This API call uses the GET method and targets the `/organizations/{id}/persons` endpoint, where `{id}` is the unique identifier of the organization. The input is the organization ID.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/README.md#_snippet_78\n\nLANGUAGE: N/A\nCODE:\n```\nN/A\n```\n\n----------------------------------------\n\nTITLE: Updating a Filter in PHP\nDESCRIPTION: This snippet demonstrates updating an existing filter using the Pipedrive API in PHP.  It sets up API key and OAuth2 authorization,  specifies the filter `id` and the `update_filter_request` using appropriate model objects, then calls the API method.  The result is displayed or an exception is caught.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/FiltersApi.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\FiltersApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the filter\n$update_filter_request = new \\Pipedrive\\versions\\v1\\Model\\UpdateFilterRequest(); // \\Pipedrive\\versions\\v1\\Model\\UpdateFilterRequest\n\ntry {\n    $result = $apiInstance->updateFilter($id, $update_filter_request);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling FiltersApi->updateFilter: ', $e->getMessage(), PHP_EOL;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Listing Files Attached to an Organization Using Pipedrive API in PHP\nDESCRIPTION: This snippet provides a method to retrieve files attached to an organization in Pipedrive using PHP. It involves authenticating with the API key or OAuth2 token and creating an OrganizationsApi instance. The snippet accepts parameters for the organization's ID, pagination start index, a limit on the number of results per page (capped at 100), and sorting criteria limited to fields like 'id' and 'update_time'. The output is a ListFilesResponse model containing the organization’s file data. Any exceptions during the API request are caught and output.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/OrganizationsApi.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\OrganizationsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the organization\n$start = 0; // int | Pagination start\n$limit = 56; // int | Items shown per page. Please note that a maximum value of 100 is allowed.\n$sort = 'sort_example'; // string | Supported fields: `id`, `update_time`\n\ntry {\n    $result = $apiInstance->getOrganizationFiles($id, $start, $limit, $sort);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling OrganizationsApi->getOrganizationFiles: ', $e->getMessage(), PHP_EOL;\n}\n\n```\n\n----------------------------------------\n\nTITLE: GetProjectTemplateResponse Model Properties in Markdown\nDESCRIPTION: A detailed table describing the properties of the GetProjectTemplateResponse model, including their types and descriptions. The model contains three properties: success (boolean), data (TemplateResponseObject), and additional_data (object).\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Model/GetProjectTemplateResponse.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n## Properties\n\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**success** | **bool** |  | [optional]\n**data** | [**\\Pipedrive\\versions\\v1\\Model\\TemplateResponseObject**](TemplateResponseObject.md) |  | [optional]\n**additional_data** | **object** |  | [optional]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Deals Timeline with PHP Pipedrive Client\nDESCRIPTION: This example demonstrates how to retrieve a timeline of deals using the Pipedrive PHP client. It configures API authentication, sets up request parameters like start date, interval, and amount, and makes a request to the getDealsTimeline endpoint.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/DealsApi.md#_snippet_26\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\DealsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$start_date = new \\DateTime(\"2013-10-20T19:20:30+01:00\"); // \\DateTime | The date when the first interval starts. Format: YYYY-MM-DD.\n$interval = 'interval_example'; // string | The type of the interval<table><tr><th>Value</th><th>Description</th></tr><tr><td>`day`</td><td>Day</td></tr><tr><td>`week`</td><td>A full week (7 days) starting from `start_date`</td></tr><tr><td>`month`</td><td>A full month (depending on the number of days in given month) starting from `start_date`</td></tr><tr><td>`quarter`</td><td>A full quarter (3 months) starting from `start_date`</td></tr></table>\n$amount = 56; // int | The number of given intervals, starting from `start_date`, to fetch. E.g. 3 (months).\n$field_key = 'field_key_example'; // string | The date field key which deals will be retrieved from\n$user_id = 56; // int | If supplied, only deals matching the given user will be returned\n$pipeline_id = 56; // int | If supplied, only deals matching the given pipeline will be returned\n$filter_id = 56; // int | If supplied, only deals matching the given filter will be returned\n$exclude_deals = new \\Pipedrive\\versions\\v1\\Model\\\\Pipedrive\\versions\\v1\\Model\\NumberBoolean(); // \\Pipedrive\\versions\\v1\\Model\\NumberBoolean | Whether to exclude deals list (1) or not (0). Note that when deals are excluded, the timeline summary (counts and values) is still returned.\n$totals_convert_currency = 'totals_convert_currency_example'; // string | The 3-letter currency code of any of the supported currencies. When supplied, `totals_converted` is returned per each interval which contains the currency-converted total amounts in the given currency. You may also set this parameter to `default_currency` in which case the user's default currency is used.\n\ntry {\n    $result = $apiInstance->getDealsTimeline($start_date, $interval, $amount, $field_key, $user_id, $pipeline_id, $filter_id, $exclude_deals, $totals_convert_currency);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling DealsApi->getDealsTimeline: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Delete Deal Participant Pipedrive PHP\nDESCRIPTION: This snippet demonstrates how to remove a participant from a deal in Pipedrive using the deal's ID and the participant's ID. It outlines the process of configuring API access via API key or OAuth2, initializing the Deals API client, and executing the `deleteDealParticipant` method with exception handling.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/DealsApi.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\DealsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the deal\n$deal_participant_id = 56; // int | The ID of the participant of the deal\n\ntry {\n    $result = $apiInstance->deleteDealParticipant($id, $deal_participant_id);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling DealsApi->deleteDealParticipant: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Saving User Provider Link API POST Endpoint\nDESCRIPTION: Links a user with the installed video call integration. This API call uses the POST method and targets the `/meetings/userProviderLinks` endpoint. Input contains information necessary to establish the link between the user and the integration.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/README.md#_snippet_43\n\nLANGUAGE: N/A\nCODE:\n```\nN/A\n```\n\n----------------------------------------\n\nTITLE: ActivityTypeListResponse Properties Table in Markdown\nDESCRIPTION: A markdown table describing the properties of the ActivityTypeListResponse model, including their names, types, descriptions, and optional notes.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Model/ActivityTypeListResponse.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**success** | **bool** | If the response is successful or not | [optional]\n**data** | [**\\Pipedrive\\versions\\v1\\Model\\ActivityTypeObjectResponse[]**](ActivityTypeObjectResponse.md) | The array of activity types |\n```\n\n----------------------------------------\n\nTITLE: Updating a Team with Pipedrive LegacyTeamsApi in PHP\nDESCRIPTION: Shows how to update an existing team using the `updateTeam` method. The example demonstrates configuring authentication, instantiating the `LegacyTeamsApi`, and calling the method with the target team ID and an `UpdateTeam` model object containing the updated data. It returns the updated `Team` model object upon successful execution.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/LegacyTeamsApi.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\LegacyTeamsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the team\n$update_team = new \\Pipedrive\\versions\\v1\\Model\\UpdateTeam(); // \\Pipedrive\\versions\\v1\\Model\\UpdateTeam\n\ntry {\n    $result = $apiInstance->updateTeam($id, $update_team);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling LegacyTeamsApi->updateTeam: ', $e->getMessage(), PHP_EOL;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving Deals Products with Pipedrive API - PHP\nDESCRIPTION: Fetches products attached to multiple deals by their IDs with pagination and sorting capabilities. It requires API key or OAuth2 authorization and supports array input for deal IDs (maximum 100), optional cursor for pagination, entry limit (up to 500), and configurable sorting fields and direction. The method returns a DealsProductsResponse model containing the products data attached to the specified deals.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v2/Api/DealsApi.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n$apiInstance = new Pipedrive\\versions\\v2\\Api\\DealsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$deal_ids = array(56); // int[] | IDs of deals to fetch products for, max 100\n$cursor = 'cursor_example'; // string | Pagination cursor (optional)\n$limit = 100; // int | Pagination entry limit, max 500, default 100\n$sort_by = 'id'; // string | Sort field: id, deal_id, add_time, update_time\n$sort_direction = 'asc'; // string | Sort direction: asc or desc\n\ntry {\n    $result = $apiInstance->getDealsProducts($deal_ids, $cursor, $limit, $sort_by, $sort_direction);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling DealsApi->getDealsProducts: ', $e->getMessage(), PHP_EOL;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving Single Product Field using Pipedrive PHP Client\nDESCRIPTION: This snippet demonstrates how to retrieve data for a specific product field by its ID using the Pipedrive PHP client library. It includes steps for configuring API key or OAuth2 authentication, initializing the API client, and calling the getProductField method with the required integer ID, along with error handling.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/ProductFieldsApi.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\ProductFieldsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the product field\n\ntry {\n    $result = $apiInstance->getProductField($id);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling ProductFieldsApi->getProductField: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating a Lead Label using Pipedrive PHP API\nDESCRIPTION: Demonstrates how to modify an existing lead label identified by its ID. This involves configuring authentication (API Key or OAuth2), instantiating the `LeadLabelsApi` client, providing the label's string ID, and creating an `UpdateLeadLabelRequest` object containing the properties to be updated (population not shown). The `updateLeadLabel` method is then called with the ID and request body. This requires the Pipedrive PHP client and a compatible HTTP client like Guzzle.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/LeadLabelsApi.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\LeadLabelsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 'id_example'; // string | The ID of the lead label\n$update_lead_label_request = new \\Pipedrive\\versions\\v1\\Model\\UpdateLeadLabelRequest(); // \\Pipedrive\\versions\\v1\\Model\\UpdateLeadLabelRequest\n\ntry {\n    $result = $apiInstance->updateLeadLabel($id, $update_lead_label_request);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling LeadLabelsApi->updateLeadLabel: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Mail Thread Details API PUT Endpoint\nDESCRIPTION: Updates mail thread details. This API call uses the PUT method and targets the `/mailbox/mailThreads/{id}` endpoint, where `{id}` is the unique identifier of the mail thread to be updated. Input contains the details to update the specified mail thread.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/README.md#_snippet_41\n\nLANGUAGE: N/A\nCODE:\n```\nN/A\n```\n\n----------------------------------------\n\nTITLE: OrganizationDeleteResponse Model Properties in Markdown\nDESCRIPTION: Documentation table showing the properties of the OrganizationDeleteResponse model, including their types and descriptions. The model contains a boolean success indicator and a data object of type OrganizationDeleteResponseData.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Model/OrganizationDeleteResponse.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# # OrganizationDeleteResponse\n\n## Properties\n\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**success** | **bool** | If the request was successful or not |\n**data** | [**\\Pipedrive\\versions\\v1\\Model\\OrganizationDeleteResponseData**](OrganizationDeleteResponseData.md) |  |\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Single Person Field using Pipedrive PHP SDK\nDESCRIPTION: This snippet shows how to retrieve detailed information about a single person field by its ID using the Pipedrive PHP client. The API client is initialized with authentication, and getPersonField() is called with the field ID to fetch the data. The method returns a FieldResponse object containing the field's details. Requires Guzzle HTTP client and authorization via API key or OAuth2 token.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/PersonFieldsApi.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\PersonFieldsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the field\n\ntry {\n    $result = $apiInstance->getPersonField($id);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling PersonFieldsApi->getPersonField: ', $e->getMessage(), PHP_EOL;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Listing Installments on Deals with Pipedrive API - PHP\nDESCRIPTION: Lists installments attached to a given array of deal IDs, supporting pagination and sorting by fields such as id, billing_date, and deal_id. This feature is restricted to Advanced and higher plans. It requires API key or OAuth2 authorization, and allows optional pagination parameters to control result size and offset through a cursor and limit (maximum 500). Returns an InstallmentsResponse model containing the installment data.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v2/Api/DealsApi.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n$apiInstance = new Pipedrive\\versions\\v2\\Api\\DealsApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n$deal_ids = array(56); // int[] | IDs of deals to fetch installments for, max 100\n$cursor = 'cursor_example'; // string | Pagination cursor (optional)\n$limit = 100; // int | Pagination entry limit, max 500, default 100\n$sort_by = 'id'; // string | Sort field: id, billing_date, deal_id\n$sort_direction = 'asc'; // string | Sort direction: asc or desc\n\ntry {\n    $result = $apiInstance->getInstallments($deal_ids, $cursor, $limit, $sort_by, $sort_direction);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling DealsApi->getInstallments: ', $e->getMessage(), PHP_EOL;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Listing Deal Fields with Pipedrive PHP Client\nDESCRIPTION: This snippet demonstrates how to fetch a list of deal fields from the Pipedrive API using the PHP client. It covers setting up API key or OAuth2 authentication, initializing the DealFieldsApi client, and calling the `getDealFields` method with pagination parameters. Required dependencies include the Pipedrive PHP client library and GuzzleHttp.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/DealFieldsApi.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\DealFieldsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$start = 0; // int | Pagination start\n$limit = 56; // int | Items shown per page\n\ntry {\n    $result = $apiInstance->getDealFields($start, $limit);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling DealFieldsApi->getDealFields: ', $e->getMessage(), PHP_EOL;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Fetching User Settings using Pipedrive PHP Client\nDESCRIPTION: Demonstrates retrieving authorized user settings via the Pipedrive API using the PHP client library. The example shows how to include the autoloader, configure authentication using either an API key or OAuth2 token, instantiate the `UserSettingsApi` (optionally with a custom Guzzle client), call the `getUserSettings` method, and handle potential exceptions. The result, containing user settings, is printed upon success.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/UserSettingsApi.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\UserSettingsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n\ntry {\n    $result = $apiInstance->getUserSettings();\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling UserSettingsApi->getUserSettings: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Downloading a Pipedrive File using PHP\nDESCRIPTION: This code snippet demonstrates how to download a specific file from Pipedrive using its ID.  It requires the Pipedrive PHP API client and Guzzle HTTP client. The code configures API key or OAuth2 authentication, initializes the FilesApi, and then calls the `downloadFile` method with the file ID. The result is then printed, or an exception is caught and its message is displayed.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/FilesApi.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\FilesApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the file\n\ntry {\n    $result = $apiInstance->downloadFile($id);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling FilesApi->downloadFile: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Updating Organization Field API PUT Endpoint\nDESCRIPTION: Updates an organization field. This API call uses the PUT method and targets the `/organizationFields/{id}` endpoint, where `{id}` is the unique identifier of the organization field to update. Input includes the data to update the specified organization field.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/README.md#_snippet_60\n\nLANGUAGE: N/A\nCODE:\n```\nN/A\n```\n\n----------------------------------------\n\nTITLE: Retrieving Deals Attached to a Product with Pipedrive Client - PHP\nDESCRIPTION: This code example illustrates how to fetch a paginated list of deals associated with a specific product using Pipedrive's PHP client. Required dependencies include the Pipedrive PHP SDK and Guzzle. Key parameters are the product ID, pagination start, limit per page (maximum 100), and the optional status filter (e.g., 'all_not_deleted'). Response is a ListDealsResponse object. API key or OAuth2 mechanisms are supported for authentication. Exception handling handles errors from the API.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/ProductsApi.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\ProductsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the product\n$start = 0; // int | Pagination start\n$limit = 56; // int | Items shown per page\n$status = 'all_not_deleted'; // string | Only fetch deals with a specific status. If omitted, all not deleted deals are returned. If set to deleted, deals that have been deleted up to 30 days ago will be included.\n\ntry {\n    $result = $apiInstance->getProductDeals($id, $start, $limit, $status);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling ProductsApi->getProductDeals: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Pipedrive Files using PHP\nDESCRIPTION: This code snippet retrieves data for all files in Pipedrive, with pagination and sorting options. It relies on the Pipedrive PHP API client and Guzzle HTTP client. The code configures API key or OAuth2 authentication, initializes the FilesApi, and calls the `getFiles` method with optional `start`, `limit`, and `sort` parameters for pagination and sorting.  The result (an array of file objects) is printed, or an exception is caught and its message displayed.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/FilesApi.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\FilesApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$start = 0; // int | Pagination start\n$limit = 56; // int | Items shown per page. Please note that a maximum value of 100 is allowed.\n$sort = 'sort_example'; // string | Supported fields: `id`, `update_time`\n\ntry {\n    $result = $apiInstance->getFiles($start, $limit, $sort);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling FilesApi->getFiles: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Searching Organizations using Pipedrive PHP Client\nDESCRIPTION: Illustrates configuring the Pipedrive API v2 client for PHP (API key or OAuth2), creating an OrganizationsApi instance, and executing a search using the searchOrganization method. This example specifies a search term, optional fields to search within, an exact match flag, and pagination parameters (limit and cursor). Basic exception handling is included.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v2/Api/OrganizationsApi.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v2\\Api\\OrganizationsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$term = 'term_example'; // string | The search term to look for. Minimum 2 characters (or 1 if using `exact_match`). Please note that the search term has to be URL encoded.\n$fields = 'fields_example'; // string | A comma-separated string array. The fields to perform the search from. Defaults to all of them. Only the following custom field types are searchable: `address`, `varchar`, `text`, `varchar_auto`, `double`, `monetary` and `phone`. Read more about searching by custom fields <a href=\"https://support.pipedrive.com/en/article/search-finding-what-you-need#searching-by-custom-fields\" target=\"_blank\" rel=\"noopener noreferrer\">here</a>.\n$exact_match = True; // bool | When enabled, only full exact matches against the given term are returned. It is <b>not</b> case sensitive.\n$limit = 100; // int | For pagination, the limit of entries to be returned. If not provided, 100 items will be returned. Please note that a maximum value of 500 is allowed.\n$cursor = 'cursor_example'; // string | For pagination, the marker (an opaque string value) representing the first item on the next page\n\ntry {\n    $result = $apiInstance->searchOrganization($term, $fields, $exact_match, $limit, $cursor);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling OrganizationsApi->searchOrganization: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting an Organization Relationship in Pipedrive using PHP\nDESCRIPTION: Shows how to delete an existing organization relationship by its ID using the Pipedrive PHP SDK (v1). This example configures the API client, creates an instance of `OrganizationRelationshipsApi`, and calls `deleteOrganizationRelationship` with the target relationship ID. Requires the Pipedrive PHP SDK and GuzzleHttp client.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/OrganizationRelationshipsApi.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\OrganizationRelationshipsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the organization relationship\n\ntry {\n    $result = $apiInstance->deleteOrganizationRelationship($id);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling OrganizationRelationshipsApi->deleteOrganizationRelationship: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Additional Discount with Pipedrive DealsApi in PHP\nDESCRIPTION: Demonstrates how to delete an additional discount from a Pipedrive deal using the `deleteAdditionalDiscount` method of the `DealsApi`. Requires including the `vendor/autoload.php` file, configuring authentication via API key or OAuth2 using `Pipedrive\\versions\\v2\\Configuration`, and instantiating `Pipedrive\\versions\\v2\\Api\\DealsApi`. The method takes the deal ID (`id`) and the discount ID (`discount_id`) as parameters and returns a response object upon success or throws an exception on failure.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v2/Api/DealsApi.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v2\\Api\\DealsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the deal\n$discount_id = 56; // int | The ID of the discount\n\ntry {\n    $result = $apiInstance->deleteAdditionalDiscount($id, $discount_id);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling DealsApi->deleteAdditionalDiscount: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Model Properties for ItemSearchResponseAllOf in PHP\nDESCRIPTION: This snippet documents the properties of the ItemSearchResponseAllOf model within the PHP client, indicating the data types and roles of 'data' and 'additional_data'. It serves as reference for developers implementing or interacting with this model for search response processing.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Model/ItemSearchResponseAllOf.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# # ItemSearchResponseAllOf\n\n## Properties\n\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**data** | [**\\Pipedrive\\versions\\v1\\Model\\ItemSearchResponseAllOfData**](ItemSearchResponseAllOfData.md) |  |\n**additional_data** | [**\\Pipedrive\\versions\\v1\\Model\\ItemSearchAdditionalData**](ItemSearchAdditionalData.md) |  |\n\n[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)\n```\n\n----------------------------------------\n\nTITLE: Saving User-Provider Link Using Pipedrive MeetingsApi in PHP\nDESCRIPTION: Links a user with the installed video call integration after the user installs the video calling app. The method accepts an optional UserProviderLinkCreateRequest model containing the link information and returns a UserProviderLinkSuccessResponse model upon success. It depends on the Pipedrive PHP client, GuzzleHttp client, and requires either API key or OAuth2 authorization. Proper exception handling is demonstrated to manage API call errors.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/MeetingsApi.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . \"/vendor/autoload.php\");\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey(\"api_token\", \"YOUR_API_KEY\");\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix(\"api_token\", \"Bearer\");\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken(\"YOUR_ACCESS_TOKEN\");\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\MeetingsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$user_provider_link_create_request = new \\Pipedrive\\versions\\v1\\Model\\UserProviderLinkCreateRequest(); // \\Pipedrive\\versions\\v1\\Model\\UserProviderLinkCreateRequest\n\ntry {\n    $result = $apiInstance->saveUserProviderLink($user_provider_link_create_request);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling MeetingsApi->saveUserProviderLink: ', $e->getMessage(), PHP_EOL;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Archiving Project using Pipedrive PHP Client\nDESCRIPTION: Illustrates the process of archiving a specific project using the Pipedrive PHP client. The snippet covers setting up API or OAuth2 authorization, creating the `ProjectsApi` client instance, and calling the `archiveProject` method with the project ID. It includes a basic try-catch block for error handling.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/ProjectsApi.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\ProjectsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the project\n\ntry {\n    $result = $apiInstance->archiveProject($id);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling ProjectsApi->archiveProject: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Tasks with Pipedrive PHP Client – PHP Function Signature\nDESCRIPTION: This snippet presents the PHP function signature for updating a task using the Pipedrive PHP client library. The method requires the task ID and a TaskPutObject containing the update data. It returns an UpdateTaskResponse object upon successful execution. This function is a direct interface to the API and assumes all parameter types are correctly constructed.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/TasksApi.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nupdateTask($id, $task_put_object): \\Pipedrive\\versions\\v1\\Model\\UpdateTaskResponse\n```\n\n----------------------------------------\n\nTITLE: Listing Organization Fields with Pipedrive PHP Client\nDESCRIPTION: Connects to the Pipedrive API using the PHP client, configuring authentication via API key or OAuth2. It demonstrates how to instantiate the `OrganizationFieldsApi` with an optional Guzzle HTTP client and calls the `getOrganizationFields` method with pagination parameters `$start` and `$limit`. Includes basic exception handling.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/OrganizationFieldsApi.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\OrganizationFieldsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$start = 0; // int | Pagination start\n$limit = 56; // int | Items shown per page\n\ntry {\n    $result = $apiInstance->getOrganizationFields($start, $limit);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling OrganizationFieldsApi->getOrganizationFields: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Documentation for DeleteTask Model Properties in Pipedrive PHP Client\nDESCRIPTION: This snippet defines the properties of the DeleteTask model, including 'success' as an optional boolean indicating request success, and 'data' as optional containing detailed delete task data object. It references related models and links for further navigation, serving as documentation for developers implementing or debugging delete task functionalities.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Model/DeleteTask.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# # DeleteTask\n\n## Properties\n\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**success** | **bool** | If the request was successful or not | [optional]\n**data** | [**\\Pipedrive\\versions\\v1\\Model\\DeleteTaskData**](DeleteTaskData.md) |  | [optional]\n\n[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)\n```\n\n----------------------------------------\n\nTITLE: Adding a New Activity using Pipedrive API v2 (PHP)\nDESCRIPTION: This snippet demonstrates how to add a new activity to Pipedrive using the `addActivity` method of the `ActivitiesApi` class. It involves configuring authentication (API key or OAuth2), instantiating the `ActivitiesApi` client (optionally with a custom Guzzle client), creating an `ActivityRequestBody` object with the activity details, and calling the method within a try-catch block to handle potential exceptions. The result, containing the newly created activity details, is printed upon success.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v2/Api/ActivitiesApi.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v2\\Api\\ActivitiesApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$activity_request_body = new \\Pipedrive\\versions\\v2\\Model\\ActivityRequestBody(); // \\Pipedrive\\versions\\v2\\Model\\ActivityRequestBody\n\ntry {\n    $result = $apiInstance->addActivity($activity_request_body);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling ActivitiesApi->addActivity: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Persons Associated with an Organization in PHP using Pipedrive API\nDESCRIPTION: Makes an API call to retrieve a list of persons associated with a specified organization. Supports pagination and returns marketing status information for organizations using the Campaigns product.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/OrganizationsApi.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\OrganizationsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the organization\n$start = 0; // int | Pagination start\n$limit = 56; // int | Items shown per page\n\ntry {\n    $result = $apiInstance->getOrganizationPersons($id, $start, $limit);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling OrganizationsApi->getOrganizationPersons: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring and Using Pipedrive UserConnectionsApi in PHP\nDESCRIPTION: This snippet demonstrates how to configure the Pipedrive PHP SDK to authenticate either via API key or OAuth2 and perform a GET request to retrieve all user connections for the authorized user. It shows the setup of the client, execution of the getUserConnections() method, and handling of potential exceptions. Dependencies include the Guzzle HTTP client and the Pipedrive PHP SDK.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/UserConnectionsApi.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\UserConnectionsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n\ntry {\n    $result = $apiInstance->getUserConnections();\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling UserConnectionsApi->getUserConnections: ', $e->getMessage(), PHP_EOL;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Deleting a Comment via Pipedrive API in PHP\nDESCRIPTION: This code snippet illustrates how to delete a comment associated with a note using the Pipedrive Notes API. It involves setting up authentication, specifying the note ID and comment ID, and calling the deleteComment method. The snippet requires the Pipedrive PHP client library and Guzzle HTTP client.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/NotesApi.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\NotesApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the note\n$comment_id = 'comment_id_example'; // string | The ID of the comment\n\ntry {\n    $result = $apiInstance->deleteComment($id, $comment_id);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling NotesApi->deleteComment: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Getting Lead Sources using the Pipedrive PHP Client\nDESCRIPTION: The example demonstrates how to retrieve all lead sources using the Pipedrive PHP client. It shows the configuration for both API key and OAuth2 authentication methods and includes error handling.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/LeadSourcesApi.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\LeadSourcesApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n\ntry {\n    $result = $apiInstance->getLeadSources();\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling LeadSourcesApi->getLeadSources: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Product Variations via Pipedrive PHP SDK\nDESCRIPTION: This PHP code snippet retrieves all variations of a specific product by its ID, with optional pagination through cursor and limit parameters. It involves setting up authentication, initializing the API client, and making the API call, expecting a ProductVariationsResponse object as the result.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v2/Api/ProductsApi.md#_snippet_14\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n$apiInstance = new Pipedrive\\versions\\v2\\Api\\ProductsApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int\n$cursor = 'cursor_example'; // string\n$limit = 100; // int\n\ntry {\n    $result = $apiInstance->getProductVariations($id, $cursor, $limit);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling ProductsApi->getProductVariations: ', $e->getMessage(), PHP_EOL;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Deleting Deal Follower with Pipedrive DealsApi in PHP\nDESCRIPTION: Shows how to remove a follower from a Pipedrive deal using the `deleteDealFollower` method. It requires standard setup including `vendor/autoload.php`, authentication configuration (API key/OAuth2), and `DealsApi` instantiation. The method takes the deal ID (`id`) and the follower's user ID (`follower_id`) as arguments.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v2/Api/DealsApi.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v2\\Api\\DealsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the deal\n$follower_id = 56; // int | The ID of the following user\n\ntry {\n    $result = $apiInstance->deleteDealFollower($id, $follower_id);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling DealsApi->deleteDealFollower: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Followers with Pipedrive PHP Client - PHP\nDESCRIPTION: This snippet demonstrates how to retrieve the followers for a specific user using the Pipedrive PHP API client. It covers setting up API key and OAuth2 authentication, initializing the UsersApi with an optional Guzzle HTTP client, specifying the user ID, and calling getUserFollowers. Prerequisites include installing the pipedrive/client-php package and providing valid API credentials. The $id parameter is the numeric user ID; the output is a \\Pipedrive\\versions\\v1\\Model\\UserIDs object. The snippet handles errors using a try-catch block and prints results.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/UsersApi.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\UsersApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the user\n\ntry {\n    $result = $apiInstance->getUserFollowers($id);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling UsersApi->getUserFollowers: ', $e->getMessage(), PHP_EOL;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Fetching All Teams with Pipedrive LegacyTeamsApi in PHP\nDESCRIPTION: Illustrates how to retrieve all teams within the company using the `getTeams` method of the `LegacyTeamsApi`. The example demonstrates authentication setup, API client instantiation, and calling the method with optional parameters for sorting (`order_by`) and excluding user details (`skip_users`). It returns a `Teams` model object upon success.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/LegacyTeamsApi.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\LegacyTeamsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$order_by = 'id'; // string | The field name to sort returned teams by\n$skip_users = new \\Pipedrive\\versions\\v1\\Model\\\\Pipedrive\\versions\\v1\\Model\\NumberBooleanDefault0(); // \\Pipedrive\\versions\\v1\\Model\\NumberBooleanDefault0 | When enabled, the teams will not include IDs of member users\n\ntry {\n    $result = $apiInstance->getTeams($order_by, $skip_users);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling LegacyTeamsApi->getTeams: ', $e->getMessage(), PHP_EOL;\n}\n\n```\n\n----------------------------------------\n\nTITLE: PersonSearchResponseAllOfData Model Structure in Markdown\nDESCRIPTION: Defines the structure of the PersonSearchResponseAllOfData model, which contains an 'items' property representing an array of found PersonSearchItem objects. This is part of the Pipedrive PHP client API documentation.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Model/PersonSearchResponseAllOfData.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# # PersonSearchResponseAllOfData\n\n## Properties\n\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**items** | [**\\Pipedrive\\versions\\v1\\Model\\PersonSearchItem[]**](PersonSearchItem.md) | The array of found items | [optional]\n\n[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)\n```\n\n----------------------------------------\n\nTITLE: Deleting a Follower from a Pipedrive Person - PHP\nDESCRIPTION: This snippet demonstrates how to remove a specific user follower from a person in Pipedrive using the PHP client. It requires the person's ID and the follower's ID. API key or OAuth2 authentication is needed. The function returns a DeleteFollowerResponse model upon success.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v2/Api/PersonsApi.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v2\\Api\\PersonsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the person\n$follower_id = 56; // int | The ID of the following user\n\ntry {\n    $result = $apiInstance->deletePersonFollower($id, $follower_id);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling PersonsApi->deletePersonFollower: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving all permission sets in PHP using Pipedrive API\nDESCRIPTION: Example code showing how to fetch data about all permission sets. The method accepts an optional app parameter to filter permission sets by a specific app.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/PermissionSetsApi.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\PermissionSetsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$app = 'app_example'; // string | The app to filter the permission sets by\n\ntry {\n    $result = $apiInstance->getPermissionSets($app);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling PermissionSetsApi->getPermissionSets: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Mail Threads API GET Endpoint\nDESCRIPTION: Gets mail threads. This API call uses the GET method and targets the `/mailbox/mailThreads` endpoint. No specific input is needed.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/README.md#_snippet_40\n\nLANGUAGE: N/A\nCODE:\n```\nN/A\n```\n\n----------------------------------------\n\nTITLE: Getting Details of a Call Log Using Pipedrive CallLogsApi in PHP\nDESCRIPTION: Demonstrates retrieval of detailed information for a specific call log by its ID using the getCallLog method. The method issues a GET request and returns a CallLogResponse200 model containing the call log's data. The client must be authenticated via API key or OAuth2. The snippet includes error handling for potential exceptions during the API call.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/CallLogsApi.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\CallLogsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 3cde3b05035cae14dcfc172bd8000d08; // string | The ID received when you create the call log\n\ntry {\n    $result = $apiInstance->getCallLog($id);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling CallLogsApi->getCallLog: ', $e->getMessage(), PHP_EOL;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Getting Users in a Legacy Team using Pipedrive PHP SDK (Signature)\nDESCRIPTION: Provides the method signature for retrieving all user IDs within a specific legacy team using `LegacyTeamsApi::getTeamUsers`. It takes the team ID (`$id`) as input and is expected to return a `UserIDs` model containing the list of user IDs in that team.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/LegacyTeamsApi.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\ngetTeamUsers($id): \\Pipedrive\\versions\\v1\\Model\\UserIDs\n```\n\n----------------------------------------\n\nTITLE: Updating Tasks with Pipedrive PHP Client – Full Example in PHP\nDESCRIPTION: This example demonstrates configuring the Pipedrive PHP client, authenticating using either an API key or OAuth2 token, and invoking the updateTask() method to update a specific task. Required dependencies include the pipedrive/client-php package and Guzzle HTTP client. Key parameters are the task ID (integer) and a TaskPutObject specifying update details. The output is the UpdateTaskResponse object; error handling is implemented for failed requests.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/TasksApi.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\TasksApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the task\n$task_put_object = new \\Pipedrive\\versions\\v1\\Model\\TaskPutObject(); // \\Pipedrive\\versions\\v1\\Model\\TaskPutObject\n\ntry {\n    $result = $apiInstance->updateTask($id, $task_put_object);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling TasksApi->updateTask: ', $e->getMessage(), PHP_EOL;\n}\n\n```\n\n----------------------------------------\n\nTITLE: OrganizationAddressInfo Properties Definition in Markdown\nDESCRIPTION: A markdown table defining all the properties of the OrganizationAddressInfo model, including property names, types, descriptions, and optional status. All properties are strings representing different parts of an organization's address.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Model/OrganizationAddressInfo.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\n\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**address** | **string** | The full address of the organization | [optional]\n**address_subpremise** | **string** | The sub-premise of the organization location | [optional]\n**address_street_number** | **string** | The street number of the organization location | [optional]\n**address_route** | **string** | The route of the organization location | [optional]\n**address_sublocality** | **string** | The sub-locality of the organization location | [optional]\n**address_locality** | **string** | The locality of the organization location | [optional]\n**address_admin_area_level_1** | **string** | The level 1 admin area of the organization location | [optional]\n**address_admin_area_level_2** | **string** | The level 2 admin area of the organization location | [optional]\n**address_country** | **string** | The country of the organization location | [optional]\n**address_postal_code** | **string** | The postal code of the organization location | [optional]\n**address_formatted_address** | **string** | The formatted organization location | [optional]\n```\n\n----------------------------------------\n\nTITLE: Adding a Deal Participant using Pipedrive API\nDESCRIPTION: This snippet adds a participant to an existing deal using the `addDealParticipant()` method. It requires the deal's ID and an `AddDealParticipantRequest` object. The code initializes the API, sets authorization using API keys or OAuth, and then invokes the `addDealParticipant` method to add the specified participant to a deal. This is useful for associating other team members to a deal.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/DealsApi.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n```php\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\DealsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the deal\n$add_deal_participant_request = new \\Pipedrive\\versions\\v1\\Model\\AddDealParticipantRequest(); // \\Pipedrive\\versions\\v1\\Model\\AddDealParticipantRequest\n\ntry {\n    $result = $apiInstance->addDealParticipant($id, $add_deal_participant_request);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling DealsApi->addDealParticipant: ', $e->getMessage(), PHP_EOL;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Retrieving Products of Deal - PHP\nDESCRIPTION: This snippet illustrates how to list products attached to a deal using `getDealProducts()`.  The function takes the deal ID, pagination parameters (start, limit), and an optional flag to include product data. The example initializes the Pipedrive API client, configures authorization with either an API key or an OAuth2 access token, and then calls the `getDealProducts()` function. The example also takes the `include_product_data` parameter.  It uses the Pipedrive PHP client library, the GuzzleHttp client and  requires valid authentication credentials and `YOUR_API_KEY` or `YOUR_ACCESS_TOKEN` to be replaced with the correct values.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/DealsApi.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\DealsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the deal\n$start = 0; // int | Pagination start\n$limit = 56; // int | Items shown per page\n$include_product_data = new \\Pipedrive\\versions\\v1\\Model\\\\Pipedrive\\versions\\v1\\Model\\NumberBoolean(); // \\Pipedrive\\versions\\v1\\Model\\NumberBoolean | Whether to fetch product data along with each attached product (1) or not (0, default)\n\ntry {\n    $result = $apiInstance->getDealProducts($id, $start, $limit, $include_product_data);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling DealsApi->getDealProducts: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Notes API GET Endpoint\nDESCRIPTION: Gets all notes. This API call uses the GET method and targets the `/notes` endpoint. No specific input is needed.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/README.md#_snippet_52\n\nLANGUAGE: N/A\nCODE:\n```\nN/A\n```\n\n----------------------------------------\n\nTITLE: Fetching Organization Changelog Using Pipedrive API in PHP\nDESCRIPTION: This snippet demonstrates how to retrieve the changelog for a specific organization from the Pipedrive API. It requires setting up authentication via API key or OAuth2 access token and initializes the OrganizationsApi client. Key parameters include the organization's ID, a pagination cursor to continue fetching data, and a limit for the number of items per page. The output is a ChangelogResponse model containing changes to the organization. Exception handling captures API call errors.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/OrganizationsApi.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\OrganizationsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the organization\n$cursor = 'cursor_example'; // string | For pagination, the marker (an opaque string value) representing the first item on the next page\n$limit = 56; // int | Items shown per page\n\ntry {\n    $result = $apiInstance->getOrganizationChangelog($id, $cursor, $limit);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling OrganizationsApi->getOrganizationChangelog: ', $e->getMessage(), PHP_EOL;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Getting Mail Thread API GET Endpoint\nDESCRIPTION: Gets one mail thread.  This API call uses the GET method and targets the `/mailbox/mailThreads/{id}` endpoint, where `{id}` is the unique identifier of the mail thread. The input is the mail thread ID.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/README.md#_snippet_38\n\nLANGUAGE: N/A\nCODE:\n```\nN/A\n```\n\n----------------------------------------\n\nTITLE: Deleting Project using Pipedrive PHP Client\nDESCRIPTION: Shows how to mark a Pipedrive project as deleted using the PHP client library. The example details configuring authorization, initializing the `ProjectsApi` client, and invoking the `deleteProject` method with the required project ID. Error handling via a try-catch block is included.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/ProjectsApi.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\ProjectsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the project\n\ntry {\n    $result = $apiInstance->deleteProject($id);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling ProjectsApi->deleteProject: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Messaging Channel in PHP using Pipedrive API\nDESCRIPTION: Example of how to add a new messaging channel to Pipedrive. Requires Messengers integration OAuth scope and the Messaging manifest. Only admins can register new channels.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/ChannelsApi.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\ChannelsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$channel_object = new \\Pipedrive\\versions\\v1\\Model\\ChannelObject(); // \\Pipedrive\\versions\\v1\\Model\\ChannelObject\n\ntry {\n    $result = $apiInstance->addChannel($channel_object);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling ChannelsApi->addChannel: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Response Structure for AddNewPipeline API in PHP\nDESCRIPTION: This snippet defines the response object for the AddNewPipeline API, including optional success flag and data model. It is used to interpret and handle API responses within the PHP client, requiring the Pipedrive data models for data property handling.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Model/AddNewPipeline.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n# Response object for AddNewPipeline API\nclass AddNewPipelineResponse {\n    /**\n     * @var bool|null Indicates if the request was successful\n     */\n    public $success;\n\n    /**\n     * @var \\Pipedrive\\versions\\v1\\Model\\BasePipeline|null Data model of the created pipeline\n     */\n    public $data;\n\n    public function __construct($success = null, $data = null) {\n        $this->success = $success;\n        $this->data = $data;\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: No code snippets available for the PersonData model description\nDESCRIPTION: The provided content is a documentation description of the PersonData model properties. There are no executable code snippets within this text.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Model/PersonData.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Querying Goals API GET Endpoint\nDESCRIPTION: Retrieves a list of goals. This API call uses the GET method and targets the `/goals/find` endpoint. The request retrieves data based on specified search criteria. There are no specific parameters shown in the text.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/README.md#_snippet_12\n\nLANGUAGE: N/A\nCODE:\n```\nN/A\n```\n\n----------------------------------------\n\nTITLE: Getting Organization Relationship API GET Endpoint\nDESCRIPTION: Gets one organization relationship. This API call uses the GET method and targets the `/organizationRelationships/{id}` endpoint, where `{id}` is the unique identifier of the organization relationship. The input is the relationship ID.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/README.md#_snippet_63\n\nLANGUAGE: N/A\nCODE:\n```\nN/A\n```\n\n----------------------------------------\n\nTITLE: Deleting Role Assignment in Pipedrive using PHP Client Library\nDESCRIPTION: This code demonstrates how to delete a role assignment in Pipedrive. It initializes the API client with either API key or OAuth2 authentication, creates a RolesApi instance, and calls the deleteRoleAssignment method with a role ID and request body.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/RolesApi.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\RolesApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the role\n$delete_role_assignment_request = new \\Pipedrive\\versions\\v1\\Model\\DeleteRoleAssignmentRequest(); // \\Pipedrive\\versions\\v1\\Model\\DeleteRoleAssignmentRequest\n\ntry {\n    $result = $apiInstance->deleteRoleAssignment($id, $delete_role_assignment_request);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling RolesApi->deleteRoleAssignment: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Multiple Deal Fields in Pipedrive using PHP\nDESCRIPTION: This snippet shows how to delete multiple deal fields in bulk using the Pipedrive API and PHP client. It initializes the API client with authorization and calls the deleteDealFields method with a comma-separated list of field IDs. The example depends on the Pipedrive PHP client library and GuzzleHttp.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/DealFieldsApi.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\DealFieldsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$ids = 'ids_example'; // string | The comma-separated field IDs to delete\n\ntry {\n    $result = $apiInstance->deleteDealFields($ids);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling DealFieldsApi->deleteDealFields: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Define DeleteTeamUserRequest Properties in PHP\nDESCRIPTION: This snippet documents the properties of the DeleteTeamUserRequest model, specifically the 'users' array intended to hold user IDs for deletion requests. It aids developers in understanding the expected data structure when interacting with the API. Dependencies include the PHP class where this model is used, and it expects an array of integers as input.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Model/DeleteTeamUserRequest.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n# # DeleteTeamUserRequest\n\n## Properties\n\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**users** | **int[]** | The list of user IDs |\n\n[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)\n```\n\n----------------------------------------\n\nTITLE: Navigation Links for Model Documentation\nDESCRIPTION: This snippet provides markdown links for navigating back to the models list, API endpoints, and main README documentation in the Pipedrive SDK. These links assist users in exploring related documentation sections efficiently.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Model/FieldType.md#_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Messages in a Mail Thread with Pipedrive PHP Client\nDESCRIPTION: This example demonstrates fetching all messages belonging to a specific mail thread using the Pipedrive PHP SDK. After authenticating (API key or OAuth2) and constructing the MailboxApi client, getMailThreadMessages is invoked with the mail thread's ID. The returned data is in the form of a MailThreadMessages model. The snippet handles exceptions and requires the SDK and valid credentials.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/MailboxApi.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\MailboxApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the mail thread\n\ntry {\n    $result = $apiInstance->getMailThreadMessages($id);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling MailboxApi->getMailThreadMessages: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Persons of Deal - PHP\nDESCRIPTION: This snippet demonstrates how to retrieve all persons associated with a specific deal using `getDealPersons()`.  It retrieves all associated persons, including primary contacts and participants. Authentication via API key or OAuth2 is required.  The function takes the deal ID, start index, and limit for pagination. The example sets up the API client, configures authentication with an API key or access token, and then calls the function to retrieve and print the results. Dependencies include the Pipedrive PHP client library, the GuzzleHttp client, and proper authentication. The example relies on `YOUR_API_KEY` or `YOUR_ACCESS_TOKEN` being replaced with the actual values.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/DealsApi.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\DealsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the deal\n$start = 0; // int | Pagination start\n$limit = 56; // int | Items shown per page\n\ntry {\n    $result = $apiInstance->getDealPersons($id, $start, $limit);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling DealsApi->getDealPersons: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Follower from an Organization using Pipedrive PHP SDK\nDESCRIPTION: This snippet demonstrates deleting a user follower from an organization using the Pipedrive PHP SDK. It requires both the organization ID and the follower's user ID. The deleteOrganizationFollower() method returns a DeleteFollowerResponse model indicating the operation result. API key or OAuth2 token authorizes the request. Standard error handling is included to catch exceptions during the API call.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v2/Api/OrganizationsApi.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n$apiInstance = new Pipedrive\\versions\\v2\\Api\\OrganizationsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the organization\n$follower_id = 56; // int | The ID of the following user\n\ntry {\n    $result = $apiInstance->deleteOrganizationFollower($id, $follower_id);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling OrganizationsApi->deleteOrganizationFollower: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Specific Comment via Pipedrive NotesApi in PHP\nDESCRIPTION: This snippet demonstrates how to fetch a single comment using its ID and the associated note ID. It requires including the Composer autoloader, configuring either API key or OAuth2 authentication, and instantiating the `NotesApi` client. The `getComment` method is called with the note ID and comment ID, and the result is printed within a try-catch block for error handling.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/NotesApi.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\NotesApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the note\n$comment_id = 'comment_id_example'; // string | The ID of the comment\n\ntry {\n    $result = $apiInstance->getComment($id, $comment_id);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling NotesApi->getComment: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Organizations API DELETE Endpoint\nDESCRIPTION: Deletes an organization.  This API call uses the DELETE method and targets the `/organizations/{id}` endpoint, where `{id}` is the unique identifier of the organization to be deleted. Input consists of the organization ID.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/README.md#_snippet_68\n\nLANGUAGE: N/A\nCODE:\n```\nN/A\n```\n\n----------------------------------------\n\nTITLE: Deleting a Product using Pipedrive PHP SDK\nDESCRIPTION: Code example showing how to delete a product in Pipedrive with the PHP SDK. The method marks a product as deleted (soft delete), and after 30 days it will be permanently removed from the system.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/ProductsApi.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\ProductsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the product\n\ntry {\n    $result = $apiInstance->deleteProduct($id);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling ProductsApi->deleteProduct: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Organization Relationships API GET Endpoint\nDESCRIPTION: Gets all relationships for organization. This API call uses the GET method and targets the `/organizationRelationships` endpoint.  No specific input is needed.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/README.md#_snippet_64\n\nLANGUAGE: N/A\nCODE:\n```\nN/A\n```\n\n----------------------------------------\n\nTITLE: Retrieving Products Associated with a Deal in PHP using Pipedrive API\nDESCRIPTION: This example demonstrates how to get all products associated with a specific deal using the Pipedrive API. It configures authentication using either API key or OAuth2, initializes the DealsApi client, and calls the getDealProducts method with optional pagination and sorting parameters.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v2/Api/DealsApi.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v2\\Api\\DealsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the deal\n$cursor = 'cursor_example'; // string | For pagination, the marker (an opaque string value) representing the first item on the next page\n$limit = 100; // int | For pagination, the limit of entries to be returned. If not provided, 100 items will be returned. Please note that a maximum value of 500 is allowed.\n$sort_by = 'id'; // string | The field to sort by. Supported fields: `id`, `add_time`, `update_time`.\n$sort_direction = 'asc'; // string | The sorting direction. Supported values: `asc`, `desc`.\n\ntry {\n    $result = $apiInstance->getDealProducts($id, $cursor, $limit, $sort_by, $sort_direction);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling DealsApi->getDealProducts: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Revoking OAuth 2.0 Tokens (PHP)\nDESCRIPTION: Demonstrates how to revoke OAuth tokens using the `revokeToken()` method on the configured Configuration object. Passing 'refresh_token' as the hint revokes all associated tokens, while 'access_token' revokes only the current access token.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/README.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n// this will revoke all user tokens\n$config->revokeToken('refresh_token');\n\n/* OR */\n\n// this will revoke only access token\n$config->revokeToken('access_token');\n```\n\n----------------------------------------\n\nTITLE: Find Subscription by Deal in Pipedrive using PHP\nDESCRIPTION: This code snippet demonstrates how to find a subscription by deal ID using the Pipedrive API in PHP. It initializes the API client with authentication details (API key or OAuth2 token), then calls the `findSubscriptionByDeal` method with the deal ID. The result is then printed to the console. Requires the Pipedrive PHP client library and GuzzleHttp.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/SubscriptionsApi.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\SubscriptionsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$deal_id = 56; // int | The ID of the deal\n\ntry {\n    $result = $apiInstance->findSubscriptionByDeal($deal_id);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling SubscriptionsApi->findSubscriptionByDeal: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Configuring and Updating Activity Type in Pipedrive API - PHP\nDESCRIPTION: This PHP snippet configures the Pipedrive API client with API key and OAuth2 authorization, instantiates the `ActivityTypesApi` class, sets the ID of the activity type to be updated, and attempts to update the activity type. It takes an ID (integer) and an `ActivityTypeUpdateRequest` object as input. It returns an `ActivityTypeCreateUpdateDeleteResponse` object, or throws an exception on failure.  It requires the GuzzleHttp and Pipedrive PHP SDK libraries.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/ActivityTypesApi.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\ActivityTypesApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the activity type\n$activity_type_update_request = new \\Pipedrive\\versions\\v1\\Model\\ActivityTypeUpdateRequest(); // \\Pipedrive\\versions\\v1\\Model\\ActivityTypeUpdateRequest\n\ntry {\n    $result = $apiInstance->updateActivityType($id, $activity_type_update_request);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling ActivityTypesApi->updateActivityType: ', $e->getMessage(), PHP_EOL;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining the NoteFieldsResponseAllOf Model in PHP\nDESCRIPTION: This snippet outlines the structure of the NoteFieldsResponseAllOf model class in PHP, including its properties 'data' and 'additional_data'. Dependencies include other model classes such as GetNoteField and AdditionalData. The class serves to structure API responses related to note fields, supporting serialization and validation.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Model/NoteFieldsResponseAllOf.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n# Example PHP class structure for NoteFieldsResponseAllOf\nclass NoteFieldsResponseAllOf {\n    /**\n     * @var GetNoteField[] | null\n     */\n    public $data;\n\n    /**\n     * @var AdditionalData | null\n     */\n    public $additional_data;\n\n    // Constructor, getters, setters, and other methods can be added as needed\n}\n```\n\n----------------------------------------\n\nTITLE: Model class for RelatedUserData in PHP\nDESCRIPTION: Defines the PHP class for RelatedUserData, representing an optional related user object within the API response. This class manages user-related data serialization and deserialization, enabling integration of user info into the application.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Model/ListPersonsResponseAllOfRelatedObjects.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace Pipedrive\\versions\\v1\\Model;\n\nclass RelatedUserData {\n    /**\n     * @var int|null \n     */\n    public $user_id;\n\n    /**\n     * @var string|null \n     */\n    public $user_name;\n\n    // Additional properties and methods for data handling can be added here\n}\n\n```\n\n----------------------------------------\n\nTITLE: Querying Company Add-ons Using Pipedrive Billing API in PHP\nDESCRIPTION: This PHP code sample demonstrates how to authenticate and call the Pipedrive Billing API v1 `getCompanyAddons` endpoint to retrieve all add-ons for a single company. Dependencies include the official `pipedrive/client-php` library and (optionally) `guzzlehttp/guzzle` for custom HTTP client functionality. It requires either an API key or OAuth2 access token for authentication. The `getCompanyAddons` method does not accept parameters and returns a `SubscriptionAddonsResponse` object. Output is printed to the console, and errors are caught and displayed. Ensure the API client is properly installed and configured before use.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/BillingApi.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\BillingApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n\ntry {\n    $result = $apiInstance->getCompanyAddons();\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling BillingApi->getCompanyAddons: ', $e->getMessage(), PHP_EOL;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Getting Note API GET Endpoint\nDESCRIPTION: Gets one note.  This API call uses the GET method and targets the `/notes/{id}` endpoint, where `{id}` is the unique identifier of the note. The input is the note ID.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/README.md#_snippet_50\n\nLANGUAGE: N/A\nCODE:\n```\nN/A\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Project Phase via Pipedrive PHP Client\nDESCRIPTION: This PHP snippet provides an example of retrieving the details of a specific project phase by its integer ID using the pipedrive/client-php library. The example includes API authentication setup, API client initialization, method invocation, and exception handling. The required parameter is the phase ID, and responses are returned as GetProjectPhaseResponse objects; dependencies and client setup follow the same conventions as other examples in this file.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/ProjectTemplatesApi.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\ProjectTemplatesApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the project phase\n\ntry {\n    $result = $apiInstance->getProjectsPhase($id);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling ProjectTemplatesApi->getProjectsPhase: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Projects with Pipedrive API in PHP\nDESCRIPTION: This code snippet retrieves a list of projects using the Pipedrive API. It configures API key or OAuth2 authentication, instantiates the `ProjectsApi` class, and calls the `getProjects` method. Parameters such as `cursor`, `limit`, `filter_id`, `status`, `phase_id`, and `include_archived` can be used to filter the results. Error handling is included to catch and display exceptions during the API call.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/ProjectsApi.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\ProjectsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$cursor = 'cursor_example'; // string | For pagination, the marker (an opaque string value) representing the first item on the next page\n$limit = 100; // int | For pagination, the limit of entries to be returned. If not provided, 100 items will be returned.\n$filter_id = 56; // int | The ID of the filter to use\n$status = open,completed; // string | If supplied, includes only projects with the specified statuses. Possible values are `open`, `completed`, `canceled` and `deleted`. By default `deleted` projects are not returned.\n$phase_id = 56; // int | If supplied, only projects in specified phase are returned\n$include_archived = True; // bool | If supplied with `true` then archived projects are also included in the response. By default only not archived projects are returned.\n\ntry {\n    $result = $apiInstance->getProjects($cursor, $limit, $filter_id, $status, $phase_id, $include_archived);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling ProjectsApi->getProjects: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Deals Movement Statistics for a Pipeline using PHP\nDESCRIPTION: This code snippet shows how to obtain statistics for deals movements within a pipeline over a specified time period. It configures API access, creates the API client, defines the pipeline ID, start and end dates, and optionally the user ID. The call is wrapped in a try-catch block to handle exceptions and outputs the movement statistics.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/PipelinesApi.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\PipelinesApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int\n$start_date = new \\DateTime(\"2013-10-20T19:20:30+01:00\"); // \\DateTime\n$end_date = new \\DateTime(\"2013-10-20T19:20:30+01:00\"); // \\DateTime\n$user_id = 56; // int\n\ntry {\n    $result = $apiInstance->getPipelineMovementStatistics($id, $start_date, $end_date, $user_id);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling PipelinesApi->getPipelineMovementStatistics: ', $e->getMessage(), PHP_EOL;\n}\n\n```\n\n----------------------------------------\n\nTITLE: ProjectResponseObject Properties Documentation in Markdown\nDESCRIPTION: Comprehensive documentation of all properties in the ProjectResponseObject class, including data types and descriptions. This table defines the structure of project objects returned by the Pipedrive API, covering details like project ID, title, dates, relationships, and metadata.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Model/ProjectResponseObject.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# # ProjectResponseObject\n\n## Properties\n\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**id** | **int** | The ID of the project, generated when the task was created | [optional]\n**title** | **string** | The title of the project | [optional]\n**board_id** | **float** | The ID of the board this project is associated with | [optional]\n**phase_id** | **float** | The ID of the phase this project is associated with | [optional]\n**description** | **string** | The description of the project | [optional]\n**status** | **string** | The status of the project | [optional]\n**owner_id** | **float** | The ID of a project owner | [optional]\n**start_date** | **\\DateTime** | The start date of the project. Format: YYYY-MM-DD. | [optional]\n**end_date** | **\\DateTime** | The end date of the project. Format: YYYY-MM-DD. | [optional]\n**deal_ids** | **int[]** | An array of IDs of the deals this project is associated with | [optional]\n**org_id** | **float** | The ID of the organization this project is associated with | [optional]\n**person_id** | **float** | The ID of the person this project is associated with | [optional]\n**labels** | **int[]** | An array of IDs of the labels this project has | [optional]\n**add_time** | **string** | The creation date and time of the project in UTC. Format: YYYY-MM-DD HH:MM:SS. | [optional]\n**update_time** | **string** | The update date and time of the project in UTC. Format: YYYY-MM-DD HH:MM:SS. | [optional]\n**status_change_time** | **string** | The status changed date and time of the project in UTC. Format: YYYY-MM-DD HH:MM:SS. | [optional]\n**archive_time** | **string** | The archived date and time of the project in UTC. Format: YYYY-MM-DD HH:MM:SS. If not archived then 'null'. | [optional]\n```\n\n----------------------------------------\n\nTITLE: Getting filter helpers in Pipedrive using PHP\nDESCRIPTION: Retrieves all supported filter helpers, which provide information about available conditions and helpers for adding or updating filters.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/FiltersApi.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\FiltersApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n\ntry {\n    $result = $apiInstance->getFilterHelpers();\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling FiltersApi->getFilterHelpers: ', $e->getMessage(), PHP_EOL;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Getting Organization Activities API GET Endpoint\nDESCRIPTION: Lists activities associated with an organization.  This API call uses the GET method and targets the `/organizations/{id}/activities` endpoint, where `{id}` is the unique identifier of the organization. The input is the organization ID.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/README.md#_snippet_72\n\nLANGUAGE: N/A\nCODE:\n```\nN/A\n```\n\n----------------------------------------\n\nTITLE: Listing permission set assignments in PHP using Pipedrive API\nDESCRIPTION: Example code demonstrating how to retrieve assignments for a permission set. The method requires a permission set ID and supports optional pagination parameters (start and limit).\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/PermissionSetsApi.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\PermissionSetsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 'id_example'; // string | The ID of the permission set\n$start = 0; // int | Pagination start\n$limit = 56; // int | Items shown per page\n\ntry {\n    $result = $apiInstance->getPermissionSetAssignments($id, $start, $limit);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling PermissionSetsApi->getPermissionSetAssignments: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Configure API Token 5.x - Pipedrive PHP\nDESCRIPTION: In version 5.x, API token configuration is explicitly set on a Configuration object using the 'api_token' prefix, unlike 4.x which relied on the Client instance constructor. This involves instantiating the Configuration class and calling the `setApiKey` method with the key name and your token.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/MIGRATION-5.x.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Pipedrive\\Configuration;\n\n$config = new Configuration();\n$config->setApiKey('api_token', 'YOUR_API_TOKEN');\n```\n\n----------------------------------------\n\nTITLE: Listing Organization Followers Using Pipedrive PHP SDK\nDESCRIPTION: Lists users who are followers of a specified organization by its ID. Supports pagination through optional limit and cursor parameters to control the number and position of returned followers. Requires the Pipedrive PHP client, Guzzle HTTP client, and authorization via API key or OAuth2 token. Inputs include organization ID (integer), optional limit (int, up to 500), and optional pagination cursor (string). Outputs a GetFollowers model containing the followers list.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v2/Api/OrganizationsApi.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\ngetOrganizationFollowers($id, $limit, $cursor): \\Pipedrive\\versions\\v2\\Model\\GetFollowers\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v2\\Api\\OrganizationsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the organization\n$limit = 100; // int | For pagination, the limit of entries to be returned. If not provided, 100 items will be returned. Please note that a maximum value of 500 is allowed.\n$cursor = 'cursor_example'; // string | For pagination, the marker (an opaque string value) representing the first item on the next page\n\ntry {\n    $result = $apiInstance->getOrganizationFollowers($id, $limit, $cursor);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling OrganizationsApi->getOrganizationFollowers: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Deal Participants - PHP\nDESCRIPTION: This snippet demonstrates how to retrieve participants associated with a specific deal using the `getDealParticipants()` function from the Pipedrive API.  It requires an API key or OAuth2 access token for authentication.  The function takes the deal ID, start index, and limit as parameters and returns a list of deal participants. The example initializes the API client, sets the API key (or OAuth2 token), and then calls the function with a sample deal ID to display the results.  It depends on the Pipedrive PHP client library, GuzzleHttp client and  `YOUR_API_KEY` or `YOUR_ACCESS_TOKEN` being replaced with actual values.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/DealsApi.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\DealsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the deal\n$start = 0; // int | Pagination start\n$limit = 56; // int | Items shown per page\n\ntry {\n    $result = $apiInstance->getDealParticipants($id, $start, $limit);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling DealsApi->getDealParticipants: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Role Assignments in Pipedrive using PHP Client Library\nDESCRIPTION: This code demonstrates how to retrieve all users assigned to a specific role in Pipedrive. It initializes the API client with authentication, creates a RolesApi instance, and calls the getRoleAssignments method with role ID and pagination parameters.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/RolesApi.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\RolesApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the role\n$start = 0; // int | Pagination start\n$limit = 56; // int | Items shown per page\n\ntry {\n    $result = $apiInstance->getRoleAssignments($id, $start, $limit);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling RolesApi->getRoleAssignments: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a File in Pipedrive with PHP\nDESCRIPTION: Marks a file as deleted in Pipedrive by its ID. The file will be permanently deleted after 30 days. Requires authentication with either an API key or OAuth2 token.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/FilesApi.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\ndeleteFile($id): \\Pipedrive\\versions\\v1\\Model\\DeleteFile\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\FilesApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the file\n\ntry {\n    $result = $apiInstance->deleteFile($id);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling FilesApi->deleteFile: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Comment API GET Endpoint\nDESCRIPTION: Gets one comment. This API call uses the GET method and targets the `/notes/{id}/comments/{commentId}` endpoint, where `{id}` is the note ID and `{commentId}` is the comment ID. The input includes the note ID and comment ID.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/README.md#_snippet_49\n\nLANGUAGE: N/A\nCODE:\n```\nN/A\n```\n\n----------------------------------------\n\nTITLE: Adding Follower to Organization in Pipedrive API (PHP)\nDESCRIPTION: This code snippet demonstrates how to add a follower to an organization in Pipedrive using the PHP client library. It sets up API key or OAuth2 authentication, initializes the OrganizationsApi, creates an AddOrganizationFollowerRequest model instance, and then calls the addOrganizationFollower method with the organization ID and the request object. It requires the Pipedrive PHP client library, a valid API key or OAuth2 token, and an organization ID.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/OrganizationsApi.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\OrganizationsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the organization\n$add_organization_follower_request = new \\Pipedrive\\versions\\v1\\Model\\AddOrganizationFollowerRequest(); // \\Pipedrive\\versions\\v1\\Model\\AddOrganizationFollowerRequest\n\ntry {\n    $result = $apiInstance->addOrganizationFollower($id, $add_organization_follower_request);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling OrganizationsApi->addOrganizationFollower: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Updating a Deal Field with Pipedrive PHP Client\nDESCRIPTION: This snippet illustrates how to update a specific deal field in Pipedrive using the PHP client. It requires configuring API key or OAuth2 authentication, creating the API client instance, and preparing a `FieldUpdateRequest` object with the data to update. The `updateDealField` method is then called with the field ID and the request object. The Pipedrive PHP client library and GuzzleHttp are required dependencies.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/DealFieldsApi.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\DealFieldsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the field\n$field_update_request = new \\Pipedrive\\versions\\v1\\Model\\FieldUpdateRequest(); // \\Pipedrive\\versions\\v1\\Model\\FieldUpdateRequest\n\ntry {\n    $result = $apiInstance->updateDealField($id, $field_update_request);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling DealFieldsApi->updateDealField: ', $e->getMessage(), PHP_EOL;\n}\n\n```\n\n----------------------------------------\n\nTITLE: List Deals 5.x - Pipedrive PHP\nDESCRIPTION: In version 5.x, API operations require dedicated API instances, like `DealsApi`. This snippet shows how to instantiate `DealsApi` with a `Configuration` object and call the `getDeals()` method with positional arguments for filtering and pagination.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/MIGRATION-5.x.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse Pipedrive\\Client;\nuse Pipedrive\\Configuration;\nuse Pipedrive\\Api\\DealsApi;\n\n$config = new Configuration();\n\n/* ...configuration needed here... */\n\n$dealsApiInstance = new DealsApi(null, $config);\n$response = $dealsApiInstance->getDeals(\n    null,\n    null,\n    null,\n    'open',\n    0,\n    10,\n);\n```\n\n----------------------------------------\n\nTITLE: Getting a Specific Deal Field in Pipedrive using PHP\nDESCRIPTION: This snippet shows how to retrieve a specific deal field's data using the Pipedrive API and the PHP client library. It configures the API client with authorization, sets the ID of the field to retrieve, and calls the getDealField method. The example depends on the Pipedrive PHP client library and GuzzleHttp.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/DealFieldsApi.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\DealFieldsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the field\n\ntry {\n    $result = $apiInstance->getDealField($id);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling DealFieldsApi->getDealField: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Getting Organization API GET Endpoint\nDESCRIPTION: Gets details of an organization.  This API call uses the GET method and targets the `/organizations/{id}` endpoint, where `{id}` is the unique identifier of the organization. The input is the organization ID.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/README.md#_snippet_71\n\nLANGUAGE: N/A\nCODE:\n```\nN/A\n```\n\n----------------------------------------\n\nTITLE: ProjectGroupsObject Properties Documentation in Markdown\nDESCRIPTION: Markdown table documenting the properties of the ProjectGroupsObject model including their types, descriptions, and optional status.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Model/ProjectGroupsObject.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\n\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**id** | **float** | ID of the group | [optional]\n**name** | **string** | Name of the group | [optional]\n**order_nr** | **float** | Order number of the group | [optional]\n```\n\n----------------------------------------\n\nTITLE: Exchange Authorization Code 5.x - Pipedrive PHP\nDESCRIPTION: Version 5.x processes the authorization code received in the OAuth redirect using the `authorize()` method directly on the `Configuration` instance. This method exchanges the code for tokens, automatically updates the configuration's token fields, and triggers the configured update callback.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/MIGRATION-5.x.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Pipedrive\\Configuration;\n\n$config = new Configuration();\n/* ... */\n\n$config->authorize($code);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Mail Messages for an Organization in PHP using Pipedrive API\nDESCRIPTION: Makes an API call to list mail messages associated with a specific organization. Requires organization ID and allows optional pagination parameters.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/OrganizationsApi.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\OrganizationsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the organization\n$start = 0; // int | Pagination start\n$limit = 56; // int | Items shown per page\n\ntry {\n    $result = $apiInstance->getOrganizationMailMessages($id, $start, $limit);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling OrganizationsApi->getOrganizationMailMessages: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Deal Follower with Pipedrive API\nDESCRIPTION: This snippet shows how to add a follower to a deal using the `addDealFollower()` method. It requires the deal's ID and an `AddDealFollowerRequest` object. The code initializes the Pipedrive API, sets authorization, and then attempts to add the follower. This operation associates a user to follow up on deal changes.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/DealsApi.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n```php\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\DealsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the deal\n$add_deal_follower_request = new \\Pipedrive\\versions\\v1\\Model\\AddDealFollowerRequest(); // \\Pipedrive\\versions\\v1\\Model\\AddDealFollowerRequest\n\ntry {\n    $result = $apiInstance->addDealFollower($id, $add_deal_follower_request);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling DealsApi->addDealFollower: ', $e->getMessage(), PHP_EOL;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Fetching Activities with Pipedrive API\nDESCRIPTION: This snippet demonstrates how to retrieve activities from the Pipedrive API using the `getActivities` method. It showcases how to configure API key and OAuth2 authentication, set optional parameters like user ID, filter ID, activity type, pagination limits, start/end dates, and done status, and handles potential exceptions during the API call. It requires the Pipedrive PHP client library and Guzzle HTTP client.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/ActivitiesApi.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\ActivitiesApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$user_id = 56; // int | The ID of the user whose activities will be fetched. If omitted, the user associated with the API token will be used. If 0, activities for all company users will be fetched based on the permission sets.\n$filter_id = 56; // int | The ID of the filter to use (will narrow down results if used together with `user_id` parameter)\n$type = 'type_example'; // string | The type of the activity, can be one type or multiple types separated by a comma. This is in correlation with the `key_string` parameter of ActivityTypes.\n$limit = 100; // int | For pagination, the limit of entries to be returned. If not provided, 100 items will be returned.\n$start = 0; // int | For pagination, the position that represents the first result for the page\n$start_date = new \\DateTime(\"2013-10-20T19:20:30+01:00\"); // \\DateTime | Use the activity due date where you wish to begin fetching activities from. Insert due date in YYYY-MM-DD format.\n$end_date = new \\DateTime(\"2013-10-20T19:20:30+01:00\"); // \\DateTime | Use the activity due date where you wish to stop fetching activities from. Insert due date in YYYY-MM-DD format.\n$done = new \\Pipedrive\\versions\\v1\\Model\\\\Pipedrive\\versions\\v1\\Model\\NumberBoolean(); // \\Pipedrive\\versions\\v1\\Model\\NumberBoolean | Whether the activity is done or not. 0 = Not done, 1 = Done. If omitted returns both done and not done activities.\n\ntry {\n    $result = $apiInstance->getActivities($user_id, $filter_id, $type, $limit, $start, $start_date, $end_date, $done);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling ActivitiesApi->getActivities: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Mail Thread by ID Using Pipedrive PHP SDK\nDESCRIPTION: This PHP snippet retrieves a specific mail thread from the Pipedrive Mailbox API. It sets up authentication (API key or OAuth2), prepares the MailboxApi client, and calls getMailThread with the thread ID as a parameter. The result is returned as a MailThreadOne model. Proper exception handling is demonstrated. The required dependency is the Pipedrive PHP SDK with user authorization.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/MailboxApi.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\MailboxApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the mail thread\n\ntry {\n    $result = $apiInstance->getMailThread($id);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling MailboxApi->getMailThread: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Comment for Note API PUT Endpoint\nDESCRIPTION: Updates a comment related to a note. This API call uses the PUT method and targets the `/notes/{id}/comments/{commentId}` endpoint, where `{id}` is the note ID and `{commentId}` is the comment ID. The input consists of the note ID, comment ID, and updated comment details.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/README.md#_snippet_53\n\nLANGUAGE: N/A\nCODE:\n```\nN/A\n```\n\n----------------------------------------\n\nTITLE: Defining the PersonSearchItemOrganization Data Model in PHP\nDESCRIPTION: This code snippet defines the PersonSearchItemOrganization model class in PHP, including optional properties 'id' and 'name' with appropriate data types. It serves as a data container for organization-related information in API responses, enabling easy serialization and deserialization.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v2/Model/PersonSearchItemItemOrganization.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nclass PersonSearchItemOrganization {\n    /**\n     * @var int|null The ID of the organization the person is associated with\n     */\n    public ?int $id;\n\n    /**\n     * @var string|null The name of the organization the person is associated with\n     */\n    public ?string $name;\n\n    // Constructor, getters, setters, or other methods can be added here\n}\n\n```\n\n----------------------------------------\n\nTITLE: Exchange Authorization Code 4.x - Pipedrive PHP\nDESCRIPTION: Version 4.x handles the OAuth redirect by creating a `Client` instance and passing the received authorization code to the `$client->auth()->authorize()` method. This method exchanges the code for access and refresh tokens.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/MIGRATION-5.x.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Pipedrive\\Client;\n\n$code = /* get query param value */;\n\n$client = new Client(/* ... */);\n\n$token = $client->auth()->authorize($code);\n```\n\n----------------------------------------\n\nTITLE: Get Persons Collection with Pipedrive PHP\nDESCRIPTION: Retrieves a collection of person records from the Pipedrive API using the `getPersonsCollection` method. This snippet configures the API client with an API key or OAuth2 token, then calls the method with optional pagination, date range, owner, and first character filters. It handles potential exceptions and prints the result.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/PersonsApi.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\PersonsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$cursor = 'cursor_example'; // string | For pagination, the marker (an opaque string value) representing the first item on the next page\n$limit = 100; // int | For pagination, the limit of entries to be returned. If not provided, 100 items will be returned. Please note that a maximum value of 500 is allowed.\n$since = 'since_example'; // string | The time boundary that points to the start of the range of data. Datetime in ISO 8601 format. E.g. 2022-11-01 08:55:59. Operates on the `update_time` field.\n$until = 'until_example'; // string | The time boundary that points to the end of the range of data. Datetime in ISO 8601 format. E.g. 2022-11-01 08:55:59. Operates on the `update_time` field.\n$owner_id = 56; // int | If supplied, only persons owned by the given user will be returned\n$first_char = 'first_char_example'; // string | If supplied, only persons whose name starts with the specified letter will be returned (case-insensitive)\n\ntry {\n    $result = $apiInstance->getPersonsCollection($cursor, $limit, $since, $until, $owner_id, $first_char);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling PersonsApi->getPersonsCollection: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Listing Deal Followers Pipedrive PHP\nDESCRIPTION: This snippet illustrates how to retrieve the list of followers for a specific Pipedrive deal using the PHP client library. It covers setting up authentication via API key or OAuth2, initializing the Deals API client, providing the necessary deal ID parameter, making the API call to fetch followers, displaying the result, and handling potential errors gracefully using a try-catch block.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/DealsApi.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\DealsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the deal\n\ntry {\n    $result = $apiInstance->getDealFollowers($id);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling DealsApi->getDealFollowers: ', $e->getMessage(), PHP_EOL;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving Deal Changelog Pipedrive PHP\nDESCRIPTION: This snippet demonstrates how to retrieve the changelog (updates on field values) for a specific Pipedrive deal using the PHP client. It shows how to set up API key or OAuth2 authentication, instantiate the Deals API class, define required parameters like the deal ID and optional pagination parameters (cursor, limit), make the API call, print the successful result, and handle potential exceptions.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/DealsApi.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\DealsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the deal\n$cursor = 'cursor_example'; // string | For pagination, the marker (an opaque string value) representing the first item on the next page\n$limit = 56; // int | Items shown per page\n\ntry {\n    $result = $apiInstance->getDealChangelog($id, $cursor, $limit);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling DealsApi->getDealChangelog: ', $e->getMessage(), PHP_EOL;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Deleting Multiple Persons in Bulk via Pipedrive API in PHP\nDESCRIPTION: This example demonstrates how to use the Pipedrive PHP client to mark multiple persons as deleted by providing a comma-separated string of person IDs. Authentication is set with either an API key or OAuth2 token. The 'deletePersons' method accepts a string of IDs and initiates the deletion process, returning a DeletePersonsInBulkResponse object on success. Use exception handling to manage errors; deleted persons are permanently removed after 30 days.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/PersonsApi.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\PersonsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$ids = 'ids_example'; // string | The comma-separated IDs that will be deleted\n\ntry {\n    $result = $apiInstance->deletePersons($ids);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling PersonsApi->deletePersons: ', $e->getMessage(), PHP_EOL;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving Mail Threads using Pipedrive API in PHP\nDESCRIPTION: This code snippet demonstrates how to retrieve mail threads from a specified folder using the Pipedrive API. It configures API key or OAuth2 authentication, initializes the MailboxApi, and calls the `getMailThreads` method with parameters for folder, pagination start, and limit. It handles potential exceptions and prints the API response.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/MailboxApi.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\MailboxApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$folder = 'inbox'; // string | The type of folder to fetch\n$start = 0; // int | Pagination start\n$limit = 56; // int | Items shown per page\n\ntry {\n    $result = $apiInstance->getMailThreads($folder, $start, $limit);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling MailboxApi->getMailThreads: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Bulk Deleting Person Fields using Pipedrive PHP SDK\nDESCRIPTION: This snippet illustrates how to delete multiple person fields in bulk by providing a comma-separated string of field IDs. The Pipedrive API client is configured with either an API key or OAuth2 token, and calls deletePersonFields() with the IDs string. The method marks all specified fields as deleted and returns a BulkDeleteResponse object. Requires Guzzle HTTP client and valid authorization credentials.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/PersonFieldsApi.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\PersonFieldsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$ids = 'ids_example'; // string | The comma-separated field IDs to delete\n\ntry {\n    $result = $apiInstance->deletePersonFields($ids);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling PersonFieldsApi->deletePersonFields: ', $e->getMessage(), PHP_EOL;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Listing Person Mail Messages using Pipedrive Persons API in PHP\nDESCRIPTION: This snippet shows how to list mail messages associated with a specific person via the Pipedrive PHP client. It includes authentication setup (API key/OAuth2), instantiation of the `PersonsApi`, and calling the `getPersonMailMessages` method, providing the person ID and pagination parameters (start, limit). The resulting list of messages or an exception is printed.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/PersonsApi.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\PersonsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the person\n$start = 0; // int | Pagination start\n$limit = 56; // int | Items shown per page\n\ntry {\n    $result = $apiInstance->getPersonMailMessages($id, $start, $limit);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling PersonsApi->getPersonMailMessages: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Organization Deals API GET Endpoint\nDESCRIPTION: Lists deals associated with an organization. This API call uses the GET method and targets the `/organizations/{id}/deals` endpoint, where `{id}` is the unique identifier of the organization. The input is the organization ID.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/README.md#_snippet_74\n\nLANGUAGE: N/A\nCODE:\n```\nN/A\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Role Settings with Pipedrive PHP Client - PHP\nDESCRIPTION: This code sample illustrates retrieving the settings of a user's assigned role via the Pipedrive PHP client library. It covers setting API authentication, creating an instance of UsersApi, specifying the user ID, and invoking getUserRoleSettings. Required dependencies are pipedrive/client-php and GuzzleHttp. The $id parameter identifies the user and the result is a \\Pipedrive\\versions\\v1\\Model\\GetRoleSettings object. Try-catch error management is included and outputs are printed.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/UsersApi.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\UsersApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the user\n\ntry {\n    $result = $apiInstance->getUserRoleSettings($id);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling UsersApi->getUserRoleSettings: ', $e->getMessage(), PHP_EOL;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Documenting the ActivityTypeBulkDeleteResponseAllOf Data Property\nDESCRIPTION: This snippet describes the 'data' property of the model, which holds an instance of ActivityTypeBulkDeleteResponseAllOfData. It serves as a container for bulk delete operation results related to activity types, establishing relationships with other data models in the SDK.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Model/ActivityTypeBulkDeleteResponseAllOf.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# # ActivityTypeBulkDeleteResponseAllOf\n\n## Properties\n\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**data** | [**\\\\Pipedrive\\\\versions\\\\v1\\\\Model\\\\ActivityTypeBulkDeleteResponseAllOfData**](ActivityTypeBulkDeleteResponseAllOfData.md) |  |\n\n[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)\n```\n\n----------------------------------------\n\nTITLE: Listing All Project Templates via Pipedrive PHP Client\nDESCRIPTION: This PHP snippet shows how to retrieve a paginated list of all undeleted project templates using the Pipedrive PHP client. You need to have pipedrive/client-php and its dependencies installed, and provide API authentication through an API key or OAuth2 token. The parameters include an optional cursor for pagination and an optional limit (default 500) on the number of items returned; both parameters are strings and integers, respectively. The response yields a GetProjectTemplatesResponse object, and exceptions are caught and displayed if the API call fails.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/ProjectTemplatesApi.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\ProjectTemplatesApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$cursor = 'cursor_example'; // string | For pagination, the marker (an opaque string value) representing the first item on the next page\n$limit = 500; // int | For pagination, the limit of entries to be returned. If not provided, up to 500 items will be returned.\n\ntry {\n    $result = $apiInstance->getProjectTemplates($cursor, $limit);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling ProjectTemplatesApi->getProjectTemplates: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Storing OAuth 2.0 Access Token in Session (PHP)\nDESCRIPTION: Provides an example of storing the obtained OAuth 2.0 access token object for later reuse, using the PHP `$_SESSION` superglobal. The token is retrieved from the configuration object using `getAccessToken()`.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/README.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n// store token\n$_SESSION['access_token'] = $config->getAccessToken();\n```\n\n----------------------------------------\n\nTITLE: Searching Item Search API Field GET Endpoint\nDESCRIPTION: Performs a search using a specific field from an item type.  This API call uses the GET method and targets the `/itemSearch/field` endpoint. Requires appropriate authentication and authorization. The input will include the field to search by.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/README.md#_snippet_15\n\nLANGUAGE: N/A\nCODE:\n```\nN/A\n```\n\n----------------------------------------\n\nTITLE: Getting Lead Users API GET Endpoint\nDESCRIPTION: Lists permitted users for a lead. This API call uses the GET method and targets the `/leads/{id}/permittedUsers` endpoint. The input is the ID of the lead.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/README.md#_snippet_24\n\nLANGUAGE: N/A\nCODE:\n```\nN/A\n```\n\n----------------------------------------\n\nTITLE: Documenting DealSearchItemOwner Properties in PHP\nDESCRIPTION: This snippet documents the DealSearchItemOwner class, specifically the 'id' property representing the owner's ID for a deal. It notes the property as optional and details its purpose within the model.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Model/DealSearchItemItemOwner.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n# # DealSearchItemItemOwner\n\n## Properties\n\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**id** | **int** | The ID of the owner of the deal | [optional]\n\n[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)\n```\n\n----------------------------------------\n\nTITLE: Defining the ActivityDistributionDataWithAdditionalData Model in PHP\nDESCRIPTION: This code snippet defines a PHP class representing a data model for activity distribution with optional properties for activity distribution details, pagination controls, and a flag indicating additional items. Dependencies include other models and documentation references. It facilitates data handling in API responses or requests.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Model/ActivityDistributionDataWithAdditionalData.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n# # ActivityDistributionDataWithAdditionalData\n\n## Properties\n\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**activity_distribution** | [**\\\\Pipedrive\\\\versions\\\\v1\\\\Model\\\\ActivityDistribution**](ActivityDistribution.md) |  | [optional]\n**start** | **int** | Pagination start | [optional]\n**limit** | **int** | Items shown per page | [optional]\n**more_items_in_collection** | **bool** | If there are more list items in the collection than displayed or not | [optional]\n\n[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)\n```\n\n----------------------------------------\n\nTITLE: Fetching All Filters in PHP\nDESCRIPTION: This snippet demonstrates how to retrieve all filters using the Pipedrive API in PHP. It configures API key and OAuth2 authorization before making the API call. The `type` parameter is used to specify the type of filters to fetch.  The result is then printed or any exceptions are caught and displayed.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/FiltersApi.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\FiltersApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$type = new \\Pipedrive\\versions\\v1\\Model\\\\Pipedrive\\versions\\v1\\Model\\FilterType(); // \\Pipedrive\\versions\\v1\\Model\\FilterType | The types of filters to fetch\n\ntry {\n    $result = $apiInstance->getFilters($type);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling FiltersApi->getFilters: ', $e->getMessage(), PHP_EOL;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Updating a Product Variation with Pipedrive API in PHP\nDESCRIPTION: This code snippet illustrates updating a specific variation of a product using the Pipedrive API. It involves setting up API key or OAuth2 authentication, specifying the product ID and variation ID, and providing a request body containing the update details.  It relies on the Pipedrive PHP client library and Guzzle HTTP client. The result of the update operation is printed.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v2/Api/ProductsApi.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v2\\Api\\ProductsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the product\n$product_variation_id = 56; // int | The ID of the product variation\n$body = new \\stdClass; // object\n\ntry {\n    $result = $apiInstance->updateProductVariation($id, $product_variation_id, $body);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling ProductsApi->updateProductVariation: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Getting Organization Fields API GET Endpoint\nDESCRIPTION: Gets all organization fields. This API call uses the GET method and targets the `/organizationFields` endpoint. No specific input is needed.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/README.md#_snippet_59\n\nLANGUAGE: N/A\nCODE:\n```\nN/A\n```\n\n----------------------------------------\n\nTITLE: Deleting a Person Field using Pipedrive PHP SDK\nDESCRIPTION: This snippet demonstrates how to delete a specific person field by its ID using the Pipedrive PHP client. The API client is configured with authentication credentials and used to call deletePersonField() with the integer ID of the target field. The method marks the field as deleted and returns a DeleteResponse object. Requires Guzzle HTTP client and proper authorization via API key or OAuth2.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/PersonFieldsApi.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\PersonFieldsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the field\n\ntry {\n    $result = $apiInstance->deletePersonField($id);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling PersonFieldsApi->deletePersonField: ', $e->getMessage(), PHP_EOL;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Data Model Properties for Deal List Activities Response in PHP Client\nDESCRIPTION: This code snippet documents the properties of the DealListActivitiesResponseAllOfRelatedObjects model, detailing optional related object properties such as organization, person, deal, and user. Each property links to a specific model class, with references to their detailed definitions, enabling structured API response handling in PHP. No executable code is present; it's a property schema definition.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Model/DealListActivitiesResponseAllOfRelatedObjects.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# # DealListActivitiesResponseAllOfRelatedObjects\n\n## Properties\n\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**organization** | [**\\Pipedrive\\versions\\v1\\Model\\RelatedOrganizationDataWithActiveFlag**](RelatedOrganizationDataWithActiveFlag.md) |  | [optional]\n**person** | [**\\Pipedrive\\versions\\v1\\Model\\RelatedPersonDataWithActiveFlag**](RelatedPersonDataWithActiveFlag.md) |  | [optional]\n**deal** | [**\\Pipedrive\\versions\\v1\\Model\\RelatedDealData**](RelatedDealData.md) |  | [optional]\n**user** | [**\\Pipedrive\\versions\\v1\\Model\\RelatedUserData**](RelatedUserData.md) |  | [optional]\n\n[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)\n```\n\n----------------------------------------\n\nTITLE: Getting Organization Users API GET Endpoint\nDESCRIPTION: Lists permitted users for an organization. This API call uses the GET method and targets the `/organizations/{id}/permittedUsers` endpoint, where `{id}` is the unique identifier of the organization. The input is the organization ID.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/README.md#_snippet_80\n\nLANGUAGE: N/A\nCODE:\n```\nN/A\n```\n\n----------------------------------------\n\nTITLE: Getting Leads API GET Endpoint\nDESCRIPTION: Gets all leads.  This API call uses the GET method and targets the `/leads` endpoint. No specific input is needed.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/README.md#_snippet_25\n\nLANGUAGE: N/A\nCODE:\n```\nN/A\n```\n\n----------------------------------------\n\nTITLE: Storing and Retrieving OAuth Access Token for Pipedrive PHP Client\nDESCRIPTION: Examples of storing an OAuth access token in a session and setting up a callback to update the stored token when it changes.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v2/README.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n// store token\n$_SESSION['access_token'] = $config->getAccessToken();\n\n// Set up token update callback\n$config->setOAuthTokenUpdateCallback(function ($token) {\n    $_SESSION['token'] = $token;\n});\n\n// load token later...\n$config->setAccessToken($_SESSION['token']->access_token);\n\n// If you want to set all of the OAuth2 related fields at once from the token gotten from Pipedrive OAuth server\n// you can use the updateOAuthRelatedFields() function\n$config->updateOAuthRelatedFields($_SESSION['token']);\n// This will set the access token, expiresIn, expiresAt, scope and host attributes in the Configuration class\n// In order to get automatic access token refreshing, you will still need the client ID, client secret and redirectURI\n\n// Set other configuration, then instantiate client\n$activitiesApiInstance = new ActivitiesApi(null, $config);\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Comments for a Note via Pipedrive NotesApi in PHP\nDESCRIPTION: This example demonstrates retrieving all comments associated with a specific note, supporting pagination. After including the autoloader and configuring authentication, the `NotesApi` client is instantiated. The `getNoteComments` method is called with the note ID, and optional `start` and `limit` parameters for pagination control. The results are printed within a try-catch block.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/NotesApi.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\NotesApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the note\n$start = 0; // int | Pagination start\n$limit = 56; // int | Items shown per page\n\ntry {\n    $result = $apiInstance->getNoteComments($id, $start, $limit);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling NotesApi->getNoteComments: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Organizations with Pipedrive Client - PHP\nDESCRIPTION: This snippet demonstrates how to retrieve a list of organizations from Pipedrive using the getOrganizations method of the OrganizationsApi class. It requires the pipedrive/client-php library, the Guzzle HTTP client for making API requests, and an API key or OAuth2 token for authentication. Key parameters include user_id, filter_id, first_char, start, limit, and sort, which allow filtering and paginating results. The output is an instance of AllOrganizationsGetResponse containing data on the matching organizations. Limitations include the need for valid credentials and respecting filter precedence rules.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/OrganizationsApi.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\OrganizationsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$user_id = 56; // int | If supplied, only organizations owned by the given user will be returned. However, `filter_id` takes precedence over `user_id` when both are supplied.\n$filter_id = 56; // int | The ID of the filter to use\n$first_char = 'first_char_example'; // string | If supplied, only organizations whose name starts with the specified letter will be returned (case-insensitive)\n$start = 0; // int | Pagination start\n$limit = 56; // int | Items shown per page\n$sort = 'sort_example'; // string | The field names and sorting mode separated by a comma (`field_name_1 ASC`, `field_name_2 DESC`). Only first-level field keys are supported (no nested keys).\n\ntry {\n    $result = $apiInstance->getOrganizations($user_id, $filter_id, $first_char, $start, $limit, $sort);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling OrganizationsApi->getOrganizations: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Team Users API GET Endpoint\nDESCRIPTION: Gets all users in a team. This API call uses the GET method and targets the `/legacyTeams/{id}/users` endpoint, where `{id}` is the unique identifier of the team. The input is the team ID.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/README.md#_snippet_32\n\nLANGUAGE: N/A\nCODE:\n```\nN/A\n```\n\n----------------------------------------\n\nTITLE: Adding Team Users API POST Endpoint\nDESCRIPTION: Adds users to a team. This API call uses the POST method and targets the `/legacyTeams/{id}/users` endpoint, where `{id}` is the unique identifier of the team.  Input contains the user information to add to the team.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/README.md#_snippet_29\n\nLANGUAGE: N/A\nCODE:\n```\nN/A\n```\n\n----------------------------------------\n\nTITLE: Model Property Definition for RelationshipOrganizationInfoItemAllOf in PHP\nDESCRIPTION: This snippet defines the 'value' property for the RelationshipOrganizationInfoItemAllOf model in the PHP client, indicating it is an optional integer representing the organization ID. It serves as part of the data model for organization relationship information in the API client.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Model/RelationshipOrganizationInfoItemAllOf.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n# # RelationshipOrganizationInfoItemAllOf\n\n## Properties\n\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**value** | **int** | The ID of the organization | [optional]\n```\n\n----------------------------------------\n\nTITLE: Getting Organization Updates API GET Endpoint\nDESCRIPTION: Lists updates about an organization.  This API call uses the GET method and targets the `/organizations/{id}/flow` endpoint, where `{id}` is the unique identifier of the organization. The input is the organization ID.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/README.md#_snippet_79\n\nLANGUAGE: N/A\nCODE:\n```\nN/A\n```\n\n----------------------------------------\n\nTITLE: Deleting a Deal with Pipedrive DealsApi in PHP\nDESCRIPTION: Illustrates marking a Pipedrive deal as deleted using the `deleteDeal` method. The deal is permanently removed after 30 days. The example includes setting up the environment by requiring `vendor/autoload.php`, configuring API key or OAuth2 authentication, and creating an instance of `Pipedrive\\versions\\v2\\Api\\DealsApi`. The `deleteDeal` method requires the deal ID (`id`) as input.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v2/Api/DealsApi.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v2\\Api\\DealsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the deal\n\ntry {\n    $result = $apiInstance->deleteDeal($id);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling DealsApi->deleteDeal: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating a Person via Pipedrive API - PHP\nDESCRIPTION: This code snippet demonstrates how to update a person's details using the Pipedrive API with the PHP client. It configures API key or OAuth2 authorization, initializes the PersonsApi, and calls the `updatePerson` method with the person's ID and update data. The snippet requires the Pipedrive PHP client library and Guzzle HTTP client. It outputs the result of the update operation or catches and displays any exceptions.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/PersonsApi.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\PersonsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the person\n$update_person = new \\Pipedrive\\versions\\v1\\Model\\UpdatePerson(); // \\Pipedrive\\versions\\v1\\Model\\UpdatePerson\n\ntry {\n    $result = $apiInstance->updatePerson($id, $update_person);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling PersonsApi->updatePerson: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Adding a Goal via Pipedrive API in PHP\nDESCRIPTION: This snippet demonstrates how to add a new goal using the Pipedrive API with the PHP client. It initializes the API client with API key or OAuth2 authentication, creates a `NewGoal` model, and then calls the `addGoal` method to create the goal. Error handling is included to catch exceptions during the API call. Requires the Pipedrive PHP client library and Guzzle HTTP client.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/GoalsApi.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\GoalsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$new_goal = new \\Pipedrive\\versions\\v1\\Model\\NewGoal(); // \\Pipedrive\\versions\\v1\\Model\\NewGoal\n\ntry {\n    $result = $apiInstance->addGoal($new_goal);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling GoalsApi->addGoal: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Merging Two Deals Using PHP Pipedrive Client\nDESCRIPTION: This example shows how to merge two deals using the Pipedrive PHP client. It configures API authentication and makes a request to the mergeDeals endpoint with the ID of the deal and merge request data.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/DealsApi.md#_snippet_27\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\DealsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the deal\n$merge_deals_request = new \\Pipedrive\\versions\\v1\\Model\\MergeDealsRequest(); // \\Pipedrive\\versions\\v1\\Model\\MergeDealsRequest\n\ntry {\n    $result = $apiInstance->mergeDeals($id, $merge_deals_request);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling DealsApi->mergeDeals: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Organization Mail Messages API GET Endpoint\nDESCRIPTION: Lists mail messages associated with an organization.  This API call uses the GET method and targets the `/organizations/{id}/mailMessages` endpoint, where `{id}` is the unique identifier of the organization. The input is the organization ID.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/README.md#_snippet_77\n\nLANGUAGE: N/A\nCODE:\n```\nN/A\n```\n\n----------------------------------------\n\nTITLE: Updating Leads API PATCH Endpoint\nDESCRIPTION: Updates a lead. This API call uses the PATCH method and targets the `/leads/{id}` endpoint, where `{id}` is the unique identifier of the lead to update. The input contains the data needed to update the specified lead.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/README.md#_snippet_27\n\nLANGUAGE: N/A\nCODE:\n```\nN/A\n```\n\n----------------------------------------\n\nTITLE: Deleting a Call Log Using Pipedrive CallLogsApi in PHP\nDESCRIPTION: Shows how to delete an existing call log by its ID using the deleteCallLog method. If the call log has an attached audio recording, it will also be deleted by this operation. The deletion does not affect related activities linked to the call log. A BaseResponse model is returned to indicate the operation result. Authentication via API key or OAuth2 is required. The snippet includes proper exception handling for API errors.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/CallLogsApi.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\CallLogsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 3cde3b05035cae14dcfc172bd8000d08; // string | The ID received when you create the call log\n\ntry {\n    $result = $apiInstance->deleteCallLog($id);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling CallLogsApi->deleteCallLog: ', $e->getMessage(), PHP_EOL;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Deleting Organization Field API DELETE Endpoint\nDESCRIPTION: Deletes an organization field. This API call uses the DELETE method and targets the `/organizationFields/{id}` endpoint, where `{id}` is the unique identifier of the organization field. The input is the field ID.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/README.md#_snippet_56\n\nLANGUAGE: N/A\nCODE:\n```\nN/A\n```\n\n----------------------------------------\n\nTITLE: Getting Organization Field API GET Endpoint\nDESCRIPTION: Gets one organization field.  This API call uses the GET method and targets the `/organizationFields/{id}` endpoint, where `{id}` is the unique identifier of the organization field. The input is the field ID.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/README.md#_snippet_58\n\nLANGUAGE: N/A\nCODE:\n```\nN/A\n```\n\n----------------------------------------\n\nTITLE: Defining GetItemSearchResponseData Class in PHP\nDESCRIPTION: This code snippet defines the GetItemSearchResponseData class with two optional properties, 'data' and 'additional_data', representing the core response data and additional pagination info, respectively. It uses PHP class syntax and type hints to specify property types and optionality, supporting serialization and API response handling.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v2/Model/GetItemSearchResponseData.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n# Class definition for GetItemSearchResponseData\nclass GetItemSearchResponseData {\n    /**\n     * @var GetItemSearchResponseDataData|null\n     */\n    public ?GetItemSearchResponseDataData $data = null;\n\n    /**\n     * @var AdditionalDataWithCursorPagination|null\n     */\n    public ?AdditionalDataWithCursorPagination $additional_data = null;\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Organization Followers API GET Endpoint\nDESCRIPTION: Lists followers of an organization.  This API call uses the GET method and targets the `/organizations/{id}/followers` endpoint, where `{id}` is the unique identifier of the organization. The input is the organization ID.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/README.md#_snippet_76\n\nLANGUAGE: N/A\nCODE:\n```\nN/A\n```\n\n----------------------------------------\n\nTITLE: Deleting Multiple Deals in Bulk using Pipedrive PHP Client\nDESCRIPTION: This PHP snippet shows how to delete multiple deals in bulk using the Pipedrive v1 API client. It involves setting up authentication (API key or OAuth2), creating a `DealsApi` instance, and calling the `deleteDeals` method with a comma-separated string of deal IDs. Deleted deals are marked and permanently removed after 30 days.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/DealsApi.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\DealsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$ids = 'ids_example'; // string | The comma-separated IDs that will be deleted\n\ntry {\n    $result = $apiInstance->deleteDeals($ids);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling DealsApi->deleteDeals: ', $e->getMessage(), PHP_EOL;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Deleting Mail Thread API DELETE Endpoint\nDESCRIPTION: Deletes a mail thread. This API call uses the DELETE method and targets the `/mailbox/mailThreads/{id}` endpoint, where `{id}` is the unique identifier of the mail thread.  The input would be the mail thread ID.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/README.md#_snippet_36\n\nLANGUAGE: N/A\nCODE:\n```\nN/A\n```\n\n----------------------------------------\n\nTITLE: Deleting Leads API DELETE Endpoint\nDESCRIPTION: Deletes a lead.  This API call uses the DELETE method and targets the `/leads/{id}` endpoint, where `{id}` is the unique identifier of the lead to be deleted. The input would be the ID of the lead.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/README.md#_snippet_22\n\nLANGUAGE: N/A\nCODE:\n```\nN/A\n```\n\n----------------------------------------\n\nTITLE: LeadSearchItemItem Properties Documentation in Markdown\nDESCRIPTION: Documentation table describing all properties of the LeadSearchItemItem model class, including their types, descriptions, and optional status.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Model/LeadSearchItemItem.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# # LeadSearchItemItem\n\n## Properties\n\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**id** | **string** | The ID of the lead | [optional]\n**type** | **string** | The type of the item | [optional]\n**title** | **string** | The title of the lead | [optional]\n**owner** | [**\\Pipedrive\\versions\\v1\\Model\\LeadSearchItemItemOwner**](LeadSearchItemItemOwner.md) |  | [optional]\n**person** | [**\\Pipedrive\\versions\\v1\\Model\\LeadSearchItemItemPerson**](LeadSearchItemItemPerson.md) |  | [optional]\n**organization** | [**\\Pipedrive\\versions\\v1\\Model\\LeadSearchItemItemOrganization**](LeadSearchItemItemOrganization.md) |  | [optional]\n**phones** | **string[]** |  | [optional]\n**emails** | **string[]** |  | [optional]\n**custom_fields** | **string[]** | Custom fields | [optional]\n**notes** | **string[]** | An array of notes | [optional]\n**value** | **int** | The value of the lead | [optional]\n**currency** | **string** | The currency of the lead | [optional]\n**visible_to** | **int** | The visibility of the lead | [optional]\n**is_archived** | **bool** | A flag indicating whether the lead is archived or not | [optional]\n```\n\n----------------------------------------\n\nTITLE: Deleting a Person's Picture via Pipedrive API in PHP\nDESCRIPTION: This snippet outlines how to delete a picture associated with a person using the Pipedrive PHP client. After authenticating with either API key or OAuth2, the method 'deletePersonPicture' is called with the target person's ID. No content type header is required for this operation, and successful deletion is confirmed with the response; failures are managed by exception handling.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/PersonsApi.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\PersonsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the person\n\ntry {\n    $result = $apiInstance->deletePersonPicture($id);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling PersonsApi->deletePersonPicture: ', $e->getMessage(), PHP_EOL;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Adding Organization Follower API POST Endpoint\nDESCRIPTION: Adds a follower to an organization. This API call uses the POST method and targets the `/organizations/{id}/followers` endpoint, where `{id}` is the unique identifier of the organization.  Input will likely specify the follower to add.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/README.md#_snippet_67\n\nLANGUAGE: N/A\nCODE:\n```\nN/A\n```\n\n----------------------------------------\n\nTITLE: Listing Pipeline Visibility for a Role in Pipedrive using PHP Client Library\nDESCRIPTION: This code shows how to retrieve the list of visible or hidden pipeline IDs for a specific role in Pipedrive. It initializes the API client with authentication, creates a RolesApi instance, and calls the getRolePipelines method with role ID and visibility flag.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/RolesApi.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\RolesApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the role\n$visible = true; // bool | Whether to return the visible or hidden pipelines for the role\n\ntry {\n    $result = $apiInstance->getRolePipelines($id, $visible);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling RolesApi->getRolePipelines: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Linking Remote File to Pipedrive Item using PHP\nDESCRIPTION: This code snippet demonstrates how to link an existing remote file (e.g., from Google Drive) to a specific item in Pipedrive. It requires the Pipedrive PHP API client and Guzzle HTTP client. The code configures API key or OAuth2 authentication, initializes the FilesApi, and calls the `linkFileToItem` method with the item type, item ID, remote ID, and remote location (currently only Google Drive is supported). The result of the linking operation is printed, or an exception and its message are shown if an error occurs.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/FilesApi.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\FilesApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$item_type = 'item_type_example'; // string | The item type\n$item_id = 56; // int | The ID of the item to associate the file with\n$remote_id = 'remote_id_example'; // string | The remote item ID\n$remote_location = 'remote_location_example'; // string | The location type to send the file to. Only `googledrive` is supported at the moment.\n\ntry {\n    $result = $apiInstance->linkFileToItem($item_type, $item_id, $remote_id, $remote_location);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling FilesApi->linkFileToItem: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Permitted Users for an Organization in PHP using Pipedrive API\nDESCRIPTION: Makes an API call to list users permitted to access a specified organization. Requires organization ID and returns information about users with permission to access the organization.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/OrganizationsApi.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\OrganizationsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the organization\n\ntry {\n    $result = $apiInstance->getOrganizationUsers($id);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling OrganizationsApi->getOrganizationUsers: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Linking a Remote File in PHP\nDESCRIPTION: Creates a new empty file in a remote location (currently only Google Drive is supported) and links it to a specified Pipedrive entity. Requires file type, title, item type, item ID, and remote location parameters.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/FilesApi.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\naddFileAndLinkIt($file_type, $title, $item_type, $item_id, $remote_location): \\Pipedrive\\versions\\v1\\Model\\CreateRemoteFileAndLinkItToItem\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\FilesApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$file_type = 'file_type_example'; // string | The file type\n$title = 'title_example'; // string | The title of the file\n$item_type = 'item_type_example'; // string | The item type\n$item_id = 56; // int | The ID of the item to associate the file with\n$remote_location = 'remote_location_example'; // string | The location type to send the file to. Only `googledrive` is supported at the moment.\n\ntry {\n    $result = $apiInstance->addFileAndLinkIt($file_type, $title, $item_type, $item_id, $remote_location);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling FilesApi->addFileAndLinkIt: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Note Comments API POST Endpoint\nDESCRIPTION: Adds a comment to a note. This API call uses the POST method and targets the `/notes/{id}/comments` endpoint, where `{id}` is the unique identifier of the note.  Input contains the comment details.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/README.md#_snippet_46\n\nLANGUAGE: N/A\nCODE:\n```\nN/A\n```\n\n----------------------------------------\n\nTITLE: Listing Permitted Users for a Person Using Pipedrive API in PHP\nDESCRIPTION: This PHP code snippet shows how to list users who are permitted to access a specific person in the Pipedrive system using the Persons API. Authentication can be configured with either an API key or OAuth2 token. The snippet creates an instance of PersonsApi and calls the getPersonUsers method with the person ID as the parameter. It returns a ListPermittedUsersResponse1 object listing permitted users. Exceptions during the API request are caught and printed.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/PersonsApi.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\PersonsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the person\n\ntry {\n    $result = $apiInstance->getPersonUsers($id);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling PersonsApi->getPersonUsers: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Get Subscription Payments in Pipedrive using PHP\nDESCRIPTION: This code snippet illustrates how to retrieve all payments associated with a subscription using the Pipedrive API in PHP. It initializes the API client, sets up authentication, and then calls the `getSubscriptionPayments` method with the subscription ID.  The retrieved payments are printed. Requires the Pipedrive PHP client library and GuzzleHttp.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/SubscriptionsApi.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\SubscriptionsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the subscription\n\ntry {\n    $result = $apiInstance->getSubscriptionPayments($id);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling SubscriptionsApi->getSubscriptionPayments: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Deleting Notes API DELETE Endpoint\nDESCRIPTION: Deletes a note. This API call uses the DELETE method and targets the `/notes/{id}` endpoint, where `{id}` is the unique identifier of the note.  The input is the note ID.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/README.md#_snippet_48\n\nLANGUAGE: N/A\nCODE:\n```\nN/A\n```\n\n----------------------------------------\n\nTITLE: ProductVariationsResponse Properties Definition in Markdown\nDESCRIPTION: Defines the properties of the ProductVariationsResponse model including success status, data array of ProductVariation objects, and additional data with cursor pagination. Each property includes its type, description, and optional notes.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v2/Model/ProductVariationsResponse.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\n\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**success** | **bool** | If the response is successful or not | [optional]\n**data** | [**\\Pipedrive\\versions\\v2\\Model\\ProductVariation[]**](ProductVariation.md) | Array containing data for all products | [optional]\n**additional_data** | [**\\Pipedrive\\versions\\v2\\Model\\AdditionalDataWithCursorPagination**](.md) |  | [optional]\n```\n\n----------------------------------------\n\nTITLE: Refreshing OAuth Token in Pipedrive PHP Client\nDESCRIPTION: Code snippet showing how to check if an access token has expired and refresh it before making API calls.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v2/README.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nif ($configuration->getExpiresAt() < time()) {\n    try {\n        $config->refreshToken();\n    } catch (Exception $ex) {\n        // handle exception\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Pipelines with Pipedrive API - PHP\nDESCRIPTION: This PHP snippet retrieves all pipelines from the Pipedrive API, with optional sorting and pagination. It requires the `pipedrive/client-php` library and appropriate API key or OAuth2 configuration. The snippet calls `getPipelines`, specifying sort parameters and pagination parameters like `limit` and `cursor`. The output contains a list of all pipelines.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v2/Api/PipelinesApi.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v2\\Api\\PipelinesApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$sort_by = 'id'; // string | The field to sort by. Supported fields: `id`, `update_time`, `add_time`.\n$sort_direction = 'asc'; // string | The sorting direction. Supported values: `asc`, `desc`.\n$limit = 100; // int | For pagination, the limit of entries to be returned. If not provided, 100 items will be returned. Please note that a maximum value of 500 is allowed.\n$cursor = 'cursor_example'; // string | For pagination, the marker (an opaque string value) representing the first item on the next page\n\ntry {\n    $result = $apiInstance->getPipelines($sort_by, $sort_direction, $limit, $cursor);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling PipelinesApi->getPipelines: ', $e->getMessage(), PHP_EOL;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Deleting Organizations API DELETE Endpoint\nDESCRIPTION: Deletes multiple organizations in bulk.  This API call uses the DELETE method and targets the `/organizations` endpoint.  The input likely contains a list of organization IDs to be deleted.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/README.md#_snippet_70\n\nLANGUAGE: N/A\nCODE:\n```\nN/A\n```\n\n----------------------------------------\n\nTITLE: Deleting Organization Fields API DELETE Endpoint\nDESCRIPTION: Deletes multiple organization fields in bulk. This API call uses the DELETE method and targets the `/organizationFields` endpoint. Input will likely include the IDs of the organization fields to delete.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/README.md#_snippet_57\n\nLANGUAGE: N/A\nCODE:\n```\nN/A\n```\n\n----------------------------------------\n\nTITLE: Defining the getProductFollowers Method Signature in PHP\nDESCRIPTION: PHP method signature for `getProductFollowers`. This method lists users who are following the product, taking the product ID, an optional limit, and an optional cursor as arguments. It returns a `GetFollowers` object.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v2/Api/ProductsApi.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\ngetProductFollowers($id, $limit, $cursor): \\Pipedrive\\versions\\v2\\Model\\GetFollowers\n```\n\n----------------------------------------\n\nTITLE: Example of Using getActivityFields Method in PHP\nDESCRIPTION: A complete example showing how to set up the Pipedrive client with API key or OAuth2 authentication and call the getActivityFields method to retrieve all activity fields.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/ActivityFieldsApi.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\ActivityFieldsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n\ntry {\n    $result = $apiInstance->getActivityFields();\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling ActivityFieldsApi->getActivityFields: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: PHP API Client Initialization and Subscription Installment Update Request\nDESCRIPTION: This PHP snippet sets up the Pipedrive API client with API key and OAuth2 credentials, creates a subscription installment update request, and calls the update method. It handles possible exceptions and prints the result, enabling interaction with the Pipedrive subscriptions endpoint.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/SubscriptionsApi.md#_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\SubscriptionsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the subscription\n$subscription_installment_update_request = new \\Pipedrive\\versions\\v1\\Model\\SubscriptionInstallmentUpdateRequest(); // \\Pipedrive\\versions\\v1\\Model\\SubscriptionInstallmentUpdateRequest\n\ntry {\n    $result = $apiInstance->updateSubscriptionInstallment($id, $subscription_installment_update_request);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling SubscriptionsApi->updateSubscriptionInstallment: ', $e->getMessage(), PHP_EOL;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Getting Organization Files API GET Endpoint\nDESCRIPTION: Lists files attached to an organization.  This API call uses the GET method and targets the `/organizations/{id}/files` endpoint, where `{id}` is the unique identifier of the organization. The input is the organization ID.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/README.md#_snippet_75\n\nLANGUAGE: N/A\nCODE:\n```\nN/A\n```\n\n----------------------------------------\n\nTITLE: Deleting Comment API DELETE Endpoint\nDESCRIPTION: Deletes a comment related to a note. This API call uses the DELETE method and targets the `/notes/{id}/comments/{commentId}` endpoint, where `{id}` is the ID of the note and `{commentId}` is the ID of the comment. The input will be the note ID and the comment ID.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/README.md#_snippet_47\n\nLANGUAGE: N/A\nCODE:\n```\nN/A\n```\n\n----------------------------------------\n\nTITLE: Fetching Project Tasks with Pipedrive API in PHP\nDESCRIPTION: This code snippet retrieves tasks associated with a specific project ID using the Pipedrive API. It configures API key or OAuth2 authentication, instantiates the `ProjectsApi` class, and calls the `getProjectTasks` method. The `id` parameter specifies the target project. Error handling is included to catch and display exceptions during the API call.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/ProjectsApi.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\ProjectsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the project\n\ntry {\n    $result = $apiInstance->getProjectTasks($id);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling ProjectsApi->getProjectTasks: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Configure OAuth Client Details 5.x - Pipedrive PHP\nDESCRIPTION: Version 5.x configures OAuth client details (ID, secret, redirect URI) and the token update callback on an instance of the `Configuration` class. This involves instantiating `Configuration` and using methods like `setClientId`, `setClientSecret`, `setOauthRedirectUri`, and `setOAuthTokenUpdateCallback`.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/MIGRATION-5.x.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Pipedrive\\Configuration;\n\n$config = new Configuration();\n$config->setClientId('YOUR_APP_CLIENT_ID');\n$config->setClientSecret('YOUR_APP_CLIENT_SECRET');\n$config->setOauthRedirectUri('YOUR_APP_REDIRECT_URI');\n$config->setOAuthTokenUpdateCallback(function () {\n    // use session or some other way to persist the $token\n});\n```\n\n----------------------------------------\n\nTITLE: Defining the BaseResponse Model in PHP\nDESCRIPTION: This snippet defines the BaseResponse model class in PHP, representing the basic structure of API responses from the Pipedrive service. It includes an optional boolean property 'success' indicating if the API call was successful. Dependencies include PHP class definitions and type hinting features. The model is used to parse and handle API responses systematically.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Model/BaseResponse.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n# # BaseResponse\n\n## Properties\n\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**success** | **bool** | If the response is successful or not | [optional]\n\n[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)\n```\n\n----------------------------------------\n\nTITLE: Updating a Deal via Pipedrive PHP SDK\nDESCRIPTION: This snippet illustrates updating the properties of an existing deal by providing the deal ID and an UpdateDealRequest object. It sets up API configurations, initializes the DealsApi instance, and calls the updateDeal method. The response is a GetAddedDeal object representing the updated deal.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/DealsApi.md#_snippet_29\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\DealsApi(\n    // Optionally pass custom HTTP client\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // Deal ID\n$update_deal_request = new \\Pipedrive\\versions\\v1\\Model\\UpdateDealRequest(); // Deal update data\n\ntry {\n    $result = $apiInstance->updateDeal($id, $update_deal_request);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling DealsApi->updateDeal: ', $e->getMessage(), PHP_EOL;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Define OAuth Token Update Callback 4.x - Pipedrive PHP\nDESCRIPTION: In version 4.x, handling the update of refreshed OAuth tokens required defining a static callback function assigned to `Pipedrive\\Configuration::$oAuthTokenUpdateCallback`. This function receives the updated token object, allowing you to persist it in your storage mechanism (e.g., session, database).\nSOURCE: https://github.com/pipedrive/client-php/blob/master/MIGRATION-5.x.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nConfiguration::$oAuthTokenUpdateCallback = function($token) {\n    // use session or some other way to persist the $token\n};\n```\n\n----------------------------------------\n\nTITLE: Defining DeleteActivitiesResponse Data Structure in PHP\nDESCRIPTION: This code snippet explains the properties of the DeleteActivitiesResponse model class, highlighting optional fields 'success' and 'data', with 'data' referencing another model object. It serves as a blueprint for mapping API responses to PHP objects.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Model/DeleteActivitiesResponse.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n# # DeleteActivitiesResponse\n\n## Properties\n\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**success** | **bool** |  | [optional]\n**data** | [**\\Pipedrive\\versions\\v1\\Model\\DeleteActivitiesResponseData**](DeleteActivitiesResponseData.md) |  | [optional]\n\n[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Lead Labels using Pipedrive PHP API\nDESCRIPTION: Shows how to fetch a list of all lead labels from Pipedrive. This method requires configuring authentication (API Key or OAuth2) and instantiating the `LeadLabelsApi` client, then simply calling the parameterless `getLeadLabels` method. The endpoint returns all labels without pagination. Dependencies include the Pipedrive PHP client and a compatible HTTP client like Guzzle.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/LeadLabelsApi.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\LeadLabelsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n\ntry {\n    $result = $apiInstance->getLeadLabels();\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling LeadLabelsApi->getLeadLabels: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Pipedrive Goals using PHP SDK\nDESCRIPTION: This snippet demonstrates configuring the Pipedrive PHP client with authentication (API key or OAuth2) and using the `GoalsApi`'s `getGoals` method to fetch goals based on various optional filter criteria like type, title, assignee, expected outcome, and time period. It requires the Pipedrive PHP client library (`vendor/autoload.php`), includes GuzzleHttp client integration, and handles potential exceptions during the API call.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/GoalsApi.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\GoalsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$type_name = 'type_name_example'; // string | The type of the goal. If provided, everyone's goals will be returned.\n$title = 'title_example'; // string | The title of the goal\n$is_active = true; // bool | Whether the goal is active or not\n$assignee_id = 56; // int | The ID of the user who's goal to fetch. When omitted, only your goals will be returned.\n$assignee_type = 'assignee_type_example'; // string | The type of the goal's assignee. If provided, everyone's goals will be returned.\n$expected_outcome_target = 3.4; // float | The numeric value of the outcome. If provided, everyone's goals will be returned.\n$expected_outcome_tracking_metric = 'expected_outcome_tracking_metric_example'; // string | The tracking metric of the expected outcome of the goal. If provided, everyone's goals will be returned.\n$expected_outcome_currency_id = 56; // int | The numeric ID of the goal's currency. Only applicable to goals with `expected_outcome.tracking_metric` with value `sum`. If provided, everyone's goals will be returned.\n$type_params_pipeline_id = array(56); // int[] | An array of pipeline IDs or `null` for all pipelines. If provided, everyone's goals will be returned.\n$type_params_stage_id = 56; // int | The ID of the stage. Applicable to only `deals_progressed` type of goals. If provided, everyone's goals will be returned.\n$type_params_activity_type_id = array(56); // int[] | An array of IDs or `null` for all activity types. Only applicable for `activities_completed` and/or `activities_added` types of goals. If provided, everyone's goals will be returned.\n$period_start = new \\DateTime(\"2013-10-20T19:20:30+01:00\"); // \\DateTime | The start date of the period for which to find goals. Date in format of YYYY-MM-DD. When `period.start` is provided, `period.end` must be provided too.\n$period_end = new \\DateTime(\"2013-10-20T19:20:30+01:00\"); // \\DateTime | The end date of the period for which to find goals. Date in format of YYYY-MM-DD.\n\ntry {\n    $result = $apiInstance->getGoals($type_name, $title, $is_active, $assignee_id, $assignee_type, $expected_outcome_target, $expected_outcome_tracking_metric, $expected_outcome_currency_id, $type_params_pipeline_id, $type_params_stage_id, $type_params_activity_type_id, $period_start, $period_end);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling GoalsApi->getGoals: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Attached Product from Deal with Pipedrive DealsApi in PHP\nDESCRIPTION: Demonstrates deleting a product attached to a Pipedrive deal using its attachment ID via the `deleteDealProduct` method. This requires including `vendor/autoload.php`, setting up authentication (API key/OAuth2), and initializing the `DealsApi`. The method requires the deal ID (`id`) and the product attachment ID (`product_attachment_id`).\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v2/Api/DealsApi.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v2\\Api\\DealsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the deal\n$product_attachment_id = 56; // int | The product attachment ID\n\ntry {\n    $result = $apiInstance->deleteDealProduct($id, $product_attachment_id);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling DealsApi->deleteDealProduct: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Organization Followers Changelog Using Pipedrive PHP SDK\nDESCRIPTION: Fetches changelog records reflecting changes in follower status on a given organization, identified by its ID. Supports pagination with optional limit and cursor parameters to control response size and position. Requires the Pipedrive PHP client, Guzzle HTTP client, and proper authorization via API key or OAuth2. Inputs include organization ID (int), optional limit (int, max 500), and optional cursor (string). Returns a GetFollowerChangelogs model detailing follower updates.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v2/Api/OrganizationsApi.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\ngetOrganizationFollowersChangelog($id, $limit, $cursor): \\Pipedrive\\versions\\v2\\Model\\GetFollowerChangelogs\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v2\\Api\\OrganizationsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the organization\n$limit = 100; // int | For pagination, the limit of entries to be returned. If not provided, 100 items will be returned. Please note that a maximum value of 500 is allowed.\n$cursor = 'cursor_example'; // string | For pagination, the marker (an opaque string value) representing the first item on the next page\n\ntry {\n    $result = $apiInstance->getOrganizationFollowersChangelog($id, $limit, $cursor);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling OrganizationsApi->getOrganizationFollowersChangelog: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Goal Type and Parameters (JSON)\nDESCRIPTION: Example JSON structure for defining the type of a Pipedrive goal and its associated parameters. The 'name' specifies the goal type (e.g., 'deals_started'), and 'params' contains relevant identifiers like 'pipeline_id' or 'activity_type_id' as arrays of integers. Specific parameters depend on the chosen goal type.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Model/NewGoal.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{ \"name\": \"deals_started\", \"params\": { \"pipeline_id\": [1, 2], \"activity_type_id\": [9] } }\n```\n\n----------------------------------------\n\nTITLE: GetOrganizationSearchResponseAllOfData Properties\nDESCRIPTION: Defines the properties of the GetOrganizationSearchResponseAllOfData model. Specifically, it details the 'items' property, which is an array of OrganizationSearchItem objects. This array represents the results of an organization search.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v2/Model/GetOrganizationSearchResponseAllOfData.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n/**\n * Gets the items\n *\n * @return \\Pipedrive\\versions\\v2\\Model\\OrganizationSearchItem[]|null\n */\n```\n\n----------------------------------------\n\nTITLE: Example Pipedrive User Access Structure (JSON)\nDESCRIPTION: This snippet illustrates the required array structure for the `access` property when adding a user. Each object in the array specifies access for a particular Pipedrive app, optionally including `admin` flag or `permission_set_id`.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Model/AddUserRequest.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n[{\"app\": \"sales\", \"permission_set_id\": \"62cc4d7f-4038-4352-abf3-a8c1c822b631\"}, {\"app\": \"global\", \"admin\": true}, {\"app\": \"account_settings\"}]\n```\n\n----------------------------------------\n\nTITLE: Defining the PersonSearchItem Model in PHP SDK\nDESCRIPTION: This code snippet documents the PersonSearchItem model class used for representing individual search result items within the Pipedrive PHP SDK. It specifies optional properties like result_score, indicating the relevance of the search result, and item, referencing a detailed model object. The model helps in parsing and structuring API responses for person search queries.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Model/PersonSearchItem.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n# # PersonSearchItem\n\n## Properties\n\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**result_score** | **float** | Search result relevancy | [optional]\n**item** | [**\\\\Pipedrive\\\\versions\\\\v1\\\\Model\\\\PersonSearchItemItem**](PersonSearchItemItem.md) |  | [optional]\n\n[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)\n```\n\n----------------------------------------\n\nTITLE: Updating Organization Field with Pipedrive PHP Client\nDESCRIPTION: Connects to the Pipedrive API using the PHP client, configuring authentication via API key or OAuth2. It demonstrates how to instantiate the `OrganizationFieldsApi` and calls the `updateOrganizationField` method, requiring a field ID and a `FieldUpdateRequest` object. Includes basic exception handling.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/OrganizationFieldsApi.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\OrganizationFieldsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the field\n$field_update_request = new \\Pipedrive\\versions\\v1\\Model\\FieldUpdateRequest(); // \\Pipedrive\\versions\\v1\\Model\\FieldUpdateRequest\n\ntry {\n    $result = $apiInstance->updateOrganizationField($id, $field_update_request);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling OrganizationFieldsApi->updateOrganizationField: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Multiple Stages in Bulk via Pipedrive PHP SDK\nDESCRIPTION: This snippet provides an example of deleting multiple stages simultaneously by passing a comma-separated string of stage IDs. Authentication is handled via API key or OAuth2 access token. The deleteStages method marks all specified stages as deleted and returns a DeleteStagesResponse model. The input parameter is a string representing stage IDs separated by commas.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/StagesApi.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\StagesApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$ids = 'ids_example'; // string | The comma-separated stage IDs to delete\n\ntry {\n    $result = $apiInstance->deleteStages($ids);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling StagesApi->deleteStages: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Project Plan Task with Pipedrive API in PHP\nDESCRIPTION: Code example illustrating how to update a task's phase or group within a project plan using the `putProjectPlanTask` method of the Pipedrive ProjectsApi client. Requires authentication, the project ID (`id`), the task ID (`task_id`), and optionally a `ProjectPutPlanItemBodyObject` containing the update details. Returns an `UpdateTaskPlanItemResponse` object.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/ProjectsApi.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\ProjectsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the project\n$task_id = 56; // int | The ID of the task\n$project_put_plan_item_body_object = new \\Pipedrive\\versions\\v1\\Model\\ProjectPutPlanItemBodyObject(); // \\Pipedrive\\versions\\v1\\Model\\ProjectPutPlanItemBodyObject\n\ntry {\n    $result = $apiInstance->putProjectPlanTask($id, $task_id, $project_put_plan_item_body_object);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling ProjectsApi->putProjectPlanTask: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a discount from a deal using Pipedrive PHP client\nDESCRIPTION: Example code showing how to remove a discount from a deal using the Pipedrive PHP client. This operation may change the deal value if one-time products are attached.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v2/Api/DealsApi.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\ndeleteAdditionalDiscount($id, $discount_id): \\Pipedrive\\versions\\v2\\Model\\DeleteAdditionalDiscountResponse\n```\n\n----------------------------------------\n\nTITLE: Defining the PersonCountInfo Data Structure in PHP\nDESCRIPTION: This snippet describes the properties of the PersonCountInfo object, including optional integer counts related to emails, activities, files, notes, and followers. It serves as a model for serializing and deserializing API data to interact with the Pipedrive platform effectively.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Model/PersonCountInfo.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n# # PersonCountInfo\n\n## Properties\n\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**email_messages_count** | **int** | The count of email messages related to the person | [optional]\n**activities_count** | **int** | The count of activities related to the person | [optional]\n**done_activities_count** | **int** | The count of completed activities | [optional]\n**undone_activities_count** | **int** | The count of pending activities | [optional]\n**files_count** | **int** | The count of files related to the person | [optional]\n**notes_count** | **int** | The count of notes related to the person | [optional]\n**followers_count** | **int** | The count of followers related to the person | [optional]\n\n[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md) \n```\n\n----------------------------------------\n\nTITLE: Updating Pipeline Properties with Pipedrive PHP Client\nDESCRIPTION: This example demonstrates how to update a pipeline's properties using the Pipedrive PHP client. It shows authentication setup with either API key or OAuth2, creating a PipelinesApi instance, and making the update request with proper error handling.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/PipelinesApi.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\PipelinesApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the pipeline\n$pipeline = new \\Pipedrive\\versions\\v1\\Model\\Pipeline(); // \\Pipedrive\\versions\\v1\\Model\\Pipeline\n\ntry {\n    $result = $apiInstance->updatePipeline($id, $pipeline);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling PipelinesApi->updatePipeline: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: ChangelogResponse Model Properties Definitions in PHP\nDESCRIPTION: Defines the properties of the ChangelogResponse model including success status, data array, and additional metadata with cursor pagination. Uses PHPDoc annotations for clarity and type hinting, and references related models for nested data. This structure enables serialization and deserialization of API responses in PHP applications.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Model/ChangelogResponse.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n# # ChangelogResponse\n\n## Properties\n\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**success** | **bool** | If the response is successful or not | [optional]\n**data** | [**\\Pipedrive\\versions\\v1\\Model\\ChangelogResponseAllOfData[]**](ChangelogResponseAllOfData.md) |  | \n**additional_data** | [**\\Pipedrive\\versions\\v1\\Model\\AdditionalDataWithCursorPagination**](AdditionalDataWithCursorPagination.md) |  | \n\n[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)\n```\n\n----------------------------------------\n\nTITLE: Updating an Activity using Pipedrive API in PHP\nDESCRIPTION: Example of updating an existing activity in Pipedrive by its ID. This snippet shows API authorization setup, instantiation of the ActivitiesApi client, creation of an ActivityPutObject for the update data, and handling the response or exceptions.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/ActivitiesApi.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\ActivitiesApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the activity\n$activity_put_object = new \\Pipedrive\\versions\\v1\\Model\\ActivityPutObject(); // \\Pipedrive\\versions\\v1\\Model\\ActivityPutObject\n\ntry {\n    $result = $apiInstance->updateActivity($id, $activity_put_object);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling ActivitiesApi->updateActivity: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Method Signature for updatePipeline in Pipedrive PHP Client\nDESCRIPTION: The method signature for the updatePipeline function that handles updating pipeline properties. It requires a pipeline ID and a Pipeline model object, and returns an EditPipeline response model.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/PipelinesApi.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nupdatePipeline($id, $pipeline): \\Pipedrive\\versions\\v1\\Model\\EditPipeline\n```\n\n----------------------------------------\n\nTITLE: Defining PaginationDetailsAllOf Model in PHP\nDESCRIPTION: This code snippet defines the 'PaginationDetailsAllOf' class or structure in PHP, including the optional 'next_start' property used to manage pagination in API responses. It provides a clear mapping of the response data from the Pipedrive API for ease of use within PHP applications.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Model/PaginationDetailsAllOf.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n# # PaginationDetailsAllOf\n\n## Properties\n\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**next_start** | **int** | Next pagination start | [optional]\n\n[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)\n```\n\n----------------------------------------\n\nTITLE: Deleting a Person via Pipedrive API in PHP\nDESCRIPTION: This snippet demonstrates how to use the Pipedrive PHP client to mark a specific person as deleted. Authentication can be achieved using either an API key or OAuth2 token, which must be provided through the Configuration object. The 'deletePerson' method requires the person's ID as input and returns a DeletePersonResponse object upon success. If successful, the specified person will be marked deleted and permanently removed after 30 days; exceptions are caught and printed.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/PersonsApi.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\PersonsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the person\n\ntry {\n    $result = $apiInstance->deletePerson($id);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling PersonsApi->deletePerson: ', $e->getMessage(), PHP_EOL;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Adding a Lead Label using Pipedrive PHP API\nDESCRIPTION: Demonstrates how to create a new lead label using the Pipedrive PHP client library. It requires setting up authentication (API Key or OAuth2), instantiating the `LeadLabelsApi` client, preparing an `AddLeadLabelRequest` object with label details (not shown in the example population), and calling the `addLeadLabel` method while handling potential exceptions. This requires the Pipedrive PHP client and a compatible HTTP client like Guzzle.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/LeadLabelsApi.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\LeadLabelsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$add_lead_label_request = new \\Pipedrive\\versions\\v1\\Model\\AddLeadLabelRequest(); // \\Pipedrive\\versions\\v1\\Model\\AddLeadLabelRequest\n\ntry {\n    $result = $apiInstance->addLeadLabel($add_lead_label_request);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling LeadLabelsApi->addLeadLabel: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Project Plan Activity with Pipedrive API in PHP\nDESCRIPTION: Code example illustrating how to update an activity's phase or group within a project plan using the `putProjectPlanActivity` method of the Pipedrive ProjectsApi client. Requires authentication, the project ID (`id`), the activity ID (`activity_id`), and optionally a `ProjectPutPlanItemBodyObject` with the update data. Returns an `UpdateActivityPlanItemResponse` object.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/ProjectsApi.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\ProjectsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the project\n$activity_id = 56; // int | The ID of the activity\n$project_put_plan_item_body_object = new \\Pipedrive\\versions\\v1\\Model\\ProjectPutPlanItemBodyObject(); // \\Pipedrive\\versions\\v1\\Model\\ProjectPutPlanItemBodyObject\n\ntry {\n    $result = $apiInstance->putProjectPlanActivity($id, $activity_id, $project_put_plan_item_body_object);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling ProjectsApi->putProjectPlanActivity: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Product Followers Changelog using Pipedrive PHP SDK\nDESCRIPTION: This PHP code snippet demonstrates how to retrieve the changelog of followers for a specific product by its ID, including pagination support through limit and cursor parameters. It requires setting up API key or OAuth2 tokens for authentication, and uses GuzzleHttp as the HTTP client.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v2/Api/ProductsApi.md#_snippet_13\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n$apiInstance = new Pipedrive\\versions\\v2\\Api\\ProductsApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int\n$limit = 100; // int\n$cursor = 'cursor_example'; // string\n\ntry {\n    $result = $apiInstance->getProductFollowersChangelog($id, $limit, $cursor);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling ProductsApi->getProductFollowersChangelog: ', $e->getMessage(), PHP_EOL;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving a specific permission set in PHP using Pipedrive API\nDESCRIPTION: Example code showing how to fetch data about a specific permission set by its ID. The method accepts a permission set ID and returns a SinglePermissionSetsItem object.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/PermissionSetsApi.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\PermissionSetsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 'id_example'; // string | The ID of the permission set\n\ntry {\n    $result = $apiInstance->getPermissionSet($id);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling PermissionSetsApi->getPermissionSet: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Mail Messages Response Data Model in PHP\nDESCRIPTION: This model defines the data structure for the response received when listing mail messages in the Pipedrive API. It includes optional properties such as object type, timestamp, and a list of mail message items. Dependencies include the MailMessageItemForList model. It structures the response data for processing or display.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Model/ListMailMessagesResponseAllOfData.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n# # ListMailMessagesResponseAllOfData\n\n## Properties\n\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**object** | **string** | The type of the data item | [optional]\n**timestamp** | **string** | The date and time when the item was created | [optional]\n**data** | [**\\Pipedrive\\versions\\v1\\Model\\MailMessageItemForList**](MailMessageItemForList.md) |  | [optional]\n\n[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)\n```\n\n----------------------------------------\n\nTITLE: Defining the FieldType property in Pipedrive PHP Model\nDESCRIPTION: This snippet describes the 'field_type' property within the FieldType model, specifying its type as an enumerated string. It includes notes about the property's usage and references to related models. The property enables storing and retrieving the type designation for custom or standard fields in Pipedrive.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Model/FieldType.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n# # FieldType\n\n## Properties\n\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**field_type** | [**\\\\Pipedrive\\\\versions\\\\v1\\\\Model\\\\FieldTypeAsString**](FieldTypeAsString.md) |  | \n```\n\n----------------------------------------\n\nTITLE: Fetching Project Boards with Pipedrive API in PHP\nDESCRIPTION: Example showing how to instantiate the Pipedrive ProjectsApi client, configure authentication (API Key or OAuth2), and call the `getProjectsBoards` method to retrieve all non-deleted project boards. Requires the Pipedrive PHP client library (`vendor/autoload.php`) and GuzzleHttp. The method returns a `GetProjectBoardsResponse` object.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/ProjectsApi.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\ProjectsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n\ntry {\n    $result = $apiInstance->getProjectsBoards();\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling ProjectsApi->getProjectsBoards: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: AddChannelBadRequestResponse Model Properties Definition\nDESCRIPTION: Defines the properties of the AddChannelBadRequestResponse model used for representing error responses in the Pipedrive PHP client. The properties include success, error, error_info, and additional_data, all of which are optional. This model helps in understanding the structure of bad request responses and assists in error handling workflows.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Model/AddChannelBadRequestResponse.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# # AddChannelBadRequestResponse\n\n## Properties\n\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**success** | **bool** |  | [optional]\n**error** | **string** | The error description | [optional]\n**error_info** | **string** |  | [optional]\n**additional_data** | [**\\Pipedrive\\versions\\v1\\Model\\AddChannelBadRequestResponseAdditionalData**](AddChannelBadRequestResponseAdditionalData.md) |  | [optional]\n\n[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Pipedrive Organization Field in PHP\nDESCRIPTION: Explains fetching details for a specific organization field using its ID via the Pipedrive PHP client's `getOrganizationField` method. Authentication (API key or OAuth2) and `OrganizationFieldsApi` initialization are prerequisites. The integer `id` of the desired field must be passed as an argument. The method returns a `\\Pipedrive\\versions\\v1\\Model\\FieldResponse` object containing the field's data. The example includes setup, the API call, and error handling.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/OrganizationFieldsApi.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\ngetOrganizationField($id): \\Pipedrive\\versions\\v1\\Model\\FieldResponse\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\OrganizationFieldsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the field\n\ntry {\n    $result = $apiInstance->getOrganizationField($id);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling OrganizationFieldsApi->getOrganizationField: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: PipelineItem Model Properties Table in Markdown\nDESCRIPTION: Markdown table showing the properties of the PipelineItem model, including property names, data types, descriptions and optional status.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v2/Model/PipelineItem.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**id** | **int** | The ID of the pipeline | [optional]\n**name** | **string** | The name of the pipeline | [optional]\n**order_nr** | **int** | Defines the order of pipelines. The pipeline with the lowest `order_nr` is considered the default. | [optional]\n**is_selected** | **bool** | Whether this pipeline is selected or not | [optional]\n**is_deleted** | **bool** | Whether this pipeline is marked as deleted or not | [optional]\n**is_deal_probability_enabled** | **bool** | Whether deal probability is disabled or enabled for this pipeline | [optional]\n**add_time** | **string** | The pipeline creation time | [optional]\n**update_time** | **string** | The pipeline update time | [optional]\n```\n\n----------------------------------------\n\nTITLE: Documentation for 'AdditionalData' Properties in PHP Model\nDESCRIPTION: This snippet defines the properties of the 'AdditionalData' model used for managing pagination and collection state within the PHP client for Pipedrive. It specifies the data types, purpose, and optional nature of each property, aiding developers in understanding how to implement and handle paginated data responses.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Model/AdditionalData.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# # AdditionalData\n\n## Properties\n\n| Name | Type | Description | Notes |\n|------------|-------------|-------------|-------------|\n| **next_start** | **int** | Next pagination start | [optional] |\n| **start** | **int** | Pagination start | [optional] |\n| **limit** | **int** | Items shown per page | [optional] |\n| **more_items_in_collection** | **bool** | If there are more list items in the collection than displayed or not | [optional] |\n\n[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)\n```\n\n----------------------------------------\n\nTITLE: Deleting a single filter in Pipedrive using PHP\nDESCRIPTION: Marks a specific filter as deleted in the Pipedrive system. Takes the filter ID as a parameter.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/FiltersApi.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\FiltersApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the filter\n\ntry {\n    $result = $apiInstance->deleteFilter($id);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling FiltersApi->deleteFilter: ', $e->getMessage(), PHP_EOL;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Deleting a Lead Label using Pipedrive PHP API\nDESCRIPTION: Illustrates how to remove a specific lead label by its ID. It involves configuring authentication (API Key or OAuth2), instantiating the `LeadLabelsApi` client, providing the label's string ID, and calling the `deleteLeadLabel` method. The example includes basic exception handling. This operation requires the Pipedrive PHP client and a compatible HTTP client like Guzzle.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/LeadLabelsApi.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\LeadLabelsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 'id_example'; // string | The ID of the lead label\n\ntry {\n    $result = $apiInstance->deleteLeadLabel($id);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling LeadLabelsApi->deleteLeadLabel: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Mail Thread Details using Pipedrive API in PHP\nDESCRIPTION: This code snippet shows how to update details of a specific mail thread using the Pipedrive API. It configures API key or OAuth2 authentication, initializes the MailboxApi, and calls the `updateMailThreadDetails` method with the thread ID and other parameters like deal ID, lead ID, and flags for shared, read, and archived status. It handles exceptions and prints the result.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/MailboxApi.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\MailboxApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the mail thread\n$deal_id = 56; // int | The ID of the deal this thread is associated with\n$lead_id = 'lead_id_example'; // string | The ID of the lead this thread is associated with\n$shared_flag = new \\Pipedrive\\versions\\v1\\Model\\NumberBoolean(); // \\Pipedrive\\versions\\v1\\Model\\NumberBoolean | Whether this thread is shared with other users in your company\n$read_flag = new \\Pipedrive\\versions\\v1\\Model\\NumberBoolean(); // \\Pipedrive\\versions\\v1\\Model\\NumberBoolean | Whether this thread is read or unread\n$archived_flag = new \\Pipedrive\\versions\\v1\\Model\\NumberBoolean(); // \\Pipedrive\\versions\\v1\\Model\\NumberBoolean | Whether this thread is archived or not. You can only archive threads that belong to Inbox folder. Archived threads will disappear from Inbox.\n\ntry {\n    $result = $apiInstance->updateMailThreadDetails($id, $deal_id, $lead_id, $shared_flag, $read_flag, $archived_flag);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling MailboxApi->updateMailThreadDetails: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Deleting Multiple Product Fields using Pipedrive PHP Client\nDESCRIPTION: This snippet shows how to delete multiple product fields in bulk using the Pipedrive PHP client library. It covers API key/OAuth2 configuration, API client initialization, and invoking the deleteProductFields method with a comma-separated string of field IDs, along with basic exception handling.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/ProductFieldsApi.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\ProductFieldsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$ids = 'ids_example'; // string | The comma-separated field IDs to delete\n\ntry {\n    $result = $apiInstance->deleteProductFields($ids);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling ProductFieldsApi->deleteProductFields: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Goal Result via Pipedrive API in PHP\nDESCRIPTION: This snippet illustrates how to retrieve the result of a specific goal for a given period using the Pipedrive API with the PHP client. It initializes the API client with API key or OAuth2 authentication, defines the goal ID, period start date, and period end date, and then calls the `getGoalResult` method. Error handling is included to catch exceptions during the API call. Requires the Pipedrive PHP client library and Guzzle HTTP client.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/GoalsApi.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\GoalsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 'id_example'; // string | The ID of the goal that the results are looked for\n$period_start = new \\DateTime(\"2013-10-20T19:20:30+01:00\"); // \\DateTime | The start date of the period for which to find the goal's progress. Format: YYYY-MM-DD. This date must be the same or after the goal duration start date.\n$period_end = new \\DateTime(\"2013-10-20T19:20:30+01:00\"); // \\DateTime | The end date of the period for which to find the goal's progress. Format: YYYY-MM-DD. This date must be the same or before the goal duration end date.\n\ntry {\n    $result = $apiInstance->getGoalResult($id, $period_start, $period_end);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling GoalsApi->getGoalResult: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Fetching All Relationships for an Organization in Pipedrive using PHP\nDESCRIPTION: Provides an example of retrieving all relationships associated with a specific organization ID using the Pipedrive PHP SDK (v1). The code sets up the API client, initializes `OrganizationRelationshipsApi`, and invokes `getOrganizationRelationships` with the relevant organization ID (`org_id`). Requires the Pipedrive PHP SDK and GuzzleHttp client.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/OrganizationRelationshipsApi.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\OrganizationRelationshipsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$org_id = 56; // int | The ID of the organization to get relationships for\n\ntry {\n    $result = $apiInstance->getOrganizationRelationships($org_id);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling OrganizationRelationshipsApi->getOrganizationRelationships: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GetLeadsResponse Data Structure in PHP\nDESCRIPTION: This snippet outlines the structure of the GetLeadsResponse model, including optional properties success, data, and additional_data. It references the LeadResponse and AdditionalData classes, describing their role in representing API response data. The structure supports parsing and handling API responses effectively.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Model/GetLeadsResponse.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n# # GetLeadsResponse\n\n## Properties\n\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**success** | **bool** |  | [optional]\n**data** | [**\\\\Pipedrive\\\\versions\\\\v1\\\\Model\\\\LeadResponse[]**](LeadResponse.md) |  | [optional]\n**additional_data** | [**\\\\Pipedrive\\\\versions\\\\v1\\\\Model\\\\AdditionalData**](AdditionalData.md) |  | [optional]\n\n[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)\n```\n\n----------------------------------------\n\nTITLE: Model Property Definitions for PersonSearchResponse in PHP\nDESCRIPTION: This code outlines the structure of the PersonSearchResponse model class in PHP, including optional boolean and object properties representing the success status and contained data. It serves as a data container class within the PHP client, enabling serialization and deserialization of API responses.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v2/Model/PersonSearchResponse.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n# # PersonSearchResponse\n\n## Properties\n\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**success** | **bool** | If the response is successful or not | [optional]\n**data** | [**\\Pipedrive\\versions\\v2\\Model\\PersonSearchResponseAllOfData**](PersonSearchResponseAllOfData.md) |  | [optional]\n**additional_data** | [**\\Pipedrive\\versions\\v2\\Model\\AdditionalDataWithCursorPagination**](.md) |  | [optional]\n\n[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)\n```\n\n----------------------------------------\n\nTITLE: SubRole Properties Definition in Markdown\nDESCRIPTION: Details all available properties of the SubRole model, including their data types, descriptions, and whether they are optional. This documents the structure of role hierarchies in Pipedrive.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Model/SubRole.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# # SubRole\n\n## Properties\n\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**parent_role_id** | **int** | The ID of the parent role | [optional]\n**name** | **string** | The name of the role | [optional]\n**id** | **int** | The ID of the role | [optional]\n**active_flag** | **bool** | Whether the role is active or not | [optional]\n**assignment_count** | **string** | The number of users assigned to this role | [optional]\n**sub_role_count** | **string** | The number of sub-roles | [optional]\n```\n\n----------------------------------------\n\nTITLE: Deleting a Pipedrive Organization Field in PHP\nDESCRIPTION: Shows deleting a specific organization field by its ID using the Pipedrive PHP client's `deleteOrganizationField` method. It requires configuring authentication (API key or OAuth2), initializing `OrganizationFieldsApi`, and providing the integer `id` of the field to delete. The method returns a `\\Pipedrive\\versions\\v1\\Model\\DeleteResponse` object indicating the result. The example includes initialization, the API call with a sample ID, and error handling.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/OrganizationFieldsApi.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ndeleteOrganizationField($id): \\Pipedrive\\versions\\v1\\Model\\DeleteResponse\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\OrganizationFieldsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the field\n\ntry {\n    $result = $apiInstance->deleteOrganizationField($id);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling OrganizationFieldsApi->deleteOrganizationField: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating PHP Code for Pipedrive SDK v7.x to v8.x\nDESCRIPTION: A diff example showing how to update PHP code when migrating from Pipedrive SDK v7.x to v8.x. The changes focus on updating namespace imports and configuration to use version-specific paths.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/MIGRATION_8.x.md#_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n<?php\n\nuse Pipedrive\\Configuration;\n\nrequire_once('/path/to/client/vendor/autoload.php');\n\n// Configure API key authorization: api_key\n- $config = (new Pipedrive\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n+ $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n\n- $apiInstance = new Pipedrive\\Api\\ActivitiesApi(\n-     new GuzzleHttp\\Client(),\n-     $config\n- );\n\n+ $apiInstance = new Pipedrive\\versions\\v1\\Api\\ActivitiesApi(\n+     new GuzzleHttp\\Client(),\n+     $config\n+ );\n\ntry {\n    $result = $apiInstance->getActivities();\n    echo '<pre>';\n    print_r($result);\n    echo '</pre>';\n} catch (Exception $e) {\n    echo 'Exception when calling ActivitiesApi->getActivities: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining UpdateTeamAllOf Properties in PHP\nDESCRIPTION: This snippet defines the properties 'active_flag' and 'deleted_flag' for the UpdateTeamAllOf model, indicating whether a team is active or deleted. Both properties are optional and represent boolean flags, with details provided in inline comments. These flags are used in API interactions to update team status.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Model/UpdateTeamAllOf.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n# Properties for UpdateTeamAllOf model\n#\n# active_flag: Flag indicating if the team is active (optional)\n# deleted_flag: Flag indicating if the team is deleted (optional)\nclass UpdateTeamAllOf {\n    /**\n     * @var NumberBoolean|null\n     */\n    public $active_flag; // optional\n\n    /**\n     * @var NumberBoolean|null\n     */\n    public $deleted_flag; // optional\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Pipedrive Organization Fields in PHP\nDESCRIPTION: Defines the method signature for retrieving all organization fields using the Pipedrive PHP client's `getOrganizationFields` method. This method supports pagination through optional integer parameters `start` (0-based index) and `limit` (number of items per page). It requires authentication (API key or OAuth2) and returns a `\\Pipedrive\\versions\\v1\\Model\\FieldsResponse` object containing a list of organization fields and pagination details.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/OrganizationFieldsApi.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\ngetOrganizationFields($start, $limit): \\Pipedrive\\versions\\v1\\Model\\FieldsResponse\n```\n\n----------------------------------------\n\nTITLE: PermissionSets Properties Table in Markdown\nDESCRIPTION: A markdown table defining the properties of the PermissionSets model, including property names, types, descriptions, and notes.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Model/PermissionSets.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**success** | **bool** | If the response is successful or not | [optional]\n**data** | [**\\Pipedrive\\versions\\v1\\Model\\PermissionSetsItem[]**](PermissionSetsItem.md) | The array of permission set | [optional]\n```\n\n----------------------------------------\n\nTITLE: Fetching Project Phases with Pipedrive API in PHP\nDESCRIPTION: Example demonstrating how to use the Pipedrive ProjectsApi client to retrieve all active phases for a specific project board using the `getProjectsPhases` method. Requires authentication setup (API Key or OAuth2) and passing the target `board_id` (integer). The method returns a `GetProjectPhasesResponse` object.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/ProjectsApi.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\ProjectsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$board_id = 1; // int | ID of the board for which phases are requested\n\ntry {\n    $result = $apiInstance->getProjectsPhases($board_id);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling ProjectsApi->getProjectsPhases: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Product Follower using Pipedrive PHP SDK\nDESCRIPTION: Demonstrates how to delete a specific follower from a Pipedrive product using the `deleteProductFollower` method of the `ProductsApi` class. Requires the product ID (`id`) and the follower ID (`follower_id`). Authentication via API key or OAuth2 is necessary, and the Pipedrive v2 SDK must be installed.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v2/Api/ProductsApi.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v2\\Api\\ProductsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the product\n$follower_id = 56; // int | The ID of the following user\n\ntry {\n    $result = $apiInstance->deleteProductFollower($id, $follower_id);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling ProductsApi->deleteProductFollower: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Definition of ListMailMessagesResponseAllOf Model Properties in PHP\nDESCRIPTION: This snippet outlines the properties of the ListMailMessagesResponseAllOf model, including 'data' which is an array of mail message objects, and 'additional_data' which holds supplementary information. It helps developers understand the data structure returned by the API endpoint.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Model/ListMailMessagesResponseAllOf.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n# # ListMailMessagesResponseAllOf\n\n## Properties\n\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**data** | [\\Pipedrive\\versions\\v1\\Model\\ListMailMessagesResponseAllOfData[]**](ListMailMessagesResponseAllOfData.md) | The array of mail messages |\n**additional_data** | [**\\Pipedrive\\versions\\v1\\Model\\AdditionalData**](AdditionalData.md) |  \n\n[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)\n```\n\n----------------------------------------\n\nTITLE: Defining ParticipantsChangelog Data Model in PHP\nDESCRIPTION: This snippet details the properties of the ParticipantsChangelog model, including optional success flag, array of changelog items, and additional metadata. It facilitates structured data handling when interacting with the API responses.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Model/ParticipantsChangelog.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n# # ParticipantsChangelog\n\n## Properties\n\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**success** | **bool** | If the request was successful or not | [optional]\n**data** | [**\\Pipedrive\\versions\\v1\\Model\\ParticipantsChangelogItem[]**](ParticipantsChangelogItem.md) | The array of participant changelog | [optional]\n**additional_data** | [**\\Pipedrive\\versions\\v1\\Model\\AdditionalData**](AdditionalData.md) |  | [optional]\n\n[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)\n```\n\n----------------------------------------\n\nTITLE: Define DeleteActivityResponse Model in PHP\nDESCRIPTION: This PHP model class represents the response received after a delete activity operation in the Pipedrive API. It contains optional properties 'success' (boolean) indicating if the operation was successful, and 'data' (object) holding detailed response data. Dependencies include the DeleteActivityResponseData class for the data property.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v2/Model/DeleteActivityResponse.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nnamespace Pipedrive\\Models;\n\nclass DeleteActivityResponse {\n    /**\n     * @var bool|null\n     */\n    public $success;\n\n    /**\n     * @var \\Pipedrive\\Versions\\V2\\Model\\DeleteActivityResponseData|null\n     */\n    public $data;\n\n    public function __construct($success = null, $data = null) {\n        $this->success = $success;\n        $this->data = $data;\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining the FieldResponse Model in PHP\nDESCRIPTION: This snippet defines the FieldResponse class representing the API response structure. It includes properties for success status (boolean) and data (array of Field objects). The class serves as a data container for API responses related to fields in Pipedrive. Dependencies include the Field class. It facilitates parsing and handling of API responses.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Model/FieldResponse.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n# class FieldResponse {\n    public $success; // boolean indicating if request was successful\n    public $data;    // array of Field objects representing response data\n}\n```\n\n----------------------------------------\n\nTITLE: RecentsDeal Properties Table in Markdown\nDESCRIPTION: A markdown table that documents the properties of the RecentsDeal model class, including property names, data types, descriptions, and optional notes.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Model/RecentsDeal.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**item** | **string** |  | [optional]\n**id** | **int** |  | [optional]\n**data** | [**\\Pipedrive\\versions\\v1\\Model\\DealStrict**](DealStrict.md) |  | [optional]\n```\n\n----------------------------------------\n\nTITLE: Updating a Stage using Pipedrive v2 StagesApi PHP Client\nDESCRIPTION: Updates properties of an existing stage identified by its ID using a PATCH request to /stages/{id}. Required parameters include the stage ID and a StageRequestBody model containing update details. Returns a PostPatchGetStage model reflecting the updated stage data. Requires GuzzleHttp client and supports API key or OAuth2 authentication. Exceptions during the update process are caught and reported.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v2/Api/StagesApi.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nupdateStage($id, $stage_request_body): \\Pipedrive\\versions\\v2\\Model\\PostPatchGetStage\n```\n\n----------------------------------------\n\nTITLE: Defining RelatedUserData Model in PHP\nDESCRIPTION: This snippet defines the RelatedUserData class in PHP, representing a data model with an optional user_id property that links to the UserDataWithId model. It helps facilitate API data serialization/deserialization.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Model/RelatedUserData.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n# class RelatedUserData {\n  /**\n   * @var UserDataWithId|null\n   */\n  public $user_id;\n  \n  /**\n   * Constructor for RelatedUserData\n   * @param UserDataWithId|null $user_id\n   */\n  public function __construct($user_id = null) {\n    $this->user_id = $user_id;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Delete Deal Follower Pipedrive PHP\nDESCRIPTION: This snippet shows how to remove a follower from a Pipedrive deal using the deal ID and the specific follower relationship ID. It provides the typical PHP client setup for authentication (API key or OAuth2) and demonstrates invoking the `deleteDealFollower` method with basic error handling.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/DealsApi.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\DealsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the deal\n$follower_id = 56; // int | The ID of the relationship between the follower and the deal\n\ntry {\n    $result = $apiInstance->deleteDealFollower($id, $follower_id);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling DealsApi->deleteDealFollower: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Permitted Users for a Lead using Pipedrive PHP Client\nDESCRIPTION: Demonstrates how to retrieve a list of users permitted to access a specific lead using the `getLeadUsers` method. Requires authentication (API key or OAuth2) and the lead's unique ID. Returns a `UserIDs` object containing the IDs of the permitted users.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/LeadsApi.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\ngetLeadUsers($id): \\Pipedrive\\versions\\v1\\Model\\UserIDs\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\LeadsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 'id_example'; // string | The ID of the lead\n\ntry {\n    $result = $apiInstance->getLeadUsers($id);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling LeadsApi->getLeadUsers: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Lead Labels API POST Endpoint\nDESCRIPTION: Adds a lead label. This API call uses the POST method and targets the `/leadLabels` endpoint. Input should include the details of the new lead label.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/README.md#_snippet_16\n\nLANGUAGE: N/A\nCODE:\n```\nN/A\n```\n\n----------------------------------------\n\nTITLE: Property Definition for 'items' in OrganizationSearchResponseAllOfData PHP Model\nDESCRIPTION: This PHP code snippet defines the 'items' property in the OrganizationSearchResponseAllOfData class, representing an optional array of OrganizationSearchItem instances found in the search response. It specifies the property type and contains documentation comments. Dependencies include the OrganizationSearchItem class. The property facilitates storing multiple search result items.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Model/OrganizationSearchResponseAllOfData.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n# # OrganizationSearchResponseAllOfData\n\n## Properties\n\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**items** | [\\Pipedrive\\versions\\v1\\Model\\OrganizationSearchItem[]**](OrganizationSearchItem.md) | The array of found items | [optional]\n```\n\n----------------------------------------\n\nTITLE: Defining ListFollowersResponse Model in PHP\nDESCRIPTION: This snippet defines the ListFollowersResponse class representing API responses for listing followers, including optional success indicator, followers data array, and additional metadata. Dependencies include ListFollowersResponseAllOfData and AdditionalData models, which must be imported or included. It structures the data returned from the API to facilitate access and manipulation within PHP applications.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Model/ListFollowersResponse.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n# Example PHP class defining ListFollowersResponse model\nclass ListFollowersResponse {\n    /**\n     * @var bool|null Indicates whether the API call was successful\n     */\n    public $success;\n\n    /**\n     * @var ListFollowersResponseAllOfData[]|null List of followers\n     */\n    public $data;\n\n    /**\n     * @var AdditionalData|null Additional metadata related to the response\n     */\n    public $additional_data;\n\n    // Constructor, getters, and setters can be added as needed\n}\n```\n\n----------------------------------------\n\nTITLE: Properties definition for PersonItemEmails model in PHP\nDESCRIPTION: Defines the structure and description of the email address properties for a person entity in Pipedrive. It includes optional fields for email value, primary flag, and label, aiding developers in constructing or parsing email data objects.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v2/Model/PersonItemEmails.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# # PersonItemEmails\n\n## Properties\n\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**value** | **string** | The email address of the person | [optional]\n**primary** | **bool** | Whether the email is primary or not | [optional]\n**label** | **string** | The email address classification label | [optional]\n\n[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)\n```\n\n----------------------------------------\n\nTITLE: Documentation of GetPersonDetailsResponse Model Properties in PHP\nDESCRIPTION: This section describes each property of the GetPersonDetailsResponse model, including their data types, functionalities, and dependencies on other models. It provides key insights into the response structure for handling person details in the Pipedrive PHP client.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Model/GetPersonDetailsResponse.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# GetPersonDetailsResponse\n\n## Properties\n\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**success** | **bool** | Indicates if the API response was successful | [optional]\n**data** | [**\\Pipedrive\\versions\\v1\\Model\\PersonItem**](PersonItem.md) | Contains main person item data | \n**additional_data** | [**\\Pipedrive\\versions\\v1\\Model\\GetPersonDetailsResponseAllOfAdditionalData**](GetPersonDetailsResponseAllOfAdditionalData.md) | Holds extra details related to the response | \n**related_objects** | [**\\Pipedrive\\versions\\v1\\Model\\AllOrganizationsGetResponseAllOfRelatedObjects**](AllOrganizationsGetResponseAllOfRelatedObjects.md) | Includes related organization objects | \n\n[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)\n```\n\n----------------------------------------\n\nTITLE: Model Definition for UserProviderLinkSuccessResponse in PHP\nDESCRIPTION: Defines the properties of the UserProviderLinkSuccessResponse model, including a success flag and a data object referencing the detailed response data structure. This model helps in parsing API responses related to user provider link success responses in PHP applications.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Model/UserProviderLinkSuccessResponse.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n# # UserProviderLinkSuccessResponse\n\n## Properties\n\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**success** | **bool** | Boolean that indicates whether the request was successful or not |\n**data** | [**\\Pipedrive\\versions\\v1\\Model\\UserProviderLinkSuccessResponseData**](UserProviderLinkSuccessResponseData.md) |  |\n\n[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)\n```\n\n----------------------------------------\n\nTITLE: Fetching Project Groups with Pipedrive API in PHP\nDESCRIPTION: This code snippet retrieves project groups associated with a specific project ID using the Pipedrive API. It configures API key or OAuth2 authentication, instantiates the `ProjectsApi` class, and calls the `getProjectGroups` method. The `id` parameter specifies the target project. Error handling is included to catch and display exceptions during the API call.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/ProjectsApi.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\ProjectsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the project\n\ntry {\n    $result = $apiInstance->getProjectGroups($id);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling ProjectsApi->getProjectGroups: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Deleting User Provider Link API DELETE Endpoint\nDESCRIPTION: Deletes the link between a user and the installed video call integration. This API call uses the DELETE method and targets the `/meetings/userProviderLinks/{id}` endpoint, where `{id}` is the unique identifier of the link.  The input is the ID of the link.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/README.md#_snippet_42\n\nLANGUAGE: N/A\nCODE:\n```\nN/A\n```\n\n----------------------------------------\n\nTITLE: Listing Followers of a User with Pipedrive Users API in PHP\nDESCRIPTION: Lists all the followers associated with a specific user identified by their user ID using the Pipedrive Users API. Requires an integer user ID as input parameter. The method returns the followers' data encapsulated in a UserIDs model. Follows the consistent pattern of client configuration, method invocation, and exception handling demonstrated in other API calls.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/UsersApi.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\ngetUserFollowers($id): \\Pipedrive\\versions\\v1\\Model\\UserIDs\n```\n\n----------------------------------------\n\nTITLE: Defining CallLogNotFoundResponse Properties in PHP\nDESCRIPTION: This PHP class models the response structure for a 'Call Log Not Found' error in the Pipedrive API. It includes optional properties such as 'success', 'error', 'error_info', 'data', and 'additional_data' to provide detailed information about the error and relevant data, aiding in error handling and debugging.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Model/CallLogNotFoundResponse.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n# # CallLogNotFoundResponse\n\n## Properties\n\nName | Type | Description | Notes\n------------ | ------------- | ------------- | --------------\n**success** | **bool** |  | [optional]\n**error** | **string** | The description of the error | [optional]\n**error_info** | **string** | A message describing how to solve the problem | [optional]\n**data** | **object** |  | [optional]\n**additional_data** | **object** |  | [optional]\n```\n\n----------------------------------------\n\nTITLE: Defining PersonSearchResponseAllOf class in PHP\nDESCRIPTION: This snippet likely contains the PHP class definition for PersonSearchResponseAllOf, including properties 'data' and 'additional_data', which are optional and typed as specific models. The class facilitates deserializing and representing response data from the Pipedrive API.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v2/Model/PersonSearchResponseAllOf.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nnamespace Pipedrive\\Versions\\V2\\Model;\n\nclass PersonSearchResponseAllOf {\n    /**\n     * @var PersonSearchResponseAllOfData|null\n     */\n    public $data;\n\n    /**\n     * @var AdditionalDataWithCursorPagination|null\n     */\n    public $additional_data;\n\n    // Constructor, getters, setters, and other methods may be included here\n}\n\n```\n\n----------------------------------------\n\nTITLE: Update Deal 5.x - Pipedrive PHP\nDESCRIPTION: In version 5.x, updating a deal uses the `updateDeal()` method of the `DealsApi` instance. The deal ID is passed as the first argument, and updated properties are passed as a `Pipedrive\\Model\\UpdateDealRequest` model instance as the second argument.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/MIGRATION-5.x.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nuse Pipedrive\\Client;\nuse Pipedrive\\Model\\UpdateDealRequest;\nuse Pipedrive\\Configuration;\nuse Pipedrive\\Api\\DealsApi;\n\n$config = new Configuration();\n\n/* ...configuration needed here... */\n\n$dealId = /* DEAL_ID */;\n$dealsApiInstance = new DealsApi(null, $config);\n$response = $dealsApiInstance->updateDeal($dealId, new UpdateDealRequest([\n    'title' => 'DEAL_TITLE_UPDATED',\n]));\n```\n\n----------------------------------------\n\nTITLE: Documentation for DeleteProductVariation API Model in Pipedrive PHP Client\nDESCRIPTION: This documentation describes the properties of the DeleteProductVariation response model, including an optional success indicator and optional data object. It provides guidance on expected response structure for developers handling this API response.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v2/Model/DeleteProductVariation.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# # DeleteProductVariation\n\n## Properties\n\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**success** | **bool** | If the response is successful or not | [optional]\n**data** | [**\\Pipedrive\\versions\\v2\\Model\\DeleteProductVariationData**](DeleteProductVariationData.md) |  | [optional]\n\n[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)\n```\n\n----------------------------------------\n\nTITLE: Documentation for LeadSearchResponseAllOf data model properties\nDESCRIPTION: This snippet describes the properties of the LeadSearchResponseAllOf model, including 'data' and 'additional_data', their types, and their roles in representing the lead search response payload.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Model/LeadSearchResponseAllOf.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# # LeadSearchResponseAllOf\n\n## Properties\n\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**data** | [**\\Pipedrive\\versions\\v1\\Model\\LeadSearchResponseAllOfData**](LeadSearchResponseAllOfData.md) |  |\n**additional_data** | [**\\Pipedrive\\versions\\v1\\Model\\ItemSearchAdditionalData**](ItemSearchAdditionalData.md) |  |\n\n[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)\n```\n\n----------------------------------------\n\nTITLE: Updating a Deal Installment using Pipedrive PHP Client\nDESCRIPTION: This PHP snippet illustrates updating an installment payment associated with a deal in Pipedrive via the v2 API client. This feature is available only on Advanced plans and above. The code shows setting up authentication (API key/OAuth2), initializing the `DealsApi` client, providing the deal ID (`id`) and installment ID (`installment_id`), creating an empty object for the request body, and calling `updateInstallment`. An `UpdateInstallmentResponse` object is returned upon successful update.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v2/Api/DealsApi.md#_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v2\\Api\\DealsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the deal\n$installment_id = 56; // int | The ID of the installment\n$body = new \\stdClass; // object\n\ntry {\n    $result = $apiInstance->updateInstallment($id, $installment_id, $body);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling DealsApi->updateInstallment: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Team Users API DELETE Endpoint\nDESCRIPTION: Deletes users from a team. This API call uses the DELETE method and targets the `/legacyTeams/{id}/users` endpoint, where `{id}` is the unique identifier of the team. The input would include the user ID to remove from the team.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/README.md#_snippet_30\n\nLANGUAGE: N/A\nCODE:\n```\nN/A\n```\n\n----------------------------------------\n\nTITLE: Example Options Data Structure (JSON)\nDESCRIPTION: This JSON snippet shows the required format for providing options when updating a product field of type 'set' or 'enum'. It demonstrates an array of objects, where each object has an 'id' and a 'label' property, representing the possible values for the field.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Model/UpdateProductField.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n[{\"id\":1, \"label\":\"red\"},{\"id\":2, \"label\":\"blue\"},{\"id\":3, \"label\":\"lilac\"}]\n```\n\n----------------------------------------\n\nTITLE: Model Property Definition for DeletePersonResponseAllOfData in PHP\nDESCRIPTION: This snippet defines the data model for the DeletePersonResponseAllOfData, focusing on the 'id' property which is an optional integer representing the ID of a deleted person. It includes property descriptions and notes, and supports model navigation.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Model/DeletePersonResponseAllOfData.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n# # DeletePersonResponseAllOfData\n\n## Properties\n\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**id** | **int** | The ID of the deleted person | [optional]\n\n[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)\n```\n\n----------------------------------------\n\nTITLE: RecentsStage Model Property Definitions in PHP\nDESCRIPTION: This snippet defines the properties of the RecentsStage model class, indicating which fields are optional and their respective types. The 'data' property references another model class, BaseStage.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Model/RecentsStage.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n# # RecentsStage\n\n## Properties\n\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**item** | **string** |  | [optional]\n**id** | **int** |  | [optional]\n**data** | [**\\Pipedrive\\versions\\v1\\Model\\BaseStage**](BaseStage.md) |  | [optional]\n\n[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)\n```\n\n----------------------------------------\n\nTITLE: Example Email Object Structure for BasePersonItem (JSON)\nDESCRIPTION: Illustrates the expected JSON structure for an array of email objects within the 'email' property of a BasePersonItem. Each object requires a 'value' (string) and can optionally include 'primary' (boolean represented as a string 'true'/'false') and 'label' (string).\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Model/BasePersonItem.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n[{ \"value\": \"mail@example.com\", \"primary\": \"true\", \"label\": \"main\" }]\n```\n\n----------------------------------------\n\nTITLE: Deleting Installment from Deal with Pipedrive DealsApi in PHP\nDESCRIPTION: Explains how to remove an installment payment plan from a Pipedrive deal using the `deleteInstallment` method. Note that this functionality is only available on Pipedrive Advanced plans and above. The example covers the standard setup (autoloader, authentication, `DealsApi` instantiation) and calls the method with the deal ID (`id`) and the installment ID (`installment_id`).\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v2/Api/DealsApi.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v2\\Api\\DealsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the deal\n$installment_id = 56; // int | The ID of the installment\n\ntry {\n    $result = $apiInstance->deleteInstallment($id, $installment_id);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling DealsApi->deleteInstallment: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Getting a specific filter in Pipedrive using PHP\nDESCRIPTION: Retrieves detailed information about a specific filter, including its condition lines. Requires the filter ID as input.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/FiltersApi.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\FiltersApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the filter\n\ntry {\n    $result = $apiInstance->getFilter($id);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling FiltersApi->getFilter: ', $e->getMessage(), PHP_EOL;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Listing Additional Discounts with Pipedrive PHP SDK\nDESCRIPTION: Fetches the list of additional discounts attached to a specified deal using the Pipedrive v2 PHP SDK. It authenticates with either an API Key or OAuth2 token, creates a DealsApi instance, and calls the getAdditionalDiscounts method with the deal ID as a required parameter. Expects a deal ID as input and outputs an AdditionalDiscountsResponse object. Requires the pipedrive/client-php package, a valid API key or OAuth2 token, and optionally a custom Guzzle HTTP client.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v2/Api/DealsApi.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n$apiInstance = new Pipedrive\\versions\\v2\\Api\\DealsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the deal\n\ntry {\n    $result = $apiInstance->getAdditionalDiscounts($id);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling DealsApi->getAdditionalDiscounts: ', $e->getMessage(), PHP_EOL;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Deleting Organization Relationship API DELETE Endpoint\nDESCRIPTION: Deletes an organization relationship. This API call uses the DELETE method and targets the `/organizationRelationships/{id}` endpoint, where `{id}` is the unique identifier of the relationship to delete. The input is the relationship ID.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/README.md#_snippet_62\n\nLANGUAGE: N/A\nCODE:\n```\nN/A\n```\n\n----------------------------------------\n\nTITLE: List Deals 4.x - Pipedrive PHP\nDESCRIPTION: Version 4.x lists deals by creating a `Client` instance and accessing the deals functionality via `$client->getDeals()`. The `getAllDeals()` method is then called with an associative array for query parameters like 'limit' and 'status'.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/MIGRATION-5.x.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Pipedrive\\Client;\n\n/* ...configuration needed here... */\n\n$client = new Client(/* ... */);\n$client->getDeals()->getAllDeals([\n    'limit' => 10,\n    'status' => 'open',\n]);\n```\n\n----------------------------------------\n\nTITLE: Example Phone Object Structure for PersonItem\nDESCRIPTION: Illustrates the JSON-like structure for representing a phone number object within the 'phone' array property of a PersonItem. Each object requires a 'value' and can optionally include 'primary' (boolean) and 'label' (e.g., 'mobile', 'work').\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Model/PersonItem.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[{ \"value\": \"12345\", \"primary\": \"true\", \"label\": \"mobile\" }]\n```\n\n----------------------------------------\n\nTITLE: Including Pipedrive PHP Client Autoloader\nDESCRIPTION: This PHP snippet demonstrates how to include the library's autoloader file when the library is installed manually (not via Composer). This line makes all the library classes available to your script. Replace `/path/to/pipedrive/vendor/autoload.php` with the actual path to the autoloader file on your system.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/README.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once('/path/to/pipedrive/vendor/autoload.php');\n```\n\n----------------------------------------\n\nTITLE: Deleting Lead Labels API DELETE Endpoint\nDESCRIPTION: Deletes a lead label. This API call uses the DELETE method and targets the `/leadLabels/{id}` endpoint, where `{id}` is the unique identifier of the lead label to delete. Input would be the ID of the lead label.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/README.md#_snippet_17\n\nLANGUAGE: N/A\nCODE:\n```\nN/A\n```\n\n----------------------------------------\n\nTITLE: Update Deal 4.x - Pipedrive PHP\nDESCRIPTION: Version 4.x updates a deal using the `updateADeal()` method accessed via `$client->getDeals()`. The deal ID and updated properties are passed as an associative array to the method.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/MIGRATION-5.x.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nuse Pipedrive\\Client;\n\n/* ...configuration needed here... */\n\n$client = new Client(/* ... */);\n$response = $client->getDeals()->updateADeal([\n    'id' => 'DEAL_ID',\n    'title' => 'DEAL_TITLE_UPDATED'\n]);\n```\n\n----------------------------------------\n\nTITLE: Webhooks Model Properties in Markdown\nDESCRIPTION: A markdown table describing the properties of the Webhooks model in the Pipedrive PHP client. It documents three properties: success (boolean), status (string), and data (array of BaseWebhook objects).\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Model/Webhooks.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**success** | **bool** | If the response is successful or not | [optional]\n**status** | **string** | The status of the response | [optional]\n**data** | [**\\Pipedrive\\versions\\v1\\Model\\BaseWebhook[]**](BaseWebhook.md) | The array of Webhooks | [optional]\n```\n\n----------------------------------------\n\nTITLE: Querying the searchLeads() Method Signature in PHP\nDESCRIPTION: The method signature for searching leads in Pipedrive, returning a LeadSearchResponse object. It includes parameters for search term, fields, matching options, and filtering by person or organization.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v2/Api/LeadsApi.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nsearchLeads($term, $fields, $exact_match, $person_id, $organization_id, $include_fields, $limit, $cursor): \\Pipedrive\\versions\\v2\\Model\\LeadSearchResponse\n```\n\n----------------------------------------\n\nTITLE: Initializing Pipedrive PHP Client with OAuth 2.0 Credentials\nDESCRIPTION: Example of configuring the Pipedrive PHP client with OAuth 2.0 credentials including client ID, client secret, and redirect URI.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v2/README.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n$oAuthClientId = 'oAuthClientId'; // OAuth 2 Client ID\n$oAuthClientSecret = 'oAuthClientSecret'; // OAuth 2 Client Secret\n$oAuthRedirectUri = 'https://example.com/oauth/callback'; // OAuth 2 Redirection endpoint or Callback Uri\n\n$config = (new Pipedrive\\versions\\v2\\Configuration());\n$config->setClientId($oAuthClientId);\n$config->setClientSecret($oAuthClientSecret);\n$config->setOauthRedirectUri($oAuthRedirectUri);\n\n$dealsApiInstance = new DealsApi(null, $config);\n```\n\n----------------------------------------\n\nTITLE: Updating Note API PUT Endpoint\nDESCRIPTION: Updates a note. This API call uses the PUT method and targets the `/notes/{id}` endpoint, where `{id}` is the unique identifier of the note. The input contains the data needed to update the specified note.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/README.md#_snippet_54\n\nLANGUAGE: N/A\nCODE:\n```\nN/A\n```\n\n----------------------------------------\n\nTITLE: Installing Pipedrive PHP Client using Composer\nDESCRIPTION: This command installs the Pipedrive PHP client library into your project using Composer, the recommended dependency manager for PHP. Ensure you have Composer installed and are running this command in your project's root directory.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require pipedrive/pipedrive\n```\n\n----------------------------------------\n\nTITLE: Deleting a Channel in PHP using Pipedrive API\nDESCRIPTION: Example of how to delete an existing messenger's channel and all related entities. Requires Messengers integration OAuth scope and the Messaging manifest.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/ChannelsApi.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\ChannelsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 'id_example'; // string | The ID of the channel provided by the integration\n\ntry {\n    $result = $apiInstance->deleteChannel($id);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling ChannelsApi->deleteChannel: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Follower to a Product in Pipedrive PHP SDK\nDESCRIPTION: Example demonstrating how to add a follower to a product in Pipedrive using the PHP SDK. Requires the product ID and follower details as parameters and returns a NewFollowerResponse object.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/ProductsApi.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\ProductsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the product\n$add_product_follower_request = new \\Pipedrive\\versions\\v1\\Model\\AddProductFollowerRequest(); // \\Pipedrive\\versions\\v1\\Model\\AddProductFollowerRequest\n\ntry {\n    $result = $apiInstance->addProductFollower($id, $add_product_follower_request);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling ProductsApi->addProductFollower: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Get Authorization URL 5.x - Pipedrive PHP\nDESCRIPTION: In version 5.x, the authorization URL is obtained from the `Configuration` instance using the `getAuthorizationPageUrl()` method. This method requires the configuration to be set up with OAuth client details.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/MIGRATION-5.x.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Pipedrive\\Configuration;\n\n$config = new Configuration();\n/* ... */\n\n$config->getAuthorizationPageUrl();\n```\n\n----------------------------------------\n\nTITLE: DeletePersonResponse Model Properties in Markdown\nDESCRIPTION: Markdown table describing the properties of the DeletePersonResponse model for the Pipedrive PHP client. It includes the success boolean flag and data object containing additional response information.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v2/Model/DeletePersonResponse.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\n\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**success** | **bool** | If the response is successful or not | [optional]\n**data** | [**\\Pipedrive\\versions\\v2\\Model\\DeletePersonResponseData**](DeletePersonResponseData.md) |  | [optional]\n```\n\n----------------------------------------\n\nTITLE: Delete Deal 5.x - Pipedrive PHP\nDESCRIPTION: In version 5.x, deleting a deal uses the `deleteDeal()` method of the `DealsApi` instance. The deal ID is passed as the argument to the method.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/MIGRATION-5.x.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nuse Pipedrive\\Client;\nuse Pipedrive\\Configuration;\nuse Pipedrive\\Api\\DealsApi;\n\n$config = new Configuration();\n\n/* ...configuration needed here... */\n\n$dealId = /* DEAL_ID */;\n$dealsApiInstance = new DealsApi(null, $config);\n$response = $dealsApiInstance->deleteDeal($dealId);\n```\n\n----------------------------------------\n\nTITLE: Getting Leads API GET Endpoint\nDESCRIPTION: Gets one lead. This API call uses the GET method and targets the `/leads/{id}` endpoint, where `{id}` is the unique identifier of the lead.  The input is the ID of the lead.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/README.md#_snippet_23\n\nLANGUAGE: N/A\nCODE:\n```\nN/A\n```\n\n----------------------------------------\n\nTITLE: Defining the deleteProductFollower Method Signature in PHP\nDESCRIPTION: PHP method signature for `deleteProductFollower`. This method deletes a user follower from a product, taking the product ID and follower ID as integer arguments, and returns a `DeleteFollowerResponse` object.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v2/Api/ProductsApi.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\ndeleteProductFollower($id, $follower_id): \\Pipedrive\\versions\\v2\\Model\\DeleteFollowerResponse\n```\n\n----------------------------------------\n\nTITLE: Delete Deal 4.x - Pipedrive PHP\nDESCRIPTION: Version 4.x deletes a deal using the `deleteADeal()` method accessed via `$client->getDeals()`. The deal ID is passed as a direct argument to the method.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/MIGRATION-5.x.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nuse Pipedrive\\Client;\n\n/* ...configuration needed here... */\n\n$client = new Client(/* ... */);\n$response = $client->getDeals()->deleteADeal('DEAL_ID');\n```\n\n----------------------------------------\n\nTITLE: PostDealParticipantsRelatedObjects Model Properties in Markdown\nDESCRIPTION: Markdown table describing the properties of the PostDealParticipantsRelatedObjects model including property names, types, descriptions, and optional flags.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Model/PostDealParticipantsRelatedObjects.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\nuser | [\\Pipedrive\\versions\\v1\\Model\\RelatedUserData](RelatedUserData.md) |  | [optional]\nperson | [\\Pipedrive\\versions\\v1\\Model\\RelatedPersonDataWithActiveFlag](RelatedPersonDataWithActiveFlag.md) |  | [optional]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Filter Helpers in PHP\nDESCRIPTION: This snippet retrieves filter helpers using the Pipedrive API in PHP. It configures API key and OAuth2 authorization before making the API call.  It then prints the result or catches and displays any exceptions that occur during the process.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/FiltersApi.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\FiltersApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n\ntry {\n    $result = $apiInstance->getFilterHelpers();\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling FiltersApi->getFilterHelpers: ', $e->getMessage(), PHP_EOL;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving Product Users via Pipedrive API in PHP\nDESCRIPTION: This code snippet demonstrates how to fetch all user IDs associated with a specific product by calling the `getProductUsers` method. It requires setting up API key or OAuth2 credentials, configuring the API client, and handling potential exceptions. The input parameter is the product ID; the output is a user IDs model representing users linked to the product.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/ProductsApi.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\ProductsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the product\n\ntry {\n    $result = $apiInstance->getProductUsers($id);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling ProductsApi->getProductUsers: ', $e->getMessage(), PHP_EOL;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Updating Organization Relationship API PUT Endpoint\nDESCRIPTION: Updates an organization relationship. This API call uses the PUT method and targets the `/organizationRelationships/{id}` endpoint, where `{id}` is the unique identifier of the organization relationship to update. Input includes the data needed to update the specific organization relationship.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/README.md#_snippet_65\n\nLANGUAGE: N/A\nCODE:\n```\nN/A\n```\n\n----------------------------------------\n\nTITLE: Getting Legacy Teams API GET Endpoint\nDESCRIPTION: Gets all teams. This API call uses the GET method and targets the `/legacyTeams` endpoint. No specific input is needed.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/README.md#_snippet_33\n\nLANGUAGE: N/A\nCODE:\n```\nN/A\n```\n\n----------------------------------------\n\nTITLE: Getting Organization Changelog API GET Endpoint\nDESCRIPTION: Lists updates about organization field values. This API call uses the GET method and targets the `/organizations/{id}/changelog` endpoint, where `{id}` is the unique identifier of the organization.  The input is the organization ID.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/README.md#_snippet_73\n\nLANGUAGE: N/A\nCODE:\n```\nN/A\n```\n\n----------------------------------------\n\nTITLE: Model Definition for Organization Relationship in PHP\nDESCRIPTION: This snippet models the organization relationship entity in PHP with type annotations and property descriptions. It helps developers understand the structure of data exchanged with the Pipedrive API related to organization relationships. Dependencies include the RelationshipOrganizationInfoItem class for nested organization info properties.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Model/BaseOrganizationRelationshipItem.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n# # BaseOrganizationRelationshipItem\n\n## Properties\n\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**id** | **int** | The ID of the organization relationship | [optional]\n**type** | **string** | The type of the relationship | [optional]\n**rel_owner_org_id** | [**\\Pipedrive\\versions\\v1\\Model\\RelationshipOrganizationInfoItem**](RelationshipOrganizationInfoItem.md) |  | [optional]\n**rel_linked_org_id** | [**\\Pipedrive\\versions\\v1\\Model\\RelationshipOrganizationInfoItem**](RelationshipOrganizationInfoItem.md) |  | [optional]\n**add_time** | **string** | The creation date and time of the relationship | [optional]\n**update_time** | **string** | The last updated date and time of the relationship | [optional]\n**active_flag** | **string** | Whether the relationship is active or not | [optional]\n\n[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)\n```\n\n----------------------------------------\n\nTITLE: Defining the OrganizationSearchItem Data Model in PHP\nDESCRIPTION: This snippet defines the OrganizationSearchItem model class with its properties: result_score (float, optional) and item (another model class, optional). It establishes the structure for representing search result data in the client, including relevance scores and associated entity information.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v2/Model/OrganizationSearchItem.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n# <?php\n\nnamespace Pipedrive\\Versions\\V2\\Model;\n\nclass OrganizationSearchItem {\n    /**\n     * @var float|null Search result relevancy score, optional.\n     */\n    public ?float $result_score = null;\n\n    /**\n     * @var OrganizationSearchItemItem|null The associated organization item, optional.\n     */\n    public ?OrganizationSearchItemItem $item = null;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Deleting User-Provider Link Using Pipedrive MeetingsApi in PHP\nDESCRIPTION: Deletes the link between a user and their installed video call integration in Pipedrive. This method requires a unique string identifier for the user-provider link and returns a UserProviderLinkSuccessResponse model upon successful deletion. Dependencies include the Pipedrive PHP client, GuzzleHttp client for HTTP requests, and either API key or OAuth2 authorization. The method throws exceptions for error handling during API calls.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/MeetingsApi.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . \"/vendor/autoload.php\");\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey(\"api_token\", \"YOUR_API_KEY\");\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix(\"api_token\", \"Bearer\");\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken(\"YOUR_ACCESS_TOKEN\");\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\MeetingsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = \"id_example\"; // string | Unique identifier linking a user to the installed integration\n\ntry {\n    $result = $apiInstance->deleteUserProviderLink($id);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling MeetingsApi->deleteUserProviderLink: ', $e->getMessage(), PHP_EOL;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving Activity Fields Endpoint Definition in PHP\nDESCRIPTION: Defines the getActivityFields method that returns all activity fields from the Pipedrive API.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/ActivityFieldsApi.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ngetActivityFields(): \\Pipedrive\\versions\\v1\\Model\\FieldsResponse\n```\n\n----------------------------------------\n\nTITLE: Defining the deleteProductVariation Method Signature in PHP\nDESCRIPTION: PHP method signature for `deleteProductVariation`. This method deletes a product variation, taking the product ID and product variation ID as integer arguments, and returns a `DeleteProductVariation` object.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v2/Api/ProductsApi.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\ndeleteProductVariation($id, $product_variation_id): \\Pipedrive\\versions\\v2\\Model\\DeleteProductVariation\n```\n\n----------------------------------------\n\nTITLE: Example Email Object Structure for PersonItem\nDESCRIPTION: Illustrates the JSON-like structure for representing an email object within the 'email' array property of a PersonItem. Each object requires a 'value' and can optionally include 'primary' (boolean) and 'label' (e.g., 'main', 'work').\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Model/PersonItem.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[{ \"value\": \"mail@example.com\", \"primary\": \"true\", \"label\": \"main\" }]\n```\n\n----------------------------------------\n\nTITLE: Deleting Deal Installment using BetaApi in PHP\nDESCRIPTION: This code snippet demonstrates how to delete an installment from a deal using the Pipedrive BetaApi. It requires the deal ID and the installment ID. The code configures API key or OAuth2 authorization, initializes the BetaApi client with Guzzle, and calls the deleteInstallment method, printing the result or catching exceptions.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v2/Api/BetaApi.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v2\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v2\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v2\\Api\\BetaApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the deal\n$installment_id = 56; // int | The ID of the installment\n\ntry {\n    $result = $apiInstance->deleteInstallment($id, $installment_id);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling BetaApi->deleteInstallment: ', $e->getMessage(), PHP_EOL;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Adding Users to a Legacy Team using Pipedrive PHP SDK\nDESCRIPTION: Shows how to add users to an existing legacy team via the `LegacyTeamsApi::addTeamUser` method. Requires authentication setup (API key or OAuth2), API client instantiation, the target team ID (`$id`), and an `AddTeamUserRequest` model object containing the user IDs to add. It includes basic error handling using a try-catch block.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/LegacyTeamsApi.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\LegacyTeamsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the team\n$add_team_user_request = new \\Pipedrive\\versions\\v1\\Model\\AddTeamUserRequest(); // \\Pipedrive\\versions\\v1\\Model\\AddTeamUserRequest\n\ntry {\n    $result = $apiInstance->addTeamUser($id, $add_team_user_request);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling LegacyTeamsApi->addTeamUser: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: BasicPerson Model Properties Table in Markdown\nDESCRIPTION: A Markdown table documenting all properties of the BasicPerson model, including property names, types, descriptions, and additional notes. This provides a comprehensive reference for developers implementing person-related functionality with the Pipedrive PHP client.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Model/BasicPerson.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# # BasicPerson\n\n## Properties\n\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**owner_id** | **int** | The ID of the user who will be marked as the owner of this person. When omitted, the authorized user ID will be used. | [optional]\n**org_id** | **int** | The ID of the organization this person will belong to | [optional]\n**email** | [**\\Pipedrive\\versions\\v1\\Model\\BasicPersonEmail[]**](BasicPersonEmail.md) | An email address as a string or an array of email objects related to the person. The structure of the array is as follows: `[{ \"value\": \"mail@example.com\", \"primary\": \"true\", \"label\": \"main\" }]`. Please note that only `value` is required. | [optional]\n**phone** | [**\\Pipedrive\\versions\\v1\\Model\\BasePersonItemPhone[]**](BasePersonItemPhone.md) | A phone number supplied as a string or an array of phone objects related to the person. The structure of the array is as follows: `[{ \"value\": \"12345\", \"primary\": \"true\", \"label\": \"mobile\" }]`. Please note that only `value` is required. | [optional]\n**label** | **int** | The label assigned to the person. When the `label` field is updated, the `label_ids` field value will be overwritten by the `label` field value. | [optional]\n**label_ids** | **int[]** | The IDs of labels assigned to the person. When the `label_ids` field is updated, the `label` field value will be set to the first value of the `label_ids` field. | [optional]\n**visible_to** | [**VisibleTo**](VisibleTo.md) | The visibility of the person. If omitted, the visibility will be set to the default visibility setting of this item type for the authorized user. Read more about visibility groups <a href=\"https://support.pipedrive.com/en/article/visibility-groups\" target=\"_blank\" rel=\"noopener noreferrer\">here</a>.<h4>Essential / Advanced plan</h4><table><tr><th style=\"width:40px\">Value</th><th>Description</th></tr><tr><td>`1`</td><td>Owner &amp; followers</td><tr><td>`3`</td><td>Entire company</td></tr></table><h4>Professional / Enterprise plan</h4><table><tr><th style=\"width:40px\">Value</th><th>Description</th></tr><tr><td>`1`</td><td>Owner only</td><tr><td>`3`</td><td>Owner's visibility group</td></tr><tr><td>`5`</td><td>Owner's visibility group and sub-groups</td></tr><tr><td>`7`</td><td>Entire company</td></tr></table> | [optional]\n**marketing_status** | [**MarketingStatus**](MarketingStatus.md) | If the person does not have a valid email address, then the marketing status is **not set** and `no_consent` is returned for the `marketing_status` value when the new person is created. If the change is forbidden, the status will remain unchanged for every call that tries to modify the marketing status. Please be aware that it is only allowed **once** to change the marketing status from an old status to a new one.<table><tr><th>Value</th><th>Description</th></tr><tr><td>`no_consent`</td><td>The customer has not given consent to receive any marketing communications</td></tr><tr><td>`unsubscribed`</td><td>The customers have unsubscribed from ALL marketing communications</td></tr><tr><td>`subscribed`</td><td>The customers are subscribed and are counted towards marketing caps</td></tr><tr><td>`archived`</td><td>The customers with `subscribed` status can be moved to `archived` to save consent, but they are not paid for</td></tr></table> | [optional]\n**add_time** | **string** | The optional creation date & time of the person in UTC. Format: YYYY-MM-DD HH:MM:SS | [optional]\n```\n\n----------------------------------------\n\nTITLE: Adding Leads API POST Endpoint\nDESCRIPTION: Adds a lead. This API call uses the POST method and targets the `/leads` endpoint. Input contains the details of the new lead.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/README.md#_snippet_21\n\nLANGUAGE: N/A\nCODE:\n```\nN/A\n```\n\n----------------------------------------\n\nTITLE: Defining the getProductFollowersChangelog Method Signature in PHP\nDESCRIPTION: PHP method signature for `getProductFollowersChangelog`. This method lists changelogs about users who have followed the product, taking the product ID, an optional limit, and an optional cursor as arguments. It returns a `GetFollowerChangelogs` object.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v2/Api/ProductsApi.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\ngetProductFollowersChangelog($id, $limit, $cursor): \\Pipedrive\\versions\\v2\\Model\\GetFollowerChangelogs\n```\n\n----------------------------------------\n\nTITLE: CallLogsResponseAdditionalData Model Properties Definition in Markdown\nDESCRIPTION: Defines the properties of the CallLogsResponseAdditionalData model in a Markdown table format. The model contains an optional pagination property which references the AdditionalData model.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Model/CallLogsResponseAdditionalData.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**pagination** | [**\\Pipedrive\\versions\\v1\\Model\\AdditionalData**](AdditionalData.md) |  | [optional]\n```\n\n----------------------------------------\n\nTITLE: Adding Notes API POST Endpoint\nDESCRIPTION: Adds a note. This API call uses the POST method and targets the `/notes` endpoint. The input contains the content of the new note.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/README.md#_snippet_45\n\nLANGUAGE: N/A\nCODE:\n```\nN/A\n```\n\n----------------------------------------\n\nTITLE: ActivityDistribution Model Properties in Markdown\nDESCRIPTION: A table describing the properties of the ActivityDistribution model, including property names, data types, descriptions, and optional notes. The model contains a single optional property assigned_to_user_id of type ActivityDistributionItem.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Model/ActivityDistribution.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\n\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**assigned_to_user_id** | [**\\Pipedrive\\versions\\v1\\Model\\ActivityDistributionItem**](ActivityDistributionItem.md) |  | [optional]\n```\n\n----------------------------------------\n\nTITLE: Deleting Organization Follower API DELETE Endpoint\nDESCRIPTION: Deletes a follower from an organization.  This API call uses the DELETE method and targets the `/organizations/{id}/followers/{follower_id}` endpoint, where `{id}` is the unique identifier of the organization and `follower_id` is the unique identifier of the follower. Input is the organization ID and follower ID.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/README.md#_snippet_69\n\nLANGUAGE: N/A\nCODE:\n```\nN/A\n```\n\n----------------------------------------\n\nTITLE: Fetching User's Teams with Pipedrive LegacyTeamsApi in PHP\nDESCRIPTION: Provides an example of retrieving all teams associated with a specific user via the `getUserTeams` method. It includes setting up authentication, creating the API client instance, and calling the method with the required user ID and optional parameters for sorting (`order_by`) and omitting user IDs (`skip_users`). The operation returns a `Teams` model object.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/LegacyTeamsApi.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\LegacyTeamsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the user\n$order_by = 'id'; // string | The field name to sort returned teams by\n$skip_users = new \\Pipedrive\\versions\\v1\\Model\\\\Pipedrive\\versions\\v1\\Model\\NumberBooleanDefault0(); // \\Pipedrive\\versions\\v1\\Model\\NumberBooleanDefault0 | When enabled, the teams will not include IDs of member users\n\ntry {\n    $result = $apiInstance->getUserTeams($id, $order_by, $skip_users);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling LegacyTeamsApi->getUserTeams: ', $e->getMessage(), PHP_EOL;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Adding Legacy Teams API POST Endpoint\nDESCRIPTION: Adds a new team. This API call uses the POST method and targets the `/legacyTeams` endpoint. The input includes the new team details.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/README.md#_snippet_28\n\nLANGUAGE: N/A\nCODE:\n```\nN/A\n```\n\n----------------------------------------\n\nTITLE: Updating Lead Labels API PATCH Endpoint\nDESCRIPTION: Updates a lead label. This API call uses the PATCH method and targets the `/leadLabels/{id}` endpoint, where `{id}` is the unique identifier of the lead label to update. Input contains the data needed to update a specific lead label.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/README.md#_snippet_19\n\nLANGUAGE: N/A\nCODE:\n```\nN/A\n```\n\n----------------------------------------\n\nTITLE: Getting Lead Labels API GET Endpoint\nDESCRIPTION: Retrieves all lead labels. This API call uses the GET method and targets the `/leadLabels` endpoint.  No specific input is needed.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/README.md#_snippet_18\n\nLANGUAGE: N/A\nCODE:\n```\nN/A\n```\n\n----------------------------------------\n\nTITLE: Defining Goal Assignee (JSON)\nDESCRIPTION: Example JSON structure for specifying the assignee of a Pipedrive goal. The 'type' property indicates whether the assignee is a 'person', 'company', or 'team', accompanied by the corresponding 'id'.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Model/NewGoal.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{ \"id\": \"1\", \"type\": \"person\" }\n```\n\n----------------------------------------\n\nTITLE: Getting a Single Legacy Team using Pipedrive PHP SDK\nDESCRIPTION: Illustrates retrieving details of a specific legacy team with `LegacyTeamsApi::getTeam`. It requires authentication setup, API client instantiation, the target team ID (`$id`), and an optional `skip_users` parameter (a `NumberBooleanDefault0` model) to potentially exclude user IDs from the response. Includes a try-catch block for error management.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/LegacyTeamsApi.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n\n// Configure API key authorization: api_key\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKey('api_token', 'YOUR_API_KEY');\n// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n// $config = (new Pipedrive\\versions\\v1\\Configuration())->setApiKeyPrefix('api_token', 'Bearer');\n\n// Configure OAuth2 access token for authorization: oauth2\n$config = (new Pipedrive\\versions\\v1\\Configuration())->setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new Pipedrive\\versions\\v1\\Api\\LegacyTeamsApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n$id = 56; // int | The ID of the team\n$skip_users = new \\Pipedrive\\versions\\v1\\Model\\\\Pipedrive\\versions\\v1\\Model\\NumberBooleanDefault0(); // \\Pipedrive\\versions\\v1\\Model\\NumberBooleanDefault0 | When enabled, the teams will not include IDs of member users\n\ntry {\n    $result = $apiInstance->getTeam($id, $skip_users);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling LegacyTeamsApi->getTeam: ', $e->getMessage(), PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the UpdateTeamWithAdditionalProperties Model in PHP\nDESCRIPTION: This snippet defines a data model class representing the properties used to update a team, including optional fields like name, description, manager ID, users, status flags, creation time, and creator ID. It serves as a structured way to handle team update requests in PHP, ensuring proper data types and optionality.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Model/UpdateTeamWithAdditionalProperties.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n# (Assuming the code contains class definition and property annotations or assignments)\n```\n\n----------------------------------------\n\nTITLE: Defining Goal Expected Outcome (Sum) (JSON)\nDESCRIPTION: Example JSON structure for defining the expected outcome of a Pipedrive goal when tracked by sum (monetary value). It includes the 'target' numeric value, sets the 'tracking_metric' to 'sum', and requires a 'currency_id'.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Model/NewGoal.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{ \"target\": \"50\", \"tracking_metric\": \"sum\", \"currency_id\": 1 }\n```\n\n----------------------------------------\n\nTITLE: Parameter Properties for API Goals in PHP SDK\nDESCRIPTION: Defines the properties used for API goal parameters in Pipedrive's PHP SDK, including 'pipeline_id' and 'activity_type_id'. Both are optional integer arrays that identify respective entities for goal tracking. These parameters are used when creating or updating goals via the API, with dependencies on PHP data structures and array handling.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Model/Params.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n# # Params\n\n## Properties\n\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**pipeline_id** | **int[]** | The IDs of pipelines of the goal | [optional]\n**activity_type_id** | **int[]** | The IDs of activity types of the goal | [optional]\n\n[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)\n```\n\n----------------------------------------\n\nTITLE: ItemSearchResponse Model Properties Definition in PHP\nDESCRIPTION: Defines the properties of the ItemSearchResponse model for handling search response data from the Pipedrive API. It includes optional success flag, core data, and auxiliary data, with links to related models. This snippet is essential for understanding the data structure returned by the API.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Model/ItemSearchResponse.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n# # ItemSearchResponse\n\n## Properties\n\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**success** | **bool** | If the response is successful or not | [optional]\n**data** | [**\\Pipedrive\\versions\\v1\\Model\\ItemSearchResponseAllOfData**](ItemSearchResponseAllOfData.md) |  |\n**additional_data** | [**\\Pipedrive\\versions\\v1\\Model\\ItemSearchAdditionalData**](ItemSearchAdditionalData.md) |  |\n```\n\n----------------------------------------\n\nTITLE: Model Definition for UserAssignmentToPermissionSet in PHP\nDESCRIPTION: This code snippet defines a PHP class representing the UserAssignmentToPermissionSet model, including its properties: user_id, permission_set_id, and name. These properties are optional and facilitate serialization/deserialization when interfacing with the Pipedrive API.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Model/UserAssignmentToPermissionSet.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n# <?php\n\n/**\n * Class UserAssignmentToPermissionSet\n *\n * Represents a user's assignment to a permission set in the Pipedrive system.\n *\n * Properties:\n * - user_id: Optional integer representing the user's ID.\n * - permission_set_id: Optional string representing the permission set ID.\n * - name: Optional string representing the permission set name.\n */\nclass UserAssignmentToPermissionSet {\n    /** @var int|null */\n    public ?int $user_id = null;\n\n    /** @var string|null */\n    public ?string $permission_set_id = null;\n\n    /** @var string|null */\n    public ?string $name = null;\n\n    /**\n     * Constructor to initialize the properties.\n     *\n     * @param int|null $user_id\n     * @param string|null $permission_set_id\n     * @param string|null $name\n     */\n    public function __construct(?int $user_id = null, ?string $permission_set_id = null, ?string $name = null) {\n        $this->user_id = $user_id;\n        $this->permission_set_id = $permission_set_id;\n        $this->name = $name;\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining the UpdateProductResponse Model in PHP\nDESCRIPTION: The code snippet outlines the properties of the UpdateProductResponse model, showing types and descriptions for each property. It is used to parse and handle API responses related to product updates, ensuring type safety and structured data access. Dependencies include other models such as ProductWithArrayPrices and GetActivitiesResponseRelatedObjects, which are referenced in the property descriptions.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Model/UpdateProductResponse.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n# # UpdateProductResponse\n\n## Properties\n\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**success** | **bool** | If the response is successful or not |\n**data** | [**\\\\Pipedrive\\\\versions\\\\v1\\\\Model\\\\ProductWithArrayPrices**](ProductWithArrayPrices.md) | The product data including array prices |\n**related_objects** | [**\\\\Pipedrive\\\\versions\\\\v1\\\\Model\\\\GetActivitiesResponseRelatedObjects**](GetActivitiesResponseRelatedObjects.md) | Related objects such as activities or other references |\n\n[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)\n```\n\n----------------------------------------\n\nTITLE: Pipedrive API Endpoints Reference Table in Markdown\nDESCRIPTION: A markdown table that lists all available API endpoints in the Pipedrive PHP client, organized by API class. The table includes method names, HTTP request types, and descriptions for each endpoint.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v2/README.md#_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n## Documentation for API endpoints\n\nAll URIs are relative to *https://api.pipedrive.com/api/v2*\n\nClass | Method | HTTP request | Description\n------------ | ------------- | ------------- | -------------\n*ActivitiesApi* | [**addActivity**](Api/ActivitiesApi.md#addactivity) | **POST** /activities | Add a new activity\n*ActivitiesApi* | [**deleteActivity**](Api/ActivitiesApi.md#deleteactivity) | **DELETE** /activities/{id} | Delete an activity\n*ActivitiesApi* | [**getActivities**](Api/ActivitiesApi.md#getactivities) | **GET** /activities | Get all activities\n*ActivitiesApi* | [**getActivity**](Api/ActivitiesApi.md#getactivity) | **GET** /activities/{id} | Get details of an activity\n*ActivitiesApi* | [**updateActivity**](Api/ActivitiesApi.md#updateactivity) | **PATCH** /activities/{id} | Update an activity\n*BetaApi* | [**deleteInstallment**](Api/BetaApi.md#deleteinstallment) | **DELETE** /deals/{id}/installments/{installment_id} | Delete an installment from a deal\n*BetaApi* | [**getInstallments**](Api/BetaApi.md#getinstallments) | **GET** /deals/installments | List installments added to a list of deals\n*BetaApi* | [**postInstallment**](Api/BetaApi.md#postinstallment) | **POST** /deals/{id}/installments | Add an installment to a deal\n*BetaApi* | [**updateInstallment**](Api/BetaApi.md#updateinstallment) | **PATCH** /deals/{id}/installments/{installment_id} | Update an installment added to a deal\n*DealsApi* | [**addDeal**](Api/DealsApi.md#adddeal) | **POST** /deals | Add a new deal\n*DealsApi* | [**addDealFollower**](Api/DealsApi.md#adddealfollower) | **POST** /deals/{id}/followers | Add a follower to a deal\n*DealsApi* | [**addDealProduct**](Api/DealsApi.md#adddealproduct) | **POST** /deals/{id}/products | Add a product to a deal\n*DealsApi* | [**deleteAdditionalDiscount**](Api/DealsApi.md#deleteadditionaldiscount) | **DELETE** /deals/{id}/discounts/{discount_id} | Delete a discount from a deal\n*DealsApi* | [**deleteDeal**](Api/DealsApi.md#deletedeal) | **DELETE** /deals/{id} | Delete a deal\n*DealsApi* | [**deleteDealFollower**](Api/DealsApi.md#deletedealfollower) | **DELETE** /deals/{id}/followers/{follower_id} | Delete a follower from a deal\n*DealsApi* | [**deleteDealProduct**](Api/DealsApi.md#deletedealproduct) | **DELETE** /deals/{id}/products/{product_attachment_id} | Delete an attached product from a deal\n*DealsApi* | [**deleteInstallment**](Api/DealsApi.md#deleteinstallment) | **DELETE** /deals/{id}/installments/{installment_id} | Delete an installment from a deal\n*DealsApi* | [**getAdditionalDiscounts**](Api/DealsApi.md#getadditionaldiscounts) | **GET** /deals/{id}/discounts | List discounts added to a deal\n*DealsApi* | [**getDeal**](Api/DealsApi.md#getdeal) | **GET** /deals/{id} | Get details of a deal\n*DealsApi* | [**getDealFollowers**](Api/DealsApi.md#getdealfollowers) | **GET** /deals/{id}/followers | List followers of a deal\n*DealsApi* | [**getDealFollowersChangelog**](Api/DealsApi.md#getdealfollowerschangelog) | **GET** /deals/{id}/followers/changelog | List followers changelog of a deal\n*DealsApi* | [**getDealProducts**](Api/DealsApi.md#getdealproducts) | **GET** /deals/{id}/products | List products attached to a deal\n*DealsApi* | [**getDeals**](Api/DealsApi.md#getdeals) | **GET** /deals | Get all deals\n*DealsApi* | [**getDealsProducts**](Api/DealsApi.md#getdealsproducts) | **GET** /deals/products | Get deal products of several deals\n*DealsApi* | [**getInstallments**](Api/DealsApi.md#getinstallments) | **GET** /deals/installments | List installments added to a list of deals\n*DealsApi* | [**postAdditionalDiscount**](Api/DealsApi.md#postadditionaldiscount) | **POST** /deals/{id}/discounts | Add a discount to a deal\n*DealsApi* | [**postInstallment**](Api/DealsApi.md#postinstallment) | **POST** /deals/{id}/installments | Add an installment to a deal\n*DealsApi* | [**searchDeals**](Api/DealsApi.md#searchdeals) | **GET** /deals/search | Search deals\n*DealsApi* | [**updateAdditionalDiscount**](Api/DealsApi.md#updateadditionaldiscount) | **PATCH** /deals/{id}/discounts/{discount_id} | Update a discount added to a deal\n*DealsApi* | [**updateDeal**](Api/DealsApi.md#updatedeal) | **PATCH** /deals/{id} | Update a deal\n*DealsApi* | [**updateDealProduct**](Api/DealsApi.md#updatedealproduct) | **PATCH** /deals/{id}/products/{product_attachment_id} | Update the product attached to a deal\n*DealsApi* | [**updateInstallment**](Api/DealsApi.md#updateinstallment) | **PATCH** /deals/{id}/installments/{installment_id} | Update an installment added to a deal\n*ItemSearchApi* | [**searchItem**](Api/ItemSearchApi.md#searchitem) | **GET** /itemSearch | Perform a search from multiple item types\n*ItemSearchApi* | [**searchItemByField**](Api/ItemSearchApi.md#searchitembyfield) | **GET** /itemSearch/field | Perform a search using a specific field from an item type\n*LeadsApi* | [**searchLeads**](Api/LeadsApi.md#searchleads) | **GET** /leads/search | Search leads\n*OrganizationsApi* | [**addOrganization**](Api/OrganizationsApi.md#addorganization) | **POST** /organizations | Add a new organization\n*OrganizationsApi* | [**addOrganizationFollower**](Api/OrganizationsApi.md#addorganizationfollower) | **POST** /organizations/{id}/followers | Add a follower to an organization\n*OrganizationsApi* | [**deleteOrganization**](Api/OrganizationsApi.md#deleteorganization) | **DELETE** /organizations/{id} | Delete a organization\n*OrganizationsApi* | [**deleteOrganizationFollower**](Api/OrganizationsApi.md#deleteorganizationfollower) | **DELETE** /organizations/{id}/followers/{follower_id} | Delete a follower from an organization\n*OrganizationsApi* | [**getOrganization**](Api/OrganizationsApi.md#getorganization) | **GET** /organizations/{id} | Get details of a organization\n*OrganizationsApi* | [**getOrganizationFollowers**](Api/OrganizationsApi.md#getorganizationfollowers) | **GET** /organizations/{id}/followers | List followers of an organization\n*OrganizationsApi* | [**getOrganizationFollowersChangelog**](Api/OrganizationsApi.md#getorganizationfollowerschangelog) | **GET** /organizations/{id}/followers/changelog | List followers changelog of an organization\n*OrganizationsApi* | [**getOrganizations**](Api/OrganizationsApi.md#getorganizations) | **GET** /organizations | Get all organizations\n*OrganizationsApi* | [**searchOrganization**](Api/OrganizationsApi.md#searchorganization) | **GET** /organizations/search | Search organizations\n*OrganizationsApi* | [**updateOrganization**](Api/OrganizationsApi.md#updateorganization) | **PATCH** /organizations/{id} | Update a organization\n*PersonsApi* | [**addPerson**](Api/PersonsApi.md#addperson) | **POST** /persons | Add a new person\n*PersonsApi* | [**addPersonFollower**](Api/PersonsApi.md#addpersonfollower) | **POST** /persons/{id}/followers | Add a follower to a person\n*PersonsApi* | [**deletePerson**](Api/PersonsApi.md#deleteperson) | **DELETE** /persons/{id} | Delete a person\n*PersonsApi* | [**deletePersonFollower**](Api/PersonsApi.md#deletepersonfollower) | **DELETE** /persons/{id}/followers/{follower_id} | Delete a follower from a person\n*PersonsApi* | [**getPerson**](Api/PersonsApi.md#getperson) | **GET** /persons/{id} | Get details of a person\n*PersonsApi* | [**getPersonFollowers**](Api/PersonsApi.md#getpersonfollowers) | **GET** /persons/{id}/followers | List followers of a person\n*PersonsApi* | [**getPersonFollowersChangelog**](Api/PersonsApi.md#getpersonfollowerschangelog) | **GET** /persons/{id}/followers/changelog | List followers changelog of a person\n*PersonsApi* | [**getPersons**](Api/PersonsApi.md#getpersons) | **GET** /persons | Get all persons\n*PersonsApi* | [**searchPersons**](Api/PersonsApi.md#searchpersons) | **GET** /persons/search | Search persons\n*PersonsApi* | [**updatePerson**](Api/PersonsApi.md#updateperson) | **PATCH** /persons/{id} | Update a person\n*PipelinesApi* | [**addPipeline**](Api/PipelinesApi.md#addpipeline) | **POST** /pipelines | Add a new pipeline\n*PipelinesApi* | [**deletePipeline**](Api/PipelinesApi.md#deletepipeline) | **DELETE** /pipelines/{id} | Delete a pipeline\n*PipelinesApi* | [**getPipeline**](Api/PipelinesApi.md#getpipeline) | **GET** /pipelines/{id} | Get one pipeline\n*PipelinesApi* | [**getPipelines**](Api/PipelinesApi.md#getpipelines) | **GET** /pipelines | Get all pipelines\n*PipelinesApi* | [**updatePipeline**](Api/PipelinesApi.md#updatepipeline) | **PATCH** /pipelines/{id} | Update a pipeline\n*ProductsApi* | [**addProduct**](Api/ProductsApi.md#addproduct) | **POST** /products | Add a product\n*ProductsApi* | [**addProductFollower**](Api/ProductsApi.md#addproductfollower) | **POST** /products/{id}/followers | Add a follower to a product\n*ProductsApi* | [**addProductVariation**](Api/ProductsApi.md#addproductvariation) | **POST** /products/{id}/variations | Add a product variation\n*ProductsApi* | [**deleteProduct**](Api/ProductsApi.md#deleteproduct) | **DELETE** /products/{id} | Delete a product\n*ProductsApi* | [**deleteProductFollower**](Api/ProductsApi.md#deleteproductfollower) | **DELETE** /products/{id}/followers/{follower_id} | Delete a follower from a product\n*ProductsApi* | [**deleteProductVariation**](Api/ProductsApi.md#deleteproductvariation) | **DELETE** /products/{id}/variations/{product_variation_id} | Delete a product variation\n*ProductsApi* | [**getProduct**](Api/ProductsApi.md#getproduct) | **GET** /products/{id} | Get one product\n*ProductsApi* | [**getProductFollowers**](Api/ProductsApi.md#getproductfollowers) | **GET** /products/{id}/followers | List followers of a product\n*ProductsApi* | [**getProductFollowersChangelog**](Api/ProductsApi.md#getproductfollowerschangelog) | **GET** /products/{id}/followers/changelog | List followers changelog of a product\n*ProductsApi* | [**getProductVariations**](Api/ProductsApi.md#getproductvariations) | **GET** /products/{id}/variations | Get all product variations\n*ProductsApi* | [**getProducts**](Api/ProductsApi.md#getproducts) | **GET** /products | Get all products\n```\n\n----------------------------------------\n\nTITLE: Getting Legacy Teams API GET Endpoint\nDESCRIPTION: Gets a single team. This API call uses the GET method and targets the `/legacyTeams/{id}` endpoint, where `{id}` is the unique identifier of the team. The input is the team ID.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/README.md#_snippet_31\n\nLANGUAGE: N/A\nCODE:\n```\nN/A\n```\n\n----------------------------------------\n\nTITLE: Defining Related Objects Properties in AllOrganizationsGetResponse Model (PHP)\nDESCRIPTION: This snippet describes the properties of the AllOrganizationsGetResponseAllOfRelatedObjects model in PHP, specifying optional relationships to organization, user, and picture data models. Each property includes a type reference and optionality notes, facilitating data mapping in API responses.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Model/AllOrganizationsGetResponseAllOfRelatedObjects.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n# # AllOrganizationsGetResponseAllOfRelatedObjects\n\n## Properties\n\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**organization** | [**\\\\Pipedrive\\\\versions\\\\v1\\\\Model\\\\RelatedOrganizationData**](RelatedOrganizationData.md) |  | [optional]\n**user** | [**\\\\Pipedrive\\\\versions\\\\v1\\\\Model\\\\RelatedUserData**](RelatedUserData.md) |  | [optional]\n**picture** | [**\\\\Pipedrive\\\\versions\\\\v1\\\\Model\\\\RelatedPictureData**](RelatedPictureData.md) |  | [optional]\n\n[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)\n```\n\n----------------------------------------\n\nTITLE: Updating Legacy Teams API PUT Endpoint\nDESCRIPTION: Updates a team. This API call uses the PUT method and targets the `/legacyTeams/{id}` endpoint, where `{id}` is the unique identifier of the team to update. Input includes the data needed to update the specified team.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/README.md#_snippet_35\n\nLANGUAGE: N/A\nCODE:\n```\nN/A\n```\n\n----------------------------------------\n\nTITLE: Get Authorization URL 4.x - Pipedrive PHP\nDESCRIPTION: In version 4.x, initiating the OAuth flow involves creating an instance of the `Client` class and accessing the authentication object via `$client->auth()` to call the `buildAuthorizationUrl()` method. This method returns the URL the user should be redirected to.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/MIGRATION-5.x.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Pipedrive\\Client;\n\n$client = new Client(/* ... */);\n\n$client->auth()->buildAuthorizationUrl());\n```\n\n----------------------------------------\n\nTITLE: Defining GetRoleSettingsResponseData Class in PHP\nDESCRIPTION: The `GetRoleSettingsResponseData` class defines the structure of the response data received from the Pipedrive API. It includes a `data` property, which is an instance of the `RoleSettings` class, representing the role settings information.  This class is used for deserializing the API response. No specific dependencies are required other than the Pipedrive PHP client library and its internal dependencies.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Model/GetRoleSettingsResponseData.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Add New Deal 4.x - Pipedrive PHP\nDESCRIPTION: Version 4.x adds a new deal using the `addADeal()` method accessed via `$client->getDeals()`. The deal properties, such as 'title', are passed as an associative array to the method.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/MIGRATION-5.x.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nuse Pipedrive\\Client;\n\n/* ...configuration needed here... */\n\n$client = new Client(/* ... */);\n$response = $client->getDeals()->addADeal([\n    'title' => 'DEAL_TITLE'\n]);\n```\n\n----------------------------------------\n\nTITLE: Documentation of UpsertRoleSettingsResponseData Model Properties in PHP\nDESCRIPTION: This snippet documents the properties of the UpsertRoleSettingsResponseData model class used in the PHP client. It explains the optional 'data' property, its type, and role within the response object, assisting developers in implementing or extending the model.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Model/UpsertRoleSettingsResponseData.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# # UpsertRoleSettingsResponseData\n\n## Properties\n\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**data** | [**\\Pipedrive\\versions\\v1\\Model\\UpsertRoleSettingsResponseDataData**](UpsertRoleSettingsResponseDataData.md) |  | [optional]\n\n[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)\n```\n\n----------------------------------------\n\nTITLE: Configure OAuth Tokens 4.x - Pipedrive PHP\nDESCRIPTION: Version 4.x required setting stored OAuth tokens by directly assigning an object containing 'accessToken', 'refreshToken', 'expiry', and 'tokenType' properties to the static `Pipedrive\\Configuration::$token` property. This object holds the user's current authentication details.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/MIGRATION-5.x.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Pipedrive\\Configuration;\n\nConfiguration::$token = (object) [\n    'accessToken' => 'USER_ACCESS_TOKEN',\n    'refreshToken' => 'USER_REFRESH_TOKEN',\n    'expiry' => 'USER_ACCESS_TOKEN_EXPIRATION_MS',\n    'tokenType' => 'Bearer',\n];\n```\n\n----------------------------------------\n\nTITLE: Model Properties Definition for Role in PHP SDK\nDESCRIPTION: This snippet outlines the properties of the role model in the Pipedrive PHP SDK, including optional fields such as 'id', 'active_flag', 'assignment_count', and 'sub_role_count'. The purpose is to define the data structure representing a user role, facilitating serialization and validation within the SDK.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Model/SubRoleAllOf.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n# # SubRoleAllOf\n\n## Properties\n\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**id** | **int** | The ID of the role | [optional]\n**active_flag** | **bool** | Whether the role is active or not | [optional]\n**assignment_count** | **string** | The number of users assigned to this role | [optional]\n**sub_role_count** | **string** | The number of sub-roles | [optional]\n\n[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)\n```\n\n----------------------------------------\n\nTITLE: ParticipantsChangelogItem Property Definitions in PHP\nDESCRIPTION: Defines the properties of the ParticipantsChangelogItem model for use in PHP. It specifies optional fields such as actor_user_id, person_id, action, and time, describing their data types and purpose within the model. This helps ensure proper data handling and validation within the PHP client when interacting with the Pipedrive API.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Model/ParticipantsChangelogItem.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n# # ParticipantsChangelogItem\n\n## Properties\n\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**actor_user_id** | **int** | The ID of the user | [optional]\n**person_id** | **int** | The ID of the person | [optional]\n**action** | **string** | Deal participant action type | [optional]\n**time** | **string** | The deal participant action log time | [optional]\n\n[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)\n```\n\n----------------------------------------\n\nTITLE: Example Phone Object Structure for BasePersonItem (JSON)\nDESCRIPTION: Illustrates the expected JSON structure for an array of phone objects within the 'phone' property of a BasePersonItem. Each object requires a 'value' (string) and can optionally include 'primary' (boolean represented as a string 'true'/'false') and 'label' (string).\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Model/BasePersonItem.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n[{ \"value\": \"12345\", \"primary\": \"true\", \"label\": \"mobile\" }]\n```\n\n----------------------------------------\n\nTITLE: Defining FiltersBulkDeleteResponse Properties in PHP Model\nDESCRIPTION: This snippet documents the properties of the FiltersBulkDeleteResponse class, including 'success' indicating the response status and 'data' representing detailed response data. It references the related data model and provides context for their usage in API responses.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Model/FiltersBulkDeleteResponse.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n# # FiltersBulkDeleteResponse\n\n## Properties\n\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**success** | **bool** | If the response is successful or not | [optional]\n**data** | [**\\\\Pipedrive\\\\versions\\\\v1\\\\Model\\\\FiltersBulkDeleteResponseAllOfData**](FiltersBulkDeleteResponseAllOfData.md) |  |\n```\n\n----------------------------------------\n\nTITLE: Defining Goal Expected Outcome (Quantity) (JSON)\nDESCRIPTION: Example JSON structure for defining the expected outcome of a Pipedrive goal when tracked by quantity. It specifies the 'target' numeric value and sets the 'tracking_metric' to 'quantity'.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Model/NewGoal.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{ \"target\": \"50\", \"tracking_metric\": \"quantity\" }\n```\n\n----------------------------------------\n\nTITLE: Update Installment Subscription in Pipedrive using PHP\nDESCRIPTION: This code snippet provides the method signature and description for updating an installment subscription using the Pipedrive API in PHP.  The full example is not provided.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Api/SubscriptionsApi.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nupdateSubscriptionInstallment($id, $subscription_installment_update_request): \\Pipedrive\\versions\\v1\\Model\\SubscriptionsIdResponse\n?>\n```\n\n----------------------------------------\n\nTITLE: Defining the getProduct Method Signature in PHP\nDESCRIPTION: PHP method signature for `getProduct`. This method returns data about a specific product, taking the product ID as an integer argument, and returns a `ProductResponse` object.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v2/Api/ProductsApi.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\ngetProduct($id): \\Pipedrive\\versions\\v2\\Model\\ProductResponse\n```\n\n----------------------------------------\n\nTITLE: AddProjectResponse Model Properties Definition in Markdown\nDESCRIPTION: Defines the properties of the AddProjectResponse model including success status boolean, project data object, and additional metadata. This documentation follows OpenAPI specification format with property names, types, and descriptions.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Model/AddProjectResponse.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# # AddProjectResponse\n\n## Properties\n\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**success** | **bool** |  | [optional]\n**data** | [**\\Pipedrive\\versions\\v1\\Model\\ProjectResponseObject**](ProjectResponseObject.md) |  | [optional]\n**additional_data** | **object** |  | [optional]\n\n[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)\n```\n\n----------------------------------------\n\nTITLE: Example of FieldCreateRequestAllOf model properties in Markdown\nDESCRIPTION: This markdown table outlines the properties of the FieldCreateRequestAllOf model, including property names, data types, descriptions, and notes about optionality.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Model/FieldCreateRequestAllOf.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# # FieldCreateRequestAllOf\n\n## Properties\n\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**name** | **string** | The name of the field |\n**options** | **object[]** | When &#x60;field_type&#x60; is either set or enum, possible options must be supplied as a JSON-encoded sequential array of objects. Example: &#x60;[{\\&quot;label\\&quot;:\\&quot;New Item\\&quot;}]&#x60; | [optional]\n**add_visible_flag** | **bool** | Whether the field is available in the &#39;add new&#39; modal or not (both in the web and mobile app) | [optional] [default to true]\n\n[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)\n```\n\n----------------------------------------\n\nTITLE: Assignee Model Properties Table in Markdown\nDESCRIPTION: A markdown table defining the properties of the Assignee model, including property names, data types, descriptions, and optional status indicators.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Model/Assignee.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**id** | **int** | The ID of the goal assignee | [optional]\n**type** | **string** | The type of the assignee | [optional]\n```\n\n----------------------------------------\n\nTITLE: OrganizationRelationshipWithCalculatedFields Properties in Markdown\nDESCRIPTION: A markdown table that defines the properties of the OrganizationRelationshipWithCalculatedFields model, including their names, types, descriptions, and optional status.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Model/OrganizationRelationshipWithCalculatedFields.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# # OrganizationRelationshipWithCalculatedFields\n\n## Properties\n\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**id** | **int** | The ID of the organization relationship | [optional]\n**type** | **string** | The type of the relationship | [optional]\n**rel_owner_org_id** | [**\\Pipedrive\\versions\\v1\\Model\\RelationshipOrganizationInfoItem**](RelationshipOrganizationInfoItem.md) |  | [optional]\n**rel_linked_org_id** | [**\\Pipedrive\\versions\\v1\\Model\\RelationshipOrganizationInfoItem**](RelationshipOrganizationInfoItem.md) |  | [optional]\n**add_time** | **string** | The creation date and time of the relationship | [optional]\n**update_time** | **string** | The last updated date and time of the relationship | [optional]\n**active_flag** | **string** | Whether the relationship is active or not | [optional]\n**calculated_type** | **string** | The calculated type of the relationship with the linked organization | [optional]\n**calculated_related_org_id** | **int** | The ID of the linked organization | [optional]\n```\n\n----------------------------------------\n\nTITLE: DealSearchItemItemOrganization Model Properties in Markdown\nDESCRIPTION: Defines the properties of the DealSearchItemItemOrganization model, including id and name fields. The id represents the organization identifier and name represents the organization name associated with a deal.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v2/Model/DealSearchItemItemOrganization.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# # DealSearchItemItemOrganization\n\n## Properties\n\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**id** | **int** | The ID of the organization the deal is associated with | [optional]\n**name** | **string** | The name of the organization the deal is associated with | [optional]\n\n[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)\n```\n\n----------------------------------------\n\nTITLE: OrganizationRequestBody Properties Table in Markdown\nDESCRIPTION: A markdown table defining the properties of the OrganizationRequestBody model, including property names, data types, descriptions, and notes about each field.\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v2/Model/OrganizationRequestBody.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# # OrganizationRequestBody\n\n## Properties\n\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**name** | **string** | The name of the organization | [optional]\n**owner_id** | **int** | The ID of the user who owns the organization | [optional]\n**add_time** | **string** | The creation date and time of the organization | [optional]\n**update_time** | **string** | The last updated date and time of the organization | [optional]\n**visible_to** | **int** | The visibility of the organization | [optional]\n**label_ids** | **int[]** | The IDs of labels assigned to the organization | [optional]\n\n[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)\n```\n\n----------------------------------------\n\nTITLE: UpsertGoalResponse Model Properties in Markdown\nDESCRIPTION: Documents the properties of the UpsertGoalResponse model in a Markdown table format. The properties include 'success' (a boolean indicating whether the request was successful) and 'data' (which contains the PostGoalResponse model data).\nSOURCE: https://github.com/pipedrive/client-php/blob/master/docs/versions/v1/Model/UpsertGoalResponse.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# # UpsertGoalResponse\n\n## Properties\n\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**success** | **bool** | If the request was successful or not | [optional]\n**data** | [**\\Pipedrive\\versions\\v1\\Model\\PostGoalResponse**](PostGoalResponse.md) |  | [optional]\n```"
  }
]