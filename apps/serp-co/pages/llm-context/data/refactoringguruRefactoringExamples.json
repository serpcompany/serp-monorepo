[
  {
    "owner": "refactoringguru",
    "repo": "refactoring-examples",
    "content": "TITLE: Defining and Using Primitive Fields in a PHP Class\nDESCRIPTION: This snippet defines an Order class in PHP with a primitive string field, $customer, and its associated getter and setter methods. The constructor initializes the $customer field. A separate static function, numberOfOrdersFor, counts how many Order instances are associated with a given customer string. This code requires no external dependencies. Inputs involve customer names as strings, and outputs include initialized Order objects and the order count. The Order class stores only a string, so extending behavior related to customers is constrained without further refactoring.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/replace-data-value-with-object.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass Order {\n  // ...\n  private $customer; // String\n\n  public function __construct($customer) {\n    $this->customer = $customer;\n  }\n  public function getCustomer() {\n    return $this->customer;\n  }\n  public function setCustomer($customer) {\n    $this->customer = $customer;\n  }\n}\n\n// Client code, which uses Order class.\nprivate static function numberOfOrdersFor($orders, $customer) {\n  $result = 0;\n  foreach ($orders as $order) {\n    if ($order->getCustomer() === $customer) {\n      $result++;\n    }\n  }\n  return $result;\n}\n```\n\n----------------------------------------\n\nTITLE: Initial Type Code Implementation in PHP\nDESCRIPTION: This code snippet shows the initial implementation using type codes (integer constants) to represent blood groups in a `Person` class. The `$bloodGroup` property stores the blood group as an integer, and the `getBloodGroup` and `setBloodGroup` methods access and modify it directly using integer codes. This approach makes the code harder to read and less flexible.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/replace-type-code-with-class.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass Person {\n  const O = 0;\n  const A = 1;\n  const B = 2;\n  const AB = 3;\n\n  private $bloodGroup; // int\n\n  public function __construct($code) {\n    $this->bloodGroup = $code;\n  }\n  public function setBloodGroup($code) {\n    $this->bloodGroup = $code;\n  }\n  public function getBloodGroup() {\n    return $this->bloodGroup;\n  }\n}\n\n// Somewhere in client code.\n$parent = new Person(Person::O);\nif ($parent->getBloodGroup() == Person::AB) {\n  // ...\n}\n$child->setBloodGroup($parent->getBloodGroup());\n```\n\n----------------------------------------\n\nTITLE: Original Class and Client Code Handling Nulls in PHP\nDESCRIPTION: This PHP code snippet shows initial classes Company, Customer, and PaymentHistory with typical getter methods. The client code demonstrates null checks where a variable could be null, and different values or method calls are conditionally selected based on nullity. This snippet reveals the problem of multiple scattered null checks before using object methods. It requires careful handling to avoid null reference errors.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/introduce-null-object.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nclass Company {\n  //…\n  private $customer; // Customer\n  public function getCustomer() {\n    return $this->customer;\n  }\n}\n\nclass Customer {\n  //…\n  public function getName() {\n    //…\n  }\n  public function getPlan() {\n    //…\n  }\n  public function getHistory() {\n    //…\n  }\n}\n\nclass PaymentHistory {\n  public function getWeeksDelinquentInLastYear() {\n    //…\n  }\n}\n\n// Somewhere in client code\n$customer = $site->getCustomer();\nif (customer == null) {\n  $customerName = \"N/A\";\n}\nelse {\n  $customerName = $customer->getName();\n}\n\n//…\nif ($customer == null) {\n  $plan = BillingPlan::basic();\n}\nelse {\n  $plan = $customer->getPlan();\n}\n\n//…\nif ($customer == null) {\n  $weeksDelinquent = 0;\n}\nelse {\n  $weeksDelinquent = $customer->getHistory()->getWeeksDelinquentInLastYear();\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Billable Interface for Standardized Billing - PHP\nDESCRIPTION: This snippet explicitly defines the Billable interface, which prescribes the getRate() and hasSpecialSkill() methods that must be implemented by any class intended to be billable within the timesheet system. Dependencies: None; standalone interface. Inputs/Outputs: Method signatures only, no implementation. Limitation: Classes must implement all declared methods. This ensures uniformity and expandability for the billing process.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/extract-interface.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\ninterface Billable {\n  public function getRate();\n  public function hasSpecialSkill();\n}\n\n```\n\n----------------------------------------\n\nTITLE: Overriding payAmount Method in Manager Subclass - Java\nDESCRIPTION: This snippet adds the payAmount method override to the Manager subclass to calculate a manager's salary including the bonus. It sums monthlySalary and bonus fields from the Employee object and returns the result. This refactors the prior conditional salary logic for managers found in EmployeeType. The method requires an Employee instance and returns an integer compensation value.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/replace-type-code-with-state-strategy.md#_snippet_9\n\nLANGUAGE: Java\nCODE:\n```\n  @Override public int payAmount(Employee employee) {\n    return employee.monthlySalary + employee.bonus;\n  }\n```\n\n----------------------------------------\n\nTITLE: Employee Class Hierarchy After Refactoring with Subclasses\nDESCRIPTION: Refactored implementation using an abstract Employee superclass with type-specific subclasses. The factory method pattern creates appropriate subclass instances, and polymorphism replaces conditional logic. Each employee type implements its own behavior through method overrides.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/replace-type-code-with-subclasses.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nabstract class Employee {\n  // ...\n  const ENGINEER = 0;\n  const SALESMAN = 1;\n  const MANAGER = 2;\n\n  abstract public function getType();\n\n  public static function create($type) {\n    switch ($type) {\n      case self::ENGINEER:\n        return new Engineer();\n      case self::SALESMAN:\n        return new Salesman();\n      case self::MANAGER:\n        return new Manager();\n      default:\n        throw new RuntimeException(\"Incorrect Employee Code\");\n    }\n  }\n\n  public $monthlySalary;\n  public function payAmount() {\n    return $this->monthlySalary;\n  }\n}\n\nclass Engineer extends Employee {\n  public function getType() {\n    return Employee::ENGINEER;\n  }\n}\n\nclass Salesman extends Employee {\n  public $commission;\n  public function getType() {\n    return Employee::SALESMAN;\n  }\n  public function payAmount() {\n    return $this->monthlySalary + $this->commission;\n  }\n}\n\nclass Manager extends Employee {\n  public $bonus;\n  public function getType() {\n    return Employee::MANAGER;\n  }\n  public function payAmount() {\n    return $this->monthlySalary + $this->bonus;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Refactored Java Method Throwing BalanceException\nDESCRIPTION: This snippet shows an improved version of the 'Account' class where the 'withdraw' method throws a custom 'BalanceException' instead of returning error codes. The method signature is updated to declare the exception, and client code uses try-catch blocks to handle errors, enhancing readability and robustness.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/replace-error-code-with-exception.md#_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nclass BalanceException extends Exception {}\n\nclass Account {\n  // ...\n  private int balance;\n\n  public void withdraw(int amount) throws BalanceException {\n    if (amount > balance) {\n      throw new BalanceException();\n    }\n    balance -= amount;\n  }\n}\n\n// Somewhere in client code.\ntry {\n  account.withdraw(amount);\n  doTheUsualThing();\n} catch (BalanceException e) {\n  handleOverdrawn();\n}\n\n```\n\n----------------------------------------\n\nTITLE: Refactored Employee Class with Factory Method and Subclasses\nDESCRIPTION: Implements a static factory method 'create' in the Employee class to instantiate specific subclasses based on employee type. The constructor is made private to enforce creation through the factory method. Subclasses Engineer, Salesman, and Manager extend Employee, allowing flexible object creation and easy extension.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/replace-constructor-with-factory-method.md#_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nclass Employee {\n  // ...\n  static final int ENGINEER = 0;\n  static final int SALESMAN = 1;\n  static final int MANAGER = 2;\n\n  public static Employee create(int type) {\n    switch (type) {\n      case ENGINEER:\n        return new Engineer();\n      case SALESMAN:\n        return new Salesman();\n      case MANAGER:\n        return new Manager();\n      default:\n        return new Employee(type);\n    }\n  }\n  private Employee(int type) {\n    this.type = type;\n  }\n}\nclass Engineer extends Employee {\n  // ...\n}\nclass Salesman extends Employee {\n  // ...\n}\nclass Manager extends Employee {\n  // ...\n}\n\n// Some client code.\nEmployee eng = Employee.create(Employee.ENGINEER);\n```\n\n----------------------------------------\n\nTITLE: Employee Type Code Implementation After Refactoring (Java)\nDESCRIPTION: This code snippet demonstrates the refactored Employee class using the State/Strategy pattern. The integer type code is replaced by an `EmployeeType` object. The `payAmount()` method is delegated to the `EmployeeType` object, which determines the pay based on the specific employee type. This approach promotes better code organization, maintainability, and extensibility.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/replace-type-code-with-state-strategy.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nclass Employee {\n  // ...\n  private EmployeeType type;\n\n  public Employee(int arg) {\n    type = EmployeeType.newType(arg);\n  }\n  public int getTypeCode() {\n    return type.getTypeCode();\n  }\n  public void setTypeCode(int arg) {\n    type = EmployeeType.newType(arg);\n  }\n\n  public int monthlySalary;\n  public int commission;\n  public int bonus;\n  public int payAmount() {\n    return type.payAmount(this);\n  }\n}\n\nabstract class EmployeeType {\n  static final int ENGINEER = 0;\n  static final int SALESMAN = 1;\n  static final int MANAGER = 2;\n\n  abstract public int getTypeCode();\n  public static EmployeeType newType(int code) {\n    switch (code) {\n      case ENGINEER:\n        return new Engineer();\n      case SALESMAN:\n        return new Salesman();\n      case MANAGER:\n        return new Manager();\n      default:\n        throw new IllegalArgumentException(\"Incorrect Employee Code\");\n    }\n  }\n\n  abstract public int payAmount(Employee employee);\n}\nclass Engineer extends EmployeeType {\n  @Override public int getTypeCode() {\n    return EmployeeType.ENGINEER;\n  }\n  @Override public int payAmount(Employee employee) {\n    return employee.monthlySalary;\n  }\n}\nclass Salesman extends EmployeeType {\n  @Override public int getTypeCode() {\n    return EmployeeType.SALESMAN;\n  }\n  @Override public int payAmount(Employee employee) {\n    return employee.monthlySalary + employee.commission;\n  }\n}\nclass Manager extends EmployeeType {\n  @Override public int getTypeCode() {\n    return EmployeeType.MANAGER;\n  }\n  @Override public int payAmount(Employee employee) {\n    return employee.monthlySalary + employee.bonus;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Refactored Payroll Calculation using Polymorphism in PHP\nDESCRIPTION: This snippet demonstrates the refactored payroll calculation where the switch statement is replaced by polymorphic methods in subclasses of EmployeeType. The Employee class now delegates salary calculation to the type-specific payAmount method, implemented separately in each subclass (Engineer, Salesman, Manager). Dependencies include the Employee and EmployeeType classes, and each subclass must define a payAmount method that takes an Employee instance. Inputs are employee objects and their attributes; output is the salary based on the dynamic type. This design simplifies extension for new employee types and removes the need for a central conditional block, enhancing maintainability and scalability.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/replace-conditional-with-polymorphism.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass Employee {\n  // ...\n  private $type; // EmployeeType\n  public function getTypeCode() {\n    return $this->type->getTypeCode();\n  }\n\n  public $monthlySalary;\n  public $commission;\n  public $bonus;\n  public function payAmount() {\n    return $this->type->payAmount($this);\n  }\n}\n\nabstract class EmployeeType {\n  const ENGINEER = 0;\n  const SALESMAN = 1;\n  const MANAGER = 2;\n\n  abstract public function getTypeCode();\n  public static function newType($code) {\n    switch ($code) {\n      case self::ENGINEER:\n        return new Engineer();\n      case self::SALESMAN:\n        return new Salesman();\n      case self::MANAGER:\n        return new Manager();\n      default:\n        throw new Exception(\"Incorrect Employee Code\");\n    }\n  }\n\n  abstract public function payAmount(Employee $employee);\n}\nclass Engineer extends EmployeeType {\n  public function getTypeCode() {\n    return EmployeeType::ENGINEER;\n  }\n  public function payAmount(Employee $employee) {\n    return $employee->monthlySalary;\n  }\n}\nclass Salesman extends EmployeeType {\n  public function getTypeCode() {\n    return EmployeeType::SALESMAN;\n  }\n  public function payAmount(Employee $employee) {\n    return $employee->monthlySalary + $employee->commission;\n  }\n}\nclass Manager extends EmployeeType {\n  public function getTypeCode() {\n    return EmployeeType::MANAGER;\n  }\n  public function payAmount(Employee $employee) {\n    return $employee->monthlySalary + $employee->bonus;\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Bidirectional Association Implementation - Java\nDESCRIPTION: This code snippet demonstrates the bidirectional association between `Order` and `Customer` classes. The `Order` class's `setCustomer` method now updates both the `Order`'s customer and the `Customer`'s set of orders. The `Customer` class maintains a `Set` of `Order` objects and has a `friendOrders` method (package-private) to allow `Order` to manage its order collection and an `addOrder` method to ensure correct bidirectional setting.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/change-unidirectional-association-to-bidirectional.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nclass Order {\n  // ...\n  private Customer customer;\n\n  public Customer getCustomer() {\n    return customer;\n  }\n  public void setCustomer(Customer arg) {\n    // Remove order from old customer.\n    if (customer != null) {\n      customer.friendOrders().remove(this);\n    }\n    customer = arg;\n    // Add order to new customer.\n    if (customer != null) {\n      customer.friendOrders().add(this);\n    }\n  }\n}\n\nclass Customer {\n  // ...\n  private Set orders = new HashSet();\n\n  // Should be used in Order class only.\n  Set friendOrders() {\n    return orders;\n  }\n  void addOrder(Order arg) {\n    arg.setCustomer(this);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Customer Statement Methods (After Refactoring) - PHP\nDESCRIPTION: The original `printOwing` function has been refactored by extracting specific tasks into separate methods: `printBanner` for displaying the banner, `getOutstanding` for calculating the total, and `printDetails` for printing the customer's information and the calculated amount. This improves the clarity and organization of the code, making each method responsible for a single, well-defined task.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/extract-method.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfunction printOwing() {\n  $this->printBanner();\n  $outstanding = $this->getOutstanding();\n  $this->printDetails($outstanding);\n}\n\nfunction printBanner() {\n  print(\"*****************************\\n\");\n  print(\"****** Customer totals ******\\n\");\n  print(\"*****************************\\n\");\n}\n\nfunction printDetails($outstanding) {\n  print(\"name: \" . $this->name);\n  print(\"amount: \" . $outstanding);\n}\n\nfunction getOutstanding() {\n  $e = $this->orders->elements();\n  $outstanding = 0;\n  while ($e->hasMoreElements()) {\n    $each = $e->nextElement();\n    $outstanding += $each->getAmount();\n  }\n  return $outstanding;\n}\n```\n\n----------------------------------------\n\nTITLE: After Refactoring: Employee Class Hierarchy (C#)\nDESCRIPTION: This snippet shows the code after applying the 'Replace Type Code with Subclasses' refactoring. An abstract Employee class serves as the superclass, with specific subclasses (Engineer, Salesman, Manager) inheriting from it. A static factory method 'Create' handles object instantiation based on the type code, and type-specific logic is moved to overridden methods ('PayAmount') and properties within the subclasses.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/replace-type-code-with-subclasses.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic abstract class Employee\n{\n  // ...\n  public const int ENGINEER = 0,\n                   SALESMAN = 1,\n                   MANAGER = 2;\n\n  public abstract int Type\n  { get; }\n  public int MonthlySalary\n  { get; set; }\n\n  public static Employee Create(int type)\n  {\n    switch (type)\n    {\n      case ENGINEER:\n        return new Engineer();\n      case SALESMAN:\n        return new Salesman();\n      case MANAGER:\n        return new Manager();\n      default:\n        throw new Exception(\"Incorrect Employee Code\");\n    }\n  }\n\n  public virtual int PayAmount()\n  {\n    return MonthlySalary;\n  }\n}\n\npublic class Engineer: Employee\n{\n  public override int Type\n  {\n    get{ return Employee.ENGINEER; }\n  }\n}\n\npublic class Salesman: Employee\n{\n  public override int Type\n  {\n    get{ return Employee.SALESMAN; }\n  }\n  public int Commission\n  { get; set; }\n\n  public override int PayAmount()\n  {\n    return MonthlySalary + Commission;\n  }\n}\n\npublic class Manager: Employee\n{\n  public override int Type\n  {\n    get{ return Employee.MANAGER; }\n  }\n  public int Bonus\n  { get; set; }\n\n  public override int PayAmount()\n  {\n    return MonthlySalary + Bonus;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Refactored Method with Separate Query and Modifier - C#\nDESCRIPTION: This snippet shows the refactored code after applying the 'Separate Query from Modifier' technique. The original `FindCriminalAndAlert` method has been split into `FindCriminal` (query) and `DoSendAlert` (modifier) methods. The `CheckSecurity` method now calls both methods.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/separate-query-from-modifier.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Guard\n{\n  // ...\n  public void CheckSecurity(string[] people)\n  {\n    DoSendAlert(people);\n    string found = FindCriminal(people);\n    SomeLaterCode(found);\n  }\n  public void DoSendAlert(string[] people)\n  {\n    if (!String.IsNullOrEmpty(FindCriminal(people))) {\n      SendAlert();\n    }\n  }\n  public string FindCriminal(string[] people)\n  {\n    for (int i = 0; i < people.Length; i++)\n    {\n      if (people[i].Equals (\"Don\")) {\n        return \"Don\";\n      }\n      if (people[i].Equals (\"John\")) {\n        return \"John\";\n      }\n    }\n    return String.Empty;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initial Unidirectional Association - Java\nDESCRIPTION: This code snippet shows the initial unidirectional association between `Order` and `Customer` classes. The `Order` class has a reference to `Customer`, but the `Customer` class is unaware of any associated orders.  The `Order` class contains getter and setter methods for the `customer` field.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/change-unidirectional-association-to-bidirectional.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nclass Order {\n  // ...\n  private Customer customer;\n\n  public Customer getCustomer() {\n    return customer;\n  }\n  public void setCustomer(Customer arg) {\n    customer = arg;\n  }\n}\n\nclass Customer {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Template Method Pattern in C#\nDESCRIPTION: This snippet refactors the previous `Article` class to implement the Template Method pattern. It introduces an abstract base class `ArticleView` that defines the template method `View()`. Subclasses `ArticleMarkdown` and `ArticleHtml` provide concrete implementations for the abstract properties, defining the specific formatting rules for each output type. This pattern promotes code reuse and separates the algorithm's structure from its variations.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/form-template-method.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic class Article\n{\n  // ...\n  public string Title { get; set; }\n  public string Intro { get; set; }\n  public string Body { get; set; }\n  public string Author { get; set; }\n  public string Date { get; set; }\n\n  public string MarkdownView()\n  {\n    return new ArticleMarkdown(this).View();\n  }\n  public string HtmlView()\n  {\n    return new ArticleHtml(this).View();\n  }\n}\n\npublic abstract class ArticleView\n{\n  protected Article article;\n\n  protected abstract string Title { get; }\n  protected abstract string Intro { get; }\n  protected abstract string Body { get; }\n  protected abstract string Footer { get; }\n\n  protected ArticleView(Article article)\n  {\n    this.article = article;\n  }\n\n  public string View()\n  {\n    return Title + Intro + Body + Footer;\n  }\n}\n\npublic class ArticleMarkdown: ArticleView\n{\n  protected override string Title\n  {\n    get{ return \"# \" + article.Title + Environment.NewLine + Environment.NewLine; }\n  }\n  protected override string Intro\n  {\n    get{ return \"> \" + article.Intro + Environment.NewLine + Environment.NewLine; }\n  }\n  protected override string Body\n  {\n    get{ return article.Body + Environment.NewLine + Environment.NewLine; }\n  }\n  protected override string Footer\n  {\n    get{ return \"_Written by \" + article.Author + \" on \" + article.Date + \"_\"; }\n  }\n\n  public ArticleMarkdown(Article article): base(article)\n  {\n  }\n}\n\npublic class ArticleHtml: ArticleView\n{\n  protected override string Title\n  {\n    get{ return \"<h2>\" + article.Title + \"</h2>\" + Environment.NewLine; }\n  }\n  protected override string Intro\n  {\n    get{ return \"<blockquote>\" + article.Intro + \"</blockquote>\" + Environment.NewLine; }\n  }\n  protected override string Body\n  {\n    get{ return \"<p>\" + article.Body + \"</p>\" + Environment.NewLine; }\n  }\n  protected override string Footer\n  {\n    get{ return \"<em>Written by \" + article.Author + \" on \" + article.Date + \"</em>\"; }\n  }\n\n  public ArticleHtml(Article article): base(article)\n  {\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Returning NullCustomer Instead of null - PHP\nDESCRIPTION: Replaces returns of null with an instance of NullCustomer by using the Customer::newNull() factory method. Ensures that returned objects are always usable and support the polymorphic interface. The condition checks if $this->customer is null, returning the appropriate customer object.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/introduce-null-object.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nreturn ($this->customer == null) ? Customer::newNull() : $this->customer\n```\n\n----------------------------------------\n\nTITLE: Creating a New Gamma Class in Java\nDESCRIPTION: This snippet demonstrates the creation of a new class named `Gamma`. This is the first step in extracting the functionality from an existing method into a separate class.  The purpose is to encapsulate related logic and data.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/replace-method-with-method-object.md#_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nclass Gamma {\n}\n\n```\n\n----------------------------------------\n\nTITLE: Updating Client Code After Hide Delegate (Java)\nDESCRIPTION: Illustrates the change required in the client code after applying the 'Hide Delegate' pattern. Instead of chaining calls through the delegate (`john.getDepartment().getManager()`), the client now directly calls the new delegating method on the `Person` object (`john.getManager()`).\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/hide-delegate.md#_snippet_3\n\nLANGUAGE: java\nCODE:\n```\njohn.getManager();\n```\n\n----------------------------------------\n\nTITLE: Refactored Employee Class with Subclasses in Java\nDESCRIPTION: This code shows the refactored `Employee` class after applying the \"Replace Type Code with Subclasses\" refactoring. An abstract `Employee` class is defined. Subclasses like `Engineer`, `Salesman`, and `Manager` are created, each representing a specific employee type. The original `type` field and the `switch` statement are removed in favor of polymorphism and method overrides.  A static `create()` factory method is used to create instances of the correct subclass based on an integer type code.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/replace-type-code-with-subclasses.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nabstract class Employee {\n  // ...\n  static final int ENGINEER = 0;\n  static final int SALESMAN = 1;\n  static final int MANAGER = 2;\n\n  abstract public int getType();\n\n  public static Employee create(int type) {\n    switch (type) {\n      case ENGINEER:\n        return new Engineer();\n      case SALESMAN:\n        return new Salesman();\n      case MANAGER:\n        return new Manager();\n      default:\n        throw new RuntimeException(\"Incorrect Employee Code\");\n    }\n  }\n\n  public int monthlySalary;\n  public int payAmount() {\n    return monthlySalary;\n  }\n}\n\nclass Engineer extends Employee {\n  @Override public int getType() {\n    return Employee.ENGINEER;\n  }\n}\n\nclass Salesman extends Employee {\n  public int commission;\n  @Override public int getType() {\n    return Employee.SALESMAN;\n  }\n  @Override public int payAmount() {\n    return monthlySalary + commission;\n  }\n}\n\nclass Manager extends Employee {\n  public int bonus;\n  @Override public int getType() {\n    return Employee.MANAGER;\n  }\n  @Override public int payAmount() {\n    return monthlySalary + bonus;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Template Method Pattern to Article Rendering (After Refactoring)\nDESCRIPTION: Refactored implementation using the Template Method pattern. The common algorithm structure is extracted to an abstract ArticleView class, with specific formatting implemented in concrete subclasses for Markdown and HTML. This improves maintainability and makes adding new view formats easier.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/form-template-method.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nclass Article {\n  // ...\n  public String getTitle() { /* … */ }\n  public String getIntro() { /* … */ }\n  public String getBody() { /* … */ }\n  public String getAuthor() { /* … */ }\n  public String getDate() { /* … */ }\n\n  public String markdownView() {\n    return new ArticleMarkdown(this).view();\n  }\n  public String htmlView() {\n    return new ArticleHtml(this).view();\n  }\n}\n\nabstract class ArticleView {\n  protected Article article;\n  protected ArticleView(Article article) {\n    this.article = article;\n  }\n  protected abstract String title();\n  protected abstract String intro();\n  protected abstract String body();\n  protected abstract String footer();\n  public String view() {\n    return title() + intro() + body() + footer();\n  }\n}\n\nclass ArticleMarkdown extends ArticleView {\n  public ArticleMarkdown(Article article) {\n    super(article);\n  }\n  @Override protected String title() {\n    return \"# \" + article.getTitle() + \"\\n\\n\";\n  }\n  @Override protected String intro() {\n    return \"> \" + article.getIntro() + \"\\n\\n\";\n  }\n  @Override protected String body() {\n    return article.getBody() + \"\\n\\n\";\n  }\n  @Override protected String footer() {\n    return \"_Written by \" + article.getAuthor() + \" on \" + article.getDate() + \"_\";\n  }\n}\n\nclass ArticleHtml extends ArticleView {\n  public ArticleHtml(Article article) {\n    super(article);\n  }\n  @Override protected String title() {\n    return \"<h2>\" + article.getTitle() + \"</h2>\" + \"\\n\";\n  }\n  @Override protected String intro() {\n    return \"<blockquote>\" + article.getIntro() + \"</blockquote>\" + \"\\n\";\n  }\n  @Override protected String body() {\n    return \"<p>\" + article.getBody() + \"</p>\" + \"\\n\";\n  }\n  @Override protected String footer() {\n    return \"<em>Written by \" + article.getAuthor() + \" on \" + article.getDate() + \"</em>\";\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Gamma Method Object Refactoring (C#)\nDESCRIPTION: This snippet demonstrates the refactored code using the Replace Method with Method Object technique. The original `Gamma` method in the `Account` class is replaced with a call to a new `Gamma` class. The `Gamma` class encapsulates the original method's logic in its `Compute` method, using private fields to store the original method's parameters and local variables. The `ImportantThing` method encapsulates a section of the original Gamma calculation.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/replace-method-with-method-object.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic class Account\n{\n  // ...\n  private int Gamma(int inputVal, int quantity, int yearToDate)\n  {\n    return new Gamma(this, inputVal, quantity, yearToDate).Compute();\n  }\n  // ...\n}\n\npublic class Gamma\n{\n  private Account account;\n  private int importantValue1;\n  private int importantValue2;\n  private int importantValue3;\n  private int inputVal;\n  private int quantity;\n  private int yearToDate;\n\n  public Gamma(Account source, int inputValArg, int quantityArg, int yearToDateArg)\n  {\n    this.account = source;\n    inputVal = inputValArg;\n    quantity = quantityArg;\n    yearToDate = yearToDateArg;\n  }\n\n  public int Compute()\n  {\n    importantValue1 = (inputVal * quantity) + account.Delta();\n    importantValue2 = (inputVal * yearToDate) + 100;\n    ImportantThing();\n    importantValue3 = importantValue2 * 7;\n    // and so on…\n    return importantValue3 - 2 * importantValue1;\n  }\n\n  private void ImportantThing()\n  {\n    if ((yearToDate - importantValue1) > 100)\n    {\n      importantValue2 -= 20;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Refactored Price Calculation - Java\nDESCRIPTION: This code snippet shows the refactored version of the price calculation.  The complex expression has been broken down into three named variables: `basePrice`, `quantityDiscount`, and `shipping`. This makes the code easier to read, understand, and modify. The extracted variables improve the overall clarity of the method.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/extract-variable.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\ndouble price() {\n  final double basePrice = quantity * itemPrice;\n  final double quantityDiscount = Math.max(0, quantity - 500) * itemPrice * 0.05;\n  final double shipping = Math.min(basePrice * 0.1, 100.0);\n  return basePrice - quantityDiscount + shipping;\n}\n```\n\n----------------------------------------\n\nTITLE: Moving and Renaming the Number Property to TelephoneNumber in C#\nDESCRIPTION: Moves the `OfficeNumber` concept from the `Person` class to the `TelephoneNumber` class by adding a public `Number` property (getter and setter). Similar to `AreaCode`, it's renamed for neutrality.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/extract-class.md#_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\npublic string Number\n{\n  get;\n  set;\n}\n```\n\n----------------------------------------\n\nTITLE: Refactored Guard Class with Separate Query and Modifier Methods (PHP)\nDESCRIPTION: This snippet presents the `Guard` class after applying the 'Separate Query From Modifier' refactoring. The original `findCriminalAndAlert` method has been split into `findCriminal` (a pure query method returning the criminal's name without side effects) and `doSendAlert` (a modifier method that calls `findCriminal` and triggers `$this->sendAlert()` if a criminal is found). The `checkSecurity` method is updated to call both the modifier and the query method separately. This separation improves code clarity, testability, and maintainability by isolating concerns.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/separate-query-from-modifier.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass Guard {\n  // ...\n  public function checkSecurity($people) {\n    $this->doSendAlert($people);\n    $found = $this->findCriminal($people);\n    $this->someLaterCode($found);\n  }\n  public function doSendAlert($people) {\n    if ($this->findCriminal($people) != \"\") {\n      $this->sendAlert();\n    }\n  }\n  public function findCriminal($people) {\n    for ($i = 0; $i < count($people); $i++) {\n      if ($people[$i] == \"Don\") {\n        return \"Don\";\n      }\n      if ($people[$i] == \"John\") {\n        return \"John\";\n      }\n    }\n    return \"\";\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Refactored Implementation Using Object in C#\nDESCRIPTION: Refactored implementation that replaces the array with a dedicated Performance class. This approach provides better type safety, readable property names, and proper encapsulation of the team data.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/replace-array-with-object.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Tournament\n{\n  Performance row = new Performance();\n\n  public Tournament()\n  {\n    row.Name = \"Liverpool\";\n    row.Score = 15;\n  }\n  public void DisplayScore()\n  {\n    string name = row.Name;\n    int score = row.Score;\n    // ...\n  }\n}\n\npublic class Performance\n{\n  public string Name\n  {\n    get;\n    set;\n  }\n  public int Score\n  {\n    get;\n    set;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Step-by-step Guide to Replace Temp with Query in PHP\nDESCRIPTION: This documentation provides a detailed walkthrough of replacing temporary variables with method calls in PHP, illustrating the process using step markers and code snippets for replacing 'basePrice' and 'discountFactor', creating corresponding methods, and cleaning up the original method.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/replace-temp-with-query.md#_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Adding Account Field to Gamma Class in Java\nDESCRIPTION: This snippet adds a private and final field `account` to the `Gamma` class. This field is intended to hold a reference to the original `Account` object, which is required by the extracted functionality.  It ensures immutability and prevents modification of the reference after initialization.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/replace-method-with-method-object.md#_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n  private final Account account;\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Courses with AddRange - Java\nDESCRIPTION: This snippet replaces a loop that adds each course individually with the `AddRange` method. It improves the efficiency of initializing the courses by using the `AddRange` method of the List to add all courses at once instead of iterating the list.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/encapsulate-collection.md#_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\n    courses.AddRange(newCourses);\n```\n\n----------------------------------------\n\nTITLE: Adding Name Field and Getter to Customer Class in Java\nDESCRIPTION: Adds a private final `name` field and a public `getName()` getter method inside the `Customer` class. This step transfers the responsibility of holding the customer's name from the `Order` class to the new `Customer` object.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/replace-data-value-with-object.md#_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n  private final String name;\n\n  public String getName() {\n    return name;\n  }\n```\n\n----------------------------------------\n\nTITLE: Refactored Employee Class Using State Pattern with Polymorphism in C#\nDESCRIPTION: This snippet refactors the original type code-based Employee class into a polymorphic structure with an abstract EmployeeType class and specific subclasses for each employee type. The Employee class now delegates salary calculation to the EmployeeType instance, reducing conditionals and encapsulating type-specific behavior. Dependencies include the Employee class, EmployeeType abstract class, and its concrete subclasses.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/replace-type-code-with-state-strategy.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic class Employee\n{\n  // ...\n  private EmployeeType type;\n\n  public int EmployeeCode\n  {\n    get{ return type.EmployeeCode; }\n    set{ type = EmployeeType.Create(value); }\n  }\n  public int MonthlySalary\n  { get; set; }\n  public int Commission\n  { get; set; }\n  public int Bonus\n  { get; set; }\n\n  public Employee(int employeeCode)\n  {\n    this.type = EmployeeType.Create(employeeCode);\n  }\n\n  public int PayAmount()\n  {\n    return type.PayAmount(this);\n  }\n}\n\npublic abstract class EmployeeType\n{\n  public const int ENGINEER = 0,\n                   SALESMAN = 1,\n                   MANAGER = 2;\n\n  public abstract int EmployeeCode { get; }\n\n  public static EmployeeType Create(int code)\n  {\n    switch (code)\n    {\n      case ENGINEER:\n        return new Engineer();\n      case SALESMAN:\n        return new Salesman();\n      case MANAGER:\n        return new Manager();\n      default:\n        throw new Exception(\"Incorrect Employee Code\");\n    }\n  }\n\n  public abstract int PayAmount(Employee employee);\n}\n\npublic class Engineer : EmployeeType\n{\n  public override int EmployeeCode\n  {\n    get{ return EmployeeType.ENGINEER; }\n  }\n\n  public override int PayAmount(Employee employee)\n  {\n    return employee.MonthlySalary;\n  }\n}\n\npublic class Salesman : EmployeeType\n{\n  public override int EmployeeCode\n  {\n    get{ return EmployeeType.SALESMAN; }\n  }\n\n  public override int PayAmount(Employee employee)\n  {\n    return employee.MonthlySalary + employee.Commission;\n  }\n}\n\npublic class Manager : EmployeeType\n{\n  public override int EmployeeCode\n  {\n    get{ return EmployeeType.MANAGER; }\n  }\n\n  public override int PayAmount(Employee employee)\n  {\n    return employee.MonthlySalary + employee.Bonus;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting Subclasses ArticleMarkdown and ArticleHtml in Java\nDESCRIPTION: Introduces two subclasses — ArticleMarkdown and ArticleHtml — each extending ArticleView and encapsulating rendering logic specific to Markdown or HTML formats respectively. Constructor methods pass the Article instance to the superclass. Each subclass defines a single public method named view (renamed from markdownView and htmlView) responsible for returning the formatted string output for that format. This refactoring improves single-responsibility and allows method naming unification due to separate classes.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/form-template-method.md#_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\nclass ArticleMarkdown extends ArticleView {\n  public ArticleMarkdown(Article article) {\n    super(article);\n  }\n\n  public String markdownView() {\n    String output = \"# \" + article.getTitle() + \"\\n\\n\";\n    output += \"> \" + article.getIntro() + \"\\n\\n\";\n    output += article.getBody() + \"\\n\\n\";\n    output += \"_Written by \" + article.getAuthor() + \" on \" + article.getDate() + \"_\";\n    return output;\n  }\n}\n```\n\nLANGUAGE: Java\nCODE:\n```\nclass ArticleHtml extends ArticleView {\n  public ArticleHtml(Article article) {\n    super(article);\n  }\n\n  public String htmlView() {\n    String output = \"<h2>\" + article.getTitle() + \"</h2>\" + \"\\n\";\n    output += \"<blockquote>\" + article.getIntro() + \"</blockquote>\" + \"\\n\";\n    output += \"<p>\" + article.getBody() + \"</p>\" + \"\\n\";\n    output += \"<em>Written by \" + article.getAuthor() + \" on \" + article.getDate() + \"</em>\";\n    return output;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: IBillable Interface - C#\nDESCRIPTION: This snippet presents the extracted IBillable interface. It declares the Rate property and HasSpecialSkill() method, which are essential for calculating charges in the TimeSheet class. Classes implementing this interface must provide implementations for these members, promoting a consistent interface for billable entities. No external dependencies are required.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/extract-interface.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface IBillable\n{\n  int Rate { get; }\n  bool HasSpecialSkill();\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Employee Pay with Conditional Logic (Before) - C#\nDESCRIPTION: Initial code showing an Employee class with a PayAmount method that uses a switch statement to calculate pay based on an EmployeeCode. The EmployeeType hierarchy is primarily used to define the code values. This structure requires modifying the switch statement whenever a new employee type is added.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/replace-conditional-with-polymorphism.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class Employee\n{\n  // ...\n  private EmployeeType type;\n\n  public int EmployeeCode\n  {\n    get{ return type.EmployeeCode; }\n  }\n  public int MonthlySalary\n  { get; set; }\n  public int Commission\n  { get; set; }\n  public int Bonus\n  { get; set; }\n\n  public int PayAmount()\n  {\n    switch (this.EmployeeCode)\n    {\n      case EmployeeType.ENGINEER:\n        return MonthlySalary;\n      case EmployeeType.SALESMAN:\n        return MonthlySalary + Commission;\n      case EmployeeType.MANAGER:\n        return MonthlySalary + Bonus;\n      default:\n        throw new Exception(\"Incorrect Employee Code\");\n    }\n  }\n}\n\npublic abstract class EmployeeType\n{\n  public const int ENGINEER = 0,\n                   SALESMAN = 1,\n                   MANAGER = 2;\n\n  public abstract int EmployeeCode\n  { get; }\n\n  public static EmployeeType Create(int code)\n  {\n    switch (code)\n    {\n      case ENGINEER:\n        return new Engineer();\n      case SALESMAN:\n        return new Salesman();\n      case MANAGER:\n        return new Manager();\n      default:\n        throw new Exception(\"Incorrect Employee Code\");\n    }\n  }\n}\n\npublic class Engineer: EmployeeType\n{\n  public override int EmployeeCode\n  {\n    get{ return EmployeeType.ENGINEER; }\n  }\n}\n\npublic class Salesman: EmployeeType\n{\n  public override int EmployeeCode\n  {\n    get{ return EmployeeType.SALESMAN; }\n  }\n}\n\npublic class Manager: EmployeeType\n{\n  public override int EmployeeCode\n  {\n    get{ return EmployeeType.MANAGER; }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Total Course Count Externally (Before Refactoring)\nDESCRIPTION: This C# snippet shows accessing the `Count` property of the `Person` object's (`kent`) `Courses` collection directly from external code. This direct access is targeted for encapsulation.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/encapsulate-collection.md#_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\nkent.Courses.Count\n```\n\n----------------------------------------\n\nTITLE: Refactored Order Class Using Method Calls Instead of Parameters (C#)\nDESCRIPTION: This C# code demonstrates the `Order` class after applying the 'Replace Parameter with Method Call' refactoring. The original parameters (`basePrice`, `discountLevel`) of the `DiscountedPrice` method have been replaced by calls to new private helper methods, `GetBasePrice()` and `GetDiscountLevel()`. These methods encapsulate the calculation logic, making `DiscountedPrice` parameterless and improving cohesion. The `GetPrice` method is simplified to just call `DiscountedPrice()`.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/replace-parameter-with-method-call.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Order\n{\n  // ...\n  public double GetPrice()\n  {\n    return DiscountedPrice();\n  }\n  private double DiscountedPrice()\n  {\n    if (GetDiscountLevel() == 2)\n      return GetBasePrice() * 0.1;\n    else\n      return GetBasePrice() * 0.05;\n  }\n  private int GetDiscountLevel()\n  {\n    if (Quantity > 100)\n      return 2;\n    else\n      return 1;\n  }\n  private double GetBasePrice()\n  {\n    return Quantity * ItemPrice;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Customer and Order Classes with Reference Storage and Factory Access\nDESCRIPTION: This snippet refactors the previous design by introducing a Customer registry that loads and stores customer instances in a static dictionary. Order objects now obtain Customer references via a static getNamed() method, centralizing object access and movement away from direct constructor usage. This improves reusability and reduces object duplication, with client code remaining focused on collection iteration.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/change-value-to-reference.md#_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nclass Customer {\n  private static Dictionary instances = new Hashtable();\n\n  // This code should be executed at the program launch.\n  static void loadCustomers() {\n    new Customer(\"Lemon Car Hire\").store();\n    new Customer(\"Associated Coffee Machines\").store();\n    new Customer(\"Bilston Gasworks\").store();\n  }\n  private void store() {\n    instances.put(this.getName(), this);\n  }\n\n  private final String name;\n  public static Customer getNamed(String name) {\n    return (Customer) instances.get(name);\n  }\n  private Customer(String name) {\n    this.name = name;\n  }\n  public String getName() {\n    return name;\n  }\n}\n\nclass Order {\n  //…\n  private Customer customer;\n  public String getCustomerName() {\n      return customer.getName();\n  }\n  public void setCustomer(String customerName) {\n    customer = Customer.getNamed(customerName);\n  }\n  public Order(String customerName) {\n    customer = Customer.getNamed(customerName);\n  }\n}\n\n// Some client code, which uses Order class.\nprivate static int numberOfOrdersFor(Collection orders, String customer) {\n  int result = 0;\n  Iterator iter = orders.iterator();\n  while (iter.hasNext()) {\n    Order each = (Order) iter.next();\n    if (each.getCustomerName().equals(customer)) {\n      result++;\n    }\n  }\n  return result;\n}\n```\n\n----------------------------------------\n\nTITLE: Refactored Class Structure with Interface - C#\nDESCRIPTION: This snippet demonstrates the refactored class structure after applying the Extract Interface refactoring. The IBillable interface is extracted from the Employee class, defining the Rate and HasSpecialSkill() members. The TimeSheet class now depends on the IBillable interface instead of the concrete Employee class, and the Employee class now implements the IBillable interface, leading to looser coupling. Input is IBillable interface usage in TimeSheet and output is the decoupling of TimeSheet from Employee class.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/extract-interface.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class TimeSheet\n{\n  // ...\n  public double Charge(IBillable employee, int days)\n  {\n    double baseAmount = employee.Rate * days;\n\n\treturn employee.HasSpecialSkill() ? baseAmount * 1.05 : baseAmount;\n  }\n}\n\npublic interface IBillable\n{\n  int Rate { get; }\n  bool HasSpecialSkill();\n}\n\npublic class Employee: IBillable\n{\n  // ...\n  public int Rate \n  { get; private set; }\n    // ...\n  public bool HasSpecialSkill()\n  {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Refactored PHP Function After Consolidating Conditionals\nDESCRIPTION: This is the refactored version of `sendEmailPromotion` after applying the \"Consolidate Duplicate Conditional Fragments\" technique. The duplicate calls to `validateEmailAddress($email)` (moved before the conditional) and `sendEmail(formatEmail($text, $total))` (moved after the conditional) have been extracted from the `if`/`else` block, simplifying the logic and improving code maintainability. The conditional block now only contains the logic specific to each branch (calculating `$total`).\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/consolidate-duplicate-conditional-fragments.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfunction sendEmailPromotion($email, $text) {\n  // ...\n  validateEmailAddress($email);\n  if (isSpecialDeal()) {\n    $total = $price * 0.95;\n  }\n  else {\n    $total = $price * 0.98;\n  }\n  sendEmail(formatEmail($text, $total));\n}\n```\n\n----------------------------------------\n\nTITLE: Calling Corrected `getOutstanding` and Assigning Result (Java)\nDESCRIPTION: This snippet demonstrates the correct way to call the refactored `getOutstanding` method from within `printOwing`. The returned `double` value (the calculated total) is assigned back to the local `outstanding` variable in `printOwing`, allowing it to be used in subsequent calls like `printDetails(outstanding)`.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/extract-method.md#_snippet_14\n\nLANGUAGE: Java\nCODE:\n```\ndouble outstanding = getOutstanding();\n```\n\n----------------------------------------\n\nTITLE: Refactored Code Snippet in C#\nDESCRIPTION: This snippet shows the refactored code after implementing the Null Object pattern. The null check is removed, simplifying the code and eliminating the risk of null pointer exceptions. It directly calls the GetHistory().WeeksDelinquentInLastYear, assuming the null-object will be handled internally by the implementation of GetHistory method.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/introduce-null-object.md#_snippet_14\n\nLANGUAGE: C#\nCODE:\n```\nint weeksDelinquent = customer.GetHistory().WeeksDelinquentInLastYear;\n```\n\n----------------------------------------\n\nTITLE: Corrected `getOutstanding` Method Returning Value (Java)\nDESCRIPTION: This shows the corrected `getOutstanding` method. The return type is changed from `void` to `double`, and it now includes a `return outstanding;` statement, making the calculated result available to the calling method. It still assumes `orders` is accessible.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/extract-method.md#_snippet_13\n\nLANGUAGE: Java\nCODE:\n```\ndouble getOutstanding() {\n  Enumeration elements = orders.elements();\n  double outstanding = 0.0;\n  while (elements.hasMoreElements()) {\n    Order each = (Order) elements.nextElement();\n    outstanding += each.getAmount();\n  }\n\n  return outstanding;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Manager PayAmount PHP\nDESCRIPTION: This code implements the `payAmount` method specifically for the `Manager` class. It calculates the pay, considering the monthly salary and bonus relevant for managers. It provides a class-specific implementation of the inherited method.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/replace-type-code-with-subclasses.md#_snippet_17\n\nLANGUAGE: PHP\nCODE:\n```\n  public function payAmount() {\n    return $this->monthlySalary + $this->bonus;\n  }\n```\n\n----------------------------------------\n\nTITLE: Moving 'name' Field to Superclass\nDESCRIPTION: Extracts the 'name' field from subclasses and moves it to the 'Party' superclass to avoid redundancy. Access modifiers may be adjusted to 'protected' for subclass access.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/extract-superclass.md#_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\nprotected String name;\n```\n\n----------------------------------------\n\nTITLE: Guard Clauses: Get Pay Amount (After) in Java\nDESCRIPTION: This code demonstrates the use of guard clauses to simplify the conditional logic for determining the pay amount. Each condition (`isDead`, `isSeparated`, `isRetired`) is checked, and if true, the corresponding amount is returned immediately, avoiding nested `if-else` statements.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/replace-nested-conditional-with-guard-clauses.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nclass Payout {\n  // ...\n  double getPayAmount() {\n    if (isDead) {\n      return deadAmount();\n    }\n    if (isSeparated) {\n      return separatedAmount();\n    }\n    if (isRetired) {\n      return retiredAmount();\n    }\n    return normalPayAmount();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating AreaCode Usage in GetTelephoneNumber Method (C#)\nDESCRIPTION: Modifies the `GetTelephoneNumber` method within the `Person` class to access the moved `AreaCode` property via the `officeTelephone` instance. This reflects the change after moving the field.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/extract-class.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nofficeTelephone.AreaCode\n```\n\n----------------------------------------\n\nTITLE: Before Refactoring: Employee Class with Type Code (C#)\nDESCRIPTION: This snippet shows the initial state of the Employee class before refactoring. Employee types are represented by integer constants and stored in a 'type' field. Behavior specific to each type is handled using a switch statement within the 'PayAmount' method.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/replace-type-code-with-subclasses.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class Employee\n{\n  // ...\n  public const int ENGINEER = 0,\n                   SALESMAN = 1,\n                   MANAGER = 2;\n\n  public int type;\n\n  public int MonthlySalary\n  { get; set; }\n  public int Commission\n  { get; set; }\n  public int Bonus\n  { get; set; }\n\n  public Employee(int type)\n  {\n    this.type = type;\n  }\n\n  public int PayAmount()\n  {\n    switch (type)\n    {\n      case ENGINEER:\n        return MonthlySalary;\n      case SALESMAN:\n        return MonthlySalary + Commission;\n      case MANAGER:\n        return MonthlySalary + Bonus;\n      default:\n        throw new Exception(\"Incorrect Employee Code\");\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Abstract Superclass and Inheritance (PHP)\nDESCRIPTION: Initial step of the 'Extract Superclass' refactoring. Creates a new abstract class 'Party' and modifies the existing 'Employee' and 'Department' classes to inherit from it.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/extract-superclass.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nabstract class Party {\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nclass Employee extends Party\n{\n  // ... existing Employee code\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nclass Department extends Party\n{\n  // ... existing Department code\n}\n```\n\n----------------------------------------\n\nTITLE: Refactoring Salary Adjustments with Parameterized Method - C#\nDESCRIPTION: This code demonstrates the refactored Employee class in C#, introducing a Raise method that takes a double factor as a parameter to apply salary adjustments generically. The PromoteToManager method now delegates to Raise with a 0.5 factor, and salary increases elsewhere can use Raise with specific coefficients. This eliminates duplication and makes the code more maintainable and extensible. The snippet requires no external dependencies and presumes internal class fields such as Salary and type.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/parameterize-method.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic class Employee\n{\n  // ...\n  public void PromoteToManager()\n  {\n    type = Employee.MANAGER;\n    Raise(0.5);\n  }\n  public void Raise(double factor)\n  {\n    Salary *= (1 + factor);\n  }\n}\n\n// Somewhere in client code\nif (employee.YearsOfExperience > 5)\n{\n  if (employee.Clients.Count > 10)\n    employee.PromoteToManager();\n  else\n    employee.Raise(0.05);\n}\n```\n\n----------------------------------------\n\nTITLE: Refactored Classes After Extract Class in PHP\nDESCRIPTION: Refactored code with telephone functionality moved to a dedicated TelephoneNumber class. The Person class now delegates telephone-related operations to the TelephoneNumber instance, demonstrating proper separation of concerns.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/extract-class.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass Person {\n  private $name;\n  private $officeTelephone; // TelephoneNumber\n  \n  public function __construct() {\n    $this->officeTelephone = new TelephoneNumber();\n  }\n  \n  public function getName() {\n    return $this->name;\n  }\n  public function getOfficeTelephone() {\n    return $this->officeTelephone;\n  }\n  public function getTelephoneNumber() {\n    return $this->officeTelephone->getTelephoneNumber();\n  }\n}\n\nclass TelephoneNumber {\n  private $areaCode;\n  private $number;\n\n  public function getAreaCode() {\n    return $this->areaCode;\n  }\n  public function setAreaCode($arg) {\n    $this->areaCode = $arg;\n  }\n  public function getNumber() {\n    return $this->number;\n  }\n  public function setNumber($arg) {\n    $this->number = $arg;\n  }\n  public function getTelephoneNumber() {\n    return (\"(\" . $this->areaCode . \") \" . $this->number);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Making payAmount Abstract in EmployeeType Base Class in PHP\nDESCRIPTION: Replaces the conditional payAmount implementation in the EmployeeType class with an abstract method declaration. All subclasses must provide their own payAmount logic. This enforces strict subtype responsibility for payroll calculation and removes dependency on type codes.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/replace-type-code-with-state-strategy.md#_snippet_11\n\nLANGUAGE: PHP\nCODE:\n```\n  abstract public function payAmount(Employee $employee);\n```\n\n----------------------------------------\n\nTITLE: Refactoring with Null Object Pattern in PHP to Eliminate Null Checks\nDESCRIPTION: This PHP snippet refactors the initial code to implement the Null Object pattern. The Company class's getCustomer method returns a NullCustomer instance if the customer is null. Both Customer and PaymentHistory define isNull() methods identifying real and null objects. NullCustomer and NullPaymentHistory override behavior to return default values instead of null, such as \"N/A\" or zero, eliminating the need for null checks in client code. This approach leverages polymorphism to simplify and secure code by removing conditional statements checking for null.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/introduce-null-object.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nclass Company {\n  //…\n  private $customer; // Customer\n  public function getCustomer() {\n    return ($this->customer == null) ? Customer::newNull() : $this->customer;\n  }\n}\n\nclass Customer {\n  //…\n  public function isNull() {\n    return false;\n  }\n  static function newNull() {\n    return new NullCustomer();\n  }\n\n  public function getName() {\n    //…\n  }\n  public function getPlan() {\n    //…\n  }\n  public function getHistory() {\n    //…\n  }\n}\nclass NullCustomer extends Customer {\n  public function isNull() {\n    return true;\n  }\n  public function getName() {\n    return \"N/A\";\n  }\n  public function getPlan() {\n    return BillingPlan::basic();\n  }\n  public function getHistory() {\n    return PaymentHistory::newNull();\n  }\n}\n\nclass PaymentHistory {\n  public function isNull() {\n    return false;\n  }\n  public static function newNull() {\n    return new NullPaymentHistory();\n  }\n\n  public function getWeeksDelinquentInLastYear() {\n    //…\n  }\n}\nclass NullPaymentHistory extends PaymentHistory {\n  public function isNull() {\n    return true;\n  }\n  public function getWeeksDelinquentInLastYear() {\n    return 0;\n  }\n}\n\n// Somewhere in client code\n$customer = $site->getCustomer();\n$customerName = $customer->getName();\n\n//…\n$plan = $customer->getPlan();\n\n//…\n$weeksDelinquent = $customer->getHistory()->getWeeksDelinquentInLastYear();\n```\n\n----------------------------------------\n\nTITLE: Extracting Abstract Superclass Party in PHP\nDESCRIPTION: This snippet demonstrates how to factor common properties and methods from Employee and Department into a new abstract superclass called Party in PHP. Party contains the shared name field and abstract methods for cost and headcount; subclasses Employee and Department implement these as needed. Dependencies include PHP's inheritance model, and all classes expect constructor arguments corresponding to their fields. This approach reduces duplication, increases flexibility, and allows for uniform type handling. All members are designed for extensibility and require that subclasses properly implement the abstract methods.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/extract-superclass.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nabstract class Party {\n  protected $name;\n\n  protected function __construct($name) {\n    $this->name = $name;\n  }\n  public function getName() {\n    return $this->name;\n  }\n  public abstract function getAnnualCost();\n  public abstract function getHeadCount();\n}\n\nclass Employee extends Party {\n  private $annualCost;\n  private $id;\n\n  public function __construct($name, $id, $annualCost) {\n    parent::__construct($name);\n    $this->id = $id;\n    $this->annualCost = $annualCost;\n  }\n  public function getAnnualCost() {\n    return $this->annualCost;\n  }\n  public function getId() {\n    return $this->id;\n  }\n  public function getHeadCount() {\n    return 1;\n  }\n}\n\nclass Department extends Party {\n  private $items = array();\n\n  public function __construct($name) {\n    parent::__construct($name);\n  }\n  public function getAnnualCost() {\n    $result = 0;\n    foreach ($this->items as $each) {\n      $result += $each->getAnnualCost();\n    }\n    return $result;\n  }\n  public function getHeadCount() {\n    $headCount = 0;\n    foreach ($this->items as $each) {\n      $headCount += $each->getHeadCount();\n    }\n    return $headCount;\n  }\n  public function getItems() {\n    return $this->items;\n  }\n  public function addItem(Party $arg) {\n    $this->items[] = $arg;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Refactored Separate Query and Modifier Methods in Java\nDESCRIPTION: This snippet refactors the original class by separating the query and modifier into distinct methods. The findCriminal method is a pure query returning the criminal's name without side effects. The doSendAlert method acts as a modifier, calling findCriminal and sending an alert if a criminal is found. The checkSecurity method calls doSendAlert first, then uses findCriminal's result for further processing. This separation clarifies responsibilities and prevents unintended alert sending when only querying.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/separate-query-from-modifier.md#_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nclass Guard {\n  // ...\n  public void checkSecurity(String[] people) {\n    doSendAlert(people);\n    String found = findCriminal(people);\n    someLaterCode(found);\n  }\n  public void doSendAlert(String[] people) {\n    if (findCriminal(people) != \"\") {\n      sendAlert();\n    }\n  }\n  public String findCriminal(String[] people) {\n    for (int i = 0; i < people.length; i++) {\n      if (people[i].equals (\"Don\")) {\n        return \"Don\";\n      }\n      if (people[i].equals (\"John\")) {\n        return \"John\";\n      }\n    }\n    return \"\";\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Refactored Customer Billing System with Null Object Pattern in C#\nDESCRIPTION: This code demonstrates the implementation of the Null Object Pattern in C# by creating Null subclasses for Customer and PaymentHistory. It replaces null checks with polymorphic method calls via IsNull properties and Null class instances, promoting safer and cleaner code.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/introduce-null-object.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class Company\n{\n  //…\n  private Customer customer;\n  \n  public Customer Customer\n  {\n    get{ return customer ?? Customer.NewNull(); }\n  }\n}\n\npublic class Customer\n{\n  public virtual bool IsNull\n  {\n    get{ return false; }\n  }\n  public virtual string Name {\n    //…\n  }\n\n  public static Customer NewNull()\n  {\n    return new NullCustomer();\n  }\n  public virtual BillingPlan GetPlan() {\n    //…\n  }\n  public virtual PaymentHistory GetHistory() {\n    //…\n  }\n}\npublic class NullCustomer: Customer\n{\n  public override bool IsNull\n  {\n    get{ return true; }\n  }\n  public override string Name\n  {\n    get{ return \"N/A\"; }\n  }\n\n  public override BillingPlan GetPlan()\n  {\n    return BillingPlan.Basic();\n  }\n  public override PaymentHistory GetHistory()\n  {\n    return PaymentHistory.NewNull();\n  }\n}\n\npublic class PaymentHistory\n{\n  public virtual bool IsNull\n  {\n    get{ return false; }\n  }\n  public virtual int WeeksDelinquentInLastYear {\n    //…\n  }\n\n  public static PaymentHistory NewNull()\n  {\n    return new NullPaymentHistory();\n  }\n}\npublic class NullPaymentHistory: PaymentHistory\n{\n  public override bool IsNull\n  {\n    get{ return true; }\n  }\n  public override int WeeksDelinquentInLastYear\n  {\n    get{ return 0; }\n  }\n}\n\n// Somewhere in client code\nCustomer customer = site.Customer;\nstring customerName = customer.Name;\n\n//…\nBillingPlan plan = customer.GetPlan();\n\n//…\nint weeksDelinquent = customer.GetHistory().WeeksDelinquentInLastYear;\n```\n\n----------------------------------------\n\nTITLE: Removing Middle Man by Exposing Delegate Property in C#\nDESCRIPTION: This snippet refactors the Person class to remove the GetManager() delegating method. Instead, it introduces a public property Department that exposes the private department instance. Client code is modified to access manager via john.Department.Manager, directly using the delegate object. This reduces the number of simple delegate methods in Person and improves code clarity and maintainability. Dependencies remain the same. Inputs and outputs are equivalent to the previous snippet but accessed differently.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/remove-middle-man.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Person\n{\n  private Department department;\n\n  public Department Department\n  {\n    get {\n      return department;\n    }\n  }\n}\n\npublic class Department\n{\n  private string chargeCode;\n\n  public Person Manager\n  {\n    get;\n  }\n\n  public Department(Person manager)\n  {\n    this.Manager = manager;\n  }\n\n  //…\n}\n\n// Somewhere in client code\nmanager = john.Department.Manager;\n```\n\n----------------------------------------\n\nTITLE: Before Refactoring: Duplicated View Logic in PHP\nDESCRIPTION: This snippet shows an initial `Article` class with two separate methods, `markdownView` and `htmlView`, that contain duplicated logic and structure for rendering article content in different formats. The core steps (getting title, intro, body, author, date) are the same, but the formatting syntax (Markdown vs. HTML) differs within each method.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/form-template-method.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass Article {\n  // ...\n  public function getTitle() { /* … */ }\n  public function getIntro() { /* … */ }\n  public function getBody() { /* … */ }\n  public function getAuthor() { /* … */ }\n  public function getDate() { /* … */ }\n\n  public function markdownView() {\n    $output = \"# \" . $this->getTitle() . \"\\n\\n\";\n    $output .= \"> \" . $this->getIntro() . \"\\n\\n\";\n    $output .= $this->getBody() . \"\\n\\n\";\n    $output .= \"_Written by \" . $this->getAuthor() . \" on \" . date(\"m/d/Y\", $this->getDate()) . \"_\";\n    return $output;\n  }\n  public function htmlView() {\n    $output = \"<h2>\" . $this->getTitle() . \"<\\/h2>\" . \"\\n\";\n    $output .= \"<blockquote>\" . $this->getIntro() . \"<\\/blockquote>\" . \"\\n\";\n    $output .= \"<p>\" . $this->getBody() . \"<\\/p>\" . \"\\n\";\n    $output .= \"<em>Written by \" . $this->getAuthor() . \" on \" . date(\"m/d/Y\", $this->getDate()) . \"<\\/em>\";\n    return $output;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining and Using a Foreign Method in Java Client Class\nDESCRIPTION: This Java code snippet defines a foreign method, nextWeek, inside the Account class to calculate a date one week from a given argument. The method, intended for the Date class, is invoked in schedulePayment to determine payment dates. This design requires Account to know internal workings of Date and is a candidate for refactoring; creates tight coupling and scattered utility code.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/introduce-local-extension.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nclass Account {\n  // ...\n  double schedulePayment() {\n    Date paymentDate = nextWeek(previousDate);\n\n    // Issue a payment using paymentDate.\n    // ...\n  }\n\n  /**\n   * Foreign method. Should be on Date class.\n   */\n  private static Date nextWeek(Date arg) {\n    return new Date(arg.getYear(), arg.getMonth(), arg.getDate() + 7);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding the Parameterized Raise Method (Java)\nDESCRIPTION: This snippet shows the definition of the new parameterized `raise(double factor)` method added during the refactoring process. It takes a `factor` (representing the percentage increase, e.g., 0.05 for 5%) and updates the `salary` accordingly.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/parameterize-method.md#_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\n  public void raise(double factor) {\n    salary *= (1 + factor);\n  }\n```\n\n----------------------------------------\n\nTITLE: Refactored Implementation with Move Method in PHP\nDESCRIPTION: The refactored code where the overdraftCharge method has been moved to the AccountType class where it logically belongs. The Account class now delegates the calculation to AccountType, requiring a getter method for daysOverdrawn to be implemented.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/move-method.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass Account {\n  // ...\n  private $type; // AccountType\n  private $daysOverdrawn;\n\n  public function bankCharge() {\n    $result = 4.5;\n    if ($this->daysOverdrawn > 0) {\n      $result += $this->type->overdraftCharge($this);\n    }\n    return $result;\n  }\n}\n\nclass AccountType {\n  // ...\n  public function overdraftCharge(Account $account) {\n    if ($this->isPremium()) {\n      $result = 10;\n      if ($account->getDaysOverdrawn() > 7) {\n        $result += ($account->getDaysOverdrawn() - 7) * 0.85;\n      }\n      return $result;\n    }\n    else {\n      return $account->getDaysOverdrawn() * 1.75;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Account Flow Using DateRange Parameter Object in PHP (After Refactoring)\nDESCRIPTION: This PHP snippet demonstrates the 'Introduce Parameter Object' refactoring. The `Account::getFlowBetween` method now accepts a single `DateRange` object instead of separate start and end dates. The newly created `DateRange` class encapsulates the start and end `DateTime` objects and includes logic (`includes` method) to check if a given date falls within the range. This simplifies the `getFlowBetween` signature and improves code organization.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/introduce-parameter-object.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass Account {\n  // ...\n  private $transactions = array();\n\n  public function getFlowBetween(DateRange $range) {\n    $result = 0;\n    foreach ($this->transactions as $transaction) {\n      if ($range->includes($transaction->getDate())) {\n        $result += $transaction->getValue();\n      }\n    }\n    return $result;\n  }\n}\n\nclass Transaction {\n  private $chargeDate; // DateTime\n  private $value;\n\n  public function __construct($value, DateTime $chargeDate) {\n    $this->value = $value;\n    $this->chargeDate = $chargeDate;\n  }\n  public function getDate() {\n    return $this->chargeDate;\n  }\n  public function getValue() {\n    return $this->value;\n  }\n}\n\nclass DateRange {\n  private $start; // DateTime\n  private $end; // DateTime\n\n  public function __construct(DateTime $start, DateTime $end) {\n    $this->start = $start;\n    $this->end = $end;\n  }\n  public function getStart() {\n    return $this->start;\n  }\n  public function getEnd() {\n    return $this->end;\n  }\n  public function includes(DateTime $arg) {\n    return ($arg >= $this->start && $arg <= $this->end);\n  }\n}\n\n// Somewhere in client code…\n$flow = $account->getFlowBetween(new DateRange($startDate, $endDate));\n```\n\n----------------------------------------\n\nTITLE: Refactoring setCourses Method to Use Add Operations in Java\nDESCRIPTION: Rewrites the body of the setCourses setter in the Person class to add elements individually instead of directly assigning the collection. This approach assumes the courses collection is initially empty and uses the addCourse method to preserve encapsulation and trigger any side effects. Inputs are an iterable collection of Course objects 'arg'; output is the updated internal collection state. The method uses assertions and iteration to ensure correct modification and maintain encapsulation.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/encapsulate-collection.md#_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\n    Assert.isTrue(courses.isEmpty());\n    Iterator iter = arg.iterator();\n    while (iter.hasNext()) {\n      addCourse((Course) iter.next());\n    }\n```\n\n----------------------------------------\n\nTITLE: Extracted Interface and Modified Classes\nDESCRIPTION: This code shows the `Billable` interface and the modified `TimeSheet` and `Employee` classes after the Extract Interface refactoring. The `TimeSheet` class now depends on the `Billable` interface instead of the `Employee` class directly.  The `Employee` class now implements the `Billable` interface.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/extract-interface.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nclass TimeSheet {\n  // ...\n  public double charge(Billable employee, int days) {\n    double base = employee.getRate() * days;\n    if (employee.hasSpecialSkill()) {\n      return base * 1.05;\n    }\n    else {\n      return base;\n    }\n  }\n}\n\ninterface Billable {\n  public int getRate();\n  public boolean hasSpecialSkill();\n}\n\nclass Employee implements Billable {\n  // ...\n  @Override public int getRate() {\n    // ...\n  }\n  @Override public boolean hasSpecialSkill() {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Billable Interface Definition\nDESCRIPTION: This code defines the `Billable` interface, which contains the `getRate()` and `hasSpecialSkill()` methods. This interface allows the `TimeSheet` class to interact with any object that can provide a rate and indicate whether it has special skills. It improves loose coupling.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/extract-interface.md#_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n\ninterface Billable {\n  public int getRate();\n  public boolean hasSpecialSkill();\n}\n\n```\n\n----------------------------------------\n\nTITLE: Returning an Unmodifiable View of Courses in Java Getter\nDESCRIPTION: Modifies the getter method for the courses collection to return a read-only unmodifiable set using Collections.unmodifiableSet. This prevents clients from modifying the internal collection directly, ensuring the collection is fully encapsulated. It returns an immutable view reflecting the current courses state without allowing modifications.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/encapsulate-collection.md#_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\nCollections.unmodifiableSet(courses)\n```\n\n----------------------------------------\n\nTITLE: Introducing Abstract Methods in ArticleView Superclass in Java\nDESCRIPTION: Refactors the ArticleView abstract superclass to declare protected abstract methods for title, intro, body, and footer parts of the article. This enforces that subclasses must implement these parts, enabling uniform interface and eliminating duplication. The constructor visibility changes to protected for inheritance. This approach better organizes shared structure and separate formatting logic in subclasses while promoting code reuse and scalability.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/form-template-method.md#_snippet_7\n\nLANGUAGE: Java\nCODE:\n```\nprotected abstract String title();\nprotected abstract String intro();\nprotected abstract String body();\nprotected abstract String footer();\n```\n\n----------------------------------------\n\nTITLE: Refactoring Total Course Count Retrieval in PHP\nDESCRIPTION: This example shows the refactoring step for retrieving the total course count. The initial, less encapsulated approach `$kent->getCourses()->count()` (getting the collection and then counting) is replaced by a direct call to the newly created, more readable method `$kent->numberOfCourses()`.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/encapsulate-collection.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$kent->getCourses()->count()\n```\n\nLANGUAGE: php\nCODE:\n```\n$kent->numberOfCourses()\n```\n\n----------------------------------------\n\nTITLE: Defining EmployeeType abstract class (Java)\nDESCRIPTION: Declares an abstract class for employee type states containing an abstract method to return the type code, serving as the base for specific employee type subclasses.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/replace-type-code-with-state-strategy.md#_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\nabstract class EmployeeType {\n  abstract public int getTypeCode();\n}\n```\n\n----------------------------------------\n\nTITLE: C# Account Withdrawal Using Exceptions (After Refactoring)\nDESCRIPTION: Demonstrates the refactored `Account` class where the `Withdraw` method now returns `void` and throws a custom `BalanceException` when the withdrawal amount exceeds the balance. Client code is updated to use a `try`/`catch` block to handle this exception.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/replace-error-code-with-exception.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Account\n{\n  // ...\n  private int balance;\n\n  ///<exception cref=\"BalanceException\">Thrown when amount > balance</exception>\n  public void Withdraw(int amount)\n  {\n    if (amount > balance)\n    {\n      throw new BalanceException();\n    }\n    balance -= amount;\n  }\n}\npublic class BalanceException: Exception {}\n\n// Somewhere in client code.\ntry\n{\n  account.Withdraw(amount);\n  DoTheUsualThing();\n}\ncatch (BalanceException e)\n{\n  HandleOverdrawn();\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding getPlan in NullCustomer to Provide Default Billing Plan in Java\nDESCRIPTION: Overrides getPlan() in NullCustomer to return a default basic BillingPlan, thus encapsulating default billing behavior within the null-object and removing the need for null checks in client code.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/introduce-null-object.md#_snippet_9\n\nLANGUAGE: Java\nCODE:\n```\n\n  @Override public BillingPlan getPlan() {\n    return BillingPlan.basic();\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Initial Java Method Returning Error Code and Client Check\nDESCRIPTION: This snippet shows a Java method in a class 'Account' that returns an integer error code when attempting to withdraw money, with client code checking for a specific error code (-1) to handle errors. It demonstrates the initial approach before refactoring to exceptions.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/replace-error-code-with-exception.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nclass Account {\n  // ...\n  private int balance;\n\n  public int withdraw(int amount) {\n    if (amount > balance) {\n      return -1;\n    }\n    else {\n      balance -= amount;\n      return 0;\n    }\n  }\n}\n\n// Somewhere in client code.\nif (account.withdraw(amount) == -1) {\n  handleOverdrawn();\n}\nelse {\n  doTheUsualThing();\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Distance Traveled After Refactoring (Java)\nDESCRIPTION: This refactored Java method calculates the distance traveled, improving clarity by splitting the temporary variable `acc` into `primaryAcceleration` and `secondaryAcceleration`. Each new `final` variable represents a distinct acceleration value, making the code easier to understand and maintain by ensuring each variable is assigned only once.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/split-temporary-variable.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic double getDistanceTravelled(int time) {\n  double result;\n  final double primaryAcceleration = primaryForce / mass;\n  int primaryTime = Math.min(time, delay);\n  result = 0.5 * primaryAcceleration * primaryTime * primaryTime;\n\n  int secondaryTime = time - delay;\n  if (secondaryTime > 0) {\n    double primaryVel = primaryAcceleration * delay;\n    final double secondaryAcceleration = (primaryForce + secondaryForce) / mass;\n    result +=  primaryVel * secondaryTime + 0.5 * secondaryAcceleration * secondaryTime * secondaryTime;\n  }\n  return result;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Getters and Setters to Self-Encapsulate Fields in Java\nDESCRIPTION: This snippet extends the IntRange class by adding getter and setter methods for the private fields low and high. It replaces all internal direct field accesses in the includes and grow methods with calls to these accessor methods, thus achieving self-encapsulation. The constructor still assigns fields directly to preserve initialization semantics, acknowledging common design considerations.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/self-encapsulate-field.md#_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nclass IntRange {\n  private int low, high;\n\n  int getLow() {\n    return low;\n  }\n  int getHigh() {\n    return high;\n  }\n  void setLow(int arg) {\n    low = arg;\n  }\n  void setHigh(int arg) {\n    high = arg;\n  }\n  public boolean includes(int arg) {\n    return arg >= getLow() && arg <= getHigh();\n  }\n  public void grow(int factor) {\n    setHigh(getHigh() * factor);\n  }\n  public IntRange(int low, int high) {\n    this.low = low;\n    this.high = high;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Transaction Flow Using a DateRange Parameter Object (After Refactoring) in Java\nDESCRIPTION: This snippet demonstrates the result of applying the 'Introduce Parameter Object' refactoring. The `start` and `end` Date parameters in `Account.getFlowBetween` are replaced by a single `DateRange` object. A new immutable `DateRange` class is introduced to encapsulate the start and end dates and the logic for checking if a date falls within the range (`includes` method). Client code now instantiates `DateRange` when calling the method.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/introduce-parameter-object.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nclass Account {\n  // ...\n  private Vector transactions = new Vector();\n\n  public double getFlowBetween(DateRange range) {\n    double result = 0;\n    Enumeration e = transactions.elements();\n    while (e.hasMoreElements()) {\n      Transaction each = (Transaction) e.nextElement();\n      if (range.includes(each.getDate())) {\n        result += each.getValue();\n      }\n    }\n    return result;\n  }\n}\n\nclass Transaction {\n  private Date chargeDate;\n  private double value;\n\n  public Transaction(double value, Date chargeDate) {\n    this.value = value;\n    this.chargeDate = chargeDate;\n  }\n  public Date getDate() {\n    return chargeDate;\n  }\n  public double getValue() {\n    return value;\n  }\n}\n\nclass DateRange {\n  private final Date start;\n  private final Date end;\n\n  public DateRange(Date start, Date end) {\n    this.start = start;\n    this.end = end;\n  }\n  public Date getStart() {\n    return start;\n  }\n  public Date getEnd() {\n    return end;\n  }\n  public boolean includes(Date arg) {\n    return arg.compareTo(start) >= 0 && arg.compareTo(end) <= 0;\n  }\n}\n\n// Somewhere in client code…\ndouble flow = account.getFlowBetween(new DateRange(startDate, endDate));\n```\n\n----------------------------------------\n\nTITLE: Implementing NullPaymentHistory Class - PHP\nDESCRIPTION: Creates NullPaymentHistory as a subclass of PaymentHistory, overriding isNull to return true. This class permits safe interactions with users that have no payment history, preventing null reference errors.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/introduce-null-object.md#_snippet_12\n\nLANGUAGE: PHP\nCODE:\n```\nclass NullPaymentHistory extends PaymentHistory {\n  public function isNull() {\n    return true;\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Refactored Account Class with Foreign Method (Java)\nDESCRIPTION: Demonstrates the `Account` class after applying the 'Introduce Foreign Method' refactoring. The date calculation logic is extracted into a static `nextWeek` method within the `Account` class. This new method takes a `Date` object as input and returns a new `Date` object representing the date one week later. It's marked with a comment indicating it ideally belongs in the `Date` class.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/introduce-foreign-method.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nclass Account {\n  // ...\n  double schedulePayment() {\n    Date paymentDate = nextWeek(previousDate);\n\n    // Issue a payment using paymentDate.\n    // ...\n  }\n\n  /**\n   * Foreign method. Should be in the Date class.\n   */\n  public static Date nextWeek(Date arg) {\n    return new Date(arg.getYear(), arg.getMonth(), arg.getDate() + 7);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Refactored salary calculation with polymorphism in Employee class\nDESCRIPTION: This snippet demonstrates the refactored approach where the payAmount method delegation is moved to the EmployeeType subclasses, encapsulating salary calculation logic within each subclass, eliminating the switch-case statement. The method getTypeCode remains to identify the employee type, but payAmount logic is now specialized in subclasses.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/replace-conditional-with-polymorphism.md#_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nclass Employee {\n  // ...\n  private EmployeeType type;\n  public int getTypeCode() {\n    return type.getTypeCode();\n  }\n\n  public int monthlySalary;\n  public int commission;\n  public int bonus;\n  public int payAmount() {\n    return type.payAmount(this);\n  }\n}\n\nabstract class EmployeeType {\n  static final int ENGINEER = 0;\n  static final int SALESMAN = 1;\n  static final int MANAGER = 2;\n\n  abstract public int getTypeCode();\n  public static EmployeeType newType(int code) {\n    switch (code) {\n      case ENGINEER:\n        return new Engineer();\n      case SALESMAN:\n        return new Salesman();\n      case MANAGER:\n        return new Manager();\n      default:\n        throw new IllegalArgumentException(\"Incorrect Employee Code\");\n    }\n  }\n\n  abstract public int payAmount(Employee employee);\n}\nclass Engineer extends EmployeeType {\n  @Override public int getTypeCode() {\n    return EmployeeType.ENGINEER;\n  }\n  @Override public int payAmount(Employee employee) {\n    return employee.monthlySalary;\n  }\n}\nclass Salesman extends EmployeeType {\n  @Override public int getTypeCode() {\n    return EmployeeType.SALESMAN;\n  }\n  @Override public int payAmount(Employee employee) {\n    return employee.monthlySalary + employee.commission;\n  }\n}\nclass Manager extends EmployeeType {\n  @Override public int getTypeCode() {\n    return EmployeeType.MANAGER;\n  }\n  @Override public int payAmount(Employee employee) {\n    return employee.monthlySalary + employee.bonus;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Object Creation in Employee Factory Method (PHP)\nDESCRIPTION: Updates the factory method with a switch statement to return specific subclass instances (Engineer, Salesman, Manager) according to the provided type. Provides greater flexibility by allowing subclass instantiation from the factory method. Requires that subclasses be defined. Input is the employee type constant; output is the relevant subclass or default Employee instance.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/replace-constructor-with-factory-method.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n    switch ($type) {\n      case self::ENGINEER:\n        return new Engineer();\n      case self::SALESMAN:\n        return new Salesman();\n      case self::MANAGER:\n        return new Manager();\n      default:\n        return new Employee($type);\n    }\n```\n\n----------------------------------------\n\nTITLE: Analysis and Application of Composite Pattern\nDESCRIPTION: Considers transforming 'Department' to contain 'Party' elements, enabling nested department structures via the Composite pattern. Includes renaming and list type generalization for flexible hierarchy.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/extract-superclass.md#_snippet_9\n\nLANGUAGE: Java\nCODE:\n```\nVector<Party> staff;\n```\n\nLANGUAGE: Java\nCODE:\n```\nprivate List<Party> items;\n```\n\nLANGUAGE: Java\nCODE:\n```\npublic List<Party> getStaff() {\n    return staff;\n}\n```\n\nLANGUAGE: Java\nCODE:\n```\npublic void addStaff(Party p) {\n    staff.add(p);\n}\n```\n\n----------------------------------------\n\nTITLE: Refactoring Employee Class to Use EmployeeType Subclasses and Factory Method in C#\nDESCRIPTION: Modifies the Employee class by replacing the integer type field with an instance of EmployeeType, accessed via a property. The setter invokes the EmployeeType.Create factory method to convert an integer code into the corresponding type subclass. The getter returns the code from the EmployeeType instance. This change encapsulates type logic and integrates polymorphism for behavior variation.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/replace-type-code-with-state-strategy.md#_snippet_6\n\n\n\n----------------------------------------\n\nTITLE: Adding Collection Modifier Methods in PHP\nDESCRIPTION: Adds `addCourse` and `removeCourse` methods to the `Person` class. These methods encapsulate the modification of the internal `$courses` collection (an `SplObjectStorage`), providing controlled access for adding and removing `Course` objects instead of direct manipulation.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/encapsulate-collection.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n  public function addCourse($arg) {\n    $this->courses->attach($arg);\n  }\n  public function removeCourse($arg) {\n    $this->courses->detach($arg);\n  }\n```\n\n----------------------------------------\n\nTITLE: Implementing OnValueChanged - C#\nDESCRIPTION: This method checks if the new value differs from the old value; if so, it updates the old value and notifies the observers. This is core logic for notifying observers of data changes. The method is defined within the Interval class and used to manage and trigger notifications.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/duplicate-observed-data.md#_snippet_17\n\nLANGUAGE: C#\nCODE:\n```\n  private void OnValueChanged(ref string oldValue, string newValue)\n  {\n    if (!string.Equals(oldValue, newValue, StringComparison.Ordinal))\n    {\n      oldValue = newValue;\n      foreach (var observer in observers)\n        observer.OnNext(this);\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Refactored PHP Implementation with Proper Collection Encapsulation\nDESCRIPTION: Improved version with proper encapsulation. The Person class now initializes its collection, provides methods for adding and removing elements, returns a clone of the collection to prevent direct modification, and moves collection-related operations into the class.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/encapsulate-collection.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass Course {\n  public __construct($name, $isAdvanced) {\n    // ...\n  }\n  public function isAdvanced() {\n    // ...\n  }\n}\n\nclass Person {\n  private $courses; // SplObjectStorage\n\n  public __construct() {\n    $this->courses = new SplObjectStorage();\n  }\n  public function getCourses() {\n    return clone $this->courses;\n  }\n  public function initializeCourses(SplObjectStorage $arg) {\n    assert($this->courses->count() > 0, \"Courses are not empty\");\n    $this->courses->addAll($arg);\n  }\n  public function addCourse($arg) {\n    $this->courses->attach($arg);\n  }\n  public function removeCourse($arg) {\n    $this->courses->detach($arg);\n  }\n  public function numberOfAdvancedCourses() {\n    $count = 0;\n    foreach ($this->courses as $course) {\n      if ($course->isAdvanced()) {\n        $count++;\n      }\n    }\n    return $count;\n  }\n  public function numberOfCourses() {\n    return $this->courses->count();\n  }\n}\n\n// Client code\n$kent = new Person();\n$kent->addCourse(new Course(\"Smalltalk Programming\", false));\n$kent->addCourse(new Course(\"Appreciating Single Malts\", true));\nassert(2 === $kent->numberOfCourses());\n$refact = new Course(\"Refactoring\", true);\n$kent->addCourse($refact);\n$kent->addCourse(new Course(\"Brutal Sarcasm\", false));\nassert(4 === $kent->numberOfCourses());\n$kent->removeCourse($refact);\nassert(3 === $kent->numberOfCourses());\n\nprint(\"Advanced courses: \" . $kent->numberOfAdvancedCourses());\n```\n\n----------------------------------------\n\nTITLE: Extending Factory Method to Instantiate Employee Subclasses in Java\nDESCRIPTION: Modifies the 'create' static factory method to instantiate appropriate Employee subclass objects based on the type code. Uses a switch statement to return instances of 'Engineer', 'Salesman', 'Manager', or default Employee. This enables polymorphic instantiation and eliminates client code conditional logic. Requires subclass definitions and integer type constants. Input: type code integer; output: Employee subclass instance.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/replace-type-code-with-subclasses.md#_snippet_5\n\nLANGUAGE: Java\nCODE:\n```\n    switch (type) {\n      case ENGINEER:\n        return new Engineer();\n      default:\n        return new Employee(type);\n    }\n\n```\n\nLANGUAGE: Java\nCODE:\n```\n\n      case SALESMAN:\n        return new Salesman();\n\n```\n\nLANGUAGE: Java\nCODE:\n```\n\n      case MANAGER:\n        return new Manager();\n\n```\n\n----------------------------------------\n\nTITLE: Declare Fields in Parent Class - C#\nDESCRIPTION: This snippet declares private fields within the `Person` class to hold the data that was previously specific to the subclasses (`Male` and `Female`).  These fields represent the `isMale` boolean and the `code` character, capturing the gender information.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/replace-subclass-with-fields.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n\n  private bool isMale;\n  private char code;\n\n```\n\n----------------------------------------\n\nTITLE: Delegating overdraftCharge Call in Account Class (Java)\nDESCRIPTION: Replaces the implementation of the original `overdraftCharge` method within the `Account` class. The new implementation delegates the call to the `overdraftCharge` method of the associated `AccountType` object, passing the `daysOverdrawn` field as an argument.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/move-method.md#_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\n    return type.overdraftCharge(daysOverdrawn);\n```\n\n----------------------------------------\n\nTITLE: ResourcePool Class with Conditional Logic - PHP\nDESCRIPTION: This PHP snippet shows the refactored `ResourcePool::getResource()` method using a conditional statement instead of exception handling. It checks if the available resource pool is empty and creates a new resource if needed, eliminating the need for the try-catch block. This improves code readability and performance.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/replace-exception-with-test.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass ResourcePool {\n  // ...\n  private $available; // SplStack \n  private $allocated; // SplStack \n\n  public function getResource() {\n    if ($this->available->isEmpty()) {\n      $result = new Resource();\n    }\n    else {\n      $result = $this->available->pop();\n    }\n    $this->available->push($this->allocated, $result);\n    return $result;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Customer Registry in Java\nDESCRIPTION: This code declares a static registry field in the Customer class to store all Customer object instances using a Dictionary (Hashtable). It is a prerequisite for enabling object pooling and ensuring that only unique Customer instances exist for each customer name. No external dependencies are required beyond java.util.Hashtable. The registry is accessed statically from within the Customer class, and the Dictionary maps customer names (String) to their corresponding object.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/change-value-to-reference.md#_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\n\n\n  private static Dictionary instances = new Hashtable();\n\n```\n\n----------------------------------------\n\nTITLE: Replacing Class Inheritance with Abstract Class\nDESCRIPTION: Updates existing 'Employee' and 'Department' classes to inherit from the newly created 'Party' superclass by replacing 'extends Party' in their class declarations. This reduces duplication of common attributes.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/extract-superclass.md#_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\nclass Employee\n// ...\n```\n\nLANGUAGE: Java\nCODE:\n```\nclass Department\n// ...\n```\n\n----------------------------------------\n\nTITLE: Using Ternary Operator for Vacation Check - Java\nDESCRIPTION: Since the 'vacationAmount' method's logic is a simple conditional return, it can be further simplified by using a ternary operator. This concisely expresses the condition and the two possible return values.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/consolidate-conditional-expression.md#_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nreturn (onVacation() && lengthOfService() > 10) ? 1 : 0.5;\n```\n\n----------------------------------------\n\nTITLE: Adding Customer Constructor - C#\nDESCRIPTION: Adds a constructor to the Customer class that accepts a string parameter representing the customer's name and initializes the Name property. This constructor allows for creating Customer objects with an initial name. It is a common practice for initializing object properties.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/replace-data-value-with-object.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\n  public Customer(string name)\n  {\n    this.Name = name;\n  }\n```\n\n----------------------------------------\n\nTITLE: Adding Factory Method newNull to Customer Class in Java\nDESCRIPTION: Introduces a static factory method newNull() in Customer to create and return instances of NullCustomer. This encapsulates null-object creation and hides its existence from client code.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/introduce-null-object.md#_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\n\n  public static Customer newNull() {\n    return new NullCustomer();\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Overriding Abstract Method - C#\nDESCRIPTION: These snippets modify the `GetAnnualCost` methods in `Employee` and `Department` to override the abstract method defined in the `Party` class. It uses `override` keyword to ensure the classes correctly implement the required interface. It depends on the abstract method from the previous step and base class.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/extract-superclass.md#_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\n override \n```\n\n----------------------------------------\n\nTITLE: Refactored GUI and Domain Model with Observer Pattern (C#)\nDESCRIPTION: This C# code snippet demonstrates the refactored implementation using the Duplicate Observed Data pattern and the Observer pattern. The data (Start, End, Length) and calculation logic (`CalculateLength`, `CalculateEnd`) are moved to the `Interval` domain class, which implements `IObservable<Interval>`. The `IntervalWindow` GUI class becomes an observer (`IObserver<Interval>`) subscribing to the `Interval` subject. Changes in the domain class (via property setters calling `OnValueChanged`) notify observers (the GUI), and the `OnNext` method in the GUI updates the text boxes, decoupling the UI from the core logic and data.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/duplicate-observed-data.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic partial class IntervalWindow : Form, IObserver<Interval>\n{\n  private Interval subject;\n\n  private string Start\n  {\n    get{ return subject.Start; }\n    set{ subject.Start = value; }\n  }\n  private string End\n  {\n    get{ return subject.End; }\n    set{ subject.End = value; }\n  }\n  private string Length\n  {\n    get{ return subject.Length; }\n    set{ subject.Length = value; }\n  }\n\n  public IntervalWindow()\n  {\n    InitializeComponent();\n\n    subject = new Interval();\n    subject.Subscribe(this);\n    OnNext(subject);\n  }\n\n  public void OnNext(Interval interval)\n  {\n    tbStart.Text = interval.Start;\n    tbEnd.Text = interval.End;\n    tbLength.Text = interval.Length;\n  }\n  // No implementation needed: Method is not called by the Interval class.\n  public void OnError(Exception e)\n  {\n    // No implementation.\n  }\n  // No implementation needed: Method is not called by the Interval class.\n  public void OnCompleted()\n  {\n    // No implementation.\n  }\n  private void OnTextBoxLeave(object sender, EventArgs e)\n  {\n    TextBox tb = sender as TextBox;\n    \n    if (tb != null)\n    {\n      int tmp;\n      if (!int.TryParse(tb.Text, out tmp))\n        tb.Text = \"0\";\n      \n      if (tb == tbStart)\n      {\n        this.Start = tb.Text;\n        subject.CalculateLength();\n      }\n      else if (tb == tbEnd)\n      {\n        this.End = tb.Text;\n        subject.CalculateLength();\n      }  \n      else if (tb == tbLength)\n      {\n        this.Length = tb.Text;\n        subject.CalculateEnd();\n      }\n    }\n  }\n}\n\npublic class Interval: IObservable<Interval>\n{\n  private List<IObserver<Interval>> observers;\n  private string  start = \"0\",\n                  end = \"0\",\n                  length = \"0\";\n\n  public string Start\n  {\n    get{ return start; }\n    set{ OnValueChanged(ref start, value); }\n  }\n  public string End\n  {\n    get{ return end; }\n    set{ OnValueChanged(ref end, value); }\n  }\n  public string Length\n  {\n    get{ return length; }\n    set{ OnValueChanged(ref length, value); }\n  }\n\n  public Interval()\n  {\n    observers = new List<IObserver<Interval>>();\n  }\n\n  private void OnValueChanged(ref string oldValue, string newValue)\n  {\n    if (!string.Equals(oldValue, newValue, StringComparison.Ordinal))\n    { గుర్తoldValue = newValue;\n      foreach (var observer in observers)\n        observer.OnNext(this);\n    }\n  }\n  public IDisposable Subscribe(IObserver<Interval> observer)\n  {\n    if (!observers.Contains(observer))\n    {\n      observers.Add(observer);\n      observer.OnNext(this);\n    }\n    return null;\n  }\n  public void CalculateLength()\n  {\n    int start = int.Parse(this.Start);\n    int end = int.Parse(this.End);\n    int length = end - start;\n    this.Length = length.ToString();\n  }\n  public void CalculateEnd()\n  {\n    int start = int.Parse(this.Start);\n    int length = int.Parse(this.Length);\n    int end = start + length;\n    this.End = end.ToString();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Guard Clauses for Special Employee Cases in C# Payroll System\nDESCRIPTION: This code transformation shows how to replace deeply nested conditional statements with guard clauses in a payroll calculation method. The refactoring eliminates nested if-else structures by using early returns when special conditions are met, making the code more readable and maintainable.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/replace-nested-conditional-with-guard-clauses.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Payout\n{\n  // ...\n  double GetPayAmount()\n  {\n    double result = 0;\n    if (isDead) {\n      result = DeadAmount();\n    }\n    else {\n      if (isSeparated) {\n        result = SeparatedAmount();\n      }\n      else {\n        if (isRetired) {\n          result = RetiredAmount();\n        }\n        else {\n          result = NormalPayAmount();\n        }\n      }\n    }\n    return result;\n  }\n}\n```\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Payout\n{\n  // ...\n  double GetPayAmount()\n  {\n    if (isDead) {\n      return DeadAmount();\n    }\n    if (isSeparated) {\n      return SeparatedAmount();\n    }\n    if (isRetired) {\n      return RetiredAmount();\n    }\n    return NormalPayAmount();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Calling getOutstanding and Assigning Result in printOwing PHP\nDESCRIPTION: This shows the updated call to the 'getOutstanding' method within 'printOwing'. The return value of the method (the calculated outstanding amount) is now assigned back to the '$outstanding' variable in 'printOwing', making it available for the subsequent call to 'printDetails'.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/extract-method.md#_snippet_12\n\nLANGUAGE: PHP\nCODE:\n```\n  $outstanding = $this->getOutstanding();\n```\n\n----------------------------------------\n\nTITLE: Refactored C# Account Class with Private Setter and Initialization Method\nDESCRIPTION: This snippet demonstrates the refactored `Account` class and a subclass `InterestAccount`. The `Id` property's setter is now private, preventing external modification after construction. Complex initialization logic (prefixing \"ID\") is encapsulated in a protected `InitializeId` method, called by the `Account` constructor. The `InterestAccount` subclass also utilizes the `InitializeId` method for setting the ID during its construction, ensuring consistent initialization logic and adhering to the principle of making the ID immutable post-creation.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/remove-setting-method.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Account\n{\n  // ...\n  private string id;\n\n  public string Id\n  {\n    get{ return id; }\n    private set{ id = value; }\n  }\n\n  public Account(string id)\n  {\n    InitializeId(id);\n  }\n  protected void InitializeId(string id)\n  {\n    Id = \"ID\" + id;\n  }\n}\n\npublic class InterestAccount: Account\n{\n  private double interestRate;\n\n  public InterestAccount(string id, double interestRate): base(id) // Alternative: calling base constructor\n  {\n    // InitializeId(id); // Alternative: calling initialization method if base constructor call is not suitable\n    this.interestRate = interestRate;\n  }\n  // Note: The provided text shows two possible ways the subclass constructor was modified during the refactoring steps.\n  // 1. Calling base(id)\n  // 2. Calling InitializeId(id)\n  // The final version shown in the text uses InitializeId(id) after making it protected.\n  // The provided code reflects the state after several refactoring steps described in the text.\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Factory Method for Employee Creation (PHP)\nDESCRIPTION: Adds a static create method to the Employee class, which returns an instance of a specific subclass (Engineer, Salesman, Manager) depending on the argument passed. The constructor is made private to prevent direct instantiation from outside the class. This pattern allows for easy extension and maintenance, as different classes can be instantiated based on input parameters. The input is the employee type constant, and the output is an object of the desired class. Dependencies: Subclasses Engineer, Salesman, and Manager (which must extend Employee) must be defined.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/replace-constructor-with-factory-method.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nclass Employee {\n  // ...\n  const ENGINEER = 0;\n  const SALESMAN = 1;\n  const MANAGER = 2;\n\n  public static function create($type) {\n    switch ($type) {\n      case self::ENGINEER:\n        return new Engineer();\n      case self::SALESMAN:\n        return new Salesman();\n      case self::MANAGER:\n        return new Manager();\n      default:\n        return new Employee($type);\n    }\n  }\n  private function __construct($type) {\n    $this->type = $type;\n  }\n}\nclass Engineer extends Employee {\n  // ...\n}\nclass Salesman extends Employee {\n  // ...\n}\nclass Manager extends Employee {\n  // ...\n}\n\n// Some clinet code.\n$eng = Employee::create(Employee::ENGINEER);\n```\n\n----------------------------------------\n\nTITLE: Adding bonus field to Manager PHP\nDESCRIPTION: This code adds a `$bonus` property to the `Manager` class. This property is used in the `payAmount` method to calculate the pay of the manager. This follows the pattern of push down field, where only necessary fields are added to the subclasses.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/replace-type-code-with-subclasses.md#_snippet_16\n\nLANGUAGE: PHP\nCODE:\n```\n  public $bonus;\n```\n\n----------------------------------------\n\nTITLE: Adding Public Getter for TelephoneNumber Object (Java)\nDESCRIPTION: Adds a public getter method `getOfficeTelephone` to the `Person` class. This allows client code to directly access the `TelephoneNumber` object associated with the person, instead of using delegating methods in the `Person` class.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/extract-class.md#_snippet_16\n\nLANGUAGE: java\nCODE:\n```\npublic TelephoneNumber getOfficeTelephone() {\n  return officeTelephone;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Exception Class in PHP\nDESCRIPTION: This simple PHP snippet introduces the BalanceException class, a custom exception extending PHP's built-in Exception class. It is used to signal balance-related errors in the Account class's withdraw method. There are no required parameters or specialized methods; the class provides a type-specific exception that can be caught separately from generic exceptions. This helps differentiate balance errors from other exceptions in client code.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/replace-error-code-with-exception.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nclass BalanceException extends Exception {}\n```\n\n----------------------------------------\n\nTITLE: Declaring Abstract getHeadCount in Parent Class (Party, PHP)\nDESCRIPTION: This snippet declares the `getHeadCount` method as abstract within the parent class (`Party`). This enforces that all concrete subclasses (both composite classes like `Department` and leaf classes like `Employee`) must provide their own implementation of this method, ensuring a consistent interface across the object hierarchy as required by the Composite pattern.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/extract-superclass.md#_snippet_12\n\nLANGUAGE: PHP\nCODE:\n```\n\n  public abstract function getHeadCount();\n```\n\n----------------------------------------\n\nTITLE: Creating an Immutable DateRange Class in PHP\nDESCRIPTION: Definition of a new immutable DateRange class to encapsulate start and end dates. The class provides getters for accessing the date properties but no setters to ensure immutability.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/introduce-parameter-object.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nclass DateRange {\n  private $start; // DateTime\n  private $end; // DateTime\n\n  public function __construct(DateTime $start, DateTime $end) {\n    $this->start = $start;\n    $this->end = $end;\n  }\n  public function getStart() {\n    return $this->start;\n  }\n  public function getEnd() {\n    return $this->end;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing payAmount Method in EmployeeType with Abstract Declaration - Java\nDESCRIPTION: This snippet replaces an existing concrete payAmount method in EmployeeType, which used a switch-case to calculate payroll, with an abstract method declaration. This change enforces that subclasses implement their own payAmount methods, facilitating polymorphic behavior and eliminating type code conditionals. It depends on a proper subclass hierarchy and method overrides in subclasses like Engineer, Salesman, and Manager.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/replace-type-code-with-state-strategy.md#_snippet_10\n\nLANGUAGE: Java\nCODE:\n```\n  abstract public int payAmount(Employee employee);\n```\n\n----------------------------------------\n\nTITLE: Delegating getTelephoneNumber Method - PHP\nDESCRIPTION: This snippet updates the getTelephoneNumber method in the Person class to delegate to the TelephoneNumber class.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/extract-class.md#_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\n    return $this->officeTelephone->getTelephoneNumber();\n\n```\n\n----------------------------------------\n\nTITLE: Factory Method Conditional Logic C#\nDESCRIPTION: This code shows the conditional logic added to the factory method `Create`. Depending on the `type` parameter, it will now return a different object. The types of objects it returns are `Engineer`, `Salesman`, and `Manager`. If the type passed in doesn't match, then it returns an `Employee` object.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/replace-constructor-with-factory-method.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nswitch (type)\n    {\n      case ENGINEER:\n        return new Engineer();\n      case SALESMAN:\n        return new Salesman();\n      case MANAGER:\n        return new Manager();\n      default:\n        return new Employee(type);\n    }\n```\n\n----------------------------------------\n\nTITLE: Factory Method for EmployeeType Instantiation - PHP\nDESCRIPTION: Defines a static factory method newType in EmployeeType that takes a type code and returns an instance of the corresponding subclass (Engineer, Salesman, or Manager). Throws an exception for unknown type codes. Input: integer code; Output: EmployeeType subclass instance. Limitations: Only defined codes are supported; others trigger exception.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/replace-type-code-with-state-strategy.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n\n  public static function newType($code) {\n    switch ($code) {\n      case EmployeeType::ENGINEER:\n        return new Engineer();\n      case EmployeeType::SALESMAN:\n        return new Salesman();\n      case EmployeeType::MANAGER:\n        return new Manager();\n      default:\n        throw new Exception(\"Incorrect Employee Code\");\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Initial Employee Class with Type Code in PHP\nDESCRIPTION: This code defines an Employee class where the employee type is represented by constants and stored as a property. The payAmount method uses a switch statement on the type code to determine the calculation, which couples behavior directly to type codes, making future extension less manageable.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/replace-type-code-with-state-strategy.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nclass Employee {\n  // ...\n  const ENGINEER = 0;\n  const SALESMAN = 1;\n  const MANAGER = 2;\n\n  public $type;\n\n  public function __construct($arg) {\n    $this->type = $arg;\n  }\n\n  public $monthlySalary;\n  public $commission;\n  public $bonus;\n  public function payAmount() {\n    switch ($this->type) {\n      case self::ENGINEER:\n        return $this->monthlySalary;\n      case self::SALESMAN:\n        return $this->monthlySalary + $this->commission;\n      case self::MANAGER:\n        return $this->monthlySalary + $this->bonus;\n      default:\n        throw new Exception(\"Incorrect Employee Code\");\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Original Method to Delegate to Gamma Class (Java)\nDESCRIPTION: Replaces the body of the original method (presumably in the `Account` class) with code that delegates the computation. It creates a new `Gamma` object, passing `this` (the `Account` instance) and the original parameters, and then calls the `Compute` method on the new `Gamma` object, returning its result.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/replace-method-with-method-object.md#_snippet_7\n\nLANGUAGE: java\nCODE:\n```\n    return new Gamma(this, inputVal, quantity, yearToDate).Compute();\n```\n\n----------------------------------------\n\nTITLE: Checking Security Using Break - C#\nDESCRIPTION: This is the refactored version of the CheckSecurity function. Instead of a boolean control flag, it uses the 'break' statement to exit the loop immediately after finding a suspicious name ('Don' or 'John') and calling SendAlert(). This improves performance by avoiding unnecessary iterations once the condition is met.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/remove-control-flag.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nvoid CheckSecurity(string[] people)\n{\n  for (int i = 0; i < people.Length; i++)\n  {\n    if (people[i].Equals(\"Don\")) {\n      SendAlert();\n      break;\n    }\n    if (people[i].Equals(\"John\")) {\n      SendAlert();\n      break;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing Null Returns with NullCustomer Object in Java\nDESCRIPTION: Modifies customer-returning code to replace null return values with calls to Customer.newNull(), ensuring callers always receive a Customer object, either real or null-object, simplifying null checks downstream.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/introduce-null-object.md#_snippet_5\n\nLANGUAGE: Java\nCODE:\n```\nreturn (customer == null) ? Customer.newNull() : customer\n```\n\n----------------------------------------\n\nTITLE: After Move Field Refactoring (Standard and Self-Encapsulated) - Java\nDESCRIPTION: This snippet shows the state of the classes after the 'Move Field' refactoring has been applied. The `interestRate` field has been moved to the `AccountType` class. The `Account` class now accesses the rate via methods on the associated `AccountType` object. It also demonstrates the self-encapsulation approach where `Account` uses its own private accessors that delegate to `AccountType`.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/move-field.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nclass Account {\n  // ...\n  private AccountType type;\n\n  public double interestForAmount_days(double amount, int int days) {\n    return getInterestRate() * amount * days / 365.0;\n  }\n  public double interestForBigFamily(double familySize) {\n    return getInterestRate() / familySize;\n  }\n\n  // other 10 methods, which use getInterestRate()\n\n  private double getInterestRate() {\n    return type.getInterestRate();\n  }\n  private void setInterestRate(double arg) {\n    type.setInterestRate(arg);\n  }\n}\n\nclass AccountType {\n  // ...\n  private double interestRate;\n\n  public double getInterestRate() {\n    return interestRate;\n  }\n  public void setInterestRate(double arg) {\n    interestRate = arg;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Consolidating 'annualCost' Attributes in Subclasses\nDESCRIPTION: Abstracts 'annualCost' attribute and associated methods into the 'Party' superclass, and overrides with an abstract method, enabling subclasses to provide specific implementations.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/extract-superclass.md#_snippet_7\n\nLANGUAGE: Java\nCODE:\n```\npublic abstract int getAnnualCost();\n```\n\n----------------------------------------\n\nTITLE: Calculating Engineer Salary Using Subclass payAmount Method in PHP\nDESCRIPTION: Defines payAmount in the Engineer subclass to calculate the engineer's payroll by returning the monthlySalary attribute. Requires an Employee object with a monthlySalary property. This method isolates Engineer-specific logic for payroll computation and replaces previous conditional handling.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/replace-type-code-with-state-strategy.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\n  public function payAmount(Employee $employee) {\n    return $employee->monthlySalary;\n  }\n```\n\n----------------------------------------\n\nTITLE: Polymorphic PayAmount Method in EmployeeType Class in C#\nDESCRIPTION: Introduces the PayAmount method in EmployeeType, which calculates payment based on employee type. Initially implemented with a switch statement over EmployeeCode returning salary values, it will later be refactored for polymorphism. The method accepts an Employee object parameter to access salary-related data fields necessary for calculations.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/replace-type-code-with-state-strategy.md#_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\npublic int PayAmount(Employee employee)\n{\n  switch (EmployeeCode)\n  {\n    case ENGINEER:\n      return employee.MonthlySalary;\n    case SALESMAN:\n      return employee.MonthlySalary + employee.Commission;\n    case MANAGER:\n      return employee.MonthlySalary + employee.Bonus;\n    default:\n      throw new Exception(\"Incorrect Employee Code\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Immutable Customer Value Object in C#\nDESCRIPTION: This code presents the transformed `Customer` class as a value object.  It is immutable, meaning its properties (`Name` and `BirthDate`) are set in the constructor and cannot be modified afterwards. The `Equals` and `GetHashCode` methods are overridden to ensure that two `Customer` objects with the same `Name` and `BirthDate` are considered equal.  The `Customer` is now treated as a value object, where equality is based on its properties rather than object identity.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/change-reference-to-value.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Customer\n{\n  public string Name\n  {\n    get;\n    private set;\n  }\n  public DateTime BirthDate\n  {\n    get;\n    private set;\n  }\n\n  public Customer(string Name, DateTime BirthDate)\n  {\n    this.Name = Name;\n    this.BirthDate = BirthDate;\n  }\n\n  public override bool Equals(Object obj)\n  {\n    Customer other = obj as Customer;\n\n    if (other == null)\n      return false;\n\n    return this.BirthDate == other.BirthDate && string.Equals(this.Name, other.Name, StringComparison.Ordinal);\n  }\n  public override int GetHashCode()\n  {\n    int hashCode = 11;\n    unchecked\n    {\n      if (Name != null)\n        hashCode = hashCode * 22 + Name.GetHashCode();\n      hashCode = hashCode * 22 + BirthDate.GetHashCode();\n    }\n    return hashCode;\n  }\n}\n\n// Somewhere in client code\nCustomer john = new Customer(\"John Smith\", new DateTime(1985, 1, 1));\n```\n\n----------------------------------------\n\nTITLE: Refactored Ticket Price Calculation with Condition Decomposition in C#\nDESCRIPTION: This snippet refactors the assembly by extracting the seasonal check into a dedicated method IsSummer. The main method now calls IsSummer to decide which charge calculation method to execute, improving clarity. Additional private methods SummerCharge and WinterCharge encapsulate respective calculations, facilitating code reuse and testing.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/decompose-conditional.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nclass Stadium\n{\n  // ...\n  public double summerRate;\n  public double winterRate;\n  public double winterServiceCharge;\n\n  public double GetTicketPrice(DateTime date, int quantity)\n  {\n    double charge;\n\n    if (IsSummer(date))\n    {\n      charge = SummerCharge(quantity);\n    }\n    else\n    {\n      charge = WinterCharge(quantity);\n    }\n\n    return charge;\n  }\n\n  private bool IsSummer(DateTime date)\n  {\n    return date < WINTER_START || date > WINTER_END;\n  }\n  private double SummerCharge(int quantity)\n  {\n    return quantity * summerRate;\n  }\n  private double WinterCharge(int quantity)\n  {\n    return quantity * winterRate + winterServiceCharge;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initial Person and Department Classes in PHP\nDESCRIPTION: This code snippet shows the initial structure of the `Person` and `Department` classes. The `Person` class has a `getDepartment` and `setDepartment` method to interact with its `department` attribute, which is of type `Department`. The `Department` class has a constructor that takes a `Person` (manager) as an argument and a `getManager` method. The client code demonstrates how a client interacts with these objects to get a manager.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/hide-delegate.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n```\nclass Person {\n  private $department; // Department\n\n  public function getDepartment() {\n    return $this->department;\n  }\n  public function setDepartment(Department $arg) {\n    $this->department = $arg;\n  }\n}\n\nclass Department {\n  private $chargeCode;\n  private $manager; // Person\n\n  public function __construct(Person $manager) {\n    $this->manager = $manager;\n  }\n  public function getManager() {\n    return $this->manager;\n  }\n\n  //…\n}\n\n// Somewhere in client code\n$manager = $john->getDepartment()->getManager();\n```\n```\n\n----------------------------------------\n\nTITLE: Making Employee.getType Abstract and Employee Class Abstract in Java\nDESCRIPTION: Removes the 'type' field from Employee and converts 'getType()' from concrete to abstract method, forcing subclasses to implement their own version. Marks the Employee class itself as abstract accordingly. This ensures type information is fully delegated to subclasses, removing previous coupling to type codes. Inputs: none; outputs: abstract Employee class and abstract getType() method enforce polymorphism.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/replace-type-code-with-subclasses.md#_snippet_7\n\nLANGUAGE: Java\nCODE:\n```\nabstract public int getType();\n```\n\nLANGUAGE: Java\nCODE:\n```\nabstract public class Employee {\n\n```\n\n----------------------------------------\n\nTITLE: Refactored PHP getPrice Method with Extracted Methods\nDESCRIPTION: This snippet shows the refactored version of getPrice() which replaces temporary variables with method calls. It introduces 'basePrice()' and 'discountFactor()' methods to encapsulate calculation logic, simplifying the main method and improving maintainability.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/replace-temp-with-query.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nclass Product {\n  // ...\n  function getPrice() {\n    return $this->basePrice() * $this->discountFactor();\n  }\n  private function basePrice() {\n    return $this->quantity * $this->itemPrice;\n  }\n  private function discountFactor() {\n    if ($this->basePrice() > 1000) {\n      return 0.95;\n    }\n    else {\n      return 0.98;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Salesman Salary Including Commission in PHP Subclass\nDESCRIPTION: Implements payAmount in the Salesman subclass, returning the sum of an Employee's monthlySalary and commission fields. Requires Employee objects to define both monthlySalary and commission. This ensures payroll logic for salesmen incorporates commission, reflecting role-specific payment policy.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/replace-type-code-with-state-strategy.md#_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\n  public function payAmount(Employee $employee) {\n    return $employee->monthlySalary + $employee->commission;\n  }\n```\n\n----------------------------------------\n\nTITLE: Defining isNull Method in PaymentHistory Class in Java\nDESCRIPTION: Adds isNull() method to PaymentHistory class which returns false, establishing the polymorphic pattern for identifying a valid payment history object versus a null one.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/introduce-null-object.md#_snippet_10\n\nLANGUAGE: Java\nCODE:\n```\n\n  public boolean isNull() {\n    return false;\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Calculating Ticket Price Before Refactoring (PHP)\nDESCRIPTION: The initial implementation of the `getTicketPrice` method in the `Stadium` class. It calculates the ticket price based on the date and quantity using a single conditional statement with inline logic for determining the season and calculating the charge. This structure can make the code harder to read and understand. Requires the `DateTime` class.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/decompose-conditional.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass Stadium {\n  // ...\n  public $summerRate;\n  public $winterRate;\n  public $winterServiceCharge;\n\n  public function getTicketPrice(DateTime $date, $quantity) {\n    if ($date->format(\"m\") > \"05\" && $date->format(\"m\") < \"09\") {\n      $charge = $quantity * $this->summerRate;\n    }\n    else {\n      $charge = $quantity * $this->winterRate + $this->winterServiceCharge;\n    }\n    return $charge;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initial Class Structure - PHP\nDESCRIPTION: This snippet shows an initial implementation of a `JobItem` class and an `Employee` class. The `JobItem` class has properties like `quantity`, `unitPrice`, and `isLabor` that determine its behavior. It also has methods to calculate the total price and get the unit price based on whether the item is labor or not. This class acts as the starting point for the refactoring example.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/extract-subclass.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n```\nclass JobItem {\n  private $quantity;\n  private $unitPrice;\n  private $employee; // Employee\n  private $isLabor;\n\n  public function __construct($quantity, $unitPrice, $isLabor, Employee $employee) {\n    $this->quantity = $quantity;\n    $this->unitPrice = $unitPrice;\n    $this->isLabor = $isLabor;\n    $this->employee = $employee;\n  }\n  public function getTotalPrice() {\n    return $this->quantity * $this->getUnitPrice();\n  }\n  public function getQuantity() {\n    return $this->quantity;\n  }\n  public function getUnitPrice() {\n    return ($this->isLabor) ?\n      $this->employee->getRate() : $this->unitPrice;\n  }\n  public function getEmployee() {\n    return $this->employee;\n  }\n}\n\nclass Employee {\n  private $rate;\n  public function __construct($rate) {\n    $this->rate = $rate;\n  }\n  public function getRate() {\n    return $this->rate;\n  }\n}\n\n// Somewhere in client code\n$kent = new Employee(50);\n$j1 = new JobItem(5, 0, true, kent);\n$j2 = new JobItem(15, 10, false, null);\n$total = $j1->getTotalPrice() + $j2->getTotalPrice();\n```\n```\n\n----------------------------------------\n\nTITLE: Refactored Account Class Using MfDateTimeWrap Extension Class in C#\nDESCRIPTION: This code demonstrates how to refactor an existing Account class by replacing a static utility method with an extension class MfDateTimeWrap. The extension class encapsulates date logic, providing an instance method GetNearFirstDate that computes the first date of the next month, improving encapsulation and code clarity. The main Account class's SchedulePayment method now utilizes this extension instance instead of a static method.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/introduce-local-extension.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class Account\n{\n  // ...\n  double SchedulePayment()\n  {\n    DateTime paymentDate = new MfDateTimeWrap(previousDate).GetNearFirstDate();\n\n    // Issue a payment using paymentDate.\n    // ...\n  }\n}\n\n// Local extension class.\npublic class MfDateTimeWrap\n{\n  private DateTime date;\n\n  public MfDateTimeWrap(): this(new DateTime())\n  {}\n  public MfDateTimeWrap(DateTime date)\n  {\n    this.date = date;\n  }\n\n  public DateTime GetNearFirstDate()\n  {\n    if (this.date.Day == 1)\n      return this.date;\n\n    DateTime nextDate = this.date.AddMonths(1);\n    \n    return new DateTime(nextDate.Year, nextDate.Month, 1);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Car with Engine Inheritance in Java\nDESCRIPTION: This snippet provides an initial implementation where the Car class inherits from the Engine class, directly accessing engine properties via inheritance. Dependencies include only standard Java capabilities, with two classes: Engine holding fuel and power properties, and Car extending Engine with additional fields for brand and model. Inputs are the brand and model attributes, and outputs include methods for retrieving and updating car and engine properties. This approach tightly couples Car to Engine, limiting flexibility.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/replace-inheritance-with-delegation.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nclass Engine {\n  //…\n  private double fuel;\n  private double CV;\n\n  public double getFuel() {\n    return fuel;\n  }\n  public void setFuel(double fuel) {\n    this.fuel = fuel;\n  }\n  public double getCV() {\n    return CV;\n  }\n  public void setCV(double cv) {\n    this.CV = cv;\n  }\n}\n\nclass Car extends Engine {\n  // ...\n  private String brand;\n  private String model;\n\n  public String getName() {\n    return brand + \" \" + model + \" (\" + getCV() + \"CV)\";\n  }\n  public String getModel() {\n    return model;\n  }\n  public void setModel(String model) {\n    this.model = model;\n  }\n  public String getBrand() {\n    return brand;\n  }\n  public void setBrand(String brand) {\n    this.brand = brand;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Manager Salary Including Bonus in PHP Subclass\nDESCRIPTION: Implements payAmount in the Manager subclass to return the sum of an Employee's monthlySalary and bonus fields. Dependencies include the Employee class with monthlySalary and bonus attributes. This edit delegates manager-specific payroll logic to the appropriate subclass.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/replace-type-code-with-state-strategy.md#_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\n  public function payAmount(Employee $employee) {\n    return $employee->monthlySalary + $employee->bonus;\n  }\n```\n\n----------------------------------------\n\nTITLE: Replacing Code with SetCustomer - C#\nDESCRIPTION: This snippet describes replacing a code line in the order constructor. The original line `this.customer = Customer.GetByName(customerName)` will be replaced with `SetCustomer(customerName)`.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/change-value-to-reference.md#_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nthis.customer = Customer.GetByName(customerName)\n```\n\n----------------------------------------\n\nTITLE: Calculating Payroll with Conditionals using PHP\nDESCRIPTION: This snippet provides the original payroll calculation logic for different employee types using a switch statement within the Employee class. It demonstrates a design where the payAmount method checks an employee's type code and performs salary calculations directly within conditional branches. Dependencies include constants defined in the EmployeeType class and the presence of properties such as monthlySalary, commission, and bonus. Inputs are specific type codes and employee attributes; output is the computed salary. The approach is easy to understand but difficult to extend as adding new employee types requires modifying the central method.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/replace-conditional-with-polymorphism.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass Employee {\n  // ...\n  private $type; // EmployeeType\n  public function getTypeCode() {\n    return $this->type->getTypeCode();\n  }\n\n  public $monthlySalary;\n  public $commission;\n  public $bonus;\n  public function payAmount() {\n    switch ($this->getTypeCode()) {\n      case EmployeeType::ENGINEER:\n        return $this->monthlySalary;\n      case EmployeeType::SALESMAN:\n        return $this->monthlySalary + $this->commission;\n      case EmployeeType::MANAGER:\n        return $this->monthlySalary + $this->bonus;\n      default:\n        throw new Exception(\"Incorrect Employee Code\");\n    }\n  }\n}\n\nabstract class EmployeeType {\n  const ENGINEER = 0;\n  const SALESMAN = 1;\n  const MANAGER = 2;\n\n  abstract public function getTypeCode();\n  public static function newType($code) {\n    switch ($code) {\n      case self::ENGINEER:\n        return new Engineer();\n      case self::SALESMAN:\n        return new Salesman();\n      case self::MANAGER:\n        return new Manager();\n      default:\n        throw new Exception(\"Incorrect Employee Code\");\n    }\n  }\n}\nclass Engineer extends EmployeeType {\n  public function getTypeCode() {\n    return EmployeeType::ENGINEER;\n  }\n}\nclass Salesman extends EmployeeType {\n  public function getTypeCode() {\n    return EmployeeType::SALESMAN;\n  }\n}\nclass Manager extends EmployeeType {\n  public function getTypeCode() {\n    return EmployeeType::MANAGER;\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Updating Subclass Constructors for Superclass Initialization\nDESCRIPTION: Replaces direct 'name' assignment in subclass constructors with calls to the superclass constructor using 'super(name)'.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/extract-superclass.md#_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\npublic Employee(String name) {\n    super(name);\n    // other initialization\n}\n```\n\nLANGUAGE: Java\nCODE:\n```\npublic Department(String name) {\n    super(name);\n    // other initialization\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Factory Method PHP\nDESCRIPTION: This snippet shows the creation of a static factory method to replace the constructor for creating employee objects. The factory method takes the type as an argument and instantiates an `Employee` object. This is done to decouple object creation from the type code.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/replace-type-code-with-subclasses.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n  public static function create($type) {\n    return new Employee($type);\n  }\n```\n\n----------------------------------------\n\nTITLE: Creating Abstract Base Class - C#\nDESCRIPTION: This snippet defines an abstract base class named `Party`.  This class will serve as a common superclass for `Employee` and `Department`, holding shared properties and behaviors. It has no dependencies other than the language runtime.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/extract-superclass.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic abstract class Party\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Manager: Add PayAmount Method - C#\nDESCRIPTION: This snippet implements the `PayAmount` method within the `Manager` class.  It calculates the pay amount by adding the monthly salary and the bonus. This functionality is specific to Managers and is being pushed down from the base class.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/replace-type-code-with-subclasses.md#_snippet_12\n\nLANGUAGE: C#\nCODE:\n```\n\n\n  public int PayAmount()\n  {\n    return MonthlySalary + Bonus;\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Providing Default Delinquency Value in NullPaymentHistory - PHP\nDESCRIPTION: Overrides getWeeksDelinquentInLastYear() in NullPaymentHistory to return 0, representing no delinquency. Ensures that client code can safely query delinquency without further null checks.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/introduce-null-object.md#_snippet_14\n\nLANGUAGE: PHP\nCODE:\n```\n  public function getWeeksDelinquentInLastYear() {\n    return 0;\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Returning Error Codes in PHP Account Method\nDESCRIPTION: This PHP code demonstrates the original implementation of the Account class's withdraw method, which returns 0 on success or -1 on error if the requested withdrawal amount exceeds the account balance. The client code checks the return value and handles errors based on error codes. The method relies on integer return codes with expected inputs of an integer amount, returning 0 or -1 as output. There are no external dependencies beyond PHP itself. This approach can obscure error causes and requires manual checks in client code.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/replace-error-code-with-exception.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nclass Account {\n  // ...\n  private $balance;\n\n  /**\n   * Withdraw money from account.\n   * @param int $amount Amount to withdraw.\n   * @return Zero on success, -1 on error.\n   */\n  public function withdraw($amount) {\n    if ($amount > $this->balance) {\n      return -1;\n    }\n    else {\n      $this->balance -= $amount;\n      return 0;\n    }\n  }\n}\n\n// Somewhere in client code.\nif ($account->withdraw($amount) == -1) {\n  handleOverdrawn();\n}\nelse {\n  doTheUsualThing();\n}\n\n```\n\n----------------------------------------\n\nTITLE: Declaring Abstract EmployeeType State Class in C#\nDESCRIPTION: Defines an abstract class EmployeeType that acts as the base state class in the State/Strategy pattern. It contains an abstract property EmployeeCode that must be overridden by subclasses to return the code corresponding to a specific employee type. This class serves as the abstraction layer encapsulating the type code logic.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/replace-type-code-with-state-strategy.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic abstract class EmployeeType\n{\n  public abstract int EmployeeCode\n  { get; }\n}\n```\n\n----------------------------------------\n\nTITLE: Assigning Plan from Customer Polymorphically - PHP\nDESCRIPTION: Refactors code to assign a plan by directly invoking getPlan() on the customer object. This approach eliminates conditional logic and requires getPlan() to be implemented in both Customer and NullCustomer classes.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/introduce-null-object.md#_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\n$plan = $customer->getPlan();\n```\n\n----------------------------------------\n\nTITLE: Calling OnValueChanged in Setters - C#\nDESCRIPTION: This code snippet shows the modification of the setter of the public properties. When setting `start`, `end`, or `length`, the `OnValueChanged` method is called to check for changes, and if changes exist, update the value and notify the observers. This ensures observers are informed whenever a property value changes.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/duplicate-observed-data.md#_snippet_19\n\nLANGUAGE: C#\nCODE:\n```\nOnValueChanged(ref end, value); \n```\n\n----------------------------------------\n\nTITLE: Initializing Collection in Constructor (PHP)\nDESCRIPTION: Initializes the `$courses` property within the `Person` class constructor by creating a new `SplObjectStorage`. This ensures the collection field is always properly initialized before use, preventing errors related to accessing an uninitialized property.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/encapsulate-collection.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n  public __construct() {\n    $this->courses = new SplObjectStorage();\n  }\n```\n\n----------------------------------------\n\nTITLE: Original printOwing Method in Java\nDESCRIPTION: This snippet shows the original `printOwing` method before refactoring. It calculates the outstanding amount for a customer and prints a banner, customer totals, and details.  It iterates through the customer's orders using an Enumeration. Dependencies include the Order class and the `orders` collection.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/extract-method.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nvoid printOwing() {\n  Enumeration elements = orders.elements();\n  double outstanding = 0.0;\n\n  // print banner\n  System.out.println (\"*****************************\");\n  System.out.println (\"****** Customer totals ******\");\n  System.out.println (\"*****************************\");\n\n  // print owings\n  while (elements.hasMoreElements()) {\n    Order each = (Order) elements.nextElement();\n    outstanding += each.getAmount();\n  }\n\n  // print details\n  System.out.println(\"name: \" + name);\n  System.out.println(\"amount: \" + outstanding);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Salesman PayAmount PHP\nDESCRIPTION: This code creates the `payAmount` method for the `Salesman` class. It calculates the total pay, including the monthly salary and commission, specific to salesman employee. It overrides the base class functionality.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/replace-type-code-with-subclasses.md#_snippet_15\n\nLANGUAGE: PHP\nCODE:\n```\n  public function payAmount() {\n    return $this->monthlySalary + $this->commission;\n  }\n```\n\n----------------------------------------\n\nTITLE: Extracting Calculation of Outstanding Amount in C#\nDESCRIPTION: This refactoring introduces GetOutstanding, a method to compute the total outstanding amount by iterating over a list of Order objects. It reassigns local variables from the original method to this extraction and returns the computed double value, addressing dependency issues by returning the result for use elsewhere. The snippet assumes orders is available and that Order has a GetAmount method. The expected input is no arguments (assumes orders available in scope), and the output is the total outstanding as a double. The method is limited if orders is not in scope or Order does not match the expected interface.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/extract-method.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\n\n\n\ndouble GetOutstanding()\n{\n  List<Order> orders = orders.Elements;\n  double outstanding = 0.0;\n\n  foreach (Order order in orders)\n  {\n    outstanding += order.GetAmount();\n  }\n\n  return outstanding;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating InitializeCourses Method - Java\nDESCRIPTION: This code extracts the initialization logic into a separate method, `InitializeCourses`. This method takes a list of courses as input, asserts that the course list is empty, and adds the new courses. It enables cleaner setter usage and allows for controlled initialization of the course list from a separate place.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/encapsulate-collection.md#_snippet_5\n\nLANGUAGE: Java\nCODE:\n```\n  public void InitializeCourses(List<Course> newCourses)\n  {\n    Assert.IsTrue(courses.Count == 0);\n    foreach (Course c in newCourses)\n      AddCourse(c);\n  }\n```\n\n----------------------------------------\n\nTITLE: Abstract PayAmount Method Declaration in EmployeeType Class in C#\nDESCRIPTION: Declares the PayAmount method as abstract in the EmployeeType base class to enforce implementation in derived subclasses. This change supports the refactoring from conditional payroll calculation to polymorphic delegation. No implementation is provided; subclasses override this method to specify payment computations. Accepts an Employee parameter and returns an integer.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/replace-type-code-with-state-strategy.md#_snippet_12\n\nLANGUAGE: C#\nCODE:\n```\n  public abstract int PayAmount(Employee employee);\n```\n\n----------------------------------------\n\nTITLE: Loading and Registering Customer Instances at Startup in Java\nDESCRIPTION: This code snippet demonstrates preloading known customers at program launch by instantiating Customer objects and registering them in the static registry via the store() method. The store() helper method inserts the Customer into the 'instances' dictionary using its name as the key. Input to loadCustomers is implicit (the customer names), output is that the registry is populated. This setup avoids retrieving users from external storage at runtime; modification for database loading can be done via algorithm substitution.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/change-value-to-reference.md#_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\n\n\n  // This code should be executed at the program launch.\n  static void loadCustomers() {\n    new Customer(\"Lemon Car Hire\").store();\n    new Customer(\"Associated Coffee Machines\").store();\n    new Customer(\"Bilston Gasworks\").store();\n  }\n  private void store() {\n    instances.put(this.getName(), this);\n  }\n\n\n```\n\n----------------------------------------\n\nTITLE: Delegate Method Implementation\nDESCRIPTION: This snippet illustrates the actual implementation of the delegate method `GetManager()` in the `Person` class.  It hides the internal structure of the Department class from the client.  This method acts as a wrapper to access the manager.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/hide-delegate.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\npublic Person GetManager()\n  {\n    return department.Manager;\n  }\n```\n\n----------------------------------------\n\nTITLE: Adding Order Via Customer Method (PHP)\nDESCRIPTION: Provides a public `addOrder` method in the `Customer` class. This method serves as a convenient way to associate an order with a customer, but it delegates the actual link management to the `setCustomer` method of the `Order` object, ensuring the controlling logic is applied correctly.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/change-unidirectional-association-to-bidirectional.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n\n\n  public function addOrder(Order $arg) {\n    $arg->setCustomer($this);\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Refactored OverdraftCharge Moved to AccountType with Delegation in Account - C#\nDESCRIPTION: This snippet demonstrates the refactoring where the OverdraftCharge method is moved from the Account class to the AccountType class. The Account class retains a DaysOverdrawn property and delegates overdraft charge calculation to AccountType. This decouples responsibilities, with AccountType handling charge logic based on whether the type is premium. The BankCharge method now sums a base charge with the delegated overdraft charge.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/move-method.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Account\n{\n  // ...\n  private AccountType type;\n  private int daysOverdrawn;\n\n  public int DaysOverdrawn\n  {\n    get { return daysOverdrawn; }\n  }\n\n  public double BankCharge()\n  {\n    double result = 4.5;\n    if (daysOverdrawn > 0)\n    {\n      result += type.OverdraftCharge(this);\n    }\n    return result;\n  }\n}\n\npublic class AccountType\n{\n  // ...\n  public double OverdraftCharge(Account account)\n  {\n    if (IsPremium())\n    {\n      double result = 10;\n      if (account.DaysOverdrawn > 7)\n      {\n        result += (account.DaysOverdrawn - 7) * 0.85;\n      }\n      return result;\n    }\n    else\n    {\n      return account.DaysOverdrawn * 1.75;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding payAmount Method in Salesman Subclass - Java\nDESCRIPTION: This snippet defines the payAmount method override in the Salesman subclass. It calculates the total pay by summing the employee's monthly salary and commission. This replaces prior conditional payroll logic specific to salesmen within the EmployeeType class. Inputs include an Employee object with monthlySalary and commission fields. The method outputs the total compensation as an integer.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/replace-type-code-with-state-strategy.md#_snippet_8\n\nLANGUAGE: Java\nCODE:\n```\n  @Override public int payAmount(Employee employee) {\n    return employee.monthlySalary + employee.commission;\n  }\n```\n\n----------------------------------------\n\nTITLE: Initial salary calculation with switch-case in Employee class\nDESCRIPTION: This snippet shows the original implementation where the payAmount method uses a switch statement based on an employee's type code to determine salary calculation. The EmployeeType class provides type constants and a factory method for creating employee type instances.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/replace-conditional-with-polymorphism.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nclass Employee {\n  // ...\n  private EmployeeType type;\n  public int getTypeCode() {\n    return type.getTypeCode();\n  }\n\n  public int monthlySalary;\n  public int commission;\n  public int bonus;\n  public int payAmount() {\n    switch (getTypeCode()) {\n      case EmployeeType.ENGINEER:\n        return monthlySalary;\n      case EmployeeType.SALESMAN:\n        return monthlySalary + commission;\n      case EmployeeType.MANAGER:\n        return monthlySalary + bonus;\n      default:\n        throw new RuntimeException(\"Incorrect Employee Code\");\n    }\n  }\n}\n\nabstract class EmployeeType {\n  static final int ENGINEER = 0;\n  static final int SALESMAN = 1;\n  static final int MANAGER = 2;\n\n  abstract public int getTypeCode();\n  public static EmployeeType newType(int code) {\n    switch (code) {\n      case ENGINEER:\n        return new Engineer();\n      case SALESMAN:\n        return new Salesman();\n      case MANAGER:\n        return new Manager();\n      default:\n        throw new IllegalArgumentException(\"Incorrect Employee Code\");\n    }\n  }\n}\nclass Engineer extends EmployeeType {\n  @Override public int getTypeCode() {\n    return EmployeeType.ENGINEER;\n  }\n}\nclass Salesman extends EmployeeType {\n  @Override public int getTypeCode() {\n    return EmployeeType.SALESMAN;\n  }\n}\nclass Manager extends EmployeeType {\n  @Override public int getTypeCode() {\n    return EmployeeType.MANAGER;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Resource Allocation with Conditional Check in Java\nDESCRIPTION: This snippet replaces the try-catch block with a conditional check. It first checks if the available stack is empty. If it is, a new resource is created; otherwise, a resource is popped from the available stack.  The resource is then pushed onto the allocated stack and returned. The conditional check handles the case where the available stack is empty, avoiding the use of exceptions for normal control flow.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/replace-exception-with-test.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nclass ResourcePool {\n  // ...\n  private Stack available;\n  private Stack allocated;\n\n  public Resource getResource() {\n    Resource result;\n    if (available.empty()) {\n      result = new Resource();\n    }\n    else {\n      result = (Resource) available.pop();\n    }\n    allocated.push(result);\n    return result;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing Setter with Add/Remove - Java\nDESCRIPTION: This snippet provides instructions to replace the original setter for the courses list with calls to AddCourse and RemoveCourse methods. The original setter would directly replace the existing course list, bypassing the controlled add and remove operation, breaking encapsulation. The AddCourse and RemoveCourse methods ensure the list's integrity and control how it's changed.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/encapsulate-collection.md#_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\n    set{\n\n    }\n```\n\n----------------------------------------\n\nTITLE: Creating Abstract Party Class in Java\nDESCRIPTION: Defines an abstract base class 'Party' with a protected 'name' attribute to serve as a superclass for 'Employee' and 'Department'. It prepares for code extraction by establishing common fields and behaviors.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/extract-superclass.md#_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nabstract class Party {\n}\n```\n\n----------------------------------------\n\nTITLE: Employee Class with Factory Method C#\nDESCRIPTION: This code snippet presents the `Employee` class refactored to include a static factory method `Create`. This method takes an integer `type` as input and returns an instance of the appropriate subclass (`Engineer`, `Salesman`, `Manager`) based on the input `type`. The original constructor is made private to enforce the use of the factory method. Subclasses for `Engineer`, `Salesman`, and `Manager` are also defined.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/replace-constructor-with-factory-method.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Employee\n{\n  // ...\n  public const int ENGINEER = 0,\n                   SALESMAN = 1,\n                   MANAGER = 2;\n\n  public static Employee Create(int type)\n  {\n    switch (type)\n    {\n      case ENGINEER:\n        return new Engineer();\n      case SALESMAN:\n        return new Salesman();\n      case MANAGER:\n        return new Manager();\n      default:\n        return new Employee(type);\n    }\n  }\n  private Employee(int type)\n  {\n    Type = type;\n  }\n}\npublic class Engineer: Employee\n{\n  // ...\n}\npublic class Salesman: Employee\n{\n  // ...\n}\npublic class Manager: Employee\n{\n  // ...\n}\n\n// Some clinet code.\nEmployee eng = Employee.Create(Employee.ENGINEER);\n```\n\n----------------------------------------\n\nTITLE: Customer and Order Classes with Direct Constructor Usage\nDESCRIPTION: This snippet defines Customer and Order classes in Java, where Order creates Customer objects directly via constructor. It shows client code that counts orders per customer by iterating over a collection, illustrating a straightforward but less flexible object reference pattern.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/change-value-to-reference.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nclass Customer {\n  private final String name;\n  public Customer(String name) {\n    this.name = name;\n  }\n  public String getName() {\n    return name;\n  }\n}\n\nclass Order {\n  //…\n  private Customer customer;\n  public String getCustomerName() {\n      return customer.getName();\n  }\n  public void setCustomer(String customerName) {\n    customer = new Customer(customerName);\n  }\n  public Order(String customerName) {\n    customer = new Customer(customerName);\n  }\n}\n\n// Some client code, which uses Order class.\nprivate static int numberOfOrdersFor(Collection orders, String customer) {\n  int result = 0;\n  Iterator iter = orders.iterator();\n  while (iter.hasNext()) {\n    Order each = (Order) iter.next();\n    if (each.getCustomerName().equals(customer)) {\n      result++;\n    }\n  }\n  return result;\n}\n```\n\n----------------------------------------\n\nTITLE: Refactored Price Calculation - PHP\nDESCRIPTION: This code snippet shows the refactored version of the `price()` method after extracting variables.  This version calculates `basePrice`, `quantityDiscount` and `shipping` into separate variables.  This significantly improves readability and makes the code easier to understand and maintain. It depends on the same input as the first snippet, but the output remains a float representing the calculated price.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/extract-variable.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\npublic function price() {\n  $basePrice = $this->quantity * $this->itemPrice;\n  $quantityDiscount = Math.max(0, $this->quantity - 500) * $this->itemPrice * 0.05;\n  $shipping = Math.min($basePrice * 0.1, 100.0);\n  return $basePrice - $quantityDiscount + $shipping;\n}\n```\n\n----------------------------------------\n\nTITLE: Refactoring shared parts into a base class in C#\nDESCRIPTION: Encourages extracting common properties and methods into an abstract base class, setting the stage for polymorphic rendering and reducing duplicated code across format-specific subclasses.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/form-template-method.md#_snippet_9\n\n\n\n----------------------------------------\n\nTITLE: Pure Query Method Extracted from Original Combined Method in Java\nDESCRIPTION: This snippet focuses on the extracted query method findCriminal, which returns the name of the found criminal without causing any side effects. It iterates over the array of people, returning \"Don\" or \"John\" if found, or an empty string otherwise. This method facilitates safe queries without triggering alerts, enabling clear separation of querying and modifying responsibilities.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/separate-query-from-modifier.md#_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\npublic String findCriminal(String[] people) {\n  for (int i = 0; i < people.length; i++) {\n    if (people[i].equals (\"Don\")) {\n      return \"Don\";\n    }\n    if (people[i].equals (\"John\")) {\n      return \"John\";\n    }\n  }\n  return \"\";\n}\n```\n\n----------------------------------------\n\nTITLE: Refactored Order Class with Customer Object in Java\nDESCRIPTION: This code snippet presents the refactored version of the Order class. The 'customer' field is now a 'Customer' object, encapsulating the customer's name. The Order class constructor and getter/setter methods are updated to interact with the Customer object. The client code also reflects this change.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/replace-data-value-with-object.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nclass Order {\n  // ...\n  private Customer customer;\n\n  public Order(String customerName) {\n    this.customer = new Customer(customerName);\n  }\n  public String getCustomerName() {\n    return customer.getName();\n  }\n  public void setCustomer(String customerName) {\n    this.customer = new Customer(customerName);\n  }\n}\n\nclass Customer {\n  private final String name;\n\n  public Customer(String name) {\n    this.name = name;\n  }\n  public String getName() {\n    return name;\n  }\n}\n\n// Client code, which uses Order class.\nprivate static int numberOfOrdersFor(Collection orders, String customer) {\n  int result = 0;\n  Iterator iter = orders.iterator();\n  while (iter.hasNext()) {\n    Order each = (Order) iter.next();\n    if (each.getCustomerName().equals(customer)) {\n      result++;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating NullCustomer class in C#\nDESCRIPTION: Implements a NullCustomer class that inherits from Customer and overrides the IsNull property to return true, identifying it as a null object.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/introduce-null-object.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic class NullCustomer: Customer\n{\n  public override bool IsNull\n  {\n    get{ return true; }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Original Order Class with Price Calculation Method in Java\nDESCRIPTION: This snippet shows the initial implementation of the 'Order' class, where the getPrice() method calculates the total price by directly computing base price and discount level, then passing these as parameters to the discountedPrice method. It's intended to illustrate the starting point before refactoring.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/replace-parameter-with-method-call.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nclass Order {\n  // ...\n  public double getPrice() {\n    int basePrice = quantity * itemPrice;\n    int discountLevel;\n    if (quantity > 100) {\n      discountLevel = 2;\n    }\n    else {\n      discountLevel = 1;\n    }\n    double finalPrice = discountedPrice(basePrice, discountLevel);\n    return finalPrice;\n  }\n  private double discountedPrice(int basePrice, int discountLevel) {\n    if (discountLevel == 2) {\n      return basePrice * 0.1;\n    }\n    else {\n      return basePrice * 0.05;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enhanced PHP classes implementing bidirectional association with link management\nDESCRIPTION: This example enhances the previous classes by adding methods to maintain consistent bidirectional links: the setCustomer method updates both Order and Customer, removing from the old customer and adding to the new customer. The Customer class maintains an array of orders and provides methods to manage it, ensuring references are synchronized. This approach helps preserve object relationship integrity during association changes.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/change-unidirectional-association-to-bidirectional.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nclass Order {\n  // ...\n  private $customer; // Customer\n\n  public function getCustomer() {\n    return $this->customer;\n  }\n  public function setCustomer(Customer $arg) {\n    // Remove order from old customer.\n    if (isset($this->customer)) {\n      $this->customer->friendOrders()->remove($this);\n    }\n    $this->customer = $arg;\n    // Add order to new customer.\n    if (isset($this->customer)) {\n      $this->customer->friendOrders()->add($this);\n    }\n  }\n}\n\nclass Customer {\n  // ...\n  private $orders = array();\n\n  // Should be used in Order class only.\n  public function friendOrders() {\n    return $this->orders;\n  }\n  public function addOrder(Order $arg) {\n    $arg->setCustomer($this);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Delegating the OfficeAreaCode Setter in Person Class (C#)\nDESCRIPTION: Rewrites the setter of the original `OfficeAreaCode` property in the `Person` class to delegate the assignment to the `AreaCode` property of the `officeTelephone` object, using the `value` keyword.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/extract-class.md#_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n{\n    officeTelephone.AreaCode = value;\n  }\n```\n\n----------------------------------------\n\nTITLE: Adding Courses - Java\nDESCRIPTION: This snippet defines the `AddCourse` and `RemoveCourse` methods to manage a collection of courses. These methods provide a controlled way to modify the collection from outside the class, enforcing encapsulation.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/encapsulate-collection.md#_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\n  public void AddCourse(Course course)\n  {\n    courses.Add(course);\n  }\n  public void RemoveCourse(Course course)\n  {\n    courses.Remove(course);\n  }\n```\n\n----------------------------------------\n\nTITLE: Selecting daysOverdrawn from overdraftCharge\nDESCRIPTION: This snippet indicates a selection of the `$daysOverdrawn` field within the `overdraftCharge` method. The context involves working within the `Account` class, and the goal is to modify how the `daysOverdrawn` field is used or accessed within that method. The output is likely a selected field\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/move-method.md#_snippet_9\n\nLANGUAGE: Text\nCODE:\n```\nSelect \"$daysOverdrawn\" in \"overdraftCharge\"\n```\n\n----------------------------------------\n\nTITLE: Initial Order Class Implementation in Java\nDESCRIPTION: This code snippet shows the initial implementation of the Order class with the customer field as a String. It also includes the client code which calculates the number of orders for a specific customer. This setup will be refactored to use a Customer object instead of a String.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/replace-data-value-with-object.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nclass Order {\n  // ...\n  private String customer;\n\n  public Order(String customer) {\n    this.customer = customer;\n  }\n  public String getCustomer() {\n    return customer;\n  }\n  public void setCustomer(String customer) {\n    this.customer = customer;\n  }\n}\n\n// Client code, which uses Order class.\nprivate static int numberOfOrdersFor(Collection orders, String customer) {\n  int result = 0;\n  Iterator iter = orders.iterator();\n  while (iter.hasNext()) {\n    Order each = (Order) iter.next();\n    if (each.getCustomer().equals(customer)) {\n      result++;\n    }\n  }\n  return result;\n}\n```\n\n----------------------------------------\n\nTITLE: Consolidating Duplicate Conditional Fragments in C#\nDESCRIPTION: This snippet presents the refactored version of SendEmailPromotion, where duplicate calls to ValidateEmailAddress and SendEmail are moved outside the conditional branches. First, ValidateEmailAddress is called before the conditional since it's safe and preferable to validate early; then, the total is set according to whether IsSpecialDeal returns true or false; finally, SendEmail is called once at the end. The method continues to depend on price, total, and the referenced methods. This refactoring improves maintainability and reduces risk of errors by centralizing shared operations. Inputs: current state of price, output: updated total and single email send.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/consolidate-duplicate-conditional-fragments.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\ndouble SendEmailPromotion()\n{\n  // ...\n  ValidateEmailAddress();\n  if (IsSpecialDeal()) {\n    total = price * 0.95;\n  }\n  else {\n    total = price * 0.98;\n  }\n  SendEmail();\n}\n```\n\n----------------------------------------\n\nTITLE: Original Price Calculation Method - C#\nDESCRIPTION: This is the original method that calculates the price based on quantity and item price, including discounts and shipping costs. The method contains a complex expression that is difficult to understand and maintain. This is the starting point for the Extract Variable refactoring.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/extract-variable.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\ndouble Price()\n{\n  // Price consists of: base price - discount + shipping cost\n  return quantity * itemPrice -\n    Math.Max(0, quantity - 500) * itemPrice * 0.05 +\n    Math.Min(quantity * itemPrice * 0.1, 100.0);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Blood Group Constants in C# Person Class\nDESCRIPTION: Defines integer constants in the Person class representing different blood groups. These constants lack encapsulation and are later refactored into a dedicated BloodGroup class. This snippet serves as the original type code representation before refactoring.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/replace-type-code-with-class.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic const int O = 0,\n                 A = 1,\n                 B = 2,\n                 AB = 3;\n```\n\n----------------------------------------\n\nTITLE: Refactoring Customer to Shared Reference Using Factory Method in C#\nDESCRIPTION: This snippet refactors the Customer class to use the Change Value to Reference pattern by making its constructor private and managing instances through a static Hashtable. The static LoadCustomers method initializes Customer objects once at program startup, storing them in the instances map. The Order class uses the static factory method GetByName to retrieve shared Customer references instead of creating new instances. This approach ensures all Orders referencing the same customer name share the same Customer object instance, improving memory usage and consistency. Key dependencies include System.Collections.Hashtable, and it requires preloading customers before use.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/change-value-to-reference.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Customer\n{\n  private static Hashtable instances = new Hashtable();\n\n  public string Name\n  {\n    get;\n    private set;\n  }\n\n  private Customer(string name)\n  {\n    this.Name = name;\n  }\n\n  public static Customer GetByName(string name)\n  {\n    return (Customer) instances[name];\n  }\n  //TODO: This code should be executed at the program launch.\n  public static void LoadCustomers()\n  {\n    new Customer(\"Lemon Car Hire\").Store();\n    new Customer(\"Associated Coffee Machines\").Store();\n    new Customer(\"Bilston Gasworks\").Store();\n  }\n  private void Store()\n  {\n    instances.Add(this.Name, this);\n  }\n}\n\npublic class Order\n{\n  // ...\n  private Customer customer;\n\n  public string CustomerName\n  {\n    get { return customer.Name; }\n  }\n\n  public Order(string customerName)\n  {\n    SetCustomer(customerName);\n  }\n  public SetCustomer(string customerName)\n  {\n    customer = Customer.GetByName(customerName);\n  }\n}\n//…\n// Client code, which uses Order class.\nprivate static int NumberOfOrdersFor(List<Order> orders, string customer)\n{\n  int result = 0;\n\n  if (orders != null)\n  {\n    foreach (Order order in orders)\n    {\n      if (string.Equals(order.CustomerName, customer))\n      {\n        result++;\n      }\n    }\n  }\n\n  return result;\n}\n```\n\n----------------------------------------\n\nTITLE: Manager: Add Bonus Property - C#\nDESCRIPTION: This code snippet adds the `Bonus` property to the `Manager` class. This property is specific to Manager and is being pushed down from the base class during the refactoring.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/replace-type-code-with-subclasses.md#_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\n\n  public int Bonus\n  {\n    get; set; \n  }\n\n```\n\n----------------------------------------\n\nTITLE: Encapsulating Total Course Count with a Property\nDESCRIPTION: Defines a public read-only property `NumberOfCourses` within the `Person` class (implied). This C# property encapsulates access to the total number of courses by returning the count of the internal `courses` collection.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/encapsulate-collection.md#_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\npublic int NumberOfCourses\n{\n  get{\n    return courses.Count;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Moving getEmployee Method to LaborItem in Java\nDESCRIPTION: Applies the 'Push Down Method' refactoring technique by moving the `getEmployee` method from the `JobItem` superclass to the `LaborItem` subclass. This places the method responsible for accessing the employee associated with a labor item directly within the `LaborItem` class, improving cohesion. The `employee` field in `JobItem` was previously made `protected` to allow this.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/extract-subclass.md#_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n\n  public Employee getEmployee() {\n    return employee;\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Defining Salesman and Manager Subclasses with Overridden getType Methods in Java\nDESCRIPTION: Defines 'Salesman' and 'Manager' subclasses extending Employee. Each overrides the 'getType()' method to return their respective type constants: Employee.SALESMAN and Employee.MANAGER. This supports substitution for polymorphic behavior where type-based conditionals existed. Requires Employee base class, SALESMAN and MANAGER constants. Inputs: none; outputs: specialized subclass instances.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/replace-type-code-with-subclasses.md#_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\n\nclass Salesman extends Employee {\n  @Override public int getType() {\n    return Employee.SALESMAN;\n  }\n}\n\n```\n\nLANGUAGE: Java\nCODE:\n```\n\nclass Manager extends Employee {\n  @Override public int getType() {\n    return Employee.MANAGER;\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Moving Interest Rate to AccountType and Using Accessors - PHP\nDESCRIPTION: This snippet illustrates the refactored structure where the interestRate field is moved from Account to the AccountType class. Accessor methods (getInterestRate and setInterestRate) are introduced in AccountType and mirrored by proxy in the Account class. The Account class no longer holds the interestRate directly, but accesses it through its type property. Several Account methods (including interestForAmount_days and interestForBigFamily) utilize the getInterestRate proxy, easing future updates. Dependencies: AccountType must define getInterestRate and setInterestRate. Expected input and output are similar to the previous version, but field reads/writes are delegated.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/move-field.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nclass Account {\n  // ...\n  private $type; // AccountType\n\n  public function interestForAmount_days($amount, $days) {\n    return $this->getInterestRate() * $amount * $days / 365.0;\n  }\n  public function interestForBigFamily($familySize) {\n    return $this->getInterestRate() / $familySize;\n  }\n\n  // other 10 methods, which use getInterestRate()\n\n  private function getInterestRate() {\n    return $this->type->getInterestRate();\n  }\n  private function setInterestRate($arg) {\n    $this->type->setInterestRate($arg);\n  }\n}\n\nclass AccountType {\n  // ...\n  private $interestRate;\n\n  public function getInterestRate() {\n    return $this->interestRate;\n  }\n  public function setInterestRate($arg) {\n    $this->interestRate = $arg;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Refactored Classes with Subclasses - PHP\nDESCRIPTION: This code snippet shows the refactored classes after applying the Extract Subclass refactoring pattern. It introduces abstract class `JobItem` with two subclasses `PartsItem` and `LaborItem`.  `PartsItem` and `LaborItem` each have different implementations for retrieving the unit price. The sample client code instantiates these subclasses. This demonstrates how to get the different behavior into distinct, manageable classes, thereby simplifying the original logic and promoting better object-oriented design.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/extract-subclass.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n```\nabstract class JobItem {\n  private $quantity;\n\n  protected function __construct($quantity) {\n    $this->quantity = $quantity;\n  }\n  public function getTotalPrice() {\n    return $this->quantity * $this->getUnitPrice();\n  }\n  public function getQuantity() {\n    return $this->quantity;\n  }\n  public abstract function getUnitPrice();\n}\n\nclass PartsItem extends JobItem {\n  private $unitPrice;\n\n  public function __construct($quantity, $unitPrice) {\n    parent::__construct($quantity);\n    $this->unitPrice = $unitPrice;\n  }\n  public function getUnitPrice() {\n    return $this->unitPrice;\n  }\n}\n\nclass LaborItem extends JobItem {\n  private $employee; // Employee\n\n  public function __construct($quantity, Employee $employee) {\n    parent::__construct($quantity);\n    $this->employee = $employee;\n  }\n  public function getEmployee() {\n    return $this->employee;\n  }\n  public function getUnitPrice() {\n    return $this->employee->getRate();\n  }\n}\n\nclass Employee {\n  private $rate;\n  public function __construct($rate) {\n    $this->rate = $rate;\n  }\n  public function getRate() {\n    return $this->rate;\n  }\n}\n\n// Somewhere in client code\n$kent = new Employee(50);\n$j1 = new LaborItem(5, kent);\n$j2 = new PartsItem(15, 10);\n$total = $j1->getTotalPrice() + $j2->getTotalPrice();\n```\n```\n\n----------------------------------------\n\nTITLE: Create Salesman Subclass - C#\nDESCRIPTION: This code snippet creates a subclass `Salesman` that inherits from the `Employee` class. It overrides the `Type` property to return the `SALESMAN` constant from the `Employee` class. This represents the specific behavior of a salesman type within the employee hierarchy.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/replace-type-code-with-subclasses.md#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\n\n\npublic class Salesman: Employee\n{\n  public int Type\n  {\n    get{ return Employee.SALESMAN; }\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Closing the constructor of BloodGroup\nDESCRIPTION: This snippet suggests making the constructor of BloodGroup private to prevent external instantiation, enforcing the use of static factory methods for predefined blood types, promoting safer design.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/replace-type-code-with-class.md#_snippet_12\n\nLANGUAGE: Java\nCODE:\n```\nprivate\n```\n\n----------------------------------------\n\nTITLE: Refactored Java Classes with Abstract Superclass 'Party'\nDESCRIPTION: This snippet shows the complete refactoring of 'Employee' and 'Department' classes into subclasses of an abstract class 'Party'. The 'Party' class contains shared attributes and abstract methods, while subclasses implement specific behaviors like cost calculations and staff counting. The structure emphasizes inheritance and polymorphism to consolidate common code.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/extract-superclass.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nabstract class Party {\n  protected String name;\n\n  protected Party(String name) {\n    this.name = name;\n  }\n  public String getName() {\n    return name;\n  }\n  public abstract int getAnnualCost();\n  public abstract int getHeadCount();\n}\n\nclass Employee extends Party {\n  private int annualCost;\n  private String id;\n\n  public Employee(String name, String id, int annualCost) {\n    super(name);\n    this.id = id;\n    this.annualCost = annualCost;\n  }\n  @Override public int getAnnualCost() {\n    return annualCost;\n  }\n  public String getId() {\n    return id;\n  }\n  @Override public int getHeadCount() {\n    return 1;\n  }\n}\n\nclass Department extends Party {\n  private Vector items = new Vector();\n\n  public Department(String name) {\n    super(name);\n  }\n  @Override public int getAnnualCost() {\n    int result = 0;\n    Iterator i = items.iterator();\n    while (i.hasNext()) {\n      Party each = (Party) i.next();\n      result += each.getAnnualCost();\n    }\n    return result;\n  }\n  @Override public int getHeadCount() {\n    int headCount = 0;\n    Iterator i = items.iterator();\n    while (i.hasNext()) {\n      Party each = (Party) i.next();\n      headCount += each.getHeadCount();\n    }\n    return headCount;\n  }\n  public Enumeration getItems() {\n    return items.elements();\n  }\n  public void addItem(Party arg) {\n    items.addElement(arg);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Refactored Employee Class with Strategy Pattern in PHP\nDESCRIPTION: This code refactors the Employee class to encapsulate employee behaviors into separate classes, each representing a specific employee type. It introduces an abstract EmployeeType class with subclasses for each type, a factory method for creation, and delegates pay calculation to the type object, reducing switch statements and coupling. The employee's type property is replaced with a type object, promoting polymorphic behavior.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/replace-type-code-with-state-strategy.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nclass Employee {\n  // ...\n  private $type; // EmployeeType\n\n  public function __construct($arg) {\n    $this->type = EmployeeType::newType($arg);\n  }\n  public function getTypeCode() {\n    return $this->type->getTypeCode();\n  }\n  public function setTypeCode($arg) {\n    $this->type = EmployeeType::newType($arg);\n  }\n\n  public $monthlySalary;\n  public $commission;\n  public $bonus;\n  public function payAmount() {\n    return $this->type->payAmount($this);\n  }\n}\n\nabstract class EmployeeType {\n  const ENGINEER = 0;\n  const SALESMAN = 1;\n  const MANAGER = 2;\n\n  abstract public function getTypeCode();\n  public static function newType($code) {\n    switch ($code) {\n      case self::ENGINEER:\n        return new Engineer();\n      case self::SALESMAN:\n        return new Salesman();\n      case self::MANAGER:\n        return new Manager();\n      default:\n        throw new Exception(\"Incorrect Employee Code\");\n    }\n  }\n\n  abstract public function payAmount(Employee $employee);\n}\nclass Engineer extends EmployeeType {\n  public function getTypeCode() {\n    return EmployeeType::ENGINEER;\n  }\n  public function payAmount(Employee $employee) {\n    return $employee->monthlySalary;\n  }\n}\nclass Salesman extends EmployeeType {\n  public function getTypeCode() {\n    return EmployeeType::SALESMAN;\n  }\n  public function payAmount(Employee $employee) {\n    return $employee->monthlySalary + $employee->commission;\n  }\n}\nclass Manager extends EmployeeType {\n  public function getTypeCode() {\n    return EmployeeType::MANAGER;\n  }\n  public function payAmount(Employee $employee) {\n    return $employee->monthlySalary + $employee->bonus;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating client code to use BloodGroup objects\nDESCRIPTION: This snippet shows client code constructing Persons with blood types via static methods, replacing raw integer codes with object-oriented calls, enabling safer and more expressive code.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/replace-type-code-with-class.md#_snippet_8\n\nLANGUAGE: Java\nCODE:\n```\nPerson parent = new Person(BloodGroup.O().getCode());\nif (parent.getBloodGroup() == BloodGroup.AB().getCode()) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Pushing Down Fields and Methods to Subclasses in Java\nDESCRIPTION: Moves payroll-related fields and methods such as 'commission', 'bonus', and 'payAmount' from the Employee superclass into relevant subclasses like Salesman and Manager. This follows the principle that functionality and data tied to employee type should reside within the specialized subclass, eliminating unnecessary data in the superclass. Requires previously created subclasses. Inputs include payroll attributes; outputs specialized payroll calculations in appropriate subclasses.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/replace-type-code-with-subclasses.md#_snippet_8\n\nLANGUAGE: Java\nCODE:\n```\n  public int commission;\n\n```\n\nLANGUAGE: Java\nCODE:\n```\n\n  @Override public int payAmount() {\n    return monthlySalary + commission;\n  }\n\n```\n\nLANGUAGE: Java\nCODE:\n```\n  public int bonus;\n\n```\n\nLANGUAGE: Java\nCODE:\n```\n\n  @Override public int payAmount() {\n    return monthlySalary + bonus;\n  }\n\n```\n\nLANGUAGE: Java\nCODE:\n```\n    return monthlySalary;\n\n```\n\n----------------------------------------\n\nTITLE: Refactored Employee Class with Generic Raise Method in PHP\nDESCRIPTION: Introduces a new 'raise' method that takes a factor parameter, replacing specific salary increase logic. The promoteToManager method is updated to use raise with a coefficient. Client code calls are also updated to use the new method directly, simplifying the class structure.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/parameterize-method.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nclass Employee {\n  // ...\n  public function promoteToManager() {\n    $this->type = Employee::MANAGER;\n    $this->raise(0.5);\n  }\n  public function raise($factor) {\n    $this->salary *= (1 + $factor);\n  }\n}\n\n// Somewhere in client code\nif ($employee->yearsOfExperience > 5) {\n  if (count($employee->clients) > 10) {\n    $employee->promoteToManager();\n  }\n  else {\n    $employee->raise(0.05);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Abstract Methods for Common View Components in PHP\nDESCRIPTION: This snippet sets up the abstract class methods that represent common view components such as title, intro, body, and footer. These methods are placeholders intended to be implemented by subclasses, promoting code reuse. The snippet leverages PHP's 'abstract' keyword and prepares a 'view' method that concatenates these components.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/form-template-method.md#_snippet_15\n\nLANGUAGE: PHP\nCODE:\n```\nprotected abstract function title();\nprotected abstract function intro();\nprotected abstract function body();\nprotected abstract function footer();\n```\n\n----------------------------------------\n\nTITLE: Defining a Range Class with Direct Field Access in Java\nDESCRIPTION: This snippet defines a basic Java class IntRange with two private fields, low and high, and methods that access these fields directly. It includes a constructor for initialization and two methods: includes(int arg) to check if a number is within the range, and grow(int factor) to scale the high field. No encapsulation via getters or setters is used in this version.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/self-encapsulate-field.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nclass IntRange {\n  private int low, high;\n\n  public boolean includes(int arg) {\n    return arg >= low && arg <= high;\n  }\n  public void grow(int factor) {\n    high = high * factor;\n  }\n  public IntRange(int low, int high) {\n    this.low = low;\n    this.high = high;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding SetCustomer Method - C#\nDESCRIPTION: This snippet adds a new `SetCustomer` method to the `Order` class to set the customer by name. This method encapsulates the logic previously present in the order constructor.  The method takes the customer's name as a string parameter, finds the customer using `Customer.GetByName`, and sets the `customer` field.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/change-value-to-reference.md#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\n  public SetCustomer(string customerName)\n  {\n    customer = Customer.GetByName(customerName);\n  }\n```\n\n----------------------------------------\n\nTITLE: Selecting Outstanding Calculation Code for Extraction (Java)\nDESCRIPTION: This code block, selected from `printOwing`, initializes (`elements`, `outstanding`) and calculates the total `outstanding` amount by iterating over an `orders` collection (assumed accessible). It declares and modifies local variables, specifically `outstanding`, which is used later in the original method.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/extract-method.md#_snippet_10\n\nLANGUAGE: Java\nCODE:\n```\n  Enumeration elements = orders.elements();\n  double outstanding = 0.0;\n\n  // print owings\n  while (elements.hasMoreElements()) {\n    Order each = (Order) elements.nextElement();\n    outstanding += each.getAmount();\n  }\n```\n\n----------------------------------------\n\nTITLE: Modifying Order Setter for Bidirectional Link (PHP)\nDESCRIPTION: Modifies the `setCustomer` method in the `Order` class to maintain the bidirectional association. It first removes the order from the old customer's collection (if one exists) and then adds the order to the new customer's collection (if one is being set), ensuring the link is updated correctly on both sides.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/change-unidirectional-association-to-bidirectional.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n\n    // Remove order from old customer.\n    if (isset($this->customer)) {\n      $this->customer->friendOrders()->remove($this);\n    }\n\n```\n\nLANGUAGE: PHP\nCODE:\n```\n\n    // Add order to new customer.\n    if (isset($this->customer)) {\n      $this->customer->friendOrders()->add($this);\n    }\n\n```\n\n----------------------------------------\n\nTITLE: Updating Factory for Salesman PHP\nDESCRIPTION: This snippet updates the factory method to create a `Salesman` object. It adds another `case` to the `switch` statement within the `create` method, this time handling the `SALESMAN` type. This ensures the factory instantiates the correct employee subclasses.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/replace-type-code-with-subclasses.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\n      case self::SALESMAN:\n        return new Salesman();\n```\n\n----------------------------------------\n\nTITLE: Original Employee Class with Type Code in Java\nDESCRIPTION: This code snippet presents a basic `Employee` class that uses an integer `type` field to represent different employee roles. The `payAmount()` method utilizes a `switch` statement to determine the salary calculation based on the employee's type. It serves as a starting point for refactoring to use subclasses and polymorphism. The code defines constants for different employee types: `ENGINEER`, `SALESMAN`, and `MANAGER`.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/replace-type-code-with-subclasses.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nclass Employee {\n  // ...\n  static final int ENGINEER = 0;\n  static final int SALESMAN = 1;\n  static final int MANAGER = 2;\n\n  public int type;\n\n  public Employee(int arg) {\n    type = arg;\n  }\n\n  public int monthlySalary;\n  public int commission;\n  public int bonus;\n  public int payAmount() {\n    switch (type) {\n      case ENGINEER:\n        return monthlySalary;\n      case SALESMAN:\n        return monthlySalary + commission;\n      case MANAGER:\n        return monthlySalary + bonus;\n      default:\n        throw new RuntimeException(\"Incorrect Employee Code\");\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Observer Pattern in IntervalWindow - Java\nDESCRIPTION: This Java code implements the Observer pattern. The IntervalWindow class now implements the Observer interface and maintains an Interval object as its subject. When the subject's data changes, the update method is called to update the text fields in the GUI.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/duplicate-observed-data.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nclass IntervalWindow extends Frame implements Observer {\n  java.awt.TextField startField;\n  java.awt.TextField endField;\n  java.awt.TextField lengthField;\n  private Interval subject;\n\n  public IntervalWindow() {\n    startField = new java.awt.TextField();\n    endField = new java.awt.TextField();\n    lengthField = new java.awt.TextField();\n    SymFocus focusListener = new SymFocus();\n    startField.addFocusListener(focusListener);\n    endField.addFocusListener(focusListener);\n    lengthField.addFocusListener(focusListener);\n\n    subject = new Interval();\n    subject.addObserver(this);\n    update(subject, null);\n  }\n\n  class SymFocus extends java.awt.event.FocusAdapter {\n    public void focusLost(java.awt.event.FocusEvent event) {\n      Object object = event.getSource();\n      if (object == startField) {\n        StartField_FocusLost(event);\n      }\n      else if (object == endField) {\n        EndField_FocusLost(event);\n      }\n      else if (object == lengthField) {\n        LengthField_FocusLost(event);\n      }\n    }\n\n    void StartField_FocusLost(java.awt.event.FocusEvent event) {\n      setStart(startField.getText());\n      if (isNotInteger(getStart())) {\n        setStart(\"0\");\n      }\n      subject.calculateLength();\n    }\n\n    void EndField_FocusLost(java.awt.event.FocusEvent event) {\n      setEnd(endField.getText());\n      if (isNotInteger(getEnd())) {\n        setEnd(\"0\");\n      }\n      subject.calculateLength();\n    }\n\n    void LengthField_FocusLost(java.awt.event.FocusEvent event) {\n      setLength(lengthField.getText());\n      if (isNotInteger(getLength())) {\n        setLength(\"0\");\n      }\n      subject.calculateEnd();\n    }\n  }\n\n  public void update(Observable observed, Object arg) {\n    endField.setText(subject.getEnd());\n    startField.setText(subject.getStart());\n    lengthField.setText(subject.getLength());\n  }\n\n  String getEnd() {\n    return subject.getEnd(arg);\n  }\n  void setEnd(String arg) {\n    subject.setEnd(arg);\n  }\n  String getStart() {\n    return subject.getStart(arg);\n  }\n  void setStart(String arg) {\n    subject.setStart(arg);\n  }\n  String getLength() {\n    return subject.getLength(arg);\n  }\n  void setLength(String arg) {\n    subject.setLength(arg);\n  }\n}\n\nclass Interval extends Observable {\n  private String end = \"0\";\n  private String start = \"0\";\n  private String length = \"0\";\n\n  String getEnd() {\n    return end;\n  }\n  void setEnd(String arg) {\n    end = arg;\n    setChanged();\n    notifyObservers();\n  }\n  String getStart() {\n    return start;\n  }\n  void setStart(String arg) {\n    start = arg;\n    setChanged();\n    notifyObservers();\n  }\n  String getLength() {\n    return length;\n  }\n  void setLength(String arg) {\n    length = arg;\n    setChanged();\n    notifyObservers();\n  }\n\n  void calculateLength() {\n    try {\n      int start = Integer.parseInt(getStart());\n      int end = Integer.parseInt(getEnd());\n      int length = end - start;\n      setLength(String.valueOf(length));\n    } catch (NumberFormatException e) {\n      throw new RuntimeException (\"Unexpected Number Format Error\");\n    }\n  }\n  void calculateEnd() {\n    try {\n      int start = Integer.parseInt(getStart());\n      int length = Integer.parseInt(getLength());\n      int end = start + length;\n      setEnd(String.valueOf(end));\n    } catch (NumberFormatException e) {\n      throw new RuntimeException (\"Unexpected Number Format Error\");\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Refactored State: Direct Access to Delegate\nDESCRIPTION: The refactored Java code after applying the 'Remove Middle Man' technique. The `Person` class now provides a `getDepartment()` method, allowing the client to directly access the `Department` object and call its `getManager()` method (`manager = john.getDepartment().getManager();`). The redundant `getManager()` method in `Person` has been removed.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/remove-middle-man.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nclass Person {\n  private Department department;\n\n  public Department getDepartment() {\n    return department;\n  }\n  public void setDepartment(Department arg) {\n    department = arg;\n  }\n}\n\nclass Department {\n  private String chargeCode;\n  private Person manager;\n\n  public Department(Person arg) {\n    manager = arg;\n  }\n  public Person getManager() {\n    return manager;\n  }\n\n  //…\n}\n\n// Somewhere in client code\nmanager = john.getDepartment().getManager();\n```\n\n----------------------------------------\n\nTITLE: Delegating setEnd from IntervalWindow to Interval (Java)\nDESCRIPTION: Replaces the implementation of the `setEnd` method in the `IntervalWindow` class. Instead of directly setting the GUI field, it now calls `subject.setEnd(arg)`, delegating the responsibility of updating the 'end' value to the `Interval` domain object. The GUI update will happen via the Observer pattern (`update` method).\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/duplicate-observed-data.md#_snippet_22\n\nLANGUAGE: Java\nCODE:\n```\n    subject.setEnd(arg);\n\n```\n\n----------------------------------------\n\nTITLE: Refactored Person and TelephoneNumber Classes\nDESCRIPTION: This code snippet shows the refactored code, with the telephone number related functionality extracted into a new TelephoneNumber class. The Person class now holds a reference to a TelephoneNumber object and delegates the GetTelephoneNumber() method call to it. The TelephoneNumber class encapsulates the area code and number and provides its own GetTelephoneNumber() method.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/extract-class.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic class Person\n{\n  private TelephoneNumber officeTelephone = new TelephoneNumber();\n\n  public string Name\n  {\n    get;\n  }\n  public TelephoneNumber OfficeTelephone\n  {\n    get {\n      return officeTelephone;\n    }\n  }\n\n  public string GetTelephoneNumber()\n  {\n    return officeTelephone.GetTelephoneNumber();\n  }\n}\n\npublic class TelephoneNumber\n{\n  public string AreaCode\n  {\n    get;\n    set;\n  }\n  public string Number\n  {\n    get;\n    set;\n  }\n\n  public string GetTelephoneNumber()\n  {\n    return \"(\" + AreaCode + \") \" + Number;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing specific employee type subclasses (Java)\nDESCRIPTION: Creates subclasses for each employee type (Engineer, Salesman, Manager), overriding the method to return their specific type code constants, enabling polymorphic behavior based on employee type.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/replace-type-code-with-state-strategy.md#_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\nclass Engineer extends EmployeeType {\n  @Override public int getTypeCode() {\n    return Employee.ENGINEER;\n  }\n}\nclass Salesman extends EmployeeType {\n  @Override public int getTypeCode() {\n    return Employee.SALESMAN;\n  }\n}\nclass Manager extends EmployeeType {\n  @Override public int getTypeCode() {\n    return Employee.MANAGER;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Encapsulated Property for Total Course Count (After Refactoring)\nDESCRIPTION: Shows the C# code after refactoring, replacing the direct access `kent.Courses.Count` with the newly created encapsulated property `kent.NumberOfCourses`.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/encapsulate-collection.md#_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\nkent.NumberOfCourses\n```\n\n----------------------------------------\n\nTITLE: Selecting Banner Code for Extraction PHP\nDESCRIPTION: This snippet shows the initial block of code responsible for printing a banner. It is selected within the original 'printOwing' method as the first candidate for extraction into a new method.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/extract-method.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n  // print banner\n  print(\"*****************************\\n\");\n  print(\"****** Customer totals ******\\n\");\n  print(\"*****************************\\n\");\n```\n\n----------------------------------------\n\nTITLE: Constructing Gamma Class Constructor in PHP\nDESCRIPTION: Implements a constructor in the Gamma class accepting the original Account source object and method parameters inputVal, quantity, and yearToDate. These parameters are stored in respective private properties to maintain state within the new class instance.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/replace-method-with-method-object.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n\n  public function __construct(Account $source, $inputValArg, $quantityArg, $yearToDateArg) {\n    $this->account = $source;\n    $this->inputVal = $inputValArg;\n    $this->quantity = $quantityArg;\n    $this->yearToDate = $yearToDateArg;\n  }\n```\n\n----------------------------------------\n\nTITLE: Declaring Abstract Method in Superclass (PHP)\nDESCRIPTION: Declares an abstract method 'getAnnualCost' in the 'Party' superclass. Since the implementation differs between 'Employee' and 'Department', the common interface is defined in the parent, forcing subclasses to provide their specific implementation.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/extract-superclass.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nabstract class Party {\n  // ... other fields and methods\n\n  public abstract function getAnnualCost();\n}\n```\n\n----------------------------------------\n\nTITLE: Calling New FindAppointments Method from Old Method - C#\nDESCRIPTION: Demonstrates replacing the body of the old FindAppointments(DateTime date) method with a call to the new overloaded method, supplying null for the name parameter. This preserves existing functionality while redirecting all calls to the enhanced method. Ensures backward compatibility during refactoring and simplifies eventual removal of the original method.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/add-parameter.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\n    FindAppointments(date, null);\n```\n\n----------------------------------------\n\nTITLE: Before: Bidirectional Customer-Order Association (Java)\nDESCRIPTION: This snippet shows the initial state with a bidirectional association between the Order and Customer classes. The Order class holds a direct reference to its Customer, and the Customer class holds a collection of its Orders. The `setCustomer` method in `Order` is responsible for maintaining the consistency of the link on both sides, tightly coupling the two classes.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/change-bidirectional-association-to-unidirectional.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nclass Order {\n  // ...\n  private Customer customer;\n\n  public Customer getCustomer() {\n    return customer;\n  }\n  public void setCustomer(Customer arg) {\n    // Remove order from old customer.\n    if (customer != null) {\n      customer.friendOrders().remove(this);\n    }\n    customer = arg;\n    // Add order to new customer.\n    if (customer != null) {\n      customer.friendOrders().add(this);\n    }\n  }\n\n  double getDiscountedPrice() {\n    return getGrossPrice() * (1 - getCustomer().getDiscount());\n  }\n}\n\nclass Customer {\n  // ...\n  private Set orders = new HashSet();\n\n  // Should be used in Order class only.\n  Set friendOrders() {\n    return orders;\n  }\n  void addOrder(Order arg) {\n    arg.setCustomer(this);\n  }\n\n  double getPriceFor(Order order) {\n     Assert.isTrue(orders.contains(order));\n     return order.getDiscountedPrice();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using component properties in Format-specific View() methods in C#\nDESCRIPTION: The main View() methods in each subclass are simplified to concatenate the component properties, streamlining the format-specific rendering logic and eliminating redundancy in string assembly.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/form-template-method.md#_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nreturn Title + Intro + Body + Footer;\n```\n\n----------------------------------------\n\nTITLE: Before Refactoring: Subclasses with Constant Methods (C#)\nDESCRIPTION: Shows the initial state with an abstract `Person` base class and concrete `Male` and `Female` subclasses. Each subclass overrides abstract properties (`IsMale`, `Code`) to return fixed, constant values specific to the subclass type. Client code instantiates objects directly using the subclass constructors.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/replace-subclass-with-fields.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic abstract class Person\n{\n  public abstract bool IsMale\n  { get; }\n  public abstract char Code\n  { get; }\n}\n\npublic class Male: Person\n{\n  public override bool IsMale\n  {\n    get{ return true; }\n  }\n  public override char Code\n  {\n    get{ return 'M'; }\n  }\n}\npublic class Female: Person\n{\n  public override bool IsMale\n  {\n    get{ return false; }\n  }\n  public override char Code\n  {\n    get{ return 'F'; }\n  }\n}\n\n// Client code\nPerson kent = new Male();\nConsole.WriteLine(\"Person's gender is: \" + kent.Code);\n```\n\n----------------------------------------\n\nTITLE: Refactoring Java Class to Restrict Field Modification to Constructor\nDESCRIPTION: This snippet shows a simple Java class 'Account' where the 'id' field is set via constructor and a setter method is present. The goal is to remove the setter to ensure 'id' is only initialized once during object creation, improving immutability and encapsulation.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/remove-setting-method.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nclass Account {\n  // ...\n  private String id;\n\n  public Account(String id) {\n    setId(id);\n  }\n  public void setId(String id) {\n    this.id = id;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Overdraft Charge - C# Implementation in AccountType\nDESCRIPTION: This snippet demonstrates the implementation of the OverdraftCharge() method after moving it from the Account class to the AccountType class. The method determines overdraft fees based on account type, using a premium check and the number of days overdrawn, which is now passed as a parameter, adhering to the refactoring principle. Dependencies include access to an IsPremium() method within AccountType. Input parameter is daysOverdrawn (int), and the method returns the calculated fee as a double.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/move-method.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n\n  public double OverdraftCharge(int daysOverdrawn)\n  {\n    if (IsPremium())\n    {\n      double result = 10;\n      if (daysOverdrawn > 7)\n      {\n        result += (daysOverdrawn - 7) * 0.85;\n      }\n      return result;\n    }\n    else\n    {\n      return daysOverdrawn * 1.75;\n    }\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Calculate Price with Original Expression - PHP\nDESCRIPTION: This code snippet represents the original implementation of the `price()` method, which calculates the price based on quantity, item price, discount, and shipping cost. The method uses a single, complex expression, making it difficult to understand. The input is assumed to be the object properties such as quantity and itemPrice. The output is the calculated price as a float.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/extract-variable.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\npublic function price() {\n  // Price consists of: base price - discount + shipping cost\n  return $this->quantity * $this->itemPrice -\n    Math.max(0, $this->quantity - 500) * $this->itemPrice * 0.05 +\n    Math.min($this->quantity * $this->itemPrice * 0.1, 100.0);\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing constant coding with static method calls\nDESCRIPTION: This snippet replaces the use of integer constants for blood types with calls to static methods of BloodGroup, delegating type representation to objects and improving type safety.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/replace-type-code-with-class.md#_snippet_7\n\nLANGUAGE: Java\nCODE:\n```\npublic static final int O = BloodGroup.O().getCode();\npublic static final int A = BloodGroup.A().getCode();\npublic static final int B = BloodGroup.B().getCode();\npublic static final int AB = BloodGroup.AB().getCode();\n```\n\n----------------------------------------\n\nTITLE: Original Delegating Properties in Person Class (C#)\nDESCRIPTION: Shows the original `OfficeAreaCode` and `OfficeNumber` properties in the `Person` class after refactoring to delegate calls to the `TelephoneNumber` instance. This section might be removed if choosing to expose the `TelephoneNumber` object directly.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/extract-class.md#_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\npublic string OfficeAreaCode\n{\n  get {\n    return officeTelephone.AreaCode;\n  }\n  set {\n    officeTelephone.AreaCode = value;\n  }\n}\npublic string OfficeNumber\n{\n  get {\n    return officeTelephone.Number;\n  }\n  set {\n    officeTelephone.Number = value;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Call Site in bankCharge Method (Java)\nDESCRIPTION: Modifies the call to `overdraftCharge` within the `bankCharge` method (presumably part of the `Account` class or a related context) to invoke the method on the `AccountType` instance (`type`) instead of the `Account` instance itself. The `daysOverdrawn` value is passed as an argument to the new method signature.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/move-method.md#_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\ntype.overdraftCharge(daysOverdrawn)\n```\n\n----------------------------------------\n\nTITLE: Making IntervalWindow an IObserver of Interval in C#\nDESCRIPTION: Modifies the 'IntervalWindow' class declaration to implement 'IObserver<Interval>', indicating that the window class will observe the domain model for updates. This sets the stage for handling interval change notifications.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/duplicate-observed-data.md#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nIntervalWindow : Form, IObserver<Interval>\n```\n\n----------------------------------------\n\nTITLE: Refactoring 'GetUnitPrice' Method for Subclass Specific Behavior\nDESCRIPTION: The 'GetUnitPrice' method is maintained in 'JobItem' as abstract, requiring subclasses like 'PartsItem' to implement their own version, supporting polymorphism based on specific item types.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/extract-subclass.md#_snippet_19\n\nLANGUAGE: C#\nCODE:\n```\npublic abstract int GetUnitPrice();\n```\n\n----------------------------------------\n\nTITLE: Updating Order class to set Customer with proper relationship handling in Java\nDESCRIPTION: Modifies the 'setCustomer' method in the Order class to correctly update the association. It removes the current Order from the previous Customer, updates the Order's Customer reference, and adds the Order to the new Customer's order collection, ensuring consistency.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/change-unidirectional-association-to-bidirectional.md#_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\n// Remove order from old customer.\nif (customer != null) {\n  customer.friendOrders().remove(this);\n}\n```\n\nLANGUAGE: Java\nCODE:\n```\n// Add order to new customer.\nif (customer != null) {\n  customer.friendOrders().add(this);\n}\n```\n\nLANGUAGE: Java\nCODE:\n```\n// Setter method in Order class.\nvoid setCustomer(Customer customer) {\n  // Implementation as shown above.\n}\n```\n\n----------------------------------------\n\nTITLE: Adding 'name' Parameter to FindAppointments Method - C#\nDESCRIPTION: Expands the FindAppointments method in the Calendar class to accept an additional string name parameter, enabling filtering of appointments by both date and attendee name. The method checks if the name is null or empty, or matches the appointment's Name property, before adding it to the result list. This approach supports backward compatibility by allowing null for the name to retrieve all appointments on that date. Dependencies include the Appointment class, its Name and Date properties, and the existing kent.GetCourses() method. Expected inputs are a DateTime and an optional string for the attendee's name; the output is a filtered list of appointments. This version prevents call-site breaking by making the new parameter optional for existing behaviors.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/add-parameter.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nclass Calendar\n{\n  // ...\n  private List<Appointment> appointments;\n\n  public List<Appointment> FindAppointments(DateTime date, string name)\n  {\n    List<Appointment> result = new List<Appointment>();\n\n    foreach (Appointment item in kent.GetCourses())\n    {\n      if (date.Date == item.Date.Date)\n      {\n        if (string.IsNullOrEmpty(name) || name == item.Name)\n        {\n          result.Add(date);\n        }\n      }\n    }\n\n    return result;\n  }\n}\n\n// Somewhere in client code\nDateTime today = DateTime.Now;\nappointments = calendar.FindAppointments(today, null);\n```\n\n----------------------------------------\n\nTITLE: Overriding getWeeksDelinquentInLastYear in NullPaymentHistory to Return Default Value in Java\nDESCRIPTION: Overrides getWeeksDelinquentInLastYear() in NullPaymentHistory to return 0, providing a safe default value for payment delinquency when no payment history exists, thus avoiding null pointer errors in client code.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/introduce-null-object.md#_snippet_13\n\nLANGUAGE: Java\nCODE:\n```\n\n  @Override public int getWeeksDelinquentInLastYear() {\n    return 0;\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Implementing EmployeeType Subclasses for Different Employee Roles in C#\nDESCRIPTION: Implements concrete subclasses of EmployeeType for each distinct employee role: Engineer, Salesman, and Manager. Each subclass overrides the EmployeeCode property to return the corresponding constant representing the employee type. These subclasses encapsulate the behavior and identity of each employee category.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/replace-type-code-with-state-strategy.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Engineer: EmployeeType\n{\n  public override int EmployeeCode\n  {\n    get{ return Employee.ENGINEER; }\n  }\n}\n\npublic class Salesman: EmployeeType\n{\n  public override int EmployeeCode\n  {\n    get{ return Employee.SALESMAN; }\n  }\n}\n\npublic class Manager: EmployeeType\n{\n  public override int EmployeeCode\n  {\n    get{ return Employee.MANAGER; }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Refactored Stadium Ticket Price Calculation using Decompose Conditional in Java\nDESCRIPTION: This snippet shows the `Stadium` class after applying the 'Decompose Conditional' refactoring. The original conditional logic in `getTicketPrice` has been simplified by extracting the condition into a method `isSummer` and the charge calculations for the 'then' and 'else' branches into `summerCharge` and `winterCharge` methods, respectively. This makes the main `getTicketPrice` method more readable and the individual parts easier to understand and modify.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/decompose-conditional.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nclass Stadium {\n  // ...\n  public double summerRate;\n  public double winterRate;\n  public double winterServiceCharge;\n\n  public double getTicketPrice(Date date, int quantity) {\n    double charge;\n    if (isSummer(date)) {\n      charge = summerCharge(quantity);\n    }\n    else {\n      charge = winterCharge(quantity);\n    }\n    return charge;\n  }\n\n  private boolean isSummer(Date date) {\n    return date.before(WINTER_START) || date.after(WINTER_END);\n  }\n  private double summerCharge(int quantity) {\n    return quantity * summerRate;\n  }\n  private double winterCharge(int quantity) {\n    return quantity * winterRate + winterServiceCharge;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Consolidating Disability Eligibility Checks (Intermediate) - Java\nDESCRIPTION: This step shows the 'disabilityAmount' method after combining the initial multiple 'if' statements into a single 'if' statement using the logical OR ('||') operator. This makes the condition clearer and eliminates redundancy.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/consolidate-conditional-expression.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nif (seniority < 2 || monthsDisabled > 12 || isPartTime) {\n      return 0;\n    }\n```\n\n----------------------------------------\n\nTITLE: Creating a Factory Method in Customer Class\nDESCRIPTION: Adds a static factory method to the Customer class that creates and returns a new Customer instance. This is the first step in implementing the object registry pattern necessary for reference objects.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/change-value-to-reference.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic static Customer Create(string name)\n{\n  return new Customer(name);\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing original View methods with ArticleView calls in C#\nDESCRIPTION: Original View methods in the Article class are replaced with instantiations of the ArticleView class methods, centralizing the rendering logic and reducing duplication across formats.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/form-template-method.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nreturn new ArticleView(this).MarkdownView();\n```\n\nLANGUAGE: C#\nCODE:\n```\nreturn new ArticleView(this).HtmlView();\n```\n\n----------------------------------------\n\nTITLE: Implementing Base Case getHeadCount in Employee (Java)\nDESCRIPTION: Adds the `getHeadCount` method to the `Employee` class, providing the base case for the recursive headcount calculation in the Composite pattern. An individual employee always contributes 1 to the total headcount. This method is required to fulfill the contract defined by the `Party` superclass.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/extract-superclass.md#_snippet_11\n\nLANGUAGE: java\nCODE:\n```\n\n  public int getHeadCount() {\n    return 1;\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Implementing GetUnitPrice Method in LaborItem Subclass in C#\nDESCRIPTION: This snippet defines the GetUnitPrice() method inside LaborItem to return the Employee's rate. It assumes the Employee property is available and that labor pricing is always determined by the worker's hourly rate. Expects Employee to be non-null, otherwise it will throw a runtime exception.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/extract-subclass.md#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\npublic int GetUnitPrice()\n  {\n    return Employee.Rate;\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Initial JobItem Class Implementation (Before Refactoring)\nDESCRIPTION: This C# code defines an initial `JobItem` class that represents a job item, which can be either labor or parts. It uses a boolean flag `IsLabor` and conditional logic within `GetUnitPrice()` to determine the price based on the item type. It also includes an `Employee` class and demonstrates basic instantiation and usage.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/extract-subclass.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class JobItem\n{\n  private int unitPrice;\n\n  public int Quantity\n  { get; private set; }\n  public bool IsLabor\n  { get; private set; }\n  public Employee Employee\n  { get; private set; }\n\n  public JobItem(int quantity, int unitPrice, bool isLabor, Employee employee)\n  {\n    this.Quantity = quantity;\n    this.unitPrice = unitPrice;\n    this.IsLabor = isLabor;\n    this.Employee = employee;\n  }\n\n  public int GetTotalPrice()\n  {\n    return Quantity * GetUnitPrice();\n  }\n  public int GetUnitPrice()\n  {\n    return IsLabor ? Employee.Rate : unitPrice;\n  }\n}\n\npublic class Employee\n{\n  public int Rate\n  { get; private set; }\n\n  public Employee(int rate)\n  {\n    Rate = rate;\n  }\n}\n\n// Somewhere in client code\nEmployee kent = new Employee(50);\nJobItem j1 = new JobItem(5, 0, true, kent);\nJobItem j2 = new JobItem(15, 10, false, null);\nint total = j1.GetTotalPrice() + j2.GetTotalPrice();\n```\n\n----------------------------------------\n\nTITLE: Creating the Delegate Method\nDESCRIPTION: This C# snippet introduces the `GetManager()` method in the `Person` class.  This method delegates the call to get the manager from the `Department` object. This step is essential for hiding the delegate and encapsulates the access to the `Department` object, allowing modification to the internal workings without affecting the client.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/hide-delegate.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic class Person\n{\n  Department department;\n\n  public Person GetManager()\n  {\n    return department.Manager;\n  }\n}\n\npublic class Department\n{\n  private string chargeCode;\n\n  public Person Manager\n  {\n    get;\n  }\n\n  public Department(Person manager)\n  {\n    this.Manager = manager;\n  }\n\n  //…\n```\n\n----------------------------------------\n\nTITLE: Implementing Type Code Pattern with Switch-Case in C#\nDESCRIPTION: This snippet shows the initial implementation of the Employee class using integer constants for employee types, with a switch-case statement in the PayAmount method to calculate salary. It highlights the traditional approach before applying the state pattern, where each employee type's behavior is separated by conditionals. Dependencies include the Employee class and constants defining employee types.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/replace-type-code-with-state-strategy.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class Employee\n{\n  // ...\n  public const int ENGINEER = 0,\n                   SALESMAN = 1,\n                   MANAGER = 2;\n\n  public int type;\n\n  public int MonthlySalary\n  { get; set; }\n  public int Commission\n  { get; set; }\n  public int Bonus\n  { get; set; }\n\n  public Employee(int type)\n  {\n    this.type = type;\n  }\n\n  public int PayAmount()\n  {\n    switch (type)\n    {\n      case ENGINEER:\n        return MonthlySalary;\n      case SALESMAN:\n        return MonthlySalary + Commission;\n      case MANAGER:\n        return MonthlySalary + Bonus;\n      default:\n        throw new Exception(\"Incorrect Employee Code\");\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting Print Banner Functionality in C#\nDESCRIPTION: This snippet introduces a new method PrintBanner to encapsulate the repeated banner-printing logic. It separates banner rendering from business logic, requires no parameters or dependencies, and returns no value. Calling this function from elsewhere clarifies code intentions and allows for reuse, with the only output being three lines written to the console.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/extract-method.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n\n\nvoid PrintBanner()\n{\n  Console.WriteLine(\"*****************************\");\n  Console.WriteLine(\"****** Customer totals ******\");\n  Console.WriteLine(\"*****************************\");\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting Consolidated Eligibility Check Method - Java\nDESCRIPTION: To improve readability and express the intent of the consolidated condition, the logical expression is extracted into a private helper method named 'isNotEligibleForDisability'. The original 'if' statement now calls this new method.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/consolidate-conditional-expression.md#_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nprivate boolean isNotEligibleForDisability() {\n    return seniority < 2 || monthsDisabled > 12 || isPartTime;\n  }\n```\n\n----------------------------------------\n\nTITLE: Create Factory Methods for Subclasses - C#\nDESCRIPTION: This snippet demonstrates the creation of factory methods within the `Person` class to replace direct constructor calls to subclasses like `Male` and `Female`.  These factory methods encapsulate the creation logic of these subclasses.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/replace-subclass-with-fields.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n  public static Person CreateMale()\n  {\n    return new Male();\n  }\n  public static Person CreateFemale()\n  {\n    return new Female();\n  }\n```\n\n----------------------------------------\n\nTITLE: Initial Employee Class with Separate Salary Raise Methods in PHP\nDESCRIPTION: Defines an Employee class with specific methods for promoting and giving percentage-based raises, each modifying the salary directly. Includes client code that conditionally calls these methods based on employee attributes.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/parameterize-method.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nclass Employee {\n  // ...\n  public function promoteToManager() {\n    $this->type = Employee::MANAGER;\n    $this->salary *= 1.5;\n  }\n  public function tenPercentRaise() {\n    $this->salary *= 1.1;\n  }\n  public function fivePercentRaise() {\n    $this->salary *= 1.05;\n  }\n}\n\n// Somewhere in client code\nif ($employee->yearsOfExperience > 5) {\n  if (count($employee->clients) > 10) {\n    $employee->promoteToManager();\n  }\n  else {\n    $employee->fivePercentRaise();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Inheriting From Base Class - C#\nDESCRIPTION: These snippets modify the `Employee` and `Department` classes to inherit from the abstract `Party` class.  This is the initial step in applying the Extract Superclass refactoring.  It requires that a `Party` class be defined, and then the existing classes must be adjusted to derive from it.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/extract-superclass.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\npublic class Employee : Party\n```\n\nLANGUAGE: C#\nCODE:\n```\npublic class Department : Party\n```\n\n----------------------------------------\n\nTITLE: Creating String Properties for Text Fields - C#\nDESCRIPTION: These snippets define string properties (`Start`, `End`, and `Length`) for the text fields (`tbStart`, `tbEnd`, and `tbLength`). They encapsulate the text field's content, enabling the program to access and modify the text field content through getter and setter methods. This is part of self-encapsulating the fields.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/duplicate-observed-data.md#_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\n  private string Start\n  {\n    get{ return tbStart.Text; }\n    set{ tbStart.Text = value; }\n  }\n```\n\n----------------------------------------\n\nTITLE: Refactored Order Price Calculation Using Internal Methods in PHP\nDESCRIPTION: Shows the refactored Order class in PHP where getPrice merely returns the result of discountedPrice and all computation details are encapsulated using private methods getBasePrice and getDiscountLevel. Dependencies are the same (quantity and itemPrice), but intermediate variables are now computed on demand via dedicated methods. Key parameters are handled internally: getDiscountLevel deduces the discount level based on quantity, and getBasePrice calculates the base price. discountedPrice now takes no parameters, fetching values from the class itself. Outputs the final price as a numeric value. Improvement: increased encapsulation and reusability of component methods, reducing dependency on parameter passing.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/replace-parameter-with-method-call.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nclass Order {\n  // ...\n  public function getPrice() {\n    return $this->discountedPrice();\n  }\n  private function discountedPrice() {\n    if ($this->getDiscountLevel() == 2) {\n      return $this->getBasePrice() * 0.1;\n    }\n    else {\n      return $this->getBasePrice() * 0.05;\n    }\n  }\n  private function getDiscountLevel() {\n    if ($this->quantity > 100) {\n      return 2;\n    }\n    else {\n      return 1;\n    }\n  }\n  private function getBasePrice() {\n    return $this->quantity * $this->itemPrice;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Refactored Printing Outstanding Amount Using Extract Method in C#\nDESCRIPTION: This snippet refactors the original PrintOwing method by extracting separate methods for printing the banner, calculating the outstanding amount, and printing details. PrintOwing delegates responsibilities to PrintBanner, GetOutstanding, and PrintDetails. The GetOutstanding method returns the total outstanding amount after iterating orders, which is then passed as a parameter to PrintDetails. This improves code organization, readability, and separation of concerns. Dependencies remain similar, including the List<Order> orders and a name string. The methods collectively produce the same console output as the original method.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/extract-method.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvoid PrintOwing()\n{\n  PrintBanner();\n  double outstanding = GetOutstanding();\n  PrintDetails(outstanding);\n}\n\nvoid PrintBanner()\n{\n  Console.WriteLine(\"*****************************\");\n  Console.WriteLine(\"****** Customer totals ******\");\n  Console.WriteLine(\"*****************************\");\n}\n\nvoid PrintDetails(double outstanding)\n{\n  Console.WriteLine(\"name: \" + name);\n  Console.WriteLine(\"amount: \" + outstanding);\n}\n\ndouble GetOutstanding()\n{\n  List<Order> orders = orders.Elements;\n  double outstanding = 0.0;\n\n  foreach (Order order in orders)\n  {\n    outstanding += order.GetAmount();\n  }\n\n  return outstanding;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Static Methods for Blood Types in BloodGroup Class in PHP\nDESCRIPTION: This snippet defines static methods (O, A, B, AB) in the BloodGroup class. Each method returns a new instance of BloodGroup initialized with the corresponding blood type code. These methods provide a controlled way to create BloodGroup instances.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/replace-type-code-with-class.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n  public static function O() {\n    return new BloodGroup(0);\n  }\n  public static function A() {\n    return new BloodGroup(1);\n  }\n  public static function B() {\n    return new BloodGroup(2);\n  }\n  public static function AB() {\n    return new BloodGroup(3);\n  }\n```\n\n----------------------------------------\n\nTITLE: Creating static factory method in EmployeeType (Java)\nDESCRIPTION: Defines a static method within EmployeeType class to instantiate and return the appropriate EmployeeType subclass based on the provided type code, centralizing object creation logic.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/replace-type-code-with-state-strategy.md#_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\npublic static EmployeeType newType(int code) {\n  switch (code) {\n    case Employee.ENGINEER:\n      return new Engineer();\n    case Employee.SALESMAN:\n      return new Salesman();\n    case Employee.MANAGER:\n      return new Manager();\n    default:\n      throw new IllegalArgumentException(\"Incorrect Employee Code\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Moving and Refactoring a Utility Method into the DateTime Wrapper in C#\nDESCRIPTION: Implements the GetNearFirstDate method inside MfDateTimeWrap, moving it from an external client class. The method checks if the internal date field falls on the first day of the month; if not, it computes and returns a new DateTime for the first day of the next month. It is no longer static and does not accept parameters, operating directly on the internal 'date' field. Inputs and outputs are strictly managed via the wrapper. Constraint: Only valid for types compatible with System.DateTime.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/introduce-local-extension.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\n\n\n  public DateTime GetNearFirstDate()\n  {\n    if (this.date.Day == 1)\n      return this.date;\n\n    DateTime nextDate = this.date.AddMonths(1);\n    \n    return new DateTime(nextDate.Year, nextDate.Month, 1);\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Making getType Abstract PHP\nDESCRIPTION: This snippet makes the `getType` method in the `Employee` class abstract. This reinforces the concept that the superclass does not know its type. This is an important step for ensuring that all subclasses properly implement the behavior.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/replace-type-code-with-subclasses.md#_snippet_11\n\nLANGUAGE: PHP\nCODE:\n```\n  abstract public function getType() {\n```\n\nLANGUAGE: PHP\nCODE:\n```\n  abstract public function getType() {};\n```\n\n----------------------------------------\n\nTITLE: Adding factory method for null objects in C#\nDESCRIPTION: Adds a static factory method to the Customer class that creates and returns a new NullCustomer instance, hiding the implementation details from client code.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/introduce-null-object.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n  public static Customer NewNull()\n  {\n    return new NullCustomer();\n  }\n```\n\n----------------------------------------\n\nTITLE: Adding Accessor Methods for Start Field in Interval (Java)\nDESCRIPTION: Implements getter (`getStart`) and setter (`setStart`) methods for the `start` field in the `Interval` class. The `setStart` method updates the field's value and notifies observers (using `setChanged()` and `notifyObservers()`) that the state has changed.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/duplicate-observed-data.md#_snippet_15\n\nLANGUAGE: Java\nCODE:\n```\n\n  String getStart() {\n    return start;\n  }\n  void setStart(String arg) {\n    start = arg;\n    setChanged();\n    notifyObservers();\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Defining the Initial TelephoneNumber Class in C#\nDESCRIPTION: Creates an empty `TelephoneNumber` class as the first step in the Extract Class refactoring. This class will eventually hold the phone number related properties and methods extracted from the `Person` class.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/extract-class.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class TelephoneNumber\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring 'GetUnitPrice' Method as Abstract in 'JobItem'\nDESCRIPTION: This snippet modifies the 'GetUnitPrice' method to be abstract in 'JobItem' class, enforcing subclasses to implement their own version, thereby enhancing polymorphic behavior.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/extract-subclass.md#_snippet_12\n\nLANGUAGE: C#\nCODE:\n```\npublic abstract int GetUnitPrice();\n```\n\n----------------------------------------\n\nTITLE: Refactored Price Calculation Method - C#\nDESCRIPTION: This is the refactored method where the complex expression has been broken down into separate variables: `basePrice`, `quantityDiscount`, and `shipping`. Each variable represents a part of the overall calculation, making the code easier to read and understand. Using readonly fields where applicable ensures that these calculated values are not modified after initialization within the method.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/extract-variable.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\ndouble Price()\n{\n  readonly double basePrice = quantity * itemPrice;\n  readonly double quantityDiscount = Math.Max(0, quantity - 500) * itemPrice * 0.05;\n  readonly double shipping = Math.Min(basePrice * 0.1, 100.0);\n  return basePrice - quantityDiscount + shipping;\n}\n```\n\n----------------------------------------\n\nTITLE: Refactored Class Hierarchy Using Extract Subclass\nDESCRIPTION: The refactored code with an abstract JobItem parent class and two specialized subclasses: LaborItem for employee work and PartsItem for physical components. This approach uses polymorphism instead of conditional logic and places each field in the appropriate class.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/extract-subclass.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nabstract class JobItem {\n  private int quantity;\n\n  protected JobItem(int quantity) {\n    this.quantity = quantity;\n  }\n  public int getTotalPrice() {\n    return quantity * getUnitPrice();\n  }\n  public int getQuantity() {\n    return quantity;\n  }\n  public abstract int getUnitPrice();\n}\n\nclass PartsItem extends JobItem {\n  private int unitPrice;\n\n  public PartsItem(int quantity, int unitPrice) {\n    super(quantity);\n    this.unitPrice = unitPrice;\n  }\n  @Override public int getUnitPrice() {\n    return unitPrice;\n  }\n}\n\nclass LaborItem extends JobItem {\n  private Employee employee;\n\n  public LaborItem(int quantity, Employee employee) {\n    super(quantity);\n    this.employee = employee;\n  }\n  public Employee getEmployee() {\n    return employee;\n  }\n  @Override public int getUnitPrice() {\n    return employee.getRate();\n  }\n}\n\nclass Employee {\n  private int rate;\n  public Employee(int rate) {\n    this.rate = rate;\n  }\n  public int getRate() {\n    return rate;\n  }\n}\n\n// Somewhere in client code\nEmployee kent = new Employee(50);\nJobItem j1 = new LaborItem(5, kent);\nJobItem j2 = new PartsItem(15, 10);\nint total = j1.getTotalPrice() + j2.getTotalPrice();\n```\n\n----------------------------------------\n\nTITLE: Adding Protected Constructor in Parent Class in PHP\nDESCRIPTION: Defines a protected constructor in the Person class that initializes the newly added private fields $isMale and $code. This constructor supports controlled object construction and enables subclasses to call it with appropriate values.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/replace-subclass-with-fields.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n  protected function __construct($isMale, $code) {\n    $this->isMale = $isMale;\n    $this->code = $code;\n  }\n```\n\n----------------------------------------\n\nTITLE: Adding Constructor to Initialize Customer Name in Java\nDESCRIPTION: Implements a constructor within the `Customer` class that accepts a `String` parameter (`name`) and assigns it to the instance's `name` field. This allows for the creation of `Customer` objects with their names initialized upon instantiation.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/replace-data-value-with-object.md#_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n  public Customer(String name) {\n    this.name = name;\n  }\n```\n\n----------------------------------------\n\nTITLE: Adding Factory Method newNull to PaymentHistory Class in Java\nDESCRIPTION: Introduces static newNull() factory method in PaymentHistory that returns a NullPaymentHistory instance, encapsulating null object creation and hiding implementation details from clients.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/introduce-null-object.md#_snippet_12\n\nLANGUAGE: Java\nCODE:\n```\n\n  public static PaymentHistory newNull() {\n    return new NullPaymentHistory();\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Refactored Order Class with Encapsulated Price Calculation in Java\nDESCRIPTION: This version refactors the 'Order' class by extracting parameter calculations into private methods, such as getDiscountLevel() and getBasePrice(), thereby simplifying getPrice() and removing explicit parameter passing. The approach enhances code readability and maintainability.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/replace-parameter-with-method-call.md#_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nclass Order {\n  // ...\n  public double getPrice() {\n    return discountedPrice();\n  }\n  private double discountedPrice() {\n    if (getDiscountLevel() == 2) {\n      return getBasePrice() * 0.1;\n    }\n    else {\n      return getBasePrice() * 0.05;\n    }\n  }\n  private int getDiscountLevel() {\n    if (quantity > 100) {\n      return 2;\n    }\n    else {\n      return 1;\n    }\n  }\n  private double getBasePrice() {\n    return quantity * itemPrice;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Constructors for the DateTime Wrapper in C#\nDESCRIPTION: Defines two constructors within MfDateTimeWrap: one parameterless constructor that initializes the internal DateTime field with its default value, and one conversion constructor that accepts an existing DateTime instance. The parameterless constructor delegates to the conversion constructor for consistency. These constructors ensure that MfDateTimeWrap can be instantiated both with and without an initial DateTime value.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/introduce-local-extension.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n\n\n  public MfDateTimeWrap() : this(new DateTime())\n  {\n  }\n\n```\n\nLANGUAGE: C#\nCODE:\n```\n\n  public MfDateTimeWrap(DateTime date)\n  {\n    this.date = date;\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Implementing delegation in the original Account class\nDESCRIPTION: Updated the original overdraftCharge method in the Account class to delegate the calculation to the AccountType class, passing the necessary parameters.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/move-method.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n    return $this->type->overdraftCharge($this->daysOverdrawn);\n```\n\n----------------------------------------\n\nTITLE: Initial Implementation with Parameterized Method in PHP\nDESCRIPTION: Original code with a single applyDiscount method that uses a type parameter to determine whether to apply a fixed or percentage discount. The method uses a switch statement to handle different discount types defined by class constants.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/replace-parameter-with-explicit-methods.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nclass Order {\n  // ...\n  const FIXED_DISCOUNT = 0;\n  const PERCENT_DISCOUNT = 1;\n\n  public function applyDiscount($type, $discount) {\n    switch ($type) {\n      case Order::FIXED_DISCOUNT:\n        $this->price -= $discount;\n        break;\n      case Order::PERCENT_DISCOUNT:\n        $this->price *= $discount;\n        break;\n      default:\n        throw new Exception('Invalid discount type');\n    }\n  }\n}\n\n// Somewhere in client code\nif ($weekend) {\n  $order->applyDiscount(Order::FIXED_DISCOUNT, 10);\n}\nif (count($order->items) > 5) {\n  $order->applyDiscount(Order::PERCENT_DISCOUNT, 0.2);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Account Field to Gamma Class in Java\nDESCRIPTION: Adds a private field `account` of type `Account` to the `Gamma` class. This field is intended to hold a reference to the original object instance from which the method logic is being extracted, allowing the new class to access necessary members (like methods or fields) of the original object.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/replace-method-with-method-object.md#_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n  private Account account;\n```\n\n----------------------------------------\n\nTITLE: Declaring Abstract Method - C#\nDESCRIPTION: This snippet declares an abstract method `GetAnnualCost()` within the `Party` class.  Abstract methods have no implementation in the base class but are required to be implemented by derived classes. This is used to define a common interface for a shared method. No dependencies.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/extract-superclass.md#_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\n  public abstract int GetAnnualCost();\n```\n\n----------------------------------------\n\nTITLE: Modified findAppointments Method with Parameter in Java\nDESCRIPTION: This code snippet shows the refactored `findAppointments` method with an added `name` parameter. It extends the functionality to filter appointments by both date and name. The method checks for matching date and adds an appointment to the result set if the name matches or if no name is provided (null). The method takes a Date object and a String name as input. It returns an ArrayList of appointments.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/add-parameter.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nclass Calendar {\n  // ...\n  private Set appointments;\n  public ArrayList<Appointment> findAppointments(Date date, String name) {\n    Set result = new ArrayList();\n    Iterator iter = kent.getCourses().iterator();\n    while (iter.hasNext()) {\n      Appointment each = (Appointment) iter.next();\n      if (date.compareTo(each.date) == 0) {\n        if (name == null || (name != null && name == each.name)) {\n          result.add(date);\n        }\n      }\n    }\n    return result;\n  }\n}\n\n// Somewhere in client code\nDate today = new Date();\nappointments = calendar.findAppointments(today, null);\n```\n\n----------------------------------------\n\nTITLE: Refactored Type Code with Class in PHP\nDESCRIPTION: This code snippet presents the refactored version where the type code has been replaced with a `BloodGroup` class. The `Person` class now holds a `BloodGroup` object instead of an integer. The `BloodGroup` class encapsulates the blood group codes and provides static methods to create instances representing different blood groups. The constructor is private to enforce the use of static methods for object creation. This improves type safety and readability.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/replace-type-code-with-class.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass Person {\n  private $bloodGroup; // BloodGroup\n\n  public function __construct(BloodGroup $bloodGroup) {\n    $this->bloodGroup = $bloodGroup;\n  }\n  public function setBloodGroup(BloodGroup $bloodGroup) {\n    $this->bloodGroup = $bloodGroup;\n  }\n  public function getBloodGroup() {\n    return $this->bloodGroup;\n  }\n}\n\nclass BloodGroup {\n  private $code;\n\n  private function __construct($arg) {\n    $this->code = $arg;\n  }\n  public function getCode() {\n    return $this->code;\n  }\n\n  public static function O() {\n    return new BloodGroup(0);\n  }\n  public static function A() {\n    return new BloodGroup(1);\n  }\n  public static function B() {\n    return new BloodGroup(2);\n  }\n  public static function AB() {\n    return new BloodGroup(3);\n  }\n}\n\n// Somewhere in client code.\n$parent = new Person(BloodGroup::O());\nif ($parent->getBloodGroup() == BloodGroup::AB()) {\n  // ...\n}\n$child->setBloodGroup($parent->getBloodGroup());\n```\n\n----------------------------------------\n\nTITLE: Adding and Removing Courses Methods in Java\nDESCRIPTION: Defines methods in the Person class to add and remove Course objects from the internal collection. These methods encapsulate direct modifications to the collection field, improving control over state changes. The methods rely on an internal collection field named 'courses' of type Set. Inputs are Course objects to add or remove, with no return values. This ensures controlled modification and supports encapsulation of the courses collection.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/encapsulate-collection.md#_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\n  public void addCourse(Course arg) {\n    courses.add(arg);\n  }\n  public void removeCourse(Course arg) {\n    courses.remove(arg);\n  }\n```\n\n----------------------------------------\n\nTITLE: Moving getTelephoneNumber Method to TelephoneNumber (Java)\nDESCRIPTION: Moves the logic for formatting the full telephone number from the `Person` class to the `TelephoneNumber` class, using the local `areaCode` and `number` fields.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/extract-class.md#_snippet_11\n\nLANGUAGE: java\nCODE:\n```\npublic String getTelephoneNumber() {\n  return (\"(\" + areaCode + \") \" + number);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Engineer Subclass PHP\nDESCRIPTION: This code defines the `Engineer` subclass, extending the `Employee` class. This is the first step in replacing the type code with subclasses. The primary purpose is to create a dedicated class for engineer employee type.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/replace-type-code-with-subclasses.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nclass Engineer extends Employee {\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Pull Up Constructor Body Refactoring - Before (Java)\nDESCRIPTION: Shows the initial state where a subclass (`Manager`) directly initializes fields belonging to its superclass (`Employee`) within its own constructor. This setup can lead to code duplication if other subclasses need to initialize the same superclass fields.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/pull-up-constructor-body.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nclass Employee {\n  // ...\n  protected String name;\n  protected String id;\n}\n   \nclass Manager extends Employee {\n  // ...\n  private int grade;\n  public Manager(String name, String id, int grade) {\n    this.name = name;\n    this.id = id;\n    this.grade = grade;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Discounts Using Separate Explicit Methods in C#\nDESCRIPTION: This refactored snippet replaces the single parameter-driven ApplyDiscount method with two explicit methods: ApplyFixedDiscount and ApplyPercentDiscount, each handling a specific discount type. This removes the need for type parameters and switch statements. Client code calls are updated accordingly to invoke the appropriate method directly. The snippet improves code clarity, reduces conditional logic, and simplifies future maintenance. Dependencies remain minimal and inputs are clarified by method signatures.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/replace-parameter-with-explicit-methods.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Order\n{\n  // ...\n  public void ApplyFixedDiscount(double discount)\n  {\n    Price -= discount;\n  }\n  public void ApplyPercentDiscount(double discount)\n  {\n    Price *= discount;\n  }\n}\n\n// Somewhere in client code\nif (weekend)\n{\n  order.ApplyFixedDiscount(10);\n}\nif (order.Items.Count > 5)\n{\n  order.ApplyPercentDiscount(0.2);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating subclasses ArticleMarkdown and ArticleHtml in C#\nDESCRIPTION: Defines subclasses of ArticleView to handle Markdown and HTML formatting respectively, allowing format-specific implementation of view rendering methods with inheritance. These subclasses encapsulate format-specific logic.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/form-template-method.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\npublic class ArticleMarkdown: ArticleView\n{\n  public ArticleMarkdown(Article article): base(article)\n  {\n  }\n}\n```\n\nLANGUAGE: C#\nCODE:\n```\npublic class ArticleHtml: ArticleView\n{\n  public ArticleHtml(Article article): base(article)\n  {\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Resource with Conditional Check in C#\nDESCRIPTION: This code snippet shows the refactored implementation of the `GetResource` method after applying the 'Replace Exception with Test' technique. It now explicitly checks if the `available.Count` is zero. If the pool is empty, it directly creates a new `Resource`. Otherwise, it retrieves a resource from the `available` stack. The created or retrieved resource is then added to the `allocated` stack, and the `try/catch` block is removed, as the lack of resources is handled as a normal conditional flow.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/replace-exception-with-test.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic class ResourcePool\n{\n  // ...\n  private Stack available;\n  private Stack allocated;\n\n  public Resource GetResource()\n  {\n    Resource result;\n\n    if (available.Count == 0)\n      result = new Resource();\n    else\n      result = (Resource) available.Pop();\n\n    allocated.Push(result);\n    return result;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining NullPaymentHistory Class in C#\nDESCRIPTION: This snippet defines the `NullPaymentHistory` class which inherits from `PaymentHistory`. The purpose is to provide a null object for payment history, eliminating the need for null checks in the client code. The `IsNull` property is overridden to return true.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/introduce-null-object.md#_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\npublic class NullPaymentHistory: PaymentHistory\n{\n  public override bool IsNull\n  {\n    get{ return true; }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Create Manager Subclass - C#\nDESCRIPTION: This code snippet creates a subclass `Manager` that inherits from the `Employee` class. It overrides the `Type` property to return the `MANAGER` constant from the `Employee` class. This represents the specific behavior of a manager type within the employee hierarchy.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/replace-type-code-with-subclasses.md#_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\n\n\npublic class Manager: Employee\n{\n  public int Type\n  {\n    get{ return Employee.MANAGER; }\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Engineer, Salesman, and Manager Subclasses C#\nDESCRIPTION: This snippet demonstrates the subclasses `Engineer`, `Salesman`, and `Manager` inheriting from the `Employee` class. These subclasses are created to represent different types of employees.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/replace-constructor-with-factory-method.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Engineer: Employee\n{\n  // ...\n}\npublic class Salesman: Employee\n{\n  // ...\n}\npublic class Manager: Employee\n{\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Calling Superclass Constructor in Manager\nDESCRIPTION: This code snippet shows how the constructor in the `Manager` class calls the parent constructor (`parent::__construct()`). This is done to invoke the constructor of the superclass (`Employee`), ensuring the correct initialization of the base class properties, specifically `$name` and `$id` in this example. This is a core element of the Pull Up Constructor Body refactoring strategy.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/pull-up-constructor-body.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n    parent::__construct($name, $id);\n```\n\n----------------------------------------\n\nTITLE: Calculating and Printing Customer Statement (Before Refactoring) - PHP\nDESCRIPTION: This function is responsible for multiple tasks: printing a banner, iterating through orders to calculate the outstanding amount, and printing the customer's name and the calculated amount. Performing these distinct operations within a single method makes it less cohesive and harder to understand or reuse parts of the logic.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/extract-method.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nfunction printOwing() {\n  $e = $this->orders->elements();\n  $outstanding = 0;\n\n  // print banner\n  print(\"*****************************\\n\");\n  print(\"****** Customer totals ******\\n\");\n  print(\"*****************************\\n\");\n\n  // print owings\n  while ($e->hasMoreElements()) {\n    $each = $e->nextElement();\n    $outstanding += $each->getAmount();\n  }\n\n  // print details\n  print(\"name: \" . $this->name);\n  print(\"amount: \" . $outstanding);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Salesman Subclass PHP\nDESCRIPTION: This code snippet shows the `Salesman` class extending the `Employee` class. The purpose is to create a subclass for the `Salesman` employee type which is used to represent a different employee role.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/replace-type-code-with-subclasses.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\nclass Salesman extends Employee {\n  public function getType() {\n    return Employee::SALESMAN;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Distance with Reused Variable in PHP\nDESCRIPTION: A method that calculates the distance traveled by an object based on time and forces. It uses a single variable 'acc' for both primary and secondary acceleration calculations, which is problematic for readability and maintenance.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/split-temporary-variable.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\npublic function getDistanceTravelled($time) {\n  $result = 0;;\n  $acc = $this->primaryForce / $this->mass;\n  $primaryTime = Math.min($time, $this->delay);\n  $result = 0.5 * $acc * $primaryTime * $primaryTime;\n\n  $secondaryTime = $time - $this->delay;\n  if ($secondaryTime > 0) {\n    $primaryVel = $acc * $this->delay;\n    $acc = ($this->primaryForce + $this->secondaryForce) / $this->mass;\n    $result += $primaryVel * $secondaryTime + 0.5 * $acc * $secondaryTime * $secondaryTime;\n  }\n  return $result;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Delegate Accessor Method to Person\nDESCRIPTION: This snippet shows the addition of the `getDepartment()` getter method to the `Person` class. This is the first step in the 'Remove Middle Man' refactoring, enabling clients to obtain a direct reference to the delegate (`Department`) object.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/remove-middle-man.md#_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n  public Department getDepartment() {\n    return department;\n  }\n```\n\n----------------------------------------\n\nTITLE: Selecting Details Printing Code for Extraction (Java)\nDESCRIPTION: This snippet shows the code block within `printOwing` responsible for printing customer details, specifically the `name` and `outstanding` amount. It relies on local variables (`name`, `outstanding`) from the containing method, posing a challenge for extraction.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/extract-method.md#_snippet_5\n\nLANGUAGE: Java\nCODE:\n```\n  // print details\n  System.out.println(\"name: \" + name);\n  System.out.println(\"amount: \" + outstanding);\n```\n\n----------------------------------------\n\nTITLE: C# Account Withdrawal Using Error Codes (Before Refactoring)\nDESCRIPTION: Shows the initial state of an `Account` class where the `Withdraw` method returns an integer error code (-1) to indicate insufficient balance. The client code explicitly checks this return value to handle the error condition.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/replace-error-code-with-exception.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Account\n{\n  // ...\n  private int balance;\n\n  public int Withdraw(int amount)\n  {\n    if (amount > balance)\n    {\n      return -1;\n    }\n    else\n    {\n      balance -= amount;\n      return 0;\n    }\n  }\n}\n\n// Somewhere in client code.\nif (account.Withdraw(amount) == -1)\n  HandleOverdrawn();\nelse\n  DoTheUsualThing();\n```\n\n----------------------------------------\n\nTITLE: Updating Factory Method PHP\nDESCRIPTION: This code modifies the factory method to create an `Engineer` object when the type code matches `ENGINEER`.  It adds a conditional check within the `create` method's `switch` statement. This is essential for the factory to create instances of the correct subclasses.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/replace-type-code-with-subclasses.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n    switch ($type) {\n      case self::ENGINEER:\n        return new Engineer();\n      default:\n        return new Employee($type);\n    }\n```\n\n----------------------------------------\n\nTITLE: Calculating Employee Pay with Polymorphism (After) - C#\nDESCRIPTION: Refactored code where the PayAmount calculation logic has been moved from the Employee class to the EmployeeType hierarchy. The EmployeeType class now declares an abstract PayAmount method, which is implemented by each concrete subclass. The Employee class delegates the PayAmount calculation to its associated EmployeeType object via a polymorphic call.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/replace-conditional-with-polymorphism.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic class Employee\n{\n  // ...\n  private EmployeeType type;\n\n  public int EmployeeCode\n  {\n    get{ return type.EmployeeCode; }\n  }\n  public int MonthlySalary\n  { get; set; }\n  public int Commission\n  { get; set; }\n  public int Bonus\n  { get; set; }\n\n  public int PayAmount()\n  {\n    return type.PayAmount(this);\n  }\n}\n\npublic abstract class EmployeeType\n{\n  public const int ENGINEER = 0,\n                   SALESMAN = 1,\n                   MANAGER = 2;\n\n  public abstract int EmployeeCode\n  { get; }\n\n  public static EmployeeType Create(int code)\n  {\n    switch (code)\n    {\n      case ENGINEER:\n        return new Engineer();\n      case SALESMAN:\n        return new Salesman();\n      case MANAGER:\n        return new Manager();\n      default:\n        throw new Exception(\"Incorrect Employee Code\");\n    }\n  }\n\n  public abstract int PayAmount(Employee employee);\n}\n\npublic class Engineer: EmployeeType\n{\n  public override int EmployeeCode\n  {\n    get{ return EmployeeType.ENGINEER; }\n  }\n\n  public override int PayAmount(Employee employee)\n  {\n    return employee.MonthlySalary;\n  }\n}\n\npublic class Salesman: EmployeeType\n{\n  public override int EmployeeCode\n  {\n    get{ return EmployeeType.SALESMAN; }\n  }\n\n  public override int PayAmount(Employee employee)\n  {\n    return employee.MonthlySalary + employee.Commission;\n  }\n}\n\npublic class Manager: EmployeeType\n{\n  public override int EmployeeCode\n  {\n    get{ return EmployeeType.MANAGER; }\n  }\n\n  public override int PayAmount(Employee employee)\n  {\n    return employee.MonthlySalary + employee.Bonus;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Customer Data - Before Refactoring - Java\nDESCRIPTION: This snippet shows code *before* applying the \"Introduce Null Object\" refactoring. It defines basic classes (`Company`, `Customer`, `PaymentHistory`) and client code that frequently checks if a `Customer` object (obtained from `Company`) is null before accessing its properties (`name`, `plan`, `history`). This pattern leads to repetitive null checks in client code, increasing complexity and potential `NullPointerException` risks if a check is missed.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/introduce-null-object.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nclass Company {\n  //…\n  private Customer customer;\n  public Customer getCustomer() {\n    return customer;\n  }\n}\n\nclass Customer {\n  //…\n  public String getName() {\n    //…\n  }\n  public BillingPlan getPlan() {\n    //…\n  }\n  public PaymentHistory getHistory() {\n    //…\n  }\n}\n\nclass PaymentHistory {\n  public int getWeeksDelinquentInLastYear() {\n    //…\n  }\n}\n\n// Somewhere in client code\nCustomer customer = site.getCustomer();\nString customerName;\nif (customer == null) {\n  customerName = \"N/A\";\n}\nelse {\n  customerName = customer.getName();\n}\n\n//…\nBillingPlan plan;\nif (customer == null) {\n  plan = BillingPlan.basic();\n}\nelse {\n  plan = customer.getPlan();\n}\n\n//…\nint weeksDelinquent;\nif (customer == null) {\n  weeksDelinquent = 0;\n}\nelse {\n  weeksDelinquent = customer.getHistory().getWeeksDelinquentInLastYear();\n}\n```\n\n----------------------------------------\n\nTITLE: Refactoring: Using Billable Interface for Flexible Billing in TimeSheet - PHP\nDESCRIPTION: This refactored snippet introduces a Billable interface, which standardizes the required methods for billing entities. The TimeSheet class’s charge method now depends on Billable, enabling other classes with getRate() and hasSpecialSkill() methods to be billed. Dependencies: Billable interface must be implemented by billable classes. Inputs: Billable object, days (integer). Output: Calculated charge (numeric value). This approach supports greater flexibility and code reuse, allowing for billing not only employees but also other entities.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/extract-interface.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nclass TimeSheet {\n  // ...\n  public function charge(Billable $employee, $days) {\n    $base = $employee->getRate() * $days;\n    if ($employee->hasSpecialSkill()) {\n      return $base * 1.05;\n    }\n    else {\n      return $base;\n    }\n  }\n}\n\ninterface Billable {\n  public function getRate();\n  public function hasSpecialSkill();\n}\n\nclass Employee implements Billable {\n  // ...\n  public function getRate() {\n    // ...\n  }\n  public function hasSpecialSkill() {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: After Refactoring: Using Fields and Factory Methods (C#)\nDESCRIPTION: Demonstrates the result of applying the 'Replace Subclass with Fields' refactoring. The subclasses are removed, and the `Person` class now contains private fields (`isMale`, `code`) to store the differing values. A protected constructor initializes these fields, and public static factory methods (`CreateMale`, `CreateFemale`) are provided to create instances with the appropriate constant values, replacing direct subclass constructor calls.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/replace-subclass-with-fields.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Person\n{\n  private bool isMale;\n  private char code;\n\n  public bool IsMale\n  {\n    get{ return isMale; }\n  }\n  public char Code\n  {\n    get{ return code; }\n  }\n\n  protected Person(bool isMale, char code)\n  {\n    this.isMale = isMale;\n    this.code = code;\n  }\n  public static Person CreateMale()\n  {\n    return new Person(true, 'M');\n  }\n  public static Person CreateFemale()\n  {\n    return new Person(false, 'F');\n  }\n}\n\n// Client code\nPerson kent = Person.CreateMale();\nConsole.WriteLine(\"Person's gender is: \" + kent.Code);\n```\n\n----------------------------------------\n\nTITLE: Creating Interval Domain Class - Java\nDESCRIPTION: This code snippet creates a simple Interval class that extends Observable. This class will hold the data and logic related to the interval, decoupling it from the IntervalWindow class. It requires the java.util.Observable class.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/duplicate-observed-data.md#_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nclass Interval extends Observable {\n}\n```\n\n----------------------------------------\n\nTITLE: Calling OnValueChanged in Setters - C#\nDESCRIPTION: This code snippet shows the modification of the setter of the public properties. When setting `start`, `end`, or `length`, the `OnValueChanged` method is called to check for changes, and if changes exist, update the value and notify the observers. This ensures observers are informed whenever a property value changes.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/duplicate-observed-data.md#_snippet_18\n\nLANGUAGE: C#\nCODE:\n```\nOnValueChanged(ref start, value); \n```\n\n----------------------------------------\n\nTITLE: Initial PHP Classes with Inheritance\nDESCRIPTION: This code defines an Engine class with fuel and horsepower properties, and a Car class that inherits from Engine, adding brand and model properties. Methods provide accessors for engine properties and car attributes. The code demonstrates traditional inheritance where Car extends Engine, directly accessing Engine properties and methods.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/replace-inheritance-with-delegation.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nclass Engine {\n  //…\n  private $fuel;\n  private $CV;\n\n  public function getFuel() {\n    return $this->fuel;\n  }\n  public function setFuel($fuel) {\n    $this->fuel = $fuel;\n  }\n  public function getCV() {\n    return $this->CV;\n  }\n  public function setCV($cv) {\n    $this->CV = $cv;\n  }\n}\n\nclass Car extends Engine {\n  // ...\n  private $brand;\n  private $model;\n\n  public function getName() {\n    return $this->brand . ' ' . $this->model . ' (' . $this->getCV() . 'CV)';\n  }\n  public function getModel() {\n    return $this->model;\n  }\n  public function setModel($model) {\n    $this->model = $model;\n  }\n  public function getBrand() {\n    return $this->brand;\n  }\n  public function setBrand($brand) {\n    $this->brand = $brand;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Refactored `overdraftCharge` Method - Java\nDESCRIPTION: This Java code snippet shows the refactored code after moving the `overdraftCharge` method to the `AccountType` class. The original `bankCharge` method now calls the relocated `overdraftCharge` method.  The `overdraftCharge` method now accepts an `Account` object as a parameter. The `daysOverdrawn` is obtained through the `account` parameter. It depends on the `AccountType` class and uses the `isPremium()` method for account type checking.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/move-method.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nclass Account {\n  // ...\n  private AccountType type;\n  private int daysOverdrawn;\n\n  public double bankCharge() {\n    double result = 4.5;\n    if (daysOverdrawn > 0) {\n      result += type.overdraftCharge(this);\n    }\n    return result;\n  }\n}\n\nclass AccountType {\n  // ...\n  public double overdraftCharge(Account account) {\n    if (isPremium()) {\n      double result = 10;\n      if (account.getDaysOverdrawn() > 7) {\n        result += (account.getDaysOverdrawn() - 7) * 0.85;\n      }\n      return result;\n    }\n    else {\n      return account.getDaysOverdrawn() * 1.75;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Intermediate: FindAppointments with New Parameter, Placeholder Body - C#\nDESCRIPTION: This version shows the transitional implementation of FindAppointments after adding the name parameter but before adjusting logic. The method signature includes both date and name, but the method body does not yet utilize the new parameter and only adds appointments based on the date match. Intended as a step in the refactoring process, it requires updating logic and replacing old method references for full migration.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/add-parameter.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n  public List<Appointment> FindAppointments(DateTime date, string name)\n  {\n    List<Appointment> result = new List<Appointment>();\n\n    foreach (Appointment item in kent.GetCourses())\n    {\n      if (date.Date == item.Date.Date)\n      {\n        result.Add(date);\n      }\n    }\n\n    return result;\n  }\n```\n\n----------------------------------------\n\nTITLE: Defining TelephoneNumber Class - PHP\nDESCRIPTION: This snippet defines a basic TelephoneNumber class. It serves as the foundation for extracting phone number related functionalities from the Person class.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/extract-class.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nclass TelephoneNumber {\n}\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving Customer Data - After Refactoring - Java\nDESCRIPTION: This snippet shows code *after* applying the \"Introduce Null Object\" refactoring. It introduces `NullCustomer` and `NullPaymentHistory` subclasses that override methods to provide default behavior (e.g., \"N/A\" for name, basic plan, 0 for weeks delinquent). The `Company.getCustomer()` method now returns a `NullCustomer` instance instead of null. Client code no longer needs explicit null checks and can simply call methods on the `customer` object, leveraging polymorphism for different behaviors. Dependencies include the implicit `BillingPlan` class and `site` object.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/introduce-null-object.md#_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nclass Company {\n  //…\n  private Customer customer;\n  public Customer getCustomer() {\n    return (customer == null) ? Customer.newNull() : customer;\n  }\n}\n\nclass Customer {\n  //…\n  public boolean isNull() {\n    return false;\n  }\n  public static Customer newNull() {\n    return new NullCustomer();\n  }\n\n  public String getName() {\n    //…\n  }\n  public BillingPlan getPlan() {\n    //…\n  }\n  public PaymentHistory getHistory() {\n    //…\n  }\n}\nclass NullCustomer extends Customer {\n  @Override public boolean isNull() {\n    return true;\n  }\n  @Override public String getName() {\n    return \"N/A\";\n  }\n  @Override public BillingPlan getPlan() {\n    return BillingPlan.basic();\n  }\n  @Override public PaymentHistory getHistory() {\n    return PaymentHistory.newNull();\n  }\n}\n\nclass PaymentHistory {\n  public boolean isNull() {\n    return false;\n  }\n  public static PaymentHistory newNull() {\n    return new NullPaymentHistory();\n  }\n\n  public int getWeeksDelinquentInLastYear() {\n    //…\n  }\n}\nclass NullPaymentHistory extends PaymentHistory {\n  @Override public boolean isNull() {\n    return true;\n  }\n  @Override public int getWeeksDelinquentInLastYear() {\n    return 0;\n  }\n}\n\n// Somewhere in client code\nCustomer customer = site.getCustomer();\nString customerName = customer.getName();\n\n//…\nBillingPlan plan = customer.getPlan();\n\n//…\nint weeksDelinquent = customer.getHistory().getWeeksDelinquentInLastYear();\n```\n\n----------------------------------------\n\nTITLE: Initial PHP Function with Duplicate Conditional Logic\nDESCRIPTION: This PHP function `sendEmailPromotion` demonstrates duplicate code within its `if` and `else` branches. Specifically, `validateEmailAddress($email)` and `sendEmail(formatEmail($text, $total))` are called in both paths, representing a candidate for the \"Consolidate Duplicate Conditional Fragments\" refactoring. The function calculates a total price based on whether a special deal applies and then validates and sends an email.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/consolidate-duplicate-conditional-fragments.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nfunction sendEmailPromotion($email, $text) {\n  // ...\n  if (isSpecialDeal()) {\n    $total = $price * 0.95;\n    validateEmailAddress($email);\n    sendEmail(formatEmail($text, $total));\n  }\n  else {\n    validateEmailAddress($email);\n    $total = $price * 0.98;\n    sendEmail(formatEmail($text, $total));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing 'unitPrice' Initialization in Parent Class\nDESCRIPTION: The initialization code related to 'unitPrice' in the parent class is removed or commented out after moving the field and its constructor initialization to subclass, consolidating responsibility.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/extract-subclass.md#_snippet_18\n\nLANGUAGE: C#\nCODE:\n```\nthis.unitPrice = unitPrice;\n```\n\n----------------------------------------\n\nTITLE: Refactoring to Inheritance Pattern in PHP\nDESCRIPTION: This PHP code demonstrates the refactored approach where the Employee class inherits from the Person class, removing the delegation field and methods. Employee now directly accesses inherited methods such as getLastName, simplifying the class design. This eliminates method delegation and the associated risks like stack overflow from recursive calls. Inputs and outputs remain the same as in the delegation version. The refactoring requires careful method name management to prevent conflicts, though in this example no such conflicts occur. The code is cleaner and uses inheritance effectively.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/replace-delegation-with-inheritance.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nclass Person {\n  private $name;\n\n  public function getName() {\n    return $this->name;\n  }\n  public function setName($name) {\n    $this->name = $name;\n  }\n  public function getLastName() {\n    return substr($this->name, 0, strrpos($this->name, ' ') + 1);\n  }\n}\n\nclass Employee extends Person {\n  public function toString() {\n    return \"Emp: \" . $this->getLastName();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Static Registry to Customer Class\nDESCRIPTION: Adds a static Hashtable to store customer instances, which will serve as the registry for all Customer objects. This ensures only one instance exists per customer name.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/change-value-to-reference.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nprivate static Hashtable instances = new Hashtable();\n```\n\n----------------------------------------\n\nTITLE: Calling the Extracted `printBanner` Method (Java)\nDESCRIPTION: This snippet demonstrates replacing the original banner printing code block within the `printOwing` method with a single call to the newly created `printBanner` method.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/extract-method.md#_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\n  printBanner();\n```\n\n----------------------------------------\n\nTITLE: Creating Factory Methods for Person (Java)\nDESCRIPTION: Introduces static factory methods `createMale` and `createFemale` in the `Person` class. These methods replace direct instantiation of `Male` and `Female` subclasses, allowing control over object creation and facilitating the refactoring process. Requires the `Person` class to be accessible.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/replace-subclass-with-fields.md#_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\n\n\n  static Person createMale() {\n    return new Male();\n  }\n  static Person createFemale() {\n    return new Female();\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Delegate Method Implementation in PHP\nDESCRIPTION: This code shows the added `getManager` method within the `Person` class. This method accesses the `$department` property and calls the `getManager` method of the `Department` object. This represents the core of the Hide Delegate pattern implementation in this refactoring example. It encapsulates the interaction with the `Department` class.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/hide-delegate.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n```\n  public function getManager() {\n    return $this->department->getManager();\n  }\n```\n```\n\n----------------------------------------\n\nTITLE: Initial Java implementation with TelephoneNumber class and Person class using composition\nDESCRIPTION: This snippet shows the initial design where Person contains a TelephoneNumber object, and methods delegate calls to this object to retrieve telephone details. It requires the TelephoneNumber class and can be refactored to embed telephone fields directly into Person.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/inline-class.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nclass Person {\n  private String name;\n  private TelephoneNumber officeTelephone = new TelephoneNumber();\n\n  public String getName() {\n    return name;\n  }\n  public String getTelephoneNumber() {\n    return officeTelephone.getTelephoneNumber();\n  }\n  public TelephoneNumber getOfficeTelephone() {\n    return officeTelephone;\n  }\n}\n\nclass TelephoneNumber {\n  private String number;\n  private String areaCode;\n\n  public String getAreaCode() {\n    return areaCode;\n  }\n  public void setAreaCode(String arg) {\n    areaCode = arg;\n  }\n  public String getNumber() {\n    return number;\n  }\n  public void setNumber(String arg) {\n    number = arg;\n  }\n  public String getTelephoneNumber() {\n    return (\"(\" + areaCode + \") \" + number);\n  }\n}\n\n// Somewhere in client code\nPerson martin = new Person();\nmartin.getOfficeTelephone().setAreaCode(\"781\");\n```\n\n----------------------------------------\n\nTITLE: Creating LaborItem Subclass in C#\nDESCRIPTION: This snippet creates the LaborItem subclass inheriting from JobItem. The intention is to separate labor-related functionalities from other job types. No new properties or methods are declared at this step; it only establishes the inheritance structure. Dependency: LaborItem requires JobItem to exist.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/extract-subclass.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic class LaborItem: JobItem\n{\n}\n\n```\n\n----------------------------------------\n\nTITLE: Applying Extract Method within the Gamma Class (Java)\nDESCRIPTION: Demonstrates further refactoring within the `Gamma` class using Extract Method. A conditional block from `Compute` is moved into a new private method `ImportantThing`, and the original location in `Compute` is replaced with a call to this new method, improving readability.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/replace-method-with-method-object.md#_snippet_8\n\nLANGUAGE: java\nCODE:\n```\n  private void ImportantThing()\n  {\n    if ((yearToDate - importantValue1) > 100)\n    {\n      importantValue2 -= 20;\n    }\n  }\n```\n\nLANGUAGE: java\nCODE:\n```\n  public int Compute()\n  {\n    importantValue1 = (inputVal * quantity) + account.Delta();\n    importantValue2 = (inputVal * yearToDate) + 100;\n    ImportantThing(); // Call to the extracted method\n    importantValue3 = importantValue2 * 7;\n    // and so on…\n    return importantValue3 - 2 * importantValue1;\n  }\n```\n\n----------------------------------------\n\nTITLE: Implementing getHeadCount in Leaf Class (Employee, PHP)\nDESCRIPTION: This snippet defines the `getHeadCount` method for the `Employee` class, which acts as a leaf node in the Composite pattern. Since an employee represents a single person, this method provides the base case for the recursion by simply returning 1.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/extract-superclass.md#_snippet_11\n\nLANGUAGE: PHP\nCODE:\n```\n\n  public function getHeadCount() {\n    return 1;\n  }\n```\n\n----------------------------------------\n\nTITLE: Checking for Suspicious Names Using Control Flag in PHP\nDESCRIPTION: This function iterates through an array of people and checks if any entry matches hard-coded suspicious names (\"Don\" or \"John\"). It utilizes a boolean variable named $found as a control flag, which is initialized to false and set to true when a suspicious name is found, causing the function to stop notifying after the first match. Dependencies include the availability of the sendAlert() function. The input is an array of strings (names); no value is returned, but sendAlert() is triggered when a match is found. The control flag introduces extra checks and unnecessary continued looping after a match.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/remove-control-flag.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nfunction checkSecurity(array $people) {\n  $found = false;\n  for ($i = 0; $i < count($people); $i++) {\n    if (!$found) {\n      if ($people[$i] == \"Don\") {\n        sendAlert();\n        $found = true;\n      }\n      if ($people[$i] == \"John\") {\n        sendAlert();\n        $found = true;\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Making Employee Class Abstract PHP\nDESCRIPTION: This makes the `Employee` class abstract, because after refactoring, it should not be instantiated directly. This is done to enforce the use of the subclasses.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/replace-type-code-with-subclasses.md#_snippet_12\n\nLANGUAGE: PHP\nCODE:\n```\nabstract \n```\n\n----------------------------------------\n\nTITLE: Refactoring payAmount method to use polymorphism (Java)\nDESCRIPTION: Extracts the logic of payAmount from conditional statements into a method within EmployeeType subclasses, passing Employee object as parameter to access specific salary details, simplifying the code and improving extensibility.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/replace-type-code-with-state-strategy.md#_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\npublic int payAmount() {\n  switch (getTypeCode()) {\n    case EmployeeType.ENGINEER:\n      return employee.monthlySalary;\n    case EmployeeType.SALESMAN:\n      return employee.monthlySalary + employee.commission;\n    case EmployeeType.MANAGER:\n      return employee.monthlySalary + employee.bonus;\n    default:\n      throw new RuntimeException(\"Incorrect Employee Code\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Transaction Flow with Separate Date Parameters (Before Refactoring) in Java\nDESCRIPTION: This snippet shows the initial state before applying the 'Introduce Parameter Object' refactoring. The `Account` class has a `getFlowBetween` method that accepts separate `start` and `end` Date parameters to calculate the total value of transactions within that period. It iterates through a `Vector` of `Transaction` objects, comparing each transaction's date directly.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/introduce-parameter-object.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nclass Account {\n  // ...\n  private Vector transactions = new Vector();\n\n  public double getFlowBetween(Date start, Date end) {\n    double result = 0;\n    Enumeration e = transactions.elements();\n    while (e.hasMoreElements()) {\n      Transaction each = (Transaction) e.nextElement();\n      if (each.getDate().compareTo(start) >= 0 && each.getDate().compareTo(end) <= 0) {\n        result += each.getValue();\n      }\n    }\n    return result;\n  }\n}\n\nclass Transaction {\n  private Date chargeDate;\n  private double value;\n\n  public Transaction(double value, Date chargeDate) {\n    this.value = value;\n    this.chargeDate = chargeDate;\n  }\n  public Date getDate() {\n    return chargeDate;\n  }\n  public double getValue() {\n    return value;\n  }\n}\n\n// Somewhere in client code…\ndouble flow = account.getFlowBetween(startDate, endDate);\n```\n\n----------------------------------------\n\nTITLE: Consolidated Conditionals and Method Extraction in PHP Payout Class\nDESCRIPTION: This refactored PHP snippet merges multiple conditional checks into a single logical expression using the OR operator in the disabilityAmount method. It extracts this expression into a clearly named private method, isNotEligibleForDisability, to enhance readability and convey the meaning of the condition. The vacationAmount method's nested conditionals are simplified into a single expression with an AND operator and a ternary operator to return values concisely. This requires PHP 5+ compatibility and preserves existing class properties and structure.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/consolidate-conditional-expression.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nclass Payout {\n  // ...\n\n  public $seniority;\n  public $monthsDisabled;\n  public $isPartTime;\n\n  public function disabilityAmount() {\n    if ($this->isNotEligibleForDisability()) {\n      return 0;\n    }\n    // compute the disability amount\n    // ...\n  }\n  private function isNotEligibleForDisability() {\n    return ($this->seniority < 2) || ($this->monthsDisabled > 12) || ($this->isPartTime);\n  }\n\n  public function vacationAmount() {\n    return ($this->onVacation() && $this->lengthOfService() > 10) ? 1 : 0.5;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initial PHP Classes with Middle Man Delegation\nDESCRIPTION: Initial PHP code showing a `Person` class that delegates the `getManager()` call to its `Department` object (the 'middle man'). Client code accesses the manager indirectly via `$john->getManager()`. This structure hides the `Department` object from the client.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/remove-middle-man.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass Person {\n  private $department; // Department\n\n  public function setDepartment($arg) {\n    $this->department = $arg;\n  }\n  public function getManager() {\n    return $this->department->getManager();\n  }\n}\n\nclass Department {\n  private $chargeCode;\n  private $manager; // Person\n\n  public function __construct(Person $arg) {\n    $this->manager = $arg;\n  }\n  public function getManager() {\n    return $this->manager;\n  }\n\n  //…\n}\n\n// Somewhere in client code\n$manager = $john->getManager();\n```\n\n----------------------------------------\n\nTITLE: Updating method calls to use delegation\nDESCRIPTION: Changed the method call within bankCharge method to directly call the overdraftCharge method on the AccountType object instead of using the local method.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/move-method.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\ntype->overdraftCharge($this->daysOverdrawn)\n```\n\n----------------------------------------\n\nTITLE: Create Employee Factory Method - C#\nDESCRIPTION: This code snippet creates a factory method `Create` in the `Employee` class to instantiate `Employee` objects based on the provided type. It takes an integer `type` as input and returns a new `Employee` object. This replaces direct constructor calls with a factory method.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/replace-type-code-with-subclasses.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n\n  public static Employee Create(int type)\n  {\n    return new Employee(type);\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Adding Explicit Private Properties for Encapsulation (C#)\nDESCRIPTION: This intermediate step demonstrates creating explicit private properties (`Low`, `High`) with standard getters and setters that wrap the original private fields (`low`, `high`). This is the core action of encapsulating the fields.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/self-encapsulate-field.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n  private int Low\n  {\n    get { return low; }\n    set { low = value; }\n  }\n  private int High\n  {\n    get { return high; }\n    set { high = value; }\n  }\n```\n\n----------------------------------------\n\nTITLE: Initializing Interval and Subscribing - C#\nDESCRIPTION: This snippet initializes a new `Interval` object and subscribes the current object (`this`) to receive notifications from it. This is part of setting up the window to receive data from the domain object when the GUI opens. The `OnNext()` method is then called on the subject to fill the window object (GUI) with data.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/duplicate-observed-data.md#_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nsubject = new Interval();\n    subject.Subscribe(this);\n    OnNext(subject);\n```\n\n----------------------------------------\n\nTITLE: Initial Classes: Employee and Department - C#\nDESCRIPTION: This code defines two classes, `Employee` and `Department`, representing employees and departments within an organization. The `Employee` class has properties for name, ID, and an annual cost. The `Department` class contains a list of employees and methods to add employees and calculate the total annual cost of the department. This is the code before applying the Extract Superclass refactoring.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/extract-superclass.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class Employee\n{\n  private int annualCost;\n\n  public string Name { get; private set; }\n  public string Id { get; private set; }\n\n  public Employee(string name, string id, int annualCost)\n  {\n    Name = name;\n    Id = id;\n    this.annualCost = annualCost;\n  }\n\n  public int GetAnnualCost()\n  {\n    return annualCost;\n  }\n}\n\npublic class Department\n{\n  private List<Employee> staff = new List<Employee>();\n\n  public string Name { get; private set; }\n  public int HeadCount\n  {\n    get{ return staff.Count; }\n  }\n  public IList<Employee> Staff\n  {\n    get{ return staff.AsReadOnly(); }\n  }\n\n  public Department(string name)\n  {\n    Name = name;\n  }\n\n  public void AddStaff(Employee item)\n  {\n    staff.Add(item);\n  }\n  public int GetTotalAnnualCost()\n  {\n    return staff.Sum(i => i.GetAnnualCost());\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Moving employee Field to LaborItem - PHP\nDESCRIPTION: Moves the `employee` field from the parent class to the `LaborItem` class. This field represents the employee associated with a labor item. No external dependencies. Expected outcome: Field declaration inside LaborItem class.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/extract-subclass.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n\n  private $employee; // Employee\n\n```\n\n----------------------------------------\n\nTITLE: Updating Person's getOfficeNumber Method (Java)\nDESCRIPTION: Updates the `getOfficeNumber` method in the `Person` class to delegate the call to the `getNumber` method of the `officeTelephone` object.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/extract-class.md#_snippet_13\n\nLANGUAGE: java\nCODE:\n```\nreturn officeTelephone.getNumber();\n```\n\n----------------------------------------\n\nTITLE: Refactoring Manager constructor to call base constructor in C#\nDESCRIPTION: This snippet demonstrates the process of modifying the Manager subclass constructor to invoke the base class Employee's constructor with parameters, replacing individual field initializations with a call to the base constructor, thereby improving code reuse and clarity.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/pull-up-constructor-body.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic Manager(string name, string id, int grade) : base(name, id)\n{\n    this.grade = grade;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining 'PartsItem' Subclass for 'JobItem' with Custom Constructor\nDESCRIPTION: The snippet creates a new 'PartsItem' subclass of 'JobItem', defining a constructor that initializes its base class, enabling specific representation of parts within the job system.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/extract-subclass.md#_snippet_15\n\nLANGUAGE: C#\nCODE:\n```\npublic class PartsItem : JobItem\n{\n  public PartsItem(int quantity, int unitPrice): base(quantity, unitPrice) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Pushing Down unitPrice to PartsItem - PHP\nDESCRIPTION: Pushes down the `unitPrice` field and its initialization logic to the `PartsItem` subclass. The visibility of `$unitPrice` is changed to protected in `JobItem` to allow access from `PartsItem`. Requires the creation of `PartsItem`. Expected output: Field initialization in PartsItem constructor.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/extract-subclass.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n\n    $this->unitPrice = $unitPrice;\n\n```\n\n----------------------------------------\n\nTITLE: Initial Price Calculation - Java\nDESCRIPTION: This code snippet represents the initial complex calculation of a price, including base price, discounts, and shipping costs. It's a single expression that is difficult to understand and maintain. The goal of the refactoring is to simplify this expression by extracting variables.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/extract-variable.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\ndouble price() {\n  // Price consists of: base price - discount + shipping cost\n  return quantity * itemPrice -\n    Math.max(0, quantity - 500) * itemPrice * 0.05 +\n    Math.min(quantity * itemPrice * 0.1, 100.0);\n}\n```\n\n----------------------------------------\n\nTITLE: Throwing Exception Instead of Returning Error Code (C#)\nDESCRIPTION: Illustrates the core change within the `Withdraw` method: replacing the `return -1;` statement (which indicates an error via a code) with `throw new BalanceException();` to signal the error condition using an exception.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/replace-error-code-with-exception.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nthrow new BalanceException();\n```\n\n----------------------------------------\n\nTITLE: Adding TelephoneNumber reference to Person - PHP\nDESCRIPTION: This snippet adds a reference to the TelephoneNumber class within the Person class. It includes a private property to hold the TelephoneNumber instance and initializes it in the Person class's constructor.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/extract-class.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n\n  private $officeTelephone; // TelephoneNumber\n  \n  public function __construct() {\n    $this->officeTelephone = new TelephoneNumber();\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Adding isNull Method to Customer Class in Java\nDESCRIPTION: Defines an isNull() method in the Customer class which returns false to indicate this is a real Customer instance. This method lays groundwork for polymorphic checks replacing null comparisons.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/introduce-null-object.md#_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\n\n  public boolean isNull() {\n    return false;\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Updating Person's setOfficeNumber Method (Java)\nDESCRIPTION: Updates the `setOfficeNumber` method in the `Person` class to delegate the call to the `setNumber` method of the `officeTelephone` object.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/extract-class.md#_snippet_14\n\nLANGUAGE: java\nCODE:\n```\nofficeTelephone.setNumber(arg);\n```\n\n----------------------------------------\n\nTITLE: Moving and Refining the Computation Logic in Gamma Class (Java)\nDESCRIPTION: Adds a public `Compute` method containing the core calculation logic extracted from the original method. Local variable declarations are removed as they are now class fields. Calls to methods of the original class (e.g., `Delta()`) are updated to use the `account` field reference (`account.Delta()`).\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/replace-method-with-method-object.md#_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n  public int Compute()\n  {\n    importantValue1 = (inputVal * quantity) + account.Delta();\n    importantValue2 = (inputVal * yearToDate) + 100;\n    if ((yearToDate - importantValue1) > 100)\n    {\n      importantValue2 -= 20;\n    }\n    int importantValue3 = importantValue2 * 7;\n    // and so on…\n    return importantValue3 - 2 * importantValue1;\n  }\n```\n\n----------------------------------------\n\nTITLE: Removing obsolete constants from Person class\nDESCRIPTION: This snippet removes redundant static constants representing blood types from the Person class, relying solely on BloodGroup objects for type representation, thus simplifying the codebase.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/replace-type-code-with-class.md#_snippet_9\n\nLANGUAGE: Java\nCODE:\n```\n  public static final int O = ...;\n  public static final int A = ...;\n  public static final int B = ...;\n  public static final int AB = ...;\n```\n\n----------------------------------------\n\nTITLE: Calling the Initial `printDetails` Method (Java)\nDESCRIPTION: Replaces the original details printing code in `printOwing` with a call to the newly extracted (but initially flawed) `printDetails` method.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/extract-method.md#_snippet_7\n\nLANGUAGE: Java\nCODE:\n```\n  printDetails();\n```\n\n----------------------------------------\n\nTITLE: Refactored Employee Class with Parameterized Raise Method (Java)\nDESCRIPTION: The refactored Employee class replaces the specific raise methods (`tenPercentRaise`, `fivePercentRaise`) with a single `raise(double factor)` method that accepts the raise factor as a parameter. The `promoteToManager` method is updated to use this new `raise` method. Client code is also updated to call the parameterized `raise` method directly instead of the removed specific methods.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/parameterize-method.md#_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nclass Employee {\n  // ...\n  public void promoteToManager() {\n    type = Employee.MANAGER;\n    raise(0.5);\n  }\n  public void raise(double factor) {\n    salary *= (1 + factor);\n  }\n}\n\n// Somewhere in client code\nif (employee.yearsOfExperience > 5) {\n  if (employee.clients.size() > 10) {\n    employee.promoteToManager();\n  }\n  else {\n    employee.raise(0.05);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Refactored Price Calculation Using Query Methods in Java\nDESCRIPTION: Refactored implementation where temporary variables have been replaced with method calls to basePrice() and discountFactor(). This improves readability and allows the methods to be reused elsewhere in the class.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/replace-temp-with-query.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nclass Product {\n  // ...\n  public double getPrice() {\n    return basePrice() * discountFactor();\n  }\n  private int basePrice() {\n    return quantity * itemPrice;\n  }\n  private double discountFactor() {\n    if (basePrice() > 1000) {\n      return 0.95;\n    }\n    else {\n      return 0.98;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating overdraftCharge method in AccountType class\nDESCRIPTION: Adding the overdraftCharge method to the AccountType class, which calculates overdraft fees based on days overdrawn and premium status.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/move-method.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n  public function overdraftCharge() {\n    if ($this->type->isPremium()) {\n      $result = 10;\n      if ($this->daysOverdrawn > 7) {\n        $result += ($this->daysOverdrawn - 7) * 0.85;\n      }\n      return $result;\n    }\n    else {\n      return $this->daysOverdrawn * 1.75;\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Adding a Shared Property - C#\nDESCRIPTION: This snippet introduces a shared property `Name` in the `Party` class.  It will be inherited by `Employee` and `Department`. It's a simple getter/setter with protected set access which is required for inheriting classes. Requires no dependencies.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/extract-superclass.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\n  public string Name { get; protected set; }\n```\n\n----------------------------------------\n\nTITLE: Iterating and Counting Advanced Courses Using Iterator in Java\nDESCRIPTION: Provides example client code iterating through the courses collection obtained from a Person instance named kent. It counts the number of advanced courses by using an Iterator, checking each Course's isAdvanced method. This snippet shows typical usage of the encapsulated collection after interface improvements, demonstrating traversing without direct modification.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/encapsulate-collection.md#_snippet_7\n\nLANGUAGE: Java\nCODE:\n```\nIterator iter = kent.getCourses().iterator();\nint count = 0;\nwhile (iter.hasNext()) {\n  Course each = (Course) iter.next();\n  if (each.isAdvanced()) {\n    count++;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Article in Markdown and HTML (Initial)\nDESCRIPTION: This snippet presents a basic implementation of an `Article` class with methods to render the article in Markdown and HTML formats. The class contains properties for article content and uses `StringBuilder` to construct the output. This serves as the initial implementation before refactoring to the Template Method pattern.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/form-template-method.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class Article\n{\n  // ...\n  public string Title { get; set; }\n  public string Intro { get; set; }\n  public string Body { get; set; }\n  public string Author { get; set; }\n  public string Date { get; set; }\n\n  public string MarkdownView()\n  {\n    var output = new StringBuilder();\n    output.Append(\"# \").Append(Title).AppendLine().AppendLine();\n    output.Append(\"> \").Append(Intro).AppendLine().AppendLine();\n    output.Append(Body).AppendLine().AppendLine();\n    output.Append(\"_Written by \").Append(Author).Append(\" on \").Append(Date).Append(\"_\");\n    return output.ToString();\n  }\n  public string HtmlView()\n  {\n    var output = new StringBuilder();\n    output.Append(\"<h2>\").Append(Title).Append(\"</h2>\").AppendLine();\n    output.Append(\"<blockquote>\").Append(Intro).Append(\"</blockquote>\").AppendLine();\n    output.Append(\"<p>\").Append(Body).Append(\"</p>\").AppendLine();\n    output.Append(\"<em>Written by \").Append(Author).Append(\" on \").Append(Date).Append(\"</em>\");\n    return output.ToString();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking for Suspicious Names with Control Flag in Java\nDESCRIPTION: This Java function iterates through an array of strings, checking if any element equals \"Don\" or \"John\". It uses a boolean variable 'found' as a control flag to avoid sending multiple alerts or repeated checks after the first suspicious name is found. The function uses conditional logic and updates the flag to true upon detecting a match. Inputs: array of names. Output: calls sendAlert() for the first match, then suppresses further action. Prerequisite: sendAlert() method must be defined.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/remove-control-flag.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nvoid checkSecurity(String[] people) {\n  boolean found = false;\n  for (int i = 0; i < people.length; i++) {\n    if (!found) {\n      if (people[i].equals (\"Don\")) {\n        sendAlert();\n        found = true;\n      }\n      if (people[i].equals (\"John\")) {\n        sendAlert();\n        found = true;\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Printing the type Party - C#\nDESCRIPTION: This snippet prints \"Party\", indicating a change to the class's type for use in the composite pattern. It is a refactoring step to accommodate composite pattern in the context.  It serves no direct functionality on its own.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/extract-superclass.md#_snippet_13\n\nLANGUAGE: C#\nCODE:\n```\nParty\n```\n\n----------------------------------------\n\nTITLE: Overriding PayAmount Method in Engineer Subclass in C#\nDESCRIPTION: Defines the PayAmount method override inside the Engineer subclass to return the employee's monthly salary. This replaces prior conditional logic, providing a subclass-specific payroll calculation implementation. Requires Employee class with MonthlySalary property. The method input is an Employee instance and output is an integer representing the payment amount.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/replace-type-code-with-state-strategy.md#_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\n\n\n  public override int PayAmount(Employee employee)\n  {\n    return employee.MonthlySalary;\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Refactoring Variables into Methods in C#\nDESCRIPTION: This snippet illustrates the process of replacing local variables with method calls in C#, including creating new methods, refactoring assignments, and ensuring correctness through compilation and testing steps. It shows the approach of gradually transforming variables like basePrice and discountFactor into methods such as BasePrice() and DiscountFactor().\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/replace-temp-with-query.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nprivate int BasePrice()\n{\n  return quantity * itemPrice;\n}\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst \ndouble discountFactor = 0;\n```\n\nLANGUAGE: C#\nCODE:\n```\ndiscountFactor = 0.95;\n// or\n// discountFactor = 0.98;\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst\ndouble discountFactor = 0;\n```\n\nLANGUAGE: C#\nCODE:\n```\ndouble discountFactor = 0;\n```\n\nLANGUAGE: C#\nCODE:\n```\ndouble discountFactor = 0.95;\n```\n\nLANGUAGE: C#\nCODE:\n```\nreturn BasePrice()\n```\n\nLANGUAGE: C#\nCODE:\n```\n(BasePrice() > 1000)\n```\n\nLANGUAGE: C#\nCODE:\n```\nreturn BasePrice();\n```\n\nLANGUAGE: C#\nCODE:\n```\nint basePrice = BasePrice();\n```\n\nLANGUAGE: C#\nCODE:\n```\n// variable declaration removed after final refactoring\n```\n\nLANGUAGE: C#\nCODE:\n```\nprivate double DiscountFactor()\n{\n  if (BasePrice() > 1000)\n  {\n    return 0.95;\n  }\n  return 0.98;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing the Constructor for Gamma Class in Java\nDESCRIPTION: Defines a public constructor for the `Gamma` class. It accepts the original `Account` object (`source`) and the original method's parameters (`inputValArg`, `quantityArg`, `yearToDateArg`) and initializes the corresponding fields of the `Gamma` instance, preparing it for computation.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/replace-method-with-method-object.md#_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n  public Gamma(Account source, int inputValArg, int quantityArg, int yearToDateArg)\n  {\n    this.account = source;\n    inputVal = inputValArg;\n    quantity = quantityArg;\n    yearToDate = yearToDateArg;\n  }\n```\n\n----------------------------------------\n\nTITLE: Refactored Suspicious Name Check Using Break Statement in Java\nDESCRIPTION: This improved Java function removes the control flag by directly breaking out of the loop when a suspicious name (\"Don\" or \"John\") is found, immediately after calling sendAlert(). This eliminates unnecessary iterations and enhances code clarity. Inputs: array of names. Output: calls sendAlert() and stops at the first detection. Prerequisite: sendAlert() method must be implemented. Limitation: only the first suspicious name triggers the alert and loop exit.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/remove-control-flag.md#_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nvoid checkSecurity(String[] people) {\n  for (int i = 0; i < people.length; i++) {\n    if (people[i].equals (\"Don\")) {\n      sendAlert();\n      break;\n    }\n    if (people[i].equals (\"John\")) {\n      sendAlert();\n      break;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating the Initial Gamma Class in Java\nDESCRIPTION: Defines an empty public class named `Gamma`. This class will serve as the container for the logic and data previously managed within a complex method of another class (e.g., `Account`), following the Extract Class refactoring pattern.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/replace-method-with-method-object.md#_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic class Gamma\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Original Employee and Manager Classes\nDESCRIPTION: This snippet defines the initial structure of `Employee` and `Manager` classes. The `Employee` class has basic properties for an employee, while `Manager` extends `Employee` and includes a constructor for initializing its specific properties, including calling the parent constructor. This is the starting point for refactoring.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/pull-up-constructor-body.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nclass Employee {\n  // ...\n  protected $name;\n  protected $id;\n}\n   \nclass Manager extends Employee {\n  // ...\n  private $grade;\n  public function __construct($name, $id, $grade) {\n    $this->name = $name;\n    $this->id = $id;\n    $this->grade = $grade;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Original officeNumber Field from Person (Java)\nDESCRIPTION: Removes the original `officeNumber` field from the `Person` class as it has been successfully moved to the `TelephoneNumber` class.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/extract-class.md#_snippet_15\n\nLANGUAGE: java\nCODE:\n```\nprivate String officeNumber;\n\n```\n\n----------------------------------------\n\nTITLE: Creating the Initial Customer Class in Java\nDESCRIPTION: Defines an empty `Customer` class in Java. This is the initial step in the 'Replace Data Value with Object' refactoring, creating a dedicated class to encapsulate customer data previously stored as a simple string in the `Order` class.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/replace-data-value-with-object.md#_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nclass Customer {\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Classes Person and Department\nDESCRIPTION: This C# snippet defines two classes, `Person` and `Department`, and their properties. The `Person` class contains a `Department` object. The `Department` class represents a department with a manager.  It serves as the initial setup for demonstrating the Hide Delegate refactoring. The `Person` class holds a reference to a `Department` object, and the `Department` class has a `Manager` property.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/hide-delegate.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class Person\n{\n  Department department;\n\n  public Department Department\n  {\n    get {\n      return department;\n    }\n    set {\n      department = value;\n    }\n  }\n}\n\npublic class Department\n{\n  private string chargeCode;\n\n  public Person Manager\n  {\n    get;\n  }\n\n  public Department(Person manager)\n  {\n    this.Manager = manager;\n  }\n\n  //…\n```\n\n----------------------------------------\n\nTITLE: Replace Returns with Query Method Calls - C#\nDESCRIPTION: This step replaces the original `return` statements in the `FindCriminalAndAlert` method with calls to the newly created `FindCriminal` method. This prepares the original method to be transformed into a modifier.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/separate-query-from-modifier.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n\n    string found = FindCriminal(people);\n\n```\n\n----------------------------------------\n\nTITLE: Accessing Manager Directly (Before Refactoring)\nDESCRIPTION: This C# snippet demonstrates the initial, less desirable approach where the client code directly accesses the manager through the `Department` property of the `Person` object. This direct access exposes the client code to the `Department` class and violates encapsulation principles.  The code shows a client directly accessing the department's manager.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/hide-delegate.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n// Somewhere in client code\nmanager = john.Department.Manager;\n```\n\n----------------------------------------\n\nTITLE: Calculating Discount (Refactored) - Java\nDESCRIPTION: This Java code defines a refactored `discount` method, which calculates a discount based on the given `inputVal`, `quantity`, and `yearToDate`.  It uses a local variable, `result`, initialized with `inputVal`, avoiding modification of the input parameter. This version uses the 'final' keyword to show that no assignments are made to the parameters. No dependencies are needed.  The inputs include integer values for `inputVal`, `quantity` and `yearToDate`. The output is the calculated discount which is returned by the method. There are no specific limitations.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/remove-assignments-to-parameters.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nint discount(final int inputVal, final int quantity, final int yearToDate) {\n  int result = inputVal;\n  if (inputVal > 50) {\n    result -= 2;\n  }\n  if (quantity > 100) {\n    result -= 1;\n  }\n  if (yearToDate > 10000) {\n    result -= 4;\n  }\n  return result;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a TelephoneNumber Reference to the Person Class in C#\nDESCRIPTION: Adds a private field `officeTelephone` of type `TelephoneNumber` to the `Person` class and initializes it. This creates the link between the original class and the newly extracted class.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/extract-class.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nprivate TelephoneNumber officeTelephone = new TelephoneNumber();\n```\n\n----------------------------------------\n\nTITLE: Adding Protected Constructor to Person (Java)\nDESCRIPTION: Introduces a protected constructor in the `Person` class that accepts the `isMale` flag and `code`. This constructor is used by the subclass constructors during the transition phase to initialize the new fields in the parent class. Requires the `Person` class definition.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/replace-subclass-with-fields.md#_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\n\n\n  protected Person(boolean isMale, char code) {\n    this.isMale = isMale;\n    this.code = code;\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Corrected `printDetails` Method with Parameter (Java)\nDESCRIPTION: This shows the corrected `printDetails` method after refactoring. It now accepts the `outstanding` value as a `double` parameter to resolve the local variable scope issue. It assumes the `name` variable is accessible through other means (e.g., a class field).\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/extract-method.md#_snippet_8\n\nLANGUAGE: Java\nCODE:\n```\nvoid printDetails(double outstanding) {\n  System.out.println(\"name: \" + name);\n  System.out.println(\"amount: \" + outstanding);\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Distance Traveled Before Refactoring (Java)\nDESCRIPTION: This Java method calculates the distance traveled by an object based on time and applied forces. It uses a single temporary variable `acc` that is assigned two different acceleration values during the calculation (first based on `primaryForce`, then based on `primaryForce + secondaryForce`), making it a candidate for the \"Split Temporary Variable\" refactoring.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/split-temporary-variable.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic double getDistanceTravelled(int time) {\n  double result;\n  double acc = primaryForce / mass;\n  int primaryTime = Math.min(time, delay);\n  result = 0.5 * acc * primaryTime * primaryTime;\n\n  int secondaryTime = time - delay;\n  if (secondaryTime > 0) {\n    double primaryVel = acc * delay;\n    acc = (primaryForce + secondaryForce) / mass;\n    result +=  primaryVel * secondaryTime + 0.5 * acc * secondaryTime * secondaryTime;\n  }\n  return result;\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Type PHP\nDESCRIPTION: This snippet defines the getter method for the employee type.  It's a simple getter that returns the value of the private `$type` property. It encapsulates access to the employee's type.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/replace-type-code-with-subclasses.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n  public function getType() {\n    return $this->type;\n  }\n```\n\n----------------------------------------\n\nTITLE: Creating static methods for each blood type\nDESCRIPTION: This snippet adds static factory methods to the BloodGroup class for each blood type, returning new instances with preset codes. This simplifies creating predefined blood groups without exposing constructors directly.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/replace-type-code-with-class.md#_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\n  public static BloodGroup O() {\n    return new BloodGroup(0);\n  }\n  public static BloodGroup A() {\n    return new BloodGroup(1);\n  }\n  public static BloodGroup B() {\n    return new BloodGroup(2);\n  }\n  public static BloodGroup AB() {\n    return new BloodGroup(3);\n  }\n```\n\n----------------------------------------\n\nTITLE: Creating the LaborItem Subclass in Java\nDESCRIPTION: Defines the initial empty `LaborItem` class as a subclass of `JobItem`. This is the first step in extracting functionality specific to labor items into a separate class to reduce the complexity of the `JobItem` class.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/extract-subclass.md#_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n\n\nclass LaborItem extends JobItem {\n}\n\n```\n\n----------------------------------------\n\nTITLE: Extracting Advanced Course Counting Method in Java\nDESCRIPTION: A method that counts the number of advanced courses a person has. It iterates through the course collection, checks if each course is advanced, and increments a counter accordingly.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/encapsulate-collection.md#_snippet_8\n\nLANGUAGE: Java\nCODE:\n```\npublic int numberOfAdvancedCourses() {\n  Iterator iter = getCourses().iterator();\n  int count = 0;\n  while (iter.hasNext()) {\n    Course each = (Course) iter.next();\n    if (each.isAdvanced()) {\n      count++;\n    }\n  }\n  return count;\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Equals and GetHashCode in C#\nDESCRIPTION: This snippet overrides the `Equals` and `GetHashCode` methods to enable value-based comparison of `Customer` objects. This ensures that two `Customer` objects with the same `Name` and `BirthDate` are considered equal. It's crucial for value objects to properly implement equality.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/change-reference-to-value.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n\n  public override bool Equals(Object obj)\n  {\n    Customer other = obj as Customer;\n\n    if (other == null)\n      return false;\n\n    return this.BirthDate == other.BirthDate && string.Equals(this.Name, other.Name, StringComparison.Ordinal);\n  }\n  public override int GetHashCode()\n  {\n    int hashCode = 11;\n    unchecked\n    {\n      if (Name != null)\n        hashCode = hashCode * 22 + Name.GetHashCode();\n      hashCode = hashCode * 22 + BirthDate.GetHashCode();\n    }\n    return hashCode;\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Refactoring to Method Object Pattern in Java\nDESCRIPTION: This snippet refactors the original 'gamma' method by introducing a new class, Gamma, encapsulating its logic and improving modularity. The Account class’s 'gamma' method now instantiates the Gamma object and delegates computation to its 'compute' method. The Gamma class stores all parameters and local variables as fields, takes required parameters in its constructor, and implements helper methods for complex logic. Dependencies include the 'Account' class instance and any methods it provides such as 'delta'. Inputs are supplied via constructor arguments, and the output of 'compute' remains an integer. This pattern is best suited for methods with many variables and complex logic.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/replace-method-with-method-object.md#_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nclass Account {\n  // ...\n  int gamma(int inputVal, int quantity, int yearToDate) {\n    return new Gamma(this, inputVal, quantity, yearToDate).compute();\n  }\n  // ...\n}\n\nclass Gamma {\n  private final Account account;\n  private int importantValue1;\n  private int importantValue2;\n  private int importantValue3;\n  private int inputVal;\n  private int quantity;\n  private int yearToDate;\n  public Gamma(Account source, int inputValArg, int quantityArg, int yearToDateArg) {\n    this.account = source;\n    inputVal = inputValArg;\n    quantity = quantityArg;\n    yearToDate = yearToDateArg;\n  }\n  public int compute() {\n    importantValue1 = (inputVal * quantity) + account.delta();\n    importantValue2 = (inputVal * yearToDate) + 100;\n    importantThing();\n    importantValue3 = importantValue2 * 7;\n    // and so on…\n    return importantValue3 - 2 * importantValue1;\n  }\n  void importantThing() {\n    if ((yearToDate - importantValue1) > 100) {\n      importantValue2 -= 20;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Moving format-specific methods into subclasses in C#\nDESCRIPTION: The MarkdownView and HtmlView methods are transferred into their respective subclasses, encapsulating format-specific rendering logic, and facilitating cleaner, more maintainable code.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/form-template-method.md#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\npublic string MarkdownView()\n{\n  var output = new StringBuilder();\n  output.Append(\"# \").Append(article.Title).AppendLine().AppendLine();\n  output.Append(\"> \").Append(article.Intro).AppendLine().AppendLine();\n  output.Append(article.Body).AppendLine().AppendLine();\n  output.Append(\"_Written by \").Append(article.Author).Append(\" on \").Append(article.Date).Append(\"_\");\n  return output.ToString();\n}\n```\n\nLANGUAGE: C#\nCODE:\n```\npublic string HtmlView()\n{\n  var output = new StringBuilder();\n  output.Append(\"<h2>\").Append(article.Title).Append(\"</h2>\").AppendLine();\n  output.Append(\"<blockquote>\").Append(article.Intro).Append(\"</blockquote>\").AppendLine();\n  output.Append(\"<p>\").Append(article.Body).Append(\"</p>\").AppendLine();\n  output.Append(\"<em>Written by \").Append(article.Author).Append(\" on \").Append(article.Date).Append(\"</em>\");\n  return output.ToString();\n}\n```\n\n----------------------------------------\n\nTITLE: After: Unidirectional Order to Customer Association (Java)\nDESCRIPTION: This snippet shows the state after refactoring the association to be unidirectional from Customer to Order. The `customer` field has been removed from the `Order` class, breaking the direct link. The `getCustomer()` method in `Order` now finds its associated Customer by iterating through all Customer instances and checking which one contains the current order. The `Customer.addOrder` is simplified as it no longer needs to update the Order side of the link directly.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/change-bidirectional-association-to-unidirectional.md#_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nclass Order {\n  // ...\n  public Customer getCustomer() {\n    Iterator iter = Customer.getInstances().iterator();\n    while (iter.hasNext()) {\n      Customer each = (Customer)iter.next();\n      if (each.containsOrder(this)) {\n        return each;\n      }\n    }\n    return null;\n  }\n\n  double getDiscountedPrice() {\n    return getGrossPrice() * (1 - getCustomer().getDiscount());\n  }\n}\n\nclass Customer {\n  // ...\n  private Set orders = new HashSet();\n\n  void addOrder(Order arg) {\n    orders.add(arg);\n  }\n\n  double getPriceFor(Order order) {\n     Assert.isTrue(orders.contains(order));\n     return order.getDiscountedPrice();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Refactoring 'unitPrice' Field Accessibility for Subclass\nDESCRIPTION: To allow subclass access, the 'unitPrice' field's visibility is changed from 'private' to 'protected', and initialization code is pushed down accordingly, ensuring proper subclass functionality.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/extract-subclass.md#_snippet_16\n\nLANGUAGE: C#\nCODE:\n```\nprotected int unitPrice;\n\n// Initialization in subclass constructor\nthis.unitPrice = unitPrice;\n```\n\n----------------------------------------\n\nTITLE: Refactored Discount Calculation Using Local Variable in C#\nDESCRIPTION: This refactored C# method calculates a discount without modifying input parameters. It introduces a local variable 'result', initialized with the 'inputVal' parameter. All discount logic modifies 'result' instead of the original parameter, making the method's behavior clearer and preserving the initial parameter value.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/remove-assignments-to-parameters.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nint Discount(int inputVal, int quantity, int yearToDate)\n{\n  int result = inputVal;\n\n  if (inputVal > 50)\n  {\n    result -= 2;\n  }\n  if (quantity > 100)\n  {\n    result -= 1;\n  }\n  if (yearToDate > 10000)\n  {\n    result -= 4;\n  }\n\n  return result;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing the Customer Factory Method in Java\nDESCRIPTION: This static factory method 'create' allows for constructing new Customer instances with a given name. Initially, it simply returns a new Customer with the supplied name, but as the refactoring progresses, this method is later modified to obtain an existing instance from the registry. Requires the Customer constructor to be accessible and assumes no duplicate name enforcement at this stage.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/change-value-to-reference.md#_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\n\n\n  public static Customer create(String name) {\n    return new Customer(name);\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Using Inheritance in Java Employee Class\nDESCRIPTION: Refactored code where Employee extends Person instead of delegating to it. This eliminates delegation code and simplifies the class structure while maintaining the same functionality.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/replace-delegation-with-inheritance.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nclass Person {\n  private String name;\n\n  public String getName() {\n    return name;\n  }\n  public void setName(String name) {\n    this.name = name;\n  }\n  public String getLastName() {\n    return name.substring(name.lastIndexOf(' ') + 1);\n  }\n}\n\nclass Employee extends Person {\n  @Override public String toString() {\n    return \"Emp: \" + getLastName();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Delegating Overdraft Charge Calculation - C# Call in Account\nDESCRIPTION: This code snippet shows the updated Account class method delegating the calculation of overdraft charges to the corresponding AccountType instance. It passes the daysOverdrawn value as a parameter to the type.OverdraftCharge method after refactoring. The expected input is the current Account context with fields type (AccountType) and daysOverdrawn (int); output is the overdraft fee as a double. Requires previously refactored AccountType.OverdraftCharge implementation.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/move-method.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n    return type.OverdraftCharge(daysOverdrawn);\n```\n\n----------------------------------------\n\nTITLE: Creating Article View Object - PHP\nDESCRIPTION: Defines the initial `ArticleView` class, created after applying the 'Replace Method with Method Object' refactoring. This class encapsulates the logic for rendering an `Article` object in different formats. It takes an `Article` instance in its constructor and provides two methods, `markdownView` and `htmlView`, to generate formatted string output.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/form-template-method.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nclass ArticleView {\n  protected $article;\n  public function __construct(Article $article) {\n    $this->article = $article;\n  }\n  public function markdownView() {\n    $output = \"# \" . $this->article->getTitle() . \"\\n\\n\";\n    $output .= \"> \" . $this->article->getIntro() . \"\\n\\n\";\n    $output .= $this->article->getBody() . \"\\n\\n\";\n    $output .= \"_Written by \" . $this->article->getAuthor() . \" on \" . date(\"m/d/Y\", $this->article->getDate()) . \"_\";\n    return $output;\n  }\n  public function htmlView() {\n    $output = \"<h2>\" . $this->article->getTitle() . \"</h2>\" . \"\\n\";\n    $output .= \"<blockquote>\" . $this->article->getIntro() . \"</blockquote>\" . \"\\n\";\n    $output .= \"<p>\" . $this->article->getBody() . \"</p>\" . \"\\n\";\n    $output .= \"<em>Written by \" . $this->article->getAuthor() . \" on \" . date(\"m/d/Y\", $this->article->getDate()) . \"</em>\";\n    return $output;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Appointments by Date - PHP\nDESCRIPTION: This snippet shows the original `Calendar` class with a method `findAppointment` that retrieves appointments based solely on a given date. It also includes example client code demonstrating how to use this method. The method iterates through appointments and matches them by date.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/add-parameter.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nclass Calendar {\n  // ...\n  private $appointments; // array\n  public function findAppointment(DateTime $date) {\n    $result = array();\n    foreach ($this->appointments as $each) {\n      if ($date->format('Y-m-d') == $each->date->format('Y-m-d')) {\n        $result[] = $date;\n      }\n    }\n    return $result;\n  }\n}\n\n// Somewhere in client code\n$today = new DateTime();\n$appointments = $calendar->findAppointment($today);\n```\n\n----------------------------------------\n\nTITLE: Step-by-Step Refactoring Process with Comments\nDESCRIPTION: This segment narrates the process of replacing inheritance with delegation in the Car class. It includes creating a new engine property, initializing it in the constructor, and updating method calls to delegate to the engine object. The comments and snippets guide through removing inheritance, adding composition, and ensuring the code works correctly after refactoring.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/replace-inheritance-with-delegation.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n  protected $engine;\n\n  public function __construct() {\n    $this->engine = new Engine();\n  }\n\n  // Change method call from $this->getCV() to $this->engine->getCV()\n\n  // Remove 'extends Engine' from class declaration\n\n  // Replace engine initialization: engine = new Engine();\n```\n\n----------------------------------------\n\nTITLE: Creating a Minimal Local Extension Subclass in Java\nDESCRIPTION: Defines an empty MfDateSub subclass extending Date, serving as a starting point for further extension. This stub supports future method additions and constructor delegation. Requires Date class to be extendable; initially, no additional functionality provided.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/introduce-local-extension.md#_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\n// Local extension class.\nclass MfDateSub extends Date {\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Local Variable - Java\nDESCRIPTION: This snippet shows the initialization of a local variable `result` with the value of the input parameter `inputVal` in the `discount` method.  This is the first step of the refactoring process, replacing the original `inputVal`. The method uses the variables `inputVal`, `quantity`, and `yearToDate` as inputs and `result` as a local variable. It requires the previous code implementation of the `discount` method to function. The expected output is the initial value assigned to the local `result` variable.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/remove-assignments-to-parameters.md#_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n  int result = inputVal;\n```\n\n----------------------------------------\n\nTITLE: Adding Name Filtering Logic - PHP\nDESCRIPTION: This snippet shows the code added inside the loop of the new `findAppointmentByDateAndName` method. It implements the logic to filter appointments by name. The condition `($name == null || ($name != null && $name == $each->name))` allows searching for appointments with a specific name or retrieving all appointments for the date if the name is `null`.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/add-parameter.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n        if ($name == null || ($name != null && $name == $each->name)) {\n          $result[] = $date;\n        }\n```\n\n----------------------------------------\n\nTITLE: Adding TelephoneNumber Reference to Person Class (Java)\nDESCRIPTION: Adds a private field of type `TelephoneNumber` to the `Person` class, initializing it with a new instance. This links the `Person` object to its corresponding `TelephoneNumber` object.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/extract-class.md#_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nprivate TelephoneNumber officeTelephone = new TelephoneNumber();\n```\n\n----------------------------------------\n\nTITLE: Passing This Reference when Calling OverdraftCharge\nDESCRIPTION: Shows how to modify the method call to OverdraftCharge by passing the current Account instance using 'this' keyword, ensuring the moved method has access to all required Account data.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/move-method.md#_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nthis\n```\n\n----------------------------------------\n\nTITLE: Removing Abstract Keyword and Inlining Subclass Constructors in PHP\nDESCRIPTION: Removes the abstract keyword from the Person class to allow direct instantiation, as the subclasses no longer have unique implementations. Refactors client code to directly instantiate Person objects with the appropriate field values instead of creating subclass instances, facilitating the removal of subclasses.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/replace-subclass-with-fields.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\nnew Person(true, 'M')\n```\n\n----------------------------------------\n\nTITLE: Adding New External Method in Utility Class\nDESCRIPTION: A new static method GetNearFirstDate is created inside a utility class, which takes a DateTime object and returns the date adjusted to the first of the nearest month. This is to encapsulate date adjustment logic outside the main class.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/introduce-foreign-method.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\npublic static class TypeExtensions\n{\n\n  public static DateTime GetNearFirstDate()\n  {\n    if (previousDate.Day == 1)\n      return previousDate;\n\n    DateTime nextDate = previousDate.AddMonths(1);\n    \n    return new DateTime(nextDate.Year, nextDate.Month, 1);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Moving officeNumber Field to TelephoneNumber - PHP\nDESCRIPTION: This snippet moves the officeNumber field to the TelephoneNumber class and renames it to 'number'.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/extract-class.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n\n  private $number;\n\n```\n\n----------------------------------------\n\nTITLE: Initial Method Definition - C#\nDESCRIPTION: This code snippet shows the initial definition of the 'GetTelephoneNumber' method within the 'Person' class. It returns the telephone number by concatenating the office area code and office number. The 'OfficeAreaCode' and 'OfficeNumber' properties are assumed to exist within the 'Person' class.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/rename-method.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class Person\n{\n  //…\n  public string GetTelephoneNumber()\n  {\n    return \"(\" + OfficeAreaCode + \") \" + OfficeNumber;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Remove Return and Rename Original Method - C#\nDESCRIPTION: This code snippet shows the final steps: removing the `return` statements from the original method and renaming it to `DoSendAlert`. This transforms the original method into a pure modifier, responsible only for sending alerts.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/separate-query-from-modifier.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nvoid\n```\n\nLANGUAGE: csharp\nCODE:\n```\n    if (!String.IsNullOrEmpty(FindCriminal(people))) {\n      SendAlert();\n    }\n\n```\n\n----------------------------------------\n\nTITLE: Calling OnValueChanged in Setters - C#\nDESCRIPTION: This code snippet shows the modification of the setter of the public properties. When setting `start`, `end`, or `length`, the `OnValueChanged` method is called to check for changes, and if changes exist, update the value and notify the observers. This ensures observers are informed whenever a property value changes.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/duplicate-observed-data.md#_snippet_20\n\nLANGUAGE: C#\nCODE:\n```\nOnValueChanged(ref length, value); \n```\n\n----------------------------------------\n\nTITLE: Extracting Superclass: Party from Employee and Department - C#\nDESCRIPTION: This code demonstrates extracting a superclass named `Party` from the `Employee` and `Department` classes. The common `Name` property and the `GetAnnualCost` and `HeadCount` methods are moved into the `Party` abstract class.  The `Employee` and `Department` classes now inherit from `Party` and implement the abstract methods according to their specific needs. This reduces code duplication and promotes a more organized structure.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/extract-superclass.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic abstract class Party\n{\n  public string Name { get; protected set; }\n  public abstract int HeadCount { get; }\n\n  protected Party(string name)\n  {\n    Name = name;\n  }\n\n  public abstract int GetAnnualCost();\n}\n\npublic class Employee: Party\n{\n  private int annualCost;\n\n  public string Id { get; private set; }\n  public override int HeadCount\n  {\n    get{ return 1; }\n  }\n\n  public Employee(string name, string id, int annualCost): base(name)\n  {\n    Id = id;\n    this.annualCost = annualCost;\n  }\n\n  public override int GetAnnualCost()\n  {\n    return annualCost;\n  }\n}\n\npublic class Department: Party\n{\n  private List<Party> items = new List<Party>();\n\n  public override int HeadCount\n  {\n    get{ return items.Sum(i => i.HeadCount); }\n  }\n  public IList<Party> Items\n  {\n    get{ return items.AsReadOnly(); }\n  }\n\n  public Department(string name): base(name)\n  {\n  }\n\n  public void AddItem(Party item)\n  {\n    items.Add(item);\n  }\n  public override int GetAnnualCost()\n  {\n    return items.Sum(i => i.GetAnnualCost());\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Account Property in OverdraftCharge Method\nDESCRIPTION: Demonstrates how to access the Account's DaysOverdrawn property from within the moved method by using the account parameter reference.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/move-method.md#_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\naccount.DaysOverdrawn\n```\n\n----------------------------------------\n\nTITLE: Calling printBanner Method in printOwing PHP\nDESCRIPTION: This line shows the modified 'printOwing' method after the banner code has been extracted. The original code block is replaced with a call to the newly created 'printBanner' method.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/extract-method.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n  $this->printBanner();\n```\n\n----------------------------------------\n\nTITLE: Creating PartsItem Subclass Definition Java\nDESCRIPTION: This snippet defines the basic structure for a new subclass `PartsItem` that extends `JobItem`. This is part of the 'Extract Subclass' refactoring to handle items that are parts rather than labor, replacing type code related to parts pricing.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/extract-subclass.md#_snippet_13\n\nLANGUAGE: Java\nCODE:\n```\n\n\nclass PartsItem extends JobItem {\n  public PartsItem(int quantity, int unitPrice) {\n    super(quantity, unitPrice);\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Refactored Account and AccountType with Encapsulated Field in C#\nDESCRIPTION: This snippet demonstrates the refactored `Account` and `AccountType` classes after encapsulation. The `interestRate` field has been removed from the `Account` class and is now a property of the `AccountType` class, accessed via a property named `InterestRate`.  The `InterestForAmountDays` method now uses the new property.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/move-field.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic class Account\n{\n  // ...\n  private AccountType type;\n\n  private double InterestRate\n  {\n    get {\n      return type.InterestRate;\n    }\n    set {\n      type.InterestRate = value;\n    }\n  }\n\n  public double InterestForAmountDays(double amount, int days)\n  {\n    return InterestRate * amount * days / 365.0;\n  }\n  public double InterestForBigFamily(double familySize)\n  {\n    return InterestRate / familySize;\n  }\n\n  // other 10 methods, which use InterestRate\n}\n\npublic class AccountType\n{\n  // ...\n  public double InterestRate\n  {\n    get;\n    set;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: After Refactoring: Form Template Method in PHP\nDESCRIPTION: This snippet shows the refactored structure applying the Form Template Method pattern. The duplicated view logic is moved into a hierarchy of view classes. An abstract `ArticleView` class defines the overall `view` template method, which calls abstract methods (`title`, `intro`, `body`, `footer`) representing the steps. Concrete subclasses (`ArticleMarkdown`, `ArticleHtml`) implement these abstract steps, providing the specific formatting details for each view type. The original `Article` class now delegates the view generation to instances of these view classes.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/form-template-method.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass Article {\n  // ...\n  public function getTitle() { /* … */ }\n  public function getIntro() { /* … */ }\n  public function getBody() { /* … */ }\n  public function getAuthor() { /* … */ }\n  public function getDate() { /* … */ }\n\n  public function markdownView() {\n    $view = new ArticleMarkdown($this);\n    return $view->view();\n  }\n  public function htmlView() {\n    $view = new ArticleHtml($this);\n    return $view->view();\n  }\n}\n\nabstract class ArticleView {\n  protected $article;\n  protected function __construct(Article $article) {\n    $this->article = $article;\n  n  protected abstract function title();\n  protected abstract function intro();\n  protected abstract function body();\n  protected abstract function footer();\n  public function view() {\n    return $this->title()\n      . $this->intro()\n      . $this->body()\n      . $this->footer();\n  }\n}\n\nclass ArticleMarkdown extends ArticleView {\n  public function __construct(Article $article) {\n    parent::__construct($article);\n  }\n  protected function title() {\n    return \"# \" . $this->article->getTitle() . \"\\n\\n\";\n  }\n  protected function intro() {\n    return \"> \" . $this->article->getIntro() . \"\\n\\n\";\n  }\n  protected function body() {\n    return $this->article->getBody() . \"\\n\\n\";\n  }\n  protected function footer() {\n    return \"_Written by \" . $this->article->getAuthor() . \" on \" . date(\"m/d/Y\", $this->article->getDate()) . \"_\";\n  }\n}\n\nclass ArticleHtml extends ArticleView {\n  public function __construct(Article $article) {\n    parent::__construct($article);\n  }\n  protected function title() {\n    return \"<h2>\" . $this->article->getTitle() . \"<\\/h2>\" . \"\\n\";\n  }\n  protected function intro() {\n    return \"<blockquote>\" . $this->article->getIntro() . \"<\\/blockquote>\" . \"\\n\";\n  }\n  protected function body() {\n    return \"<p>\" . $this->article->getBody() . \"<\\/p>\" . \"\\n\";\n  }\n  protected function footer() {\n    return \"<em>Written by \" . $this->article->getAuthor() . \" on \" . date(\"m/d/Y\", $this->article->getDate()) . \"<\\/em>\";\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Original Implementation of Account and AccountType Classes in PHP\nDESCRIPTION: The initial code structure where the overdraftCharge method is defined in the Account class, even though it primarily depends on the AccountType. The overdraftCharge calculation varies based on whether the account type is premium or not.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/move-method.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass Account {\n  // ...\n  private $type; // AccountType\n  private $daysOverdrawn;\n\n  public function overdraftCharge() {\n    if ($this->type->isPremium()) {\n      $result = 10;\n      if ($this->daysOverdrawn > 7) {\n        $result += ($this->daysOverdrawn - 7) * 0.85;\n      }\n      return $result;\n    }\n    else {\n      return $this->daysOverdrawn * 1.75;\n    }\n  }\n  public function bankCharge() {\n    $result = 4.5;\n    if ($this->daysOverdrawn > 0) {\n      $result += $this->overdraftCharge();\n    }\n    return $result;\n  }\n}\n\nclass AccountType {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Self-Encapsulating Interest Rate Field in Account Class in C#\nDESCRIPTION: Implementation of a private property that encapsulates the interest rate field, allowing for easier refactoring. This pattern helps when many methods in the class use the field, as changes only need to be made to the property accessors.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/move-field.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nprivate double interestRate;\n\nprivate double InterestRate\n{\n  get {\n    return interestRate;\n  }\n  set {\n    interestRate = value;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Person Class Before Extract Class Refactoring in PHP\nDESCRIPTION: Original Person class that contains both personal information and telephone number functionality. The class has fields and methods for managing name and telephone information (area code and number) all mixed together.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/extract-class.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass Person {\n  private $name;\n  private $officeAreaCode;\n  private $officeNumber;\n  \n  public function getName() {\n    return $this->name;\n  }\n  public function getTelephoneNumber() {\n    return (\"(\" . $this->officeAreaCode . \") \" . $this->officeNumber);\n  }\n  public function getOfficeAreaCode() {\n    return $this->officeAreaCode;\n  }\n  public function setOfficeAreaCode($arg) {\n    $this->officeAreaCode = arg;\n  }\n  public function getOfficeNumber() {\n    return $this->officeNumber;\n  }\n  public function setOfficeNumber($arg) {\n    $this->officeNumber = $arg;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Text Field Properties on Leave - C#\nDESCRIPTION: This code ensures that changes made in text fields (`tbStart`, `tbEnd`, `tbLength`) are saved when the field loses focus. The corresponding properties (`Start`, `End`, and `Length`) are updated with the text field's value. This is part of handling user input to keep the GUI and the domain model in sync. The setters of the properties are called here.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/duplicate-observed-data.md#_snippet_12\n\nLANGUAGE: C#\nCODE:\n```\n        this.Length = tb.Text;\n```\n\n----------------------------------------\n\nTITLE: Using a Data Class with Named Accessors for Team Data in Java\nDESCRIPTION: This snippet demonstrates the improved, refactored approach. The 'Tournament' class now contains a field 'row' of type 'Performance', which encapsulates the team details. 'Performance' exposes private fields for name and score, with strongly-typed getter and setter methods. All interactions move from array indices to clearly named methods and fields, increasing type safety and clarity. No external dependencies are needed; input for score is set as a string and parsed internally.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/replace-array-with-object.md#_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nclass Tournament {\n  Performance row = new Performance();\n\n  public Tournament() {\n    row.setName(\"Liverpool\");\n    row.setScore(\"15\");\n  }\n  public void displayScore() {\n    String name = row.getName();\n    int score = row.getScore();\n    // ...\n  }\n}\n\nclass Performance {\n  private String name;\n  private int score;\n\n  public String getName() {\n    return name;\n  }\n  public void setName(String arg) {\n    name = arg;\n  }\n  public int getScore() {\n    return score;\n  }\n  public void setScore(String arg) {\n    score = Integer.parseInt(arg);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Price with Temporary Variables in Java\nDESCRIPTION: Original implementation of getPrice() method using temporary variables basePrice and discountFactor to calculate the final price with quantity-based discounts.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/replace-temp-with-query.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nclass Product {\n  // ...\n  public double getPrice() {\n    int basePrice = quantity * itemPrice;\n    double discountFactor;\n    if (basePrice > 1000) {\n      discountFactor = 0.95;\n    }\n    else {\n      discountFactor = 0.98;\n    }\n    return basePrice * discountFactor;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Subclass Constructors Calling Parent Constructor in PHP\nDESCRIPTION: Implements constructors in the Male and Female subclasses that call the new protected parent constructor with specific constant values indicating gender. This replaces previous abstract methods returning constants, consolidating initialization logic.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/replace-subclass-with-fields.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n  function __construct() {\n    parent::__construct(true, 'M');\n  }\n```\n\nLANGUAGE: PHP\nCODE:\n```\n  function __construct() {\n    parent::__construct(false, 'F');\n  }\n```\n\n----------------------------------------\n\nTITLE: Connecting EmployeeType to Employee class (Java)\nDESCRIPTION: Modifies the Employee class to replace the type code field with an EmployeeType object, updating accessor methods to delegate to the type object, and moving constants from Employee to EmployeeType.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/replace-type-code-with-state-strategy.md#_snippet_5\n\nLANGUAGE: Java\nCODE:\n```\nprivate EmployeeType type;\n\npublic int getType() {\n  return type.getTypeCode();\n}\n\npublic void setType(int arg) {\n  type = EmployeeType.newType(arg);\n}\n\n// Move type code constants from Employee to EmployeeType\n// static final int ENGINEER = 0;\n// static final int SALESMAN = 1;\n// static final int MANAGER = 2;\n```\n\n----------------------------------------\n\nTITLE: Setting End Value on Focus Lost - Java\nDESCRIPTION: This line of code sets the end value of the interval when the focus is lost from the end field. It directly accesses endField to get the user's input. The retrieved value is then passed to the setEnd() method.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/duplicate-observed-data.md#_snippet_8\n\nLANGUAGE: java\nCODE:\n```\n\n      setEnd(endField.getText());\n\n```\n\n----------------------------------------\n\nTITLE: Defining Method to Count Advanced Courses in PHP\nDESCRIPTION: This PHP method `numberOfAdvancedCourses` iterates through a collection of courses (`$this->courses`) stored within the object. It increments a counter for each course where the `isAdvanced()` method returns true. This encapsulates the logic for determining the number of advanced courses.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/encapsulate-collection.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\npublic function numberOfAdvancedCourses() {\n  $count = 0;\n  foreach ($this->courses as $course) {\n    if ($course->isAdvanced()) {\n      $count++;\n    }\n  }\n  return $count;\n}\n```\n\n----------------------------------------\n\nTITLE: Delegating setOfficeAreaCode Method - PHP\nDESCRIPTION: This snippet modifies the setOfficeAreaCode method in the Person class to delegate the call to the setAreaCode method of the TelephoneNumber object.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/extract-class.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n    $this->officeTelephone->setAreaCode($arg);\n\n```\n\n----------------------------------------\n\nTITLE: Calling OverdraftCharge from AccountType - C#\nDESCRIPTION: This usage snippet illustrates how to call the OverdraftCharge method on the AccountType instance, passing daysOverdrawn as a parameter after the refactoring. The code can be used at any call site needing the overdraft fee, with type as AccountType and daysOverdrawn as integer. It returns the overdraft fee as a double. Requires AccountType to define OverdraftCharge(int).\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/move-method.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\ntype.OverdraftCharge(daysOverdrawn)\n```\n\n----------------------------------------\n\nTITLE: Initial Class Structure with TelephoneNumber - C#\nDESCRIPTION: This code snippet shows the initial structure of the Person and TelephoneNumber classes. The Person class has a reference to a TelephoneNumber object, and methods for accessing telephone number details are delegated to this object. This is the starting point for the Inline Class refactoring.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/inline-class.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class Person\n{\n  private TelephoneNumber officeTelephone = new TelephoneNumber();\n\n  public string Name\n  {\n    get;\n  }\n  public TelephoneNumber OfficeTelephone\n  {\n    get {\n      return officeTelephone;\n    }\n  }\n\n  public string GetTelephoneNumber()\n  {\n    return officeTelephone.GetTelephoneNumber();\n  }\n}\n\npublic class TelephoneNumber\n{\n  public string AreaCode\n  {\n    get;\n    set;\n  }\n  public string Number\n  {\n    get;\n    set;\n  }\n\n  public string GetTelephoneNumber()\n  {\n    return \"(\" + AreaCode + \") \" + Number;\n  }\n}\n\n// Somewhere in client code\nPerson martin = new Person();\nmartin.OfficeTelephone.AreaCode = \"781\";\n```\n\n----------------------------------------\n\nTITLE: Delegating setStart from IntervalWindow to Interval (Java)\nDESCRIPTION: Replaces the implementation of the `setStart` method in the `IntervalWindow` class. It now delegates the update of the 'start' value to the `Interval` domain object by calling `subject.setStart(arg)`.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/duplicate-observed-data.md#_snippet_23\n\nLANGUAGE: Java\nCODE:\n```\n    subject.setStart(arg);\n\n```\n\n----------------------------------------\n\nTITLE: Replacing Null-Check with isNull Method - PHP\nDESCRIPTION: Substitutes direct comparisons to null with the isNull() method call on customer objects. This improves robustness by delegating null detection logic to the object itself. All customer instances must implement isNull().\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/introduce-null-object.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n$customer->isNull()\n```\n\n----------------------------------------\n\nTITLE: Replacing Blood Group Constants with Static Property Accessors (C#)\nDESCRIPTION: Updates the Person class constants to use the static properties of the BloodGroup class instead of literal integer values. Converts constants to static readonly fields to prevent compilation errors and delegates value retrieval to BloodGroup static properties.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/replace-type-code-with-class.md#_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\npublic static readonly int O = BloodGroup.O.Code,\n                           A = BloodGroup.A.Code,\n                           B = BloodGroup.B.Code,\n                           AB = BloodGroup.AB.Code;\n```\n\n----------------------------------------\n\nTITLE: Creating NewNull Method in C#\nDESCRIPTION: This snippet defines a `NewNull()` method within the `PaymentHistory` class. This method is responsible for instantiating and returning a `NullPaymentHistory` object. This method acts as a factory, encapsulating the creation of null objects.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/introduce-null-object.md#_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\npublic static PaymentHistory NewNull()\n  {\n    return new NullPaymentHistory();\n  }\n```\n\n----------------------------------------\n\nTITLE: Implementing IsLabor Getter in JobItem Subclass Java\nDESCRIPTION: This snippet provides the implementation for a polymorphic `isLabor` getter method in the `JobItem` class (which now serves as a superclass or base class). It returns `false`, indicating this specific type does not represent labor.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/extract-subclass.md#_snippet_8\n\nLANGUAGE: Java\nCODE:\n```\n\n  protected boolean isLabor() {\n    return false;\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Replacing Subclass Abstract Methods with Parent Accessor Methods in PHP\nDESCRIPTION: Introduces concrete accessor methods isMale() and getCode() in the parent Person class that return values of the respective private fields. Simultaneously, removes overridden methods from subclasses since they are now redundant. This centralizes behavior and enables removal of subclass-specific code.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/replace-subclass-with-fields.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n  function isMale() {\n    return $this->isMale;\n  }\n```\n\nLANGUAGE: PHP\nCODE:\n```\n  function getCode() {\n    return $this->code;\n  }\n```\n\n----------------------------------------\n\nTITLE: Refining ArticleHtml View Method in Java via Composed Private Methods\nDESCRIPTION: Similarly refactors the ArticleHtml view method by introducing private helper methods for the title, intro, body, and footer. Each method returns the respective section string formatted as HTML. The view method concatenates these generated strings to produce the final HTML output. This modular approach parallels the Markdown subclass and enhances maintainability.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/form-template-method.md#_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\nprivate String title() {\n  return \"<h2>\" + article.getTitle() + \"</h2>\" + \"\\n\";\n}\nprivate String intro() {\n  return \"<blockquote>\" + article.getIntro() + \"</blockquote>\" + \"\\n\";\n}\nprivate String body() {\n  return \"<p>\" + article.getBody() + \"</p>\" + \"\\n\";\n}\nprivate String footer() {\n  return \"<em>Written by \" + article.getAuthor() + \" on \" + article.getDate() + \"</em>\";\n}\n\n// view method replacement\nreturn title() + intro() + body() + footer();\n```\n\n----------------------------------------\n\nTITLE: Extracted Method for Applying Percentage Discount in Java\nDESCRIPTION: This snippet demonstrates extraction of the percentage-based discount logic into a dedicated method applyPercentDiscount within the Order class. It multiplies the price field by the given discount factor, encapsulating the percentage discount behavior separately from other discount types. This separation aids maintainability and readability.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/replace-parameter-with-explicit-methods.md#_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\n  public void applyPercentDiscount(double discount) {\n    price *= discount;\n  }\n```\n\n----------------------------------------\n\nTITLE: Interest Calculation Methods Using Encapsulated Field in C#\nDESCRIPTION: Example methods in the Account class that use the encapsulated InterestRate property. This pattern allows changing the field location without modifying all methods that use it.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/move-field.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\npublic double InterestForBigFamily(double familySize)\n{\n  return InterestRate / familySize;\n}\n\n// other 10 methods, which use InterestRate\n```\n\n----------------------------------------\n\nTITLE: Moving Default Customer Name to NullCustomer - PHP\nDESCRIPTION: Adds the getName() method to NullCustomer to return a default customer name (\\\"N/A\\\"). This overrides any inherited method from Customer. Ensures that calls to getName() on a null-customer yield a safe, non-null string value.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/introduce-null-object.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n  public function getName() {\n    return \"N/A\";\n  }\n\n```\n\n----------------------------------------\n\nTITLE: EmployeeType Constants Declaration - PHP\nDESCRIPTION: Declares constants ENGINEER, SALESMAN, and MANAGER in EmployeeType to represent the supported employee type codes. These constants standardize type code usage across the application. No dependencies; used throughout EmployeeType subclasses and factory.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/replace-type-code-with-state-strategy.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n\n  const ENGINEER = 0;\n  const SALESMAN = 1;\n  const MANAGER = 2;\n\n```\n\n----------------------------------------\n\nTITLE: Getter Declaration in JobItem and LaborItem - PHP\nDESCRIPTION: Declares the `isLabor` getter method in both the `JobItem` and `LaborItem` classes. These methods return `false` for `JobItem` and `true` for `LaborItem`, effectively replacing the direct field access with a polymorphic method call. No dependencies. Expected output: Method definition.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/extract-subclass.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n\n  protected function isLabor() {\n    return false;\n  }\n\n```\n\nLANGUAGE: php\nCODE:\n```\n\n  protected function isLabor() {\n    return true;\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Interval and Observer Pattern - Java\nDESCRIPTION: This code initializes the 'subject' field with a new Interval object and adds the IntervalWindow as an observer to the subject. It also triggers an initial update to populate the UI with the Interval's data. It utilizes the Observer pattern to keep the UI in sync with the Interval.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/duplicate-observed-data.md#_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n\n    subject = new Interval();\n    subject.addObserver(this);\n    update(subject, null);\n\n```\n\n----------------------------------------\n\nTITLE: Calculating Product Price with Temporary Variables in C#\nDESCRIPTION: This snippet defines a Product class containing a GetPrice method that calculates price based on quantity and item price. It uses a temporary variable, basePrice, for the intermediate multiplication and applies a discountFactor based on a conditional check. Required dependencies include the class members quantity and itemPrice. The method expects these fields to be defined elsewhere in the class. Inputs are the quantity and item price for the product, and the output is the final price after applying the appropriate discount. Limitations include potential duplication of logic and less maintainable code when business rules change.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/replace-temp-with-query.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class Product\n{\n  // ...\n  public double GetPrice()\n  {\n    int basePrice = quantity * itemPrice;\n    double discountFactor;\n\n    if (basePrice > 1000)\n    {\n      discountFactor = 0.95;\n    }\n    else\n    {\n      discountFactor = 0.98;\n    }\n\n    return basePrice * discountFactor;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Protected Constructor - C#\nDESCRIPTION: This code defines a protected constructor for the `Party` class, accepting a `name` parameter. This ensures the `Name` property (inherited by subclasses) can be initialized during object creation in derived classes. Requires the `Name` property from previous snippets.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/extract-superclass.md#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\n  protected Party(string name)\n  {\n    Name = name;\n  }\n```\n\n----------------------------------------\n\nTITLE: Creating an Immutable DateRange Class in C#\nDESCRIPTION: Defines an immutable DateRange class that encapsulates a start and end DateTime for reuse in methods requiring a date interval. The constructor takes two DateTime values, which are assigned to private setters, enforcing immutability. Dependencies: System.DateTime. Usage: Pass a DateRange instance as a safer, self-contained alternative to multiple date parameters. Limitations: The object does not validate that start <= end upon creation.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/introduce-parameter-object.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic class DateRange\n{\n  public DateTime Start\n  { get; private set; }\n  public DateTime End\n  { get; private set; }\n\n  public DateRange(DateTime start, DateTime end)\n  {\n    Start = start;\n    End = end;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Changing list of Employee to Party - C#\nDESCRIPTION: This snippet changes the list type for the field named `staff` from `Employee` to `Party` to accommodate a composite pattern where departments can contain other departments and/or employees. This code change makes the list polymorphic for better organization. Depends on having defined the `Party` class.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/extract-superclass.md#_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\nParty\n```\n\n----------------------------------------\n\nTITLE: Calculating End Method - C#\nDESCRIPTION: This C# snippet defines the CalculateEnd() method in the Interval class. It parses the Start and Length properties to integers, calculates the end value by adding Start and Length and converts the resulting value to a string before assigning it to the End property. It depends on the existence of Start, Length and End properties.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/duplicate-observed-data.md#_snippet_23\n\nLANGUAGE: C#\nCODE:\n```\n  public void CalculateEnd()\n  {\n    int start = int.Parse(this.Start);\n    int length = int.Parse(this.Length);\n    int end = start + length;\n    this.End = end.ToString();\n  }\n```\n\n----------------------------------------\n\nTITLE: Before: Passing Individual Values for Temperature Check in Java\nDESCRIPTION: The original implementation passes individual temperature values from Room to HeatingPlan. The Room class extracts the lowest and highest temperatures and passes them as separate parameters to the HeatingPlan's withinRange method.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/preserve-whole-object.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nclass Room {\n  // ...\n  public boolean withinPlan(HeatingPlan plan) {\n    int low = getLowestTemp();\n    int high = getHighestTemp();\n    return plan.withinRange(low, high);\n  }\n}\n\nclass HeatingPlan {\n  private TempRange range;\n  public boolean withinRange(int low, int high) {\n    return (low >= range.getLow() && high <= range.getHigh());\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing View Method in Java\nDESCRIPTION: This Java code defines the `view` method, which composes a string by concatenating the results of `title()`, `intro()`, `body()`, and `footer()` methods. It is likely used to generate the view content of an article. No specific dependencies are mentioned, and it's assumed that the methods it calls are already implemented within the class or accessible. The output of the method is a string representing the generated view.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/form-template-method.md#_snippet_8\n\nLANGUAGE: java\nCODE:\n```\n  public String view() {\n    return title() + intro() + body() + footer();\n  }\n```\n\n----------------------------------------\n\nTITLE: Adding Blood Type Field, Constructor and Getter to BloodGroup Class in PHP\nDESCRIPTION: This snippet adds a private `$code` field to store the blood type code, a constructor to initialize the code, and a getter method (`getCode`) to retrieve the code. This encapsulates the blood type code within the BloodGroup class.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/replace-type-code-with-class.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n  private $code;\n\n  public function __construct($arg) {\n    $this->code = $arg;\n  }\n  public function getCode() {\n    return $this->code;\n  }\n```\n\n----------------------------------------\n\nTITLE: Manual Iteration to Count Advanced Courses (Client-Side) in PHP\nDESCRIPTION: This PHP code snippet demonstrates the client-side logic for counting advanced courses before encapsulation. It retrieves courses using `$kent->getCourses()` and manually iterates through them, checking `isAdvanced()` and incrementing a local counter variable `$count`. This logic is subsequently moved into the `numberOfAdvancedCourses` method for better design.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/encapsulate-collection.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$count = 0;\nforeach ($kent->getCourses() as $course) {\n  if ($course->isAdvanced()) {\n    $count++;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: After: Method with Consolidated Conditional Code\nDESCRIPTION: The refactored method moves the duplicate code outside the conditional statement. Email validation happens before the conditional, and sending the email happens after, leaving only the price calculation inside the conditional branches.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/consolidate-duplicate-conditional-fragments.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\ndouble sendEmailPromotion() {\n  // ...\n  validateEmailAddress();\n  if (isSpecialDeal()) {\n    total = price * 0.95;\n  }\n  else {\n    total = price * 0.98;\n  }\n  sendEmail();\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Accessor Methods for End Field in Interval (Java)\nDESCRIPTION: Implements getter (`getEnd`) and setter (`setEnd`) methods for the `end` field in the `Interval` class. The `setEnd` method updates the field's value and notifies observers (using `setChanged()` and `notifyObservers()`) that the state has changed, facilitating updates in the linked GUI components.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/duplicate-observed-data.md#_snippet_10\n\nLANGUAGE: Java\nCODE:\n```\n\n\n  String getEnd() {\n    return end;\n  }\n  void setEnd(String arg) {\n    end = arg;\n    setChanged();\n    notifyObservers();\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Encapsulating Type Field in Employee Class - PHP\nDESCRIPTION: Introduces getter and setter methods for accessing and modifying the employee type. This encapsulation prepares the codebase for further refactoring by preventing direct access to the type property. Required: The type property must exist in Employee. Input: none; Output: returns or sets the type field value.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/replace-type-code-with-state-strategy.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n  public function getType() {\n    return $this->type;\n  }\n  public function setType($arg) {\n    $this->type = $arg;\n  }\n```\n\n----------------------------------------\n\nTITLE: Adding htmlView Method to ArticleHtml - PHP\nDESCRIPTION: Transfers the `htmlView` method from the base `ArticleView` class into the `ArticleHtml` subclass. This method formats the article's content (title, introduction, body, and footer) into an HTML string, using the `Article` object available via the inherited `$article` property.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/form-template-method.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\n  public function htmlView() {\n    $output = \"<h2>\" . $this->article->getTitle() . \"</h2>\" . \"\\n\";\n    $output .= \"<blockquote>\" . $this->article->getIntro() . \"</blockquote>\" . \"\\n\";\n    $output .= \"<p>\" . $this->article->getBody() . \"</p>\" . \"\\n\";\n    $output .= \"<em>Written by \" . $this->article->getAuthor() . \" on \" . date(\"m/d/Y\", $this->article->getDate()) . \"</em>\";\n    return $output;\n  }\n```\n\n----------------------------------------\n\nTITLE: Defining Static BloodGroup Properties for Each Type in C#\nDESCRIPTION: Creates static properties corresponding to each blood group code in the BloodGroup class. Each property returns a new instance of BloodGroup initialized with the respective code, facilitating object-based usage rather than raw integers.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/replace-type-code-with-class.md#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\n  public static BloodGroup O\n  {\n    get{ return new BloodGroup(0); }\n  }\n  public static BloodGroup A\n  {\n    get{ return new BloodGroup(1); }\n  }\n  public static BloodGroup B\n  {\n    get{ return new BloodGroup(2); }\n  }\n  public static BloodGroup AB\n  {\n    get{ return new BloodGroup(3); }\n  }\n```\n\n----------------------------------------\n\nTITLE: Removing Unused 'IsLabor' Property in C#\nDESCRIPTION: This snippet illustrates the removal of the obsolete 'IsLabor' property from the class, including selection, deletion, and cleanup steps performed with code editor commands to modernize the class structure.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/extract-subclass.md#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\npublic bool IsLabor\n{ get; private set; }\n```\n\n----------------------------------------\n\nTITLE: Extracting $shipping Cost - PHP\nDESCRIPTION: The code focuses on creating and assigning shipping cost to `$shipping`. The purpose is to further break down the complex price calculation into more understandable parts, improving the overall readability and maintainability of the code. The `$basePrice` variable is utilized in calculating shipping. The expression `Math.min($basePrice * 0.1, 100.0)` is assigned to the `$shipping` variable.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/extract-variable.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n  $shipping = Math.min($basePrice * 0.1, 100.0);\n```\n\n----------------------------------------\n\nTITLE: Defining New Appointment Method - PHP (Initial Copy)\nDESCRIPTION: This snippet shows the initial definition of the new method `findAppointmentByDateAndName`. According to the refactoring steps, this method is created by copying the body of the original `findAppointment` method before adding the new parameter and filtering logic. This preserves the original behavior temporarily.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/add-parameter.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n\n  public function findAppointmentByDateAndName(DateTime $date, $name) {\n    $result = array();\n    foreach ($this->appointments as $each) {\n      if ($date->format('Y-m-d') == $each->date->format('Y-m-d')) {\n        $result[] = $date;\n      }\n    }\n    return $result;\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Calculating Distance with Split Variables in PHP\nDESCRIPTION: The refactored method uses separate variables for different acceleration calculations. 'primaryAcceleration' handles the initial force calculation, while 'secondaryAcceleration' represents the combined forces, making the code more readable and maintainable.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/split-temporary-variable.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\npublic function getDistanceTravelled($time) {\n  $result = 0;;\n  $primaryAcceleration = $this->primaryForce / $this->mass;\n  $primaryTime = Math.min($time, $this->delay);\n  $result = 0.5 * $primaryAcceleration * $primaryTime * $primaryTime;\n\n  $secondaryTime = $time - $this->delay;\n  if ($secondaryTime > 0) {\n    $primaryVel = $primaryAcceleration * $this->delay;\n    $secondaryAcceleration = ($this->primaryForce + $this->secondaryForce) / $this->mass;\n    $result += $primaryVel * $secondaryTime + 0.5 * $secondaryAcceleration * $secondaryTime * $secondaryTime;\n  }\n  return $result;\n}\n```\n\n----------------------------------------\n\nTITLE: Original JobItem Implementation Before Refactoring\nDESCRIPTION: The initial code with a single JobItem class handling both labor and parts items through conditional logic. The class contains a boolean flag 'isLabor' to determine behavior and an Employee reference that's only relevant for labor items.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/extract-subclass.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nclass JobItem {\n  private int quantity;\n  private int unitPrice;\n  private Employee employee;\n  private boolean isLabor;\n\n  public JobItem(int quantity, int unitPrice, boolean isLabor, Employee employee) {\n    this.quantity = quantity;\n    this.unitPrice = unitPrice;\n    this.isLabor = isLabor;\n    this.employee = employee;\n  }\n  public int getTotalPrice() {\n    return quantity * getUnitPrice();\n  }\n  public int getQuantity() {\n    return quantity;\n  }\n  public int getUnitPrice() {\n    return (isLabor) ? employee.getRate() : unitPrice;\n  }\n  public Employee getEmployee() {\n    return employee;\n  }\n}\n\nclass Employee {\n  private int rate;\n  public Employee(int rate) {\n    this.rate = rate;\n  }\n  public int getRate() {\n    return rate;\n  }\n}\n\n// Somewhere in client code\nEmployee kent = new Employee(50);\nJobItem j1 = new JobItem(5, 0, true, kent);\nJobItem j2 = new JobItem(15, 10, false, null);\nint total = j1.getTotalPrice() + j2.getTotalPrice();\n```\n\n----------------------------------------\n\nTITLE: Defining Abstract EmployeeType Class - PHP\nDESCRIPTION: Declares the EmployeeType class as abstract, providing an abstract getTypeCode() method that must be implemented by all concrete employee type classes. This sets the foundation for State/Strategy pattern, allowing different behaviors based on employee type. No dependencies; Input/Output: subclasses implement logic based on type code.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/replace-type-code-with-state-strategy.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n\n\nabstract class EmployeeType {\n  abstract public function getTypeCode();\n}\n```\n\n----------------------------------------\n\nTITLE: Delegating the OfficeAreaCode Getter in Person Class (C#)\nDESCRIPTION: Rewrites the getter of the original `OfficeAreaCode` property in the `Person` class to delegate the call to the `AreaCode` property of the `officeTelephone` object. This maintains the original interface while using the new class internally.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/extract-class.md#_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n{\n    return officeTelephone.AreaCode;\n  }\n```\n\n----------------------------------------\n\nTITLE: Initializing Discount Factor with DiscountFactor Method - C#\nDESCRIPTION: This C# snippet demonstrates the initialization of the discountFactor variable using a separate DiscountFactor() method. The purpose is to encapsulate the conditional logic for discount factor determination in its own function to improve modularity, readability, and facilitate further refactoring. It assumes that DiscountFactor() properly returns a double representing the desired discount value. The output is the assignment of this value to discountFactor; the main input is any data or context used within DiscountFactor(). This structure reduces inline complexity and centralizes discount logic.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/replace-temp-with-query.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\ndouble discountFactor = DiscountFactor();\n\n```\n\n----------------------------------------\n\nTITLE: Counting Advanced Courses Externally (Before Refactoring)\nDESCRIPTION: This C# snippet demonstrates iterating through a `Person` object's (`kent`) `Courses` collection externally to count the number of courses marked as advanced. This logic is targeted for refactoring into the `Person` class.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/encapsulate-collection.md#_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nint count = 0;\nforeach (Course c in kent.Courses)\n{\n  if (c.IsAdvanced)\n    count++;\n}\n```\n\n----------------------------------------\n\nTITLE: Extracted printBanner Method PHP\nDESCRIPTION: This defines the new method 'printBanner' created by extracting the banner printing logic from the original 'printOwing' method. This is the simplest case of extraction, involving only static text output.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/extract-method.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nfunction printBanner() {\n  print(\"*****************************\\n\");\n  print(\"****** Customer totals ******\\n\");\n  print(\"*****************************\\n\");\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing Client Code Calls to TelephoneNumber with Person Delegate Methods Using PHP\nDESCRIPTION: This snippet demonstrates updating client code instances that directly call TelephoneNumber methods to use the newly delegated methods in Person instead. This replacement maintains existing functionality while removing direct dependence on TelephoneNumber, contributing to the eventual removal of the TelephoneNumber class.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/inline-class.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n$martin->setAreaCode(\"781\")\n```\n\n----------------------------------------\n\nTITLE: Declaring and Using an Array to Store Team Data in Java\nDESCRIPTION: This snippet shows the initial implementation of a class 'Tournament' where a String array named 'row' is used to store a team's name and score. Core functionality includes assigning values to the array in the constructor and accessing the data for display, with the score being parsed from a string to an integer. No external dependencies are required, but the design is fragile since it relies on fixed array indices and string parsing.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/replace-array-with-object.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nclass Tournament {\n  String[] row = new String[2];\n\n  public Tournament() {\n    row[0] = \"Liverpool\";\n    row[1] = \"15\";\n  }\n  public void displayScore() {\n    String name = row[0];\n    int score = Integer.parseInt(row[1]);\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Abstract Properties in Base ArticleView Class - C#\nDESCRIPTION: Defines four abstract string properties (Title, Intro, Body, Footer) in a base class using C#. These properties represent the core components of an article and must be implemented by any derived class. This pattern enforces a contract for subclasses and is commonly used to ensure consistency across different article view representations. Requires a C# environment supporting abstract classes.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/form-template-method.md#_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\n  protected abstract string Title { get; }\n  protected abstract string Intro { get; }\n  protected abstract string Body { get; }\n  protected abstract string Footer { get; }\n```\n\n----------------------------------------\n\nTITLE: Declaring Interest Rate as a Private Field in Account Class - PHP\nDESCRIPTION: This PHP snippet demonstrates the initial version of the Account and AccountType classes, where the interest rate is declared as a private field directly in the Account class. The method interestForAmount_days calculates the interest based on the stored interest rate. The AccountType class is present but does not yet store the interest rate. No external dependencies are required for this snippet. Expected input: numeric amount and days; output: calculated interest value as a float.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/move-field.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nclass Account {\n  // ...\n  private $type; // AccountType\n  private $interestRate;\n\n  public function interestForAmount_days($amount, $days) {\n    return $this->interestRate * $amount * $days / 365.0;\n  }\n}\n\nclass AccountType {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Refactored Gamma Method with Method Object - PHP\nDESCRIPTION: This code snippet demonstrates the 'Replace Method with Method Object' refactoring. The original `gamma` method in the `Account` class is replaced with a call to the `Gamma` class's `compute` method. The `Gamma` class encapsulates the original method's logic and state (local variables and parameters) as fields. The constructor initializes these fields, and the `compute` method performs the original calculation. A private helper method `importantThing` is extracted.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/replace-method-with-method-object.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass Account {\n  // ...\n  function gamma($inputVal, $quantity, $yearToDate) {\n    return (new Gamma($this, $inputVal, $quantity, $yearToDate))->compute();\n  }\n  // ...\n}\n\nclass Gamma {\n  private $account; // Account\n  private $importantValue1;\n  private $importantValue2;\n  private $importantValue3;\n  private $inputVal;\n  private $quantity;\n  private $yearToDate;\n\n  public function __construct(Account $source, $inputValArg, $quantityArg, $yearToDateArg) {\n    $this->account = $source;\n    $this->inputVal = $inputValArg;\n    $this->quantity = $quantityArg;\n    $this->yearToDate = $yearToDateArg;\n  }\n  public function compute() {\n    $this->importantValue1 = ($this->inputVal * $this->quantity) + $this->account->delta();\n    $this->importantValue2 = ($this->inputVal * $this->yearToDate) + 100;\n    $this->importantThing();\n    $this->importantValue3 = $this->importantValue2 * 7;\n    // and so on…\n    return $this->importantValue3 - 2 * $this->importantValue1;\n  }\n  private function importantThing() {\n    if (($this->yearToDate - $this->importantValue1) > 100) {\n      $this->importantValue2 -= 20;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding commission field to Salesman PHP\nDESCRIPTION: This code adds a `$commission` property to the `Salesman` class. This property is then used in the `payAmount` method to calculate the pay. This is the push down field refactoring step, adding the field only to the class that needs it.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/replace-type-code-with-subclasses.md#_snippet_14\n\nLANGUAGE: PHP\nCODE:\n```\n  public $commission;\n```\n\n----------------------------------------\n\nTITLE: Pulling Up Common Field to Superclass (PHP)\nDESCRIPTION: Moves the common '$name' field from subclasses ('Employee', 'Department') to the 'Party' superclass using the 'Pull Up Field' technique. The visibility is changed to 'protected' to allow access from subclasses.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/extract-superclass.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nabstract class Party {\n  protected $name;\n}\n```\n\nLANGUAGE: php\nCODE:\n```\n// Removed from Employee class:\n// private $name;\n```\n\nLANGUAGE: php\nCODE:\n```\n// Removed from Department class:\n// private $name;\n```\n\n----------------------------------------\n\nTITLE: Moving calculateEnd Method to Interval Class (Java)\nDESCRIPTION: Defines the `calculateEnd` method within the `Interval` class. This method retrieves start/length values using getters, parses them, calculates the end value, and updates the end field via its setter (`setEnd`), triggering observer notification. Includes error handling for `NumberFormatException`. This moves business logic from the GUI to the domain class.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/duplicate-observed-data.md#_snippet_29\n\nLANGUAGE: Java\nCODE:\n```\n\n  void calculateEnd() {\n    try {\n      int start = Integer.parseInt(getStart());\n      int length = Integer.parseInt(getLength());\n      int end = start + length;\n      setEnd(String.valueOf(end));\n    } catch (NumberFormatException e) {\n      throw new RuntimeException (\"Unexpected Number Format Error\");\n    }\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Adding BloodGroup State and Constructor in C#\nDESCRIPTION: Adds a private integer field 'code' to store the blood group code, a public getter property 'Code' to access it, and a constructor initializing the code field. This encapsulates the raw integer value within the BloodGroup class.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/replace-type-code-with-class.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\n\n  private int code;\n\n  public int Code\n  {\n    get{ return code; }\n  }\n\n  public BloodGroup(int code)\n  {\n    this.code = code;\n  }\n```\n\n----------------------------------------\n\nTITLE: Refactored Unidirectional Association C#\nDESCRIPTION: This code demonstrates the refactored code with a unidirectional association from `Order` to `Customer`. The `Order` class determines its `Customer` by iterating through all `Customer` instances and checking if the customer contains the order. The `Customer` class maintains the `orders` collection but no longer has its `Orders` collection exposed directly and the `Customer` property in Order has been refactored to retrieve customer based on order's presence in the order list. Dependencies: HashSet, Customer.GetInstances(), Customer.ContainsOrder()\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/change-bidirectional-association-to-unidirectional.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Order\n{\n  // ...\n  public Customer Customer\n  {\n    get {\n      foreach (Customer customer in Customer.GetInstances())\n      {\n        if (customer.ContainsOrder(this))\n          return customer;\n      }\n      return null;\n    }\n  }\n\n  public double GetDiscountedPrice()\n  {\n    return GetGrossPrice() * (1 - this.Customer.GetDiscount());\n  }\n}\n\npublic class Customer\n{\n  // ...\n  private HashSet<Order> orders = new HashSet<Order>();\n\n  public void AddOrder(Order order)\n  {\n    orders.Add(order);\n  }\n\n  public double GetPriceFor(Order order)\n  {\n     Assert.IsTrue(orders.Contains(order));\n     return order.GetDiscountedPrice();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Delegating getEnd from IntervalWindow to Interval (Java)\nDESCRIPTION: Replaces the implementation of the `getEnd` method in the `IntervalWindow` class. Instead of directly getting the value from the GUI field, it now calls `subject.getEnd()`, retrieving the 'end' value from the `Interval` domain object. Note: Assumes intended code was `getEnd()` not `getEnd(arg)`.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/duplicate-observed-data.md#_snippet_25\n\nLANGUAGE: Java\nCODE:\n```\n    return subject.getEnd();\n\n```\n\n----------------------------------------\n\nTITLE: Adding Simplified Public Constructor to JobItem in Java\nDESCRIPTION: Creates a new, simplified public constructor for the `JobItem` class that only accepts `quantity` and `unitPrice`, intended for non-labor items. It delegates to the original, now protected, constructor, passing `false` for `isLabor` and `null` for `employee`. This change prepares the parent class to handle only fixed-cost items directly.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/extract-subclass.md#_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n\n  public JobItem(int quantity, int unitPrice) {\n    this(quantity, unitPrice, false, null);\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Replacing Direct Subclass Instantiations with Factory Method Calls in PHP\nDESCRIPTION: Refactors code that directly constructs Male and Female subclasses by replacing such occurrences with calls to the corresponding factory methods defined in the Person class. This avoids direct coupling to subclasses and centralizes object creation logic.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/replace-subclass-with-fields.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nPerson::createMale()\n```\n\n----------------------------------------\n\nTITLE: Updating Number Usage in GetTelephoneNumber Method (C#)\nDESCRIPTION: Modifies the `GetTelephoneNumber` method within the `Person` class to access the moved `Number` property via the `officeTelephone` instance.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/extract-class.md#_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nofficeTelephone.Number\n```\n\n----------------------------------------\n\nTITLE: Updating Male Constructor (Java)\nDESCRIPTION: Updates the constructor in the `Male` subclass to call the new protected constructor in the `Person` parent class using `super()`. It passes the specific values (`true`, `'M'`) corresponding to the Male type, initializing the new fields. Requires the `Male` subclass and the protected `Person` constructor.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/replace-subclass-with-fields.md#_snippet_5\n\nLANGUAGE: Java\nCODE:\n```\n\n\n  Male() {\n    super(true, 'M');\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Renaming AddStaff to AddItem - C#\nDESCRIPTION: This snippet renames the method `AddStaff` to `AddItem`. This is done for generality in anticipation of the composite pattern where items added may be of different types.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/extract-superclass.md#_snippet_12\n\nLANGUAGE: C#\nCODE:\n```\nAddItem\n```\n\n----------------------------------------\n\nTITLE: Changing 'unitPrice' field from 'protected' to 'private' in Java\nDESCRIPTION: This snippet involves selecting the existing 'protected int unitPrice;' declaration and replacing its modifier with 'private', thereby restricting direct access to the field and promoting encapsulation. This step is part of the refactoring process to improve data hiding.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/extract-subclass.md#_snippet_19\n\nLANGUAGE: Java\nCODE:\n```\nprivate int unitPrice;\n```\n\n----------------------------------------\n\nTITLE: Extracting HTML Formatting Steps - PHP\nDESCRIPTION: Introduces private helper methods (`title`, `intro`, `body`, `footer`) within the `ArticleHtml` class, mirroring the structure in `ArticleMarkdown`. This step breaks down the main rendering logic into smaller, focused parts, preparing for the 'Form Template Method' pattern. Each method generates a specific HTML-formatted section of the article content.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/form-template-method.md#_snippet_13\n\nLANGUAGE: PHP\nCODE:\n```\n  private function title() {\n    return \"<h2>\" . $this->article->getTitle() . \"</h2>\" . \"\\n\";\n  }\n  private function intro() {\n    return \"<blockquote>\" . $this->article->getIntro() . \"</blockquote>\" . \"\\n\";\n  }\n  private function body() {\n    return \"<p>\" . $this->article->getBody() . \"</p>\" . \"\\n\";\n  }\n  private function footer() {\n    return \"<em>Written by \" . $this->article->getAuthor() . \" on \" . date(\"m/d/Y\", $this->article->getDate()) . \"</em>\";\n  }\n```\n\n----------------------------------------\n\nTITLE: Applying Discounts with Parameter-Dependent Method in Java\nDESCRIPTION: This snippet shows the original implementation of the Order class with a single method applyDiscount that applies either a fixed or percentage discount based on an integer parameter. The method uses a switch statement to determine the type of discount to apply, throwing an exception for invalid types. Client code demonstrates conditional calls to this method with appropriate parameters. Dependencies include a price field and an items collection. Expected inputs are the discount type (fixed or percent) and the discount value, and the output is the adjusted price. Limitations include reliance on parameter values to define behavior, which can reduce code clarity and increase maintenance difficulty.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/replace-parameter-with-explicit-methods.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nclass Order {\n  // ...\n  public static final int FIXED_DISCOUNT = 0;\n  public static final int PERCENT_DISCOUNT = 1;\n\n  public void applyDiscount(int type, double discount) {\n    switch (type) {\n      case FIXED_DISCOUNT:\n        price -= discount;\n        break;\n      case PERCENT_DISCOUNT:\n        price *= discount;\n        break;\n      default:\n        throw new IllegalArgumentException(\"Invalid discount type\");\n    }\n  }\n}\n\n// Somewhere in client code\nif (weekend) {\n  order.applyDiscount(Order.FIXED_DISCOUNT, 10);\n}\nif (order.items.size() > 5) {\n  order.applyDiscount(Order.PERCENT_DISCOUNT, 0.2);\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Discount - Java\nDESCRIPTION: This Java code defines a method `discount` that calculates a discount based on input values `inputVal`, `quantity`, and `yearToDate`. The `inputVal` parameter is modified within the method's conditional statements.  The method's output is a calculated integer representing the discounted value. No dependencies are needed. The inputs include an integer representing an input value, a quantity and a yearToDate value. The expected output is the discounted value, based on conditional calculations. There are no specific limitations.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/remove-assignments-to-parameters.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nint discount(int inputVal, int quantity, int yearToDate) {\n  if (inputVal > 50) {\n    inputVal -= 2;\n  }\n  if (quantity > 100) {\n    inputVal -= 1;\n  }\n  if (yearToDate > 10000) {\n    inputVal -= 4;\n  }\n  return inputVal;\n}\n```\n\n----------------------------------------\n\nTITLE: Delegating the OfficeNumber Setter in Person Class (C#)\nDESCRIPTION: Rewrites the setter of the original `OfficeNumber` property in the `Person` class to delegate the assignment to the `Number` property of the `officeTelephone` object.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/extract-class.md#_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\n{\n    officeTelephone.Number = value;\n  }\n```\n\n----------------------------------------\n\nTITLE: Replacing Null Checks with isNull Calls on Customer Instances in Java\nDESCRIPTION: Changes client code to replace explicit null comparisons (customer == null) with polymorphic calls to customer.isNull(), leveraging the null-object pattern to identify null-equivalent customers without risking NullPointerException.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/introduce-null-object.md#_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\ncustomer.isNull()\n```\n\n----------------------------------------\n\nTITLE: Create Engineer Subclass - C#\nDESCRIPTION: This code snippet creates a subclass `Engineer` that inherits from the `Employee` class. It overrides the `Type` property to return the `ENGINEER` constant from the `Employee` class. This represents the specific behavior of an engineer type within the employee hierarchy.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/replace-type-code-with-subclasses.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n\n\npublic class Engineer: Employee\n{\n  public int Type\n  {\n    get{ return Employee.ENGINEER; }\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Extracting and printing the 'getUnitPrice' method in Java\nDESCRIPTION: This snippet demonstrates selecting the 'getUnitPrice' method of the 'JobItem' class to review or modify, specifically focusing on its public access modifier. It is part of the process to assess method signatures before refactoring.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/extract-subclass.md#_snippet_16\n\nLANGUAGE: Java\nCODE:\n```\npublic abstract int getUnitPrice();\n```\n\n----------------------------------------\n\nTITLE: Providing access to Customer's orders collection in Java\nDESCRIPTION: Defines a helper method 'friendOrders()' in the Customer class, which returns the set of associated Order objects. This method is used internally by the Order class to manage the relationship from the Customer's side.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/change-unidirectional-association-to-bidirectional.md#_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\n// Should be used in Order class only.\nSet friendOrders() {\n  return orders;\n}\n```\n\n----------------------------------------\n\nTITLE: After: Using Local Extension Class\nDESCRIPTION: Refactored implementation with a local extension class 'MyNewDate' that extends DateTime. The foreign method is moved to this extension, allowing for better organization and maintainability of the codebase.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/introduce-local-extension.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass Account {\n  // ...\n  public function schedulePayment() {\n    $previousDate = new MyNewDate($this->previousDate);\n    $paymentDate = $previousDate->nextWeek();\n    // Issue a payment using paymentDate.\n    // ...\n  }\n}\n\n// Local extension class.\nclass MyNewDate extends DateTime {\n  public function __construct() {\n  \t$args = func_get_args();\n  \tif (isset($args[0]) && is_a($args[0], 'DateTime')) {\n      call_user_func_array([$this, 'parent::__construct'],\n        [$args[0]->format('Y-m-d H:i:s')]);\n    }\n    else {\n      call_user_func_array([$this, 'parent::__construct'], $args);\n    }\n  }\n\n  public function nextWeek() {\n  \treturn $this->modify('+7 days');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Refactoring BloodGroup Constructor to Private\nDESCRIPTION: This snippet explains that the public declaration of the BloodGroup constructor should be refactored to private to control access. This step restricts external code from directly creating instances of the class, promoting encapsulation and potentially improving control over object creation.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/replace-type-code-with-class.md#_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\nSelect \"|||public||| BloodGroup\" in \"BloodGroup\"\n\n#|ru| И напоследок следует закрыть конструктор класса <code>BloodGroup</code> от доступа извне.\n#|en| And finally, you should make the <code>BloodGroup</code> constructor private.\n#|uk| І наостанок слід закрити конструктор класу <code>BloodGroup</code> від доступу ззовні.\n\nReplace \"private\"\n```\n\n----------------------------------------\n\nTITLE: Calling the Initial `getOutstanding` Method (Java)\nDESCRIPTION: This snippet shows the call to the initially extracted `getOutstanding` method within `printOwing`, replacing the original calculation logic. This call is problematic because the calculated value isn't returned and made available to the rest of the `printOwing` method.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/extract-method.md#_snippet_12\n\nLANGUAGE: Java\nCODE:\n```\n  getOutstanding();\n```\n\n----------------------------------------\n\nTITLE: Replacing Default Employee Creation PHP\nDESCRIPTION: This snippet replaces the default Employee creation with an exception. This is triggered if the provided type code does not match any of the created subclasses. It reinforces that the base `Employee` class should not be directly constructed after the refactoring.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/replace-type-code-with-subclasses.md#_snippet_13\n\nLANGUAGE: PHP\nCODE:\n```\nthrow new RuntimeException(\"Incorrect Employee Code\");\n```\n\n----------------------------------------\n\nTITLE: Adding Length Field to Interval Class (Java)\nDESCRIPTION: Defines a private String field `length` within the `Interval` domain class, initialized to \"0\". This mirrors the corresponding GUI field's initial value and completes the encapsulation of interval data fields within the domain object.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/duplicate-observed-data.md#_snippet_19\n\nLANGUAGE: Java\nCODE:\n```\n\n  private String length = \"0\";\n\n```\n\n----------------------------------------\n\nTITLE: Exposing TelephoneNumber via Public Property in Person Class (C#)\nDESCRIPTION: Creates a public read-only property `OfficeTelephone` in the `Person` class. This exposes the internal `officeTelephone` object directly to clients, allowing them access to the `TelephoneNumber`'s public members. This is typically done after removing the delegating properties.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/extract-class.md#_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\npublic TelephoneNumber OfficeTelephone\n{\n  get {\n    return officeTelephone;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Delegating getOfficeAreaCode Method - PHP\nDESCRIPTION: This snippet modifies the getOfficeAreaCode method in the Person class to delegate the call to the getAreaCode method of the TelephoneNumber object.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/extract-class.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n    return $this->officeTelephone->getAreaCode();\n\n```\n\n----------------------------------------\n\nTITLE: Creating Gamma Class Constructor in Java\nDESCRIPTION: This snippet defines the constructor for the `Gamma` class.  It takes the original `Account` object and the method's parameters as input.  The constructor initializes the fields of the `Gamma` class with these values, facilitating the transfer of data from the original method to the extracted class.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/replace-method-with-method-object.md#_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n  public Gamma(Account source, int inputValArg, int quantityArg, int yearToDateArg) {\n    this.account = source;\n    inputVal = inputValArg;\n    quantity = quantityArg;\n    yearToDate = yearToDateArg;\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Refactoring: Replacing Primitive Field with Object in PHP\nDESCRIPTION: This snippet refactors the Order class to use a Customer object instead of a primitive string. The $customer field now holds a Customer instance, which encapsulates the customer name. The class modifies its constructor, setters, and getters to handle the Customer object and introduces the Customer class with its constructor and getName method. Client code updates to compare by customer name. No third-party dependencies are needed, but the Customer class must be defined and available. Inputs are customer names as strings, while outputs include structured objects and counted orders. While this adds complexity, it improves encapsulation and paves the way for richer customer-related functionality.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/replace-data-value-with-object.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass Order {\n  // ...\n  private $customer; // Customer\n\n  public function __construct($customerName) {\n    $this->customer = new Customer($customerName);\n  }\n  public function getCustomerName() {\n    return $this->customer->getName();\n  }\n  public function setCustomer($customerName) {\n    $this->customer = new Customer($customerName);\n  }\n}\n\nclass Customer {\n  private $name;\n\n  public function __construct($name) {\n    $this->name = $name;\n  }\n  public function getName() {\n    return $this->name;\n  }\n}\n\n// Client code, which uses Order class.\nprivate static function numberOfOrdersFor($orders, $customer) {\n  $result = 0;\n  foreach ($orders as $order) {\n    if ($order->getCustomerName() === $customer) {\n      $result++;\n    }\n  }\n  return $result;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Method Calls to Include the Instance ('this') Reference\nDESCRIPTION: This snippet highlights that, after moving a method, all calls to that method must include the current instance of the class ('this') as a parameter. It shows the necessary syntax change to pass the current object during method invocation, ensuring the refactored method operates correctly with the class context.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/move-method.md#_snippet_7\n\nLANGUAGE: C\nCODE:\n```\nthis\n```\n\n----------------------------------------\n\nTITLE: Implementing GetPlan method in NullCustomer class\nDESCRIPTION: Overrides the GetPlan method in NullCustomer to return a basic billing plan by default, eliminating the need for null checking when accessing plans.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/introduce-null-object.md#_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\n  public override BillingPlan GetPlan()\n  {\n    return BillingPlan.Basic();\n  }\n```\n\n----------------------------------------\n\nTITLE: Creating an Immutable DateRange Class in Java\nDESCRIPTION: Defines an immutable DateRange class to encapsulate a start and end date. The class provides getters for the date fields but no setters, ensuring immutability after creation.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/introduce-parameter-object.md#_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\nclass DateRange {\n  private final Date start;\n  private final Date end;\n\n  public DateRange(Date start, Date end) {\n    this.start = start;\n    this.end = end;\n  }\n  public Date getStart() {\n    return start;\n  }\n  public Date getEnd() {\n    return end;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Refactoring: Moving Method to Extension Class\nDESCRIPTION: The method GetNearFirstDate is moved from the Account class to the static extension class TypeExtensions, following best practices for extension methods in C#, with the first parameter as 'this DateTime date'. It is also marked static.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/introduce-foreign-method.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\npublic static class TypeExtensions\n{\n  public static DateTime GetNearFirstDate(this DateTime date)\n  {\n    if (date.Day == 1)\n      return date;\n\n    DateTime nextDate = date.AddMonths(1);\n    \n    return new DateTime(nextDate.Year, nextDate.Month, 1);\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Accessing Manager via Delegate (After Refactoring)\nDESCRIPTION: This C# snippet shows the client code after refactoring, using the `GetManager()` method to access the manager. This simplifies the client code and hides the details of the `Department` class.  The client code now calls `john.GetManager()` instead of accessing the `Department` property directly.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/hide-delegate.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n// Somewhere in client code\nmanager = john.GetManager();\n```\n\n----------------------------------------\n\nTITLE: Adding AddOrder Method to Customer Class in C#\nDESCRIPTION: Provides a method in the Customer class to establish the association with an Order by setting the Customer property of the Order object, facilitating bidirectional link management.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/change-unidirectional-association-to-bidirectional.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\npublic void AddOrder(Order order)\n{\n  order.Customer = this;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating ArticleMarkdown::view with Helper Calls - PHP\nDESCRIPTION: Modifies the main `view` method in the `ArticleMarkdown` class to delegate the formatting of individual article parts to the newly extracted private helper methods (`title`, `intro`, `body`, `footer`). The method now simply calls these helpers and concatenates their output.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/form-template-method.md#_snippet_12\n\nLANGUAGE: PHP\nCODE:\n```\n    return $this->title()\n      . $this->intro()\n      . $this->body()\n      . $this->footer();\n```\n\n----------------------------------------\n\nTITLE: Calling the Compute Method in Gamma Class from Account in Java\nDESCRIPTION: This snippet replaces the original method's body with a call to the `compute` method in the `Gamma` class. A new instance of `Gamma` is created, passing in the `Account` object and the method's parameters.  The result of the `compute` method is then returned.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/replace-method-with-method-object.md#_snippet_9\n\nLANGUAGE: java\nCODE:\n```\n    return new Gamma(this, inputVal, quantity, yearToDate).compute();\n\n```\n\n----------------------------------------\n\nTITLE: Replacing Old Method with Delegation to Gamma Instance in PHP\nDESCRIPTION: Refactors the original method inside the Account class to create an instance of Gamma with current method parameters and delegate the computation to the new compute() method. This approach maintains the original method signature while redirecting execution to the refactored logic class.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/replace-method-with-method-object.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n    return (new Gamma($this, $inputVal, $quantity, $yearToDate))->compute();\n```\n\n----------------------------------------\n\nTITLE: Initial Account and AccountType Classes in C#\nDESCRIPTION: This code defines the initial state of the `Account` and `AccountType` classes.  `Account` contains fields such as `type` and `interestRate`, and a method `InterestForAmountDays`. `AccountType` is a separate class, but no details are provided.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/move-field.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class Account\n{\n  // ...\n  private AccountType type;\n  private double interestRate;\n\n  public double InterestForAmountDays(double amount, int days)\n  {\n    return interestRate * amount * days / 365.0;\n  }\n}\n\npublic class AccountType\n{\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Adding overdraftCharge Method to AccountType Class (Java)\nDESCRIPTION: Copies the `overdraftCharge` method from the `Account` class into the `AccountType` class. The method is adapted to work within `AccountType` by removing the reference to the `type` field (now implicit) and accepting `daysOverdrawn` as a parameter, as this value belongs to the specific `Account` instance.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/move-method.md#_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\n  public double overdraftCharge(int daysOverdrawn) {\n    if (isPremium()) { // Assuming isPremium() is a method within AccountType\n      double result = 10;\n      if (daysOverdrawn > 7) {\n        result += (daysOverdrawn - 7) * 0.85;\n      }\n      return result;\n    }\n    else {\n      return daysOverdrawn * 1.75;\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Printing the current Account Instance\nDESCRIPTION: The snippet demonstrates printing the current Account instance, probably denoted by `$this`, possibly for debugging or to showcase how to pass the object. The dependency is an account class and it is outputting the object itself.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/move-method.md#_snippet_12\n\nLANGUAGE: PHP\nCODE:\n```\nPrint \"$this\"\n```\n\n----------------------------------------\n\nTITLE: Accessing daysOverdrawn Using getDaysOverdrawn\nDESCRIPTION: This snippet demonstrates accessing the `$daysOverdrawn` field using the `getDaysOverdrawn()` getter method within the context of an `Account` object. It's a PHP code example. Requires an Account object and a getDaysOverdrawn method. It outputs the value of daysOverdrawn.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/move-method.md#_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\nPrint:\n```\n$account->getDaysOverdrawn()\n```\n```\n\n----------------------------------------\n\nTITLE: Delegating getOfficeNumber Method - PHP\nDESCRIPTION: This snippet delegates the getOfficeNumber method in the Person class to getNumber of the TelephoneNumber object.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/extract-class.md#_snippet_11\n\nLANGUAGE: PHP\nCODE:\n```\n    return $this->officeTelephone->getNumber();\n\n```\n\n----------------------------------------\n\nTITLE: Initial IntRange Class with Direct Field Access (C#)\nDESCRIPTION: This is the initial version of the `IntRange` class before refactoring. It uses private fields `low` and `high` which are accessed directly within the constructor and methods like `Includes` and `Grow`.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/self-encapsulate-field.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class IntRange\n{\n  private int low, high;\n\n  public IntRange(int low, int high)\n  {\n    this.low = low;\n    this.high = high;\n  }\n\n  public bool Includes(int arg)\n  {\n    return arg >= low && arg <= high;\n  }\n  public void Grow(int factor)\n  {\n    high = high * factor;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Refactoring Collection Setter with Loop (PHP)\nDESCRIPTION: Refactors the `setCourses` method body to iterate through the input argument (`$arg`, expected to be iterable) and add each item to the `$courses` collection using `attach`. Includes an assertion that the collection is not empty before adding, which might be specific to a scenario where this setter appends rather than replaces.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/encapsulate-collection.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n    assert($this->courses->count() > 0, \"Courses are not empty\");\n    foreach ($arg as $item) {\n      $this->courses->attach($item);\n    }\n```\n\n----------------------------------------\n\nTITLE: Delegating setAreaCode Method\nDESCRIPTION: This code snippet adds a setAreaCode method to the Person class. It delegates the call to the original setAreaCode method of the officeTelephone object, which is an instance of the TelephoneNumber class. This is a step in inlining the TelephoneNumber class into the Person class.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/inline-class.md#_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n  public void setAreaCode(String arg) {\n    officeTelephone.setAreaCode(arg);\n  }\n```\n\n----------------------------------------\n\nTITLE: Adding Date Range Inclusion Method in Java\nDESCRIPTION: Implements an includes() method in the DateRange class to check if a given date falls within the range. This moves the range-checking behavior from client code into the DateRange class.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/introduce-parameter-object.md#_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\npublic boolean includes(Date arg) {\n  return arg.compareTo(start) >= 0 && arg.compareTo(end) <= 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Person's getOfficeAreaCode Method (Java)\nDESCRIPTION: Modifies the `getOfficeAreaCode` method in the `Person` class to delegate the call to the `getAreaCode` method of the `officeTelephone` object.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/extract-class.md#_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nreturn officeTelephone.getAreaCode();\n```\n\n----------------------------------------\n\nTITLE: Calculating Ticket Price After Decompose Conditional (PHP)\nDESCRIPTION: The refactored `Stadium` class after applying 'Decompose Conditional'. The complex conditional logic has been extracted into private helper methods (`isSummer`, `summerCharge`, `winterCharge`). This improves readability by making the condition and the outcomes explicit and well-named, separating concerns and making the code easier to maintain and test. Requires the `DateTime` class.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/decompose-conditional.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass Stadium {\n  // ...\n  public $summerRate;\n  public $winterRate;\n  public $winterServiceCharge;\n\n  public function getTicketPrice(DateTime $date, $quantity) {\n    if ($this->isSummer($date)) {\n      $charge = $this->summerCharge($quantity);\n    }\n    else {\n      $charge = $this->winterCharge($quantity);\n    }\n    return $charge;\n  }\n\n  private function isSummer(DateTime $date) {\n    return $date->format(\"m\") > \"05\" && $date->format(\"m\") < \"09\";\n  }\n  private function summerCharge($quantity) {\n    return $quantity * $this->summerRate;\n  }\n  private function winterCharge($quantity) {\n    return $quantity * $this->winterRate + $this->winterServiceCharge;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Returning Read-Only Collection Copy (PHP)\nDESCRIPTION: Modifies the `getCourses` getter method to return a `clone` of the internal `$courses` collection (`SplObjectStorage`). This prevents clients from modifying the original collection through the returned object, enforcing encapsulation by providing a read-only view.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/encapsulate-collection.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nclone $this->courses\n```\n\n----------------------------------------\n\nTITLE: Modifying Self-Encapsulated Property to Use Moved Field in C#\nDESCRIPTION: Updated property accessors that delegate to the moved field in the AccountType class instead of using a local field. This allows all the methods to continue working without changes after the field is moved.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/move-field.md#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nprivate double InterestRate\n{\n  get {\n    return type.InterestRate;\n  }\n  set {\n    type.InterestRate = value;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Encapsulated Property for Advanced Course Count (After Refactoring)\nDESCRIPTION: Shows the C# code after refactoring, where the external code now uses the `kent.NumberOfAdvancedCourses` property to get the count, instead of the manual iteration shown previously. The placeholder `|||count|||` is replaced.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/encapsulate-collection.md#_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nConsole.WriteLine(\"Advanced courses: \" + kent.NumberOfAdvancedCourses);\n```\n\n----------------------------------------\n\nTITLE: Defining Person Class with Telephone Number Fields in Java\nDESCRIPTION: Declares a Person class with embedded telephone information stored as separate string fields: officeAreaCode and officeNumber. Provides getters and setters for these fields and a method to format the telephone number string. This snippet demonstrates the initial state before applying the Extract Class refactoring, where telephone-related data and operations belong entirely to Person.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/extract-class.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nclass Person {\n  private String name;\n  private String officeAreaCode;\n  private String officeNumber;\n\n  public String getName() {\n    return name;\n  }\n  public String getTelephoneNumber() {\n    return (\"(\" + officeAreaCode + \") \" + officeNumber);\n  }\n  public String getOfficeAreaCode() {\n    return officeAreaCode;\n  }\n  public void setOfficeAreaCode(String arg) {\n    officeAreaCode = arg;\n  }\n  public String getOfficeNumber() {\n    return officeNumber;\n  }\n  public void setOfficeNumber(String arg) {\n    officeNumber = arg;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Moving Office Number Field to TelephoneNumber (Java)\nDESCRIPTION: Moves the `officeNumber` field (renamed to `number`) from the `Person` class to the `TelephoneNumber` class.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/extract-class.md#_snippet_9\n\nLANGUAGE: java\nCODE:\n```\nprivate String number;\n```\n\n----------------------------------------\n\nTITLE: Adding markdownView Method to ArticleMarkdown - PHP\nDESCRIPTION: Transfers the `markdownView` method from the base `ArticleView` class into the `ArticleMarkdown` subclass. This method formats the article's content (title, introduction, body, and footer) into a Markdown string, using the `Article` object available via the inherited `$article` property.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/form-template-method.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n  public function markdownView() {\n    $output = \"# \" . $this->article->getTitle() . \"\\n\\n\";\n    $output .= \"> \" . $this->article->getIntro() . \"\\n\\n\";\n    $output .= $this->article->getBody() . \"\\n\\n\";\n    $output .= \"_Written by \" . $this->article->getAuthor() . \" on \" . date(\"m/d/Y\", $this->article->getDate()) . \"_\";\n    return $output;\n  }\n```\n\n----------------------------------------\n\nTITLE: Adding Date Inclusion Logic to DateRange in C#\nDESCRIPTION: Augments the DateRange class with an Includes(DateTime arg) method to check if a date falls within the defined range (inclusive of endpoints). This method centralizes range-checking logic and is used in filtering transactions based on their charge date. Dependencies: Accessible Start and End properties of DateRange, System.DateTime. The function expects a candidate DateTime and returns a boolean; false if arg is outside the range.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/introduce-parameter-object.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\npublic bool Includes(DateTime arg)\n{\n  return arg >= Start && arg <= End;\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing Female Instantiation with Parent (Java)\nDESCRIPTION: Replaces direct calls to the `Female` subclass constructor (`new Female()`) in client code with a call to the new `Person` constructor (`new Person(false, 'F')`). This step is possible after removing the `abstract` modifier from `Person` and prepares for removing the `Female` subclass. Requires the `Person` class and its constructor.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/replace-subclass-with-fields.md#_snippet_10\n\nLANGUAGE: Java\nCODE:\n```\nnew Person(false, 'F')\n```\n\n----------------------------------------\n\nTITLE: Adding order collection to Customer class in Java\nDESCRIPTION: This snippet introduces a collection field 'orders' in the Customer class, enabling it to hold multiple Order objects. It sets up the storage structure needed for bidirectional association management.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/change-unidirectional-association-to-bidirectional.md#_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\nprivate Set orders = new HashSet();\n```\n\n----------------------------------------\n\nTITLE: Changing name to Items - C#\nDESCRIPTION: Rename the staff collection to items, which is a more general name suitable when using the composite pattern, because it can contain different types of parties.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/extract-superclass.md#_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\nitems\n```\n\nLANGUAGE: C#\nCODE:\n```\nItems\n```\n\n----------------------------------------\n\nTITLE: Replacing Null Check Code with Direct Call (PHP)\nDESCRIPTION: This snippet represents the updated code after applying the null object pattern. It directly calls the `getWeeksDelinquentInLastYear()` method on the customer's payment history object. This streamlined version avoids the null check entirely, making the code cleaner and easier to maintain because we are already returning a null object from the method `getHistory` if no history exists.  It assumes the existence of a `PaymentHistory` class and `getWeeksDelinquentInLastYear` method within it.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/introduce-null-object.md#_snippet_17\n\nLANGUAGE: PHP\nCODE:\n```\n$weeksDelinquent = $customer->getHistory()->getWeeksDelinquentInLastYear();\n```\n\n----------------------------------------\n\nTITLE: Creating importantThing Method in Gamma Class in Java\nDESCRIPTION: This snippet creates a new method called `importantThing` in the Gamma class, extracting a conditional block from the compute method. This is to demonstrate that Extract Class facilitates further refactoring like Extract Method. It takes the conditional statement previously inside the compute function.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/replace-method-with-method-object.md#_snippet_10\n\nLANGUAGE: java\nCODE:\n```\n  void importantThing() {\n    if ((yearToDate - importantValue1) > 100) {\n      importantValue2 -= 20;\n    }\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Replacing Type Codes with a Dedicated Class in Java\nDESCRIPTION: Shows the code after applying the 'Replace Type Code with Class' refactoring. A new `BloodGroup` class is created to encapsulate the type code. The `Person` class now uses an instance of `BloodGroup` instead of an integer, improving type safety and readability. Static factory methods in `BloodGroup` provide controlled access to instances.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/replace-type-code-with-class.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nclass Person {\n  private BloodGroup bloodGroup;\n\n  public Person(BloodGroup bloodGroup) {\n    bloodGroup = bloodGroup;\n  }\n  public void setBloodGroup(BloodGroup bloodGroup) {\n    bloodGroup = bloodGroup;\n  }\n  public BloodGroup getBloodGroup() {\n    return bloodGroup;\n  }\n}\n\nclass BloodGroup {\n  private final int code;\n\n  private BloodGroup(int code) {\n    this.code = code;\n  }\n  public int getCode() {\n    return this.code;\n  }\n\n  public static BloodGroup O() {\n    return new BloodGroup(0);\n  }\n  public static BloodGroup A() {\n    return new BloodGroup(1);\n  }\n  public static BloodGroup B() {\n    return new BloodGroup(2);\n  }\n  public static BloodGroup AB() {\n    return new BloodGroup(3);\n  }\n}\n\n// Somewhere in client code.\nPerson parent = new Person(BloodGroup.O());\nif (parent.getBloodGroup() == BloodGroup.AB()) {\n  // ...\n}\nchild.setBloodGroup(parent.getBloodGroup());\n```\n\n----------------------------------------\n\nTITLE: Client-Side Collection Iteration Example (PHP)\nDESCRIPTION: Example client code demonstrating how to iterate through the courses retrieved using `$kent->getCourses()` to count advanced courses. This logic, operating on the data retrieved from the `Person` object, is identified as a candidate for refactoring using 'Extract Method' to move it into the `Person` class itself.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/encapsulate-collection.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$count = 0;\nforeach ($kent->getCourses() as $course) {\n  if ($course->isAdvanced()) {\n    $count++;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initial Extracted getOutstanding Method (No Return) PHP\nDESCRIPTION: This is the initial version of the extracted method for calculating the outstanding amount. It performs the calculation but doesn't return the result. This is problematic if the calling method ('printOwing') needs the final value of '$outstanding' for subsequent operations (like printing details).\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/extract-method.md#_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\nfunction getOutstanding() {\n  $e = $this->orders->elements();\n  $outstanding = 0;\n  while ($e->hasMoreElements()) {\n    $each = $e->nextElement();\n    $outstanding += $each->getAmount();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding IsNull property to PaymentHistory class\nDESCRIPTION: Adds a virtual IsNull property to the PaymentHistory class, preparing it for a null object implementation to handle null payment histories safely.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/introduce-null-object.md#_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\n  public virtual bool IsNull\n  {\n    get{ return false; }\n  }\n```\n\n----------------------------------------\n\nTITLE: Creating Initial Fields for Interval - C#\nDESCRIPTION: This snippet adds private string fields (`start`, `end`, and `length`) to the `Interval` class to store the values. It initializes them with default values of \"0\". These fields will hold the data used by the Interval domain class.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/duplicate-observed-data.md#_snippet_13\n\nLANGUAGE: C#\nCODE:\n```\n  private string  start = \"0\",\n                  end = \"0\",\n                  length = \"0\";\n```\n\n----------------------------------------\n\nTITLE: Adjusting getter to return BloodGroup's code\nDESCRIPTION: This snippet modifies the getBloodGroup() method to return the integer code from the BloodGroup object, matching previous integer-based interface while encapsulating data within the object.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/replace-type-code-with-class.md#_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\n  public int getBloodGroup() {\n    return bloodGroup.getCode();\n  }\n```\n\n----------------------------------------\n\nTITLE: Delegating getAreaCode Method\nDESCRIPTION: This code snippet adds a getAreaCode method to the Person class. It delegates the call to the original getAreaCode method of the officeTelephone object, which is an instance of the TelephoneNumber class. This is a step in inlining the TelephoneNumber class into the Person class.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/inline-class.md#_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n  public String getAreaCode() {\n    return officeTelephone.getAreaCode();\n  }\n```\n\n----------------------------------------\n\nTITLE: C# Method Calculating Distance with Split Constants for Accelerations\nDESCRIPTION: This snippet presents an improved version of the previous method, where the variable 'acc' is replaced by two constant variables 'primaryAcceleration' and 'secondaryAcceleration'. This enhances code clarity by assigning each acceleration a specific, descriptive name, and reducing the risk of errors caused by multiple reassignments of the same variable.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/split-temporary-variable.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\ndouble GetDistanceTravelled(int time)\n{\n  double result;\n  const double primaryAcceleration = primaryForce / mass;\n  int primaryTime = Math.min(time, delay);\n  result = 0.5 * primaryAcceleration * primaryTime * primaryTime;\n\n  int secondaryTime = time - delay;\n  if (secondaryTime > 0)\n  {\n    double primaryVel = primaryAcceleration * delay;\n    const double secondaryAcceleration = (primaryForce + secondaryForce) / mass;\n    result +=  primaryVel * secondaryTime + 0.5 * secondaryAcceleration * secondaryTime * secondaryTime;\n  }\n\n  return result;\n}\n```\n\n----------------------------------------\n\nTITLE: Optimizing setCourses with addAll for Copy in Java\nDESCRIPTION: Demonstrates simplifying the setCourses method by replacing an explicit loop with the addAll method of the collection to copy elements from the input set 'arg' to the internal courses set. This assumes no additional behaviors or validations occur during addition. This approach preserves encapsulation by making a copy rather than assigning directly, preventing external modification risks.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/encapsulate-collection.md#_snippet_5\n\nLANGUAGE: Java\nCODE:\n```\n    courses.addAll(arg);\n```\n\n----------------------------------------\n\nTITLE: Using setLength Method in FocusLost Handler (Java)\nDESCRIPTION: Calls the `setLength` method within the `LengthField_FocusLost` event handler, passing the current text of the `lengthField`. This replaces direct manipulation of the field within the event handler, utilizing the newly introduced accessor method.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/duplicate-observed-data.md#_snippet_18\n\nLANGUAGE: Java\nCODE:\n```\n\n      setLength(lengthField.getText());\n\n```\n\n----------------------------------------\n\nTITLE: Creating the BloodGroup Class in PHP\nDESCRIPTION: This code snippet creates a basic BloodGroup class. The class will be responsible for encapsulating the blood type information and related behavior. It's the first step in replacing the integer-based type codes with a class.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/replace-type-code-with-class.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nclass BloodGroup {\n}\n```\n\n----------------------------------------\n\nTITLE: Looking Up Customer from Repository by Order - Java\nDESCRIPTION: Retrieves the associated Customer object for a given Order by searching all instances in a repository. Requires a static Customer.getInstances() method returning existing customers and a containsOrder method to check associations. The method loops through customers and returns the one containing the order, or null if not found. Inputs: implicit 'this' Order; Output: a Customer object or null.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/change-bidirectional-association-to-unidirectional.md#_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\nIterator iter = Customer.getInstances().iterator();\nwhile (iter.hasNext()) {\n  Customer each = (Customer)iter.next();\n  if (each.containsOrder(this)) {\n    return each;\n  }\n}\nreturn null;\n```\n\n----------------------------------------\n\nTITLE: Initial Order Class in C#\nDESCRIPTION: This C# code snippet shows the initial implementation of an `Order` class. It contains a `customer` field of type `string` and a corresponding `Customer` property to access and modify the customer's name. The class also includes a constructor to initialize the customer name. This is the starting point for the refactoring process where we aim to replace the simple `string` with a more complex `Customer` object.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/replace-data-value-with-object.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class Order\n{\n  // ...\n  private string customer;\n\n  public string Customer\n  {\n    get { return customer; }\n    set { customer = value; }\n  }\n\n  public Order(string customer)\n  {\n    this.Customer = customer;\n  }\n}\n//…\n// Client code, which uses Order class.\nprivate static int NumberOfOrdersFor(List<Order> orders, string customer)\n{\n  int result = 0;\n\n  if (orders != null)\n  {\n    foreach (Order order in orders)\n    {\n      if (string.Equals(order.Customer, customer))\n      {\n        result++;\n      }\n    }\n  }\n\n  return result;\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting 'unitPrice' Field and Its Getter in 'JobItem'\nDESCRIPTION: The code extracts the 'unitPrice' field from 'JobItem', including defining its access modifier, initialization in constructor, and creating a getter method to access its value, enabling better encapsulation.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/extract-subclass.md#_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\nprivate int unitPrice;\n\npublic int GetUnitPrice() { return unitPrice; }\n```\n\n----------------------------------------\n\nTITLE: Creating ArticleHtml Subclass - PHP\nDESCRIPTION: Defines the `ArticleHtml` class, which extends the `ArticleView` base class. This step is part of extracting format-specific subclasses. It represents a specialized viewer for rendering articles in HTML format. The constructor simply calls the parent class constructor.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/form-template-method.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\nclass ArticleHtml extends ArticleView {\n  public function __construct(Article $article) {\n    parent::__construct($article);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Date Range Inclusion Method in PHP\nDESCRIPTION: Implementation of an 'includes' method in the DateRange class to check if a given date falls within the range. This encapsulates the range check logic that was previously in the client code.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/introduce-parameter-object.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\npublic function includes(DateTime $arg) {\n  return ($arg >= $this->start && $arg <= $this->end);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining BloodGroup class with type code\nDESCRIPTION: This snippet defines a new immutable BloodGroup class with a final 'code' field, constructor, and getter to encapsulate blood type information, replacing primitive constants with object instances.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/replace-type-code-with-class.md#_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\nclass BloodGroup {\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Property Accessor in C# Account Class\nDESCRIPTION: Creates a public property accessor for the private daysOverdrawn field in the Account class to allow external access to the field while maintaining encapsulation.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/move-method.md#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\npublic int DaysOverdrawn\n{\n  get { return daysOverdrawn; }\n}\n```\n\n----------------------------------------\n\nTITLE: Using setStart Method in FocusLost Handler (Java)\nDESCRIPTION: Calls the `setStart` method within the `StartField_FocusLost` event handler, passing the current text of the `startField`. This replaces direct manipulation of the field within the event handler, utilizing the newly introduced accessor method.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/duplicate-observed-data.md#_snippet_13\n\nLANGUAGE: Java\nCODE:\n```\n\n      setStart(startField.getText());\n\n```\n\n----------------------------------------\n\nTITLE: Refactoring Subclass to Replace Setter Calls with Super Constructor Call\nDESCRIPTION: In case subclasses initialize parent class private fields, this snippet illustrates replacing the setter call with a call to the parent constructor via 'super(id)'. For private fields, this approach ensures proper initialization without exposing setters, and if the parent method is private, changing it to 'protected' improves accessibility.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/remove-setting-method.md#_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\nclass InterestAccount extends Account {\n  private double interestRate;\n  public InterestAccount(String id, double interestRate) {\n    super(id);\n    this.interestRate = interestRate;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Original Method Definition - Java\nDESCRIPTION: This snippet shows the original method `getTelephoneNumber` within the `Person` class. It returns the office telephone number. The client code then calls this method to get the phone number.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/rename-method.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nclass Person {\n  //…\n  public String getTelephoneNumber() {\n    return (\"(\" + officeAreaCode + \") \" + officeNumber);\n  }\n}\n\n// Client code\nphone = employee.getTelephoneNumber();\n```\n\n----------------------------------------\n\nTITLE: Remove Setter for 'id' and Integrate Logic into Constructor\nDESCRIPTION: The process involves removing the 'setId' setter method from the class to prevent external modification after object creation. Instead, the constructor directly initializes the 'id' field, making the class more immutable and safer for use cases where the field should only be set once.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/remove-setting-method.md#_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\nclass Account {\n  // ...\n  private String id;\n\n  public Account(String id) {\n    this.id = id;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Modifier Method Calling the Query to Send Alerts in Java\nDESCRIPTION: This snippet shows the modifier method doSendAlert that uses the query method findCriminal to check for the presence of criminals. If a non-empty result is returned, it calls sendAlert to generate the side effect. The method has a void return type and does not return any value itself, fulfilling the role of a true modifier in this refactoring pattern.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/separate-query-from-modifier.md#_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\nif (findCriminal(people) != \"\") {\n  sendAlert();\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Course Counting Method in Java\nDESCRIPTION: A straightforward method that returns the total number of courses by accessing the size of the courses collection. This replaces direct access to the collection size with a more readable method call.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/encapsulate-collection.md#_snippet_9\n\nLANGUAGE: Java\nCODE:\n```\npublic int numberOfCourses() {\n  return courses.size();\n}\n```\n\n----------------------------------------\n\nTITLE: Extracted Method for Applying Fixed Discount in Java\nDESCRIPTION: This snippet illustrates the extraction of the fixed discount application logic into its own method applyFixedDiscount within the Order class. It directly subtracts the given discount value from the price field. This method is intended to replace previous conditional logic within a general discount method and improve clarity by isolating fixed discount behavior.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/replace-parameter-with-explicit-methods.md#_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\n  public void applyFixedDiscount(double discount) {\n    price -= discount;\n  }\n```\n\n----------------------------------------\n\nTITLE: Optimizing Collection Setter with addAll (PHP)\nDESCRIPTION: Optimizes the refactored setter (potentially named `initializeCourses` after renaming) by replacing the `foreach` loop with a single call to `$this->courses->addAll($arg)`. This is suitable when the setter's intent is to initialize or completely replace the collection content, copying the provided collection `$arg` to maintain encapsulation.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/encapsulate-collection.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n    $this->courses->addAll($arg);\n```\n\n----------------------------------------\n\nTITLE: Defining Employee and Department Classes in PHP\nDESCRIPTION: This snippet defines two separate PHP classes: Employee and Department, each with their own fields and methods for common operations such as retrieving costs and staff members. There are no explicit relationships or abstractions connecting the two classes at this stage, leading to duplicated functionality. Inputs include employee name, ID, annual cost, and department name; outputs include total costs, employee or department name, and staff lists. The code presumes standard PHP and may require error checks for array usage.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/extract-superclass.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass Employee {\n  private $name;\n  private $annualCost;\n  private $id;\n\n  public function __construct($name, $id, $annualCost) {\n    $this->name = $name;\n    $this->id = $id;\n    $this->annualCost = $annualCost;\n  }\n  public function getAnnualCost() {\n    return $this->annualCost;\n  }\n  public function getId() {\n    return $this->id;\n  }\n  public function getName() {\n    return $this->name;\n  }\n}\n\nclass Department {\n  private $name;\n  private $staff = array();\n\n  public function __construct($name) {\n    $this->name = $name;\n  }\n  public function getTotalAnnualCost() {\n    $result = 0;\n    foreach ($this->staff as $each) {\n      $result += $each->getAnnualCost();\n    }\n    return $result;\n  }\n  public function getHeadCount() {\n    return count($staff);\n  }\n  public function getStaff() {\n    return $this->staff;\n  }\n  public function addStaff(Employee $arg) {\n    $this->staff[] = $arg;\n  }\n  public function getName() {\n    return $this->name;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Auto-Implemented Property in AccountType Class in C#\nDESCRIPTION: Implementation of an InterestRate property in the AccountType class that will store the interest rate value moved from the Account class. This uses C# auto-implemented property syntax introduced in C# 3.0.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/move-field.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic double InterestRate\n{\n  get;\n  set;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Name Property to Customer - C#\nDESCRIPTION: Adds a public Name property to the Customer class. This property is of type string and provides a getter and setter, allowing external access and modification of the customer's name.  This enables storing and accessing customer names within the Customer class.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/replace-data-value-with-object.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n  public string Name\n  {\n    get;\n    set;\n  }\n```\n\n----------------------------------------\n\nTITLE: Defining Abstract Class and Subclasses (PHP)\nDESCRIPTION: This code defines an abstract class `Person` with abstract methods `isMale()` and `getCode()`, and concrete subclasses `Male` and `Female` that implement these methods. The `Male` class's `isMale()` method returns `true` and `getCode()` returns 'M'. The `Female` class does the inverse. This demonstrates the initial state of classes before refactoring.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/replace-subclass-with-fields.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n```\nabstract class Person {\n  abstract function isMale();\n  abstract function getCode();\n}\n\nclass Male extends Person {\n  function isMale() {\n    return true;\n  }\n  function getCode() {\n    return 'M';\n  }\n}\nclass Female extends Person {\n  function isMale() {\n    return false;\n  }\n  function getCode() {\n    return 'F';\n  }\n}\n\n// Client code\n$kent = new Male();\nprint(\"Person's gender is: \" . $kent->getCode());\n```\n```\n\n----------------------------------------\n\nTITLE: Removing Factory Method and Registry in C#\nDESCRIPTION: This snippet removes the factory method (`Get`) and the associated registry (`instances`) for managing `Customer` objects. This is done because the class is now a value object, and direct instantiation is preferred. The constructor visibility is changed from private to public.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/change-reference-to-value.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\n  private static Hashtable instances = new Hashtable();\n\n\n\n```\n\n----------------------------------------\n\nTITLE: Adding getOfficeTelephone Method - PHP\nDESCRIPTION: This snippet adds a getter method for the officeTelephone field, allowing external access to the TelephoneNumber object.  Considered when deciding how much to expose the TelephoneNumber class.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/extract-class.md#_snippet_13\n\nLANGUAGE: PHP\nCODE:\n```\n\n  public function getOfficeTelephone() {\n    return $this->officeTelephone;\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Adding Accessor Methods for Length Field in IntervalWindow (Java)\nDESCRIPTION: Defines getter (`getLength`) and setter (`setLength`) methods within the `IntervalWindow` class to encapsulate direct access to the `lengthField` GUI component's text. `getLength` retrieves the text, and `setLength` updates it.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/duplicate-observed-data.md#_snippet_17\n\nLANGUAGE: Java\nCODE:\n```\n\n  String getLength() {\n    return lengthField.getText();\n  }\n  void setLength(String arg) {\n    lengthField.setText(arg);\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Defining Private Field in PHP\nDESCRIPTION: This PHP code snippet shows the declaration of a private class field named `$unitPrice`. It is presented as part of a larger documentation sequence illustrating a refactoring process, specifically the 'Push Down Field' step. The field is likely being moved from a superclass to a subclass as part of this refactoring.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/extract-subclass.md#_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\n  private $unitPrice;\n\n```\n\n----------------------------------------\n\nTITLE: Simplifying Client Code to Use Polymorphism for Customer Name - PHP\nDESCRIPTION: Updates client code to assign customer name by directly calling getName() on the customer object, relying on polymorphism rather than explicit null checks. Assumes all customer variants implement getName(); removes conditional branching.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/introduce-null-object.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\n$customerName = $customer->getName();\n```\n\n----------------------------------------\n\nTITLE: Creating Public Properties for Interval - C#\nDESCRIPTION: This code defines public properties (`Start`, `End`, and `Length`) to access the internal string fields. These properties expose the values of the interval to other parts of the code. However, the setters of these properties don't have any implementations yet.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/duplicate-observed-data.md#_snippet_14\n\nLANGUAGE: C#\nCODE:\n```\n  public string Start\n  {\n    get{ return start; }\n    set{ }\n  }\n```\n\n----------------------------------------\n\nTITLE: Implement Getters in Parent Class - C#\nDESCRIPTION: This snippet implements the getters for the `IsMale` and `Code` properties in the `Person` class.  These getters simply return the values of the corresponding private fields, effectively moving the property implementations from the subclasses to the parent class.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/replace-subclass-with-fields.md#_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\n\n    get{ return isMale; }\n  \n\n```\n\nLANGUAGE: C#\nCODE:\n```\n\n    get{ return code; }\n  \n\n```\n\n----------------------------------------\n\nTITLE: Defining Redundant Salary Adjustment Methods - C#\nDESCRIPTION: This code snippet defines an Employee class in C# with methods to promote to manager and to apply either a 10% or a 5% salary raise as separate methods. Each method contains similar logic with only the raise coefficient differing. This structure results in duplicated code and limited flexibility, which is the target for refactoring. No external dependencies are required; key inputs involve internal class state changes and conditional client logic.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/parameterize-method.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class Employee\n{\n  // ...\n  public void PromoteToManager()\n  {\n    type = Employee.MANAGER;\n    Salary *= 1.5;\n  }\n  public void TenPercentRaise()\n  {\n    Salary *= 1.1;\n  }\n  public void FivePercentRaise()\n  {\n    Salary *= 1.05;\n  }\n}\n\n// Somewhere in client code\nif (employee.YearsOfExperience > 5)\n{\n  if (employee.Clients.Count > 10)\n    employee.PromoteToManager();\n  else\n    employee.FivePercentRaise();\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying `getHistory` to Return Null Object (PHP)\nDESCRIPTION: This snippet modifies the `getHistory` method of a class (likely `Customer` or a related class) to return a null object of type `PaymentHistory`. This is a crucial step in the null object pattern.  The method now directly returns a new instance of `PaymentHistory::newNull()`. This replaces the need for conditional checks in the calling code.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/introduce-null-object.md#_snippet_15\n\nLANGUAGE: PHP\nCODE:\n```\n  public function getHistory() {\n    return PaymentHistory::newNull();\n  }\n```\n\n----------------------------------------\n\nTITLE: Creating Public Properties for Interval - C#\nDESCRIPTION: This code defines public properties (`Start`, `End`, and `Length`) to access the internal string fields. These properties expose the values of the interval to other parts of the code. However, the setters of these properties don't have any implementations yet.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/duplicate-observed-data.md#_snippet_15\n\nLANGUAGE: C#\nCODE:\n```\n  public string End\n  {\n    get{ return end; }\n    set{ }\n  }\n```\n\n----------------------------------------\n\nTITLE: Comparing Room Temperatures with HeatingPlan Using Primitive Parameters - C#\nDESCRIPTION: This snippet shows the original implementation, where the Room class method WithinPlan takes a HeatingPlan and explicitly extracts temperature extremes, then delegates validation to HeatingPlan.WithinRange by passing primitive int values. HeatingPlan defines WithinRange with two integer parameters (low, high), comparing them against its internal TempRange. Requires Room and HeatingPlan classes, as well as a TempRange structure. Inputs include integer temperature values, and the expected output is a boolean indicating if the temperature is within the plan's range. The approach is limited by its reliance on explicit temperature parameters, making extension to further attributes (like humidity) cumbersome.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/preserve-whole-object.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class Room\n{\n  // ...\n  public bool WithinPlan(HeatingPlan plan)\n  {\n    int low = GetLowestTemp();\n    int high = GetHighestTemp();\n    return plan.WithinRange(low, high);\n  }\n}\n\npublic class HeatingPlan\n{\n  private TempRange range;\n\n  public bool WithinRange(int low, int high)\n  {\n    return low >= range.Low && high <= range.High;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Compute Method with Field Replacements in PHP\nDESCRIPTION: Defines the compute() method performing calculations originally in the refactored method but replacing all local variables and parameters with class fields. Calls to the Account's delta() method are rerouted through the account field to maintain encapsulation and proper method referencing.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/replace-method-with-method-object.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n\n  public function compute() {\n    $this->importantValue1 = ($this->inputVal * $this->quantity) + $this->account->delta();\n    $this->importantValue2 = ($this->inputVal * $this->yearToDate) + 100;\n    if (($this->yearToDate - $this->importantValue1) > 100) {\n      $this->importantValue2 -= 20;\n    }\n    $this->importantValue3 = $this->importantValue2 * 7;\n    // and so on…\n    return $this->importantValue3 - 2 * $this->importantValue1;\n  }\n```\n\n----------------------------------------\n\nTITLE: Delegating getLength from IntervalWindow to Interval (Java)\nDESCRIPTION: Replaces the implementation of the `getLength` method in the `IntervalWindow` class. It now retrieves the 'length' value from the `Interval` domain object by calling `subject.getLength()`. Note: Assumes intended code was `getLength()` not `getLength(arg)`.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/duplicate-observed-data.md#_snippet_27\n\nLANGUAGE: Java\nCODE:\n```\n    return subject.getLength();\n\n```\n\n----------------------------------------\n\nTITLE: Refactored Order and Customer Classes with Unidirectional Association Retrieval in PHP\nDESCRIPTION: This code snippet demonstrates a refactored approach where the Order class retrieves its Customer via iteration over all Customer instances, instead of maintaining a direct property. The Customer class manages a collection of orders with methods to add and process orders. This shift reduces tight coupling between classes by avoiding direct property references. Dependencies include static method getInstances() and containsOrder() in Customer; the functions of other methods remain similar, focusing on correctly associating orders with customers.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/change-bidirectional-association-to-unidirectional.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nclass Order {\n  // ...\n  public function getCustomer() {\n    foreach (Customer::getInstances() as $customer) {\n      if ($customer->containsOrder($this)) {\n        return $customer;\n      }\n    }\n    return null;\n  }\n\n  public function getDiscountedPrice() {\n    return $this->getGrossPrice() * (1 - $this->getCustomer()->getDiscount());\n  }\n}\n\nclass Customer {\n  // ...\n  private $orders = array();\n\n  public function addOrder(Order $arg) {\n    $this->orders[] = $arg;\n  }\n\n  public function getPriceFor(Order $order) {\n     assert(array_search($order, $this->orders, TRUE), \"Order can not be found\");\n     return $order->getDiscountedPrice();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Refactored Explicit Discount Methods in Java\nDESCRIPTION: This snippet presents the refactored version of the Order class where the discount application is split into two explicit methods: applyFixedDiscount and applyPercentDiscount. Each method directly modifies the price without using conditional logic based on parameters. Client code is updated accordingly to call these specific methods. This improves code readability and maintainability by eliminating conditional branching and parameter dependence in the discount application logic.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/replace-parameter-with-explicit-methods.md#_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nclass Order {\n  // ...\n  public void applyFixedDiscount(double discount) {\n    price -= discount;\n  }\n  public void applyPercentDiscount(double discount) {\n    price *= discount;\n  }\n}\n\n// Somewhere in client code\nif (weekend) {\n  order.applyFixedDiscount(10);\n}\nif (order.items.size() > 5) {\n  order.applyPercentDiscount(0.2);\n}\n```\n\n----------------------------------------\n\nTITLE: Initial Employee Class with Multiple Raise Methods (Java)\nDESCRIPTION: The initial version of the Employee class contains multiple methods (`promoteToManager`, `tenPercentRaise`, `fivePercentRaise`) that perform similar salary increase operations but use different, hardcoded multiplication factors. Example client code demonstrates how these methods might be invoked based on conditions.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/parameterize-method.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nclass Employee {\n  // ...\n  public void promoteToManager() {\n    type = Employee.MANAGER;\n    salary *= 1.5;\n  }\n  public void tenPercentRaise() {\n    salary *= 1.1;\n  }\n  public void fivePercentRaise() {\n    salary *= 1.05;\n  }\n}\n\n// Somewhere in client code\nif (employee.yearsOfExperience > 5) {\n  if (employee.clients.size() > 10) {\n    employee.promoteToManager();\n  }\n  else {\n    employee.fivePercentRaise();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing IObserver interface methods in IntervalWindow C#\nDESCRIPTION: Provides skeleton implementations of the 'IObserver<Interval>' interface in the window class. 'OnNext' will handle incoming interval notifications (implementation deferred), while 'OnError' and 'OnCompleted' contain no logic since error and completion notifications are not used or expected.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/duplicate-observed-data.md#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\npublic void OnNext(Interval interval)\n{\n}\n// No implementation needed: Method is not called by the Interval class.\npublic void OnError(Exception e)\n{\n  // No implementation.\n}\n// No implementation needed: Method is not called by the Interval class.\npublic void OnCompleted()\n{\n  // No implementation.\n}\n\n```\n\n----------------------------------------\n\nTITLE: Overriding payAmount Method in Engineer Subclass - Java\nDESCRIPTION: This snippet adds the overridden payAmount method to the Engineer subclass of Employee. It returns the monthly salary of the employee without additional compensation. This method replaces conditional logic for engineers within the EmployeeType class. Dependency on Employee class fields like monthlySalary is assumed, and the method expects an Employee instance as input and returns the salary as an integer.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/replace-type-code-with-state-strategy.md#_snippet_7\n\nLANGUAGE: Java\nCODE:\n```\n  @Override public int payAmount(Employee employee) {\n    return employee.monthlySalary;\n  }\n```\n\n----------------------------------------\n\nTITLE: Consolidating Conditionals and Extracting Methods in C# Payout Calculation\nDESCRIPTION: This snippet refactors the Payout class to combine related eligibility checks in DisabilityAmount into a single OR expression, and extracts that logic into a clearly named method, IsNotEligibleForDisability. Similarly, nested vacation eligibility checks are consolidated using AND and further optimized with a ternary operator for compactness. Required dependencies are properties Seniority, MonthsDisabled, IsPartTime, and methods OnVacation and LengthOfService; implementation details for these must be provided elsewhere. Input parameters remain class properties. Outputs are payout amounts as doubles, and this approach greatly improves code readability and maintainability.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/consolidate-conditional-expression.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Payout\n{\n  // ...\n\n  public int Seniority\n  { get; set; }\n  public int MonthsDisabled\n  { get; set; }\n  public bool IsPartTime\n  { get; set; }\n\n  public double DisabilityAmount()\n  {\n    if (IsNotEligibleForDisability())\n      return 0;\n\n    // compute the disability amount\n    // ...\n  }\n  private bool IsNotEligibleForDisability()\n  {\n    return Seniority < 2 || MonthsDisabled > 12 || IsPartTime;\n  }\n\n  public double VacationAmount()\n  {\n    return (OnVacation() && LengthOfService() > 10) ? 1 : 0.5;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Refactoring: Removing Customer Field\nDESCRIPTION: This snippet is about removing the customer field from the order class after the previous refactoring steps. This completely eliminates the bidirectional association between the customer and order classes. This is a final step of the refactoring to ensure that the association is unidirectional.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/change-bidirectional-association-to-unidirectional.md#_snippet_6\n\n\n\n----------------------------------------\n\nTITLE: Defining Payout Calculation with Separate Conditionals in C#\nDESCRIPTION: This snippet defines a C# class Payout that calculates DisabilityAmount and VacationAmount using multiple independent if statements. Each eligibility criterion for disability payments and vacation payments is checked in a separate block, returning 0 if any fail, or a default value otherwise. Dependencies include integer properties Seniority, MonthsDisabled, boolean IsPartTime, and auxiliary methods OnVacation and LengthOfService which must be implemented externally. Inputs are class properties, and outputs are doubles for each payout calculation. This structure leads to repetitive control flow and is intended as a baseline before refactoring.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/consolidate-conditional-expression.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Payout\n{\n  // ...\n\n  public int Seniority\n  { get; set; }\n  public int MonthsDisabled\n  { get; set; }\n  public bool IsPartTime\n  { get; set; }\n\n  public double DisabilityAmount()\n  {\n    if (Seniority < 2) {\n      return 0;\n    }\n    if (MonthsDisabled > 12) {\n      return 0;\n    }\n    if (IsPartTime) {\n      return 0;\n    }\n    // compute the disability amount\n    // ...\n  }\n\n  public double VacationAmount()\n  {\n    if (OnVacation()) {\n      if (LengthOfService() > 10) {\n        return 1;\n      }\n    }\n    return 0.5;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Simple PHP classes for Order and Customer with unidirectional association\nDESCRIPTION: This snippet shows basic PHP class definitions for Order and Customer, where Order holds a reference to Customer but lacks reverse linkage. It serves as the initial unidirectional association example, providing getters and setters for the customer property.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/change-unidirectional-association-to-bidirectional.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nclass Order {\n  // ...\n  private $customer; // Customer\n\n  public function getCustomer() {\n    return $this->customer;\n  }\n  public function setCustomer(Customer $arg) {\n    $this->customer = $arg;\n  }\n}\n\nclass Customer {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Number Format Exception in Java\nDESCRIPTION: This Java snippet demonstrates catching a NumberFormatException during parsing and throwing a RuntimeException with a specific error message. It is likely part of a method processing numerical user input or file data. Requires standard Java Runtime; input is expected to be a parsable numeric string, otherwise the error is triggered and rethrown as a RuntimeException.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/duplicate-observed-data.md#_snippet_30\n\nLANGUAGE: Java\nCODE:\n```\n} catch (NumberFormatException e) {\n  throw new RuntimeException (\"Unexpected Number Format Error\");\n}\n```\n\n----------------------------------------\n\nTITLE: Refactored Employee Class - C# Inheritance\nDESCRIPTION: This snippet shows the code after applying the 'Replace Delegation with Inheritance' refactoring. The `Employee` class now inherits from `Person`, eliminating the `person` field and the delegated `Name` property. The `ToString` method directly accesses the inherited `LastName` property. This simplifies the `Employee` class by leveraging inheritance.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/replace-delegation-with-inheritance.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Person\n{\n  public string Name\n  { get; set; }\n  public string LastName\n  {\n    get{ return Name.Substring(Name.LastIndexOf(' ') + 1); }\n  }\n}\n\npublic class Employee: Person\n{\n  public override string ToString()\n  {\n    return \"Emp: \" + LastName;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Delegating setOfficeNumber Method - PHP\nDESCRIPTION: This snippet delegates the setOfficeNumber method in the Person class to setNumber of the TelephoneNumber object.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/extract-class.md#_snippet_12\n\nLANGUAGE: PHP\nCODE:\n```\n    $this->officeTelephone->setNumber($arg);\n\n```\n\n----------------------------------------\n\nTITLE: Original Combined Query and Modifier Method in Java\nDESCRIPTION: This snippet shows a Guard class containing a method that both finds a criminal's name from an array and sends an alert if found. The method findCriminalAndAlert returns the criminal's name while also triggering side effects (sending an alert). The checkSecurity method calls this combined method and uses the returned name for further processing. This dual responsibility makes the method problematic for reuse and maintainability.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/separate-query-from-modifier.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nclass Guard {\n  // ...\n  public void checkSecurity(String[] people) {\n    String found = findCriminalAndAlert(people);\n    someLaterCode(found);\n  }\n  public String findCriminalAndAlert(String[] people) {\n    for (int i = 0; i < people.length; i++) {\n      if (people[i].equals(\"Don\")) {\n        sendAlert();\n        return \"Don\";\n      }\n      if (people[i].equals(\"John\")) {\n        sendAlert();\n        return \"John\";\n      }\n    }\n    return \"\";\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Printing Advanced Course Count Using Refactored Method in PHP\nDESCRIPTION: This PHP code snippet shows how to use the refactored `numberOfAdvancedCourses` method. It calls the method on the `$kent` object and concatenates the returned integer count with a descriptive string before printing it to the output.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/encapsulate-collection.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nprint(\"Advanced courses: \" . $kent->numberOfAdvancedCourses());\n```\n\n----------------------------------------\n\nTITLE: Updating ArticleHtml::view with Helper Calls - PHP\nDESCRIPTION: Modifies the main `view` method in the `ArticleHtml` class to delegate the formatting of individual article parts to the newly extracted private helper methods (`title`, `intro`, `body`, `footer`). The method now simply calls these helpers and concatenates their output.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/form-template-method.md#_snippet_14\n\nLANGUAGE: PHP\nCODE:\n```\n    return $this->title()\n      . $this->intro()\n      . $this->body()\n      . $this->footer();\n```\n\n----------------------------------------\n\nTITLE: Implementing GetHistory in C#\nDESCRIPTION: This snippet defines the `GetHistory()` method within a `NullCustomer` class (implied from the context). The purpose of this method is to return a `PaymentHistory` object. When the customer is a null object, it returns `PaymentHistory.NewNull()`.  This is crucial for integrating the Null Object Pattern correctly.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/introduce-null-object.md#_snippet_12\n\nLANGUAGE: C#\nCODE:\n```\npublic override PaymentHistory GetHistory()\n  {\n    return PaymentHistory.NewNull();\n  }\n```\n\n----------------------------------------\n\nTITLE: Adding Factory Method newNull to PaymentHistory Class - PHP\nDESCRIPTION: Implements the PaymentHistory::newNull() static factory, which returns an instance of NullPaymentHistory. This encapsulates creation logic and hides the null-object implementation from client code. Requires NullPaymentHistory class.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/introduce-null-object.md#_snippet_13\n\nLANGUAGE: PHP\nCODE:\n```\n  public static function newNull() {\n    return new NullPaymentHistory();\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Renaming Method for Consistency (PHP)\nDESCRIPTION: Applies the 'Rename Method' refactoring to the 'Department' class. The 'getTotalAnnualCost' method is renamed to 'getAnnualCost' to match the corresponding method name in the 'Employee' class, preparing for further abstraction.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/extract-superclass.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nclass Department extends Party\n{\n  // ...\n  public function getAnnualCost() { // Renamed from getTotalAnnualCost\n    // ... implementation remains the same for now\n  }\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Add Constructors to Subclasses - C#\nDESCRIPTION: This snippet demonstrates the addition of constructors to the `Male` and `Female` subclasses that call the newly introduced protected constructor of the `Person` class, passing in the appropriate values for `isMale` and `code`.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/replace-subclass-with-fields.md#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\n\n\n  public Male(): base(true, 'M')\n  {}\n\n```\n\n----------------------------------------\n\nTITLE: Add Protected Constructor to Parent Class - C#\nDESCRIPTION: This snippet adds a protected constructor to the `Person` class.  This constructor is used by the subclasses to initialize the `isMale` and `code` fields. It allows the subclasses to set the gender-specific data during their instantiation.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/replace-subclass-with-fields.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\n\n  protected Person(bool isMale, char code)\n  {\n    this.isMale = isMale;\n    this.code = code;\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Selecting Text with Various Options\nDESCRIPTION: Illustrates different methods for selecting text using the `Select` command. This includes simple selection, selecting by item number (e.g., `3rd`), specifying an origin context (e.g., `in \"ExampleClass\"`), targeting specific parts of code (e.g., `parameters of`, `body of`), handling multiline selections, using sub-selection markers (`|||`), and adding to existing selections (`+ Select`).\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/README.md#_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nSelect \"private int field;\"\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nSelect 3rd \"getSomething()\"\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nSelect \"private int field;\" in \"ExampleClass\"\nSelect \"private int field;\" in \"class ExampleClass\"\nSelect \"doSomething()\" in \"int someMethod\"\nSelect \"doSomething()\" in \"someMethod\" of \"ExampleClass\"\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nSelect \"interval\" in parameters of \"doSomething\"\nSelect \"interval\" in body of \"doSomething\" in \"ExampleClass\"\nSelect \"interval\" in whole \"doSomething\"\nSelect name of \"doSomething\"\nSelect visibility of \"doSomething\" in \"ExampleClass\"\nSelect type of \"doSomething\"\nSelect parameters of \"doSomething\"\nSelect body of \"doSomething\"\nSelect whole of \"doSomething\"\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nSelect:\n```\nMultiple lines\ngo here\n```\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nSelect:\n```\nMultiple |||lines|||\ngo here. I also wan to select |||this|||.\n```\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nSelect \"something\"\n+ Select \"soemthing else\"\n```\n\n----------------------------------------\n\nTITLE: Removing 'Employee' Property and Moving to Subclass\nDESCRIPTION: This section demonstrates removing the 'Employee' property from the parent class and pushing its declaration and initialization into the subclass, including updates to constructors and property definition.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/extract-subclass.md#_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\npublic Employee Employee\n{ get; private set; }\n```\n\n----------------------------------------\n\nTITLE: Original findAppointments Method in Java\nDESCRIPTION: This code snippet displays the initial implementation of the `findAppointments` method within the `Calendar` class. It retrieves appointments based on a given date. It requires a `Date` object as input and returns an `ArrayList` of `Appointment` objects. The method iterates through appointments and adds those matching the input date to the result list.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/add-parameter.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nclass Calendar {\n  // ...\n  private Set appointments;\n  public ArrayList<Appointment> findAppointments(Date date) {\n    Set result = new ArrayList();\n    Iterator iter = kent.getCourses().iterator();\n    while (iter.hasNext()) {\n      Appointment each = (Appointment) iter.next();\n      if (date.compareTo(each.date) == 0) {\n        result.add(date);\n      }\n    }\n    return result;\n  }\n}\n\n// Somewhere in client code\nDate today = new Date();\nappointments = calendar.findAppointments(today);\n```\n\n----------------------------------------\n\nTITLE: Refactoring: Using Customer Getter\nDESCRIPTION: This snippet focuses on changing the getter of the customer property in the order class to retrieve the customer without using the customer field.  It uses the GetInstances method to find the customer associated with a given order. The purpose of this is to allow obtaining the Customer object even if the direct field is not accessible. The implementation involves looping through a list of customers and checking for an order match.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/change-bidirectional-association-to-unidirectional.md#_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Renaming view methods to common name across subclasses in C#\nDESCRIPTION: Since the format-specific view methods are now in different subclasses, they are renamed to a common name like 'View' for polymorphic invocation, simplifying client code calls.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/form-template-method.md#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nView()\n```\n\n----------------------------------------\n\nTITLE: Updating Text Field Properties on Leave - C#\nDESCRIPTION: This code ensures that changes made in text fields (`tbStart`, `tbEnd`, `tbLength`) are saved when the field loses focus. The corresponding properties (`Start`, `End`, and `Length`) are updated with the text field's value. This is part of handling user input to keep the GUI and the domain model in sync. The setters of the properties are called here.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/duplicate-observed-data.md#_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\n        this.Start = tb.Text;\n```\n\n----------------------------------------\n\nTITLE: Defining Engineer Subclass and Overriding getType Method in Java\nDESCRIPTION: Introduces the 'Engineer' subclass extending Employee and overrides the 'getType()' method to return the constant Employee.ENGINEER. This replaces the type code conditionals specific to engineers with polymorphic behavior. Requires Employee base class and ENGINEER constant. Input: none; output: subclass instance specialized for engineers with overridden behavior.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/replace-type-code-with-subclasses.md#_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\n\nclass Engineer extends Employee {\n}\n\n```\n\nLANGUAGE: Java\nCODE:\n```\n  @Override public int getType() {\n    return Employee.ENGINEER;\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Initial Collection Management in C# (Using List<T>)\nDESCRIPTION: This snippet presents classes 'Course' and 'Person' with a publicly accessible collection of courses. Client code directly modifies the collection via the setter and manipulates it using add and remove operations. It demonstrates a simple, less encapsulated approach that can lead to unintended side-effects or inconsistencies.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/encapsulate-collection.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class Course\n{\n  public bool IsAdvanced\n  {\n    get;\n    set;\n  }\n\n  public Course(string name, bool isAdvanced = false)\n  {\n    // ...\n  }\n}\n\npublic class Person\n{\n  private List<Course> courses;\n\n  public List<Course> Courses\n  {\n    get{\n      return courses;\n    }\n    set{\n      courses = value;\n    }\n  }\n}\n\n// Client code\nPerson kent = new Person();\nList<Course> s = new List<Course>();\n\ns.Add(new Course(\"Smalltalk Programming\"));\ns.Add(new Course(\"Appreciating Single Malts\", true));\nkent.Courses = s;\nAssert.AreEqual(2, kent.Courses.Count);\n\nCourse refact = new Course(\"Refactoring\", true);\nkent.Courses.Add(refact);\nkent.Courses.Add(new Course(\"Brutal Sarcasm\"));\nAssert.AreEqual(4, kent.Courses.Count);\n\nkent.Courses.Remove(refact);\nAssert.AreEqual(3, kent.Courses.Count);\n\nint count = 0;\nforeach (Course c in kent.Courses)\n{\n  if (c.IsAdvanced)\n    count++;\n}\nConsole.WriteLine(\"Advanced courses: \" + count);\n```\n\n----------------------------------------\n\nTITLE: Replacing Old Method Body with New Call - PHP\nDESCRIPTION: This snippet shows the code that replaces the original body of the `findAppointment` method. It now simply calls the new `findAppointmentByDateAndName` method, passing the date and `null` for the name parameter. This step is crucial for the 'Add Parameter' refactoring technique to maintain compatibility with existing callers during the transition.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/add-parameter.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n    findAppointmentByDateAndName($date, null);\n```\n\n----------------------------------------\n\nTITLE: Renaming to getOfficeTelephoneNumber Method in PHP\nDESCRIPTION: Introduces the renamed method getOfficeTelephoneNumber() in Person class which provides a more descriptive method name. The method correctly uses $this to access class properties officeAreaCode and officeNumber. Client code examples demonstrate calling the new method instead of the old one. This snippet reflects the first step of the refactoring process where a new method is added with the updated name and functionality copied.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/rename-method.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nclass Person {\n  //…\n  public function getOfficeTelephoneNumber() {\n    return (\"(\" . $this->officeAreaCode . \") \" . $this->officeNumber);\n  }\n}\n\n// Client code\n$phone = $employee->getOfficeTelephoneNumber();\n```\n\n----------------------------------------\n\nTITLE: Initial Stadium Ticket Price Calculation in Java\nDESCRIPTION: This snippet shows the original implementation of the `getTicketPrice` method in the `Stadium` class before refactoring. It calculates the ticket price based on whether the date falls within the winter season using a single conditional statement. The logic for the condition and the calculations for both the summer and winter rates are contained directly within the `if` and `else` blocks.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/decompose-conditional.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nclass Stadium {\n  // ...\n  public double summerRate;\n  public double winterRate;\n  public double winterServiceCharge;\n\n  public double getTicketPrice(Date date, int quantity) {\n    double charge;\n    if (date.before(WINTER_START) || date.after(WINTER_END)) {\n      charge = quantity * summerRate;\n    }\n    else {\n      charge = quantity * winterRate + winterServiceCharge;\n    }\n    return charge;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Orders Field to Customer (PHP)\nDESCRIPTION: Adds a private field `$orders` to the `Customer` class, initialized as an empty array. This field serves as the container for `Order` objects associated with this customer, establishing the collection side of the new bidirectional link from the customer's perspective.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/change-unidirectional-association-to-bidirectional.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nprivate $orders = array();\n```\n\n----------------------------------------\n\nTITLE: Refactoring 'getName()' Method\nDESCRIPTION: Removes 'getName()' methods from subclasses and promotes a single implementation in the superclass, ensuring consistent access to the 'name' attribute across subclasses.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/extract-superclass.md#_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\npublic String getName() {\n    return name;\n}\n```\n\n----------------------------------------\n\nTITLE: Selecting Calculation Code for Extraction PHP\nDESCRIPTION: These snippets show the code blocks responsible for initializing variables and calculating the total outstanding amount. They are selected from 'printOwing' as the next complex section to extract.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/extract-method.md#_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\n  $e = $this->orders->elements();\n  $outstanding = 0;\n```\n\nLANGUAGE: PHP\nCODE:\n```\n  // print owings\n  while ($e->hasMoreElements()) {\n    $each = $e->nextElement();\n    $outstanding += $each->getAmount();\n  }\n```\n\n----------------------------------------\n\nTITLE: Overriding WeeksDelinquentInLastYear in C#\nDESCRIPTION: This code snippet overrides the `WeeksDelinquentInLastYear` property within the `NullPaymentHistory` class. It returns 0, representing that there are no delinquent weeks. This provides a default and safe value when a null payment history is accessed.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/introduce-null-object.md#_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\npublic override int WeeksDelinquentInLastYear\n  {\n    get{ return 0; }\n  }\n```\n\n----------------------------------------\n\nTITLE: Using Whole Object as Parameter for Temperature Comparison - C#\nDESCRIPTION: This snippet demonstrates the final refactoring step where Room.WithinPlan delegates the comparison to HeatingPlan.WithinRange by passing the whole Room object, not just primitive values. HeatingPlan.WithinRange now takes a Room parameter and retrieves the lowest and highest temperatures from the Room directly, checking against its TempRange. This design requires implementations of Room.GetLowestTemp and Room.GetHighestTemp, as well as HeatingPlan with a defined TempRange. Inputs are the Room instance, enabling future extensibility (such as adding humidity comparison) without further method signature changes. Output remains a boolean indicating sufficiency of the room's temperature range according to the plan.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/preserve-whole-object.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic class Room\n{\n  // ...\n  public bool WithinPlan(HeatingPlan plan)\n  {\n    return plan.WithinRange(this);\n  }\n}\n\npublic class HeatingPlan\n{\n  private TempRange range;\n\n  public bool WithinRange(Room room)\n  {\n    return room.GetLowestTemp() >= range.Low && room.GetHighestTemp() <= range.High;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining NullPaymentHistory Subclass for PaymentHistory Null Object in Java\nDESCRIPTION: Creates NullPaymentHistory subclass of PaymentHistory overriding isNull() to return true, supporting null-object pattern for payment history to avoid null checks in client code.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/introduce-null-object.md#_snippet_11\n\nLANGUAGE: Java\nCODE:\n```\n\nclass NullPaymentHistory extends PaymentHistory {\n  @Override public boolean isNull() {\n    return true;\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Discussion of Date Calculation Logic\nDESCRIPTION: The code snippet highlights the logic of adjusting payment dates to the first of the upcoming month if not already on the first. It discusses the idea of extending DateTime with a new method to encapsulate this logic.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/introduce-foreign-method.md#_snippet_2\n\nLANGUAGE: Russian\nCODE:\n```\n    if (previousDate.Day != 1)\n    {\n      paymentDate = previousDate.AddMonths(1);\n      paymentDate = new DateTime(paymentDate.Year, paymentDate.Month, 1);\n    }\n    else\n      paymentDate = previousDate;\n```\n\n----------------------------------------\n\nTITLE: Update Factory Method for Manager - C#\nDESCRIPTION: This snippet updates the `Create` factory method to instantiate a `Manager` object when the input `type` is `MANAGER`. It adds a new `case` to the `switch` statement. This ensures the factory method correctly creates Manager objects.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/replace-type-code-with-subclasses.md#_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\n\n      case MANAGER:\n        return new Manager();\n\n```\n\n----------------------------------------\n\nTITLE: Refactored JobItem using Extract Subclass Pattern\nDESCRIPTION: This C# code shows the result of applying the 'Extract Subclass' refactoring. The original `JobItem` class is made abstract, containing common properties and methods. Two new subclasses, `PartsItem` and `LaborItem`, are created, each inheriting from `JobItem` and implementing the `GetUnitPrice()` method with their specific logic, thus removing the conditional check from the original class. Client code is updated to use the new subclasses.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/extract-subclass.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic abstract class JobItem\n{\n  public int Quantity\n  { get; private set; }\n\n  protected JobItem(int quantity)\n  {\n    this.Quantity = quantity;\n  }\n\n  public int GetTotalPrice()\n  {\n    return Quantity * GetUnitPrice();\n  }\n  public abstract int GetUnitPrice();\n}\n\npublic class PartsItem: JobItem\n{\n  private int unitPrice;\n\n  public PartsItem(int quantity, int unitPrice): base(quantity)\n  {\n    this.unitPrice = unitPrice;\n  }\n\n  public override int GetUnitPrice()\n  {\n    return unitPrice;\n  }\n}\n\npublic class LaborItem: JobItem\n{\n  public Employee Employee\n  { get; private set; }\n\n  public LaborItem(int quantity, Employee employee): base(quantity)\n  {\n    Employee = employee;\n  }\n  public override int GetUnitPrice()\n  {\n    return Employee.Rate;\n  }\n}\n\npublic class Employee\n{\n  public int Rate\n  { get; private set; }\n\n  public Employee(int rate)\n  {\n    Rate = rate;\n  }\n}\n\n// Somewhere in client code\nEmployee kent = new Employee(50);\nJobItem j1 = new LaborItem(5, kent);\nJobItem j2 = new PartsItem(15, 10);\nint total = j1.GetTotalPrice() + j2.GetTotalPrice();\n```\n\n----------------------------------------\n\nTITLE: Implementing Common View Method in Base ArticleView Class - C#\nDESCRIPTION: Provides a public View() method in the base class that returns the concatenation of Title, Intro, Body, and Footer properties. This centralizes the logic for generating the full article view, ensuring all derived classes use the same rendering process. The method expects subclasses to implement the abstract properties and returns the combined article string. Suitable for scenarios where multiple formats of article views share an identical structure.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/form-template-method.md#_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\n  public string View()\n  {\n    return Title + Intro + Body + Footer;\n  }\n```\n\n----------------------------------------\n\nTITLE: Changing staff type to Party in Department - C#\nDESCRIPTION: Modifies the Department class's staff field to use the Party type instead of Employee. This change is done for enabling the composite pattern mentioned in the context. Requires a basic understanding of inheritance, and also the `Party` class, and also its derived classes (`Employee` and `Department`).\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/extract-superclass.md#_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\nParty\n```\n\n----------------------------------------\n\nTITLE: Employee Class with Type Code Before Refactoring\nDESCRIPTION: Initial implementation of an Employee class using type code constants (ENGINEER, SALESMAN, MANAGER) and switch statements to determine behavior based on employee type. The payAmount method contains conditional logic that varies by employee type.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/replace-type-code-with-subclasses.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nclass Employee {\n  // ...\n  const ENGINEER = 0;\n  const SALESMAN = 1;\n  const MANAGER = 2;\n\n  public $type;\n\n  public function __construct($arg) {\n    $this->type = $arg;\n  }\n\n  public $monthlySalary;\n  public $commission;\n  public $bonus;\n  public function payAmount() {\n    switch ($this->type) {\n      case self::ENGINEER:\n        return $this->monthlySalary;\n      case self::SALESMAN:\n        return $this->monthlySalary + $this->commission;\n      case self::MANAGER:\n        return $this->monthlySalary + $this->bonus;\n      default:\n        throw new RuntimeException(\"Incorrect Employee Code\");\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Refining ArticleMarkdown View Method in Java via Composed Private Methods\nDESCRIPTION: Decomposes the ArticleMarkdown view method into four private helper methods representing parts of the article (title, intro, body, footer). Each returns a string containing the respective section formatted in Markdown. The public view method concatenates these components to build the output. This improves modularity and readability by splitting rendering logic into distinct, reusable parts without changing the output or dependencies.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/form-template-method.md#_snippet_5\n\nLANGUAGE: Java\nCODE:\n```\nprivate String title() {\n  return \"# \" + article.getTitle() + \"\\n\\n\";\n}\nprivate String intro() {\n  return \"> \" + article.getIntro() + \"\\n\\n\";\n}\nprivate String body() {\n  return article.getBody() + \"\\n\\n\";\n}\nprivate String footer() {\n  return \"_Written by \" + article.getAuthor() + \" on \" + article.getDate() + \"_\";\n}\n\n// view method replacement\nreturn title() + intro() + body() + footer();\n```\n\n----------------------------------------\n\nTITLE: Client Code Calling Refactored Method - C#\nDESCRIPTION: This code demonstrates the client-side change required after refactoring. It now calls 'GetOfficeTelephoneNumber' instead of 'GetTelephoneNumber'. The employee object must have a method named 'GetOfficeTelephoneNumber' or inherit it from a base class.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/rename-method.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n// Client code\nphone = employee.GetOfficeTelephoneNumber();\n```\n\n----------------------------------------\n\nTITLE: Person Class GetNumber Method\nDESCRIPTION: The getNumber method is being moved from the TelephoneNumber class to the Person class, which originally delegates to the TelephoneNumber class.  After moving the field number to the Person class, this getter returns the value from the field in the Person class.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/inline-class.md#_snippet_9\n\nLANGUAGE: java\nCODE:\n```\n    return number;\n```\n\n----------------------------------------\n\nTITLE: Updating Factory for Manager PHP\nDESCRIPTION: This code updates the factory method to create a `Manager` object when the type is `MANAGER`. It adds a new `case` to the `switch` statement for handling the `MANAGER` type. This modification ensures that the correct subclass instance is returned by the factory method.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/replace-type-code-with-subclasses.md#_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\n      case self::MANAGER:\n        return new Manager();\n```\n\n----------------------------------------\n\nTITLE: Defining isNull Method in Customer Class - PHP\nDESCRIPTION: Adds an isNull() method to the Customer class, returning false to indicate that an instance represents a real customer. Requires a Customer class definition in PHP. This method enables polymorphic null-check handling when subclassed by a null-object implementation.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/introduce-null-object.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n  public function isNull() {\n    return false;\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Calculating Payroll with Nested Conditionals in PHP\nDESCRIPTION: This code snippet defines a PHP class 'Payout' with a 'getPayAmount' method, utilizing deeply nested if-else statements to determine payroll amounts based on the employee's state (dead, separated, retired, or normal). Each inner branch assigns a computed value to the '$result' variable, which is ultimately returned. Key dependencies include class methods 'deadAmount()', 'separatedAmount()', 'retiredAmount()', and 'normalPayAmount()'. The main input is the object state flags '$this->isDead', '$this->isSeparated', and '$this->isRetired'. Limitations of this approach include reduced readability and maintainability due to nesting.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/replace-nested-conditional-with-guard-clauses.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nclass Payout {\n  // ...\n  function getPayAmount() {\n    $result = 0;\n    if ($this->isDead) {\n      $result = $this->deadAmount();\n    }\n    else {\n      if ($this->isSeparated) {\n        $result = $this->separatedAmount();\n      }\n      else {\n        if ($this->isRetired) {\n          $result = $this->retiredAmount();\n        }\n        else {\n          $result = $this->normalPayAmount();\n        }\n      }\n    }\n    return $result;\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Adding Public Constructor to JobItem with Fewer Parameters in C#\nDESCRIPTION: This snippet adds a public constructor to JobItem that accepts only quantity and unitPrice, initializing the object as a non-labor item by default (isLabor=false, employee=null). It delegates to a protected base constructor which still accepts the full parameter list. This separation ensures external code uses a safer, more restrictive API, and prepares for the removal of extraneous parameters.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/extract-subclass.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\npublic JobItem(int quantity, int unitPrice): this(quantity, unitPrice, false, null)\n  {\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Selecting overdraftCharge with parameters\nDESCRIPTION: This code snippet focuses on refactoring the overdraftCharge method and likely involves selecting a part of a code block with specific parameters.  The syntax suggests parameter selection. Requires context of existing code. The output would be selected text representing the method.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/move-method.md#_snippet_11\n\nLANGUAGE: Text\nCODE:\n```\nSelect \"overdraftCharge(|||$this->daysOverdrawn|||)\"\n```\n\n----------------------------------------\n\nTITLE: Original OverdraftCharge Calculation in Account Class - C#\nDESCRIPTION: This snippet contains the initial implementation of the OverdraftCharge method inside the Account class, which calculates overdraft charges based on account type and days overdrawn. It includes basic fields for AccountType and daysOverdrawn and defines the BankCharge method that uses OverdraftCharge. No delegation or refactoring is performed yet.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/move-method.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Account\n{\n  // ...\n  private AccountType type;\n  private int daysOverdrawn;\n\n  public double OverdraftCharge()\n  {\n    if (type.IsPremium())\n    {\n      double result = 10;\n      if (daysOverdrawn > 7)\n      {\n        result += (daysOverdrawn - 7) * 0.85;\n      }\n      return result;\n    }\n    else\n    {\n      return daysOverdrawn * 1.75;\n    }\n  }\n  public double BankCharge()\n  {\n    double result = 4.5;\n    if (daysOverdrawn > 0)\n    {\n      result += OverdraftCharge();\n    }\n    return result;\n  }\n}\n\npublic class AccountType\n{\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Discount with Direct Parameter Modification in PHP\nDESCRIPTION: This PHP function calculates a discount by modifying the parameter variable $inputVal directly inside the method based on certain conditions using $quantity and $yearToDate values. It accepts three inputs: $inputVal (initial value for discount calculation), $quantity, and $yearToDate. The method decrements $inputVal under conditions and returns the final adjusted value. This approach involves reassignment of the parameter, which may cause side effects and reduce code clarity.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/remove-assignments-to-parameters.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\npublic function discount($inputVal, $quantity, $yearToDate) {\n  if ($inputVal > 50) {\n    $inputVal -= 2;\n  }\n  if ($quantity > 100) {\n    $inputVal -= 1;\n  }\n  if ($yearToDate > 10000) {\n    $inputVal -= 4;\n  }\n  return $inputVal;\n}\n```\n\n----------------------------------------\n\nTITLE: Introducing a Local Extension Class for Date in Java\nDESCRIPTION: This snippet introduces MfDateSub, a subclass of Date, implementing the nextWeek method as an instance method for better cohesion and encapsulation. The code also demonstrates necessary constructors: one accepting a String, another taking a Date object. Account is updated to use new MfDateSub(previousDate).nextWeek() instead of the foreign method. Prerequisites: subclassing support and Date compatibility in environment; nextWeek makes simple calculations, assumes no leap/calendar handling.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/introduce-local-extension.md#_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nclass Account {\n  // ...\n  double schedulePayment() {\n    Date paymentDate = new MfDateSub(previousDate).nextWeek();\n\n    // Issue a payment using paymentDate.\n    // ...\n  }\n}\n\n// Local extension class.\nclass MfDateSub extends Date {\n  public MfDateSub(String dateString) {\n    super(dateString);\n  }\n  public MfDateSub(Date arg) {\n    super(arg.getTime());\n  }\n  public Date nextWeek() {\n    return new Date(getYear(), getMonth(), getDate() + 7);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating getter to return BloodGroup object\nDESCRIPTION: This snippet changes the getBloodGroup method to return the BloodGroup object itself, allowing client code to work with rich objects rather than primitive codes.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/replace-type-code-with-class.md#_snippet_11\n\nLANGUAGE: Java\nCODE:\n```\n  public BloodGroup getBloodGroup() {\n    return bloodGroup;\n  }\n```\n\n----------------------------------------\n\nTITLE: Refactoring to Bidirectional Association in C#\nDESCRIPTION: This snippet improves the original design by introducing a bidirectional association between Order and Customer classes. When an Order's Customer is set, the Order ensures it is removed from the previous Customer's Orders collection and added to the new Customer's Orders collection, maintaining referential integrity on both sides. Dependencies: System.Collections.Generic.HashSet is required. Key parameters: Customer property setter and the Orders property in Customer. Expected input: orders set or added to customers; output: both objects correctly track associations. Limitation: Only the Order class should directly modify Customer.Orders.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/change-unidirectional-association-to-bidirectional.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic class Order\n{\n  // ...\n  private Customer customer;\n\n  public Customer Customer\n  {\n    get {\n      return customer;\n    }\n    set {\n      // Remove order from old customer.\n      if (customer != null)\n      {\n        customer.Orders.Remove(this);\n      }\n      customer = value;\n      // Add order to new customer.\n      if (customer != null)\n      {\n        customer.Orders.Add(this);\n      }\n    }\n  }\n}\n\npublic class Customer\n{\n  // ...\n  private HashSet<Order> orders = new HashSet<Order>();\n\n  // Should be used in Order class only.\n  public HashSet<Order> Orders\n  {\n    get {\n      return orders;\n    }\n  }\n  public void AddOrder(Order order)\n  {\n    order.Customer = this;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Get and Set End Field - Java\nDESCRIPTION: These methods provide getter and setter for the endField text. The getter retrieves the text from endField and the setter sets the text to endField. These are used to encapsulate direct access to the GUI component.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/duplicate-observed-data.md#_snippet_7\n\nLANGUAGE: java\nCODE:\n```\n\n\n  String getEnd() {\n    return endField.getText();\n  }\n  void setEnd(String arg) {\n    endField.setText(arg);\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Defining Blood Type Constants in PHP\nDESCRIPTION: This code snippet defines constants representing blood types (O, A, B, AB). These constants are initially used within the Person class to represent a person's blood type before the refactoring is applied. These are replaced by the BloodGroup class.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/replace-type-code-with-class.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n  const O = 0;\n  const A = 1;\n  const B = 2;\n  const AB = 3;\n```\n\n----------------------------------------\n\nTITLE: Refactoring Person Class to Use TelephoneNumber Class in Java\nDESCRIPTION: Refactors the Person class by extracting telephone-related fields and methods into a new TelephoneNumber class. Person maintains a reference to a TelephoneNumber instance rather than separate strings. TelephoneNumber encapsulates areaCode and number with getters, setters, and a method to format the full telephone number string. This approach improves cohesion and separates concerns between classes.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/extract-class.md#_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nclass Person {\n  private String name;\n  private TelephoneNumber officeTelephone = new TelephoneNumber();\n\n  public String getName() {\n    return name;\n  }\n  public TelephoneNumber getOfficeTelephone() {\n    return officeTelephone;\n  }\n  public String getTelephoneNumber() {\n    return officeTelephone.getTelephoneNumber();\n  }\n}\n\nclass TelephoneNumber {\n  private String areaCode;\n  private String number;\n\n  public String getAreaCode() {\n    return areaCode;\n  }\n  public void setAreaCode(String arg) {\n    areaCode = arg;\n  }\n  public String getNumber() {\n    return number;\n  }\n  public void setNumber(String arg) {\n    number = arg;\n  }\n  public String getTelephoneNumber() {\n    return (\"(\" + areaCode + \") \" + number);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Custom Exception in Client Code (C#)\nDESCRIPTION: Shows the modified client code using a `try`/`catch` block. It attempts the `Withdraw` operation within the `try` block and catches the specific `BalanceException` in the `catch` block to handle the overdraft scenario.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/replace-error-code-with-exception.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\ntry\n{\n  account.Withdraw(amount);\n  DoTheUsualThing();\n}\ncatch (BalanceException e)\n{\n  HandleOverdrawn();\n}\n```\n\n----------------------------------------\n\nTITLE: Initial Guard Class with Combined Query/Modifier Method (PHP)\nDESCRIPTION: This snippet shows the initial state of the `Guard` class before applying the 'Separate Query From Modifier' refactoring. The `findCriminalAndAlert` method searches an array of people (`$people`) for specific names (\"Don\" or \"John\"). If found, it triggers a side effect (`$this->sendAlert()`) and returns the name found. This combination of querying data and modifying state within a single method can lead to issues where querying inadvertently triggers side effects.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/separate-query-from-modifier.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass Guard {\n  // ...\n  public function checkSecurity($people) {\n    $found = $this->findCriminalAndAlert($people);\n    $this->someLaterCode($found);\n  }\n  public function findCriminalAndAlert($people) {\n    for ($i = 0; $i < count($people); $i++) {\n      if ($people[$i] == \"Don\") {\n        $this->sendAlert();\n        return \"Don\";\n      }\n      if ($people[$i] == \"John\") {\n        $this->sendAlert();\n        return \"John\";\n      }\n    }\n    return \"\";\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Refactoring: Removing Customer Setter\nDESCRIPTION: This snippet explains the removal of the setter from the customer property to further refactor the order and customer classes, specifically to eliminate the bidirectional association. This is done after the modification of the Orders collection in the customer class.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/change-bidirectional-association-to-unidirectional.md#_snippet_5\n\n\n\n----------------------------------------\n\nTITLE: Implementing Engineer getType PHP\nDESCRIPTION: This snippet defines the implementation of the `getType` method within the `Engineer` subclass, returning a constant `ENGINEER`.  This overrides the superclass implementation.  This is crucial for identifying the Engineer type.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/replace-type-code-with-subclasses.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n  public function getType() {\n    return Employee::ENGINEER;\n  }\n```\n\n----------------------------------------\n\nTITLE: Refactored Collection Management with Encapsulation and Read-Only Access in C#\nDESCRIPTION: This snippet refactors the 'Person' class to encapsulate the course collection by making it private and exposing only controlled methods for adding, removing, and initializing courses. It provides a read-only property for viewing the collection, prevents external modification, and introduces methods to access collection size and count of advanced courses, aligning with best encapsulation practices.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/encapsulate-collection.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic class Course\n{\n  public bool IsAdvanced\n  {\n    get;\n    set;\n  }\n\n  public Course(string name, bool isAdvanced = false)\n  {\n    // ...\n  }\n}\n\npublic class Person\n{\n  private List<Course> courses = new List<Course>();\n\n  public ReadOnlyCollection<Course> Courses\n  {\n    get{\n      return new ReadOnlyCollection<Course>(courses);\n    }\n  }\n  public int NumberOfAdvancedCourses\n  {\n    get{\n      int count = 0;\n      foreach (Course c in courses)\n      {\n        if (c.IsAdvanced)\n          count++;\n      }\n      return count;\n    }\n  }\n  public int NumberOfCourses\n  {\n    get{\n      return courses.Count;\n    }\n  }\n\n  public void InitializeCourses(List<Course> newCourses)\n  {\n    Assert.IsTrue(courses.Count == 0);\n    courses.AddRange(newCourses);\n  }\n  public void AddCourse(Course course)\n  {\n    courses.Add(course);\n  }\n  public void RemoveCourse(Course course)\n  {\n    courses.Remove(course);\n  }\n}\n\n// Client code\nPerson kent = new Person();\nkent.AddCourse(new Course(\"Smalltalk Programming\"));\nkent.AddCourse(new Course(\"Appreciating Single Malts\", true));\nAssert.AreEqual(2, kent.NumberOfCourses);\n\nCourse refact = new Course(\"Refactoring\", true);\nkent.AddCourse(refact);\nkent.AddCourse(new Course(\"Brutal Sarcasm\"));\nAssert.AreEqual(4, kent.NumberOfCourses);\n\nkenta.RemoveCourse(refact);\nAssert.AreEqual(3, kent.NumberOfCourses);\n\nConsole.WriteLine(\"Advanced courses: \" + kent.NumberOfAdvancedCourses);\n```\n\n----------------------------------------\n\nTITLE: Client Code Update with new parameter\nDESCRIPTION: This code snippet shows how to update the client code when a new parameter is added, specifically assigning the 'null' value to the 'name' parameter. This approach ensures that calls to the updated method don't cause compatibility issues with pre-existing method calls. This guarantees that existing functionality remains unchanged while expanding functionality to use the name parameter if provided.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/add-parameter.md#_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n, null\n```\n\n----------------------------------------\n\nTITLE: Extract Query Method - C#\nDESCRIPTION: This code extracts the query part from the original method into a separate method called `FindCriminal`. This method is responsible for finding and returning the criminal's name without any side effects.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/separate-query-from-modifier.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n\n  public string FindCriminal(string[] people)\n  {\n    for (int i = 0; i < people.Length; i++)\n    {\n      if (people[i].Equals (\"Don\")) {\n        return \"Don\";\n      }\n      if (people[i].Equals (\"John\")) {\n        return \"John\";\n      }\n    }\n    return String.Empty;\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Extracting $quantityDiscount - PHP\nDESCRIPTION: This code snippet focuses on extracting the quantity discount calculation into a new variable, `$quantityDiscount`.  This is part of the refactoring process, aimed at making the code more readable. It calculates the discount based on the quantity and item price. The result is stored in the `$quantityDiscount` variable.  The expression `$this->quantity * $this->itemPrice` is then replaced with `$basePrice`\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/extract-variable.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n  $quantityDiscount = Math.max(0, $this->quantity - 500) * $this->itemPrice * 0.05;\n```\n\n----------------------------------------\n\nTITLE: Adding Accessor Methods for Length Field in Interval (Java)\nDESCRIPTION: Implements getter (`getLength`) and setter (`setLength`) methods for the `length` field in the `Interval` class. The `setLength` method updates the field's value and notifies observers (using `setChanged()` and `notifyObservers()`) that the state has changed.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/duplicate-observed-data.md#_snippet_20\n\nLANGUAGE: Java\nCODE:\n```\n\n  String getLength() {\n    return length;\n  }\n  void setLength(String arg) {\n    length = arg;\n    setChanged();\n    notifyObservers();\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Pay Amount Calculation via Polymorphism in EmployeeType - PHP\nDESCRIPTION: Implements the payAmount method in EmployeeType, which receives an Employee object as parameter and calculates total pay depending on the type code using a switch statement. Inputs: Employee instance; Outputs: numeric salary amount. Limitations: Switch statement is temporary until polymorphic overrides are implemented; throws exception for invalid codes.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/replace-type-code-with-state-strategy.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n\n\n  public function payAmount(Employee $employee) {\n    switch ($this->getTypeCode()) {\n      case EmployeeType::ENGINEER:\n        return $employee->monthlySalary;\n      case EmployeeType::SALESMAN:\n        return $employee->monthlySalary + $employee->commission;\n      case EmployeeType::MANAGER:\n        return $employee->monthlySalary + $employee->bonus;\n      default:\n        throw new Exception(\"Incorrect Employee Code\");\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Getting Resource with Exception Handling in C#\nDESCRIPTION: This code snippet shows the original implementation of the `GetResource` method in a `ResourcePool` class. It attempts to pop a resource from the `available` stack within a `try` block. If an `InvalidOperationException` occurs (indicating the stack was empty), it catches the exception and creates a new `Resource` instead, pushing it to the `allocated` stack. This treats the expected condition of an empty pool as an exceptional event.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/replace-exception-with-test.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class ResourcePool\n{\n  // ...\n  private Stack available;\n  private Stack allocated;\n\n  public Resource GetResource()\n  {\n    Resource result;\n\n    try\n    {\n      result = (Resource) available.Pop();\n      allocated.Push(result);\n      return result;\n    }\n    catch (InvalidOperationException e)\n    {\n      result = new Resource();\n      allocated.Push(result);\n      return result;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Refactoring Constructor to Initialize 'name' in Superclass\nDESCRIPTION: Moves initialization of 'name' from subclass constructors to the superclass constructor, reducing duplicated code and centralizing attribute initialization.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/extract-superclass.md#_snippet_5\n\nLANGUAGE: Java\nCODE:\n```\nprotected Party(String name) {\n    this.name = name;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Refactored Method to Count Total Courses in PHP\nDESCRIPTION: This PHP method `numberOfCourses` provides a concise and encapsulated way to get the total number of courses associated with the object. It directly returns the result of calling the `count()` method on the internal courses collection (`$this->courses`).\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/encapsulate-collection.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\npublic function numberOfCourses() {\n  return $this->courses->count();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Unified Article View Rendering in Java\nDESCRIPTION: Provides the initial implementation of an ArticleView class in Java containing both markdownView and htmlView methods that generate string representations of an article in Markdown or HTML formats. This class holds a protected reference to an Article object. No external dependencies beyond an Article class with appropriate getters are required. The methods concatenate article properties to build the respective outputs, returning formatted strings. This approach lacks separation of concerns since both views reside in the same class.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/form-template-method.md#_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\nclass ArticleView {\n  protected Article article;\n  public ArticleView(Article article) {\n    this.article = article;\n  }\n  public String markdownView() {\n    String output = \"# \" + article.getTitle() + \"\\n\\n\";\n    output += \"> \" + article.getIntro() + \"\\n\\n\";\n    output += article.getBody() + \"\\n\\n\";\n    output += \"_Written by \" + article.getAuthor() + \" on \" + article.getDate() + \"_\";\n    return output;\n  }\n  public String htmlView() {\n    String output = \"<h2>\" + article.getTitle() + \"</h2>\" + \"\\n\";\n    output += \"<blockquote>\" + article.getIntro() + \"</blockquote>\" + \"\\n\";\n    output += \"<p>\" + article.getBody() + \"</p>\" + \"\\n\";\n    output += \"<em>Written by \" + article.getAuthor() + \" on \" + article.getDate() + \"</em>\";\n    return output;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Unidirectional Association in C#\nDESCRIPTION: This snippet establishes a unidirectional association from the Order class to the Customer class using a property with a private backing field. The Order object references its Customer, but no reverse reference is held in Customer. There are no additional dependencies. The Customer property provides get and set access for the related Customer. Inputs: set Customer to an Order instance; Output: retrieval of associated Customer. Limitation: Customer does not track Orders.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/change-unidirectional-association-to-bidirectional.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class Order\n{\n  // ...\n  private Customer customer;\n\n  public Customer Customer\n  {\n    get {\n      return customer;\n    }\n    set {\n      customer = value;\n    }\n  }\n}\n\npublic class Customer\n{\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating PartsItem Subclass - PHP\nDESCRIPTION: Creates a `PartsItem` subclass that extends `JobItem`. This subclass is specifically for handling spare parts and initializes with quantity and unit price. Depends on the `JobItem` class and inherits from its constructor. Expected output: Class definition.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/extract-subclass.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n\n\nclass PartsItem extends JobItem {\n  public function __construct($quantity, $unitPrice) {\n    parent::__construct($quantity, $unitPrice);\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Initial Person Class Phone Fields (Java)\nDESCRIPTION: Shows the initial fields within the Person class that represent office phone number details before the 'Extract Class' refactoring.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/extract-class.md#_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nprivate String officeAreaCode;\nprivate String officeNumber;\n```\n\n----------------------------------------\n\nTITLE: Introducing Accessor Methods for Self-Encapsulation in Account Class - PHP\nDESCRIPTION: This PHP snippet demonstrates self-encapsulation within the Account class by adding private getter and setter methods for the interestRate field. All field accesses within the class are redirected through these methods, which centralizes references to the field and simplifies future refactorings, such as moving the field or changing its location. The snippet assumes the property $type is still present. Dependencies: none beyond the class structure. Expected inputs: method calls from within Account; outputs: as per underlying field logic.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/move-field.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nclass Account {\n  // ...\n  private $type; // AccountType\n  private $interestRate;\n\n  public function interestForAmount_days($amount, $days) {\n    return $this->getInterestRate() * $amount * $days / 365.0;\n  }\n  public function interestForBigFamily($familySize) {\n    return $this->getInterestRate() / $familySize;\n  }\n\n  // other 10 methods, which use getInterestRate()\n\n  private function getInterestRate() {\n    return $this->interestRate;\n  }\n  private function setInterestRate($arg) {\n    $this->interestRate = $arg;\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Refactoring Car to Use Engine Delegation in Java\nDESCRIPTION: This code snippet shows the final result after refactoring, where the Car class no longer extends Engine but instead holds a protected Engine field and delegates engine-specific logic to it. It features an explicit constructor initializing the engine field, ensuring encapsulation. The snippet demonstrates improved design for flexibility by decoupling Car from the Engine inheritance hierarchy. Dependencies remain minimal, expected input includes brand and model values, while outputs are retrieved via getter methods that internally delegate to the engine field.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/replace-inheritance-with-delegation.md#_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nclass Engine {\n  //…\n  private double fuel;\n  private double CV;\n\n  public double getFuel() {\n    return fuel;\n  }\n  public void setFuel(double fuel) {\n    this.fuel = fuel;\n  }\n  public double getCV() {\n    return CV;\n  }\n  public void setCV(double cv) {\n    this.CV = cv;\n  }\n}\n\nclass Car {\n  // ...\n  private String brand;\n  private String model;\n  protected Engine engine;\n\n  public Car() {\n    this.engine = new Engine();\n  }\n  public String getName() {\n    return brand + \" \" + model + \" (\" + engine.getCV() + \"CV)\";\n  }\n  public String getModel() {\n    return model;\n  }\n  public void setModel(String model) {\n    this.model = model;\n  }\n  public String getBrand() {\n    return brand;\n  }\n  public void setBrand(String brand) {\n    this.brand = brand;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Encapsulated Collection and Read-Only Access in Java\nDESCRIPTION: This snippet shows the refactored code. The `Person` class now encapsulates the `courses` collection. Direct access is replaced by `addCourse`, `removeCourse`, and `numberOfCourses` methods.  The `getCourses` method returns an unmodifiable set, preventing external modification of the internal collection. A method `numberOfAdvancedCourses` is added to centralize the calculation of advanced courses.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/encapsulate-collection.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nclass Course {\n  public Course(String name, boolean isAdvanced) {\n    // ...\n  }\n  public boolean isAdvanced() {\n    // ...\n  }\n}\n\nclass Person {\n  private Set courses = new HashSet();\n\n  public Set getCourses() {\n    return Collections.unmodifiableSet(courses);\n  }\n  public void initializeCourses(Set arg) {\n    Assert.isTrue(courses.isEmpty());\n    courses.addAll(arg);\n  }\n  public void addCourse(Course arg) {\n    courses.add(arg);\n  }\n  public void removeCourse(Course arg) {\n    courses.remove(arg);\n  }\n  public int numberOfAdvancedCourses() {\n    Iterator iter = getCourses().iterator();\n    int count = 0;\n    while (iter.hasNext()) {\n      Course each = (Course) iter.next();\n      if (each.isAdvanced()) {\n        count++;\n      }\n    }\n    return count;\n  }\n  public int numberOfCourses() {\n    return courses.size();\n  }\n}\n\n// Client code\nPerson kent = new Person();\nkent.addCourse(new Course(\"Smalltalk Programming\", false));\nkent.addCourse(new Course(\"Appreciating Single Malts\", true));\nAssert.equals(2, kent.numberOfCourses());\nCourse refact = new Course(\"Refactoring\", true);\nkent.addCourse(refact);\nkent.addCourse(new Course(\"Brutal Sarcasm\", false));\nAssert.equals(4, kent.numberOfCourses());\nkent.removeCourse(refact);\nAssert.equals(3, kent.numberOfCourses());\n\nSystem.out.print(\"Advanced courses: \" + kent.numberOfAdvancedCourses());\n```\n\n----------------------------------------\n\nTITLE: Removing Redundant 'unitPrice' Parameter in 'PartsItem' Constructor\nDESCRIPTION: In the 'PartsItem' subclass constructor, the 'unitPrice' parameter is utilized for initialization, replacing default or placeholder values, refining subclass instantiation.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/extract-subclass.md#_snippet_17\n\nLANGUAGE: C#\nCODE:\n```\npublic PartsItem(int quantity, int unitPrice): base(quantity, unitPrice) { }\n```\n\n----------------------------------------\n\nTITLE: Updating Person's setOfficeAreaCode Method (Java)\nDESCRIPTION: Modifies the `setOfficeAreaCode` method in the `Person` class to delegate the call to the `setAreaCode` method of the `officeTelephone` object.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/extract-class.md#_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nofficeTelephone.setAreaCode(arg);\n```\n\n----------------------------------------\n\nTITLE: Adding Field and Accessor Methods to Target Class - Java\nDESCRIPTION: This snippet shows the code added to the target class, `AccountType`, during step 2 of the 'Move Field' refactoring process. It includes the new private `interestRate` field and public getter and setter methods to access it.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/move-field.md#_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n\n  private double interestRate;\n\n  public double getInterestRate() {\n    return interestRate;\n  }\n  public void setInterestRate(double arg) {\n    interestRate = arg;\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Calculating Length Method - C#\nDESCRIPTION: This C# code defines a public method named CalculateLength() within the Interval class.  It parses the Start and End properties to integers, calculates the length, and converts the result back to a string to update the Length property. It assumes the Start and End properties are defined within the same class.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/duplicate-observed-data.md#_snippet_22\n\nLANGUAGE: C#\nCODE:\n```\n  public void CalculateLength()\n  {\n    int start = int.Parse(this.Start);\n    int end = int.Parse(this.End);\n    int length = end - start;\n    this.Length = length.ToString();\n  }\n```\n\n----------------------------------------\n\nTITLE: Creating String Properties for Text Fields - C#\nDESCRIPTION: These snippets define string properties (`Start`, `End`, and `Length`) for the text fields (`tbStart`, `tbEnd`, and `tbLength`). They encapsulate the text field's content, enabling the program to access and modify the text field content through getter and setter methods. This is part of self-encapsulating the fields.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/duplicate-observed-data.md#_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\n  private string End\n  {\n    get{ return tbEnd.Text; }\n    set{ tbEnd.Text = value; }\n  }\n  private string Length\n  {\n    get{ return tbLength.Text; }\n    set{ tbLength.Text = value; }\n  }\n```\n\n----------------------------------------\n\nTITLE: Calculating Flow After Introducing Parameter Object in C#\nDESCRIPTION: This C# snippet demonstrates the 'Account' class after applying the 'Introduce Parameter Object' refactoring. The 'GetFlowBetween' method now accepts a single 'DateRange' object, which encapsulates the start and end dates. A new 'DateRange' class is introduced to hold these dates and includes an 'Includes' method to check if a given date falls within the range. The client code is updated to instantiate and pass the 'DateRange' object.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/introduce-parameter-object.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Account\n{\n  // ...\n  private List<Transaction> transactions = new List<Transaction>();\n\n  public double GetFlowBetween(DateRange range)\n  {\n    double result = 0;\n\n    foreach (Transaction t in transactions)\n    {\n      if (range.Includes(t.ChargeDate))\n        result += t.Value;\n    }\n\n    return result;\n  }\n}\n\npublic class Transaction\n{\n  public DateTime ChargeDate\n  { get; private set; }\n  public double Value\n  { get; private set; }\n\n  public Transaction(double value, DateTime chargeDate)\n  {\n    Value = value;\n    ChargeDate = chargeDate;\n  }\n}\n\npublic class DateRange\n{\n  public DateTime Start\n  { get; private set; }\n  public DateTime End\n  { get; private set; }\n\n  public DateRange(DateTime start, DateTime end)\n  {\n    Start = start;\n    End = end;\n  }\n\n  public bool Includes(DateTime arg)\n  {\n    return arg >= Start && arg <= End;\n  }\n}\n\n// Somewhere in client code…\ndouble flow = account.GetFlowBetween(new DateRange(startDate, endDate));\n```\n\n----------------------------------------\n\nTITLE: Modifying Customer getter to return null object in C#\nDESCRIPTION: Updates the Customer getter to return a null object instead of null, using the null-coalescing operator to simplify the code.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/introduce-null-object.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nreturn customer ?? Customer.NewNull()\n```\n\n----------------------------------------\n\nTITLE: Creating the Foreign Method (Intermediate Step)\nDESCRIPTION: Shows the intermediate step of creating the `nextWeek` method within the `Account` class before making it static or passing the date as an argument. This illustrates the initial extraction of the date calculation logic.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/introduce-foreign-method.md#_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n\n\n  public Date nextWeek() {\n    return new Date(previousDate.getYear(), previousDate.getMonth(), previousDate.getDate() + 7);\n  }\n```\n\n----------------------------------------\n\nTITLE: Implementing GetUnitPrice in LaborItem Subclass Java\nDESCRIPTION: This snippet shows the implementation of the `getUnitPrice` method in the `LaborItem` subclass after applying the 'Replace Conditional With Polymorphism' refactoring. Instead of checking an `isLabor` flag, this specific implementation directly calculates the price based on the employee's rate.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/extract-subclass.md#_snippet_10\n\nLANGUAGE: Java\nCODE:\n```\n\n  public int getUnitPrice() {\n    return employee.getRate();\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Constructing Customer Object with Name in PHP\nDESCRIPTION: Introduces a constructor for the Customer class that accepts an initial name parameter and assigns it to the $name property. This is required to properly instantiate Customer objects with their name set, facilitating clean object creation in the Order class.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/replace-data-value-with-object.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n  public function __construct($name) {\n    $this->name = $name;\n  }\n```\n\n----------------------------------------\n\nTITLE: Adding Helper Method to Gamma Class in PHP for Compute Refactoring\nDESCRIPTION: Introduces a private method importantThing() extracted from a conditional block in compute() to promote modularization. This method adjusts importantValue2 based on a condition involving yearToDate and importantValue1, improving code clarity and allowing further method extraction without parameter passing complexity.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/replace-method-with-method-object.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n\n  private function importantThing() {\n    if (($this->yearToDate - $this->importantValue1) > 100) {\n      $this->importantValue2 -= 20;\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Defining domain class Interval in C#\nDESCRIPTION: Declares an empty domain class 'Interval' intended to encapsulate interval-related data and logic separate from UI code. This class will later be expanded to implement observable properties and calculation methods for length and endpoint values.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/duplicate-observed-data.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic class Interval\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Adding UnitPrice Initialization to PartsItem Constructor Java\nDESCRIPTION: This snippet shows the addition of the `unitPrice` field initialization to the `PartsItem` subclass constructor. This moves the initialization logic down the hierarchy, aligning it with the subclass where the `unitPrice` field will reside.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/extract-subclass.md#_snippet_14\n\nLANGUAGE: Java\nCODE:\n```\n\n    this.unitPrice = unitPrice;\n\n```\n\n----------------------------------------\n\nTITLE: Updating Order Class Setter for Customer Reference Management in C#\nDESCRIPTION: Modifies the setter of the Order's Customer property to ensure proper management of the association by removing the order from the previous customer's collection and adding it to the new customer's collection, maintaining bidirectional consistency.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/change-unidirectional-association-to-bidirectional.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nset {\n    // Remove order from old customer.\n    if (customer != null)\n    {\n      customer.Orders.Remove(this);\n    }\n    \n    customer = value;\n    \n    // Add order to new customer.\n    if (customer != null)\n    {\n      customer.Orders.Add(this);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Throwing Exceptions in PHP Account Method\nDESCRIPTION: This refactored PHP code replaces integer error codes with a custom BalanceException class to indicate errors when withdrawing funds. The Account::withdraw method now throws BalanceException if the withdrawal amount exceeds the balance, and returns nothing on success. Client code wraps the call in a try/catch block, allowing for centralized exception handling. This approach requires defining the BalanceException class and updating all client calls to handle exceptions. Inputs remain the withdrawal amount, and exceptions replace error code outputs, improving error clarity and code maintainability.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/replace-error-code-with-exception.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nclass Account {\n  // ...\n  private $balance;\n\n  /**\n   * Withdraw money from account.\n   * @param int $amount Amount to withdraw.\n   * @throws BalanceException\n   */\n  public function withdraw($amount) {\n    if ($amount > $this->balance) {\n      throw new BalanceException();\n    }\n    $this->balance -= $amount;\n  }\n}\nclass BalanceException extends Exception {}\n\n// Somewhere in client code.\ntry {\n  $account->withdraw($amount);\n  doTheUsualThing();\n} catch (BalanceException $e) {\n  handleOverdrawn();\n}\n\n```\n\n----------------------------------------\n\nTITLE: Replacing Constructor with Static Factory Method in PHP Customer Class\nDESCRIPTION: This snippet refactors the 'Customer' class to replace direct instantiation via constructor with a static factory method 'getNamed'. The class maintains a private static array of 'Customer' instances, initialized at program startup, facilitating centralized access to 'Customer' objects by name. Dependencies include ensuring 'loadCustomers' is called before access, and this pattern aids in managing shared instances efficiently. The main goal is to improve object reference handling by avoiding multiple instantiations and enabling global access to predefined customers.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/change-value-to-reference.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nclass Customer {\n  private static $instances = array();\n\n  // This code should be executed at the program launch.\n  public static function loadCustomers() {\n    Customer::instances[\"Lemon Car Hire\"] = new Customer(\"Lemon Car Hire\");\n    Customer::instances[\"Associated Coffee Machines\"] = new Customer(\"Associated Coffee Machines\");\n    Customer::instances[\"Bilston Gasworks\"] = new Customer(\"Bilston Gasworks\");\n  }\n\n  private $name;\n  public static function getNamed($name) {\n    return Customer::instances[$name];\n  }\n  private function __construct($name) {\n    $this->name = $name;\n  }\n  public function getName() {\n    return $this->name;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Refactoring 'getAnnualCost()' Methods in Subclasses\nDESCRIPTION: Replaces specific 'getAnnualCost()' implementations in 'Employee' and 'Department' classes with overrides that call the abstract method from the superclass, facilitating polymorphism.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/extract-superclass.md#_snippet_8\n\nLANGUAGE: Java\nCODE:\n```\n@Override\npublic int getAnnualCost() {\n    return getAnnualCost();\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing null check with IsNull property in C#\nDESCRIPTION: Replaces the explicit null check with a call to the IsNull property, making the code more object-oriented and eliminating direct null references.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/introduce-null-object.md#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\ncustomer.IsNull\n```\n\n----------------------------------------\n\nTITLE: Salesman: Add PayAmount Method - C#\nDESCRIPTION: This snippet implements the `PayAmount` method within the `Salesman` class.  It calculates the pay amount by adding the monthly salary and the commission. This functionality is specific to Salesmen and is being pushed down from the base class.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/replace-type-code-with-subclasses.md#_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\n\n\n  public int PayAmount()\n  {\n    return MonthlySalary + Commission;\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Moving the Compute Method to Gamma Class in Java\nDESCRIPTION: This snippet moves the `compute` method from the original class to the `Gamma` class. It represents the complex calculations that are being extracted. The method uses the class's fields instead of local variables to perform the calculations.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/replace-method-with-method-object.md#_snippet_7\n\nLANGUAGE: java\nCODE:\n```\n  public int compute() {\n    int importantValue1 = (inputVal * quantity) + delta();\n    int importantValue2 = (inputVal * yearToDate) + 100;\n    if ((yearToDate - importantValue1) > 100) {\n      importantValue2 -= 20;\n    }\n    int importantValue3 = importantValue2 * 7;\n    // and so on…\n    return importantValue3 - 2 * importantValue1;\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Removing Setter Method in C#\nDESCRIPTION: This snippet demonstrates removing the setter method for the `BirthDate` property and initializing it via the constructor. This enforces immutability by preventing external modification of the `BirthDate` after object creation. The private setter is replaced with constructor initialization.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/change-reference-to-value.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nget;\n    |||set;|||\n```\n\nLANGUAGE: C#\nCODE:\n```\n\n    this.BirthDate = BirthDate;\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Observer Interface - Java\nDESCRIPTION: This code snippet implements the Observer interface in the IntervalWindow class. This allows the IntervalWindow to react to changes in the observed Interval object. The update method will be called whenever the Interval changes.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/duplicate-observed-data.md#_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n implements Observer\n```\n\n----------------------------------------\n\nTITLE: Modifying class visibility to 'protected' in Java\nDESCRIPTION: This snippet shows selecting and replacing the class visibility modifier from 'public' to 'protected'. Adjusting the class’s access level to 'protected' limits its visibility to subclasses and package members, aligning with encapsulation strategies.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/extract-subclass.md#_snippet_18\n\n\n\n----------------------------------------\n\nTITLE: Calling Article View Object (Markdown) - PHP\nDESCRIPTION: Replaces the original Markdown rendering logic within the `Article` class (implied context) with a call to the dedicated `ArticleView::markdownView` method. It instantiates `ArticleView`, passing itself (`$this`, the Article object) and returns the result of the view method.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/form-template-method.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n    $view = new ArticleView($this);\n    return $view->markdownView();\n```\n\n----------------------------------------\n\nTITLE: Declaring Abstract getHeadCount in Party (Java)\nDESCRIPTION: Declares the `getHeadCount` method as abstract in the `Party` superclass (likely an abstract class or interface). This enforces the implementation of `getHeadCount` in all concrete subclasses like `Department` and `Employee`, ensuring a uniform interface for calculating headcount across the composite structure.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/extract-superclass.md#_snippet_12\n\nLANGUAGE: java\nCODE:\n```\n\n  public abstract int getHeadCount();\n\n```\n\n----------------------------------------\n\nTITLE: Updating GUI End Field in Update Method (Java)\nDESCRIPTION: Sets the text of the `endField` GUI component using the value retrieved from the `subject` (the `Interval` object) via `subject.getEnd()`. This code resides within the `update` method of the `IntervalWindow` class, which is called by the Observer pattern when the `Interval` object changes, ensuring the UI reflects the domain state. Direct setting avoids potential infinite recursion.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/duplicate-observed-data.md#_snippet_11\n\nLANGUAGE: Java\nCODE:\n```\n\n    endField.setText(subject.getEnd());\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Gamma Class in PHP\nDESCRIPTION: Defines an empty Gamma class that will encapsulate the refactored method and its associated data. This serves as a foundational step before adding properties and methods to isolate logic from the original class method.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/replace-method-with-method-object.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nclass Gamma {\n}\n```\n\n----------------------------------------\n\nTITLE: Refactored Person Class with Factory Method - Java\nDESCRIPTION: This Java code showcases the refactored `Person` class after applying the 'Replace Subclass with Fields' refactoring. It includes static factory methods (`createMale`, `createFemale`) and a protected constructor to instantiate `Person` objects.  Fields `isMale` and `code` are introduced to store subclass-specific values.  It uses a private constructor and getter methods.  The code demonstrates how to create the object.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/replace-subclass-with-fields.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nclass Person {\n  static Person createMale() {\n    return new Person(true, 'M');\n  }\n  static Person createFemale() {\n    return new Person(false, 'F');\n  }\n  protected Person(boolean isMale, char code) {\n    this.isMale = isMale;\n    this.code = code;\n  }\n\n  private final boolean isMale;\n  private final char code;\n\n  boolean isMale() {\n    return isMale;\n  }\n  char getCode() {\n    return code;\n  }\n}\n\n// Client code\nPerson kent = Person.createMale();\nSystem.out.print(\"Person's gender is: \" + kent.getCode());\n```\n\n----------------------------------------\n\nTITLE: Initial Employee and Person Classes - C# Delegation\nDESCRIPTION: This snippet shows the initial state before refactoring. The `Employee` class contains a `Person` object and delegates access to properties like `Name` and methods like `ToString` (indirectly via `LastName`). This setup is a candidate for replacement with inheritance.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/replace-delegation-with-inheritance.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Person\n{\n  public string Name\n  { get; set; }\n  public string LastName\n  {\n    get{ return Name.Substring(Name.LastIndexOf(' ') + 1); }\n  }\n}\n\npublic class Employee\n{\n  protected Person person;\n\n  public string Name\n  {\n    get{ return person.Name; }\n    set{ person.Name = value; }\n  }\n\n  public Employee()\n  {\n    this.person = new Person();\n  }\n\n  public override string ToString()\n  {\n    return \"Emp: \" + person.LastName;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Person Class SetNumber Method\nDESCRIPTION: The setNumber method is being moved from the TelephoneNumber class to the Person class, which originally delegates to the TelephoneNumber class.  After moving the field number to the Person class, this setter sets the value of the field in the Person class.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/inline-class.md#_snippet_10\n\nLANGUAGE: java\nCODE:\n```\n    number = arg;\n```\n\n----------------------------------------\n\nTITLE: Calculating Charges in TimeSheet with Direct Employee Dependency - PHP\nDESCRIPTION: This snippet illustrates the original implementation of the TimeSheet class, where the charge method directly depends on the Employee class. The method calculates a base billing amount from the employee's rate and number of days, then optionally applies a bonus multiplier for special skills. Dependencies: Employee class; requires getRate() and hasSpecialSkill() methods. Inputs: Employee object, days (integer). Output: Calculated charge (numeric value). Limitation: Not easily extendable to other billable entities.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/extract-interface.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nclass TimeSheet {\n  // ...\n  public function charge(Employee $employee, $days) {\n    $base = $employee->getRate() * $days;\n    if ($employee->hasSpecialSkill()) {\n      return $base * 1.05;\n    }\n    else {\n      return $base;\n    }\n  }\n}\n\nclass Employee {\n  // ...\n  public function getRate() {\n    // ...\n  }\n  public function hasSpecialSkill() {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initial GUI Implementation (C#)\nDESCRIPTION: This C# code snippet shows the initial implementation of a Windows Form GUI class (`IntervalWindow`) where the data (start, end, length) and the calculation logic (`CalculateLength`, `CalculateEnd`) reside directly within the UI class. The `OnTextBoxLeave` event handler triggers recalculations based on which text box was edited. This violates the principle of separating UI and business logic.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/duplicate-observed-data.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic partial class IntervalWindow : Form\n{\n  public IntervalWindow()\n  {\n    InitializeComponent();\n  }\n\n  private void CalculateLength()\n  {\n    int start = int.Parse(tbStart.Text);\n    int end = int.Parse(tbEnd.Text);\n    int length = end - start;\n    tbLength.Text = length.ToString();\n  }\n  private void CalculateEnd()\n  {\n    int start = int.Parse(tbStart.Text);\n    int length = int.Parse(tbLength.Text);\n    int end = start + length;\n    tbEnd.Text = end.ToString();\n  }\n\n  private void OnTextBoxLeave(object sender, EventArgs e)\n  {\n    TextBox tb = sender as TextBox;\n    \n    if (tb != null)\n    {\n      int tmp;\n      if (!int.TryParse(tb.Text, out tmp))\n        tb.Text = \"0\";\n      \n      if (tb == tbStart)\n      {\n        CalculateLength();\n      }\n      else if (tb == tbEnd)\n      {\n        CalculateLength();\n      }  \n      else if (tb == tbLength)\n      {\n        CalculateEnd();\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Refactored Product Price Calculation with Extracted Methods in C#\nDESCRIPTION: This snippet presents the refactored Product class using the Replace Temp with Query technique. The GetPrice method is simplified to call two helper methods: BasePrice and DiscountFactor, which encapsulate the logic for base price calculation and discount selection, respectively. Dependencies include the private class members quantity and itemPrice, and the methods expect these to be defined in the class. Inputs are quantity and item price; output is the product's final price with discounts. The refactoring eliminates temporary variables, resulting in improved code clarity and easier maintenance.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/replace-temp-with-query.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic class Product\n{\n  // ...\n  public double GetPrice()\n  {\n    return BasePrice() * DiscountFactor();\n  }\n  private int BasePrice()\n  {\n    return quantity * itemPrice;\n  }\n  private double DiscountFactor()\n  {\n    if (BasePrice() > 1000)\n    {\n      return 0.95;\n    }\n    return 0.98;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Corrected Extracted printDetails Method PHP\nDESCRIPTION: This is the corrected version of the 'printDetails' method. To resolve the undefined variable error, the '$outstanding' variable is passed as a parameter to the method, allowing it to access the necessary value from the calling context.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/extract-method.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\nfunction printDetails($outstanding) {\n  print(\"name: \" . $this->name);\n  print(\"amount: \" . $outstanding);\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding PayAmount Method in Salesman Subclass in C#\nDESCRIPTION: Implements the PayAmount method override inside the Salesman subclass calculating payment as monthly salary plus commission. This encapsulates commission logic within the subclass. Depends on Employee class having MonthlySalary and Commission properties. Accepts an Employee object and returns an integer payroll amount.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/replace-type-code-with-state-strategy.md#_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\n\n\n  public override int PayAmount(Employee employee)\n  {\n    return employee.MonthlySalary + employee.Commission;\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Adding Number Getter/Setter to TelephoneNumber (Java)\nDESCRIPTION: Adds getter and setter methods for the `number` field within the `TelephoneNumber` class.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/extract-class.md#_snippet_10\n\nLANGUAGE: java\nCODE:\n```\npublic String getNumber() {\n  return number;\n}\npublic void setNumber(String arg) {\n  number = arg;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Engine and Car Classes with Inheritance in C#\nDESCRIPTION: This snippet defines the initial class design where Car inherits from Engine. The Engine class contains properties for Fuel and CV, while the Car class extends Engine by adding Brand, Model, and a computed Name property which returns a formatted string including the inherited CV. This represents a straightforward inheritance model where Car has direct access to Engine properties.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/replace-inheritance-with-delegation.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Engine\n{\n  //…\n  public double Fuel\n  { get; set; }\n  public double CV\n  { get; set; }\n}\n\npublic class Car: Engine\n{\n  // ...\n  public string Brand\n  { get; set; }\n  public string Model\n  { get; set; }\n  public string Name\n  {\n    get{ return Brand + \" \" + Model + \" (\" + CV + \"CV)\"; }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Person Class GetAreaCode Method\nDESCRIPTION: The getAreaCode method is being moved from the TelephoneNumber class to the Person class, which originally delegates to the TelephoneNumber class.  After moving the field areaCode to the Person class, this getter returns the value from the field in the Person class.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/inline-class.md#_snippet_7\n\nLANGUAGE: java\nCODE:\n```\n    return areaCode;\n```\n\n----------------------------------------\n\nTITLE: Original Conditional Checks in PHP Disability and Vacation Amount Methods\nDESCRIPTION: This code snippet presents the original implementation of the payout calculation class in PHP, where multiple separate if statements check different conditions individually. It shows the disabilityAmount method returning zero for multiple conditions separately, and the vacationAmount method with nested conditionals to determine payout values. The snippet serves as a baseline for demonstrating how to consolidate conditionals. It requires PHP environment and class context with properties seniority, monthsDisabled, and isPartTime.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/consolidate-conditional-expression.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nclass Payout {\n  // ...\n\n  public $seniority;\n  public $monthsDisabled;\n  public $isPartTime;\n\n  public function disabilityAmount() {\n    if ($this->seniority < 2) {\n      return 0;\n    }\n    if ($this->monthsDisabled > 12) {\n      return 0;\n    }\n    if ($this->isPartTime) {\n      return 0;\n    }\n    // compute the disability amount\n    // ...\n  }\n\n  public function vacationAmount() {\n    if ($this->onVacation()) {\n      if ($this->lengthOfService() > 10) {\n        return 1;\n      }\n    }\n    return 0.5;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Exception Class in C#\nDESCRIPTION: Defines a custom exception class `BalanceException` inheriting from the base `Exception` class. This specific exception is thrown by the refactored `Withdraw` method to signal an overdraft attempt.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/replace-error-code-with-exception.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class BalanceException: Exception {}\n```\n\n----------------------------------------\n\nTITLE: Initial Printing Outstanding Amount Method in C#\nDESCRIPTION: This snippet shows a single method PrintOwing that calculates and prints the total outstanding amount for customer orders. It defines and initializes a list of orders and calculates the outstanding amount by iterating over each order. It also prints a banner and customer details directly within the same method, mixing multiple responsibilities. Dependencies include a List<Order> named orders and a string name for customer identification. The method inputs are implicit from class fields, and the output is console output displaying the banner, name, and amount.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/extract-method.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvoid PrintOwing()\n{\n  List<Order> orders = orders.Elements;\n  double outstanding = 0.0;\n\n  // print banner\n  Console.WriteLine (\"*****************************\");\n  Console.WriteLine (\"****** Customer totals ******\");\n  Console.WriteLine (\"*****************************\");\n\n  // print owings\n  foreach (Order order in orders)\n  {\n    outstanding += order.GetAmount();\n  }\n\n  // print details\n  Console.WriteLine(\"name: \" + name);\n  Console.WriteLine(\"amount: \" + outstanding);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Employee Factory Method in Java\nDESCRIPTION: Replaces direct use of the constructor that accepts a type code with a static factory method 'create(int type)'. This method returns a new Employee object initialized with the given type. It promotes controlled creation of Employee instances and sets groundwork for later subclass instantiation. Requires the Employee constructor accepting an integer type. Inputs: integer type code; Outputs: Employee instance.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/replace-type-code-with-subclasses.md#_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\n  public static Employee create(int type) {\n    return new Employee(type);\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Refactored Payout Class Structure - Java\nDESCRIPTION: This snippet shows the final state of the Payout class after applying the Consolidate Conditional Expression refactoring. The 'disabilityAmount' method uses an extracted method for the consolidated OR condition, and 'vacationAmount' uses a ternary operator for the consolidated AND condition.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/consolidate-conditional-expression.md#_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nclass Payout {\n  // ...\n\n  public int seniority;\n  public int monthsDisabled;\n  public boolean isPartTime;\n\n  public double disabilityAmount() {\n    if (isNotEligibleForDisability()) {\n      return 0;\n    }\n    // compute the disability amount\n    // ...\n  }\n  private boolean isNotEligibleForDisability() {\n    return seniority < 2 || monthsDisabled > 12 || isPartTime;\n  }\n\n  public double vacationAmount() {\n    return (onVacation() && lengthOfService() > 10) ? 1 : 0.5;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating GUI Length Field in Update Method (Java)\nDESCRIPTION: Adds code to the `update` method in `IntervalWindow` to set the text of the `lengthField` GUI component using the value from `subject.getLength()`. This ensures the length field in the UI stays synchronized with the `Interval` domain object's state.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/duplicate-observed-data.md#_snippet_21\n\nLANGUAGE: Java\nCODE:\n```\n\n    lengthField.setText(subject.getLength());\n\n```\n\n----------------------------------------\n\nTITLE: Finishing Refactoring\nDESCRIPTION: This snippet marks the end of the refactoring process. It mentions that the refactoring is complete and also suggests looking at the difference between old and new code for comparison.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/replace-type-code-with-class.md#_snippet_10\n\nLANGUAGE: plaintext\nCODE:\n```\nSet final step\n\n#|ru|Q На этом рефакторинг можно считать оконченным. В завершение, можете посмотреть разницу между старым и новым кодом.\n#|en|Q The refactoring is complete! You can compare the old and new code if you like.\n#|uk|Q На цьому рефакторинг можна вважати закінченим. На завершення, можете подивитися різницю між старим та новим кодом.\n```\n\n----------------------------------------\n\nTITLE: Moving GetTelephoneNumber Method to TelephoneNumber Class (C#)\nDESCRIPTION: Moves the `GetTelephoneNumber` method from the `Person` class to the `TelephoneNumber` class. The implementation now uses the `AreaCode` and `Number` properties directly within the `TelephoneNumber` class.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/extract-class.md#_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\npublic string GetTelephoneNumber()\n{\n  return \"(\" + AreaCode + \") \" + Number;\n}\n```\n\n----------------------------------------\n\nTITLE: Original Bidirectional Association C#\nDESCRIPTION: This code demonstrates a bidirectional association between the `Order` and `Customer` classes in C#. The `Order` class has a `Customer` property, and the `Customer` class maintains a collection of `Order` objects. The `Customer` property setter in the `Order` class updates both the `Order`'s `customer` field and the `Customer`'s `Orders` collection, ensuring consistency. This creates a tight coupling between the two classes. Dependencies: HashSet, Assert (for `GetPriceFor`)\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/change-bidirectional-association-to-unidirectional.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Order\n{\n  // ...\n  private Customer customer;\n\n  public Customer Customer\n  {\n    get {\n      return customer;\n    }\n    set {\n      // Remove order from old customer.\n      if (customer != null)\n      {\n        customer.Orders.Remove(this);\n      }\n      customer = value;\n      // Add order to new customer.\n      if (customer != null)\n      {\n        customer.Orders.Add(this);\n      }\n    }\n  }\n\n  public double GetDiscountedPrice()\n  {\n    return GetGrossPrice() * (1 - this.Customer.GetDiscount());\n  }\n}\n\npublic class Customer\n{\n  // ...\n  private HashSet<Order> orders = new HashSet<Order>();\n\n  // Should be used in Order class only.\n  public HashSet<Order> Orders\n  {\n    get {\n      return orders;\n    }\n  }\n\n  public void AddOrder(Order order)\n  {\n    order.Customer = this;\n  }\n\n  public double GetPriceFor(Order order)\n  {\n     Assert.IsTrue(orders.Contains(order));\n     return order.GetDiscountedPrice();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Refactored Checking for Suspicious Names Using Break in PHP\nDESCRIPTION: This improved function iterates through the array of people and checks for suspicious names (\"Don\" or \"John\") as before, but replaces the control flag logic with break statements. When a suspicious name is found, it immediately calls sendAlert() and exits the loop using break. This eliminates unnecessary iterations and conditional checks, resulting in clearer and more efficient code. The dependency is the sendAlert() function, and the function expects an array of names as input with no return value. This version removes all reliance on auxiliary control variables.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/remove-control-flag.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nfunction checkSecurity(array $people) {\n  for ($i = 0; $i < count($people); $i++) {\n    if ($people[$i] == \"Don\") {\n      sendAlert();\n      break;\n    }\n    if ($people[$i] == \"John\") {\n      sendAlert();\n      break;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Delegating Method and Class Structure in C#\nDESCRIPTION: This snippet defines the initial class design where the Person class holds a private Department instance and exposes a GetManager() method that delegates the call to Department.Manager. It includes the Department class with a Manager property and constructor. Client code demonstrates usage by calling john.GetManager(). Required dependencies are standard C# classes. Inputs are Person instances linked to Department instances; output is the manager Person instance. The delegation pattern leads to multiple simple forwarding methods, which can complicate the Person class.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/remove-middle-man.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Person\n{\n  private Department department;\n\n  public Person GetManager()\n  {\n    return department.Manager;\n  }\n}\n\npublic class Department\n{\n  private string chargeCode;\n\n  public Person Manager\n  {\n    get;\n  }\n\n  public Department(Person manager)\n  {\n    this.Manager = manager;\n  }\n\n  //…\n}\n\n// Somewhere in client code\nmanager = john.GetManager();\n```\n\n----------------------------------------\n\nTITLE: Defining Customer Class in PHP\nDESCRIPTION: Defines an empty Customer class to serve as a replacement for the string representation of a customer in the Order class. This snippet introduces the new class that will encapsulate customer data and related methods.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/replace-data-value-with-object.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nclass Customer {\n}\n```\n\n----------------------------------------\n\nTITLE: Consolidating Vacation Eligibility Checks (Intermediate) - Java\nDESCRIPTION: This step shows the 'vacationAmount' method after combining the nested 'if' statements into a single 'if-else' structure using the logical AND ('&&') operator. This simplifies the control flow.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/consolidate-conditional-expression.md#_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nif (onVacation() && lengthOfService() > 10) {\n      return 1;\n    }\n    else {\n      return 0.5;\n    }\n```\n\n----------------------------------------\n\nTITLE: Initial Extracted printDetails Method (Error) PHP\nDESCRIPTION: This is the initial version of the extracted 'printDetails' method. It copies the original code but fails because the local variable '$outstanding' is not defined within this new scope, leading to an error when executed.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/extract-method.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\nfunction printDetails() {\n  print(\"name: \" . $this->name);\n  print(\"amount: \" . $outstanding);\n}\n```\n\n----------------------------------------\n\nTITLE: Initial Implementation with Setter in PHP\nDESCRIPTION: A simple Account class with an ID field that uses a setter method, which allows the ID to be changed after object creation.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/remove-setting-method.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nclass Account {\n  // ...\n  private $id;\n\n  public function __construct($id) {\n    $this->setId($id);\n  }\n  public function setId($id) {\n    $this->id = $id;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Hide Delegate Refactoring in Java\nDESCRIPTION: Demonstrates the 'Hide Delegate' pattern applied. The `Person` class now includes a `getManager()` method that delegates the call to the internal `department` object's `getManager()` method. The client code is simplified to `manager = john.getManager();`, reducing coupling as direct access to the `Department` object is no longer required for this operation. The original `getDepartment()` method might be removed if no longer needed by clients.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/hide-delegate.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nclass Person {\n  private Department department;\n\n  public void setDepartment(Department arg) {\n    department = arg;\n  }\n  public Person getManager() {\n    return department.getManager();\n  }\n}\n\nclass Department {\n  private String chargeCode;\n  private Person manager;\n\n  public Department(Person manager) {\n    this.manager = manager;\n  }\n  public Person getManager() {\n    return manager;\n  }\n\n  //…\n}\n\n// Somewhere in client code\nmanager = john.getManager();\n```\n\n----------------------------------------\n\nTITLE: Modifying Method Parameters in OverdraftCharge Method\nDESCRIPTION: Changes the parameter of the OverdraftCharge method to accept an Account object instead of just the daysOverdrawn value, allowing access to all Account properties and methods.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/move-method.md#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nAccount account\n```\n\n----------------------------------------\n\nTITLE: Adding XML Documentation for Exception in C#\nDESCRIPTION: Shows adding an XML documentation comment (`<exception>`) to the `Withdraw` method signature. This documents that the method can throw a `BalanceException` and under what condition (when amount > balance), improving code clarity and enabling tools like IntelliSense.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/replace-error-code-with-exception.md#_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n///<exception cref=\"BalanceException\">Thrown when amount > balance</exception>\n```\n\n----------------------------------------\n\nTITLE: Inlined Class Structure - C#\nDESCRIPTION: This code snippet shows the Person class after the TelephoneNumber class has been inlined. The AreaCode and Number properties, which were originally part of the TelephoneNumber class, are now directly part of the Person class. The GetTelephoneNumber method is also moved to the Person class.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/inline-class.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic class Person\n{\n  public string Name\n  {\n    get;\n  }\n  public string AreaCode\n  {\n    get;\n    set;\n  }\n  public string Number\n  {\n    get;\n    set;\n  }\n\n  public string GetTelephoneNumber()\n  {\n    return \"(\" + AreaCode + \") \" + Number;\n  }\n}\n\n\n// Somewhere in client code\nPerson martin = new Person();\nmartin.AreaCode = \"781\";\n```\n\n----------------------------------------\n\nTITLE: Corrected Extracted getOutstanding Method (with Return) PHP\nDESCRIPTION: This is the corrected version of the 'getOutstanding' method. It adds a 'return $outstanding;' statement at the end, making the final calculated value of '$outstanding' available to the calling code.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/extract-method.md#_snippet_11\n\nLANGUAGE: PHP\nCODE:\n```\nfunction getOutstanding() {\n  $e = $this->orders->elements();\n  $outstanding = 0;\n  while ($e->hasMoreElements()) {\n    $each = $e->nextElement();\n    $outstanding += $each->getAmount();\n  }\n\n  return $outstanding;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the New TelephoneNumber Class (Java)\nDESCRIPTION: Creates an empty `TelephoneNumber` class, which will eventually hold the phone number related fields and methods extracted from the `Person` class.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/extract-class.md#_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nclass TelephoneNumber {\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Fields for Variables and Parameters in Gamma Class (Java)\nDESCRIPTION: Declares private integer fields within the `Gamma` class corresponding to both the local variables (`importantValue1`, `importantValue2`, `importantValue3`) and the parameters (`inputVal`, `quantity`, `yearToDate`) of the original method being refactored. These fields will hold the state required for the computation.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/replace-method-with-method-object.md#_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n  private int importantValue1;\n  private int importantValue2;\n  private int importantValue3;\n  private int inputVal;\n  private int quantity;\n  private int yearToDate;\n```\n\n----------------------------------------\n\nTITLE: Adding Getter for Delegate Object in PHP\nDESCRIPTION: Illustrates adding the `getDepartment()` getter method to the `Person` class. This step is crucial in the 'Remove Middle Man' refactoring to provide clients direct access to the delegate (`Department`) object.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/remove-middle-man.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n\n  public function getDepartment() {\n    return $this->department;\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Assigning Discount Factor in GetPrice Method - C#\nDESCRIPTION: This C# snippet conditionally sets a variable discountFactor inside the GetPrice method based on whether the result of BasePrice() is greater than 1000. If the condition is met, discountFactor is set to 0.95; otherwise, it is set to 0.98. The code requires that the method BasePrice() returns a numeric value and assumes discountFactor is locally defined. Inputs are the return value from BasePrice(), and output is the assignment to discountFactor. All logic is performed inline within the method, which may make the code harder to maintain or extract.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/replace-temp-with-query.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nif (BasePrice() > 1000)\n{\n  discountFactor = 0.95;\n}\nelse\n{\n  discountFactor = 0.98;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Refactored SchedulePayment Method Using External GetNearFirstDate Method\nDESCRIPTION: Modified SchedulePayment to delegate date calculation to the external static method GetNearFirstDate, simplifying its logic. The method is called with previousDate as parameter, enhancing modularity.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/introduce-foreign-method.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic class Account\n{\n  // ...\n  private double SchedulePayment()\n  {\n    DateTime paymentDate = previousDate.GetNearFirstDate();\n\n    // Issue a payment using paymentDate.\n    // ...\n  }\n}\n\npublic static class TypeExtensions\n{\n  public static DateTime GetNearFirstDate(this DateTime date)\n  {\n    if (date.Day == 1)\n      return date;\n\n    DateTime nextDate = date.AddMonths(1);\n    \n    return new DateTime(nextDate.Year, nextDate.Month, 1);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Private Fields in Gamma Class Using PHP\nDESCRIPTION: Adds private fields to the Gamma class to store the source Account object and variables originally local to the method being refactored. This step sets up the internal state of the class by migrating data from method parameters and local variables into class properties for encapsulation.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/replace-method-with-method-object.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n\n  private $account; // Account\n  private $importantValue1;\n  private $importantValue2;\n  private $importantValue3;\n  private $inputVal;\n  private $quantity;\n  private $yearToDate;\n```\n\n----------------------------------------\n\nTITLE: Person Class GetTelephoneNumber Method\nDESCRIPTION: The getTelephoneNumber method is being moved from the TelephoneNumber class to the Person class. This method returns the formatted phone number string. After moving the fields areaCode and number to the Person class, this method creates and returns the correctly formatted phone number.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/inline-class.md#_snippet_11\n\nLANGUAGE: java\nCODE:\n```\n    return (\"(\" + areaCode + \") \" + number);\n```\n\n----------------------------------------\n\nTITLE: Encapsulating Employee Type Field in Java\nDESCRIPTION: Introduces getter method for the Employee 'type' field to encapsulate direct access. This snippet adds a public 'getType()' method returning the private 'type' field and initiates the concept of managing employee types through controlled access. The dependency is the existing private integer 'type' field, and the output is a means to access this field safely.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/replace-type-code-with-subclasses.md#_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\n  public int getType() {\n    return type;\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Replacing Male Instantiation with Parent (Java)\nDESCRIPTION: Replaces direct calls to the `Male` subclass constructor (`new Male()`) in client code with a call to the new `Person` constructor (`new Person(true, 'M')`). This step is possible after removing the `abstract` modifier from `Person` and prepares for removing the `Male` subclass. Requires the `Person` class and its constructor.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/replace-subclass-with-fields.md#_snippet_9\n\nLANGUAGE: Java\nCODE:\n```\nnew Person(true, 'M')\n```\n\n----------------------------------------\n\nTITLE: Code Initialization in Employee Constructor\nDESCRIPTION: This snippet shows the initialization of the `$name` and `$id` properties within the protected constructor of the `Employee` class. It moves the lines assigning values to `$this->name` and `$this->id` into the `Employee` constructor.  This is a critical step in refactoring because it centralizes the shared initialization code, aligning with the goal of pulling up the constructor's body and reducing duplication.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/pull-up-constructor-body.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n    $this->name = $name;\n    $this->id = $id;\n```\n\n----------------------------------------\n\nTITLE: Employee: Add Default PayAmount - C#\nDESCRIPTION: This snippet defines a default implementation for the PayAmount method in the Employee base class.  The PayAmount is set to return the MonthlySalary. Making it virtual allows subclasses to override the logic.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/replace-type-code-with-subclasses.md#_snippet_13\n\nLANGUAGE: C#\nCODE:\n```\n    return MonthlySalary;\n\n```\n\n----------------------------------------\n\nTITLE: Delegating TelephoneNumber Methods in Person Class Using PHP\nDESCRIPTION: This snippet declares in the Person class all the visible methods of the TelephoneNumber class by adding delegating methods. Each method in Person delegates calls to the corresponding method of the TelephoneNumber instance. This is the first step in inlining the class, facilitating a smooth transition by maintaining existing behavior while redirecting functionality.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/inline-class.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n  public function getAreaCode() {\n    return $this->officeTelephone->getAreaCode();\n  }\n  public function setAreaCode($arg) {\n    $this->officeTelephone->setAreaCode($arg);\n  }\n  public function getNumber() {\n    return $this->officeTelephone->getNumber();\n  }\n  public function setNumber($arg) {\n    $this->officeTelephone->setNumber($arg);\n  }\n```\n\n----------------------------------------\n\nTITLE: Moving getTelephoneNumber Method Body into Person Class Using PHP\nDESCRIPTION: This snippet moves the getTelephoneNumber method body from TelephoneNumber into Person. It returns a formatted phone number string combining areaCode and number fields. Moving this last getter completes the transfer of TelephoneNumber's interface to Person prior to removing TelephoneNumber.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/inline-class.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n    return (\"(\" . $this->areaCode . \") \" . $this->number);\n```\n\n----------------------------------------\n\nTITLE: Detecting Duplicate Conditional Fragments in C#\nDESCRIPTION: This snippet shows the initial implementation of the SendEmailPromotion method, which contains duplicated calls to ValidateEmailAddress and SendEmail within both branches of an if-else statement. The function calculates a total based on a special deal condition and then validates the email address and sends an email in both cases. No external dependencies are explicitly required, but the sample assumes price, total, and the methods ValidateEmailAddress, SendEmail, and IsSpecialDeal are defined in the containing scope. The main issue demonstrated is code repetition, which the following refactoring addresses. Inputs: current state of price, output: possibly updated total and sent email.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/consolidate-duplicate-conditional-fragments.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\ndouble SendEmailPromotion()\n{\n  // ...\n  if (IsSpecialDeal()) {\n    total = price * 0.95;\n    ValidateEmailAddress();\n    SendEmail();\n  }\n  else {\n    ValidateEmailAddress();\n    total = price * 0.98;\n    SendEmail();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Parameters to Employee Constructor\nDESCRIPTION: This snippet extends the protected constructor of the `Employee` class by adding the `$name` and `$id` parameters. This enables the constructor to receive and initialize the employee's name and ID. These parameters represent the data being passed to the constructor for the purpose of initializing class members, allowing the constructor to handle the common setup logic.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/pull-up-constructor-body.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n$name, $id\n```\n\n----------------------------------------\n\nTITLE: Splitting the View() methods into component properties in C#\nDESCRIPTION: The methods generating parts of the article content are refactored into private properties, improving readability and facilitating reuse within the format-specific View methods in subclasses.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/form-template-method.md#_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nprivate string Title\n{\n  get{ return \"# \" + article.Title + Environment.NewLine + Environment.NewLine; }\n}\nprivate string Intro\n{\n  get{ return \"> \" + article.Intro + Environment.NewLine + Environment.NewLine; }\n}\nprivate string Body\n{\n  get{ return article.Body + Environment.NewLine + Environment.NewLine; }\n}\nprivate string Footer\n{\n  get{ return \"_Written by \" + article.Author + \" on \" + article.Date + \"_\";\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FindAppointments by Date in Calendar Class - C#\nDESCRIPTION: Implements the initial Calendar class with a FindAppointments method that returns a list of appointments for a specified date. The method iterates over a collection of Appointments (accessed through kent.GetCourses()), compares their date properties, and returns a list of matches. Dependencies include the Appointment class, a properly initialized appointments list, and an accessible kent object. The expected input is a DateTime value; the output is a list of Appointment objects occurring on that date. The method is limited to filtering by date only.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/add-parameter.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nclass Calendar\n{\n  // ...\n  private List<Appointment> appointments;\n\n  public List<Appointment> FindAppointments(DateTime date)\n  {\n    List<Appointment> result = new List<Appointment>();\n\n    foreach (Appointment item in kent.GetCourses())\n    {\n      if (date.Date == item.Date.Date)\n      {\n        result.Add(date);\n      }\n    }\n\n    return result;\n  }\n}\n\n// Somewhere in client code\nDateTime today = DateTime.Now;\nappointments = calendar.FindAppointments(today);\n```\n\n----------------------------------------\n\nTITLE: Implementing Factory Method in Superclass (PHP)\nDESCRIPTION: This snippet demonstrates the refactored code. It introduces a `Person` class with static factory methods `createMale()` and `createFemale()` that return instances of `Person` with specified states. The constructor is protected and initializes the `isMale` and `code` fields. The `isMale()` and `getCode()` methods are then implemented to return the values of the fields. The client code now uses these factory methods.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/replace-subclass-with-fields.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n```\nclass Person {\n  static function createMale() {\n    return new Person(true, 'M');\n  }\n  static function createFemale() {\n    return new Person(false, 'F');\n  }\n  protected function __construct($isMale, $code) {\n    $this->isMale = $isMale;\n    $this->code = $code;\n  }\n\n  private $isMale;\n  private $code;\n\n  function isMale() {\n    return $this->isMale;\n  }\n  function getCode() {\n    return $this->code;\n  }\n}\n\n// Client code\n$kent = Person::createMale();\nprint(\"Person's gender is: \" . $kent->getCode());\n```\n```\n\n----------------------------------------\n\nTITLE: Defining a Wrapper Class for DateTime in C#\nDESCRIPTION: Declares a new public class MfDateTimeWrap to serve as a local extension for the DateTime structure. This class provides a foundation for adding additional properties, methods, or overridden functionality to DateTime instances. No dependencies are required except for access to the System namespace for DateTime. The initial declaration is empty and acts as a template for further extension.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/introduce-local-extension.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n\n\n// Local extension class.\npublic class MfDateTimeWrap\n{\n}\n\n```\n\n----------------------------------------\n\nTITLE: Refactored PHP Order Class Utilizing Static Customer Instances\nDESCRIPTION: This code refactors the 'Order' class to use the static 'Customer::getNamed' method instead of creating new 'Customer' instances within the 'Order' constructor or setter. This approach centralizes customer object management, reduces redundant instantiations, and facilitates singleton-like access. Dependencies include calling 'Customer::loadCustomers()' at startup to initialize customer instances. This pattern enhances control over shared references, simplifies order processing, and aligns with object reference management best practices.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/change-value-to-reference.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nclass Order {\n  //…\n  private $customer; // Customer\n  public function getCustomerName() {\n      return $this->customer->getName();\n  }\n  public function setCustomer($customerName) {\n    $this->customer = Customer::getNamed($customerName);\n  }\n  public function __construct($customerName) {\n    $this->customer = Customer::getNamed($customerName);\n  }\n}\n\n// Some client code, which uses Order class.\nprivate static function numberOfOrdersFor($orders, $customer) {\n  $result = 0;\n  foreach ($orders as $order) {\n    if ($order->getCustomerName() === $customer) {\n      $result++;\n    }\n  }\n  return $result;\n}\n```\n\n----------------------------------------\n\nTITLE: Initial Collection Access Pattern in Java\nDESCRIPTION: This code demonstrates the initial state where a `Person` class directly exposes its `courses` collection via getter and setter methods. Client code can directly modify the collection, leading to potential issues with data integrity and encapsulation. Assert statements highlight direct modification of the collection.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/encapsulate-collection.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nclass Course {\n  public Course(String name, boolean isAdvanced) {\n    // ...\n  }\n  public boolean isAdvanced() {\n    // ...\n  }\n}\n\nclass Person {\n  private Set courses;\n\n  public Set getCourses() {\n    return courses;\n  }\n  public void setCourses(Set arg) {\n    courses = arg;\n  }\n}\n\n// Client code\nPerson kent = new Person();\nSet s = new HashSet();\ns.add(new Course(\"Smalltalk Programming\", false));\ns.add(new Course(\"Appreciating Single Malts\", true));\nkent.setCourses(s);\nAssert.equals(2, kent.getCourses().size());\nCourse refact = new Course(\"Refactoring\", true);\nkent.getCourses().add(refact);\nkent.getCourses().add(new Course(\"Brutal Sarcasm\", false));\nAssert.equals(4, kent.getCourses().size());\nkent.getCourses().remove(refact);\nAssert.equals(3, kent.getCourses().size());\n\nIterator iter = kent.getCourses().iterator();\nint count = 0;\nwhile (iter.hasNext()) {\n  Course each = (Course) iter.next();\n  if (each.isAdvanced()) {\n    count++;\n  }\n}\nSystem.out.print(\"Advanced courses: \" + count);\n```\n\n----------------------------------------\n\nTITLE: Refactored Order Class in C#\nDESCRIPTION: This code demonstrates the `Order` class after the refactoring to use a `Customer` object.  The `customer` field is now of type `Customer`.  The `CustomerName` property accesses the `Name` property of the `Customer` object. The constructor takes a customer name and instantiates a `Customer` object. The client code, `NumberOfOrdersFor`, is also updated to use the `CustomerName` property. This refactoring encapsulates customer details within the `Customer` class.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/replace-data-value-with-object.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic class Order\n{\n  // ...\n  private Customer customer;\n\n  public string CustomerName\n  {\n    get { return customer.Name; }\n    set { customer.Name = value; }\n  }\n\n  public Order(string customerName)\n  {\n    this.customer = new Customer(customerName);\n  }\n}\n\npublic class Customer\n{\n  public string Name\n  {\n    get;\n    set;\n  }\n\n  public Customer(string name)\n  {\n    this.Name = name;\n  }\n}\n//…\n// Client code, which uses Order class.\nprivate static int NumberOfOrdersFor(List<Order> orders, string customer)\n{\n  int result = 0;\n\n  if (orders != null)\n  {\n    foreach (Order order in orders)\n    {\n      if (string.Equals(order.CustomerName, customer))\n      {\n        result++;\n      }\n    }\n  }\n\n  return result;\n}\n```\n\n----------------------------------------\n\nTITLE: Refactored PHP Classes Using Delegation\nDESCRIPTION: This code refactors the previous inheritance structure by removing inheritance from Car and instead adding a composition relationship through an engine property. The Car class now contains an Engine object, initialized in the constructor, and accesses engine methods via delegation. The inheritance declaration is removed, promoting composition over inheritance.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/replace-inheritance-with-delegation.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nclass Engine {\n  //…\n  private $fuel;\n  private $CV;\n\n  public function getFuel() {\n    return $this->fuel;\n  }\n  public function setFuel($fuel) {\n    $this->fuel = $fuel;\n  }\n  public function getCV() {\n    return $this->CV;\n  }\n  public function setCV($cv) {\n    $this->CV = $cv;\n  }\n}\n\nclass Car {\n  // ...\n  private $brand;\n  private $model;\n  protected $engine;\n\n  public function __construct() {\n    $this->engine = new Engine();\n  }\n  public function getName() {\n    return $this->brand . ' ' . $this->model . ' (' . $this->engine->getCV() . 'CV)';\n  }\n  public function getModel() {\n    return $this->model;\n  }\n  public function setModel($model) {\n    $this->model = $model;\n  }\n  public function getBrand() {\n    return $this->brand;\n  }\n  public function setBrand($brand) {\n    $this->brand = $brand;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Null Checks in Customer Code (PHP)\nDESCRIPTION: This code demonstrates how to eliminate null checks after applying the null object pattern. It retrieves the number of weeks delinquent in the last year for a customer. The original code used an `if` statement to check if the customer was null before attempting to retrieve the payment history and then get the weeks delinquent. The replacement snippet directly calls the method `getWeeksDelinquentInLastYear()` of the customer's payment history object. The new code is more concise and readable as a consequence of the previous modification.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/introduce-null-object.md#_snippet_16\n\nLANGUAGE: PHP\nCODE:\n```\nif ($customer->isNull()) {\n  $weeksDelinquent = 0;\n}\nelse {\n  $weeksDelinquent = $customer->getHistory()->getWeeksDelinquentInLastYear();\n}\n```\n\n----------------------------------------\n\nTITLE: Encapsulating Advanced Course Count with a Property\nDESCRIPTION: Defines a public read-only property `NumberOfAdvancedCourses` within the `Person` class (implied). This C# property encapsulates the logic for counting advanced courses by iterating through the internal `courses` collection, replacing the external loop.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/encapsulate-collection.md#_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\npublic int NumberOfAdvancedCourses\n{\n  get{\n    int count = 0;\n    foreach (Course c in courses)\n    {\n      if (c.IsAdvanced)\n        count++;\n    }\n    return count;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Refactored Class Definition in PHP\nDESCRIPTION: Demonstrates the refactored `Person` class after the `TelephoneNumber` class has been inlined. The `Person` class now directly contains the `areaCode` and `number` fields, and relevant methods from the original `TelephoneNumber` class have been moved to `Person`. This eliminates the need for the `TelephoneNumber` class. No external dependencies beyond PHP are needed.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/inline-class.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nclass Person {\n  private $name;\n  private $areaCode;\n  private $number;\n  \n  public function getName() {\n    return $this->name;\n  }\n  public function getTelephoneNumber() {\n    return (\"(\" . $this->areaCode . \") \" . $this->number);\n  }\n  public function getAreaCode() {\n    return $this->areaCode;\n  }\n  public function setAreaCode($arg) {\n    $this->areaCode = $arg;\n  }\n  public function getNumber() {\n    return $this->number;\n  }\n  public function setNumber($arg) {\n    $this->number = $arg;\n  }\n}\n\n\n// Somewhere in client code\n$martin = new Person();\n$martin->setAreaCode(\"781\");\n```\n\n----------------------------------------\n\nTITLE: Delegating Article View Rendering via ArticleView Java Class\nDESCRIPTION: Shows replacing the original Article class methods markdownView and htmlView to delegate rendering to the new ArticleView class instance methods of the same name. This decouples rendering logic from Article by forwarding calls to an external ArticleView object initialized with the current Article. The input remains the original Article instance; output is the generated formatted string. This refactoring step prepares for further separation by moving rendering responsibility out of Article.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/form-template-method.md#_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\nreturn new ArticleView(this).markdownView();\n```\n\nLANGUAGE: Java\nCODE:\n```\nreturn new ArticleView(this).htmlView();\n```\n\n----------------------------------------\n\nTITLE: Moving Getter and Setter Methods from TelephoneNumber into Person Class Using PHP\nDESCRIPTION: This series of snippets shows the stepwise relocation of getter and setter method bodies for areaCode and number from TelephoneNumber into Person. After copying method bodies, the original methods in TelephoneNumber are removed. This transfers behavior and encapsulation from TelephoneNumber into Person, enabling elimination of TelephoneNumber.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/inline-class.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n    return $this->areaCode;\n```\n\nLANGUAGE: PHP\nCODE:\n```\n    $this->areaCode = $arg;\n```\n\nLANGUAGE: PHP\nCODE:\n```\n    return $this->number;\n```\n\nLANGUAGE: PHP\nCODE:\n```\n    $this->number = $arg;\n```\n\n----------------------------------------\n\nTITLE: Initializing Course List - Java\nDESCRIPTION: This snippet initializes the `courses` field within the `Person` class with a `new List<Course>()`. This ensures that the `courses` field is initialized to an empty list, avoiding potential NullPointerExceptions and setting up the list to contain Course objects.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/encapsulate-collection.md#_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\n = new List<Course>()\n```\n\n----------------------------------------\n\nTITLE: Order Collection Modification in addOrder Method - Java\nDESCRIPTION: Directly adds an Order object to the customer's collection, replacing previous bidirectional setter logic. Assumes an 'orders' collection is present in the Customer class. Input parameter is the order to add; output or side effect is updating the collection. No dependencies beyond a collection field for orders.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/change-bidirectional-association-to-unidirectional.md#_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\norders.add(arg);\n```\n\n----------------------------------------\n\nTITLE: Refactoring Car to Delegate to an Engine Instance Instead of Using Inheritance in C#\nDESCRIPTION: This snippet shows the refactored version of the Car class where it no longer inherits from Engine but instead holds an instance of Engine in a protected field named engine. The Car's Name property accesses CV through the engine field. The constructor initializes the engine field with a new Engine object. This approach replaces inheritance with delegation, allowing Car to utilize Engine's functionality through composition rather than inheritance.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/replace-inheritance-with-delegation.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Engine\n{\n  //…\n  public double Fuel\n  { get; set; }\n  public double CV\n  { get; set; }\n}\n\npublic class Car\n{\n  // ...\n  protected Engine engine;\n\n  public string Brand\n  { get; set; }\n  public string Model\n  { get; set; }\n  public string Name\n  {\n    get{ return Brand + \" \" + Model + \" (\" + engine.CV + \"CV)\"; }\n  }\n\n  public Car()\n  {\n    this.engine = new Engine();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Account Flow with Date Parameters in PHP (Before Refactoring)\nDESCRIPTION: This PHP snippet shows an `Account` class with a `getFlowBetween` method that calculates the sum of transaction values between a specified start and end date. The method takes two `DateTime` parameters directly. It depends on a `Transaction` class which stores individual transaction details.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/introduce-parameter-object.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass Account {\n  // ...\n  private $transactions = array();\n\n  public function getFlowBetween(DateTime $start, DateTime $end) {\n    $result = 0;\n    foreach ($this->transactions as $transaction) {\n      if ($transaction->getDate() >= $start && $transaction->getDate() <= $end) {\n        $result += $transaction->getValue();\n      }\n    }\n    return $result;\n  }\n}\n\nclass Transaction {\n  private $chargeDate; // DateTime\n  private $value;\n\n  public function __construct($value, DateTime $chargeDate) {\n    $this->value = $value;\n    $this->chargeDate = $chargeDate;\n  }\n  public function getDate() {\n    return $this->chargeDate;\n  }\n  public function getValue() {\n    return $this->value;\n  }\n}\n\n// Somewhere in client code…\n$flow = $account->getFlowBetween($startDate, $endDate);\n```\n\n----------------------------------------\n\nTITLE: Refactoring Person constructors to accept BloodGroup\nDESCRIPTION: This snippet updates Person constructors and setter methods to accept BloodGroup objects directly, moving away from integer codes and promoting object-oriented design.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/replace-type-code-with-class.md#_snippet_10\n\nLANGUAGE: Java\nCODE:\n```\n  public Person(BloodGroup bloodGroup) {\n    this.bloodGroup = bloodGroup;\n  }\n  public void setBloodGroup(BloodGroup bloodGroup) {\n    this.bloodGroup = bloodGroup;\n  }\n```\n\n----------------------------------------\n\nTITLE: Applying Discounts Using a Parameter-Driven Method in C#\nDESCRIPTION: This code snippet defines the Order class with a single ApplyDiscount method that applies either a fixed or percentage discount based on an integer type parameter. It uses constants to represent the discount types and a switch statement to differentiate behavior. Client code calls this method supplying the discount type and amount. Dependencies include standard .NET exception handling for invalid types. Inputs are the discount type and value, while output is the adjusted Price property. A limitation is the coupling of multiple behaviors into a single method, complicating maintainability.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/replace-parameter-with-explicit-methods.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Order\n{\n  // ...\n  public const int FIXED_DISCOUNT = 0,\n                   PERCENT_DISCOUNT = 1;\n\n  public void ApplyDiscount(int type, double discount)\n  {\n    switch (type)\n    {\n      case FIXED_DISCOUNT:\n        Price -= discount;\n        break;\n      case PERCENT_DISCOUNT:\n        Price *= discount;\n        break;\n      default:\n        throw new Exception(\"Invalid discount type\");\n    }\n  }\n}\n\n// Somewhere in client code\nif (weekend)\n{\n  order.ApplyDiscount(Order.FIXED_DISCOUNT, 10);\n}\nif (order.Items.Count > 5)\n{\n  order.ApplyDiscount(Order.PERCENT_DISCOUNT, 0.2);\n}\n```\n\n----------------------------------------\n\nTITLE: Refactored Immutable Customer Value Object (Java)\nDESCRIPTION: This snippet demonstrates the `Customer` class after applying the 'Change Reference to Value' refactoring. The class is now immutable (no setters, fields initialized in the constructor), implements `equals` and `hashCode` for value-based comparison, and uses a public constructor instead of a factory method. This transforms it into a value object.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/change-reference-to-value.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nclass Customer {\n  private final String name;\n  private Date birthDate;\n\n  @Override public boolean equals(Object arg) {\n    if (!(arg instanceof Customer)) {\n      return false;\n    }\n    Customer other = (Customer) arg;\n    return (name.equals(other.name) &&\n        birthDate.compareTo(other.birthDate) == 0);\n  }\n  @Override public int hashCode() {\n    return name.hashCode();\n  }\n  public String getName() {\n    return name;\n  }\n  public Date getBirthDate() {\n    return birthDate;\n  }\n  public Customer(String name, Date birthDate) {\n    this.name = name;\n    this.birthDate = birthDate;\n  }\n}\n\n// Somewhere in client code\nCustomer john = new Customer(\"John Smith\", new Date(1985, 1, 1));\n```\n\n----------------------------------------\n\nTITLE: Refactored Person and BloodGroup Classes - C#\nDESCRIPTION: This snippet showcases the refactored code where the integer blood group code is replaced by a BloodGroup class. The Person class now holds a BloodGroup object. The BloodGroup class provides static properties to access different blood group instances. The BloodGroup constructor is private to ensure controlled instantiation.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/replace-type-code-with-class.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Person\n{\n  private BloodGroup bloodGroup;\n\n  public BloodGroup BloodGroup\n  {\n    get{ return bloodGroup; }\n    set{ bloodGroup = value; }\n  }\n\n  public Person(BloodGroup bloodGroup)\n  {\n    this.bloodGroup = bloodGroup;\n  }\n}\n\npublic class BloodGroup\n{\n  private int code;\n\n  public int Code\n  {\n    get{ return code; }\n  }\n  public static BloodGroup O\n  {\n    get{ return new BloodGroup(0); }\n  }\n  public static BloodGroup A\n  {\n    get{ return new BloodGroup(1); }\n  }\n  public static BloodGroup B\n  {\n    get{ return new BloodGroup(2); }\n  }\n  public static BloodGroup AB\n  {\n    get{ return new BloodGroup(3); }\n  }\n\n  private BloodGroup(int code)\n  {\n    this.code = code;\n  }\n}\n\n// Somewhere in client code.\nPerson parent = new Person(BloodGroup.O);\nif (parent.BloodGroup == BloodGroup.AB)\n{\n  // ...\n}\nchild.BloodGroup = parent.BloodGroup;\n```\n\n----------------------------------------\n\nTITLE: Refactoring Discount Calculation to Avoid Parameter Assignment in PHP\nDESCRIPTION: This PHP function refactors the discount calculation by introducing a local variable $result initialized with the parameter value $inputVal. All modifications are made to this local variable rather than the parameter, preserving the original parameter's value. The method processes the same conditions against $result and returns it. This improves code readability and avoids potential side effects from modifying input parameters directly.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/remove-assignments-to-parameters.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\npublic function discount($inputVal, $quantity, $yearToDate) {\n  $result = $inputVal;\n  if ($inputVal > 50) {\n    $result -= 2;\n  }\n  if ($quantity > 100) {\n    $result -= 1;\n  }\n  if ($yearToDate > 10000) {\n    $result -= 4;\n  }\n  return $result;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Value Object Customer in C#\nDESCRIPTION: This snippet defines a Customer class as a value object with a public constructor that allows creating new instances freely. The Order class contains a private Customer field initialized in the constructor by creating a new Customer based on a customer name string. The client code counts orders for a specified customer name by comparing strings. Key aspects include mutable Customer objects and independent instances across Orders, which may lead to duplicated Customer objects with the same name.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/change-value-to-reference.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Customer\n{\n  public string Name\n  {\n    get;\n    set;\n  }\n\n  public Customer(string name)\n  {\n    this.Name = name;\n  }\n}\n\npublic class Order\n{\n  // ...\n  private Customer customer;\n\n  public string CustomerName\n  {\n    get { return customer.Name; }\n    set { customer.Name = value; }\n  }\n\n  public Order(string customerName)\n  {\n    this.customer = new Customer(customerName);\n  }\n}\n//…\n// Client code, which uses Order class.\nprivate static int NumberOfOrdersFor(List<Order> orders, string customer)\n{\n  int result = 0;\n\n  if (orders != null)\n  {\n    foreach (Order order in orders)\n    {\n      if (string.Equals(order.CustomerName, customer))\n      {\n        result++;\n      }\n    }\n  }\n\n  return result;\n}\n```\n\n----------------------------------------\n\nTITLE: Newly Created Method - C#\nDESCRIPTION: This code shows the newly created method 'GetOfficeTelephoneNumber', which duplicates the original implementation from 'GetTelephoneNumber'. This is an intermediate step to ensure continued functionality during refactoring.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/rename-method.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\npublic string GetOfficeTelephoneNumber()\n{\n  return \"(\" + OfficeAreaCode + \") \" + OfficeNumber;\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Security with Control Flag - C#\nDESCRIPTION: This function iterates through an array of people's names to check for specific suspicious individuals ('Don', 'John'). It uses a boolean flag 'found' to ensure that the SendAlert() function is called only once, even if multiple suspicious names exist. However, the loop continues iterating through the rest of the array after a match is found, which is inefficient.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/remove-control-flag.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nvoid CheckSecurity(string[] people)\n{\n  bool found = false;\n  for (int i = 0; i < people.Length; i++)\n  {\n    if (!found)\n    {\n      if (people[i].Equals(\"Don\")) {\n        SendAlert();\n        found = true;\n      }\n      if (people[i].Equals(\"John\")) {\n        SendAlert();\n        found = true;\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initial Person Class with Type Code - C#\nDESCRIPTION: This snippet shows the initial implementation of the Person class using integer constants to represent blood groups. It includes constants for O, A, B, and AB blood types. The BloodGroupCode property gets and sets the blood group using an integer.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/replace-type-code-with-class.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Person\n{\n  public const int O = 0,\n                   A = 1,\n                   B = 2,\n                   AB = 3;\n\n  private int bloodGroupCode;\n\n  public int BloodGroupCode\n  {\n    get{ return bloodGroupCode; }\n    set{ bloodGroupCode = value; }\n  }\n\n  public Person(int code)\n  {\n    this.bloodGroupCode = code;\n  }\n}\n\n// Somewhere in client code.\nPerson parent = new Person(Person.O);\nif (parent.BloodGroupCode == Person.AB)\n{\n  // ...\n}\nchild.BloodGroupCode = parent.BloodGroupCode;\n```\n\n----------------------------------------\n\nTITLE: Finding Appointments by Date and Name - PHP (Refactored)\nDESCRIPTION: This snippet presents the refactored `Calendar` class. The original `findAppointment` method has been updated. A new method, `findAppointmentByDateAndName`, is introduced which allows filtering appointments by both date and an optional name. It also shows updated client code calling the new method with `null` for the name parameter.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/add-parameter.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nclass Calendar {\n  // ...\n  private $appointments; // array\n  public function findAppointmentByDateAndName(DateTime $date, $name) {\n    $result = array();\n    foreach ($this->appointments as $each) {\n      if ($date->format('Y-m-d') == $each->date->format('Y-m-d')) {\n        if ($name == null || ($name != null && $name == $each->name)) {\n          $result[] = $date;\n        }\n      }\n    }\n    return $result;\n  }\n}\n\n// Somewhere in client code\n$today = new DateTime();\n$appointments = $calendar->findAppointmentByDateAndName($today, null);\n```\n\n----------------------------------------\n\nTITLE: Original `overdraftCharge` Method - Java\nDESCRIPTION: This Java code snippet demonstrates the original implementation of the `overdraftCharge` and `bankCharge` methods within the `Account` class. The `overdraftCharge` method calculates the overdraft charge based on the account type (premium or standard) and the number of days overdrawn.  The `bankCharge` method calls the `overdraftCharge` method. It depends on `AccountType` and its state determined by the `type` and `daysOverdrawn` instance variables.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/move-method.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nclass Account {\n  // ...\n  private AccountType type;\n  private int daysOverdrawn;\n\n  public double overdraftCharge() {\n    if (type.isPremium()) {\n      double result = 10;\n      if (daysOverdrawn > 7) {\n        result += (daysOverdrawn - 7) * 0.85;\n      }\n      return result;\n    }\n    else {\n      return daysOverdrawn * 1.75;\n    }\n  }\n  public double bankCharge() {\n    double result = 4.5;\n    if (daysOverdrawn > 0) {\n      result += overdraftCharge();\n    }\n    return result;\n  }\n}\n\nclass AccountType {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing LaborItem Constructor Using Base Constructor in C#\nDESCRIPTION: This snippet provides an explicit constructor for LaborItem, forwarding all parameters to the base JobItem constructor. Although this matches the parent signature, not all parameters are relevant for LaborItem. Required parameters include quantity, unitPrice, isLabor (should be true for LaborItem), and an Employee instance. The code may later be refactored for more appropriate arguments.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/extract-subclass.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\npublic LaborItem(int quantity, int unitPrice, bool isLabor, Employee employee)\n    : base(quantity, unitPrice, isLabor, employee)\n  {\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Defining isNull Method in PaymentHistory Class - PHP\nDESCRIPTION: Adds isNull() to the PaymentHistory class, returning false, to allow detection of valid versus null histories via polymorphism. Facilitates later substitution with a null-object implementation. Requires PaymentHistory class.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/introduce-null-object.md#_snippet_11\n\nLANGUAGE: PHP\nCODE:\n```\n  public function isNull() {\n    return false;\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Changing Blood Group Field Type to BloodGroup in Person Class (C#)\nDESCRIPTION: Updates the Person class's blood group field from an integer to a BloodGroup object, including renaming the field and modifying the property getter and setter to work with BloodGroup instances. This enables use of object encapsulation instead of primitive type codes.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/replace-type-code-with-class.md#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\n  private BloodGroup bloodGroup;\n\n  public int BloodGroup\n  {\n    get{ return bloodGroup.Code; }\n    set{ bloodGroup = new BloodGroup(value); }\n  }\n```\n\n----------------------------------------\n\nTITLE: Article Class with Duplicated View Methods (Before Refactoring)\nDESCRIPTION: Initial implementation of an Article class with two similar methods (markdownView and htmlView) that follow the same algorithm but with different formatting styles. This duplication makes the code harder to maintain and extend.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/form-template-method.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nclass Article {\n  // ...\n  public String getTitle() { /* … */ }\n  public String getIntro() { /* … */ }\n  public String getBody() { /* … */ }\n  public String getAuthor() { /* … */ }\n  public String getDate() { /* … */ }\n\n  public String markdownView() {\n    String output = \"# \" + getTitle() + \"\\n\\n\";\n    output += \"> \" + getIntro() + \"\\n\\n\";\n    output += getBody() + \"\\n\\n\";\n    output += \"_Written by \" + getAuthor() + \" on \" + getDate() + \"_\";\n    return output;\n  }\n  public String htmlView() {\n    String output = \"<h2>\" + getTitle() + \"</h2>\" + \"\\n\";\n    output += \"<blockquote>\" + getIntro() + \"</blockquote>\" + \"\\n\";\n    output += \"<p>\" + getBody() + \"</p>\" + \"\\n\";\n    output += \"<em>Written by \" + getAuthor() + \" on \" + getDate() + \"</em>\";\n    return output;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Flow Before Introducing Parameter Object in C#\nDESCRIPTION: This C# snippet shows an 'Account' class with a 'GetFlowBetween' method. The method calculates the total value of transactions occurring between a specified start and end date by iterating through a list of 'Transaction' objects. It directly accepts 'start' and 'end' DateTime parameters.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/introduce-parameter-object.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Account\n{\n  // ...\n  private List<Transaction> transactions = new List<Transaction>();\n\n  public double GetFlowBetween(DateTime start, DateTime end)\n  {\n    double result = 0;\n\n    foreach (Transaction t in transactions)\n    {\n      if (t.ChargeDate >= start && t.ChargeDate <= end)\n        result += t.Value;\n    }\n\n    return result;\n  }\n}\n\npublic class Transaction\n{\n  public DateTime ChargeDate\n  { get; private set; }\n  public double Value\n  { get; private set; }\n\n  public Transaction(double value, DateTime chargeDate)\n  {\n    Value = value;\n    ChargeDate = chargeDate;\n  }\n}\n\n// Somewhere in client code…\ndouble flow = account.GetFlowBetween(startDate, endDate);\n```\n\n----------------------------------------\n\nTITLE: Defining NullCustomer Subclass for Customer Null Object in Java\nDESCRIPTION: Creates a NullCustomer class extending Customer that overrides isNull() to return true, representing the null-object instance for Customer. This class enables polymorphic handling of null customer references.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/introduce-null-object.md#_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\n\nclass NullCustomer extends Customer {\n  @Override public boolean isNull() {\n    return true;\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Refactored Methods in Java\nDESCRIPTION: This snippet showcases the `printOwing` method after applying the Extract Method refactoring. It demonstrates how the original method is broken down into `printBanner`, `getOutstanding`, and `printDetails`. The `getOutstanding` method calculates the total outstanding amount, and the `printDetails` method prints customer information. The refactored `printOwing` method now consists of calling these three extracted methods.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/extract-method.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nvoid printOwing() {\n  printBanner();\n  double outstanding = getOutstanding();\n  printDetails(outstanding);\n}\n\nvoid printBanner() {\n  System.out.println(\"*****************************\");\n  System.out.println(\"****** Customer totals ******\");\n  System.out.println(\"*****************************\");\n}\n\nvoid printDetails(double outstanding) {\n  System.out.println(\"name: \" + name);\n  System.out.println(\"amount: \" + outstanding);\n}\n\ndouble getOutstanding() {\n  Enumeration elements = orders.elements();\n  double outstanding = 0.0;\n  while (elements.hasMoreElements()) {\n    Order each = (Order) elements.nextElement();\n    outstanding += each.getAmount();\n  }\n  return outstanding;\n}\n```\n\n----------------------------------------\n\nTITLE: Merging Constructors in 'JobItem' Class\nDESCRIPTION: This snippet addresses making constructors of 'JobItem' identical by consolidating them, which facilitates further refactoring like extracting subclasses or simplifying constructor logic.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/extract-subclass.md#_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\npublic JobItem() { /* constructor code */ }\n```\n\n----------------------------------------\n\nTITLE: Removing TelephoneNumber Field and Getter from Person Class Using PHP\nDESCRIPTION: This snippet removes the private officeTelephone property and its getter method from Person, which previously held a TelephoneNumber instance. This cleanup eliminates references to TelephoneNumber in Person after its functionality has been fully integrated.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/inline-class.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n  private $officeTelephone; // TelephoneNumber\n  \n  public function __construct() {\n    $this->officeTelephone = new TelephoneNumber();\n  }\n```\n\n----------------------------------------\n\nTITLE: Calling printDetails with Parameter in printOwing PHP\nDESCRIPTION: This shows the updated call to the 'printDetails' method within 'printOwing'. After modifying 'printDetails' to accept '$outstanding' as a parameter, the value of '$outstanding' calculated earlier in 'printOwing' is now passed during the method call.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/extract-method.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\n  $this->printDetails($outstanding);\n```\n\n----------------------------------------\n\nTITLE: Moving Area Code Field and Methods to TelephoneNumber (Java)\nDESCRIPTION: Moves the `officeAreaCode` field (renamed to `areaCode`) and its corresponding getter/setter methods from the `Person` class to the newly created `TelephoneNumber` class.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/extract-class.md#_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nprivate String areaCode;\n\npublic String getAreaCode() {\n  return areaCode;\n}\npublic void setAreaCode(String arg) {\n  areaCode = arg;\n}\n```\n\n----------------------------------------\n\nTITLE: Refactoring Print Details with Outstanding Parameter in C#\nDESCRIPTION: This method, PrintDetails, displays the customer's name and the amount outstanding by accepting the outstanding amount as a parameter. It illustrates resolving variable scope issues by parameterizing locally needed values that were previously declared in the calling function. It requires the name and outstanding variables to be in scope; name is accessed directly (assumed to be a field or variable), and outstanding is passed as an explicit method parameter. Outputs are formatted console lines, and a missing name variable in scope would be a limitation.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/extract-method.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n\n\nvoid PrintDetails(double outstanding)\n{\n  Console.WriteLine(\"name: \" + name);\n  Console.WriteLine(\"amount: \" + outstanding);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating the BloodGroup Class Skeleton in C#\nDESCRIPTION: Introduces an empty BloodGroup class intended to encapsulate blood group logic, replacing primitive type codes. It serves as a placeholder for subsequent enhancements adding state and behavior related to blood groups.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/replace-type-code-with-class.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\npublic class BloodGroup\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Before: Passing Individual Parameters in PHP\nDESCRIPTION: The original implementation where individual temperature values (low and high) from the Room object are extracted and passed separately to the HeatingPlan.withinRange method.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/preserve-whole-object.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nclass Room {\n  // ...\n  public function withinPlan(HeatingPlan $plan) {\n    $low = $this->getLowestTemp();\n    $high = $this->getHighestTemp();\n    return $plan->withinRange($low, $high);\n  }\n}\n\nclass HeatingPlan {\n  private $range; // TempRange\n  public function withinRange($low, $high) {\n    return ($low >= $range->getLow() && $high <= $range->getHigh());\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Refactored IntRange Class with Auto-Implemented Properties (C#)\nDESCRIPTION: This is the final version of the `IntRange` class after applying the Self-Encapsulate Field refactoring and simplification. Direct field access within the class methods and constructor has been replaced by calls to private auto-implemented properties (`Low`, `High`). The original backing fields are removed.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/self-encapsulate-field.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class IntRange\n{\n  private int Low\n  {\n    get;\n    set;\n  }\n  private int High\n  {\n    get;\n    set;\n  }\n\n  public IntRange(int low, int high)\n  {\n    this.Low = low;\n    this.High = high;\n  }\n\n  public bool Includes(int arg)\n  {\n    return arg >= Low && arg <= High;\n  }\n  public void Grow(int factor)\n  {\n    High = High * factor;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Moving getTelephoneNumber Method - PHP\nDESCRIPTION: This snippet moves the getTelephoneNumber method from the Person class to the TelephoneNumber class, allowing the TelephoneNumber class to handle formatting.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/extract-class.md#_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\n\n  public function getTelephoneNumber() {\n    return (\"(\" . $this->areaCode . \") \" . $this->number);\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Defining Employee Class with Constructor (PHP)\nDESCRIPTION: Defines the base Employee class with three types (ENGINEER, SALESMAN, MANAGER) as class constants. The constructor takes a type parameter to assign the employee type. Client code instantiates the class directly using the constructor and type constant. No external dependencies are required. The input is the employee type constant, and the output is a new Employee object. This approach is limited since it only creates base Employee instances.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/replace-constructor-with-factory-method.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nclass Employee {\n  // ...\n  const ENGINEER = 0;\n  const SALESMAN = 1;\n  const MANAGER = 2;\n\n  public function __construct($type) {\n    $this->type = $type;\n  }\n}\n\n// Some clinet code.\n$eng = new Employee(Employee::ENGINEER);\n```\n\n----------------------------------------\n\nTITLE: Implementing ArticleView class with Markdown and HTML views in C#\nDESCRIPTION: This snippet defines the ArticleView class responsible for rendering an article in Markdown and HTML formats. It utilizes a StringBuilder to generate formatted strings based on article properties, serving as a base for further subclassing to handle specific formats.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/form-template-method.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic class ArticleView\n{\n  protected Article article;\n\n  public ArticleView(Article article)\n  {\n    this.article = article;\n  }\n\n  public string MarkdownView()\n  {\n    var output = new StringBuilder();\n    output.Append(\"# \").Append(article.Title).AppendLine().AppendLine();\n    output.Append(\"> \").Append(article.Intro).AppendLine().AppendLine();\n    output.Append(article.Body).AppendLine().AppendLine();\n    output.Append(\"_Written by \").Append(article.Author).Append(\" on \").Append(article.Date).Append(\"_\");\n    return output.ToString();\n  }\n  public string HtmlView()\n  {\n    var output = new StringBuilder();\n    output.Append(\"<h2>\").Append(article.Title).Append(\"</h2>\").AppendLine();\n    output.Append(\"<blockquote>\").Append(article.Intro).Append(\"</blockquote>\").AppendLine();\n    output.Append(\"<p>\").Append(article.Body).Append(\"</p>\").AppendLine();\n    output.Append(\"<em>Written by \").Append(article.Author).Append(\" on \").Append(article.Date).Append(\"</em>\");\n    return output.ToString();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Direct Payment History Access in Java After Null Object Refactoring\nDESCRIPTION: This snippet illustrates the simplified access to the customer's payment history after employing the Null Object pattern, removing the need for null checks. The weeksDelinquent variable is assigned directly from the customer's payment history, relying on the overridden getHistory method of NullCustomer to safely return a neutral payment history object.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/introduce-null-object.md#_snippet_16\n\nLANGUAGE: Java\nCODE:\n```\nint weeksDelinquent = customer.getHistory().getWeeksDelinquentInLastYear();\n```\n\n----------------------------------------\n\nTITLE: Moving calculateLength Method to Interval Class (Java)\nDESCRIPTION: Defines the `calculateLength` method within the `Interval` class. This method retrieves start/end values using getters, parses them, calculates the length, and updates the length field via its setter (`setLength`), triggering observer notification. Includes error handling for `NumberFormatException`. This moves business logic from the GUI to the domain class.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/duplicate-observed-data.md#_snippet_28\n\nLANGUAGE: Java\nCODE:\n```\n\n\n  void calculateLength() {\n    try {\n      int start = Integer.parseInt(getStart());\n      int end = Integer.parseInt(getEnd());\n      int length = end - start;\n      setLength(String.valueOf(length));\n    } catch (NumberFormatException e) {\n      throw new RuntimeException (\"Unexpected Number Format Error\");\n    }\n  }\n\n```\n\n----------------------------------------\n\nTITLE: C# Method Calculating Distance with a Shared Variable 'acc'\nDESCRIPTION: This snippet shows a method that calculates distance traveled based on force, mass, delay, and time, using a variable 'acc' that is reassigned to represent different accelerations during calculations. The code demonstrates the initial implementation where 'acc' is used for multiple purposes, which can be improved by splitting into more descriptive constants.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/split-temporary-variable.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\ndouble GetDistanceTravelled(int time)\n{\n  double result;\n  double acc = primaryForce / mass;\n  int primaryTime = Math.min(time, delay);\n  result = 0.5 * acc * primaryTime * primaryTime;\n\n  int secondaryTime = time - delay;\n  if (secondaryTime > 0)\n  {\n    double primaryVel = acc * delay;\n    acc = (primaryForce + secondaryForce) / mass;\n    result +=  primaryVel * secondaryTime + 0.5 * acc * secondaryTime * secondaryTime;\n  }\n\n  return result;\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting Markdown Formatting Steps - PHP\nDESCRIPTION: Introduces private helper methods (`title`, `intro`, `body`, `footer`) within the `ArticleMarkdown` class. This step breaks down the main rendering logic into smaller, focused parts, preparing for the 'Form Template Method' pattern. Each method is responsible for generating a specific Markdown-formatted section of the article content.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/form-template-method.md#_snippet_11\n\nLANGUAGE: PHP\nCODE:\n```\n  private function title() {\n    return \"# \" . $this->article->getTitle() . \"\\n\\n\";\n  }\n  private function intro() {\n    return \"> \" . $this->article->getIntro() . \"\\n\\n\";\n  }\n  private function body() {\n    return $this->article->getBody() . \"\\n\\n\";\n  }\n  private function footer() {\n    return \"_Written by \" . $this->article->getAuthor() . \" on \" . date(\"m/d/Y\", $this->article->getDate()) . \"_\";\n  }\n```\n\n----------------------------------------\n\nTITLE: Selecting Name from Account\nDESCRIPTION: This snippet represents a step in refactoring, focusing on selecting the \"name\" within the \"Account\" class.  It may be a step to select a field. No additional dependencies are specified. The expected output is the selection of \"name\".\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/move-method.md#_snippet_6\n\nLANGUAGE: Text\nCODE:\n```\nSelect name in \"Account\"\n```\n\n----------------------------------------\n\nTITLE: Updating Old Method to Delegate Call to New Method in PHP\nDESCRIPTION: Demonstrates modifying the original getTelephoneNumber() method to delegate its functionality by calling the new getOfficeTelephoneNumber() method. This maintains backward compatibility and program functionality during the transition period. This intermediate step ensures that legacy calls continue to work until all client code is updated.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/rename-method.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n  public function getOfficeTelephoneNumber() {\n    return (\"(\" . $this->officeAreaCode . \") \" . $this->officeNumber);\n  }\n\n  public function getTelephoneNumber() {\n    return $this->getOfficeTelephoneNumber();\n  }\n```\n\n----------------------------------------\n\nTITLE: Customer Class with Factory Method in C#\nDESCRIPTION: This code shows the initial implementation of the `Customer` class, which uses a factory method (`Get`) to manage instances. It allows modification of the `BirthDate` property after object creation. This implementation treats `Customer` as a reference object, where multiple references to the same customer name point to the same object.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/change-reference-to-value.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Customer\n{\n  private static Hashtable instances = new Hashtable();\n\n  public string Name\n  {\n    get;\n    private set;\n  }\n  public DateTime BirthDate\n  {\n    get;\n    set;\n  }\n\n  private Customer(string Name)\n  {\n    this.Name = Name;\n  }\n\n  public static Customer Get(string name)\n  {\n    Customer result = (Customer)instances[name];\n\n    if (result == null)\n    {\n      result = new Customer(name);\n      instances.Add(name, result);\n    }\n\n    return result;\n  }\n}\n\n// Somewhere in client code\nCustomer john = Customer.Get(\"John Smith\");\njohn.BirthDate = new DateTime(1985, 1, 1);\n```\n\n----------------------------------------\n\nTITLE: Original Ticket Price Calculation Method in C#\nDESCRIPTION: This code snippet shows the initial implementation of GetTicketPrice in the Stadium class, which calculates ticket prices based on date and quantity. It uses an inline if statement to determine summer or winter rates, combining logic directly within the method. Suitable dependencies include DateTime and class-level rate variables.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/decompose-conditional.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nclass Stadium\n{\n  // ...\n  public double summerRate;\n  public double winterRate;\n  public double winterServiceCharge;\n\n  public double GetTicketPrice(DateTime date, int quantity)\n  {\n    double charge;\n\n    if (date < WINTER_START || date > WINTER_END)\n    {\n      charge = quantity * summerRate;\n    }\n    else\n    {\n      charge = quantity * winterRate + winterServiceCharge;\n    }\n\n    return charge;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Before Move Field Refactoring - Java\nDESCRIPTION: This snippet shows the initial state of the `Account` and `AccountType` classes before applying the 'Move Field' refactoring. The `interestRate` field is located directly within the `Account` class.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/move-field.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nclass Account {\n  // ...\n  private AccountType type;\n  private double interestRate;\n\n  public double interestForAmount_days(double amount, int days) {\n    return interestRate * amount * days / 365.0;\n  }\n}\n\nclass AccountType {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Finalizing 'unitPrice' Field Declaration in 'JobItem' as Protected\nDESCRIPTION: This step involves changing the 'unitPrice' field's access modifier from 'private' to 'protected' to allow subclasses access, finalizing the encapsulation structure after moving it downward.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/extract-subclass.md#_snippet_14\n\nLANGUAGE: C#\nCODE:\n```\nprotected int unitPrice;\n```\n\n----------------------------------------\n\nTITLE: Overriding getName in NullCustomer to Provide Default Name in Java\nDESCRIPTION: Overrides getName() method in NullCustomer to return a default name \"N/A\", moving default null-behavior into the null-object class and allowing client code to simply call getName() without null checks.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/introduce-null-object.md#_snippet_7\n\nLANGUAGE: Java\nCODE:\n```\n\n  @Override public String getName() {\n    return \"N/A\";\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Original PayAmount Method with Switch Statement in EmployeeType Class in C#\nDESCRIPTION: Shows the original PayAmount method using a switch statement on EmployeeCode to determine payment logic for different employee types. This monolithic method centralizes all payroll calculations and throws an exception if an unknown employee code is encountered. It is replaced later by polymorphic subclass implementations. Accepts an Employee and returns an integer payment amount.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/replace-type-code-with-state-strategy.md#_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\n  public int PayAmount(Employee employee)\n  {\n    switch (EmployeeCode)\n    {\n      case ENGINEER:\n        return employee.MonthlySalary;\n      case SALESMAN:\n        return employee.MonthlySalary + employee.Commission;\n      case MANAGER:\n        return employee.MonthlySalary + employee.Bonus;\n      default:\n        throw new Exception(\"Incorrect Employee Code\");\n    }\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Resource Allocation with Exception Handling in Java\nDESCRIPTION: This code snippet demonstrates resource allocation using a stack. It attempts to retrieve a resource from the available stack. If the stack is empty, it catches the EmptyStackException and creates a new resource. The newly allocated resource is then pushed onto the allocated stack and returned. The try-catch block handles the case where the available stack is empty, which is not necessarily an exceptional situation.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/replace-exception-with-test.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nclass ResourcePool {\n  // ...\n  private Stack available;\n  private Stack allocated;\n\n  public Resource getResource() {\n    Resource result;\n    try {\n      result = (Resource) available.pop();\n      allocated.push(result);\n      return result;\n    } catch (EmptyStackException e) {\n      result = new Resource();\n      allocated.push(result);\n      return result;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Refactored Person Class in PHP\nDESCRIPTION: This snippet shows the refactored `Person` class after applying the Hide Delegate pattern. The `getManager` method in the `Person` class now delegates the call to the `getManager` method of the `Department` object. This encapsulates the department's internal workings, hiding the implementation detail from the client. This reduces the direct dependency of the client code on the `Department` class.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/hide-delegate.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n```\nclass Person {\n  private $department; // Department\n\n  public function setDepartment(Department $arg) {\n    $this->department = $arg;\n  }\n  public function getManager() {\n    return $this->department->getManager();\n  }\n}\n\nclass Department {\n  private $chargeCode;\n  private $manager; // Person\n\n  public function __construct(Person $manager) {\n    $this->manager = $manager;\n  }\n  public function getManager() {\n    return $this->manager;\n  }\n\n  //…\n}\n\n// Somewhere in client code\n$manager = $john->getManager();\n```\n```\n\n----------------------------------------\n\nTITLE: ResourcePool Class with Exception Handling - PHP\nDESCRIPTION: This PHP snippet demonstrates the initial implementation of the `ResourcePool::getResource()` method using exception handling. It attempts to retrieve a resource from the available pool, and if the pool is empty, it catches a `RuntimeException` to create a new resource. This approach is refactored to avoid exceptions for expected conditions.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/replace-exception-with-test.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass ResourcePool {\n  // ...\n  private $available; // SplStack \n  private $allocated; // SplStack \n\n  public function getResource() {\n    try {\n      $result = $this->available->pop();\n      $this->available->push($this->allocated, $result);\n      return $result;\n    } catch (RuntimeException $e) {\n      $result = new Resource();\n      $this->available->push($this->allocated, $result);\n      return $result;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Guidelines for Passing Class Instances When Moving Methods\nDESCRIPTION: This snippet explains the importance of passing an instance of the original class into the method being refactored. It emphasizes that when a method references multiple fields or methods, the entire object must be available in the new location to preserve functionality. The snippet includes an example of printing an 'Account' object to demonstrate passing the instance.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/move-method.md#_snippet_5\n\nLANGUAGE: C\nCODE:\n```\nAccount account\n```\n\n----------------------------------------\n\nTITLE: Adding Parameter - Method Body Modification in Java\nDESCRIPTION: This code snippet demonstrates the modification of the method body to incorporate the new parameter in Java. The original method body checks only for the date matching the current appointment, but now, it also verifies whether the name of the appointment matches the given name parameter, if it is provided. It utilizes the conditional statement to filter appointments. The input is the date and the name, the output is the result of filtered appointments.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/add-parameter.md#_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nif (name == null || (name != null && name == each.name)) {\n          result.add(date);\n        }\n```\n\n----------------------------------------\n\nTITLE: Original SchedulePayment Method in Account Class\nDESCRIPTION: Initial implementation of SchedulePayment method that calculates payment date based on previousDate, with embedded logic for date adjustment. It directly uses previousDate and performs date calculations inline.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/introduce-foreign-method.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class Account\n{\n  // ...\n  private double SchedulePayment()\n  {\n    DateTime paymentDate;\n\n    if (previousDate.Day != 1)\n    {\n      paymentDate = previousDate.AddMonths(1);\n      paymentDate = new DateTime(paymentDate.Year, paymentDate.Month, 1);\n    }\n    else\n      paymentDate = previousDate;\n\n    // Issue a payment using paymentDate.\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Engineer, Salesman, and Manager EmployeeType Subclasses - PHP\nDESCRIPTION: Defines three subclasses (Engineer, Salesman, Manager) of EmployeeType, each overriding getTypeCode() to return a specific constant denoting the employee type. These classes are essential for the State/Strategy pattern, encapsulating type-specific behavior. Depends on EmployeeType constants; Input/Output: returns specific type code constant.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/replace-type-code-with-state-strategy.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n\nclass Engineer extends EmployeeType {\n  public function getTypeCode() {\n    return EmployeeType::ENGINEER;\n  }\n}\nclass Salesman extends EmployeeType {\n  public function getTypeCode() {\n    return EmployeeType::SALESMAN;\n  }\n}\nclass Manager extends EmployeeType {\n  public function getTypeCode() {\n    return EmployeeType::MANAGER;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Refactored Java implementation with inline telephone fields in Person class\nDESCRIPTION: This snippet illustrates the final refactored version where the telephone number fields are embedded directly into the Person class, removing the dependency on the TelephoneNumber class. Methods now operate directly on the area's code and number fields, simplifying access and modification.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/inline-class.md#_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nclass Person {\n  private String name;\n  private String number;\n  private String areaCode;\n\n  public String getName() {\n    return name;\n  }\n  public String getTelephoneNumber() {\n    return (\"(\" + areaCode + \") \" + number);\n  }\n  public String getAreaCode() {\n    return areaCode;\n  }\n  public void setAreaCode(String arg) {\n    areaCode = arg;\n  }\n  public String getNumber() {\n    return number;\n  }\n  public void setNumber(String arg) {\n    number = arg;\n  }\n}\n\n// Somewhere in client code\nPerson martin = new Person();\nmartin.setAreaCode(\"781\");\n```\n\n----------------------------------------\n\nTITLE: Implementing Recursive getHeadCount in Department (Java)\nDESCRIPTION: Implements the `getHeadCount` method recursively for the `Department` class as part of the Composite pattern. It iterates over its child `Party` objects (which can be other Departments or Employees) stored in the `items` collection and aggregates their respective headcounts by calling their `getHeadCount` method. Requires `Party` objects to implement `getHeadCount`.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/extract-superclass.md#_snippet_10\n\nLANGUAGE: java\nCODE:\n```\n    int headCount = 0;\n    Iterator i = items.iterator();\n    while (i.hasNext()) {\n      Party each = (Party) i.next();\n      headCount += each.getHeadCount();\n    }\n    return headCount;\n```\n\n----------------------------------------\n\nTITLE: Adding Order to Customer's Orders Collection Directly - PHP\nDESCRIPTION: This snippet shows how to add an order object directly to the Customer class's orders collection array, serving as a replacement for calling a setCustomer method from the Order class. It requires the $orders property to be defined as an array in the Customer class and expects $arg to be an initialized Order object. The approach supports a unidirectional association pattern whereby Customer maintains references to its orders.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/change-bidirectional-association-to-unidirectional.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n    $this->orders[] = $arg;\n```\n\n----------------------------------------\n\nTITLE: Overriding getHistory Method to Return Null Object in Java\nDESCRIPTION: This snippet shows the override of the getHistory method in the NullCustomer class to return a null-object instance of PaymentHistory. This design usage of the Null Object pattern avoids null references and helps client code remain clean without needing to perform explicit null checks. The PaymentHistory.newNull() static method is expected to provide a default neutral object for payment history operations.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/introduce-null-object.md#_snippet_14\n\nLANGUAGE: Java\nCODE:\n```\n@Override public PaymentHistory getHistory() {\n  return PaymentHistory.newNull();\n}\n```\n\n----------------------------------------\n\nTITLE: Before: Using Foreign Method in Client Class\nDESCRIPTION: Original implementation where an Account class contains a foreign method 'nextWeek' that should logically belong to the DateTime class. This approach creates code maintenance issues as functionality is not properly encapsulated.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/introduce-local-extension.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass Account {\n  // ...\n  public function schedulePayment() {\n    $paymentDate = self::nextWeek($this->previousDate);\n    // Issue a payment using paymentDate.\n    // ...\n  }\n\n  /**\n   * Foreign method. Should be in the DateTime class.\n   */\n  private static function nextWeek(DateTime $arg) {\n  \t$previousDate = clone $arg;\n  \treturn $previousDate->modify('+7 days');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initial State: Person Class Delegates getManager\nDESCRIPTION: The initial Java code showing the `Person` class acting as a middle man. It delegates the `getManager()` call to the `Department` object it holds. The client code `manager = john.getManager();` interacts solely with the `Person` object, hiding the `Department` class.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/remove-middle-man.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nclass Person {\n  private Department department;\n\n  public void setDepartment(Department arg) {\n    department = arg;\n  }\n  public Person getManager() {\n    return department.getManager();\n  }\n}\n\nclass Department {\n  private String chargeCode;\n  private Person manager;\n\n  public Department(Person arg) {\n    manager = arg;\n  }\n  public Person getManager() {\n    return manager;\n  }\n\n  //…\n}\n\n// Somewhere in client code\nmanager = john.getManager();\n```\n\n----------------------------------------\n\nTITLE: Calling Article View Object (HTML) - PHP\nDESCRIPTION: Replaces the original HTML rendering logic within the `Article` class (implied context) with a call to the dedicated `ArticleView::htmlView` method. It instantiates `ArticleView`, passing itself (`$this`, the Article object) and returns the result of the view method.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/form-template-method.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n    $view = new ArticleView($this);\n    return $view->htmlView();\n```\n\n----------------------------------------\n\nTITLE: EmployeeType Static Factory Method to Instantiate Subclasses in C#\nDESCRIPTION: Defines a static method Create within EmployeeType that takes an integer code and returns an instance of the corresponding EmployeeType subclass. It uses a switch statement to determine which subclass to instantiate based on the code. This factory method centralizes the creation logic of employee types and limits the spread of the switch statement to one place.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/replace-type-code-with-state-strategy.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic static EmployeeType Create(int code)\n{\n  switch (code)\n  {\n    case Employee.ENGINEER:\n      return new Engineer();\n    case Employee.SALESMAN:\n      return new Salesman();\n    case Employee.MANAGER:\n      return new Manager();\n    default:\n      throw new Exception(\"Incorrect Employee Code\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Original Gamma Method in Account Class (C#)\nDESCRIPTION: This snippet shows the original `Gamma` method within the `Account` class. This method is complex, with several local variables and calculations, making it a good candidate for refactoring using the Replace Method with Method Object technique. It takes `inputVal`, `quantity`, and `yearToDate` as input and returns an integer.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/replace-method-with-method-object.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class Account\n{\n  // ...\n  private int Gamma(int inputVal, int quantity, int yearToDate)\n  {\n    int importantValue1 = (inputVal * quantity) + Delta();\n    int importantValue2 = (inputVal * yearToDate) + 100;\n    if ((yearToDate - importantValue1) > 100)\n    {\n      importantValue2 -= 20;\n    }\n    int importantValue3 = importantValue2 * 7;\n    // and so on…\n    return importantValue3 - 2 * importantValue1;\n  }\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Representing Type Codes with Constants in Java\nDESCRIPTION: Demonstrates the initial state before refactoring, where integer constants are used within the class to represent different types (blood groups). The class holds an integer field for the type, and client code relies on comparing against these integer constants.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/replace-type-code-with-class.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nclass Person {\n  public static final int O = 0;\n  public static final int A = 1;\n  public static final int B = 2;\n  public static final int AB = 3;\n\n  private int bloodGroup;\n\n  public Person(int code) {\n    bloodGroup = code;\n  }\n  public void setBloodGroup(int code) {\n    bloodGroup = code;\n  }\n  public int getBloodGroup() {\n    return bloodGroup;\n  }\n}\n\n// Somewhere in client code.\nPerson parent = new Person(Person.O);\nif (parent.getBloodGroup() == Person.AB) {\n  // ...\n}\nchild.setBloodGroup(parent.getBloodGroup());\n```\n\n----------------------------------------\n\nTITLE: Employee Class with Protected Constructor\nDESCRIPTION: This code snippet shows the modified `Employee` and `Manager` classes after refactoring. The `Employee` class now includes a protected constructor that initializes common properties ($name and $id).  The `Manager` class's constructor now calls the parent constructor to handle these common initializations, simplifying the subclass and promoting code reuse.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/pull-up-constructor-body.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nclass Employee {\n  // ...\n  protected $name;\n  protected $id;\n  protected function __construct($name, $id) {\n    $this->name = $name;\n    $this->id = $id;\n  }\n}\n   \nclass Manager extends Employee {\n  // ...\n  private $grade;\n  public function __construct($name, $id, $grade) {\n    parent::__construct($name, $id);\n    $this->grade = $grade;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Subclasses - Java\nDESCRIPTION: This Java code snippet demonstrates the initial setup with abstract `Person` class and subclasses `Male` and `Female`.  The `Male` and `Female` classes override abstract methods `isMale()` and `getCode()`. The client code shows how to instantiate and use these subclasses.  No external dependencies are needed.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/replace-subclass-with-fields.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nabstract class Person {\n  abstract boolean isMale();\n  abstract char getCode();\n}\n\nclass Male extends Person {\n  @Override boolean isMale() {\n    return true;\n  }\n  @Override char getCode() {\n    return 'M';\n  }\n}\nclass Female extends Person {\n  @Override boolean isMale() {\n    return false;\n  }\n  @Override char getCode() {\n    return 'F';\n  }\n}\n\n// Client code\nPerson kent = new Male();\nSystem.out.print(\"Person's gender is: \" + kent.getCode());\n```\n\n----------------------------------------\n\nTITLE: Updating Text Field Properties on Leave - C#\nDESCRIPTION: This code ensures that changes made in text fields (`tbStart`, `tbEnd`, `tbLength`) are saved when the field loses focus. The corresponding properties (`Start`, `End`, and `Length`) are updated with the text field's value. This is part of handling user input to keep the GUI and the domain model in sync. The setters of the properties are called here.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/duplicate-observed-data.md#_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\n        this.End = tb.Text;\n```\n\n----------------------------------------\n\nTITLE: Initial Method with Query and Modification - C#\nDESCRIPTION: This code snippet presents the initial method, `FindCriminalAndAlert`, which both identifies a criminal and sends an alert. This method exhibits both query (finding the criminal) and modification (sending the alert) responsibilities, making it a candidate for refactoring.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/separate-query-from-modifier.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Guard\n{\n  // ...\n  public void CheckSecurity(string[] people)\n  {\n    string found = FindCriminalAndAlert(people);\n    SomeLaterCode(found);\n  }\n  public string FindCriminalAndAlert(string[] people)\n  {\n    for (int i = 0; i < people.Length; i++)\n    {\n      if (people[i].Equals(\"Don\")) {\n        SendAlert();\n        return \"Don\";\n      }\n      if (people[i].Equals(\"John\")) {\n        SendAlert();\n        return \"John\";\n      }\n    }\n    return String.Empty;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Order Price with Explicit Parameters in PHP\nDESCRIPTION: Implements an Order class in PHP where the getPrice method calculates the base price and discount level within its body, then passes these as parameters to the discountedPrice method. Dependencies include class fields quantity and itemPrice. Key parameters are basePrice (computed as quantity * itemPrice) and discountLevel (set to 2 if quantity > 100, else 1). discountedPrice expects both parameters: basePrice (numeric) and discountLevel (integer); it returns the discounted price based on level. Outputs the final price as a numeric value. Limitation: discountedPrice is tightly coupled to getPrice, as all arguments must be prepared beforehand.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/replace-parameter-with-method-call.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nclass Order {\n  // ...\n  public function getPrice() {\n    $basePrice = $this->quantity * $this->itemPrice;\n    if ($this->quantity > 100) {\n      $discountLevel = 2;\n    }\n    else {\n      $discountLevel = 1;\n    }\n    $finalPrice = $this->discountedPrice($basePrice, $discountLevel);\n    return $finalPrice;\n  }\n  private function discountedPrice($basePrice, $discountLevel) {\n    if ($discountLevel == 2) {\n      return $basePrice * 0.1;\n    }\n    else {\n      return $basePrice * 0.05;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Original Account Class with Direct Date Logic (Java)\nDESCRIPTION: Shows the initial state of the `Account` class where the `schedulePayment` method directly calculates the next payment date using `new Date(...)`. This logic ideally belongs elsewhere but cannot be added to the standard `Date` class.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/introduce-foreign-method.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nclass Account {\n  // ...\n  double schedulePayment() {\n    Date paymentDate = new Date(previousDate.getYear(), previousDate.getMonth(), previousDate.getDate() + 7);\n\n    // Issue a payment using paymentDate.\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initial (Flawed) Extracted `printDetails` Method (Java)\nDESCRIPTION: This shows the initial attempt at extracting the `printDetails` method. It contains the logic for printing details but is flawed because it tries to use the `name` and `outstanding` variables which are local to the original `printOwing` method and not accessible within this new method's scope, leading to a compilation error.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/extract-method.md#_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\nvoid printDetails() {\n  System.out.println(\"name: \" + name);\n  System.out.println(\"amount: \" + outstanding);\n}\n```\n\n----------------------------------------\n\nTITLE: Refactored PHP Classes Removing Middle Man\nDESCRIPTION: Refactored PHP code after applying 'Remove Middle Man'. The `Person` class now has a `getDepartment()` getter, the delegating `getManager()` method is removed, and client code directly accesses the manager via `$john->getDepartment()->getManager()`. This exposes the `Department` object.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/remove-middle-man.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass Person {\n  private $department; // Department\n\n  public function getDepartment() {\n    return $this->department;\n  }\n  public function setDepartment($arg) {\n    $this->department = $arg;\n  }\n}\n\nclass Department {\n  private $chargeCode;\n  private $manager; // Person\n\n  public function __construct(Person $arg) {\n    $this->manager = $arg;\n  }\n  public function getManager() {\n    return $this->manager;\n  }\n\n  //…\n}\n\n// Somewhere in client code\n$manager = $john->getDepartment()->getManager();\n```\n\n----------------------------------------\n\nTITLE: Implementing Customer Loading and Storage Methods\nDESCRIPTION: Adds methods to load customer data at program launch and store customer instances in the registry. This demonstrates how to populate the customer registry with predefined values.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/change-value-to-reference.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\n//TODO: This code should be executed at the program launch.\npublic static void LoadCustomers()\n{\n  new Customer(\"Lemon Car Hire\").Store();\n  new Customer(\"Associated Coffee Machines\").Store();\n  new Customer(\"Bilston Gasworks\").Store();\n}\nprivate void Store()\n{\n  instances.Add(this.Name, this);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing IObservable interface in Interval class C#\nDESCRIPTION: Enhances the 'Interval' class by implementing 'IObservable<Interval>', allowing it to notify subscribed observers of changes. It includes a list of observers, constructor initialization, and a 'Subscribe' method which registers observers and triggers immediate notification via OnNext. Note the 'Subscribe' method returns null instead of IDisposable, indicating unsubscription is not supported here.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/duplicate-observed-data.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\n\n  private List<IObserver<Interval>> observers;\n\n```\n\nLANGUAGE: C#\nCODE:\n```\n\n  public Interval()\n  {\n    observers = new List<IObserver<Interval>>();\n  }\n\n```\n\nLANGUAGE: C#\nCODE:\n```\n\n  public IDisposable Subscribe(IObserver<Interval> observer)\n  {\n    if (!observers.Contains(observer))\n    {\n      observers.Add(observer);\n      observer.OnNext(this);\n    }\n    return null;\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Original Code Snippet in C#\nDESCRIPTION: This snippet represents the original code that uses a conditional check to handle null customer scenarios. It calculates the `weeksDelinquent` based on if customer is null. This is the code to be refactored.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/introduce-null-object.md#_snippet_13\n\nLANGUAGE: C#\nCODE:\n```\nint weeksDelinquent;\nif (customer.IsNull)\n  weeksDelinquent = 0;\nelse\n  weeksDelinquent = customer.GetHistory().WeeksDelinquentInLastYear;\n```\n\n----------------------------------------\n\nTITLE: Nested Conditionals: Get Pay Amount (Before) in Java\nDESCRIPTION: This code demonstrates a nested conditional structure to determine the pay amount based on employee status (dead, separated, retired). The method calculates the result within the nested `if-else` structure and returns the result at the end.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/replace-nested-conditional-with-guard-clauses.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nclass Payout {\n  // ...\n  double getPayAmount() {\n    double result = 0;\n    if (isDead) {\n      result = deadAmount();\n    }\n    else {\n      if (isSeparated) {\n        result = separatedAmount();\n      }\n      else {\n        if (isRetired) {\n          result = retiredAmount();\n        }\n        else {\n          result = normalPayAmount();\n        }\n      }\n    }\n    return result;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initial Employee Class Constructor C#\nDESCRIPTION: This code snippet shows the initial `Employee` class with a constructor that takes an integer `type` as a parameter. This type is used to define the type of the employee. The `Employee` class contains integer constants to define the different types.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/replace-constructor-with-factory-method.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Employee\n{\n  // ...\n  public const int ENGINEER = 0,\n                   SALESMAN = 1,\n                   MANAGER = 2;\n\n  public Employee(int type)\n  {\n    Type = type;\n  }\n}\n\n// Some clinet code.\nEmployee eng = new Employee(Employee.ENGINEER);\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Pull Up Constructor Body Refactoring - After (Java)\nDESCRIPTION: Shows the refactored state after applying 'Pull Up Constructor Body'. A protected constructor has been added to the superclass (`Employee`) to handle the initialization of shared fields (`name`, `id`). The subclass (`Manager`) now calls this superclass constructor using `super(name, id);`, eliminating the duplicated initialization logic.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/pull-up-constructor-body.md#_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nclass Employee {\n  // ...\n  protected String name;\n  protected String id;\n  protected Employee(String name, String id) {\n    this.name = name;\n    this.id = id;\n  }\n}\n   \nclass Manager extends Employee {\n  // ...\n  private int grade;\n  public Manager(String name, String id, int grade) {\n    super(name, id);\n    this.grade = grade;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering by Name Inside FindAppointments - C#\nDESCRIPTION: Illustrates the code fragment for updating the FindAppointments method to filter results by the given name. This block checks if the provided name is null or empty (allowing all appointments) or matches the appointment's name property before adding it to the result. Meant to be inserted into the appointments iteration loop, it demonstrates proper parameter usage for enhanced filtering.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/add-parameter.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n        if (string.IsNullOrEmpty(name) || name == item.Name)\n        {\n          result.Add(date);\n        }\n```\n\n----------------------------------------\n\nTITLE: Getters and Setters Implementation Snippet in Java\nDESCRIPTION: This snippet shows the standalone getter and setter methods used for the private fields low and high within the IntRange class. These methods encapsulate access to the fields, providing controlled read and write capabilities. They form the basis for self-encapsulation when replacing direct field references.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/self-encapsulate-field.md#_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\n  int getLow() {\n    return low;\n  }\n  int getHigh() {\n    return high;\n  }\n  void setLow(int arg) {\n    low = arg;\n  }\n  void setHigh(int arg) {\n    high = arg;\n  }\n```\n\n----------------------------------------\n\nTITLE: Initial State Before Applying Hide Delegate in Java\nDESCRIPTION: Shows the initial structure where the `Person` class exposes its `Department` object via `getDepartment()`. The client code (`manager = john.getDepartment().getManager();`) demonstrates direct access to the `Department` object to retrieve the manager, creating unnecessary coupling between the client and the `Department` class.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/hide-delegate.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nclass Person {\n  private Department department;\n\n  public Department getDepartment() {\n    return department;\n  }\n  public void setDepartment(Department arg) {\n    department = arg;\n  }\n}\n\nclass Department {\n  private String chargeCode;\n  private Person manager;\n\n  public Department(Person manager) {\n    this.manager = manager;\n  }\n  public Person getManager() {\n    return manager;\n  }\n\n  //…\n}\n\n// Somewhere in client code\nmanager = john.getDepartment().getManager();\n```\n\n----------------------------------------\n\nTITLE: Implementing Recursive getHeadCount in Composite Class (PHP)\nDESCRIPTION: This snippet shows the recursive implementation of the `getHeadCount` method within a composite class (likely `Department` or similar). It iterates through all child items (which can be composites or leaves) and sums the results of their respective `getHeadCount` calls to determine the total headcount for this branch of the hierarchy.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/extract-superclass.md#_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\n    $headCount = 0;\n    foreach ($this->items as $each) {\n      $headCount += $each->getHeadCount();\n    }\n    return $headCount;\n```\n\n----------------------------------------\n\nTITLE: Extracting and Implementing the 'view' Method in PHP Class\nDESCRIPTION: This snippet shows the removal of the 'view' method, which combines calls to other component methods, and its replacement with a new implementation that concatenates the abstract methods: title, intro, body, and footer. This consolidates the view rendering logic for subclasses, promoting code reuse and consistency.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/form-template-method.md#_snippet_17\n\nLANGUAGE: PHP\nCODE:\n```\npublic function view() {\n    return $this->title()\n      . $this->intro()\n      . $this->body()\n      . $this->footer();\n}\n```\n\n----------------------------------------\n\nTITLE: Initial Mutable Customer Class with Factory Method (Java)\nDESCRIPTION: This snippet shows the initial state of a `Customer` class before applying the 'Change Reference to Value' refactoring. The class is mutable (has a `setBirthDate` method) and uses a static factory method (`get`) with a `Hashtable` to manage and reuse instances, effectively acting as a reference object.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/change-reference-to-value.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nclass Customer {\n  private final String name;\n  private Date birthDate;\n\n  public String getName() {\n    return name;\n  }\n  public Date getBirthDate() {\n    return birthDate;\n  }\n  public void setBirthDate(Date birthDate) {\n    this.birthDate = birthDate;\n  }\n  private Customer(String name) {\n    this.name = name;\n  }\n\n  private static Dictionary instances = new Hashtable();\n\n  public static Customer get(String name) {\n    Customer value = (Customer)instances.get(name);\n    if (value == null) {\n      value = new Customer(name);\n      instances.put(name, value);\n    }\n    return value;\n  }\n}\n\n// Somewhere in client code\nCustomer john = Customer.get(\"John Smith\");\njohn.setBirthDate(new Date(1985, 1, 1));\n```\n\n----------------------------------------\n\nTITLE: Printing Account Object\nDESCRIPTION: This code snippet showcases the printing of an `Account` object, likely for debugging or output purposes during refactoring. It is based on PHP syntax using the `$account` variable. The only dependency is having an instantiated Account object available in the current scope.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/move-method.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\nPrint:\n```\nAccount $account\n```\n```\n\n----------------------------------------\n\nTITLE: Renamed Method Definition - Java\nDESCRIPTION: This snippet shows the renamed method `getOfficeTelephoneNumber` within the `Person` class. The original method `getTelephoneNumber` will call the new method to maintain functionality during refactoring. Client code is updated to call the renamed method.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/rename-method.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nclass Person {\n  //…\n  public String getOfficeTelephoneNumber() {\n    return (\"(\" + officeAreaCode + \") \" + officeNumber);\n  }\n}\n\n// Client code\nphone = employee.getOfficeTelephoneNumber();\n```\n\n----------------------------------------\n\nTITLE: Defining Employee Subclasses (PHP)\nDESCRIPTION: Defines the specialized subclasses Engineer, Salesman, and Manager, all extending the base Employee class. These classes can be extended with additional behavior or properties specific to each role. Used in conjunction with the factory method to enable creation of specific employee types. No inputs or outputs are defined unless subclass constructors are extended.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/replace-constructor-with-factory-method.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nclass Engineer extends Employee {\n  // ...\n}\nclass Salesman extends Employee {\n  // ...\n}\nclass Manager extends Employee {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Parameterized Raise Method - C#\nDESCRIPTION: This small snippet shows the implementation of the new Raise method in C#, which multiplies the Salary field by (1 + factor). It is meant to replace multiple, nearly identical salary adjustment code blocks with a single reusable method, improving maintainability and reducing errors. This snippet is inserted into the Employee class and requires the presence of a Salary field.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/parameterize-method.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic void Raise(double factor)\n{\n  Salary *= (1 + factor);\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Discount with Parameter Modification in C#\nDESCRIPTION: This C# method calculates a discount based on input value, quantity, and year-to-date sales. It directly modifies the 'inputVal' parameter within the method body based on certain conditions, which is generally discouraged as it can make the code harder to understand and debug.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/remove-assignments-to-parameters.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nint Discount(int inputVal, int quantity, int yearToDate)\n{\n  if (inputVal > 50)\n  {\n    inputVal -= 2;\n  }\n  if (quantity > 100)\n  {\n    inputVal -= 1;\n  }\n  if (yearToDate > 10000)\n  {\n    inputVal -= 4;\n  }\n\n  return inputVal;\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting $basePrice from Expression - PHP\nDESCRIPTION: This code snippet shows extracting the base price into a new variable. The purpose is to create a variable that represents a part of the original complex expression. It takes in the existing object's properties of `quantity` and `itemPrice`, multiplies them, and assigns the result to the new variable `$basePrice`. Then the original expression will be updated with the new variable to replace the calculated value. \nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/extract-variable.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n  $basePrice = $this->quantity * $this->itemPrice;\n```\n\n----------------------------------------\n\nTITLE: Initial Class Definitions in PHP\nDESCRIPTION: Defines the `Person` and `TelephoneNumber` classes, representing an initial state before refactoring.  The `Person` class holds a `TelephoneNumber` object, demonstrating a class that can be inlined.  The `TelephoneNumber` class encapsulates phone number details.  Requires no dependencies besides PHP runtime.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/inline-class.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nclass Person {\n  private $name;\n  private $officeTelephone; // TelephoneNumber\n  \n  public function __construct() {\n    $this->officeTelephone = new TelephoneNumber();\n  }\n  \n  public function getName() {\n    return $this->name;\n  }\n  public function getOfficeTelephone() {\n    return $this->officeTelephone;\n  }\n  public function getTelephoneNumber() {\n    return $this->officeTelephone->getTelephoneNumber();\n  }\n}\n\nclass TelephoneNumber {\n  private $areaCode;\n  private $number;\n\n  public function getAreaCode() {\n    return $this->areaCode;\n  }\n  public function setAreaCode($arg) {\n    $this->areaCode = $arg;\n  }\n  public function getNumber() {\n    return $this->number;\n  }\n  public function setNumber($arg) {\n    $this->number = $arg;\n  }\n  public function getTelephoneNumber() {\n    return (\"(\" . $this->areaCode . \") \" . $this->number);\n  }\n}\n\n// Somewhere in client code\n$martin = new Person();\n$martin->getOfficeTelephone()->setAreaCode(\"781\");\n```\n\n----------------------------------------\n\nTITLE: Implementing IsLabor Getter in LaborItem Subclass Java\nDESCRIPTION: This snippet provides the implementation for a polymorphic `isLabor` getter method in the `LaborItem` subclass. It returns `true`, indicating this specific type represents labor, replacing the need for an `isLabor` field.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/extract-subclass.md#_snippet_9\n\nLANGUAGE: Java\nCODE:\n```\n\n  protected boolean isLabor() {\n    return true;\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Original Gamma Method in Account Class - PHP\nDESCRIPTION: This code snippet presents the original `gamma` method within the `Account` class before refactoring. It's a long method with local variables and complex logic, making it difficult to understand and maintain. The goal of refactoring is to simplify this method by moving its logic into a separate method object.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/replace-method-with-method-object.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass Account {\n  // ...\n  function gamma($inputVal, $quantity, $yearToDate) {\n    $importantValue1 = ($inputVal * $quantity) + $this->delta();\n    $importantValue2 = ($inputVal * $yearToDate) + 100;\n    if (($yearToDate - $importantValue1) > 100) {\n      $importantValue2 -= 20;\n    }\n    $importantValue3 = $importantValue2 * 7;\n    // and so on…\n    return $importantValue3 - 2 * $importantValue1;\n  }\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Refactored Implementation Using Object in PHP\nDESCRIPTION: The refactored code replaces the array with a dedicated Performance class that has proper getter and setter methods with meaningful names, encapsulating the data and providing a clearer interface.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/replace-array-with-object.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nclass Tournament {\n  public row; // Performance\n  \n  public function __construct() {\n    $this->row = new Performance();\n    $this->row->setName(\"Liverpool\");\n    $this->row->setScore(\"15\");\n  }\n  public function displayScore() {\n    $name = $this->row->getName();\n    $score = $this->row->getScore();\n    // ...\n  }\n}\n\nclass Performance {\n  private $name;\n  private $score;\n\n  public function getName() {\n    return $this->name;\n  }\n  public void setName($arg) {\n    $this->name = $arg;\n  }\n  public function getScore() {\n    return $this->score;\n  }\n  public function setScore($arg) {\n    $this->score = intval($arg);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Refactored Constructor with Initialization Method and Subclass Initialization\nDESCRIPTION: This snippet demonstrates moving the initialization logic from a setter to a dedicated method 'initializeId' called in the constructor. Additionally, in a subclass 'InterestAccount', the constructor calls the parent class's initialization method to avoid exposing a public setter, maintaining field integrity.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/remove-setting-method.md#_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nclass Account {\n  // ...\n  private String id;\n\n  public Account(String id) {\n    initializeId(id);\n  }\n  protected void initializeId(String id) {\n    this.id = \"ID\" + id;\n  }\n}\n\nclass InterestAccount extends Account {\n  private double interestRate;\n  public InterestAccount(String id, double interestRate) {\n    initializeId(id);\n    this.interestRate = interestRate;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Factory Methods for Subclasses in PHP\nDESCRIPTION: Defines static factory methods in the Person class to create instances of the Male and Female subclasses. This step precedes the elimination of direct subclass constructor calls by replacing them with these factory methods. It requires the Male and Female subclasses already defined.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/replace-subclass-with-fields.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n  static function createMale() {\n    return new Male();\n  }\n  static function createFemale() {\n    return new Female();\n  }\n```\n\n----------------------------------------\n\nTITLE: Using Array to Store Team Data in C#\nDESCRIPTION: Initial implementation using a string array to store team name and score information in a Tournament class. This approach lacks type safety and has poor readability as array indices have no semantic meaning.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/replace-array-with-object.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Tournament\n{\n  string[] row = new string[2];\n\n  public Tournament()\n  {\n    row[0] = \"Liverpool\";\n    row[1] = \"15\";\n  }\n  public void DisplayScore()\n  {\n    string name = row[0];\n    int score = Convert.ToInt32(row[1]);\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Changing 'GetUnitPrice' Method Override in Derived Class\nDESCRIPTION: The code changes the override of 'GetUnitPrice' in subclasses from 'override' to 'abstract' in the parent class, reflecting a move towards polymorphic method implementation. It also updates the class declaration to be abstract.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/extract-subclass.md#_snippet_13\n\nLANGUAGE: C#\nCODE:\n```\npublic override int GetUnitPrice() { ... }\n```\n\n----------------------------------------\n\nTITLE: Updating Text Fields - C#\nDESCRIPTION: This C# snippet updates text fields (tbStart, tbEnd, tbLength) with values from an 'interval' object. It's used within the OnNext() method to ensure text fields display current interval data. The text fields are directly accessed to avoid infinite recursion.  It takes an interval object as a prerequisite.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/duplicate-observed-data.md#_snippet_21\n\nLANGUAGE: C#\nCODE:\n```\ntbStart.Text = interval.Start;\n    tbEnd.Text = interval.End;\n    tbLength.Text = interval.Length;\n```\n\n----------------------------------------\n\nTITLE: Confirming Final Compilation\nDESCRIPTION: This snippet provides confirmation that the compilation and testing are completed successfully after the constructor refactoring. The prompt encourages performing final compilation to check that the changes are working. The confirmation is offered in three languages (Russian, English, and Ukrainian).\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/replace-type-code-with-class.md#_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\n#C|ru| Запускаем финальную компиляцию.\n#S Отлично, все работает!\n\n#C|en| Let's perform the final compilation and testing.\n#S Wonderful, it's all working!\n\n#C|uk| Запускаємо фінальну компіляцію.\n#S Супер, все працює.\n```\n\n----------------------------------------\n\nTITLE: Original getPrice Method in PHP\nDESCRIPTION: This snippet shows the initial implementation of the getPrice() method, calculating the base price and applying a discount factor based on the total. It relies on temporary variables 'basePrice' and 'discountFactor', which are used within the method for calculation.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/replace-temp-with-query.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nclass Product {\n  // ...\n  function getPrice() {\n    $basePrice = $this->quantity * $this->itemPrice;\n    if ($basePrice > 1000) {\n      $discountFactor = 0.95;\n    }\n    else {\n      $discountFactor = 0.98;\n    }\n    return $basePrice * $discountFactor;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Simple Factory Method to Employee (PHP)\nDESCRIPTION: Introduces a basic static create method to the Employee class, which returns a new Employee instance with the specified type. At this stage, the method is a wrapper around the constructor and prepares for more advanced factory logic. This is an intermediate refactoring step. The input is the employee type constant, returning an Employee object.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/replace-constructor-with-factory-method.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n  public static function create($type) {\n    return new Employee($type);\n  }\n```\n\n----------------------------------------\n\nTITLE: Initializing getTelephoneNumber Method in PHP\nDESCRIPTION: Defines the original method getTelephoneNumber() in the Person class which formats and returns a telephone number as a string. It depends on officeAreaCode and officeNumber properties assumed to be accessible in the class context. The snippet also shows client code calling this method on an employee object to retrieve the phone number string.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/rename-method.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nclass Person {\n  //…\n  public function getTelephoneNumber() {\n    return (\"(\" . officeAreaCode . \") \" . officeNumber);\n  }\n}\n\n// Client code\n$phone = $employee->getTelephoneNumber();\n```\n\n----------------------------------------\n\nTITLE: Adding getCode Accessor to Person (Java)\nDESCRIPTION: Adds a concrete `getCode()` method to the `Person` parent class. This method replaces the abstract `getCode()` method (and its subclass implementations) by returning the value of the new `code` field, centralizing the logic. Requires the `Person` class with the `code` field.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/replace-subclass-with-fields.md#_snippet_8\n\nLANGUAGE: Java\nCODE:\n```\n  char getCode() {\n    return code;\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Adding reference to Interval domain class in IntervalWindow C#\nDESCRIPTION: Adds a private field of type 'Interval' in the window class to maintain a reference to the domain model. This linkage allows the window to delegate interval calculations and maintain synchronization with the domain data.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/duplicate-observed-data.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n\n  private Interval subject;\n\n```\n\n----------------------------------------\n\nTITLE: Original Person Class\nDESCRIPTION: This code snippet represents the original Person class before refactoring. It contains fields for name, office area code, and office number, along with a method to format the telephone number. The goal is to extract the telephone number related responsibilities into a separate class.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/extract-class.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class Person\n{\n  public string Name\n  {\n    get;\n  }\n  public string OfficeAreaCode\n  {\n    get;\n    set;\n  }\n  public string OfficeNumber\n  {\n    get;\n    set;\n  }\n\n  public string GetTelephoneNumber()\n  {\n    return \"(\" + OfficeAreaCode + \") \" + OfficeNumber;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Important Value Fields to Gamma Class in Java\nDESCRIPTION: This snippet adds three private integer fields, `importantValue1`, `importantValue2`, and `importantValue3`, to the `Gamma` class. These fields are used to store the values of local variables from the method being extracted. They will be used in subsequent calculations within the `Gamma` class.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/replace-method-with-method-object.md#_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n  private int importantValue1;\n  private int importantValue2;\n  private int importantValue3;\n\n```\n\n----------------------------------------\n\nTITLE: Initial (Flawed) Extracted `getOutstanding` Method (Java)\nDESCRIPTION: This defines the initially extracted `getOutstanding` method. It calculates the total outstanding amount but is flawed because it doesn't return the calculated value, which is needed by the caller (`printOwing`). It assumes the `orders` collection is accessible (e.g., as a class field).\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/extract-method.md#_snippet_11\n\nLANGUAGE: Java\nCODE:\n```\nvoid getOutstanding() {\n  Enumeration elements = orders.elements();\n  double outstanding = 0.0;\n  while (elements.hasMoreElements()) {\n    Order each = (Order) elements.nextElement();\n    outstanding += each.getAmount();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Delegating setLength from IntervalWindow to Interval (Java)\nDESCRIPTION: Replaces the implementation of the `setLength` method in the `IntervalWindow` class. It now delegates the update of the 'length' value to the `Interval` domain object by calling `subject.setLength(arg)`.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/duplicate-observed-data.md#_snippet_24\n\nLANGUAGE: Java\nCODE:\n```\n    subject.setLength(arg);\n\n```\n\n----------------------------------------\n\nTITLE: Adding Factory Method newNull to Customer Class - PHP\nDESCRIPTION: Introduces a static factory method newNull() in the Customer class that creates and returns an instance of NullCustomer. This encapsulates null-object creation, allowing client code to obtain a null-customer without depending on NullCustomer's existence directly. Requires the NullCustomer class to be defined.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/introduce-null-object.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n  static function newNull() {\n    return new NullCustomer();\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Refactoring: Replacing Customer Field with Method Argument\nDESCRIPTION: This snippet describes how to replace the customer field in the GetDiscountedPrice method with an argument. This is useful when the customer object is already available in the calling context.  It helps to eliminate the dependency on the customer field within the Order class by passing the customer as an argument. This simplifies the refactoring and makes the code cleaner.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/change-bidirectional-association-to-unidirectional.md#_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Update Factory Method for Engineer - C#\nDESCRIPTION: This snippet updates the `Create` factory method to instantiate an `Engineer` object when the input `type` is `ENGINEER`.  It modifies the `switch` statement within the `Create` method. This ensures that the factory method now correctly creates the appropriate type of employee object.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/replace-type-code-with-subclasses.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\n    switch (type)\n    {\n      case ENGINEER:\n        return new Engineer();\n      default:\n        return new Employee(type);\n    }\n\n```\n\n----------------------------------------\n\nTITLE: Adding Initial Constructor to LaborItem in Java\nDESCRIPTION: Adds a constructor to the `LaborItem` subclass. Initially, it mirrors the parent `JobItem` constructor signature (taking quantity, unitPrice, isLabor flag, and Employee) to satisfy inheritance requirements, simply calling the superclass constructor. This is an intermediate step before refining the constructor parameters.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/extract-subclass.md#_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n\n  public LaborItem(int quantity, int unitPrice, boolean isLabor, Employee employee) {\n    super(quantity, unitPrice, isLabor, employee);\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Returning Discounted Price from Order - Java\nDESCRIPTION: Returns the discounted price for an order using the current association. This snippet uses the getDiscountedPrice method from the Order object, assuming the association provides any necessary customer context. No external dependencies are shown in this snippet. Input is the order object; output is its discounted price.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/change-bidirectional-association-to-unidirectional.md#_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\nreturn order.getDiscountedPrice();\n```\n\n----------------------------------------\n\nTITLE: After: Preserving Whole Object for Temperature Check in Java\nDESCRIPTION: The refactored implementation passes the entire Room object to the HeatingPlan. The HeatingPlan class now accesses temperature data directly from the Room object, making the code more maintainable and allowing easy access to other room parameters in the future.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/preserve-whole-object.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nclass Room {\n  // ...\n  public boolean withinPlan(HeatingPlan plan) {\n    return plan.withinRange(this);\n  }\n}\n\nclass HeatingPlan {\n  private TempRange range;\n  public boolean withinRange(Room room) {\n    return (room.getLowestTemp() >= range.getLow() && room.getHighestTemp() <= range.getHigh());\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: EmployeeType Constants for Employee Type Codes in C#\nDESCRIPTION: Declares public constant integer values representing employee types (ENGINEER, SALESMAN, MANAGER) within EmployeeType. Moving these constants here promotes better encapsulation and reduces coupling by associating type codes directly with the type abstraction.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/replace-type-code-with-state-strategy.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic const int ENGINEER = 0,\n                 SALESMAN = 1,\n                 MANAGER = 2;\n```\n\n----------------------------------------\n\nTITLE: Adding Accessor Methods for Start Field in IntervalWindow (Java)\nDESCRIPTION: Defines getter (`getStart`) and setter (`setStart`) methods within the `IntervalWindow` class to encapsulate direct access to the `startField` GUI component's text. `getStart` retrieves the text, and `setStart` updates it.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/duplicate-observed-data.md#_snippet_12\n\nLANGUAGE: Java\nCODE:\n```\n\n  String getStart() {\n    return startField.getText();\n  }\n  void setStart(String arg) {\n    startField.setText(arg);\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Creating Public Properties for Interval - C#\nDESCRIPTION: This code defines public properties (`Start`, `End`, and `Length`) to access the internal string fields. These properties expose the values of the interval to other parts of the code. However, the setters of these properties don't have any implementations yet.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/duplicate-observed-data.md#_snippet_16\n\nLANGUAGE: C#\nCODE:\n```\n  public string Length\n  {\n    get{ return length; }\n    set{ }\n  }\n```\n\n----------------------------------------\n\nTITLE: Providing Default Billing Plan in NullCustomer - PHP\nDESCRIPTION: Adds getPlan() to NullCustomer, which returns BillingPlan::basic() as the default billing plan. Assumes existence of a BillingPlan class with a basic() method. Supports client code in always retrieving a valid plan object regardless of whether a real customer is present.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/introduce-null-object.md#_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\n  public function getPlan() {\n    return BillingPlan::basic();\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Refactored Implementation with Explicit Methods in PHP\nDESCRIPTION: Refactored code with separate methods for each discount type. The parameterized method is replaced with two explicit methods: applyFixedDiscount and applyPercentDiscount, each performing a specific discount calculation without conditional logic.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/replace-parameter-with-explicit-methods.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nclass Order {\n  // ...\n  public function applyFixedDiscount($discount) {\n    $this->price -= $discount;\n  }\n  public function applyPercentDiscount($discount) {\n    $this->price *= $discount;\n  }\n}\n\n// Somewhere in client code\nif ($weekend) {\n  $order->applyFixedDiscount(10);\n}\nif (count($order->items) > 5) {\n  $order->applyPercentDiscount(0.2);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Internal Orders Accessor in Customer (PHP)\nDESCRIPTION: Introduces a public method `friendOrders` within the `Customer` class. This method provides access to the internal `$orders` collection, intended primarily for use by the controlling class (`Order`) to manage the addition and removal of orders during association updates.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/change-unidirectional-association-to-bidirectional.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n\n\n  // Should be used in Order class only.\n  public function friendOrders() {\n    return $orders;\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Modifying Getter to Return ReadOnlyCollection - Java\nDESCRIPTION: This snippet focuses on changing the getter to return a read-only collection. This prevents external code from directly modifying the internal `courses` list, which ensures that the list remains encapsulated. By returning a read-only representation, it prevents external code from manipulating the list without using the add/remove methods, ensuring encapsulation.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/encapsulate-collection.md#_snippet_7\n\nLANGUAGE: Java\nCODE:\n```\nnew ReadOnlyCollection<Course>(courses)\n```\n\n----------------------------------------\n\nTITLE: Refactored Payroll Calculation Using Guard Clauses in PHP\nDESCRIPTION: This improved PHP code snippet shows the refactored 'getPayAmount' method in the 'Payout' class, using guard clauses to return payroll amounts immediately based on the employee's state. Each extreme case (dead, separated, retired) leads to an early return of the respective calculation, removing unnecessary nesting and the intermediary variable '$result'. Required dependencies are the same as before, with all methods ('deadAmount()', 'separatedAmount()', 'retiredAmount()', 'normalPayAmount()') assumed to be defined in the class. Inputs are the same state flags. This flat structure enhances clarity and allows easier future modifications.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/replace-nested-conditional-with-guard-clauses.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nclass Payout {\n  // ...\n  function getPayAmount() {\n    if ($this->isDead) {\n      return $this->deadAmount();\n    }\n    if ($this->isSeparated) {\n      return $this->separatedAmount();\n    }\n    if ($this->isRetired) {\n      return $this->retiredAmount();\n    }\n    return $this->normalPayAmount();\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Delegation Pattern in PHP\nDESCRIPTION: This PHP code illustrates the delegation pattern where the Employee class contains a Person instance and delegates relevant method calls to it. Key methods include getName, setName, and toString, with Employee acting as a wrapper. The delegation field is 'protected $person', initialized in the constructor. Inputs are names managed through setter and getter methods, and outputs include the Employee string representation. Dependencies include the standard PHP functions such as substr and strrpos used in Person's getLastName method. This setup sets a baseline before refactoring to inheritance.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/replace-delegation-with-inheritance.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nclass Person {\n  private $name;\n\n  public function getName() {\n    return $this->name;\n  }\n  public function setName($name) {\n    $this->name = $name;\n  }\n  public function getLastName() {\n    return substr($this->name, 0, strrpos($this->name, ' ') + 1);\n  }\n}\n\nclass Employee {\n  protected $person;\n\n  public function __construct() {\n    $this->person = new Person();\n  }\n  public function getName() {\n    return $this->person->getName();\n  }\n  public function setName($name) {\n    $this->person->setName($name);\n  }\n  public function toString() {\n    return \"Emp: \" . $this->person->getLastName();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing Old Method with New Call in Java\nDESCRIPTION: This code snippet replaces the body of the old method with a call to the new refactored method. The old `findAppointments` method now calls the new `findAppointments` method passing in the original date along with a `null` value for the name parameter to maintain existing functionality. The method takes the date as a parameter and outputs the date.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/add-parameter.md#_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nfindAppointments(date, null);\n```\n\n----------------------------------------\n\nTITLE: Creating ArticleMarkdown Subclass - PHP\nDESCRIPTION: Defines the `ArticleMarkdown` class, which extends the `ArticleView` base class. This step is part of extracting format-specific subclasses. It represents a specialized viewer for rendering articles in Markdown format. The constructor simply calls the parent class constructor.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/form-template-method.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nclass ArticleMarkdown extends ArticleView {\n  public function __construct(Article $article) {\n    parent::__construct($article);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining an Example Scenario Structure\nDESCRIPTION: Illustrates the overall structure of an interactive scenario file. It includes the scenario ID and language, a list of steps, the initial code state, the final code state after refactoring, and a list of actions to guide the user through the process. Each section is separated by '###'.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/README.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nextract-method:java\n\n###\n\n1. Some step.\n\n2. Another step.\n\n###\n\n```\nclass Example {\n\n}\n```\n\n###\n\n```\nclass Example {\n  public int field;\n}\n```\n\n###\n\nSet step 1\n\n# Here's the first popover\n```\n\n----------------------------------------\n\nTITLE: Extracting getUnitPrice Method to LaborItem - PHP\nDESCRIPTION: Extracts the `getUnitPrice` method to the `LaborItem` class. This method calculates the unit price based on the employee's rate, replacing the original implementation. It depends on the `employee` object having a `getRate` method. Expected output: Method definition using employee rate.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/extract-subclass.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n\n  public function getUnitPrice() {\n    return $this->employee->getRate();\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Adding Customer Name Property and Getter in PHP\nDESCRIPTION: Adds a private $name property to the Customer class and a public getName() method to access this property. This establishes encapsulation for the customer's name, enabling the Order class to interact through the Customer object instead of a simple string.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/replace-data-value-with-object.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n  private $name;\n\n  public function getName() {\n    return $this->name;\n  }\n```\n\n----------------------------------------\n\nTITLE: Overriding PayAmount Method in Manager Subclass in C#\nDESCRIPTION: Provides the PayAmount override in the Manager subclass that returns monthly salary plus bonus, reflecting manager-specific payroll calculation. Requires Employee class with MonthlySalary and Bonus properties. The method takes an Employee parameter and returns the computed pay as an integer.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/replace-type-code-with-state-strategy.md#_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\n\n\n  public override int PayAmount(Employee employee)\n  {\n    return employee.MonthlySalary + employee.Bonus;\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Process of Replacing Specific Salary Raise Methods with Calls to Generic Raise Method\nDESCRIPTION: Step-by-step instructions on identifying code patterns such as salary increments, creating a parameterized 'raise' method, updating existing calls, and removing redundant methods. Shows the transition from multiple specific methods to a single parameterized approach.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/parameterize-method.md#_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Adding isMale Accessor to Person (Java)\nDESCRIPTION: Adds a concrete `isMale()` method to the `Person` parent class. This method replaces the abstract `isMale()` method (and its subclass implementations) by returning the value of the new `isMale` field, centralizing the logic. Requires the `Person` class with the `isMale` field.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/replace-subclass-with-fields.md#_snippet_7\n\nLANGUAGE: Java\nCODE:\n```\n  boolean isMale() {\n    return isMale;\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Changing class declaration from 'public' to 'abstract' in Java\nDESCRIPTION: This snippet indicates the process of navigating to the 'JobItem' class declaration and replacing the 'public' modifier with 'abstract'. This change modifies the class’s accessibility, possibly to restrict direct instantiation or to prepare for further refactoring.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/extract-subclass.md#_snippet_17\n\n\n\n----------------------------------------\n\nTITLE: Using Delegation in Java Employee Class\nDESCRIPTION: Initial code showing an Employee class delegating functionality to a Person class. The Employee class contains a Person object reference and forwards method calls to it.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/replace-delegation-with-inheritance.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nclass Person {\n  private String name;\n\n  public String getName() {\n    return name;\n  }\n  public void setName(String name) {\n    this.name = name;\n  }\n  public String getLastName() {\n    return name.substring(name.lastIndexOf(' ') + 1);\n  }\n}\n\nclass Employee {\n  protected Person person;\n\n  public Employee() {\n    this.person = new Person();\n  }\n  public String getName() {\n    return person.getName();\n  }\n  public void setName(String name) {\n    person.setName(name);\n  }\n  @Override public String toString() {\n    return \"Emp: \" + person.getLastName();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Refactored Implementation with Initialization Method in PHP\nDESCRIPTION: The refactored version replaces the public setter with a protected initialization method, which is used by the constructor and can be accessed by subclasses. The InterestAccount class demonstrates proper inheritance.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/remove-setting-method.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nclass Account {\n  // ...\n  private $id;\n\n  public function __construct($id) {\n    $this->initializeId($id);\n  }\n  protected function initializeId($id) {\n    $this->id = 'ID' . $id;\n  }\n}\n\nclass InterestAccount extends Account {\n  private $interestRate;\n  public function __construct($id, $interestRate) {\n    $this->initializeId($id);\n    $this->interestRate = $interestRate;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing Method Visibility from Protected to Private in PHP\nDESCRIPTION: This snippet demonstrates changing the visibility of a method from 'protected' to 'private' to restrict access scope, aligning with encapsulation principles. It involves selecting the 'protected' method in the class and replacing its visibility modifier. This adjustment is part of code refinement for better class encapsulation.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/form-template-method.md#_snippet_16\n\nLANGUAGE: PHP\nCODE:\n```\nReplace \"protected\"\n```\n\n----------------------------------------\n\nTITLE: Implementing NullCustomer Class - PHP\nDESCRIPTION: Implements the NullCustomer class as a subclass of Customer, overriding isNull() to return true. Requires the existence of a Customer class. This class acts as a null-object, enabling client code to interact with non-existent customers without explicit null checks.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/introduce-null-object.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nclass NullCustomer extends Customer {\n  public function isNull() {\n    return true;\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Adding Fields to Person Class (Java)\nDESCRIPTION: Adds `isMale` and `code` fields to the `Person` parent class. These fields will store the data previously implicitly defined by the subclass type (Male/Female) or returned by abstract methods, enabling the removal of subclasses. Requires the `Person` class definition.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/replace-subclass-with-fields.md#_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\n\n\n  private final boolean isMale;\n  private final char code;\n\n\n```\n\n----------------------------------------\n\nTITLE: Selecting Employee Field for Removal from Superclass Java\nDESCRIPTION: This snippet highlights the `employee` field declaration in the superclass, indicating it is being selected for removal. This is a step towards moving the field down the hierarchy using the 'Push Down Field' refactoring pattern.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/extract-subclass.md#_snippet_11\n\nLANGUAGE: Java\nCODE:\n```\n  protected Employee employee;\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Courses Collection Field in Java\nDESCRIPTION: Illustrates initializing the private collection field named 'courses' in the Person class as a new HashSet. This setup prepares the field to hold Course objects in an unstructured set. Dependency on java.util.HashSet is implied. Proper initialization ensures the collection is ready to be modified and accessed safely.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/encapsulate-collection.md#_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\n= new HashSet()\n```\n\n----------------------------------------\n\nTITLE: Original PHP Implementation with Direct Collection Access\nDESCRIPTION: Initial code with poor encapsulation that allows direct manipulation of a courses collection. The Person class exposes its internal SplObjectStorage collection with getters and setters, allowing client code to directly modify the collection.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/encapsulate-collection.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass Course {\n  public __construct($name, $isAdvanced) {\n    // ...\n  }\n  public function isAdvanced() {\n    // ...\n  }\n}\n\nclass Person {\n  private $courses; // SplObjectStorage\n\n  public function getCourses() {\n    return $this->courses;\n  }\n  public function setCourses(SplObjectStorage $arg) {\n    $this->courses = $arg;\n  }\n}\n\n// Client code\n$kent = new Person();\n$s = new SplObjectStorage();\n$s->attach(new Course(\"Smalltalk Programming\", false));\n$s->attach(new Course(\"Appreciating Single Malts\", true));\n$kent->setCourses($s);\nassert(2 === $kent->getCourses()->count());\n$refact = new Course(\"Refactoring\", true);\n$kent->getCourses()->attach($refact);\n$kent->getCourses()->attach(new Course(\"Brutal Sarcasm\", false));\nassert(4 === $kent->getCourses()->count());\n$kent->getCourses()->detach($refact);\nassert(3 === $kent->getCourses()->count());\n\n$count = 0;\nforeach ($kent->getCourses() as $course) {\n  if ($course->isAdvanced()) {\n    $count++;\n  }\n}\nprint(\"Advanced courses: \" . $count);\n```\n\n----------------------------------------\n\nTITLE: Adding fields and constructor for BloodGroup\nDESCRIPTION: This snippet shows adding a final integer field 'code' to the BloodGroup class, initializing it via constructor, and providing a getter method, enabling the class to represent specific blood types as objects.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/replace-type-code-with-class.md#_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\n  private final int code;\n\n  public BloodGroup(int code) {\n    this.code = code;\n  }\n  public int getCode() {\n    return this.code;\n  }\n```\n\n----------------------------------------\n\nTITLE: Updating Female Constructor (Java)\nDESCRIPTION: Updates the constructor in the `Female` subclass to call the new protected constructor in the `Person` parent class using `super()`. It passes the specific values (`false`, `'F'`) corresponding to the Female type, initializing the new fields. Requires the `Female` subclass and the protected `Person` constructor.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/replace-subclass-with-fields.md#_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\n\n\n  Female() {\n    super(false, 'F');\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Client Code Calling Initial Method - C#\nDESCRIPTION: This is an example of client code that calls the original 'GetTelephoneNumber' method.  The 'employee' object is an instance of the 'Person' class or a class derived from it. The method returns a string containing the employee's phone number which is then assigned to the 'phone' variable.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/rename-method.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n// Client code\nphone = employee.GetTelephoneNumber();\n```\n\n----------------------------------------\n\nTITLE: Updating GUI Start Field in Update Method (Java)\nDESCRIPTION: Adds code to the `update` method in `IntervalWindow` to set the text of the `startField` GUI component using the value from `subject.getStart()`. This ensures the start field in the UI stays synchronized with the `Interval` domain object's state.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/duplicate-observed-data.md#_snippet_16\n\nLANGUAGE: Java\nCODE:\n```\n\n    startField.setText(subject.getStart());\n\n```\n\n----------------------------------------\n\nTITLE: Removing Employee Field Initialization from Superclass Constructor Java\nDESCRIPTION: This snippet shows the removal of the `employee` field initialization from the superclass constructor. This is part of refactoring the constructor to only initialize the `employee` field in the subclass where it is needed.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/extract-subclass.md#_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\n    this.employee = employee;\n```\n\n----------------------------------------\n\nTITLE: Moving Fields from TelephoneNumber to Person Class Using PHP\nDESCRIPTION: This snippet selects and transfers the private fields areaCode and number from the TelephoneNumber class into the Person class. Moving fields is the foundational step before moving corresponding getter and setter methods, consolidating state management in the Person class and removing TelephoneNumber's data representation.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/inline-class.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n  private $areaCode;\n  private $number;\n```\n\n----------------------------------------\n\nTITLE: Updating Method Call (Markdown) to 'view' - PHP\nDESCRIPTION: Updates the method call within the original `Article` class (implied context) that delegates to the `ArticleMarkdown` object. It changes the invoked method name from `markdownView` to `view` to reflect the renaming performed in the subclass, allowing for a common method signature.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/form-template-method.md#_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\nReplace \"ArticleMarkdown\"\n```\n\n----------------------------------------\n\nTITLE: Protected Constructor in Employee Class\nDESCRIPTION: This snippet demonstrates the creation of a protected constructor within the `Employee` class.  This constructor is designed to initialize the `$name` and `$id` properties, encapsulating shared initialization logic.  It's protected to ensure it can only be called from within the class or its subclasses.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/pull-up-constructor-body.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n  protected function __construct() {\n  }\n```\n\n----------------------------------------\n\nTITLE: Updating Method Call (HTML) to 'view' - PHP\nDESCRIPTION: Updates the method call within the original `Article` class (implied context) that delegates to the `ArticleHtml` object. It changes the invoked method name from `htmlView` to `view` to reflect the renaming performed in the subclass, allowing for a common method signature.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/form-template-method.md#_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\nReplace \"ArticleHtml\"\n```\n\n----------------------------------------\n\nTITLE: Update Factory Method for Salesman - C#\nDESCRIPTION: This snippet updates the `Create` factory method to instantiate a `Salesman` object when the input `type` is `SALESMAN`. It adds a new `case` to the `switch` statement. This ensures the factory method correctly creates Salesman objects.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/replace-type-code-with-subclasses.md#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\n\n      case SALESMAN:\n        return new Salesman();\n\n```\n\n----------------------------------------\n\nTITLE: Calling Account.delta() in Compute Method in Java\nDESCRIPTION: This snippet modifies the `delta()` method call within the `compute` method to be invoked through the `account` field.  This ensures that the call is made on the original `Account` object. This is necessary since the `compute` method has been extracted to a separate `Gamma` class.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/replace-method-with-method-object.md#_snippet_8\n\nLANGUAGE: java\nCODE:\n```\naccount.delta()\n```\n\n----------------------------------------\n\nTITLE: Refactoring: Modifying Orders Collection in Customer\nDESCRIPTION: This snippet shows how the Orders collection is used. It shows removing getter of orders property, adding an order to the customer, and replacing assignments in the customer class with direct additions of order objects to the collection. This is done to remove the dependency on customer field.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/change-bidirectional-association-to-unidirectional.md#_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: After: Preserving Whole Object in PHP\nDESCRIPTION: The refactored implementation where the entire Room object is passed to the HeatingPlan.withinRange method, allowing direct access to any room properties without changing method signatures.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/preserve-whole-object.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nclass Room {\n  // ...\n  public function withinPlan(HeatingPlan $plan) {\n    return $plan->withinRange($this);\n  }\n}\n\nclass HeatingPlan {\n  private $range; // TempRange\n  public function withinRange(Room $room) {\n    return ($room->getLowestTemp() >= $range->getLow() && $room->getHighestTemp() <= $range->getHigh());\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Parameter Fields to Gamma Class in Java\nDESCRIPTION: This snippet adds three private integer fields, `inputVal`, `quantity`, and `yearToDate`, to the `Gamma` class. These fields represent the parameters of the method being extracted and will be initialized via the constructor.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/replace-method-with-method-object.md#_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n  private int inputVal;\n  private int quantity;\n  private int yearToDate;\n\n```\n\n----------------------------------------\n\nTITLE: Pushing Down getUnitPrice to PartsItem - PHP\nDESCRIPTION: Pushes down the `getUnitPrice` method to `PartsItem` and declare abstract method in `JobItem`. Method will return the value of unitPrice. Requires the `unitPrice` to be defined inside the `PartsItem` class. Expected output: Method definition in PartsItem and abstract definition in JobItem.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/extract-subclass.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n\n  public function getUnitPrice() {\n    return $this->unitPrice;\n  }\n\n```\n\nLANGUAGE: php\nCODE:\n```\n\n\n  public abstract function getUnitPrice();\n\n```\n\n----------------------------------------\n\nTITLE: Original Implementation Using Array in PHP\nDESCRIPTION: The initial code uses a simple array to store team data (name and score) within the Tournament class, accessing elements by numeric indexes.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/replace-array-with-object.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nclass Tournament {\n  public $row = array();\n  \n  public function __construct() {\n    $this->row[0] = \"Liverpool\";\n    $this->row[1] = \"15\";\n  }\n  public function displayScore() {\n    $name = $this->row[0];\n    $score = intval($this->row[1]);\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Delegating Method to Server Class (Java)\nDESCRIPTION: Shows the `getManager()` method added to the `Person` (server) class as part of the 'Hide Delegate' refactoring. This method delegates the call to the `getManager()` method of the internal `department` (delegate) object, hiding the `Department` class from the client.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/hide-delegate.md#_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n  public Person getManager() {\n    return department.getManager();\n  }\n```\n\n----------------------------------------\n\nTITLE: Calling Base Class Constructor - C#\nDESCRIPTION: These snippets show how to call the base class constructor from the derived classes `Employee` and `Department`.  The `base(name)` call passes the name to the base class constructor, which sets the inherited `Name` property. It depends on the protected constructor in the `Party` class.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/extract-superclass.md#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\n: base(name)\n```\n\n----------------------------------------\n\nTITLE: Updating Subclass Constructors to Call Parent (PHP)\nDESCRIPTION: Modifies the constructors in the 'Employee' and 'Department' subclasses. Instead of initializing the '$name' field directly, they now call the parent constructor using 'parent::__construct($name);' to delegate the initialization.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/extract-superclass.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nclass Employee extends Party\n{\n  // ... other fields\n\n  public function __construct($name /*, ... other params */) {\n    parent::__construct($name);\n    // ... other initializations\n  }\n  // ...\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nclass Department extends Party\n{\n  // ... other fields\n\n  public function __construct($name /*, ... other params */) {\n    parent::__construct($name);\n    // ... other initializations\n  }\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Final Testing of PHP Refactored Classes\nDESCRIPTION: This snippet illustrates the start of final testing procedures for the refactored PHP classes, confirming that the refactoring process has preserved functionality. It marks the end of the refactoring cycle with positive testing results indicating the code operates as expected.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/form-template-method.md#_snippet_18\n\nLANGUAGE: PHP\nCODE:\n```\nLet's start the final testing.\nWonderful, it's all working!\n```\n\n----------------------------------------\n\nTITLE: Adding End Field to Interval Class (Java)\nDESCRIPTION: Defines a private String field `end` within the `Interval` domain class, initialized to \"0\". This mirrors the corresponding GUI field's initial value and is part of encapsulating interval data within the domain object.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/duplicate-observed-data.md#_snippet_9\n\nLANGUAGE: Java\nCODE:\n```\n\n  private String end = \"0\";\n\n```\n\n----------------------------------------\n\nTITLE: Extracted `printBanner` Method (Java)\nDESCRIPTION: This defines the `printBanner` method, created by extracting the banner printing logic from the original `printOwing` method. It encapsulates the banner printing logic, has no parameters, and prints a static banner to standard output.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/extract-method.md#_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\nvoid printBanner() {\n  System.out.println(\"*****************************\");\n  System.out.println(\"****** Customer totals ******\");\n  System.out.println(\"*****************************\");\n}\n```\n\n----------------------------------------\n\nTITLE: Employee Type Code Implementation Before Refactoring (Java)\nDESCRIPTION: This code snippet shows the initial implementation of the Employee class using an integer type code to represent different employee roles. The `payAmount()` method uses a switch statement to determine the pay based on the employee type. This approach can become difficult to maintain and extend as more employee types are added.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/replace-type-code-with-state-strategy.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nclass Employee {\n  // ...\n  static final int ENGINEER = 0;\n  static final int SALESMAN = 1;\n  static final int MANAGER = 2;\n\n  public int type;\n\n  public Employee(int arg) {\n    type = arg;\n  }\n\n  public int monthlySalary;\n  public int commission;\n  public int bonus;\n  public int payAmount() {\n    switch (type) {\n      case ENGINEER:\n        return monthlySalary;\n      case SALESMAN:\n        return monthlySalary + commission;\n      case MANAGER:\n        return monthlySalary + bonus;\n      default:\n        throw new RuntimeException(\"Incorrect Employee Code\");\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Refactored Method Definition - C#\nDESCRIPTION: This snippet shows the refactored 'GetOfficeTelephoneNumber' method within the 'Person' class.  It provides a more descriptive name for retrieving the office telephone number.  The method functionality remains the same, concatenating area code and office number.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/rename-method.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic class Person\n{\n  //…\n  public string GetOfficeTelephoneNumber()\n  {\n    return \"(\" + OfficeAreaCode + \") \" + OfficeNumber;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Private DateTime Field to the Wrapper in C#\nDESCRIPTION: Introduces a private DateTime field within MfDateTimeWrap to hold the wrapped instance. This encapsulation is necessary for the wrapper to delegate or extend DateTime functionality. The field is named 'date' and is intended for internal use within the class.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/introduce-local-extension.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n\n  private DateTime date;\n\n```\n\n----------------------------------------\n\nTITLE: Add Constructors to Subclasses - C#\nDESCRIPTION: This snippet demonstrates the addition of constructors to the `Male` and `Female` subclasses that call the newly introduced protected constructor of the `Person` class, passing in the appropriate values for `isMale` and `code`.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/replace-subclass-with-fields.md#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\n\n\n  public Female(): base(false, 'F')\n  {}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing GetUnitPrice in PartsItem Subclass Java\nDESCRIPTION: This snippet shows the implementation of the `getUnitPrice` method in the `PartsItem` subclass. This moves the method down the hierarchy using the 'Push Down Method' refactoring, placing it in the class where the `unitPrice` field it depends on is located.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/extract-subclass.md#_snippet_15\n\nLANGUAGE: Java\nCODE:\n```\n\n  public int getUnitPrice() {\n    return unitPrice;\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Declaring Private Fields in Parent Class in PHP\nDESCRIPTION: Introduces private fields $isMale and $code in the Person parent class to hold data previously hard-coded in subclasses. These fields are intended to replace subclass-specific method implementations by carrying their constant values.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/replace-subclass-with-fields.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n  private $isMale;\n  private $code;\n```\n\n----------------------------------------\n\nTITLE: Original TimeSheet and Employee Classes\nDESCRIPTION: This code shows the original `TimeSheet` and `Employee` classes before the Extract Interface refactoring. The `TimeSheet` class directly depends on the `Employee` class to calculate charges.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/extract-interface.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nclass TimeSheet {\n  // ...\n  public double charge(Employee employee, int days) {\n    double base = employee.getRate() * days;\n    if (employee.hasSpecialSkill()) {\n      return base * 1.05;\n    }\n    else {\n      return base;\n    }\n  }\n}\n\nclass Employee {\n  // ...\n  public int getRate() {\n    // ...\n  }\n  public boolean hasSpecialSkill() {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Simplifying Client Code to Obtain Customer Name Without Null Checks in Java\nDESCRIPTION: Demonstrates refactored client code accessing customer name directly via customer.getName() without conditional null checks, relying on polymorphic null-object to provide default behaviors.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/introduce-null-object.md#_snippet_8\n\nLANGUAGE: Java\nCODE:\n```\nString customerName = customer.getName();\n```\n\n----------------------------------------\n\nTITLE: Initial C# Account Class with Public Setter\nDESCRIPTION: This snippet shows the initial state of an `Account` class in C#. It includes a private `id` field and a corresponding public property `Id` with both a getter and a public setter. The constructor uses the public setter to initialize the `id`.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/remove-setting-method.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Account\n{\n  // ...\n  private string id;\n\n  public string Id\n  {\n    get{ return id; }\n    set{ id = value; }\n  }\n  \n  public Account(string id)\n  {\n    Id = id;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Revised overdraftCharge method with parameters\nDESCRIPTION: Modified version of the overdraftCharge method in AccountType class that accepts daysOverdrawn as a parameter instead of accessing it from the original class.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/move-method.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n  public function overdraftCharge($daysOverdrawn) {\n    if ($this->isPremium()) {\n      $result = 10;\n      if ($daysOverdrawn > 7) {\n        $result += ($daysOverdrawn - 7) * 0.85;\n      }\n      return $result;\n    }\n    else {\n      return $daysOverdrawn * 1.75;\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Final Call to Extension Method in Client Code\nDESCRIPTION: The client code now calls GetNearFirstDate as an extension method on previousDate, replacing direct logic. A comment indicating this method is a foreign method is added for clarity and future reference.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/introduce-foreign-method.md#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\n   // TODO: Foreign method. Should be in the DateTime class.\n\n  // Usage in client code:\n  previousDate.GetNearFirstDate();\n```\n\n----------------------------------------\n\nTITLE: Pausing Execution with 'Wait'\nDESCRIPTION: Illustrates the `Wait` command, which pauses the scenario execution for a specified duration (in milliseconds). This is useful for allowing users to observe changes after actions like selecting or typing.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/README.md#_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\nSelect \"something\"\n\nWait 500ms\n\nSelect \"something else\"\n```\n\n----------------------------------------\n\nTITLE: Moving officeAreaCode Field and Accessors - PHP\nDESCRIPTION: This snippet moves the officeAreaCode field and its corresponding getter/setter methods from the Person class to the TelephoneNumber class. The field is renamed to 'areaCode' for better reusability.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/extract-class.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n\n  private $areaCode;\n\n  public function getAreaCode() {\n    return $this->areaCode;\n  }\n  public function setAreaCode($arg) {\n    $this->areaCode = $arg;\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Update Method Implementation - Java\nDESCRIPTION: This code defines the 'update' method, which is required by the Observer interface. This method will be implemented to update the IntervalWindow's UI based on the state of the observed Interval object. It currently has an empty implementation.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/duplicate-observed-data.md#_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n\n\n  public void update(Observable observed, Object arg) {\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Adding Comment to Foreign Method (Final Step)\nDESCRIPTION: Illustrates adding a documentation comment to the newly created `nextWeek` method. The comment identifies it as a 'Foreign Method' and suggests it ideally belongs in the `Date` class, clarifying its purpose and origin.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/introduce-foreign-method.md#_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n\n\n  /**\n   * Foreign method. Should be in the Date class.\n   */\n```\n\n----------------------------------------\n\nTITLE: Adding Interval Subject to IntervalWindow - Java\nDESCRIPTION: This snippet adds a private Interval field named 'subject' to the IntervalWindow class. This field will hold the reference to the Interval domain object.  It facilitates the separation of concerns between the GUI and the domain logic.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/duplicate-observed-data.md#_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nprivate Interval subject;\n```\n\n----------------------------------------\n\nTITLE: Delegating getStart from IntervalWindow to Interval (Java)\nDESCRIPTION: Replaces the implementation of the `getStart` method in the `IntervalWindow` class. It now retrieves the 'start' value from the `Interval` domain object by calling `subject.getStart()`. Note: Assumes intended code was `getStart()` not `getStart(arg)`.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/duplicate-observed-data.md#_snippet_26\n\nLANGUAGE: Java\nCODE:\n```\n    return subject.getStart();\n\n```\n\n----------------------------------------\n\nTITLE: Pulling Up Common Method to Superclass (PHP)\nDESCRIPTION: Moves the common 'getName' method from subclasses ('Employee', 'Department') to the 'Party' superclass using the 'Pull Up Method' technique. This method now accesses the '$name' field defined in the superclass.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/extract-superclass.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nabstract class Party {\n  protected $name;\n\n  public function getName() {\n    return $this->name;\n  }\n}\n```\n\nLANGUAGE: php\nCODE:\n```\n// Removed from Employee class:\n// public function getName() { ... }\n```\n\nLANGUAGE: php\nCODE:\n```\n// Removed from Department class:\n// public function getName() { ... }\n```\n\n----------------------------------------\n\nTITLE: Initial Payout Class Structure - Java\nDESCRIPTION: This snippet shows the initial state of the Payout class before refactoring. Note the multiple 'if' statements returning '0' in the 'disabilityAmount' method and the nested 'if' structure in 'vacationAmount', which are candidates for consolidation.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/consolidate-conditional-expression.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nclass Payout {\n  // ...\n\n  public int seniority;\n  public int monthsDisabled;\n  public boolean isPartTime;\n\n  public double disabilityAmount() {\n    if (seniority < 2) {\n      return 0;\n    }\n    if (monthsDisabled > 12) {\n      return 0;\n    }\n    if (isPartTime) {\n      return 0;\n    }\n    // compute the disability amount\n    // ...\n  }\n\n  public double vacationAmount() {\n    if (onVacation()) {\n      if (lengthOfService() > 10) {\n        return 1;\n      }\n    }\n    return 0.5;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Salesman: Add Commission Property - C#\nDESCRIPTION: This code snippet adds the `Commission` property to the `Salesman` class. This property is specific to Salesman and is being pushed down from the base class during the refactoring.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/replace-type-code-with-subclasses.md#_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\n\n  public int Commission\n  {\n    get; set; \n  }\n\n```\n\n----------------------------------------\n\nTITLE: Moving and Renaming the AreaCode Property to TelephoneNumber in C#\nDESCRIPTION: Moves the `OfficeAreaCode` concept from the `Person` class to the `TelephoneNumber` class by adding a public `AreaCode` property (getter and setter) to `TelephoneNumber`. The property is renamed for broader reusability.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/extract-class.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic string AreaCode\n{\n  get;\n  set;\n}\n```\n\n----------------------------------------\n\nTITLE: Printing or Typing Text\nDESCRIPTION: Demonstrates the `Print` (or `Type`) command used to insert text at the current cursor position or replace selected text. Both single-line and multiline text insertion are supported.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/README.md#_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\nPrint \"some text\"\n\nPrint:\n```\nMultiline text\ngoes here.\n```\n```\n\n----------------------------------------\n\nTITLE: Delegating setNumber Method\nDESCRIPTION: This code snippet adds a setNumber method to the Person class. It delegates the call to the original setNumber method of the officeTelephone object, which is an instance of the TelephoneNumber class. This is a step in inlining the TelephoneNumber class into the Person class.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/inline-class.md#_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n  public void setNumber(String arg) {\n    officeTelephone.setNumber(arg);\n  }\n```\n\n----------------------------------------\n\nTITLE: Selecting Parameters in overdraftCharge\nDESCRIPTION: This snippet describes the process of selecting parameters in the `overdraftCharge` method during refactoring. The dependencies would be the context of the overdraftCharge method and the Account class. The goal is to identify and possibly select or modify parameters.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/move-method.md#_snippet_7\n\nLANGUAGE: Text\nCODE:\n```\nSelect parameters in \"overdraftCharge\"\n```\n\n----------------------------------------\n\nTITLE: Adding Employee Field Declaration to LaborItem Subclass Java\nDESCRIPTION: This snippet shows the declaration of the `employee` field being added to the `LaborItem` subclass. This completes the 'Push Down Field' refactoring for the `employee` field, placing it in the class where it is specifically used.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/extract-subclass.md#_snippet_12\n\nLANGUAGE: Java\nCODE:\n```\n\n  private Employee employee;\n\n```\n\n----------------------------------------\n\nTITLE: Delegating getNumber Method\nDESCRIPTION: This code snippet adds a getNumber method to the Person class. It delegates the call to the original getNumber method of the officeTelephone object, which is an instance of the TelephoneNumber class. This is a step in inlining the TelephoneNumber class into the Person class.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/inline-class.md#_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n  public String getNumber() {\n    return officeTelephone.getNumber();\n  }\n```\n\n----------------------------------------\n\nTITLE: Adding helper method in Customer for managing orders in Java\nDESCRIPTION: Provides a method 'addOrder' in Customer class to facilitate establishing the bidirectional link by calling Order's 'setCustomer' method. This promotes encapsulation and simplifies association updates.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/change-unidirectional-association-to-bidirectional.md#_snippet_5\n\nLANGUAGE: Java\nCODE:\n```\nvoid addOrder(Order arg) {\n  arg.setCustomer(this);\n}\n```\n\n----------------------------------------\n\nTITLE: Selecting Banner Printing Code for Extraction (Java)\nDESCRIPTION: This snippet shows the initial block of code within the `printOwing` method responsible for printing a banner. This code is identified as a candidate for extraction into a separate method.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/extract-method.md#_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\n  // print banner\n  System.out.println (\"*****************************\");\n  System.out.println (\"****** Customer totals ******\");\n  System.out.println (\"*****************************\");\n```\n\n----------------------------------------\n\nTITLE: Moving TelephoneNumber Fields\nDESCRIPTION: This code snippet declares the number and areaCode fields which are originally inside the TelephoneNumber class to be moved to the Person class. This is part of the Inline Class refactoring where fields from the TelephoneNumber class are moved into the Person class.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/inline-class.md#_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n  private String number;\n  private String areaCode;\n```\n\n----------------------------------------\n\nTITLE: Removing Customer Name Setter in Order - C#\nDESCRIPTION: This snippet describes removing the setter for the customer name. The customer name setter is now private and read-only externally, so the ability to set it in the order class is removed. This code selection marks the code to be removed.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/change-value-to-reference.md#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\n    set { customer.Name = value; }\n```\n\n----------------------------------------\n\nTITLE: Adding Start Field to Interval Class (Java)\nDESCRIPTION: Defines a private String field `start` within the `Interval` domain class, initialized to \"0\". This mirrors the corresponding GUI field's initial value and continues the process of encapsulating interval data within the domain object.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/duplicate-observed-data.md#_snippet_14\n\nLANGUAGE: Java\nCODE:\n```\n\n  private String start = \"0\";\n\n```\n\n----------------------------------------\n\nTITLE: Original Java Employee Class with Constructor\nDESCRIPTION: Defines an Employee class with static final constants representing employee types and a constructor accepting a type parameter. Client code directly instantiates employees using the constructor, which limits flexibility and subclass integration.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/replace-constructor-with-factory-method.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nclass Employee {\n  // ...\n  static final int ENGINEER = 0;\n  static final int SALESMAN = 1;\n  static final int MANAGER = 2;\n\n  public Employee(int type) {\n    this.type = type;\n  }\n}\n\n// Some client code.\nEmployee eng = new Employee(Employee.ENGINEER);\n```\n\n----------------------------------------\n\nTITLE: New Method Implementation - Java\nDESCRIPTION: This code snippet shows the implementation of the new `getOfficeTelephoneNumber` method, which is identical to the original `getTelephoneNumber` method. This is created first and the body of the old method is copied into it.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/rename-method.md#_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n\n  public String getOfficeTelephoneNumber() {\n    return (\"(\" + officeAreaCode + \") \" + officeNumber);\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Creating Customer Class - C#\nDESCRIPTION: Creates a basic Customer class. This class initially has an empty body and is a prerequisite for the subsequent steps of the refactoring. This is a foundational step towards encapsulating customer-related data and behaviors.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/replace-data-value-with-object.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic class Customer\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Initial Factory Method Implementation C#\nDESCRIPTION: This code snippet shows the initial implementation of the factory method `Create` within the `Employee` class. At this stage, the method simply calls the existing constructor, providing a starting point for the refactoring.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/replace-constructor-with-factory-method.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic static Employee Create(int type)\n{\n    return new Employee(type);\n  }\n```\n\n----------------------------------------\n\nTITLE: Replacing numeric code in Person constructor\nDESCRIPTION: This snippet updates the Person class constructor to initialize the bloodGroup field with a new BloodGroup object using the provided code, replacing primitive int usage with object-oriented approach.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/replace-type-code-with-class.md#_snippet_5\n\nLANGUAGE: Java\nCODE:\n```\n  public Person(int code) {\n    bloodGroup = new BloodGroup(code);\n  }\n```\n\n----------------------------------------\n\nTITLE: Person Class SetAreaCode Method\nDESCRIPTION: The setAreaCode method is being moved from the TelephoneNumber class to the Person class, which originally delegates to the TelephoneNumber class.  After moving the field areaCode to the Person class, this setter sets the value of the field in the Person class.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/inline-class.md#_snippet_8\n\nLANGUAGE: java\nCODE:\n```\n    areaCode = arg;\n```\n\n----------------------------------------\n\nTITLE: Calling Corrected `printDetails` Method with Argument (Java)\nDESCRIPTION: This snippet demonstrates calling the corrected `printDetails` method from within `printOwing`, passing the current value of the local `outstanding` variable as an argument to satisfy the method's parameter requirement.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/extract-method.md#_snippet_9\n\nLANGUAGE: Java\nCODE:\n```\n  printDetails(outstanding);\n```\n\n----------------------------------------\n\nTITLE: Initial Order Class with Parameterized Helper Method (C#)\nDESCRIPTION: This C# code shows the initial state of an `Order` class before refactoring. The `GetPrice` method calculates the base price and discount level based on `Quantity` and `ItemPrice`, then passes these values as parameters (`basePrice`, `discountLevel`) to the private `DiscountedPrice` helper method to compute the final discounted price.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/replace-parameter-with-method-call.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Order\n{\n  // ...\n  public double GetPrice()\n  {\n    int basePrice = Quantity * ItemPrice;\n    int discountLevel;\n\n    if (Quantity > 100)\n      discountLevel = 2;\n    else\n      discountLevel = 1;\n\n    double finalPrice = DiscountedPrice(basePrice, discountLevel);\n    return finalPrice;\n  }\n  private double DiscountedPrice(int basePrice, int discountLevel)\n  {\n    if (discountLevel == 2)\n      return basePrice * 0.1;\n    else\n      return basePrice * 0.05;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Order Collection Property to Customer Class in C#\nDESCRIPTION: Defines a read-only property in the Customer class that exposes the collection of associated Order objects. This assists in managing the bidirectional relationship by providing access to the customer's orders.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/change-unidirectional-association-to-bidirectional.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n// Should be used in Order class only.\npublic HashSet<Order> Orders\n{\n  get {\n    return orders;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Name property in NullCustomer class\nDESCRIPTION: Overrides the Name property in the NullCustomer class to return a default value (\"N/A\") instead of null, removing the need for null checks in client code.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/introduce-null-object.md#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\n  public override string Name\n  {\n    get{ return \"N/A\"; }\n  }\n```\n\n----------------------------------------\n\nTITLE: Initializing IntervalWindow Frame with Text Fields - Java\nDESCRIPTION: This Java code initializes an IntervalWindow class which extends the Frame class. It creates three java.awt.TextField objects for start, end and length. It also adds focus listeners to these text fields to handle focus lost events.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/duplicate-observed-data.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nclass IntervalWindow extends Frame {\n  java.awt.TextField startField;\n  java.awt.TextField endField;\n  java.awt.TextField lengthField;\n\n  public IntervalWindow() {\n    startField = new java.awt.TextField();\n    endField = new java.awt.TextField();\n    lengthField = new java.awt.TextField();\n    SymFocus focusListener = new SymFocus();\n    startField.addFocusListener(focusListener);\n    endField.addFocusListener(focusListener);\n    lengthField.addFocusListener(focusListener);\n  }\n\n  class SymFocus extends java.awt.event.FocusAdapter {\n    public void focusLost(java.awt.event.FocusEvent event) {\n      Object object = event.getSource();\n      if (object == startField) {\n        StartField_FocusLost(event);\n      }\n      else if (object == endField) {\n        EndField_FocusLost(event);\n      }\n      else if (object == lengthField) {\n        LengthField_FocusLost(event);\n      }\n    }\n\n    void StartField_FocusLost(java.awt.event.FocusEvent event) {\n      if (isNotInteger(startField.getText())) {\n        startField.setText(\"0\");\n      }\n      calculateLength();\n    }\n\n    void EndField_FocusLost(java.awt.event.FocusEvent event) {\n      if (isNotInteger(endField.getText())) {\n        endField.setText(\"0\");\n      }\n      calculateLength();\n    }\n\n    void LengthField_FocusLost(java.awt.event.FocusEvent event) {\n      if (isNotInteger(lengthField.getText())) {\n        lengthField.setText(\"0\");\n      }\n      calculateEnd();\n    }\n\n    void calculateLength() {\n      try {\n        int start = Integer.parseInt(startField.getText());\n        int end = Integer.parseInt(endField.getText());\n        int length = end - start;\n        lengthField.setText(String.valueOf(length));\n      } catch (NumberFormatException e) {\n        throw new RuntimeException (\"Unexpected Number Format Error\");\n      }\n    }\n    void calculateEnd() {\n      try {\n        int start = Integer.parseInt(startField.getText());\n        int length = Integer.parseInt(lengthField.getText());\n        int end = start + length;\n        endField.setText(String.valueOf(end));\n      } catch (NumberFormatException e) {\n        throw new RuntimeException (\"Unexpected Number Format Error\");\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Default payAmount PHP\nDESCRIPTION: This code defines the `payAmount` method in the superclass and returns the monthly salary.  This ensures a default behavior for employees.  It demonstrates using the default implementation in the base class.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/replace-type-code-with-subclasses.md#_snippet_18\n\nLANGUAGE: PHP\nCODE:\n```\n    return $this->monthlySalary;\n```\n\n----------------------------------------\n\nTITLE: Adding Employee Field Initialization to Subclass Constructor Java\nDESCRIPTION: This snippet shows the addition of the `employee` field initialization to the appropriate subclass constructor (likely `LaborItem`). This moves the initialization logic down the hierarchy, aligning it with where the field is ultimately located.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/extract-subclass.md#_snippet_7\n\nLANGUAGE: Java\nCODE:\n```\n    this.employee = employee;\n```\n\n----------------------------------------\n\nTITLE: Creating Manager Subclass PHP\nDESCRIPTION: This defines the `Manager` subclass extending `Employee`. This class is used for another employee role, following the pattern of subclassing for each employee type.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/replace-type-code-with-subclasses.md#_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\nclass Manager extends Employee {\n  public function getType() {\n    return Employee::MANAGER;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Pushing Down 'Employee' Property into 'LaborItem' Subclass\nDESCRIPTION: The snippet details pushing the 'Employee' property and its initialization into the 'LaborItem' subclass, including adjusting access modifiers for proper inheritance access and updating constructors accordingly.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/extract-subclass.md#_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\npublic Employee Employee\n{ get; private set; }\n```\n\n----------------------------------------\n\nTITLE: Making JobItem Abstract - PHP\nDESCRIPTION: Declares the `JobItem` class as abstract. This prevents direct instantiation of `JobItem` and enforces subclasses to implement abstract methods. No dependencies. Expected output: Modified class declaration.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/extract-subclass.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nabstract\n```\n\n----------------------------------------\n\nTITLE: Advancing Scenario Steps\nDESCRIPTION: Demonstrates the `Set step` command used to advance the scenario to a specific numbered step or the final step. This synchronizes the displayed step list with the ongoing actions.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/README.md#_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\nSet step 1\n\n…\n\nSet final step\n```\n\n----------------------------------------\n\nTITLE: Original Class Structure - C#\nDESCRIPTION: This snippet shows the original class structure before applying the Extract Interface refactoring. The TimeSheet class depends directly on the Employee class to calculate charges based on the employee's rate and special skills. The employee.Rate and employee.HasSpecialSkill() is accessed directly from the Employee class.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/extract-interface.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class TimeSheet\n{\n  // ...\n  public double Charge(Employee employee, int days)\n  {\n    double baseAmount = employee.Rate * days;\n\n\treturn employee.HasSpecialSkill() ? baseAmount * 1.05 : baseAmount;\n  }\n}\n\npublic class Employee\n{\n  // ...\n  public int Rate \n  { get; private set; }\n    // ...\n  public bool HasSpecialSkill()\n  {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Pulling Up Constructor Body to Superclass (PHP)\nDESCRIPTION: Creates a protected constructor in the 'Party' superclass to handle the initialization of the common '$name' field. This centralizes the initialization logic.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/extract-superclass.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nabstract class Party {\n  protected $name;\n\n  protected function __construct($name) {\n    $this->name = $name;\n  }\n\n  public function getName() {\n    return $this->name;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Simulating Compilation Results\nDESCRIPTION: Shows the syntax for simulating compilation feedback. `#C` introduces a compilation message, `#S` indicates success with a corresponding message, and `#F` indicates failure with an error message. Often followed by a `Select` command to highlight the error location.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/README.md#_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\n#C Let's compile this baby.\n\n#S Everything works fine!\n\n…\n\n#C Let's compile this baby.\n\n#F Error! Unknown variable <code>b</code> in method \"someMethod\"\n\nSelect \"b\" in \"someMethod\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Complex Method in Java\nDESCRIPTION: This snippet defines the original complex method, 'gamma', within the Account class in Java. The method performs a sequence of calculations on its input parameters, adjusting values based on conditions, and returns the final computed integer result. There are no explicit dependencies beyond other methods of the Account class, such as 'delta', and key parameters include 'inputVal', 'quantity', and 'yearToDate'—all integers required for the calculation. The output is an integer, and the method is structured procedurally, with opportunities for improvements in clarity.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/replace-method-with-method-object.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nclass Account {\n  // ...\n  int gamma(int inputVal, int quantity, int yearToDate) {\n    int importantValue1 = (inputVal * quantity) + delta();\n    int importantValue2 = (inputVal * yearToDate) + 100;\n    if ((yearToDate - importantValue1) > 100) {\n      importantValue2 -= 20;\n    }\n    int importantValue3 = importantValue2 * 7;\n    // and so on…\n    return importantValue3 - 2 * importantValue1;\n  }\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Adding IsNull property to Customer class in C#\nDESCRIPTION: Adds a virtual IsNull property to the Customer class that returns false by default. This property will be overridden in the null object implementation.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/introduce-null-object.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n  public virtual bool IsNull\n  {\n    get{ return false; }\n  }\n```\n\n----------------------------------------\n\nTITLE: Using Popover Actions\nDESCRIPTION: Demonstrates the basic syntax for creating popovers (tooltips) using the '#' character followed by the text. Popovers attach to selected text or the cursor by default.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/README.md#_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n# Some text\n```\n\n----------------------------------------\n\nTITLE: Defining a protected constructor in the Employee base class\nDESCRIPTION: This snippet shows how to define a protected parameterless constructor in the Employee class to allow inheritance-based instantiation and facilitate calling the base constructor from subclasses.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/pull-up-constructor-body.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nprotected Employee()\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Accessors for Number - PHP\nDESCRIPTION: This snippet adds getter and setter methods for the 'number' field in the TelephoneNumber class.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/extract-class.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\n\n  public function getNumber() {\n    return $this->number;\n  }\n  public function setNumber($arg) {\n    $this->number = $arg;\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Delegating GetTelephoneNumber Call in Person Class (C#)\nDESCRIPTION: Modifies the original `GetTelephoneNumber` method in the `Person` class to simply call the corresponding method on the `officeTelephone` object, delegating the functionality entirely.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/extract-class.md#_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\nreturn officeTelephone.GetTelephoneNumber();\n```\n\n----------------------------------------\n\nTITLE: Conditional Null Check Access for Customer Payment History in Java\nDESCRIPTION: This snippet demonstrates the traditional approach where the client's weeksDelinquent value is conditionally assigned based on whether the customer object is null. If the customer is null, weeksDelinquent is set to zero; otherwise, it uses the customer's payment history to get weeks delinquent in the last year. This pattern is prone to verbose null checks that the refactoring replaces.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/introduce-null-object.md#_snippet_15\n\nLANGUAGE: Java\nCODE:\n```\nint weeksDelinquent;\nif (customer.isNull()) {\n  weeksDelinquent = 0;\n}\nelse {\n  weeksDelinquent = customer.getHistory().getWeeksDelinquentInLastYear();\n}\n```\n\n----------------------------------------\n\nTITLE: Before: Method with Duplicate Code in Conditional Branches\nDESCRIPTION: This Java method contains duplicate code in different branches of an if-else statement. The method validates an email address and sends an email in both branches, while the only difference is the calculation of the total price.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/consolidate-duplicate-conditional-fragments.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\ndouble sendEmailPromotion() {\n  // ...\n  if (isSpecialDeal()) {\n    total = price * 0.95;\n    validateEmailAddress();\n    sendEmail();\n  }\n  else {\n    validateEmailAddress();\n    total = price * 0.98;\n    sendEmail();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Delegating the OfficeNumber Getter in Person Class (C#)\nDESCRIPTION: Rewrites the getter of the original `OfficeNumber` property in the `Person` class to delegate the call to the `Number` property of the `officeTelephone` object.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/extract-class.md#_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\n{\n    return officeTelephone.Number;\n  }\n```\n\n----------------------------------------\n\nTITLE: Selecting Details Code for Extraction PHP\nDESCRIPTION: This snippet shows the block of code responsible for printing customer name and outstanding amount. It is selected from the original 'printOwing' method as the next candidate for extraction. Note the placeholder indicating the 'outstanding' variable.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/extract-method.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n  // print details\n  print(\"name: \" . $this->name);\n  print(\"amount: \" . |||$outstanding|||);\n```\n\n----------------------------------------\n\nTITLE: Updating Person's getTelephoneNumber Method (Java)\nDESCRIPTION: Updates the `getTelephoneNumber` method in the `Person` class to delegate the call to the corresponding method in the `officeTelephone` object.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/extract-class.md#_snippet_12\n\nLANGUAGE: java\nCODE:\n```\nreturn officeTelephone.getTelephoneNumber();\n```\n\n----------------------------------------\n\nTITLE: Replacing 'IsLabor' Property with Boolean Field\nDESCRIPTION: The snippet shows the insertion of boolean 'isLabor' field, its initialization, and update from constructor parameters, replacing the previous property to simplify state management.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/csharp/extract-subclass.md#_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nprivate bool isLabor;\n\n// Constructor assignment\nthis.isLabor = isLabor;\n```\n\n----------------------------------------\n\nTITLE: Removing Original officeAreaCode Field from Person (Java)\nDESCRIPTION: Removes the original `officeAreaCode` field from the `Person` class as it has been successfully moved to the `TelephoneNumber` class.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/extract-class.md#_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nprivate String officeAreaCode;\n\n```\n\n----------------------------------------\n\nTITLE: Refactoring Towards Composite Pattern (Conceptual - PHP)\nDESCRIPTION: Illustrates potential further refactoring in the 'Department' class towards the Composite design pattern. This involves renaming the '$staff' collection and its accessor/mutator methods ('getStaff'/'addStaff' to 'getItems'/'addItem') and changing the type hint for added items from 'Employee' to the more general 'Party', allowing departments to contain other departments.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/extract-superclass.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nclass Department extends Party\n{\n  private $items = []; // Renamed from $staff\n\n  public function __construct($name) {\n    parent::__construct($name);\n  }\n\n  public function addItem(Party $item) { // Renamed from addStaff, type hint changed to Party\n    $this->items[] = $item;\n  }\n\n  public function getItems() { // Renamed from getStaff\n    return $this->items;\n  }\n\n  public function getAnnualCost() {\n    $total = 0;\n    foreach ($this->getItems() as $item) { // Using getItems()\n      $total += $item->getAnnualCost();\n    }\n    return $total;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Returning Discounted Order Price - PHP\nDESCRIPTION: This snippet demonstrates calling the getDiscountedPrice method on an order object to retrieve its discounted price. It assumes that the Order class implements a getDiscountedPrice() method, which calculates and returns the price based on current discounts. The code requires an initialized Order object and expects the method to return a numeric value representing the discounted price.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/change-bidirectional-association-to-unidirectional.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n     return $order->getDiscountedPrice();\n```\n\n----------------------------------------\n\nTITLE: Resolving Customer Instance from Order - PHP\nDESCRIPTION: This snippet iterates through all Customer instances to find which one contains the given order, allowing retrieval of the Customer object associated with a particular Order. It depends on the existence of a static getInstances() method in the Customer class and an instance method containsOrder that determines if the order is associated. The method returns the corresponding Customer object or null if no association is found, providing an alternative to direct customer fields.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/php/change-bidirectional-association-to-unidirectional.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n    foreach (Customer::getInstances() as $customer) {\n      if ($customer->containsOrder($this)) {\n        return $customer;\n      }\n    }\n    return null;\n```\n\n----------------------------------------\n\nTITLE: Accessing Fields and Methods Directly from Passed Instances\nDESCRIPTION: This snippet instructs to access necessary fields and methods directly from the received class instance instead of from the current object context. It provides an example of retrieving 'daysOverdrawn' by calling 'account.getDaysOverdrawn()' after passing the 'account' instance, facilitating method moving and ensuring correct data access.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/java/move-method.md#_snippet_6\n\nLANGUAGE: C\nCODE:\n```\naccount.getDaysOverdrawn()\n```\n\n----------------------------------------\n\nTITLE: Moving the Cursor with 'Go to'\nDESCRIPTION: Shows how to move the cursor to specific locations using the `Go to` command. This can be done by marking the target position with `|||` in single or multiline text, or by using named targets like `end of file`, `start of \"someMethod\"`, `before \"someMethod\"`, `parameters of \"someMethod\"`, etc. Context can be provided using `in \"ExampleClass\"`.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/README.md#_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nGo to \"private |||int field;\"\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nGo to:\n```\nclass Example {\n  private |||int field;\"\n}\n```\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nGo to the end of file\nGo to start of \"someMethod\"\nGo to end of \"someMethod\"\nGo to before \"someMethod\" in \"ExampleClass\"\nGo to after \"someMethod\"\nGo to parameters of \"someMethod\"\nGo to the end of parameters of \"someMethod\" in \"ExampleClass\"\n```\n\n----------------------------------------\n\nTITLE: Adjusting Indentation (Indent/Deindent)\nDESCRIPTION: Describes the `Indent` and `Deindent` commands used to increase or decrease the indentation level of the selected text. An optional number `N` can specify how many tab stops to indent or deindent.\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/README.md#_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\nIndent\nIndent N times\n\nDeindent\nDeindent N times\n```\n\n----------------------------------------\n\nTITLE: Configuring Popover Options\nDESCRIPTION: Provides examples of popover customization options specified after the '#'. Options include direction (<, >, V, ^), delay (milliseconds), remaining visible (+), closing previous popovers (=), and attaching to the steps list (Q).\nSOURCE: https://github.com/refactoringguru/refactoring-examples/blob/main/interactive/README.md#_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n# Simple popover\n\n#<2000+ Popover to the right of selected text, which will fire next action in 2 seconds, but will remain visible.\n\n#= Close all visible popovers and show new one.\n\n#Q Show final popover, attached to steps.\n```"
  }
]