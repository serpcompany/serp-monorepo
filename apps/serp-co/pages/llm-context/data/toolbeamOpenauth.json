[
  {
    "owner": "toolbeam",
    "repo": "openauth",
    "content": "TITLE: Implementing PKCE Flow for SPA Applications\nDESCRIPTION: Demonstrates how to use the PKCE (Proof Key for Code Exchange) flow for Single Page Applications, which provides additional security for public clients that cannot securely store client secrets.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/client.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst { challenge, url } = await client.authorize(\n  <redirect_uri>,\n  \"code\",\n  { pkce: true }\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom UI Handlers with PasswordProvider\nDESCRIPTION: Example showing the callbacks expected by PasswordProvider for handling login, registration, and password change requests. These callbacks allow for implementing custom UI for each screen.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/password.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nPasswordProvider({\n  // ...\n  login: (req, form, error) => Promise<Response>\n  register: (req, state, form, error) => Promise<Response>\n  change: (req, state, form, error) => Promise<Response>\n})\n```\n\n----------------------------------------\n\nTITLE: Creating an OpenAuth Client in TypeScript\nDESCRIPTION: Initializes an OpenAuth client with the required client ID and issuer URL. This is the first step in implementing OAuth flows with the OpenAuth library.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/client.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createClient } from \"@openauthjs/openauth/client\"\n\nconst client = createClient({\n  clientID: \"my-client\",\n  issuer: \"https://auth.myserver.com\"\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing OAuth 2.0 Provider in TypeScript\nDESCRIPTION: Shows how to set up and configure an OAuth 2.0 provider with OpenAuth. The example demonstrates setting up essential parameters like clientID, clientSecret, and endpoint URLs.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/oauth2.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Oauth2Provider } from \"@openauthjs/openauth/provider/oauth2\"\n\nexport default issuer({\n  providers: {\n    oauth2: Oauth2Provider({\n      clientID: \"1234567890\",\n      clientSecret: \"0987654321\",\n      endpoint: {\n        authorization: \"https://auth.myserver.com/authorize\",\n        token: \"https://auth.myserver.com/token\"\n      }\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Making Authenticated API Requests from Client\nDESCRIPTION: Demonstrates how to include access tokens in API requests from client-side applications using the Authorization header.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/README.md#2025-04-16_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nconst accessToken = localStorage.getItem(\"access_token\")\nfetch(\"https://auth.example.com/api/user\", {\n  headers: {\n    Authorization: `Bearer ${accessToken}`,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Verifying Access Tokens\nDESCRIPTION: Verifies the validity of an access token against defined subject schemas. This is typically used for authenticating API requests or protected routes.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/client.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst verified = await client.verify(subjects, tokens.access)\n```\n\n----------------------------------------\n\nTITLE: Initiating Auth Flow with PKCE for SPAs\nDESCRIPTION: Starts the authorization flow with PKCE (Proof Key for Code Exchange) for single-page applications and mobile apps.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/README.md#2025-04-16_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nconst { challenge, url } = await client.authorize(<redirect_uri>, \"code\", { pkce: true })\nlocalStorage.setItem(\"challenge\", JSON.stringify(challenge))\nlocation.href = url\n```\n\n----------------------------------------\n\nTITLE: Importing Subjects for OpenAuth Issuer\nDESCRIPTION: Shows how to import and use subjects defined in a separate file with the OpenAuth issuer configuration.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/index.mdx#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { subjects } from \"./subjects.js\"\n\nconst app = issuer({\n  providers: { ... },\n  subjects,\n  ...\n})\n```\n\n----------------------------------------\n\nTITLE: Verifying Access Token on Server in TypeScript\nDESCRIPTION: Shows how to verify an access token on the server side. This is crucial for protecting your API endpoints and ensuring the authenticity of incoming requests.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/index.mdx#2025-04-16_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nconst verified = await client.verify(subjects, accessToken)\nconsole.log(verified.subject)\n```\n\n----------------------------------------\n\nTITLE: Refreshing Access Tokens\nDESCRIPTION: Refreshes an expired access token using a refresh token. This is commonly used in SPA applications to maintain user sessions without requiring re-authentication.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/client.mdx#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst next = await client.refresh(<refresh_token>)\n```\n\n----------------------------------------\n\nTITLE: Accessing Verified Subject Data\nDESCRIPTION: Demonstrates how to access subject data from a verified token and handle refreshed tokens. This is used to extract user information after token verification.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/client.mdx#2025-04-16_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n// based on the subjects you defined earlier\nconsole.log(verified.subject.properties.userID)\n\nif (verified.tokens) {\n  const { access, refresh } = verified.tokens\n}\n```\n\n----------------------------------------\n\nTITLE: Exchanging Authorization Code with PKCE in SPAs\nDESCRIPTION: Completes the PKCE-enhanced authorization code flow for client-side applications by exchanging the code for tokens.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/README.md#2025-04-16_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nconst challenge = JSON.parse(localStorage.getItem(\"challenge\"))\nconst exchanged = await client.exchange(\n  query.get(\"code\"),\n  redirect_uri,\n  challenge.verifier,\n)\nif (exchanged.err) throw new Error(\"Invalid code\")\nlocalStorage.setItem(\"access_token\", exchanged.tokens.access)\nlocalStorage.setItem(\"refresh_token\", exchanged.tokens.refresh)\n```\n\n----------------------------------------\n\nTITLE: Exchanging Code for Tokens with PKCE in TypeScript\nDESCRIPTION: Exchanges the authorization code for tokens using the PKCE flow. This is used after the user is redirected back to the application in SPA or mobile scenarios.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/index.mdx#2025-04-16_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nconst challenge = JSON.parse(localStorage.getItem(\"challenge\"))\nconst exchanged = await client.exchange(\n  query.get(\"code\"),\n  redirect_uri,\n  challenge.verifier\n)\nif (exchanged.err) throw new Error(\"Invalid code\")\nlocalStorage.setItem(\"access_token\", exchanged.tokens.access)\nlocalStorage.setItem(\"refresh_token\", exchanged.tokens.refresh)\n```\n\n----------------------------------------\n\nTITLE: Verifying Tokens with Refresh in TypeScript\nDESCRIPTION: Verifies the access token and optionally refreshes it if expired. This function is used to validate the user's session and obtain fresh tokens when needed.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/index.mdx#2025-04-16_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nconst verified = await client.verify(subjects, cookies.get(\"access_token\")!, {\n  refresh: cookies.get(\"refresh_token\") || undefined,\n})\nconsole.log(\n  verified.subject.type,\n  verified.subject.properties,\n  verified.refresh,\n  verified.access,\n)\n```\n\n----------------------------------------\n\nTITLE: Refreshing Tokens with Access Token Validation\nDESCRIPTION: Optimized token refresh that only performs a refresh operation if the provided access token is no longer valid, improving efficiency by avoiding unnecessary refresh operations.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/client.mdx#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst next = await client.refresh(<refresh_token>, { access: <access_token> })\n```\n\n----------------------------------------\n\nTITLE: Basic Issuer Function Configuration Structure\nDESCRIPTION: Shows the required configuration structure for the issuer function, including providers, storage, subjects, and success callback.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/README.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = issuer({\n  providers: { ... },\n  storage,\n  subjects,\n  success: async (ctx, value) => { ... }\n})\n```\n\n----------------------------------------\n\nTITLE: CodeProvider Request Handler Structure in TypeScript\nDESCRIPTION: This snippet outlines the structure of the request handler expected by CodeProvider. It shows the parameters passed to the handler and the expected return type.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/code.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nCodeProvider({\n  // ...\n  request: (req, state, form, error) => Promise<Response>\n})\n```\n\n----------------------------------------\n\nTITLE: Exchanging an Authorization Code for Tokens\nDESCRIPTION: Exchanges the authorization code received after user authentication for access and refresh tokens. This is called after the user has been redirected back to your application.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/client.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst tokens = await client.exchange(query.get(\"code\"), redirect_uri)\n```\n\n----------------------------------------\n\nTITLE: Exchanging Authorization Code for Tokens in TypeScript\nDESCRIPTION: Exchanges the authorization code for access and refresh tokens. This is typically done after the user is redirected back to your application with the code.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/index.mdx#2025-04-16_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nconst tokens = await client.exchange(query.get(\"code\"), redirect_uri)\nconsole.log(tokens.access, tokens.refresh)\n```\n\n----------------------------------------\n\nTITLE: Exchanging Authorization Code for Tokens in SSR\nDESCRIPTION: Completes the authorization code flow by exchanging the code for access and refresh tokens in a server-side context.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/README.md#2025-04-16_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n// the redirect_uri is the original redirect_uri you passed in and is used for verification\nconst tokens = await client.exchange(query.get(\"code\"), redirect_uri)\nconsole.log(tokens.access, tokens.refresh)\n```\n\n----------------------------------------\n\nTITLE: Implementing Success Callback for Authentication Flow\nDESCRIPTION: Defines the success callback that handles different authentication provider responses and creates appropriate subject tokens.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/README.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = issuer({\n  providers: { ... },\n  subjects,\n  async success(ctx, value) {\n    let userID\n    if (value.provider === \"password\") {\n      console.log(value.email)\n      userID = ... // lookup user or create them\n    }\n    if (value.provider === \"github\") {\n      console.log(value.tokenset.access)\n      userID = ... // lookup user or create them\n    }\n    return ctx.subject(\"user\", {\n      userID,\n      'a workspace id'\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: OpenAuth Server Implementation\nDESCRIPTION: Core OpenAuth server setup with email code verification provider and memory storage\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/start/standalone.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { issuer } from \"@openauthjs/openauth\"\nimport { CodeUI } from \"@openauthjs/openauth/ui/code\"\nimport { CodeProvider } from \"@openauthjs/openauth/provider/code\"\nimport { MemoryStorage } from \"@openauthjs/openauth/storage/memory\"\nimport { subjects } from \"./subjects\"\n\nasync function getUser(email: string) {\n  // Get user from database and return user ID\n  return \"123\"\n}\n\nexport default issuer({\n  subjects,\n  storage: MemoryStorage(),\n  providers: {\n    code: CodeProvider(\n      CodeUI({\n        sendCode: async (email, code) => {\n          console.log(email, code)\n        },\n      }),\n    ),\n  },\n  success: async (ctx, value) => {\n    if (value.provider === \"code\") {\n      return ctx.subject(\"user\", {\n        id: await getUser(value.claims.email)\n      })\n    }\n    throw new Error(\"Invalid provider\")\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Verifying Tokens with Automatic Refresh\nDESCRIPTION: Verifies an access token and automatically refreshes it if expired, using a provided refresh token. This combines verification and refresh operations for more streamlined token management.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/client.mdx#2025-04-16_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst verified = await client.verify(<subjects>, <token>, { refresh: <refresh_token> })\n```\n\n----------------------------------------\n\nTITLE: Initializing OpenAuth Server with Issuer Function in TypeScript\nDESCRIPTION: Demonstrates the basic setup of an OpenAuth server using the issuer function. It includes placeholders for providers, storage, subjects, and success callback.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/issuer.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { issuer } from \"@openauthjs/openauth\"\n\nconst app = issuer({\n  providers: { ... },\n  storage,\n  subjects,\n  success: async (ctx, value) => { ... }\n})\n```\n\n----------------------------------------\n\nTITLE: Making Authenticated API Requests in TypeScript\nDESCRIPTION: Demonstrates how to include the access token in API requests to authenticate the user. This is typically done for protected endpoints in your application.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/index.mdx#2025-04-16_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nconst accessToken = localStorage.getItem(\"access_token\")\nfetch(\"https://auth.example.com/api/user\", {\n  headers: {\n    Authorization: `Bearer ${accessToken}`,\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Password Provider with UI for OpenAuth\nDESCRIPTION: Sets up the password provider with a default UI implementation, including a callback for sending verification codes for password recovery.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/index.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PasswordProvider } from \"@openauthjs/openauth/provider/password\"\nimport { PasswordUI } from \"@openauthjs/openauth/ui/password\"\n\nconst app = issuer({\n  providers: {\n    github: ...,\n    password: PasswordProvider(\n      PasswordUI({\n        sendCode: async (email, code) => {\n          console.log(email, code)\n        },\n      }),\n    ),\n  },\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Success Callback for OpenAuth\nDESCRIPTION: Defines the success callback that handles user identification and lookup after a successful authentication flow, returning subject data for the access token.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/index.mdx#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = issuer({\n  providers: { ... },\n  subjects,\n  async success(ctx, value) {\n    let userID\n    if (value.provider === \"password\") {\n      console.log(value.email)\n      userID = ... // lookup user or create them\n    }\n    if (value.provider === \"github\") {\n      console.log(value.tokenset.access)\n      userID = ... // lookup user or create them\n    }\n    return ctx.subject(\"user\", {\n      userID,\n      'a workspace id'\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Handling Token Refresh Results\nDESCRIPTION: Processes the result of a token refresh operation, handling both successful refreshes and error cases. This pattern allows for graceful degradation when token refreshes fail.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/client.mdx#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nif (!next.err) {\n  // tokens are still valid\n}\nif (next.tokens) {\n  const { access, refresh } = next.tokens\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAuth Providers\nDESCRIPTION: Demonstrates how to configure authentication providers like GitHub and Google for OpenAuth issuer.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/issuer.mdx#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GithubProvider } from \"@openauthjs/openauth/provider/github\"\n\nissuer({\n  providers: {\n    github: GithubProvider()\n  }\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  providers: {\n    github: GithubProvider(),\n    google: GoogleProvider()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Access Tokens on Server\nDESCRIPTION: Shows how to validate access tokens on the server side when receiving API requests from clients.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/README.md#2025-04-16_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nconst verified = await client.verify(subjects, accessToken)\nconsole.log(verified.subject)\n```\n\n----------------------------------------\n\nTITLE: Starting an OAuth Authorization Flow\nDESCRIPTION: Initiates the OAuth authorization flow by generating a redirect URL to the authorization server. This example uses the authorization code flow, which is more secure than the token flow.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/client.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst redirect_uri = \"https://myserver.com/callback\"\n\nconst { url } = await client.authorize(\n  redirect_uri,\n  \"code\"\n)\n```\n\n----------------------------------------\n\nTITLE: Initiating PKCE Authorization Flow for SPA/Mobile in TypeScript\nDESCRIPTION: Generates an authorization URL with PKCE for single-page applications or mobile apps. This flow is more secure for public clients that cannot keep secrets.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/index.mdx#2025-04-16_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nconst { challenge, url } = await client.authorize(<redirect_uri>, \"code\", { pkce: true })\nlocalStorage.setItem(\"challenge\", JSON.stringify(challenge))\nlocation.href = url\n```\n\n----------------------------------------\n\nTITLE: Handling Refresh Token Errors in OpenAuth\nDESCRIPTION: Shows how to detect and handle refresh token errors by checking the error type using the instanceof operator.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/client.mdx#2025-04-16_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nimport { InvalidRefreshTokenError } from \"@openauthjs/openauth/error\"\n\nconsole.log(err instanceof InvalidRefreshTokenError)\n```\n\n----------------------------------------\n\nTITLE: Creating an OpenAuth Client\nDESCRIPTION: Initializes an OpenAuth client for interacting with the authentication server from frontend applications.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/README.md#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createClient } from \"@openauthjs/openauth/client\"\n\nconst client = createClient({\n  clientID: \"my-client\",\n  issuer: \"https://auth.myserver.com\", // url to the OpenAuth server\n})\n```\n\n----------------------------------------\n\nTITLE: OAuth Callback Route Handler\nDESCRIPTION: API route for handling OAuth callback and token exchange\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/start/standalone.mdx#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { client, setTokens } from \"../../auth\"\nimport { type NextRequest, NextResponse } from \"next/server\"\n\nexport async function GET(req: NextRequest) {\n  const url = new URL(req.url)\n  const code = url.searchParams.get(\"code\")\n\n  const exchanged = await client.exchange(code!, `${url.origin}/api/callback`)\n\n  if (exchanged.err) return NextResponse.json(exchanged.err, { status: 400 })\n\n  await setTokens(exchanged.tokens.access, exchanged.tokens.refresh)\n\n  return NextResponse.redirect(`${url.origin}/`)\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying OpenAuth Server on Bun\nDESCRIPTION: Shows how to deploy the OpenAuth server on Bun by exporting the app directly.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/issuer.mdx#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport default app\n```\n\n----------------------------------------\n\nTITLE: Initiating Authorization Flow for SSR Sites in TypeScript\nDESCRIPTION: Generates an authorization URL for the code flow in server-side rendering scenarios. This URL is used to redirect the user to the authentication page.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/index.mdx#2025-04-16_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nconst { url } = await client.authorize(\n  <redirect-uri>,\n  \"code\"\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing OpenAuth Client in TypeScript\nDESCRIPTION: Creates an OpenAuth client instance with a client ID and issuer URL. This is the first step in setting up OpenAuth in your application.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/index.mdx#2025-04-16_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createClient } from \"@openauthjs/openauth/client\"\n\nconst client = createClient({\n  clientID: \"my-client\",\n  issuer: \"https://auth.myserver.com\" // url to the OpenAuth server\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Provider for OpenAuth\nDESCRIPTION: Demonstrates how to set up the GitHub OAuth provider for authentication, including client ID, secret, and required scopes.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/README.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GithubProvider } from \"@openauthjs/openauth/provider/github\"\n\nconst app = issuer({\n  providers: {\n    github: GithubProvider({\n      clientID: process.env.GITHUB_CLIENT_ID!,\n      clientSecret: process.env.GITHUB_CLIENT_SECRET!,\n      scopes: [\"user:email\"],\n    }),\n  },\n  ...\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Cloudflare KV Storage in OpenAuth\nDESCRIPTION: Example showing how to import and configure the Cloudflare KV storage adapter with a custom namespace and integrate it with the OpenAuth issuer.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/storage/cloudflare.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CloudflareStorage } from \"@openauthjs/openauth/storage/cloudflare\"\n\nconst storage = CloudflareStorage({\n  namespace: \"my-namespace\"\n})\n\n\nexport default issuer({\n  storage,\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Issuer URL in OpenAuth Client Configuration\nDESCRIPTION: Shows how to configure the OpenAuth server URL in the client configuration, pointing to the authentication server endpoint.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/client.mdx#2025-04-16_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  issuer: \"https://auth.myserver.com\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Memory Storage for OpenAuth\nDESCRIPTION: Sets up in-memory storage for OpenAuth, suitable for testing purposes. Other storage options include DynamoDB for AWS and KV for Cloudflare.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/index.mdx#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MemoryStorage } from \"@openauthjs/openauth/storage/memory\"\n\nconst app = issuer({\n  providers: { ... },\n  subjects,\n  async success(ctx, value) { ... },\n  storage: MemoryStorage(),\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication Providers for OpenAuth Server in TypeScript\nDESCRIPTION: Shows how to add and configure multiple authentication providers (GitHub and Password) to the OpenAuth server.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/issuer.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GithubProvider } from \"@openauthjs/openauth/provider/github\"\nimport { PasswordProvider } from \"@openauthjs/openauth/provider/password\"\n\nconst app = issuer({\n  providers: {\n    github: GithubProvider({\n      // ...\n    }),\n    password: PasswordProvider({\n      // ...\n    }),\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Handling Token Exchange Errors\nDESCRIPTION: Demonstrates error handling for the token exchange process, including specifically handling invalid authorization code errors and other potential errors.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/client.mdx#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { InvalidAuthorizationCodeError } from \"@openauthjs/openauth/error\"\n\nif (exchanged.err) {\n  if (exchanged.err instanceof InvalidAuthorizationCodeError) {\n    // handle invalid code error\n  }\n  else {\n    // handle other errors\n  }\n}\n\nconst { access, refresh } = exchanged.tokens\n```\n\n----------------------------------------\n\nTITLE: Configuring CodeProvider with CodeUI in TypeScript\nDESCRIPTION: This snippet demonstrates how to set up a CodeProvider with CodeUI in an OpenAuth issuer configuration. It includes customizing the UI copy and defining a sendCode function.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/code.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CodeUI } from \"@openauthjs/openauth/ui/code\"\nimport { CodeProvider } from \"@openauthjs/openauth/provider/code\"\n\nexport default issuer({\n  providers: {\n    code: CodeProvider(\n      CodeUI({\n        copy: {\n          code_info: \"We'll send a pin code to your email\"\n        },\n        sendCode: (claims, code) => console.log(claims.email, code)\n      })\n    )\n  },\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring DynamoDB Storage Adapter in TypeScript\nDESCRIPTION: Demonstrates how to import and configure the DynamoStorage adapter for use with OpenAuth. It sets up the storage with a specified table name and key attributes.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/storage/dynamo.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DynamoStorage } from \"@openauthjs/openauth/storage/dynamo\"\n\nconst storage = DynamoStorage({\n  table: \"my-table\",\n  pk: \"pk\",\n  sk: \"sk\"\n})\n\nexport default issuer({\n  storage,\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Password Provider to OpenAuth\nDESCRIPTION: Demonstrates importing and initializing the password provider alongside an existing GitHub provider.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/index.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PasswordProvider } from \"@openauthjs/openauth/provider/password\"\n\nconst app = issuer({\n  providers: {\n    github: ...,\n    password: PasswordProvider(...),\n  },\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Client ID in OpenAuth Client\nDESCRIPTION: Demonstrates how to set up the client ID in the OpenAuth client configuration. Different applications should use unique client IDs.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/client.mdx#2025-04-16_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  clientID: \"my-client\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing OpenAuth Server\nDESCRIPTION: Server-side implementation of OpenAuth with email code verification provider and memory storage.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/start/sst.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { handle } from \"hono/aws-lambda\"\nimport { issuer } from \"@openauthjs/openauth\"\nimport { CodeUI } from \"@openauthjs/openauth/ui/code\"\nimport { CodeProvider } from \"@openauthjs/openauth/provider/code\"\nimport { MemoryStorage } from \"@openauthjs/openauth/storage/memory\"\nimport { subjects } from \"./subjects\"\n\nasync function getUser(email: string) {\n  // Get user from database and return user ID\n  return \"123\"\n}\n\nconst app = issuer({\n  subjects,\n  storage: MemoryStorage(),\n  // Remove after setting custom domain\n  allow: async () => true,\n  providers: {\n    code: CodeProvider(\n      CodeUI({\n        sendCode: async (email, code) => {\n          console.log(email, code)\n        },\n      }),\n    ),\n  },\n  success: async (ctx, value) => {\n    if (value.provider === \"code\") {\n      return ctx.subject(\"user\", {\n        id: await getUser(value.claims.email)\n      })\n    }\n    throw new Error(\"Invalid provider\")\n  },\n})\n\n\nexport const handler = handle(app)\n```\n\n----------------------------------------\n\nTITLE: Adding Subject Payload in Success Callback\nDESCRIPTION: This example shows how to add subject data in the success callback when a user completes the authentication flow. It demonstrates looking up a user ID and adding it to the subject payload.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/subject.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = issuer({\n  providers: { ... },\n  subjects,\n  async success(ctx, value) {\n    let userID\n    if (value.provider === \"password\") {\n      console.log(value.email)\n      userID = ... // lookup user or create them\n    }\n    return ctx.subject(\"user\", {\n      userID\n    })\n  },\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Exchanging Code with PKCE Verifier\nDESCRIPTION: Exchanges the authorization code using the PKCE verifier for SPA applications. This completes the PKCE flow by providing the previously generated challenge verifier.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/client.mdx#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst exchanged = await client.exchange(\n  <code>,\n  <redirect_uri>,\n  <challenge.verifier>\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Subject Schema with Multiple Types\nDESCRIPTION: This example shows how to create a subject schema with multiple subject types for different user roles. It uses valibot to define the shape of each subject type.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/subject.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst subjects = createSubjects({\n  user: object({\n    userID: string()\n  }),\n  admin: object({\n    workspaceID: string()\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Provider for OpenAuth\nDESCRIPTION: Sets up GitHub as an authentication provider for OpenAuth, requiring client ID, secret, and scopes from environment variables.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/index.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GithubProvider } from \"@openauthjs/openauth/provider/github\"\n\nconst app = issuer({\n  providers: {\n    github: GithubProvider({\n      clientID: process.env.GITHUB_CLIENT_ID!,\n      clientSecret: process.env.GITHUB_CLIENT_SECRET!,\n      scopes: [\"user:email\"],\n    }),\n  },\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Requesting OAuth 2.0 Scopes\nDESCRIPTION: Example of specifying the OAuth scopes to request from the provider, such as email and profile access.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/oauth2.mdx#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  scopes: [\"email\", \"profile\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing GithubProvider in OpenAuth (TypeScript)\nDESCRIPTION: This snippet demonstrates how to set up and use the GithubProvider in an OpenAuth configuration. It shows the basic structure for initializing the provider with a client ID and secret.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/github.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GithubProvider } from \"@openauthjs/openauth/provider/github\"\n\nexport default issuer({\n  providers: {\n    github: GithubProvider({\n      clientID: \"1234567890\",\n      clientSecret: \"0987654321\"\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating GithubProvider Instance (TypeScript)\nDESCRIPTION: This snippet shows how to create a GithubProvider instance using the GithubProvider function. It includes the basic configuration with clientID and clientSecret.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/github.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nGithubProvider({\n  clientID: \"1234567890\",\n  clientSecret: \"0987654321\"\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Password Provider with UI Component\nDESCRIPTION: Configures the password provider with the default UI component, including functionality for sending verification codes for password reset/email verification.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/README.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PasswordProvider } from \"@openauthjs/openauth/provider/password\"\nimport { PasswordUI } from \"@openauthjs/openauth/ui/password\"\n\nconst app = issuer({\n  providers: {\n    github: ...,\n    password: PasswordProvider(\n      PasswordUI({\n        sendCode: async (email, code) => {\n          console.log(email, code)\n        },\n      }),\n    ),\n  },\n  ...\n})\n```\n\n----------------------------------------\n\nTITLE: Handling Refresh Token Errors\nDESCRIPTION: Demonstrates error handling specifically for refresh token operations, including handling invalid refresh token errors separately from other potential errors.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/client.mdx#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { InvalidRefreshTokenError } from \"@openauthjs/openauth/error\"\n\nif (next.err) {\n  if (next.err instanceof InvalidRefreshTokenError) {\n    // handle invalid refresh token error\n  }\n  else {\n    // handle other errors\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Query Parameters to OAuth 2.0 Authorization\nDESCRIPTION: Example of passing additional parameters to the authorization endpoint, such as access_type and prompt settings.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/oauth2.mdx#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  query: {\n    access_type: \"offline\",\n    prompt: \"consent\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Decoding Subjects from Access Token\nDESCRIPTION: This example demonstrates how to decode and verify a subject from an access token using the OpenAuth client. It shows how to access the subject properties in a type-safe manner.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/subject.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { subjects } from \"../subjects\"\n\nconst verified = await client.verify(subjects, cookies.get(\"access_token\")!)\nconsole.log(verified.subject.properties.userID)\n```\n\n----------------------------------------\n\nTITLE: TTL Configuration\nDESCRIPTION: Shows how to configure Time-To-Live settings for access and refresh tokens.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/issuer.mdx#2025-04-16_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  ttl: {\n    access: 60 * 60 * 24 * 30,\n    refresh: 60 * 60 * 24 * 365\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GoogleProvider Function Signature\nDESCRIPTION: Type signature for the GoogleProvider function that creates a Google OAuth2 provider instance.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/google.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nGoogleProvider(config)\n```\n\n----------------------------------------\n\nTITLE: Initializing OidcProvider in OpenAuth\nDESCRIPTION: Basic example of setting up the OidcProvider with minimal required configuration. This shows how to import the provider and configure it with a client ID and issuer URL.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/oidc.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { OidcProvider } from \"@openauthjs/openauth/provider/oidc\"\n\nexport default issuer({\n  providers: {\n    oauth2: OidcProvider({\n      clientId: \"1234567890\",\n      issuer: \"https://auth.myserver.com\"\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Authentication Actions Implementation\nDESCRIPTION: Server actions for handling authentication, login, and logout functionality\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/start/standalone.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n\"use server\"\n\nimport { redirect } from \"next/navigation\"\nimport { headers as getHeaders, cookies as getCookies } from \"next/headers\"\nimport { subjects } from \"../auth/subjects\"\nimport { client, setTokens } from \"./auth\"\n\nexport async function auth() {\n  const cookies = await getCookies()\n  const accessToken = cookies.get(\"access_token\")\n  const refreshToken = cookies.get(\"refresh_token\")\n\n  if (!accessToken) {\n    return false\n  }\n\n  const verified = await client.verify(subjects, accessToken.value, {\n    refresh: refreshToken?.value,\n  })\n\n  if (verified.err) {\n    return false\n  }\n  if (verified.tokens) {\n    await setTokens(verified.tokens.access, verified.tokens.refresh)\n  }\n\n  return verified.subject\n}\n\nexport async function login() {\n  const cookies = await getCookies()\n  const accessToken = cookies.get(\"access_token\")\n  const refreshToken = cookies.get(\"refresh_token\")\n\n  if (accessToken) {\n    const verified = await client.verify(subjects, accessToken.value, {\n      refresh: refreshToken?.value,\n    })\n    if (!verified.err && verified.tokens) {\n      await setTokens(verified.tokens.access, verified.tokens.refresh)\n      redirect(\"/\")\n    }\n  }\n\n  const headers = await getHeaders()\n  const host = headers.get(\"host\")\n  const protocol = host?.includes(\"localhost\") ? \"http\" : \"https\"\n  const { url } = await client.authorize(`${protocol}://${host}/api/callback`, \"code\")\n  redirect(url)\n}\n\nexport async function logout() {\n  const cookies = await getCookies()\n  cookies.delete(\"access_token\")\n  cookies.delete(\"refresh_token\")\n\n  redirect(\"/\")\n}\n```\n\n----------------------------------------\n\nTITLE: Selecting a Specific OAuth Provider\nDESCRIPTION: Specifies a particular OAuth provider to use for the authorization flow. This allows directing users to a specific authentication provider rather than showing a selection page.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/client.mdx#2025-04-16_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  provider: \"google\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining VerifyResult Interface in TypeScript\nDESCRIPTION: This snippet defines the VerifyResult interface, which represents the outcome of a verification process. It includes properties for error handling, subject information, and optionally refreshed tokens.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/client.mdx#2025-04-16_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\ninterface VerifyResult {\n  err?: undefined;\n  subject: Subject;\n  tokens?: Tokens;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating OpenAuth Issuer Basic Structure\nDESCRIPTION: Shows the basic structure of creating an OpenAuth issuer with placeholders for providers, storage, subjects, and success callback.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/index.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = issuer({\n  providers: { ... },\n  storage,\n  subjects,\n  success: async (ctx, value) => { ... }\n})\n```\n\n----------------------------------------\n\nTITLE: Allow Callback Configuration\nDESCRIPTION: Demonstrates how to implement custom client request validation logic.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/issuer.mdx#2025-04-16_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  allow: async (input, req) => {\n    // Allow all clients\n    return true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: FacebookProvider Method Signature\nDESCRIPTION: Method signature for creating a Facebook OAuth2 provider with configuration parameters.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/facebook.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nFacebookProvider(config)\n```\n\n----------------------------------------\n\nTITLE: Initializing CodeUI for OpenAuth in TypeScript\nDESCRIPTION: This snippet demonstrates how to configure and initialize the CodeUI component for use with the Code provider in OpenAuth. It shows the basic setup and a custom sendCode function.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/ui/code.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CodeUI } from \"@openauthjs/openauth/ui/code\"\nimport { CodeProvider } from \"@openauthjs/openauth/provider/code\"\n\nexport default issuer({\n  providers: {\n    code: CodeAdapter(\n      CodeUI({\n        copy: {\n          code_info: \"We'll send a pin code to your email\"\n        },\n        sendCode: (claims, code) => console.log(claims.email, code)\n      })\n    )\n  },\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Up Storage Adapter\nDESCRIPTION: Shows how to configure a storage adapter using DynamoDB for OpenAuth.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/issuer.mdx#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DynamoStorage } from \"@openauthjs/openauth/storage/dynamo\"\n\nissuer({\n  storage: DynamoStorage()\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Success Callback for OpenAuth Server in TypeScript\nDESCRIPTION: Demonstrates how to handle successful authentication in the OpenAuth server, including provider-specific logic and subject creation.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/issuer.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = issuer({\n  providers: { ... },\n  subjects,\n  async success(ctx, value) {\n    let userID\n    if (value.provider === \"password\") {\n      console.log(value.email)\n      userID = ... // lookup user or create them\n    }\n    if (value.provider === \"github\") {\n      console.log(value.tokenset.access)\n      userID = ... // lookup user or create them\n    }\n    return ctx.subject(\"user\", {\n      userID\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Google OIDC Provider in OpenAuth\nDESCRIPTION: Example of how to configure and initialize the Google OIDC provider in OpenAuth. Only requires clientID parameter.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/google.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GoogleOidcProvider } from \"@openauthjs/openauth/provider/google\"\n\nexport default issuer({\n  providers: {\n    google: GoogleOidcProvider({\n      clientID: \"1234567890\"\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Setting PKCE Option for Authorization\nDESCRIPTION: Configures the PKCE option for the authorization flow. This is used specifically for SPA applications to enhance security by preventing authorization code interception attacks.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/client.mdx#2025-04-16_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  pkce: true\n}\n```\n\n----------------------------------------\n\nTITLE: Setting OAuth Scopes for GithubProvider (TypeScript)\nDESCRIPTION: This snippet illustrates how to specify OAuth scopes for the GithubProvider. It shows the usage of the 'scopes' property in the GithubConfig interface.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/github.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  scopes: [\"email\", \"profile\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing CognitoProvider with Basic Configuration\nDESCRIPTION: Demonstrates how to initialize a CognitoProvider with required configuration parameters including domain, region, clientID, and clientSecret.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/cognito.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CognitoProvider } from \"@openauthjs/openauth/provider/cognito\"\n\nexport default issuer({\n  providers: {\n    cognito: CognitoProvider({\n      domain: \"your-domain.auth.us-east-1.amazoncognito.com\",\n      region: \"us-east-1\",\n      clientID: \"1234567890\",\n      clientSecret: \"0987654321\"\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Verifying and Refreshing Tokens in SSR\nDESCRIPTION: Validates access tokens and automatically refreshes them when expired using refresh tokens, suitable for server-side applications.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/README.md#2025-04-16_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nconst verified = await client.verify(subjects, cookies.get(\"access_token\")!, {\n  refresh: cookies.get(\"refresh_token\") || undefined,\n})\nconsole.log(\n  verified.subject.type,\n  verified.subject.properties,\n  verified.refresh,\n  verified.access,\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Persistent Memory Storage\nDESCRIPTION: Shows how to configure the MemoryStorage adapter with file persistence enabled. This allows the store to persist data between server restarts.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/storage/memory.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nMemoryStorage({\n  persist: \"./persist.json\"\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Subject Schemas for OpenAuth Server in TypeScript\nDESCRIPTION: Shows how to define and validate subject schemas using valibot for the OpenAuth server.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/issuer.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { object, string } from \"valibot\"\nimport { createSubjects } from \"@openauthjs/openauth/subject\"\n\nconst subjects = createSubjects({\n  user: object({\n    userID: string()\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Subject Schema Definition\nDESCRIPTION: Definition of user subject schema using Valibot for validation\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/start/standalone.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { object, string } from \"valibot\"\nimport { createSubjects } from \"@openauthjs/openauth/subject\"\n\nexport const subjects = createSubjects({\n  user: object({\n    id: string(),\n  }),\n})\n```\n\n----------------------------------------\n\nTITLE: Handling Token Verification Errors in OpenAuth\nDESCRIPTION: Demonstrates how to check for specific error types when token verification fails using the instanceof operator.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/client.mdx#2025-04-16_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nimport { InvalidRefreshTokenError } from \"@openauthjs/openauth/error\"\n\nconsole.log(err instanceof InvalidRefreshTokenError)\n```\n\n----------------------------------------\n\nTITLE: OidcProvider Method Signature\nDESCRIPTION: Method signature for the OidcProvider function that takes an OidcConfig object as a parameter and returns a Provider instance.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/oidc.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nOidcProvider(config)\n```\n\n----------------------------------------\n\nTITLE: Implementing Microsoft OIDC Authentication in OpenAuth\nDESCRIPTION: Example of setting up Microsoft OIDC (OpenID Connect) authentication with only the clientID parameter, which is useful when you only need to verify a user's email address.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/microsoft.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MicrosoftOidcProvider } from \"@openauthjs/openauth/provider/microsoft\"\n\nexport default issuer({\n  providers: {\n    microsoft: MicrosoftOidcProvider({\n      clientID: \"1234567890\"\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Query Parameters in GoogleOidcConfig\nDESCRIPTION: Example of how to pass additional parameters to the authorization endpoint using the query field in GoogleOidcConfig.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/google.mdx#2025-04-16_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  query: {\n    prompt: \"consent\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Storing OAuth Challenge in Session Storage\nDESCRIPTION: Demonstrates how to store the OAuth challenge object in session storage for PKCE flow authentication in Single Page Applications.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/client.mdx#2025-04-16_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nsessionStorage.setItem(\"challenge\", JSON.stringify(challenge))\n```\n\n----------------------------------------\n\nTITLE: Defining Subjects in TypeScript\nDESCRIPTION: This snippet demonstrates how to create subjects using valibot validation. Subjects define the data structure that will be contained in the JWT access token.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/subject.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { object, string } from \"valibot\"\n\nconst subjects = createSubjects({\n  user: object({\n    userID: string()\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Theme Configuration\nDESCRIPTION: Shows how to set up UI themes for the authentication interface.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/issuer.mdx#2025-04-16_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { THEME_SST } from \"@openauthjs/openauth/ui/theme\"\n\nissuer({\n  theme: THEME_SST\n  // ...\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Theme } from \"@openauthjs/openauth/ui/theme\"\n\nconst MY_THEME: Theme = {\n  // ...\n}\n\nissuer({\n  theme: MY_THEME\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Additional Query Parameters to Discord Authorization\nDESCRIPTION: Demonstrates how to pass additional parameters to Discord's authorization endpoint using the query configuration property.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/discord.mdx#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  query: {\n    access_type: \"offline\",\n    prompt: \"consent\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Password Validation in TypeScript\nDESCRIPTION: Shows how to implement password validation logic that checks for minimum password length. Returns an error message string if validation fails or undefined if successful.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/ui/password.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  validatePassword: (password) => {\n     return password.length < 8 ? \"Password must be at least 8 characters\" : undefined\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing XProvider for X.com Authentication in TypeScript\nDESCRIPTION: Example of how to initialize the XProvider with client credentials to enable X.com authentication in an application.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/x.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { XProvider } from \"@openauthjs/openauth/provider/x\"\n\nexport default issuer({\n  providers: {\n    x: XProvider({\n      clientID: \"1234567890\",\n      clientSecret: \"0987654321\"\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Setting OAuth Scopes in GoogleConfig\nDESCRIPTION: Example of how to request specific OAuth scopes in the GoogleConfig object. Scopes define the permissions requested from the user.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/google.mdx#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  scopes: [\"email\", \"profile\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Email Code Sender in TypeScript\nDESCRIPTION: Example implementation of the sendCode callback function that sends confirmation pin codes to users via email.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/password.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  sendCode: async (email, code) => {\n    // Send an email with the code\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Subjects in the Issuer Configuration\nDESCRIPTION: This code shows how to pass the defined subjects to the issuer configuration. This links the subject definitions to the authentication flow.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/subject.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { subjects } from \"./subjects\"\n\nconst app = issuer({\n  providers: { ... },\n  subjects,\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Importing Subjects from External File\nDESCRIPTION: Shows how to import subject definitions from a separate file, promoting modularity in the auth implementation.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/README.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { subjects } from \"./subjects.js\"\n\nconst app = issuer({\n  providers: { ... },\n  subjects,\n  ...\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Query Parameters to SpotifyProvider (TypeScript)\nDESCRIPTION: This code demonstrates how to add additional query parameters to the authorization endpoint using the query option in SpotifyConfig.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/spotify.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  query: {\n    access_type: \"offline\",\n    prompt: \"consent\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing DiscordProvider in OpenAuth\nDESCRIPTION: Shows how to import and configure the DiscordProvider within an issuer function. This setup establishes the necessary client credentials for Discord OAuth authentication.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/discord.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DiscordProvider } from \"@openauthjs/openauth/provider/discord\"\n\nexport default issuer({\n  providers: {\n    discord: DiscordProvider({\n      clientID: \"1234567890\",\n      clientSecret: \"0987654321\"\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: OpenAuth Client Configuration\nDESCRIPTION: Client-side OpenAuth setup with token management using Next.js cookies\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/start/standalone.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createClient } from \"@openauthjs/openauth/client\"\nimport { cookies as getCookies } from \"next/headers\"\n\nexport const client = createClient({\n  clientID: \"nextjs\",\n  issuer: \"http://localhost:3001\",\n})\n\nexport async function setTokens(access: string, refresh: string) {\n  const cookies = await getCookies()\n\n  cookies.set({\n    name: \"access_token\",\n    value: access,\n    httpOnly: true,\n    sameSite: \"lax\",\n    path: \"/\",\n    maxAge: 34560000,\n  })\n  cookies.set({\n    name: \"refresh_token\",\n    value: refresh,\n    httpOnly: true,\n    sameSite: \"lax\",\n    path: \"/\",\n    maxAge: 34560000,\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: KeycloakConfig clientSecret Property Example (TypeScript)\nDESCRIPTION: This snippet shows how to set the clientSecret property in the KeycloakConfig object, which is a private key used to authenticate your application.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/keycloak.mdx#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  clientSecret: \"0987654321\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Code Sending Callback in TypeScript\nDESCRIPTION: Demonstrates the implementation of sendCode callback function that handles sending confirmation pin codes to users via email. The function takes email and code parameters and returns a Promise.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/ui/password.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  sendCode: async (email, code) => {\n    // Send an email with the code\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing OpenAuth Issuer Function\nDESCRIPTION: Demonstrates how to import the issuer function from the OpenAuth package, which is the starting point for creating an auth server.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/index.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { issuer } from \"@openauthjs/openauth\"\n```\n\n----------------------------------------\n\nTITLE: Initializing JumpCloudProvider in TypeScript\nDESCRIPTION: Example of how to set up JumpCloud authentication in an issuer configuration. The provider requires a clientID and clientSecret at minimum.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/jumpcloud.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { JumpCloudProvider } from \"@openauthjs/openauth/provider/jumpcloud\"\n\nexport default issuer({\n  providers: {\n    jumpcloud: JumpCloudProvider({\n      clientID: \"1234567890\",\n      clientSecret: \"0987654321\"\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Setting OAuth Scopes\nDESCRIPTION: Example of configuring OAuth scopes to request specific permissions like email and profile access.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/facebook.mdx#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  scopes: [\"email\", \"profile\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing SpotifyProvider in OpenAuth (TypeScript)\nDESCRIPTION: This snippet demonstrates how to set up the SpotifyProvider with client ID and secret in an OpenAuth issuer configuration.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/spotify.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SpotifyProvider } from \"@openauthjs/openauth/provider/spotify\"\n\nexport default issuer({\n  providers: {\n    spotify: SpotifyProvider({\n      clientID: \"1234567890\",\n      clientSecret: \"0987654321\"\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing OpenAuth Client\nDESCRIPTION: Client-side implementation for OpenAuth with token management using HTTP-only cookies.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/start/sst.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Resource } from \"sst\"\nimport { createClient } from \"@openauthjs/openauth/client\"\nimport { cookies as getCookies } from \"next/headers\"\n\nexport const client = createClient({\n  clientID: \"nextjs\",\n  issuer: Resource.MyAuth.url\n})\n\nexport async function setTokens(access: string, refresh: string) {\n  const cookies = await getCookies()\n\n  cookies.set({\n    name: \"access_token\",\n    value: access,\n    httpOnly: true,\n    sameSite: \"lax\",\n    path: \"/\",\n    maxAge: 34560000,\n  })\n  cookies.set({\n    name: \"refresh_token\",\n    value: refresh,\n    httpOnly: true,\n    sameSite: \"lax\",\n    path: \"/\",\n    maxAge: 34560000,\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Client Secret\nDESCRIPTION: Example of setting the client secret, which is the private key used for application authentication.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/cognito.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  clientSecret: \"0987654321\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Subjects into OpenAuth Server Configuration in TypeScript\nDESCRIPTION: Demonstrates how to import and use the defined subjects in the OpenAuth server configuration.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/issuer.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { subjects } from \"./subjects.js\"\n\nconst app = issuer({\n  providers: { ... },\n  subjects,\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Deploying OpenAuth Server on AWS Lambda\nDESCRIPTION: Demonstrates how to deploy the OpenAuth server as an AWS Lambda function using the hono/aws-lambda package.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/issuer.mdx#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { handle } from \"hono/aws-lambda\"\n\nexport const handler = handle(app)\n```\n\n----------------------------------------\n\nTITLE: Initializing Yahoo Authentication Provider in TypeScript\nDESCRIPTION: Example of how to initialize the Yahoo authentication provider with required client credentials. This setup configures the provider within the issuer function.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/yahoo.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { YahooProvider } from \"@openauthjs/openauth/provider/yahoo\"\n\nexport default issuer({\n  providers: {\n    yahoo: YahooProvider({\n      clientID: \"1234567890\",\n      clientSecret: \"0987654321\"\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: XProviderConfig OAuth Scopes Example in TypeScript\nDESCRIPTION: Example of how to request specific OAuth scopes from X.com, which determine what user information and actions your application has access to.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/x.mdx#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  scopes: [\"email\", \"profile\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Query Parameters to Microsoft Authentication\nDESCRIPTION: Example of how to pass additional parameters to the authorization endpoint using the query option for OAuth2 authentication.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/microsoft.mdx#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  query: {\n    access_type: \"offline\",\n    prompt: \"consent\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Subject Schemas with Valibot\nDESCRIPTION: Creates subject schemas using Valibot to define the structure of JWT token payloads generated during authentication.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/README.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { object, string } from \"valibot\"\n\nconst subjects = createSubjects({\n  user: object({\n    userID: string(),\n    // may want to add workspaceID here if doing a multi-tenant app\n    workspaceID: string(),\n  }),\n})\n```\n\n----------------------------------------\n\nTITLE: Setting clientID in JumpCloudConfig in TypeScript\nDESCRIPTION: Example of setting the clientID property in JumpCloudConfig. This is a string that identifies your application to JumpCloud.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/jumpcloud.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  clientID: \"my-client\"\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying OpenAuth Server to Various Platforms\nDESCRIPTION: Demonstrates deployment configurations for different runtime environments including Bun, Cloudflare, AWS Lambda, and Node.js.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/README.md#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// Bun\nexport default app\n\n// Cloudflare\nexport default app\n\n// Lambda\nimport { handle } from \"hono/aws-lambda\"\nexport const handler = handle(app)\n\n// Node.js\nimport { serve } from \"@hono/node-server\"\nserve(app)\n```\n\n----------------------------------------\n\nTITLE: Deploying OpenAuth to Cloudflare Workers\nDESCRIPTION: Demonstrates how to export the OpenAuth server for deployment to Cloudflare Workers.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/index.mdx#2025-04-16_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nexport default app\n```\n\n----------------------------------------\n\nTITLE: Creating a Facebook OAuth2 Provider\nDESCRIPTION: Example of creating a Facebook OAuth2 provider with clientID and clientSecret.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/facebook.mdx#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nFacebookProvider({\n  clientID: \"1234567890\",\n  clientSecret: \"0987654321\"\n})\n```\n\n----------------------------------------\n\nTITLE: Basic SlackProvider Configuration Example\nDESCRIPTION: A simple example of SlackProvider configuration showing how to specify the team ID, client credentials, and authentication scopes.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/slack.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nSlackProvider({\n  team: \"T1234567890\",\n  clientID: \"1234567890\",\n  clientSecret: \"0987654321\",\n  scopes: [\"openid\", \"email\", \"profile\"]\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Facebook OIDC Provider in OpenAuth\nDESCRIPTION: Example of importing and configuring the FacebookOidcProvider using OpenID Connect authentication with clientID.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/facebook.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { FacebookOidcProvider } from \"@openauthjs/openauth/provider/facebook\"\n\nexport default issuer({\n  providers: {\n    facebook: FacebookOidcProvider({\n      clientID: \"1234567890\"\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Memory Storage in OpenAuth\nDESCRIPTION: Demonstrates basic setup of the MemoryStorage adapter for OpenAuth. Creates a simple in-memory store that can be used with the issuer configuration.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/storage/memory.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MemoryStorage } from \"@openauthjs/openauth/storage/memory\"\n\nconst storage = MemoryStorage()\n\nexport default issuer({\n  storage,\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Running JWT API Server with Bun\nDESCRIPTION: Command to run the JWT API server using Bun with hot reloading. This starts the server, allowing it to handle requests and verify JWT tokens.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/examples/client/jwt-api/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbun run --hot index.ts\n```\n\n----------------------------------------\n\nTITLE: Deploying OpenAuth Server on Node.js\nDESCRIPTION: Shows how to deploy the OpenAuth server on Node.js using the @hono/node-server package.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/issuer.mdx#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { serve } from \"@hono/node-server\"\n\nserve(app)\n```\n\n----------------------------------------\n\nTITLE: Implementing Microsoft OAuth Authentication in OpenAuth\nDESCRIPTION: Example of setting up Microsoft OAuth authentication with the required configuration parameters including tenant, clientID, and clientSecret.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/microsoft.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MicrosoftProvider } from \"@openauthjs/openauth/provider/microsoft\"\n\nexport default issuer({\n  providers: {\n    microsoft: MicrosoftProvider({\n      tenant: \"1234567890\",\n      clientID: \"1234567890\",\n      clientSecret: \"0987654321\"\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Apple OAuth Provider\nDESCRIPTION: Example of setting up Apple OAuth authentication provider with client credentials.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/apple.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AppleProvider } from \"@openauthjs/openauth/provider/apple\"\n\nexport default issuer({\n  providers: {\n    apple: AppleProvider({\n      clientID: \"1234567890\",\n      clientSecret: \"0987654321\"\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Keycloak OAuth2 Provider (TypeScript)\nDESCRIPTION: This example demonstrates how to create a Keycloak OAuth2 provider by calling the KeycloakProvider function with the required configuration options.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/keycloak.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nKeycloakProvider({\n  baseUrl: \"https://your-keycloak-domain\",\n  realm: \"your-realm\",\n  clientID: \"1234567890\",\n  clientSecret: \"0987654321\"\n})\n```\n\n----------------------------------------\n\nTITLE: SendCode Callback Example in TypeScript\nDESCRIPTION: This snippet demonstrates the structure of the sendCode callback function used in the CodeProvider configuration. It shows how to handle claims and the generated code.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/code.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  sendCode: async (claims, code) => {\n    // Send the code through the email or phone number based on the claims\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAuth Landing Page in YAML\nDESCRIPTION: YAML configuration for OpenAuth project's landing page. Defines the page title, description, template type and hero section with title, tagline and logo images for dark/light themes.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/index.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: OpenAuth\ndescription: Universal, standards-based auth provider.\ntemplate: splash\nhero:\n  title: Universal, standards-based auth\n  tagline: A universal, standards-based auth provider.\n  image:\n    dark: ../../assets/logo-dark.svg\n    light: ../../assets/logo-light.svg\n    alt: OpenAuth logo\n```\n\n----------------------------------------\n\nTITLE: Deploying OpenAuth Server on Cloudflare Workers\nDESCRIPTION: Demonstrates how to deploy the OpenAuth server on Cloudflare Workers by exporting the app directly.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/issuer.mdx#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nexport default app\n```\n\n----------------------------------------\n\nTITLE: Initializing KeycloakProvider in OpenAuth (TypeScript)\nDESCRIPTION: This snippet demonstrates how to set up and configure the KeycloakProvider within an OpenAuth issuer. It includes the necessary import and configuration options such as baseUrl, realm, clientID, and clientSecret.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/keycloak.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { KeycloakProvider } from \"@openauthjs/openauth/provider/keycloak\"\n\nexport default issuer({\n  providers: {\n    keycloak: KeycloakProvider({\n      baseUrl: \"https://your-keycloak-domain\",\n      realm: \"your-realm\",\n      clientID: \"1234567890\",\n      clientSecret: \"0987654321\"\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Setting OIDC Scopes for Microsoft Authentication\nDESCRIPTION: Example showing how to set OIDC-specific scopes for Microsoft authentication, including openid, profile, and email.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/microsoft.mdx#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  scopes: [\"openid\", \"profile\", \"email\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating JumpCloudProvider with Basic Configuration in TypeScript\nDESCRIPTION: Basic example of creating a JumpCloud provider with minimum required configuration of clientID and clientSecret.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/jumpcloud.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nJumpCloudProvider({\n  clientID: \"1234567890\",\n  clientSecret: \"0987654321\"\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Query Parameters to Microsoft OIDC Authentication\nDESCRIPTION: Example showing how to pass additional parameters to the authorization endpoint for OIDC authentication.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/microsoft.mdx#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  query: {\n    prompt: \"consent\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom sendCode Function for CodeUI in TypeScript\nDESCRIPTION: This snippet demonstrates how to implement a custom sendCode function for the CodeUI component. The function receives claims (containing user email or phone) and the generated code.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/ui/code.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nasync (claims, code) => {\n  // Send the code via the claim\n}\n```\n\n----------------------------------------\n\nTITLE: Yahoo OAuth Client Secret Configuration Example in TypeScript\nDESCRIPTION: Example showing how to configure the clientSecret property, which is a private key used to authenticate your application with Yahoo's OAuth service.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/yahoo.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  clientSecret: \"0987654321\"\n}\n```\n\n----------------------------------------\n\nTITLE: Example of GoogleOidcProvider Implementation\nDESCRIPTION: Example of how to create a Google OIDC provider instance with minimal configuration. Useful for verifying a user's email address.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/google.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nGoogleOidcProvider({\n  clientID: \"1234567890\"\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring PasswordProvider with PasswordUI in OpenAuth\nDESCRIPTION: Example showing how to configure the PasswordProvider with PasswordUI in an OpenAuth issuer. The example includes custom error copy and a code sending function.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/password.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PasswordUI } from \"@openauthjs/openauth/ui/password\"\nimport { PasswordProvider } from \"@openauthjs/openauth/provider/password\"\n\nexport default issuer({\n  providers: {\n    password: PasswordProvider(\n      PasswordUI({\n        copy: {\n          error_email_taken: \"This email is already taken.\"\n        },\n        sendCode: (email, code) => console.log(email, code)\n      })\n    )\n  },\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: DynamoStorageOptions Configuration Example in TypeScript\nDESCRIPTION: Illustrates a basic configuration object for DynamoStorageOptions, specifying the table name and key attributes.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/storage/dynamo.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  table: \"my-table\",\n  pk: \"pk\",\n  sk: \"sk\"\n}\n```\n\n----------------------------------------\n\nTITLE: Apple OAuth Provider Basic Configuration\nDESCRIPTION: Simple configuration example for Apple OAuth provider with client credentials.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/apple.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nAppleProvider({\n  clientID: \"1234567890\",\n  clientSecret: \"0987654321\"\n})\n```\n\n----------------------------------------\n\nTITLE: Yahoo OAuth Query Parameters Configuration Example in TypeScript\nDESCRIPTION: Example showing how to add additional parameters to the authorization endpoint request such as access_type and prompt settings.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/yahoo.mdx#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  query: {\n    access_type: \"offline\",\n    prompt: \"consent\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: PasswordUI Function Signature\nDESCRIPTION: The signature for the PasswordUI function that configures the UI for the Password provider flow. It takes a PasswordUIOptions object as input and returns a PasswordConfig object.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/ui/password.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nPasswordUI(input)\n```\n\n----------------------------------------\n\nTITLE: Setting Background Color in Theme Configuration\nDESCRIPTION: Shows how to set the background color property in a theme configuration. The background can be a single color that applies to both light and dark modes.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/ui/theme.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  background: \"#FFF\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using Google OAuth Provider in OpenAuth\nDESCRIPTION: Example of how to configure and initialize the Google OAuth provider in OpenAuth. Requires clientID and clientSecret parameters.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/google.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GoogleProvider } from \"@openauthjs/openauth/provider/google\"\n\nexport default issuer({\n  providers: {\n    google: GoogleProvider({\n      clientID: \"1234567890\",\n      clientSecret: \"0987654321\"\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing TwitchProvider for Authentication\nDESCRIPTION: Demonstrates how to set up a TwitchProvider instance using a client ID and client secret. This provider enables Twitch OAuth2 authentication in your application.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/twitch.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TwitchProvider } from \"@openauthjs/openauth/provider/twitch\"\n\nexport default issuer({\n  providers: {\n    twitch: TwitchProvider({\n      clientID: \"1234567890\",\n      clientSecret: \"0987654321\"\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional Query Parameters for GithubProvider (TypeScript)\nDESCRIPTION: This example demonstrates how to add additional query parameters to the GithubProvider configuration. It shows the usage of the 'query' property in the GithubConfig interface.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/github.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  query: {\n    access_type: \"offline\",\n    prompt: \"consent\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating SpotifyProvider Instance (TypeScript)\nDESCRIPTION: This code shows how to create a Spotify OAuth2 provider instance using the SpotifyProvider function with client credentials.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/spotify.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nSpotifyProvider({\n  clientID: \"1234567890\",\n  clientSecret: \"0987654321\"\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring SpotifyProvider ClientID (TypeScript)\nDESCRIPTION: This example demonstrates how to set the clientID in the SpotifyConfig object. The clientID is a string that identifies your application.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/spotify.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  clientID: \"my-client\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PasswordRegisterState Types in TypeScript\nDESCRIPTION: A union type definition that represents the different states in the password registration flow. It includes a 'start' state where users enter their email and password, and a 'code' state where users need to verify their email with a pin code.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/password.mdx#2025-04-16_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\n{ type: \"start\" } | { code: string, email: string, password: string, type: \"code\" }\n```\n\n----------------------------------------\n\nTITLE: Adding query parameters to OIDC authorization request\nDESCRIPTION: Example of adding additional query parameters to the OIDC authorization request. These parameters are passed to the authorization endpoint.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/oidc.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  query: {\n    prompt: \"consent\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example of GoogleProvider Implementation\nDESCRIPTION: Example of how to create a Google OAuth2 provider instance with the required configuration parameters.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/google.mdx#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nGoogleProvider({\n  clientID: \"1234567890\",\n  clientSecret: \"0987654321\"\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring SST Authentication\nDESCRIPTION: SST configuration to set up the authentication component and link it to the Next.js application.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/start/sst.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst auth = new sst.aws.Auth(\"MyAuth\", {\n  issuer: \"auth/index.handler\",\n});\n\nnew sst.aws.Nextjs(\"MyWeb\", {\n  link: [auth]\n});\n```\n\n----------------------------------------\n\nTITLE: Setting OAuth scopes in JumpCloudConfig in TypeScript\nDESCRIPTION: Example of setting OAuth scopes to request during authentication using the scopes property in JumpCloudConfig.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/jumpcloud.mdx#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  scopes: [\"email\", \"profile\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Facebook OIDC Provider\nDESCRIPTION: Example of creating a Facebook OIDC provider for email verification using clientID.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/facebook.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nFacebookOidcProvider({\n  clientID: \"1234567890\"\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Facebook OAuth ClientSecret\nDESCRIPTION: Example of setting the clientSecret in FacebookConfig object, which is a private key used for app authentication.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/facebook.mdx#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  clientSecret: \"0987654321\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring Select UI in OpenAuth\nDESCRIPTION: Example showing how to import and configure the Select UI component in OpenAuth, including how to hide specific providers and customize display names.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/ui/select.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Select } from \"@openauthjs/openauth/ui/select\"\n\nexport default issuer({\n  select: Select({\n    providers: {\n      github: {\n        hide: true\n      },\n      google: {\n        display: \"Google\"\n      }\n    }\n  })\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Running a Next.js Development Server\nDESCRIPTION: Commands to start the Next.js development server using various package managers including npm, yarn, pnpm, and bun.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/examples/quickstart/standalone/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n# or\nbun dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Facebook OAuth Provider in OpenAuth\nDESCRIPTION: Example of importing and configuring the FacebookProvider using OAuth2 authentication with clientID and clientSecret.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/facebook.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { FacebookProvider } from \"@openauthjs/openauth/provider/facebook\"\n\nexport default issuer({\n  providers: {\n    facebook: FacebookProvider({\n      clientID: \"1234567890\",\n      clientSecret: \"0987654321\"\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Authentication Subjects Schema\nDESCRIPTION: Type definitions for authentication subjects using Valibot schema validation.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/start/sst.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { object, string } from \"valibot\"\nimport { createSubjects } from \"@openauthjs/openauth/subject\"\n\nexport const subjects = createSubjects({\n  user: object({\n    id: string(),\n  }),\n})\n```\n\n----------------------------------------\n\nTITLE: KeycloakConfig query Property Example (TypeScript)\nDESCRIPTION: This example demonstrates how to use the query property in KeycloakConfig to pass additional parameters to the authorization endpoint.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/keycloak.mdx#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  query: {\n    access_type: \"offline\",\n    prompt: \"consent\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing PasswordUI with Custom Error Message\nDESCRIPTION: Example showing how to import and configure PasswordUI for the Password provider. The configuration includes custom error messaging and a function to handle sending verification codes.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/ui/password.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PasswordUI } from \"@openauthjs/openauth/ui/password\"\nimport { PasswordProvider } from \"@openauthjs/openauth/provider/password\"\n\nexport default issuer({\n  providers: {\n    password: PasswordAdapter(\n      PasswordUI({\n        copy: {\n          error_email_taken: \"This email is already taken.\"\n        },\n        sendCode: (email, code) => console.log(email, code)\n      })\n    )\n  },\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: KeycloakProvider Function Signature (TypeScript)\nDESCRIPTION: This snippet shows the function signature for the KeycloakProvider. It takes a config parameter of type KeycloakConfig and returns a Provider object.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/keycloak.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nKeycloakProvider(config)\n```\n\n----------------------------------------\n\nTITLE: Defining VerifyOptions Interface in TypeScript\nDESCRIPTION: This snippet defines the VerifyOptions interface, which includes optional properties for customizing the verification process. It allows overriding the fetch function and providing a refresh token.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/client.mdx#2025-04-16_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\ninterface VerifyOptions {\n  fetch?: FetchLike;\n  refresh?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting App Title in Theme Configuration\nDESCRIPTION: Shows how to set the title property in a theme. This sets the name of your app, which appears in the UI and as the page title in the browser.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/ui/theme.mdx#2025-04-16_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  title: \"Acne\"\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing SlackProvider in OpenAuth\nDESCRIPTION: Example of how to set up and configure the SlackProvider for Slack authentication. It demonstrates the basic configuration with team ID, client credentials, and required scopes.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/slack.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SlackProvider } from \"@openauthjs/openauth/provider/slack\"\n\nexport default issuer({\n  providers: {\n    slack: SlackProvider({\n      team: \"T1234567890\",\n      clientID: \"1234567890\",\n      clientSecret: \"0987654321\",\n      scopes: [\"openid\", \"email\", \"profile\"]\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Subject Schema\nDESCRIPTION: Demonstrates how to define the subject schema for user data validation.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/issuer.mdx#2025-04-16_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { object, string } from \"valibot\"\nimport { createSubjects } from \"@openauthjs/openauth/subject\"\n\nissuer({\n  subjects: createSubjects({\n    user: object({\n      userID: string()\n    })\n  })\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Setting AWS Region\nDESCRIPTION: Example of configuring the AWS region for the Cognito User Pool.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/cognito.mdx#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  region: \"us-east-1\"\n}\n```\n\n----------------------------------------\n\nTITLE: DynamoStorage Function Signature in TypeScript\nDESCRIPTION: Shows the function signature for the DynamoStorage adapter. It takes a single parameter of type DynamoStorageOptions and returns a StorageAdapter.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/storage/dynamo.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nDynamoStorage(options)\n```\n\n----------------------------------------\n\nTITLE: Setting Cognito Domain\nDESCRIPTION: Example of configuring the Cognito User Pool domain.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/cognito.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  domain: \"your-domain.auth.us-east-1.amazoncognito.com\"\n}\n```\n\n----------------------------------------\n\nTITLE: MemoryStorage Function Signature\nDESCRIPTION: Type definition showing the function signature for the MemoryStorage initialization function.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/storage/memory.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nMemoryStorage(input?)\n```\n\n----------------------------------------\n\nTITLE: JumpCloudProvider Method Signature in TypeScript\nDESCRIPTION: The method signature for creating a JumpCloud OAuth2 provider, requiring a JumpCloudConfig object.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/jumpcloud.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nJumpCloudProvider(config)\n```\n\n----------------------------------------\n\nTITLE: OAuth2Provider Method Signature\nDESCRIPTION: The main constructor function for creating an OAuth 2.0 provider, which takes an Oauth2Config object as its parameter.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/oauth2.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nOauth2Provider(config)\n```\n\n----------------------------------------\n\nTITLE: Adding Custom CSS to Theme Configuration\nDESCRIPTION: Demonstrates how to include custom CSS in a theme, which is added to the page in a style tag. This example shows importing a custom Google font for use in the theme.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/ui/theme.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  css: `@import url('https://fonts.googleapis.com/css2?family=Rubik:wght@100;200;300;400;500;600;700;800;900&display=swap');`\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional Query Parameters\nDESCRIPTION: Example of adding custom query parameters to the authorization endpoint.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/cognito.mdx#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  query: {\n    access_type: \"offline\",\n    prompt: \"consent\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: SlackProvider Method Signature\nDESCRIPTION: The function signature for the SlackProvider method, which takes a SlackConfig parameter and returns a Provider object.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/slack.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nSlackProvider(config)\n```\n\n----------------------------------------\n\nTITLE: Select Method Signature in OpenAuth\nDESCRIPTION: The method signature for the Select function, which accepts optional SelectProps parameters.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/ui/select.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nSelect(props?)\n```\n\n----------------------------------------\n\nTITLE: Configuring OAuth Scopes for SpotifyProvider (TypeScript)\nDESCRIPTION: This example shows how to specify OAuth scopes for the SpotifyProvider. Scopes determine the level of access requested from the user's Spotify account.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/spotify.mdx#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  scopes: [\"email\", \"profile\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Workspace Packages for OpenAuth\nDESCRIPTION: These commands install the necessary workspace packages and build the OpenAuth package. They should be run in the project root directory before starting the issuer server.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/examples/README.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ bun install\n$ cd packages/openauth\n$ bun run build\n```\n\n----------------------------------------\n\nTITLE: Configuring OAuth 2.0 Endpoints\nDESCRIPTION: Example of setting up the authorization and token endpoint URLs for the OAuth 2.0 provider.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/oauth2.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  endpoint: {\n    authorization: \"https://auth.myserver.com/authorize\",\n    token: \"https://auth.myserver.com/token\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: PasswordProvider Function Signature\nDESCRIPTION: The function signature for the PasswordProvider, which takes a PasswordConfig object as its parameter and returns a Provider object.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/password.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nPasswordProvider(config)\n```\n\n----------------------------------------\n\nTITLE: Query Parameters Configuration Example\nDESCRIPTION: Example of adding custom query parameters to the authorization endpoint.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/apple.mdx#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  query: {\n    access_type: \"offline\",\n    prompt: \"consent\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: SlackConfig clientID Example\nDESCRIPTION: Example of setting the clientID property in SlackConfig, which is a string that identifies your application to Slack.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/slack.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  clientID: \"my-client\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Favicon URL in Theme Configuration\nDESCRIPTION: Shows how to configure the favicon URL in a theme. This sets the icon that appears in browser tabs and bookmarks for the OpenAuth pages.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/ui/theme.mdx#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  favicon: \"https://www.example.com/favicon.svg\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting OIDC Query Parameters\nDESCRIPTION: Example of adding custom query parameters to the OIDC authorization endpoint, such as prompt consent.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/facebook.mdx#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  query: {\n    prompt: \"consent\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting clientID in OidcConfig\nDESCRIPTION: Example of setting the clientID parameter in OidcConfig. The clientID is a string that identifies your application to the OIDC provider.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/oidc.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  clientID: \"my-client\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting OAuth 2.0 Client Secret\nDESCRIPTION: Example of configuring the clientSecret parameter, which is a private key used to authenticate your application with the OAuth provider.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/oauth2.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  clientSecret: \"0987654321\"\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing CodeProvider Configuration in TypeScript\nDESCRIPTION: This example shows how to customize the CodeProvider configuration by spreading the UI object and overriding specific properties, such as the pin code length.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/code.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst ui = CodeUI({\n  // ...\n})\n\nexport default issuer({\n  providers: {\n    code: CodeProvider(\n      { ...ui, length: 4 }\n    )\n  },\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Client ID Configuration Example\nDESCRIPTION: Example of configuring client ID in Apple authentication.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/apple.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  clientID: \"my-client\"\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying OpenAuth to Bun\nDESCRIPTION: Shows how to export the OpenAuth server for deployment with Bun runtime.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/index.mdx#2025-04-16_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nexport default app\n```\n\n----------------------------------------\n\nTITLE: Specifying OIDC scopes\nDESCRIPTION: Example of specifying OIDC scopes to request during authentication. Scopes determine what user information and permissions are requested.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/oidc.mdx#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  scopes: [\"openid\", \"profile\", \"email\"]\n}\n```\n\n----------------------------------------\n\nTITLE: ColorScheme Example with Light and Dark Values\nDESCRIPTION: Demonstrates the structure of a ColorScheme object which defines values for both light and dark modes. This is used for theme properties that need different values based on the color scheme.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/ui/theme.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  light: \"#FFF\",\n  dark: \"#000\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Password Validation in TypeScript\nDESCRIPTION: Example implementation of password validation logic that checks for minimum password length requirements.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/password.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  validatePassword: (password) => {\n     return password.length < 8 ? \"Password must be at least 8 characters\" : undefined\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: CodeProvider Function Signature in TypeScript\nDESCRIPTION: This code block shows the function signature for the CodeProvider, indicating that it takes a configuration object as its parameter.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/code.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nCodeProvider(config)\n```\n\n----------------------------------------\n\nTITLE: Setting Primary Color in Theme Configuration\nDESCRIPTION: Shows how to set the primary color in a theme. This color is used for buttons, links, and other interactive elements throughout the UI.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/ui/theme.mdx#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  primary: \"#FF5E00\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running Bun Issuer for OpenAuth Server\nDESCRIPTION: This command starts the OpenAuth issuer server using Bun runtime with hot reloading enabled. It runs the issuer.ts file located in the issuer/bun directory.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/examples/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ bun run --hot ./issuer/bun/issuer.ts\n```\n\n----------------------------------------\n\nTITLE: Yahoo OAuth Scopes Configuration Example in TypeScript\nDESCRIPTION: Example showing how to specify the OAuth scopes requested during authentication, such as email and profile access permissions.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/yahoo.mdx#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  scopes: [\"email\", \"profile\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Theme in OpenAuth\nDESCRIPTION: Shows how to define a custom theme by creating a Theme object with various properties and applying it to an issuer configuration. The example defines a theme named \"Acne\" with custom radius and favicon settings.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/ui/theme.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Theme } from \"@openauthjs/openauth/ui/theme\"\n\nconst MY_THEME: Theme = {\n  title: \"Acne\",\n  radius: \"none\",\n  favicon: \"https://www.example.com/favicon.svg\",\n  // ...\n}\n\nexport default issuer({\n  theme: MY_THEME,\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Setting issuer URL in OidcConfig\nDESCRIPTION: Example of setting the issuer parameter in OidcConfig. The issuer is the URL of your authorization server.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/oidc.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  issuer: \"https://auth.myserver.com\"\n}\n```\n\n----------------------------------------\n\nTITLE: YahooProvider Method Signature in TypeScript\nDESCRIPTION: The function signature for the YahooProvider method which takes a YahooConfig object as parameter and returns a Provider object.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/yahoo.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nYahooProvider(config)\n```\n\n----------------------------------------\n\nTITLE: Configuring Border Radius in Theme\nDESCRIPTION: Demonstrates how to set the border radius property, which controls the roundness of UI elements in the theme. Options include \"none\", \"sm\", \"md\", \"lg\", and \"full\".\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/ui/theme.mdx#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  radius: \"none\"\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Auth Components\nDESCRIPTION: CSS styles for authentication-related UI components including buttons and layout.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/start/sst.mdx#2025-04-16_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n.ctas button {\n  appearance: none;\n  background: transparent;\n  border-radius: 128px;\n  height: 48px;\n  padding: 0 20px;\n  border: none;\n  border: 1px solid transparent;\n  transition:\n    background 0.2s,\n    color 0.2s,\n    border-color 0.2s;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 16px;\n  line-height: 20px;\n  font-weight: 500;\n}\n\nbutton.primary {\n  background: var(--foreground);\n  color: var(--background);\n  gap: 8px;\n}\n\nbutton.secondary {\n  border-color: var(--gray-alpha-200);\n  min-width: 180px;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Client ID in TwitchConfig\nDESCRIPTION: Demonstrates how to specify the client ID in the TwitchConfig object. The client ID is a string that identifies your application to Twitch.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/twitch.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  clientID: \"my-client\"\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Exchange Errors in OpenAuth Client\nDESCRIPTION: Demonstrates how to check for specific error types when token exchange fails using instanceof operator to identify the error type.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/client.mdx#2025-04-16_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport { InvalidAuthorizationCodeError } from \"@openauthjs/openauth/error\"\n\nconsole.log(err instanceof InvalidAuthorizationCodeError)\n```\n\n----------------------------------------\n\nTITLE: Deploying OpenAuth to AWS Lambda\nDESCRIPTION: Demonstrates how to export the OpenAuth server as an AWS Lambda handler using Hono's AWS Lambda adapter.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/index.mdx#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { handle } from \"hono/aws-lambda\"\n\nexport const handler = handle(app)\n```\n\n----------------------------------------\n\nTITLE: OAuth Scopes Configuration Example\nDESCRIPTION: Example of configuring OAuth scopes for Apple authentication.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/apple.mdx#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  scopes: [\"email\", \"profile\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Font Scale in Theme Configuration\nDESCRIPTION: Shows how to adjust the font scale in a theme. This property can increase or decrease font sizes across the entire UI, with a default value of \"1\".\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/ui/theme.mdx#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  font: {\n    scale: \"1.25\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying SST Application to AWS Production\nDESCRIPTION: This command deploys the SST application to AWS, specifically to a production stage. It uses the Serverless Stack Toolkit (SST) to handle the deployment process.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/start/sst.mdx#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpx sst deploy --stage production\n```\n\n----------------------------------------\n\nTITLE: KeycloakConfig baseUrl Property Example (TypeScript)\nDESCRIPTION: This snippet shows how to set the baseUrl property in the KeycloakConfig object, which specifies the base URL of the Keycloak server.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/keycloak.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  baseUrl: \"https://your-keycloak-domain\"\n}\n```\n\n----------------------------------------\n\nTITLE: GoogleOidcProvider Function Signature\nDESCRIPTION: Type signature for the GoogleOidcProvider function that creates a Google OIDC provider instance.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/google.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nGoogleOidcProvider(config)\n```\n\n----------------------------------------\n\nTITLE: Apple OIDC Provider Basic Configuration\nDESCRIPTION: Simple configuration example for Apple OIDC provider.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/apple.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nAppleOidcProvider({\n  clientID: \"1234567890\"\n})\n```\n\n----------------------------------------\n\nTITLE: Setting OIDC Scopes in GoogleOidcConfig\nDESCRIPTION: Example of how to request specific OIDC scopes in the GoogleOidcConfig object. OIDC scopes define the identity information requested from the user.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/google.mdx#2025-04-16_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  scopes: [\"openid\", \"profile\", \"email\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting OAuth 2.0 Client ID\nDESCRIPTION: Example of configuring the clientID parameter, which is a string identifier for your application.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/oauth2.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  clientID: \"my-client\"\n}\n```\n\n----------------------------------------\n\nTITLE: CloudflareStorage Method Signature\nDESCRIPTION: Function signature for the CloudflareStorage constructor method that creates a Cloudflare KV store instance.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/storage/cloudflare.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nCloudflareStorage(options)\n```\n\n----------------------------------------\n\nTITLE: CognitoProvider Constructor Example\nDESCRIPTION: Shows the basic constructor usage for creating a Cognito OAuth2 provider instance.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/cognito.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nCognitoProvider({\n  domain: \"your-domain.auth.us-east-1.amazoncognito.com\",\n  region: \"us-east-1\",\n  clientID: \"1234567890\",\n  clientSecret: \"0987654321\"\n})\n```\n\n----------------------------------------\n\nTITLE: KeycloakConfig scopes Property Example (TypeScript)\nDESCRIPTION: This example demonstrates how to set the scopes property in the KeycloakConfig object, which is an array of OAuth scopes to request during authentication.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/keycloak.mdx#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  scopes: [\"email\", \"profile\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Basic XProvider Configuration Example in TypeScript\nDESCRIPTION: A simple example showing how to configure the XProvider with the required client credentials.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/x.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nXProvider({\n  clientID: \"1234567890\",\n  clientSecret: \"0987654321\"\n})\n```\n\n----------------------------------------\n\nTITLE: Twitch Provider Basic Usage Example\nDESCRIPTION: A simple example of TwitchProvider instantiation with client ID and secret. This creates a basic provider instance with minimal required configuration.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/twitch.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nTwitchProvider({\n  clientID: \"1234567890\",\n  clientSecret: \"0987654321\"\n})\n```\n\n----------------------------------------\n\nTITLE: CodeUI Method Signature in TypeScript\nDESCRIPTION: This snippet shows the method signature for the CodeUI function, which is used to create a UI for the Code provider flow in OpenAuth.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/ui/code.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nCodeUI(props)\n```\n\n----------------------------------------\n\nTITLE: Setting Query Parameters in GoogleConfig\nDESCRIPTION: Example of how to pass additional parameters to the authorization endpoint using the query field in GoogleConfig.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/google.mdx#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  query: {\n    access_type: \"offline\",\n    prompt: \"consent\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Apple OIDC Provider\nDESCRIPTION: Example of setting up Apple OIDC authentication provider with client ID.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/apple.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AppleOidcProvider } from \"@openauthjs/openauth/provider/apple\"\n\nexport default issuer({\n  providers: {\n    apple: AppleOidcProvider({\n      clientID: \"1234567890\"\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Starting the Development Server with Node Package Managers\nDESCRIPTION: Commands to start the Next.js development server using different Node.js package managers. After starting, the application will be accessible at http://localhost:3001 where users can test the OpenAuth authentication flow.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/examples/client/nextjs/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n# or\nbun dev\n```\n\n----------------------------------------\n\nTITLE: Importing the OpenAuth Issuer Function\nDESCRIPTION: Imports the core issuer function from the OpenAuth package to create an authentication server.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/README.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { issuer } from \"@openauthjs/openauth\"\n```\n\n----------------------------------------\n\nTITLE: Setting the clientID Parameter in Microsoft Authentication\nDESCRIPTION: Example showing how to set the clientID parameter which is a string that identifies your application to the Microsoft authentication service.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/microsoft.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  clientID: \"my-client\"\n}\n```\n\n----------------------------------------\n\nTITLE: OIDC Query Parameters Example\nDESCRIPTION: Example of configuring query parameters for OIDC authentication.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/apple.mdx#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  query: {\n    prompt: \"consent\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Password Provider with Basic Structure\nDESCRIPTION: Shows how to incorporate the password-based authentication provider alongside other providers.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/README.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PasswordProvider } from \"@openauthjs/openauth/provider/password\"\n\nconst app = issuer({\n  providers: {\n    github: ...,\n    password: PasswordProvider(...),\n  },\n  ...\n})\n```\n\n----------------------------------------\n\nTITLE: Setting the tenant Parameter for Microsoft Authentication\nDESCRIPTION: Example showing how to set the tenant ID for Microsoft authentication, which is typically the same as the client ID.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/microsoft.mdx#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  tenant: \"1234567890\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting the clientSecret Parameter in Microsoft Authentication\nDESCRIPTION: Example showing how to set the clientSecret parameter which is a private key used to authenticate your application. This should be kept secure.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/microsoft.mdx#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  clientSecret: \"0987654321\"\n}\n```\n\n----------------------------------------\n\nTITLE: OIDC Scopes Configuration Example\nDESCRIPTION: Example of configuring OIDC scopes for authentication.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/apple.mdx#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  scopes: [\"openid\", \"profile\", \"email\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Using MicrosoftProvider with Configuration Parameters\nDESCRIPTION: Signature and implementation example of MicrosoftProvider that creates a Microsoft OAuth2 provider with required tenant, clientID, and clientSecret parameters.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/microsoft.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nMicrosoftProvider(config)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nMicrosoftProvider({\n  tenant: \"1234567890\",\n  clientID: \"1234567890\",\n  clientSecret: \"0987654321\"\n})\n```\n\n----------------------------------------\n\nTITLE: Setting OAuth Scopes for Microsoft Authentication\nDESCRIPTION: Example showing how to set the OAuth scopes that you want to request during the authentication process.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/microsoft.mdx#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  scopes: [\"email\", \"profile\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Client ID in GoogleConfig\nDESCRIPTION: Example of how to set the client ID in the GoogleConfig object. The client ID is a string that identifies your application.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/google.mdx#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  clientID: \"my-client\"\n}\n```\n\n----------------------------------------\n\nTITLE: Provider Configuration Example for OpenAuth Select UI\nDESCRIPTION: An example object configuration for providers in the Select UI, showing how to hide GitHub and customize Google's display name.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/ui/select.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  github: {\n    hide: true\n  },\n  google: {\n    display: \"Google\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Twitch OAuth2 Provider\nDESCRIPTION: Shows the function signature and usage of TwitchProvider. This creates a Twitch OAuth2 provider instance with the specified configuration.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/twitch.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nTwitchProvider(config)\n```\n\n----------------------------------------\n\nTITLE: XProvider Function Signature in TypeScript\nDESCRIPTION: The function signature for the XProvider constructor that takes a configuration object and returns a Provider instance.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/x.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nXProvider(config)\n```\n\n----------------------------------------\n\nTITLE: Setting Client Secret in GoogleConfig\nDESCRIPTION: Example of how to set the client secret in the GoogleConfig object. The client secret is a private key used to authenticate your application.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/google.mdx#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  clientSecret: \"0987654321\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running Astro Client for OpenAuth\nDESCRIPTION: This command starts the Astro client application for testing the OpenAuth flow. It should be run after the issuer server is up and running.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/examples/README.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ cd client/astro\n$ bun dev\n```\n\n----------------------------------------\n\nTITLE: Using Built-in Themes in OpenAuth\nDESCRIPTION: Demonstrates how to import and use a built-in theme from OpenAuth. This example shows importing the SST theme and applying it to an issuer configuration.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/ui/theme.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { THEME_SST } from \"@openauthjs/openauth/ui/theme\"\n\nexport default issuer({\n  theme: THEME_SST,\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Specifying OAuth Scopes for Discord Authentication\nDESCRIPTION: Shows how to request specific OAuth scopes when authenticating with Discord using the scopes configuration property.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/discord.mdx#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  scopes: [\"email\", \"profile\"]\n}\n```\n\n----------------------------------------\n\nTITLE: XProviderConfig clientSecret Example in TypeScript\nDESCRIPTION: Example of how to specify the clientSecret in the XProvider configuration. This is a private key provided by X.com for authenticating your application.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/x.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  clientSecret: \"0987654321\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Client ID in GoogleOidcConfig\nDESCRIPTION: Example of how to set the client ID in the GoogleOidcConfig object. The client ID identifies your application in the OIDC flow.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/google.mdx#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  clientID: \"my-client\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Font Family in Theme\nDESCRIPTION: Demonstrates how to set the font family property in a theme's font configuration. This determines the typeface used throughout the UI.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/ui/theme.mdx#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  font: {\n    family: \"Geist Mono, monospace\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting OIDC Scopes\nDESCRIPTION: Example of configuring OIDC scopes to request specific permissions like OpenID, profile, and email access.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/facebook.mdx#2025-04-16_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  scopes: [\"openid\", \"profile\", \"email\"]\n}\n```\n\n----------------------------------------\n\nTITLE: XProviderConfig Query Parameters Example in TypeScript\nDESCRIPTION: Example of how to add additional query parameters to the authorization endpoint request, such as access_type and prompt settings.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/x.mdx#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  query: {\n    access_type: \"offline\",\n    prompt: \"consent\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Discord Provider ClientID\nDESCRIPTION: Shows how to set the clientID property in the configuration object, which is a string that identifies your application to Discord.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/discord.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  clientID: \"my-client\"\n}\n```\n\n----------------------------------------\n\nTITLE: Provider Selection UI Configuration\nDESCRIPTION: Shows how to customize the provider selection interface.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/issuer.mdx#2025-04-16_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Select } from \"@openauthjs/openauth/ui/select\"\n\nissuer({\n  select: Select({\n    providers: {\n      github: { hide: true },\n      google: { display: \"Google\" }\n    }\n  })\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Using MicrosoftOidcProvider with Configuration Parameters\nDESCRIPTION: Signature and basic implementation of the MicrosoftOidcProvider function with minimal configuration. This method creates a Microsoft OIDC provider for email verification.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/microsoft.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nMicrosoftOidcProvider(config)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nMicrosoftOidcProvider({\n  clientID: \"1234567890\"\n})\n```\n\n----------------------------------------\n\nTITLE: Setting clientSecret in JumpCloudConfig in TypeScript\nDESCRIPTION: Example of setting the clientSecret property in JumpCloudConfig. This is the private key used to authenticate your application and should be kept secure.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/jumpcloud.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  clientSecret: \"0987654321\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Discord Provider ClientSecret\nDESCRIPTION: Shows how to set the clientSecret property in the configuration object, which is a private key used for authentication that should be kept secure.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/discord.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  clientSecret: \"0987654321\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Memory Storage for OpenAuth\nDESCRIPTION: Sets up an in-memory storage backend for refresh tokens and password hashes, suitable for testing environments.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/README.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MemoryStorage } from \"@openauthjs/openauth/storage/memory\"\n\nconst app = issuer({\n  providers: { ... },\n  subjects,\n  async success(ctx, value) { ... },\n  storage: MemoryStorage(),\n})\n```\n\n----------------------------------------\n\nTITLE: KeycloakConfig realm Property Example (TypeScript)\nDESCRIPTION: This snippet shows how to set the realm property in the KeycloakConfig object, which specifies the Keycloak realm to authenticate against.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/keycloak.mdx#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  realm: \"your-realm\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting SpotifyProvider ClientSecret (TypeScript)\nDESCRIPTION: This snippet shows how to set the clientSecret in the SpotifyConfig object. The clientSecret is a private key used to authenticate your application and should be kept secure.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/spotify.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  clientSecret: \"0987654321\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Facebook OAuth ClientID\nDESCRIPTION: Example of setting the clientID in FacebookConfig object, which is a string that identifies your app.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/facebook.mdx#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  clientID: \"my-client\"\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying OpenAuth to Node.js\nDESCRIPTION: Shows how to deploy the OpenAuth server using Node.js HTTP server via the Hono node-server adapter.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/index.mdx#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { serve } from \"@hono/node-server\"\n\nserve(app)\n```\n\n----------------------------------------\n\nTITLE: Defining Subjects for OpenAuth\nDESCRIPTION: Creates a subjects definition using Valibot schema validation to define the structure of user data that will be included in access tokens.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/index.mdx#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { object, string } from \"valibot\"\n\nconst subjects = createSubjects({\n  user: object({\n    userID: string(),\n    // may want to add workspaceID here if doing a multi-tenant app\n    workspaceID: string(),\n  }),\n})\n```\n\n----------------------------------------\n\nTITLE: KeycloakConfig clientID Property Example (TypeScript)\nDESCRIPTION: This example demonstrates setting the clientID property in the KeycloakConfig object, which is a string used to identify your application.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/keycloak.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  clientID: \"my-client\"\n}\n```\n\n----------------------------------------\n\nTITLE: SlackConfig clientSecret Example\nDESCRIPTION: Example of setting the clientSecret property in SlackConfig, which is a private key used to authenticate your application with Slack.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/slack.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  clientSecret: \"0987654321\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running Next.js Development Server\nDESCRIPTION: Commands to start the Next.js development server using different package managers. This allows for local development and viewing the application at http://localhost:3000.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/examples/quickstart/sst/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n# or\nbun dev\n```\n\n----------------------------------------\n\nTITLE: Basic DiscordProvider Implementation Example\nDESCRIPTION: A simple implementation example showing the required clientID and clientSecret parameters for creating a Discord OAuth2 provider.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/discord.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nDiscordProvider({\n  clientID: \"1234567890\",\n  clientSecret: \"0987654321\"\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Client ID Configuration\nDESCRIPTION: Example of configuring the client ID parameter, which is used to identify your application.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/cognito.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  clientID: \"my-client\"\n}\n```\n\n----------------------------------------\n\nTITLE: SlackConfig query Parameter Example\nDESCRIPTION: Example of using the optional query parameter to pass additional parameters to the Slack authorization endpoint, such as access_type and prompt.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/slack.mdx#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  query: {\n    access_type: \"offline\",\n    prompt: \"consent\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js Project with SST\nDESCRIPTION: Commands to create a new Next.js application and initialize SST for deployment.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/start/sst.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app@latest oa-nextjs\ncd oa-nextjs\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx sst@latest init\n```\n\n----------------------------------------\n\nTITLE: Client Secret Configuration Example\nDESCRIPTION: Example of configuring client secret in Apple authentication.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/apple.mdx#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  clientSecret: \"0987654321\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OAuth Scopes\nDESCRIPTION: Example of setting OAuth scopes for requesting specific permissions.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/cognito.mdx#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  scopes: [\"email\", \"profile\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Client Secret in TwitchConfig\nDESCRIPTION: Shows how to specify the client secret in the TwitchConfig object. The client secret is a private key used to authenticate your application and should be kept secure.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/twitch.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  clientSecret: \"0987654321\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Starlight Starter Kit with npm\nDESCRIPTION: Command to create a new Astro project using the Starlight template. This is typically used to initialize a new documentation project with Starlight.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create astro@latest -- --template starlight\n```\n\n----------------------------------------\n\nTITLE: Configuring Logo URL in Theme\nDESCRIPTION: Demonstrates setting the logo URL in a theme configuration. This displays your app's logo in the OpenAuth UI.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/ui/theme.mdx#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  logo: \"https://www.example.com/logo.svg\"\n}\n```\n\n----------------------------------------\n\nTITLE: DiscordProvider Method Signature\nDESCRIPTION: The signature for the DiscordProvider function which takes a configuration object and returns a Provider instance.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/discord.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nDiscordProvider(config)\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Query Parameters to Twitch Authentication\nDESCRIPTION: Demonstrates how to add additional parameters to the Twitch authorization endpoint using the query option in TwitchConfig.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/twitch.mdx#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  query: {\n    access_type: \"offline\",\n    prompt: \"consent\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: SST Deployment Output\nDESCRIPTION: This snippet shows the expected output after a successful SST deployment. It includes the URLs for the deployed authentication server (MyAuth) and web frontend (MyWeb).\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/start/sst.mdx#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n✓  Complete\n   MyAuth: https://vp3honbl3od4gmo7mei37mchky0waxew.lambda-url.us-east-1.on.aws\n   MyWeb: https://d2fjg1rqbqi95t.cloudfront.net\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies\nDESCRIPTION: Commands to install workspace packages and build the OpenAuth package from the project root.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/examples/client/react/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ bun install\n$ cd packages/openauth\n$ bun run build\n```\n\n----------------------------------------\n\nTITLE: Basic Yahoo Provider Implementation Example in TypeScript\nDESCRIPTION: A basic implementation example of the YahooProvider showing the minimum required configuration with clientID and clientSecret.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/yahoo.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nYahooProvider({\n  clientID: \"1234567890\",\n  clientSecret: \"0987654321\"\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring OAuth Scopes for Twitch Authentication\nDESCRIPTION: Shows how to request specific OAuth scopes from Twitch during the authentication process. Scopes determine what permissions your application has on the user's account.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/twitch.mdx#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  scopes: [\"email\", \"profile\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Yahoo OAuth Client ID Configuration Example in TypeScript\nDESCRIPTION: Example showing how to configure the clientID property in the Yahoo provider configuration. This identifies your application to Yahoo's OAuth service.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/yahoo.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  clientID: \"my-client\"\n}\n```\n\n----------------------------------------\n\nTITLE: FacebookOidcProvider Method Signature\nDESCRIPTION: Method signature for creating a Facebook OIDC provider with configuration parameters.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/facebook.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nFacebookOidcProvider(config)\n```\n\n----------------------------------------\n\nTITLE: XProviderConfig clientID Example in TypeScript\nDESCRIPTION: Example of how to specify the clientID in the XProvider configuration. This ID is provided by X.com to identify your application.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/x.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  clientID: \"my-client\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Additional OAuth Query Parameters\nDESCRIPTION: Example of adding custom query parameters to the authorization endpoint, such as access_type and prompt.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/facebook.mdx#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  query: {\n    access_type: \"offline\",\n    prompt: \"consent\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Version History Documentation in Markdown\nDESCRIPTION: Changelog entries documenting patch versions and dependency updates for the NextJS OpenAuth package, showing version progression from 0.1.1 to 0.1.6 with corresponding OpenAuth dependency updates.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/examples/client/nextjs/CHANGELOG.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# nextjs\n\n## 0.1.6\n\n### Patch Changes\n\n- Updated dependencies [8b5f490]\n  - @openauthjs/openauth@0.2.4\n\n## 0.1.5\n\n### Patch Changes\n\n- Updated dependencies [80238de]\n  - @openauthjs/openauth@0.2.3\n\n## 0.1.4\n\n### Patch Changes\n\n- Updated dependencies [6da8647]\n  - @openauthjs/openauth@0.2.2\n\n## 0.1.3\n\n### Patch Changes\n\n- Updated dependencies [83125f1]\n  - @openauthjs/openauth@0.2.1\n\n## 0.1.2\n\n### Patch Changes\n\n- Updated dependencies [8c3f050]\n- Updated dependencies [0f93def]\n  - @openauthjs/openauth@0.2.0\n\n## 0.1.1\n\n### Patch Changes\n\n- Updated dependencies [584728f]\n- Updated dependencies [41acdc2]\n- Updated dependencies [2aa531b]\n  - @openauthjs/openauth@0.1.2\n```\n\n----------------------------------------\n\nTITLE: Initiating Auth Flow with Authorization Code Flow\nDESCRIPTION: Generates an authorization URL for server-side rendering applications to start the authentication process.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/README.md#2025-04-16_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst { url } = await client.authorize(\n  <redirect-uri>,\n  \"code\"\n)\n```\n\n----------------------------------------\n\nTITLE: Defining PasswordRegisterError Types in TypeScript\nDESCRIPTION: A union type definition that represents the various errors that can occur during password registration, including email validation errors, password issues, and code verification problems. Each error has a specific type identifier and some include additional message details.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/password.mdx#2025-04-16_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\n{ type: \"invalid_code\" } | { type: \"email_taken\" } | { type: \"invalid_email\" } | { type: \"invalid_password\" } | { type: \"password_mismatch\" } | { message: string, type: \"validation_error\" }\n```\n\n----------------------------------------\n\nTITLE: Authentication UI Styling\nDESCRIPTION: CSS styles for authentication buttons and components\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/start/standalone.mdx#2025-04-16_snippet_6\n\nLANGUAGE: css\nCODE:\n```\n.ctas button {\n  appearance: none;\n  background: transparent;\n  border-radius: 128px;\n  height: 48px;\n  padding: 0 20px;\n  border: none;\n  border: 1px solid transparent;\n  transition:\n    background 0.2s,\n    color 0.2s,\n    border-color 0.2s;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 16px;\n  line-height: 20px;\n  font-weight: 500;\n}\n\nbutton.primary {\n  background: var(--foreground);\n  color: var(--background);\n  gap: 8px;\n}\n\nbutton.secondary {\n  border-color: var(--gray-alpha-200);\n  min-width: 180px;\n}\n```\n\n----------------------------------------\n\nTITLE: Starting JWT API Server\nDESCRIPTION: Command to start the JWT API server with hot reloading for user subject verification.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/examples/client/react/README.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbun run --hot client/jwt-api/index.ts\n```\n\n----------------------------------------\n\nTITLE: Setting query parameters in JumpCloudConfig in TypeScript\nDESCRIPTION: Example of setting additional query parameters to pass to the authorization endpoint using the query property.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/provider/jumpcloud.mdx#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  query: {\n    access_type: \"offline\",\n    prompt: \"consent\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting OpenAuth Server\nDESCRIPTION: Command to start the OpenAuth server with hot reloading, running from the examples directory.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/examples/client/react/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbun run --hot issuer/bun/issuer.ts\n```\n\n----------------------------------------\n\nTITLE: Starting React Development Server\nDESCRIPTION: Command to start the React development server for the SPA authentication demo.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/examples/client/react/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbun run dev\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with Bun\nDESCRIPTION: Commands to create and start a new Next.js application using Bun package manager\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/start/standalone.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbun create next-app oa-nextjs\ncd oa-nextjs\nbun dev\n```\n\n----------------------------------------\n\nTITLE: Version Update Changelog in Markdown\nDESCRIPTION: Documents version 1.0.1 patch update of jwt-api package, noting the dependency update of @openauthjs/openauth to version 0.2.4.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/examples/client/jwt-api/CHANGELOG.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# jwt-api\n\n## 1.0.1\n\n### Patch Changes\n\n- Updated dependencies [8b5f490]\n  - @openauthjs/openauth@0.2.4\n```\n\n----------------------------------------\n\nTITLE: Displaying Starlight Project Structure\nDESCRIPTION: Shows the typical folder and file structure of a Starlight project. This includes directories for public assets, source files, content, and configuration files.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/README.md#2025-04-16_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n.\n├── public/\n├── src/\n│   ├── assets/\n│   ├── content/\n│   │   ├── docs/\n│   │   └── config.ts\n│   └── env.d.ts\n├── astro.config.mjs\n├── package.json\n└── tsconfig.json\n```\n\n----------------------------------------\n\nTITLE: Redirecting to OAuth Authorization URL\nDESCRIPTION: Shows how to redirect the user to the OAuth authorization URL to start the authentication flow in Single Page Applications.\nSOURCE: https://github.com/toolbeam/openauth/blob/master/www/src/content/docs/docs/client.mdx#2025-04-16_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nlocation.href = url\n```"
  }
]