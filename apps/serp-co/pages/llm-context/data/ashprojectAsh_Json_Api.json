[
  {
    "owner": "ash-project",
    "repo": "ash_json_api",
    "content": "TITLE: Configuring JSON:API Resource Example\nDESCRIPTION: Example showing how to configure a JSON:API resource with custom routes, includes, and type definitions.\nSOURCE: https://github.com/ash-project/ash_json_api/blob/main/documentation/dsls/DSL-AshJsonApi.Resource.md#2025-04-19_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\njson_api do\n  type \"post\"\n  includes [\n    friends: [\n      :comments\n    ],\n    comments: []\n  ]\n\n  routes do\n    base \"/posts\"\n\n    get :read\n    get :me, route: \"/me\"\n    index :read\n    post :confirm_name, route: \"/confirm_name\"\n    patch :update\n    related :comments, :read\n    relationship :comments, :read\n    post_to_relationship :comments\n    patch_relationship :comments\n    delete_from_relationship :comments\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Creating AshJsonApi Router in Elixir\nDESCRIPTION: Elixir code for creating a separate Router module to work with AshJsonApi domains and generate routes for resources.\nSOURCE: https://github.com/ash-project/ash_json_api/blob/main/documentation/tutorials/getting-started-with-ash-json-api.md#2025-04-19_snippet_3\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule HelpdeskWeb.JsonApiRouter do\n  use AshJsonApi.Router,\n    # The api modules you want to serve\n    domains: [Helpdesk.Support],\n    # optionally an open_api route\n    open_api: \"/open_api\"\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Generic Route in Ash JSON API\nDESCRIPTION: Defines a generic route for an action in Ash JSON API. This function allows specifying the HTTP method, path, and associated action, along with various options for customizing the route's behavior and response.\nSOURCE: https://github.com/ash-project/ash_json_api/blob/main/documentation/dsls/DSL-AshJsonApi.Domain.md#2025-04-19_snippet_28\n\nLANGUAGE: elixir\nCODE:\n```\nroute resource, method, route, action\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Route in Ash JSON API (Elixir)\nDESCRIPTION: Creates a custom route for a generic action in Ash JSON API. It requires a method, route path, and action name as arguments. This allows for flexible route definitions beyond standard CRUD operations.\nSOURCE: https://github.com/ash-project/ash_json_api/blob/main/documentation/dsls/DSL-AshJsonApi.Resource.md#2025-04-19_snippet_18\n\nLANGUAGE: elixir\nCODE:\n```\nroute :get, \"say_hi/:name\", :say_hello\n```\n\n----------------------------------------\n\nTITLE: Defining JSON:API Routes\nDESCRIPTION: Comprehensive example of configuring various route types including get, index, post, patch, related, relationship operations, and custom routes.\nSOURCE: https://github.com/ash-project/ash_json_api/blob/main/documentation/dsls/DSL-AshJsonApi.Domain.md#2025-04-19_snippet_2\n\nLANGUAGE: elixir\nCODE:\n```\nroutes do\n  base \"/posts\"\n\n  get :read\n  get :me, route: \"/me\"\n  index :read\n  post :confirm_name, route: \"/confirm_name\"\n  patch :update\n  related :comments, :read\n  relationship :comments, :read\n  post_to_relationship :comments\n  patch_relationship :comments\n  delete_from_relationship :comments\nend\n\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON:API Routes with Relationship Arguments in Elixir\nDESCRIPTION: Demonstrates how to set up JSON:API routes with relationship arguments and corresponding action definitions for handling author relationships in a tweets resource.\nSOURCE: https://github.com/ash-project/ash_json_api/blob/main/documentation/topics/relationships.md#2025-04-19_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\n# On a tweets resource\n\n# With a patch route that references the `authors` argument\njson_api do\n  routes do\n    patch :update, relationship_arguments: [:authors]\n  end\nend\n\n# And an argument by that name in the action\nactions do\n  update :update do\n    argument :authors, {:array, :map}, allow_nil?: false\n\n    change manage_relationship(:authors, type: :append_and_remove) # Use the authors argument to allow changing the related authors on update\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON:API Routes Example\nDESCRIPTION: Example showing route configuration for a JSON:API resource including various HTTP methods and relationship endpoints.\nSOURCE: https://github.com/ash-project/ash_json_api/blob/main/documentation/dsls/DSL-AshJsonApi.Resource.md#2025-04-19_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\nroutes do\n  base \"/posts\"\n\n  get :read\n  get :me, route: \"/me\"\n  index :read\n  post :confirm_name, route: \"/confirm_name\"\n  patch :update\n  related :comments, :read\n  relationship :comments, :read\n  post_to_relationship :comments\n  patch_relationship :comments\n  delete_from_relationship :comments\nend\n```\n\n----------------------------------------\n\nTITLE: Defining POST Route in AshJsonApi\nDESCRIPTION: Creates a POST route to create a record. Can be configured with various options including upsert behavior, relationship handling, and custom response formatting.\nSOURCE: https://github.com/ash-project/ash_json_api/blob/main/documentation/dsls/DSL-AshJsonApi.Domain.md#2025-04-19_snippet_20\n\nLANGUAGE: elixir\nCODE:\n```\npost resource, action\n```\n\n----------------------------------------\n\nTITLE: Adding AshJsonApi Dependency in Elixir's mix.exs\nDESCRIPTION: Code snippet showing how to add the AshJsonApi dependency to the mix.exs file in an Elixir project.\nSOURCE: https://github.com/ash-project/ash_json_api/blob/main/documentation/tutorials/getting-started-with-ash-json-api.md#2025-04-19_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\n  defp deps do\n    [\n      # .. other dependencies\n      {:ash_json_api, \"~> 1.0\"},\n    ]\n  end\n```\n\n----------------------------------------\n\nTITLE: Defining PATCH Route in Ash JSON API\nDESCRIPTION: Creates a PATCH route to update a record. The patch function requires a resource module and an action atom. It supports various options including relationship arguments, custom route paths, and metadata functions.\nSOURCE: https://github.com/ash-project/ash_json_api/blob/main/documentation/dsls/DSL-AshJsonApi.Domain.md#2025-04-19_snippet_21\n\nLANGUAGE: elixir\nCODE:\n```\npatch resource, action\n```\n\nLANGUAGE: elixir\nCODE:\n```\npatch :update\n```\n\n----------------------------------------\n\nTITLE: Configuring MIME Types for JSON:API in Elixir\nDESCRIPTION: Configuration snippet for accepting JSON:API content type in an Elixir application's config/config.exs file.\nSOURCE: https://github.com/ash-project/ash_json_api/blob/main/documentation/tutorials/getting-started-with-ash-json-api.md#2025-04-19_snippet_2\n\nLANGUAGE: elixir\nCODE:\n```\n# config/config.exs\nconfig :mime,\n  extensions: %{\"json\" => \"application/vnd.api+json\"},\n  types: %{\"application/vnd.api+json\" => [\"json\"]}\n```\n\n----------------------------------------\n\nTITLE: Defining RELATED Route in Ash JSON API\nDESCRIPTION: Creates a GET route to read related resources of a relationship. The related function requires a resource module, relationship atom, and an action atom. It supports options for custom route paths and response customization.\nSOURCE: https://github.com/ash-project/ash_json_api/blob/main/documentation/dsls/DSL-AshJsonApi.Domain.md#2025-04-19_snippet_23\n\nLANGUAGE: elixir\nCODE:\n```\nrelated resource, relationship, action\n```\n\nLANGUAGE: elixir\nCODE:\n```\nrelated :comments, :read\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON:API in an Ash Domain\nDESCRIPTION: Basic example showing how to configure JSON:API in an Ash domain with a prefix and error logging enabled.\nSOURCE: https://github.com/ash-project/ash_json_api/blob/main/documentation/dsls/DSL-AshJsonApi.Domain.md#2025-04-19_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\njson_api do\n  prefix \"/json_api\"\n  log_errors? true\nend\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Dedicated Relationship Manipulation Routes in Elixir\nDESCRIPTION: Shows how to set up dedicated routes for relationship manipulation using post_to_relationship, patch_relationship, and delete_from_relationship.\nSOURCE: https://github.com/ash-project/ash_json_api/blob/main/documentation/topics/relationships.md#2025-04-19_snippet_3\n\nLANGUAGE: elixir\nCODE:\n```\nroutes do\n  ...\n  # use `post_to_relationship` when the operation is additive\n  post_to_relationship :add_author, action: :add_author\n  # use `patch_relationship` when the operation is both additive and subtractive\n  # use `delete_from_relationship` when the operation is subtractive\nend\n```\n\n----------------------------------------\n\nTITLE: Forwarding Requests to AshJsonApi Router in Phoenix\nDESCRIPTION: Elixir code showing how to forward requests from a Phoenix router to the AshJsonApi router for handling API requests.\nSOURCE: https://github.com/ash-project/ash_json_api/blob/main/documentation/tutorials/getting-started-with-ash-json-api.md#2025-04-19_snippet_5\n\nLANGUAGE: elixir\nCODE:\n```\nscope \"/api/json\" do\n  pipe_through(:api)\n\n  forward \"/helpdesk\", HelpdeskWeb.JsonApiRouter\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing GET Route for Single Records\nDESCRIPTION: Example of configuring a GET route to retrieve a single record using the read action.\nSOURCE: https://github.com/ash-project/ash_json_api/blob/main/documentation/dsls/DSL-AshJsonApi.Domain.md#2025-04-19_snippet_4\n\nLANGUAGE: elixir\nCODE:\n```\nget :read\n```\n\n----------------------------------------\n\nTITLE: Defining GET Route in AshJsonApi\nDESCRIPTION: Creates a GET route to retrieve a single record. Requires a resource module and an action name, with optional configuration for path, fields, and behavior.\nSOURCE: https://github.com/ash-project/ash_json_api/blob/main/documentation/dsls/DSL-AshJsonApi.Domain.md#2025-04-19_snippet_18\n\nLANGUAGE: elixir\nCODE:\n```\nget resource, action\n```\n\n----------------------------------------\n\nTITLE: Defining POST Route in Ash JSON API\nDESCRIPTION: Creates a POST route to create a new record. Accepts a resource module and required action name. Supports various options like route path, fields customization, and relationship handling.\nSOURCE: https://github.com/ash-project/ash_json_api/blob/main/documentation/dsls/DSL-AshJsonApi.Domain.md#2025-04-19_snippet_5\n\nLANGUAGE: elixir\nCODE:\n```\npost resource \\\\ nil, action\n```\n\n----------------------------------------\n\nTITLE: Defining Index Route in JSON:API\nDESCRIPTION: Example of defining an index route for retrieving a list of records in JSON:API.\nSOURCE: https://github.com/ash-project/ash_json_api/blob/main/documentation/dsls/DSL-AshJsonApi.Resource.md#2025-04-19_snippet_3\n\nLANGUAGE: elixir\nCODE:\n```\nindex :read\n```\n\n----------------------------------------\n\nTITLE: Defining GET Route in JSON:API\nDESCRIPTION: Example of defining a GET route for retrieving a single record in JSON:API.\nSOURCE: https://github.com/ash-project/ash_json_api/blob/main/documentation/dsls/DSL-AshJsonApi.Resource.md#2025-04-19_snippet_2\n\nLANGUAGE: elixir\nCODE:\n```\nget :read\n```\n\n----------------------------------------\n\nTITLE: Defining POST Route in JSON:API\nDESCRIPTION: Example of defining a POST route for creating a record in JSON:API.\nSOURCE: https://github.com/ash-project/ash_json_api/blob/main/documentation/dsls/DSL-AshJsonApi.Resource.md#2025-04-19_snippet_4\n\nLANGUAGE: elixir\nCODE:\n```\npost :create\n```\n\n----------------------------------------\n\nTITLE: Defining DELETE Route in Ash JSON API\nDESCRIPTION: Creates a DELETE route to destroy a record. Accepts a resource module and required action name.\nSOURCE: https://github.com/ash-project/ash_json_api/blob/main/documentation/dsls/DSL-AshJsonApi.Domain.md#2025-04-19_snippet_8\n\nLANGUAGE: elixir\nCODE:\n```\ndelete resource \\\\ nil, action\n```\n\n----------------------------------------\n\nTITLE: Configuring Static OpenAPI Files for Production\nDESCRIPTION: Setting up conditional use of static OpenAPI files in production while using dynamic generation in development. This optimizes performance in production environments.\nSOURCE: https://github.com/ash-project/ash_json_api/blob/main/documentation/topics/open-api.md#2025-04-19_snippet_12\n\nLANGUAGE: elixir\nCODE:\n```\nopen_api_file =\n  if Mix.env() == :prod do\n    \"priv/static/open_api.json\"\n  else\n    nil\n  end\n\nuse AshJsonApi.Router,\n  domains: [...],\n  open_api: \"/open_api\",\n  modify_open_api: {__MODULE__, :modify_open_api, []},\n  open_api_file: open_api_file\n```\n\n----------------------------------------\n\nTITLE: Defining DELETE Route in Ash JSON API\nDESCRIPTION: Creates a DELETE route to destroy a record. The delete function requires a resource module and an action atom. It supports options for custom route paths, read actions, and response customization.\nSOURCE: https://github.com/ash-project/ash_json_api/blob/main/documentation/dsls/DSL-AshJsonApi.Domain.md#2025-04-19_snippet_22\n\nLANGUAGE: elixir\nCODE:\n```\ndelete resource, action\n```\n\nLANGUAGE: elixir\nCODE:\n```\ndelete :destroy\n```\n\n----------------------------------------\n\nTITLE: Customizing OpenAPI Documentation Values\nDESCRIPTION: Setting custom values for the OpenAPI spec including title, version, and servers. These options control the main metadata fields in the generated OpenAPI document.\nSOURCE: https://github.com/ash-project/ash_json_api/blob/main/documentation/topics/open-api.md#2025-04-19_snippet_5\n\nLANGUAGE: elixir\nCODE:\n```\n  use AshJsonApi.Router,\n    domains: [...],\n    open_api: \"/open_api\",\n    open_api_title: \"Title\",\n    open_api_version: \"1.0.0\",\n    open_api_servers: [\"http://domain.com/api/v1\"]\n```\n\n----------------------------------------\n\nTITLE: Example POST Route Configuration\nDESCRIPTION: Simple example showing how to configure a POST route with create action.\nSOURCE: https://github.com/ash-project/ash_json_api/blob/main/documentation/dsls/DSL-AshJsonApi.Domain.md#2025-04-19_snippet_6\n\nLANGUAGE: elixir\nCODE:\n```\npost :create\n```\n\n----------------------------------------\n\nTITLE: Configuring AshJsonApi Sign-in Route with Token Response in Elixir\nDESCRIPTION: Demonstrates how to define a custom sign-in route in an Ash User module that returns an authentication token in the response metadata. This creates a POST endpoint at '/sign_in' that uses the :sign_in_with_password action.\nSOURCE: https://github.com/ash-project/ash_json_api/blob/main/documentation/topics/authenticate-with-json-api.md#2025-04-19_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\n# In your User module\ndefmodule <YourApp>.<YourDomain>.User do\n  json_api do\n    routes do\n      # Read actions that return *only one resource* are allowed to be used with\n      # `post` routes.\n      post :sign_in_with_password do\n        route \"/sign_in\"\n\n        # Given a successful request, we will modify the response to include the\n        # generated token\n        metadata fn _subject, user, _request ->\n          %{token: user.__metadata__.token}\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining RELATIONSHIP Route in Ash JSON API\nDESCRIPTION: Creates a READ route to retrieve relationship data, returning resource identifiers. The relationship function requires a resource module, relationship atom, and an action atom.\nSOURCE: https://github.com/ash-project/ash_json_api/blob/main/documentation/dsls/DSL-AshJsonApi.Domain.md#2025-04-19_snippet_24\n\nLANGUAGE: elixir\nCODE:\n```\nrelationship resource, relationship, action\n```\n\nLANGUAGE: elixir\nCODE:\n```\nrelationship :comments, :read\n```\n\n----------------------------------------\n\nTITLE: Defining PATCH Route in Ash JSON API\nDESCRIPTION: Creates a PATCH route to update an existing record. Takes a resource module and required action name. Includes options for relationship handling and record lookup.\nSOURCE: https://github.com/ash-project/ash_json_api/blob/main/documentation/dsls/DSL-AshJsonApi.Domain.md#2025-04-19_snippet_7\n\nLANGUAGE: elixir\nCODE:\n```\npatch resource \\\\ nil, action\n```\n\n----------------------------------------\n\nTITLE: Defining RELATED Route in ASH JSON API\nDESCRIPTION: Defines a GET route for fetching related resources through a relationship. Requires specifying both the relationship and the action to use.\nSOURCE: https://github.com/ash-project/ash_json_api/blob/main/documentation/dsls/DSL-AshJsonApi.Resource.md#2025-04-19_snippet_9\n\nLANGUAGE: elixir\nCODE:\n```\nrelated relationship, action\n```\n\n----------------------------------------\n\nTITLE: Defining PATCH Route in ASH JSON API\nDESCRIPTION: Defines a PATCH route for updating a record using a specified action. Routes can be customized with options like path, action, and relationship handling.\nSOURCE: https://github.com/ash-project/ash_json_api/blob/main/documentation/dsls/DSL-AshJsonApi.Resource.md#2025-04-19_snippet_5\n\nLANGUAGE: elixir\nCODE:\n```\npatch action\n```\n\n----------------------------------------\n\nTITLE: Example RELATED Route Definition\nDESCRIPTION: Shows how to define a related route that reads the comments relationship using the read action.\nSOURCE: https://github.com/ash-project/ash_json_api/blob/main/documentation/dsls/DSL-AshJsonApi.Resource.md#2025-04-19_snippet_10\n\nLANGUAGE: elixir\nCODE:\n```\nrelated :comments, :read\n```\n\n----------------------------------------\n\nTITLE: Example PATCH Route Definition\nDESCRIPTION: Shows how to define a patch route that maps to an update action in an ASH resource.\nSOURCE: https://github.com/ash-project/ash_json_api/blob/main/documentation/dsls/DSL-AshJsonApi.Resource.md#2025-04-19_snippet_6\n\nLANGUAGE: elixir\nCODE:\n```\npatch :update\n```\n\n----------------------------------------\n\nTITLE: Example of Related Resource Route Definition\nDESCRIPTION: Shows how to define a related route for accessing comments using the read action.\nSOURCE: https://github.com/ash-project/ash_json_api/blob/main/documentation/dsls/DSL-AshJsonApi.Domain.md#2025-04-19_snippet_10\n\nLANGUAGE: elixir\nCODE:\n```\nrelated :comments, :read\n```\n\n----------------------------------------\n\nTITLE: Defining DELETE Route in ASH JSON API\nDESCRIPTION: Defines a DELETE route for destroying a record using a specified action. Routes can be customized with options like path and read actions.\nSOURCE: https://github.com/ash-project/ash_json_api/blob/main/documentation/dsls/DSL-AshJsonApi.Resource.md#2025-04-19_snippet_7\n\nLANGUAGE: elixir\nCODE:\n```\ndelete action\n```\n\n----------------------------------------\n\nTITLE: Defining a Relationship Route in Ash JSON API\nDESCRIPTION: Creates a READ route to fetch relationship identifiers. This returns resource identifiers rather than the full related resources.\nSOURCE: https://github.com/ash-project/ash_json_api/blob/main/documentation/dsls/DSL-AshJsonApi.Domain.md#2025-04-19_snippet_11\n\nLANGUAGE: elixir\nCODE:\n```\nrelationship resource \\\\ nil, relationship, action\n```\n\n----------------------------------------\n\nTITLE: Example DELETE Route Definition\nDESCRIPTION: Shows how to define a delete route that maps to a destroy action in an ASH resource.\nSOURCE: https://github.com/ash-project/ash_json_api/blob/main/documentation/dsls/DSL-AshJsonApi.Resource.md#2025-04-19_snippet_8\n\nLANGUAGE: elixir\nCODE:\n```\ndelete :destroy\n```\n\n----------------------------------------\n\nTITLE: Defining JSON API Relationship Route in Elixir\nDESCRIPTION: Defines a READ route to access a relationship, returning resource identifiers. Takes a relationship name and an action to be called when the route is accessed.\nSOURCE: https://github.com/ash-project/ash_json_api/blob/main/documentation/dsls/DSL-AshJsonApi.Resource.md#2025-04-19_snippet_11\n\nLANGUAGE: elixir\nCODE:\n```\nrelationship relationship, action\n```\n\n----------------------------------------\n\nTITLE: Adding OpenAPI and Redoc Dependencies for Plug\nDESCRIPTION: Adding both open_api_spex and redoc_ui_plug dependencies for Plug applications. These are required to generate OpenAPI specs and provide UI interfaces.\nSOURCE: https://github.com/ash-project/ash_json_api/blob/main/documentation/topics/open-api.md#2025-04-19_snippet_3\n\nLANGUAGE: elixir\nCODE:\n```\n{:open_api_spex, \"~> 3.16\"},\n{:redoc_ui_plug, \"~> 0.2.1\"},\n```\n\n----------------------------------------\n\nTITLE: Configuring DELETE Relationship Route in Ash JSON API (Elixir)\nDESCRIPTION: Defines a DELETE route to remove related entities using resource identifiers. It takes a relationship atom as an argument and supports various options for customizing the route behavior.\nSOURCE: https://github.com/ash-project/ash_json_api/blob/main/documentation/dsls/DSL-AshJsonApi.Resource.md#2025-04-19_snippet_17\n\nLANGUAGE: elixir\nCODE:\n```\ndelete_from_relationship :comments\n```\n\n----------------------------------------\n\nTITLE: Specifying Phoenix Endpoint for OpenAPI Generation\nDESCRIPTION: Explicitly specifying a Phoenix endpoint for OpenAPI generation when an active connection is unavailable, such as during CLI-based spec generation.\nSOURCE: https://github.com/ash-project/ash_json_api/blob/main/documentation/topics/open-api.md#2025-04-19_snippet_6\n\nLANGUAGE: elixir\nCODE:\n```\n  use AshJsonApi.Router,\n    domains: [...],\n    open_api: \"/open_api\",\n    phoenix_endpoint: MyAppWeb.Endpoint\n```\n\n----------------------------------------\n\nTITLE: Defining a Generic Route in Elixir for Ash JSON API\nDESCRIPTION: This snippet defines a generic route for any HTTP method and action in the Ash JSON API. It allows specifying the HTTP method, route path, and the action to be called when the route is accessed.\nSOURCE: https://github.com/ash-project/ash_json_api/blob/main/documentation/dsls/DSL-AshJsonApi.Domain.md#2025-04-19_snippet_17\n\nLANGUAGE: elixir\nCODE:\n```\nroute resource \\\\ nil, method, route, action\n```\n\nLANGUAGE: elixir\nCODE:\n```\nroute :get, \"say_hi/:name\", :say_hello\n```\n\n----------------------------------------\n\nTITLE: Advanced OpenAPI Customization with modify_open_api Callback\nDESCRIPTION: Using the modify_open_api option to completely customize the OpenAPI spec. This example modifies the title and uses the application version number.\nSOURCE: https://github.com/ash-project/ash_json_api/blob/main/documentation/topics/open-api.md#2025-04-19_snippet_7\n\nLANGUAGE: elixir\nCODE:\n```\n  use AshJsonApi.Router,\n    domains: [...],\n    open_api: \"/open_api\",\n    modify_open_api: {__MODULE__, :modify_open_api, []}\n\n  def modify_open_api(spec, _, _) do\n    %{\n      spec\n      | info: %{spec.info | title: \"MyApp Title JSON API\", version: Application.spec(:my_app, :vsn) |> to_string()}\n    }\n  end\n```\n\n----------------------------------------\n\nTITLE: Configuring POST Relationship Route in Ash JSON API\nDESCRIPTION: Defines a POST route to create related entities using resource identifiers. It includes options for customizing the route path, fields, metadata, and query parameters.\nSOURCE: https://github.com/ash-project/ash_json_api/blob/main/documentation/dsls/DSL-AshJsonApi.Domain.md#2025-04-19_snippet_25\n\nLANGUAGE: elixir\nCODE:\n```\npost_to_relationship resource, relationship\n```\n\n----------------------------------------\n\nTITLE: Generating OpenAPI Spec Files via CLI\nDESCRIPTION: Commands for generating OpenAPI specification files in JSON and YAML formats using Mix tasks. These can be used to create static files for documentation.\nSOURCE: https://github.com/ash-project/ash_json_api/blob/main/documentation/topics/open-api.md#2025-04-19_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nmix openapi.spec.json --spec MyAppWeb.AshJsonApi\nmix openapi.spec.yaml --spec MyAppWeb.AshJsonApi\n```\n\n----------------------------------------\n\nTITLE: Configuring PATCH Relationship Route in Ash JSON API\nDESCRIPTION: Sets up a PATCH route to update a relationship using resource identifiers. It offers options for route customization, including path, fields, metadata, and query parameter configuration.\nSOURCE: https://github.com/ash-project/ash_json_api/blob/main/documentation/dsls/DSL-AshJsonApi.Domain.md#2025-04-19_snippet_26\n\nLANGUAGE: elixir\nCODE:\n```\npatch_relationship resource, relationship\n```\n\n----------------------------------------\n\nTITLE: Defining a Related Resource Route in Ash JSON API\nDESCRIPTION: Creates a GET route to read related resources of a relationship. This enables accessing the related resources through a JSON API endpoint.\nSOURCE: https://github.com/ash-project/ash_json_api/blob/main/documentation/dsls/DSL-AshJsonApi.Domain.md#2025-04-19_snippet_9\n\nLANGUAGE: elixir\nCODE:\n```\nrelated resource \\\\ nil, relationship, action\n```\n\n----------------------------------------\n\nTITLE: Example of Post to Relationship Route Definition\nDESCRIPTION: Shows how to define a post to relationship route for adding comments to a resource.\nSOURCE: https://github.com/ash-project/ash_json_api/blob/main/documentation/dsls/DSL-AshJsonApi.Domain.md#2025-04-19_snippet_14\n\nLANGUAGE: elixir\nCODE:\n```\npost_to_relationship :comments\n```\n\n----------------------------------------\n\nTITLE: Example of Relationship Route Definition\nDESCRIPTION: Shows how to define a relationship route for accessing comment identifiers using the read action.\nSOURCE: https://github.com/ash-project/ash_json_api/blob/main/documentation/dsls/DSL-AshJsonApi.Domain.md#2025-04-19_snippet_12\n\nLANGUAGE: elixir\nCODE:\n```\nrelationship :comments, :read\n```\n\n----------------------------------------\n\nTITLE: Configuring Primary Relationship Route for Self Links in JSON:API\nDESCRIPTION: Sets the 'primary?' attribute to true on a relationship route to generate relationship self links. These links point to endpoints that return only relationship linkage data, not the actual related entities.\nSOURCE: https://github.com/ash-project/ash_json_api/blob/main/documentation/topics/links.md#2025-04-19_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\nrelationship :comments, :read, primary?: true\n```\n\n----------------------------------------\n\nTITLE: Defining a Post to Relationship Route in Ash JSON API\nDESCRIPTION: Creates a POST route to create related entities using resource identifiers. This enables adding related resources through a JSON API endpoint.\nSOURCE: https://github.com/ash-project/ash_json_api/blob/main/documentation/dsls/DSL-AshJsonApi.Domain.md#2025-04-19_snippet_13\n\nLANGUAGE: elixir\nCODE:\n```\npost_to_relationship resource \\\\ nil, relationship\n```\n\n----------------------------------------\n\nTITLE: Configuring Primary Related Route for Related Links in JSON:API\nDESCRIPTION: Sets the 'primary?' attribute to true on a related route to generate relationship related links. These links point to endpoints that return the actual related entities, functioning as modified index routes over the relationship destination.\nSOURCE: https://github.com/ash-project/ash_json_api/blob/main/documentation/topics/links.md#2025-04-19_snippet_2\n\nLANGUAGE: elixir\nCODE:\n```\nrelated :comments, :read, primary?: true\n```\n\n----------------------------------------\n\nTITLE: Defining a PATCH Relationship Route in Elixir for Ash JSON API\nDESCRIPTION: This snippet defines a PATCH route for updating relationships through resource identifiers. It allows configuration of the route path, default fields, and various other options to customize the JSON API response and behavior.\nSOURCE: https://github.com/ash-project/ash_json_api/blob/main/documentation/dsls/DSL-AshJsonApi.Domain.md#2025-04-19_snippet_15\n\nLANGUAGE: elixir\nCODE:\n```\npatch_relationship resource \\\\ nil, relationship\n```\n\nLANGUAGE: elixir\nCODE:\n```\npatch_relationship :comments\n```\n\n----------------------------------------\n\nTITLE: JSON:API Relationship Data Structure Example\nDESCRIPTION: Shows the JSON structure for sending relationship data through the JSON:API relationships key, including type, id and meta information.\nSOURCE: https://github.com/ash-project/ash_json_api/blob/main/documentation/topics/relationships.md#2025-04-19_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  data: {\n    attributes: {\n      ...\n    },\n    relationships: {\n      authors: {\n        data: [\n          {type: \"author\", id: 1},\n          {type: \"author\", id: 2, meta: {arbitrary: 1, keys: 2}}\n        ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a DELETE From Relationship Route in Elixir for Ash JSON API\nDESCRIPTION: This snippet defines a DELETE route for removing related entities using resource identifiers. It provides options for customizing the route path, response fields, and behavior when removing relationships.\nSOURCE: https://github.com/ash-project/ash_json_api/blob/main/documentation/dsls/DSL-AshJsonApi.Domain.md#2025-04-19_snippet_16\n\nLANGUAGE: elixir\nCODE:\n```\ndelete_from_relationship resource \\\\ nil, relationship\n```\n\nLANGUAGE: elixir\nCODE:\n```\ndelete_from_relationship :comments\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom JSON API Error Handling in Elixir\nDESCRIPTION: Shows how to implement the AshJsonApi.ToJsonApiError protocol for custom error types. This example demonstrates the implementation for Ash.Error.Changes.InvalidChanges, converting it to a properly formatted JSON API error response.\nSOURCE: https://github.com/ash-project/ash_json_api/blob/main/documentation/topics/upgrade.md#2025-04-19_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\ndefimpl AshJsonApi.ToJsonApiError, for: Ash.Error.Changes.InvalidChanges do\n  def to_json_api_error(error) do\n    %AshJsonApi.Error{\n      id: Ash.UUID.generate(),\n      status_code: AshJsonApi.Error.class_to_status(error.class),\n      code: \"invalid\",\n      title: \"Invalid\",\n      source_parameter: to_string(error.field),\n      detail: error.message,\n      meta: Map.new(error.vars)\n    }\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Index Route in AshJsonApi\nDESCRIPTION: Creates a GET route to retrieve a list of records. Supports pagination and various configuration options for customizing the behavior and response format.\nSOURCE: https://github.com/ash-project/ash_json_api/blob/main/documentation/dsls/DSL-AshJsonApi.Domain.md#2025-04-19_snippet_19\n\nLANGUAGE: elixir\nCODE:\n```\nindex resource, action\n```\n\n----------------------------------------\n\nTITLE: Updating Domain References in AshJsonApi Router\nDESCRIPTION: Shows how to update the Router module configuration to use domains instead of apis as required in Ash 3.0. This migration requires changing all references from 'api' to 'domain' in the Router module definition.\nSOURCE: https://github.com/ash-project/ash_json_api/blob/main/documentation/topics/upgrade.md#2025-04-19_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule MyApp.MyApi.Router do\n  use AshJsonApi.Router,\n    domains: [MyApp.Domain1, MyApp.Domain2],\n    ...\n\n```\n\n----------------------------------------\n\nTITLE: Configuring DELETE Relationship Route in Ash JSON API\nDESCRIPTION: Establishes a DELETE route to remove related entities using resource identifiers. It provides options for customizing the route's behavior and response.\nSOURCE: https://github.com/ash-project/ash_json_api/blob/main/documentation/dsls/DSL-AshJsonApi.Domain.md#2025-04-19_snippet_27\n\nLANGUAGE: elixir\nCODE:\n```\ndelete_from_relationship resource, relationship\n```\n\n----------------------------------------\n\nTITLE: Example of Generic Route Configuration in Ash JSON API\nDESCRIPTION: Demonstrates how to configure a simple GET route for a 'say_hello' action with a name parameter in the path.\nSOURCE: https://github.com/ash-project/ash_json_api/blob/main/documentation/dsls/DSL-AshJsonApi.Domain.md#2025-04-19_snippet_29\n\nLANGUAGE: elixir\nCODE:\n```\nroute :get, \"say_hi/:name\", :say_hello\n```\n\n----------------------------------------\n\nTITLE: Setting Actor in Router with Authentication Token\nDESCRIPTION: Implementation of a router that extracts the user from an authentication token and sets it as the actor for authorization. Uses Ash.PlugHelpers.set_actor/2 to attach the user to the connection for subsequent authorization checks.\nSOURCE: https://github.com/ash-project/ash_json_api/blob/main/documentation/topics/authorize-with-json-api.md#2025-04-19_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule MyAppWeb.Router do\n  pipeline :api do\n    # ...\n    plug :get_actor_from_token\n  end\n\n  def get_actor_from_token(conn, _opts) do\n     with [\"\" <> token] <- get_req_header(conn, \"authorization\"),\n         {:ok, user, _claims} <- MyApp.Guardian.resource_from_token(token) do\n      conn\n      |> Ash.PlugHelpers.set_actor(user)\n    else\n    _ -> conn\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Example of Relationship Route Definition in Elixir\nDESCRIPTION: Example showing how to define a relationship route for comments using the read action.\nSOURCE: https://github.com/ash-project/ash_json_api/blob/main/documentation/dsls/DSL-AshJsonApi.Resource.md#2025-04-19_snippet_12\n\nLANGUAGE: elixir\nCODE:\n```\nrelationship :comments, :read\n```\n\n----------------------------------------\n\nTITLE: Adding AshJsonApi Parser to Phoenix Endpoint in Elixir\nDESCRIPTION: Elixir code snippet for adding the AshJsonApi.Plug.Parser to handle file uploads in a Phoenix application's endpoint.\nSOURCE: https://github.com/ash-project/ash_json_api/blob/main/documentation/tutorials/getting-started-with-ash-json-api.md#2025-04-19_snippet_4\n\nLANGUAGE: elixir\nCODE:\n```\nplug Plug.Parsers,\n  parsers: [:urlencoded, :multipart, :json, AshJsonApi.Plug.Parser], # <- add it to this list.\n  pass: [\"*/*\"],\n  json_decoder: Jason\n```\n\n----------------------------------------\n\nTITLE: Defining POST to Relationship Route in Elixir\nDESCRIPTION: Defines a POST route to create related entities using resource identifiers. Takes a relationship name as argument.\nSOURCE: https://github.com/ash-project/ash_json_api/blob/main/documentation/dsls/DSL-AshJsonApi.Resource.md#2025-04-19_snippet_13\n\nLANGUAGE: elixir\nCODE:\n```\npost_to_relationship relationship\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response with Authentication Token\nDESCRIPTION: Shows the structure of a successful JSON API response that includes an authentication token in the meta field. The token can be extracted by clients for use in subsequent authenticated requests.\nSOURCE: https://github.com/ash-project/ash_json_api/blob/main/documentation/topics/authenticate-with-json-api.md#2025-04-19_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  {\n  \"data\": {\n    \"attributes\": { ... },\n    ...\n  },\n  \"meta\": {\n    \"token\": \"eyJhbGc...\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example of POST to Relationship Route in Elixir\nDESCRIPTION: Example showing how to define a POST route for creating entities related to the comments relationship.\nSOURCE: https://github.com/ash-project/ash_json_api/blob/main/documentation/dsls/DSL-AshJsonApi.Resource.md#2025-04-19_snippet_14\n\nLANGUAGE: elixir\nCODE:\n```\npost_to_relationship :comments\n```\n\n----------------------------------------\n\nTITLE: Creating a Ticket via AshJsonApi using cURL\nDESCRIPTION: cURL command example for creating a ticket through the JSON:API endpoint.\nSOURCE: https://github.com/ash-project/ash_json_api/blob/main/documentation/tutorials/getting-started-with-ash-json-api.md#2025-04-19_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST 'localhost:4000/api/json/helpdesk/tickets' \\\n--header 'Accept: application/vnd.api+json' \\\n--header 'Content-Type: application/vnd.api+json' \\\n--data-raw '{\n  \"data\": {\n    \"type\": \"ticket\",\n    \"attributes\": {\n      \"subject\": \"This ticket was created through the JSON API\"\n    }\n  }\n}'\n```\n\n----------------------------------------\n\nTITLE: Defining PATCH Relationship Route in Elixir\nDESCRIPTION: Defines a PATCH route to update a relationship using resource identifiers. Takes a relationship name as argument.\nSOURCE: https://github.com/ash-project/ash_json_api/blob/main/documentation/dsls/DSL-AshJsonApi.Resource.md#2025-04-19_snippet_15\n\nLANGUAGE: elixir\nCODE:\n```\npatch_relationship relationship\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Tickets via AshJsonApi using cURL\nDESCRIPTION: cURL command example for retrieving all tickets through the JSON:API endpoint.\nSOURCE: https://github.com/ash-project/ash_json_api/blob/main/documentation/tutorials/getting-started-with-ash-json-api.md#2025-04-19_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'localhost:4000/api/json/helpdesk/tickets'\n```\n\n----------------------------------------\n\nTITLE: Example of PATCH Relationship Route in Elixir\nDESCRIPTION: Example showing how to define a PATCH route for updating entities in the comments relationship.\nSOURCE: https://github.com/ash-project/ash_json_api/blob/main/documentation/dsls/DSL-AshJsonApi.Resource.md#2025-04-19_snippet_16\n\nLANGUAGE: elixir\nCODE:\n```\npatch_relationship :comments\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Specific Ticket via AshJsonApi using cURL\nDESCRIPTION: cURL command example for retrieving a specific ticket by UUID through the JSON:API endpoint.\nSOURCE: https://github.com/ash-project/ash_json_api/blob/main/documentation/tutorials/getting-started-with-ash-json-api.md#2025-04-19_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n# Add the uuid of a Ticket you created earlier\ncurl 'localhost:4000/api/json/helpdesk/tickets/<uuid>'\n```\n\n----------------------------------------\n\nTITLE: Configuring Primary Key Encoding in Ash JSON API (Elixir)\nDESCRIPTION: Defines how to encode the ID of a JSON API response from selected attributes of a resource. It allows specifying multiple keys and a custom delimiter for concatenating the primary key values.\nSOURCE: https://github.com/ash-project/ash_json_api/blob/main/documentation/dsls/DSL-AshJsonApi.Resource.md#2025-04-19_snippet_19\n\nLANGUAGE: elixir\nCODE:\n```\nprimary_key do\n  keys [:first_name, :last_name]\n  delimiter \"~\"\nend\n```\n\n----------------------------------------\n\nTITLE: Installing AshJsonApi using Igniter in Elixir\nDESCRIPTION: Command to install AshJsonApi using the Igniter tool in an Elixir project.\nSOURCE: https://github.com/ash-project/ash_json_api/blob/main/documentation/tutorials/getting-started-with-ash-json-api.md#2025-04-19_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmix igniter.install ash_json_api\n```\n\n----------------------------------------\n\nTITLE: Extending Existing Resource with AshJsonApi using Igniter\nDESCRIPTION: Command to set up an existing resource with AshJsonApi using the Igniter tool in an Elixir project.\nSOURCE: https://github.com/ash-project/ash_json_api/blob/main/documentation/tutorials/getting-started-with-ash-json-api.md#2025-04-19_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nmix ash.patch.extend Your.Resource.Name json_api\n```\n\n----------------------------------------\n\nTITLE: Configuring AshJsonApi.Router with OpenAPI Support in Phoenix\nDESCRIPTION: Configuration for enabling OpenAPI in an Ash JSON API router with Phoenix. This adds the open_api option pointing to the endpoint path.\nSOURCE: https://github.com/ash-project/ash_json_api/blob/main/documentation/topics/open-api.md#2025-04-19_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\nuse AshJsonApi.Router, domains: [...], open_api: \"/open_api\"\n```\n\n----------------------------------------\n\nTITLE: Adding AshJsonApi Extension to Domain in Elixir\nDESCRIPTION: Elixir code snippet for adding the AshJsonApi extension to a domain module.\nSOURCE: https://github.com/ash-project/ash_json_api/blob/main/documentation/tutorials/getting-started-with-ash-json-api.md#2025-04-19_snippet_7\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule Helpdesk.Support do\n  use Ash.Domain, extensions: [AshJsonApi.Domain]\n  ...\n```\n\n----------------------------------------\n\nTITLE: Setting up OpenAPI UI Endpoints in Phoenix\nDESCRIPTION: Configuring Phoenix forwards for Swagger UI and Redoc interfaces. These provide interactive documentation interfaces for your API at specified paths.\nSOURCE: https://github.com/ash-project/ash_json_api/blob/main/documentation/topics/open-api.md#2025-04-19_snippet_2\n\nLANGUAGE: elixir\nCODE:\n```\nforward \"/api/swaggerui\",\n  OpenApiSpex.Plug.SwaggerUI,\n  path: \"/api/open_api\",\n  default_model_expand_depth: 4\n\nforward \"/api/redoc\",\n  Redoc.Plug.RedocUI,\n  spec_url: \"/api/open_api\"\n\nforward \"/api\", YourApp.YourApiRouter\n```\n\n----------------------------------------\n\nTITLE: Adding AshJsonApi Extension to Resource in Elixir\nDESCRIPTION: Elixir code snippet for adding the AshJsonApi extension to a resource module and defining its JSON:API type.\nSOURCE: https://github.com/ash-project/ash_json_api/blob/main/documentation/tutorials/getting-started-with-ash-json-api.md#2025-04-19_snippet_8\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule Helpdesk.Support.Ticket do\n  use Ash.Resource, extensions: [AshJsonApi.Resource]\n  # ...\n  json_api do\n    type \"ticket\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Setting up OpenAPI UI Endpoints in Plug\nDESCRIPTION: Configuring Plug forwards for Swagger UI and Redoc interfaces. This uses the to: and init_opts: syntax specific to Plug.\nSOURCE: https://github.com/ash-project/ash_json_api/blob/main/documentation/topics/open-api.md#2025-04-19_snippet_4\n\nLANGUAGE: elixir\nCODE:\n```\nforward \"/api/swaggerui\",\n  to: OpenApiSpex.Plug.SwaggerUI,\n  init_opts: [\n    path: \"/api/open_api\",\n    default_model_expand_depth: 4\n  ]\n\nforward \"/api/redoc\",\n  to: Redoc.Plug.RedocUI,\n  init_opts: [\n    spec_url: \"/api/open_api\"\n  ]\n\nforward \"/api\", YourApp.YourApiRouter\n```\n\n----------------------------------------\n\nTITLE: Defining AshJsonApi Routes on Domain in Elixir\nDESCRIPTION: Elixir code example showing how to define JSON:API routes on the domain level for a specific resource.\nSOURCE: https://github.com/ash-project/ash_json_api/blob/main/documentation/tutorials/getting-started-with-ash-json-api.md#2025-04-19_snippet_9\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule Helpdesk.Support do\n  use Ash.Domain, extensions: [AshJsonApi.Domain]\n\n  json_api do\n    routes do\n      # in the domain `base_route` acts like a scope\n      base_route \"/tickets\", Helpdesk.Support.Ticket do\n        get :read\n        index :read\n        post :open\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining AshJsonApi Routes on Resource in Elixir\nDESCRIPTION: Elixir code example demonstrating how to define JSON:API routes directly on a resource module.\nSOURCE: https://github.com/ash-project/ash_json_api/blob/main/documentation/tutorials/getting-started-with-ash-json-api.md#2025-04-19_snippet_10\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule Helpdesk.Support.Ticket do\n  use Ash.Resource, extensions: [AshJsonApi.Resource]\n  # ...\n  json_api do\n    type \"ticket\"\n\n    routes do\n      # on the resource, the `base` applies to all routes\n      base \"/tickets\"\n\n      get :read\n      index :read\n      post :open\n      # ...\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Disabling Authorization in AshJsonApi Domain\nDESCRIPTION: Configuration snippet to disable authorization for a domain in AshJsonApi. This is typically used for testing purposes when authorization checks are not needed.\nSOURCE: https://github.com/ash-project/ash_json_api/blob/main/documentation/topics/authorize-with-json-api.md#2025-04-19_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\njson_api do\n  authorize? false\nend\n```\n\n----------------------------------------\n\nTITLE: Printing Available AshJsonApi Routes in Elixir\nDESCRIPTION: Elixir code snippet to print all available JSON:API routes for a specific resource.\nSOURCE: https://github.com/ash-project/ash_json_api/blob/main/documentation/tutorials/getting-started-with-ash-json-api.md#2025-04-19_snippet_11\n\nLANGUAGE: elixir\nCODE:\n```\nHelpdesk.Support.Ticket\n|> AshJsonApi.Resource.Info.routes(Helpdesk.Support)\n```\n\n----------------------------------------\n\nTITLE: Configuring Primary Get Route for Entity Self Links in JSON:API\nDESCRIPTION: Sets the 'primary?' attribute to true on a get route to generate self links for individual entities in JSON:API responses. This designation is required for entity-level self links to appear in the 'links' key of each entity.\nSOURCE: https://github.com/ash-project/ash_json_api/blob/main/documentation/topics/links.md#2025-04-19_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\nget :read, primary?: true\n```\n\n----------------------------------------\n\nTITLE: Adding OpenAPI Spex Dependency\nDESCRIPTION: Adding the open_api_spex dependency to the project mix file. This is required for generating OpenAPI documentation.\nSOURCE: https://github.com/ash-project/ash_json_api/blob/main/documentation/topics/open-api.md#2025-04-19_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\n{:open_api_spex, \"~> 3.16\"},\n```\n\n----------------------------------------\n\nTITLE: Filtering Included Resources in Ash JSON API\nDESCRIPTION: Example URL query showing how to filter included resources using the filter_included parameter. This example filters comments included with posts to only show those with a specific author_id.\nSOURCE: https://github.com/ash-project/ash_json_api/blob/main/documentation/topics/non-spec-query-parameters.md#2025-04-19_snippet_0\n\nLANGUAGE: url\nCODE:\n```\nposts?include=comments&filter_included[comments][author_id]=1\n```\n\n----------------------------------------\n\nTITLE: Sorting Included Resources in Ash JSON API\nDESCRIPTION: Example URL query demonstrating how to sort included resources using the sort_included parameter. This example sorts comments included with posts by author.username (ascending) and created_at (descending).\nSOURCE: https://github.com/ash-project/ash_json_api/blob/main/documentation/topics/non-spec-query-parameters.md#2025-04-19_snippet_1\n\nLANGUAGE: url\nCODE:\n```\nposts?include=comments&sort_included[comments]=author.username,-created_at\n```\n\n----------------------------------------\n\nTITLE: Setting up AshJsonApi Router for CLI Spec Generation\nDESCRIPTION: Basic setup for an AshJsonApi router that will be used with CLI spec generation. This defines a module that can be referenced in mix tasks.\nSOURCE: https://github.com/ash-project/ash_json_api/blob/main/documentation/topics/open-api.md#2025-04-19_snippet_8\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule MyAppWeb.AshJsonApi\n  use AshJsonApi.Router, domains: [...], open_api: \"/open_api\"\nend\n```\n\n----------------------------------------\n\nTITLE: Alternative Attributes-Based Relationship Structure in Elixir\nDESCRIPTION: Demonstrates the alternative format for providing relationship data through the attributes key when not using relationship_arguments.\nSOURCE: https://github.com/ash-project/ash_json_api/blob/main/documentation/topics/relationships.md#2025-04-19_snippet_2\n\nLANGUAGE: elixir\nCODE:\n```\n{\n  data: {\n    attributes: {\n      authors: {\n        {id: 1},\n        {id: 2, arbitrary: 1, keys: 2},\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Relationship Action Handler in Elixir\nDESCRIPTION: Demonstrates how to implement an action handler for relationship manipulation with manage_relationship change.\nSOURCE: https://github.com/ash-project/ash_json_api/blob/main/documentation/topics/relationships.md#2025-04-19_snippet_4\n\nLANGUAGE: elixir\nCODE:\n```\nupdate :add_author do\n  argument :author, :map\n\n  change manage_relationship(:author, type: :append)\nend\n```\n\n----------------------------------------\n\nTITLE: Adding YAML Dependency for OpenAPI YAML Generation\nDESCRIPTION: Adding the ymlr dependency needed for generating YAML OpenAPI specification files.\nSOURCE: https://github.com/ash-project/ash_json_api/blob/main/documentation/topics/open-api.md#2025-04-19_snippet_10\n\nLANGUAGE: elixir\nCODE:\n```\ndef deps do\n  [\n    {:ymlr, \"~> 2.0\"}\n  ]\nend\n```\n\n----------------------------------------\n\nTITLE: Using Base Routes in JSON:API\nDESCRIPTION: Example showing how to set up base routes with contained routes for different resources like posts and comments.\nSOURCE: https://github.com/ash-project/ash_json_api/blob/main/documentation/dsls/DSL-AshJsonApi.Domain.md#2025-04-19_snippet_3\n\nLANGUAGE: elixir\nCODE:\n```\nbase_route \"/posts\" do\n  index :read\n  get :read\nend\n\nbase_route \"/comments\" do\n  index :read\nend\n\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAPI Support for JSON:API\nDESCRIPTION: Example showing how to configure OpenAPI support within JSON:API, including setting tags and grouping strategy.\nSOURCE: https://github.com/ash-project/ash_json_api/blob/main/documentation/dsls/DSL-AshJsonApi.Domain.md#2025-04-19_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\njson_api do\n  ...\n  open_api do\n    tag \"Users\"\n    group_by :api\n  end\nend\n\n```\n\n----------------------------------------\n\nTITLE: Validating Generated OpenAPI Spec Files\nDESCRIPTION: Commands for validating that checked-in OpenAPI spec files match the current API implementation. This helps ensure documentation stays in sync with code.\nSOURCE: https://github.com/ash-project/ash_json_api/blob/main/documentation/topics/open-api.md#2025-04-19_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nmix openapi.spec.json --spec MyAppWeb.AshJsonApiRouter --check\nmix openapi.spec.yaml --spec MyAppWeb.AshJsonApiRouter --check\n```"
  }
]