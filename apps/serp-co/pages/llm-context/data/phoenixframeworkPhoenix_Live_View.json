[
  {
    "owner": "phoenixframework",
    "repo": "phoenix_live_view",
    "content": "TITLE: Complete UploadLive Module Implementation\nDESCRIPTION: Full implementation of the UploadLive module including mount, event handling, and file processing functions.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/server/uploads.md#2025-04-16_snippet_3\n\nLANGUAGE: elixir\nCODE:\n```\n# lib/my_app_web/live/upload_live.ex\ndefmodule MyAppWeb.UploadLive do\n  use MyAppWeb, :live_view\n\n  @impl Phoenix.LiveView\n  def mount(_params, _session, socket) do\n    {:ok,\n    socket\n    |> assign(:uploaded_files, [])\n    |> allow_upload(:avatar, accept: ~w(.jpg .jpeg), max_entries: 2)}\n  end\n\n  @impl Phoenix.LiveView\n  def handle_event(\"validate\", _params, socket) do\n    {:noreply, socket}\n  end\n\n  @impl Phoenix.LiveView\n  def handle_event(\"cancel-upload\", %{\"ref\" => ref}, socket) do\n    {:noreply, cancel_upload(socket, :avatar, ref)}\n  end\n\n  @impl Phoenix.LiveView\n  def handle_event(\"save\", _params, socket) do\n    uploaded_files =\n      consume_uploaded_entries(socket, :avatar, fn %{path: path}, _entry ->\n        dest = Path.join([:code.priv_dir(:my_app), \"static\", \"uploads\", Path.basename(path)])\n        # You will need to create `priv/static/uploads` for `File.cp!/2` to work.\n        File.cp!(path, dest)\n        {:ok, ~p\"/uploads/#{Path.basename(dest)}\"}\n      end)\n\n    {:noreply, update(socket, :uploaded_files, &(&1 ++ uploaded_files))}\n  end\n\n  defp error_to_string(:too_large), do: \"Too large\"\n  defp error_to_string(:too_many_files), do: \"You have selected too many files\"\n  defp error_to_string(:not_accepted), do: \"You have selected an unacceptable file type\"\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Infinite Scrolling with Data Attributes in Phoenix LiveView\nDESCRIPTION: This snippet demonstrates how to implement infinite scrolling using a hook and data attributes. It shows both the server-side HEEX template and the client-side JavaScript hook.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/client/js-interop.md#2025-04-16_snippet_7\n\nLANGUAGE: heex\nCODE:\n```\n<div id=\"infinite-scroll\" phx-hook=\"InfiniteScroll\" data-page={@page}>\n```\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @type {import(\"phoenix_live_view\").ViewHook}\n */\nHooks.InfiniteScroll = {\n  page() { return this.el.dataset.page },\n  mounted(){\n    this.pending = this.page()\n    window.addEventListener(\"scroll\", e => {\n      if(this.pending == this.page() && scrollAt() > 90){\n        this.pending = this.page() + 1\n        this.pushEvent(\"load-more\", {})\n      }\n    })\n  },\n  updated(){ this.pending = this.page() }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic LiveView Component in Elixir\nDESCRIPTION: Basic thermostat LiveView implementation showing temperature display and increment functionality. Demonstrates the core LiveView callbacks including mount, render, and event handling.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/introduction/welcome.md#2025-04-16_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule MyAppWeb.ThermostatLive do\n  use MyAppWeb, :live_view\n\n  def render(assigns) do\n    ~H\"\"\"\n    Current temperature: {@temperature}Â°F\n    <button phx-click=\"inc_temperature\">+</button>\n    \"\"\"\n  end\n\n  def mount(_params, _session, socket) do\n    temperature = 70 # Let's assume a fixed temperature for now\n    {:ok, assign(socket, :temperature, temperature)}\n  end\n\n  def handle_event(\"inc_temperature\", _params, socket) do\n    {:noreply, update(socket, :temperature, &(&1 + 1))}\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Default Authentication Hook to All LiveViews\nDESCRIPTION: Shows how to apply an authentication hook to all LiveViews by default by adding it to the live_view definition in the web module. This ensures consistent authentication across the application.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/server/security-model.md#2025-04-16_snippet_6\n\nLANGUAGE: elixir\nCODE:\n```\ndef live_view do\n  quote do\n    use Phoenix.LiveView\n\n    on_mount MyAppWeb.UserLiveAuth\n    unquote(html_helpers())\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Drag and Drop Upload Interface\nDESCRIPTION: Template for implementing drag and drop file uploads with progress tracking and error handling.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/server/uploads.md#2025-04-16_snippet_2\n\nLANGUAGE: heex\nCODE:\n```\n<%!-- lib/my_app_web/live/upload_live.html.heex --%>\n\n<section phx-drop-target={@uploads.avatar.ref}>\n  <article :for={entry <- @uploads.avatar.entries} class=\"upload-entry\">\n    <figure>\n      <.live_img_preview entry={entry} />\n      <figcaption>{entry.client_name}</figcaption>\n    </figure>\n\n    <progress value={entry.progress} max=\"100\"> {entry.progress}% </progress>\n\n    <button type=\"button\" phx-click=\"cancel-upload\" phx-value-ref={entry.ref} aria-label=\"cancel\">&times;</button>\n\n    <p :for={err <- upload_errors(@uploads.avatar, entry)} class=\"alert alert-danger\">{error_to_string(err)}</p>\n  </article>\n\n  <p :for={err <- upload_errors(@uploads.avatar)} class=\"alert alert-danger\">\n    {error_to_string(err)}\n  </p>\n</section>\n```\n\n----------------------------------------\n\nTITLE: Configuring LiveView Sessions with on_mount Hooks for Authentication\nDESCRIPTION: Shows how to declare on_mount hooks at the router level for different authentication flows. This approach centralizes authentication logic and applies it consistently across LiveViews within each session scope.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/server/security-model.md#2025-04-16_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\nscope \"/\" do\n  pipe_through [:authenticate_user]\n\n  live_session :default, on_mount: MyAppWeb.UserLiveAuth do\n    live ...\n  end\nend\n\nscope \"/admin\" do\n  pipe_through [:authenticate_admin]\n\n  live_session :admin, on_mount: MyAppWeb.AdminLiveAuth do\n    live ...\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Installing Phoenix LiveView and Creating a New Application\nDESCRIPTION: Commands to install the Phoenix application generator and create a new LiveView application from scratch. This is the recommended way to get started with LiveView for new projects.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ mix archive.install hex phx_new\n$ mix phx.new demo\n```\n\n----------------------------------------\n\nTITLE: Initializing LiveView JavaScript Client\nDESCRIPTION: JavaScript setup required to establish WebSocket connection for LiveView functionality, including CSRF token handling.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/introduction/welcome.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Socket} from \"phoenix\"\nimport {LiveSocket} from \"phoenix_live_view\"\n\nlet csrfToken = document.querySelector(\"meta[name='csrf-token']\").getAttribute(\"content\")\nlet liveSocket = new LiveSocket(\"/live\", Socket, {params: {_csrf_token: csrfToken}})\nliveSocket.connect()\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication in LiveView Mount Callback\nDESCRIPTION: Demonstrates how to implement user authentication and confirmation checks directly in a LiveView's mount callback. This ensures the user is verified both during initial HTTP connection and when the LiveView connects.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/server/security-model.md#2025-04-16_snippet_2\n\nLANGUAGE: elixir\nCODE:\n```\ndef mount(_params, %{\"user_id\" => user_id} = _session, socket) do\n  socket = assign(socket, current_user: Accounts.get_user!(user_id))\n\n  socket =\n    if socket.assigns.current_user.confirmed_at do\n      socket\n    else\n      redirect(socket, to: \"/login\")\n    end\n\n  {:ok, socket}\nend\n```\n\n----------------------------------------\n\nTITLE: Rendering a Form with Change and Submit Bindings in HEEX\nDESCRIPTION: Example of a form using phx-change for validation and phx-submit for saving data, with text and email input fields.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/client/form-bindings.md#2025-04-16_snippet_0\n\nLANGUAGE: heex\nCODE:\n```\n<.form for={@form} phx-change=\"validate\" phx-submit=\"save\">\n  <.input type=\"text\" field={@form[:username]} />\n  <.input type=\"email\" field={@form[:email]} />\n  <button>Save</button>\n</.form>\n```\n\n----------------------------------------\n\nTITLE: Configuring LiveView Router in Phoenix\nDESCRIPTION: Router configuration example showing how to set up a LiveView route in a Phoenix application.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/introduction/welcome.md#2025-04-16_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule MyAppWeb.Router do\n  use MyAppWeb, :router\n\n  pipeline :browser do\n    ...\n  end\n\n  scope \"/\", MyAppWeb do\n    pipe_through :browser\n    ...\n\n    live \"/thermostat\", ThermostatLive\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Authorization in LiveView Event Handling\nDESCRIPTION: Demonstrates a pattern for implementing authorization checks in LiveView event handlers. This ensures users can only perform actions they're authorized for, even if they attempt to bypass UI restrictions.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/server/security-model.md#2025-04-16_snippet_7\n\nLANGUAGE: elixir\nCODE:\n```\non_mount MyAppWeb.UserLiveAuth\n\ndef mount(_params, _session, socket) do\n  {:ok, load_projects(socket)}\nend\n\ndef handle_event(\"delete_project\", %{\"project_id\" => project_id}, socket) do\n  Project.delete!(socket.assigns.current_user, project_id)\n  {:noreply, update(socket, :projects, &Enum.reject(&1, fn p -> p.id == project_id end))}\nend\n\ndefp load_projects(socket) do\n  projects = Project.all_projects(socket.assigns.current_user)\n  assign(socket, projects: projects)\nend\n```\n\n----------------------------------------\n\nTITLE: Nested Form Inputs using inputs_for in HEEX\nDESCRIPTION: Example of handling nested form inputs using the inputs_for component, which includes automatic tracking of Ecto associations.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/client/form-bindings.md#2025-04-16_snippet_9\n\nLANGUAGE: heex\nCODE:\n```\n<.inputs_for :let={fp} field={f[:friends]}>\n  <.input field={fp[:name]} type=\"text\" />\n</.inputs_for>\n```\n\n----------------------------------------\n\nTITLE: Defining Different LiveView Sessions with Authentication in Phoenix Router\nDESCRIPTION: Demonstrates how to configure different live_session scopes with separate authentication pipelines for regular users and admins. This pattern ensures proper authentication checks are applied based on the user type.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/server/security-model.md#2025-04-16_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\nscope \"/\" do\n  pipe_through [:authenticate_user]\n  get ...\n\n  live_session :default do\n    live ...\n  end\nend\n\nscope \"/admin\" do\n  pipe_through [:http_auth_admin]\n  get ...\n\n  live_session :admin do\n    live ...\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Initializing LiveSocket in JavaScript for Phoenix LiveView\nDESCRIPTION: This snippet demonstrates how to create a LiveSocket instance, which enables LiveView client/server interaction. It includes setting up CSRF token protection.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/client/js-interop.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Socket} from \"phoenix\"\nimport {LiveSocket} from \"phoenix_live_view\"\n\nlet csrfToken = document.querySelector(\"meta[name='csrf-token']\").getAttribute(\"content\")\nlet liveSocket = new LiveSocket(\"/live\", Socket, {params: {_csrf_token: csrfToken}})\nliveSocket.connect()\n```\n\n----------------------------------------\n\nTITLE: Initializing and Paginating Posts in Phoenix LiveView (Elixir)\nDESCRIPTION: This snippet demonstrates the mount function and paginate_posts helper for initializing and paginating posts in a Phoenix LiveView. It handles both forward and backward pagination, using Phoenix.LiveView.stream/3 for efficient DOM updates.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/client/bindings.md#2025-04-16_snippet_14\n\nLANGUAGE: elixir\nCODE:\n```\ndef mount(_, _, socket) do\n  {:ok,\n    socket\n    |> assign(page: 1, per_page: 20)\n    |> paginate_posts(1)}\nend\n\ndefp paginate_posts(socket, new_page) when new_page >= 1 do\n  %{per_page: per_page, page: cur_page} = socket.assigns\n  posts = Blog.list_posts(offset: (new_page - 1) * per_page, limit: per_page)\n\n  {posts, at, limit} =\n    if new_page >= cur_page do\n      {posts, -1, per_page * 3 * -1}\n    else\n      {Enum.reverse(posts), 0, per_page * 3}\n    end\n\n  case posts do\n    [] ->\n      assign(socket, end_of_timeline?: at == -1)\n\n    [_ | _] = posts ->\n      socket\n      |> assign(end_of_timeline?: false)\n      |> assign(:page, new_page)\n      |> stream(:posts, posts, at: at, limit: limit)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Accessing Assigns in HEEx Templates\nDESCRIPTION: Demonstrates how LiveView templates access assigns with the @ symbol and how LiveView tracks changes to optimize rendering.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/server/assigns-eex.md#2025-04-16_snippet_0\n\nLANGUAGE: heex\nCODE:\n```\n<h1>{expand_title(@title)}</h1>\n```\n\n----------------------------------------\n\nTITLE: Initializing File Upload Mount Function in Phoenix LiveView\nDESCRIPTION: Mounts the LiveView component and initializes file upload capabilities with specific file type restrictions and maximum entry limits.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/server/uploads.md#2025-04-16_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\n@impl Phoenix.LiveView\ndef mount(_params, _session, socket) do\n  {:ok,\n   socket\n   |> assign(:uploaded_files, [])\n   |> allow_upload(:avatar, accept: ~w(.jpg .jpeg), max_entries: 2)}\nend\n```\n\n----------------------------------------\n\nTITLE: Rendering Infinite Scroll Container with Viewport Events (HEEx)\nDESCRIPTION: This HEEx template renders a list of posts with infinite scrolling functionality. It uses phx-viewport-top and phx-viewport-bottom bindings to trigger pagination events, and applies dynamic CSS classes for smooth scrolling.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/client/bindings.md#2025-04-16_snippet_15\n\nLANGUAGE: heex\nCODE:\n```\n<ul\n  id=\"posts\"\n  phx-update=\"stream\"\n  phx-viewport-top={@page > 1 && JS.push(\"prev-page\", page_loading: true)}\n  phx-viewport-bottom={!@end_of_timeline? && JS.push(\"next-page\", page_loading: true)}\n  class={[\n    if(@end_of_timeline?, do: \"pb-10\", else: \"pb-[calc(200vh)]\"),\n    if(@page == 1, do: \"pt-10\", else: \"pt-[calc(200vh)]\")\n  ]}\n>\n  <li :for={{id, post} <- @streams.posts} id={id}>\n    <.post_card post={post} />\n  </li>\n</ul>\n<div :if={@end_of_timeline?} class=\"mt-5 text-[50px] text-center\">\n  ð You made it to the beginning of time ð\n</div>\n```\n\n----------------------------------------\n\nTITLE: Setting Gettext Locale in LiveView Mount Callback\nDESCRIPTION: Implements the mount callback in a LiveView to set the Gettext locale based on the locale parameter from the URL. This ensures the correct locale is used for rendering the page.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/server/gettext.md#2025-04-16_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\ndef mount(%{\"locale\" => locale}, _session, socket) do\n  Gettext.put_locale(MyApp.Gettext, locale)\n  {:ok, socket}\nend\n```\n\n----------------------------------------\n\nTITLE: Handling Form Recovery Events in Phoenix LiveView (Elixir)\nDESCRIPTION: Server-side event handlers for regular form validation and custom recovery in a Phoenix LiveView module.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/client/form-bindings.md#2025-04-16_snippet_14\n\nLANGUAGE: elixir\nCODE:\n```\ndef handle_event(\"validate_wizard_step\", params, socket) do\n  # regular validations for current step\n  {:noreply, socket}\nend\n\ndef handle_event(\"recover_wizard\", params, socket) do\n  # rebuild state based on client input data up to the current step\n  {:noreply, socket}\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring LiveView Upload with External Option in Elixir\nDESCRIPTION: This code demonstrates how to configure the LiveView socket for external uploads using the allow_upload/3 function with the :external option.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/client/external-uploads.md#2025-04-16_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\ndef mount(_params, _session, socket) do\n  {:ok,\n   socket\n   |> assign(:uploaded_files, [])\n   |> allow_upload(:avatar, accept: :any, max_entries: 3, external: &presign_upload/2)}\nend\n```\n\n----------------------------------------\n\nTITLE: Creating a Reusable LiveView Authentication Hook Module\nDESCRIPTION: Defines a reusable authentication hook module that can be applied to LiveViews. The hook checks user authentication and confirmation status on mount, using assign_new for efficiency across parent-child LiveViews.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/server/security-model.md#2025-04-16_snippet_3\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule MyAppWeb.UserLiveAuth do\n  import Phoenix.Component\n  import Phoenix.LiveView\n  alias MyAppWeb.Accounts # from `mix phx.gen.auth`\n\n  def on_mount(:default, _params, %{\"user_token\" => user_token} = _session, socket) do\n    socket =\n      assign_new(socket, :current_user, fn ->\n        Accounts.get_user_by_session_token(user_token)\n      end)\n\n    if socket.assigns.current_user.confirmed_at do\n      {:cont, socket}\n    else\n      {:halt, redirect(socket, to: \"/login\")}\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Root Layout in Phoenix Router\nDESCRIPTION: Shows how to set up the root layout in a Phoenix application's router using the put_root_layout plug. This layout is rendered only on the initial request and has access to the @conn assign.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/server/live-layouts.md#2025-04-16_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\nplug :put_root_layout, html: {MyAppWeb.Layouts, :root}\n```\n\n----------------------------------------\n\nTITLE: Basic Click Event Binding in Phoenix LiveView\nDESCRIPTION: Demonstrates how to handle a basic click event binding with a button element and its corresponding server-side event handler.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/client/bindings.md#2025-04-16_snippet_0\n\nLANGUAGE: heex\nCODE:\n```\n<button phx-click=\"inc_temperature\">+</button>\n```\n\nLANGUAGE: elixir\nCODE:\n```\ndef handle_event(\"inc_temperature\", _value, socket) do\n  {:ok, new_temp} = Thermostat.inc_temperature(socket.assigns.id)\n  {:noreply, assign(socket, :temperature, new_temp)}\nend\n```\n\n----------------------------------------\n\nTITLE: Handling Expected Errors with Flash Messages in Phoenix LiveView\nDESCRIPTION: Example of handling an expected error case where a user cannot leave an organization if they are the last member. This code shows using conditional logic with flash messages to handle this scenario.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/server/error-handling.md#2025-04-16_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\nif MyApp.Org.leave(socket.assigns.current_org, member) do\n  {:noreply, socket}\nelse\n  {:noreply, put_flash(socket, :error, \"last member cannot leave organization\")}\nend\n```\n\n----------------------------------------\n\nTITLE: Applying LiveView Authentication Hook via Router Configuration\nDESCRIPTION: Shows how to apply an authentication hook to all LiveViews within a specific live_session scope. This centralizes authentication at the router level.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/server/security-model.md#2025-04-16_snippet_4\n\nLANGUAGE: elixir\nCODE:\n```\nlive_session :default, on_mount: MyAppWeb.UserLiveAuth do\n  # Your routes\nend\n```\n\n----------------------------------------\n\nTITLE: Function Component with Computed Values\nDESCRIPTION: Shows the proper way to compute values in a function component while preserving change tracking.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/server/assigns-eex.md#2025-04-16_snippet_8\n\nLANGUAGE: elixir\nCODE:\n```\nattr :x, :integer, required: true\nattr :y, :integer, required: true\nattr :title, :string, required: true\ndef sum_component(assigns) do\n  assigns = assign(assigns, sum: assigns.x + assigns.y)\n\n  ~H\"\"\"\n  <h1>{@title}</h1>\n\n  {@sum}\n  \"\"\"\nend\n```\n\n----------------------------------------\n\nTITLE: Showing and Hiding Modal with JS Commands in Phoenix LiveView (HEEX)\nDESCRIPTION: Demonstrates how to use JS commands to show, hide, and toggle a modal without server round trips. It uses the JS.show, JS.hide, and JS.toggle functions with transitions.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/client/bindings.md#2025-04-16_snippet_5\n\nLANGUAGE: heex\nCODE:\n```\n<div id=\"modal\" class=\"modal\">\n  My Modal\n</div>\n\n<button phx-click={JS.show(to: \"#modal\", transition: \"fade-in\")}>\n  show modal\n</button>\n\n<button phx-click={JS.hide(to: \"#modal\", transition: \"fade-out\")}>\n  hide modal\n</button>\n\n<button phx-click={JS.toggle(to: \"#modal\", in: \"fade-in\", out: \"fade-out\")}>\n  toggle modal\n</button>\n```\n\n----------------------------------------\n\nTITLE: Pushing Out-of-Band Events to Update Charts in Phoenix LiveView\nDESCRIPTION: This snippet shows how to push out-of-band events from the server to update a chart on the client. It includes the HEEX template, JavaScript hook, and server-side Elixir code for pushing events.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/client/js-interop.md#2025-04-16_snippet_8\n\nLANGUAGE: heex\nCODE:\n```\n<div id=\"chart\" phx-hook=\"Chart\">\n```\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @type {import(\"phoenix_live_view\").ViewHook}\n */\nHooks.Chart = {\n  mounted(){\n    this.handleEvent(\"points\", ({points}) => MyChartLib.addPoints(points))\n  }\n}\n```\n\nLANGUAGE: elixir\nCODE:\n```\n{:noreply, push_event(socket, \"points\", %{points: new_points})}\n```\n\n----------------------------------------\n\nTITLE: Handling Form Events in a LiveView Component\nDESCRIPTION: Implementation of mount and handle_event callbacks to process form validation and submission in a LiveView component.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/client/form-bindings.md#2025-04-16_snippet_2\n\nLANGUAGE: elixir\nCODE:\n```\ndef render(assigns) ...\n\ndef mount(_params, _session, socket) do\n  {:ok, assign(socket, form: to_form(Accounts.change_user(%User{})))}\nend\n\ndef handle_event(\"validate\", %{\"user\" => params}, socket) do\n  form =\n    %User{}\n    |> Accounts.change_user(params)\n    |> to_form(action: :validate)\n\n  {:noreply, assign(socket, form: form)}\nend\n\ndef handle_event(\"save\", %{\"user\" => user_params}, socket) do\n  case Accounts.create_user(user_params) do\n    {:ok, user} ->\n      {:noreply,\n       socket\n       |> put_flash(:info, \"user created\")\n       |> redirect(to: ~p\"/users/#{user}\")}\n\n    {:error, %Ecto.Changeset{} = changeset} ->\n      {:noreply, assign(socket, form: to_form(changeset))}\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Page Loading Progress with Topbar in Phoenix LiveView\nDESCRIPTION: JavaScript implementation for handling page loading events in Phoenix LiveView using the topbar library. Shows how to display loading indicators during navigation events like redirects, patches, and form submissions.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/client/syncing-changes.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// app.js\nimport topbar from \"topbar\"\nwindow.addEventListener(\"phx:page-loading-start\", info => topbar.delayedShow(500))\nwindow.addEventListener(\"phx:page-loading-stop\", info => topbar.hide())\n```\n\n----------------------------------------\n\nTITLE: Change Tracking with Nested Map Fields in HEEx\nDESCRIPTION: Shows how LiveView's change tracking works when accessing nested fields in maps/structs, independently tracking each field.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/server/assigns-eex.md#2025-04-16_snippet_1\n\nLANGUAGE: heex\nCODE:\n```\n<div id={\"user_#{@user.id}\"}>\n  {@user.name}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using Ecto.get! for Authorization in Phoenix LiveView\nDESCRIPTION: Example demonstrating how to use Ecto's get! function to verify a user has access to an organization, which will raise an Ecto.NoResultsError exception if the user doesn't have access.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/server/error-handling.md#2025-04-16_snippet_3\n\nLANGUAGE: elixir\nCODE:\n```\norganizations_query = Ecto.assoc(socket.assigns.current_user, :organizations)\nRepo.get!(organizations_query, params[\"org_id\"])\n```\n\n----------------------------------------\n\nTITLE: Handling Server-Pushed Events in JavaScript for Phoenix LiveView\nDESCRIPTION: This code shows how to set up an event listener for server-pushed events in Phoenix LiveView. It listens for a 'highlight' event and performs an action on the specified element.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/client/js-interop.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlet liveSocket = new LiveSocket(...)\nwindow.addEventListener(\"phx:highlight\", (e) => {\n  let el = document.getElementById(e.detail.id)\n  if(el) {\n    // logic for highlighting\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring LiveSocket with Uploaders in JavaScript\nDESCRIPTION: This JavaScript snippet shows how to configure the LiveSocket constructor with the custom uploaders for Phoenix LiveView.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/client/external-uploads.md#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport Uploaders from \"./uploaders\"\n\nlet liveSocket = new LiveSocket(\"/live\",\n   Socket, {\n     params: {_csrf_token: csrfToken},\n     uploaders: Uploaders\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: File Input with Drag and Drop Support in HEEX\nDESCRIPTION: Implementation of a file input with drag and drop support using phx-drop-target and live_file_input component.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/client/form-bindings.md#2025-04-16_snippet_10\n\nLANGUAGE: heex\nCODE:\n```\n<div class=\"container\" phx-drop-target={@uploads.avatar.ref}>\n  ...\n  <.live_file_input upload={@uploads.avatar} />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using Function Components with Change Tracking\nDESCRIPTION: Demonstrates using function components in LiveView templates while preserving change tracking.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/server/assigns-eex.md#2025-04-16_snippet_3\n\nLANGUAGE: heex\nCODE:\n```\n<.show_name name={@user.name} />\n```\n\n----------------------------------------\n\nTITLE: Using LiveComponent for Collection Items\nDESCRIPTION: Demonstrates using LiveComponent to optimize rendering of collection items with better change tracking.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/server/assigns-eex.md#2025-04-16_snippet_15\n\nLANGUAGE: heex\nCODE:\n```\n<section :for={post <- @posts}>\n  <.live_component module={PostComponent} id={\"post-#{post.id}\"} post={post} />\n</section>\n```\n\n----------------------------------------\n\nTITLE: Handling URL Parameters in Phoenix LiveView\nDESCRIPTION: Implementation of handle_params callback that processes and validates sorting parameters from the URL, then loads users with the selected sorting option.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/server/live-navigation.md#2025-04-16_snippet_4\n\nLANGUAGE: elixir\nCODE:\n```\ndef handle_params(params, _uri, socket) do\n  socket =\n    case params[\"sort_by\"] do\n      sort_by when sort_by in ~w(name company) -> assign(socket, sort_by: sort_by)\n      _ -> socket\n    end\n\n  {:noreply, load_users(socket)}\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing S3 Direct Upload in JavaScript for Phoenix LiveView\nDESCRIPTION: This JavaScript code shows how to implement an S3 direct upload client for Phoenix LiveView, handling file uploads, progress tracking, and error handling.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/client/external-uploads.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nlet Uploaders = {}\n\nUploaders.S3 = function(entries, onViewError){\n  entries.forEach(entry => {\n    let formData = new FormData()\n    let {url, fields} = entry.meta\n    Object.entries(fields).forEach(([key, val]) => formData.append(key, val))\n    formData.append(\"file\", entry.file)\n    let xhr = new XMLHttpRequest()\n    onViewError(() => xhr.abort())\n    xhr.onload = () => xhr.status === 204 ? entry.progress(100) : entry.error()\n    xhr.onerror = () => entry.error()\n    xhr.upload.addEventListener(\"progress\", (event) => {\n      if(event.lengthComputable){\n        let percent = Math.round((event.loaded / event.total) * 100)\n        if(percent < 100){ entry.progress(percent) }\n      }\n    })\n\n    xhr.open(\"POST\", url, true)\n    xhr.send(formData)\n  })\n}\n\nexport default Uploaders;\n```\n\n----------------------------------------\n\nTITLE: Customizing Event Push with JS Commands in Phoenix LiveView (HEEX)\nDESCRIPTION: Shows how to use JS.push to customize event pushing, including targeting specific components and setting loading states.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/client/bindings.md#2025-04-16_snippet_10\n\nLANGUAGE: heex\nCODE:\n```\n<button phx-click={JS.push(\"clicked\", target: @myself, loading: \".container\")}>click</button>\n```\n\n----------------------------------------\n\nTITLE: Configuring DOM Attribute Preservation in Phoenix LiveView\nDESCRIPTION: This snippet shows how to configure the LiveSocket to preserve certain client-side attributes during DOM updates. It uses the onBeforeElUpdated callback to copy attributes starting with 'data-js-'.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/client/js-interop.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n...\nlet liveSocket = new LiveSocket(\"/live\", Socket, {\n  params: {_csrf_token: csrfToken},\n  hooks: Hooks,\n  dom: {\n    onBeforeElUpdated(from, to) {\n      for (const attr of from.attributes) {\n        if (attr.name.startsWith(\"data-js-\")) {\n          to.setAttribute(attr.name, attr.value);\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Live Patch Navigation in Phoenix LiveView Templates\nDESCRIPTION: Example of a link using the patch attribute to update the current LiveView without a full page reload, updating only the URL and parameters.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/server/live-navigation.md#2025-04-16_snippet_1\n\nLANGUAGE: heex\nCODE:\n```\n<.link patch={~p\"/pages/#{@page + 1}\"}>Next</.link>\n```\n\n----------------------------------------\n\nTITLE: Server-side Live Navigation with push_patch in Phoenix LiveView\nDESCRIPTION: Example of using push_patch in a LiveView to programmatically update the URL and current parameters without a full page reload.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/server/live-navigation.md#2025-04-16_snippet_2\n\nLANGUAGE: elixir\nCODE:\n```\n{:noreply, push_patch(socket, to: ~p\"/pages/#{@page + 1}\")}\n```\n\n----------------------------------------\n\nTITLE: Defining Locale-Scoped Routes in Phoenix Router\nDESCRIPTION: Sets up URL routing in Phoenix to include locale as a path parameter. This approach requires all routes to be nested under a locale scope parameter.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/server/gettext.md#2025-04-16_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\nscope \"/:locale\" do\n  live ...\n  get ...\nend\n```\n\n----------------------------------------\n\nTITLE: Correct Explicit Assign Passing Between Components\nDESCRIPTION: Shows the recommended pattern of explicitly passing only needed assigns to child components.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/server/assigns-eex.md#2025-04-16_snippet_11\n\nLANGUAGE: elixir\nCODE:\n```\ndef card(assigns) do\n  ~H\"\"\"\n  <div class=\"card\">\n    <.card_header title={@title} class={@title_class} />\n    <.card_body>\n      {render_slot(@inner_block)}\n    </.card_body>\n    <.card_footer on_close={@on_close} />\n  </div>\n  \"\"\"\nend\n```\n\n----------------------------------------\n\nTITLE: Handling Form Reset Events in Phoenix LiveView (Elixir)\nDESCRIPTION: Server-side event handlers for form reset and regular change events in a Phoenix LiveView module.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/client/form-bindings.md#2025-04-16_snippet_16\n\nLANGUAGE: elixir\nCODE:\n```\ndef handle_event(\"changed\", %{\"_target\" => [\"reset\"]} = params, socket) do\n  # handle form reset\nend\n\ndef handle_event(\"changed\", params, socket) do\n  # handle regular form change\nend\n```\n\n----------------------------------------\n\nTITLE: Form with phx-trigger-action for HTTP Submission in HEEX\nDESCRIPTION: Example form using phx-trigger-action to trigger a standard form submit over HTTP after LiveView validation.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/client/form-bindings.md#2025-04-16_snippet_11\n\nLANGUAGE: heex\nCODE:\n```\n<.form :let={f} for={@changeset}\n  action={~p\"/users/reset_password\"}\n  phx-submit=\"save\"\n  phx-trigger-action={@trigger_submit}>\n```\n\n----------------------------------------\n\nTITLE: Form Debounce and Throttle Examples\nDESCRIPTION: Shows how to implement rate limiting on form inputs using debounce and throttle bindings.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/client/bindings.md#2025-04-16_snippet_4\n\nLANGUAGE: heex\nCODE:\n```\n<form phx-change=\"validate\" phx-submit=\"save\">\n  <input type=\"text\" name=\"user[email]\" phx-debounce=\"blur\"/>\n  <input type=\"text\" name=\"user[username]\" phx-debounce=\"2000\"/>\n</form>\n```\n\nLANGUAGE: heex\nCODE:\n```\n<button phx-click=\"volume_up\" phx-throttle=\"1000\">+</button>\n```\n\nLANGUAGE: heex\nCODE:\n```\n<div phx-window-keydown=\"keydown\" phx-throttle=\"500\">\n  ...\n</div>\n```\n\n----------------------------------------\n\nTITLE: Linking with Query Parameters in Phoenix LiveView\nDESCRIPTION: Demonstrates using <.link> with patch to manage tab navigation via query parameters instead of phx-click events. This approach reduces server state and improves shareability and SEO.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/server/deployments.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<.link patch={...}>\n```\n\n----------------------------------------\n\nTITLE: LiveView Button Event Handling\nDESCRIPTION: HEEX template examples showing various LiveView button implementations with events\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/client/syncing-changes.md#2025-04-16_snippet_4\n\nLANGUAGE: heex\nCODE:\n```\n<button phx-click=\"clicked\" phx-window-keydown=\"key\">...</button>\n```\n\nLANGUAGE: heex\nCODE:\n```\n<button phx-disable-with=\"Submitting...\">Submit</button>\n```\n\nLANGUAGE: heex\nCODE:\n```\n<button phx-click={JS.push(\"delete\", loading: \"#post-row-13\")}>Delete</button>\n```\n\nLANGUAGE: heex\nCODE:\n```\n<button phx-click={JS.push(\"delete\") |> JS.hide()}>Delete</button>\n```\n\nLANGUAGE: heex\nCODE:\n```\n<button phx-click={JS.dispatch(\"app:clipcopy\", to: \"#printed-output\")}>Copy</button>\n```\n\nLANGUAGE: heex\nCODE:\n```\n<div id=\"item\">My Item</div>\n<button phx-click={JS.transition(\"shake\", to: \"#item\")}>Shake!</button>\n```\n\n----------------------------------------\n\nTITLE: Handling Individual Input Change Events in Elixir\nDESCRIPTION: Handler for a specific input field's change event that receives only that input's parameters.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/client/form-bindings.md#2025-04-16_snippet_4\n\nLANGUAGE: elixir\nCODE:\n```\ndef handle_event(\"email_changed\", %{\"user\" => %{\"email\" => email}}, socket) do\n  ...\nend\n```\n\n----------------------------------------\n\nTITLE: Extracting JS Commands into Functions in Phoenix LiveView (Elixir)\nDESCRIPTION: Shows how to extract JS commands into reusable functions for better organization and reusability in Phoenix LiveView applications.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/client/bindings.md#2025-04-16_snippet_8\n\nLANGUAGE: elixir\nCODE:\n```\nalias Phoenix.LiveView.JS\n\ndef hide_modal(js \\\\ %JS{}, selector) do\n  js\n  |> JS.push(\"modal-closed\")\n  |> JS.remove_class(\"show\", to: selector, transition: \"fade-out\")\nend\n```\n\n----------------------------------------\n\nTITLE: Scoping Events in Phoenix LiveView Components\nDESCRIPTION: This snippet demonstrates how to scope events when pushing from a live component with siblings. It includes both server-side Elixir code and client-side JavaScript for handling namespaced events.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/client/js-interop.md#2025-04-16_snippet_9\n\nLANGUAGE: elixir\nCODE:\n```\ndef update(%{id: id, points: points} = assigns, socket) do\n  socket =\n    socket\n    |> assign(assigns)\n    |> push_event(\"points-#{id}\", points)\n\n  {:ok, socket}\nend\n```\n\nLANGUAGE: javascript\nCODE:\n```\nHooks.Chart = {\n  mounted(){\n    this.handleEvent(`points-${this.el.id}`, (points) => MyChartLib.addPoints(points));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Client Hooks for Phone Number Formatting in Phoenix LiveView\nDESCRIPTION: This code defines a client-side hook for formatting phone numbers in an input field. It uses a regular expression to format the input as the user types.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/client/js-interop.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @type {Object.<string, import(\"phoenix_live_view\").ViewHook>}\n */\nlet Hooks = {}\nHooks.PhoneNumber = {\n  mounted() {\n    this.el.addEventListener(\"input\", e => {\n      let match = this.el.value.replace(/\\D/g, \"\").match(/^(\\d{3})(\\d{3})(\\d{4})$/)\n      if(match) {\n        this.el.value = `${match[1]}-${match[2]}-${match[3]}`\n      }\n    })\n  }\n}\n\nlet liveSocket = new LiveSocket(\"/live\", Socket, {hooks: Hooks, ...})\n...\n```\n\n----------------------------------------\n\nTITLE: Composing JS Commands for Server Push and Client-side Effects in Phoenix LiveView (HEEX)\nDESCRIPTION: Demonstrates how to compose multiple JS commands to push an event to the server and immediately hide a modal on the client side.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/client/bindings.md#2025-04-16_snippet_7\n\nLANGUAGE: heex\nCODE:\n```\n<div id=\"modal\" class=\"modal\">\n  My Modal\n</div>\n\n<button phx-click={JS.push(\"modal-closed\") |> JS.remove_class(\"show\", to: \"#modal\", transition: \"fade-out\")}>\n  hide modal\n</button>\n```\n\n----------------------------------------\n\nTITLE: Using live_title Component for Dynamic Page Titles\nDESCRIPTION: Demonstrates using Phoenix.Component.live_title/1 to add automatic prefix and suffix to page titles when rendered and on subsequent updates.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/server/live-layouts.md#2025-04-16_snippet_3\n\nLANGUAGE: heex\nCODE:\n```\n<Phoenix.Component.live_title default=\"Welcome\" prefix=\"MyApp â \">\n  {assigns[:page_title]}\n</Phoenix.Component.live_title>\n```\n\n----------------------------------------\n\nTITLE: Alternative Numeric Input with Improved Accessibility in HEEX\nDESCRIPTION: Alternative to number input using text input with numeric inputmode and pattern for better accessibility and user experience.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/client/form-bindings.md#2025-04-16_snippet_7\n\nLANGUAGE: heex\nCODE:\n```\n<input type=\"text\" inputmode=\"numeric\" pattern=\"[0-9]*\">\n```\n\n----------------------------------------\n\nTITLE: Focus and Blur Event Bindings\nDESCRIPTION: Examples of implementing focus and blur event bindings on form inputs and window-level events.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/client/bindings.md#2025-04-16_snippet_2\n\nLANGUAGE: heex\nCODE:\n```\n<input name=\"email\" phx-focus=\"myfocus\" phx-blur=\"myblur\"/>\n```\n\nLANGUAGE: heex\nCODE:\n```\n<div class=\"container\"\n    phx-window-focus=\"page-active\"\n    phx-window-blur=\"page-inactive\"\n    phx-value-page=\"123\">\n  ...\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Disable-With Button in Phoenix LiveView (HEEX)\nDESCRIPTION: Example of using phx-disable-with attribute on a submit button to provide visual feedback during form submission.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/client/form-bindings.md#2025-04-16_snippet_17\n\nLANGUAGE: heex\nCODE:\n```\n<button type=\"submit\" phx-disable-with=\"Saving...\">Save</button>\n```\n\n----------------------------------------\n\nTITLE: Implementing presign_upload Function for External Uploads in Elixir\nDESCRIPTION: This snippet shows an example implementation of the presign_upload/2 function used to generate signed URLs for external uploads.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/client/external-uploads.md#2025-04-16_snippet_2\n\nLANGUAGE: elixir\nCODE:\n```\ndefp presign_upload(entry, socket) do\n  {:ok, %{\"Location\" => link}} =\n    SomeTube.start_session(%{\n      \"uploadType\" => \"resumable\",\n      \"x-upload-content-length\" => entry.client_size\n    })\n\n  {:ok, %{uploader: \"UpChunk\", entrypoint: link}, socket}\nend\n```\n\n----------------------------------------\n\nTITLE: Applying LiveView Authentication Hook Directly in a LiveView Module\nDESCRIPTION: Demonstrates how to apply an authentication hook directly in an individual LiveView module. This approach allows for LiveView-specific authentication requirements.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/server/security-model.md#2025-04-16_snippet_5\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule MyAppWeb.PageLive do\n  use MyAppWeb, :live_view\n  on_mount MyAppWeb.UserLiveAuth\n\n  ...\nend\n```\n\n----------------------------------------\n\nTITLE: Applying the Locale Hook to All LiveViews\nDESCRIPTION: Modifies the LiveView macro in the web module to include the locale restoration hook by default. This ensures all LiveViews in the application automatically handle locale restoration.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/server/gettext.md#2025-04-16_snippet_3\n\nLANGUAGE: elixir\nCODE:\n```\ndef live_view do\n  quote do\n    use Phoenix.LiveView\n\n    on_mount MyAppWeb.RestoreLocale\n    unquote(view_helpers())\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Page Title in LiveView Mount Function\nDESCRIPTION: Demonstrates how to set the page_title assign during the mount lifecycle function in a LiveView. This will be used to dynamically update the document title.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/server/live-layouts.md#2025-04-16_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\ndef mount(_params, _session, socket) do\n  socket = assign(socket, page_title: \"Latest Posts\")\n  {:ok, socket}\nend\n```\n\n----------------------------------------\n\nTITLE: Handling Connection Lifecycle Events in Phoenix LiveView (HEEX)\nDESCRIPTION: Shows how to use phx-connected and phx-disconnected bindings to react to connection lifecycle events with JS commands.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/client/bindings.md#2025-04-16_snippet_12\n\nLANGUAGE: heex\nCODE:\n```\n<div id=\"status\" class=\"hidden\" phx-disconnected={JS.show()} phx-connected={JS.hide()}>\n  Attempting to reconnect...\n</div>\n```\n\n----------------------------------------\n\nTITLE: Storing Locale in Session in Controller\nDESCRIPTION: Implements a controller function to store user locale in the session. This approach maintains locale preference across requests without using URL parameters.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/server/gettext.md#2025-04-16_snippet_4\n\nLANGUAGE: elixir\nCODE:\n```\ndef put_user_session(conn, current_user) do\n  Gettext.put_locale(MyApp.Gettext, current_user.locale)\n\n  conn\n  |> put_session(:user_id, current_user.id)\n  |> put_session(:locale, current_user.locale)\nend\n```\n\n----------------------------------------\n\nTITLE: Handling Pagination Events in Phoenix LiveView (Elixir)\nDESCRIPTION: This snippet shows the event handlers for next-page and prev-page events in a Phoenix LiveView. It includes logic for handling regular pagination and cases where the user has 'overrun' the viewport.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/client/bindings.md#2025-04-16_snippet_16\n\nLANGUAGE: elixir\nCODE:\n```\ndef handle_event(\"next-page\", _, socket) do\n  {:noreply, paginate_posts(socket, socket.assigns.page + 1)}\nend\n\ndef handle_event(\"prev-page\", %{\"_overran\" => true}, socket) do\n  {:noreply, paginate_posts(socket, 1)}\nend\n\ndef handle_event(\"prev-page\", _, socket) do\n  if socket.assigns.page > 1 do\n    {:noreply, paginate_posts(socket, socket.assigns.page - 1)}\n  else\n    {:noreply, socket}\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Form Reset in Phoenix LiveView (HEEX)\nDESCRIPTION: Example of using a reset button in a form with phx-change event in Phoenix LiveView.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/client/form-bindings.md#2025-04-16_snippet_15\n\nLANGUAGE: heex\nCODE:\n```\n<form phx-change=\"changed\">\n  ...\n  <button type=\"reset\" name=\"reset\">Reset</button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Restoring Locale from Session in LiveView Mount\nDESCRIPTION: Retrieves the locale from session in the LiveView mount callback. This works with the session-based approach to maintain consistent localization.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/server/gettext.md#2025-04-16_snippet_5\n\nLANGUAGE: elixir\nCODE:\n```\ndef mount(_params, %{\"locale\" => locale}, socket) do\n  Gettext.put_locale(MyApp.Gettext, locale)\n  {:ok, socket}\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Form Recovery in Phoenix LiveView (HEEX)\nDESCRIPTION: Example of using phx-auto-recover to specify a custom recovery event for a wizard-style form in Phoenix LiveView.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/client/form-bindings.md#2025-04-16_snippet_13\n\nLANGUAGE: heex\nCODE:\n```\n<form id=\"wizard\" phx-change=\"validate_wizard_step\" phx-auto-recover=\"recover_wizard\">\n```\n\n----------------------------------------\n\nTITLE: Implementing UpChunk Uploader in JavaScript for Phoenix LiveView\nDESCRIPTION: This JavaScript code demonstrates how to create an UpChunk uploader for handling external uploads in Phoenix LiveView, including progress tracking and error handling.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/client/external-uploads.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as UpChunk from \"@mux/upchunk\"\n\nlet Uploaders = {}\n\nUploaders.UpChunk = function(entries, onViewError){\n  entries.forEach(entry => {\n    // create the upload session with UpChunk\n    let { file, meta: { entrypoint } } = entry\n    let upload = UpChunk.createUpload({ endpoint: entrypoint, file })\n\n    // stop uploading in the event of a view error\n    onViewError(() => upload.pause())\n\n    // upload error triggers LiveView error\n    upload.on(\"error\", (e) => entry.error(e.detail.message))\n\n    // notify progress events to LiveView\n    upload.on(\"progress\", (e) => {\n      if(e.detail < 100){ entry.progress(e.detail) }\n    })\n\n    // success completes the UploadEntry\n    upload.on(\"success\", () => entry.progress(100))\n  })\n}\n\n// Don't forget to assign Uploaders to the liveSocket\nlet liveSocket = new LiveSocket(\"/live\", Socket, {\n  uploaders: Uploaders,\n  params: {_csrf_token: csrfToken}\n})\n```\n\n----------------------------------------\n\nTITLE: Loading Locale from Database in LiveView Mount\nDESCRIPTION: Fetches user preferences including locale from the database during LiveView mounting. This approach is suitable when user locale preferences are stored in the database.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/server/gettext.md#2025-04-16_snippet_6\n\nLANGUAGE: elixir\nCODE:\n```\ndef mount(_params, %{\"user_id\" => user_id}, socket) do\n  user = Users.get_user!(user_id)\n  Gettext.put_locale(MyApp.Gettext, user.locale)\n  {:ok, socket}\nend\n```\n\n----------------------------------------\n\nTITLE: Creating a LiveView Hook for Automatic Locale Restoration\nDESCRIPTION: Defines a module with an on_mount callback to automatically restore the locale for every LiveView. This centralizes locale handling logic and applies it consistently across all LiveViews.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/server/gettext.md#2025-04-16_snippet_2\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule MyAppWeb.RestoreLocale do\n  def on_mount(:default, %{\"locale\" => locale}, _session, socket) do\n    Gettext.put_locale(MyApp.Gettext, locale)\n    {:cont, socket}\n  end\n\n  # catch-all case\n  def on_mount(:default, _params, _session, socket), do: {:cont, socket}\nend\n```\n\n----------------------------------------\n\nTITLE: LiveView Event Binding Example\nDESCRIPTION: Example of LiveView click event binding in HEEx template and corresponding event handler.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/introduction/welcome.md#2025-04-16_snippet_4\n\nLANGUAGE: heex\nCODE:\n```\n<button phx-click=\"inc_temperature\">+</button>\n```\n\nLANGUAGE: elixir\nCODE:\n```\ndef handle_event(\"inc_temperature\", _value, socket) do\n  {:noreply, update(socket, :temperature, &(&1 + 1))}\nend\n```\n\n----------------------------------------\n\nTITLE: Pushing Server Events in Elixir for Phoenix LiveView\nDESCRIPTION: This Elixir code demonstrates how to push a 'highlight' event from the server to the client in a Phoenix LiveView application.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/client/js-interop.md#2025-04-16_snippet_5\n\nLANGUAGE: elixir\nCODE:\n```\ndef handle_info({:item_updated, item}, socket) do\n  {:noreply, push_event(socket, \"highlight\", %{id: \"item-#{item.id}\"})}\nend\n```\n\n----------------------------------------\n\nTITLE: Modal Interaction with Class Manipulation in Phoenix LiveView (HEEX)\nDESCRIPTION: Shows how to use JS commands to add and remove classes for showing and hiding a modal, which is useful when working with UI libraries that rely on class-based interactions.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/client/bindings.md#2025-04-16_snippet_6\n\nLANGUAGE: heex\nCODE:\n```\n<div id=\"modal\" class=\"modal\">\n  My Modal\n</div>\n\n<button phx-click={JS.add_class(\"show\", to: \"#modal\", transition: \"fade-in\")}>\n  show modal\n</button>\n\n<button phx-click={JS.remove_class(\"show\", to: \"#modal\", transition: \"fade-out\")}>\n  hide modal\n</button>\n```\n\n----------------------------------------\n\nTITLE: LiveView Function Component Example\nDESCRIPTION: Example of a function component implementation in LiveView showing weather greeting with dynamic content.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/introduction/welcome.md#2025-04-16_snippet_5\n\nLANGUAGE: elixir\nCODE:\n```\ndef weather_greeting(assigns) do\n  ~H\"\"\"\n  <div title=\"My div\" class={@class}>\n    <p>Hello {@name}</p>\n    <MyApp.Weather.city name=\"KrakÃ³w\"/>\n  </div>\n  \"\"\"\nend\n```\n\n----------------------------------------\n\nTITLE: Defining HTML Template with JavaScript Command in Phoenix LiveView\nDESCRIPTION: This HEEX template shows how to embed a JavaScript transition command in a data attribute, which can be triggered by server-pushed events.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/client/js-interop.md#2025-04-16_snippet_6\n\nLANGUAGE: heex\nCODE:\n```\n<div id={\"item-#{item.id}\"} class=\"item\" data-highlight={JS.transition(\"highlight\")}>\n  {item.title}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Input with Custom Change Event and Target in HEEX\nDESCRIPTION: Example of an input field with a specific phx-change handler and phx-target to direct events to a particular component.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/client/form-bindings.md#2025-04-16_snippet_3\n\nLANGUAGE: heex\nCODE:\n```\n<.form for={@form} phx-change=\"validate\" phx-submit=\"save\">\n  ...\n  <.input field={@form[:email]}  phx-change=\"email_changed\" phx-target={@myself} />\n</.form>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Input Component in Elixir\nDESCRIPTION: A simple implementation of an input function component that renders HTML input elements with form field attributes.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/client/form-bindings.md#2025-04-16_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\nattr :field, Phoenix.HTML.FormField\nattr :rest, :global, include: ~w(type)\ndef input(assigns) do\n  ~H\"\"\"\n  <input id={@field.id} name={@field.name} value={@field.value} {@rest} />\n  \"\"\"\nend\n```\n\n----------------------------------------\n\nTITLE: Using Bang Functions for Exception Handling in Phoenix LiveView\nDESCRIPTION: Example showing how to use a bang function (functions that raise exceptions) to handle unexpected scenarios in a LiveView context, which will raise a specific exception if the operation fails.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/server/error-handling.md#2025-04-16_snippet_2\n\nLANGUAGE: elixir\nCODE:\n```\nMyApp.Org.leave!(socket.assigns.current_org, member)\n{:noreply, socket}\n```\n\n----------------------------------------\n\nTITLE: Implementing Form Loading States in Phoenix LiveView (HEEX)\nDESCRIPTION: Example of using CSS classes to show different content during form submission in Phoenix LiveView.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/client/form-bindings.md#2025-04-16_snippet_19\n\nLANGUAGE: heex\nCODE:\n```\n<form phx-change=\"update\">\n  <div class=\"while-submitting\">Please wait while we save our content...</div>\n  <div class=\"inputs\">\n    <input type=\"text\" name=\"text\" value={@text}>\n  </div>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Handling Tab Navigation in Phoenix LiveView\nDESCRIPTION: Refers to the handle_params/3 callback in Phoenix LiveView for processing tab navigation based on query parameters. This method sets the relevant assign to determine which tab to display.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/server/deployments.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nc:Phoenix.LiveView.handle_params/3\n```\n\n----------------------------------------\n\nTITLE: Using Assertive Code for Unexpected Scenarios in Phoenix LiveView\nDESCRIPTION: Example of using Elixir's pattern matching to handle the organization leave operation as an unexpected scenario, which will raise an exception if the operation fails instead of explicitly handling the error case.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/server/error-handling.md#2025-04-16_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\ntrue = MyApp.Org.leave(socket.assigns.current_org, member)\n{:noreply, socket}\n```\n\n----------------------------------------\n\nTITLE: Using phx-mounted for DOM Animation in Phoenix LiveView (HEEX)\nDESCRIPTION: Demonstrates how to use the phx-mounted binding to trigger animations when elements are mounted to the DOM.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/client/bindings.md#2025-04-16_snippet_11\n\nLANGUAGE: heex\nCODE:\n```\n<div phx-mounted={JS.transition(\"animate-ping\", time: 500)}>\n```\n\n----------------------------------------\n\nTITLE: Implementing S3-Compatible Direct Upload in JavaScript\nDESCRIPTION: This JavaScript code shows how to implement an S3-compatible direct upload client for Phoenix LiveView using PUT requests instead of POST.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/client/external-uploads.md#2025-04-16_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nUploaders.S3 = function (entries, onViewError) {\n  entries.forEach(entry => {\n    let xhr = new XMLHttpRequest()\n    onViewError(() => xhr.abort())\n    xhr.onload = () => xhr.status === 200 ? entry.progress(100) : entry.error()\n    xhr.onerror = () => entry.error()\n\n    xhr.upload.addEventListener(\"progress\", (event) => {\n      if(event.lengthComputable){\n        let percent = Math.round((event.loaded / event.total) * 100)\n        if(percent < 100){ entry.progress(percent) }\n      }\n    })\n\n    let url = entry.meta.url\n    xhr.open(\"PUT\", url, true)\n    xhr.send(entry.file)\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Setting LiveSocket ID in Elixir for Phoenix LiveView\nDESCRIPTION: This snippet demonstrates how to set a live_socket_id in the session when logging in a user. This ID is used to identify and manage LiveView sockets for the user.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/server/security-model.md#2025-04-16_snippet_8\n\nLANGUAGE: elixir\nCODE:\n```\nconn\n|> put_session(:current_user_id, user.id)\n|> put_session(:live_socket_id, \"users_socket:#{user.id}\")\n```\n\n----------------------------------------\n\nTITLE: Recommended Function Approach for Calculations\nDESCRIPTION: Shows the recommended approach of using functions instead of variables in templates to preserve change tracking.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/server/assigns-eex.md#2025-04-16_snippet_6\n\nLANGUAGE: heex\nCODE:\n```\n{sum(@x, @y)}\n```\n\n----------------------------------------\n\nTITLE: Updating Page Title in LiveView handle_info Callback\nDESCRIPTION: Shows how to update the page title during a LiveView event by assigning a new value to page_title. This allows LiveView to automatically update the document title without a full page refresh.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/server/live-layouts.md#2025-04-16_snippet_4\n\nLANGUAGE: elixir\nCODE:\n```\ndef handle_info({:new_messages, count}, socket) do\n  {:noreply, assign(socket, page_title: \"Latest Posts (#{count} new)\")}\nend\n```\n\n----------------------------------------\n\nTITLE: Broadcasting Disconnect Message in Elixir for Phoenix LiveView\nDESCRIPTION: This code shows how to broadcast a disconnect message to all LiveView sockets associated with a specific user ID. This is used to disconnect all live instances of a user.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/server/security-model.md#2025-04-16_snippet_9\n\nLANGUAGE: elixir\nCODE:\n```\nMyAppWeb.Endpoint.broadcast(\"users_socket:#{user.id}\", \"disconnect\", %{})\n```\n\n----------------------------------------\n\nTITLE: Implementing presign_upload Function for S3 Direct Uploads in Elixir\nDESCRIPTION: This Elixir code demonstrates how to implement the presign_upload/2 function for generating pre-signed URLs for direct S3 uploads in Phoenix LiveView.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/client/external-uploads.md#2025-04-16_snippet_5\n\nLANGUAGE: elixir\nCODE:\n```\ndefp presign_upload(entry, socket) do\n  uploads = socket.assigns.uploads\n  bucket = \"phx-upload-example\"\n  key = \"public/#{entry.client_name}\"\n\n  config = %{\n    region: \"us-east-1\",\n    access_key_id: System.fetch_env!(\"AWS_ACCESS_KEY_ID\"),\n    secret_access_key: System.fetch_env!(\"AWS_SECRET_ACCESS_KEY\")\n  }\n\n  {:ok, fields} =\n    SimpleS3Upload.sign_form_upload(config, bucket,\n      key: key,\n      content_type: entry.client_type,\n      max_file_size: uploads[entry.upload_config].max_file_size,\n      expires_in: :timer.hours(1)\n    )\n\n  meta = %{uploader: \"S3\", key: key, url: \"http://#{bucket}.s3-#{config.region}.amazonaws.com\", fields: fields}\n  {:ok, meta, socket}\nend\n```\n\n----------------------------------------\n\nTITLE: Input Component with Error Feedback Filtering in Elixir\nDESCRIPTION: Implementation of an input component that uses used_input? to filter error messages for inputs that have been interacted with.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/client/form-bindings.md#2025-04-16_snippet_5\n\nLANGUAGE: elixir\nCODE:\n```\ndef input(%{field: %Phoenix.HTML.FormField{} = field} = assigns) do\n  errors = if Phoenix.Component.used_input?(field), do: field.errors, else: []\n\n  assigns\n  |> assign(field: nil, id: assigns.id || field.id)\n  |> assign(:errors, Enum.map(errors, &translate_error(&1)))\n```\n\n----------------------------------------\n\nTITLE: Defining LiveView Mount Exception Metadata in Elixir\nDESCRIPTION: Defines the metadata structure for the mount exception telemetry event in Phoenix LiveView, adding kind and reason fields to the standard mount metadata.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/server/telemetry.md#2025-04-16_snippet_3\n\nLANGUAGE: elixir\nCODE:\n```\n%{\n  socket: Phoenix.LiveView.Socket.t,\n  kind: atom,\n  reason: term,\n  params: unsigned_params | :not_mounted_at_router,\n  session: map,\n  uri: String.t() | nil\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing presign_upload for S3-Compatible Services in Elixir\nDESCRIPTION: This Elixir code demonstrates how to implement the presign_upload/2 function for S3-compatible services that require PUT requests instead of POST.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/client/external-uploads.md#2025-04-16_snippet_8\n\nLANGUAGE: elixir\nCODE:\n```\ndef presign_upload(entry, socket) do\n  config = ExAws.Config.new(:s3)\n  bucket = \"bucket\"\n  key = \"public/#{entry.client_name}\"\n\n  {:ok, url} =\n    ExAws.S3.presigned_url(config, :put, bucket, key,\n      expires_in: 3600,\n      query_params: [{\"Content-Type\", entry.client_type}]\n    )\n   {:ok, %{uploader: \"S3\", key: key, url: url}, socket}\nend\n```\n\n----------------------------------------\n\nTITLE: Password Input Fields with Explicit Values in HEEX\nDESCRIPTION: Example of password inputs that explicitly set values, which is necessary because password values are not reused for security reasons.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/client/form-bindings.md#2025-04-16_snippet_8\n\nLANGUAGE: heex\nCODE:\n```\n<.input field={f[:password]} value={input_value(f[:password].value)} />\n<.input field={f[:password_confirmation]} value={input_value(f[:password_confirmation].value)} />\n```\n\n----------------------------------------\n\nTITLE: Defining LiveView Handle Params Metadata in Elixir\nDESCRIPTION: Defines the metadata structure for handle_params telemetry events in Phoenix LiveView, containing the socket, params, and URI information.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/server/telemetry.md#2025-04-16_snippet_4\n\nLANGUAGE: elixir\nCODE:\n```\n%{\n  socket: Phoenix.LiveView.Socket.t,\n  params: unsigned_params,\n  uri: String.t()\n}\n```\n\n----------------------------------------\n\nTITLE: Executing JS Commands for Server-Pushed Events in Phoenix LiveView\nDESCRIPTION: This snippet demonstrates how to use LiveSocket.execJS to trigger JS commands embedded in data attributes when a server-pushed event is received.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/client/js-interop.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nlet liveSocket = new LiveSocket(...)\nwindow.addEventListener(\"phx:highlight\", (e) => {\n  document.querySelectorAll(`[data-highlight]`).forEach(el => {\n    if(el.id == e.detail.id){\n      liveSocket.execJS(el, el.getAttribute(\"data-highlight\"))\n    }\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: LiveView Parameter Handling Example\nDESCRIPTION: Example showing how to handle URL parameters and session data in LiveView mount callback.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/introduction/welcome.md#2025-04-16_snippet_3\n\nLANGUAGE: elixir\nCODE:\n```\ndef mount(%{\"house\" => house}, %{\"current_user_id\" => user_id}, socket) do\n  temperature = Thermostat.get_house_reading(user_id, house)\n  {:ok, assign(socket, :temperature, temperature)}\nend\n```\n\n----------------------------------------\n\nTITLE: Defining LiveView Handle Params Exception Metadata in Elixir\nDESCRIPTION: Defines the metadata structure for handle_params exception telemetry event in Phoenix LiveView, adding kind and reason fields to the standard handle_params metadata.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/server/telemetry.md#2025-04-16_snippet_5\n\nLANGUAGE: elixir\nCODE:\n```\n%{\n  socket: Phoenix.LiveView.Socket.t,\n  kind: atom,\n  reason: term,\n  params: unsigned_params,\n  uri: String.t()\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering File Upload Form with LiveView Components\nDESCRIPTION: Template for rendering a file upload form with live file input component and submit functionality.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/server/uploads.md#2025-04-16_snippet_1\n\nLANGUAGE: heex\nCODE:\n```\n<%!-- lib/my_app_web/live/upload_live.html.heex --%>\n\n<form id=\"upload-form\" phx-submit=\"save\" phx-change=\"validate\">\n  <.live_file_input upload={@uploads.avatar} />\n  <button type=\"submit\">Upload</button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Using :for Attribute in HEEx Templates\nDESCRIPTION: Shows an alternative syntax using the :for attribute for iterating over collections in HEEx templates.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/server/assigns-eex.md#2025-04-16_snippet_14\n\nLANGUAGE: heex\nCODE:\n```\n<section :for={post <- @posts}>\n  <h1>{expand_title(post.title)}</h1>\n</section>\n```\n\n----------------------------------------\n\nTITLE: Defining LiveView Handle Event Metadata in Elixir\nDESCRIPTION: Defines the metadata structure for handle_event telemetry events in Phoenix LiveView, containing the socket, event name, and parameters.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/server/telemetry.md#2025-04-16_snippet_6\n\nLANGUAGE: elixir\nCODE:\n```\n%{\n  socket: Phoenix.LiveView.Socket.t,\n  event: String.t(),\n  params: unsigned_params\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Form Loading States in Phoenix LiveView (CSS)\nDESCRIPTION: CSS rules for showing and hiding content based on form submission state in Phoenix LiveView.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/client/form-bindings.md#2025-04-16_snippet_18\n\nLANGUAGE: css\nCODE:\n```\n.while-submitting { display: none; }\n.inputs { display: block; }\n\n.phx-submit-loading .while-submitting { display: block; }\n.phx-submit-loading .inputs { display: none; }\n```\n\n----------------------------------------\n\nTITLE: Using Extracted JS Command Function in Phoenix LiveView (HEEX)\nDESCRIPTION: Demonstrates how to use an extracted JS command function in a Phoenix LiveView template.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/client/bindings.md#2025-04-16_snippet_9\n\nLANGUAGE: heex\nCODE:\n```\n<button phx-click={hide_modal(\"#modal\")}>hide modal</button>\n```\n\n----------------------------------------\n\nTITLE: Defining LiveView Render Exception Metadata in Elixir\nDESCRIPTION: Defines the metadata structure for render exception telemetry event in Phoenix LiveView, adding kind and reason fields to the standard render metadata.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/server/telemetry.md#2025-04-16_snippet_9\n\nLANGUAGE: elixir\nCODE:\n```\n%{\n  socket: Phoenix.LiveView.Socket.t,\n  kind: atom,\n  reason: term,\n  force?: boolean,\n  changed?: boolean\n}\n```\n\n----------------------------------------\n\nTITLE: LiveSocket Configuration with Click Metadata\nDESCRIPTION: Shows how to configure LiveSocket to include additional metadata for click events such as coordinates and alt key state.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/client/bindings.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlet liveSocket = new LiveSocket(\"/live\", Socket, {\n  params: {_csrf_token: csrfToken},\n  metadata: {\n    click: (e, el) => {\n      return {\n        altKey: e.altKey,\n        clientX: e.clientX,\n        clientY: e.clientY\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Handling Events in Phoenix LiveView\nDESCRIPTION: Mentions the handle_event/3 callback in Phoenix LiveView, which is used for managing events triggered by phx-click or other bindings.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/server/deployments.md#2025-04-16_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nc:Phoenix.LiveView.handle_event/3\n```\n\n----------------------------------------\n\nTITLE: Defining LiveComponent Update Stop Metadata in Elixir\nDESCRIPTION: Defines the metadata structure for update stop telemetry event in Phoenix LiveComponent, adding the updated sockets to the standard update metadata.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/server/telemetry.md#2025-04-16_snippet_11\n\nLANGUAGE: elixir\nCODE:\n```\n%{\n  socket: Phoenix.LiveView.Socket.t,\n  component: atom,\n  assigns_sockets: [{map(), Phoenix.LiveView.Socket.t}],\n  sockets: [Phoenix.LiveView.Socket.t]\n}\n```\n\n----------------------------------------\n\nTITLE: Key Event Handling Configuration\nDESCRIPTION: Demonstrates how to configure LiveSocket for handling keyboard events with additional metadata.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/client/bindings.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nlet liveSocket = new LiveSocket(\"/live\", Socket, {\n  params: {_csrf_token: csrfToken},\n  metadata: {\n    keydown: (e, el) => {\n      return {\n        key: e.key,\n        metaKey: e.metaKey,\n        repeat: e.repeat\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Installing UpChunk JavaScript Library for Phoenix LiveView\nDESCRIPTION: This snippet shows how to install the UpChunk library using npm for use with Phoenix LiveView external uploads.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/client/external-uploads.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ npm install --prefix assets --save @mux/upchunk\n```\n\n----------------------------------------\n\nTITLE: Defining LiveComponent Handle Event Exception Metadata in Elixir\nDESCRIPTION: Defines the metadata structure for handle_event exception telemetry event in Phoenix LiveComponent, adding kind and reason fields to the standard handle_event metadata.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/server/telemetry.md#2025-04-16_snippet_14\n\nLANGUAGE: elixir\nCODE:\n```\n%{\n  socket: Phoenix.LiveView.Socket.t,\n  kind: atom,\n  reason: term,\n  component: atom,\n  event: String.t(),\n  params: unsigned_params\n}\n```\n\n----------------------------------------\n\nTITLE: Traditional Link Navigation in Phoenix LiveView Templates\nDESCRIPTION: Example of a traditional link that causes a full page reload when navigating to a new page with a parameter.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/server/live-navigation.md#2025-04-16_snippet_0\n\nLANGUAGE: heex\nCODE:\n```\n<.link href={~p\"/pages/#{@page + 1}\"}>Next</.link>\n```\n\n----------------------------------------\n\nTITLE: Accessing Page Title in Root Layout\nDESCRIPTION: Shows how to access the page_title assign in the root layout's HEEX template to set the document title.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/server/live-layouts.md#2025-04-16_snippet_2\n\nLANGUAGE: heex\nCODE:\n```\n<title>{@page_title}</title>\n```\n\n----------------------------------------\n\nTITLE: Basic Number Input in HEEX\nDESCRIPTION: Example of a standard HTML number input, which has special handling in LiveView for validation events.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/client/form-bindings.md#2025-04-16_snippet_6\n\nLANGUAGE: heex\nCODE:\n```\n<input type=\"number\">\n```\n\n----------------------------------------\n\nTITLE: Loading State CSS Implementation\nDESCRIPTION: CSS implementation for handling loading states in LiveView elements\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/client/syncing-changes.md#2025-04-16_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.phx-click-loading.opaque-on-click {\n  opacity: 50%;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining LiveView Render Metadata in Elixir\nDESCRIPTION: Defines the metadata structure for render telemetry events in Phoenix LiveView, containing the socket and flags indicating if rendering was forced or if assigns changed.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/server/telemetry.md#2025-04-16_snippet_8\n\nLANGUAGE: elixir\nCODE:\n```\n%{\n  socket: Phoenix.LiveView.Socket.t,\n  force?: boolean,\n  changed?: boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Handle Event for Triggering Form Submission in Elixir\nDESCRIPTION: Event handler that sets the trigger_submit assign to true, causing the form to disconnect from LiveView and submit over HTTP on the next render.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/client/form-bindings.md#2025-04-16_snippet_12\n\nLANGUAGE: elixir\nCODE:\n```\ndef handle_event(\"save\", params, socket) do\n  case validate_change_password(socket.assigns.user, params) do\n    {:ok, changeset} ->\n      {:noreply, assign(socket, changeset: changeset, trigger_submit: true)}\n\n    {:error, changeset} ->\n      {:noreply, assign(socket, changeset: changeset)}\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Tailwind Plugin Configuration for LiveView\nDESCRIPTION: JavaScript configuration for Tailwind CSS to add LiveView-specific variants\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/client/syncing-changes.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nplugins: [\n  plugin(({ addVariant }) => {\n    addVariant(\"phx-click-loading\", [\".phx-click-loading&\", \".phx-click-loading &\",]);\n    addVariant(\"phx-submit-loading\", [\".phx-submit-loading&\", \".phx-submit-loading &\",]);\n    addVariant(\"phx-change-loading\", [\".phx-change-loading&\", \".phx-change-loading &\",]);\n  }),\n],\n```\n\n----------------------------------------\n\nTITLE: Configuring Browser Polyfills for Phoenix LiveView in JavaScript\nDESCRIPTION: JavaScript code snippet for the app.js file that imports all necessary polyfills to ensure compatibility with older browsers. It shows the proper import sequence before initializing the LiveSocket connection.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/README.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// assets/js/app.js\nimport \"mdn-polyfills/Object.assign\"\nimport \"mdn-polyfills/CustomEvent\"\nimport \"mdn-polyfills/String.prototype.startsWith\"\nimport \"mdn-polyfills/Array.from\"\nimport \"mdn-polyfills/Array.prototype.find\"\nimport \"mdn-polyfills/Array.prototype.some\"\nimport \"mdn-polyfills/NodeList.prototype.forEach\"\nimport \"mdn-polyfills/Element.prototype.closest\"\nimport \"mdn-polyfills/Element.prototype.matches\"\nimport \"mdn-polyfills/Node.prototype.remove\"\nimport \"child-replace-with-polyfill\"\nimport \"url-search-params-polyfill\"\nimport \"formdata-polyfill\"\nimport \"classlist-polyfill\"\nimport \"new-event-polyfill\"\nimport \"@webcomponents/template\"\nimport \"shim-keyboard-event-key\"\nimport \"event-submitter-polyfill\"\nimport \"core-js/features/set\"\nimport \"core-js/features/url\"\n\nimport {Socket} from \"phoenix\"\nimport {LiveSocket} from \"phoenix_live_view\"\n...\n```\n\n----------------------------------------\n\nTITLE: Triggering phx-change Event with JavaScript\nDESCRIPTION: Example of using JavaScript to programmatically trigger a phx-change event on a form element.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/client/form-bindings.md#2025-04-16_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.getElementById(\"my-select\").dispatchEvent(\n  new Event(\"input\", {bubbles: true})\n)\n```\n\n----------------------------------------\n\nTITLE: Defining LiveView Handle Event Exception Metadata in Elixir\nDESCRIPTION: Defines the metadata structure for handle_event exception telemetry event in Phoenix LiveView, adding kind and reason fields to the standard handle_event metadata.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/server/telemetry.md#2025-04-16_snippet_7\n\nLANGUAGE: elixir\nCODE:\n```\n%{\n  socket: Phoenix.LiveView.Socket.t,\n  kind: atom,\n  reason: term,\n  event: String.t(),\n  params: unsigned_params\n}\n```\n\n----------------------------------------\n\nTITLE: Clipboard Copy Event Handler\nDESCRIPTION: JavaScript event listener implementation for clipboard copy functionality\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/client/syncing-changes.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.addEventListener(\"app:clipcopy\", (event) => {\n  if (\"clipboard\" in navigator) {\n    if (event.target.tagName === \"INPUT\") {\n      navigator.clipboard.writeText(event.target.value);\n    } else {\n      navigator.clipboard.writeText(event.target.textContent);\n    }\n  } else {\n    alert(\n      \"Sorry, your browser does not support clipboard copy.\\nThis generally requires a secure origin â either HTTPS or localhost.\",\n    );\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Triggering phx-submit Event with JavaScript\nDESCRIPTION: Example of using JavaScript to programmatically trigger a phx-submit event on a form element.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/client/form-bindings.md#2025-04-16_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.getElementById(\"my-form\").dispatchEvent(\n  new Event(\"submit\", {bubbles: true, cancelable: true})\n)\n```\n\n----------------------------------------\n\nTITLE: Defining LiveView Mount Start Telemetry Measurement Structure in Elixir\nDESCRIPTION: Defines the measurement structure for the mount start telemetry event in Phoenix LiveView, containing the system_time as a monotonic time value.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/server/telemetry.md#2025-04-16_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\n%{system_time: System.monotonic_time}\n```\n\n----------------------------------------\n\nTITLE: Defining LiveComponent Update Exception Metadata in Elixir\nDESCRIPTION: Defines the metadata structure for update exception telemetry event in Phoenix LiveComponent, adding kind and reason fields to the standard update metadata.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/server/telemetry.md#2025-04-16_snippet_12\n\nLANGUAGE: elixir\nCODE:\n```\n%{\n  socket: Phoenix.LiveView.Socket.t,\n  kind: atom,\n  reason: term,\n  component: atom,\n  assigns_sockets: [{map(), Phoenix.LiveView.Socket.t}]\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Child Templates with Change Tracking\nDESCRIPTION: Example of rendering child templates while maintaining change tracking functionality in LiveView.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/server/assigns-eex.md#2025-04-16_snippet_2\n\nLANGUAGE: heex\nCODE:\n```\n{render(\"child_template.html\", assigns)}\n```\n\n----------------------------------------\n\nTITLE: Defining LiveView Mount Metadata Structure in Elixir\nDESCRIPTION: Defines the metadata structure for the mount telemetry events in Phoenix LiveView, containing the socket, params, session, and URI information.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/server/telemetry.md#2025-04-16_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\n%{\n  socket: Phoenix.LiveView.Socket.t,\n  params: unsigned_params | :not_mounted_at_router,\n  session: map,\n  uri: String.t() | nil\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CORS for S3 Bucket in JSON\nDESCRIPTION: This JSON snippet shows an example CORS configuration for an S3 bucket to allow direct uploads from specified origins.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/client/external-uploads.md#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n[\n    {\n        \"AllowedHeaders\": [ \"*\" ],\n        \"AllowedMethods\": [ \"PUT\", \"POST\" ],\n        \"AllowedOrigins\": [ \"*\" ],\n        \"ExposeHeaders\": []\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Incorrect Database Query in Template Example\nDESCRIPTION: Shows an anti-pattern where database queries are performed directly in templates, breaking LiveView's change tracking.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/server/assigns-eex.md#2025-04-16_snippet_4\n\nLANGUAGE: heex\nCODE:\n```\n<%= for user <- Repo.all(User) do %>\n  {user.name}\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Defining LiveView Mount Stop Telemetry Measurement in Elixir\nDESCRIPTION: Defines the measurement structure for the mount stop telemetry event in Phoenix LiveView, containing the duration in native time units.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/server/telemetry.md#2025-04-16_snippet_2\n\nLANGUAGE: elixir\nCODE:\n```\n%{duration: native_time}\n```\n\n----------------------------------------\n\nTITLE: Alternative Approach for Passing All Assigns\nDESCRIPTION: Shows an alternative approach for passing all assigns to child components when necessary, using function calls.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/server/assigns-eex.md#2025-04-16_snippet_12\n\nLANGUAGE: elixir\nCODE:\n```\ndef card(assigns) do\n  ~H\"\"\"\n  <div class=\"card\">\n    {card_header(assigns)}\n    {card_body(assigns)}\n    {card_footer(assigns)}\n  </div>\n  \"\"\"\nend\n```\n\n----------------------------------------\n\nTITLE: Valid Variable Usage in For Comprehension\nDESCRIPTION: Demonstrates the acceptable pattern of using variables introduced by Elixir's block constructs like for loops.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/server/assigns-eex.md#2025-04-16_snippet_9\n\nLANGUAGE: heex\nCODE:\n```\n<%= for post <- @posts do %>\n  ...\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Defining LiveComponent Update Metadata in Elixir\nDESCRIPTION: Defines the metadata structure for update telemetry events in Phoenix LiveComponent, containing the socket, component module, and assigns with sockets.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/server/telemetry.md#2025-04-16_snippet_10\n\nLANGUAGE: elixir\nCODE:\n```\n%{\n  socket: Phoenix.LiveView.Socket.t,\n  component: atom,\n  assigns_sockets: [{map(), Phoenix.LiveView.Socket.t}]\n}\n```\n\n----------------------------------------\n\nTITLE: Client State Demonstration in Plain Text\nDESCRIPTION: Shows example form states to demonstrate client-server synchronization challenges\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/client/syncing-changes.md#2025-04-16_snippet_0\n\nLANGUAGE: plain\nCODE:\n```\n[ hello@example.    ]\n\n    ------------\n       SUBMIT\n    ------------\n```\n\n----------------------------------------\n\nTITLE: Incorrect Assigns Passing Between Components\nDESCRIPTION: Shows an anti-pattern where all assigns are passed to child components, breaking change tracking.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/server/assigns-eex.md#2025-04-16_snippet_10\n\nLANGUAGE: elixir\nCODE:\n```\ndef card(assigns) do\n  ~H\"\"\"\n  <div class=\"card\">\n    <.card_header {assigns} />\n    <.card_body {assigns} />\n    <.card_footer {assigns} />\n  </div>\n  \"\"\"\nend\n\ndefp card_header(assigns) do\n  ...\nend\n\ndefp card_body(assigns) do\n  ...\nend\n\ndefp card_footer(assigns) do\n  ...\nend\n```\n\n----------------------------------------\n\nTITLE: Defining LiveComponent Handle Event Metadata in Elixir\nDESCRIPTION: Defines the metadata structure for handle_event telemetry events in Phoenix LiveComponent, containing the socket, component module, event name, and parameters.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/server/telemetry.md#2025-04-16_snippet_13\n\nLANGUAGE: elixir\nCODE:\n```\n%{\n  socket: Phoenix.LiveView.Socket.t,\n  component: atom,\n  event: String.t(),\n  params: unsigned_params\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Polyfills for IE11 and Older Browser Support\nDESCRIPTION: Command to install the necessary npm packages that provide polyfills for older browsers, particularly IE11 and older versions of Edge. These polyfills ensure LiveView compatibility with legacy browsers.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/README.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ npm install --save --prefix assets mdn-polyfills url-search-params-polyfill formdata-polyfill child-replace-with-polyfill classlist-polyfill new-event-polyfill @webcomponents/template shim-keyboard-event-key core-js\n```\n\n----------------------------------------\n\nTITLE: Using For Comprehension in HEEx Templates\nDESCRIPTION: Demonstrates using a for comprehension in a HEEx template to iterate over a collection.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/server/assigns-eex.md#2025-04-16_snippet_13\n\nLANGUAGE: heex\nCODE:\n```\n<%= for post <- @posts do %>\n  <section>\n    <h1>{expand_title(post.title)}</h1>\n  </section>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Updating Floki Selectors to Text Filters in LiveViewTest\nDESCRIPTION: Example diff showing how to migrate from Floki-specific selectors (fl-contains) to the text_filter option in LiveViewTest when upgrading to LiveView v1.1. This change is necessary as v1.1 moves from Floki to LazyHTML for HTML parsing.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/CHANGELOG.md#2025-04-16_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n {:ok, _login_live, login_html} =\n   lv\n-  |> element(~s|main a:fl-contains(\"Sign up\")|)\n+  |> element(\"main a\", \"Sign up\")\n   |> render_click()\n   |> follow_redirect(conn, ~p\"<%= schema.route_prefix %>/register\")\n```\n\n----------------------------------------\n\nTITLE: Incorrect Variable Assignment in HEEx\nDESCRIPTION: Demonstrates a common pitfall of defining variables directly in HEEx templates, which breaks change tracking.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/server/assigns-eex.md#2025-04-16_snippet_5\n\nLANGUAGE: heex\nCODE:\n```\n<% some_var = @x + @y %>\n{some_var}\n```\n\n----------------------------------------\n\nTITLE: Using LiveView-specific Events for Flash Messages in Phoenix LiveView (HEEX)\nDESCRIPTION: Demonstrates how to use the lv: event prefix for LiveView-specific features, such as clearing flash messages without calling handle_event/3 callbacks.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/client/bindings.md#2025-04-16_snippet_13\n\nLANGUAGE: heex\nCODE:\n```\n<p class=\"alert\" phx-click=\"lv:clear-flash\" phx-value-key=\"info\">\n  {Phoenix.Flash.get(@flash, :info)}\n</p>\n```\n\n----------------------------------------\n\nTITLE: Running JavaScript End-to-End Tests in Phoenix LiveView\nDESCRIPTION: Commands to setup and run end-to-end JavaScript tests.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/README.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ npm run setup\n$ npm run e2e:test\n```\n\n----------------------------------------\n\nTITLE: Running Elixir Tests in Phoenix LiveView\nDESCRIPTION: Commands to fetch dependencies and run Elixir test suite.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/README.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ mix deps.get\n$ mix test\n```\n\n----------------------------------------\n\nTITLE: Link Configuration for Sorting in Phoenix LiveView\nDESCRIPTION: Example of a link that uses patch navigation to sort users by name, which will trigger the handle_params callback in the current LiveView.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/server/live-navigation.md#2025-04-16_snippet_3\n\nLANGUAGE: heex\nCODE:\n```\n<.link patch={~p\"/users?sort_by=name\"}>Sort by name</.link>\n```\n\n----------------------------------------\n\nTITLE: Running JavaScript Unit Tests in Phoenix LiveView\nDESCRIPTION: Commands to run JavaScript unit tests, including an option for watch mode that automatically runs tests on file changes.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/README.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ npm run setup\n$ npm run js:test\n# to automatically run tests for files that have been changed\n$ npm run js:test.watch\n```\n\n----------------------------------------\n\nTITLE: Incorrect Variable Definition in Render Function\nDESCRIPTION: Example of an anti-pattern where variables are defined at the top of the render function, breaking change tracking.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/server/assigns-eex.md#2025-04-16_snippet_7\n\nLANGUAGE: elixir\nCODE:\n```\ndef render(assigns) do\n  sum = assigns.x + assigns.y\n  title = assigns.title\n\n  ~H\"\"\"\n  <h1>{title}</h1>\n\n  {sum}\n  \"\"\"\nend\n```\n\n----------------------------------------\n\nTITLE: Running Specific Phoenix LiveView End-to-End Tests in Headed Mode\nDESCRIPTION: Command for running a specific test file and line number in headed mode with the Chromium browser. This approach is useful for visually observing the test execution.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/test/e2e/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run e2e:test -- tests/streams.spec.js:9 --project chromium --headed\n```\n\n----------------------------------------\n\nTITLE: Running All JavaScript Tests in Phoenix LiveView\nDESCRIPTION: Commands to setup and run the complete JavaScript test suite.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/README.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ npm run setup\n$ npm run test\n```\n\n----------------------------------------\n\nTITLE: Debugging Phoenix LiveView End-to-End Tests\nDESCRIPTION: Command for debugging a specific test with Playwright's debug mode. This automatically runs the test in headed mode and allows stepping through the test execution.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/test/e2e/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run e2e:test -- tests/streams.spec.js:9 --project chromium --debug\n```\n\n----------------------------------------\n\nTITLE: Checking Test Coverage in Phoenix LiveView\nDESCRIPTION: Commands to generate and view test coverage reports.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/README.md#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ npm run cover\n$ npm run cover:report\n```\n\n----------------------------------------\n\nTITLE: Rendering Live Component in Phoenix LiveView (HEEX)\nDESCRIPTION: Demonstrates how to render a live component using the live_component/1 function in a HEEX template. The example shows rendering a UserComponent with user data.\nSOURCE: https://github.com/phoenixframework/phoenix_live_view/blob/main/guides/introduction/welcome.md#2025-04-16_snippet_6\n\nLANGUAGE: heex\nCODE:\n```\n<.live_component module={UserComponent} id={user.id} user={user} />\n```"
  }
]