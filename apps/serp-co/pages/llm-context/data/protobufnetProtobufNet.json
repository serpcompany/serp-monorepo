[
  {
    "owner": "protobuf-net",
    "repo": "protobuf-net",
    "content": "TITLE: Defining Proto Contracts in C#\nDESCRIPTION: Demonstrates how to decorate C# classes with ProtoContract and ProtoMember attributes to enable protocol buffer serialization. Shows the basic structure for Person and Address classes with numbered member identifiers.\nSOURCE: https://github.com/protobuf-net/protobuf-net/blob/main/README.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[ProtoContract]\nclass Person {\n    [ProtoMember(1)]\n    public int Id {get;set;}\n    [ProtoMember(2)]\n    public string Name {get;set;}\n    [ProtoMember(3)]\n    public Address Address {get;set;}\n}\n[ProtoContract]\nclass Address {\n    [ProtoMember(1)]\n    public string Line1 {get;set;}\n    [ProtoMember(2)]\n    public string Line2 {get;set;}\n}\n```\n\n----------------------------------------\n\nTITLE: Serializing Objects with protobuf-net\nDESCRIPTION: Shows how to serialize a Person object to a binary file using the Serializer.Serialize method. Creates a sample person object with nested address data and writes it to 'person.bin'.\nSOURCE: https://github.com/protobuf-net/protobuf-net/blob/main/README.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar person = new Person {\n    Id = 12345, Name = \"Fred\",\n    Address = new Address {\n        Line1 = \"Flat 1\",\n        Line2 = \"The Meadows\"\n    }\n};\nusing (var file = File.Create(\"person.bin\")) {\n    Serializer.Serialize(file, person);\n}\n```\n\n----------------------------------------\n\nTITLE: Deserializing Objects with protobuf-net\nDESCRIPTION: Demonstrates how to deserialize a Person object from a binary file using the Serializer.Deserialize method. Reads the previously serialized data from 'person.bin'.\nSOURCE: https://github.com/protobuf-net/protobuf-net/blob/main/README.md#2025-04-16_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nPerson newPerson;\nusing (var file = File.OpenRead(\"person.bin\")) {\n    newPerson = Serializer.Deserialize<Person>(file);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Different Null Handling Approaches in C# with protobuf-net\nDESCRIPTION: This C# example demonstrates how to use protobuf-net attributes to handle regular, optional, and wrapped nullable int fields, corresponding to different protobuf encoding strategies.\nSOURCE: https://github.com/protobuf-net/protobuf-net/blob/main/docs/nullwrappers.md#2025-04-16_snippet_3\n\nLANGUAGE: c#\nCODE:\n```\n[ProtoContract]\nclass SomeMessage\n{\n    // think: int32 x = 3;\n    [ProtoMember(3)]\n    public int X {get;set;}\n\n    // think: optional int32 y = 4;\n    [ProtoMember(4)]\n    public int? Y {get;set;}\n\n    // think: .google.protobuf.Int32Value z = 5;\n    [ProtoMember(5), NullWrappedValue]\n    public int? Z {get;set;}\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Nullable Collections and Dictionaries in C# with protobuf-net\nDESCRIPTION: This C# snippet shows how to use the NullWrappedValue attribute to handle nullable values in collections and dictionaries, including both primitive and complex types.\nSOURCE: https://github.com/protobuf-net/protobuf-net/blob/main/docs/nullwrappers.md#2025-04-16_snippet_4\n\nLANGUAGE: c#\nCODE:\n```\n[ProtoContract]\nclass SomeMessage\n{\n    // *similar* to (but with field-presence)\n    // repeated .google.protobuf.Int32Value values = 6;\n    [ProtoMember(6), NullWrappedValue]\n    public List<int?> Ids {get;} = new();\n\n    // likewise, but using field-presence in an artifical\n    // message type that has: SomeOtherMessage value = 1;\n    [ProtoMember(7), NullWrappedValue]\n    public List<SomeOtherMessage> Items {get;} = new();\n\n    // as with Items, but applied to the value portion of the\n    // key/value pairs\n    [ProtoMember(8), NullWrappedValue]\n    public Dictionary<int, SomeOtherMessage> KeyedItems {get;} = new();\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Proto Schema Files with FileDescriptorSet\nDESCRIPTION: C# code demonstrating how to load and parse a .proto file using the FileDescriptorSet class from protobuf-net.Reflection. It shows how to add import paths, process the schema, and handle validation errors.\nSOURCE: https://github.com/protobuf-net/protobuf-net/blob/main/docs/schemas.md#2025-04-16_snippet_2\n\nLANGUAGE: c#\nCODE:\n```\nFileDescriptorSet schemaSet = new();\nschemaSet.AddImportPath(@\"C:\\Work\\protobuf-net.Grpc\\examples\\grpc\\Shared\");\nschemaSet.Add(\"TimeService.proto\");\nschemaSet.Process();\nvar errors = schemaSet.GetErrors();\nforeach (var error in errors)\n{\n    Console.WriteLine($\"{(error.IsWarning ? \"warning\" : \"error\")} {error.ErrorNumber}: {error.File}#{error.LineNumber}: {error.Message}\");\n}\n```\n\n----------------------------------------\n\nTITLE: Inspecting Parsed Service Definitions\nDESCRIPTION: C# code that iterates through the parsed schema files to extract service and method information. It shows how to access package names, service names, and method details including streaming characteristics.\nSOURCE: https://github.com/protobuf-net/protobuf-net/blob/main/docs/schemas.md#2025-04-16_snippet_3\n\nLANGUAGE: c#\nCODE:\n```\nforeach (var file in schemaSet.Files)\n{\n    Console.WriteLine($\"{file.Name}: {file.Services.Count} services\");\n    // only inspect services for files that were added explicitly\n    // (rather than implicitly via imports)\n    if (file.IncludeInOutput)\n    {\n        Console.WriteLine($\"package: '{file.Package}'\");\n        foreach (var service in file.Services)\n        {\n            Console.WriteLine($\"service: '{service.Name}'; {service.Methods.Count} methods\");\n            foreach (var method in service.Methods)\n            {\n                Console.WriteLine($\"> method: {method.Name}; CS: {method.ClientStreaming}, SS: {method.ServerStreaming}\");\n                Console.WriteLine($\"  ({GetMethodType(method.ClientStreaming, method.ServerStreaming)}; {method.InputType}; {method.OutputType})\");\n            }\n        }\n    }\n\n    static MethodType GetMethodType(bool clientStreaming, bool serverStreaming)\n        => clientStreaming\n            ? serverStreaming ? MethodType.DuplexStreaming : MethodType.ClientStreaming\n            : serverStreaming ? MethodType.ServerStreaming : MethodType.Unary;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Inheritance in protobuf-net\nDESCRIPTION: Shows how to configure inheritance relationships between types using ProtoContract and ProtoInclude attributes. Demonstrates base and derived type declarations.\nSOURCE: https://github.com/protobuf-net/protobuf-net/blob/main/README.md#2025-04-16_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[ProtoContract]\n[ProtoInclude(7, typeof(SomeDerivedType))]\nclass SomeBaseType {...}\n\n[ProtoContract]\nclass SomeDerivedType {...}\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Fields in C# for protobuf-net\nDESCRIPTION: This snippet shows how to define optional primitive and sub-message fields in C# using protobuf-net attributes. These fields will only be serialized if non-null.\nSOURCE: https://github.com/protobuf-net/protobuf-net/blob/main/docs/nullwrappers.md#2025-04-16_snippet_0\n\nLANGUAGE: c#\nCODE:\n```\n[ProtoMember(5)]\npublic int? AccountId {get;set;} // optional primitive\n\n[ProtoMember(7)]\npublic Metadata Metadata {get;set} // optional sub-message\n```\n\n----------------------------------------\n\nTITLE: Handling Null Collections in C# with protobuf-net\nDESCRIPTION: This C# snippet shows how to use the NullWrappedCollection attribute to distinguish between null and empty collections in protobuf-net serialization.\nSOURCE: https://github.com/protobuf-net/protobuf-net/blob/main/docs/nullwrappers.md#2025-04-16_snippet_6\n\nLANGUAGE: c#\nCODE:\n```\n[ProtoContract]\nclass SomeMessage\n{\n    [ProtoMember(7), NullWrappedCollection]\n    public List<SomeOtherMessage> Items {get;} = new();\n}\n```\n\n----------------------------------------\n\nTITLE: Using SupportNull Compatible Collection in C# with protobuf-net\nDESCRIPTION: This C# example demonstrates how to use the NullWrappedValue attribute with AsGroup=true to achieve SupportNull compatibility for collections in protobuf-net.\nSOURCE: https://github.com/protobuf-net/protobuf-net/blob/main/docs/nullwrappers.md#2025-04-16_snippet_5\n\nLANGUAGE: c#\nCODE:\n```\n[ProtoContract]\nclass SomeMessage\n{\n    [ProtoMember(7), NullWrappedValue(AsGroup = true)]\n    public List<SomeOtherMessage> Items {get;} = new();\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Fields in Proto3 Syntax\nDESCRIPTION: This proto3 example demonstrates the difference between a regular int32 field and an optional int32 field, highlighting the concept of field presence.\nSOURCE: https://github.com/protobuf-net/protobuf-net/blob/main/docs/nullwrappers.md#2025-04-16_snippet_1\n\nLANGUAGE: proto\nCODE:\n```\nsyntax = \"proto3\";\nmessage SomeMessage\n{\n    // implicit zero default; always conceptually has a value; only\n    // written to the payload if the value is non-zero\n    int32 x = 3;\n\n    // optional === \"field presence\"; tracks whether the value is\n    // implicitly zero vs explicitly specified; only written to\n    // the payload if explicitly specified, even as zero\n    optional y = 4;\n}\n```\n\n----------------------------------------\n\nTITLE: Constructing gRPC HTTP Routes from Schema\nDESCRIPTION: A C# utility function that constructs the HTTP route for a gRPC service method based on the package name, service name, and method name extracted from the schema definition.\nSOURCE: https://github.com/protobuf-net/protobuf-net/blob/main/docs/schemas.md#2025-04-16_snippet_4\n\nLANGUAGE: c#\nCODE:\n```\nstatic string GetUri(string package, string service, string method)\n{\n    if (string.IsNullOrWhiteSpace(package))\n    {\n        return \"/\" + service.TrimStart('.') + \"/\" + method;\n    }\n    return \"/\" + package + \".\" + service.TrimStart('.') + \"/\" + method;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Wrappers in Proto3 Syntax\nDESCRIPTION: This proto3 example shows how to use wrappers.proto to handle nullable values, specifically using Int32Value for a nullable int32 field.\nSOURCE: https://github.com/protobuf-net/protobuf-net/blob/main/docs/nullwrappers.md#2025-04-16_snippet_2\n\nLANGUAGE: proto\nCODE:\n```\nsyntax = \"proto3\";\nimport \"google/protobuf/wrappers.proto\";\nmessage SomeMessage\n{\n    // if missing, nothing is written to the payload; if specified, a message-wrapper is created,\n    // with, internally, a zero-defaulted value at field 1, i.e. \"int32 value = 1;\"; if the value\n    // is zero, then as before, the field is not explicitly written to the payload\n    .google.protobuf.Int32Value z = 5;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing protobuf-net.BuildTools via PackageReference in XML\nDESCRIPTION: XML snippet showing how to add the protobuf-net.BuildTools package to a project file. It includes the correct Package Reference with appropriate assets configuration.\nSOURCE: https://github.com/protobuf-net/protobuf-net/blob/main/docs/build_tools.md#2025-04-16_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"protobuf-net.BuildTools\" Version=\"3.0.81\" PrivateAssets=\"all\"\n    IncludeAssets=\"runtime;build;native;contentfiles;analyzers;buildtransitive\" />\n```\n\n----------------------------------------\n\nTITLE: Installing protobuf-net.BuildTools.Legacy for .NET 3.1 SDK in XML\nDESCRIPTION: XML snippet showing how to add the legacy version of protobuf-net.BuildTools for .NET 3.1 SDK, which doesn't include generator support.\nSOURCE: https://github.com/protobuf-net/protobuf-net/blob/main/docs/build_tools.md#2025-04-16_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"protobuf-net.BuildTools.Legacy\" Version=\"3.0.81\" PrivateAssets=\"all\"\n    IncludeAssets=\"runtime;build;native;contentfiles;analyzers;buildtransitive\" />\n```\n\n----------------------------------------\n\nTITLE: Mixed Compatibility Levels Example in C#\nDESCRIPTION: Shows how to configure different compatibility levels at module, class, and property levels to handle evolving systems while maintaining backward compatibility.\nSOURCE: https://github.com/protobuf-net/protobuf-net/blob/main/docs/compatibilitylevel.md#2025-04-16_snippet_1\n\nLANGUAGE: c#\nCODE:\n```\n[module: CompatibilityLevel(CompatibilityLevel.Level300)] // all new types should use the new conventions\n\n[ProtoContract, CompatibilityLevel(CompatibilityLevel.Level240)]\npublic class SomeOldType // except for this pre-existing type, that should use some older conventions\n{\n    // not shown: ... some existing fields that will use Level240\n\n    [ProtoMember(42), CompatibilityLevel(CompatibilityLevel.Level300)]\n    public DateTime DateOfBirth {get;set;} // added later, we can use newer conventions here\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Proto File to Project\nDESCRIPTION: XML configuration to include a .proto file as an additional file in the project build process.\nSOURCE: https://github.com/protobuf-net/protobuf-net/blob/main/docs/contract_first.md#2025-04-16_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<AdditionalFiles Include=\"your.proto\" />\n```\n\n----------------------------------------\n\nTITLE: Adding Protobuf-net BuildTools Package Reference\nDESCRIPTION: XML configuration to add the protobuf-net.BuildTools package to the project with appropriate assets and version.\nSOURCE: https://github.com/protobuf-net/protobuf-net/blob/main/docs/contract_first.md#2025-04-16_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"protobuf-net.BuildTools\" Version=\"3.0.86\" PrivateAssets=\"all\" IncludeAssets=\"runtime;build;native;contentfiles;analyzers;buildtransitive\" />\n```\n\n----------------------------------------\n\nTITLE: Building protobuf-net with dotnet CLI\nDESCRIPTION: Commands to build the protobuf-net library using dotnet CLI. This approach does not include support for net20/net35 targets.\nSOURCE: https://github.com/protobuf-net/protobuf-net/blob/main/src/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet restore\ndotnet build\n```\n\n----------------------------------------\n\nTITLE: Defining a TimeService in Protocol Buffers\nDESCRIPTION: A sample .proto file defining a TimeService with a streaming method that returns timestamp results. The schema includes package definitions, imports for Google's well-known types, and namespace options.\nSOURCE: https://github.com/protobuf-net/protobuf-net/blob/main/docs/schemas.md#2025-04-16_snippet_0\n\nLANGUAGE: proto\nCODE:\n```\nsyntax = \"proto3\";\npackage MegaCorp;\nimport \"google/protobuf/empty.proto\";\nimport \"google/protobuf/timestamp.proto\";\noption csharp_namespace = \"MegaCorp\";\n\nmessage TimeResult {\n\t.google.protobuf.Timestamp Time = 1;\n}\n\nservice TimeService {\n\trpc Subscribe(.google.protobuf.Empty) returns (stream TimeResult);\n}\n```\n\n----------------------------------------\n\nTITLE: Building protobuf-net with dotnet CLI in Release mode\nDESCRIPTION: Commands to build the protobuf-net library in Release configuration using dotnet CLI, without net20/net35 target support.\nSOURCE: https://github.com/protobuf-net/protobuf-net/blob/main/src/readme.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndotnet restore\ndotnet build -c Release\n```\n\n----------------------------------------\n\nTITLE: Installing protobuf-net via NuGet Package Manager\nDESCRIPTION: Command for installing the protobuf-net library directly from NuGet using the Package Manager Console in Visual Studio.\nSOURCE: https://github.com/protobuf-net/protobuf-net/blob/main/src/readme.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ninstall-package protobuf-net\n```\n\n----------------------------------------\n\nTITLE: Generated C# Code for gRPC Method Definition\nDESCRIPTION: The C# code generated by protoc from the TimeService proto definition, showing how service names and methods are registered for gRPC including route information.\nSOURCE: https://github.com/protobuf-net/protobuf-net/blob/main/docs/schemas.md#2025-04-16_snippet_1\n\nLANGUAGE: c#\nCODE:\n```\nstatic readonly string __ServiceName = \"MegaCorp.TimeService\";\n...\nstatic readonly grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::MegaCorp.TimeResult> __Method_Subscribe = new grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::MegaCorp.TimeResult>(\n        grpc::MethodType.ServerStreaming,\n        __ServiceName,\n        \"Subscribe\",\n        __Marshaller_google_protobuf_Empty,\n        __Marshaller_MegaCorp_TimeResult);\n```\n\n----------------------------------------\n\nTITLE: Setting Module-Level Compatibility in C#\nDESCRIPTION: Demonstrates how to set the compatibility level for an entire module using an assembly-level attribute.\nSOURCE: https://github.com/protobuf-net/protobuf-net/blob/main/docs/compatibilitylevel.md#2025-04-16_snippet_0\n\nLANGUAGE: c#\nCODE:\n```\n[module: CompatibilityLevel(CompatibilityLevel.LevelNNN)]\n```\n\n----------------------------------------\n\nTITLE: Implementing NodaTime Instant Serialization with Protobuf-net\nDESCRIPTION: Example showing how to annotate a class with ProtoContract attributes to enable serialization of NodaTime.Instant type. This demonstrates the basic pattern for serializing any supported NodaTime type using protobuf-net.\nSOURCE: https://github.com/protobuf-net/protobuf-net/blob/main/docs/nodatime.md#2025-04-16_snippet_0\n\nLANGUAGE: c#\nCODE:\n```\n[ProtoContract]\npublic class MyType {\n    // ...\n\n    [ProtoMember(42)]\n    public Instant ActivationTime {get;set;}\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Protocol Buffer Client Usage\nDESCRIPTION: The Program.cs file contains a demo of how to use the ProtoWebClient to communicate with the server using protocol buffers.\nSOURCE: https://github.com/protobuf-net/protobuf-net/blob/main/assorted/BasicHttp/About this.txt#2025-04-16_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n// Program.cs contents would go here\n```\n\n----------------------------------------\n\nTITLE: Example of Invalid protobuf-net Contract with Duplicate Field Numbers in C#\nDESCRIPTION: C# code sample demonstrating an error that the build tools will detect: a ProtoContract class with duplicate field numbers (field number 2 is used twice).\nSOURCE: https://github.com/protobuf-net/protobuf-net/blob/main/docs/build_tools.md#2025-04-16_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[ProtoContract]\npublic class Foo\n{\n    [ProtoMember(1)]\n    public int Id { get; set; }\n    [ProtoMember(2)]\n    public string Name { get; set; }\n    [ProtoMember(2)]\n    public double Value { get; set; }\n    [ProtoMember(4)]\n    public string Description { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Invalid protobuf-net.Grpc Service Method Signature in C#\nDESCRIPTION: C# code sample showing an invalid gRPC method signature that the build tools will flag as an error: a method with multiple parameters, which is not supported by protobuf-net.Grpc.\nSOURCE: https://github.com/protobuf-net/protobuf-net/blob/main/docs/build_tools.md#2025-04-16_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[Service]\npublic interface IMyService\n{\n    ValueTask<Foo> GetAsync(int x, int y);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Protogen CLI Tool with Basic Options\nDESCRIPTION: Shows the command-line syntax and available options for the protogen tool. Options include specifying input/output files, templates, custom properties, and other configuration flags.\nSOURCE: https://github.com/protobuf-net/protobuf-net/blob/main/assorted/ProtoGen/Properties/Usage.txt#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nusage: protogen -i:{infile2} [-i:{infile2}] [-o:{outfile}] [-t:{template}] [-p:{prop}[=value]] [-q] [-d]\n\n-i: Input file(s); proto definitions, either as text or pre-compiled binary (via protoc)\n-o: Output file; if none specified, writes to stdout\n-t: Template to use; defaults to csharp\n-p: Property for the template; value defaults to true; use -p:help to view available options\n-q: Quiet; suppresses header\n-d: Include all dependencies of the input files in the set so the set is self-contained.\n-ns: Default namespace; used in code generation when no package is specified\n```\n\n----------------------------------------\n\nTITLE: Protogen Command Examples\nDESCRIPTION: Demonstrates common usage patterns for the protogen tool, including basic code generation, changing output formats, and setting various properties to customize the generated output.\nSOURCE: https://github.com/protobuf-net/protobuf-net/blob/main/assorted/ProtoGen/Properties/Usage.txt#2025-04-16_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nExamples:\n\nprotogen -i:input.proto -o:output.cs\nprotogen -i:input.proto -o:output.xml -t:xml\nprotogen -i:input.proto -o:output.cs -p:datacontract -q\nprotogen -i:input.proto -o:output.cs -p:observable=true\n```\n\n----------------------------------------\n\nTITLE: Defining Protocol Buffer Schema in Proto Format\nDESCRIPTION: The MySchema.proto file defines the data structure for communication between client and server using Protocol Buffers syntax.\nSOURCE: https://github.com/protobuf-net/protobuf-net/blob/main/assorted/BasicHttp/About this.txt#2025-04-16_snippet_0\n\nLANGUAGE: Proto\nCODE:\n```\n// MySchema.proto contents would go here\n```\n\n----------------------------------------\n\nTITLE: Generating C# DTO Types from Proto Schema\nDESCRIPTION: The MySchema.cs file contains C# classes generated from the .proto file, representing the data transfer objects used in the application.\nSOURCE: https://github.com/protobuf-net/protobuf-net/blob/main/assorted/BasicHttp/About this.txt#2025-04-16_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n// MySchema.cs contents would go here\n```\n\n----------------------------------------\n\nTITLE: Implementing HTTP Client for Protocol Buffer Communication\nDESCRIPTION: The ProtoWebClient.cs file contains utility methods for making HTTP requests with protocol buffer payloads using WebClient.\nSOURCE: https://github.com/protobuf-net/protobuf-net/blob/main/assorted/BasicHttp/About this.txt#2025-04-16_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n// ProtoWebClient.cs contents would go here\n```\n\n----------------------------------------\n\nTITLE: Creating Base HTTP Handler for Protocol Buffer Requests\nDESCRIPTION: The ProtoHandler.cs file defines a base HTTP handler class for processing incoming protocol buffer requests on the server side.\nSOURCE: https://github.com/protobuf-net/protobuf-net/blob/main/assorted/BasicHttp/About this.txt#2025-04-16_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\n// ProtoHandler.cs contents would go here\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Protocol Buffer HTTP Handler\nDESCRIPTION: The MyHandler.ashx.cs file contains the implementation of a specific HTTP handler for processing protocol buffer requests, inheriting from the base ProtoHandler.\nSOURCE: https://github.com/protobuf-net/protobuf-net/blob/main/assorted/BasicHttp/About this.txt#2025-04-16_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\n// MyHandler.ashx.cs contents would go here\n```\n\n----------------------------------------\n\nTITLE: Clearing NuGet Cache for protobuf-net.BuildTools on Windows\nDESCRIPTION: Command path showing how to manually clear the cached NuGet packages for protobuf-net.BuildTools on Windows systems. This is necessary when making changes to the analyzer since cached versions can prevent new changes from being applied properly.\nSOURCE: https://github.com/protobuf-net/protobuf-net/blob/main/src/BuildToolsSmokeTests/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n%userprofile%\\.nuget\\packages\\protobuf-net.buildtools\\\n```\n\n----------------------------------------\n\nTITLE: Framework Directory Structure\nDESCRIPTION: Lists all available framework-specific directories and their corresponding target platforms.\nSOURCE: https://github.com/protobuf-net/protobuf-net/blob/main/What Files Do I Need.txt#2025-04-16_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\ncf20       compact framework 2.0\ncf35       compact framework 3.5\nios          iPad/iPod/iPhone via MonoTouch\nnet11       regular .NET 1.1 (excluded generics)\nnet20        regular .NET 2.0 (excludes WCF hooks)\nnet30        regular .NET 3.0 or above (including 3.5, 4.0, 4.5, ...)\nnetcore45    windows store apps / windows runtime 4.5\nportable     portable class library (phone 7, xna, silverlight)\nsl4          silverlight 4 or above\nwp71         windows phone 7.1\nunity        specific to unity (avoids missing \"interlocked\" methods)\n```\n\n----------------------------------------\n\nTITLE: Markdown Release Notes\nDESCRIPTION: Comprehensive release notes covering multiple versions of protobuf-net, documenting changes, new features, and breaking changes in each version.\nSOURCE: https://github.com/protobuf-net/protobuf-net/blob/main/docs/releasenotes.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Release Notes\n\nPackages are available on NuGet: [protobuf-net](https://www.nuget.org/packages/protobuf-net), or it can be built [from source](https://github.com/protobuf-net/protobuf-net/tree/main/src)\n\n## Roadmap\n\n- gRPC: see [protobuf-net.Grpc](https://github.com/protobuf-net/protobuf-net.Grpc)\n- 2.4.*: critical maintenance only (no feature work planned)\n- 3.0: new custom serializer API (message+scalar); \"pipelines\" support; split core and reflection code-bases into separate libs\n- 3.1: adds model depth validation, which may impact some models; see `TypeModel.MaxDepth`\n- future: `Any` support; custom list API support; support for `[ReadOnly]Memory<T>`, `ReadOnlySequence<T>`, `IMemoryOwner<T>`\n- future: protogen support for emitting pre-coded custom serializers\n- future: build-time tooling from code-first (aka \"generators\")\n```\n\n----------------------------------------\n\nTITLE: Sample Code References\nDESCRIPTION: Code references are mentioned but no explicit code snippets are provided in the changelog. The changes primarily describe API additions, bug fixes, and feature enhancements.\nSOURCE: https://github.com/protobuf-net/protobuf-net/blob/main/docs/releasenotes.md#2025-04-16_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Android R Class Structure for Resource Access in C#\nDESCRIPTION: Example of the generated R class that provides programmatic access to Android resources through integer constants. Each resource type (drawable, layout, strings) has its own nested class with unique resource IDs.\nSOURCE: https://github.com/protobuf-net/protobuf-net/blob/main/assorted/MonoDroid_DevRig/Resources/AboutResources.txt#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class R {\n    public class drawable {\n        public const int icon = 0x123;\n    }\n\n    public class layout {\n        public const int main = 0x456;\n    }\n\n    public class strings {\n        public const int first_string = 0xabc;\n        public const int second_string = 0xbcd;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Monaco Editor via npm\nDESCRIPTION: Command to install the Monaco Editor using npm package manager. This provides bundled versions (dev and minified) along with source maps and type definitions.\nSOURCE: https://github.com/protobuf-net/protobuf-net/blob/main/src/protogen.site.blazor.client/node_modules/monaco-editor/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install monaco-editor\n```\n\n----------------------------------------\n\nTITLE: Cross-Domain Integration of Monaco Editor\nDESCRIPTION: HTML and JavaScript setup for integrating Monaco Editor across domains. It demonstrates how to configure RequireJS and set up a proxy for web worker loading to overcome cross-domain restrictions.\nSOURCE: https://github.com/protobuf-net/protobuf-net/blob/main/src/protogen.site.blazor.client/node_modules/monaco-editor/README.md#2025-04-16_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!--\n\tAssuming the HTML lives on www.mydomain.com and that the editor is hosted on www.mycdn.com\n-->\n<script type=\"text/javascript\" src=\"http://www.mycdn.com/monaco-editor/min/vs/loader.js\"></script>\n<script>\n\trequire.config({ paths: { 'vs': 'http://www.mycdn.com/monaco-editor/min/vs' }});\n\n\t// Before loading vs/editor/editor.main, define a global MonacoEnvironment that overwrites\n\t// the default worker url location (used when creating WebWorkers). The problem here is that\n\t// HTML5 does not allow cross-domain web workers, so we need to proxy the instantion of\n\t// a web worker through a same-domain script\n\twindow.MonacoEnvironment = {\n\t\tgetWorkerUrl: function(workerId, label) {\n\t\t\treturn 'monaco-editor-worker-loader-proxy.js';\n\t\t}\n\t};\n\n\trequire([\"vs/editor/editor.main\"], function () {\n\t\t// ...\n\t});\n</script>\n\n<!--\n\tCreate http://www.mydomain.com/monaco-editor-worker-loader-proxy.js with the following content:\n\t\tself.MonacoEnvironment = {\n\t\t\tbaseUrl: 'http://www.mycdn.com/monaco-editor/min/'\n\t\t};\n\t\timportScripts('www.mycdn.com/monaco-editor/min/vs/base/worker/workerMain.js');\n\tThat's it. You're good to go! :)\n-->\n```\n\n----------------------------------------\n\nTITLE: Using Open Iconic's SVGs in HTML\nDESCRIPTION: Shows how to display an Open Iconic SVG icon as a regular image element with proper accessibility attributes.\nSOURCE: https://github.com/protobuf-net/protobuf-net/blob/main/src/protogen.site.blazor.client/wwwroot/css/open-iconic/README.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<img src=\"/open-iconic/svg/icon-name.svg\" alt=\"icon name\">\n```\n\n----------------------------------------\n\nTITLE: Using Open Iconic's SVG Sprite with HTML and SVG\nDESCRIPTION: Demonstrates how to implement icons from an SVG sprite using the SVG use element with proper class naming for styling.\nSOURCE: https://github.com/protobuf-net/protobuf-net/blob/main/src/protogen.site.blazor.client/wwwroot/css/open-iconic/README.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<svg class=\"icon\">\n  <use xlink:href=\"open-iconic.svg#account-login\" class=\"icon-account-login\"></use>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Styling SVG Icons with CSS\nDESCRIPTION: CSS for setting the dimensions of SVG icons from the Open Iconic set.\nSOURCE: https://github.com/protobuf-net/protobuf-net/blob/main/src/protogen.site.blazor.client/wwwroot/css/open-iconic/README.md#2025-04-16_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.icon {\n  width: 16px;\n  height: 16px;\n}\n```\n\n----------------------------------------\n\nTITLE: Coloring SVG Icons with CSS\nDESCRIPTION: CSS example showing how to set the fill color for a specific SVG icon.\nSOURCE: https://github.com/protobuf-net/protobuf-net/blob/main/src/protogen.site.blazor.client/wwwroot/css/open-iconic/README.md#2025-04-16_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n.icon-account-login {\n  fill: #f00;\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Open Iconic Bootstrap CSS\nDESCRIPTION: HTML for including the Open Iconic Bootstrap stylesheet in your project.\nSOURCE: https://github.com/protobuf-net/protobuf-net/blob/main/src/protogen.site.blazor.client/wwwroot/css/open-iconic/README.md#2025-04-16_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<link href=\"/open-iconic/font/css/open-iconic-bootstrap.css\" rel=\"stylesheet\">\n```\n\n----------------------------------------\n\nTITLE: File Structure for protobuf-net Deployment\nDESCRIPTION: Lists the essential files included in each framework's distribution of protobuf-net, explaining their purposes and deployment requirements.\nSOURCE: https://github.com/protobuf-net/protobuf-net/blob/main/What Files Do I Need.txt#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n- protobuf-net.dll  the library itself\n- protobuf-net.xml  intellisense xml, used by thre IDE when developing\n- protobuf-net.pdb debugging symbols, useful when debugging\n```\n\n----------------------------------------\n\nTITLE: Using Open Iconic with Bootstrap\nDESCRIPTION: HTML markup for displaying an Open Iconic icon using Bootstrap classes.\nSOURCE: https://github.com/protobuf-net/protobuf-net/blob/main/src/protogen.site.blazor.client/wwwroot/css/open-iconic/README.md#2025-04-16_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<span class=\"oi oi-icon-name\" title=\"icon name\" aria-hidden=\"true\"></span>\n```\n\n----------------------------------------\n\nTITLE: Loading Open Iconic Foundation CSS\nDESCRIPTION: HTML for including the Open Iconic Foundation stylesheet in your project.\nSOURCE: https://github.com/protobuf-net/protobuf-net/blob/main/src/protogen.site.blazor.client/wwwroot/css/open-iconic/README.md#2025-04-16_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<link href=\"/open-iconic/font/css/open-iconic-foundation.css\" rel=\"stylesheet\">\n```\n\n----------------------------------------\n\nTITLE: Using Open Iconic with Foundation\nDESCRIPTION: HTML markup for displaying an Open Iconic icon using Foundation classes.\nSOURCE: https://github.com/protobuf-net/protobuf-net/blob/main/src/protogen.site.blazor.client/wwwroot/css/open-iconic/README.md#2025-04-16_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<span class=\"fi-icon-name\" title=\"icon name\" aria-hidden=\"true\"></span>\n```\n\n----------------------------------------\n\nTITLE: Loading Default Open Iconic CSS\nDESCRIPTION: HTML for including the default Open Iconic stylesheet in your project.\nSOURCE: https://github.com/protobuf-net/protobuf-net/blob/main/src/protogen.site.blazor.client/wwwroot/css/open-iconic/README.md#2025-04-16_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<link href=\"/open-iconic/font/css/open-iconic.css\" rel=\"stylesheet\">\n```\n\n----------------------------------------\n\nTITLE: Using Open Iconic as a Standalone Icon Font\nDESCRIPTION: HTML markup for displaying an Open Iconic icon using the data-glyph attribute.\nSOURCE: https://github.com/protobuf-net/protobuf-net/blob/main/src/protogen.site.blazor.client/wwwroot/css/open-iconic/README.md#2025-04-16_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<span class=\"oi\" data-glyph=\"icon-name\" title=\"icon name\" aria-hidden=\"true\"></span>\n```\n\n----------------------------------------\n\nTITLE: BenchmarkDotNet Configuration and Environment Details in INI Format\nDESCRIPTION: Configuration details for the BenchmarkDotNet test environment, showing the benchmark tool version, OS, processor information, and runtime environment targeting .NET Core 4.6.25009.03 with RyuJIT 64-bit.\nSOURCE: https://github.com/protobuf-net/protobuf-net/blob/main/src/TheAwaitingGame/BenchmarkDotNet.Artifacts/results/Benchmarker-report-github.md#2025-04-16_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nBenchmarkDotNet=v0.10.3.111-nightly, OS=Windows 10.0.15063\nProcessor=Intel(R) Core(TM) i7-7700HQ CPU 2.80GHz, ProcessorCount=8\nFrequency=2742188 Hz, Resolution=364.6723 ns, Timer=TSC\ndotnet cli version=1.0.2\n  [Host]     : .NET Core 4.6.25009.03, 64bit RyuJIT\n  Job-RZXVEI : .NET Core 4.6.25009.03, 64bit RyuJIT\n\nForce=False  \n```\n\n----------------------------------------\n\nTITLE: Basic HTML Integration of Monaco Editor\nDESCRIPTION: Minimal HTML page that embeds the Monaco Editor. It creates a container div and uses RequireJS to load and initialize the editor with JavaScript code.\nSOURCE: https://github.com/protobuf-net/protobuf-net/blob/main/src/protogen.site.blazor.client/node_modules/monaco-editor/README.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n<head>\n\t<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n\t<meta http-equiv=\"Content-Type\" content=\"text/html;charset=utf-8\" >\n</head>\n<body>\n\n<div id=\"container\" style=\"width:800px;height:600px;border:1px solid grey\"></div>\n\n<script src=\"monaco-editor/min/vs/loader.js\"></script>\n<script>\n\trequire.config({ paths: { 'vs': 'monaco-editor/min/vs' }});\n\trequire(['vs/editor/editor.main'], function() {\n\t\tvar editor = monaco.editor.create(document.getElementById('container'), {\n\t\t\tvalue: [\n\t\t\t\t'function x() {',\n\t\t\t\t'\\tconsole.log(\"Hello world!\");',\n\t\t\t\t'}'\n\t\t\t].join('\\n'),\n\t\t\tlanguage: 'javascript'\n\t\t});\n\t});\n</script>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Installing protobuf-net via Package Manager\nDESCRIPTION: NuGet package installation command for adding protobuf-net to a .NET project using the Package Manager Console.\nSOURCE: https://github.com/protobuf-net/protobuf-net/blob/main/README.md#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nInstall-Package protobuf-net\n```"
  }
]