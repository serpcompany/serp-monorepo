[
  {
    "owner": "aio-libs",
    "repo": "yarl",
    "content": "TITLE: Manipulating URLs with yarl in Python\nDESCRIPTION: Shows how to manipulate URLs by creating new URL objects through operations like path joining and query parameter addition. Each manipulation produces a new immutable URL object.\nSOURCE: https://github.com/aio-libs/yarl/blob/master/README.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> url = URL('https://www.python.org')\n>>> url / 'foo' / 'bar'\nURL('https://www.python.org/foo/bar')\n>>> url / 'foo' % {'bar': 'baz'}\nURL('https://www.python.org/foo?bar=baz')\n```\n\n----------------------------------------\n\nTITLE: Creating and Inspecting URL Objects in Python using yarl\nDESCRIPTION: Demonstrates how to create URL objects from strings and access various URL components such as scheme, host, path, query, and fragment.\nSOURCE: https://github.com/aio-libs/yarl/blob/master/docs/index.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from yarl import URL\n>>> url = URL('https://www.python.org/~guido?arg=1#frag')\n>>> url\nURL('https://www.python.org/~guido?arg=1#frag')\n\n>>> url.scheme\n'https'\n>>> url.host\n'www.python.org'\n>>> url.path\n'/~guido'\n>>> url.query_string\n'arg=1'\n>>> url.query\n<MultiDictProxy('arg': '1')>\n>>> url.fragment\n'frag'\n```\n\n----------------------------------------\n\nTITLE: Creating and Accessing URL Properties in Python with yarl\nDESCRIPTION: Demonstrates how to create a URL object from a string and access its various properties like scheme, host, path, query, and fragment. The example shows the basic usage of the yarl library.\nSOURCE: https://github.com/aio-libs/yarl/blob/master/README.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from yarl import URL\n>>> url = URL('https://www.python.org/~guido?arg=1#frag')\n>>> url\nURL('https://www.python.org/~guido?arg=1#frag')\n\n>>> url.scheme\n'https'\n>>> url.host\n'www.python.org'\n>>> url.path\n'/~guido'\n>>> url.query_string\n'arg=1'\n>>> url.query\n<MultiDictProxy('arg': '1')>\n>>> url.fragment\n'frag'\n```\n\n----------------------------------------\n\nTITLE: Basic URL Usage in Python\nDESCRIPTION: Demonstrates basic URL creation using the yarl library.\nSOURCE: https://github.com/aio-libs/yarl/blob/master/docs/api.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from yarl import URL\n```\n\n----------------------------------------\n\nTITLE: Handling URL Encoding with yarl in Python\nDESCRIPTION: Demonstrates automatic URL encoding and the difference between regular (decoded) and raw (encoded) property access. Shows how yarl handles non-ASCII characters.\nSOURCE: https://github.com/aio-libs/yarl/blob/master/README.rst#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> url = URL('https://www.python.org/шлях')\n>>> url\nURL('https://www.python.org/%D1%88%D0%BB%D1%8F%D1%85')\n\n>>> url.path\n'/шлях'\n\n>>> url.raw_path\n'/%D1%88%D0%BB%D1%8F%D1%85'\n```\n\n----------------------------------------\n\nTITLE: URL Construction with Non-ASCII Characters\nDESCRIPTION: Shows how URLs containing non-ASCII characters are handled and encoded automatically.\nSOURCE: https://github.com/aio-libs/yarl/blob/master/docs/api.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> URL('http://example.com/path/to/?arg1=a&arg2=b#fragment')\nURL('http://example.com/path/to/?arg1=a&arg2=b#fragment')\n\n>>> str(URL('http://εμπορικόσήμα.eu/шлях/這裡'))\n'http://xn--jxagkqfkduily1i.eu/%D1%88%D0%BB%D1%8F%D1%85/%E9%80%99%E8%A3%A1'\n```\n\n----------------------------------------\n\nTITLE: Working with URL Path Components in Python\nDESCRIPTION: Examples showing how to access different path-related properties of a URL such as parts, raw_parts, name, raw_name, suffix, raw_suffix, suffixes, and raw_suffixes. These properties provide access to decoded and encoded path segments.\nSOURCE: https://github.com/aio-libs/yarl/blob/master/docs/api.rst#2025-04-20_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> URL('http://example.com/path/to').parts\n('/', 'path', 'to')\n>>> URL('http://example.com/шлях/сюди').parts\n('/', 'шлях', 'сюди')\n>>> URL('http://example.com').parts\n('/',)\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> URL('http://example.com/шлях/сюди').raw_parts\n('/', '%D1%88%D0%BB%D1%8F%D1%85', '%D1%81%D1%8E%D0%B4%D0%B8')\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> URL('http://example.com/path/to').name\n'to'\n>>> URL('http://example.com/шлях/сюди').name\n'сюди'\n>>> URL('http://example.com/path/').name\n''\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> URL('http://example.com/шлях/сюди').raw_name\n'%D1%81%D1%8E%D0%B4%D0%B8'\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> URL('http://example.com/path/to.txt').suffix\n'.txt'\n>>> URL('http://example.com/шлях.сюди').suffix\n'.сюди'\n>>> URL('http://example.com/path').suffix\n''\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> URL('http://example.com/шлях.сюди').raw_suffix\n'.%D1%81%D1%8E%D0%B4%D0%B8'\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> URL('http://example.com/path/to.tar.gz').suffixes\n('.tar', '.gz')\n>>> URL('http://example.com/шлях.тут.ось').suffixes\n('.тут', '.ось')\n>>> URL('http://example.com/path').suffixes\n()\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> URL('http://example.com/шлях.тут.ось').raw_suffixes\n('.%D1%82%D1%83%D1%82', '.%D0%BE%D1%81%D1%8C')\n```\n\n----------------------------------------\n\nTITLE: Modifying URL Query Parameters in Python\nDESCRIPTION: Examples showing how to replace query parameters in a URL using the with_query() method. Demonstrates various ways to specify query parameters including dictionaries, strings, key-value pairs, and parameters with multiple values.\nSOURCE: https://github.com/aio-libs/yarl/blob/master/docs/api.rst#2025-04-20_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n>>> URL('http://example.com/path?a=b').with_query('c=d')\nURL('http://example.com/path?c=d')\n>>> URL('http://example.com/path?a=b').with_query({'c': 'd'})\nURL('http://example.com/path?c=d')\n>>> URL('http://example.com/path?a=b').with_query({'c': [1, 2]})\nURL('http://example.com/path?c=1&c=2')\n>>> URL('http://example.com/path?a=b').with_query({'кл': 'зн'})\nURL('http://example.com/path?%D0%BA%D0%BB=%D0%B7%D0%BD')\n>>> URL('http://example.com/path?a=b').with_query(None)\nURL('http://example.com/path')\n>>> URL('http://example.com/path?a=b&b=1').with_query(b='2')\nURL('http://example.com/path?b=2')\n>>> URL('http://example.com/path?a=b&b=1').with_query([('b', '2')])\nURL('http://example.com/path?b=2')\n```\n\n----------------------------------------\n\nTITLE: Building New URLs with URL.build in Python\nDESCRIPTION: Examples showing how to create new URL instances using the build() class method. Demonstrates building URLs with different components such as scheme, host, query parameters, and query string.\nSOURCE: https://github.com/aio-libs/yarl/blob/master/docs/api.rst#2025-04-20_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n>>> URL.build(scheme=\"http\", host=\"example.com\")\nURL('http://example.com')\n\n>>> URL.build(scheme=\"http\", host=\"example.com\", query={\"a\": \"b\"})\nURL('http://example.com/?a=b')\n\n>>> URL.build(scheme=\"http\", host=\"example.com\", query_string=\"a=b\")\nURL('http://example.com/?a=b')\n\n>>> URL.build()\nURL('')\n```\n\n----------------------------------------\n\nTITLE: Joining path components with division operator in YARL (Python)\nDESCRIPTION: Examples of using the division operator (/) with URL objects to create a new URL with an appended path component. The operator handles encoding of non-ASCII characters and cleans up query and fragment parts.\nSOURCE: https://github.com/aio-libs/yarl/blob/master/docs/api.rst#2025-04-20_snippet_24\n\nLANGUAGE: python\nCODE:\n```\n>>> url = URL('http://example.com/path?arg#frag') / 'to/subpath'\n>>> url\nURL('http://example.com/path/to/subpath')\n>>> url.parts\n('/', 'path', 'to', 'subpath')\n>>> url = URL('http://example.com/path?arg#frag') / 'сюди'\n>>> url\nURL('http://example.com/path/%D1%81%D1%8E%D0%B4%D0%B8')\n```\n\n----------------------------------------\n\nTITLE: Manipulating URL Objects with Path and Query Operations in Python\nDESCRIPTION: Shows how to modify URL objects using the parent property and the / and % operators to build new paths and add query parameters.\nSOURCE: https://github.com/aio-libs/yarl/blob/master/docs/index.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> url.parent / 'downloads/source'\nURL('https://www.python.org/downloads/source')\n\n>>> url = URL('https://www.python.org')\n>>> url / 'foo' / 'bar'\nURL('https://www.python.org/foo/bar')\n>>> url / 'foo' % {'bar': 'baz'}\nURL('https://www.python.org/foo?bar=baz')\n```\n\n----------------------------------------\n\nTITLE: Joining multiple path components in YARL (Python)\nDESCRIPTION: Examples of using URL.joinpath() method to append multiple path elements to a URL's path. The method supports an 'encoded' parameter to control whether path elements should be auto-encoded.\nSOURCE: https://github.com/aio-libs/yarl/blob/master/docs/api.rst#2025-04-20_snippet_25\n\nLANGUAGE: python\nCODE:\n```\n>>> url = URL('http://example.com/path?arg#frag').joinpath('to', 'subpath')\n>>> url\nURL('http://example.com/path/to/subpath')\n>>> url.parts\n('/', 'path', 'to', 'subpath')\n>>> url = URL('http://example.com/path?arg#frag').joinpath('сюди')\n>>> url\nURL('http://example.com/path/%D1%81%D1%8E%D0%B4%D0%B8')\n>>> url = URL('http://example.com/path').joinpath('%D1%81%D1%8E%D0%B4%D0%B8', encoded=True)\n>>> url\nURL('http://example.com/path/%D1%81%D1%8E%D0%B4%D0%B8')\n```\n\n----------------------------------------\n\nTITLE: Modifying URL Path in Python\nDESCRIPTION: Example showing how to replace the path component of a URL using the with_path() method, while preserving the host and scheme.\nSOURCE: https://github.com/aio-libs/yarl/blob/master/docs/api.rst#2025-04-20_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n>>> URL('http://example.com/').with_path('/path/to')\nURL('http://example.com/path/to')\n```\n\n----------------------------------------\n\nTITLE: Joining base and relative URLs in YARL (Python)\nDESCRIPTION: Example of using URL.join method to combine a base URL with a relative URL, similar to how browsers resolve relative URLs. The method handles both relative and absolute URLs.\nSOURCE: https://github.com/aio-libs/yarl/blob/master/docs/api.rst#2025-04-20_snippet_27\n\nLANGUAGE: python\nCODE:\n```\n>>> base = URL('http://example.com/path/index.html')\n>>> base.join(URL('page.html'))\nURL('http://example.com/path/page.html')\n```\n\n----------------------------------------\n\nTITLE: Using human_repr() Method for Readable URLs in yarl\nDESCRIPTION: Shows how to get a human-readable representation of a URL using the human_repr() method, which displays non-ASCII characters in their original form rather than percent-encoded.\nSOURCE: https://github.com/aio-libs/yarl/blob/master/README.rst#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> url.human_repr()\n'https://www.python.org/шлях'\n```\n\n----------------------------------------\n\nTITLE: URL Human Readable Representation\nDESCRIPTION: Demonstrates how to get a human-readable representation of a URL with non-ASCII characters.\nSOURCE: https://github.com/aio-libs/yarl/blob/master/docs/api.rst#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> url = URL('http://εμπορικόσήμα.eu/шлях/這裡')\n>>> str(url)\n'http://xn--jxagkqfkduily1i.eu/%D1%88%D0%BB%D1%8F%D1%85/%E9%80%99%E8%A3%A1'\n>>> url.human_repr()\n'http://εμπορικόσήμα.eu/шлях/這裡'\n```\n\n----------------------------------------\n\nTITLE: Working with URL Query Parameters in Python\nDESCRIPTION: Examples demonstrating how to access query parameters of a URL using the query property. The property returns a MultiDictProxy object containing the parsed query parameters in their decoded form.\nSOURCE: https://github.com/aio-libs/yarl/blob/master/docs/api.rst#2025-04-20_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> URL('http://example.com/path?a1=a&a2=b').query\n<MultiDictProxy('a1': 'a', 'a2': 'b')>\n>>> URL('http://example.com/path?ключ=знач').query\n<MultiDictProxy('ключ': 'знач')>\n>>> URL('http://example.com/path').query\n<MultiDictProxy()>\n```\n\n----------------------------------------\n\nTITLE: Human-readable URL representation in YARL (Python)\nDESCRIPTION: Example of using URL.human_repr() method to get a decoded human-readable string representation of a URL, which displays international domain names and non-ASCII path components in their original form.\nSOURCE: https://github.com/aio-libs/yarl/blob/master/docs/api.rst#2025-04-20_snippet_28\n\nLANGUAGE: python\nCODE:\n```\n>>> url = URL('http://εμπορικόσήμα.eu/這裡')\n>>> str(url)\n'http://xn--jxagkqfkduily1i.eu/%E9%80%99%E8%A3%A1'\n>>> url.human_repr()\n'http://εμπορικόσήμα.eu/這裡'\n```\n\n----------------------------------------\n\nTITLE: Changing filename in YARL URLs (Python)\nDESCRIPTION: Examples of using URL.with_name method to replace the last part of the path (filename) in a URL. The method automatically encodes the new name if needed and by default cleans up query and fragment parts.\nSOURCE: https://github.com/aio-libs/yarl/blob/master/docs/api.rst#2025-04-20_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n>>> URL('http://example.com/path/to?arg#frag').with_name('new')\nURL('http://example.com/path/new')\n>>> URL('http://example.com/path/to').with_name(\"ім'я\")\nURL('http://example.com/path/%D1%96%D0%BC%27%D1%8F')\n```\n\n----------------------------------------\n\nTITLE: Updating query parameters in YARL URLs (Python)\nDESCRIPTION: Examples of using the URL.update_query method to update existing query parameters in a URL. This method replaces the values of existing keys while preserving other query parameters.\nSOURCE: https://github.com/aio-libs/yarl/blob/master/docs/api.rst#2025-04-20_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n>>> URL('http://example.com/path?a=b').update_query('c=d')\nURL('http://example.com/path?a=b&c=d')\n>>> URL('http://example.com/path?a=b').update_query({'c': 'd'})\nURL('http://example.com/path?a=b&c=d')\n>>> URL('http://example.com/path?a=b').update_query({'c': [1, 2]})\nURL('http://example.com/path?a=b&c=1&c=2')\n>>> URL('http://example.com/path?a=b').update_query({'кл': 'зн'})\nURL('http://example.com/path?a=b&%D0%BA%D0%BB=%D0%B7%D0%BD')\n>>> URL('http://example.com/path?a=b&b=1').update_query(b='2')\nURL('http://example.com/path?a=b&b=2')\n>>> URL('http://example.com/path?a=b&b=1').update_query([('b', '2')])\nURL('http://example.com/path?a=b&b=2')\n>>> URL('http://example.com/path?a=b&c=e&c=f').update_query(c='d')\nURL('http://example.com/path?a=b&c=d')\n>>> URL('http://example.com/path?a=b').update_query('c=d&c=f')\nURL('http://example.com/path?a=b&c=d&c=f')\n>>> URL('http://example.com/path?a=b') % {'c': 'd'}\nURL('http://example.com/path?a=b&c=d')\n```\n\n----------------------------------------\n\nTITLE: Changing file extension in YARL URLs (Python)\nDESCRIPTION: Examples of using URL.with_suffix method to replace the file extension of the last path component in a URL. The method handles encoding of non-ASCII characters in the suffix.\nSOURCE: https://github.com/aio-libs/yarl/blob/master/docs/api.rst#2025-04-20_snippet_20\n\nLANGUAGE: python\nCODE:\n```\n>>> URL('http://example.com/path/to?arg#frag').with_suffix('.doc')\nURL('http://example.com/path/to.doc')\n>>> URL('http://example.com/path/to').with_suffix('.cуфікс')\nURL('http://example.com/path/to.c%D1%83%D1%84%D1%96%D0%BA%D1%81')\n```\n\n----------------------------------------\n\nTITLE: Accessing parent URL in YARL (Python)\nDESCRIPTION: Example of using the URL.parent property to get a new URL with the last path component removed and the query and fragment parts cleaned up.\nSOURCE: https://github.com/aio-libs/yarl/blob/master/docs/api.rst#2025-04-20_snippet_21\n\nLANGUAGE: python\nCODE:\n```\n>>> URL('http://example.com/path/to?arg#frag').parent\nURL('http://example.com/path')\n```\n\n----------------------------------------\n\nTITLE: Extending query parameters in YARL URLs (Python)\nDESCRIPTION: Examples of using the URL.extend_query method to add new query parameters to an existing URL without replacing existing ones. This allows for appending additional parameters with the same key.\nSOURCE: https://github.com/aio-libs/yarl/blob/master/docs/api.rst#2025-04-20_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n>>> URL('http://example.com/path?a=b&b=1').extend_query(b='2')\nURL('http://example.com/path?a=b&b=1&b=2')\n>>> URL('http://example.com/path?a=b&b=1').extend_query([('b', '2')])\nURL('http://example.com/path?a=b&b=1&b=2')\n>>> URL('http://example.com/path?a=b&c=e&c=f').extend_query(c='d')\nURL('http://example.com/path?a=b&c=e&c=f&c=d')\n```\n\n----------------------------------------\n\nTITLE: Modifying URL Host Component in Python\nDESCRIPTION: Examples showing how to replace the host part of a URL using the with_host() method. Demonstrates changing the host and handling internationalized domain names.\nSOURCE: https://github.com/aio-libs/yarl/blob/master/docs/api.rst#2025-04-20_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n>>> URL('http://example.com/path/to').with_host('python.org')\nURL('http://python.org/path/to')\n>>> URL('http://example.com/path').with_host('хост.домен')\nURL('http://xn--n1agdj.xn--d1acufc/path')\n```\n\n----------------------------------------\n\nTITLE: Modifying URL Port in Python\nDESCRIPTION: Examples showing how to replace the port number in a URL using the with_port() method. Demonstrates changing the port number and clearing it to use the default port.\nSOURCE: https://github.com/aio-libs/yarl/blob/master/docs/api.rst#2025-04-20_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n>>> URL('http://example.com:8888').with_port(9999)\nURL('http://example.com:9999')\n>>> URL('http://example.com:8888').with_port(None)\nURL('http://example.com')\n```\n\n----------------------------------------\n\nTITLE: Working with Encoded URLs and Unicode in yarl\nDESCRIPTION: Demonstrates automatic URL encoding/decoding functionality with unicode characters, showing both the encoded representation and decoded access through properties.\nSOURCE: https://github.com/aio-libs/yarl/blob/master/docs/index.rst#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> url = URL('https://www.python.org/шлях')\n>>> url\nURL('https://www.python.org/%D1%88%D0%BB%D1%8F%D1%85')\n\n>>> url.path\n'/шлях'\n\n>>> url.raw_path\n'/%D1%88%D0%BB%D1%8F%D1%85'\n\n>>> url.human_repr()\n'https://www.python.org/шлях'\n```\n\n----------------------------------------\n\nTITLE: Modifying URL Scheme in Python\nDESCRIPTION: Example demonstrating how to create a new URL with a modified scheme using the with_scheme() method. The example shows changing from HTTP to HTTPS protocol.\nSOURCE: https://github.com/aio-libs/yarl/blob/master/docs/api.rst#2025-04-20_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n>>> URL('http://example.com').with_scheme('https')\nURL('https://example.com')\n```\n\n----------------------------------------\n\nTITLE: Modifying URL Password Component in Python\nDESCRIPTION: Examples showing how to modify the password part of a URL using the with_password() method. Demonstrates replacing the password with a non-ASCII one and clearing the password.\nSOURCE: https://github.com/aio-libs/yarl/blob/master/docs/api.rst#2025-04-20_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n>>> URL('http://user:pass@example.com').with_password('пароль')\nURL('http://user:%D0%BF%D0%B0%D1%80%D0%BE%D0%BB%D1%8C@example.com')\n>>> URL('http://user:pass@example.com').with_password(None)\nURL('http://user@example.com')\n```\n\n----------------------------------------\n\nTITLE: URL Component Access Examples\nDESCRIPTION: Shows how to access various URL components like scheme, user, password, and host.\nSOURCE: https://github.com/aio-libs/yarl/blob/master/docs/api.rst#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> URL('http://example.com').scheme\n'http'\n>>> URL('//example.com').scheme\n''\n>>> URL('page.html').scheme\n''\n\n>>> URL('http://john@example.com').user\n'john'\n>>> URL('http://бажан@example.com').user\n'бажан'\n>>> URL('http://example.com').user is None\nTrue\n```\n\n----------------------------------------\n\nTITLE: Modifying URL fragments in YARL (Python)\nDESCRIPTION: Examples of using URL.with_fragment method to replace or remove the fragment component (part after #) in a URL. The method auto-encodes non-ASCII characters if needed.\nSOURCE: https://github.com/aio-libs/yarl/blob/master/docs/api.rst#2025-04-20_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n>>> URL('http://example.com/path#frag').with_fragment('anchor')\nURL('http://example.com/path#anchor')\n>>> URL('http://example.com/path#frag').with_fragment('якір')\nURL('http://example.com/path#%D1%8F%D0%BA%D1%96%D1%80')\n>>> URL('http://example.com/path#frag').with_fragment(None)\nURL('http://example.com/path')\n```\n\n----------------------------------------\n\nTITLE: Getting URL origin in YARL (Python)\nDESCRIPTION: Example of using URL.origin() method to get a new URL containing only the scheme, host, and port parts, removing path, query, fragment, user, and password components.\nSOURCE: https://github.com/aio-libs/yarl/blob/master/docs/api.rst#2025-04-20_snippet_22\n\nLANGUAGE: python\nCODE:\n```\n>>> URL('http://example.com/path/to?arg#frag').origin()\nURL('http://example.com')\n>>> URL('http://user:pass@example.com/path').origin()\nURL('http://example.com')\n```\n\n----------------------------------------\n\nTITLE: Modifying URL User Component in Python\nDESCRIPTION: Examples showing how to modify the user part of a URL using the with_user() method. Demonstrates replacing the user, handling non-ASCII characters, and clearing the user/password.\nSOURCE: https://github.com/aio-libs/yarl/blob/master/docs/api.rst#2025-04-20_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n>>> URL('http://user:pass@example.com').with_user('new_user')\nURL('http://new_user:pass@example.com')\n>>> URL('http://user:pass@example.com').with_user('олекса')\nURL('http://%D0%BE%D0%BB%D0%B5%D0%BA%D1%81%D0%B0:pass@example.com')\n>>> URL('http://user:pass@example.com').with_user(None)\nURL('http://example.com')\n```\n\n----------------------------------------\n\nTITLE: Converting to relative URL in YARL (Python)\nDESCRIPTION: Example of using URL.relative() method to get a new relative URL containing only path, query, and fragment parts, removing scheme, user, password, host, and port components.\nSOURCE: https://github.com/aio-libs/yarl/blob/master/docs/api.rst#2025-04-20_snippet_23\n\nLANGUAGE: python\nCODE:\n```\n>>> URL('http://example.com/path/to?arg#frag').relative()\nURL('/path/to?arg#frag')\n```\n\n----------------------------------------\n\nTITLE: Checking if a URL is Absolute in Python\nDESCRIPTION: Example showing how to check if a URL is absolute using the absolute property. Returns True for URLs with a scheme or starting with '//', and False otherwise.\nSOURCE: https://github.com/aio-libs/yarl/blob/master/docs/api.rst#2025-04-20_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n>>> URL('http://example.com').absolute\nTrue\n>>> URL('//example.com').absolute\nTrue\n>>> URL('/path/to').absolute\nFalse\n>>> URL('path').absolute\nFalse\n```\n\n----------------------------------------\n\nTITLE: Accessing URL Fragment Properties in Python\nDESCRIPTION: Examples demonstrating how to access the fragment component of a URL using the fragment and raw_fragment properties. The fragment property returns the decoded fragment, while raw_fragment returns the URL-encoded version.\nSOURCE: https://github.com/aio-libs/yarl/blob/master/docs/api.rst#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> URL('http://example.com/path#fragment').fragment\n'fragment'\n>>> URL('http://example.com/path#якір').fragment\n'якір'\n>>> URL('http://example.com/path').fragment\n''\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> URL('http://example.com/path#якір').raw_fragment\n'%D1%8F%D0%BA%D1%96%D1%80'\n```\n\n----------------------------------------\n\nTITLE: Checking Default URL Ports with yarl\nDESCRIPTION: Examples demonstrating how to use the is_default_port() method to check if a URL is using its default port number based on the scheme.\nSOURCE: https://github.com/aio-libs/yarl/blob/master/docs/api.rst#2025-04-20_snippet_29\n\nLANGUAGE: python\nCODE:\n```\n>>> URL('http://example.com').is_default_port()\nTrue\n>>> URL('http://example.com:80').is_default_port()\nTrue\n>>> URL('http://example.com:8080').is_default_port()\nFalse\n>>> URL('/path/to').is_default_port()\nFalse\n```\n\n----------------------------------------\n\nTITLE: URL Joining with Relative URLs in Python\nDESCRIPTION: Demonstrates joining URLs with empty segments using the URL.join() method, showing how to handle URLs with schemes by making them relative.\nSOURCE: https://github.com/aio-libs/yarl/blob/master/CHANGES.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> URL(\"https://web.archive.org/web/\").join(URL(\"./https://github.com/aio-libs/yarl\"))\nURL('https://web.archive.org/web/https://github.com/aio-libs/yarl')\n```\n\n----------------------------------------\n\nTITLE: Using URL with_query Method for Multiple Values in Python\nDESCRIPTION: Example showing how to use the URL class to represent a query string where a key has multiple values using a list or tuple in the values of a mapping.\nSOURCE: https://github.com/aio-libs/yarl/blob/master/CHANGES.rst#2025-04-20_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nurl = URL(\"http://example.com\")\nassert url.with_query({\"a\": [1, 2]}) == URL(\"http://example.com/?a=1&a=2\")\n```\n\n----------------------------------------\n\nTITLE: Using __truediv__ for URL path joining in YARL (Python)\nDESCRIPTION: Example of using the __truediv__ method (/ operator) as a shortcut for URL.joinpath with a single element. This allows for intuitive path component addition using the division operator.\nSOURCE: https://github.com/aio-libs/yarl/blob/master/docs/api.rst#2025-04-20_snippet_26\n\nLANGUAGE: python\nCODE:\n```\n>>> url = URL('http://example.com/path?arg#frag') / 'to'\n>>> url\nURL('http://example.com/path/to')\n>>> url.parts\n('/', 'path', 'to')\n```\n\n----------------------------------------\n\nTITLE: Using Modulo Operator for Updating Query in yarl URLs\nDESCRIPTION: Example demonstrating the use of the modulo operator (%) as an alias for the update_query() method to modify query parameters in a URL.\nSOURCE: https://github.com/aio-libs/yarl/blob/master/CHANGES.rst#2025-04-20_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\n# Implied example based on PR #435 description:\nurl = URL(\"http://example.com\")\nnew_url = url % {\"param\": \"value\"}\n# Equivalent to:\n# new_url = url.update_query({\"param\": \"value\"})\n```\n\n----------------------------------------\n\nTITLE: URL Joining with Empty Segments in Python\nDESCRIPTION: Shows how to join URLs while preserving empty segments in both base and joined parts using the URL.join() method.\nSOURCE: https://github.com/aio-libs/yarl/blob/master/CHANGES.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> URL(\"https://web.archive.org/web/https://\").join(URL(\"github.com/aio-libs/yarl\"))\nURL('https://web.archive.org/web/https://github.com/aio-libs/yarl')\n```\n\n----------------------------------------\n\nTITLE: Basic URL Joining with Path Segments in Python\nDESCRIPTION: Example of using the forward slash operator for joining URL paths while preserving empty segments.\nSOURCE: https://github.com/aio-libs/yarl/blob/master/CHANGES.rst#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nURL(\"https://example.org/\") / \"\"\n```\n\n----------------------------------------\n\nTITLE: Building yarl with PEP 517 Config Settings\nDESCRIPTION: Example showing how to build yarl with pure Python and Cython tracing settings using PEP 517 build configuration options.\nSOURCE: https://github.com/aio-libs/yarl/blob/master/CHANGES.rst#2025-04-20_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ python -m build \\\n    --config-setting=pure-python=true \\\n    --config-setting=with-cython-tracing=true\n```\n\n----------------------------------------\n\nTITLE: Building yarl Wheel with Pure Python Setting\nDESCRIPTION: Command demonstrating how to build a yarl wheel from source with pure Python setting using pypa/build tool.\nSOURCE: https://github.com/aio-libs/yarl/blob/master/CHANGES.rst#2025-04-20_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ python -m build --config-setting=--pure-python=false\n```\n\n----------------------------------------\n\nTITLE: Installing yarl in Development Mode\nDESCRIPTION: Command to install yarl in editable/development mode for collecting coverage data of Cython modules.\nSOURCE: https://github.com/aio-libs/yarl/blob/master/CHANGES.rst#2025-04-20_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ python -Im pip install -e .\n```\n\n----------------------------------------\n\nTITLE: Installing yarl with Cython Tracing\nDESCRIPTION: Command to install yarl with Cython line tracing enabled for coverage measurement.\nSOURCE: https://github.com/aio-libs/yarl/blob/master/CHANGES.rst#2025-04-20_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ python -Im pip install . --config-settings=with-cython-tracing=true\n```\n\n----------------------------------------\n\nTITLE: Installing yarl with pip\nDESCRIPTION: Shows how to install the yarl library using pip, with an option to use a pure Python implementation instead of the compiled C extension.\nSOURCE: https://github.com/aio-libs/yarl/blob/master/README.rst#2025-04-20_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ pip install yarl\n```\n\nLANGUAGE: console\nCODE:\n```\n$ pip install yarl --config-settings=pure-python=false\n```\n\n----------------------------------------\n\nTITLE: Inspecting yarl Cache Information\nDESCRIPTION: Example showing how to retrieve cache statistics for IDNA encoding/decoding and host encoding operations using the cache_info() function.\nSOURCE: https://github.com/aio-libs/yarl/blob/master/docs/api.rst#2025-04-20_snippet_30\n\nLANGUAGE: python\nCODE:\n```\n>>> yarl.cache_info()\n{'idna_encode': CacheInfo(hits=5, misses=5, maxsize=256, currsize=5),\n 'idna_decode': CacheInfo(hits=24, misses=15, maxsize=256, currsize=15),\n 'encode_host': CacheInfo(hits=0, misses=0, maxsize=512, currsize=0)}\n```\n\n----------------------------------------\n\nTITLE: Installing yarl Package with pip\nDESCRIPTION: Shows how to install the yarl package using pip, including the option to use a pure Python implementation without C extensions using PEP 517 configuration.\nSOURCE: https://github.com/aio-libs/yarl/blob/master/docs/index.rst#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install yarl\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install yarl --config-settings=pure-python=false\n```\n\n----------------------------------------\n\nTITLE: Pure Python Installation with pip\nDESCRIPTION: Command showing how to install yarl in pure Python mode without C extensions using pip configuration settings.\nSOURCE: https://github.com/aio-libs/yarl/blob/master/CHANGES.rst#2025-04-20_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ python -m pip install . --config-settings=--pure-python=false\n```\n\n----------------------------------------\n\nTITLE: Python Package Dependencies List\nDESCRIPTION: A list of Python package dependencies with version specifications used for testing and development. Includes pytest for testing, coverage tools, hypothesis for property-based testing, and utility libraries like multidict and idna.\nSOURCE: https://github.com/aio-libs/yarl/blob/master/requirements/test-pure.txt#2025-04-20_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncovdefaults\nhypothesis>=6.0\nidna==3.10\nmultidict==6.4.3\npropcache==0.3.1\npytest==8.3.5\npytest-cov>=2.3.1\npytest-xdist\n```\n\n----------------------------------------\n\nTITLE: Generating Structured Changelog with Jinja2 for yarl Project\nDESCRIPTION: This Jinja2 template generates a structured changelog for the yarl project. It organizes changes by sections and categories, includes version and date information, and creates links to related GitHub issues, pull requests, and commits. The template also handles special cases like scientific notation in commit hashes.\nSOURCE: https://github.com/aio-libs/yarl/blob/master/CHANGES/.TEMPLATE.rst#2025-04-20_snippet_0\n\nLANGUAGE: jinja2\nCODE:\n```\n{# TOWNCRIER TEMPLATE #}\n\n*({{ versiondata.date }})*\n\n{% for section, _ in sections.items() %}\n{% set underline = underlines[0] %}{% if section %}{{section}}\n{{ underline * section|length }}{% set underline = underlines[1] %}\n\n{% endif %}\n\n{% if sections[section] %}\n{% for category, val in definitions.items() if category in sections[section]%}\n{{ definitions[category]['name'] }}\n{{ underline * definitions[category]['name']|length }}\n\n{% if definitions[category]['showcontent'] %}\n{% for text, change_note_refs in sections[section][category].items() %}\n- {{ text }}\n\n  {{- '\\n' * 2 -}}\n\n  {#-\n      NOTE: Replacing 'e' with 'f' is a hack that prevents Jinja's `int`\n      NOTE: filter internal implementation from treating the input as an\n      NOTE: infinite float when it looks like a scientific notation (with a\n      NOTE: single 'e' char in between digits), raising an `OverflowError`,\n      NOTE: subsequently. 'f' is still a hex letter so it won't affect the\n      NOTE: check for whether it's a (short or long) commit hash or not.\n      Ref: https://github.com/pallets/jinja/issues/1921\n  -#}\n  {%-\n    set pr_issue_numbers = change_note_refs\n    | map('lower')\n    | map('replace', 'e', 'f')\n    | map('int', default=None)\n    | select('integer')\n    | map('string')\n    | list\n  -%}\n  {%- set arbitrary_refs = [] -%}\n  {%- set commit_refs = [] -%}\n  {%- with -%}\n    {%- set commit_ref_candidates = change_note_refs | reject('in', pr_issue_numbers) -%}\n    {%- for cf in commit_ref_candidates -%}\n      {%- if cf | length in (7, 8, 40) and cf | int(default=None, base=16) is not none -%}\n        {%- set _ = commit_refs.append(cf) -%}\n      {%- else -%}\n        {%- set _ = arbitrary_refs.append(cf) -%}\n      {%- endif -%}\n    {%- endfor -%}\n  {%- endwith -%}\n\n  {% if pr_issue_numbers %}\n  *Related issues and pull requests on GitHub:*\n  :issue:`{{ pr_issue_numbers | join('`, :issue:`') }}`.\n  {{- '\\n' * 2 -}}\n  {%- endif -%}\n\n  {% if commit_refs %}\n  *Related commits on GitHub:*\n  :commit:`{{ commit_refs | join('`, :commit:`') }}`.\n  {{- '\\n' * 2 -}}\n  {%- endif -%}\n\n  {% if arbitrary_refs %}\n  *Unlinked references:*\n  {{ arbitrary_refs | join(', ') }}.\n  {{- '\\n' * 2 -}}\n  {%- endif -%}\n\n{% endfor %}\n{% else %}\n- {{ sections[section][category]['']|join(', ') }}\n\n{% endif %}\n{% if sections[section][category]|length == 0 %}\nNo significant changes.\n\n{% else %}\n{% endif %}\n\n{% endfor %}\n{% else %}\nNo significant changes.\n\n\n{% endif %}\n{% endfor %}\n----\n{{ '\\n' * 2 }}\n\n```\n\n----------------------------------------\n\nTITLE: Generating Yarl Documentation with Make Command in Shell\nDESCRIPTION: A shell command to locally generate documentation for the Yarl project using the make utility. This command builds the Sphinx documentation for preview before submission.\nSOURCE: https://github.com/aio-libs/yarl/blob/master/docs/contributing/guidelines.rst#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ make doc\n```\n\n----------------------------------------\n\nTITLE: Creating Git Version Tag for yarl Release\nDESCRIPTION: Command for creating a GPG-signed git tag with version number including a leading 'v' and a brief description of the release contents.\nSOURCE: https://github.com/aio-libs/yarl/blob/master/docs/contributing/release_guide.rst#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n[dir:yarl] $ git tag \\\n                     -s 'VERSION_WITH_LEADING_V' \\\n                     -m 'VERSION_WITH_LEADING_V' \\\n                     -m 'This release does X and Y.'\n```\n\n----------------------------------------\n\nTITLE: Pushing Version Tag to Upstream Repository\nDESCRIPTION: Command for pushing the newly created version tag to the upstream repository (origin) to trigger the release process.\nSOURCE: https://github.com/aio-libs/yarl/blob/master/docs/contributing/release_guide.rst#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n[dir:yarl] $ git push origin 'VERSION_WITH_LEADING_V'\n```\n\n----------------------------------------\n\nTITLE: Specifying Documentation Build Dependencies\nDESCRIPTION: Lists the required packages for building Sphinx documentation with towncrier integration and Markdown support. It includes the towncrier configuration file, myst-parser for Markdown rendering, sphinx at a specific version, and the sphinxcontrib-towncrier extension for release notes integration.\nSOURCE: https://github.com/aio-libs/yarl/blob/master/requirements/doc.txt#2025-04-20_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n-r towncrier.txt\nmyst-parser >= 0.10.0\nsphinx==8.2.3\nsphinxcontrib-towncrier\n```\n\n----------------------------------------\n\nTITLE: Importing External Requirement Files in yarl Project\nDESCRIPTION: This snippet shows the inclusion of external requirement files using the -r directive. It imports codspeed.txt for performance benchmarking dependencies and towncrier.txt for changelog management tools.\nSOURCE: https://github.com/aio-libs/yarl/blob/master/requirements/dev.txt#2025-04-20_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-r codspeed.txt\n-r towncrier.txt\n```\n\n----------------------------------------\n\nTITLE: Example Feature Change Note in RST\nDESCRIPTION: Shows how to document a new feature addition in a change note file named CHANGES/553.feature.rst\nSOURCE: https://github.com/aio-libs/yarl/blob/master/CHANGES/README.rst#2025-04-20_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\nAdded support for ``GenericAliases`` (``MultiDict[str]``) under Python 3.9\\nand higher -- by :user:`mjpieters`.\n```\n\n----------------------------------------\n\nTITLE: Managing Changelog and Version Updates in yarl\nDESCRIPTION: Commands for updating the version string and generating a new changelog using towncrier. The commands should be run from the yarl directory and version number should follow PEP 440 without a leading 'v'.\nSOURCE: https://github.com/aio-libs/yarl/blob/master/docs/contributing/release_guide.rst#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n[dir:yarl] $ yarl/__init__.py\n[dir:yarl] $ python -m towncrier build \\\n                     -- --version 'VERSION_WITHOUT_LEADING_V'\n[dir:yarl] $ git commit -v CHANGES{.rst,/} yarl/__init__.py\n```\n\n----------------------------------------\n\nTITLE: Specifying Cython Version Dependency\nDESCRIPTION: This snippet specifies the exact version of Cython required for the project. It uses the '==' operator to pin the version to 3.0.12, ensuring compatibility and consistency across different environments.\nSOURCE: https://github.com/aio-libs/yarl/blob/master/requirements/cython.txt#2025-04-20_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncython==3.0.12\n```\n\n----------------------------------------\n\nTITLE: Specifying Cython Dependency Version in Requirements File\nDESCRIPTION: This code snippet defines the Cython package dependency with version 3.1.0a1, which is an alpha pre-release version. The requirement is likely used for building or developing the yarl package.\nSOURCE: https://github.com/aio-libs/yarl/blob/master/requirements/cython-freethreading.txt#2025-04-20_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncython==3.1.0a1\n```\n\n----------------------------------------\n\nTITLE: Including Dependencies for YaRL Project\nDESCRIPTION: Requirements file that references two external dependency files: one for Cython free threading configuration and another for pure testing dependencies.\nSOURCE: https://github.com/aio-libs/yarl/blob/master/requirements/test-freethreading.txt#2025-04-20_snippet_0\n\nLANGUAGE: requirements\nCODE:\n```\n-r cython-freethreading.txt\n-r test-pure.txt\n```\n\n----------------------------------------\n\nTITLE: Installing Test Dependencies with pip\nDESCRIPTION: Requirements file that inherits from test.txt and adds pytest-codspeed for performance testing.\nSOURCE: https://github.com/aio-libs/yarl/blob/master/requirements/codspeed.txt#2025-04-20_snippet_0\n\nLANGUAGE: pip\nCODE:\n```\n-r test.txt\npytest-codspeed==3.2.0\n```\n\n----------------------------------------\n\nTITLE: Specifying towncrier Package Version\nDESCRIPTION: Pins the towncrier package to version 23.11.0, which is used for generating changelog/release notes from news fragments.\nSOURCE: https://github.com/aio-libs/yarl/blob/master/requirements/towncrier.txt#2025-04-20_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ntowncrier==23.11.0\n```\n\n----------------------------------------\n\nTITLE: Example Removal Change Note in RST\nDESCRIPTION: Shows how to document Python version support removal in a change note file named CHANGES/603.removal.1.rst\nSOURCE: https://github.com/aio-libs/yarl/blob/master/CHANGES/README.rst#2025-04-20_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\nDropped Python 3.5 support; Python 3.6 is the minimal supported Python\\nversion -- by :user:`webknjaz`.\n```\n\n----------------------------------------\n\nTITLE: Configuring pre-commit Dependency Version\nDESCRIPTION: Specifies the required version of pre-commit package to be used for running git hooks and code quality checks. Uses version pinning to ensure consistent behavior across environments.\nSOURCE: https://github.com/aio-libs/yarl/blob/master/requirements/lint.txt#2025-04-20_snippet_0\n\nLANGUAGE: text\nCODE:\n```\npre-commit==4.2.0\n```\n\n----------------------------------------\n\nTITLE: Example Bugfix Change Note in RST\nDESCRIPTION: Demonstrates documenting a platform support addition in a change note file named CHANGES/550.bugfix.rst\nSOURCE: https://github.com/aio-libs/yarl/blob/master/CHANGES/README.rst#2025-04-20_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\nStarted shipping Windows wheels for the x86 architecture\\n-- by :user:`Dreamsorcerer`.\n```\n\n----------------------------------------\n\nTITLE: Including Released Changes from External File in reStructuredText\nDESCRIPTION: This snippet includes the content of the CHANGES.rst file, starting after a specific marker. This technique allows maintaining a separate changelog file while including it in the documentation.\nSOURCE: https://github.com/aio-libs/yarl/blob/master/docs/changes.rst#2025-04-20_snippet_1\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. include:: ../CHANGES.rst\n   :start-after: .. towncrier release notes start\n```\n\n----------------------------------------\n\nTITLE: Including Unreleased Changes in Sphinx Documentation using reStructuredText\nDESCRIPTION: This snippet defines a conditional section that will display unreleased changes when the documentation is not in release mode. It uses towncrier to draft entries for the upcoming version.\nSOURCE: https://github.com/aio-libs/yarl/blob/master/docs/changes.rst#2025-04-20_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. only:: not is_release\n\n   To be included in v\\ |release| (if present)\n   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n   .. towncrier-draft-entries:: |release| [UNRELEASED DRAFT]\n\n   Released versions\n   ^^^^^^^^^^^^^^^^^\n```\n\n----------------------------------------\n\nTITLE: Importing Requirements Files for Cython and Test Dependencies\nDESCRIPTION: References external requirements files that list dependencies for Cython components and pure testing utilities.\nSOURCE: https://github.com/aio-libs/yarl/blob/master/requirements/test.txt#2025-04-20_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-r cython.txt\n-r test-pure.txt\n```\n\n----------------------------------------\n\nTITLE: Installing Documentation and CI Dependencies for yarl\nDESCRIPTION: Requirements file that references documentation dependencies from doc.txt and conditionally includes sphinxcontrib-spelling package for non-Windows platforms, specifically for Azure CI usage.\nSOURCE: https://github.com/aio-libs/yarl/blob/master/requirements/doc-spelling.txt#2025-04-20_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-r doc.txt\nsphinxcontrib-spelling==8.0.1; platform_system!=\"Windows\"  # We only use it in Azure CI\n```"
  }
]