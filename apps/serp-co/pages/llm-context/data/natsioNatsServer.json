[
  {
    "owner": "nats-io",
    "repo": "nats-server",
    "content": "TITLE: Handling MQTT Connection in Go\nDESCRIPTION: This snippet outlines the steps for processing an MQTT CONNECT packet, including session management and CONNACK response.\nSOURCE: https://github.com/nats-io/nats-server/blob/main/server/README-MQTT.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. Ensure that we have an `AccountSessionManager` so we can have an\n   `mqttSession`. Lazily initialize JetStream streams, and internal consumers\n   and subscriptions. See `getOrCreateMQTTAccountSessionManager()`.\n2. Find and disconnect any previous session/client for the same ID. See\n   `mqttProcessConnect()`.\n3. Ensure we have an `mqttSession` - create a new or load a previously persisted\n   one. If the clean flag is set in `CONNECT`, clean the session. see\n   `mqttSession.clear()`\n4. Initialize session's subscriptions, if any.\n5. Always send back a `CONNACK` packet. If there were errors in previous steps,\n   include the error.\n```\n\n----------------------------------------\n\nTITLE: Defining Lock Ordering Rules for NATS Server\nDESCRIPTION: Lists the established lock ordering hierarchy where A -> B means A.Lock() can be called before B.Lock() but not the opposite. These rules are critical for preventing deadlocks in concurrent operations.\nSOURCE: https://github.com/nats-io/nats-server/blob/main/locksordering.txt#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\njetStream -> jsAccount -> Server -> client -> Account\n\njetStream -> jsAccount -> stream -> consumer\n```\n\n----------------------------------------\n\nTITLE: Processing MQTT SUBSCRIBE Packet in Go\nDESCRIPTION: This snippet outlines the steps for handling an MQTT SUBSCRIBE packet, including QoS setup, retained message replay, and session updates.\nSOURCE: https://github.com/nats-io/nats-server/blob/main/server/README-MQTT.md#2025-04-19_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n1. Ignore it if `topic` starts with `$MQTT.sub.`.\n2. Set up QoS 0 message delivery - an internal NATS subscription on `topic`.\n3. Replay any retained messages for `topic`, once as QoS 0.\n4. If we already have a subscription on `topic`, update its QoS\n5. If this is a QoS 2 subscription in the session, ensure we have the [PUBREL\n   consumer](#session-scope) for the session.\n6. If this is a QoS 1 or 2 subscription, ensure we have the [Message\n   consumer](#subscription-scope) for this subscription (or delete one if it\n   exists and this is now a QoS 0 sub).\n7. Add an extra subscription for the [top-level wildcard](#subject-wildcards) case.\n8. Update the session, persist it if changed.\n```\n\n----------------------------------------\n\nTITLE: Handling MQTT Disconnection in Go\nDESCRIPTION: This snippet describes the process of handling an MQTT client disconnection, including Will message handling and session cleanup.\nSOURCE: https://github.com/nats-io/nats-server/blob/main/server/README-MQTT.md#2025-04-19_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n1. Send out the Will Message if applicable (if not caused by a `DISCONNECT` packet)\n2. Delete the JetStream consumers for to QoS 1 and 2 packet delivery through\n   JS API calls (if \"clean\" session flag is set)\n3. Delete the session record from the \"$MQTT_sess\" stream, based on recorded\n   stream sequence. (if \"clean\" session flag is set)\n4. Close the client connection.\n```\n\n----------------------------------------\n\nTITLE: Handling MQTT UNSUBSCRIBE Packet in Go\nDESCRIPTION: This snippet describes the process of handling an MQTT UNSUBSCRIBE packet, including JetStream consumer deletion and session updates.\nSOURCE: https://github.com/nats-io/nats-server/blob/main/server/README-MQTT.md#2025-04-19_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nWhen we get an `UNSUBSCRIBE` packet, it can contain multiple subscriptions to\nunsubscribe. The parsing will generate a slice of mqttFilter objects that\ncontain the \"filter\" (the topic with possibly wildcard of the subscription) and\nthe QoS value. The server goes through the list and deletes the JS consumer (if\nQoS 1 or 2) and unsubscribes the NATS subscription for the delivery subject (if\nit was a QoS 1 or 2) or on the actual topic/subject. In case of the \"#\"\nwildcard, the server will handle the \"level up\" subscriptions that NATS had to\ncreate.\n\nAgain, we update the session and persist it as needed in the `$MQTT_sess`\nstream.\n```\n\n----------------------------------------\n\nTITLE: MQTT Known Issues List\nDESCRIPTION: Lists current known issues and TODO items for the MQTT implementation in NATS Server, including QoS delivery concerns and potential improvements.\nSOURCE: https://github.com/nats-io/nats-server/blob/main/server/README-MQTT.md#2025-04-19_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n- \"active\" redelivery for QoS from JetStream (compliant, just a note)\n- JetStream QoS redelivery happens out of (original) order\n- finish delivery of in-flight messages after UNSUB\n- finish delivery of in-flight messages after a reconnect\n- consider replacing `$MQTT_msgs` with `$MQTT_out`.\n- consider using unique `$MQTT.rmsg.>` and `MaxMsgsPer` for retained messages.\n- add a cli command to list/clean old sessions\n```\n\n----------------------------------------\n\nTITLE: Reload Mutex Lock Ordering\nDESCRIPTION: Specifies the reload mutex that prevents race conditions between connecting clients and configuration reloads, which must be acquired before any other locks during a reload.\nSOURCE: https://github.com/nats-io/nats-server/blob/main/locksordering.txt#2025-04-19_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\nreloadMu -> Server\nreloadMu -> optsMu\n```\n\n----------------------------------------\n\nTITLE: MQTT Subject Wildcard Examples\nDESCRIPTION: Demonstrates the mapping between MQTT and NATS wildcards, where MQTT's '+' maps to NATS '*' and MQTT's '#' requires special handling with two NATS subscriptions for full compatibility.\nSOURCE: https://github.com/nats-io/nats-server/blob/main/server/README-MQTT.md#2025-04-19_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n\"foo/#\" -> [\"foo\", \"foo.>\"]\n```\n\n----------------------------------------\n\nTITLE: JetStream Migration Lock Ordering\nDESCRIPTION: Describes the jscmMu lock in Account that serializes calls to JetStream migration functions to prevent inconsistent Raft node states.\nSOURCE: https://github.com/nats-io/nats-server/blob/main/locksordering.txt#2025-04-19_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\njscmMu -> Account -> jsAccount\njscmMu -> stream.clsMu \njscmMu -> RaftNode\n```\n\n----------------------------------------\n\nTITLE: Usage Lock Independence for JetStream Accounts\nDESCRIPTION: Describes the independent usage mutex for JetStream accounts which can be invoked under any other lock, providing flexibility in the locking hierarchy.\nSOURCE: https://github.com/nats-io/nats-server/blob/main/locksordering.txt#2025-04-19_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\njsAccount -> jsa.usageMu, stream -> jsa.usageMu\n```\n\n----------------------------------------\n\nTITLE: Account Leaf Nodes List Lock Ordering\nDESCRIPTION: Defines the special lock for account's leafnodes list that allows holding this lock and then acquiring a client lock, which isn't possible with the normal account lock.\nSOURCE: https://github.com/nats-io/nats-server/blob/main/locksordering.txt#2025-04-19_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\naccountLeafList -> client\n```\n\n----------------------------------------\n\nTITLE: Account Resolver Lock Ordering\nDESCRIPTION: Describes the assumed lock ordering for the AccountResolver interface implementations in relation to the Server lock.\nSOURCE: https://github.com/nats-io/nats-server/blob/main/locksordering.txt#2025-04-19_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nAccountResolver -> Server\n```\n\n----------------------------------------\n\nTITLE: Creating PKCS12 Bundle from Client Certificate and Key\nDESCRIPTION: Command to create a PKCS12 (.p12/pfx) bundle by packaging a client certificate (client.pem) and private key (client-key.pem) into a single file (client.p12). This command requires setting the bundle password to 's3cr3t' as specified by provisioning scripts.\nSOURCE: https://github.com/nats-io/nats-server/blob/main/test/configs/certs/tlsauth/certstore/pkcs12.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nopenssl pkcs12 -export -inkey ./client-key.pem -in ./client.pem -out client.p12\n```\n\n----------------------------------------\n\nTITLE: Creating PKCS12 Bundle for CA Certificate\nDESCRIPTION: Command to create a PKCS12 (.p12) bundle containing only the Certificate Authority certificate without private keys. This creates a CA bundle that can be imported into certificate stores.\nSOURCE: https://github.com/nats-io/nats-server/blob/main/test/configs/certs/tlsauth/certstore/pkcs12.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nopenssl pkcs12 -export -nokeys -in ..\\ca.pem -out ca.p12\n```\n\n----------------------------------------\n\nTITLE: Calculating FreeBSD kinfo_proc Structure Offsets in C\nDESCRIPTION: Program to determine memory offsets of important fields in the FreeBSD kinfo_proc structure. Used to enable cross-platform compilation without cgo dependencies. Prints offsets for process size, resident set size, and CPU percentage usage.\nSOURCE: https://github.com/nats-io/nats-server/blob/main/server/pse/freebsd.txt#2025-04-19_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#include <stddef.h>\n#include <stdint.h>\n#include <stdio.h>\n#include <sys/types.h>\n#include <sys/user.h>\n\n#define SHOW_OFFSET(FIELD) printf(\" KIP_OFF_%s = %zu\\n\", #FIELD, offsetof(struct kinfo_proc, ki_ ## FIELD))\n\nint main(int argc, char *argv[]) {\n\t/* Uncomment these if you want some extra debugging aids:\n\tSHOW_OFFSET(pid);\n\tSHOW_OFFSET(ppid);\n\tSHOW_OFFSET(uid);\n\t*/\n\tSHOW_OFFSET(size);\n\tSHOW_OFFSET(rssize);\n\tSHOW_OFFSET(pctcpu);\n}\n```\n\n----------------------------------------\n\nTITLE: Running PowerShell Script to Import PKCS12 Certificates\nDESCRIPTION: PowerShell command to execute a script that imports PKCS12 bundles (client or server) into the Windows certificate store for testing purposes. The script is located in the test configuration directory.\nSOURCE: https://github.com/nats-io/nats-server/blob/main/test/configs/certs/tlsauth/certstore/pkcs12.md#2025-04-19_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\npowershell.exe -command \"& '..\\test\\configs\\certs\\tlsauth\\certstore\\import-<client,server>-p12.ps1'\"\n```\n\n----------------------------------------\n\nTITLE: Git Rebase Command for Updating Branch\nDESCRIPTION: This Git command is used to rebase the current branch onto the latest main branch. It ensures that the contributor's work is based on the most recent version of the main codebase before submitting a pull request.\nSOURCE: https://github.com/nats-io/nats-server/blob/main/CONTRIBUTING.md#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit rebase main\n```\n\n----------------------------------------\n\nTITLE: Git Commit Command with Sign-off\nDESCRIPTION: This Git command is used to create a commit with a sign-off, which is required for contributions to the NATS server project. The sign-off certifies that the contribution is the original work of the contributor and is licensed under the Apache-2.0 license.\nSOURCE: https://github.com/nats-io/nats-server/blob/main/CONTRIBUTING.md#2025-04-19_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngit commit -s\n```\n\n----------------------------------------\n\nTITLE: Linking Pull Request to Issue in GitHub Markdown\nDESCRIPTION: This snippet demonstrates how to link a pull request to an issue in the pull request description using GitHub Markdown syntax. It's used to associate pull requests with related issues for better project management.\nSOURCE: https://github.com/nats-io/nats-server/blob/main/CONTRIBUTING.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nResolves #NNN\n```\n\n----------------------------------------\n\nTITLE: NATS Server Public Signing Keys Block\nDESCRIPTION: Block of public signing keys used for testing purposes in NATS server authentication. Contains three distinct public keys in base32 format.\nSOURCE: https://github.com/nats-io/nats-server/blob/main/test/configs/nkeys/sigkeys.txt#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-----BEGIN SIGNING KEYS-----\nODSKR7MYFQZ5MMAJ6FPMEETCTE3RIHOFLTYPJRMAVVN4OLV2YYAMHCAC\nODSKACSRBWP537DZDRVJ657JOIGOPOQ6KG7T4HN6OK4F6IECGXDAHNP2\nODSKI36LZB44OY5IVCR6P52FZJZYMYWZVWNUDTLEZ5TK2PN3OEMRTABR\n------END SIGNING KEYS------\n```\n\n----------------------------------------\n\nTITLE: NATS Server Signing Seeds Block\nDESCRIPTION: Block of signing seeds corresponding to the public keys, used for testing purposes. Contains three distinct seeds in base32 format.\nSOURCE: https://github.com/nats-io/nats-server/blob/main/test/configs/nkeys/sigkeys.txt#2025-04-19_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n----BEGIN SIGNING SEEDS-----\nSOAO7RDW6CLJORHHBS4DPYYIIIAASEIUJ5WWS5FMWLNTFHUCKQ5CAC45AA\nSOAEL3NFOTU6YK3DBTEKQYZ2C5IWSVZWWZCQDASBUOHJKBFLVANK27JMMQ\nSOACSMP662P2BZDKVF6WCB6FIQYORADDWWWEAI55QY24CQRTY4METUING4\n------END SIGING SEEDS------\n```\n\n----------------------------------------\n\nTITLE: Redirecting ADR Documentation Link in Markdown\nDESCRIPTION: Markdown document redirecting users to the new location of NATS Architecture Decision Records in a dedicated repository.\nSOURCE: https://github.com/nats-io/nats-server/blob/main/doc/README.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Architecture Decision Records\n\nThe NATS ADR documents have moved to their [own repository](https://github.com/nats-io/nats-architecture-and-design/)\n```"
  }
]