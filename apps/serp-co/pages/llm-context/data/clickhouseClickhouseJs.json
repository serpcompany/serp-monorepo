[
  {
    "owner": "clickhouse",
    "repo": "clickhouse-js",
    "content": "TITLE: Initializing Client with JWT Authentication in ClickHouse JS\nDESCRIPTION: This code snippet demonstrates how to initialize a ClickHouse client with JWT authentication using the `access_token` configuration option. It showcases the setup required to use JWT for authentication with ClickHouse Cloud. Do not mix access token and username/password credentials in the configuration.\nSOURCE: https://github.com/clickhouse/clickhouse-js/blob/main/CHANGELOG.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst client = createClient({\n    // ...\n    access_token: '<JWT access token>',\n  })\n```\n\n----------------------------------------\n\nTITLE: Specifying Insert Columns - Typescript\nDESCRIPTION: Shows how to specify a list of columns to insert data into, or exclude specific columns during insertion. This is useful for controlling which columns are targeted in the INSERT statement. Requires @clickhouse/client and ClickHouse server.\nSOURCE: https://github.com/clickhouse/clickhouse-js/blob/main/CHANGELOG.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n// Generated query: INSERT INTO mytable (message) FORMAT JSONEachRow\nawait client.insert({\n  table: 'mytable',\n  format: 'JSONEachRow',\n  values: [{ message: 'foo' }],\n  columns: ['message'],\n})\n\n// Generated query: INSERT INTO mytable (* EXCEPT (message)) FORMAT JSONEachRow\nawait client.insert({\n  table: 'mytable',\n  format: 'JSONEachRow',\n  values: [{ id: 42 }],\n  columns: { except: ['message'] },\n})\n```\n\n----------------------------------------\n\nTITLE: Export ClickHouse Cloud Variables\nDESCRIPTION: These commands export environment variables required for connecting to ClickHouse Cloud. `CLICKHOUSE_URL` should be the hostname and port, and `CLICKHOUSE_PASSWORD` should be the cloud password.\nSOURCE: https://github.com/clickhouse/clickhouse-js/blob/main/examples/README.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nexport CLICKHOUSE_URL=https://<your-clickhouse-cloud-hostname>:8443\nexport CLICKHOUSE_PASSWORD=<your-clickhouse-cloud-password>\n```\n\n----------------------------------------\n\nTITLE: Retry on Expired Socket in ClickHouse JS\nDESCRIPTION: This code snippet illustrates how to configure the ClickHouse JS client to retry requests on expired sockets when using Keep-Alive. It sets `keep_alive.enabled` to `true`, defines a `socket_ttl` (socket time-to-live) value slightly less than the server's `keep_alive_timeout` setting, and enables `retry_on_expired_socket` to handle potentially expired sockets by recreating the request.\nSOURCE: https://github.com/clickhouse/clickhouse-js/blob/main/CHANGELOG.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nconst client = createClient({\n  keep_alive: {\n    enabled: true,\n    // should be slightly less than the `keep_alive_timeout` setting in server's `config.xml`\n    // default is 3s there, so 2500 milliseconds seems to be a safe client value in this scenario\n    // another example: if your configuration has `keep_alive_timeout` set to 60s, you could put 59_000 here\n    socket_ttl: 2500,\n    retry_on_expired_socket: true,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Additional HTTP Headers - Typescript\nDESCRIPTION: Demonstrates how to set additional HTTP headers for outgoing ClickHouse requests using the `additional_headers` configuration option. This is useful for scenarios where a reverse proxy with authorization is in place. Requires @clickhouse/client and ClickHouse server.\nSOURCE: https://github.com/clickhouse/clickhouse-js/blob/main/CHANGELOG.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nconst client = createClient({\n  additional_headers: {\n    'X-ClickHouse-User': 'clickhouse_user',\n    'X-ClickHouse-Key': 'clickhouse_password',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring ClickHouse client with custom HTTPS agent in TypeScript\nDESCRIPTION: This snippet demonstrates how to configure the ClickHouse client with a custom HTTPS agent in TypeScript.  It shows how to read a CA certificate, create an HTTPS agent, and pass it to the `createClient` function. It also configures custom headers and disables the default Authorization header because it may conflict with TLS headers required by the server. The `set_basic_auth_header` option disables the default Authorization header. The `http_headers` property defines a set of headers to include in the request.\nSOURCE: https://github.com/clickhouse/clickhouse-js/blob/main/CHANGELOG.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst agent = new https.Agent({\n  ca: fs.readFileSync('./ca.crt'),\n})\nconst client = createClient({\n  url: 'https://server.clickhouseconnect.test:8443',\n  http_agent: agent,\n  // With a custom HTTPS agent, the client won't use the default HTTPS connection implementation; the headers should be provided manually\n  http_headers: {\n    'X-ClickHouse-User': 'default',\n    'X-ClickHouse-Key': '',\n  },\n  // Authorization header conflicts with the TLS headers; disable it.\n  set_basic_auth_header: false,\n})\n```\n\n----------------------------------------\n\nTITLE: Overriding queryParams format to improve Type Inference (TypeScript)\nDESCRIPTION: Explains how to override the `format` within the `queryParams` to assist the client in inferring the correct type, especially in scenarios where the format is dynamically determined. Explicitly setting the format ensures accurate type inference.\nSOURCE: https://github.com/clickhouse/clickhouse-js/blob/main/CHANGELOG.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nasync function runQuery(\n  queryParams: QueryParams,\n): Promise<Record<string, Data>> {\n  const resultSet = await client.query({\n    ...queryParams,\n    format: 'JSONObjectsEachRow',\n  })\n  // TS understands that it is a Record<string, Data> now\n  return resultSet.json<Data>()\n}\n\n```\n\n----------------------------------------\n\nTITLE: Enabling Keep-Alive in Web Client - Typescript\nDESCRIPTION: Illustrates how to enable Keep-Alive settings for the ClickHouse web client using the `keep_alive` configuration option. Keep-Alive is now enabled by default for the Web version. Requires @clickhouse/client-web and ClickHouse server.\nSOURCE: https://github.com/clickhouse/clickhouse-js/blob/main/CHANGELOG.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createClient } from '@clickhouse/client-web'\nconst client = createClient({ keep_alive: { enabled: true } })\n```\n\n----------------------------------------\n\nTITLE: ClickHouse JS Command Usage Example\nDESCRIPTION: This code snippet demonstrates the usage of the `command` method in the ClickHouse JS client, introduced as an alternative to `exec` for executing commands that do not require consuming the response stream. The `command` method automatically destroys the stream after execution, simplifying the code for DDL statements and other commands that do not produce valuable output.\nSOURCE: https://github.com/clickhouse/clickhouse-js/blob/main/CHANGELOG.md#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n// incorrect: stream is not consumed and not destroyed, request will be timed out eventually\nawait client.exec('CREATE TABLE foo (id String) ENGINE Memory')\n\n// correct: stream does not contain any information and just destroyed\nconst { stream } = await client.exec(\n  'CREATE TABLE foo (id String) ENGINE Memory',\n)\nstream.destroy()\n\n// correct: same as exec + stream.destroy()\nawait client.command('CREATE TABLE foo (id String) ENGINE Memory')\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Cluster Up\nDESCRIPTION: This command starts a local ClickHouse cluster using a specific Docker Compose configuration file. This is required for the `create_table_on_premise_cluster.ts` example.\nSOURCE: https://github.com/clickhouse/clickhouse-js/blob/main/examples/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose -f docker-compose.cluster.yml up -d\n```\n\n----------------------------------------\n\nTITLE: Parsing ClickHouse Column Types in TypeScript\nDESCRIPTION: This code snippet demonstrates how to use the `parseColumnType` function to parse a string representation of a ClickHouse type into an AST-like object. It iterates through different types such as 'Int32', 'Array(Nullable(String))', and `Map(Int32, DateTime64(9, 'UTC'))` and logs the parsed output. The purpose is to illustrate how the function transforms type strings into structured objects for internal use or custom JSON serialization.\nSOURCE: https://github.com/clickhouse/clickhouse-js/blob/main/CHANGELOG.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfor (const type of [\n    'Int32',\n    'Array(Nullable(String))',\n    `Map(Int32, DateTime64(9, 'UTC'))`,\n  ]) {\n    console.log(`##### Source ClickHouse type: ${type}`)\n    console.log(parseColumnType(type))\n  }\n```\n\n----------------------------------------\n\nTITLE: Type Hinting with JSONObjectsEachRow Before v1.0.0 (TypeScript)\nDESCRIPTION: Illustrates how to manually specify the type hint, including the shape of the data, prior to version 1.0.0 when using the `JSONObjectsEachRow` format. It highlights the need to explicitly define the `Record<string, Data>` type for the result set.\nSOURCE: https://github.com/clickhouse/clickhouse-js/blob/main/CHANGELOG.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntype Data = { foo: string }\n\nconst resultSet = await client.query({\n  query: 'SELECT * FROM my_table',\n  format: 'JSONObjectsEachRow',\n})\n\n// pre-1.0.0, `resultOld` has type Record<string, Data>\nconst resultOld = resultSet.json<Record<string, Data>>()\n// const resultOld = resultSet.json<Data>() // incorrect! The type hint should've been `Record<string, Data>` here.\n\n```\n\n----------------------------------------\n\nTITLE: Streaming Data with JSONEachRow After v1.0.0 (TypeScript)\nDESCRIPTION: Shows how the data streaming with `JSONEachRow` is improved in version 1.0.0, with the `streamNew` variable typed as `StreamReadable<T>`.  Type hints are inferred for rows, eliminating the need for explicit type hints in subsequent `json` calls.\nSOURCE: https://github.com/clickhouse/clickhouse-js/blob/main/CHANGELOG.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// 1.0.0\n// `streamNew` is now StreamReadable<T> (Node.js Stream.Readable with a bit more type hints);\n// type hint for the further `json` calls can be added here (and removed from the `json` calls)\nconst streamNew = resultSet.stream<Data>()\n// `rows` are inferred as an Array<Row<Data, \"JSONEachRow\">> instead of `any`\nstreamNew.on('data', (rows) => {\n  // `row` is inferred as Row<Data, \"JSONEachRow\">\n  rows.forEach((row) => {\n    // no explicit type hints required, you can use `forEach` straight away and TS compiler will be happy\n    const t = row.text\n    const j = row.json() // `j` will be of type Data\n  })\n})\n\n// async iterator now also has type hints\n// similarly to the `on(data)` example above, `rows` are inferred as Array<Row<Data, \"JSONEachRow\">>\nfor await (const rows of streamNew) {\n  // `row` is inferred as Row<Data, \"JSONEachRow\">\n  rows.forEach((row) => {\n    const t = row.text\n    const j = row.json() // `j` will be of type Data\n  })\n}\n\n```\n\n----------------------------------------\n\nTITLE: ClickHouse Settings via URL Configuration (TypeScript)\nDESCRIPTION: Demonstrates how to configure ClickHouse settings using URL parameters, specifically `ch_async_insert` and `ch_wait_for_async_insert`.  Settings prefixed with `ch_` are automatically added to the `clickhouse_settings` object.\nSOURCE: https://github.com/clickhouse/clickhouse-js/blob/main/CHANGELOG.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\ncreateClient({\n  clickhouse_settings: {\n    async_insert: 1,\n    wait_for_async_insert: 1,\n  },\n})\n\n```\n\n----------------------------------------\n\nTITLE: Disable Keep-Alive in ClickHouse JS\nDESCRIPTION: This code snippet demonstrates how to disable the Keep-Alive feature in the ClickHouse JS client. By setting `keep_alive.enabled` to `false` in the client configuration, the client will not attempt to reuse connections, creating a new connection for each request.\nSOURCE: https://github.com/clickhouse/clickhouse-js/blob/main/CHANGELOG.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nconst client = createClient({\n  keep_alive: {\n    enabled: false,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: HTTP Headers via URL Configuration (TypeScript)\nDESCRIPTION: Illustrates how to configure HTTP headers using URL parameters, specifically `http_header_x-clickhouse-auth`.  Headers prefixed with `http_header_` are automatically added to the `http_headers` object.\nSOURCE: https://github.com/clickhouse/clickhouse-js/blob/main/CHANGELOG.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\ncreateClient({\n  http_headers: {\n    'x-clickhouse-auth': 'foobar',\n  },\n})\n\n```\n\n----------------------------------------\n\nTITLE: Run Random Integers Streaming Memory Leak Test (Custom Configuration)\nDESCRIPTION: Compiles and runs the random integers streaming memory leak test with custom configuration using environment variables. It sets `BATCH_SIZE`, `ITERATIONS`, and `LOG_INTERVAL` before executing the compiled JavaScript code.\nSOURCE: https://github.com/clickhouse/clickhouse-js/blob/main/benchmarks/leaks/README.md#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ntsc --project tsconfig.json \\\n&& BATCH_SIZE=100000000 ITERATIONS=1000 LOG_INTERVAL=100 \\\nnode --expose-gc --max-old-space-size=256 \\\nbuild/benchmarks/leaks/memory_leak_random_integers.js\n```\n\n----------------------------------------\n\nTITLE: Querying Response Headers in ClickHouse JS\nDESCRIPTION: This snippet shows how to retrieve response headers from a ClickHouse query using the `ResultSet.response_headers` property. The example executes a simple SELECT query and logs the 'content-type' header to the console. The goal is to demonstrate how to access response metadata from ClickHouse operations.\nSOURCE: https://github.com/clickhouse/clickhouse-js/blob/main/CHANGELOG.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst rs = await client.query({\n    query: 'SELECT * FROM system.numbers LIMIT 1',\n    format: 'JSONEachRow',\n  })\n  console.log(rs.response_headers['content-type'])\n```\n\n----------------------------------------\n\nTITLE: Type Inference with JSONObjectsEachRow After v1.0.0 (TypeScript)\nDESCRIPTION: Shows how the client infers the data shape in version 1.0.0 and later when using `JSONObjectsEachRow`.  The client can now infer that the result should be a `Record` from the format literal, reducing the need for manual type hinting.\nSOURCE: https://github.com/clickhouse/clickhouse-js/blob/main/CHANGELOG.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// 1.0.0, `resultNew` also has type Record<string, Data>; client inferred that it has to be a Record from the format literal.\nconst resultNew = resultSet.json<Data>()\n```\n\n----------------------------------------\n\nTITLE: Streaming Data with JSONEachRow Before v1.0.0 (TypeScript)\nDESCRIPTION: Demonstrates how to stream data using `JSONEachRow` before version 1.0.0. It highlights the need for explicit type hints for rows and the `json` method due to the `streamOld` variable being a regular `Node.js Stream.Readable`.\nSOURCE: https://github.com/clickhouse/clickhouse-js/blob/main/CHANGELOG.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst resultSet = await client.query({\n  query: 'SELECT * FROM my_table',\n  format: 'JSONEachRow',\n})\n\n// pre-1.0.0\n// `streamOld` was just a regular Node.js Stream.Readable\nconst streamOld = resultSet.stream()\n// `rows` were `any`, needed an explicit type hint\nstreamNew.on('data', (rows: Row[]) => {\n  rows.forEach((row) => {\n    // without an explicit type hint to `rows`, calling `forEach` and other array methods resulted in TS compiler errors\n    const t = row.text\n    const j = row.json<Data>() // `j` needed a type hint here, otherwise, it's `unknown`\n  })\n})\n\n```\n\n----------------------------------------\n\nTITLE: Disabling ResultSet.stream for Certain Data Formats (TypeScript)\nDESCRIPTION: Illustrates how calling `ResultSet.stream` is now correctly typed to return `never` for data formats like `JSON` and `JSONObjectsEachRow`, which do not support streaming. This prevents incorrect usage and provides compile-time errors.\nSOURCE: https://github.com/clickhouse/clickhouse-js/blob/main/CHANGELOG.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst resultSet = await client.query('SELECT * FROM table', {\n  format: 'JSON',\n})\nconst stream = resultSet.stream() // `stream` is `never`\n\n```\n\n----------------------------------------\n\nTITLE: Disabling ResultSet.json for CSV and Similar Formats (TypeScript)\nDESCRIPTION: Shows how calling `ResultSet.json` is now correctly typed to return `never` for 'raw' data formats like `CSV`. This prevents incorrect usage and provides compile-time errors.\nSOURCE: https://github.com/clickhouse/clickhouse-js/blob/main/CHANGELOG.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst resultSet = await client.query('SELECT * FROM table', {\n  format: 'CSV',\n})\n// `json` is `never`; same if you stream CSV, and call `Row.json` - it will be `never`, too.\nconst json = resultSet.json()\n\n```\n\n----------------------------------------\n\nTITLE: Run TypeScript Example\nDESCRIPTION: This command executes a TypeScript example using ts-node, which transpiles the TypeScript code on the fly. Replace 'array_json_each_row.ts' with the desired example file name.\nSOURCE: https://github.com/clickhouse/clickhouse-js/blob/main/examples/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nts-node --transpile-only array_json_each_row.ts\n```\n\n----------------------------------------\n\nTITLE: Install NPM Dependencies\nDESCRIPTION: This command changes the working directory to the 'examples' folder and installs the necessary dependencies using npm. This is a prerequisite for running most of the example programs.\nSOURCE: https://github.com/clickhouse/clickhouse-js/blob/main/examples/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd examples\nnpm i\n```\n\n----------------------------------------\n\nTITLE: Running Node.js Integration Tests\nDESCRIPTION: This command runs the integration tests for the Node.js client. These tests require a running ClickHouse server and test the interaction between the client and the server.\nSOURCE: https://github.com/clickhouse/clickhouse-js/blob/main/CONTRIBUTING.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test:node:integration\n```\n\n----------------------------------------\n\nTITLE: Running Node.js Integration Tests on Local Cluster\nDESCRIPTION: Runs integration tests for the Node.js client in a local ClickHouse cluster environment. Requires the cluster to be running (e.g., using `docker compose -f docker-compose.cluster.yml up -d`).\nSOURCE: https://github.com/clickhouse/clickhouse-js/blob/main/CONTRIBUTING.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test:node:integration:local_cluster\n```\n\n----------------------------------------\n\nTITLE: Start ClickHouse Instance with Docker Compose\nDESCRIPTION: Starts a local ClickHouse instance using the `docker-compose.yml` file in the root directory. This is a prerequisite for running the memory leak tests.\nSOURCE: https://github.com/clickhouse/clickhouse-js/blob/main/benchmarks/leaks/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ndocker-compose up -d\n```\n\n----------------------------------------\n\nTITLE: Running Node.js Integration Tests in Cloud\nDESCRIPTION: Executes integration tests for the Node.js client, connecting to a ClickHouse Cloud instance. Requires environment variables `CLICKHOUSE_CLOUD_HOST` and `CLICKHOUSE_CLOUD_PASSWORD` to be properly configured.\nSOURCE: https://github.com/clickhouse/clickhouse-js/blob/main/CONTRIBUTING.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test:node:integration:cloud\n```\n\n----------------------------------------\n\nTITLE: Starting ClickHouse Cluster with Docker Compose\nDESCRIPTION: This command starts a ClickHouse cluster (two nodes) using Docker Compose, configured via `docker-compose.cluster.yml`. This setup is specifically for running tests in a clustered environment.\nSOURCE: https://github.com/clickhouse/clickhouse-js/blob/main/CONTRIBUTING.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose -f docker-compose.cluster.yml up -d\n```\n\n----------------------------------------\n\nTITLE: Run Cluster TypeScript Example\nDESCRIPTION: This command executes the TypeScript example related to on-premise cluster setup using ts-node.\nSOURCE: https://github.com/clickhouse/clickhouse-js/blob/main/examples/README.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nts-node --transpile-only create_table_on_premise_cluster.ts\n```\n\n----------------------------------------\n\nTITLE: Run TLS TypeScript Example\nDESCRIPTION: This command executes a TLS-specific TypeScript example using ts-node. Replace `node/basic_tls.ts` or `node/mutual_tls.ts` with the desired TLS example file.\nSOURCE: https://github.com/clickhouse/clickhouse-js/blob/main/examples/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nts-node --transpile-only node/basic_tls.ts\nts-node --transpile-only node/mutual_tls.ts\n```\n\n----------------------------------------\n\nTITLE: Running Web Integration Tests\nDESCRIPTION: This command runs the integration tests for the Web client, using Karma as the test runner. These tests require a running ClickHouse server and test the interaction between the client and the server in a web browser environment.\nSOURCE: https://github.com/clickhouse/clickhouse-js/blob/main/CONTRIBUTING.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test:web:integration\n```\n\n----------------------------------------\n\nTITLE: Running Web Integration Tests on Local Cluster\nDESCRIPTION: Executes web integration tests in a local ClickHouse cluster setup. The tests are run using Karma, and verify client-server interactions in a clustered environment.\nSOURCE: https://github.com/clickhouse/clickhouse-js/blob/main/CONTRIBUTING.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test:web:integration:local_cluster\n```\n\n----------------------------------------\n\nTITLE: Running Web Integration Tests in Cloud\nDESCRIPTION: Executes web integration tests, connecting to a ClickHouse Cloud instance.  Requires environment variables `CLICKHOUSE_CLOUD_HOST` and `CLICKHOUSE_CLOUD_PASSWORD` to be properly configured, and uses Karma test runner.\nSOURCE: https://github.com/clickhouse/clickhouse-js/blob/main/CONTRIBUTING.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test:web:integration:cloud\n```\n\n----------------------------------------\n\nTITLE: Run Cloud TypeScript Example\nDESCRIPTION: This command runs a ClickHouse Cloud example using ts-node. The example assumes the use of the 'default' user and database.\nSOURCE: https://github.com/clickhouse/clickhouse-js/blob/main/examples/README.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nts-node --transpile-only create_table_cloud.ts\n```\n\n----------------------------------------\n\nTITLE: Prepare Input Data for Brown University Benchmark\nDESCRIPTION: Downloads and prepares the input data (mgbench1.csv) for the Brown University benchmark. It downloads the compressed file, decompresses it, and moves it to the appropriate directory. The resulting CSV file is used by the `memory_leak_brown.ts` test.\nSOURCE: https://github.com/clickhouse/clickhouse-js/blob/main/benchmarks/leaks/README.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nmkdir -p benchmarks/leaks/input \\\n&& curl https://datasets.clickhouse.com/mgbench1.csv.xz --output mgbench1.csv.xz \\\n&& xz -v -d mgbench1.csv.xz \\\n&& mv mgbench1.csv benchmarks/leaks/input\n```\n\n----------------------------------------\n\nTITLE: Adding /etc/hosts entry for TLS Testing\nDESCRIPTION: This command adds an entry to the /etc/hosts file. This is required for running TLS tests as the generated certificates assume TLS requests use `server.clickhouseconnect.test` as the hostname. Requires sudo privileges.\nSOURCE: https://github.com/clickhouse/clickhouse-js/blob/main/CONTRIBUTING.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo -- sh -c \"echo 127.0.0.1 server.clickhouseconnect.test >> /etc/hosts\"\n```\n\n----------------------------------------\n\nTITLE: Running Node.js TLS Integration Tests\nDESCRIPTION: This command runs the TLS integration tests for the Node.js client, testing secure connections to a ClickHouse server using TLS certificates.\nSOURCE: https://github.com/clickhouse/clickhouse-js/blob/main/CONTRIBUTING.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test:node:tls\n```\n\n----------------------------------------\n\nTITLE: Update /etc/hosts for TLS\nDESCRIPTION: This command adds an entry to the `/etc/hosts` file, mapping `server.clickhouseconnect.test` to `127.0.0.1`. This is necessary for the TLS examples to work correctly because they use self-signed certificates.\nSOURCE: https://github.com/clickhouse/clickhouse-js/blob/main/examples/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo -- sh -c \"echo 127.0.0.1 server.clickhouseconnect.test >> /etc/hosts\"\n```\n\n----------------------------------------\n\nTITLE: Running Type Checking\nDESCRIPTION: This command runs the TypeScript type checker to identify any type-related errors in the codebase. It is an important step to ensure code quality and prevent runtime issues.\nSOURCE: https://github.com/clickhouse/clickhouse-js/blob/main/CONTRIBUTING.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run typecheck\n```\n\n----------------------------------------\n\nTITLE: Starting ClickHouse with Docker Compose\nDESCRIPTION: This command starts a single ClickHouse server using Docker Compose. This is used for running integration tests in a local environment.\nSOURCE: https://github.com/clickhouse/clickhouse-js/blob/main/CONTRIBUTING.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose up -d\n```\n\n----------------------------------------\n\nTITLE: Cloning the ClickHouse JS Repository\nDESCRIPTION: This command clones the ClickHouse JS repository from GitHub to your local machine. Replace [YOUR_USERNAME] with your actual GitHub username.  It then navigates into the cloned directory.\nSOURCE: https://github.com/clickhouse/clickhouse-js/blob/main/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/[YOUR_USERNAME]/clickhouse-js\ncd clickhouse-js\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with NPM\nDESCRIPTION: This command installs the necessary dependencies for the ClickHouse JS client using NPM.  This is a prerequisite for running tests and building the project.\nSOURCE: https://github.com/clickhouse/clickhouse-js/blob/main/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i\n```\n\n----------------------------------------\n\nTITLE: Running ESLint with Fix\nDESCRIPTION: This command runs ESLint to check for code style and potential issues, and automatically attempts to fix any violations. It helps to maintain a consistent code style across the project.\nSOURCE: https://github.com/clickhouse/clickhouse-js/blob/main/CONTRIBUTING.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run lint:fix\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests\nDESCRIPTION: This command executes the unit tests for the ClickHouse JS client. These tests do not require a running ClickHouse server and focus on individual components and functions.\nSOURCE: https://github.com/clickhouse/clickhouse-js/blob/main/CONTRIBUTING.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test:unit\n```\n\n----------------------------------------\n\nTITLE: Run Brown University Benchmark Memory Leak Test\nDESCRIPTION: Compiles the TypeScript code for the Brown University benchmark memory leak test and then runs the compiled JavaScript file with increased memory allocation using Node.js.  It uses `tsc` to compile and `node` to execute the code.\nSOURCE: https://github.com/clickhouse/clickhouse-js/blob/main/benchmarks/leaks/README.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ntsc --project tsconfig.json \\\n&& node --expose-gc --max-old-space-size=256 \\\nbuild/benchmarks/leaks/memory_leak_brown.js\n```\n\n----------------------------------------\n\nTITLE: Run Random Integers Streaming Memory Leak Test (Default Configuration)\nDESCRIPTION: Compiles and runs the random integers streaming memory leak test with default configuration. It compiles the TypeScript and executes it with Node.js. The default configuration defines the batch size, number of iterations, and log interval.\nSOURCE: https://github.com/clickhouse/clickhouse-js/blob/main/benchmarks/leaks/README.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ntsc --project tsconfig.json \\\n&& node --expose-gc --max-old-space-size=256 \\\nbuild/benchmarks/leaks/memory_leak_random_integers.js\n```\n\n----------------------------------------\n\nTITLE: Run Random Arrays and Maps Memory Leak Test (Default Configuration)\nDESCRIPTION: Compiles and runs the random arrays and maps insertion memory leak test with default configuration. This test does not use streaming and allocates/deallocates memory heavily.\nSOURCE: https://github.com/clickhouse/clickhouse-js/blob/main/benchmarks/leaks/README.md#_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ntsc --project tsconfig.json \\\n&& node --expose-gc --max-old-space-size=256 \\\nbuild/benchmarks/leaks/memory_leak_arrays.js\n```\n\n----------------------------------------\n\nTITLE: Run Random Arrays and Maps Memory Leak Test (Custom Configuration)\nDESCRIPTION: Compiles and runs the random arrays and maps insertion memory leak test with custom configuration, setting environment variables and increasing the maximum old space size for the Node.js process.\nSOURCE: https://github.com/clickhouse/clickhouse-js/blob/main/benchmarks/leaks/README.md#_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ntsc --project tsconfig.json \\\n&& BATCH_SIZE=10000 ITERATIONS=1000 LOG_INTERVAL=100 \\\nnode --expose-gc --max-old-space-size=1024 \\\nbuild/benchmarks/leaks/memory_leak_arrays.js\n```\n\n----------------------------------------\n\nTITLE: Releasing Common Package Manually\nDESCRIPTION: This command builds and prepares the common package, packs it into a tarball, and publishes it to NPM. It's part of the manual release process.\nSOURCE: https://github.com/clickhouse/clickhouse-js/blob/main/CONTRIBUTING.md#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nts-node .build/build_and_prepare.ts common && npm pack && npm publish\n```\n\n----------------------------------------\n\nTITLE: Releasing Node.js Client Manually\nDESCRIPTION: This command builds and prepares the Node.js client package, packs it into a tarball, and publishes it to NPM. It's used for manual releases of the Node.js client.\nSOURCE: https://github.com/clickhouse/clickhouse-js/blob/main/CONTRIBUTING.md#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nts-node .build/build_and_prepare.ts node && npm pack && npm publish\n```\n\n----------------------------------------\n\nTITLE: Releasing Web Client Manually\nDESCRIPTION: This command builds and prepares the Web client package, packs it into a tarball, and publishes it to NPM. It's part of the manual release process for the Web client.\nSOURCE: https://github.com/clickhouse/clickhouse-js/blob/main/CONTRIBUTING.md#_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nts-node .build/build_and_prepare.ts web && npm pack && npm publish\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Up\nDESCRIPTION: This command starts two local ClickHouse instances using Docker Compose: one with plain authentication and another requiring TLS. It sets up the environment for running various client examples.\nSOURCE: https://github.com/clickhouse/clickhouse-js/blob/main/examples/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose up -d\n```"
  }
]