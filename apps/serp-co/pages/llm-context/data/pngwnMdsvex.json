[
  {
    "owner": "pngwn",
    "repo": "mdsvex",
    "content": "TITLE: Parsing Svelte Component in JavaScript\nDESCRIPTION: Demonstrates parsing a Svelte component with a directive into an AST node, including properties and directives.\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/svast/README.md#2025-04-21_snippet_14\n\nLANGUAGE: svelte\nCODE:\n```\n<MyComponent on:click|preventDefault={handleClick} />\n```\n\nLANGUAGE: js\nCODE:\n```\n{\n  type: 'svelteElement',\n  tagName: 'MyComponent',\n  properties: [{\n    type: 'svelteDirective',\n    name: 'on',\n    specifier: 'click',\n    modifiers: [{\n      type: 'svelteModifier', value: 'preventDefault'\n    }],\n    value: [{\n      type: 'svelteExpression',\n      value: 'handleClick'\n    }]\n  }],\n  selfClosing: true,\n  children: []\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating Svelte Components in Markdown with MDsveX\nDESCRIPTION: Example of how to import and use a Svelte component within a markdown document using MDsveX. This demonstrates importing a Chart component and rendering it within markdown content.\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/mdsvex/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<script>\n  import { Chart } from '../components/Chart.svelte';\n</script>\n\n# Here's a chart\n\nThe chart is rendered inside our MDsveX document.\n\n<Chart />\n```\n\n----------------------------------------\n\nTITLE: Defining ParseOptions Interface in TypeScript\nDESCRIPTION: TypeScript interface for the options object accepted by the parse function. It includes the value property for the source code and an optional generatePositions flag.\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/svelte-parse/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ParseOptions {\n\tvalue: string;\n\tgeneratePositions?: boolean; // default = false\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Property Interface for SVAST in IDL\nDESCRIPTION: Describes the Property interface, representing an element's properties reflecting HTML, SVG, ARIA, XML, XMLNS, or XLink attributes.\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/svast/README.md#2025-04-21_snippet_20\n\nLANGUAGE: idl\nCODE:\n```\ninterface Property <: BaseProperty {\n  type: 'svelteProperty'\n}\n```\n\n----------------------------------------\n\nTITLE: Using walk function to traverse svast tree\nDESCRIPTION: Example of using the walk function to traverse a svast tree, collecting node names and optionally stopping traversal of specific node types.\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/svast-utils/README.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { walk } from 'svast-utils';\n\nconst tree = {\n  type: 'root',\n  children: [\n    { type: 'hello' },\n    { type: 'hello' },\n    { type: 'somethingelse' , children: [ ... ]},\n  ]\n}\n\nconst node_names = [];\n\nwalk(tree, (node, parent) => {\n  node_names.push(node.type);\n  // this will prevent the children of this node from being walked\n  if (node.type === 'somethingelse') return false;\n})\n\n// node_names === ['root', 'hello', 'hello', 'somethingelse']\n```\n\n----------------------------------------\n\nTITLE: JavaScript Representation of EachBlock Node\nDESCRIPTION: Shows the JavaScript object representation of an EachBlock node in the Svelte AST, including item name, index, and key.\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/svast/README.md#2025-04-21_snippet_38\n\nLANGUAGE: js\nCODE:\n```\n{\n  type: 'svelteEachBlock',\n  itemName: {\n    type: 'svelteExpression',\n    value: '{ some, thing }'\n  },\n  itemIndex: {\n    type: 'svelteExpression',\n    value: 'index'\n  },\n  itemKey: {\n    type: 'svelteExpression',\n    value: 'thing'\n  },\n  children: [{\n    type: 'svelteElement',\n    tagName: 'p',\n    properties: [],\n    selfClosing: false,\n    children: [{\n      type: 'svelteExpression',\n      value: 'some'\n    }]\n  }]\n}\n```\n\n----------------------------------------\n\nTITLE: Using parse Function to Generate Svelte AST in JavaScript\nDESCRIPTION: Example of using the parse function to generate an Abstract Syntax Tree (AST) from Svelte source code. It demonstrates parsing a simple Svelte component with an HTML expression and an input element.\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/svelte-parse/README.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { parse } from 'svelte-parse';\n\nconst source = `\n{@html someHTML}\n\n<div>\n  <input on:input={(e) => console.log(e)}/>\n</div>\n`;\n\nconst { ast, errors } = parse({ value: source, generatePositions: true });\n\n// TODO, what does this return? run it\n// {\n// \ttype: 'root',\n// \tchildren:\n// }\n```\n\n----------------------------------------\n\nTITLE: Defining Point Interface for Parser Position in TypeScript\nDESCRIPTION: TypeScript interface representing a point in the source document. It includes properties for line number, column number, and character offset.\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/svelte-parse/README.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Point {\n\tline: number;\n\tcolumn: number;\n\toffset: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Using cleanPositions function to remove position data\nDESCRIPTION: Example of using the cleanPositions function to remove all positional data from nodes in a svast tree. This function mutates the original tree, removing position properties.\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/svast-utils/README.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { cleanPositions } from 'svast-utils';\n\nconst tree = {\n  type: 'root',\n  children: [\n    {\n      type: 'hello',\n      position: { start: { ... }, end: { ... } }\n    },\n    {\n      type: 'hello',\n      position: { start: { ... }, end: { ... } }\n    },\n    {\n      type: 'somethingelse' ,\n      children: [ ... ],\n      position: { start: { ... }, end: { ... }}\n    },\n  ],\n  position: { start: { ... }, end: { ... }}\n}\n\nconst clean_tree = cleanPositions(tree);\n\n// clean_tree === tree === {\n//   type: 'root',\n//   children: [\n//     { type: 'hello' },\n//     { type: 'hello' },\n//     {\n//       type: 'somethingelse' ,\n//       children: [ ... ],\n//     },\n//   ],\n// }\n```\n\n----------------------------------------\n\nTITLE: Defining UnistPosition Interface in IDL\nDESCRIPTION: Describes the UnistPosition interface, representing a node's location in the source file with start and end points, and optional indent.\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/svast/README.md#2025-04-21_snippet_1\n\nLANGUAGE: idl\nCODE:\n```\ninterface UnistPosition {\n  start: UnistPoint\n  end: UnistPoint\n  indent: [number >= 1]?\n}\n```\n\n----------------------------------------\n\nTITLE: Defining UnistPoint Interface in IDL\nDESCRIPTION: Specifies the UnistPoint interface, representing a specific point in the source file with line, column, and optional offset properties.\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/svast/README.md#2025-04-21_snippet_2\n\nLANGUAGE: idl\nCODE:\n```\ninterface UnistPoint {\n  line: number >= 1\n  column: number >= 1\n  offset: number >= 0?\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Element Interface for SVAST in IDL\nDESCRIPTION: Specifies the Element interface, representing a DOM element in Svelte, extending the BaseTag interface.\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/svast/README.md#2025-04-21_snippet_11\n\nLANGUAGE: idl\nCODE:\n```\ninterface Element <: BaseTag {\n  type: \"svelteElement\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Result Interface for parseNode Function in TypeScript\nDESCRIPTION: TypeScript interface for the result object returned by the parseNode function. It includes properties for the parsed and unparsed portions of the source, the parsed AST node, and the final parser position.\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/svelte-parse/README.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Result {\n\tchomped: string;\n\tunchomped: string;\n\tparsed: Node;\n\tposition?: Point & { index?: number };\n}\n```\n\n----------------------------------------\n\nTITLE: Defining BaseTag Interface for SVAST in IDL\nDESCRIPTION: Specifies the BaseTag interface, the base for all element and component types in Svelte, including properties and self-closing status.\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/svast/README.md#2025-04-21_snippet_8\n\nLANGUAGE: idl\nCODE:\n```\ninterface BaseTag <: Parent {\n  tagName: string\n  properties: [Property | Directive]\n  selfClosing: boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Svelte Element with Directives in JavaScript\nDESCRIPTION: Demonstrates parsing a Svelte element with multiple directives into an AST node, including directive details and modifiers.\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/svast/README.md#2025-04-21_snippet_23\n\nLANGUAGE: svelte\nCODE:\n```\n<a class:myclass={x ? y : z} on:click|preventDefault={(e) => fn(e)} />\n```\n\nLANGUAGE: js\nCODE:\n```\n{\n  type: 'svelteElement',\n  tagName: 'a',\n  properties: [{\n    type: 'svelteDirective',\n    name: 'class',\n    specifier: 'myclass',\n    value: [{\n      type: 'svelteExpression',\n      value: 'x ? y : z'\n    }],\n    shorthand: 'none',\n    modifiers: [],\n  }, {\n    type: 'svelteDirective',\n    name: 'on',\n    specifier: 'click',\n    value: [{\n      type: 'svelteExpression',\n      value: '(e) => fn(e)'\n    }],\n    shorthand: 'none',\n    modifiers: [{\n      type: 'svelteModifier',\n      value: 'preventDefault'\n    }],\n  }],\n  selfClosing: true,\n  children: []\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Svelte Element in JavaScript\nDESCRIPTION: Demonstrates parsing a Svelte input element with a directive into an AST node, including properties and directives.\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/svast/README.md#2025-04-21_snippet_12\n\nLANGUAGE: svelte\nCODE:\n```\n<input on:click|preventDefault={handleClick} />\n```\n\nLANGUAGE: js\nCODE:\n```\n{\n  type: 'svelteElement',\n  tagName: 'input',\n  properties: [{\n    type: 'svelteDirective',\n    name: 'on',\n    specifier: 'click',\n    modifiers: [{\n      type: 'modifier', value: 'preventDefault'\n    }],\n    value: [{\n      type: 'svelteExpression',\n      value: 'handleClick'\n    }]\n  }],\n  selfClosing: true,\n  children: []\n}\n```\n\n----------------------------------------\n\nTITLE: Defining EachBlock Node Interface in IDL\nDESCRIPTION: Defines the interface for an EachBlock node in the Svelte AST. It represents a Svelte #each block for iterating over collections.\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/svast/README.md#2025-04-21_snippet_36\n\nLANGUAGE: idl\nCODE:\n```\nexport interface EachBlock <: SvelteParent {\n  type: 'svelteEachBlock'\n  expression: Expression\n  itemName: Expression\n  itemIndex: Expression?\n  itemKey: Expression?\n}\n```\n\n----------------------------------------\n\nTITLE: Defining BranchingBlock Node Interface\nDESCRIPTION: Defines the interface for a BranchingBlock node in the Svelte AST. It represents a Svelte block that allows multiple named branches.\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/svast/README.md#2025-04-21_snippet_33\n\nLANGUAGE: idl\nCODE:\n```\ninterface BranchingBlock <: Parent {\n  type: 'svelteBranchingBlock'\n  name: string\n  branches: [Branch]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining VoidBlock Node Interface\nDESCRIPTION: Defines the interface for a VoidBlock node in the Svelte AST. It represents a void block that doesn't allow branches, such as the @html block.\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/svast/README.md#2025-04-21_snippet_30\n\nLANGUAGE: idl\nCODE:\n```\ninterface VoidBlock <: Node {\n  type: 'svelteVoidBlock'\n  name: string\n  expression: Expression\n}\n```\n\n----------------------------------------\n\nTITLE: Escaping Special Characters in Markdown\nDESCRIPTION: A comprehensive list of special characters that need to be escaped in Markdown using the backslash character. This allows displaying literal characters that would otherwise be interpreted as Markdown syntax elements.\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/mdsvex/test/_fixtures/markdown/input/escaping.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n\\\\\n\n\\`\n\n\\*\n\n\\_\n\n\\{\n\n\\}\n\n\\[\n\n\\]\n\n\\(\n\n\\)\n\n\\#\n\n\\+\n\n\\-\n\n\\.\n\n\\!\n```\n\n----------------------------------------\n\nTITLE: Defining Parent Interface for SVAST in IDL\nDESCRIPTION: Describes the Parent interface for SVAST, extending UnistParent with Svelte-specific child node types.\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/svast/README.md#2025-04-21_snippet_5\n\nLANGUAGE: idl\nCODE:\n```\ninterface Parent <: UnistParent {\n  children: [\n    | SvelteElement\n    | SvelteComponent\n    | Comment\n    | Text\n    | SvelteExpression\n    | VoidBlock\n    | BranchingBlock\n    | IfBlock\n    | EachBlock\n    | AwaitBlock\n    | SvelteTag\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing svelte-parse with npm\nDESCRIPTION: Command to install svelte-parse using npm package manager.\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/svelte-parse/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i svelte-parse\n```\n\n----------------------------------------\n\nTITLE: Parsing Svelte Meta Tag in JavaScript\nDESCRIPTION: Demonstrates parsing a <svelte:self /> tag into an AST node, including properties and self-closing status.\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/svast/README.md#2025-04-21_snippet_10\n\nLANGUAGE: svelte\nCODE:\n```\n<svelte:self this={Component} />\n```\n\nLANGUAGE: js\nCODE:\n```\n{\n  type: 'svelteTag',\n  tagName: 'self',\n  properties: [{\n    type: 'svelteProperty',\n    name: 'this',\n    modifiers: [],\n    value: [{\n      type: 'svelteExpression',\n      value: 'Component'\n    }]\n  }],\n  selfClosing: true,\n  children: []\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Directive Interface for SVAST in IDL\nDESCRIPTION: Specifies the Directive interface, representing a Svelte directive (x:y={z}), extending the BaseProperty interface.\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/svast/README.md#2025-04-21_snippet_22\n\nLANGUAGE: idl\nCODE:\n```\ninterface Directive <: BaseProperty {\n  type: 'svelteDirective'\n  specifier: string\n}\n```\n\n----------------------------------------\n\nTITLE: Installing MDsveX Core Package\nDESCRIPTION: Command to install the main MDsveX package using pkg.pr.new URL\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/template/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i https://pkg.pr.new/pngwn/MDsveX/mdsvex@e9631f1\n```\n\n----------------------------------------\n\nTITLE: Parsing Svelte Element Property in JavaScript\nDESCRIPTION: Demonstrates parsing a Svelte element property with an expression into an AST node, including property details and value.\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/svast/README.md#2025-04-21_snippet_21\n\nLANGUAGE: svelte\nCODE:\n```\n<a name=\"hello {friend}!\" />\n```\n\nLANGUAGE: js\nCODE:\n```\n{\n  type: 'svelteElement',\n  tagName: 'a',\n  properties: [{\n    type: 'svelteProperty',\n    name: 'name',\n    value: [{\n      type: 'text',\n      value: 'hello'\n    }, {\n      type: 'svelteExpression',\n      value: 'friend'\n    }, {\n      type: 'text',\n      value: '!'\n    }],\n    shorthand: 'none',\n    modifiers: [],\n  }],\n  selfClosing: true,\n  children: []\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ParseNodeOptions Interface in TypeScript\nDESCRIPTION: TypeScript interface for the options object accepted by the parseNode function. It includes properties for the source value, current position, child parser function, and various parsing flags.\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/svelte-parse/README.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ParseNodeOptions {\n\tvalue: string;\n\tcurrentPosition?: Point & { index?: number };\n\tchildParser: (\n\t\toptions: ParseNodeOptions\n\t) => [Node[], Point & { index?: number }, number];\n\tblock?: boolean;\n\tsilent?: boolean;\n\tgeneratePositions: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Svelte Parse Package\nDESCRIPTION: Command to install the Svelte parse package using pkg.pr.new URL\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/template/README.md#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nnpm i https://pkg.pr.new/pngwn/MDsveX/svelte-parse@e9631f1\n```\n\n----------------------------------------\n\nTITLE: Example of EachBlock in Svelte\nDESCRIPTION: Demonstrates the usage of an #each block with filtering, destructuring, index, and key in Svelte syntax.\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/svast/README.md#2025-04-21_snippet_37\n\nLANGUAGE: svelte\nCODE:\n```\n{#each array.filter(v => v.prop) as { some, thing }, index (thing)}\n  <p>{some}</p>\n{/each}\n```\n\n----------------------------------------\n\nTITLE: Installing svast-utils via npm\nDESCRIPTION: Command to install the svast-utils package using npm.\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/svast-utils/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i svast-utils\n```\n\n----------------------------------------\n\nTITLE: Example of VoidBlock in Svelte\nDESCRIPTION: Demonstrates the usage of a void block (@html) in Svelte syntax.\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/svast/README.md#2025-04-21_snippet_31\n\nLANGUAGE: svelte\nCODE:\n```\n{@html `<p>something</p>`}\n```\n\n----------------------------------------\n\nTITLE: Example of BranchingBlock in Svelte\nDESCRIPTION: Demonstrates the usage of a custom branching block in Svelte syntax.\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/svast/README.md#2025-04-21_snippet_34\n\nLANGUAGE: svelte\nCODE:\n```\n{#custom someExpression}\n  Hello\n{/custom}\n```\n\n----------------------------------------\n\nTITLE: Initializing Array and Declaring Function in JavaScript\nDESCRIPTION: This snippet demonstrates the creation of an array with string elements and defines a function that returns a string. It also includes a comment with Markdown-style formatting.\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/mdsvex/test/_fixtures/markdown/input/code-block-with-special-chars.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n//**this** code _has_ special chars\nvar arr = ['foo', 'bar', 'baz'];\nfunction () {\n    return 'foo';\n}\n\\n\n```\n\n----------------------------------------\n\nTITLE: Parsing Svelte Script Tag in JavaScript\nDESCRIPTION: Demonstrates parsing a Svelte script tag into an AST node, including its content as a child text node.\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/svast/README.md#2025-04-21_snippet_16\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  console.log('boo');\n</script>\n```\n\nLANGUAGE: js\nCODE:\n```\n{\n  type: 'svelteScript',\n  tagName: 'script',\n  properties: [],\n  selfClosing: false,\n  children: [\n    {\n      type: 'text',\n      value: '\\n  console.log('boo');\\n'\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Svelte Style Tag in JavaScript\nDESCRIPTION: Demonstrates parsing a Svelte style tag into an AST node, including its content as a child text node.\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/svast/README.md#2025-04-21_snippet_18\n\nLANGUAGE: svelte\nCODE:\n```\n<style>\n  h1 {\n    color: pink;\n  }\n</style>\n```\n\nLANGUAGE: js\nCODE:\n```\n{\n  type: 'svelteStyle',\n  tagName: 'style',\n  properties: [],\n  selfClosing: false,\n  children: [\n    {\n      type: 'text',\n      value: '\\n  h1 {\\n    color: pink;\\n  }\\n'\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining walk function type in TypeScript\nDESCRIPTION: TypeScript type definitions for the walk function and its callback. The walk function takes a Node and a callback function, returning a Node.\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/svast-utils/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype walk = (tree: Node, cb: walkCallback) => Node;\n\ntype walkCallback = (node: Node, parent: Node | undefined) => void | boolean;\n```\n\n----------------------------------------\n\nTITLE: Creating Horizontal Rules in Markdown Using Asterisks and Hyphens\nDESCRIPTION: Shows five different ways to create horizontal rules in Markdown. The examples demonstrate using three or more asterisks or hyphens, with or without spaces between them, to create divider lines in Markdown documents.\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/mdsvex/test/_fixtures/markdown/input/horizontal-rules.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* * *\n```\n\nLANGUAGE: markdown\nCODE:\n```\n***\n```\n\nLANGUAGE: markdown\nCODE:\n```\n*****\n```\n\nLANGUAGE: markdown\nCODE:\n```\n- - -\n```\n\nLANGUAGE: markdown\nCODE:\n```\n---------------------------------------\n```\n\n----------------------------------------\n\nTITLE: JavaScript Representation of BranchingBlock Node\nDESCRIPTION: Shows the JavaScript object representation of a BranchingBlock node in the Svelte AST.\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/svast/README.md#2025-04-21_snippet_35\n\nLANGUAGE: js\nCODE:\n```\n{\n  type: 'svelteBranchingBlock',\n  name: 'custom',\n  branches: [{\n    type: 'svelteBranch',\n    name: 'custom',\n    expression: {\n      type: 'svelteExpression',\n      value: 'someExpression'\n    },\n    children: [{\n      type: 'text',\n      value: 'Hello'\n    }]\n  }]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Ordered List in Markdown\nDESCRIPTION: This snippet shows how to create a simple ordered list in Markdown. It uses the number 1 followed by a period for each list item, which Markdown will automatically convert to sequential numbers when rendered.\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/mdsvex/test/_fixtures/markdown/input/ordered-list-wrong-numbers.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n 1.  Red\n 1.  Green\n 1.  Blue\n```\n\n----------------------------------------\n\nTITLE: Defining Script Interface for SVAST in IDL\nDESCRIPTION: Specifies the Script interface, representing Svelte script tags, extending the BaseTag interface.\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/svast/README.md#2025-04-21_snippet_15\n\nLANGUAGE: idl\nCODE:\n```\ninterface Component <: BaseTag {\n  type: \"svelteScript\"\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Plain Text in a Markdown Code Block\nDESCRIPTION: This example shows how to create a basic code block in Markdown using triple backticks. The content is displayed as plain text with code formatting.\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/mdsvex/test/_fixtures/markdown/input/code-block.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nThis is a code block.\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-line Blockquotes in Markdown\nDESCRIPTION: This example shows how to create a blockquote that spans multiple lines in Markdown. Each line of the blockquote begins with a '>' character, and a blank line can be used to create paragraph breaks within the blockquote.\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/mdsvex/test/_fixtures/markdown/input/lazy-blockquote.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n> This is a multi line blockquote test\n\n> With more than one line.\n```\n\n----------------------------------------\n\nTITLE: Defining Root Interface for SVAST in IDL\nDESCRIPTION: Describes the Root interface, representing the root node of a Svelte component tree.\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/svast/README.md#2025-04-21_snippet_7\n\nLANGUAGE: idl\nCODE:\n```\ninterface Root <: Parent {\n  type: \"root\"\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Blockquote Inside Code Block in Markdown\nDESCRIPTION: This code snippet demonstrates how a blockquote can be represented inside a code block using markdown-like syntax. The blockquote is indicated by the '>' symbol at the beginning of each line.\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/mdsvex/test/_fixtures/markdown/input/blockquote-inside-code.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n> this is a pseudo blockquote\n> inside a code block\n```\n\n----------------------------------------\n\nTITLE: Basic Markdown Bold Text Formatting\nDESCRIPTION: Shows different methods for making text bold in Markdown using both double asterisks (**) and double underscores (__)\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/mdsvex/test/_fixtures/markdown/input/strong.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n**important**\n\n__important__\n\nreally **freaking**strong\n```\n\n----------------------------------------\n\nTITLE: Defining Branch Node Interface in IDL\nDESCRIPTION: Defines the interface for a Branch node in the Svelte AST. It represents a branch within a Svelte block, containing a name and an associated expression.\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/svast/README.md#2025-04-21_snippet_39\n\nLANGUAGE: idl\nCODE:\n```\ninterface Branch <: Parent {\n  type: 'svelteBranch'\n  name: string\n  expression: Expression\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Shell Command with Variable Input\nDESCRIPTION: A shell code snippet that executes a command by passing input through a pipe to a markdown script. The command uses shell_exec to execute a shell command, passing a variable $input to a $markdown_script via pipe.\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/mdsvex/test/_fixtures/markdown/input/blockquote-nested-markdown.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nreturn shell_exec(\"echo $input | $markdown_script\");\n```\n\n----------------------------------------\n\nTITLE: Basic HTML Div Element\nDESCRIPTION: Simple HTML example showing a div element with text content.\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/mdsvex/test/_fixtures/markdown/input/github-style-codeblock.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div>HTML!</div>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Basic HTML5 Structural Tags\nDESCRIPTION: This snippet shows the usage of basic HTML5 structural tags such as section, header, footer, nav, article, and aside. It illustrates how these tags can be used for both single-line and multi-line content.\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/mdsvex/test/_fixtures/markdown/input/html5-strutural-tags.md#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<section>hello</section>\n<header>head</header>\n<footer>footsies</footer>\n<nav>navigation</nav>\n<article>read me</article>\n<aside>ignore me</aside>\n<article>read\nme</article>\n<aside>\nignore me\n</aside>\n```\n\n----------------------------------------\n\nTITLE: Example of HTML Comment in Svelte\nDESCRIPTION: Demonstrates how an HTML comment is represented in Svelte syntax.\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/svast/README.md#2025-04-21_snippet_25\n\nLANGUAGE: svelte\nCODE:\n```\n<!--Some thing here-->\n```\n\n----------------------------------------\n\nTITLE: JavaScript Representation of Text Node\nDESCRIPTION: Shows the JavaScript object representation of a Text node within a Svelte element node in the AST.\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/svast/README.md#2025-04-21_snippet_29\n\nLANGUAGE: js\nCODE:\n```\n{\n  type: 'svelteElement',\n  tagName: 'div',\n  properties: [],\n  selfClosing: false,\n  children: [{\n    type: 'text',\n    value: 'Hello there'\n  }]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining JavaScript Function with Backtick Variable\nDESCRIPTION: Example of a JavaScript function declaration that includes a string variable containing a backtick character.\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/mdsvex/test/_fixtures/markdown/input/github-style-codeblock.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction MyFunc(a) {\n    var s = '`';\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Text Content in Svelte\nDESCRIPTION: Demonstrates how text content is represented within a div element in Svelte syntax.\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/svast/README.md#2025-04-21_snippet_28\n\nLANGUAGE: svelte\nCODE:\n```\n<div>Hello there</div>\n```\n\n----------------------------------------\n\nTITLE: Defining Style Interface for SVAST in IDL\nDESCRIPTION: Describes the Style interface, representing Svelte style tags, extending the BaseTag interface.\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/svast/README.md#2025-04-21_snippet_17\n\nLANGUAGE: idl\nCODE:\n```\ninterface Component <: BaseTag {\n  type: \"svelteScript\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining JavaScript Function MyFunc\nDESCRIPTION: Demonstrates the creation of a JavaScript function named MyFunc that takes a single parameter 'a'. The function body is empty with only a comment placeholder.\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/mdsvex/test/_fixtures/markdown/input/github-style-at-start.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction MyFunc(a) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating H1 Heading in Markdown\nDESCRIPTION: This snippet demonstrates how to create a top-level (H1) heading in Markdown using the underline syntax. The text is followed by a line of equal signs.\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/mdsvex/test/_fixtures/markdown/input/h1-with-equals.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nThis is an H1\n=============\n```\n\n----------------------------------------\n\nTITLE: Defining UnistNode Interface in IDL\nDESCRIPTION: Specifies the base UnistNode interface, which most other nodes extend. It includes type, optional data, and position properties.\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/svast/README.md#2025-04-21_snippet_0\n\nLANGUAGE: idl\nCODE:\n```\ninterface UnistNode {\n  type: string\n  data: UnistData?\n  position: UnistPosition?\n}\n```\n\n----------------------------------------\n\nTITLE: CSS Font Size Declaration\nDESCRIPTION: CSS styling rule that sets the body font size using em units.\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/mdsvex/test/_fixtures/markdown/input/github-style-codeblock.md#2025-04-21_snippet_2\n\nLANGUAGE: css\nCODE:\n```\nbody {\n    font-size: 1.5em;\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Bold Text Syntax in Markdown Inline Code\nDESCRIPTION: This snippet demonstrates how to display Markdown bold syntax (`**text**`) as literal text within an inline code block using backticks.\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/mdsvex/test/_fixtures/markdown/input/emphasis-inside-inline-code.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n**foo**\n```\n\n----------------------------------------\n\nTITLE: Defining Component Interface for SVAST in IDL\nDESCRIPTION: Describes the Component interface, representing Svelte components (PascalCased tags), extending the BaseTag interface.\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/svast/README.md#2025-04-21_snippet_13\n\nLANGUAGE: idl\nCODE:\n```\ninterface Component <: BaseTag {\n  type: \"svelteComponent\"\n}\n```\n\n----------------------------------------\n\nTITLE: Nested Code Blocks in Markdown/HTML\nDESCRIPTION: This snippet demonstrates nested code blocks using HTML <code> tags with custom attributes. It shows how to create code blocks within code blocks.\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/mdsvex/test/_fixtures/markdown/input/literal-html-tags.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<code start=\"true\">some <code start=\"false\">code</code> inception</code>\n```\n\n----------------------------------------\n\nTITLE: Inserting HTML Line Break\nDESCRIPTION: This snippet demonstrates the use of the HTML line break tag to create a new line.\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/mdsvex/test/_fixtures/markdown/input/line-starts-with-html.md#2025-04-21_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<br>\n```\n\n----------------------------------------\n\nTITLE: Inline Code Block in Markdown/HTML\nDESCRIPTION: This example illustrates how to use inline code blocks within a sentence. It shows that Markdown syntax inside the code block is not interpreted.\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/mdsvex/test/_fixtures/markdown/input/literal-html-tags.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<code>inline **code** block</code>\n```\n\n----------------------------------------\n\nTITLE: Markdown Header Definition\nDESCRIPTION: A simple markdown header declaring the name of the utility package 'svast-utils'\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/svast-stringify/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# svast-utils\n```\n\n----------------------------------------\n\nTITLE: Defining Meta Interface for SVAST in IDL\nDESCRIPTION: Describes the SvelteTag interface, representing special Svelte-namespaced tags like <svelte:self />.\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/svast/README.md#2025-04-21_snippet_9\n\nLANGUAGE: idl\nCODE:\n```\ninterface SvelteTag <: BaseTag {\n  type: \"svelteMeta\"\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Link and Nested Divs\nDESCRIPTION: Shows a basic HTML structure with a hyperlink to Google's website and nested div elements for layout purposes. Demonstrates proper HTML nesting and anchor tag usage.\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/mdsvex/test/_fixtures/markdown/input/html-inside-listed-code.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"www.google.com\">google</a>\n<div>\n  <div>some div</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Div Element in Markdown\nDESCRIPTION: This example shows the use of an HTML <div> element in a Markdown document. It illustrates that Markdown syntax within the div is not processed.\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/mdsvex/test/_fixtures/markdown/input/literal-html-tags.md#2025-04-21_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div>some **div** yeah</div>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating HTML Comment Structures in mdsvex\nDESCRIPTION: This snippet showcases different ways HTML comments can be used in mdsvex, including simple comments, comments with Markdown-like content, comments within HTML tags, and multi-line comments with varying indentation.\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/mdsvex/test/_fixtures/markdown/input/html-comments.md#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- a comment -->\n<!-- a comment with *bogus* __markdown__ inside -->\n<p>words <!-- a comment --> words</p>\n<!-- comment --> words\n   <!-- comment -->\n    <!-- comment -->\n<!----------------------------------------------------------------------------------------------------------------------------------------------------\n<!-------------------------------------------------------------------->\n```\n\n----------------------------------------\n\nTITLE: Creating an HTML Heading\nDESCRIPTION: This code snippet demonstrates how to create a top-level heading in HTML using the h1 tag. The h1 tag is typically used for the main heading of a webpage or section.\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/mdsvex/test/_fixtures/markdown/input/code-block-html-escape.md#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<h1>Heading</h1>\n```\n\n----------------------------------------\n\nTITLE: Creating Markdown Inline Links with and without Title Attributes\nDESCRIPTION: Demonstrates two ways to create inline links in Markdown. The first example shows a link with a title attribute that appears as a tooltip, while the second example shows a basic link without a title attribute.\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/mdsvex/test/_fixtures/markdown/input/inline-anchors.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nThis is [an example](http://example.com/ \"Title\") inline link.\n\n[This link](http://example.net/) has no title attribute.\n```\n\n----------------------------------------\n\nTITLE: Declaring Variable in JavaScript using Fenced Code Block\nDESCRIPTION: This snippet shows how to declare a variable in JavaScript using a fenced code block. Fenced code blocks in markdown are created using triple backticks.\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/mdsvex/test/_fixtures/markdown/input/nested-gh-codeblocks.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar foobar = 'foo';\n```\n\n----------------------------------------\n\nTITLE: Defining BaseProperty Interface for SVAST in IDL\nDESCRIPTION: Specifies the BaseProperty interface, representing the base structure for element properties and directives.\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/svast/README.md#2025-04-21_snippet_19\n\nLANGUAGE: idl\nCODE:\n```\ninterface Property <: UnistNode {\n  name: string\n  shorthand: 'none' | 'boolean' | 'expression'\n  value: [Text | Expression]\n  modifiers: [Literal]\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding Image with Simple Filename in Markdown\nDESCRIPTION: This snippet demonstrates how to embed an image in Markdown using an image link. It includes a filename with a number and uses angle brackets to handle the space in the path.\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/mdsvex/test/_fixtures/markdown/input/images-followed-by-brackets.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n![image link](<./image/cat1.png>)(some text between brackets)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Markdown Emphasis Syntax\nDESCRIPTION: This code snippet showcases various Markdown syntax for emphasis, including italics, bold, and combinations thereof. It demonstrates the use of asterisks and underscores for creating emphasized text in different contexts.\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/mdsvex/test/_fixtures/markdown/input/emphasis.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n*single asterisks*\n\n_single underscores_\n\n**double asterisks**\n\n__double underscores__\n\ntext *with italic sentence* in middle\n\ntext __with bold sentence__ in middle\n\ntext with __bold text that\nspans across multiple__ lines\n\nunderscored_word\n\ndoubleunderscore__word\n\nasterix*word\n\ndoubleasterix**word\n\nline with_underscored word\n\nline with__doubleunderscored word\n\nline with*asterixed word\n\nline with**doubleasterixed word\n\nsome line_with_inner underscores\n\nsome line__with__inner double underscores\n\nsome line*with*inner asterixs\n\nsome line**with**inner double asterixs\n\nanother line with just _one underscore\n\nanother line with just __one double underscore\n\nanother line with just *one asterix\n\nanother line with just **one double asterix\n\na sentence with_underscore and another_underscore\n\na sentence with__doubleunderscore and another__doubleunderscore\n\na sentence with*asterix and another*asterix\n\na sentence with**doubleasterix and another**doubleasterix\n\nescaped word\\_with\\_underscores\n\nescaped word\\_\\_with\\_\\_double underscores\n\nescaped word_\\_with\\__single italic underscore\n\nescaped word\\*with*asterixs\n\nescaped word\\*\\*with\\*\\*asterixs\n\nescaped word**\\*with\\***bold asterixs\n\nfoo**bar**baz\n\nfoo__bar__baz\n\nthis is **<a href=\"//google.com\">imbued link with strong</a>**\n\nthis is __<a href=\"//google.com\">imbued link with strong</a>__\n\nthis link has underscore [some_link](http://www.google.com/some_link)\n\n___multiple___ italics and bolds with underscores in a ___paragraph___\n\n***multiple*** italics and bolds with asterisks in a ***paragraph***\n\n__multiple__ bolds with underscores in a __paragraph__\n\n**multiple** bolds with asterisks in a **paragraph**\n\n_multiple_ italics with underscores in a _paragraph_\n\n_multiple_ italics with asterisks in a _paragraph_\n```\n\n----------------------------------------\n\nTITLE: Plain Code Block with Tilde Delimiters\nDESCRIPTION: Code block using tilde syntax as delimiters without language specification.\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/mdsvex/test/_fixtures/markdown/input/github-style-codeblock.md#2025-04-21_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nanother piece of code\n```\n\n----------------------------------------\n\nTITLE: Embedding Image with Complex Filename in Markdown\nDESCRIPTION: This snippet shows how to embed an image with a more complex filename in Markdown. It handles parentheses in the filename by enclosing the entire path in angle brackets.\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/mdsvex/test/_fixtures/markdown/input/images-followed-by-brackets.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n![image link](<./image/cat(1).png>)(some text between brackets)\n```\n\n----------------------------------------\n\nTITLE: HTML Pre/Code Block with Attributes\nDESCRIPTION: Example of a code block using custom attributes on both pre and code tags.\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/mdsvex/test/_fixtures/markdown/input/pre-code-tags.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<pre nhaca=\"zulu\">\n<code bla=\"bla\">\nfoobar\n</code>\n</pre>\n```\n\n----------------------------------------\n\nTITLE: Defining UnistParent Interface in IDL\nDESCRIPTION: Specifies the UnistParent interface, extending UnistNode to include a children property for nodes containing other nodes.\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/svast/README.md#2025-04-21_snippet_4\n\nLANGUAGE: idl\nCODE:\n```\ninterface UnistParent <: UnistNode {\n  children: [UnistNode]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating URL-based Link References in Markdown\nDESCRIPTION: This example demonstrates how to create a link reference using the URL itself as the reference identifier. This allows for more intuitive reference naming in some cases.\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/mdsvex/test/_fixtures/markdown/input/strip-references.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[http://www.google.co.uk]: http://www.google.co.uk\n```\n\n----------------------------------------\n\nTITLE: Plain Code Block with Extended Backticks\nDESCRIPTION: Code block using five backticks as delimiters without language specification.\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/mdsvex/test/_fixtures/markdown/input/github-style-codeblock.md#2025-04-21_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nsome code\n```\n\n----------------------------------------\n\nTITLE: Defining Literal Interface for SVAST in IDL\nDESCRIPTION: Specifies the Literal interface, a generic node containing a string value, used by other nodes like comments.\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/svast/README.md#2025-04-21_snippet_6\n\nLANGUAGE: idl\nCODE:\n```\ninterface Literal<T> <: UnistNode {\n  type: T\n  value: string\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Image Link References in Markdown\nDESCRIPTION: This snippet shows how to define a numbered reference for an image link. It uses the same [1] syntax but points to an image URL.\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/mdsvex/test/_fixtures/markdown/input/strip-references.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n[1]: http://dsurl.stuff/something.jpg\n```\n\n----------------------------------------\n\nTITLE: Creating H3 Heading in Markdown\nDESCRIPTION: Demonstrates how to create a level 3 heading in markdown using hash symbols.\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/mdsvex/test/_fixtures/markdown/input/h3-with-single-hash.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### This is an H3\n```\n\n----------------------------------------\n\nTITLE: Defining H1 Heading in Markdown\nDESCRIPTION: Demonstrates the syntax for creating a top-level (H1) heading in markdown using hash symbols (#) both at the start and end of the line.\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/mdsvex/test/_fixtures/markdown/input/h1-with-double-hash.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# This is an H1 #\n```\n\n----------------------------------------\n\nTITLE: Variations in Link Reference Definition Spacing\nDESCRIPTION: These examples demonstrate different spacing patterns in link reference definitions. They show that Markdown is flexible with spaces around the colon and at the beginning of the line.\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/mdsvex/test/_fixtures/markdown/input/strip-references.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n[1]:http://www.google.co.uk\n\n [1]:http://www.google.co.uk\n```\n\n----------------------------------------\n\nTITLE: Defining Multi-line Code Block in Markdown\nDESCRIPTION: This snippet demonstrates how to create a multi-line code block in Markdown using triple backticks. The content inside the code block is displayed as-is, preserving line breaks and spacing.\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/mdsvex/test/_fixtures/markdown/input/github-style-linebreaks.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```\ncode can go here\nthis is rendered on a second line\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Text Node Interface in IDL\nDESCRIPTION: Defines the interface for a Text node in the Svelte AST. It represents bare text content within a Svelte template.\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/svast/README.md#2025-04-21_snippet_27\n\nLANGUAGE: idl\nCODE:\n```\ninterface Text <: Literal {\n  type: \"text\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating H6 Header in Markdown\nDESCRIPTION: This snippet shows how to create an H6 (smallest) header in Markdown using six hash symbols.\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/mdsvex/test/_fixtures/markdown/input/h6-with-single-hash.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n###### This is an H6\n```\n\n----------------------------------------\n\nTITLE: Simple HTML Div Element\nDESCRIPTION: A basic HTML markup example showing a div element with text content.\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/mdsvex/test/_fixtures/markdown/input/github-style-codeblock-inside-quote.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div>HTML!</div>\n```\n\n----------------------------------------\n\nTITLE: Defining Comment Node Interface in IDL\nDESCRIPTION: Defines the interface for a Comment node in the Svelte AST. It represents an HTML comment and contains the comment's content in the 'value' field.\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/svast/README.md#2025-04-21_snippet_24\n\nLANGUAGE: idl\nCODE:\n```\ninterface Comment <: Literal {\n  type: \"comment\"\n}\n```\n\n----------------------------------------\n\nTITLE: Inline HTML with Nested Span Element\nDESCRIPTION: An inline HTML code example containing a span element nested within text.\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/mdsvex/test/_fixtures/markdown/input/encodeHTMLCodeTags.md#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\nsome <span>text</span>\n```\n\n----------------------------------------\n\nTITLE: JavaScript Representation of Comment Node\nDESCRIPTION: Shows the JavaScript object representation of a Comment node in the Svelte AST.\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/svast/README.md#2025-04-21_snippet_26\n\nLANGUAGE: js\nCODE:\n```\n{type: 'comment', value: 'Some thing here'}\n```\n\n----------------------------------------\n\nTITLE: Code Block with Ellipsis Example\nDESCRIPTION: Two identical code blocks demonstrating the use of ellipsis notation\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/mdsvex/test/_fixtures/markdown/input/ellipsis.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nellipsis in code...\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nellipsis in code...\n```\n\n----------------------------------------\n\nTITLE: Creating an Unordered List of Colors in Markdown\nDESCRIPTION: This snippet demonstrates how to create a simple unordered list in Markdown format. It lists three primary colors: red, green, and blue.\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/mdsvex/test/_fixtures/markdown/input/unordered-list-asterisk.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n * Red\n * Green\n * Blue\n```\n\n----------------------------------------\n\nTITLE: JavaScript Representation of VoidBlock Node\nDESCRIPTION: Shows the JavaScript object representation of a VoidBlock node in the Svelte AST.\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/svast/README.md#2025-04-21_snippet_32\n\nLANGUAGE: js\nCODE:\n```\n{\n  type: 'svelteVoidBlock',\n  name: 'html',\n  expression: {\n    type: 'svelteExpression',\n    value: '<p>something</p>'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Mixed Blockquote and Regular Text in Code Block\nDESCRIPTION: This code snippet shows a combination of a blockquote line and a regular text line within a code block. It illustrates how different formatting can be represented in a code context.\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/mdsvex/test/_fixtures/markdown/input/blockquote-inside-code.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n> this is another bq\ninside code\n```\n\n----------------------------------------\n\nTITLE: Defining UnistData Interface in IDL\nDESCRIPTION: Defines the UnistData interface, an empty interface for ecosystem-associated information that will never be specified by Unist.\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/svast/README.md#2025-04-21_snippet_3\n\nLANGUAGE: idl\nCODE:\n```\ninterface UnistData { }\n```\n\n----------------------------------------\n\nTITLE: Markdown List of Colors\nDESCRIPTION: A markdown unordered list using plus signs as bullets to list three primary colors.\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/mdsvex/test/_fixtures/markdown/input/unordered-list-plus.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n + Red\n + Green\n + Blue\n```\n\n----------------------------------------\n\nTITLE: Installing SVAST Stringify Package\nDESCRIPTION: Command to install the SVAST stringify utility package using pkg.pr.new URL\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/template/README.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnpm i https://pkg.pr.new/pngwn/MDsveX/svast-stringify@e9631f1\n```\n\n----------------------------------------\n\nTITLE: Strong and Emphasis Markdown Using Asterisks\nDESCRIPTION: Demonstrates how to apply both strong and emphasis formatting using triple asterisks (***).\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/mdsvex/test/_fixtures/markdown/input/double-emphasis.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\na ***strong and em*** thingy\n\nbar***bazinga***bar\n```\n\n----------------------------------------\n\nTITLE: Installing SVAST Utils Package\nDESCRIPTION: Command to install the SVAST utilities package using pkg.pr.new URL\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/template/README.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nnpm i https://pkg.pr.new/pngwn/MDsveX/svast-utils@e9631f1\n```\n\n----------------------------------------\n\nTITLE: Basic HTML Pre/Code Block\nDESCRIPTION: Simple example of a preformatted code block using pre and code tags.\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/mdsvex/test/_fixtures/markdown/input/pre-code-tags.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<pre>\n<code>\nfoobar\n</code>\n</pre>\n```\n\n----------------------------------------\n\nTITLE: Publishing Package with Template\nDESCRIPTION: Command for maintainers to publish a package using the template feature with pkg-pr-new\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/template/README.md#2025-04-21_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nnpx pkg-pr-new publish './packages/A' --template './examples/*'\n```\n\n----------------------------------------\n\nTITLE: HTML Pre/Code Block with Nested Content\nDESCRIPTION: Code block containing nested HTML div element as content.\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/mdsvex/test/_fixtures/markdown/input/pre-code-tags.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<pre>\n<code>\n<div>some html code</div>\n</code>\n</pre>\n```\n\n----------------------------------------\n\nTITLE: Setting Paragraph Line Height with Inline CSS\nDESCRIPTION: This CSS snippet defines a style for paragraph elements, setting their line height to 20 pixels. It's embedded within HTML style tags for inline styling.\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/mdsvex/test/_fixtures/markdown/input/inline-style-tag.md#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<style>\n    p { line-height: 20px; }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Defining Numbered Link References in Markdown\nDESCRIPTION: This snippet shows how to define a numbered link reference in Markdown. It uses the [1] syntax to create a reference that can be used elsewhere in the document.\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/mdsvex/test/_fixtures/markdown/input/strip-references.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[1]: http://www.google.co.uk\n```\n\n----------------------------------------\n\nTITLE: Basic Function Creation Syntax in Markdown Code Span\nDESCRIPTION: Simple example of using a code span to indicate creating a new function.\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/mdsvex/test/_fixtures/markdown/input/inline-code.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nCreate a new `function`.\n```\n\n----------------------------------------\n\nTITLE: Block-level HTML Div Element\nDESCRIPTION: A block-level HTML code example showing a basic div element.\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/mdsvex/test/_fixtures/markdown/input/encodeHTMLCodeTags.md#2025-04-21_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<div>foo</div>\n```\n\n----------------------------------------\n\nTITLE: Displaying Backtick-Delimited String in Markdown Code Span\nDESCRIPTION: Example showing how to display text surrounded by backticks by wrapping the entire content with double backticks.\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/mdsvex/test/_fixtures/markdown/input/inline-code.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n`` `foo` ``\n```\n\n----------------------------------------\n\nTITLE: Rendering Code Block in Markdown/HTML\nDESCRIPTION: This snippet shows how to create a basic code block using HTML <code> tags in a Markdown or HTML document. It demonstrates that Markdown syntax within the code block is not processed.\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/mdsvex/test/_fixtures/markdown/input/literal-html-tags.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<code>some **code** yeah</code>\n```\n\n----------------------------------------\n\nTITLE: Defining H1 Heading in Markdown\nDESCRIPTION: Demonstrates the syntax for creating a top-level (H1) heading in Markdown using the hash symbol\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/mdsvex/test/_fixtures/markdown/input/h1-with-single-hash.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# This is an H1\n```\n\n----------------------------------------\n\nTITLE: Basic Code Block Example in Markdown\nDESCRIPTION: A simple fenced code block without a specified language. This demonstrates the basic syntax for creating code blocks in Markdown using triple backticks.\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/mdsvex/test/_fixtures/markdown/input/blockquote-followed-by-code.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nwith some code after\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Anchor Link\nDESCRIPTION: This snippet shows how to create a hyperlink in HTML using the anchor tag.\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/mdsvex/test/_fixtures/markdown/input/line-starts-with-html.md#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<a href=\"foo\">some text</a>\n```\n\n----------------------------------------\n\nTITLE: Generic Code Block Example\nDESCRIPTION: A simple code block containing two lines of plain text code.\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/mdsvex/test/_fixtures/markdown/input/list-followed-by-ghcode.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nsome code\n\nand some other line of code\n```\n\n----------------------------------------\n\nTITLE: Defining JavaScript Function with Backtick String\nDESCRIPTION: A JavaScript function that initializes a variable with a backtick character. The function takes a single parameter 'a' but doesn't use it in the implementation.\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/mdsvex/test/_fixtures/markdown/input/github-style-codeblock-inside-quote.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction MyFunc(a) {\n    var s = '`';\n}\n```\n\n----------------------------------------\n\nTITLE: Installing SVAST Package\nDESCRIPTION: Command to install the SVAST package for MDsveX using pkg.pr.new URL\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/template/README.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm i https://pkg.pr.new/pngwn/MDsveX/svast@e9631f1\n```\n\n----------------------------------------\n\nTITLE: Strong and Emphasis Markdown Using Underscores\nDESCRIPTION: Demonstrates how to apply both strong and emphasis formatting using triple underscores (___).\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/mdsvex/test/_fixtures/markdown/input/double-emphasis.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\na ___strong and em___ thingy\n\nbar___bazinga___bar\n```\n\n----------------------------------------\n\nTITLE: Installing PFM Parse Package\nDESCRIPTION: Command to install the PFM parse package for MDsveX using pkg.pr.new URL\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/template/README.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm i https://pkg.pr.new/pngwn/MDsveX/pfm-parse@e9631f1\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Tables with Advanced Structure\nDESCRIPTION: This snippet shows how to create a more complex HTML table structure using thead, tfoot, and multiple rows. It demonstrates the use of semantic table structuring for better accessibility and data organization.\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/mdsvex/test/_fixtures/markdown/input/html5-strutural-tags.md#2025-04-21_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<table class=\"test\">\n    <thead>\n        <tr>\n            <td>Foo</td>\n        </tr>\n    </thead>\n    <tr>\n        <td>Bar</td>\n    </tr>\n    <tfoot>\n        <tr>\n            <td>Bar</td>\n        </tr>\n    </tfoot>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Using Semantic HTML5 Tags for Content Structure\nDESCRIPTION: This snippet demonstrates the use of various semantic HTML5 tags for better content structure and meaning. It includes examples of address, canvas, figure, hgroup, and output tags.\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/mdsvex/test/_fixtures/markdown/input/html5-strutural-tags.md#2025-04-21_snippet_5\n\nLANGUAGE: HTML\nCODE:\n```\n<address>My street</address>\n\n<canvas id=\"canvas\" width=\"300\" height=\"300\">\n    Sorry, your browser doesn't support the &lt;canvas&gt; element.\n</canvas>\n\n<figure>\n    <img src=\"mypic.png\" alt=\"An awesome picture\">\n    <figcaption>Caption for the awesome picture</figcaption>\n</figure>\n\n<hgroup>\n  <h1>Main title</h1>\n  <h2>Secondary title</h2>\n</hgroup>\n\n<output name=\"result\"></output>\n```\n\n----------------------------------------\n\nTITLE: Embedding Audio with Multiple Sources in HTML5\nDESCRIPTION: This snippet demonstrates how to embed an audio player in HTML5 with multiple source files for browser compatibility. It uses the audio and source tags, specifying different file formats and preload attributes.\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/mdsvex/test/_fixtures/markdown/input/html5-strutural-tags.md#2025-04-21_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<audio class=\"podcastplayer\" controls>\n    <source src=\"foobar.mp3\" type=\"audio/mp3\" preload=\"none\"></source>\n    <source src=\"foobar.off\" type=\"audio/ogg\" preload=\"none\"></source>\n</audio>\n```\n\n----------------------------------------\n\nTITLE: Defining Root Interface for Svelte AST in TypeScript\nDESCRIPTION: TypeScript interface representing the Root node of the Svelte Abstract Syntax Tree (AST). It contains an array of various node types that can appear in a Svelte document.\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/svelte-parse/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Root {\n\ttype: 'root';\n\tchildren: (\n\t\t| SvelteElement\n\t\t| SvelteComponent\n\t\t| Comment\n\t\t| Text\n\t\t| SvelteExpression\n\t\t| VoidBlock\n\t\t| BranchingBlock\n\t\t| IfBlock\n\t\t| EachBlock\n\t\t| AwaitBlock\n\t\t| SvelteTag\n\t)[];\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding Video with Subtitles in HTML5\nDESCRIPTION: This snippet shows how to embed a video in HTML5 with multiple subtitle tracks. It uses the video and track tags, demonstrating how to specify different languages for subtitles.\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/mdsvex/test/_fixtures/markdown/input/html5-strutural-tags.md#2025-04-21_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<video src=\"foo.ogg\">\n    <track kind=\"subtitles\" src=\"foo.en.vtt\" srclang=\"en\" label=\"English\">\n    <track kind=\"subtitles\" src=\"foo.sv.vtt\" srclang=\"sv\" label=\"Svenska\">\n</video>\n```\n\n----------------------------------------\n\nTITLE: Creating Markdown Links with Varying URL Complexity\nDESCRIPTION: Examples showing how to format Markdown links with different URL structures, including URLs containing parentheses which require special handling in Markdown.\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/mdsvex/test/_fixtures/markdown/input/anchors-followed-by-brakets.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nThis is a [link](https://en.wikipedia.org/wiki/Textile) (some other text)\n\nThis is a [link](https://en.wikipedia.org/wiki/Textile_(markup)) (some other text)\n\nThis is a [link](https://en.wikipedia.org/wiki/Textile_(markup_language)) (some other text)\n\nThis is a [link](https://en.wikipedia.org/wiki/Textile_(markup_language)/foo) (some other text)\n```\n\n----------------------------------------\n\nTITLE: Implementing Multi-line and Nested Blockquotes in Markdown\nDESCRIPTION: This snippet demonstrates how to create multi-line blockquotes and nested blockquotes in Markdown. It shows the use of the '>' symbol for creating blockquotes and how to nest them for more complex quote structures.\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/mdsvex/test/_fixtures/markdown/input/nested-blockquote.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n> This is a multi line blockquote test\n>\n> > And nesting!\n>\n> With more than one line.\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Tables with Basic Structure\nDESCRIPTION: This snippet demonstrates how to create a simple HTML table with rows and cells. It uses the table, tr, and td tags to structure tabular data.\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/mdsvex/test/_fixtures/markdown/input/html5-strutural-tags.md#2025-04-21_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<table class=\"test\">\n    <tr>\n        <td>Foo</td>\n    </tr>\n    <tr>\n        <td>Bar</td>\n    </tr>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Embedding Images in Markdown\nDESCRIPTION: This snippet showcases different methods for including images in Markdown, including inline image links, reference-style image links, and variations with optional titles.\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/mdsvex/test/_fixtures/markdown/input/images.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n![Alt text](/path/to/img.jpg)\n\n![Alt text](/path/to/img.jpg \"Optional title\")\n\n![Alt text][id]\n\n![My Image]\n\n![leave me alone]\n\n![leave me alone][]\n\n  [id]: url/to/image.jpg  \"Optional title attribute\"\n  [My Image]: url/to/image2.jpg \"Optional title attribute\"\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-line Blockquote in Markdown\nDESCRIPTION: This snippet demonstrates how to create a multi-line blockquote in Markdown. It uses the '>' symbol at the beginning of each line to indicate a blockquote, with an empty blockquote line to separate paragraphs within the quote.\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/mdsvex/test/_fixtures/markdown/input/blockquote.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n> This is a multi line blockquote test\n>\n> With more than one line.\n```\n\n----------------------------------------\n\nTITLE: Nested Code Blocks with HTML and Markdown\nDESCRIPTION: Shows how to nest HTML code tags within pre tags, all wrapped in Markdown fenced code blocks. Demonstrates multiple levels of code block nesting.\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/mdsvex/test/_fixtures/markdown/input/pre-code-tags-inside-code-block.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<pre><code>\n<div>some html code inside code html tags inside a fenced code block</div>\n</code></pre>\n```\n\n----------------------------------------\n\nTITLE: Displaying Code with Indentation in Markdown\nDESCRIPTION: This snippet demonstrates how to display code in markdown by indenting it with 4 spaces. This method is commonly used for inline code blocks.\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/mdsvex/test/_fixtures/markdown/input/nested-gh-codeblocks.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n1. some code idented 4 spaces\n```\n\n----------------------------------------\n\nTITLE: HTML Entity Encoding in Markdown Code Spans\nDESCRIPTION: Example comparing decimal-encoded HTML entity for em dash with its named entity equivalent.\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/mdsvex/test/_fixtures/markdown/input/inline-code.md#2025-04-21_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n`&#8212;` is the decimal-encoded equivalent of `&mdash;`.\n```\n\n----------------------------------------\n\nTITLE: Markdown Formatting Inside Code Spans\nDESCRIPTION: Example showing that markdown formatting (bold, italic) is not processed within code spans but displayed literally.\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/mdsvex/test/_fixtures/markdown/input/inline-code.md#2025-04-21_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n`inline **code** has ___magic___`\n```\n\n----------------------------------------\n\nTITLE: HTML Tag Syntax in Markdown Code Span\nDESCRIPTION: Example showing HTML blink tag wrapped in backticks to display it as code rather than rendering it.\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/mdsvex/test/_fixtures/markdown/input/inline-code.md#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n`<blink>`\n```\n\n----------------------------------------\n\nTITLE: MySQL Query Syntax with Backticks in Markdown Code Block\nDESCRIPTION: Example of MySQL syntax using backticks to escape column names within a Markdown code span.\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/mdsvex/test/_fixtures/markdown/input/inline-code.md#2025-04-21_snippet_1\n\nLANGUAGE: mysql\nCODE:\n```\nSELECT `column` FROM whatever\n```\n\n----------------------------------------\n\nTITLE: Escaping a Single Backtick in Markdown Code Span\nDESCRIPTION: Example showing how to display a literal backtick character by wrapping it with double backticks.\nSOURCE: https://github.com/pngwn/mdsvex/blob/main/packages/mdsvex/test/_fixtures/markdown/input/inline-code.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n`` ` ``\n```"
  }
]