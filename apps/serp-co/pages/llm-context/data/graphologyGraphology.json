[
  {
    "owner": "graphology",
    "repo": "graphology",
    "content": "TITLE: Basic Graph Instantiation in JavaScript\nDESCRIPTION: Creates a new Graph instance with or without options. This is the fundamental way to instantiate a graph object in Graphology.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/instantiation.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Graph from 'graphology';\n\n// Here you go:\nconst graph = new Graph();\n\n// With options:\nconst graph = new Graph(options);\n```\n\n----------------------------------------\n\nTITLE: Implementing Node-Specific DFS Traversal\nDESCRIPTION: Example of performing a Depth-First Search starting from a specific node, demonstrating both unlimited and depth-limited traversal approaches.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/traversal.md#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport {dfsFromNode} from 'graphology-traversal';\n// Alternatively, to only load the relevant code\nimport {dfsFromNode} from 'graphology-traversal/dfs';\n\ndfsFromNode(graph, 'node1', function (node, attr, depth) {\n  console.log(node, attr, depth);\n});\n\n// Stopping at depth 3\ndfsFromNode(graph, 'node1', function (node, attr, depth) {\n  return depth >= 3;\n});\n```\n\n----------------------------------------\n\nTITLE: Finding All Shortest Paths with Dijkstra's Algorithm\nDESCRIPTION: Example of using Dijkstra's singleSource algorithm to find shortest paths from a source node to all other nodes in a weighted graph.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/shortest-path.md#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport {dijkstra} from 'graphology-shortest-path';\n// Alternatively, if you want to load only the relevant code\nimport dijkstra from 'graphology-shortest-path/dijkstra';\n\n// Returning every shortest path between source & every node of the graph\nconst paths = dijkstra.singleSource(graph, source);\n\n// If you store edges' weight in custom attribute\nconst paths = dijkstra.singleSource(graph, source, 'customWeight');\n\n// Using a custom weight getter function\nconst path = dijkstra.singleSource(graph, source, (_, attr) => attr.importance);\n```\n\n----------------------------------------\n\nTITLE: Creating Disjoint Union of Graphs in JavaScript using Graphology\nDESCRIPTION: Demonstrates how to create a disjoint union of two graphs, relabeling nodes and edges to keep the graphs disjoint.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/operators.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport {disjointUnion} from 'graphology-operators';\n// Alternatively, to load only the relevant code:\nimport disjointUnion from 'graphology-operators/disjoint-union';\n\nconst R = disjointUnion(G, H);\n```\n\n----------------------------------------\n\nTITLE: Parsing GRAPHML Data with Graphology\nDESCRIPTION: Demonstrates how to parse GRAPHML data (string or XML document) into a graphology graph instance. Shows importing the library, reading from different sources, and setting parsing options.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/graphml.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar Graph = require('graphology');\n\n// Node\nvar graphml = require('graphology-graphml');\n// Browser\nvar graphml = require('graphology-graphml/browser');\n\n// Reading a string\nvar graph = graphml.parse(Graph, string);\n\n// Reading a dom document\nvar graph = graphml.parse(Graph, xmlDocument);\n\n// Passing options\nvar graph = graphml.parse(Graph, string, {addMissingNodes: true});\n```\n\n----------------------------------------\n\nTITLE: Using Louvain Community Detection Algorithm with Graphology\nDESCRIPTION: Examples of using the Louvain algorithm for community detection in graphology, including retrieving the partition, assigning communities as node attributes, and using custom options.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/communities-louvain.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport louvain from 'graphology-communities-louvain';\n\n// To retrieve the partition\nconst communities = louvain(graph);\n\n// To directly assign communities as a node attribute\nlouvain.assign(graph);\n\n// If you need to pass custom options\nlouvain.assign(graph, {\n  resolution: 0.8\n});\n\n// If you want to return some details about the algorithm's execution\nvar details = louvain.detailed(graph);\n\n// If you want to ignore your graph's weights\nlouvain.assign(graph, {getEdgeWeight: null});\n```\n\n----------------------------------------\n\nTITLE: Finding All Simple Node Paths in Graph\nDESCRIPTION: Demonstrates using allSimplePaths function to find all possible paths between two nodes in a graph. Includes examples of basic usage, finding cycles, and limiting path depth.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/simple-path/README.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {allSimplePaths} from 'graphology-simple-path';\n\nconst graph = new Graph();\ngraph.mergeEdge('1', '2');\ngraph.mergeEdge('1', '3');\ngraph.mergeEdge('2', '3');\n\nconst paths = allSimplePaths(graph, '1', '3');\n>>> [\n  ['1', '3'],\n  ['1', '2', '3']\n]\n\n// To get cycles, just pass same source & target\nconst cycles = allSimplePaths(graph, '1', '1');\n\n// To limit traversal to a certain depth\nconst limitedPaths = allSimplePaths(graph, '1', '3', {maxDepth: 2});\n```\n\n----------------------------------------\n\nTITLE: Quick Start with Graphology in JavaScript\nDESCRIPTION: Basic usage of graphology to create a graph, add nodes and edges, and perform simple operations. Demonstrates importing, instantiation, adding nodes and edges, and iterating over nodes.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/index.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport Graph from 'graphology';\n\nconst graph = new Graph();\n\n// Adding some nodes\ngraph.addNode('John');\ngraph.addNode('Martha');\n\n// Adding an edge\ngraph.addEdge('John', 'Martha');\n\n// Displaying useful information about your graph\nconsole.log('Number of nodes', graph.order);\nconsole.log('Number of edges', graph.size);\n\n// Iterating over nodes\ngraph.forEachNode(node => {\n  console.log(node);\n});\n```\n\n----------------------------------------\n\nTITLE: Performing BFS traversal on a graph in JavaScript\nDESCRIPTION: Example of using the bfs function to perform a Breadth-First Search traversal on a graph. It demonstrates basic usage and how to stop the traversal at a specific depth.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/traversal/README.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {bfs} from 'graphology-traversal';\n// Alternatively, to only load the relevant code\nimport {bfs} from 'graphology-traversal/bfs';\n\nbfs(graph, function (node, attr, depth) {\n  console.log(node, attr, depth);\n});\n\n// Stopping at depth 3\nbfs(graph, function (node, attr, depth) {\n  return depth >= 3;\n});\n```\n\n----------------------------------------\n\nTITLE: Computing PageRank in JavaScript\nDESCRIPTION: Calculates PageRank scores for graph nodes with customizable damping factor, iterations, and tolerance. Supports weight handling and direct attribute mapping.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/metrics/README.md#2025-04-17_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nimport pagerank from 'graphology-metrics/centrality/pagerank';\n\n// To compute pagerank and return the score per node:\nconst scores = pagerank(graph);\n\n// To directly map the result to nodes' attributes:\npagerank.assign(graph);\n\n// Note that you can also pass options to customize the algorithm:\nconst p = pagerank(graph, {alpha: 0.9});\n\n// To ignore your graph's weights\npagerank.assign(graph, {getEdgeWeight: null});\n```\n\n----------------------------------------\n\nTITLE: Parsing GEXF Data with Graphology Parser\nDESCRIPTION: Example showing how to use the GEXF parser to convert GEXF data (string or XML document) into a graphology graph instance with various configuration options.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/gexf.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar Graph = require('graphology');\n\n// Node\nvar gexf = require('graphology-gexf');\n// Browser\nvar gexf = require('graphology-gexf/browser');\n\n// Reading a string\nvar graph = gexf.parse(Graph, string);\n\n// Reading a dom document\nvar graph = gexf.parse(Graph, xmlDocument);\n\n// Passing options\nvar graph = gexf.parse(Graph, string, {addMissingNodes: true});\n```\n\n----------------------------------------\n\nTITLE: Computing Betweenness Centrality in JavaScript\nDESCRIPTION: Demonstrates how to calculate betweenness centrality for every node in a graph using the graphology-metrics library. It supports custom attribute naming, weight handling, and normalization options.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/metrics/README.md#2025-04-17_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport betweennessCentrality from 'graphology-metrics/centrality/betweenness';\n\n// To compute centrality for every node:\nconst centralities = betweennessCentrality(graph);\n\n// To directly map the result onto nodes' attributes (`betweennessCentrality`):\nbetweennessCentrality.assign(graph);\n\n// To directly map the result onto a custom attribute:\nbetweennessCentrality.assign(graph, {nodeCentralityAttribute: 'myCentrality'});\n\n// To ignore weights\nconst centralities = betweennessCentrality(graph, {getEdgeWeight: null});\n\n// To use a getter function for weights\nconst centralities = betweennessCentrality(graph, {\n  getEdgeWeight: (_, attr) => attr.importance\n});\n```\n\n----------------------------------------\n\nTITLE: Including Graphology in HTML\nDESCRIPTION: HTML script tags to include graphology and its standard library in a web page. It demonstrates how to create a graph object and use the standard library functions.\nSOURCE: https://github.com/graphology/graphology/blob/master/README.md#2025-04-17_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- To use a Graph object -->\n<script src=\"graphology.min.js\"></script>\n<!-- This exposes a global variable named \"graphology\" -->\n<script>\n  const graph = new graphology.Graph();\n\n  const {UndirectedGraph, DirectedGraph} = graphology;\n</script>\n\n<!-- To use the standard library -->\n<script src=\"graphology-library.min.js\"></script>\n<!-- This exposes a global variable named \"graphologyLibrary\" -->\n<script>\n  const density = graphologyLibrary.metrics.graph.density(graph);\n</script>\n```\n\n----------------------------------------\n\nTITLE: Finding Path Lengths in Undirected Graphs\nDESCRIPTION: Example of using the undirectedSingleSourceLength algorithm, which treats any graph as undirected when finding shortest path lengths.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/shortest-path.md#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport {undirectedSingleSourceLength} from 'graphology-shortest-path';\n// Alternatively, if you want to load only the relevant code\nimport {undirectedSingleSourceLength} from 'graphology-shortest-path/unweighted';\n\n// Returning every shortest path between source & every node of the graph\nconst paths = undirectedSingleSourceLength(graph, source);\n```\n\n----------------------------------------\n\nTITLE: Computing PageRank in JavaScript using Graphology\nDESCRIPTION: Demonstrates how to compute PageRank metrics for each node in a graph using the Graphology library. It shows examples of returning scores per node, assigning results to node attributes, and customizing algorithm parameters.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/metrics.md#2025-04-17_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport pagerank from 'graphology-metrics/centrality/pagerank';\n\n// To compute pagerank and return the score per node:\nconst scores = pagerank(graph);\n\n// To directly map the result to nodes' attributes:\npagerank.assign(graph);\n\n// Note that you can also pass options to customize the algorithm:\nconst p = pagerank(graph, {alpha: 0.9});\n\n// To ignore your graph's weights\npagerank.assign(graph, {getEdgeWeight: null});\n```\n\n----------------------------------------\n\nTITLE: Generating Topological Generations in a DAG using JavaScript\nDESCRIPTION: Example of using the topologicalGenerations function to obtain successive generations of nodes in a topological ordering of a Directed Acyclic Graph (DAG). It shows creating a graph and generating the generations.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/dag.md#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport {topologicalGenerations} from 'graphology-dag';\n// Alternatively, to load only the relevant code:\nimport {topologicalGenerations} from 'graphology-dag/topological-sort';\n\nconst graph = new DirectedGraph();\ngraph.mergeEdge(0, 1);\ngraph.mergeEdge(1, 2);\ngraph.mergeEdge(0, 3);\n\ntopologicalGenerations(graph);\n>>> [[ '0' ], ['1', '3'], ['2']]\n```\n\n----------------------------------------\n\nTITLE: Parsing GEXF Data with Graphology\nDESCRIPTION: Examples of parsing GEXF data from string or XML document into a Graphology graph instance. Shows basic usage and options configuration.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/gexf/README.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar Graph = require('graphology');\n\n// Node\nvar gexf = require('graphology-gexf');\n// Browser\nvar gexf = require('graphology-gexf/browser');\n\n// Reading a string\nvar graph = gexf.parse(Graph, string);\n\n// Reading a dom document\nvar graph = gexf.parse(Graph, xmlDocument);\n\n// Passing options\nvar graph = gexf.parse(Graph, string, {addMissingNodes: true});\n```\n\n----------------------------------------\n\nTITLE: Computing Eigenvector Centrality in JavaScript\nDESCRIPTION: Calculates eigenvector centrality for graph nodes with customizable iteration count and tolerance. Supports weight handling and direct attribute mapping.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/metrics/README.md#2025-04-17_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport eigenvectorCentrality from 'graphology-metrics/centrality/eigenvector';\n\n// To compute the eigenvector centrality and return the score per node:\nconst scores = eigenvectorCentrality(graph);\n\n// To directly map the result to nodes' attributes:\neigenvectorCentrality.assign(graph);\n\n// Note that you can also pass options to customize the algorithm:\nconst p = eigenvectorCentrality(graph, {tolerance: 1e-3});\n\n// To ignore your graph's weights\neigenvectorCentrality.assign(graph, {getEdgeWeight: null});\n```\n\n----------------------------------------\n\nTITLE: Comparing Iteration Methods in Graphology\nDESCRIPTION: Demonstrates different methods for iterating through nodes in a graph, arranged from slowest to fastest. The fastest approach uses callback methods like forEachNode which avoid array creation and provide direct access to node attributes.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/performance-tips.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Slowest...\ngraph.nodes().forEach(node => {\n  const attr = graph.getNodeAttributes(node);\n  console.log(node, attr);\n});\n\n// Still quite slow...\nconst nodes = graph.nodes();\n\nfor (let i = 0; i < nodes.length; i++) {\n  const node = nodes[i];\n  const attr = graph.getNodeAttributes(node);\n  console.log(node, attr);\n}\n\n// Ok, I guess...\nfor (const [node, attr] of graph.nodeEntries()) {\n  console.log(node, attr);\n}\n\n// Fast 🚀\ngraph.forEachNode((node, attr) => {\n  console.log(node, attr);\n});\n```\n\n----------------------------------------\n\nTITLE: Performing BFS traversal from a specific node in JavaScript\nDESCRIPTION: Example of using the bfsFromNode function to perform a Breadth-First Search traversal starting from a specific node. It shows basic usage and how to stop the traversal at a specific depth.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/traversal/README.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport {bfsFromNode} from 'graphology-traversal';\n// Alternatively, to only load the relevant code\nimport {bfsFromNode} from 'graphology-traversal/bfs';\n\nbfsFromNode(graph, 'node1', function (node, attr, depth) {\n  console.log(node, attr, depth);\n});\n\n// Stopping at depth 3\nbfsFromNode(graph, 'node1', function (node, attr, depth) {\n  return depth >= 3;\n});\n```\n\n----------------------------------------\n\nTITLE: Finding All Simple Node Paths in a Graph\nDESCRIPTION: Demonstrates how to find all simple paths between two nodes in a graph. The function returns arrays of node identifiers representing each possible path. Includes options for finding cycles and limiting traversal depth.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/simple-path.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {allSimplePaths} from 'graphology-simple-path';\n\nconst graph = new Graph();\ngraph.mergeEdge('1', '2');\ngraph.mergeEdge('1', '3');\ngraph.mergeEdge('2', '3');\n\nconst paths = allSimplePaths(graph, '1', '3');\n>>> [\n  ['1', '3'],\n  ['1', '2', '3']\n]\n\n// To get cycles, just pass same source & target\nconst cycles = allSimplePaths(graph, '1', '1');\n\n// To limit traversal to a certain depth\nconst limitedPaths = allSimplePaths(graph, '1', '3', {maxDepth: 2});\n```\n\n----------------------------------------\n\nTITLE: Using Leiden Community Detection Algorithm\nDESCRIPTION: Example usage of the Leiden algorithm implementation showing different ways to detect communities in a graph, including basic usage, direct attribute assignment, custom options, and detailed execution information\nSOURCE: https://github.com/graphology/graphology/blob/master/src/communities-leiden/README.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport louvain from 'graphology-communities-leiden';\n\n// To retrieve the partition\nconst communities = louvain(graph);\n\n// To directly assign communities as a node attribute\nlouvain.assign(graph);\n\n// If you need to pass custom options\nlouvain.assign(graph, {\n  attributes: {\n    weight: 'myCustomWeight',\n    community: 'myCustomCommunity'\n  }\n});\n\n// If you want to return some details about the algorithm's execution\nvar details = louvain.detailed(graph);\n```\n\n----------------------------------------\n\nTITLE: Cropping Graph to Largest Connected Component in JavaScript\nDESCRIPTION: Demonstrates the use of cropToLargestConnectedComponent to mutate a graph, keeping only the largest connected component.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/components/README.md#2025-04-17_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport {cropToLargestConnectedComponent} from 'graphology-components';\n\ncropToLargestConnectedComponent(graph);\n```\n\n----------------------------------------\n\nTITLE: Using Unweighted Bidirectional Search in Graphology\nDESCRIPTION: Example of using the bidirectional algorithm to find the shortest path between source and target nodes in an unweighted graph.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/shortest-path.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {bidirectional} from 'graphology-shortest-path';\n// Alternatively, if you want to load only the relevant code\nimport {bidirectional} from 'graphology-shortest-path/unweighted';\n\n// Returning the shortest path between source & target\nconst path = bidirectional(graph, source, target);\n```\n\n----------------------------------------\n\nTITLE: Using A-star Bidirectional Search for Informed Path Finding\nDESCRIPTION: Example of using A* bidirectional algorithm with a heuristic function to efficiently find the shortest path in a weighted graph.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/shortest-path.md#2025-04-17_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport {astar} from 'graphology-shortest-path';\n// Alternatively, if you want to load only the relevant code\nimport astar from 'graphology-shortest-path/astar';\n\n// Returning the shortest path between source & target\nconst path = astar.bidirectional(\n  graph,\n  source,\n  target,\n  (_, attr) => attr.importance\n  (node, finalTarget) => euclideanDistance(points[node], points[finalTarget])\n);\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Graph Nodes in JavaScript with Graphology\nDESCRIPTION: Examples showing various methods to iterate over nodes in a Graphology graph, including retrieving an array of nodes, using callback functions, and using JavaScript iterators.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/iteration.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst graph = new Graph();\n\ngraph.addNode('Thomas');\ngraph.addNode('Elizabeth');\n\n// Using the array-returning method:\ngraph.nodes();\n>>> ['Thomas', 'Elizabeth']\n\n// Using the callback method\ngraph.forEachNode((node, attributes) => {\n  console.log(node, attributes);\n});\n\n// Using functional-style iteration method\nconst degrees = graph.mapNodes((node) => {\n  return graph.degree(node);\n});\n\n// Using the iterator\nfor (const {node, attributes} of graph.nodeEntries()) {\n  console.log(node, attributes);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Louvain Algorithm with Graphology\nDESCRIPTION: Example code showing how to use the Louvain algorithm with graphology. Demonstrates retrieving communities as a partition, assigning communities directly to the graph, passing custom options, getting detailed execution information, and ignoring edge weights.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/communities-louvain/README.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport louvain from 'graphology-communities-louvain';\n\n// To retrieve the partition\nconst communities = louvain(graph);\n\n// To directly assign communities as a node attribute\nlouvain.assign(graph);\n\n// If you need to pass custom options\nlouvain.assign(graph, {\n  resolution: 0.8\n});\n\n// If you want to return some details about the algorithm's execution\nvar details = louvain.detailed(graph);\n\n// If you want to ignore your graph's weights\nlouvain.assign(graph, {getEdgeWeight: null});\n```\n\n----------------------------------------\n\nTITLE: Computing Edge Betweenness Centrality in JavaScript using Graphology\nDESCRIPTION: Shows how to compute edge betweenness centrality for every edge in a graph using the Graphology library. It includes examples of assigning results to edge attributes and customizing weight calculations.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/metrics.md#2025-04-17_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport edgeBetweennessCentrality from 'graphology-metrics/centrality/edge-betweenness';\n\n// To compute centrality for every edge:\nconst centralities = edgeBetweennessCentrality(graph);\n\n// To directly map the result onto edges' attributes (`edgeBetweennessCentrality`):\nedgeBetweennessCentrality.assign(graph);\n\n// To directly map the result onto a custom attribute:\nedgeBetweennessCentrality.assign(graph, {\n  edgeCentralityAttribute: 'myCentrality'\n});\n\n// To ignore weights\nconst centralities = edgeBetweennessCentrality(graph, {getEdgeWeight: null});\n\n// To use a getter function for weights\nconst centralities = edgeBetweennessCentrality(graph, {\n  getEdgeWeight: (_, attr) => attr.importance\n});\n```\n\n----------------------------------------\n\nTITLE: A-star Path Finding Algorithm\nDESCRIPTION: Example of using A-star algorithm with custom weight and heuristic functions\nSOURCE: https://github.com/graphology/graphology/blob/master/src/shortest-path/README.md#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport {astar} from 'graphology-shortest-path';\n// Alternatively, if you want to load only the relevant code\nimport astar from 'graphology-shortest-path/astar';\n\n// Returning the shortest path between source & target\nconst path = astar.bidirectional(\n  graph,\n  source,\n  target,\n  (_, attr) => attr.importance\n  (node, finalTarget) => euclideanDistance(points[node], points[finalTarget])\n);\n```\n\n----------------------------------------\n\nTITLE: Serializing a Graph in Graphology (JavaScript)\nDESCRIPTION: Illustrates the serialization of an entire graph in Graphology. The serialized format includes graph attributes, options, nodes, and edges.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/serialization.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ngraph.mergeEdgeWithKey('T->E', 'Thomas', 'Eric', {type: 'KNOWS'});\ngraph.setAttribute('name', 'My Graph');\ngraph.export();\n>>> {\n  attributes: {\n    name: 'My Graph'\n  },\n  options: {\n    allowSelfLoops: true,\n    multi: false,\n    type: 'mixed'\n  },\n  nodes: [\n    {key: 'Thomas'},\n    {key: 'Eric'}\n  ],\n  edges: [\n    {\n      key: 'T->E',\n      source: 'Thomas',\n      target: 'Eric',\n      attributes: {type: 'KNOWS'}\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Computing Onion Layers with Graphology\nDESCRIPTION: Demonstrates how to compute the onion decomposition of a graph using the onionLayers function. Shows how to get layers as an object or assign them directly to nodes in the graph.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/cores/README.md#2025-04-17_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport onionLayers from 'graphology-cores/onionLayers';\n\n// Return the onion layers for each node\nconst onion = onionLayers(graph);\n\n// Assign to each node its onion layer\nonionLayers.assign(graph);\n\n// Assign with a custom attribute label\nonionLayers.assign(graph, 'onion');\n```\n\n----------------------------------------\n\nTITLE: Finding All Simple Edge Paths in a Graph\nDESCRIPTION: Shows how to find all simple paths between nodes represented by edge identifiers. Works with cycles but not with multi-graphs. Returns arrays of edge keys representing each possible path.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/simple-path.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport {allSimpleEdgePaths} from 'graphology-simple-path';\n\nconst graph = new Graph();\ngraph.mergeEdgeWithKey('1->2', '1', '2');\ngraph.mergeEdgeWithKey('1->3', '1', '3');\ngraph.mergeEdgeWithKey('2->3', '2', '3');\n\nconst paths = allSimpleEdgePaths(graph, '1', '3');\n>>> [\n  ['1->3'],\n  ['1->2', '2->3']\n]\n\n// To get cycles, just pass same source & target\nconst cycles = allSimpleEdgePaths(graph, '1', '1');\n\n// To limit traversal to a certain depth\nconst limitedPaths = allSimpleEdgePaths(graph, '1', '3', {maxDepth: 2});\n```\n\n----------------------------------------\n\nTITLE: Adding Edges to Graph\nDESCRIPTION: Examples of adding edges between nodes with optional attributes. Shows both simple edge addition and adding edges with type and weight attributes.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/mutation.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ngraph.addNode('John');\ngraph.addNode('Jack');\n\n// Adding a simple edge between John & Jack:\nconst edge = graph.addEdge('John', 'Jack');\n\n// Adding an edge with attributes between John & Jack;\nconst edge = graph.addEdge('John', 'Jack', {\n  type: 'KNOWS',\n  weight: 0\n});\n```\n\n----------------------------------------\n\nTITLE: Computing HITS Algorithm in JavaScript\nDESCRIPTION: Implements the HITS algorithm to compute hub and authority scores for nodes. Includes options for weight handling, normalization, and iteration control.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/metrics/README.md#2025-04-17_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nimport hits from 'graphology-metrics/centrality/hits';\n\n// To compute and return the result as 'hubs' & 'authorities':\nconst {hubs, authorities} = hits(graph);\n\n// To directly map the result to nodes' attributes:\nhits.assign(graph);\n\n// Note that you can also pass options to customize the algorithm:\nconst {hubs, authorities} = hits(graph, {normalize: false});\n```\n\n----------------------------------------\n\nTITLE: Finding Strongly Connected Components in JavaScript\nDESCRIPTION: Shows how to use stronglyConnectedComponents function to get a list of strongly connected components in a mixed or directed graph.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/components/README.md#2025-04-17_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport {stronglyConnectedComponents} from 'graphology-components';\n\nconst components = stronglyConnectedComponents(graph);\n```\n\n----------------------------------------\n\nTITLE: Computing Eigenvector Centrality in JavaScript using Graphology\nDESCRIPTION: Demonstrates the computation of eigenvector centrality for nodes in a graph using the Graphology library. It shows how to return scores per node, assign results to node attributes, and customize algorithm parameters.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/metrics.md#2025-04-17_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport eigenvectorCentrality from 'graphology-metrics/centrality/eigenvector';\n\n// To compute the eigenvector centrality and return the score per node:\nconst scores = eigenvectorCentrality(graph);\n\n// To directly map the result to nodes' attributes:\neigenvectorCentrality.assign(graph);\n\n// Note that you can also pass options to customize the algorithm:\nconst p = eigenvectorCentrality(graph, {tolerance: 1e-3});\n\n// To ignore your graph's weights\neigenvectorCentrality.assign(graph, {getEdgeWeight: null});\n```\n\n----------------------------------------\n\nTITLE: Merging Edges with Custom Keys\nDESCRIPTION: Demonstrates merging edges with custom keys, including error handling for key conflicts and attribute merging.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/mutation.md#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst graph = new UndirectedGraph();\ngraph.addNode('John');\ngraph.addNode('Martha');\ngraph.addNode('Thomas');\n\n// Since the edge does not exist, it will be added\ngraph.mergeEdgeWithKey('J->M', 'John', 'Martha');\n\n// Now, since the edge already exists, this will do nothing\ngraph.mergeEdgeWithKey('J->M', 'John', 'Martha');\n\n// Note that if the edge already exists, attributes are merged\ngraph.mergeEdgeWithKey('J->M', 'John', 'Martha', {type: 'KNOWS'});\ngraph.getEdgeAttributes('J->M');\n>>> {\n  type: 'KNOWS'\n}\n\n// However, the following will throw an error\ngraph.mergeEdgeWithKey('J->M', 'Thomas', 'Martha');\n\n// The method returns a 4-tuple containing useful info\nconst [key, edgeWasAdded, sourceWasAdded, targetWasAdded] = graph.mergeEdgeWithKey('J->M', 'John', 'Martha');\n```\n\n----------------------------------------\n\nTITLE: Implementing ForceAtlas2 layout using Web Worker in JavaScript\nDESCRIPTION: Shows how to use the ForceAtlas2 layout in a web worker, including starting, stopping, and managing the layout process.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/layout-forceatlas2/README.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport FA2Layout from 'graphology-layout-forceatlas2/worker';\n\n// The parameters are the same as for the synchronous version, minus `iterations` of course\nconst layout = new FA2Layout(graph, {\n  settings: {gravity: 1}\n});\n\n// To start the layout\nlayout.start();\n\n// To stop the layout\nlayout.stop();\n\n// To kill the layout and release attached memory\nlayout.kill();\n\n// Assess whether the layout is currently running\nlayout.isRunning();\n```\n\n----------------------------------------\n\nTITLE: Implementing Node-Specific BFS Traversal\nDESCRIPTION: Example of performing a Breadth-First Search starting from a specific node, with support for both unlimited and depth-limited traversal.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/traversal.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport {bfsFromNode} from 'graphology-traversal';\n// Alternatively, to only load the relevant code\nimport {bfsFromNode} from 'graphology-traversal/bfs';\n\nbfsFromNode(graph, 'node1', function (node, attr, depth) {\n  console.log(node, attr, depth);\n});\n\n// Stopping at depth 3\nbfsFromNode(graph, 'node1', function (node, attr, depth) {\n  return depth >= 3;\n});\n```\n\n----------------------------------------\n\nTITLE: Generating a topological sort order of nodes with topologicalSort function\nDESCRIPTION: Example demonstrating how to use the topologicalSort function to get an array of nodes representing a valid topological ordering of a DAG. The function throws an error if the graph contains any cycles.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/dag/README.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport {topologicalSort} from 'graphology-dag';\n// Alternatively, to load only the relevant code:\nimport {topologicalSort} from 'graphology-dag/topological-sort';\n\nconst graph = new DirectedGraph();\ngraph.mergeEdge(0, 1);\ngraph.mergeEdge(1, 2);\ngraph.mergeEdge(2, 3);\n\ntopologicalSort(graph);\n>>> ['0', '1', '2', '3']\n```\n\n----------------------------------------\n\nTITLE: Finding Largest Connected Component in JavaScript\nDESCRIPTION: Demonstrates the use of largestConnectedComponent function to retrieve the largest connected component in a graph.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/components.md#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport {largestConnectedComponent} from 'graphology-components';\n\nconst largest = largestConnectedComponent(graph);\n```\n\n----------------------------------------\n\nTITLE: Performing Topological Sort on a DAG using JavaScript\nDESCRIPTION: Example of using the topologicalSort function to obtain a topological ordering of nodes in a Directed Acyclic Graph (DAG). It demonstrates creating a graph and performing the sort.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/dag.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport {topologicalSort} from 'graphology-dag';\n// Alternatively, to load only the relevant code:\nimport {topologicalSort} from 'graphology-dag/topological-sort';\n\nconst graph = new DirectedGraph();\ngraph.mergeEdge(0, 1);\ngraph.mergeEdge(1, 2);\ngraph.mergeEdge(2, 3);\n\ntopologicalSort(graph);\n>>> ['0', '1', '2', '3']\n```\n\n----------------------------------------\n\nTITLE: Computing Edge Betweenness Centrality in JavaScript\nDESCRIPTION: Calculates betweenness centrality for graph edges with options for weight handling and normalization. Supports direct attribute mapping and custom attribute naming.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/metrics/README.md#2025-04-17_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport edgeBetweennessCentrality from 'graphology-metrics/centrality/edge-betweenness';\n\n// To compute centrality for every edge:\nconst centralities = edgeBetweennessCentrality(graph);\n\n// To directly map the result onto edges' attributes (`edgeBetweennessCentrality`):\nedgeBetweennessCentrality.assign(graph);\n\n// To directly map the result onto a custom attribute:\nedgeBetweennessCentrality.assign(graph, {\n  edgeCentralityAttribute: 'myCentrality'\n});\n\n// To ignore weights\nconst centralities = edgeBetweennessCentrality(graph, {getEdgeWeight: null});\n\n// To use a getter function for weights\nconst centralities = edgeBetweennessCentrality(graph, {\n  getEdgeWeight: (_, attr) => attr.importance\n});\n```\n\n----------------------------------------\n\nTITLE: Inferring ForceAtlas2 Layout Settings in JavaScript\nDESCRIPTION: Demonstrates how to use the inferSettings method to automatically determine appropriate layout settings based on the graph or its order.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/layout-forceatlas2.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport forceAtlas2 from 'graphology-layout-forceatlas2';\n\nconst sensibleSettings = forceAtlas2.inferSettings(graph);\nconst positions = forceAtlas2(graph, {\n  iterations: 50,\n  settings: sensibleSettings\n});\n\n// Alternatively using the graph's order instead of a graph instance\nconst sensibleSettings = forceAtlas2.inferSettings(500);\n```\n\n----------------------------------------\n\nTITLE: Implementing DFS Traversal\nDESCRIPTION: Example of performing a Depth-First Search traversal over a graph using a callback function, including both basic and depth-limited traversal patterns.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/traversal.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport {dfs} from 'graphology-traversal';\n// Alternatively, to only load the relevant code\nimport {dfs} from 'graphology-traversal/dfs';\n\ndfs(graph, function (node, attr, depth) {\n  console.log(node, attr, depth);\n});\n\n// Stopping at depth 3\ndfs(graph, function (node, attr, depth) {\n  return depth >= 3;\n});\n```\n\n----------------------------------------\n\nTITLE: Computing Betweenness Centrality in JavaScript using Graphology\nDESCRIPTION: Demonstrates how to compute betweenness centrality for every node in a graph using the Graphology library. It shows various usage options including assigning results to node attributes and customizing weight calculations.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/metrics.md#2025-04-17_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport betweennessCentrality from 'graphology-metrics/centrality/betweenness';\n\n// To compute centrality for every node:\nconst centralities = betweennessCentrality(graph);\n\n// To directly map the result onto nodes' attributes (`betweennessCentrality`):\nbetweennessCentrality.assign(graph);\n\n// To directly map the result onto a custom attribute:\nbetweennessCentrality.assign(graph, {nodeCentralityAttribute: 'myCentrality'});\n\n// To ignore weights\nconst centralities = betweennessCentrality(graph, {getEdgeWeight: null});\n\n// To use a getter function for weights\nconst centralities = betweennessCentrality(graph, {\n  getEdgeWeight: (_, attr) => attr.importance\n});\n```\n\n----------------------------------------\n\nTITLE: Computing Degree Centrality in JavaScript using Graphology\nDESCRIPTION: Shows how to compute degree centrality for every node in a graph using the Graphology library. It includes examples for computing general degree centrality, as well as in-degree and out-degree centrality for directed graphs.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/metrics.md#2025-04-17_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  degreeCentrality,\n  inDegreeCentrality,\n  outDegreeCentrality\n} from 'graphology-metrics/centrality/degree';\n\n// To compute degree centrality for every node:\nconst centralities = degreeCentrality(graph);\n\n// To directly map the result onto nodes' attributes (`degreeCentrality`):\ndegreeCentrality.assign(graph);\n\n// To directly map the result onto a custom attribute:\ndegreeCentrality.assign(graph, {nodeCentralityAttribute: 'myCentrality'});\n```\n\n----------------------------------------\n\nTITLE: Adding Nodes to Graph in JavaScript\nDESCRIPTION: Examples of adding nodes to a graph with optional attributes. Shows both simple node addition and adding nodes with attributes like age and eye color.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/mutation.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Adding a simple node:\nconst node = graph.addNode('John');\n\n// Adding a node with attributes:\nconst node = graph.addNode('John', {\n  age: 24,\n  eyes: 'blue'\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering a graph in a canvas context using graphology-canvas\nDESCRIPTION: JavaScript code snippet demonstrating how to render a graph in an arbitrary canvas context using the render function from graphology-canvas.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/canvas/README.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport {render} from 'graphology-canvas';\n\nrender(graph, context, settings);\n```\n\n----------------------------------------\n\nTITLE: Creating Subgraph in JavaScript using Graphology\nDESCRIPTION: Demonstrates how to create a subgraph from an existing graph using different methods: array of nodes, set of nodes, or a filtering function.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/operators.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {subgraph} from 'graphology-operators';\n// Alternatively, to load only the relevant code:\nimport subgraph from 'graphology-operators/subgraph';\n\n// From an array of nodes\nconst sub = subgraph(graph, ['John', 'Mary', 'Sue']);\n\n// From a set of nodes\nconst sub = subgraph(graph, new Set(['John', 'Mary', 'Sue']));\n\n// From a filtering function\nconst sub = subgraph(graph, function (key, attr) {\n  return key.startsWith('J') || attr.color === 'red';\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Subgraph of Largest Connected Component in JavaScript\nDESCRIPTION: Shows how to use largestConnectedComponentSubgraph to create a subgraph of the largest connected component.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/components/README.md#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport {largestConnectedComponentSubgraph} from 'graphology-components';\n\nconst subgraph = largestConnectedComponentSubgraph(graph);\n```\n\n----------------------------------------\n\nTITLE: Computing Onion Layers in JavaScript with Graphology\nDESCRIPTION: Examples of using the onionLayers function to compute and assign onion layers to nodes in a graph.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/cores.md#2025-04-17_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport onionLayers from 'graphology-cores/onionLayers';\n\n// Return the onion layers for each node\nconst onion = onionLayers(graph);\n\n// Assign to each node its onion layer\nonionLayers.assign(graph);\n\n// Assign with a custom attribute label\nonionLayers.assign(graph, 'onion');\n```\n\n----------------------------------------\n\nTITLE: Extracting k-Core Subgraphs with Graphology\nDESCRIPTION: Shows how to use the kCore function to extract a k-core subgraph from a graph. Can be used with either the highest core number in the graph or a custom k value.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/cores/README.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport kCore from 'graphology-cores/kCore';\n\n// Return the main k-core of the graph\nconst core = kCore(graph);\n\n// Return the k-core subgraph with an arbitrary k value\nconst core = kCore(graph, 4);\n```\n\n----------------------------------------\n\nTITLE: Calculating Graph Diameter in JavaScript\nDESCRIPTION: Shows how to compute the diameter of a graph using the graphology-metrics library. The diameter is the maximum eccentricity of any node in the graph.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/metrics/README.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport diameter from 'graphology-metrics/graph/diameter';\n\nconst graph = new Graph();\ngraph.addNode('1');\ngraph.addNode('2');\ngraph.addNode('3');\ngraph.addUndirectedEdge(1, 2);\ngraph.addUndirectedEdge(2, 3);\n\ndiameter(graph);\n>>> 2\n```\n\n----------------------------------------\n\nTITLE: Performing DFS traversal on a graph in JavaScript\nDESCRIPTION: Example of using the dfs function to perform a Depth-First Search traversal on a graph. It demonstrates basic usage and how to stop the traversal at a specific depth.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/traversal/README.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport {dfs} from 'graphology-traversal';\n// Alternatively, to only load the relevant code\nimport {dfs} from 'graphology-traversal/dfs';\n\ndfs(graph, function (node, attr, depth) {\n  console.log(node, attr, depth);\n});\n\n// Stopping at depth 3\ndfs(graph, function (node, attr, depth) {\n  return depth >= 3;\n});\n```\n\n----------------------------------------\n\nTITLE: Performing DFS traversal from a specific node in JavaScript\nDESCRIPTION: Example of using the dfsFromNode function to perform a Depth-First Search traversal starting from a specific node. It shows basic usage and how to stop the traversal at a specific depth.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/traversal/README.md#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport {dfsFromNode} from 'graphology-traversal';\n// Alternatively, to only load the relevant code\nimport {dfsFromNode} from 'graphology-traversal/dfs';\n\ndfsFromNode(graph, 'node1', function (node, attr, depth) {\n  console.log(node, attr, depth);\n});\n\n// Stopping at depth 3\ndfsFromNode(graph, 'node1', function (node, attr, depth) {\n  return depth >= 3;\n});\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Graphology Library in JavaScript\nDESCRIPTION: This snippet demonstrates different ways to import and use the Graphology library in JavaScript. It shows how to import specific sub-packages, parts of the library, or the entire library.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/library/README.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Importing a sub package\nimport * as metrics from 'graphology-library/metrics';\n\nmetrics.density(graph);\n\n// Importing parts of the library\nimport {metrics, layout} from 'graphology-library';\n\n// Importing the whole library\nimport * as lib from 'graphology-library';\n```\n\n----------------------------------------\n\nTITLE: Calculating Graph Modularity in JavaScript\nDESCRIPTION: Shows how to compute graph modularity using the graphology-metrics library. It supports both directed and undirected networks and allows for custom node partitions.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/metrics/README.md#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport modularity from 'graphology-metrics/graph/modularity';\n\n// Simplest way\nconst Q = modularity(graph);\n\n// Custom node partition\nconst Q = modularity(graph, {\n  getNodeCommunity(node, attr) {\n    return attr.customPartition;\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Counting Connected Components in JavaScript\nDESCRIPTION: Demonstrates how to use the countConnectedComponents function to get the number of connected components in a graph.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/components.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport {countConnectedComponents} from 'graphology-components';\n\nconst count = countConnectedComponents(graph);\n```\n\n----------------------------------------\n\nTITLE: Extracting k-Crust Subgraphs with Graphology\nDESCRIPTION: Shows how to use the kCrust function to extract a k-crust subgraph, containing nodes with less than k degree. Works with either the main k-crust or a custom k value.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/cores/README.md#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport kCrust from 'graphology-cores/kCrust';\n\n// Return the main k-crust of the graph\nconst crust = kCrust(graph);\n\n// Return the k-crust subgraph with an arbitrary k value\nconst crust = kCrust(graph, 4);\n```\n\n----------------------------------------\n\nTITLE: Synchronous Force Layout Implementation\nDESCRIPTION: Examples of using the force layout algorithm synchronously, including basic usage and usage with custom settings. Shows how to compute positions or directly assign them to graph nodes.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/layout-force/README.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport forceLayout from 'graphology-layout-force';\n\nconst positions = forceLayout(graph, {maxIterations: 50});\n\n// With settings:\nconst positions = forceLayout(graph, {\n  maxIterations: 50,\n  settings: {\n    gravity: 10\n  }\n});\n\n// To directly assign the positions to the nodes:\nforceLayout.assign(graph);\n```\n\n----------------------------------------\n\nTITLE: Computing Neighborhood Preservation in JavaScript using Graphology\nDESCRIPTION: Demonstrates how to compute the neighborhood preservation layout quality metric for a graph with x and y positions attached to its nodes using the Graphology library. This metric measures the average proportion of node neighborhood preserved in both topology and 2D layout space.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/metrics.md#2025-04-17_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport neighborhoodPreservation from 'graphology-metrics/layout-quality/neighborhood-preservation';\n\nneighborhoodPreservation(graph);\n// >>> 0.456\n```\n\n----------------------------------------\n\nTITLE: Implementing BFS Traversal\nDESCRIPTION: Example of performing a Breadth-First Search traversal over a graph using a callback function. Includes both basic traversal and depth-limited traversal examples.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/traversal.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {bfs} from 'graphology-traversal';\n// Alternatively, to only load the relevant code\nimport {bfs} from 'graphology-traversal/bfs';\n\nbfs(graph, function (node, attr, depth) {\n  console.log(node, attr, depth);\n});\n\n// Stopping at depth 3\nbfs(graph, function (node, attr, depth) {\n  return depth >= 3;\n});\n```\n\n----------------------------------------\n\nTITLE: Undirected Single Source Path Length\nDESCRIPTION: Example of calculating shortest path lengths in an undirected graph from a source node\nSOURCE: https://github.com/graphology/graphology/blob/master/src/shortest-path/README.md#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport {undirectedSingleSourceLength} from 'graphology-shortest-path';\n// Alternatively, if you want to load only the relevant code\nimport {undirectedSingleSourceLength} from 'graphology-shortest-path/unweighted';\n\n// Returning every shortest path between source & every node of the graph\nconst paths = undirectedSingleSourceLength(graph, source);\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Connected Components in JavaScript\nDESCRIPTION: Demonstrates how to use the forEachConnectedComponent function to iterate over connected components in a graph.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/components/README.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {forEachConnectedComponent} from 'graphology-components';\n\nforEachConnectedComponent(graph, component => {\n  console.log(component);\n});\n```\n\n----------------------------------------\n\nTITLE: Generating k-Core Subgraphs in JavaScript with Graphology\nDESCRIPTION: Examples of using the kCore function to generate k-core subgraphs with default and custom k values.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/cores.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport kCore from 'graphology-cores/kCore';\n\n// Return the main k-core of the graph\nconst core = kCore(graph);\n\n// Return the k-core subgraph with an arbitrary k value\nconst core = kCore(graph, 4);\n```\n\n----------------------------------------\n\nTITLE: Importing Graph Data in Graphology (JavaScript)\nDESCRIPTION: Demonstrates how to import serialized graph data into a Graphology instance. The import method can handle both serialized data and other Graph instances.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/serialization.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ngraph.import({\n  attributes: {name: 'My Graph'},\n  nodes: [{key: 'Thomas'}, {key: 'Eric'}],\n  edges: [{source: 'Thomas', target: 'Eric'}]\n});\n\ngraph.hasNode('Thomas');\n>>> true\n```\n\n----------------------------------------\n\nTITLE: Finding Largest Connected Component in JavaScript\nDESCRIPTION: Demonstrates the use of largestConnectedComponent function to retrieve the largest connected component in a graph.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/components/README.md#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport {largestConnectedComponent} from 'graphology-components';\n\nconst largest = largestConnectedComponent(graph);\n```\n\n----------------------------------------\n\nTITLE: Computing Edge Uniformity in JavaScript using Graphology\nDESCRIPTION: Shows how to compute the edge uniformity layout quality metric for a graph with x and y positions attached to its nodes using the Graphology library. Edge uniformity is the normalized standard deviation of edge length, with lower values indicating better layout.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/metrics.md#2025-04-17_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport edgeUniformity from 'graphology-metrics/layout-quality/edge-uniformity';\n\nedgeUniformity(graph);\n>>> ~1.132\n```\n\n----------------------------------------\n\nTITLE: Using ForceAtlas2 synchronous layout in JavaScript\nDESCRIPTION: Demonstrates how to use the ForceAtlas2 layout synchronously, including setting iterations and custom settings.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/layout-forceatlas2/README.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport forceAtlas2 from 'graphology-layout-forceatlas2';\n\nconst positions = forceAtlas2(graph, {iterations: 50});\n\n// With settings:\nconst positions = forceAtlas2(graph, {\n  iterations: 50,\n  settings: {\n    gravity: 10\n  }\n});\n\n// To directly assign the positions to the nodes:\nforceAtlas2.assign(graph);\n```\n\n----------------------------------------\n\nTITLE: Using Synchronous Force Layout in JavaScript\nDESCRIPTION: Examples of how to use the synchronous force layout function from graphology-layout-force package. Shows basic usage, usage with custom settings, and assigning positions directly to graph nodes.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/layout-force.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport forceLayout from 'graphology-layout-force';\n\nconst positions = forceLayout(graph, {maxIterations: 50});\n\n// With settings:\nconst positions = forceLayout(graph, {\n  maxIterations: 50,\n  settings: {\n    gravity: 10\n  }\n});\n\n// To directly assign the positions to the nodes:\nforceLayout.assign(graph);\n```\n\n----------------------------------------\n\nTITLE: TypeScript Graph Instantiation with Generic Type Parameters\nDESCRIPTION: Shows how to use TypeScript generics to define type constraints for node attributes, edge attributes, and graph attributes when creating a Graph instance.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/instantiation.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype NodeAttributes = {\n  label: string;\n  color: string;\n}\n\ntype EdgeAttributes = {\n  weight: number;\n}\n\ntype GraphAttributes = {\n  name?: string;\n}\n\nconst graph: Graph<NodeAttributes, EdgeAttributes, GraphAttributes> = new Graph();\n```\n\n----------------------------------------\n\nTITLE: Creating Union of Graphs in JavaScript\nDESCRIPTION: Shows how to use the union operator to combine two graphs, merging attributes of common nodes and edges.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/operators/README.md#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport {union} from 'graphology-operators';\n// Alternatively, to load only the relevant code:\nimport union from 'graphology-operators/union';\n\nconst R = union(G, H);\n```\n\n----------------------------------------\n\nTITLE: Using CirclePack Layout in JavaScript\nDESCRIPTION: Example showing how to use the circlePack layout function to arrange nodes as a bubble chart. The function provides options for customizing position attributes, center, hierarchy attributes, RNG function, and scale.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/layout/README.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport {circlepack} from 'graphology-layout';\n// Alternatively, to load only the relevant code:\nimport circlepack from 'graphology-layout/circlepack';\n\nconst positions = circlepack(graph);\n\n// With options\nconst positions = circlepack(graph, {\n  hierarchyAttributes: ['degree', 'community'],\n  rng: customRngFunction\n});\n\n// To directly assign the positions to the nodes:\ncirclepack.assign(graph);\n```\n\n----------------------------------------\n\nTITLE: Detecting Cycles in a Directed Graph using JavaScript\nDESCRIPTION: Example of using the hasCycle function to check for cycles in a directed graph. It demonstrates creating a graph, adding edges, and checking for cycles before and after creating a cycle.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/dag.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {hasCycle} from 'graphology-dag';\n// Alternatively, to load only the relevant code:\nimport hasCycle from 'graphology-dag/has-cycle';\n\nconst graph = new DirectedGraph();\ngraph.mergeEdge(0, 1);\ngraph.mergeEdge(1, 2);\ngraph.mergeEdge(2, 3);\n\nhasCycle(graph);\n>>> false\n\ngraph.mergeEdge(3, 0);\n\nhasCycle(graph);\n>>> true\n```\n\n----------------------------------------\n\nTITLE: Using Synchronous Noverlap Layout in JavaScript\nDESCRIPTION: Examples of using the synchronous Noverlap layout function with various options, including custom settings and input/output reducers.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/layout-noverlap.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport noverlap from 'graphology-layout-noverlap';\n\nconst positions = noverlap(graph, {maxIterations: 50});\n\n// With settings:\nconst positions = noverlap(graph, {\n  maxIterations: 50,\n  settings: {\n    ratio: 2\n  }\n});\n\n// With a custom input reducer\nconst positions = noverlap(graph, {\n  inputReducer: (key, attr) => ({\n    x: store[key].x,\n    y: store[key].y,\n    size: attr.size\n  }),\n  outputReducer: (key, pos) => ({x: pos.x * 10, y: pos.y * 10})\n});\n\n// To directly assign the positions to the nodes:\nnoverlap.assign(graph);\n```\n\n----------------------------------------\n\nTITLE: Iterating over topological generations with forEachTopologicalGeneration function\nDESCRIPTION: Example showing how to use forEachTopologicalGeneration to iterate over a DAG's generations (represented as arrays of node keys) using a callback function. Each generation contains nodes at the same level in the topological ordering.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/dag/README.md#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport {forEachTopologicalGeneration} from 'graphology-dag';\n// Alternatively, to load only the relevant code:\nimport {forEachTopologicalGeneration} from 'graphology-dag/topological-sort';\n\nconst graph = new DirectedGraph();\ngraph.mergeEdge(0, 1);\ngraph.mergeEdge(1, 2);\ngraph.mergeEdge(2, 3);\n\nforEachTopologicalGeneration(graph, generation => {\n  console.log(generation);\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Random Layout in JavaScript with Graphology\nDESCRIPTION: Examples of using the random layout algorithm to position nodes randomly. Shows importing, generating positions, applying custom options, and directly assigning layouts to graph nodes.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/layout.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport {random} from 'graphology-layout';\n// Alternatively, to load only the relevant code:\nimport random from 'graphology-layout/random';\n\nconst positions = random(graph);\n\n// With options:\nconst positions = random(graph, {rng: customRngFunction});\n\n// To directly assign the positions to the nodes:\nrandom.assign(graph);\n\n// To pass custom dimensions\nconst positions = random(graph, {dimensions: ['x', 'y', 'z']});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Connected Components in JavaScript\nDESCRIPTION: Shows how to use the connectedComponents function to get a list of all connected components in a graph.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/components/README.md#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport {connectedComponents} from 'graphology-components';\n\nconst components = connectedComponents(graph);\n```\n\n----------------------------------------\n\nTITLE: Converting Multi-Graph to Simple in JavaScript\nDESCRIPTION: Shows how to use the toSimple operator to convert a multi-graph to a simple graph, with an optional merge function for handling edge attribute conflicts.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/operators/README.md#2025-04-17_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport {toSimple} from 'graphology-operators';\n// Alternatively, to load only the relevant code:\nimport toSimple from 'graphology-operators/to-simple';\n\nconst simpleGraph = toSimple(multiGraph);\n\n// Using a merging function\nconst simpleGraph = toSimple(graph, (currentAttr, nextAttr) => {\n  return {\n    ...currentAttr,\n    weight: currentAttr.weight + nextAttr.weight\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Union of Graphs in JavaScript using Graphology\nDESCRIPTION: Shows how to create a union of two graphs, merging attributes of nodes and edges present in both graphs.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/operators.md#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport {union} from 'graphology-operators';\n// Alternatively, to load only the relevant code:\nimport union from 'graphology-operators/union';\n\nconst R = union(G, H);\n```\n\n----------------------------------------\n\nTITLE: Getting All Shortest Path Lengths from a Single Source\nDESCRIPTION: Example of using the singleSourceLength algorithm to find the lengths of shortest paths from a source node to all other nodes in an unweighted graph.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/shortest-path.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport {singleSourceLength} from 'graphology-shortest-path';\n// Alternatively, if you want to load only the relevant code\nimport {singleSourceLength} from 'graphology-shortest-path/unweighted';\n\n// Returning every shortest path between source & every node of the graph\nconst paths = singleSourceLength(graph, source);\n```\n\n----------------------------------------\n\nTITLE: Unweighted Bidirectional Path Finding\nDESCRIPTION: Example of finding an unweighted shortest path between two nodes using bidirectional search\nSOURCE: https://github.com/graphology/graphology/blob/master/src/shortest-path/README.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {bidirectional} from 'graphology-shortest-path';\n// Alternatively, if you want to load only the relevant code\nimport {bidirectional} from 'graphology-shortest-path/unweighted';\n\n// Returning the shortest path between source & target\nconst path = bidirectional(graph, source, target);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Connected Components in JavaScript\nDESCRIPTION: Shows how to use the connectedComponents function to get a list of all connected components in a graph.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/components.md#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport {connectedComponents} from 'graphology-components';\n\nconst components = connectedComponents(graph);\n```\n\n----------------------------------------\n\nTITLE: Using Force Layout Supervisor with requestAnimationFrame\nDESCRIPTION: Implementation example of the Force Supervisor which uses window.requestAnimationFrame to run the layout live without affecting UI performance. Includes methods for starting, stopping, and managing the layout process.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/layout-force.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport ForceSupervisor from 'graphology-layout-force/worker';\n\nconst layout = new ForceSupervisor(graph, params);\n\n// To start the layout. It will automatically stop when converged\nlayout.start();\n\n// To stop the layout\nlayout.stop();\n\n// To kill the layout and release attached memory and listeners\nlayout.kill();\n\n// Assess whether the layout is currently running\nlayout.isRunning();\n```\n\n----------------------------------------\n\nTITLE: Creating Subgraph of Largest Connected Component in JavaScript\nDESCRIPTION: Shows how to use largestConnectedComponentSubgraph to create a subgraph of the largest connected component in a graph.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/components.md#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport {largestConnectedComponentSubgraph} from 'graphology-components';\n\nconst subgraph = largestConnectedComponentSubgraph(graph);\n```\n\n----------------------------------------\n\nTITLE: Using Dijkstra's Bidirectional Algorithm for Weighted Graphs\nDESCRIPTION: Example of using Dijkstra's bidirectional algorithm to find the shortest path in a weighted graph, with options for custom weight attributes and weight getter functions.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/shortest-path.md#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport {dijkstra} from 'graphology-shortest-path';\n// Alternatively, if you want to load only the relevant code\nimport dijkstra from 'graphology-shortest-path/dijkstra';\n\n// Returning the shortest path between source & target\nconst path = dijkstra.bidirectional(graph, source, target);\n\n// If you store edges' weight in custom attribute\nconst path = dijkstra.bidirectional(graph, source, target, 'customWeight');\n\n// Using a custom weight getter function\nconst path = dijkstra.bidirectional(\n  graph,\n  source,\n  target,\n  (_, attr) => attr.importance\n);\n```\n\n----------------------------------------\n\nTITLE: Computing Graph Density in JavaScript\nDESCRIPTION: Demonstrates how to compute graph density using various functions from the graphology-metrics library. It includes examples for different graph types and methods to specify graph properties.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/metrics/README.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {density} from 'graphology-metrics/graph/density';\n\n// Passing a graph instance\nconst d = density(graph);\n\n// Passing the graph's order & size\nconst d = density(order, size);\n\n// Or to force the kind of density being computed\nimport {\n  mixedDensity,\n  directedDensity,\n  undirectedDensity,\n  multiMixedDensity,\n  multiDirectedDensity,\n  multiUndirectedDensity\n} from 'graphology-metric/graph/density';\n\nconst d = undirectedDensity(mixedGraph);\n\n// If you need to chose the kind of density dynamically\nimport {abstractDensity} from 'graphology-metric/graph/density';\n\nabstractDensity('directed', true, 10, 24);\n```\n\n----------------------------------------\n\nTITLE: Converting Graph to Directed in JavaScript\nDESCRIPTION: Demonstrates the use of toDirected operator to convert a graph to a directed graph, with an optional merge function for handling edge attribute conflicts.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/operators/README.md#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport {toDirected} from 'graphology-operators';\n// Alternatively, to load only the relevant code:\nimport toDirected from 'graphology-operators/to-directed';\n\nconst directedGraph = toDirected(graph);\n\n// Using a merging function\nconst directedGraph = toDirected(graph, (currentAttr, nextAttr) => {\n  return {\n    ...currentAttr,\n    weight: currentAttr.weight + nextAttr.weight\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Computing Graph Diameter in JavaScript\nDESCRIPTION: Example demonstrating how to compute the diameter of a graph, which represents the maximum eccentricity of any node.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/metrics.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport diameter from 'graphology-metrics/graph/diameter';\n\nconst graph = new Graph();\ngraph.addNode('1');\ngraph.addNode('2');\ngraph.addNode('3');\ngraph.addUndirectedEdge(1, 2);\ngraph.addUndirectedEdge(2, 3);\n\ndiameter(graph);\n>>> 2\n```\n\n----------------------------------------\n\nTITLE: Inferring ForceAtlas2 settings in JavaScript\nDESCRIPTION: Demonstrates how to use the inferSettings method to automatically determine suitable layout settings based on the graph or node count.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/layout-forceatlas2/README.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport forceAtlas2 from 'graphology-layout-forceatlas2';\n\nconst sensibleSettings = forceAtlas2.inferSettings(graph);\nconst positions = forceAtlas2(graph, {\n  iterations: 50,\n  settings: sensibleSettings\n});\n\n// Alternatively using the graph's order instead of a graph instance\nconst sensibleSettings = forceAtlas2.inferSettings(500);\n```\n\n----------------------------------------\n\nTITLE: Assigning Layout to Graph from Object in JavaScript\nDESCRIPTION: Example showing how to use the assignLayout utility function to assign a layout object to a graph. The function provides options for customizing dimensions.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/layout/README.md#2025-04-17_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport {assignLayout} from 'graphology-layout/utils';\n\nassignLayout(graph, layout);\n\n// Custom dimensions\nassignLayout(graph, layout, {dimensions: ['x', 'y', 'z']});\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Connected Components in JavaScript\nDESCRIPTION: Demonstrates how to use the forEachConnectedComponent function to iterate over connected components in a graph.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/components.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {forEachConnectedComponent} from 'graphology-components';\n\nforEachConnectedComponent(graph, component => {\n  console.log(component);\n});\n```\n\n----------------------------------------\n\nTITLE: Single Source Path Length Calculation\nDESCRIPTION: Example of calculating shortest path lengths from a source node to all other nodes\nSOURCE: https://github.com/graphology/graphology/blob/master/src/shortest-path/README.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport {singleSourceLength} from 'graphology-shortest-path';\n// Alternatively, if you want to load only the relevant code\nimport {singleSourceLength} from 'graphology-shortest-path/unweighted';\n\n// Returning every shortest path between source & every node of the graph\nconst paths = singleSourceLength(graph, source);\n```\n\n----------------------------------------\n\nTITLE: Computing Weighted Degree of Nodes in JavaScript\nDESCRIPTION: Demonstrates how to calculate the weighted degree of nodes using various functions from the graphology-metrics library. It supports different types of weighted degrees and custom weight attributes.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/metrics/README.md#2025-04-17_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  weightedDegree,\n  weightedInDegree,\n  weightedOutDegree,\n  weightedInboundDegree,\n  weightedOutboundDegree,\n  weightedUndirectedDegree,\n  weightedDirectedDegree\n} from 'graphology-metrics/node/weighted-degree';\n\n// To compute weighted degree of a node\nweightedDegree(graph, 'A');\n\n// To use a custom weight\nweightedDegree(graph, 'A', function (_, attr) {\n  return attr.importance;\n});\n```\n\n----------------------------------------\n\nTITLE: Handling edgeAdded Event in Graphology\nDESCRIPTION: Example showing how to listen for the 'edgeAdded' event which is emitted when an edge is added to the graph. The event payload includes the key, source, and target of the added edge.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/events.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ngraph.on('edgeAdded', function({key, source, target}) {\n  console.log(key, source, target);\n})\n\ngraph.addEdgeWithKey('T->R', 'Thomas', 'Richard');\n// Will print:\n>>> 'T->R', 'Thomas', 'Richard'\n```\n\n----------------------------------------\n\nTITLE: Grouping nodes into topological generations with topologicalGenerations function\nDESCRIPTION: Example showing how to use the topologicalGenerations function to get an array of arrays representing the successive generations of nodes in a topological ordering of a DAG.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/dag/README.md#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport {topologicalGenerations} from 'graphology-dag';\n// Alternatively, to load only the relevant code:\nimport {topologicalGenerations} from 'graphology-dag/topological-sort';\n\nconst graph = new DirectedGraph();\ngraph.mergeEdge(0, 1);\ngraph.mergeEdge(1, 2);\ngraph.mergeEdge(0, 3);\n\ntopologicalGenerations(graph);\n>>> [[ '0' ], ['1', '3'], ['2']]\n```\n\n----------------------------------------\n\nTITLE: Single Source Path Finding\nDESCRIPTION: Example of finding all shortest paths from a single source node to all other nodes\nSOURCE: https://github.com/graphology/graphology/blob/master/src/shortest-path/README.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport {singleSource} from 'graphology-shortest-path';\n// Alternatively, if you want to load only the relevant code\nimport {singleSource} from 'graphology-shortest-path/unweighted';\n\n// Returning every shortest path between source & every node of the graph\nconst paths = singleSource(graph, source);\n```\n\n----------------------------------------\n\nTITLE: Finding All Shortest Paths from a Single Source Node\nDESCRIPTION: Example of using the singleSource algorithm to find shortest paths from a source node to all other nodes in an unweighted graph.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/shortest-path.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport {singleSource} from 'graphology-shortest-path';\n// Alternatively, if you want to load only the relevant code\nimport {singleSource} from 'graphology-shortest-path/unweighted';\n\n// Returning every shortest path between source & every node of the graph\nconst paths = singleSource(graph, source);\n```\n\n----------------------------------------\n\nTITLE: Asynchronous graph rendering with graphology-canvas\nDESCRIPTION: JavaScript code snippet showing how to render a graph asynchronously using the renderAsync function from graphology-canvas, which helps avoid freezing the main thread.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/canvas/README.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport {renderAsync} from 'graphology-canvas';\n\nrenderAsync(graph, context, settings, function () {\n  console.log('Done!');\n});\n```\n\n----------------------------------------\n\nTITLE: Checking if an edge would create a cycle with willCreateCycle function\nDESCRIPTION: Example showing how to use the willCreateCycle function to determine if adding a specific edge would create a cycle in a DAG. The function preemptively checks cycle formation without modifying the graph.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/dag/README.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport {willCreateCycle} from 'graphology-dag';\n// Alternatively, to load only the relevant code:\nimport willCreateCycle from 'graphology-dag/will-create-cycle';\n\nconst graph = new DirectedGraph();\ngraph.mergeEdge(0, 1);\ngraph.mergeEdge(1, 2);\ngraph.mergeEdge(2, 3);\n\nwillCreateCycle(graph, 3, 0);\n>>> true\nwillCreateCycle(graph, 0, 2);\n>>> false\n```\n\n----------------------------------------\n\nTITLE: Using Subgraph Operator in JavaScript\nDESCRIPTION: Demonstrates how to use the subgraph operator to create a subgraph from a given graph. It shows three methods: using an array of nodes, a set of nodes, and a filtering function.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/operators/README.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {subgraph} from 'graphology-operators';\n// Alternatively, to load only the relevant code:\nimport subgraph from 'graphology-operators/subgraph';\n\n// From an array of nodes\nconst sub = subgraph(graph, ['John', 'Mary', 'Sue']);\n\n// From a set of nodes\nconst sub = subgraph(graph, new Set(['John', 'Mary', 'Sue']));\n\n// From a filtering function\nconst sub = subgraph(graph, function (key, attr) {\n  return key.startsWith('J') || attr.color === 'red';\n});\n```\n\n----------------------------------------\n\nTITLE: Using isBypartiteBy Function in JavaScript\nDESCRIPTION: Demonstrates how to import and use the isBypartiteBy function from the graphology-bipartite package. It shows two import methods and provides examples of function usage with different parameter types.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/bipartite/README.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {isBypartiteBy} from 'graphology-bipartite';\n// Alternatively, to load only the relevant code:\nimport isBypartiteBy from 'graphology-bipartite/is-bipartite-by';\n\n// Wrt some node attribute:\nisBipartiteBy(graph, 'category');\n\n// Using some getter function:\nisBipartiteBy(graph, (node, attr) => externalIndex[node].category);\n```\n\n----------------------------------------\n\nTITLE: Finding Strongly Connected Components in JavaScript\nDESCRIPTION: Shows how to use stronglyConnectedComponents function to get a list of strongly connected components in a mixed or directed graph.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/components.md#2025-04-17_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport {stronglyConnectedComponents} from 'graphology-components';\n\nconst components = stronglyConnectedComponents(graph);\n```\n\n----------------------------------------\n\nTITLE: Implementing Circle Pack Layout in JavaScript with Graphology\nDESCRIPTION: Examples of using the circlePack layout algorithm to arrange nodes as a bubble chart. Shows importing, generating positions with hierarchy attributes, and directly assigning layouts to graph nodes.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/layout.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport {circlepack} from 'graphology-layout';\n// Alternatively, to load only the relevant code:\nimport circlepack from 'graphology-layout/circlepack';\n\nconst positions = circlepack(graph);\n\n// With options\nconst positions = circlepack(graph, {\n  hierarchyAttributes: ['degree', 'community'],\n  rng: customRngFunction\n});\n\n// To directly assign the positions to the nodes:\ncirclepack.assign(graph);\n```\n\n----------------------------------------\n\nTITLE: Updating Graph Edges with Custom Keys\nDESCRIPTION: Shows how to update edges with specific keys in a graph, including weight attribute manipulation and handling of existing edges.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/mutation.md#2025-04-17_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst graph = new UndirectedGraph();\n\n// Since the edge does not exist, it will be added\ngraph.updateEdgeWithKey('J->M', 'John', 'Martha', attr => {\n  return {\n    ...attr,\n    weight: (attr.weight || 0) + 1\n  };\n});\n\n// Since the edge already exist, its weight will get incremented this time\ngraph.updateEdgeWithKey('J->M', 'John', 'Martha', attr => {\n  return {\n    ...attr,\n    weight: (attr.weight || 0) + 1\n  };\n});\n\ngraph.getEdgeAttribute('J->M', 'weight');\n>>> 2\n\n// The method returns a 4-tuple containing useful info\nconst [key, edgeWasAdded, sourceWasAdded, targetWasAdded] = graph.updateEdgeWithKey('J->M', 'John', 'Martha');\n```\n\n----------------------------------------\n\nTITLE: Initializing and Querying Graph Neighbors in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a graph, add edges, and use various methods to query and iterate over neighbors. It showcases array-returning methods, callback methods, functional-style iteration, and iterators.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/iteration.md#2025-04-17_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst graph = new Graph();\n\ngraph.mergeEdge('Thomas', 'Rosaline');\ngraph.mergeEdge('Thomas', 'Emmett');\ngraph.mergeEdge('Catherine', 'Thomas');\ngraph.mergeEdge('Rosaline', 'Catherine');\ngraph.mergeEdge('John', 'Daniel');\ngraph.mergeEdge('John', 'Daniel');\n\n// Using the array-returning methods\ngraph.neighbors('Thomas');\n>>> ['Rosaline', 'Emmett', 'Catherine']\n\n// Using the callback methods\ngraph.forEachNeighbor('Thomas', function(neighbor, attributes) {\n  console.log(neighbor, attributes);\n});\n\n// Using functional-style iteration method\nconst neighborDegress = graph.mapNeighbors((neighbor) => {\n  return graph.degree(neighbor);\n});\n\n// Using the iterators\nfor (const {neighbor, attributes} of graph.neighborEntries()) {\n  console.log(neighbor, attributes);\n}\n```\n\n----------------------------------------\n\nTITLE: Detecting cycles in a directed graph with hasCycle function\nDESCRIPTION: Example demonstrating how to use the hasCycle function to determine if a directed graph contains any cycles. The function returns a boolean value indicating cycle presence.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/dag/README.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {hasCycle} from 'graphology-dag';\n// Alternatively, to load only the relevant code:\nimport hasCycle from 'graphology-dag/has-cycle';\n\nconst graph = new DirectedGraph();\ngraph.mergeEdge(0, 1);\ngraph.mergeEdge(1, 2);\ngraph.mergeEdge(2, 3);\n\nhasCycle(graph);\n>>> false\n\ngraph.mergeEdge(3, 0);\n\nhasCycle(graph);\n>>> true\n```\n\n----------------------------------------\n\nTITLE: Creating a Full Copy of a Graph in JavaScript\nDESCRIPTION: Demonstrates how to create a complete copy of a graph instance using the copy() method, which duplicates all nodes, edges, and properties. The example shows creating a graph with nodes and edges, then creating a copy that maintains all the original graph's data and type.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/utilities.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngraph.mergeEdgeWithKey('T->E', 'Thomas', 'Eric', {type: 'KNOWS'});\n\nconst newGraph = graph.copy();\nnewGraph.hasNode('Eric');\n>>> true\nnewGraph.order\n>>> 2\nnewGraph.size\n>>> 1\ngraph.type === newGraph.type\n>>> true\n```\n\n----------------------------------------\n\nTITLE: Computing Closeness Centrality in JavaScript\nDESCRIPTION: Calculates closeness centrality for graph nodes with options for normalization using Wasserman & Faust's scheme. Supports direct attribute mapping.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/metrics/README.md#2025-04-17_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport closenessCentrality from 'graphology-metrics/centrality/closeness';\n\n// To compute the eigenvector centrality and return the score per node:\nconst scores = closenessCentrality(graph);\n\n// To directly map the result to nodes' attributes:\nclosenessCentrality.assign(graph);\n\n// Note that you can also pass options to customize the algorithm:\nconst p = closenessCentrality(graph, {wassermanFaust: true});\n```\n\n----------------------------------------\n\nTITLE: Force Layout Supervisor Implementation\nDESCRIPTION: Implementation of a layout supervisor that uses requestAnimationFrame for live layout updates without blocking the UI thread. Includes methods for starting, stopping, and managing the layout process.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/layout-force/README.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport ForceSupervisor from 'graphology-layout-force/worker';\n\nconst layout = new ForceSupervisor(graph, params);\n\n// To start the layout. It will automatically stop when converged\nlayout.start();\n\n// To stop the layout\nlayout.stop();\n\n// To kill the layout and release attached memory and listeners\nlayout.kill();\n\n// Assess whether the layout is currently running\nlayout.isRunning();\n```\n\n----------------------------------------\n\nTITLE: Computing Graph Modularity in JavaScript\nDESCRIPTION: Examples demonstrating how to compute graph modularity with different options and custom node partitions.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/metrics.md#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport modularity from 'graphology-metrics/graph/modularity';\n\n// Simplest way\nconst Q = modularity(graph);\n\n// Custom node partition\nconst Q = modularity(graph, {\n  getNodeCommunity(node, attr) {\n    return attr.customPartition;\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Applying Rotation to Graph Layouts in JavaScript with Graphology\nDESCRIPTION: Examples of using the rotation utility to rotate node coordinates by a specified angle. Shows importing, generating rotated positions, applying options, and directly assigning rotated layouts to graph nodes.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/layout.md#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport {rotation} from 'graphology-layout';\n// Alternatively, to load only the relevant code:\nimport rotation from 'graphology-layout/rotation';\n\nconst positions = rotation(graph, Math.PI / 2);\n\n// With options:\nconst positions = rotation(graph, Math.PI / 2, {centeredOnZero: true});\n\n// To directly assign the positions to the nodes:\nrotation.assign(graph, Math.PI / 2);\n```\n\n----------------------------------------\n\nTITLE: Computing Node and Edge Extent in JavaScript\nDESCRIPTION: Demonstrates how to compute the extent (min, max) of node or edge attributes using the graphology-metrics library. It supports both single and multiple attribute computations.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/metrics/README.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport {nodeExtent, edgeExtent} from 'graphology-metrics/graph';\n// Alternatively, to load only the relevant code:\nimport {nodeExtent, edgeExtent} from 'graphology-metrics/graph/extent';\n\n// Retrieving a single node attribute's extent\nnodeExtent(graph, 'size');\n>>> [1, 34]\n\n// Retrieving multiple node attributes' extents\nnodeExtent(graph, ['x', 'y']);\n>>> {x: [-4, 3], y: [-34, 56]}\n\n// The same for edges\nedgeExtent(graph, 'weight');\n>>> [0, 5.7]\n```\n\n----------------------------------------\n\nTITLE: Using Random Layout in JavaScript\nDESCRIPTION: Example showing how to use the random layout function to position nodes randomly. The function provides options for customizing dimensions, center, RNG function, and scale of the layout.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/layout/README.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport {random} from 'graphology-layout';\n// Alternatively, to load only the relevant code:\nimport random from 'graphology-layout/random';\n\nconst positions = random(graph);\n\n// With options:\nconst positions = random(graph, {rng: customRngFunction});\n\n// To directly assign the positions to the nodes:\nrandom.assign(graph);\n\n// To pass custom dimensions\nconst positions = random(graph, {dimensions: ['x', 'y', 'z']});\n```\n\n----------------------------------------\n\nTITLE: Calculating Node Eccentricity in JavaScript\nDESCRIPTION: Shows how to compute the eccentricity of a node (maximum shortest path length to any other node) using the graphology-metrics library.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/metrics/README.md#2025-04-17_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport eccentricity from 'graphology-metrics/node/eccentricity';\n\ngraph.addNode('1');\ngraph.addNode('2');\ngraph.addNode('3');\ngraph.addNode('4');\ngraph.addUndirectedEdge(1, 2);\ngraph.addUndirectedEdge(2, 3);\ngraph.addUndirectedEdge(3, 1);\ngraph.addUndirectedEdge(3, 4);\n\neccentricity(graph, 3) >> 1;\n```\n\n----------------------------------------\n\nTITLE: Calculating Weighted Size of a Graph in JavaScript\nDESCRIPTION: Shows how to compute the weighted size of a graph (sum of edge weights) using the graphology-metrics library. It supports custom weight attributes and getter functions.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/metrics/README.md#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport weightedSize from 'graphology-metrics/graph/weighted-size';\n\nconst graph = new Graph();\ngraph.mergeEdge(1, 2, {weight: 3});\ngraph.mergeEdge(1, 2, {weight: 1});\n\n// Simplest way\nweightedSize(graph);\n>>> 4\n\n// With custom weight attribute\nweightedSize(graph, 'myWeightAttribute');\n>>> 4\n\n// With custom getter\nweightedSize(graph, (_, attr) => attr.importance);\n```\n\n----------------------------------------\n\nTITLE: Calculating Node Degree Without Self Loops in Graphology (JavaScript)\nDESCRIPTION: Shows how to use degreeWithoutSelfLoops and related methods to calculate the degree of a node, excluding self loops. Throws an error if the node is not found in the graph.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/read.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ngraph.addNodeFrom(['Timothy', 'Jack', 'Clarice', 'Martha']);\ngraph.addEdge('Timothy', 'Timothy');\ngraph.addEdge('Timothy', 'Jack');\ngraph.addEdge('Timothy', 'Clarice');\ngraph.addEdge('Martha', 'Timothy');\n\ngraph.degreeWithoutSelfLoops('Timothy');\n>>> 3\ngraph.inWithoutSelfLoops('Timothy');\n>>> 1\ngraph.outWithoutSelfLoops('Timothy');\n>>> 2\n```\n\n----------------------------------------\n\nTITLE: Computing Graph Density in JavaScript\nDESCRIPTION: Examples showing different ways to compute graph density, including simple density calculation and specialized density calculations for different graph types.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/metrics.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {density} from 'graphology-metrics/graph/density';\n\n// Passing a graph instance\nconst d = density(graph);\n\n// Passing the graph's order & size\nconst d = density(order, size);\n\n// Or to force the kind of density being computed\nimport {\n  mixedDensity,\n  directedDensity,\n  undirectedDensity,\n  multiMixedDensity,\n  multiDirectedDensity,\n  multiUndirectedDensity\n} from 'graphology-metric/graph/density';\n\nconst d = undirectedDensity(mixedGraph);\n\n// If you need to chose the kind of density dynamically\nimport {abstractDensity} from 'graphology-metric/graph/density';\n\nabstractDensity('directed', true, 10, 24);\n```\n\n----------------------------------------\n\nTITLE: Computing Degree Centrality in JavaScript\nDESCRIPTION: Calculates degree centrality for graph nodes with support for in-degree and out-degree centrality. Supports direct attribute mapping and custom attribute naming.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/metrics/README.md#2025-04-17_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  degreeCentrality,\n  inDegreeCentrality,\n  outDegreeCentrality\n} from 'graphology-metrics/centrality/degree';\n\n// To compute degree centrality for every node:\nconst centralities = degreeCentrality(graph);\n\n// To directly map the result onto nodes' attributes (`degreeCentrality`):\ndegreeCentrality.assign(graph);\n\n// To directly map the result onto a custom attribute:\ndegreeCentrality.assign(graph, {nodeCentralityAttribute: 'myCentrality'});\n```\n\n----------------------------------------\n\nTITLE: Generating k-Shell Subgraphs in JavaScript with Graphology\nDESCRIPTION: Examples of using the kShell function to generate k-shell subgraphs with default and custom k values.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/cores.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport kShell from 'graphology-cores/kShell';\n\n// Return the main k-shell of the graph\nconst shell = kShell(graph);\n\n// Return the k-shell subgraph with an arbitrary k value\nconst shell = kShell(graph, 5);\n```\n\n----------------------------------------\n\nTITLE: Updating Each Node's Attributes in JavaScript\nDESCRIPTION: Demonstrates how to update attributes for all nodes using the updateEachNodeAttributes method, with optional hints for event listeners.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/attributes.md#2025-04-17_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\ngraph.addNode('Martha', {age: 34});\ngraph.addNode('Lara', {age: 78});\n\ngraph.updateEachNodeAttributes((node, attr) => {\n  return {\n    ...attr,\n    age: attr.age + 1\n  };\n});\n\ngraph.nodes().map(n => graph.getNodeAttribute(n, 'age'));\n>>> [35, 79]\n\n// Note that you can indicate hints\ngraph.updateEachNodeAttributes((node, attr) => {\n  return {\n    ...attr,\n    age: attr.age + 1\n  };\n}, {attributes: ['age']}); // <-- here\n```\n\n----------------------------------------\n\nTITLE: Custom Edge Key Generation in Graphology\nDESCRIPTION: Demonstrates how to optimize performance by handling edge keys manually instead of relying on automatic key generation. This approach uses a simple incremental integer generator which can be more efficient than the built-in mechanism that prevents collisions.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/performance-tips.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction incrementalId() {\n  let i = 0;\n\n  return () => i++;\n}\n\nconst edgeKeyGenerator = incrementalId();\n\nconst graph = new Graph();\ngraph.addNode('one');\ngraph.addNode('two');\ngraph.addEdgeWithKey(edgeKeyGenerator(), 'one', 'two');\n```\n\n----------------------------------------\n\nTITLE: Creating an Erdos-Renyi (Binomial) Graph in JavaScript\nDESCRIPTION: Creates an Erdos-Renyi (binomial) graph based on probability of edge creation. Parameters include order (nodes), probability for edge creation, or approximate size. For sparse graphs, a specialized function is available.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/generators/README.md#2025-04-17_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport Graph from 'graphology';\nimport {erdosRenyi} from 'graphology-generators/random';\n// Alternatively, if you only want to load relevant code\nimport erdosRenyi from 'graphology-generators/random/erdos-renyi';\n\n// Creating a binomial graph\nconst graph = erdosRenyi(Graph, {order: 10, probability: 0.5});\n\n// If your graph is sparse (low probability), you can use the `sparse` version\n// which runs in O(m + n) rather than O(n^2)\nconst graph = erdosRenyi.sparse(Graph, {order: 1000, probability: 0.1});\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Graph Edges in JavaScript with Graphology\nDESCRIPTION: Examples demonstrating various methods to iterate over edges in a Graphology graph, including retrieving edge arrays, filtering edges by source/target nodes, using callbacks, and using JavaScript iterators.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/iteration.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst graph = new Graph();\n\ngraph.mergeEdgeWithKey('T->R', 'Thomas', 'Rosaline');\ngraph.mergeEdgeWithKey('T->E', 'Thomas', 'Emmett');\ngraph.mergeEdgeWithKey('C->T', 'Catherine', 'Thomas');\ngraph.mergeEdgeWithKey('R->C', 'Rosaline', 'Catherine');\ngraph.mergeEdgeWithKey('J->D1', 'John', 'Daniel');\ngraph.mergeEdgeWithKey('J->D2', 'John', 'Daniel');\n\n// Using the array-returning methods:\ngraph.edges();\n>>> ['T->R', 'T->E', 'C->T', 'R->C']\n\ngraph.edges('Thomas');\n>>> ['T->R', 'T->E', 'C->T']\n\ngraph.edges('John', 'Daniel');\n>>> ['J->D1', 'J->D2']\n\n// Using the callback methods\ngraph.forEachEdge(\n  (edge, attributes, source, target, sourceAttributes, targetAttributes) => {\n  console.log(`Edge from ${source} to ${target}`);\n});\n\n// And the counterparts to target a node or path's edges\ngraph.forEachEdge('Thomas', callback);\ngraph.forEachEdge('John', 'Daniel', callback);\n\n// Using functional-style iteration method\nconst weights = graph.mapEdges((edge, attr) => {\n  return attr.weight;\n});\n\n// Using the iterators\nfor (const {edge, attributes, ...} of graph.edgeEntries()) {\n  console.log(edge, attributes);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Edge Attributes in JavaScript using Graphology\nDESCRIPTION: Demonstrates how to set edge attributes using both edge key and source/target node references.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/attributes.md#2025-04-17_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\ngraph.addNode('Martha');\ngraph.addNode('Jack');\nconst edge = graph.addEdge('Martha', 'Jack', {type: 'KNOWS'});\n\n// Using the edge's key:\ngraph.setEdgeAttribute(edge, 'type', 'LIKES');\n\n// Using the edge's source & target:\ngraph.setEdgeAttribute('Martha', 'Jack', 'type', 'LIKES');\n```\n\n----------------------------------------\n\nTITLE: Implementing Circular Layout in JavaScript with Graphology\nDESCRIPTION: Examples of using the circular layout algorithm to arrange nodes in a circle. Shows importing, generating positions, applying options, and directly assigning layouts to graph nodes.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/layout.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {circular} from 'graphology-layout';\n// Alternatively, to load only the relevant code:\nimport circular from 'graphology-layout/circular';\n\nconst positions = circular(graph);\n\n// With options:\nconst positions = circular(graph, {scale: 100});\n\n// To directly assign the positions to the nodes:\ncircular.assign(graph);\n\n// To pass custom dimensions\nconst positions = random(graph, {dimensions: ['x1', 'x2']});\n```\n\n----------------------------------------\n\nTITLE: Using ForceAtlas2 Layout with Web Worker in JavaScript\nDESCRIPTION: Shows how to use the ForceAtlas2 layout in a web worker, including starting, stopping, and managing the layout process.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/layout-forceatlas2.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport FA2Layout from 'graphology-layout-forceatlas2/worker';\n\n// The parameters are the same as for the synchronous version, minus `iterations` of course\nconst layout = new FA2Layout(graph, {\n  settings: {gravity: 1}\n});\n\n// To start the layout\nlayout.start();\n\n// To stop the layout\nlayout.stop();\n\n// To kill the layout and release attached memory\nlayout.kill();\n\n// Assess whether the layout is currently running\nlayout.isRunning();\n```\n\n----------------------------------------\n\nTITLE: Computing Neighborhood Preservation in JavaScript\nDESCRIPTION: Calculates neighborhood preservation layout quality metric with O(N * log(N)) time complexity. Measures how well node neighborhoods are preserved in 2D layout.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/metrics/README.md#2025-04-17_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nimport neighborhoodPreservation from 'graphology-metrics/layout-quality/neighborhood-preservation';\n\nneighborhoodPreservation(graph);\n// >>> 0.456\n```\n\n----------------------------------------\n\nTITLE: Converting Graph to Undirected in JavaScript\nDESCRIPTION: Demonstrates the use of toUndirected operator to convert a graph to an undirected graph, with an optional merge function for handling edge attribute conflicts.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/operators/README.md#2025-04-17_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport {toUndirected} from 'graphology-operators';\n// Alternatively, to load only the relevant code:\nimport toUndirected from 'graphology-operators/to-undirected';\n\nconst undirectedGraph = toUndirected(graph);\n\n// Using a merging function\nconst undirectedGraph = toUndirected(graph, (currentAttr, nextAttr) => {\n  return {\n    ...currentAttr,\n    weight: currentAttr.weight + nextAttr.weight\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Finding All Simple Edge Group Paths in a Multi-Graph\nDESCRIPTION: Demonstrates finding simple paths in multi-graphs represented by groups of equivalent edges. Designed specifically for multi-graphs and returns nested arrays of edge groups representing possible paths.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/simple-path.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport {allSimpleEdgeGroupPaths} from 'graphology-simple-path';\n\nconst graph = new Graph();\ngraph.mergeEdgeWithKey('1->2a', '1', '2');\ngraph.mergeEdgeWithKey('1->2b', '1', '2');\ngraph.mergeEdgeWithKey('1->3a', '1', '3');\ngraph.mergeEdgeWithKey('2->3a', '2', '3');\n\nconst paths = allSimpleEdgeGroupPaths(graph, '1', '3');\n>>> [\n  [['1->3a']],\n  [['1->2a', '1->2b'], ['2->3a']]\n]\n\n// To get cycles, just pass same source & target\nconst cycles = allSimpleEdgeGroupPaths(graph, '1', '1');\n\n// To limit traversal to a certain depth\nconst limitedPaths = allSimpleEdgeGroupPaths(graph, '1', '3', {maxDepth: 2});\n```\n\n----------------------------------------\n\nTITLE: Getting Edge Attributes in JavaScript using Graphology\nDESCRIPTION: Examples of retrieving edge attributes using either edge key or source/target nodes. Shows how to get single attributes and full attribute objects.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/attributes.md#2025-04-17_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\ngraph.addNode('Martha');\ngraph.addNode('Catherine');\nconst edge = graph.addEdge('Martha', 'Catherine', {type: 'KNOWS'});\n\n// Using the edge's key:\ngraph.getEdgeAttribute(edge, 'type');\n>>> 'KNOWS'\n\n// Using the edge's source & target:\ngraph.getEdgeAttribute('Martha', 'Catherine', 'type');\n>>> 'KNOWS'\n```\n\n----------------------------------------\n\nTITLE: Creating a Zachary's Karate Club Graph in JavaScript\nDESCRIPTION: Returns Zachary's karate club graph, a well-known social network dataset often used in community detection algorithms. Takes only a graphology constructor as parameter.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/generators/README.md#2025-04-17_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport Graph from 'graphology';\nimport {karateClub} from 'graphology-generators/karate-club';\n// Alternatively, if you only want to load relevant code\nimport karateClub from 'graphology-generators/social/karate-club';\n\n// Generating the graph\nconst graph = karateClub(Graph);\n```\n\n----------------------------------------\n\nTITLE: Merging Edge Attributes in JavaScript using Graphology\nDESCRIPTION: Shows how to merge new attributes with existing edge attributes using both edge key and source/target references.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/attributes.md#2025-04-17_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\ngraph.addNode('Martha');\ngraph.addNode('Jack');\nconst edge = graph.addEdge('Martha', 'Jack', {type: 'KNOWS'});\n\n// Using the edge's key:\ngraph.mergeEdgeAttributes(edge, {type: 'LIKES', weight: 3});\n\n// Using the edge's source & target:\ngraph.mergeEdgeAttributes('Martha', 'Jack', {type: 'LIKES', weight: 3}));\n```\n\n----------------------------------------\n\nTITLE: Creating a Girvan-Newman Random Graph in JavaScript\nDESCRIPTION: Creates a Girvan-Newman random graph as described in the 2002 PNAS paper. Takes zOut parameter and optional custom RNG function.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/generators/README.md#2025-04-17_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport Graph from 'graphology';\nimport {girvanNewman} from 'graphology-generators/random';\n// Alternatively, if you only want to load relevant code\nimport girvanNewman from 'graphology-generators/random/girvan-newman';\n\n// Creating a binomial graph\nconst graph = girvanNewman(Graph, {zOut: 4});\n```\n\n----------------------------------------\n\nTITLE: Implementing Noverlap Layout with Web Worker in JavaScript\nDESCRIPTION: Example of using the Noverlap layout algorithm in a web worker, including methods to start, stop, and manage the layout process.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/layout-noverlap.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport NoverlapLayout from 'graphology-layout-noverlap/worker';\n\nconst layout = new NoverlapLayout(graph, params);\n\n// To start the layout. It will automatically stop when converged\nlayout.start();\n\n// To stop the layout\nlayout.stop();\n\n// To kill the layout and release attached memory\nlayout.kill();\n\n// Assess whether the layout is currently running\nlayout.isRunning();\n```\n\n----------------------------------------\n\nTITLE: Computing Stress Metric in JavaScript\nDESCRIPTION: Calculates stress layout quality metric with O(N^2) time complexity. Measures normalized difference between topological and layout distances.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/metrics/README.md#2025-04-17_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nimport stress from 'graphology-metrics/layout-quality/stress';\n\nstress(graph);\n// >>> ~24510.2914\n```\n\n----------------------------------------\n\nTITLE: Adding a Clique to a Graph\nDESCRIPTION: Demonstrates how to use the mergeClique function to add a clique (fully connected subgraph) to an existing graph.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/utils.md#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport {mergeClique} from 'graphology-utils';\n// Alternatively, if you want to only load the relevant code:\nimport mergeClique from 'graphology-utils/merge-clique';\n\nconst graph = new Graph();\n\nmergeClique(graph, [1, 2, 3]);\ngraph.edges().map(e => graph.extremities(e));\n>>> [[1, 2], [1, 3], [2, 3]]\n```\n\n----------------------------------------\n\nTITLE: Dijkstra's Algorithm Implementation\nDESCRIPTION: Examples of using Dijkstra's algorithm for weighted graphs with different weight configurations\nSOURCE: https://github.com/graphology/graphology/blob/master/src/shortest-path/README.md#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport {dijkstra} from 'graphology-shortest-path';\n// Alternatively, if you want to load only the relevant code\nimport dijkstra from 'graphology-shortest-path/dijkstra';\n\n// Returning the shortest path between source & target\nconst path = dijkstra.bidirectional(graph, source, target);\n\n// If you store edges' weight in custom attribute\nconst path = dijkstra.bidirectional(graph, source, target, 'customWeight');\n\n// Using a custom weight getter function\nconst path = dijkstra.bidirectional(\n  graph,\n  source,\n  target,\n  (_, attr) => attr.importance\n);\n```\n\n----------------------------------------\n\nTITLE: Updating Nodes with Function\nDESCRIPTION: Shows how to update node attributes using an updater function, handling both new and existing nodes. Includes counter increment example.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/mutation.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Since 'John' does not exist in the graph, a node will be added\ngraph.updateNode('John', attr => {\n  return {\n    ...attr,\n    count: (attr.count || 0) + 1\n  };\n});\n\n// Since 'John' already exist in the graph, this time its count will get incremented\ngraph.updateNode('John', attr => {\n  return {\n    ...attr,\n    count: (attr.count || 0) + 1\n  };\n});\n\ngraph.getNodeAttribute('John', 'count');\n>>> 2\n\n// The method returns a 2-tuple containing useful info\nconst [key, nodeWasAdded] = graph.updateNode('John');\n```\n\n----------------------------------------\n\nTITLE: Creating a Krackhardt Kite Graph in JavaScript\nDESCRIPTION: Returns the Krackhardt kite graph, a well-known small graph used in social network analysis. Takes only a graphology constructor as parameter.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/generators/README.md#2025-04-17_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport Graph from 'graphology';\nimport {krackhardtKite} from 'graphology-generators/small';\n// Alternatively, if you only want to load relevant code\nimport krackhardtKite from 'graphology-generators/small/krackhardt-kite';\n\n// Creating a random clustered graph\nconst graph = krackhardtKite(Graph);\n```\n\n----------------------------------------\n\nTITLE: Updating Edge Attributes in JavaScript using Graphology\nDESCRIPTION: Shows how to update edge attributes using an updater function, useful for incremental updates.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/attributes.md#2025-04-17_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\ngraph.addNode('Martha');\ngraph.addNode('Jack');\nconst edge = graph.addEdge('Martha', 'Jack', {weight: 1});\n\n// Using the edge's key:\ngraph.updateEdgeAttribute(edge, 'weight', n => n + 1);\n\n// Using the edge's source & target:\ngraph.updateEdgeAttribute('Martha', 'Jack', 'weight', n => n + 1);\n```\n\n----------------------------------------\n\nTITLE: Comparing edges and their attributes in two graphs\nDESCRIPTION: Shows how to use the haveSameEdgesDeep function to check if two graphs have the same edges with identical attributes, allowing comparison of different graph types.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/assertions/README.md#2025-04-17_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport {haveSameEdgesDeep} from 'graphology-assertions';\n\nhaveSameEdgesDeep(G, H);\n```\n\n----------------------------------------\n\nTITLE: Using Graphology SVG renderer in JavaScript\nDESCRIPTION: Demonstrates how to use the Graphology SVG renderer to create SVG representations of graphs. It shows two ways of calling the render function: with and without custom settings.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/svg/README.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar render = require('graphology-svg');\n\nrender(graph, './graph.svg', () => console.log('Done!'));\nrender(graph, './graph.svg', settings, () => console.log('Done!'));\n```\n\n----------------------------------------\n\nTITLE: Extracting k-Shell Subgraphs with Graphology\nDESCRIPTION: Demonstrates using the kShell function to extract a k-shell subgraph, which contains nodes with exactly k degree. Can use either the main k-shell or a custom k value.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/cores/README.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport kShell from 'graphology-cores/kShell';\n\n// Return the main k-shell of the graph\nconst shell = kShell(graph);\n\n// Return the k-shell subgraph with an arbitrary k value\nconst shell = kShell(graph, 5);\n```\n\n----------------------------------------\n\nTITLE: Merging Nodes in Graph\nDESCRIPTION: Demonstrates merging nodes in a graph, showing how to handle both new and existing nodes with attribute merging. Returns a tuple with node key and addition status.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/mutation.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Since 'John' does not exist in the graph, a node will be added\ngraph.mergeNode('John');\n\n// Since 'John' already exists in the graph, this will do nothing\ngraph.mergeNode('John');\n\n// Note that if the node already exists, attributes are merged\ngraph.mergeNode('John', {eyes: 'blue'});\ngraph.getNodeAttributes('John');\n>>> {\n  eyes: 'blue'\n}\n\n// The method returns a 2-tuple containing useful info\nconst [key, nodeWasAdded] = graph.mergeNode('John');\n```\n\n----------------------------------------\n\nTITLE: Computing Stress Layout Quality Metric in JavaScript using Graphology\nDESCRIPTION: This code snippet demonstrates how to use the stress function from the graphology-metrics library to compute the stress layout quality metric for a given graph. The function takes a graph object as input and returns a numerical value representing the stress metric.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/metrics.md#2025-04-17_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nimport stress from 'graphology-metrics/layout-quality/stress';\n\nstress(graph);\n// >>> ~24510.2914\n```\n\n----------------------------------------\n\nTITLE: Iterating over nodes in topological order with forEachNodeInTopologicalOrder function\nDESCRIPTION: Example demonstrating how to use forEachNodeInTopologicalOrder to iterate over a DAG's nodes in topological order using a callback function. The callback receives the node, its attributes, and its generation index.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/dag/README.md#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport {forEachNodeInTopologicalOrder} from 'graphology-dag';\n// Alternatively, to load only the relevant code:\nimport {forEachNodeInTopologicalOrder} from 'graphology-dag/topological-sort';\n\nconst graph = new DirectedGraph();\ngraph.mergeEdge(0, 1);\ngraph.mergeEdge(1, 2);\ngraph.mergeEdge(2, 3);\n\nforEachNodeInTopologicalOrder(graph, (node, attr, generationIndex) => {\n  // Note that generationIndex will be monotonically increasing from 0 to n.\n  console.log(node, attr, generationIndex);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Connected Caveman Graph in JavaScript\nDESCRIPTION: Demonstrates creation of a Connected Caveman graph with specified parameters.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/generators.md#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport Graph, {UndirectedGraph} from 'graphology';\nimport {connectedCaveman} from 'graphology-generators/community';\n// Alternatively, if you only want to load relevant code\nimport connectedCaveman from 'graphology-generators/community/connected-caveman';\n\n// Creating a connected caveman graph\nconst graph = connectedCaveman(Graph, 6, 8);\n```\n\n----------------------------------------\n\nTITLE: Generating k-Truss Subgraphs in JavaScript with Graphology\nDESCRIPTION: Example of using the kTruss function to generate a k-truss subgraph with a specific k value.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/cores.md#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport kTruss from 'graphology-cores/kTruss';\n\n// Return the k-truss of the graph with k = 4\nconst truss = kTruss(graph, 4);\n```\n\n----------------------------------------\n\nTITLE: Updating Node Attributes with Function in JavaScript\nDESCRIPTION: Illustrates how to update node attributes using a function with the updateNodeAttributes method.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/attributes.md#2025-04-17_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\ngraph.addNode('Martha', {occurrences: 36, eyes: 'blue'});\n\ngraph.updateNodeAttributes('Martha', attr => {\n  return {\n    ...attr,\n    occurrences: attr.occurrences + 1\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Iterating Nodes in Topological Order in a DAG using JavaScript\nDESCRIPTION: Example of using the forEachNodeInTopologicalOrder function to iterate over nodes in topological order in a Directed Acyclic Graph (DAG). It demonstrates creating a graph and using a callback function for iteration.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/dag.md#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport {forEachNodeInTopologicalOrder} from 'graphology-dag';\n// Alternatively, to load only the relevant code:\nimport {forEachNodeInTopologicalOrder} from 'graphology-dag/topological-sort';\n\nconst graph = new DirectedGraph();\ngraph.mergeEdge(0, 1);\ngraph.mergeEdge(1, 2);\ngraph.mergeEdge(2, 3);\n\nforEachNodeInTopologicalOrder(graph, (node, attr, generationIndex) => {\n  // Note that generationIndex will be monotonically increasing from 0 to n.\n  console.log(node, attr, generationIndex);\n});\n```\n\n----------------------------------------\n\nTITLE: Collecting Graph Layout as Object in JavaScript with Graphology\nDESCRIPTION: Examples of using the collectLayout utility to retrieve a graph's layout as an object mapping node IDs to position coordinates. Shows importing and retrieving layouts with custom dimensions and exhaustiveness options.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/layout.md#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport {collectLayout} from 'graphology-layout/utils';\n\ncollectLayout(graph);\n\n// Custom dimensions\ncollectLayout(graph, {dimensions: ['x', 'y', 'z']});\n\n// Non exhaustive (i.e. node having missing dimensions will be returned also)\ncollectLayout(graph, {exhaustive: false});\n```\n\n----------------------------------------\n\nTITLE: Creating a Random Clustered Graph in JavaScript\nDESCRIPTION: Creates a graph with the desired number of nodes, edges, and clusters. Options include order (nodes), size (edges), clusters count, clusterDensity, and custom RNG function.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/generators/README.md#2025-04-17_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport Graph from 'graphology';\nimport {clusters} from 'graphology-generators/random';\n// Alternatively, if you only want to load relevant code\nimport clusters from 'graphology-generators/random/clusters';\n\n// Creating a random clustered graph\nconst graph = clusters(Graph, {\n  order: 100,\n  size: 1000,\n  clusters: 5\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Caveman Graph in JavaScript\nDESCRIPTION: Creates a Caveman graph containing l components of k nodes. Each component is a complete graph. Takes a graphology constructor, number of components, and number of nodes per component as parameters.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/generators/README.md#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport Graph, {UndirectedGraph} from 'graphology';\nimport {caveman} from 'graphology-generators/community';\n// Alternatively, if you only want to load relevant code\nimport caveman from 'graphology-generators/community/caveman';\n\n// Creating a caveman graph\nconst graph = caveman(Graph, 6, 8);\n```\n\n----------------------------------------\n\nTITLE: Counting Connected Components in JavaScript\nDESCRIPTION: Demonstrates how to use the countConnectedComponents function to get the number of connected components in a graph.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/components/README.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport {countConnectedComponents} from 'graphology-components';\n\nconst count = countConnectedComponents(graph);\n```\n\n----------------------------------------\n\nTITLE: Computing Graph Extent in JavaScript\nDESCRIPTION: Examples showing how to compute the extent (min, max) of node or edge attributes in a graph.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/metrics.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport {nodeExtent, edgeExtent} from 'graphology-metrics/graph';\n// Alternatively, to load only the relevant code:\nimport {nodeExtent, edgeExtent} from 'graphology-metrics/graph/extent';\n\n// Retrieving a single node attribute's extent\nnodeExtent(graph, 'size');\n>>> [1, 34]\n\n// Retrieving multiple node attributes' extents\nnodeExtent(graph, ['x', 'y']);\n>>> {x: [-4, 3], y: [-34, 56]}\n\n// The same for edges\nedgeExtent(graph, 'weight');\n>>> [0, 5.7]\n```\n\n----------------------------------------\n\nTITLE: Extracting k-Corona Subgraphs with Graphology\nDESCRIPTION: Demonstrates using the kCorona function to extract a k-corona subgraph, which contains nodes in the k-core with exactly k neighbors in the k-core.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/cores/README.md#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport kCorona from 'graphology-cores/kCorona';\n\n// Return the main k-corona of the graph\nconst corona = kCorona(graph);\n\n// Return the k-corona subgraph with an arbitrary k value\nconst corona = kCorona(graph, 4);\n```\n\n----------------------------------------\n\nTITLE: Merging Node Attributes in JavaScript\nDESCRIPTION: Shows how to merge new attributes with existing node attributes using the mergeNodeAttributes method.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/attributes.md#2025-04-17_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\ngraph.addNode('Martha', {age: 36, eyes: 'blue'});\n\ngraph.mergeNodeAttributes('Martha', {age: 34, hair: 'brown'});\n```\n\n----------------------------------------\n\nTITLE: Reversing Graph Edges in JavaScript\nDESCRIPTION: Shows how to use the reverse operator to create a new graph with reversed directed edges.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/operators/README.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport {reverse} from 'graphology-operators';\n// Alternatively, to load only the relevant code:\nimport reverse from 'graphology-operators/reverse';\n\nconst reversedGraph = reverse(graph);\n```\n\n----------------------------------------\n\nTITLE: Checking Node Neighborhood in Graphology (JavaScript)\nDESCRIPTION: Demonstrates the use of the areNeighbors method to check if two nodes are connected by an edge.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/read.md#2025-04-17_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\ngraph.addNode('Timothy');\ngraph.addNode('Clarice');\ngraph.addNode('Zendar');\ngraph.addEdge('Clarice', 'Timothy');\n\ngraph.areNeighbors('Clarice', 'Timothy');\n>>> true\n\ngraph.areNeighbors('Zendar', 'Clarice');\n>>> false\n```\n\n----------------------------------------\n\nTITLE: Creating Random Clustered Graph in JavaScript\nDESCRIPTION: Shows how to create a random graph with specified number of nodes, edges, and clusters.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/generators.md#2025-04-17_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport Graph from 'graphology';\nimport {clusters} from 'graphology-generators/random';\n// Alternatively, if you only want to load relevant code\nimport clusters from 'graphology-generators/random/clusters';\n\n// Creating a random clustered graph\nconst graph = clusters(Graph, {\n  order: 100,\n  size: 1000,\n  clusters: 5\n});\n```\n\n----------------------------------------\n\nTITLE: Writing GEXF Data with Graphology Writer\nDESCRIPTION: Example demonstrating how to convert a graphology graph instance into a GEXF string, with options for custom node and edge formatting, encoding, and output style.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/gexf.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Node\nvar gexf = require('graphology-gexf');\n// Browser\nvar gexf = require('graphology-gexf/browser');\n\n// Writing the graph\nvar gexfString = gexf.write(graph);\n\n// Using custom formatting for nodes & edges\nvar gexfString = gexf.write(graph, {\n  formatNode: function (key, attributes) {\n    return {\n      label: attributes.label,\n      attributes: {\n        age: attributes.age,\n        name: attributes.name\n      },\n      viz: {\n        color: '#FF0',\n        x: attributes.x,\n        y: attributes.y,\n        shape: 'circle',\n        size: 20\n      }\n    };\n  },\n  formatEdge: function (key, attributes) {\n    return {\n      label: attributes.label,\n      attributes: {\n        number: attributes.number\n      },\n      weight: attributes.weight,\n      viz: {\n        color: '#FF0',\n        x: attributes.x,\n        y: attributes.y,\n        shape: 'dotted',\n        thickness: 20\n      }\n    };\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Comparing edges of two graphs\nDESCRIPTION: Demonstrates the usage of the haveSameEdges function to check if two graphs have the same edges, allowing comparison of different graph types.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/assertions/README.md#2025-04-17_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport {haveSameEdges} from 'graphology-assertions';\n\nhaveSameEdges(G, H);\n```\n\n----------------------------------------\n\nTITLE: Applying Synchronous ForceAtlas2 Layout in JavaScript\nDESCRIPTION: Demonstrates how to apply the ForceAtlas2 layout synchronously to a graph, including examples with default and custom settings.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/layout-forceatlas2.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport forceAtlas2 from 'graphology-layout-forceatlas2';\n\nconst positions = forceAtlas2(graph, {iterations: 50});\n\n// With settings:\nconst positions = forceAtlas2(graph, {\n  iterations: 50,\n  settings: {\n    gravity: 10\n  }\n});\n\n// To directly assign the positions to the nodes:\nforceAtlas2.assign(graph);\n```\n\n----------------------------------------\n\nTITLE: Adding a Cycle to a Graph\nDESCRIPTION: Shows how to use the mergeCycle function to add a cycle (circular path) to an existing graph.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/utils.md#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport {mergeCycle} from 'graphology-utils';\n// Alternatively, if you want to only load the relevant code:\nimport mergeCycle from 'graphology-utils/merge-cycle';\n\nconst graph = new Graph();\n\nmergeCycle(graph, [1, 2, 3, 4, 5]);\ngraph.edges().map(e => graph.extremities(e));\n>>> [[1, 2], [2, 3], [3, 4], [4, 5], [5, 1]]\n```\n\n----------------------------------------\n\nTITLE: Handling nodeAttributesUpdated Event in Graphology\nDESCRIPTION: Example showing how to listen for the 'nodeAttributesUpdated' event which is emitted when a node's attributes are updated. The event payload includes the node key and type of update.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/events.md#2025-04-17_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ngraph.on('nodeAttributesUpdated', function({key, type}) {\n  console.log(key, type);\n});\n\ngraph.setNodeAttribute('Thomas', 'age', 54);\n// Will print:\n'Thomas', 'set'\n```\n\n----------------------------------------\n\nTITLE: Calculating Node Degree in Graphology (JavaScript)\nDESCRIPTION: Demonstrates the use of degree and related methods to calculate the degree of a node, including self loops. Throws an error if the node is not found in the graph.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/read.md#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ngraph.addNodeFrom(['Timothy', 'Jack', 'Clarice', 'Martha']);\ngraph.addEdge('Timothy', 'Jack');\ngraph.addEdge('Timothy', 'Clarice');\ngraph.addEdge('Martha', 'Timothy');\n\ngraph.degree('Timothy');\n>>> 3\ngraph.inDegree('Timothy');\n>>> 1\ngraph.outDegree('Timothy');\n>>> 2\n```\n\n----------------------------------------\n\nTITLE: Iterating Topological Generations in a DAG using JavaScript\nDESCRIPTION: Example of using the forEachTopologicalGeneration function to iterate over generations of nodes in topological order in a Directed Acyclic Graph (DAG). It shows creating a graph and using a callback function for iteration.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/dag.md#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport {forEachTopologicalGeneration} from 'graphology-dag';\n// Alternatively, to load only the relevant code:\nimport {forEachTopologicalGeneration} from 'graphology-dag/topological-sort';\n\nconst graph = new DirectedGraph();\ngraph.mergeEdge(0, 1);\ngraph.mergeEdge(1, 2);\ngraph.mergeEdge(2, 3);\n\nforEachTopologicalGeneration(graph, generation => {\n  console.log(generation);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Complete Graph in JavaScript\nDESCRIPTION: Creates a complete graph where every node is connected to every other node. Takes a graphology constructor and the desired number of nodes as parameters.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/generators/README.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport Graph, {UndirectedGraph} from 'graphology';\nimport {complete} from 'graphology-generators/classic';\n// Alternatively, if you only want to load relevant code\nimport complete from 'graphology-generators/classic/complete';\n\n// Creating a complete graph\nconst graph = complete(Graph, 10);\n\n// Using another constuctor to create, say, a complete undirected graph\nconst graph = complete(UndirectedGraph, 10);\n```\n\n----------------------------------------\n\nTITLE: Creating Graphs from Existing Data Using Static from Method\nDESCRIPTION: Shows how to create a graph from serialized data or another Graph instance using the static #.from method, with optional configuration.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/instantiation.md#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst graph = Graph.from(data);\n\n// Need some options?\nconst graph = Graph.from(data, options);\n\n// Also works with typed constructors\nconst graph = UndirectedGraph.from(data);\n```\n\n----------------------------------------\n\nTITLE: Clearing Entire Graph\nDESCRIPTION: Demonstrates how to remove all nodes and edges from a graph, resulting in an empty graph structure.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/mutation.md#2025-04-17_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\ngraph.addNode('John');\ngraph.addNode('Jack');\ngraph.addEdge('John', 'Jack');\n\nconsole.log(graph.order, graph.size);\n>>> 2, 1\n\ngraph.clear();\n\nconsole.log(graph.order, graph.size);\n>>> 0, 0\n\ngraph.hasNode('John');\n>>> false\n```\n\n----------------------------------------\n\nTITLE: Updating Graph Edges with Attributes\nDESCRIPTION: Demonstrates how to update edges in a graph with weight attributes. Shows both adding new edges and updating existing ones using the updateEdge method.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/mutation.md#2025-04-17_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst graph = new UndirectedGraph();\n\n// Since the edge does not exist, it will be added\ngraph.updateEdgeWithKey('John', 'Martha', attr => {\n  return {\n    ...attr,\n    weight: (attr.weight || 0) + 1\n  };\n});\n\n// Since the edge already exist, its weight will get incremented this time\ngraph.updateEdge('John', 'Martha', attr => {\n  return {\n    ...attr,\n    weight: (attr.weight || 0) + 1\n  };\n});\n\ngraph.getEdgeAttribute('John', 'Martha', 'weight');\n>>> 2\n\n// The method returns a 4-tuple containing useful info\nconst [key, edgeWasAdded, sourceWasAdded, targetWasAdded] = graph.updateEdge('John', 'Martha');\n```\n\n----------------------------------------\n\nTITLE: Creating Graph Cycle using mergeCycle\nDESCRIPTION: Function to add a cycle pattern to an existing graph where nodes form a circular path.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/utils/README.md#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport {mergeCycle} from 'graphology-utils';\n// Alternatively, if you want to only load the relevant code:\nimport mergeCycle from 'graphology-utils/merge-cycle';\n\nconst graph = new Graph();\n\nmergeCycle(graph, [1, 2, 3, 4, 5]);\ngraph.edges().map(e => graph.extremities(e));\n>>> [[1, 2], [2, 3], [3, 4], [4, 5], [5, 1]]\n```\n\n----------------------------------------\n\nTITLE: Handling nodeDropped Event in Graphology\nDESCRIPTION: Example demonstrating how to listen for the 'nodeDropped' event which is emitted when a node is removed from the graph. The event payload includes the key of the dropped node.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/events.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ngraph.on('nodeDropped', function({key}) {\n  console.log(key);\n})\n\ngraph.dropNode('Thomas');\n// Will print:\n>>> 'Thomas'\n```\n\n----------------------------------------\n\nTITLE: Collecting Graph Layout as Flat Array in JavaScript\nDESCRIPTION: Example showing how to use the collectLayoutAsFlatArray utility function to extract a graph's layout as a flat array. The function provides options for customizing dimensions and array type.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/layout/README.md#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport {collectLayoutAsFlatArray} from 'graphology-layout/utils';\n\ncollectLayoutAsFlatArray(graph);\n\n// Custom dimensions\ncollectLayoutAsFlatArray(graph, {dimensions: ['x', 'y', 'z']});\n\n// Custom type\ncollectLayoutAsFlatArray(graph, {type: Float32Array});\n```\n\n----------------------------------------\n\nTITLE: Merging Edges in Graph\nDESCRIPTION: Shows edge merging functionality including attribute merging and handling of new/existing edges. Returns tuple with edge info and node addition status.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/mutation.md#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst graph = new UndirectedGraph();\n\n// Since the edge does not exist, it will be added\ngraph.mergeEdge('John', 'Martha');\n\n// Now, since the edge already exists, this will do nothing\ngraph.mergeEdge('John', 'Martha');\n\n// Note that if the edge already exists, attributes are merged\ngraph.mergeEdge('John', 'Martha', {type: 'KNOWS'});\ngraph.getEdgeAttributes('John', 'Martha');\n>>> {\n  type: 'KNOWS'\n}\n\n// The method returns a 4-tuple containing useful info\nconst [key, edgeWasAdded, sourceWasAdded, targetWasAdded] = graph.mergeEdge('John', 'Martha');\n```\n\n----------------------------------------\n\nTITLE: Creating a Path Graph in JavaScript\nDESCRIPTION: Creates a path graph where nodes are connected in a linear sequence. Takes a graphology constructor and the desired number of nodes as parameters.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/generators/README.md#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport Graph, {UndirectedGraph} from 'graphology';\nimport {path} from 'graphology-generators/classic';\n// Alternatively, if you only want to load relevant code\nimport path from 'graphology-generators/classic/path';\n\n// Creating a path graph\nconst graph = path(Graph, 10);\n\n// Using another constuctor to create, say, a path undirected graph\nconst graph = path(UndirectedGraph, 10);\n```\n\n----------------------------------------\n\nTITLE: Comparing graph edges with haveSameEdges in JavaScript\nDESCRIPTION: Example of using the haveSameEdges function to check if two graphs have the same edges, which implies they also have the same nodes. This allows comparison of different graph types.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/assertions.md#2025-04-17_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport {haveSameEdges} from 'graphology-assertions';\n\nhaveSameEdges(G, H);\n```\n\n----------------------------------------\n\nTITLE: Using isGraphConstructor to check for graph constructors in JavaScript\nDESCRIPTION: Example of using the isGraphConstructor function to check if a value is a graphology constructor. The function returns true for graph constructors and false for other values including graph instances.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/assertions.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport {isGraphConstructor} from 'graphology-assertions';\n\nisGraphConstructor(Graph);\n>>> true\n\nisGraphConstructor(45);\n>>> false\n\nisGraphConstructor(new Graph());\n>>> false\n```\n\n----------------------------------------\n\nTITLE: Finding Edge Group Paths in Multi-Graphs\nDESCRIPTION: Demonstrates using allSimpleEdgeGroupPaths to find paths in multi-graphs where multiple edges can exist between the same nodes. Returns groups of equivalent edges for each path segment.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/simple-path/README.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport {allSimpleEdgeGroupPaths} from 'graphology-simple-path';\n\nconst graph = new Graph();\ngraph.mergeEdgeWithKey('1->2a', '1', '2');\ngraph.mergeEdgeWithKey('1->2b', '1', '2');\ngraph.mergeEdgeWithKey('1->3a', '1', '3');\ngraph.mergeEdgeWithKey('2->3a', '2', '3');\n\nconst paths = allSimpleEdgeGroupPaths(graph, '1', '3');\n>>> [\n  [['1->3a']],\n  [['1->2a', '1->2b'], ['2->3a']]\n]\n\n// To get cycles, just pass same source & target\nconst cycles = allSimpleEdgeGroupPaths(graph, '1', '1');\n\n// To limit traversal to a certain depth\nconst limitedPaths = allSimpleEdgeGroupPaths(graph, '1', '3', {maxDepth: 2});\n```\n\n----------------------------------------\n\nTITLE: Converting Graph to Directed in JavaScript using Graphology\nDESCRIPTION: Demonstrates how to convert a graph to a directed graph, with options for merging edge attributes in case of conflicts.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/operators.md#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport {toDirected} from 'graphology-operators';\n// Alternatively, to load only the relevant code:\nimport toDirected from 'graphology-operators/to-directed';\n\nconst directedGraph = toDirected(graph);\n\n// Using a merging function\nconst directedGraph = toDirected(graph, (currentAttr, nextAttr) => {\n  return {\n    ...currentAttr,\n    weight: currentAttr.weight + nextAttr.weight\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Graph Clique using mergeClique\nDESCRIPTION: Function to add a clique (fully connected subgraph) to an existing graph.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/utils/README.md#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport {mergeClique} from 'graphology-utils';\n// Alternatively, if you want to only load the relevant code:\nimport mergeClique from 'graphology-utils/merge-clique';\n\nconst graph = new Graph();\n\nmergeClique(graph, [1, 2, 3]);\ngraph.edges().map(e => graph.extremities(e));\n>>> [[1, 2], [1, 3], [2, 3]]\n```\n\n----------------------------------------\n\nTITLE: Using Rotation Function in JavaScript\nDESCRIPTION: Example showing how to use the rotation function to rotate node coordinates by a given angle. The function provides options for customizing dimensions, angle units, and rotation center.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/layout/README.md#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport {rotation} from 'graphology-layout';\n// Alternatively, to load only the relevant code:\nimport rotation from 'graphology-layout/rotation';\n\nconst positions = rotation(graph, Math.PI / 2);\n\n// With options:\nconst positions = rotation(graph, Math.PI / 2, {centeredOnZero: true});\n\n// To directly assign the positions to the nodes:\nrotation.assign(graph, Math.PI / 2);\n```\n\n----------------------------------------\n\nTITLE: Creating Complete Graph in JavaScript\nDESCRIPTION: Demonstrates how to create a complete graph where every node is connected to every other node using the complete generator.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/generators.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport Graph, {UndirectedGraph} from 'graphology';\nimport {complete} from 'graphology-generators/classic';\n// Alternatively, if you only want to load relevant code\nimport complete from 'graphology-generators/classic/complete';\n\n// Creating a complete graph\nconst graph = complete(Graph, 10);\n\n// Using another constuctor to create, say, a complete undirected graph\nconst graph = complete(UndirectedGraph, 10);\n```\n\n----------------------------------------\n\nTITLE: Creating Ladder Graph in JavaScript\nDESCRIPTION: Demonstrates creation of a ladder graph with specified length using the ladder generator.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/generators.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport Graph, {UndirectedGraph} from 'graphology';\nimport {ladder} from 'graphology-generators/classic';\n// Alternatively, if you only want to load relevant code\nimport ladder from 'graphology-generators/classic/ladder';\n\n// Creating a ladder graph\nconst graph = ladder(Graph, 10);\n\n// Using another constuctor to create, say, a undirected ladder graph\nconst graph = ladder(UndirectedGraph, 10);\n```\n\n----------------------------------------\n\nTITLE: Rendering a graph to PNG in Node.js\nDESCRIPTION: Node.js-specific examples of rendering a graph to a PNG file, with both minimal and settings-based variants.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/canvas.md#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport {renderToPNG} from 'graphology-canvas/node';\n\nrenderToPNG(graph, './graph.png', () => console.log('Done!'));\nrenderToPNG(graph, './graph.png', settings, () => console.log('Done!'));\n```\n\n----------------------------------------\n\nTITLE: Determining Graph Type in Graphology\nDESCRIPTION: Demonstrates how to check the type of a graph using the type property. The example shows that a default Graph instance returns 'mixed', while a DirectedGraph instance returns 'directed'.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/properties.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst graph = new Graph();\ngraph.type;\n>>> 'mixed'\n\nconst directedGraph = new DirectedGraph();\ndirectedGraph.type;\n>>> 'directed'\n```\n\n----------------------------------------\n\nTITLE: Efficient Edge Iteration in Mixed Graphs\nDESCRIPTION: Shows how to optimize iteration over different edge types in mixed graphs. Instead of iterating separately over directed and undirected edges, it's more efficient to iterate once and use the undirected flag to differentiate edge types.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/performance-tips.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ngraph.forEachDirectedEdge((edge) => {\n  // Do something with directed edges...\n});\n\ngraph.forEachUndirectedEdge((edge) => {\n  // Do something with undirected edges...\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngraph.forEachEdge((edge, attr, source, target, sa, ta, undirected) => {\n  if (undirected) {\n    // Do something with undirected edges...\n  }\n  else {\n    // Do something with directed edges...\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Converting Graph to Undirected in JavaScript using Graphology\nDESCRIPTION: Demonstrates how to convert a graph to an undirected graph, with options for merging edge attributes in case of conflicts.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/operators.md#2025-04-17_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport {toUndirected} from 'graphology-operators';\n// Alternatively, to load only the relevant code:\nimport toUndirected from 'graphology-operators/to-undirected';\n\nconst undirectedGraph = toUndirected(graph);\n\n// Using a merging function\nconst undirectedGraph = toUndirected(graph, (currentAttr, nextAttr) => {\n  return {\n    ...currentAttr,\n    weight: currentAttr.weight + nextAttr.weight\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Parsing GRAPHML Data with Graphology\nDESCRIPTION: Examples of using the graphology-graphml parser to read GRAPHML data from strings or XML documents. Shows various usage patterns including passing options like addMissingNodes to handle missing node references.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/graphml/README.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar Graph = require('graphology');\n\n// Node\nvar graphml = require('graphology-graphml');\n// Browser\nvar graphml = require('graphology-graphml/browser');\n\n// Reading a string\nvar graph = graphml.parse(Graph, string);\n\n// Reading a dom document\nvar graph = graphml.parse(Graph, xmlDocument);\n\n// Passing options\nvar graph = graphml.parse(Graph, string, {addMissingNodes: true});\n```\n\n----------------------------------------\n\nTITLE: Converting Graph to Mixed in JavaScript\nDESCRIPTION: Shows how to use the toMixed operator to convert a graph to a mixed graph.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/operators/README.md#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport {toMixed} from 'graphology-operators';\n// Alternatively, to load only the relevant code:\nimport toMixed from 'graphology-operators/to-mixed';\n\nconst mixedGraph = toMixed(graph);\n```\n\n----------------------------------------\n\nTITLE: Getting All Graph Attributes in JavaScript\nDESCRIPTION: Shows how to retrieve all attributes of a graph using the getAttributes method.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/attributes.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ngraph.setAttribute('name', 'My Beautiful Graph');\ngraph.setAttribute('color', 'blue');\n\ngraph.getAttributes();\n>>> {\n  name: 'My Beautiful Graph',\n  color: 'blue'\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Node Paths to Edge Paths\nDESCRIPTION: Example of using the edgePathFromNodePath utility function to convert a path of nodes to a path of edges.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/shortest-path.md#2025-04-17_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport {edgePathFromNodePath} from 'graphology-shortest-path';\n// Alternatively, if you want to load only the relevant code\nimport {edgePathFromNodePath} from 'graphology-shortest-path/utils';\n\nconst edgePath = edgePathFromNodePath(graph, nodePath);\n```\n\n----------------------------------------\n\nTITLE: Creating Krackhardt Kite Graph in JavaScript\nDESCRIPTION: Demonstrates creation of the Krackhardt kite graph structure.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/generators.md#2025-04-17_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport Graph from 'graphology';\nimport {krackhardtKite} from 'graphology-generators/small';\n// Alternatively, if you only want to load relevant code\nimport krackhardtKite from 'graphology-generators/small/krackhardt-kite';\n\n// Creating a random clustered graph\nconst graph = krackhardtKite(Graph);\n```\n\n----------------------------------------\n\nTITLE: Creating an Empty Graph with nullCopy in JavaScript\nDESCRIPTION: Shows how to use the nullCopy() method to create a new graph instance with the same type and options as the original, but without any nodes or edges. The example demonstrates creating a null copy of a graph that contains nodes and edges, resulting in an empty graph with the same type.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/utilities.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ngraph.mergeEdgeWithKey('T->E', 'Thomas', 'Eric', {type: 'KNOWS'});\n\nconst newGraph = graph.nullCopy();\nnewGraph.hasNode('Eric');\n>>> false\nnewGraph.order\n>>> 0\nnewGraph.size\n>>> 0\ngraph.type === newGraph.type\n>>> true\n```\n\n----------------------------------------\n\nTITLE: Serializing an Edge in Graphology (JavaScript)\nDESCRIPTION: Shows the serialization of an edge in Graphology. The serialized format includes the edge's key, source, target, and attributes.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/serialization.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ngraph.mergeEdgeWithKey('T->E', 'Thomas', 'Eric', {type: 'KNOWS'});\n// Serialized would be:\n>>> {\n  key: 'T->E',\n  source: 'Thomas',\n  target: 'Eric',\n  attributes: {type: 'KNOWS'}\n}\n```\n\n----------------------------------------\n\nTITLE: Computing Weighted Size in JavaScript\nDESCRIPTION: Examples showing how to compute the weighted size of a graph using different weight attributes and custom getters.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/metrics.md#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport weightedSize from 'graphology-metrics/graph/weighted-size';\n\nconst graph = new Graph();\ngraph.mergeEdge(1, 2, {weight: 3});\ngraph.mergeEdge(1, 2, {weight: 1});\n\n// Simplest way\nweightedSize(graph);\n>>> 4\n\n// With custom weight attribute\nweightedSize(graph, 'myWeightAttribute');\n>>> 4\n\n// With custom getter\nweightedSize(graph, (_, attr) => attr.importance);\n```\n\n----------------------------------------\n\nTITLE: Updating Edge Attributes with Graphology in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the updateEachEdgeAttributes method to modify edge weights in a graph. It shows both basic usage and how to provide hints for more efficient event handling.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/attributes.md#2025-04-17_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\ngraph.mergeEdge('Martha', 'John', {weight: 12});\ngraph.mergeEdge('Lucy', 'Martin', {weight: 4})\n\ngraph.updateEachEdgeAttributes((edge, attr) => {\n  return {\n    ...attr,\n    weight: attr.weight * 2\n  };\n});\n\ngraph.edges().map(e => graph.getEdgeAttribute(e, 'weight'));\n>>> [24, 8]\n\n// Note that you can indicate hints\ngraph.updateEachEdgeAttributes((edge, attr) => {\n  return {\n    ...attr,\n    weight: attr.weight * 2\n  };\n}, {attributes: ['weight']}); // <-- here\n```\n\n----------------------------------------\n\nTITLE: Exporting Graph Data in Graphology (JavaScript)\nDESCRIPTION: Shows how to export the entire graph data from a Graphology instance. The exported data includes graph attributes, nodes, and edges.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/serialization.md#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ngraph.mergeEdgeWithKey('T->E', 'Thomas', 'Eric', {type: 'KNOWS'});\ngraph.setAttribute('name', 'My Graph');\ngraph.export();\n>>> {\n  attributes: {\n    name: 'My Graph'\n  },\n  nodes: [\n    {key: 'Thomas'},\n    {key: 'Eric'}\n  ],\n  edges: [\n    {\n      key: 'T->E',\n      source: 'Thomas',\n      target: 'Eric',\n      attributes: {type: 'KNOWS'}\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Multi-Graph to Simple in JavaScript using Graphology\nDESCRIPTION: Shows how to convert a multi-graph to a simple graph, with options for merging edge attributes.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/operators.md#2025-04-17_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport {toSimple} from 'graphology-operators';\n// Alternatively, to load only the relevant code:\nimport toSimple from 'graphology-operators/to-simple';\n\nconst simpleGraph = toSimple(multiGraph);\n\n// Using a merging function\nconst simpleGraph = toSimple(graph, (currentAttr, nextAttr) => {\n  return {\n    ...currentAttr,\n    weight: currentAttr.weight + nextAttr.weight\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Finding All Simple Edge Paths in Graph\nDESCRIPTION: Shows usage of allSimpleEdgePaths function to find paths represented by edges between nodes. Works with regular graphs but not with multi-graphs.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/simple-path/README.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport {allSimpleEdgePaths} from 'graphology-simple-path';\n\nconst graph = new Graph();\ngraph.mergeEdgeWithKey('1->2', '1', '2');\ngraph.mergeEdgeWithKey('1->3', '1', '3');\ngraph.mergeEdgeWithKey('2->3', '2', '3');\n\nconst paths = allSimpleEdgePaths(graph, '1', '3');\n>>> [\n  ['1->3'],\n  ['1->2', '2->3']\n]\n\n// To get cycles, just pass same source & target\nconst cycles = allSimpleEdgePaths(graph, '1', '1');\n\n// To limit traversal to a certain depth\nconst limitedPaths = allSimpleEdgePaths(graph, '1', '3', {maxDepth: 2});\n```\n\n----------------------------------------\n\nTITLE: Renaming Graph Keys\nDESCRIPTION: Demonstrates how to use the renameGraphKeys function to create a new graph with renamed node and edge keys based on provided mappings.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/utils.md#2025-04-17_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport {renameGraphKeys} from 'graphology-utils';\n// Alternatively, if you want to only load the relevant code:\nimport renameGraphKeys from 'graphology-utils/rename-graph-keys';\n\nconst graph = new Graph();\ngraph.addNode('Martha');\ngraph.addNode('Catherine');\ngraph.addNode('John');\ngraph.addEdgeWithKey('M->C', 'Martha', 'Catherine');\ngraph.addEdgeWithKey('C->J', 'Catherine', 'John');\n\nconst renamedGraph = renameGraphKeys(\n  graph,\n  {Martha: 1, Catherine: 2, John: 3},\n  {'M->C': 'rel1', 'C->J': 'rel2'}\n);\n\nrenamedGraph.nodes();\n>>> [1, 2, 3];\n\nrenamedGraph.edges();\n>>> ['rel1', 'rel2'];\n```\n\n----------------------------------------\n\nTITLE: Creating Disjoint Union of Graphs in JavaScript\nDESCRIPTION: Demonstrates the use of the disjointUnion operator to combine two graphs while relabeling nodes and edges to keep them disjoint.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/operators/README.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport {disjointUnion} from 'graphology-operators';\n// Alternatively, to load only the relevant code:\nimport disjointUnion from 'graphology-operators/disjoint-union';\n\nconst R = disjointUnion(G, H);\n```\n\n----------------------------------------\n\nTITLE: Deep comparison of entire graphs with areSameGraphsDeep in JavaScript\nDESCRIPTION: Example of using the areSameGraphsDeep function to check if two graphs are structurally the same and have the same node and edge attributes.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/assertions.md#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport {areSameGraphsDeep} from 'graphology-assertions';\n\nareSameGraphsDeep(G, H);\n```\n\n----------------------------------------\n\nTITLE: Using Circular Layout in JavaScript\nDESCRIPTION: Example showing how to use the circular layout function to arrange nodes in a circle. The function provides options for customizing dimensions, center, and scale of the layout.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/layout/README.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {circular} from 'graphology-layout';\n// Alternatively, to load only the relevant code:\nimport circular from 'graphology-layout/circular';\n\nconst positions = circular(graph);\n\n// With options:\nconst positions = circular(graph, {scale: 100});\n\n// To directly assign the positions to the nodes:\ncircular.assign(graph);\n\n// To pass custom dimensions\nconst positions = random(graph, {dimensions: ['x1', 'x2']});\n```\n\n----------------------------------------\n\nTITLE: Checking Edge Count with size Property in Graphology\nDESCRIPTION: Shows how to determine the number of edges in a graph using the size property. The example creates a graph with two nodes and one edge, then demonstrates that the size property returns 1.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/properties.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst graph = new Graph();\n\ngraph.addNode('John');\ngraph.addNode('Jack');\n\ngraph.addEdge('John', 'Jack');\n\ngraph.size;\n>>> 1\n```\n\n----------------------------------------\n\nTITLE: Creating a Node-Only Graph with emptyCopy in JavaScript\nDESCRIPTION: Demonstrates using the emptyCopy() method to create a new graph with the same nodes as the original but without any edges. This is useful for creating subgraphs or converting graphs to different types while preserving node data.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/utilities.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ngraph.mergeEdgeWithKey('T->E', 'Thomas', 'Eric', {type: 'KNOWS'});\n\nconst newGraph = graph.emptyCopy();\nnewGraph.hasNode('Eric');\n>>> true\nnewGraph.order\n>>> 2\nnewGraph.size\n>>> 0\nnewGraph.hasEdge('Thomas', 'Eric');\n>>> false\ngraph.type === newGraph.type\n>>> true\n```\n\n----------------------------------------\n\nTITLE: Adding a Star to a Graph\nDESCRIPTION: Shows how to use the mergeStar function to add a star (central node connected to multiple nodes) to an existing graph.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/utils.md#2025-04-17_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport {mergeStar} from 'graphology-utils';\n// Alternatively, if you want to only load the relevant code:\nimport mergeStar from 'graphology-utils/merge-star';\n\nconst graph = new Graph();\n\nmergeStar(graph, [1, 2, 3, 4, 5]);\ngraph.edges().map(e => graph.extremities(e));\n>>> [[1, 2], [1, 3], [1, 4], [1, 5]]\n```\n\n----------------------------------------\n\nTITLE: Updating Graph Keys using updateGraphKeys\nDESCRIPTION: Function to create a new graph with updated node and edge keys using transformation functions.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/utils/README.md#2025-04-17_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport {updateGraphKeys} from 'graphology-utils';\n// Alternatively, if you want to only load the relevant code:\nimport updateGraphKeys from 'graphology-utils/update-graph-keys';\n\nconst graph = new Graph();\ngraph.addNode('Martha');\ngraph.addNode('Catherine');\ngraph.addNode('John');\ngraph.addEdgeWithKey('M->C', 'Martha', 'Catherine');\ngraph.addEdgeWithKey('C->J', 'Catherine', 'John');\n\nconst updatedGraph = updateGraphKeys(\n  graph,\n  (key)=> {\n    if (key === 'Martha') return 1;\n    if (key === 'Catherine') return 2;\n    return 3;\n  },\n  (key) => {\n    if (key === 'M->C') return 'rel1';\n    return 'rel2';\n  }\n);\n\nupdatedGraph.nodes();\n>>> [1, 2, 3];\n\nupdatedGraph.edges();\n>>> ['rel1', 'rel2'];\n```\n\n----------------------------------------\n\nTITLE: Adding Edges in Mixed Graphs with Type Precedence in JavaScript\nDESCRIPTION: Demonstrates how directed edges take precedence over undirected ones in mixed graphs, and how to use typed methods to resolve ambiguity when working with both edge types.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/design-choices.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Graph from 'graphology';\n\nconst graph = new Graph();\ngraph.addNode(1);\ngraph.addNode(2);\ngraph.addNode(3);\n\n// This will add a directed edge\ngraph.addEdge(1, 2);\n// Same as:\ngraph.addDirectedEdge(1, 2);\n\n// This will add an undirected edge\ngraph.addUndirectedEdge(1, 2);\n\n// So, for instance, if you need to target the undirected edge\ngraph.setUndirectedEdgeAttribute(1, 2, 'type', 'LIKES');\n```\n\n----------------------------------------\n\nTITLE: Rendering a graph to SVG with graphology\nDESCRIPTION: Example showing how to use the graphology-svg library to render a graph to an SVG file. Demonstrates both the basic usage pattern and the alternative with custom settings.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/svg.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar render = require('graphology-svg');\n\nrender(graph, './graph.svg', () => console.log('Done!'));\nrender(graph, './graph.svg', settings, () => console.log('Done!'));\n```\n\n----------------------------------------\n\nTITLE: Adding a Path to a Graph\nDESCRIPTION: Demonstrates the use of mergePath function to add a path (sequence of connected nodes) to an existing graph.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/utils.md#2025-04-17_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport {mergePath} from 'graphology-utils';\n// Alternatively, if you want to only load the relevant code:\nimport mergePath from 'graphology-utils/merge-path';\n\nconst graph = new Graph();\n\nmergePath(graph, [1, 2, 3, 4, 5]);\ngraph.edges().map(e => graph.extremities(e));\n>>> [[1, 2], [2, 3], [3, 4], [4, 5]]\n```\n\n----------------------------------------\n\nTITLE: Checking Edge Existence in Graphology (JavaScript)\nDESCRIPTION: Shows how to use the hasEdge method to check if an edge exists in the graph. It can be used with either the edge key or the source and target nodes.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/read.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ngraph.addNode('Timothy');\ngraph.addNode('Clarice');\nconst edge = graph.addEdge('Clarice', 'Timothy');\n\n// Using the edge's key:\ngraph.hasEdge(edge);\n>>> true\n\n// Using the edge's source & target:\ngraph.hasEdge('Clarice', 'Timothy');\n>>> true\n\ngraph.hasEdge('Clarice', 'John');\n>>> false\n```\n\n----------------------------------------\n\nTITLE: Checking Self-Loop Support in Graphology\nDESCRIPTION: Demonstrates how to check if a graph allows self-loops using the allowSelfLoops property. The example shows that self-loops are allowed by default but can be disabled through configuration.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/properties.md#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst graph = new Graph();\ngraph.allowSelfLoops;\n>>> true\n\nconst otherGraph = new Graph({allowSelfLoops: false});\ngraph.allowSelfLoops;\n>>> false\n```\n\n----------------------------------------\n\nTITLE: Inferring if Graph is Multi\nDESCRIPTION: Demonstrates the use of inferMulti function to determine if a graph is truly multi, based on the presence of multiple edges between nodes.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/utils.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport {inferMulti} from 'graphology-utils';\n// Alternatively, if you want to only load the relevant code:\nimport inferMulti from 'graphology-utils/infer-multi';\n\nconst graph = new MultiGraph();\ngraph.addEdge(1, 2);\n\ninferMulti(graph);\n>>> false\n\ngraph.addEdge(1, 2);\n\ninferMulti(graph);\n>>> true\n```\n\n----------------------------------------\n\nTITLE: Calculating Simmelian Strength of Edges in JavaScript\nDESCRIPTION: Shows how to compute the Simmelian strength (number of triangles an edge is part of) for all edges in a graph using the graphology-metrics library.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/metrics/README.md#2025-04-17_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport simmelianStrength from 'graphology-metrics/edge/simmelian-strength';\n\n// To compute strength for every edge:\nconst strengths = simmelianStrength(graph);\n\n// To directly map the result onto edge attributes (`simmelianStrength`):\nsimmelianStrength.assign(graph);\n```\n\n----------------------------------------\n\nTITLE: Removing Edge Attributes in JavaScript using Graphology\nDESCRIPTION: Demonstrates how to remove specific attributes from edges using either edge key or source/target references.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/attributes.md#2025-04-17_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\ngraph.addNode('Martha');\ngraph.addNode('Jack');\nconst edge = graph.addEdge('Martha', 'Jack', {type: 'KNOWS'});\n\n// Using the edge's key:\ngraph.removeEdgeAttribute(edge, 'type');\n\n// Using the edge's source & target:\ngraph.removeEdgeAttribute('Martha', 'Jack', 'type');\n\ngraph.hasEdgeAttribute(edge, 'type');\n>>> false\n```\n\n----------------------------------------\n\nTITLE: Generating k-Crust Subgraphs in JavaScript with Graphology\nDESCRIPTION: Examples of using the kCrust function to generate k-crust subgraphs with default and custom k values.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/cores.md#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport kCrust from 'graphology-cores/kCrust';\n\n// Return the main k-crust of the graph\nconst crust = kCrust(graph);\n\n// Return the k-crust subgraph with an arbitrary k value\nconst crust = kCrust(graph, 4);\n```\n\n----------------------------------------\n\nTITLE: Writing Graphology Graphs to GEXF Format\nDESCRIPTION: Examples of writing a Graphology graph to GEXF format string, including custom formatting for nodes and edges with visualization attributes.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/gexf/README.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Node\nvar gexf = require('graphology-gexf');\n// Browser\nvar gexf = require('graphology-gexf/browser');\n\n// Writing the graph\nvar gexfString = gexf.write(graph);\n\n// Using custom formatting for nodes & edges\nvar gexfString = gexf.write(graph, {\n  formatNode: function (key, attributes) {\n    return {\n      label: attributes.label,\n      attributes: {\n        age: attributes.age,\n        name: attributes.name\n      },\n      viz: {\n        color: '#FF0',\n        x: attributes.x,\n        y: attributes.y,\n        shape: 'circle',\n        size: 20\n      }\n    };\n  },\n  formatEdge: function (key, attributes) {\n    return {\n      label: attributes.label,\n      attributes: {\n        number: attributes.number\n      },\n      weight: attributes.weight,\n      viz: {\n        color: '#FF0',\n        x: attributes.x,\n        y: attributes.y,\n        shape: 'dotted',\n        thickness: 20\n      }\n    };\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Inferring Graph Type\nDESCRIPTION: Shows how to use the inferType function to determine the actual type of a graph based on its edges.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/utils.md#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport {inferType} from 'graphology-utils';\n// Alternatively, if you want to only load the relevant code:\nimport inferType from 'graphology-utils/infer-type';\n\nconst graph = new Graph();\ngraph.addUndirectedEdge(1, 2);\n\ninferType(graph);\n>>> 'directed'\n```\n\n----------------------------------------\n\nTITLE: Converting Graph to Mixed in JavaScript using Graphology\nDESCRIPTION: Shows how to convert a graph to a mixed graph type.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/operators.md#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport {toMixed} from 'graphology-operators';\n// Alternatively, to load only the relevant code:\nimport toMixed from 'graphology-operators/to-mixed';\n\nconst mixedGraph = toMixed(graph);\n```\n\n----------------------------------------\n\nTITLE: Using coreNumber Function with Graphology\nDESCRIPTION: Demonstrates how to use the coreNumber function to calculate core numbers for nodes in a graph. Shows how to get core numbers as an object or assign them directly to nodes in the graph.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/cores/README.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport coreNumber from 'graphology-cores/coreNumber';\n\n// Return the core number for each node\nconst numbers = coreNumber(graph);\n\n// Assign to each node its core number\ncoreNumber.assign(graph);\n\n// Assign with a custom attribute label\ncoreNumber.assign(graph, 'core');\n```\n\n----------------------------------------\n\nTITLE: Finding Opposite Node in Graphology (JavaScript)\nDESCRIPTION: Shows how to use the opposite method to find the node at the other end of an edge given a node and an edge.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/read.md#2025-04-17_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ngraph.addNode('Timothy');\ngraph.addNode('Clarice');\nconst edge = graph.addEdge('Clarice', 'Timothy');\n\ngraph.opposite('Timothy', edge);\n>>> 'Clarice'\n```\n\n----------------------------------------\n\nTITLE: Reversing Graph Edges in JavaScript using Graphology\nDESCRIPTION: Shows how to reverse the directed edges of a graph using the reverse operator.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/operators.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport {reverse} from 'graphology-operators';\n// Alternatively, to load only the relevant code:\nimport reverse from 'graphology-operators/reverse';\n\nconst reversedGraph = reverse(graph);\n```\n\n----------------------------------------\n\nTITLE: Replacing All Graph Attributes in JavaScript\nDESCRIPTION: Demonstrates how to replace all graph attributes using the replaceAttributes method.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/attributes.md#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ngraph.setAttribute('name', 'My Beautiful Graph');\n\ngraph.replaceAttributes({\n  name: 'My Different Graph',\n  color: 'blue'\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Graph Attributes with Function in JavaScript\nDESCRIPTION: Illustrates how to update graph attributes using a function with the updateAttributes method.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/attributes.md#2025-04-17_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ngraph.setAttribute('count', 1);\n\ngraph.updateAttributes(attr => {\n  return {\n    ...attr,\n    count: attr.count + 1\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Noverlap Layout Web Worker Implementation\nDESCRIPTION: Example of implementing the Noverlap layout using a web worker for performance optimization. Includes methods for starting, stopping, and managing the layout process.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/layout-noverlap/README.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport NoverlapLayout from 'graphology-layout-noverlap/worker';\n\nconst layout = new NoverlapLayout(graph, params);\n\n// To start the layout. It will automatically stop when converged\nlayout.start();\n\n// To stop the layout\nlayout.stop();\n\n// To kill the layout and release attached memory\nlayout.kill();\n\n// Assess whether the layout is currently running\nlayout.isRunning();\n```\n\n----------------------------------------\n\nTITLE: Inferring Graph Type using inferType\nDESCRIPTION: Function to determine the actual type of a graph based on its edges.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/utils/README.md#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport {inferType} from 'graphology-utils';\n// Alternatively, if you want to only load the relevant code:\nimport inferType from 'graphology-utils/infer-type';\n\nconst graph = new Graph();\ngraph.addUndirectedEdge(1, 2);\n\ninferType(graph);\n>>> 'directed'\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Connected Component Orders in JavaScript\nDESCRIPTION: Shows the usage of forEachConnectedComponentOrder function to iterate over the orders (sizes) of connected components in a graph.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/components.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport {forEachConnectedComponentOrder} from 'graphology-components';\n\nforEachConnectedComponentOrder(graph, order => {\n  console.log(order);\n});\n```\n\n----------------------------------------\n\nTITLE: Calculating Core Numbers in JavaScript with Graphology\nDESCRIPTION: Examples of using the coreNumber function to calculate and assign core numbers to nodes in a graph.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/cores.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport coreNumber from 'graphology-cores/coreNumber';\n\n// Return the core number for each node\nconst numbers = coreNumber(graph);\n\n// Assign to each node its core number\ncoreNumber.assign(graph);\n\n// Assign with a custom attribute label\ncoreNumber.assign(graph, 'core');\n```\n\n----------------------------------------\n\nTITLE: Checking Edge Direction in Graphology (JavaScript)\nDESCRIPTION: Demonstrates how to use the isDirected method to determine if an edge is directed or undirected.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/read.md#2025-04-17_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\ngraph.addNode('Timothy');\ngraph.addNode('Clarice');\nconst edge = graph.addEdge('Clarice', 'Timothy');\nconst undirectedEdge = graph.addUndirectedEdge('Clarice', 'Timothy');\n\ngraph.isDirected(edge);\n>>> true\ngraph.isDirected(undirectedEdge);\n>>> false\n```\n\n----------------------------------------\n\nTITLE: Creating Graph Star using mergeStar\nDESCRIPTION: Function to add a star pattern to an existing graph where one central node connects to all others.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/utils/README.md#2025-04-17_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport {mergeStar} from 'graphology-utils';\n// Alternatively, if you want to only load the relevant code:\nimport mergeStar from 'graphology-utils/merge-star';\n\nconst graph = new Graph();\n\nmergeStar(graph, [1, 2, 3, 4, 5]);\ngraph.edges().map(e => graph.extremities(e));\n>>> [[1, 2], [1, 3], [1, 4], [1, 5]]\n```\n\n----------------------------------------\n\nTITLE: Merging Graph Attributes in JavaScript\nDESCRIPTION: Shows how to merge new attributes with existing graph attributes using the mergeAttributes method.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/attributes.md#2025-04-17_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ngraph.setAttribute('name', 'My Beautiful Graph');\n\ngraph.mergeAttributes({\n  name: 'My Different Graph',\n  color: 'blue'\n});\n```\n\n----------------------------------------\n\nTITLE: Renaming Graph Keys using renameGraphKeys\nDESCRIPTION: Function to create a new graph with renamed node and edge keys based on provided mappings.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/utils/README.md#2025-04-17_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport {renameGraphKeys} from 'graphology-utils';\n// Alternatively, if you want to only load the relevant code:\nimport renameGraphKeys from 'graphology-utils/rename-graph-keys';\n\nconst graph = new Graph();\ngraph.addNode('Martha');\ngraph.addNode('Catherine');\ngraph.addNode('John');\ngraph.addEdgeWithKey('M->C', 'Martha', 'Catherine');\ngraph.addEdgeWithKey('C->J', 'Catherine', 'John');\n\nconst renamedGraph = renameGraphKeys(\n  graph,\n  {Martha: 1, Catherine: 2, John: 3},\n  {'M->C': 'rel1', 'C->J': 'rel2'}\n);\n\nrenamedGraph.nodes();\n>>> [1, 2, 3];\n\nrenamedGraph.edges();\n>>> ['rel1', 'rel2'];\n```\n\n----------------------------------------\n\nTITLE: Handling attributesUpdated Event in Graphology\nDESCRIPTION: Example demonstrating how to listen for the 'attributesUpdated' event which is emitted when the graph's attributes are updated. The event payload includes the type of update.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/events.md#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ngraph.on('attributesUpdated', function({type}) {\n  console.log(type);\n});\n\ngraph.setAttribute('name', 'My Beautiful Graph');\n// Will print:\n'set'\n```\n\n----------------------------------------\n\nTITLE: Replacing All Node Attributes in JavaScript\nDESCRIPTION: Demonstrates how to replace all attributes of a node using the replaceNodeAttributes method.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/attributes.md#2025-04-17_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\ngraph.addNode('Martha', {age: 36, eyes: 'blue'});\n\ngraph.replaceNodeAttributes('Martha', {\n  age: 34,\n  eyes: 'green'\n});\n```\n\n----------------------------------------\n\nTITLE: Serializing Graphology Graph using JSON.stringify\nDESCRIPTION: Example showing how to serialize a Graphology Graph instance using the built-in .toJSON method via JSON.stringify. The .toJSON method is an alias of .export that enables proper JSON serialization.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/known-methods.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nJSON.stringify(graph);\n```\n\n----------------------------------------\n\nTITLE: Comparing graphs including node and edge attributes\nDESCRIPTION: Shows how to use the areSameGraphsDeep function to check if two graphs are identical, including their node and edge attributes.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/assertions/README.md#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport {areSameGraphsDeep} from 'graphology-assertions';\n\nareSameGraphsDeep(G, H);\n```\n\n----------------------------------------\n\nTITLE: Comparing nodes and their attributes in two graphs\nDESCRIPTION: Shows how to use the haveSameNodesDeep function to check if two graphs have the same nodes with identical attributes.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/assertions/README.md#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport {haveSameNodesDeep} from 'graphology-assertions';\n\nhaveSameNodesDeep(G, H);\n```\n\n----------------------------------------\n\nTITLE: Creating Girvan-Newman Graph in JavaScript\nDESCRIPTION: Shows how to create a Girvan-Newman random graph with specified zOut parameter.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/generators.md#2025-04-17_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport Graph from 'graphology';\nimport {girvanNewman} from 'graphology-generators/random';\n// Alternatively, if you only want to load relevant code\nimport girvanNewman from 'graphology-generators/random/girvan-newman';\n\n// Creating a binomial graph\nconst graph = girvanNewman(Graph, {zOut: 4});\n```\n\n----------------------------------------\n\nTITLE: Synchronous Noverlap Layout Implementation\nDESCRIPTION: Examples of using the Noverlap layout synchronously, including basic usage, custom settings, and different reducer implementations. Shows how to compute and assign positions to graph nodes.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/layout-noverlap/README.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport noverlap from 'graphology-layout-noverlap';\n\nconst positions = noverlap(graph, {maxIterations: 50});\n\n// With settings:\nconst positions = noverlap(graph, {\n  maxIterations: 50,\n  settings: {\n    ratio: 2\n  }\n});\n\n// With a custom input reducer\nconst positions = noverlap(graph, {\n  inputReducer: (key, attr) => ({\n    x: store[key].x,\n    y: store[key].y,\n    size: attr.size\n  }),\n  outputReducer: (key, pos) => ({x: pos.x * 10, y: pos.y * 10})\n});\n\n// To directly assign the positions to the nodes:\nnoverlap.assign(graph);\n```\n\n----------------------------------------\n\nTITLE: Getting Node Attribute in JavaScript\nDESCRIPTION: Demonstrates how to retrieve a node attribute using the getNodeAttribute method.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/attributes.md#2025-04-17_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ngraph.addNode('Martha', {age: 34});\n\nconst age = graph.getNodeAttribute('Martha', 'age');\n\nconsole.log(age);\n>>> 34\n```\n\n----------------------------------------\n\nTITLE: Edge Operation Method Variants - Some\nDESCRIPTION: Available variants for checking if some edges match in different directions and types\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/iteration.md#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n#.someInEdge\n#.someOutEdge\n#.someInboundEdge\n#.someOutboundEdge\n#.someDirectedEdge\n#.someUndirectedEdge\n```\n\n----------------------------------------\n\nTITLE: Rendering a graph to PNG in Node.js with graphology-canvas\nDESCRIPTION: JavaScript code snippet demonstrating how to render a graph to a PNG file in a Node.js environment using the renderToPNG function from graphology-canvas/node.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/canvas/README.md#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport {renderToPNG} from 'graphology-canvas/node';\n\nrenderToPNG(graph, './graph.png', () => console.log('Done!'));\nrenderToPNG(graph, './graph.png', settings, () => console.log('Done!'));\n```\n\n----------------------------------------\n\nTITLE: Removing Node Attribute in JavaScript\nDESCRIPTION: Illustrates how to remove a node attribute using the removeNodeAttribute method.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/attributes.md#2025-04-17_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\ngraph.addNode('Martha', {age: 34});\n\ngraph.removeNodeAttribute('Martha', 'age');\n\ngraph.hasNodeAttribute('Martha', 'age');\n>>> false\n```\n\n----------------------------------------\n\nTITLE: Collecting Graph Layout as Object in JavaScript\nDESCRIPTION: Example showing how to use the collectLayout utility function to extract a graph's layout as an object. The function provides options for customizing dimensions and whether to collect only nodes with complete dimensions.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/layout/README.md#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport {collectLayout} from 'graphology-layout/utils';\n\ncollectLayout(graph);\n\n// Custom dimensions\ncollectLayout(graph, {dimensions: ['x', 'y', 'z']});\n\n// Non exhaustive (i.e. node having missing dimensions will be returned also)\ncollectLayout(graph, {exhaustive: false});\n```\n\n----------------------------------------\n\nTITLE: Cropping Graph to Largest Connected Component in JavaScript\nDESCRIPTION: Demonstrates the use of cropToLargestConnectedComponent to mutate a graph, keeping only its largest connected component.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/components.md#2025-04-17_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport {cropToLargestConnectedComponent} from 'graphology-components';\n\ncropToLargestConnectedComponent(graph);\n```\n\n----------------------------------------\n\nTITLE: Accessing Node Count with order Property in Graphology\nDESCRIPTION: Demonstrates how to check the number of nodes in a graph using the order property. The example creates a new graph and adds two nodes, then shows that the order property returns 2.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/properties.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst graph = new Graph();\n\ngraph.addNode('John');\ngraph.addNode('Jack');\n\ngraph.order;\n>>> 2\n```\n\n----------------------------------------\n\nTITLE: Collecting Graph Layout as Flat Array in JavaScript with Graphology\nDESCRIPTION: Examples of using the collectLayoutAsFlatArray utility to retrieve a graph's layout as a flat array of coordinates. Shows importing and retrieving layouts with custom dimensions and array types.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/layout.md#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport {collectLayoutAsFlatArray} from 'graphology-layout/utils';\n\ncollectLayoutAsFlatArray(graph);\n\n// Custom dimensions\ncollectLayoutAsFlatArray(graph, {dimensions: ['x', 'y', 'z']});\n\n// Custom type\ncollectLayoutAsFlatArray(graph, {type: Float32Array});\n```\n\n----------------------------------------\n\nTITLE: Asynchronous rendering to prevent UI freezing\nDESCRIPTION: Example of asynchronous rendering that prevents freezing the main thread, with a callback function executed upon completion.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/canvas.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport {renderAsync} from 'graphology-canvas';\n\nrenderAsync(graph, context, settings, function () {\n  console.log('Done!');\n});\n```\n\n----------------------------------------\n\nTITLE: Computing Simple Size in JavaScript\nDESCRIPTION: Example showing how to compute the simple size of a graph, counting multiple edges between same nodes as one.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/metrics.md#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport {simpleSize} from 'graphology-metrics';\n// Alternatively, to load only the relevant code:\nimport simpleSize from 'graphology-metrics/graph/simple-size';\n\nconst graph = new MultiGraph();\ngraph.mergeEdge(1, 2);\ngraph.mergeEdge(1, 2);\ngraph.mergeEdge(4, 3);\ngraph.mergeUndirectedEdge(5, 6);\n\nsimpleSize(graph);\n>>> 3\n```\n\n----------------------------------------\n\nTITLE: Dropping Edges from Graph\nDESCRIPTION: Shows different methods for removing edges from a graph, either by edge key or by specifying source and target nodes.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/mutation.md#2025-04-17_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\ngraph.addNode('John');\ngraph.addNode('Martha');\n\nconst edge = graph.addEdge('John', 'Martha');\n\n// Dropping the edge using its key:\ngraph.dropEdge(edge);\n\n// Dropping the first matching edge between John & Martha\ngraph.dropEdge('John', 'Martha');\n```\n\n----------------------------------------\n\nTITLE: Retrieving Edge Extremities in Graphology (JavaScript)\nDESCRIPTION: Demonstrates the use of the extremities method to get both nodes connected by an edge.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/read.md#2025-04-17_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ngraph.addNode('Timothy');\ngraph.addNode('Clarice');\nconst edge = graph.addEdge('Clarice', 'Timothy');\n\ngraph.extremities(edge);\n>>> ['Timothy', 'Clarice']\n```\n\n----------------------------------------\n\nTITLE: Deep comparison of graph nodes with haveSameNodesDeep in JavaScript\nDESCRIPTION: Example of using the haveSameNodesDeep function to check if two graphs have the same nodes and whether those nodes have the same attributes.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/assertions.md#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport {haveSameNodesDeep} from 'graphology-assertions';\n\nhaveSameNodesDeep(G, H);\n```\n\n----------------------------------------\n\nTITLE: Computing Edge Uniformity Metric in JavaScript\nDESCRIPTION: Calculates edge uniformity layout quality metric based on node positions. Runs in O(E) time complexity.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/metrics/README.md#2025-04-17_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nimport edgeUniformity from 'graphology-metrics/layout-quality/edge-uniformity';\n\nedgeUniformity(graph);\n>>> ~1.132\n```\n\n----------------------------------------\n\nTITLE: Serializing a Node in Graphology (JavaScript)\nDESCRIPTION: Demonstrates how a node is serialized in Graphology. The serialized format includes the node's key and attributes.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/serialization.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngraph.addNode('Thomas', {age: 34});\n// Serialized would be:\n>>> {key: 'Thomas', attributes: {age: 34}}\n```\n\n----------------------------------------\n\nTITLE: Computing Edge Disparity in JavaScript\nDESCRIPTION: Demonstrates how to calculate edge disparity scores using the graphology-metrics library. This metric is used in the disparity filter for extracting the multiscale backbone of complex weighted networks.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/metrics/README.md#2025-04-17_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport disparity from 'graphology-metrics/edge/disparity';\n\n// To compute strength for every edge:\nconst disparities = disparity(graph);\n\n// To directly map the result onto edge attributes (`disparity`):\ndisparity.assign(graph);\n\n// Using custom weights\ndisparity.assign(graph, {getEdgeWeight: (_, attr) => attr.importance});\n```\n\n----------------------------------------\n\nTITLE: Rendering a graph to a canvas context\nDESCRIPTION: Basic usage example showing how to render a graph to an arbitrary canvas context. Requires nodes to have x and y position attributes set beforehand.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/canvas.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport {render} from 'graphology-canvas';\n\nrender(graph, context, settings);\n```\n\n----------------------------------------\n\nTITLE: Checking Node Existence in Graphology (JavaScript)\nDESCRIPTION: Demonstrates how to use the hasNode method to check if a node exists in the graph. It returns true if the node is found, false otherwise.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/read.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngraph.addNode('Timothy');\n\ngraph.hasNode('Timothy');\n>>> true\n\ngraph.hasNode('Jack');\n>>> false\n```\n\n----------------------------------------\n\nTITLE: Avoiding Nested Callbacks in Graphology\nDESCRIPTION: Shows how to avoid creating nested callback functions during iteration, which can impact performance. The example demonstrates a way to refactor nested callbacks to improve efficiency, though the alternative approach is noted as unusual.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/performance-tips.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// BAD\ngraph.forEachNode(node => {\n\n  // You are creating a function at each step of the node loop here!\n  graph.forEachNeighbor(node, neighbor => {\n    console.log(node, neighbor);\n  });\n});\n\n// EVEN BETTER BUT CURSED\nlet currentNode;\n\nfunction neighborCallback(neighbor) {\n  console.log(currentNode, neighbor);\n}\n\ngraph.forEachNode(node => {\n  currentNode = node;\n  graph.forEachNeighbor(node, neighborCallback);\n});\n```\n\n----------------------------------------\n\nTITLE: Checking Multi-Edge Support in Graphology\nDESCRIPTION: Shows how to determine if a graph supports parallel edges using the multi property. The example demonstrates that a regular Graph returns false, while a MultiGraph returns true.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/properties.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst graph = new Graph();\ngraph.multi;\n>>> false\n\nconst multiGraph = new MultiGraph();\nmultiGraph.multi;\n>>> true\n```\n\n----------------------------------------\n\nTITLE: Checking if Value is a Graphology Instance\nDESCRIPTION: Demonstrates how to use the isGraph function to check if a value is an instance of a graphology implementation.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/utils.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {isGraph} from 'graphology-utils';\n// Alternatively, if you want to only load the relevant code:\nimport isGraph from 'graphology-utils/is-graph';\n\nconst graph = new Graph();\n\nisGraph(graph);\n>>> true\n\nisGraph(45);\n>>> false\n\nisGraph({hello: 'world'});\n>>> false\n```\n\n----------------------------------------\n\nTITLE: Computing Simple Size of a Graph in JavaScript\nDESCRIPTION: Demonstrates how to compute the simple size of a graph (number of edges considering the graph as simple) using the graphology-metrics library.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/metrics/README.md#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport {simpleSize} from 'graphology-metrics';\n// Alternatively, to load only the relevant code:\nimport simpleSize from 'graphology-metrics/graph/simple-size';\n\nconst graph = new MultiGraph();\ngraph.mergeEdge(1, 2);\ngraph.mergeEdge(1, 2);\ngraph.mergeEdge(4, 3);\ngraph.mergeUndirectedEdge(5, 6);\n\nsimpleSize(graph);\n>>> 3\n```\n\n----------------------------------------\n\nTITLE: Creating a Connected Caveman Graph in JavaScript\nDESCRIPTION: Creates a Connected Caveman graph containing l components of k nodes. Similar to regular caveman graph but components are connected to each other. Takes a graphology constructor, number of components, and number of nodes per component as parameters.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/generators/README.md#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport Graph, {UndirectedGraph} from 'graphology';\nimport {connectedCaveman} from 'graphology-generators/community';\n// Alternatively, if you only want to load relevant code\nimport connectedCaveman from 'graphology-generators/community/connected-caveman';\n\n// Creating a connected caveman graph\nconst graph = connectedCaveman(Graph, 6, 8);\n```\n\n----------------------------------------\n\nTITLE: Creating Caveman Graph in JavaScript\nDESCRIPTION: Shows how to create a Caveman graph with specified number of components and nodes per component.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/generators.md#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport Graph, {UndirectedGraph} from 'graphology';\nimport {caveman} from 'graphology-generators/community';\n// Alternatively, if you only want to load relevant code\nimport caveman from 'graphology-generators/community/caveman';\n\n// Creating a caveman graph\nconst graph = caveman(Graph, 6, 8);\n```\n\n----------------------------------------\n\nTITLE: Handling edgesCleared Event in Graphology\nDESCRIPTION: Example showing how to listen for the 'edgesCleared' event which is emitted when all edges are removed from the graph. This event is triggered by the #.clearEdges method.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/events.md#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ngraph.on('edgesCleared', function() {\n  console.log(graph.order, graph.size);\n});\n\ngraph.clearEdges();\n// Will print:\n>>> 45, 0\n```\n\n----------------------------------------\n\nTITLE: Edge Operation Method Variants - Filtering\nDESCRIPTION: Available variants for filtering edges in different directions and types\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/iteration.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n#.filterInEdges\n#.filterOutEdges\n#.filterInboundEdges\n#.filterOutboundEdges\n#.filterDirectedEdges\n#.filterUndirectedEdges\n```\n\n----------------------------------------\n\nTITLE: Updating Graph Attribute in JavaScript\nDESCRIPTION: Shows how to update a graph attribute using a function with the updateAttribute method.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/attributes.md#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ngraph.setAttribute('relevance', 10);\n\ngraph.updateAttribute('relevance', x => x + 1);\n\ngraph.getAttribute('relevance');\n>>> 11\n```\n\n----------------------------------------\n\nTITLE: Retrieving Edge Target in Graphology (JavaScript)\nDESCRIPTION: Demonstrates the use of the target method to get the target node of an edge.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/read.md#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ngraph.addNode('Timothy');\ngraph.addNode('Clarice');\nconst edge = graph.addEdge('Clarice', 'Timothy');\n\ngraph.target(edge);\n>>> 'Timothy'\n```\n\n----------------------------------------\n\nTITLE: Handling nodeAdded Event in Graphology\nDESCRIPTION: Example demonstrating how to listen for the 'nodeAdded' event which is emitted when a node is added to the graph. The event payload includes the key of the added node.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/events.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngraph.on('nodeAdded', function({key}) {\n  console.log(key);\n})\n\ngraph.addNode('Thomas');\n// Will print:\n>>> 'Thomas'\n```\n\n----------------------------------------\n\nTITLE: Checking Edge Extremity in Graphology (JavaScript)\nDESCRIPTION: Shows how to use the hasExtremity method to check if a node is an extremity of a given edge.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/read.md#2025-04-17_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ngraph.addNode('Lucy');\ngraph.addNode('Timothy');\ngraph.addNode('Clarice');\nconst edge = graph.addEdge('Clarice', 'Timothy');\n\ngraph.hasExtremity(edge, 'Timothy');\n>>> true\n\ngraph.hasExtremity(edge, 'Lucy');\n>>> false\n```\n\n----------------------------------------\n\nTITLE: Dropping Nodes from Graph\nDESCRIPTION: Demonstrates how to remove nodes from a graph, including error handling for non-existent nodes.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/mutation.md#2025-04-17_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ngraph.addNode('John');\ngraph.dropNode('John');\n\ngraph.dropNode('Martha');\n>>> Error \"Martha not in the graph\"\n```\n\n----------------------------------------\n\nTITLE: Setting Node Attribute in JavaScript\nDESCRIPTION: Demonstrates how to set a node attribute using the setNodeAttribute method.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/attributes.md#2025-04-17_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\ngraph.addNode('Martha', {age: 36, eyes: 'blue'});\n\ngraph.setNodeAttribute('Martha', 'age', 34);\n```\n\n----------------------------------------\n\nTITLE: Counting Self-Loops in Graphology\nDESCRIPTION: Shows how to count self-loops in a graph using the selfLoopCount property. The example adds a self-loop for a node named 'John' and demonstrates that the property reflects this addition.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/properties.md#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst graph = new Graph();\n\ngraph.selfLoopCount\n>>> 0\n\ngraph.mergeEdge('John', 'John');\n\ngraph.selfLoopCount\n>>> 1\n```\n\n----------------------------------------\n\nTITLE: Checking if two graphs are identical\nDESCRIPTION: Demonstrates the usage of the areSameGraphs function to determine if two graphs are the same.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/assertions/README.md#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport {areSameGraphs} from 'graphology-assertions';\n\nareSameGraphs(G, H);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Edge Key in Graphology (JavaScript)\nDESCRIPTION: Demonstrates the use of the edge method to get the key of an edge between two nodes. Returns undefined if the edge doesn't exist and throws an error for multi-graphs.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/read.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ngraph.addNode('Timothy');\ngraph.addNode('Clarice');\ngraph.addNode('Olivia');\ngraph.addEdgeWithKey('C->T', 'Clarice', 'Timothy');\n\ngraph.edge('Clarice', 'Timothy');\n>>> 'C->T'\n\ngraph.edge('Clarice', 'Olivia');\n>>> undefined\n```\n\n----------------------------------------\n\nTITLE: Handling edgeAttributesUpdated Event in Graphology\nDESCRIPTION: Example demonstrating how to listen for the 'edgeAttributesUpdated' event which is emitted when an edge's attributes are updated. The event payload includes the edge key and type of update.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/events.md#2025-04-17_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ngraph.on('edgeAttributesUpdated', function({key, type}) {\n  console.log(key, type);\n});\n\ngraph.setEdgeAttribute('T->R', 'type', 'KNOWS');\n// Will print:\n'Thomas', 'set'\n```\n\n----------------------------------------\n\nTITLE: Getting All Node Attributes in JavaScript\nDESCRIPTION: Shows how to retrieve all attributes of a node using the getNodeAttributes method.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/attributes.md#2025-04-17_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\ngraph.addNode('Martha', {age: 34, eyes: 'blue'});\n\ngraph.getNodeAttributes('Martha');\n>>> {\n  age: 34,\n  eyes: 'blue'\n}\n```\n\n----------------------------------------\n\nTITLE: Checking if Value is a Graphology Constructor\nDESCRIPTION: Shows how to use the isGraphConstructor function to determine if a value is a graphology constructor.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/utils.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport {isGraphConstructor} from 'graphology-utils';\n// Alternatively, if you want to only load the relevant code:\nimport isGraphConstructor from 'graphology-utils/is-graph-constructor';\n\nisGraphConstructor(Graph);\n>>> true\n\nisGraphConstructor(45);\n>>> false\n\nisGraphConstructor(new Graph());\n>>> false\n```\n\n----------------------------------------\n\nTITLE: Creating Erdos-Renyi Graph in JavaScript\nDESCRIPTION: Demonstrates creation of an Erdos-Renyi (binomial) graph with specified probability or approximate size.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/generators.md#2025-04-17_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport Graph from 'graphology';\nimport {erdosRenyi} from 'graphology-generators/random';\n// Alternatively, if you only want to load relevant code\nimport erdosRenyi from 'graphology-generators/random/erdos-renyi';\n\n// Creating a binomial graph\nconst graph = erdosRenyi(Graph, {order: 10, probability: 0.5});\n\n// If your graph is sparse (low probability), you can use the `sparse` version\n// which runs in O(m + n) rather than O(n^2)\nconst graph = erdosRenyi.sparse(Graph, {order: 1000, probability: 0.1});\n```\n\n----------------------------------------\n\nTITLE: Identifying Graph Implementation in Graphology\nDESCRIPTION: Demonstrates how to check the implementation name of a graph instance using the implementation property. This can be useful for optimization based on specific implementations.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/properties.md#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport Graph from 'graphology';\n\nconst graph = new Graph();\ngraph.implementation;\n>>> 'graphology'\n```\n\n----------------------------------------\n\nTITLE: Comparing entire graphs with areSameGraphs in JavaScript\nDESCRIPTION: Example of using the areSameGraphs function to check if two graphs are structurally the same without comparing attributes.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/assertions.md#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport {areSameGraphs} from 'graphology-assertions';\n\nareSameGraphs(G, H);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Edge Source in Graphology (JavaScript)\nDESCRIPTION: Shows how to use the source method to get the source node of an edge.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/read.md#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ngraph.addNode('Timothy');\ngraph.addNode('Clarice');\nconst edge = graph.addEdge('Clarice', 'Timothy');\n\ngraph.source(edge);\n>>> 'Clarice'\n```\n\n----------------------------------------\n\nTITLE: Validating Graph Constructor using isGraphConstructor\nDESCRIPTION: Function to check if a value is a graphology constructor. Returns boolean.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/utils/README.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport {isGraphConstructor} from 'graphology-utils';\n// Alternatively, if you want to only load the relevant code:\nimport isGraphConstructor from 'graphology-utils/is-graph-constructor';\n\nisGraphConstructor(Graph);\n>>> true\n\nisGraphConstructor(45);\n>>> false\n\nisGraphConstructor(new Graph());\n>>> false\n```\n\n----------------------------------------\n\nTITLE: Polling Edges in Graphology by Key or Extremities\nDESCRIPTION: Shows the two methods of targeting edges in a graph: using their key directly or using their source and target nodes. The latter approach may not work with multi-graphs that support parallel edges.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/design-choices.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst graph = new Graph();\ngraph.addNode('Eric');\ngraph.addNode('Martha');\n\n// Adding our edge\nconst edge = graph.addEdge('Eric', 'Martha');\n\n// Now we can see if the edge exists either by key:\ngraph.hasEdge(edge);\n>>> true\n\n// or by source & target:\ngraph.hasEdge('Eric', 'Martha');\n>>> true\n```\n\n----------------------------------------\n\nTITLE: Checking if Adding an Edge Creates a Cycle in a DAG using JavaScript\nDESCRIPTION: Example of using the willCreateCycle function to determine if adding a new edge to a Directed Acyclic Graph (DAG) will create a cycle. It shows creating a graph and checking potential edges.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/dag.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport {willCreateCycle} from 'graphology-dag';\n// Alternatively, to load only the relevant code:\nimport willCreateCycle from 'graphology-dag/will-create-cycle';\n\nconst graph = new DirectedGraph();\ngraph.mergeEdge(0, 1);\ngraph.mergeEdge(1, 2);\ngraph.mergeEdge(2, 3);\n\nwillCreateCycle(graph, 3, 0);\n>>> true\nwillCreateCycle(graph, 0, 2);\n>>> false\n```\n\n----------------------------------------\n\nTITLE: Creating Path Graph in JavaScript\nDESCRIPTION: Shows how to create a path graph where nodes are connected in a linear sequence.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/generators.md#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport Graph, {UndirectedGraph} from 'graphology';\nimport {path} from 'graphology-generators/classic';\n// Alternatively, if you only want to load relevant code\nimport path from 'graphology-generators/classic/path';\n\n// Creating a path graph\nconst graph = path(Graph, 10);\n\n// Using another constuctor to create, say, a path undirected graph\nconst graph = path(UndirectedGraph, 10);\n```\n\n----------------------------------------\n\nTITLE: Checking for Self-Loop in Graphology (JavaScript)\nDESCRIPTION: Shows how to use the isSelfLoop method to determine if an edge is a self-loop (connects a node to itself).\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/read.md#2025-04-17_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\ngraph.addNode('Timothy');\nconst edge = graph.addEdge('Timothy', 'Timothy');\n\ngraph.isSelfLoop(edge);\n>>> true\n```\n\n----------------------------------------\n\nTITLE: Creating a Multi-graph with No Self-loops in JavaScript\nDESCRIPTION: Demonstrates instantiating a Graph with specific options to create a multi-graph that doesn't allow self-loops.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/instantiation.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Creating a multi-graph with no self-loops\nconst graph = new Graph({multi: true, allowSelfLoops: false});\n```\n\n----------------------------------------\n\nTITLE: Removing Graph Attribute in JavaScript\nDESCRIPTION: Illustrates how to remove a graph attribute using the removeAttribute method.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/attributes.md#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ngraph.setAttribute('name', 'My Beautiful Graph');\n\ngraph.removeAttribute('name');\n\ngraph.hasAttribute('name');\n>>> false\n```\n\n----------------------------------------\n\nTITLE: Edge Operation Method Variants - Finding\nDESCRIPTION: Available variants for finding edges in different directions and types\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/iteration.md#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n#.findInEdge\n#.findOutEdge\n#.findInboundEdge\n#.findOutboundEdge\n#.findDirectedEdge\n#.findUndirectedEdge\n```\n\n----------------------------------------\n\nTITLE: Checking Node Attribute Existence in JavaScript\nDESCRIPTION: Illustrates how to check if a node attribute exists using the hasNodeAttribute method.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/attributes.md#2025-04-17_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\ngraph.addNode('Martha', {eyes: 'blue'});\n\ngraph.hasNodeAttribute('Martha', 'eyes');\n>>> true\n\ngraph.hasNodeAttribute('Martha', 'age');\n>>> false\n```\n\n----------------------------------------\n\nTITLE: Verifying if a value is a graphology Graph constructor\nDESCRIPTION: Shows how to use the isGraphConstructor function to check if a given value is a graphology Graph constructor.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/assertions/README.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport {isGraphConstructor} from 'graphology-assertions';\n\nisGraphConstructor(Graph);\n>>> true\n\nisGraphConstructor(45);\n>>> false\n\nisGraphConstructor(new Graph());\n>>> false\n```\n\n----------------------------------------\n\nTITLE: Installing graphology-dag package using npm\nDESCRIPTION: Command for installing the graphology-dag package via npm package manager.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/dag/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install graphology-dag\n```\n\n----------------------------------------\n\nTITLE: Handling edgeDropped Event in Graphology\nDESCRIPTION: Example showing how to listen for the 'edgeDropped' event which is emitted when an edge is removed from the graph. The event payload includes the key, source, and target of the dropped edge.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/events.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ngraph.on('edgeDropped', function({key, source, target}) {\n  console.log(key, source, target);\n})\n\ngraph.addEdgeWithKey('T->R', 'Thomas', 'Richard');\ngraph.dropEdge('T->R');\n// Will print:\n>>> 'T->R', 'Thomas', 'Richard'\n```\n\n----------------------------------------\n\nTITLE: Generating k-Corona Subgraphs in JavaScript with Graphology\nDESCRIPTION: Examples of using the kCorona function to generate k-corona subgraphs with default and custom k values.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/cores.md#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport kCorona from 'graphology-cores/kCorona';\n\n// Return the main k-corona of the graph\nconst corona = kCorona(graph);\n\n// Return the k-corona subgraph with an arbitrary k value\nconst corona = kCorona(graph, 4);\n```\n\n----------------------------------------\n\nTITLE: Importing specific Graphology packages\nDESCRIPTION: Demonstrates different ways to import modules from the Graphology library, including importing specific subpackages, selecting parts of the library, or importing the entire library.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/index.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Importing a sub package\nimport * as metrics from 'graphology-library/metrics';\n\nmetrics.density(graph);\n\n// Importing select parts of the library\nimport {metrics, layout} from 'graphology-library';\n\n// Importing the whole library\nimport * as lib from 'graphology-library';\n\n// Importing the browser-specific library\n// (this is important for xml parsers and some layout's webworkers)\nimport * as lib from 'graphology-library/browser';\n```\n\n----------------------------------------\n\nTITLE: Checking Graph Instance using isGraph\nDESCRIPTION: Function to verify if a value is a graphology implementation instance. Returns boolean.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/utils/README.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {isGraph} from 'graphology-utils';\n// Alternatively, if you want to only load the relevant code:\nimport isGraph from 'graphology-utils/is-graph';\n\nconst graph = new Graph();\n\nisGraph(graph);\n>>> true\n\nisGraph(45);\n>>> false\n\nisGraph({hello: 'world'});\n>>> false\n```\n\n----------------------------------------\n\nTITLE: Edge Operation Method Variants - Every\nDESCRIPTION: Available variants for checking if all edges match in different directions and types\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/iteration.md#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n#.everyInEdge\n#.everyOutEdge\n#.everyInboundEdge\n#.everyOutboundEdge\n#.everyDirectedEdge\n#.everyUndirectedEdge\n```\n\n----------------------------------------\n\nTITLE: Changelog Entries for Graphology Library\nDESCRIPTION: Documents version history from 1.4.2 to 1.6.1, highlighting key changes including performance improvements to 'reverse' and 'toSimple', addition of 'toMulti' and 'toMixed' functions, and various bug fixes for directed and undirected graph operations.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/operators/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Changelog\n\n## 1.6.1\n\n- Improved performance of `reverse`.\n\n## 1.6.0\n\n- Adding options to `toSimple`.\n- Improved performance of `toSimple`.\n\n## 1.5.0\n\n- Adding `toMulti`.\n- Adding `toMixed`.\n\n## 1.4.3\n\n- Fixing `toDirected` and `toUndirected` wrt multi graphs.\n\n## 1.4.2\n\n- Fixing `toDirected` wrt self-loops.\n- Improving most type declarations wrt generics.\n- Dropping obsolete reference to generated keys.\n```\n\n----------------------------------------\n\nTITLE: Getting Graph Attribute in JavaScript\nDESCRIPTION: Demonstrates how to retrieve a graph attribute using the getAttribute method.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/attributes.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngraph.setAttribute('name', 'My Beautiful Graph');\n\nconst name = graph.getAttribute('name');\n\nconsole.log(name);\n>>> 'My Beautiful Graph'\n```\n\n----------------------------------------\n\nTITLE: Clearing Only Edges from Graph\nDESCRIPTION: Shows how to remove all edges while keeping nodes intact in the graph structure.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/mutation.md#2025-04-17_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\ngraph.addNode('John');\ngraph.addNode('Jack');\ngraph.addEdge('John', 'Jack');\n\nconsole.log(graph.order, graph.size);\n>>> 2, 1\n\ngraph.clearEdges();\n\nconsole.log(graph.order, graph.size);\n>>> 2, 0\n\ngraph.hasEdge('John', 'Jack');\n>>> false\n```\n\n----------------------------------------\n\nTITLE: Handling cleared Event in Graphology\nDESCRIPTION: Example demonstrating how to listen for the 'cleared' event which is emitted when the graph is completely cleared. This event is triggered by the #.clear method.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/events.md#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ngraph.on('cleared', function() {\n  console.log(graph.order, graph.size);\n});\n\ngraph.clear();\n// Will print:\n>>> 0, 0\n```\n\n----------------------------------------\n\nTITLE: Updating Graph Keys\nDESCRIPTION: Shows how to use the updateGraphKeys function to create a new graph with updated node and edge keys based on provided update functions.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/utils.md#2025-04-17_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport {updateGraphKeys} from 'graphology-utils';\n// Alternatively, if you want to only load the relevant code:\nimport updateGraphKeys from 'graphology-utils/update-graph-keys';\n\nconst graph = new Graph();\ngraph.addNode('Martha');\ngraph.addNode('Catherine');\ngraph.addNode('John');\ngraph.addEdgeWithKey('M->C', 'Martha', 'Catherine');\ngraph.addEdgeWithKey('C->J', 'Catherine', 'John');\n\nconst updatedGraph = updateGraphKeys(\n  graph,\n  (key)=> {\n    if (key === 'Martha') return 1;\n    if (key === 'Catherine') return 2;\n    return 3;\n  },\n  (key) => {\n    if (key === 'M->C') return 'rel1';\n    return 'rel2';\n  }\n);\n\nupdatedGraph.nodes();\n>>> [1, 2, 3];\n\nupdatedGraph.edges();\n>>> ['rel1', 'rel2'];\n```\n\n----------------------------------------\n\nTITLE: Comparing nodes of two graphs\nDESCRIPTION: Demonstrates the usage of the haveSameNodes function to check if two graphs have the same nodes.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/assertions/README.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport {haveSameNodes} from 'graphology-assertions';\n\nhaveSameNodes(G, H);\n```\n\n----------------------------------------\n\nTITLE: Setting Up Graphology Implementation Tests\nDESCRIPTION: JavaScript test setup file that imports the graphology specifications and runs them against a custom implementation. The file creates a test suite using the graphology specs function with the custom Graph class.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/implementing-graphology.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// test.js\nimport specs from 'graphology/specs';\nimport Graph from 'my-custom-graphology-implementation';\n\nmodule.exports = specs(Graph, Graph);\n```\n\n----------------------------------------\n\nTITLE: Installing node-canvas dependency for Node.js\nDESCRIPTION: Command to install the node-canvas package, which is required when using graphology-canvas in Node.js environments.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/canvas.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install canvas\n```\n\n----------------------------------------\n\nTITLE: Installing the complete Graphology library via npm\nDESCRIPTION: Command to install the aggregated 'graphology-library' package which includes all Graphology standard library modules at once.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/index.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install graphology-library\n```\n\n----------------------------------------\n\nTITLE: Setting Graph Attribute in JavaScript\nDESCRIPTION: Demonstrates how to set a graph attribute using the setAttribute method.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/attributes.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ngraph.setAttribute('name', 'My Beautiful Graph');\n\ngraph.getAttribute('name');\n>>> 'My Beautiful Graph'\n```\n\n----------------------------------------\n\nTITLE: Adding Edges with Custom Keys\nDESCRIPTION: Demonstrates adding edges with custom keys, useful for MultiGraphs where edge identification is important.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/mutation.md#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ngraph.addNode('John');\ngraph.addNode('Jack');\n\n// Adding a simple edge between John & Jack:\nconst edge = graph.addEdgeWithKey('John->Jack', 'John', 'Jack');\n\n// Adding an edge with attributes between John & Jack;\nconst edge = graph.addEdgeWithKey('John->Jack', 'John', 'Jack', {\n  type: 'KNOWS',\n  weight: 0\n});\n```\n\n----------------------------------------\n\nTITLE: Checking if a value is a graphology Graph instance\nDESCRIPTION: Demonstrates the usage of the isGraph function to check if a given value is an instance of a graphology Graph.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/assertions/README.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {isGraph} from 'graphology-assertions';\n\nconst graph = new Graph();\n\nisGraph(graph);\n>>> true\n\nisGraph(45);\n>>> false\n\nisGraph({hello: 'world'});\n>>> false\n```\n\n----------------------------------------\n\nTITLE: Updating Node Attribute in JavaScript\nDESCRIPTION: Shows how to update a node attribute using a function with the updateNodeAttribute method.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/attributes.md#2025-04-17_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\ngraph.addNode('Martha', {occurrences: 1});\n\ngraph.updateNodeAttribute('Martha', 'occurrences', n => n + 1);\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Connected Component Orders in JavaScript\nDESCRIPTION: Shows the usage of forEachConnectedComponentOrder function to iterate over the orders of connected components in a graph.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/components/README.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport {forEachConnectedComponentOrder} from 'graphology-components';\n\nforEachConnectedComponentOrder(graph, order => {\n  console.log(order);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Empty Graph in JavaScript\nDESCRIPTION: Shows how to create an empty graph with a specified number of nodes but no edges.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/generators.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport Graph, {UndirectedGraph} from 'graphology';\nimport {empty} from 'graphology-generators/classic';\n// Alternatively, if you only want to load relevant code\nimport empty from 'graphology-generators/classic/empty';\n\n// Creating an empty graph\nconst graph = empty(Graph, 10);\n\n// Using another constuctor to create, say, an empty undirected graph\nconst graph = empty(UndirectedGraph, 10);\n```\n\n----------------------------------------\n\nTITLE: Installing Graphology Operators in JavaScript\nDESCRIPTION: Command to install the graphology-operators package using npm.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/operators.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install graphology-operators\n```\n\n----------------------------------------\n\nTITLE: Running Graphology Tests with Mocha\nDESCRIPTION: Command to execute the implementation tests using the Mocha test runner with exports interface.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/implementing-graphology.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmocha -u exports test.js\n```\n\n----------------------------------------\n\nTITLE: Node Iteration Order in Graphology\nDESCRIPTION: Demonstrates that graphology does not guarantee insertion order when iterating over nodes, though the order remains stable if no nodes are added or removed between iterations.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/design-choices.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst graph = new Graph();\ngraph.addNode('First Node');\ngraph.addNode('Second Node');\n\n// Won't necessarily print 'First Node' then 'Second Node'\n// Might be the other way around.\ngraph.forEachNode(node => {\n  console.log(node);\n});\n```\n\n----------------------------------------\n\nTITLE: Using isBypartiteBy function in JavaScript\nDESCRIPTION: Example of how to import and use the isBypartiteBy function from the graphology-bipartite library. It demonstrates checking if a graph is bipartite based on a node attribute or a custom getter function.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/bipartite.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {isBypartiteBy} from 'graphology-bipartite';\n// Alternatively, to load only the relevant code:\nimport isBypartiteBy from 'graphology-bipartite/is-bipartite-by';\n\n// Wrt some node attribute:\nisBipartiteBy(graph, 'category');\n\n// Using some getter function:\nisBipartiteBy(graph, (node, attr) => externalIndex[node].category);\n```\n\n----------------------------------------\n\nTITLE: Edge Operation Method Variants - Reducing\nDESCRIPTION: Available variants for reducing edges in different directions and types\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/iteration.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n#.reduceInEdges\n#.reduceOutEdges\n#.reduceInboundEdges\n#.reduceOutboundEdges\n#.reduceDirectedEdges\n#.reduceUndirectedEdges\n```\n\n----------------------------------------\n\nTITLE: Deep comparison of graph edges with haveSameEdgesDeep in JavaScript\nDESCRIPTION: Example of using the haveSameEdgesDeep function to check if two graphs have the same edges and edge attributes, which implies they also have the same nodes. This allows comparison of different graph types.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/assertions.md#2025-04-17_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport {haveSameEdgesDeep} from 'graphology-assertions';\n\nhaveSameEdgesDeep(G, H);\n```\n\n----------------------------------------\n\nTITLE: Benchmark Output for Louvain Algorithm Implementations\nDESCRIPTION: Results of performance benchmarking showing execution times, number of detected communities, and modularity values for different implementations across various graph sizes.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/communities-louvain.md#2025-04-17_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nClustered Undirected graph with 1000 nodes and 9724 edges.\n\ngraphology undirected1000: 52.732ms\nCommunities 8\nModularity 0.42944314393593924\n\njlouvain undirected1000: 2368.053ms\nCommunities 8\nModularity 0.4302331134880074\n\nngraph.louvain undirected1000: 71.108ms\nCommunities 8\n\nngraph.louvain.native undirected1000: 39.185ms\nCommunities 7\n\n---\n\nEuroSIS Directed graph with 1285 nodes and 7524 edges.\n\ngraphology euroSis: 30.809ms\nCommunities 19\nModularity 0.7375260763995757\n\njlouvain euroSis: 1310.008ms\nCommunities 23\nModularity 0.7376116434498033\n\nngraph euroSis: 38.262ms\nCommunities 16\n\nngraph.native euroSis: 20.018ms\nCommunities 16\n\n---\n\nBig Undirected graph with 50000 nodes and 994713 edges.\n\ngraphology bigGraph: 937.942ms\nCommunities 43\nModularity 0.481431448861252\n\njLouvain is too slow...\n\nngraph bigGraph: 7783.050ms\nCommunities 44\n\nngraph.native bigGraph: 8415.692ms\nCommunities 1\n```\n\n----------------------------------------\n\nTITLE: List of Specialized Graph Constructors in JavaScript\nDESCRIPTION: Lists all available specialized constructors for different graph types in Graphology.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/instantiation.md#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nDirectedGraph\nUndirectedGraph\nMultiGraph\nMultiDirectedGraph\nMultiUndirectedGraph\n```\n\n----------------------------------------\n\nTITLE: Installing graphology-canvas via npm\nDESCRIPTION: Command to install the graphology-canvas package using npm.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/canvas.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install graphology-canvas\n```\n\n----------------------------------------\n\nTITLE: Installing Graphology SVG module using npm\nDESCRIPTION: Command to install the Graphology SVG module via npm package manager.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/svg/README.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install graphology-svg\n```\n\n----------------------------------------\n\nTITLE: Installing Graphology with npm\nDESCRIPTION: Command to install the graphology library using npm package manager.\nSOURCE: https://github.com/graphology/graphology/blob/master/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install graphology\n```\n\n----------------------------------------\n\nTITLE: Installing graphology-bipartite via npm\nDESCRIPTION: Command to install the graphology-bipartite library using npm package manager.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/bipartite.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install graphology-bipartite\n```\n\n----------------------------------------\n\nTITLE: Creating Karate Club Graph in JavaScript\nDESCRIPTION: Demonstrates creation of Zachary's karate club graph structure.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/generators.md#2025-04-17_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport Graph from 'graphology';\nimport {karateClub} from 'graphology-generators/karate-club';\n// Alternatively, if you only want to load relevant code\nimport karateClub from 'graphology-generators/social/karate-club';\n\n// Generating the graph\nconst graph = karateClub(Graph);\n```\n\n----------------------------------------\n\nTITLE: Error Handling in Graphology when Using Incompatible Methods\nDESCRIPTION: Shows how graphology throws helpful error messages when attempting operations that are incompatible with the graph type, such as adding undirected edges to a directed graph.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/design-choices.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {DirectedGraph} from 'graphology';\n\nconst graph = new DirectedGraph();\ngraph.addNode('Lucy');\ngraph.addNode('Catherine');\ngraph.addUndirectedEdge('Lucy', 'Catherine');\n>>> Error `DirectedGraph.addUndirectedEdge: You cannot add an undirected edge.\nto a directed graph Use the #.addEdge or #.addDirectedEdge method instead.`\n```\n\n----------------------------------------\n\nTITLE: Edge Path Conversion Utility\nDESCRIPTION: Utility function to convert a node path to an edge path\nSOURCE: https://github.com/graphology/graphology/blob/master/src/shortest-path/README.md#2025-04-17_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport {edgePathFromNodePath} from 'graphology-shortest-path';\n// Alternatively, if you want to load only the relevant code\nimport {edgePathFromNodePath} from 'graphology-shortest-path/utils';\n\nconst edgePath = edgePathFromNodePath(graph, nodePath);\n```\n\n----------------------------------------\n\nTITLE: Converting Graph to Multi in JavaScript\nDESCRIPTION: Demonstrates the use of toMulti operator to convert a graph to a multi-graph.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/operators/README.md#2025-04-17_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport {toMulti} from 'graphology-operators';\n// Alternatively, to load only the relevant code:\nimport toMulti from 'graphology-operators/to-multi';\n\nconst mixedGraph = toMulti(graph);\n```\n\n----------------------------------------\n\nTITLE: Installing Graphology Layout Package\nDESCRIPTION: Command to install the graphology-layout package using npm.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/layout/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install graphology-layout\n```\n\n----------------------------------------\n\nTITLE: Installing Graphology Utils Package\nDESCRIPTION: Installation command for the graphology-utils package via npm.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/utils/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install graphology-utils\n```\n\n----------------------------------------\n\nTITLE: Installing Graphology Shortest Path Library with npm\nDESCRIPTION: Command to install the graphology-shortest-path package via npm.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/shortest-path.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install graphology-shortest-path\n```\n\n----------------------------------------\n\nTITLE: Creating a Ladder Graph in JavaScript\nDESCRIPTION: Creates a ladder graph with the desired length. The generated graph will have twice the number of nodes as the length parameter. Takes a graphology constructor and length as parameters.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/generators/README.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport Graph, {UndirectedGraph} from 'graphology';\nimport {ladder} from 'graphology-generators/classic';\n// Alternatively, if you only want to load relevant code\nimport ladder from 'graphology-generators/classic/ladder';\n\n// Creating a ladder graph\nconst graph = ladder(Graph, 10);\n\n// Using another constuctor to create, say, a undirected ladder graph\nconst graph = ladder(UndirectedGraph, 10);\n```\n\n----------------------------------------\n\nTITLE: Creating Florentine Families Graph in JavaScript\nDESCRIPTION: Shows how to generate the Florentine families' graph structure.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/generators.md#2025-04-17_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport Graph from 'graphology';\nimport {florentineFamilies} from 'graphology-generators/florentine-families';\n// Alternatively, if you only want to load relevant code\nimport florentineFamilies from 'graphology-generators/social/florentine-families';\n\n// Generating the graph\nconst graph = florentineFamilies(Graph);\n```\n\n----------------------------------------\n\nTITLE: Using Specialized Graph Constructors in JavaScript\nDESCRIPTION: Demonstrates using specialized constructors provided by the Graphology implementation to create specific types of graphs without specifying options.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/instantiation.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport {MultiDirectedGraph} from 'graphology';\n\nconst myCustomGraph = new MultiDirectedGraph();\n```\n\n----------------------------------------\n\nTITLE: Creating Graph Path using mergePath\nDESCRIPTION: Function to add a path pattern to an existing graph where nodes form a linear sequence.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/utils/README.md#2025-04-17_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport {mergePath} from 'graphology-utils';\n// Alternatively, if you want to only load the relevant code:\nimport mergePath from 'graphology-utils/merge-path';\n\nconst graph = new Graph();\n\nmergePath(graph, [1, 2, 3, 4, 5]);\ngraph.edges().map(e => graph.extremities(e));\n>>> [[1, 2], [2, 3], [3, 4], [4, 5]]\n```\n\n----------------------------------------\n\nTITLE: Loading Graphology via Script Tags\nDESCRIPTION: HTML and JavaScript code to load and use graphology and its standard library using script tags in a web page.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/index.md#2025-04-17_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- To use a Graph object -->\n<script src=\"graphology.min.js\"></script>\n<!-- This exposes a global variable named \"graphology\" -->\n<script>\n  const graph = new graphology.Graph();\n\n  const {UndirectedGraph, DirectedGraph} = graphology;\n</script>\n\n<!-- To use the standard library -->\n<script src=\"graphology-library.min.js\"></script>\n<!-- This exposes a global variable named \"graphologyLibrary\" -->\n<script>\n  const density = graphologyLibrary.metrics.graph.density(graph);\n</script>\n```\n\n----------------------------------------\n\nTITLE: Installing Graphology Cores in JavaScript\nDESCRIPTION: Command to install the graphology-cores package using npm.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/cores.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install graphology-cores\n```\n\n----------------------------------------\n\nTITLE: Installing Graphology Sparsification Package\nDESCRIPTION: Command to install the graphology-sparsification package using npm package manager.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/sparsification/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install graphology-sparsification\n```\n\n----------------------------------------\n\nTITLE: Installing Graphology Communities Louvain Package via NPM\nDESCRIPTION: Command to install the graphology-communities-louvain package using npm package manager.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/communities-louvain.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install graphology-communities-louvain\n```\n\n----------------------------------------\n\nTITLE: Creating an Empty Graph in JavaScript\nDESCRIPTION: Creates an empty graph with the desired number of nodes but no edges. Takes a graphology constructor and the desired number of nodes as parameters.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/generators/README.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport Graph, {UndirectedGraph} from 'graphology';\nimport {empty} from 'graphology-generators/classic';\n// Alternatively, if you only want to load relevant code\nimport empty from 'graphology-generators/classic/empty';\n\n// Creating an empty graph\nconst graph = empty(Graph, 10);\n\n// Using another constuctor to create, say, an empty undirected graph\nconst graph = empty(UndirectedGraph, 10);\n```\n\n----------------------------------------\n\nTITLE: Using isGraph to verify graph instances in JavaScript\nDESCRIPTION: Example of using the isGraph function to check if a value is a graphology implementation's instance. The function returns true for graph instances and false for other values.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/assertions.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {isGraph} from 'graphology-assertions';\n\nconst graph = new Graph();\n\nisGraph(graph);\n>>> true\n\nisGraph(45);\n>>> false\n\nisGraph({hello: 'world'});\n>>> false\n```\n\n----------------------------------------\n\nTITLE: Installing Graphology Simple Path Package\nDESCRIPTION: Command to install the graphology-simple-path package using npm package manager.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/simple-path/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install graphology-simple-path\n```\n\n----------------------------------------\n\nTITLE: Graphology Changelog Entries\nDESCRIPTION: Version history entries detailing changes made to the Graphology library from version 2.2.0 to 2.5.1, including feature additions, bug fixes, and internal improvements.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/utils/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Changelog\n\n## 2.5.1\n\n- Adding missing `default.d.ts` declaration file.\n\n## 2.5.0\n\n- Adding `inferMulti`.\n\n## 2.4.4\n\n- Fixing internal `resolveDefaults`.\n\n## 2.4.3\n\n- Tweaking internal `getters`.\n\n## 2.4.2\n\n- Tweaking internal `getters`.\n\n## 2.4.1\n\n- Fixing internal `copyNode`, `addEdge`, `copyEdge`, `mergeEdge` & `updateEdge` return value.\n\n## 2.4.0\n\n- Dropping hidden internals.\n- Adapting `renameGraphKeys` & `updateGraphKeys` to latest graphology version.\n- Fixing `renameGraphKeys` & `updateGraphKeys` for undirected graphs.\n\n## 2.3.2\n\n- Adding missing `getters.js` file to npm package.\n\n## 2.3.1\n\n- Reorganizing internals.\n\n## 2.3.0\n\n- Adding private `resolveDefaults`.\n\n## 2.2.0\n\n- Adding private `createWeightGetter`.\n- Dropping remnants of generated key information in edge-related callbacks.\n```\n\n----------------------------------------\n\nTITLE: Installing Graphology Metrics Package\nDESCRIPTION: Command to install the graphology-metrics package using npm.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/metrics/README.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install graphology-metrics\n```\n\n----------------------------------------\n\nTITLE: Installing Graphology Generators with npm\nDESCRIPTION: Command to install the graphology-generators package using npm.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/generators/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install graphology-generators\n```\n\n----------------------------------------\n\nTITLE: Installing Graphology Communities Louvain Package\nDESCRIPTION: Command to install the graphology-communities-louvain package using npm.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/communities-louvain/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install graphology-communities-louvain\n```\n\n----------------------------------------\n\nTITLE: Creating a Florentine Families Graph in JavaScript\nDESCRIPTION: Returns the Florentine families' graph, a historical social network of powerful families. Takes only a graphology constructor as parameter.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/generators/README.md#2025-04-17_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport Graph from 'graphology';\nimport {florentineFamilies} from 'graphology-generators/florentine-families';\n// Alternatively, if you only want to load relevant code\nimport florentineFamilies from 'graphology-generators/social/florentine-families';\n\n// Generating the graph\nconst graph = florentineFamilies(Graph);\n```\n\n----------------------------------------\n\nTITLE: Converting Graph to Multi in JavaScript using Graphology\nDESCRIPTION: Demonstrates how to convert a graph to a multi-graph type.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/operators.md#2025-04-17_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport {toMulti} from 'graphology-operators';\n// Alternatively, to load only the relevant code:\nimport toMulti from 'graphology-operators/to-multi';\n\nconst mixedGraph = toMulti(graph);\n```\n\n----------------------------------------\n\nTITLE: Installing Graphology GRAPHML Package via NPM\nDESCRIPTION: Command to install the graphology-graphml package using NPM package manager.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/graphml/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install graphology-graphml\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Documentation\nDESCRIPTION: Comprehensive changelog detailing version updates and modifications to the Graphology library's type system and method signatures. Includes fixes for type declarations, additions of missing generics, and improvements to event handling.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/types/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Changelog\n\n## 0.24.7\n\n- Fixing type declaration syntax.\n\n## 0.24.6\n\n- Exporting missing `GraphEvents`.\n\n## 0.24.5\n\n- More useful `#.updateNode` & `#.updateEdge` type signature.\n\n## 0.24.4\n\n- Adding missing options from static methods.\n\n## 0.24.3\n\n- Fixing `#.updateEachNodeAttributes` & `#.updateEachEdgeAttributes` signature.\n- Adding missing generic to `UpdateHints`.\n\n## 0.24.2\n\n- Fixing `#.getSourceAttributes` and `#.getTargetAttributes` signature.\n\n## 0.24.1\n\n- Adds missing edge argument to `#.updateEdgeWithKey` methods.\n\n## 0.24.0\n\n- Improving event emitter types.\n- Fixing copy method types.\n- Aligning type declarations to `graphology` 0.24.0.\n\n## 0.23.0\n\n- Aligning type declarations to `graphology` 0.23.0.\n\n## 0.21.2\n\n- Improving attribute update event payload type declarations.\n```\n\n----------------------------------------\n\nTITLE: Installing Graphology Communities Leiden Package\nDESCRIPTION: Command to install the graphology-communities-leiden package using npm\nSOURCE: https://github.com/graphology/graphology/blob/master/src/communities-leiden/README.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install graphology-communities-leiden\n```\n\n----------------------------------------\n\nTITLE: Installing Graphology Force Layout via npm\nDESCRIPTION: Command to install the graphology-layout-force package using npm package manager.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/layout-force.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install graphology-layout-force\n```\n\n----------------------------------------\n\nTITLE: Installing Graphology Generators Package\nDESCRIPTION: NPM installation command for the graphology-generators package.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/generators.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install graphology-generators\n```\n\n----------------------------------------\n\nTITLE: Extracting k-Truss Subgraphs with Graphology\nDESCRIPTION: Shows how to use the kTruss function to extract a k-truss subgraph, where every edge is incident to at least k-2 triangles. Not available for directed graphs or multigraphs.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/cores/README.md#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport kTruss from 'graphology-cores/kTruss';\n\n// Return the k-truss of the graph with k = 4\nconst truss = kTruss(graph, 4);\n```\n\n----------------------------------------\n\nTITLE: Comparing graph nodes with haveSameNodes in JavaScript\nDESCRIPTION: Example of using the haveSameNodes function to check if two graphs have the same nodes without comparing node attributes.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/assertions.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport {haveSameNodes} from 'graphology-assertions';\n\nhaveSameNodes(G, H);\n```\n\n----------------------------------------\n\nTITLE: Installing node-canvas dependency for Node.js\nDESCRIPTION: Command to install the node-canvas package, which is required when using graphology-canvas functions in a Node.js environment.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/canvas/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install canvas\n```\n\n----------------------------------------\n\nTITLE: Installing ForceAtlas2 Layout for Graphology in JavaScript\nDESCRIPTION: Command to install the ForceAtlas2 layout package for Graphology using npm.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/layout-forceatlas2.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install graphology-layout-forceatlas2\n```\n\n----------------------------------------\n\nTITLE: Installing graphology-components via npm\nDESCRIPTION: Command to install the graphology-components library using npm package manager.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/components.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install graphology-components\n```\n\n----------------------------------------\n\nTITLE: Installing Graphology Layout Library with npm\nDESCRIPTION: Command to install the graphology-layout library using npm package manager.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/layout.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install graphology-layout\n```\n\n----------------------------------------\n\nTITLE: Installing Graphology Components with npm\nDESCRIPTION: Command to install the graphology-components package using npm.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/components/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install graphology-components\n```\n\n----------------------------------------\n\nTITLE: Edge Operation Method Variants - Entries\nDESCRIPTION: Available variants for iterating over edges in different directions and types\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/iteration.md#2025-04-17_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n#.inEdgeEntries\n#.outEdgeEntries\n#.inboundEdgeEntries\n#.outboundEdgeEntries\n#.directedEdgeEntries\n#.undirectedEdgeEntries\n```\n\n----------------------------------------\n\nTITLE: Checking Graph Attribute Existence in JavaScript\nDESCRIPTION: Illustrates how to check if a graph attribute exists using the hasAttribute method.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/attributes.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ngraph.setAttribute('name', 'My Beautiful Graph');\n\ngraph.hasAttribute('name');\n>>> true\n\ngraph.hasNodeAttribute('color');\n>>> false\n```\n\n----------------------------------------\n\nTITLE: Installing Graphology GEXF Module with npm\nDESCRIPTION: Command to install the graphology-gexf package using npm package manager.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/gexf.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install graphology-gexf\n```\n\n----------------------------------------\n\nTITLE: Installing graphology-svg via npm\nDESCRIPTION: Command to install the graphology-svg library using npm package manager.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/svg.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install graphology-svg\n```\n\n----------------------------------------\n\nTITLE: Installing Graphology Force Layout Package\nDESCRIPTION: NPM installation command for the graphology-layout-force package\nSOURCE: https://github.com/graphology/graphology/blob/master/src/layout-force/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install graphology-layout-force\n```\n\n----------------------------------------\n\nTITLE: Installing Graphology Indices Package via npm\nDESCRIPTION: Command to install the graphology-indices package from npm registry. This package contains various low-level indices used to optimize graph operations in the graphology ecosystem.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/indices/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install graphology-indices\n```\n\n----------------------------------------\n\nTITLE: Installing graphology-canvas via npm\nDESCRIPTION: Command to install the graphology-canvas package using npm. This is the primary installation method for the package.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/canvas/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install graphology-canvas\n```\n\n----------------------------------------\n\nTITLE: Installing Graphology Operators with npm\nDESCRIPTION: Command to install the graphology-operators package using npm.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/operators/README.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install graphology-operators\n```\n\n----------------------------------------\n\nTITLE: Assigning Layout to Graph from Flat Array in JavaScript\nDESCRIPTION: Example showing how to use the assignLayoutAsFlatArray utility function to assign a flat array layout to a graph. The function provides options for customizing dimensions.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/layout/README.md#2025-04-17_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport {assignLayoutAsFlatArray} from 'graphology-layout/utils';\n\nassignLayoutAsFlatArray(graph, layout);\n\n// Custom dimensions\nassignLayoutAsFlatArray(graph, layout, {dimensions: ['x', 'y', 'z']});\n```\n\n----------------------------------------\n\nTITLE: Installing Graphology Shortest Path Package\nDESCRIPTION: NPM installation command for the graphology-shortest-path package\nSOURCE: https://github.com/graphology/graphology/blob/master/src/shortest-path/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install graphology-shortest-path\n```\n\n----------------------------------------\n\nTITLE: Installing Graphology Similarity Package via npm\nDESCRIPTION: Command to install the graphology-similarity package using npm. This package provides similarity functions for use with the graphology library.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/similarity/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install graphology-similarity\n```\n\n----------------------------------------\n\nTITLE: Installing Graphology GEXF Package\nDESCRIPTION: NPM installation command for the graphology-gexf package.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/gexf/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install graphology-gexf\n```\n\n----------------------------------------\n\nTITLE: Installing Graphology Types via npm\nDESCRIPTION: This code snippet demonstrates how to install the graphology-types package using npm. This package provides TypeScript declarations for use with the Graphology library.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/types/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install graphology-types\n```\n\n----------------------------------------\n\nTITLE: Installing Graphology Dependencies with NPM\nDESCRIPTION: Command to install the required dependencies (graphology and mocha) for testing a custom graphology implementation.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/implementing-graphology.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev graphology mocha\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entries\nDESCRIPTION: Version history documenting changes including the addition of A* algorithm, type definition fixes, dependency updates, and algorithmic improvements to Dijkstra and Brandes implementations.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/shortest-path/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Changelog\n\n## 2.1.0\n\n- Adding `astar` (@dkniffin).\n\n## 2.0.2\n\n- Adding missing type definitions for `undirectedSingleSourceLength`.\n\n## 2.0.1\n\n- Updating dependency on `graphology-indices`.\n\n## 2.0.0\n\n- Reorganization.\n- Dijkstra using weight getters.\n- Indexed Brandes using weight getters.\n- Adding `edgePathFromNodePath`.\n```\n\n----------------------------------------\n\nTITLE: Installing Graphology Types for TypeScript\nDESCRIPTION: Command to install graphology-types, which provides TypeScript type declarations for the graphology library.\nSOURCE: https://github.com/graphology/graphology/blob/master/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install graphology-types\n```\n\n----------------------------------------\n\nTITLE: Assigning Layout to Graph in JavaScript with Graphology\nDESCRIPTION: Examples of using the assignLayout utility to apply a layout object to a graph. Shows importing and assigning layouts with custom dimensions.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/layout.md#2025-04-17_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport {assignLayout} from 'graphology-layout/utils';\n\nassignLayout(graph, layout);\n\n// Custom dimensions\nassignLayout(graph, layout, {dimensions: ['x', 'y', 'z']});\n```\n\n----------------------------------------\n\nTITLE: Installing Graphology Cores Package\nDESCRIPTION: Command to install the graphology-cores package using npm. This is required before using any of the functions described in the documentation.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/cores/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install graphology-cores\n```\n\n----------------------------------------\n\nTITLE: Running Benchmark Comparison for Louvain Implementations\nDESCRIPTION: Commands to install dependencies and run a benchmark comparing different Louvain algorithm implementations.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/communities-louvain/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --no-save ngraph.louvain.native\nnode benchmark/comparison.js\n```\n\n----------------------------------------\n\nTITLE: Documenting isRunning Method Addition in Markdown\nDESCRIPTION: Changelog entry documenting the addition of the #.isRunning method to the worker component in version 0.4.0.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/layout-noverlap/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Changelog\n\n## 0.4.0\n\n- Adding `#.isRunning` to worker.\n```\n\n----------------------------------------\n\nTITLE: Assigning Flat Array Layout to Graph in JavaScript with Graphology\nDESCRIPTION: Examples of using the assignLayoutAsFlatArray utility to apply a flat array layout to a graph. Shows importing and assigning layouts with custom dimensions.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/layout.md#2025-04-17_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport {assignLayoutAsFlatArray} from 'graphology-layout/utils';\n\nassignLayoutAsFlatArray(graph, layout);\n\n// Custom dimensions\nassignLayoutAsFlatArray(graph, layout, {dimensions: ['x', 'y', 'z']});\n```\n\n----------------------------------------\n\nTITLE: Installing Graphology Bipartite Package using npm\nDESCRIPTION: Command to install the graphology-bipartite package using npm package manager.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/bipartite/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install graphology-bipartite\n```\n\n----------------------------------------\n\nTITLE: Installing Graphology Library via npm\nDESCRIPTION: This snippet shows how to install the Graphology Aggregated Standard Library using npm. It's a prerequisite for using the library in your project.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/library/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install graphology-library\n```\n\n----------------------------------------\n\nTITLE: Installing Graphology Utils Package\nDESCRIPTION: Command to install the graphology-utils package using npm.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/utils.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install graphology-utils\n```\n\n----------------------------------------\n\nTITLE: Installing graphology-assertions package with npm\nDESCRIPTION: Command to install the graphology-assertions package using npm package manager.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/assertions.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install graphology-assertions\n```\n\n----------------------------------------\n\nTITLE: Installing Graphology Simple Path Package\nDESCRIPTION: NPM installation command for the graphology-simple-path package.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/simple-path.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install graphology-simple-path\n```\n\n----------------------------------------\n\nTITLE: Installing graphology-minivan package via npm\nDESCRIPTION: This command installs the graphology-minivan package using npm, which provides utility functions for Graphology and Minivan.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/minivan/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install graphology-minivan\n```\n\n----------------------------------------\n\nTITLE: Installing graphology-indices via npm\nDESCRIPTION: Command to install the graphology-indices library using npm package manager. This library provides various indexation structures for use with the graphology graph manipulation library.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/indices.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install graphology-indices\n```\n\n----------------------------------------\n\nTITLE: Computing Closeness Centrality in JavaScript using Graphology\nDESCRIPTION: Demonstrates the computation of closeness centrality for nodes in a graph using the Graphology library. It shows how to return scores per node, assign results to node attributes, and use optional parameters like Wasserman & Faust's normalization.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/metrics.md#2025-04-17_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport closenessCentrality from 'graphology-metrics/centrality/closeness';\n\n// To compute the eigenvector centrality and return the score per node:\nconst scores = closenessCentrality(graph);\n\n// To directly map the result to nodes' attributes:\nclosenessCentrality.assign(graph);\n\n// Note that you can also pass options to customize the algorithm:\nconst p = closenessCentrality(graph, {wassermanFaust: true});\n```\n\n----------------------------------------\n\nTITLE: Installing Graphology DAG Package in JavaScript\nDESCRIPTION: Command to install the Graphology DAG package using npm.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/dag.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install graphology-dag\n```\n\n----------------------------------------\n\nTITLE: Installing Graphology via npm\nDESCRIPTION: Command to install the graphology library using npm package manager.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/index.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install graphology\n```\n\n----------------------------------------\n\nTITLE: Installing individual Graphology modules via npm\nDESCRIPTION: Example showing how to install a specific module from the Graphology standard library using npm, using graphology-metrics as an example.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/index.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install graphology-metrics\n```\n\n----------------------------------------\n\nTITLE: Installing Graphology Metrics Package\nDESCRIPTION: Basic npm installation command for the graphology-metrics package.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/metrics.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install graphology-metrics\n```\n\n----------------------------------------\n\nTITLE: Computing HITS Algorithm in JavaScript using Graphology\nDESCRIPTION: Shows how to compute hub and authority metrics for each node using the HITS algorithm in the Graphology library. It includes examples of returning results, assigning to node attributes, and customizing algorithm parameters.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/metrics.md#2025-04-17_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport hits from 'graphology-metrics/centrality/hits';\n\n// To compute and return the result as 'hubs' & 'authorities':\nconst {hubs, authorities} = hits(graph);\n\n// To directly map the result to nodes' attributes:\nhits.assign(graph);\n\n// Note that you can also pass options to customize the algorithm:\nconst {hubs, authorities} = hits(graph, {normalize: false});\n```\n\n----------------------------------------\n\nTITLE: Installing graphology-traversal package using npm\nDESCRIPTION: Command to install the graphology-traversal package using npm package manager.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/traversal/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install graphology-traversal\n```\n\n----------------------------------------\n\nTITLE: Installing Graphology Traversal Package\nDESCRIPTION: NPM installation command for the graphology-traversal package\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/traversal.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install graphology-traversal\n```\n\n----------------------------------------\n\nTITLE: Installing graphology-assertions via npm\nDESCRIPTION: Command to install the graphology-assertions library using npm package manager.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/assertions/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install graphology-assertions\n```\n\n----------------------------------------\n\nTITLE: Installing graphology-layout-forceatlas2 package\nDESCRIPTION: Command to install the graphology-layout-forceatlas2 package using npm.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/layout-forceatlas2/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install graphology-layout-forceatlas2\n```\n\n----------------------------------------\n\nTITLE: Installing Graphology GRAPHML in Node.js\nDESCRIPTION: Command to install the graphology-graphml package via npm package manager.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/graphml.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install graphology-graphml\n```\n\n----------------------------------------\n\nTITLE: Detecting Multi-Graph using inferMulti\nDESCRIPTION: Function to determine if a graph is truly multi by checking for multiple edges between same nodes.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/utils/README.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport {inferMulti} from 'graphology-utils';\n// Alternatively, if you want to only load the relevant code:\nimport inferMulti from 'graphology-utils/infer-multi';\n\nconst graph = new MultiGraph();\ngraph.addEdge(1, 2);\n\ninferMulti(graph);\n>>> false\n\ngraph.addEdge(1, 2);\n\ninferMulti(graph);\n>>> true\n```\n\n----------------------------------------\n\nTITLE: Running Benchmarks for Louvain Community Detection\nDESCRIPTION: Commands to install dependencies and run benchmark tests comparing the performance of different Louvain algorithm implementations.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/communities-louvain.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --no-save ngraph.louvain.native\nnode benchmark/comparison.js\n```\n\n----------------------------------------\n\nTITLE: Installing Graphology Noverlap Package\nDESCRIPTION: Command to install the graphology-layout-noverlap package using npm package manager.\nSOURCE: https://github.com/graphology/graphology/blob/master/src/layout-noverlap/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install graphology-layout-noverlap\n```\n\n----------------------------------------\n\nTITLE: Installing Graphology Noverlap Layout Package\nDESCRIPTION: Command to install the Graphology Noverlap layout package using npm.\nSOURCE: https://github.com/graphology/graphology/blob/master/docs/standard-library/layout-noverlap.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install graphology-layout-noverlap\n```"
  }
]