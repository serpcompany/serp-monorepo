[
  {
    "owner": "stack-auth",
    "repo": "stack-auth",
    "content": "TITLE: Retrieving User Data in Client Components with useUser()\nDESCRIPTION: This snippet demonstrates how to use the useUser() hook to get the current user in a Client Component. It handles both authenticated and unauthenticated states, displaying a personalized greeting or a message for users who are not logged in.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/getting-started/users.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\";\nimport { useUser } from \"@stackframe/stack\"\n\nexport function MyClientComponent() {\n  const user = useUser();\n  return <div>{user ? `Hello, ${user.displayName ?? \"anon\"}` : 'You are not logged in'}</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Protecting a Client Component Page\nDESCRIPTION: This code demonstrates how to protect a Client Component by using the useUser() hook with the 'redirect' option, which ensures only authenticated users can access the component.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/getting-started/users.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\";\nimport { useUser } from \"@stackframe/stack\";\n\nexport default function MyProtectedClientComponent() {\n  useUser({ or: 'redirect' });\n  return <h1>You can only see this if you are logged in</h1>\n}\n```\n\n----------------------------------------\n\nTITLE: Redirecting Unauthenticated Users with useUser() Options\nDESCRIPTION: This code shows how to use useUser() with the 'redirect' option to automatically redirect unauthenticated users to the sign-in page, ensuring the component only renders for authenticated users.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/getting-started/users.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n  const user = useUser({ or: \"redirect\" });\n  return <div>{`Hello, ${user.displayName ?? \"anon\"}`}</div>;\n```\n\n----------------------------------------\n\nTITLE: Configuring Stack Auth Provider in Root Layout\nDESCRIPTION: Code for integrating Stack Auth Provider and Theme components into the Next.js root layout component.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/getting-started/setup.mdx#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nimport { StackProvider, StackTheme } from \"@stackframe/stack\";\nimport { stackServerApp } from \"@/stack\";\n\nexport default function RootLayout({ children }: { children: React.ReactNode }) {\n  return (\n    <html lang=\"en\">\n      <body>\n        <StackProvider app={stackServerApp}>\n          <StackTheme>\n            {children}\n          </StackTheme>\n        </StackProvider>\n      </body>\n    </html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Loading Component for Stack Auth\nDESCRIPTION: Simple loading component to display while Stack Auth fetches user data using React Suspense.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/getting-started/setup.mdx#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function Loading() {\n  // You can use any loading indicator here\n  return <>\n    Loading...\n  </>;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Stack Auth Client App with Vite in TypeScript\nDESCRIPTION: This snippet demonstrates how to initialize a Stack Auth client app using environment variables from Vite. It sets up the base URL, project ID, and client key, and configures token storage and OAuth callback URL.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/getting-started/example-pages.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { StackClientApp } from \"@stackframe/js\";\n\n// Add type declaration for Vite's import.meta.env\ndeclare global {\n  interface ImportMeta {\n    env: {\n      VITE_STACK_API_URL: string;\n      VITE_STACK_PROJECT_ID: string;\n      VITE_STACK_PUBLISHABLE_CLIENT_KEY: string;\n    };\n  }\n}\n\nexport const stackClientApp = new StackClientApp({\n  baseUrl: import.meta.env.VITE_STACK_API_URL,\n  projectId: import.meta.env.VITE_STACK_PROJECT_ID,\n  publishableClientKey: import.meta.env.VITE_STACK_PUBLISHABLE_CLIENT_KEY,\n  tokenStore: \"cookie\",\n  urls: {\n    oauthCallback: window.location.origin + \"/oauth\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Listing User Permissions in Server Component\nDESCRIPTION: This code shows how to list all permissions a user has using the listPermissions method in a Next.js server component.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/concepts/permissions.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { stackServerApp } from \"@/stack\";\n\nexport default async function DisplayUserPermissions() {\n  const user = await stackServerApp.getUser({ or: 'redirect' });\n  const permissions = await user.listPermissions();\n\n  return (\n    <div>\n      {permissions.map(permission => (\n        <div key={permission.id}>{permission.id}</div>\n      ))}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Stack Auth Provider in React App\nDESCRIPTION: Updates the main App component to include Stack Auth Provider, Theme, and Handler for authentication flow.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/getting-started/setup.mdx#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { StackHandler, StackProvider, StackTheme } from \"@stackframe/react\";\nimport { Suspense } from \"react\";\nimport { BrowserRouter, Route, Routes, useLocation } from \"react-router-dom\";\nimport { stackClientApp } from \"./stack\";\n\nfunction HandlerRoutes() {\n  const location = useLocation();\n  \n  return (\n    <StackHandler app={stackClientApp} location={location.pathname} fullPage />\n  );\n}\n\nexport default function App() {\n  return (\n    <Suspense fallback={null}>\n      <BrowserRouter>\n        <StackProvider app={stackClientApp}>\n          <StackTheme>\n            <Routes>\n              <Route path=\"/handler/*\" element={<HandlerRoutes />} />\n              <Route path=\"/\" element={<div>hello world</div>} />\n            </Routes>\n          </StackTheme>\n        </StackProvider>\n      </BrowserRouter>\n    </Suspense>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Stack Server App Configuration\nDESCRIPTION: Code for the stack.ts file that initializes the StackServerApp with Next.js cookie-based token storage.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/getting-started/setup.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport \"server-only\";\nimport { StackServerApp } from \"@stackframe/stack\";\n\nexport const stackServerApp = new StackServerApp({\n  tokenStore: \"nextjs-cookie\", // storing auth tokens in cookies\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing SignIn Component in Next.js\nDESCRIPTION: Shows how to implement the SignIn component that provides a complete authentication form. The component includes OAuth buttons, magic link authentication, and credential-based sign-in functionality.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/getting-started/components.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { SignIn } from '@stackframe/stack';\n\nexport default function Page() {\n  return (\n    <SignIn />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing User Authentication with Stack Auth React Component\nDESCRIPTION: Basic example showing how to get and display the current user information using Stack Auth's useUser hook. The component either returns user data or redirects to login.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexport function MyComponent() {\n  const user = useUser({ or: \"redirect\" });\n  return <div>Hi, {user.displayName}</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Teams in a React Component Example in TypeScript\nDESCRIPTION: This example shows how to use the useTeams hook in a React component to retrieve all teams the user is a member of.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/types/user.mdx#2025-04-22_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nconst teams = user.useTeams();\n```\n\n----------------------------------------\n\nTITLE: Getting User Data in Server Components\nDESCRIPTION: This example demonstrates how to retrieve user information in a Server Component using the stackServerApp.getUser() method instead of hooks, which can't be used in server-side code.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/getting-started/users.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { stackServerApp } from \"@/stack\";\n\nexport default async function MyServerComponent() {\n  const user = await stackServerApp.getUser();  // or: stackServerApp.getUser({ or: \"redirect\" })\n  return <div>{user ? `Hello, ${user.displayName ?? \"anon\"}` : 'You are not logged in'}</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing StackProvider in a React Application\nDESCRIPTION: This example demonstrates how to integrate the StackProvider component into a React application layout. It shows setting up the provider with a server app instance, specifying German language, and providing custom translation overrides for sign-in text.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/components/stack-provider.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { StackProvider } from '@stackframe/stack';\nimport { stackServerApp } from '@/stack';\n\nfunction App() {\n  return (\n    <StackProvider\n      app={stackServerApp}\n      lang=\"de-DE\"\n      translationOverrides={{\n        \"Sign in\": \"Einloggen\",\n        \"Sign In\": \"Einloggen\",\n      }}\n    >\n      {/* Your app content */}\n    </StackProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing UserButton Component in React\nDESCRIPTION: Example of implementing the UserButton component with user info display, color mode toggle, and custom menu items. The component accepts props for controlling user information visibility, handling color mode changes, and adding extra menu items with custom icons and actions.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/components/user-button.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n'use client';\nimport { UserButton } from '@stackframe/stack';\n\nexport default function Page() {\n  return (\n    <div>\n      <h1>User Button</h1>\n      <UserButton\n        showUserInfo={true}\n        colorModeToggle={() => { console.log(\"color mode toggle clicked\") }}\n        extraItems={[{\n          text: 'Custom Action',\n          icon: <CustomIcon />,\n          onClick: () => console.log('Custom action clicked')\n        }]}\n      />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Protecting Routes with Next.js Middleware\nDESCRIPTION: This code demonstrates how to use Next.js middleware to protect routes based on authentication status. It redirects unauthenticated users to the sign-in page when they attempt to access protected paths.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/getting-started/users.mdx#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nexport async function middleware(request: NextRequest) {\n  const user = await stackServerApp.getUser();\n  if (!user) {\n    return NextResponse.redirect(new URL('/handler/sign-in', request.url));\n  }\n  return NextResponse.next();\n}\n\nexport const config = {\n  // You can add your own route protection logic here\n  // Make sure not to protect the root URL, as it would prevent users from accessing static Next.js files or Stack's /handler path\n  matcher: '/protected/:path*',\n};\n```\n\n----------------------------------------\n\nTITLE: Checking User Permission Example in TypeScript\nDESCRIPTION: This example shows how to use the hasPermission function to check if a user has a specific permission for a team.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/types/user.mdx#2025-04-22_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\nconst hasPermission = await user.hasPermission(team, \"permissionId\");\n```\n\n----------------------------------------\n\nTITLE: Signing Out with user.signOut()\nDESCRIPTION: This example shows how to implement a sign-out button that calls the user.signOut() method to log out the current user. It also conditionally renders based on authentication status.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/getting-started/users.mdx#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\";\nimport { useUser } from \"@stackframe/stack\";\n\nexport default function SignOutButton() {\n  const user = useUser();\n  return user ? <button onClick={() => user.signOut()}>Sign Out</button> : \"Not signed in\";\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Credential-Based Sign-Up Form in React\nDESCRIPTION: A custom implementation of a credential-based sign-up form that handles email and password registration. It demonstrates form state management, validation, error handling, and submission using the Stack Auth SDK's signUpWithCredential method.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/customization/page-examples/sign-up.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n'use client';\n\nimport { useStackApp } from \"@stackframe/stack\";\nimport { useState } from \"react\";\n\nexport default function CustomCredentialSignUp() {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [error, setError] = useState('');\n  const app = useStackApp();\n\n  const onSubmit = async () => {\n    if (!password) {\n      setError('Please enter your password');\n      return;\n    }\n    // This will redirect to app.urls.afterSignUp if successful.\n    // You can customize the redirect URL in the StackServerApp constructor.\n    const result = await app.signUpWithCredential({ email, password });\n    // It's better to handle each error code separately, but for simplicity,\n    // we'll just display the error message directly here.\n    if (result.status === 'error') {\n      setError(result.error.message);\n    }\n  };\n  \n  return (\n    <form onSubmit={(e) => { e.preventDefault(); onSubmit(); } }>\n      {error}\n      <input type='email' placeholder=\"email@example.com\" value={email} onChange={(e) => setEmail(e.target.value)} />\n      <input type='password' placeholder=\"password\" value={password} onChange={(e) => setPassword(e.target.value)} />\n      <button type='submit'>Sign Up</button>\n    </form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Project ID for Stack Auth in JSX\nDESCRIPTION: This snippet demonstrates how to set the project ID for Stack Auth. It references the project ID from the Stack Auth dashboard and allows for configuration via an environment variable.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/snippets/stack-app-constructor-options-before-ssk.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<ParamField path=\"projectId\" type=\"string\">\n  The ID of the project that the app is associated with, as found on Stack Auth's dashboard. Defaults to the value of the `NEXT_PUBLIC_STACK_PROJECT_ID` environment variable.\n</ParamField>\n```\n\n----------------------------------------\n\nTITLE: Signing In with Email and Password\nDESCRIPTION: Demonstrates how to use the signInWithCredential method for email and password-based authentication, including error handling.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/objects/stack-app.mdx#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst result = await stackClientApp.signInWithCredential({\n  email: \"test@example.com\",\n  password: \"password\",\n});\n\nif (result.status === \"error\") {\n  console.error(\"Sign in failed\", result.error.message);\n}\n```\n\n----------------------------------------\n\nTITLE: Server vs Client Component Stack App Usage in TypeScript/React\nDESCRIPTION: Demonstrates the different ways to use StackApp in server and client components. Shows how to fetch user data using both async getUser() method and useUser() hook.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/concepts/stack-app.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// server-component.tsx\nasync function ServerComponent() {\n  const app = stackServerApp;\n  // returns a Promise, must be awaited\n  const user = await app.getUser();\n\n  return <div>{user.displayName}</div>;\n}\n\n\n// client-component.tsx\n\"use client\";\nfunction ClientComponent() {\n  const app = useStackApp();\n  // returns the value directly\n  const user = app.useUser();\n\n  return <div>{user.displayName}</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Initiating OAuth Sign-In with Google\nDESCRIPTION: Shows how to use the signInWithOAuth method to initiate OAuth sign-in with Google provider.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/objects/stack-app.mdx#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nawait stackClientApp.signInWithOAuth(\"google\");\n```\n\n----------------------------------------\n\nTITLE: Custom Profile Page with Client Components\nDESCRIPTION: This example creates a complete user profile page as a Client Component. It displays user information for authenticated users and sign-in/sign-up options for unauthenticated users using various Stack features.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/getting-started/users.mdx#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n'use client';\nimport { useUser, useStackApp, UserButton } from \"@stackframe/stack\";\n\nexport default function PageClient() {\n  const user = useUser();\n  const app = useStackApp();\n  return (\n    <div>\n      {user ? (\n        <div>\n          <UserButton />\n          <p>Welcome, {user.displayName ?? \"unnamed user\"}</p>\n          <p>Your e-mail: {user.primaryEmail}</p>\n          <button onClick={() => user.signOut()}>Sign Out</button>\n        </div>\n      ) : (\n        <div>\n          <p>You are not logged in</p>\n          <button onClick={() => app.redirectToSignIn()}>Sign in</button>\n          <button onClick={() => app.redirectToSignUp()}>Sign up</button>\n        </div>\n      )}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using OAuthButton Component for OAuth Authentication in React\nDESCRIPTION: Example showing how to import and use the OAuthButton component for Google and GitHub authentication. The component renders styled buttons for different OAuth providers and handles the sign-in or sign-up process.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/components/oauth-button.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { OAuthButton } from '@stackframe/stack';\n\nexport default function Page() {\n  return (\n    <div>\n      <h1>Sign In</h1>\n      <OAuthButton provider=\"google\" type=\"sign-in\" />\n      <OAuthButton provider=\"github\" type=\"sign-up\" />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Credential Sign-In Form in React\nDESCRIPTION: Creates a custom email/password sign-in form using useState for form management and the Stack Auth API for authentication. Includes basic error handling and form validation.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/customization/page-examples/sign-in.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n'use client';\nimport { useStackApp } from \"@stackframe/stack\";\nimport { useState } from \"react\";\n\nexport default function CustomCredentialSignIn() {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [error, setError] = useState('');\n  const app = useStackApp();\n\n  const onSubmit = async () => {\n    if (!password) {\n      setError('Please enter your password');\n      return;\n    }\n    // This will redirect to app.urls.afterSignIn if successful.\n    // You can customize the redirect URL in the StackServerApp constructor.\n    const result = await app.signInWithCredential({ email, password });\n    // It's better to handle each error code separately, but for simplicity,\n    // we'll just display the error message directly here.\n    if (result.status === 'error') {\n      setError(result.error.message);\n    }\n  };\n  \n  return (\n    <form onSubmit={(e) => { e.preventDefault(); onSubmit(); } }>\n      {error}\n      <input type='email' placeholder=\"email@example.com\" value={email} onChange={(e) => setEmail(e.target.value)} />\n      <input type='password' placeholder=\"password\" value={password} onChange={(e) => setPassword(e.target.value)} />\n      <button type='submit'>Sign In</button>\n    </form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Sign-In Page Using Stack Auth Components in React\nDESCRIPTION: This snippet demonstrates how to create a custom sign-in page using the SignIn component from Stack Auth. It shows how to add a custom title above the default sign-in form.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/customization/custom-pages.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { SignIn } from \"@stackframe/stack\";\n\nexport default function CustomSignInPage() {\n  return (\n    <div>\n      <h1>My Custom Sign In page</h1>\n      <SignIn />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Signing Up with Email and Password\nDESCRIPTION: Shows how to use the signUpWithCredential method for user registration with email and password, including error handling.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/objects/stack-app.mdx#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst result = await stackClientApp.signUpWithCredential({\n  email: \"test@example.com\",\n  password: \"password\",\n});\n\nif (result.status === \"error\") {\n  console.error(\"Sign up failed\", result.error.message);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Sign-Up Page with SignUp Component in React\nDESCRIPTION: A simple implementation of a sign-up page using the pre-built SignUp component from Stack Auth. The component handles the complete sign-up flow and can be optionally combined with user state checking to implement redirects for authenticated users.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/customization/page-examples/sign-up.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n'use client';\nimport { SignUp } from \"@stackframe/stack\";\n\nexport default function DefaultSignUp() {\n  // optionally redirect to some other page if the user is already signed in\n  // const user = useUser();\n  // if (user) { redirect to some other page }\n  return <SignUp fullPage />;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CurrentUser Type in TypeScript for Stack Authentication SDK\nDESCRIPTION: Type definition for the CurrentUser object in the Stack Authentication SDK. This includes user properties like ID, display name, email, and methods for user management, team operations, and permission handling.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/types/user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype CurrentUser = {\n  id: string; //$stack-link-to:#currentuserid\n  displayName: string | null; //$stack-link-to:#currentuserdisplayname\n  primaryEmail: string | null; //$stack-link-to:#currentuserprimaryemail\n  primaryEmailVerified: boolean; //$stack-link-to:#currentuserprimaryemailverified\n  profileImageUrl: string | null; //$stack-link-to:#currentuserprofileimageurl\n  signedUpAt: Date; //$stack-link-to:#currentusersignedupat\n  hasPassword: boolean; //$stack-link-to:#currentuserhaspassword\n  clientMetadata: Json; //$stack-link-to:#currentuserclientmetadata\n  clientReadOnlyMetadata: Json; //$stack-link-to:#currentuserclientreadonlymetadata\n  selectedTeam: Team | null; //$stack-link-to:#currentuserselectedteam\n\n  update(data): Promise<void>; //$stack-link-to:#currentuserupdatedata\n  updatePassword(data): Promise<void>; //$stack-link-to:#currentuserupdatepassworddata\n  getAuthHeaders(): Promise<Record<string, string>>; //$stack-link-to:#currentusergetauthheaders\n  getAuthJson(): Promise<{ accessToken: string | null }>; //$stack-link-to:#currentusergetauthjson\n  signOut([options]): Promise<void>; //$stack-link-to:#currentusersignoutoptions\n  delete(): Promise<void>; //$stack-link-to:#currentuserdelete\n\n  getTeam(id): Promise<Team | null>; //$stack-link-to:#currentusergetteamid\n  // NEXT_LINE_PLATFORM react-like\n   ⤷ useTeam(id): Team | null; //$stack-link-to:#currentuseruseteamid\n  listTeams(): Promise<Team[]>; //$stack-link-to:#currentuserlistteams\n  // NEXT_LINE_PLATFORM react-like\n   ⤷ useTeams(): Team[]; //$stack-link-to:#currentuseruseteams\n  setSelectedTeam(team): Promise<void>; //$stack-link-to:#currentusersetselectedteamteam\n  createTeam(data): Promise<Team>; //$stack-link-to:#currentusercreateteamdata\n  leaveTeam(team): Promise<void>; //$stack-link-to:#currentuserleaveteamteam\n  getTeamProfile(team): Promise<EditableTeamMemberProfile>; //$stack-link-to:#currentusergetteamprofileteam\n  // NEXT_LINE_PLATFORM react-like\n   ⤷ useTeamProfile(team): EditableTeamMemberProfile; //$stack-link-to:#currentuseruseteamprofileteam\n\n  hasPermission(scope, permissionId): Promise<boolean>; //$stack-link-to:#currentuserhaspermissionscope-permissionid\n  getPermission(scope, permissionId[, options]): Promise<TeamPermission | null>; //$stack-link-to:#currentusergetpermissionscope-permissionid-options\n  // NEXT_LINE_PLATFORM react-like\n   ⤷ usePermission(scope, permissionId[, options]): TeamPermission | null; //$stack-link-to:#currentuserusepermissionscope-permissionid-options\n  listPermissions(scope[, options]): Promise<TeamPermission[]>; //$stack-link-to:#currentuserlistpermissionsscope-options\n  // NEXT_LINE_PLATFORM react-like\n   ⤷ usePermissions(scope[, options]): TeamPermission[]; //$stack-link-to:#currentuserusepermissionsscope-options\n\n  listContactChannels(): Promise<ContactChannel[]>; //$stack-link-to:#currentuserlistcontactchannels\n  // NEXT_LINE_PLATFORM react-like\n   ⤷ useContactChannels(): ContactChannel[]; //$stack-link-to:#currentuserusecontactchannels\n};\n```\n\n----------------------------------------\n\nTITLE: Custom Profile Page with Server Components\nDESCRIPTION: This code implements a user profile page as a Server Component. It displays the same information as the client version but uses server-side data fetching and link-based navigation instead of client-side methods.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/getting-started/users.mdx#2025-04-22_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport { stackServerApp } from \"@/stack\";\nimport { UserButton } from \"@stackframe/stack\";\n\nexport default async function Page() {\n  const user = await stackServerApp.getUser();\n  return (\n    <div>\n      {user ? (\n        <div>\n          <UserButton />\n          <p>Welcome, {user.displayName ?? \"unnamed user\"}</p>\n          <p>Your e-mail: {user.primaryEmail}</p>\n          <p><a href={stackServerApp.urls.signOut}>Sign Out</a></p>\n        </div>\n      ) : (\n        <div>\n          <p>You are not logged in</p>\n          <p><a href={stackServerApp.urls.signIn}>Sign in</a></p>\n          <p><a href={stackServerApp.urls.signUp}>Sign up</a></p>\n        </div>\n      )}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Forgot Password Form with Error Handling in React\nDESCRIPTION: This snippet shows a custom implementation of a forgot password form using React hooks and Stack Auth. It includes email validation, error handling, and success messaging. The form uses the app.sendForgotPasswordEmail method to initiate the password reset process.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/customization/page-examples/forgot-password.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n'use client';\n\nimport { useStackApp } from \"@stackframe/stack\";\nimport { useState } from \"react\";\n\nexport default function CustomForgotPasswordForm() {\n  const [email, setEmail] = useState('');\n  const [error, setError] = useState('');\n  const [message, setMessage] = useState('');\n  const app = useStackApp();\n\n  const onSubmit = async () => {\n    if (!email) {\n      setError('Please enter your email address');\n      return;\n    }\n    \n    try {\n      const result = await app.sendForgotPasswordEmail(email);\n      if (result?.status === 'error') {\n        if (result.error.code === 'user_not_found') {\n          // For security reasons, don't reveal if a user exists or not\n          setMessage('If an account exists with this email, a password reset link has been sent.');\n        } else {\n          setError(`Error: ${result.error.message}`);\n        }\n      } else {\n        setMessage('Password reset email sent! Please check your inbox.');\n      }\n    } catch (err) {\n      setError(`An unexpected error occurred: ${err.message}`);\n    }\n  };\n  \n  return (\n    <form onSubmit={(e) => { e.preventDefault(); onSubmit(); }}>\n      {error && <div>{error}</div>}\n      {message ? (\n        <div>{message}</div>\n      ) : (\n        <>\n          <input\n            type='email'\n            placeholder=\"email@example.com\"\n            value={email}\n            onChange={(e) => setEmail(e.target.value)}\n          />\n          <button type='submit'>Reset Password</button>\n        </>\n      )}\n    </form>\n  ); \n}\n```\n\n----------------------------------------\n\nTITLE: Basic SelectedTeamSwitcher Implementation in JSX\nDESCRIPTION: Simple implementation of the SelectedTeamSwitcher component for the current team method.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/concepts/team-selection.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { SelectedTeamSwitcher } from \"@stackframe/stack\";\n\nexport function MyPage() {\n  return (\n    <div>\n      <SelectedTeamSwitcher/>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Stack Auth Client App in React\nDESCRIPTION: Creates a new Stack Auth client app instance with project configuration and React Router integration.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/getting-started/setup.mdx#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { StackClientApp } from \"@stackframe/react\";\nimport { useNavigate } from \"react-router-dom\";\n\nexport const stackClientApp = new StackClientApp({\n  // You should store these in environment variables based on your project setup\n  projectId: \"your-project-id\",\n  publishableClientKey: \"your-publishable-client-key\",\n  tokenStore: \"cookie\",\n  redirectMethod: {\n    useNavigate,\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Building a Custom Password Reset Form with Stack Auth API in React\nDESCRIPTION: A complete custom implementation of a password reset form that uses the Stack Auth API directly. This approach provides full control over the UI, validation logic, and error handling while maintaining the security of the password reset process.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/customization/page-examples/password-reset.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n'use client';\n\nimport { useStackApp } from \"@stackframe/stack\";\nimport { useState } from \"react\";\n\nexport default function CustomPasswordResetForm({ code }: { code: string }) {\n  const [password, setPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState(false);\n  const app = useStackApp();\n\n  const onSubmit = async () => {\n    if (password !== confirmPassword) {\n      setError('Passwords do not match');\n      return;\n    }\n\n    try {\n      const result = await app.resetPassword({ password, code });\n      if (result.status === 'error') {\n        setError('Failed to reset password');\n        return;\n      }\n      setSuccess(true);\n    } catch (err) {\n      setError(`An unexpected error occurred: ${err.message}`);\n    }\n  };\n\n  if (success) {\n    return <div>Password successfully reset!</div>;\n  }\n\n  return (\n    <form onSubmit={(e) => { e.preventDefault(); onSubmit(); }}>\n      {error && <div>{error}</div>}\n      <div>\n        <label htmlFor=\"password\">New Password</label>\n        <input\n          id=\"password\"\n          type=\"password\"\n          value={password}\n          onChange={(e) => setPassword(e.target.value)}\n        />\n      </div>\n      <div>\n        <label htmlFor=\"confirm\">Confirm Password</label>\n        <input\n          id=\"confirm\"\n          type=\"password\"\n          value={confirmPassword}\n          onChange={(e) => setConfirmPassword(e.target.value)}\n        />\n      </div>\n      <button type=\"submit\">Reset Password</button>\n    </form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: JWT Verification Using Node.js\nDESCRIPTION: Demonstrates JWT token verification using the jose library to validate user authentication tokens locally without making external requests.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/concepts/backend-integration.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// you need to install the jose library if it's not already installed\nimport * as jose from 'jose';\n\n// you can cache this and refresh it with a low frequency\nconst jwks = jose.createRemoteJWKSet(new URL(\"https://api.stack-auth.com/api/v1/projects/<your-project-id>/.well-known/jwks.json\"));\n\nconst accessToken = 'access token from the headers';\n\ntry {\n  const { payload } = await jose.jwtVerify(accessToken, jwks);\n  console.log('Authenticated user with ID:', payload.sub);\n} catch (error) {\n  console.error(error);\n  console.log('Invalid user');\n}\n```\n\n----------------------------------------\n\nTITLE: Protecting a Server Component Page\nDESCRIPTION: This snippet shows how to protect a Server Component by calling stackServerApp.getUser() with the 'redirect' option, ensuring the component is only accessible to authenticated users.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/getting-started/users.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { stackServerApp } from \"@/stack\";\n\nexport default async function MyProtectedServerComponent() {\n  await stackServerApp.getUser({ or: 'redirect' });\n  return <h1>You can only see this if you are logged in</h1>\n}\n```\n\n----------------------------------------\n\nTITLE: Checking User Permission in Client Component\nDESCRIPTION: This snippet demonstrates how to check if a user has a specific permission within a team using the usePermission hook in a client-side React component.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/concepts/permissions.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\";\nimport { useUser } from \"@stackframe/stack\";\n\nexport function CheckUserPermission() {\n  const user = useUser({ or: 'redirect' });\n  const team = user.useTeam('some-team-id');\n  const permission = user.usePermission(team, 'read');\n\n  // Don't rely on client-side permission checks for business logic.\n  return (\n    <div>\n      {permission ? 'You have the read permission' : 'You shall not pass'}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Client-Side Token Retrieval and Request Authentication in TypeScript\nDESCRIPTION: Shows how to retrieve an access token from the user object and send it in request headers to authenticate API calls to your server.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/concepts/backend-integration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst { accessToken } = await user.getAuthJson();\nconst response = await fetch('/api/users/me', {\n  headers: {\n    'x-stack-access-token': accessToken,\n  },\n  // your other options and parameters\n});\n```\n\n----------------------------------------\n\nTITLE: User Creation Function Signature\nDESCRIPTION: TypeScript function signature for creating a user with various authentication options including email and OTP settings.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/objects/stack-app.mdx#2025-04-22_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function createUser(options: {\n  primaryEmail?: string;\n  primaryEmailVerified?: boolean;\n  primaryEmailAuthEnabled?: boolean;\n  password?: string;\n  otpAuthEnabled?: boolean;\n  displayName?: string;\n}): Promise<ServerUser>;\n```\n\n----------------------------------------\n\nTITLE: Updating User Display Name with Stack Auth\nDESCRIPTION: Example showing how to update a user's display name using Stack Auth's user.update method. Updates are automatically synced between frontend and backend.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/overview.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<button onClick={async () => await user.update({ displayName: \"New Name\" })}>\n  Change Name\n</button>\n```\n\n----------------------------------------\n\nTITLE: Creating a Team with User Object\nDESCRIPTION: Shows how to create a team using the createTeam function on the User object. The user will be added to the team with default creator permissions.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/concepts/orgs-and-teams.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst team = await user.createTeam({\n  displayName: 'New Team',\n});\n```\n\n----------------------------------------\n\nTITLE: Handling User Authentication State in TypeScript\nDESCRIPTION: This TypeScript snippet manages the user authentication state, updates the UI based on the user's login status, and handles the sign-out functionality.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/getting-started/example-pages.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { stackClientApp } from \"./stack\";\n\nconst updateUIState = (user: any | null) => {\n  const authOptions = document.getElementById(\"authOptions\");\n  const userInfo = document.getElementById(\"userInfo\");\n  const userEmailSpan = document.getElementById(\"userEmail\");\n\n  if (user) {\n    if (authOptions) authOptions.style.display = \"none\";\n    if (userInfo) userInfo.style.display = \"block\";\n    if (userEmailSpan) userEmailSpan.textContent = user.primaryEmail || \"\";\n  } else {\n    if (authOptions) authOptions.style.display = \"block\";\n    if (userInfo) userInfo.style.display = \"none\";\n  }\n};\n\n// Check if user is already signed in\nstackClientApp.getUser().then(updateUIState);\n\n// Handle Sign Out\ndocument.getElementById(\"signOut\")?.addEventListener(\"click\", async () => {\n  const user = await stackClientApp.getUser();\n  if (user) {\n    await user.signOut();\n    updateUIState(null);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Team Object Structure in TypeScript\nDESCRIPTION: TypeScript type definition for the Team object, outlining its properties and methods including id, displayName, profileImageUrl, and functions for team management.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/types/team.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype Team = {\n  id: string;\n  displayName: string;\n  profileImageUrl: string | null;\n  clientMetadata: Json;\n  clientReadOnlyMetadata: Json;\n\n  update(data): Promise<void>;\n  inviteUser(options): Promise<void>;\n  listUsers(): Promise<TeamUser[]>;\n  useUsers(): TeamUser[];\n  listInvitations(): Promise<{ ... }[]>;\n  useInvitations(): { ... }[];\n};\n```\n\n----------------------------------------\n\nTITLE: Connecting with Google OAuth in React using Stack\nDESCRIPTION: This code snippet demonstrates how to connect a user's account with Google using Stack's OAuth support in a React component. It uses the useUser and useConnectedAccount hooks to handle user authentication and OAuth connection.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/concepts/oauth.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n'use client';\n\nimport { useUser } from \"@stackframe/stack\";\n\nexport default function Page() {\n  const user = useUser({ or: 'redirect' });\n  // Redirects to Google authorization if not already connected\n  const account = user.useConnectedAccount('google', { or: 'redirect' });\n  // Account is always defined because of the redirect\n  return <div>Google account connected</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing UserButton Component in Next.js\nDESCRIPTION: Demonstrates how to implement the UserButton component that displays a user avatar with a dropdown menu for user settings. The component is imported from @stackframe/stack package.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/getting-started/components.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { UserButton } from '@stackframe/stack';\n\nexport default function Page() {\n  return (\n    <UserButton />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Create Team Example\nDESCRIPTION: Example showing how to create a new team with a display name and profile image URL.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/objects/stack-app.mdx#2025-04-22_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nconst team = await stackServerApp.createTeam({\n  displayName: \"New Team\",\n  profileImageUrl: \"https://example.com/profile.jpg\",\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Password Reset Component in React\nDESCRIPTION: This code snippet demonstrates how to use the PasswordReset component from the @stackframe/stack library. It creates a ResetPasswordPage component that renders the PasswordReset component with search parameters and full page display.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/components/password-reset.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { PasswordReset } from '@stackframe/stack';\n\nexport function ResetPasswordPage(props: { searchParams: Record<string, string> }) {\n  return (\n    <PasswordReset\n      searchParams={props.searchParams}\n      fullPage={true}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Team Information in TypeScript\nDESCRIPTION: Example of using the team.update() method to modify team details such as display name, profile image URL, and client metadata. Requires $update_team permission.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/types/team.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nawait team.update({\n  displayName: 'New Team Name',\n  profileImageUrl: 'https://example.com/profile.png',\n  clientMetadata: {\n    address: '123 Main St, Anytown, USA',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Password Sign-In Functionality in TypeScript\nDESCRIPTION: This TypeScript snippet handles the password sign-in functionality, including form submission, error handling, and redirection upon successful authentication.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/getting-started/example-pages.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { stackClientApp } from \"./stack\";\n\n// Check if user is already signed in\nstackClientApp.getUser().then((user) => {\n  if (user) {\n    window.location.href = \"/\";\n  }\n});\n\ndocument.getElementById(\"showSignUp\")?.addEventListener(\"click\", (e) => {\n  e.preventDefault();\n  document.getElementById(\"loginForm\")?.classList.add(\"hidden\");\n  document.getElementById(\"signUpForm\")?.classList.remove(\"hidden\");\n});\n\ndocument.getElementById(\"showSignIn\")?.addEventListener(\"click\", (e) => {\n  e.preventDefault();\n  document.getElementById(\"loginForm\")?.classList.remove(\"hidden\");\n  document.getElementById(\"signUpForm\")?.classList.add(\"hidden\");\n});\n\ndocument.getElementById(\"signIn\")?.addEventListener(\"click\", async () => {\n  const emailInput = document.getElementById(\"emailInput\") as HTMLInputElement;\n  const passwordInput = document.getElementById(\"passwordInput\") as HTMLInputElement;\n\n  const result = await stackClientApp.signInWithCredential({\n    email: emailInput.value,\n    password: passwordInput.value,\n  });\n\n  if (result.status === \"error\") {\n    alert(\"Sign in failed. Please check your email and password and try again.\");\n  } else {\n    window.location.href = \"/\";\n  }\n});\n\ndocument.getElementById(\"signUp\")?.addEventListener(\"click\", async () => {\n  const emailInput = document.getElementById(\"signUpEmail\") as HTMLInputElement;\n  const passwordInput = document.getElementById(\"signUpPassword\") as HTMLInputElement;\n\n  const result = await stackClientApp.signUpWithCredential({\n    email: emailInput.value,\n    password: passwordInput.value,\n  });\n\n  if (result.status === \"error\") {\n    alert(\"Sign up failed. Please try again.\");\n    return;\n  }\n\n  const signInResult = await stackClientApp.signInWithCredential({\n    email: emailInput.value,\n    password: passwordInput.value,\n  });\n\n  if (signInResult.status === \"error\") {\n    alert(\"Account created but sign in failed. Please sign in manually.\");\n  } else {\n    window.location.href = \"/\";\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using getAuthJson for RPC Authentication in TypeScript\nDESCRIPTION: Example of how to use the getAuthJson function to authenticate an RPC call, and how to handle the authentication on the server side.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/types/user.mdx#2025-04-22_snippet_43\n\nLANGUAGE: typescript\nCODE:\n```\n// client\nconst res = await rpcCall(rpcEndpoint, {\n  data: {\n    auth: await stackApp.getAuthJson(),\n  },\n});\n\n// server\nfunction handleRequest(data) {\n  const user = await stackServerApp.getUser({ tokenStore: data.auth });\n  return new Response(\"Welcome, \" + user.displayName);\n}\n```\n\n----------------------------------------\n\nTITLE: Signing Out with Redirect Link\nDESCRIPTION: This snippet demonstrates how to create a sign-out link that redirects to the sign-out handler URL. This approach works in Server Components where direct method calls aren't possible.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/getting-started/users.mdx#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { stackServerApp } from \"@/stack\";\n\nexport default async function SignOutLink() {\n  // stackServerApp.urls.signOut is equal to /handler/sign-out\n  return <a href={stackServerApp.urls.signOut}>Sign Out</a>;\n}\n```\n\n----------------------------------------\n\nTITLE: Granting User Permission Example in Stack Authentication (TypeScript)\nDESCRIPTION: Demonstrates how to use the grantPermission function to give a user a specific permission ('read_secret_info') for a team. The function returns a Promise that resolves when the permission is granted.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/types/user.mdx#2025-04-22_snippet_56\n\nLANGUAGE: typescript\nCODE:\n```\nawait serverUser.grantPermission(team, \"read_secret_info\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Prefetch Behavior for Stack Authentication in JSX\nDESCRIPTION: This code snippet defines a configuration option to control the automatic prefetching behavior of the Stack authentication system. Setting this option to true disables automatic prefetching of data from Stack's server when the app is constructed.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/snippets/stack-app-constructor-options-after-ssk.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ParamField path=\"noAutomaticPrefetch\" type=\"boolean\">\n  By default, the Stack app will automatically prefetch some data from Stack's server when this app is first constructed. Those network requests may be unnecessary if the app is never used or disposed of immediately. By setting this option to `true`, you can disable the prefetching behavior.\n</ParamField>\n```\n\n----------------------------------------\n\nTITLE: Updating User Data with user.update()\nDESCRIPTION: This snippet demonstrates how to update a user's attributes using the user.update() method. In this example, it changes the user's display name when a button is clicked.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/getting-started/users.mdx#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n'use client';\nimport { useUser } from \"@stackframe/stack\";\n\nexport default function MyClientComponent() {\n  const user = useUser();\n  return <button onClick={async () => await user.update({ displayName: \"New Name\" })}>\n    Change Name\n  </button>;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Teams in Server Component\nDESCRIPTION: Demonstrates how to list all teams a user belongs to and fetch a specific team on the server side using listTeams and getTeam methods.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/concepts/orgs-and-teams.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst user = await stackServerApp.getUser({ or: 'redirect' });\nconst allTeams = await user.listTeams();\nconst someTeam = await user.getTeam('some-team-id'); // May be null if the user is not a member of this team\n\nreturn (\n  <div>\n    {allTeams.map(team => (\n      <div key={team.id}>{team.displayName}</div>\n    ))}\n  </div>\n  <div>\n    {someTeam ? someTeam.displayName : 'Not a member of this team'}\n  </div>\n```\n\n----------------------------------------\n\nTITLE: Managing Client Metadata in Stack Auth - TSX\nDESCRIPTION: Demonstrates how to update and read client metadata that is accessible from both client and server side. This metadata type is suitable for non-sensitive information that needs to be readable and writable from both environments.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/concepts/custom-user-data.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nawait user.update({\n  clientMetadata: {\n    mailingAddress: \"123 Main St\",\n  },\n});\n\n// On the client:\nconst user = useUser();\nconsole.log(user.clientMetadata);\n```\n\n----------------------------------------\n\nTITLE: Building Custom OAuth Sign-In Button Using Stack Auth Low-Level Functions\nDESCRIPTION: This snippet demonstrates how to create a custom OAuth sign-in button using Stack Auth's low-level functions. It uses the useStackApp hook to access the signInWithOAuth method for Google authentication.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/customization/custom-pages.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n'use client';\nimport { useStackApp } from \"@stackframe/stack\";\n\nexport default function CustomOAuthSignIn() {\n  const app = useStackApp();\n\n  return (\n    <div>\n      <h1>My Custom Sign In page</h1>\n      <button onClick={async () => {\n        // This will redirect to the OAuth provider's login page.\n        await app.signInWithOAuth('google');\n      }}>\n        Sign In with Google\n      </button>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: StackClientApp Type Definition\nDESCRIPTION: TypeScript interface definition showing the available methods and hooks on the StackClientApp object.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/objects/stack-app.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype StackClientApp = {\n  new(options): StackClientApp;\n  getUser([options]): Promise<User>;\n  useUser([options]): User;\n  getProject(): Promise<Project>;\n  useProject(): Project;\n  signInWithOAuth(provider): void;\n  signInWithCredential([options]): Promise<...>;\n  signUpWithCredential([options]): Promise<...>;\n  sendForgotPasswordEmail(email): Promise<...>;\n  sendMagicLinkEmail(email): Promise<...>;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing ForgotPassword Component in React TSX\nDESCRIPTION: Example showing how to import and use the ForgotPassword component with the fullPage prop set to true. The component is part of the @stackframe/stack package and can be configured for full-page display.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/components/forgot-password.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ForgotPassword } from '@stackframe/stack';\n\nexport const MyForgotPassword = () => {\n  return <ForgotPassword fullPage={true} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating a Team\nDESCRIPTION: Shows how to update a team's properties using the update function on the Team object. On the client side, this requires the $update_team permission.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/concepts/orgs-and-teams.mdx#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nawait team.update({\n  displayName: 'New Name',\n});\n```\n\n----------------------------------------\n\nTITLE: Listing Team Users in Server Component\nDESCRIPTION: Demonstrates how to list all users in a team with the listUsers function on the Team object in a server component.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/concepts/orgs-and-teams.mdx#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n// ... retrieve the team\n\nconst users = await team.listUsers();\n\nreturn (\n  <div>\n    {users.map(user => (\n      <div key={user.id}>{user.teamProfile.displayName}</div>\n    ))}\n  </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Forgot Password Route in Stack Auth\nDESCRIPTION: This code snippet demonstrates how to configure Stack Auth to use a custom route for the forgot password page. It sets the forgotPassword URL in the StackServerApp configuration.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/customization/page-examples/forgot-password.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nexport const stackServerApp = new StackServerApp({\n  // ...\n  urls: {\n    forgotPassword: '/forgot-password',\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing the SignIn Component in React\nDESCRIPTION: Example of how to import and use the SignIn component from @stackframe/stack with various configurations. The example shows setting fullPage mode, enabling automatic redirect, setting the first active tab to password, and adding extra information with a link to terms.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/components/sign-in.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { SignIn } from '@stackframe/stack';\n\nexport default function Page() {\n  return (\n    <div>\n      <h1>Sign In</h1>\n      <SignIn\n        fullPage={true}\n        automaticRedirect={true}\n        firstTab='password'\n        extraInfo={<>When signing in, you agree to our <a href=\"/terms\">Terms</a></>}\n      />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Granting and Revoking User Permissions\nDESCRIPTION: These snippets demonstrate how to grant and revoke permissions for a user within a team using the grantPermission and revokePermission methods.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/concepts/permissions.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nconst team = await stackServerApp.getTeam('teamId');\nconst user = await stackServerApp.getUser();\nawait user.grantPermission(team, 'read');\n\nconst team = await stackServerApp.getTeam('teamId');\nconst user = await stackServerApp.getUser();\nawait user.revokePermission(team, 'read');\n```\n\n----------------------------------------\n\nTITLE: Using User Permissions in React with TypeScript\nDESCRIPTION: This React hook lists all permissions a user has for a specified team. It takes a team scope and optional recursive flag as parameters.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/types/user.mdx#2025-04-22_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function usePermissions(scope: Team, options?: { recursive?: boolean }): TeamPermission[];\n```\n\n----------------------------------------\n\nTITLE: Accessing StackClientApp with useStackApp Hook in React\nDESCRIPTION: This snippet demonstrates how to use the useStackApp hook to access the StackClientApp object within a React component. The hook retrieves the StackClientApp instance provided by the StackProvider component higher in the component tree, allowing access to properties like authentication URLs.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/hooks/use-stack-app.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useStackApp } from \"@stackframe/stack\";\n\nfunction MyComponent() {\n  const stackApp = useStackApp();\n  return <div>Sign In URL: {stackApp.urls.signIn}</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating User Details in Stack Authentication SDK\nDESCRIPTION: Example showing how to update user details using the update method, including changing the display name and adding client metadata for the user's address.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/types/user.mdx#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nawait user.update({\n  displayName: \"New Display Name\",\n  clientMetadata: {\n    address: \"123 Main St\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Team with ServerApp Object\nDESCRIPTION: Demonstrates how to create a team on the server without adding a specific user, using the createTeam function on the ServerApp object.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/concepts/orgs-and-teams.mdx#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nconst team = await stackServerApp.createTeam({\n  displayName: 'New Team',\n});\n```\n\n----------------------------------------\n\nTITLE: Granting and Revoking Global Permissions\nDESCRIPTION: These snippets show how to grant and revoke global project permissions for a user using the grantPermission and revokePermission methods.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/concepts/permissions.mdx#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nconst user = await stackServerApp.getUser();\nawait user.grantPermission('access_admin_dashboard');\n\nconst user = await stackServerApp.getUser();\nawait user.revokePermission('access_admin_dashboard');\n```\n\n----------------------------------------\n\nTITLE: Implementing OAuth Authentication Logic in TypeScript\nDESCRIPTION: This TypeScript code handles the OAuth authentication process. It manages Google sign-in, handles OAuth redirects, and processes the authentication response using the Stack authentication client.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/getting-started/example-pages.mdx#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { stackClientApp } from \"./stack\";\n\n// Check if user is already signed in\nstackClientApp.getUser().then((user) => {\n  if (user) {\n    window.location.href = \"/\";\n  }\n});\n\n// Handle Google Sign In\ndocument.getElementById(\"googleSignIn\")?.addEventListener(\"click\", async () => {\n  try {\n    await stackClientApp.signInWithOAuth('google');\n  } catch (error) {\n    console.error(\"Google sign in failed:\", error);\n    alert(\"Failed to initialize Google sign in\");\n  }\n});\n\n// Handle OAuth redirect\nwindow.addEventListener(\"load\", async () => {\n  try {\n    const params = new URLSearchParams(window.location.search);\n    const code = params.get(\"code\");\n    const state = params.get(\"state\");\n    \n    if (code && state) {\n      const user = await stackClientApp.callOAuthCallback();\n      if (user) {\n        window.location.href = \"/\";\n      }\n    }\n  } catch (error) {\n    console.error(\"Failed to handle OAuth redirect:\", error);\n    alert(\"Authentication failed. Please try again.\");\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Stack Auth Theme in Next.js Layout\nDESCRIPTION: This code snippet demonstrates how to define a custom theme object with different colors for light and dark modes, and how to apply it using the StackTheme component in a Next.js layout file. It shows the structure for overriding default styles to match brand identity.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/customization/custom-styles.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst theme = {\n  light: {\n    primary: 'red',\n  },\n  dark: {\n    primary: '#00FF00',\n  },\n  radius: '8px',\n}\n\n// ...\n\n<StackTheme theme={theme}>\n  {/* children */}\n</StackTheme>\n```\n\n----------------------------------------\n\nTITLE: Implementing OAuthButtonGroup Component in React/TSX\nDESCRIPTION: This example demonstrates how to use the OAuthButtonGroup component from the @stackframe/stack package. It renders a sign-in form with OAuth buttons for enabled providers.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/components/oauth-button-group.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { OAuthButtonGroup } from '@stackframe/stack';\n\nexport default function Page() {\n  return (\n    <div>\n      <h1>Sign In</h1>\n      <OAuthButtonGroup type='sign-in' />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom OAuth Sign-In in React\nDESCRIPTION: Creates a custom OAuth sign-in page with a Google sign-in button using the useStackApp hook. When clicked, the button initiates the OAuth flow with Google.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/customization/page-examples/sign-in.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n'use client';\nimport { useStackApp } from \"@stackframe/stack\";\n\nexport default function CustomOAuthSignIn() {\n  const app = useStackApp();\n\n  return (\n    <div>\n      <h1>My Custom Sign In page</h1>\n      <button onClick={async () => {\n        // This will redirect to the OAuth provider's login page.\n        await app.signInWithOAuth('google');\n      }}>\n        Sign In with Google\n      </button>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: List All Teams Example\nDESCRIPTION: Example demonstrating how to list all teams in the current project.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/objects/stack-app.mdx#2025-04-22_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nconst teams = await stackServerApp.listTeams();\nconsole.log(teams);\n```\n\n----------------------------------------\n\nTITLE: Updating User Details Example in Stack Authentication (TypeScript)\nDESCRIPTION: Demonstrates how to use the update function to modify user details on the server. This example updates the display name, password, and adds a confidential note to the server metadata.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/types/user.mdx#2025-04-22_snippet_52\n\nLANGUAGE: typescript\nCODE:\n```\nawait serverUser.update({\n  displayName: \"Updated Display Name\",\n  password: \"newSecurePassword\",\n  serverMetadata: {\n    internalNote: \"Confidential information\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Revoking User Permission Example in Stack Authentication (TypeScript)\nDESCRIPTION: Shows how to use the revokePermission function to remove a specific permission ('read_secret_info') from a user for a team. The function returns a Promise that resolves when the permission is revoked.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/types/user.mdx#2025-04-22_snippet_58\n\nLANGUAGE: typescript\nCODE:\n```\nawait serverUser.revokePermission(team, \"read_secret_info\");\n```\n\n----------------------------------------\n\nTITLE: Sending Verification Email for ContactChannel\nDESCRIPTION: This example shows how to send a verification email for a contact channel. It uses the sendVerificationEmail() method of the ContactChannel type.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/types/contact-channel.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nawait contactChannel.sendVerificationEmail();\n```\n\n----------------------------------------\n\nTITLE: Inviting User to a Team\nDESCRIPTION: Shows how to invite a user to a team using the inviteUser function on the Team object. The user receives an email with a join link. Requires $invite_members permission on client side.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/concepts/orgs-and-teams.mdx#2025-04-22_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nawait team.inviteUser(email);\n```\n\n----------------------------------------\n\nTITLE: Sending Magic Link Email\nDESCRIPTION: Shows how to use the sendMagicLinkEmail method to send a magic link/OTP sign-in email to a user.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/objects/stack-app.mdx#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nconst result = await stackClientApp.sendMagicLinkEmail(\"test@example.com\");\n```\n\n----------------------------------------\n\nTITLE: Retrieving and Using OAuth Access Token in React\nDESCRIPTION: This code example illustrates how to obtain an OAuth access token and use it to make an authenticated API request. It uses the useAccessToken hook to get the token and then sends a request to the Google Drive API using the token for authorization.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/concepts/oauth.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n'use client';\n\nimport { useEffect, useState } from 'react';\nimport { useUser } from \"@stackframe/stack\";\n\nexport default function Page() {\n  const user = useUser({ or: 'redirect' });\n  const account = user.useConnectedAccount('google', { or: 'redirect', scopes: ['https://www.googleapis.com/auth/drive.readonly'] });\n  const { accessToken } = account.useAccessToken();\n  const [response, setResponse] = useState<any>();\n\n  useEffect(() => {\n    fetch('https://www.googleapis.com/drive/v3/files', {\n      headers: { Authorization: `Bearer ${accessToken}` }\n    })\n      .then((res) => res.json())\n      .then((data) => setResponse(data))\n      .catch((err) => console.error(err));\n  }, [accessToken]);\n\n  return <div>{response ? JSON.stringify(response) : 'Loading...'}</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Team for a User in TypeScript\nDESCRIPTION: This function creates a new team for the user. It takes an object with team data as a parameter and returns a Promise that resolves to the created Team object.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/types/user.mdx#2025-04-22_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function createTeam(data: {\n  displayName: string;\n  profileImageUrl?: string | null;\n}): Promise<Team>;\n```\n\n----------------------------------------\n\nTITLE: Updating Server Contact Channel in TypeScript\nDESCRIPTION: This code snippet shows how to update a server contact channel using the 'update' method. It sets a new email address, enables its use for authentication, and marks it as verified.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/types/contact-channel.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nawait serverContactChannel.update({\n  value: \"new-email@example.com\",\n  usedForAuth: true,\n  isVerified: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Listing Team Members in TypeScript\nDESCRIPTION: Example of using the team.listUsers() method to retrieve a list of users in the team. Requires $read_members permission.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/types/team.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = await team.listUsers();\nusers.forEach(user => {\n  console.log(user.id, user.teamProfile.displayName);\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing User Update Method in Stack Authentication SDK\nDESCRIPTION: Function signature for the update method in the CurrentUser object, which updates user information such as display name, client metadata, selected team, and profile image URL.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/types/user.mdx#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function update(data: {\n  displayName?: string;\n  clientMetadata?: Json;\n  selectedTeamId?: string | null;\n  profileImageUrl?: string | null;\n}): Promise<void>;\n```\n\n----------------------------------------\n\nTITLE: Making Authenticated Requests to Stack Auth API using HTTP\nDESCRIPTION: Example of how to make an authenticated request to the Stack Auth API using cURL. It demonstrates the required authentication headers including access type, project ID, API keys, and user access token.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/rest-api/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: http\nCODE:\n```\ncurl https://api.stack-auth.com/api/v1/ \\\n     -H \"X-Stack-Access-Type: <either 'client' or 'server'>\" \\\n     -H \"X-Stack-Project-Id: <your project UUID>\" \\\n     -H \"X-Stack-Publishable-Client-Key: pck_<your publishable client key>\" \\\n     -H \"X-Stack-Secret-Server-Key: ssk_<your secret server key>\" \\\n     -H \"X-Stack-Access-Token: <the current user's access token>\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Teams in Client Component\nDESCRIPTION: Shows how to list all teams a user belongs to and fetch a specific team on the client side using the useTeams and useTeam hooks.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/concepts/orgs-and-teams.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst user = useUser({ or: 'redirect' });\nconst allTeams = user.useTeams();\nconst someTeam = user.useTeam('some-team-id'); // May be null if the user is not a member of this team\n\nreturn (\n  <div>\n    {allTeams.map(team => (\n      <div key={team.id}>{team.displayName}</div>\n    ))}\n  </div>\n  <div>\n    {someTeam ? someTeam.displayName : 'Not a member of this team'}\n  </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Onboarding Page with React and Stack Auth\nDESCRIPTION: Basic implementation of an onboarding page component that collects user address and stores it in metadata. Uses Stack Auth's user.update() method to save the data and mark onboarding as complete.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/concepts/user-onboarding.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function OnboardingPage() {\n  const user = useUser();\n  const router = useRouter();\n  const [address, setAddress] = useState('');\n\n\n  return <>\n    <input \n      type=\"text\" \n      value={address} \n      onChange={(e) => setAddress(e.target.value)} \n    />\n\n    <button onClick={async () => {\n      await user.update({\n        clientMetadata: {\n          onboarded: true,\n          address,\n        },\n      });\n      router.push('/');\n    }}>\n      Submit\n    </button>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SignUp Component in React with TypeScript\nDESCRIPTION: This example demonstrates how to use the SignUp component from the @stackframe/stack library. It shows how to set various props like fullPage, automaticRedirect, firstTab, and extraInfo to customize the sign-up page.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/components/sign-up.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { SignUp } from '@stackframe/stack';\n\nexport default function Page() {\n  return (\n    <div>\n      <h1>Sign Up</h1>\n      <SignUp\n        fullPage={true}\n        automaticRedirect={true}\n        firstTab='password'\n        extraInfo={<>By signing up, you agree to our <a href=\"/terms\">Terms</a></>}\n      />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Adding User to Team Example\nDESCRIPTION: Example demonstrating how to add a user to a team using their user ID.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/types/team.mdx#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nawait team.addUser('user_id_123');\n```\n\n----------------------------------------\n\nTITLE: Create User with Magic Link Authentication\nDESCRIPTION: Example demonstrating user creation with magic link authentication using email and OTP.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/objects/stack-app.mdx#2025-04-22_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await stackServerApp.createUser({\n  primaryEmail: \"test@example.com\",\n  primaryEmailVerified: true,\n  primaryEmailAuthEnabled: true,\n  otpAuthEnabled: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Removing User from Team Example\nDESCRIPTION: Example showing how to remove a user from a team using their user ID.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/types/team.mdx#2025-04-22_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nawait team.removeUser('user_id_123');\n```\n\n----------------------------------------\n\nTITLE: Getting a Team by ID Example in TypeScript\nDESCRIPTION: This example demonstrates how to use the getTeam function to retrieve a team by its ID asynchronously.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/types/user.mdx#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nconst team = await user.getTeam(\"teamId\");\n```\n\n----------------------------------------\n\nTITLE: Checking User Permission for a Team in TypeScript\nDESCRIPTION: This function checks if the user has a specific permission for a team. It takes a Team object and a permission ID as parameters and returns a Promise that resolves to a boolean.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/types/user.mdx#2025-04-22_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function hasPermission(scope: Team, permissionId: string): Promise<boolean>;\n```\n\n----------------------------------------\n\nTITLE: Listing Server Team Members Example\nDESCRIPTION: Example showing how to list and iterate through server team members, displaying user ID and display name for each member.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/types/team.mdx#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = await team.listUsers();\nusers.forEach(user => {\n  console.log(user.id, user.teamProfile.displayName);\n});\n```\n\n----------------------------------------\n\nTITLE: Checking Team Permissions in Client Component\nDESCRIPTION: Demonstrates how to check if a user has a specific permission within a team on the client side before performing actions. The example shows checking for the '$invite_members' permission.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/concepts/orgs-and-teams.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst user = useUser({ or: 'redirect' });\nconst team = user.useTeam('some-team-id');\n\nif (!team) {\n  return <div>Team not found</div>;\n}\n\nconst hasPermission = user.usePermission(team, '$invite_members');\n\nif (!hasPermission) {\n  return <div>No permission</div>;\n}\n\n// Perform corresponding action like inviting a user\n```\n\n----------------------------------------\n\nTITLE: Retrieving User's Team Profile in TypeScript\nDESCRIPTION: This function retrieves the user's profile within a specific team. It takes a Team object as a parameter and returns a Promise that resolves to an EditableTeamMemberProfile object.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/types/user.mdx#2025-04-22_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function getTeamProfile(team: Team): Promise<EditableTeamMemberProfile>;\n```\n\n----------------------------------------\n\nTITLE: Creating a New Team Example in TypeScript\nDESCRIPTION: This example shows how to use the createTeam function to create a new team with a display name and profile image URL.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/types/user.mdx#2025-04-22_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nconst team = await user.createTeam({\n  displayName: \"New Team\",\n  profileImageUrl: \"https://example.com/profile.jpg\",\n});\n```\n\n----------------------------------------\n\nTITLE: Checking User Permission in Server Component\nDESCRIPTION: This code shows how to perform a server-side check for user permissions within a team using the getPermission method in a Next.js server component.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/concepts/permissions.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { stackServerApp } from \"@/stack\";\n\nexport default async function CheckUserPermission() {\n  const user = await stackServerApp.getUser({ or: 'redirect' });\n  const team = await stackServerApp.getTeam('some-team-id');\n  const permission = await user.getPermission(team, 'read');\n\n  // This is a server-side check, so it's secure.\n  return (\n    <div>\n      {permission ? 'You have the read permission' : 'You shall not pass'}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring URL Routes for Stack Authentication in JSX\nDESCRIPTION: This code snippet defines the URL structure for various authentication-related pages in a Stack application. It includes routes for sign-in, sign-up, email verification, password reset, and account settings.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/snippets/stack-app-constructor-options-after-ssk.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ParamField path=\"urls\" type=\"object\">\n  The URLs that Stack uses to route and redirect.\n\n  <Accordion title={<span className=\"accordion-show-properties\" />}>\n    <ParamField path=\"home\" type=\"string\">\n      The URL of the home page.\n    </ParamField>\n    <ParamField path=\"signIn\" type=\"string\">\n      The URL of the sign-in page.\n    </ParamField>\n    <ParamField path=\"afterSignIn\" type=\"string\">\n      The URL that the user will be redirected to after successful signing in.\n    </ParamField>\n    <ParamField path=\"signUp\" type=\"string\">\n      The URL of the sign-up page.\n    </ParamField>\n    <ParamField path=\"afterSignUp\" type=\"string\">\n      The URL that the user will be redirected to after successful signing up.\n    </ParamField>\n    <ParamField path=\"afterSignOut\" type=\"string\">\n      The URL that the user will be redirected to after successful signing out.\n    </ParamField>\n    <ParamField path=\"emailVerification\" type=\"string\">\n      The URL of the email verification page.\n    </ParamField>\n    <ParamField path=\"passwordReset\" type=\"string\">\n      The URL of the password reset page.\n    </ParamField>\n    <ParamField path=\"forgotPassword\" type=\"string\">\n      The URL of the forgot password page.\n    </ParamField>\n    <ParamField path=\"accountSettings\" type=\"string\">\n      The URL of the account settings page.\n    </ParamField>\n    <ParamField path=\"handler\" type=\"string\">\n      The URL of the handler root. \n    </ParamField>\n  </Accordion>\n</ParamField>\n```\n\n----------------------------------------\n\nTITLE: Removing User from a Team\nDESCRIPTION: Shows how to remove a user from a team with the removeUser function on the Team object. On the client side, requires the $remove_members permission.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/concepts/orgs-and-teams.mdx#2025-04-22_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nawait team.removeUser(user.id);\n```\n\n----------------------------------------\n\nTITLE: Teams Overview Page Implementation\nDESCRIPTION: Implementation of a page displaying all teams with navigation functionality and most recent team access.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/concepts/team-selection.mdx#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n\"use client\";\n\nimport { useRouter } from \"next/navigation\";\nimport { useUser } from \"@stackframe/stack\";\n\nexport default function TeamsPage() {\n  const user = useUser({ or: 'redirect' });\n  const teams = user.useTeams();\n  const router = useRouter();\n  const selectedTeam = user.selectedTeam;\n\n  return (\n    <div>\n      {selectedTeam && \n        <button onClick={() => router.push(`/team/${selectedTeam.id}`)}>Most recent team</button>}\n\n      <h2>All Teams</h2>\n      {teams.map(team => (\n        <button key={team.id} onClick={() => router.push(`/team/${team.id}`)}>Open {team.displayName}</button>\n      ))}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Stack Auth Handler Page\nDESCRIPTION: Next.js page component that handles authentication routes like sign-in, sign-up, and password reset.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/getting-started/setup.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { StackHandler } from \"@stackframe/stack\";\nimport { stackServerApp } from \"@/stack\";\n\nexport default function Handler(props: unknown) {\n  return <StackHandler fullPage app={stackServerApp} routeProps={props} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Listing All Teams Example in TypeScript\nDESCRIPTION: This example demonstrates how to use the listTeams function to retrieve all teams the user is a member of asynchronously.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/types/user.mdx#2025-04-22_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nconst teams = await user.listTeams();\n```\n\n----------------------------------------\n\nTITLE: Custom OAuth Sign-In Implementation with Stack Auth\nDESCRIPTION: Example demonstrating how to create a custom OAuth sign-in component using Stack Auth's low-level signInWithOAuth function for Google authentication.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/overview.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function CustomOAuthSignIn() {\n  const app = useStackApp();\n  return (\n    <div>\n      <button onClick={async () => await app.signInWithOAuth('google')}>\n        Sign In with Google\n      </button>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Listing User Permissions in TypeScript\nDESCRIPTION: This function lists all permissions a user has for a specified team. It takes a team scope and optional recursive flag as parameters.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/types/user.mdx#2025-04-22_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function listPermissions(scope: Team, options?: { recursive?: boolean }): Promise<TeamPermission[]>;\n```\n\n----------------------------------------\n\nTITLE: Listing User Permissions in Client Component\nDESCRIPTION: This snippet demonstrates how to list all permissions a user has using the usePermissions hook in a client-side React component.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/concepts/permissions.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\";\nimport { useUser } from \"@stackframe/stack\";\n\nexport function DisplayUserPermissions() {\n  const user = useUser({ or: 'redirect' });\n  const permissions = user.usePermissions();\n\n  return (\n    <div>\n      {permissions.map(permission => (\n        <div key={permission.id}>{permission.id}</div>\n      ))}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Updating ContactChannel Properties\nDESCRIPTION: This snippet demonstrates how to update properties of a ContactChannel. It uses the update() method to change the email address and set it for authentication use.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/types/contact-channel.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nawait contactChannel.update({\n  value: \"new-email@example.com\",\n  usedForAuth: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Getting a Team Profile Example in TypeScript\nDESCRIPTION: This example shows how to use the getTeamProfile function to retrieve the user's profile for a specific team.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/types/user.mdx#2025-04-22_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nconst profile = await user.getTeamProfile(team);\n```\n\n----------------------------------------\n\nTITLE: Configuring Stack Auth Environment Variables\nDESCRIPTION: Environment variables needed for Stack Auth configuration, including project ID, publishable client key, and secret server key.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/getting-started/setup.mdx#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nNEXT_PUBLIC_STACK_PROJECT_ID=<your-project-id>\nNEXT_PUBLIC_STACK_PUBLISHABLE_CLIENT_KEY=<your-publishable-client-key>\nSTACK_SECRET_SERVER_KEY=<your-secret-server-key>\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Stack Auth\nDESCRIPTION: Required environment variables that need to be added to the .env.local file to configure Stack Auth with your project credentials.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nNEXT_PUBLIC_STACK_PROJECT_ID=<your-project-id>\nNEXT_PUBLIC_STACK_PUBLISHABLE_CLIENT_KEY=<your-publishable-client-key>\nSTACK_SECRET_SERVER_KEY=<your-secret-server-key>\n```\n\n----------------------------------------\n\nTITLE: CurrentServerUser Type Definition in Stack Authentication (TypeScript)\nDESCRIPTION: Defines the CurrentServerUser type, which combines all properties and methods from both CurrentUser and ServerUser. This type is used for comprehensive server-side user management.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/types/user.mdx#2025-04-22_snippet_59\n\nLANGUAGE: typescript\nCODE:\n```\ntype CurrentServerUser =\n  // Inherits all functionality from CurrentUser\n  & CurrentUser  //$stack-link-to:#currentuser\n  // Inherits all functionality from ServerUser\n  & ServerUser;  //$stack-link-to:#serveruser\n```\n\n----------------------------------------\n\nTITLE: Using StackClientApp in React Components\nDESCRIPTION: Example of retrieving a StackClientApp instance using the useStackApp hook in a React component.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/objects/stack-app.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n\"use client\";\n\nfunction MyReactComponent() {\n  const stackClientApp = useStackApp();\n}\n```\n\n----------------------------------------\n\nTITLE: Granting User Permission in Stack Authentication (TypeScript)\nDESCRIPTION: Defines a function to grant a specific permission to a user for a given team. It takes a Team object and a permission ID as parameters, and returns a Promise that resolves to void.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/types/user.mdx#2025-04-22_snippet_55\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function grantPermission(scope: Team, permissionId: string): Promise<void>;\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Permission in TypeScript\nDESCRIPTION: This function retrieves a specific permission for a user within a team. It takes a team scope, permission ID, and optional recursive flag as parameters.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/types/user.mdx#2025-04-22_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function getPermission(scope: Team, permissionId: string, options?: { recursive?: boolean }): Promise<TeamPermission | null>;\n```\n\n----------------------------------------\n\nTITLE: Styling Components Cards with CSS\nDESCRIPTION: CSS styles for formatting the component cards display on the documentation page. These styles control the layout, alignment, and appearance of component cards including image wrappers and content containers.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/components/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\n.components-cards .fern-card > .flex {\n  align-items: stretch !important;\n}\n.components-cards .components-card-content {\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  align-items: center;\n  gap: 16px;\n  color: rgba(var(--body-text), var(--tw-text-opacity));\n  font-weight: bold;\n}\n.components-cards .components-card-content > .img-wrapper {\n  pointer-events: none;\n  touch-action: none;\n  user-select: none;\n  -webkit-user-select: none;\n  height: 200px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n.components-cards .components-card-content > .img-wrapper img {\n  object-fit: contain;\n  border-radius: 12px;\n  box-shadow: 1px 1px 5px 0px rgba(0, 0, 0, 0.1);\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring getAuthHeaders Function in TypeScript\nDESCRIPTION: TypeScript declaration for the getAuthHeaders function, which returns a promise resolving to a record of string key-value pairs representing authentication headers.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/types/user.mdx#2025-04-22_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function getAuthHeaders(): Promise<Record<string, string>>;\n```\n\n----------------------------------------\n\nTITLE: Configuring Application Routing for Password Reset Pages in Stack Auth\nDESCRIPTION: Configuration example showing how to set up custom URL routes for password reset functionality in a Stack Auth application. This ensures that password reset links in emails will direct users to the correct page in your application.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/customization/page-examples/password-reset.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nexport const stackServerApp = new StackServerApp({\n  // ...\n  urls: {\n    passwordReset: '/reset-password',\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Magic Link Authentication in React\nDESCRIPTION: Creates a form that sends a magic link to the user's email for passwordless authentication. Uses useState for form management and the Stack Auth API to send the magic link email.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/customization/page-examples/sign-in.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n'use client';\n\nimport { useStackApp } from \"@stackframe/stack\";\nimport { useState } from \"react\";\n\nexport default function CustomMagicLinkSignIn() {\n  const [email, setEmail] = useState('');\n  const [error, setError] = useState('');\n  const [message, setMessage] = useState('');\n  const app = useStackApp();\n\n  const onSubmit = async () => {\n    if (!email) {\n      setError('Please enter your email address');\n      return;\n    }\n    \n    // This will send a magic link email to the user's email address.\n    // When they click the link, they will be redirected to your application.\n    const result = await app.sendMagicLinkEmail(email);\n    // It's better to handle each error code separately, but for simplicity,\n    // we'll just display the error message directly here.\n    if (result.status === 'error') {\n      setError(result.error.message);\n    } else {\n      setMessage('Magic link sent! Please check your email.');\n    }\n  };\n  \n  return (\n    <form onSubmit={(e) => { e.preventDefault(); onSubmit(); } }>\n      {error}\n      {message ? \n        <div>{message}</div> :\n        <>\n          <input type='email' placeholder=\"email@example.com\" value={email} onChange={(e) => setEmail(e.target.value)} />\n          <button type='submit'>Send Magic Link</button>\n        </>\n      }\n    </form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting the Selected Team for a User in TypeScript\nDESCRIPTION: This function sets the currently selected team for the user. It takes a Team object or null as a parameter and returns a Promise that resolves to void.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/types/user.mdx#2025-04-22_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function setSelectedTeam(team: Team | null): Promise<void>;\n```\n\n----------------------------------------\n\nTITLE: ServerTeam Type Definition\nDESCRIPTION: Type definition for the ServerTeam interface that extends Team with additional server-side capabilities and properties.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/types/team.mdx#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ntype ServerTeam =\n  & Team\n  & {\n    createdAt: Date;\n    serverMetadata: Json;\n\n    listUsers(): Promise<ServerTeamUser[]>;\n    addUser(userId): Promise<void>;\n    removeUser(userId): Promise<void>;\n    delete(): Promise<void>;\n  };\n```\n\n----------------------------------------\n\nTITLE: User Listing Example with Pagination\nDESCRIPTION: Example showing how to list users with pagination using cursor-based navigation.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/objects/stack-app.mdx#2025-04-22_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = await stackServerApp.listUsers({ limit: 20 });\nconsole.log(users);\n\nif (users.nextCursor) {\n  const nextPageUsers = await stackServerApp.listUsers({ cursor: users.nextCursor, limit: 20 });\n  console.log(nextPageUsers);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Teams in a React Component with TypeScript\nDESCRIPTION: This function is a React hook that retrieves a list of all teams the user is a member of. It returns an array of Team objects.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/types/user.mdx#2025-04-22_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function useTeams(): Team[];\n```\n\n----------------------------------------\n\nTITLE: Defining User Display Name Property Type\nDESCRIPTION: Type definition for the display name property in the CurrentUser object, which can be a string or null if not set and can be modified by the user.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/types/user.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare const displayName: string | null;\n```\n\n----------------------------------------\n\nTITLE: Listing Global Permissions in Server Component\nDESCRIPTION: This code demonstrates how to list all global permissions a user has using the listPermissions method in a Next.js server component.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/concepts/permissions.mdx#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { stackServerApp } from \"@/stack\";\n\nexport default async function DisplayGlobalPermissions() {\n  const user = await stackServerApp.getUser({ or: 'redirect' });\n  const permissions = await user.listPermissions();\n\n  return (\n    <div>\n      {permissions.map(permission => (\n        <div key={permission.id}>{permission.id}</div>\n      ))}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Stack Auth Wizard via NPX\nDESCRIPTION: Command to run Stack's installation wizard that automates the setup process for Next.js projects.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/getting-started/setup.mdx#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx @stackframe/init-stack@latest\n```\n\n----------------------------------------\n\nTITLE: Using getAuthHeaders with Fetch API in TypeScript\nDESCRIPTION: Example of how to use the getAuthHeaders function to make an authenticated request to an external server using the Fetch API, and how to handle the request on the server side.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/types/user.mdx#2025-04-22_snippet_41\n\nLANGUAGE: typescript\nCODE:\n```\n// client\nconst res = await fetch(\"https://api.example.com\", {\n  headers: {\n    ...await stackApp.getAuthHeaders()\n    // you can also add your own headers here\n  },\n});\n\n// server\nfunction handleRequest(req: Request) {\n  const user = await stackServerApp.getUser({ tokenStore: req });\n  return new Response(\"Welcome, \" + user.displayName);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing CLI Authentication Flow with Stack Auth in Python\nDESCRIPTION: Demonstrates how to implement a complete authentication flow in a Python CLI application. The code shows how to prompt users to log in, handle refresh tokens, make authenticated API requests, and retrieve user information.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/others/cli-authentication.mdx#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom stack_auth_cli_template import prompt_cli_login\n\n# prompt the user to log in\nrefresh_token = prompt_cli_login(\n  app_url=\"https://your-app-url.example.com\",\n  project_id=\"your-project-id-here\",\n  publishable_client_key=\"your-publishable-client-key-here\",\n)\n\nif refresh_token is None:\n  print(\"User cancelled the login process. Exiting\")\n  exit(1)\n\n# you can also store the refresh token in a file, and only prompt the user to log in if the file doesn't exist\n\n# you can now use the REST API with the refresh token\ndef stack_auth_request(method, endpoint, **kwargs):\n  # ... see Stack Auth's Getting Started section to see how this function should look like\n  # https://docs.stack-auth.com/python/getting-started/setup\n\ndef get_access_token(refresh_token):\n  access_token_response = stack_auth_request(\n    'post',\n    '/api/v1/auth/sessions/current/refresh',\n    headers={\n      'x-stack-refresh-token': refresh_token,\n    }\n  )\n\n  return access_token_response['access_token']\n\ndef get_user_object(access_token):\n  return stack_auth_request(\n    'get',\n    '/api/v1/users/me',\n    headers={\n      'x-stack-access-token': access_token,\n    }\n  )\n\nuser = get_user_object(get_access_token(refresh_token))\nprint(\"The user is logged in as\", user['display_name'] or user['primary_email'])\n```\n\n----------------------------------------\n\nTITLE: Listing All Teams for a User in TypeScript\nDESCRIPTION: This function retrieves a list of all teams the user is a member of. It returns a Promise that resolves to an array of Team objects.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/types/user.mdx#2025-04-22_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function listTeams(): Promise<Team[]>;\n```\n\n----------------------------------------\n\nTITLE: Using Team Profile in React Example in TypeScript\nDESCRIPTION: This example demonstrates how to use the useTeamProfile hook in a React component to retrieve the user's profile for a specific team.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/types/user.mdx#2025-04-22_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nconst profile = user.useTeamProfile(team);\n```\n\n----------------------------------------\n\nTITLE: Defining User Client Metadata Property Type\nDESCRIPTION: Type definition for the client metadata property in the CurrentUser object, which contains client-visible metadata that should not contain sensitive information.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/types/user.mdx#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare const clientMetadata: Json;\n```\n\n----------------------------------------\n\nTITLE: Revoking User Permission in Stack Authentication (TypeScript)\nDESCRIPTION: Defines a function to revoke a specific permission from a user for a given team. It takes a Team object and a permission ID as parameters, and returns a Promise that resolves to void.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/types/user.mdx#2025-04-22_snippet_57\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function revokePermission(scope: Team, permissionId: string): Promise<void>;\n```\n\n----------------------------------------\n\nTITLE: React User Component Example\nDESCRIPTION: Example React component showing how to display user information using the useUser hook.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/objects/stack-app.mdx#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n\"use client\";\n\nfunction MyReactComponent() {\n  // useUser(...) is an alias for useStackApp().useUser(...)\n  const user = useUser();\n  return user ? <div>Hello, {user.name}</div>\n              : <div>Not signed in</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing StackHandler in Next.js Route Handler\nDESCRIPTION: Example showing how to use the StackHandler component in a Next.js route handler. The component accepts the Stack server app instance, route properties, fullPage setting, and custom props for various authentication components.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/components/stack-handler.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { StackHandler } from '@stackframe/stack';\nimport { stackServerApp } from \"@/stack\";\n\nexport default function Handler(props: { params: any, searchParams: any }) {\n  return (\n    <StackHandler\n      app={stackServerApp}\n      routeProps={props}\n      fullPage={true}\n      componentProps={{\n        SignIn: { /* SignIn component props */ },\n        SignUp: { /* SignUp component props */ },\n        // ... other component props\n      }}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Protected React Component Example\nDESCRIPTION: Example of creating a protected React component that requires authentication.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/objects/stack-app.mdx#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\";\n\nfunction MyProtectedComponent() {\n  useUser({ or: \"redirect\" });\n  return <div>You can only see this if you are authenticated</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Removing User from Team Type Declaration\nDESCRIPTION: Type declaration for the removeUser method that removes a user from the team using their user ID.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/types/team.mdx#2025-04-22_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function removeUser(userId: string): Promise<void>;\n```\n\n----------------------------------------\n\nTITLE: Defining ContactChannel Type in TypeScript\nDESCRIPTION: This snippet defines the ContactChannel type, representing a user's contact information such as email address. It includes properties like id, value, type, and methods for verification and management.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/types/contact-channel.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype ContactChannel = {\n  id: string;\n  value: string;\n  type: 'email';\n  isPrimary: boolean;\n  isVerified: boolean;\n  usedForAuth: boolean;\n\n  sendVerificationEmail(): Promise<void>;\n  update(options): Promise<void>;\n  delete(): Promise<void>;\n};\n```\n\n----------------------------------------\n\nTITLE: Getting User's Team Profile in Client Component\nDESCRIPTION: Shows how to get the current user's profile for a specific team using the useTeamProfile function in a client component.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/concepts/orgs-and-teams.mdx#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nconst teamProfile = user.useTeamProfile(team);\n```\n\n----------------------------------------\n\nTITLE: Defining lastActiveAt Property in TypeScript\nDESCRIPTION: TypeScript type definition for the lastActiveAt property of the ServerUser object, representing the last active date and time of the user.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/types/user.mdx#2025-04-22_snippet_49\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare const lastActiveAt: Date;\n```\n\n----------------------------------------\n\nTITLE: Getting User's Team Profile in Server Component\nDESCRIPTION: Demonstrates how to get the current user's profile for a specific team using the getTeamProfile function in a server component.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/concepts/orgs-and-teams.mdx#2025-04-22_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nconst teamProfile = await user.getTeamProfile(team);\n```\n\n----------------------------------------\n\nTITLE: Client Component Implementation\nDESCRIPTION: Example of using the onboarding hook in a client-side React component. Shows integration with Stack Auth's user context.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/concepts/user-onboarding.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useOnboarding } from '@/app/onboarding-hooks';\nimport { useUser } from '@stackframe/stack';\n\nexport default function HomePage() {\n  useOnboarding();\n  const user = useUser();\n\n  return (\n    <div>Welcome to the app, {user.displayName}</div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing AccountSettings Component in React\nDESCRIPTION: Example showing how to use the AccountSettings component from the @stackframe/stack package with custom sidebar items. This demonstrates setting fullPage mode and adding a custom section with its own icon, content, and subpath.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/components/account-settings.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AccountSettings } from '@stackframe/stack';\n\nexport default function MyAccountPage() {\n  return (\n    <AccountSettings\n      fullPage={true}\n      extraItems={[{\n        title: 'Custom Section',\n        iconName: \"Settings\",\n        content: <CustomContent />,\n        subpath: '/custom',\n      }]}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Leaving a Team\nDESCRIPTION: Demonstrates how a user can leave a team using the leaveTeam function on the User object. No special permissions are required for this action.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/concepts/orgs-and-teams.mdx#2025-04-22_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nconst team = await user.getTeam('some-team-id');\nawait user.leaveTeam(team);\n```\n\n----------------------------------------\n\nTITLE: Updating User Password in TypeScript\nDESCRIPTION: This function updates the user's password. It takes an object with oldPassword and newPassword fields as a parameter.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/types/user.mdx#2025-04-22_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function updatePassword(data: {\n  oldPassword: string;\n  newPassword: string;\n}): Promise<void>;\n```\n\n----------------------------------------\n\nTITLE: Project Type Definition in TypeScript\nDESCRIPTION: Defines the Project type structure with its core properties: id, displayName, and config. This type represents a project within the Stack Authentication system.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/types/project.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype Project = {\n  id: string;  //$stack-link-to:#projectid\n  displayName: string;  //$stack-link-to:#projectdisplayname\n  config: { ... };  //$stack-link-to:#projectconfig\n};\n```\n\n----------------------------------------\n\nTITLE: Listing Contact Channels Example in Stack Authentication (TypeScript)\nDESCRIPTION: Shows how to use the listContactChannels function to retrieve server-specific contact channels for a user. The result is stored in the contactChannels variable.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/types/user.mdx#2025-04-22_snippet_54\n\nLANGUAGE: typescript\nCODE:\n```\nconst contactChannels = await serverUser.listContactChannels();\n```\n\n----------------------------------------\n\nTITLE: Inviting User to Team in TypeScript\nDESCRIPTION: Demonstration of using the team.inviteUser() method to send an invitation email to a user. Requires $invite_members permission.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/types/team.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nawait team.inviteUser({\n  email: 'user@example.com',\n});\n```\n\n----------------------------------------\n\nTITLE: Deleting a ContactChannel\nDESCRIPTION: This example shows how to delete a contact channel using the delete() method of the ContactChannel type.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/types/contact-channel.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nawait contactChannel.delete();\n```\n\n----------------------------------------\n\nTITLE: Implementing CredentialSignUp Component in React TSX\nDESCRIPTION: This snippet demonstrates how to import and use the CredentialSignUp component from the @stackframe/stack package. It shows the component being used within a React functional component, with the noPasswordRepeat prop set to true.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/components/credential-sign-up.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { CredentialSignUp } from '@stackframe/stack';\n\nexport default function Page() {\n  return (\n    <div>\n      <h1>Sign Up</h1>\n      <CredentialSignUp noPasswordRepeat />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Team Users in Client Component\nDESCRIPTION: Shows how to list all users in a team with the useUsers hook on the Team object in a client component. Requires the $read_members permission.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/concepts/orgs-and-teams.mdx#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n// ... retrieve the team and ensure user has the necessary permissions\n\nconst users = team.useUsers();\n\nreturn (\n  <div>\n    {users.map(user => (\n      <div key={user.id}>{user.teamProfile.displayName}</div>\n    ))}\n  </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Magic Link Sign-In Component in React\nDESCRIPTION: Example showing how to import and use the MagicLinkSignIn component within a React sign-in page. The component handles the email input and OTP verification process without requiring any props.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/components/magic-link-sign-in.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { MagicLinkSignIn } from '@stackframe/stack';\n\nexport function SignInPage() {\n  return (\n    <div>\n      <h1>Sign In</h1>\n      <MagicLinkSignIn />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Stack Auth Client App in JavaScript\nDESCRIPTION: Creates a new Stack Auth client app instance with project configuration for client-side usage.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/getting-started/setup.mdx#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { StackClientApp } from \"@stackframe/js\";\n\nexport const stackClientApp = new StackClientApp({\n  // You should store these in environment variables based on your project setup\n  projectId: \"your-project-id\",\n  publishableClientKey: \"your-publishable-client-key\",\n  tokenStore: \"cookie\",\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Stack Auth API Request Helper in Python\nDESCRIPTION: Helper function to make authenticated requests to the Stack Auth API with proper headers and error handling.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/getting-started/setup.mdx#2025-04-22_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nimport requests\n\ndef stack_auth_request(method, endpoint, **kwargs):\n  res = requests.request(\n    method,\n    f'https://api.stack-auth.com/{endpoint}',\n    headers={\n      'x-stack-access-type': 'server',  # or 'client' if you're only accessing the client API\n      'x-stack-project-id': stack_project_id,\n      'x-stack-publishable-client-key': stack_publishable_client_key,\n      'x-stack-secret-server-key': stack_secret_server_key,  # not necessary if access type is 'client'\n      **kwargs.pop('headers', {}),\n    },\n    **kwargs,\n  )\n  if res.status_code >= 400:\n    raise Exception(f\"Stack Auth API request failed with {res.status_code}: {res.text}\")\n  return res.json()\n\nprint(stack_auth_request('GET', '/api/v1/projects/current'))\n```\n\n----------------------------------------\n\nTITLE: Listing User Contact Channels in TypeScript\nDESCRIPTION: This function lists all contact channels of the user. It takes no parameters and returns a promise resolving to an array of contact channels.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/types/user.mdx#2025-04-22_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function listContactChannels(): Promise<ContactChannel[]>;\n```\n\n----------------------------------------\n\nTITLE: Configuring Stack Server App for Custom OAuth Sign-In Page\nDESCRIPTION: This snippet shows how to configure the Stack Server App to use a custom OAuth sign-in page by specifying the URL in the urls object.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/customization/custom-pages.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nexport const stackServerApp = new StackServerApp({\n  // ...\n  // add these three lines\n  urls: {\n    signIn: '/signin',\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Client-side Stack Auth Usage Example\nDESCRIPTION: Demonstrates client-side operations like signing in, getting user information, updating user information, and signing out.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/getting-started/setup.mdx#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { stackClientApp } from \"@/stack/client\";\n\nawait stackClientApp.signInWithCredential({\n  email: \"test@example.com\",\n  password: \"password123\",\n});\n\nconst user = await stackClientApp.getUser();\n\nawait user.update({\n  displayName: \"New Display Name\",\n});\n\nawait user.signOut();\n```\n\n----------------------------------------\n\nTITLE: Defining ServerUser Type in TypeScript\nDESCRIPTION: TypeScript type definition for the ServerUser object, which extends CurrentUser with additional server-side properties and methods.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/types/user.mdx#2025-04-22_snippet_48\n\nLANGUAGE: typescript\nCODE:\n```\ntype ServerUser = \n  // Inherits most functionality from CurrentUser\n  & Omit<CurrentUser, \"getAuthJson\" | \"signOut\">  //$stack-link-to:#currentuser\n  & {\n    lastActiveAt: Date; //$stack-link-to:#serveruserlastactiveat\n    serverMetadata: Json; //$stack-link-to:#serveruserservermetadata\n\n    update(data): Promise<void>; //$stack-link-to:#serveruserupdatedata\n\n    listContactChannels(): Promise<ContactChannel[]>; //$stack-link-to:#serveruserlistcontactchannels\n    // NEXT_LINE_PLATFORM react-like\n     ⤷ useContactChannels(): ContactChannel[]; //$stack-link-to:#serveruserusecontactchannels\n\n    grantPermission(scope, permissionId): Promise<void>; //$stack-link-to:#serverusergrantpermissionscope-permissionid\n    revokePermission(scope, permissionId): Promise<void>; //$stack-link-to:#serveruserrevokepermissionscope-permissionid\n  };\n```\n\n----------------------------------------\n\nTITLE: Using signOut Function in TypeScript\nDESCRIPTION: Simple example of how to use the signOut function to sign out a user.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/types/user.mdx#2025-04-22_snippet_45\n\nLANGUAGE: typescript\nCODE:\n```\nawait user.signOut();\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Forgot Password Page with ForgotPassword Component in React\nDESCRIPTION: This snippet shows how to create a simple forgot password page using the pre-built ForgotPassword component from Stack Auth. It's a client-side component that handles the password reset email request process.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/customization/page-examples/forgot-password.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n'use client';\nimport { ForgotPassword } from \"@stackframe/stack\";\n\nexport default function DefaultForgotPassword() {\n  return <ForgotPassword />;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Stack Auth Server App in JavaScript\nDESCRIPTION: Creates a new Stack Auth server app instance with project configuration for server-side usage.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/getting-started/setup.mdx#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { StackServerApp } from \"@stackframe/js\";\n\nexport const stackServerApp = new StackServerApp({\n  // You should store these in environment variables based on your project setup\n  projectId: \"your-project-id\",\n  publishableClientKey: \"your-publishable-client-key\",\n  secretServerKey: \"your-secret-server-key\",\n  tokenStore: \"memory\",\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Stack Auth with User Access Token in Python\nDESCRIPTION: Example of making an authenticated request to Stack Auth API using a user's access token obtained from the JavaScript SDK.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/getting-started/setup.mdx#2025-04-22_snippet_16\n\nLANGUAGE: python\nCODE:\n```\naccess_token = # access token retrieved from the JavaScript SDK\n\nprint(stack_auth_request('GET', '/api/v1/users/me', headers={\n  'x-stack-access-token': access_token,\n}))\n```\n\n----------------------------------------\n\nTITLE: Adding User to a Team on Server\nDESCRIPTION: Demonstrates how to add a user to a team without sending an email, using the addUser function on the ServerTeam object. This can only be done server-side.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/concepts/orgs-and-teams.mdx#2025-04-22_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nawait team.addUser(user.id);\n```\n\n----------------------------------------\n\nTITLE: Providing OAuth Scopes for Google Drive Access in React\nDESCRIPTION: This snippet shows how to request specific OAuth scopes when connecting a user's account. It demonstrates requesting read-only access to Google Drive by specifying the appropriate scope in the useConnectedAccount hook.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/concepts/oauth.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n'use client';\n\nimport { useUser } from \"@stackframe/stack\";\n\nexport default function Page() {\n  const user = useUser({ or: 'redirect' });\n  // Redirects to the Google authorization page, requesting access to Google Drive\n  const account = user.useConnectedAccount('google', { or: 'redirect', scopes: ['https://www.googleapis.com/authdrive.readonly'] });\n  // Account is always defined because of the redirect\n  return <div>Google Drive connected</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Team\nDESCRIPTION: Shows how to delete a team using the delete function on the Team object. On the client side, requires the $delete_team permission.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/concepts/orgs-and-teams.mdx#2025-04-22_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nawait team.delete();\n```\n\n----------------------------------------\n\nTITLE: React Hook for Team Invitations Type Definition\nDESCRIPTION: Type declaration for the useInvitations React hook that returns an array of team invitations with ID, email and expiration date.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/types/team.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function useInvitations(): { id: string, email: string, expiresAt: Date }[];\n```\n\n----------------------------------------\n\nTITLE: Client-Side Onboarding Hook\nDESCRIPTION: React hook that checks if a user has completed onboarding and redirects to the onboarding page if necessary. Uses Stack Auth's useUser hook and Next.js router.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/concepts/user-onboarding.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n'use client';\nimport { useEffect } from 'react';\nimport { useUser } from '@stackframe/stack';\nimport { useRouter } from 'next/navigation';\n\nexport function useOnboarded() {\n  const user = useUser();\n  const router = useRouter();\n\n  useEffect(() => {\n    if (!user.clientMetadata.onboarded) {\n      router.push('/onboarding');\n    }\n  }, [user]);\n}\n```\n\n----------------------------------------\n\nTITLE: ServerTeam ListUsers Type Declaration\nDESCRIPTION: Type declaration for the listUsers method that returns a promise containing an array of ServerTeamUser objects.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/types/team.mdx#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function listUsers(): Promise<ServerTeamUser[]>;\n```\n\n----------------------------------------\n\nTITLE: Server-side Stack Auth Usage Example\nDESCRIPTION: Demonstrates server-side operations like getting a user, updating user information, creating a team, and adding a user to a team.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/getting-started/setup.mdx#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { stackServerApp } from \"@/stack/server\";\n\nconst user = await stackServerApp.getUser(\"user_id\");\n\nawait user.update({\n  displayName: \"New Display Name\",\n});\n\nconst team = await stackServerApp.createTeam({\n  name: \"New Team\",\n});\n\nawait team.addUser(user.id);\n```\n\n----------------------------------------\n\nTITLE: Implementing Data Fetching Page Component\nDESCRIPTION: React component that demonstrates fetching and displaying data from Supabase with authentication state handling.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/others/supabase.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n'use client';\n\nimport { createSupabaseClient } from \"@/utils/supabase-client\";\nimport { useStackApp, useUser } from \"@stackframe/stack\";\nimport Link from \"next/link\";\nimport { useEffect, useState } from \"react\";\n\nexport default function Page() {\n  const app = useStackApp();\n  const user = useUser();\n  const supabase = createSupabaseClient();\n  const [data, setData] = useState<null | any[]>(null);\n\n  useEffect(() => {\n    supabase.from(\"data\").select().then(({ data }) => setData(data ?? []));\n  }, []);\n\n  const listContent = data === null ? \n    <p>Loading...</p> :\n    data.length === 0 ?\n      <p>No notes found</p> :\n      data.map((note) => <li key={note.id}>{note.text}</li>);\n\n  return (\n    <div>\n      {\n        user ? \n        <>\n          <p>You are signed in</p>\n          <p>User ID: {user.id}</p>\n          <Link href={app.urls.signOut}>Sign Out</Link>\n        </> : \n        <Link href={app.urls.signIn}>Sign In</Link>\n      }\n      <h3>Supabase data</h3>\n      <ul>{listContent}</ul>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Team by ID in TypeScript\nDESCRIPTION: This function retrieves a team object by its ID. It returns a Promise that resolves to the team object or null if the team is not found or the user is not a member.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/types/user.mdx#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function getTeam(id: string): Promise<Team | null>;\n```\n\n----------------------------------------\n\nTITLE: Using delete Function in TypeScript\nDESCRIPTION: Simple example of how to use the delete function to delete a user account.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/types/user.mdx#2025-04-22_snippet_47\n\nLANGUAGE: typescript\nCODE:\n```\nawait user.delete();\n```\n\n----------------------------------------\n\nTITLE: Using User Contact Channels in React with TypeScript\nDESCRIPTION: This React hook lists all contact channels of the user. It takes no parameters and returns an array of contact channels.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/types/user.mdx#2025-04-22_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function useContactChannels(): ContactChannel[];\n```\n\n----------------------------------------\n\nTITLE: Creating Password Sign-Up Page in HTML\nDESCRIPTION: This HTML snippet creates the structure for the password sign-up page, including input fields for email and password, and a link to the sign-in page for existing users.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/getting-started/example-pages.mdx#2025-04-22_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Password Sign Up</title>\n</head>\n<body>\n  <h1>Password Sign Up</h1>\n  <p><a href=\"/\">← Back to home</a></p>\n  \n  <div id=\"signUpForm\">\n    <h2>Sign Up</h2>\n    <input type=\"email\" id=\"signUpEmail\" placeholder=\"Email\" />\n    <input type=\"password\" id=\"signUpPassword\" placeholder=\"Password\" />\n    <button id=\"signUp\">Sign Up</button>\n    <div>\n      <p>Already have an account? <a href=\"/password-sign-in\">Sign in</a></p>\n    </div>\n  </div>\n\n  <script type=\"module\" src=\"/password-sign-up-script.ts\"></script>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Current Project in React Component\nDESCRIPTION: Demonstrates how to use the useProject hook to get the current project in a React component.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/objects/stack-app.mdx#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nfunction MyReactComponent() {\n  const project = useProject();\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Index Page with User Information in HTML\nDESCRIPTION: This HTML snippet creates the structure for the index page, including authentication options and a section to display user information when logged in.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/getting-started/example-pages.mdx#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Stack Auth JS Examples</title>\n</head>\n<body>\n  <h1>Stack Auth JS Examples</h1>\n  \n  <div id=\"authOptions\">\n    <p>Choose an authentication example:</p>\n    <ul>\n      <li><a href=\"/password-sign-in\">Sign in with Password</a></li>\n      <li><a href=\"/password-sign-up\">Create Account with Password</a></li>\n      <li><a href=\"/otp-sign-in\">Sign in with OTP Code</a></li>\n      <li><a href=\"/oauth\">Sign in with Google</a></li>\n    </ul>\n  </div>\n\n  <div id=\"userInfo\" style=\"display: none;\">\n    <h2>User Information</h2>\n    <p>Email: <span id=\"userEmail\"></span></p>\n    <button id=\"signOut\">Sign Out</button>\n  </div>\n\n  <script type=\"module\" src=\"/index-script.ts\"></script>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Sending Forgot Password Email\nDESCRIPTION: Demonstrates how to use the sendForgotPasswordEmail method to initiate the password reset process for a user.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/objects/stack-app.mdx#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst result = await stackClientApp.sendForgotPasswordEmail(\"test@example.com\");\n\nif (result.status === \"success\") {\n  console.log(\"Forgot password email sent\");\n} else {\n  console.error(\"Failed to send forgot password email\", result.error.message);\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Client Read-only Metadata in Stack Auth - TSX\nDESCRIPTION: Illustrates how to work with client read-only metadata that can be modified on the server but only read from the client side. This is useful for data like subscription status that clients need to access but shouldn't modify.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/concepts/custom-user-data.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// On the server:\nconst user = await stackServerApp.getUser();\nawait user.update({\n  clientReadOnlyMetadata: {\n    subscriptionPlan: \"premium\",\n  },\n});\n\n// On the client:\nconst user = useUser();\nconsole.log(user.clientReadOnlyMetadata);\n```\n\n----------------------------------------\n\nTITLE: Listing Contact Channels in Stack Authentication (TypeScript)\nDESCRIPTION: Defines a function to list all contact channels of a user on the server side. It returns a Promise that resolves to an array of ServerContactChannel objects, which may include additional server-only details.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/types/user.mdx#2025-04-22_snippet_53\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function listContactChannels(): Promise<ServerContactChannel[]>;\n```\n\n----------------------------------------\n\nTITLE: Type Definition for TeamProfile.displayName Property\nDESCRIPTION: Declares the displayName property of the TeamProfile type, which represents the user's display name within a team context. It can be either a string or null if no display name is set.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/types/team-profile.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare const displayName: string | null;\n```\n\n----------------------------------------\n\nTITLE: Declaring delete Function in TypeScript\nDESCRIPTION: TypeScript declaration for the delete function, which deletes the user account.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/types/user.mdx#2025-04-22_snippet_46\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function delete(): Promise<void>;\n```\n\n----------------------------------------\n\nTITLE: Verifying Webhook Signature Using Svix in JavaScript\nDESCRIPTION: JavaScript code snippet demonstrating how to verify a webhook signature using the Svix library. It includes setting up the necessary parameters and using the Webhook class to verify the payload.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/concepts/webhooks.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Webhook } from \"svix\";\n\nconst secret = \"<from the dashboard>\";\nconst headers = {\n  \"svix-id\": \"<from the webhook request headers>\",\n  \"svix-timestamp\": \"<from the webhook request headers>\",\n  \"svix-signature\": \"<from the webhook request headers>\",\n};\nconst payload = \"<the webhook request body>\";\n\nconst wh = new Webhook(secret);\n// Throws on error, returns the verified content on success\nconst payload = wh.verify(payload, headers);\n```\n\n----------------------------------------\n\nTITLE: Implementing Password Sign-Up Functionality in TypeScript\nDESCRIPTION: This TypeScript snippet handles the password sign-up functionality, including form submission, error handling, and automatic sign-in upon successful account creation.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/getting-started/example-pages.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { stackClientApp } from \"./stack\";\n\n// Check if user is already signed in\nstackClientApp.getUser().then((user) => {\n  if (user) {\n    window.location.href = \"/\";\n  }\n});\n\ndocument.getElementById(\"signUp\")?.addEventListener(\"click\", async () => {\n  const emailInput = document.getElementById(\"signUpEmail\") as HTMLInputElement;\n  const passwordInput = document.getElementById(\"signUpPassword\") as HTMLInputElement;\n\n  const result = await stackClientApp.signUpWithCredential({\n    email: emailInput.value,\n    password: passwordInput.value,\n  });\n\n  if (result.status === \"error\") {\n    alert(\"Sign up failed. Please try again.\");\n    return;\n  }\n\n  const signInResult = await stackClientApp.signInWithCredential({\n    email: emailInput.value,\n    password: passwordInput.value,\n  });\n\n  if (signInResult.status === \"error\") {\n    alert(\"Account created but sign in failed. Please sign in manually.\");\n    window.location.href = \"/password-sign-in\";\n  } else {\n    window.location.href = \"/\";\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Defining TeamPermission Type in TypeScript\nDESCRIPTION: The TeamPermission object type definition which contains a single property 'id' that represents the permission identifier.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/types/team-permission.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype TeamPermission = {\n  id: string;  //$stack-link-to:#teampermissionid\n};\n```\n\n----------------------------------------\n\nTITLE: Create Team Function Signature\nDESCRIPTION: TypeScript function signature for creating a new team with display name and optional profile image.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/objects/stack-app.mdx#2025-04-22_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function createTeam(data: {\n  displayName: string;\n  profileImageUrl?: string | null;\n}): Promise<ServerTeam>;\n```\n\n----------------------------------------\n\nTITLE: Managing Server-side Metadata in Stack Auth - TSX\nDESCRIPTION: Shows how to handle server-only metadata that is exclusively accessible and modifiable from the server side. This is ideal for storing sensitive information that should not be exposed to clients.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/concepts/custom-user-data.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst user = await stackServerApp.getUser();\nawait user.update({\n  serverMetadata: {\n    secretInfo: \"This is a secret\",\n  },\n});\n\n// To read:\nconst user = await stackServerApp.getUser();\nconsole.log(user.serverMetadata);\n```\n\n----------------------------------------\n\nTITLE: Using a Team in a React Component with TypeScript\nDESCRIPTION: This function is a React hook that retrieves a team object by its ID. It returns the team object or null if the team is not found or the user is not a member.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/types/user.mdx#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function useTeam(id: string): Team | null;\n```\n\n----------------------------------------\n\nTITLE: Using getUser Method Example\nDESCRIPTION: Examples of using the getUser method with different options for handling unauthenticated states.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/objects/stack-app.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst userOrNull = await stackClientApp.getUser();\nconsole.log(userOrNull); // null if not signed in\n\nconst user = await stackClientApp.getUser({ or: \"redirect\" });\nconsole.log(user); // always defined; redirects to sign-in page if not signed in\n```\n\n----------------------------------------\n\nTITLE: REST API Authentication in Node.js\nDESCRIPTION: Shows how to verify user authentication by making requests to Stack Auth's REST API using Node.js fetch API.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/concepts/backend-integration.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst url = 'https://api.stack-auth.com/api/v1/users/me';\nconst headers = {\n  'x-stack-access-type': 'server',\n  'x-stack-project-id': 'generated on the Stack Auth dashboard',\n  'x-stack-secret-server-key': 'generated on the Stack Auth dashboard',\n  'x-stack-access-token': 'access token from the headers',\n};\n\nconst response = await fetch(url, { headers });\nif (response.status === 200) {\n  console.log('User is authenticated', await response.json());\n} else {\n  console.log('User is not authenticated', response.status, await response.text());\n}\n```\n\n----------------------------------------\n\nTITLE: Defining serverMetadata Property in TypeScript\nDESCRIPTION: TypeScript type definition for the serverMetadata property of the ServerUser object, representing server-side metadata for the user.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/types/user.mdx#2025-04-22_snippet_50\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare const serverMetadata: Json;\n```\n\n----------------------------------------\n\nTITLE: Implementing ThemeProvider in Next.js Layout\nDESCRIPTION: Code for setting up the ThemeProvider in a Next.js layout file. This configuration uses the system theme as default and applies themes by changing the class on the html element.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/customization/dark-mode.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ThemeProvider } from 'next-themes'\n\nexport default function Layout({ children }) {\n  return (\n    {/* \n      ThemeProvider enables theme switching throughout the application.\n      defaultTheme=\"system\" uses the user's system preference as the default.\n      attribute=\"class\" applies the theme by changing the class on the html element.\n    */}\n    <ThemeProvider defaultTheme=\"system\" attribute=\"class\">\n      {/* StackTheme ensures Stack components adapt to the current theme */}\n      <StackTheme>\n        {children}\n      </StackTheme>\n    </ThemeProvider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining User ID Property Type\nDESCRIPTION: Type definition for the user ID property in the CurrentUser object, which serves as the unique identifier for the user.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/types/user.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare const id: string;\n```\n\n----------------------------------------\n\nTITLE: Deleting a Team Example\nDESCRIPTION: Example demonstrating how to delete a team using the delete method.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/types/team.mdx#2025-04-22_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nawait team.delete();\n```\n\n----------------------------------------\n\nTITLE: Defining StackServerApp Interface in TypeScript\nDESCRIPTION: Type definition for StackServerApp interface that extends StackClientApp with server-side user and team management methods.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/objects/stack-app.mdx#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\ntype StackServerApp =\n  & StackClientApp\n  & {\n    new(options): StackServerApp;\n    getUser([id][, options]): Promise<ServerUser | null>;\n     ⤷ useUser([id][, options]): ServerUser;\n    listUsers([options]): Promise<ServerUser[]>;\n     ⤷ useUsers([options]): ServerUser[];\n    createUser([options]): Promise<ServerUser>;\n    getTeam(id): Promise<ServerTeam | null>;\n     ⤷ useTeam(id): ServerTeam;\n    listTeams(): Promise<ServerTeam[]>;\n     ⤷ useTeams(): ServerTeam[];\n    createTeam([options]): Promise<ServerTeam>;\n  }\n```\n\n----------------------------------------\n\nTITLE: Server-Side Onboarding Check Function\nDESCRIPTION: Server-side function that verifies user onboarding status and redirects if not completed. Uses Stack Auth's server app instance.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/concepts/user-onboarding.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { stackServerApp } from '@/stack';\nimport { redirect } from 'next/navigation';\n\nexport async function ensureOnboarded() {\n  const user = await stackServerApp.getUser();\n  if (!user.serverMetadata.onboarded) {\n    redirect('/onboarding');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting the Selected Team Example in TypeScript\nDESCRIPTION: This example demonstrates how to use the setSelectedTeam function to set a team as the currently selected team for the user.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/types/user.mdx#2025-04-22_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nconst team = await user.getTeam(\"team_id_123\");\nawait user.setSelectedTeam(team);\n```\n\n----------------------------------------\n\nTITLE: Creating StackServerApp Instance Example\nDESCRIPTION: Example showing how to create a new StackServerApp instance with custom sign-in page configuration.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/objects/stack-app.mdx#2025-04-22_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nconst stackServerApp = new StackServerApp({\n  tokenStore: \"nextjs-cookie\",\n  urls: {\n    signIn: '/my-custom-sign-in-page',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Installing next-themes for Dark Mode Support\nDESCRIPTION: Command to install the next-themes package using npm, which enables light and dark mode theming in Next.js applications.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/customization/dark-mode.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install next-themes\n```\n\n----------------------------------------\n\nTITLE: Using Team Profile in React with TypeScript\nDESCRIPTION: This function is a React hook that retrieves the user's profile within a specific team. It takes a Team object as a parameter and returns an EditableTeamMemberProfile object.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/types/user.mdx#2025-04-22_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function useTeamProfile(team: Team): EditableTeamMemberProfile;\n```\n\n----------------------------------------\n\nTITLE: Illustrating Project Config Override in JavaScript\nDESCRIPTION: This example demonstrates a project-level configuration override. It sets the sourceOfTruthConnectionString to a specific PostgreSQL connection string.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/packages/stack-shared/src/config/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  sourceOfTruthConnectionString: 'postgresql://...',\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a StackClientApp Instance\nDESCRIPTION: Example showing how to create a new StackClientApp instance with configuration options.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/objects/stack-app.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst stackClientApp = new StackClientApp({\n  tokenStore: \"nextjs-cookie\",\n  baseUrl: \"https://api.stack-auth.com\",\n  projectId: \"123\",\n  publishableClientKey: \"123\",\n  urls: {\n    home: \"/\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: User Management Method Signatures\nDESCRIPTION: Function signatures for user management methods including getUser with overloads.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/objects/stack-app.mdx#2025-04-22_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function getUser(id: string): Promise<ServerUser | null>;\ndeclare function getUser(\n  options: {\n    or?: \"return-null\" | \"redirect\" | \"throw\"\n  }\n): Promise<CurrentServerUser | null>;\n```\n\n----------------------------------------\n\nTITLE: Server Component Implementation\nDESCRIPTION: Example of using the onboarding check in a server-side React component. Demonstrates server-side user verification with Stack Auth.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/concepts/user-onboarding.mdx#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ensureOnboarding } from '@/app/onboarding-functions';\nimport { stackServerApp } from '@/stack';\n\nexport default async function HomePage() {\n  await ensureOnboarding();\n  const user = await stackServerApp.getUser();\n\n  return (\n    <div>Welcome to the app, {user.displayName}</div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Building the Stack Auth Project\nDESCRIPTION: Commands for building different parts of the Stack Auth project using pnpm. Includes options for building everything, just packages, or only the backend.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/CLAUDE.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm build\n```\n\n----------------------------------------\n\nTITLE: Implementing Supabase JWT Generation\nDESCRIPTION: Server action to generate a Supabase JWT token using Stack Auth user ID for authenticated users.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/others/supabase.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n'use server';\n\nimport { stackServerApp } from \"@/stack\";\nimport * as jose from \"jose\";\n\nexport const getSupabaseJwt = async () => {\n  const user = await stackServerApp.getUser();\n\n  if (!user) {\n    return null;\n  }\n\n  const token = await new jose.SignJWT({\n    sub: user.id,\n    role: \"authenticated\",\n  })\n    .setProtectedHeader({ alg: \"HS256\" })\n    .setIssuedAt()\n    .setExpirationTime('1h')\n    .sign(new TextEncoder().encode(process.env.SUPABASE_JWT_SECRET));\n\n  return token;\n};\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Environment Rendered Config in JavaScript\nDESCRIPTION: This example shows the environment rendered configuration. It now includes the 'organizations' field as it can no longer be changed after this point.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/packages/stack-shared/src/config/README.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// organizations can no longer change after this point, so they are included in the rendered config\n{\n  organizations: {\n    'my-org': {\n      name: 'My Org',\n    }\n  },\n  createTeamOnSignUp: true,\n  sourceOfTruthConnectionString: 'postgresql://...',\n}\n```\n\n----------------------------------------\n\nTITLE: User Management Usage Examples\nDESCRIPTION: Examples demonstrating how to get current user and retrieve user by ID.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/objects/stack-app.mdx#2025-04-22_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await stackServerApp.getUser();\nconsole.log(user); // CurrentServerUser\n\nconst user = await stackServerApp.getUser(\"12345678-1234-1234-1234-123456789abc\");\nconsole.log(user); // ServerUser\n```\n\n----------------------------------------\n\nTITLE: Starting Next.js Development Server\nDESCRIPTION: Commands to start the Next.js development server using various package managers including npm, yarn, pnpm, and bun. The server will run on localhost:3000 by default.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/examples/cjs-test/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n# or\nbun dev\n```\n\n----------------------------------------\n\nTITLE: Implementing Default Sign-In Page with SignIn Component in React\nDESCRIPTION: Creates a basic sign-in page using the pre-built SignIn component from the Stack Auth library. Includes an optional comment about using useUser for redirecting already authenticated users.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/customization/page-examples/sign-in.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n'use client';\nimport { SignIn } from \"@stackframe/stack\";\n\nexport default function DefaultSignIn() {\n  // optionally redirect to some other page if the user is already signed in\n  // const user = useUser();\n  // if (user) { redirect to some other page }\n  return <SignIn fullPage />;\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Team in a React Component Example in TypeScript\nDESCRIPTION: This example shows how to use the useTeam hook in a React component to retrieve a team by its ID.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/types/user.mdx#2025-04-22_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nconst team = user.useTeam(\"teamId\");\n```\n\n----------------------------------------\n\nTITLE: Implementing OTP Sign-In Logic in TypeScript\nDESCRIPTION: This TypeScript code handles the OTP sign-in process. It checks for existing user sessions, handles sign-up with credentials, and manages the sign-in flow using the Stack authentication client.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/getting-started/example-pages.mdx#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { stackClientApp } from \"./stack\";\n\n// Check if user is already signed in\nstackClientApp.getUser().then((user) => {\n  if (user) {\n    window.location.href = \"/\";\n  }\n});\n\ndocument.getElementById(\"signUp\")?.addEventListener(\"click\", async () => {\n  const emailInput = document.getElementById(\"signUpEmail\") as HTMLInputElement;\n  const passwordInput = document.getElementById(\"signUpPassword\") as HTMLInputElement;\n\n  const result = await stackClientApp.signUpWithCredential({\n    email: emailInput.value,\n    password: passwordInput.value,\n  });\n\n  if (result.status === \"error\") {\n    alert(\"Sign up failed. Please try again.\");\n    return;\n  }\n\n  const signInResult = await stackClientApp.signInWithCredential({\n    email: emailInput.value,\n    password: passwordInput.value,\n  });\n\n  if (signInResult.status === \"error\") {\n    alert(\"Account created but sign in failed. Please sign in manually.\");\n    window.location.href = \"/password-sign-in\";\n  } else {\n    window.location.href = \"/\";\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using Team Members Hook in React TypeScript\nDESCRIPTION: React hook example using team.useUsers() to list team members in a React component. Functionally equivalent to listUsers() but designed for React usage.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/types/team.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = team.useUsers();\nusers.forEach(user => {\n  console.log(user.id, user.teamProfile.displayName);\n});\n```\n\n----------------------------------------\n\nTITLE: List Teams Function Signature\nDESCRIPTION: TypeScript function signature for retrieving all teams in the current project.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/objects/stack-app.mdx#2025-04-22_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function listTeams(): Promise<ServerTeam[]>;\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image for Stack Auth Server\nDESCRIPTION: This command builds a Docker image for the stack-auth server using a specified Dockerfile and tags it as 'server'.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docker/readme.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker build --progress=plain -f docker/server/Dockerfile -t server .\n```\n\n----------------------------------------\n\nTITLE: Managing Custom Team Metadata\nDESCRIPTION: Demonstrates how to store and access custom metadata on a team object. The example shows handling clientMetadata which can be read and updated on both client and server sides.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/concepts/orgs-and-teams.mdx#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nawait team.update({\n  clientMetadata: {\n    customField: 'value',\n  },\n});\n\nconsole.log(team.clientMetadata.customField); // 'value'\n```\n\n----------------------------------------\n\nTITLE: Package-Specific Build Commands\nDESCRIPTION: Specialized build commands to target specific parts of the Stack Auth monorepo. These commands allow developers to build only what they need.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/CLAUDE.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm build:packages\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm build:backend\n```\n\n----------------------------------------\n\nTITLE: Implementing CredentialSignIn Component in React\nDESCRIPTION: Example showing how to import and use the CredentialSignIn component from the @stackframe/stack library to create a sign-in page with email and password fields. The component is added to a page with a heading.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/components/credential-sign-in.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { CredentialSignIn } from '@stackframe/stack';\n\nexport default function Page() {\n  return (\n    <div>\n      <h1>Sign In</h1>\n      <CredentialSignIn />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Get Team by ID Example\nDESCRIPTION: Example showing how to retrieve a team using its ID.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/objects/stack-app.mdx#2025-04-22_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nconst team = await stackServerApp.getTeam(\"team_id_123\");\nconsole.log(team); // null if not found\n```\n\n----------------------------------------\n\nTITLE: Listing Global Permissions in Client Component\nDESCRIPTION: This snippet shows how to list all global permissions a user has using the usePermissions hook in a client-side React component.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/concepts/permissions.mdx#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\";\nimport { useUser } from \"@stackframe/stack\";\n\nexport function DisplayGlobalPermissions() {\n  const user = useUser({ or: 'redirect' });\n  const permissions = user.usePermissions();\n\n  return (\n    <div>\n      {permissions.map(permission => (\n        <div key={permission.id}>{permission.id}</div>\n      ))}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Showing Project Incomplete Config in JavaScript\nDESCRIPTION: This snippet illustrates the project incomplete configuration, which includes the base config with the project-level override applied. Note that some fields may still be overridden by subsequent configs.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/packages/stack-shared/src/config/README.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// note: `organizations` and `createTeamOnSignUp` may be overridden by branch, environment, or organization configs! They are not final\n{\n  organizations: {},\n  createTeamOnSignUp: false,\n  sourceOfTruthConnectionString: 'postgresql://...',\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Stack Auth NPM Package\nDESCRIPTION: Command to install the Stack Auth package using npm in a Next.js project.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/getting-started/setup.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @stackframe/stack\n```\n\n----------------------------------------\n\nTITLE: Illustrating Environment Config Override in JavaScript\nDESCRIPTION: This example shows an empty environment-level configuration override, indicating no changes from the branch config.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/packages/stack-shared/src/config/README.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// no change from branch config\n{}\n```\n\n----------------------------------------\n\nTITLE: Starting Next.js Development Server\nDESCRIPTION: Commands to start the Next.js development server using different package managers including npm, yarn, pnpm, and bun. The server will run on localhost:3000 by default.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/examples/e-commerce/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n# or\nbun dev\n```\n\n----------------------------------------\n\nTITLE: Type Definition for TeamProfile.profileImageUrl Property\nDESCRIPTION: Declares the profileImageUrl property of the TeamProfile type, which represents the URL to the user's profile image within a team context. It can be either a string or null if no profile image is set.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/types/team-profile.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare const profileImageUrl: string | null;\n```\n\n----------------------------------------\n\nTITLE: Leaving a Team Example in TypeScript\nDESCRIPTION: This example demonstrates how to use the leaveTeam function to leave a specific team.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/types/user.mdx#2025-04-22_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nawait user.leaveTeam(team);\n```\n\n----------------------------------------\n\nTITLE: Configuring Stack Server App to Use Custom Sign-In Page\nDESCRIPTION: This snippet shows how to configure the Stack Server App to use a custom sign-in page by specifying the URL in the urls object.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/customization/custom-pages.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nexport const stackServerApp = new StackServerApp({\n  // ...\n  // add these three lines\n  urls: {\n    signIn: '/signin',\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Create User with Password Authentication\nDESCRIPTION: Example showing how to create a user with password-based authentication using email.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/objects/stack-app.mdx#2025-04-22_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await stackServerApp.createUser({\n  primaryEmail: \"test@example.com\",\n  primaryEmailAuthEnabled: true,\n  password: \"password123\",\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Token Storage for Stack Auth in JSX\nDESCRIPTION: This snippet demonstrates the configuration options for token storage in Stack Auth. It includes various storage methods such as Next.js cookies, browser cookies, and manual token handling.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/snippets/stack-app-constructor-options-before-ssk.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ParamField path=\"tokenStore\" type=\"union\" required>\n  Where to store the user's session tokens. In most cases, this is `\"nextjs-cookie\"`, which will store the tokens in cookies using Next.js.\n\n  <Accordion title={<span className=\"accordion-show-possible-values\" />}>\n    <ParamField path={`\"nextjs-cookie\"`}>\n      Persists the session tokens in `window.cookie` in browser environments, or Next.js cookies in server environments. This is the most common choice.\n    </ParamField>\n    <ParamField path={`\"cookie\"`}>\n      Persists the session tokens in `window.cookie` in browser environments. Will not read or write cookies on the server.\n    </ParamField>\n    <ParamField path={`{ accessToken: string, refreshToken: string }`}>\n      Reads the initial value for the session tokens from the provided object. It expects the same format as the object returned by [`currentUser.getAuthJson()`](../types/user.mdx#getauthjson).\n\n      Does not persist changes to the tokens.\n    </ParamField>\n    <ParamField path={<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Request\">Request</a>}>\n      Reads the initial value for the session tokens from headers of the request object. For more information, see the documentation for [`currentUser.getAuthHeaders()`](../types/user.mdx#getauthheaders).\n\n      Does not persist changes to the tokens.\n    </ParamField>\n  </Accordion>\n</ParamField>\n```\n\n----------------------------------------\n\nTITLE: Changelog Entries in Markdown\nDESCRIPTION: Structured changelog entries documenting version history and patch changes for the @stackframe/init-stack package. Includes dependency updates and various feature additions like OAuth, MFA, and webhooks support.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/packages/init-stack/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @stackframe/init-stack\n\n## 2.8.7\n\n### Patch Changes\n\n- @stackframe/stack-shared@2.8.7\n```\n\n----------------------------------------\n\nTITLE: Initialize Stack Auth in Next.js Project\nDESCRIPTION: Example command showing how to initialize Stack Auth in a Next.js project with the browser setup disabled.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/packages/init-stack/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx init-stack --next --no-browser\n```\n\n----------------------------------------\n\nTITLE: Creating Supabase Client with JWT Authentication\nDESCRIPTION: Helper function to create a Supabase client instance with JWT token authentication.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/others/supabase.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createBrowserClient } from \"@supabase/ssr\";\nimport { getSupabaseJwt } from \"./actions\";\n\nexport const createSupabaseClient = () => {\n  return createBrowserClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n    { accessToken: async () => await getSupabaseJwt() || \"\" }\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Leaving a Team in TypeScript\nDESCRIPTION: This function allows the user to leave a team. It takes a Team object as a parameter and returns a Promise that resolves to void.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/types/user.mdx#2025-04-22_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function leaveTeam(team: Team): Promise<void>;\n```\n\n----------------------------------------\n\nTITLE: Defining TeamUser Type in TypeScript\nDESCRIPTION: This snippet defines the TeamUser type, which represents a user in the context of a team on the client side. It includes the user's ID and team-specific profile.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/types/team-user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype TeamUser = {\n  id: string;\n  teamProfile: TeamProfile;\n};\n```\n\n----------------------------------------\n\nTITLE: Updating User Details in Stack Authentication (TypeScript)\nDESCRIPTION: Defines a function to update various user details on the server. It accepts parameters for display name, profile image, email settings, password, team selection, and metadata. The function returns a Promise that resolves to void.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/types/user.mdx#2025-04-22_snippet_51\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function update(data: {\n  displayName?: string;\n  profileImageUrl?: string | null;\n  primaryEmail?: string,\n  primaryEmailVerified?: boolean,\n  primaryEmailAuthEnabled?: boolean,\n  password?: string;\n  selectedTeamId?: string | null;\n  clientMetadata?: Json;\n  clientReadOnlyMetadata?: Json;\n  serverMetadata?: Json;\n}): Promise<void>;\n```\n\n----------------------------------------\n\nTITLE: Deep Link Team Switcher Implementation\nDESCRIPTION: Implementation of SelectedTeamSwitcher with URL mapping for deep linking functionality.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/concepts/team-selection.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<SelectedTeamSwitcher \n  urlMap={team => `/team/${team.id}`} \n  selectedTeam={team}\n/>\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog\nDESCRIPTION: A markdown formatted changelog showing version history and changes for the stack-auth package and its dependencies. Documents bug fixes, feature additions, and package version updates.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/packages/template/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- fixed user update bug\n- Updated dependencies\n  - @stackframe/stack-shared@2.6.18\n  - @stackframe/stack-sc@2.6.18\n  - @stackframe/stack-ui@2.6.18\n```\n\n----------------------------------------\n\nTITLE: Updating ServerContactChannel Properties\nDESCRIPTION: This snippet shows the signature of the update method for ServerContactChannel. It allows updating various properties including verification status, which is not available in the regular ContactChannel update method.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/types/contact-channel.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function update(options: {\n  value?: string;\n  type?: 'email';\n  usedForAuth?: boolean;\n  isVerified?: boolean;\n  isPrimary?: boolean;\n}): Promise<void>;\n```\n\n----------------------------------------\n\nTITLE: Defining TeamProfile Type in TypeScript\nDESCRIPTION: Defines the TeamProfile type structure that represents a user's profile within a team context. It includes two properties: displayName and profileImageUrl, both of which can be strings or null.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/types/team-profile.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype TeamProfile = {\n  displayName: string | null;  //$stack-link-to:#teamprofiledisplayname\n  profileImageUrl: string | null;  //$stack-link-to:#teamprofileprofileimageurl\n};\n```\n\n----------------------------------------\n\nTITLE: Declaring ServerTeamUser TeamProfile Property in TypeScript\nDESCRIPTION: This snippet declares the teamProfile property of the ServerTeamUser type, which represents the user's server-side team profile information.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/types/team-user.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare const teamProfile: ServerTeamProfile;\n```\n\n----------------------------------------\n\nTITLE: Creating Password Sign-In Page in HTML\nDESCRIPTION: This HTML snippet creates the structure for the password sign-in page, including input fields for email and password, and a link to the sign-up page.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/getting-started/example-pages.mdx#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Password Sign In</title>\n</head>\n<body>\n  <h1>Password Sign In</h1>\n  <p><a href=\"/\">← Back to home</a></p>\n  \n  <div id=\"loginForm\">\n    <h2>Sign In</h2>\n    <input type=\"email\" id=\"emailInput\" placeholder=\"Email\" />\n    <input type=\"password\" id=\"passwordInput\" placeholder=\"Password\" />\n    <button id=\"signIn\">Sign In</button>\n    <div>\n      <p>Don't have an account? <a href=\"/password-sign-up\">Create account</a></p>\n    </div>\n  </div>\n\n  <script type=\"module\" src=\"/password-sign-in-script.ts\"></script>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Declaring TeamUser TeamProfile Property in TypeScript\nDESCRIPTION: This snippet declares the teamProfile property of the TeamUser type, which represents the user's team-specific profile information.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/types/team-user.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare const teamProfile: TeamProfile;\n```\n\n----------------------------------------\n\nTITLE: Initializing Stack Auth API Keys in Python\nDESCRIPTION: Configuration code to load Stack Auth API keys from environment variables for authentication purposes.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/getting-started/setup.mdx#2025-04-22_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nimport os\n\nstack_project_id = os.getenv(\"STACK_PROJECT_ID\")\nstack_publishable_client_key = os.getenv(\"STACK_PUBLISHABLE_CLIENT_KEY\")\nstack_secret_server_key = os.getenv(\"STACK_SECRET_SERVER_KEY\")\n```\n\n----------------------------------------\n\nTITLE: Configuring OAuth Scopes for Sign-in in Stack Server App\nDESCRIPTION: This snippet demonstrates how to configure default OAuth scopes for the sign-in process in a Stack server application. It shows how to set up the oauthScopesOnSignIn option to request Google Drive read-only access during user sign-in.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/concepts/oauth.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport const stackServerApp = new StackServerApp({\n  // ...your other settings...\n  oauthScopesOnSignIn: {\n    google: ['https://www.googleapis.com/authdrive.readonly']\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Project Configuration Type Definition in TypeScript\nDESCRIPTION: Defines the config property of the Project type with configuration settings for authentication and permissions, including sign-up options, authentication methods, and client-side capabilities.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/types/project.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare const config: {\n  signUpEnabled: boolean;\n  credentialEnabled: boolean;\n  magicLinkEnabled: boolean;\n  clientTeamCreationEnabled: boolean;\n  clientUserDeletionEnabled: boolean;\n};\n```\n\n----------------------------------------\n\nTITLE: Declaring getAuthJson Function in TypeScript\nDESCRIPTION: TypeScript declaration for the getAuthJson function, which returns a promise resolving to an object containing an access token.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/types/user.mdx#2025-04-22_snippet_42\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function getAuthJson(): Promise<{ accessToken: string | null }>;\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Structure for OAuth Authentication Page\nDESCRIPTION: This HTML snippet sets up the structure for an OAuth authentication page. It includes a button for Google sign-in and links the corresponding TypeScript script.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/getting-started/example-pages.mdx#2025-04-22_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>OAuth Authentication</title>\n  <style>\n    .hidden {\n      display: none;\n    }\n  </style>\n</head>\n<body>\n  <h1>OAuth Authentication</h1>\n  <p><a href=\"/\">← Back to home</a></p>\n  \n  <div id=\"loginButtons\">\n    <h2>Sign In with OAuth</h2>\n    <button id=\"googleSignIn\">Sign in with Google</button>\n  </div>\n\n  <script type=\"module\" src=\"/oauth-script.ts\"></script>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Branch Rendered Config in JavaScript\nDESCRIPTION: This snippet shows the branch rendered configuration. Like the project rendered config, it only includes fields that cannot be overridden by subsequent configs.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/packages/stack-shared/src/config/README.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// as above, `organizations` and `createTeamOnSignUp` are not included in the rendered config, as they may change later\n{\n  sourceOfTruthConnectionString: 'postgresql://...',\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ServerTeamUser Type in TypeScript\nDESCRIPTION: This snippet defines the ServerTeamUser type, which extends TeamUser and ServerUser types, adding server-side functionality and a ServerTeamProfile.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/types/team-user.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntype ServerTeamUser =\n  // Inherits all functionality from TeamUser\n  & TeamUser\n  // Inherits all functionality from ServerUser\n  & ServerUser\n  & {\n    teamProfile: ServerTeamProfile;\n  };\n```\n\n----------------------------------------\n\nTITLE: Using Team Invitations Hook in React\nDESCRIPTION: Example demonstrating how to use the useInvitations React hook to list and iterate through team invitations in a React component.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/types/team.mdx#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst invitations = team.useInvitations();\ninvitations.forEach(invitation => {\n  console.log(invitation.id, invitation.email);\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Next.js Project with Stack Auth and Supabase\nDESCRIPTION: Terminal commands to create a new Next.js project and install Stack Auth and Supabase dependencies.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/others/supabase.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app@latest -e with-supabase stack-supabase\ncd stack-supabase\nnpx @stackframe/init-stack@latest\n```\n\n----------------------------------------\n\nTITLE: Defining User Selected Team Property Type\nDESCRIPTION: Type definition for the selected team property in the CurrentUser object, which represents the currently selected team for the user as a Team object or null if no team is selected.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/types/user.mdx#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare const selectedTeam: Team | null;\n```\n\n----------------------------------------\n\nTITLE: Listing Team Invitations Example\nDESCRIPTION: Example showing how to list and iterate through team invitations, displaying the invitation ID and email for each entry.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/types/team.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst invitations = await team.listInvitations();\ninvitations.forEach(invitation => {\n  console.log(invitation.id, invitation.email);\n});\n```\n\n----------------------------------------\n\nTITLE: Component Usage Examples in JSX\nDESCRIPTION: JSX markup examples showing how Stack Auth components are displayed in the documentation. The markup arranges components into categories using CardGroup and Card elements, with each component shown with an image preview and component name.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/components/overview.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<div className=\"components-cards\">\n  <style>{`\n    .components-cards .fern-card > .flex {\n      align-items: stretch !important;\n    }\n    .components-cards .components-card-content {\n      display: flex;\n      justify-content: center;\n      flex-direction: column;\n      align-items: center;\n      gap: 16px;\n      color: rgba(var(--body-text), var(--tw-text-opacity));\n      font-weight: bold;\n    }\n    .components-cards .components-card-content > .img-wrapper {\n      pointer-events: none;\n      touch-action: none;\n      user-select: none;\n      -webkit-user-select: none;\n      height: 200px;\n      display: flex;\n      justify-content: center;\n      align-items: center;\n    }\n    .components-cards .components-card-content > .img-wrapper img {\n      object-fit: contain;\n      border-radius: 12px;\n      box-shadow: 1px 1px 5px 0px rgba(0, 0, 0, 0.1);\n    }\n  `}</style>\n\n\n\n  ## Sign In and Sign Up\n\n  <CardGroup>\n    <Card href=\"../components/sign-in\" >\n      <div className=\"components-card-content\">\n        <div className=\"img-wrapper\">\n          <img src=\"../imgs/sign-in.png\" alt=\"SignIn\" className=\"stack-200h\" />\n        </div>\n        &lt;SignIn /&gt;\n      </div>\n    </Card>\n    <Card href=\"../components/sign-up\">\n      <div className=\"components-card-content\">\n        <div className=\"img-wrapper\">\n          <img src=\"../imgs/sign-up.png\" alt=\"SignUp\" className=\"stack-200h\" />\n        </div>\n        &lt;SignUp /&gt;\n      </div>\n    </Card>\n    <Card href=\"../components/credential-sign-in\">\n      <div className=\"components-card-content\">\n        <div className=\"img-wrapper\">\n          <img src=\"../imgs/credential-sign-in.png\" alt=\"CredentialSignIn\" className=\"stack-150h\" />\n        </div>\n        &lt;CredentialSignIn /&gt;\n      </div>\n    </Card>\n    <Card href=\"../components/credential-sign-up\">\n      <div className=\"components-card-content\">\n        <div className=\"img-wrapper\">\n          <img src=\"../imgs/credential-sign-up.png\" alt=\"CredentialSignUp\" className=\"stack-200h\" />\n        </div>\n        &lt;CredentialSignUp /&gt;\n      </div>\n    </Card>\n    <Card href=\"../components/oauth-button\">\n      <div className=\"components-card-content\">\n        <div className=\"img-wrapper\">\n          <img src=\"../imgs/oauth-button.png\" alt=\"OAuthButton\" className=\"stack-50h\" />\n        </div>\n        &lt;OAuthButton /&gt;\n      </div>\n    </Card>\n    <Card href=\"../components/oauth-button-group\">\n      <div className=\"components-card-content\">\n        <div className=\"img-wrapper\">\n          <img src=\"../imgs/oauth-button-group.png\" alt=\"OAuthButtonGroup\" className=\"stack-200h\" />\n        </div>\n        &lt;OAuthButtonGroup /&gt;\n      </div>\n    </Card>\n  </CardGroup>\n\n\n  ## User\n\n  <CardGroup>\n    <Card href=\"../components/user-button\">\n      <div className=\"components-card-content\">\n        <div className=\"img-wrapper\">\n          <img src=\"../imgs/user-button.png\" alt=\"UserButton\" className=\"stack-200h\" />\n        </div>\n        &lt;UserButton /&gt;\n      </div>\n    </Card>\n    <Card href=\"../components/account-settings\">\n      <div className=\"components-card-content\">\n        <div className=\"img-wrapper\">\n          <img src=\"../imgs/account-settings.png\" alt=\"AccountSettings\" className=\"stack-100h\" />\n        </div>\n        &lt;AccountSettings /&gt;\n      </div>\n    </Card>\n  </CardGroup>\n\n\n    ## Teams & Organizations\n\n  <CardGroup>\n    <Card href=\"../components/selected-team-switcher\">\n      <div className=\"components-card-content\">\n        <div className=\"img-wrapper\">\n          <img src=\"../imgs/selected-team-switcher.png\" alt=\"SelectedTeamSwitcher\" className=\"stack-200h\" />\n        </div>\n        &lt;SelectedTeamSwitcher /&gt;\n      </div>\n    </Card>\n  </CardGroup>\n\n  ## Utilities\n\n  <CardGroup>\n    <Card href=\"../components/stack-handler\">\n      <div className=\"components-card-content\">\n        &lt;StackHandler /&gt;\n      </div>\n    </Card>\n    <Card href=\"../components/stack-provider\">\n      <div className=\"components-card-content\">\n        &lt;StackProvider /&gt;\n      </div>\n    </Card>\n    <Card href=\"../components/stack-theme\">\n      <div className=\"components-card-content\">\n        &lt;StackTheme /&gt;\n      </div>\n    </Card>\n  </CardGroup>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Declaring TeamUser ID Property in TypeScript\nDESCRIPTION: This snippet declares the id property of the TeamUser type, which represents the unique identifier of the user.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/types/team-user.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare const id: string;\n```\n\n----------------------------------------\n\nTITLE: Defining ServerContactChannel Type in TypeScript\nDESCRIPTION: This snippet defines the ServerContactChannel type, which extends ContactChannel with additional server-side functionality. It inherits all properties from ContactChannel and adds a server-specific update method.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/types/contact-channel.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntype ServerContactChannel =\n  // Inherits all properties from ContactChannel\n  & ContactChannel\n  & {\n    update(options): Promise<void>;\n  };\n```\n\n----------------------------------------\n\nTITLE: Local Development Setup Commands\nDESCRIPTION: Series of commands for setting up local development environment, including repository cloning, dependency installation, and starting development servers.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/others/self-host.mdx#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ngit clone git@github.com:stack-auth/stack.git\ncd stack\n\npnpm install\n\n# Run build to build everything once\npnpm run build:dev\n\n# reset & start the dependencies (DB, Inbucket, etc.) as Docker containers, seeding the DB with the Prisma schema\npnpm run start-deps\n# pnpm run restart-deps\n# pnpm run stop-deps\n\n# Start the dev server\npnpm run dev\n# For systems with limited resources, you can run a minimal development setup with just the backend and dashboard\n# pnpm run dev:basic\n\n# In a different terminal, run tests in watch mode\npnpm run test\n```\n\n----------------------------------------\n\nTITLE: Defining User Client Read-Only Metadata Property Type\nDESCRIPTION: Type definition for the client read-only metadata property in the CurrentUser object, which contains metadata visible on the client side but can only be modified on the server side.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/types/user.mdx#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare const clientReadOnlyMetadata: Json;\n```\n\n----------------------------------------\n\nTITLE: Declaring Team Invitation Types in TypeScript\nDESCRIPTION: Type declaration for the listInvitations function that returns a promise containing an array of team invitations with ID, email and expiration date.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/types/team.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function listInvitations(): Promise<{ id: string, email: string, expiresAt: Date }[]>;\n```\n\n----------------------------------------\n\nTITLE: Folder Structure Example for API Migration in Markdown\nDESCRIPTION: This snippet illustrates the folder structure for API migrations, showing the naming convention for migration folders and the additional files required for beta and release versions.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/apps/backend/src/app/api/migrations/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nsrc/app/api/migrations\n├── v2beta4\n│   ├── route.tsx\n│   ├── beta-changes.txt\n│   └── release-changes.txt (only for release versions)\n└── latest\n```\n\n----------------------------------------\n\nTITLE: Defining User Profile Image URL Property Type\nDESCRIPTION: Type definition for the profile image URL property in the CurrentUser object, which can be a string or null if no profile image is set.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/types/user.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare const profileImageUrl: string | null;\n```\n\n----------------------------------------\n\nTITLE: Adding User to Team Type Declaration\nDESCRIPTION: Type declaration for the addUser method that adds a user to the team using their user ID.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/types/team.mdx#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function addUser(userId: string): Promise<void>;\n```\n\n----------------------------------------\n\nTITLE: Setting up CLI Authentication File Structure in Python\nDESCRIPTION: Shows the file structure for integrating the Stack Auth CLI template into a Python application. The structure illustrates where to place the downloaded authentication template file within your project.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/others/cli-authentication.mdx#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n└─ my-python-app\n   ├─ main.py\n   └─ stack_auth_cli_template.py  # <- the file you just downloaded\n```\n\n----------------------------------------\n\nTITLE: Defining User Sign-up Date Property Type\nDESCRIPTION: Type definition for the sign-up date property in the CurrentUser object, which represents when the user signed up as a Date object.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/types/user.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare const signedUpAt: Date;\n```\n\n----------------------------------------\n\nTITLE: Configuring Publishable Client Key for Stack Auth in JSX\nDESCRIPTION: This snippet shows how to set the publishable client key for Stack Auth. It references the key from the Stack Auth dashboard and provides an option to set it using an environment variable.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/snippets/stack-app-constructor-options-before-ssk.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<ParamField path=\"publishableClientKey\" type=\"string\">\n  The publishable client key of the app, as found on Stack Auth's dashboard. Defaults to the value of the `NEXT_PUBLIC_STACK_PUBLISHABLE_CLIENT_KEY` environment variable.\n</ParamField>\n```\n\n----------------------------------------\n\nTITLE: No Update Team Switcher Implementation\nDESCRIPTION: SelectedTeamSwitcher implementation with noUpdateSelectedTeam flag to prevent automatic team updates.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/concepts/team-selection.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<SelectedTeamSwitcher \n  urlMap={team => `/team/${team.id}`} \n  selectedTeam={team} \n  noUpdateSelectedTeam\n/>\n```\n\n----------------------------------------\n\nTITLE: Illustrating Branch Config Override in JavaScript\nDESCRIPTION: This snippet shows a branch-level configuration override. It adds an organization to the 'organizations' object.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/packages/stack-shared/src/config/README.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  organizations: {\n    'my-org': {\n      name: 'My Org',\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Structure for OTP Sign-In Page\nDESCRIPTION: This HTML snippet sets up the structure for an OTP sign-in page. It includes input fields for email and OTP code, along with buttons to send and verify the code.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/getting-started/example-pages.mdx#2025-04-22_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>OTP Sign In</title>\n</head>\n<body>\n  <h1>OTP Sign In</h1>\n  <p><a href=\"/\">← Back to home</a></p>\n  \n  <div id=\"otpForm\">\n    <h2>Sign In with Email Code</h2>\n    <div id=\"emailStep\">\n      <input type=\"email\" id=\"emailInput\" placeholder=\"Email\" />\n      <button id=\"sendCode\">Send Code</button>\n    </div>\n\n    <div id=\"codeStep\" style=\"display: none;\">\n      <p>Enter the code sent to your email</p>\n      <input type=\"text\" id=\"codeInput\" placeholder=\"Enter code\" />\n      <button id=\"verifyCode\">Verify Code</button>\n    </div>\n  </div>\n\n  <script type=\"module\" src=\"/otp-sign-in-script.ts\"></script>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Defining User Primary Email Verification Status Property Type\nDESCRIPTION: Type definition for the primary email verification status property in the CurrentUser object, which indicates whether the user's primary email is verified.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/types/user.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare const primaryEmailVerified: boolean;\n```\n\n----------------------------------------\n\nTITLE: StackClientApp Constructor Signature\nDESCRIPTION: TypeScript declaration for the StackClientApp constructor showing required configuration options.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/objects/stack-app.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare new(options: {\n  tokenStore: \"nextjs-cookie\" | \"cookie\" | { accessToken: string, refreshToken: string } | Request;\n  baseUrl?: string;\n  projectId?: string;\n  publishableClientKey?: string;\n  urls: {\n    ...\n  };\n  noAutomaticPrefetch?: boolean;\n}): StackClientApp;\n```\n\n----------------------------------------\n\nTITLE: Development Setup Commands for Contributors\nDESCRIPTION: Series of commands for setting up a local development environment to contribute to Stack Auth, including package installation, dependency management, and running the development server.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n\n# Build the packages and generate code. We only need to do this once, as `pnpm dev` will do this from now on\npnpm build:packages\npnpm codegen\n\n# Start the dependencies (DB, Inbucket, etc.) as Docker containers, seeding the DB with the Prisma schema\n# Make sure you have Docker (or OrbStack) installed and running\npnpm restart-deps\n# restart-deps is the same as:\n#   pnpm stop-deps  (if the containers are already running)\n#   pnpm start-deps\n\n# Start the dev server\npnpm dev\n# For systems with limited resources, you can run a minimal development setup with just the backend and dashboard\n# pnpm run dev:basic\n\n# In a different terminal, run tests in watch mode\npnpm test\n```\n\n----------------------------------------\n\nTITLE: Configuring Language in Stack Auth with StackProvider\nDESCRIPTION: This snippet demonstrates how to set up internationalization in Stack Auth by passing a language code to the StackProvider component. The example shows setting German (de-DE) as the application language in a layout.tsx file.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/customization/internationalization.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n...\n  <StackProvider ... lang={'de-DE'}>\n    ...\n  </StackProvider>\n...\n```\n\n----------------------------------------\n\nTITLE: Illustrating Organization Config Override in JavaScript\nDESCRIPTION: This snippet shows an organization-level configuration override. It sets the 'createTeamOnSignUp' flag to true.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/packages/stack-shared/src/config/README.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  createTeamOnSignUp: true,\n}\n```\n\n----------------------------------------\n\nTITLE: Initialize Stack Auth in JavaScript Project\nDESCRIPTION: Example command demonstrating Stack Auth initialization in a JavaScript project using npm as the package manager.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/packages/init-stack/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx init-stack --js --npm\n```\n\n----------------------------------------\n\nTITLE: Individual Service Deployment Commands\nDESCRIPTION: Commands for deploying and running individual Stack Auth services including backend and dashboard setup.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/others/self-host.mdx#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ngit clone git@github.com:stack-auth/stack.git\ncd stack\n\npnpm install\npnpm build:backend\npnpm start:backend\n```\n\n----------------------------------------\n\nTITLE: Get Team Function Signature\nDESCRIPTION: TypeScript function signature for retrieving a team by its ID.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/objects/stack-app.mdx#2025-04-22_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function getTeam(id: string): Promise<ServerTeam | null>;\n```\n\n----------------------------------------\n\nTITLE: Configuring Stack Auth Environment Variables\nDESCRIPTION: Environment variables required for Stack Auth integration in Next.js project, including project ID, publishable client key, and secret server key\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/packages/template/README.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nNEXT_PUBLIC_STACK_PROJECT_ID=<your-project-id>\nNEXT_PUBLIC_STACK_PUBLISHABLE_CLIENT_KEY=<your-publishable-client-key>\nSTACK_SECRET_SERVER_KEY=<your-secret-server-key>\n```\n\n----------------------------------------\n\nTITLE: Checking Global Permission in Server Component\nDESCRIPTION: This code demonstrates how to check if a user has a specific global project permission using the getPermission method in a Next.js server component.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/concepts/permissions.mdx#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { stackServerApp } from \"@/stack\";\n\nexport default async function CheckGlobalPermission() {\n  const user = await stackServerApp.getUser({ or: 'redirect' });\n  const permission = await user.getPermission('access_admin_dashboard');\n\n  return (\n    <div>\n      {permission ? 'You can access the admin dashboard' : 'Access denied'}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Base Config Structure in JavaScript\nDESCRIPTION: This snippet shows the structure of a base configuration object in Stack Auth. It includes default values for organizations, team creation on signup, and a database connection string.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/packages/stack-shared/src/config/README.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  organizations: {},\n  createTeamOnSignUp: false,\n  sourceOfTruthConnectionString: null\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Project Rendered Config in JavaScript\nDESCRIPTION: This example shows the project rendered configuration. It only includes fields that cannot be overridden by subsequent configs, omitting 'organizations' and 'createTeamOnSignUp'.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/packages/stack-shared/src/config/README.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// since `organizations` and `createTeamOnSignUp` may change later, they are not included in the rendered config\n{\n  sourceOfTruthConnectionString: 'postgresql://...',\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Stack Auth CLI Usage Command\nDESCRIPTION: Shows the basic command structure for initializing Stack Auth in a project with optional path and configuration parameters.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/packages/init-stack/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx init-stack [project-path] [options]\n```\n\n----------------------------------------\n\nTITLE: TeamPermission.id Type Declaration\nDESCRIPTION: Type declaration for the id property of the TeamPermission object, which is a string representing the permission identifier.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/types/team-permission.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare const id: string;\n```\n\n----------------------------------------\n\nTITLE: Receiving Webhook Payload in JSON Format\nDESCRIPTION: Example of a JSON payload received from a webhook when a team is created. It includes the event type and relevant data about the newly created team.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/concepts/webhooks.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"team.created\",\n  \"data\": {\n    \"id\": \"2209422a-eef7-4668-967d-be79409972c5\",\n    \"display_name\": \"My Team\",\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Team Page Implementation with Deep Linking\nDESCRIPTION: Complete implementation of a team-specific page using deep linking and the SelectedTeamSwitcher component.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/concepts/team-selection.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n\"use client\";\n\nimport { useUser, SelectedTeamSwitcher } from \"@stackframe/stack\";\n\nexport default function TeamPage({ params }: { params: { teamId: string } }) {\n  const user = useUser({ or: 'redirect' });\n  const team = user.useTeam(params.teamId);\n\n  if (!team) {\n    return <div>Team not found</div>;\n  }\n\n  return (\n    <div>\n      <SelectedTeamSwitcher \n        urlMap={team => `/team/${team.id}`} \n        selectedTeam={team}\n      />\n      \n      <p>Team Name: {team.displayName}</p>\n      <p>You are a member of this team.</p>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Showing Branch Incomplete Config in JavaScript\nDESCRIPTION: This example demonstrates the branch incomplete configuration, which includes the base config with both project and branch-level overrides applied.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/packages/stack-shared/src/config/README.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  organizations: {\n    'my-org': {\n      name: 'My Org',\n    }\n  },\n  createTeamOnSignUp: true,\n  sourceOfTruthConnectionString: 'postgresql://...',\n}\n```\n\n----------------------------------------\n\nTITLE: StackServerApp Constructor Signature\nDESCRIPTION: Constructor type definition for StackServerApp showing required configuration options including token store and server key settings.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/objects/stack-app.mdx#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare new(options: {\n  tokenStore: \"nextjs-cookie\" | \"cookie\" | { accessToken: string, refreshToken: string } | Request;\n  baseUrl?: string;\n  projectId?: string;\n  publishableClientKey?: string;\n  secretServerKey?: string;\n  urls: {\n    ...\n  };\n  noAutomaticPrefetch?: boolean;\n}): StackServerApp;\n```\n\n----------------------------------------\n\nTITLE: Starting Next.js Development Server\nDESCRIPTION: Commands to run the Next.js development server using various package managers. This allows developers to start the local development environment.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/examples/middleware/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n# or\nbun dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Base URL for Stack Auth API in JSX\nDESCRIPTION: This snippet shows how to configure the base URL for Stack Auth's API. It allows for custom hosting and provides a default value with an option to override using an environment variable.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/snippets/stack-app-constructor-options-before-ssk.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ParamField path=\"baseUrl\" type=\"string\">\n  The base URL for Stack Auth's API. Only override this if you are self-hosting Stack Auth. Defaults to `https://api.stack-auth.com`, unless overridden by the `NEXT_PUBLIC_STACK_API_URL` environment variable.\n</ParamField>\n```\n\n----------------------------------------\n\nTITLE: Visualizing Stack Auth System Architecture with Mermaid\nDESCRIPTION: A Mermaid diagram showing the architecture and component relationships of the Stack Auth system. The diagram illustrates interactions between the frontend dashboard, backend API, database, external services, and shared packages. It includes user and admin flows, HTTP requests, and system boundaries.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/README.md#2025-04-22_snippet_5\n\nLANGUAGE: mermaid\nCODE:\n```\n  graph TB\n      Website[Your Website]\n      User((User))\n      Admin((Admin))\n      subgraph \"Stack Auth System\"\n          Dashboard[Stack Auth Dashboard<br/>/apps/dashboard]\n          Backend[Stack Auth API Backend<br/>/apps/backend]\n          Database[(PostgreSQL Database)]\n          EmailService[Email Service<br/>Inbucket]\n          WebhookService[Webhook Service<br/>Svix]\n          StackSDK[Client SDK<br/>/packages/stack]\n          subgraph Shared\n              StackUI[Stack Auth UI<br/>/packages/stack-ui]\n              StackShared[Stack Auth Shared<br/>/packages/stack-shared]\n              StackEmails[Stack Auth Emails<br/>/packages/stack-emails]\n          end\n      end\n      Admin --> Dashboard\n      User --> Website\n      Website --> StackSDK\n      Backend --> Database\n      Backend --> EmailService\n      Backend --> WebhookService\n      Dashboard --> Shared\n      Dashboard --> StackSDK\n      StackSDK --HTTP Requests--> Backend\n      StackSDK --> Shared\n      Backend --> Shared\n      classDef container fill:#1168bd,stroke:#0b4884,color:#ffffff\n      classDef database fill:#2b78e4,stroke:#1a4d91,color:#ffffff\n      classDef external fill:#999999,stroke:#666666,color:#ffffff\n      classDef deprecated stroke-dasharray: 5 5\n      class Dashboard,Backend,EmailService,WebhookService,Website container\n      class Database database\n```\n\n----------------------------------------\n\nTITLE: Implementing SelectedTeamSwitcher Component in React\nDESCRIPTION: This example demonstrates how to use the SelectedTeamSwitcher component in a React application. It shows the component being imported from '@stackframe/stack' and implemented with various props including urlMap, selectedTeam, and noUpdateSelectedTeam.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/components/selected-team-switcher.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { SelectedTeamSwitcher } from '@stackframe/stack';\n\nexport default function Page() {\n  return (\n    <div>\n      <h1>Team Switcher</h1>\n      <SelectedTeamSwitcher\n        urlMap={(team) => `/team/${team.id}`}\n        selectedTeam={currentTeam}\n        noUpdateSelectedTeam={false}\n      />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Project ID Type Definition in TypeScript\nDESCRIPTION: Defines the id property of the Project type as a string that uniquely identifies a project.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/types/project.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare const id: string;\n```\n\n----------------------------------------\n\nTITLE: Installing Stack Auth Package for React\nDESCRIPTION: Command to install the Stack Auth npm package for React projects.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/getting-started/setup.mdx#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @stackframe/react\n```\n\n----------------------------------------\n\nTITLE: Creating Styled Divider Component in React JSX\nDESCRIPTION: This code snippet defines a React component that renders a styled divider. It uses inline styles to create a horizontal line with specific positioning, color, and opacity. The outer div provides top margin, while the inner div creates the actual divider line.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/snippets/big-divider.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<div style={{ margin: \"192px 0 0 0\" }}>\n  <div style={{ position: \"absolute\", left: 0, right: 0, height: \"1px\", backgroundColor: \"currentColor\", opacity: 0.5, transform: \"translateY(-96px)\" }} />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Declaring signOut Function in TypeScript\nDESCRIPTION: TypeScript declaration for the signOut function, which signs out the user and optionally redirects to a specified URL.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/types/user.mdx#2025-04-22_snippet_44\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function signOut(options?: { redirectUrl?: string }): Promise<void>;\n```\n\n----------------------------------------\n\nTITLE: Defining ServerTeamProfile Type in TypeScript\nDESCRIPTION: Defines the ServerTeamProfile type which currently inherits all functionality from the TeamProfile type. This suggests it has the same structure and properties as TeamProfile.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/types/team-profile.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntype ServerTeamProfile =\n  // Inherits all functionality from TeamProfile\n  & TeamProfile; //$stack-link-to:#teamprofile\n```\n\n----------------------------------------\n\nTITLE: Installing Stack Auth with NPX\nDESCRIPTION: Commands to install Stack Auth using NPX, with options for standard installation and a no-browser mode for CI/CD environments.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @stackframe/init-stack@latest\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx @stackframe/init-stack@latest --no-browser\n```\n\n----------------------------------------\n\nTITLE: Horizontal Divider with Custom Styling in React JSX\nDESCRIPTION: Creates a horizontal divider element using nested div elements with inline styles. The divider has a 1px height, uses a border color from CSS variables, and includes 64px vertical margins.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/snippets/divider.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<div style={{ height: \"1px\", backgroundColor: \"var(--border)\", margin: \"64px 0\" }}>\n  <div />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog\nDESCRIPTION: A changelog documenting version updates and dependency changes for @stackframe/example-partial-prerendering package. The changelog tracks patch versions from 2.8.7 down to 2.4.22, noting dependency updates and various changes.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/examples/partial-prerendering/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @stackframe/example-partial-prerendering\n\n## 2.8.7\n\n### Patch Changes\n\n- @stackframe/stack@2.8.7\n```\n\n----------------------------------------\n\nTITLE: Using User Permission in React with TypeScript\nDESCRIPTION: This React hook retrieves a specific permission for a user within a team. It takes a team scope, permission ID, and optional recursive flag as parameters.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/types/user.mdx#2025-04-22_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function usePermission(scope: Team, permissionId: string, options?: { recursive?: boolean }): TeamPermission | null;\n```\n\n----------------------------------------\n\nTITLE: Running Stack Auth Docker Container\nDESCRIPTION: Command to run the Stack Auth server container with environment configuration and port mappings for the dashboard and API backend.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/others/self-host.mdx#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ndocker run --env-file <your-env-file.env> -p 8101:8101 -p 8102:8102 stackauth/server:latest\n```\n\n----------------------------------------\n\nTITLE: Defining User Password Status Property Type\nDESCRIPTION: Type definition for the password status property in the CurrentUser object, which indicates whether the user has a password set.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/types/user.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare const hasPassword: boolean;\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog\nDESCRIPTION: Version history changelog showing patch changes and dependency updates for the stack-emails package from version 2.5.37 to 2.8.7. Each version includes dependency updates for stack-shared and stack-ui packages.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/packages/stack-emails/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @stackframe/stack-emails\n\n## 2.8.7\n\n### Patch Changes\n\n- @stackframe/stack-shared@2.8.7\n- @stackframe/stack-ui@2.8.7\n```\n\n----------------------------------------\n\nTITLE: Installing Stack Auth CLI\nDESCRIPTION: Command to run Stack Auth's installation wizard using npx\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/packages/template/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @stackframe/init-stack@latest\n```\n\n----------------------------------------\n\nTITLE: Showing Complete Config in JavaScript\nDESCRIPTION: This example demonstrates the final complete configuration, which is the same as the organization incomplete and rendered config. It includes all finalized settings.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/packages/stack-shared/src/config/README.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  createTeamOnSignUp: true,\n  sourceOfTruthConnectionString: 'postgresql://...',\n}\n```\n\n----------------------------------------\n\nTITLE: Starting PostgreSQL Docker Container\nDESCRIPTION: Command to initialize a PostgreSQL database container for development purposes. Sets up database name, user, and password with port mapping.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/others/self-host.mdx#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ndocker run -d --name db -e POSTGRES_USER=postgres -e POSTGRES_PASSWORD=password -e POSTGRES_DB=stackframe -p 5432:5432 postgres:latest\n```\n\n----------------------------------------\n\nTITLE: Defining User Primary Email Property Type\nDESCRIPTION: Type definition for the primary email property in the CurrentUser object, which can be a string or null and is not necessarily unique.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/types/user.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare const primaryEmail: string | null;\n```\n\n----------------------------------------\n\nTITLE: Creating a Color Mode Switcher Component in React\nDESCRIPTION: Client-side component that provides a button to toggle between light and dark themes. Uses the useTheme hook from next-themes to access and modify the current theme setting.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/customization/dark-mode.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n'use client';\nimport { useTheme } from 'next-themes'\n\nexport default function ColorModeSwitcher() {\n  // useTheme hook provides the current theme and a function to change it\n  const { theme, setTheme } = useTheme()\n  \n  return (\n    <button \n      onClick={() => setTheme(theme === 'light' ? 'dark' : 'light')}\n      aria-label=\"Toggle dark mode\"\n    >\n      {/* Display different text based on current theme */}\n      {theme === 'light' ? 'Switch to dark mode' : 'Switch to light mode'}\n    </button>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Building and Running Stack Auth Emulator with Docker Compose\nDESCRIPTION: This command uses Docker Compose to build and run the stack-auth emulator, utilizing a specified docker-compose.yaml file.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docker/readme.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose -f docker/emulator/docker.compose.yaml up --build\n```\n\n----------------------------------------\n\nTITLE: Defining Authentication Fallback Options in JSX Documentation\nDESCRIPTION: This code describes a parameter field for handling unauthenticated users in Stack-Auth, with three possible values. It uses JSX components to structure the documentation with an expandable accordion for detailed explanations.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/snippets/get-user-or-parameter.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ParamField path=\"or\" type={`\"return-null\" | \"redirect\" | \"throw\"`}>\n  What to do if the user is not signed in. Defaults to `\"return-null\"`.\n  <Accordion title={<span className=\"accordion-show-possible-values\" />}>\n    <ParamField path={`\"return-null\"`}>\n      Returns `null`. The default.\n    </ParamField>\n    <ParamField path={`\"redirect\"`}>\n      Redirects the user to the `signIn` URL.\n    </ParamField>\n    <ParamField path={`\"throw\"`}>\n      Throws an error.\n    </ParamField>\n  </Accordion>\n</ParamField>\n```\n\n----------------------------------------\n\nTITLE: Configuring React Plugin for ESLint\nDESCRIPTION: ESLint configuration for React integration, including plugin setup, version specification, and recommended rule sets. Implements both standard React rules and JSX runtime rules.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/examples/react-example/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// eslint.config.js\nimport react from 'eslint-plugin-react'\n\nexport default tseslint.config({\n  // Set the react version\n  settings: { react: { version: '18.3' } },\n  plugins: {\n    // Add the react plugin\n    react,\n  },\n  rules: {\n    // other rules...\n    // Enable its recommended rules\n    ...react.configs.recommended.rules,\n    ...react.configs['jsx-runtime'].rules,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Team Deletion Type Declaration\nDESCRIPTION: Type declaration for the delete method that permanently removes a team.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/types/team.mdx#2025-04-22_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function delete(): Promise<void>;\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Theme with StackTheme Component in React TSX\nDESCRIPTION: Example showing how to create a custom theme configuration and apply it using the StackTheme component. The theme includes light and dark mode color schemes and border radius settings.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/components/stack-theme.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst theme = {\n  light: {\n    primary: 'red',\n  },\n  dark: {\n    primary: '#00FF00',\n  },\n  radius: '8px',\n}\n\n// ...\n\n<StackTheme theme={theme}>\n  {/* children */}\n</StackTheme>\n\n```\n\n----------------------------------------\n\nTITLE: Running Development Mode\nDESCRIPTION: Commands for starting the project in development mode, either with all services or just the essential ones (backend and dashboard).\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/CLAUDE.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev:basic\n```\n\n----------------------------------------\n\nTITLE: Running Stack Auth Server Docker Container\nDESCRIPTION: This command runs the stack-auth server Docker container, using environment variables from a .env file and mapping ports 8101 and 8102.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docker/readme.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --env-file docker/server/.env.example -p 8101:8101 -p 8102:8102 -t server\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Parser Options for ESLint\nDESCRIPTION: Configuration for enabling type-aware lint rules in ESLint by setting up parser options. Specifies typescript configuration files and root directory for the project.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/examples/react-example/README.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default tseslint.config({\n  languageOptions: {\n    // other options...\n    parserOptions: {\n      project: ['./tsconfig.node.json', './tsconfig.app.json'],\n      tsconfigRootDir: import.meta.dirname,\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: ServerTeam CreatedAt Type Definition\nDESCRIPTION: Type declaration for the createdAt property of ServerTeam that stores the team creation timestamp.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/types/team.mdx#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare const createdAt: Date;\n```\n\n----------------------------------------\n\nTITLE: Using Prisma CLI\nDESCRIPTION: The recommended way to execute Prisma commands in the Stack Auth project, ensuring consistent usage across the team.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/CLAUDE.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npnpm prisma\n```\n\n----------------------------------------\n\nTITLE: Linting and Type Checking\nDESCRIPTION: Commands for running code quality checks, ensuring zero warnings are allowed in the codebase and all type definitions are correct.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/CLAUDE.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm lint\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm typecheck\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Password Reset with StackFrame Component in React\nDESCRIPTION: A simple implementation using the pre-built PasswordReset component from the @stackframe/stack package that handles all the validation and error handling logic automatically. This is the quickest way to add password reset functionality to an application.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/customization/page-examples/password-reset.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n'use client';\nimport { PasswordReset } from \"@stackframe/stack\";\n\nexport default function DefaultPasswordReset() {\n  return <PasswordReset />;\n}\n```\n\n----------------------------------------\n\nTITLE: Running Next.js Development Server\nDESCRIPTION: Commands to start the Next.js development server using different package managers. This allows developers to run the application locally for development and testing purposes.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/examples/partial-prerendering/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n# or\nbun dev\n```\n\n----------------------------------------\n\nTITLE: ServerTeam Metadata Type Definition\nDESCRIPTION: Type declaration for the serverMetadata property of ServerTeam that stores JSON metadata.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/types/team.mdx#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare const serverMetadata: Json;\n```\n\n----------------------------------------\n\nTITLE: REST API Authentication in Python\nDESCRIPTION: Demonstrates user authentication verification using Stack Auth's REST API with Python requests library.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/concepts/backend-integration.mdx#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport requests\n\nurl = 'https://api.stack-auth.com/api/v1/users/me'\nheaders = {\n  'x-stack-access-type': 'server',\n  'x-stack-project-id': 'generated on the Stack Auth dashboard',\n  'x-stack-secret-server-key': 'generated on the Stack Auth dashboard',\n  'x-stack-access-token': 'access token from the headers',\n}\n\nresponse = requests.get(url, headers=headers)\nif response.status_code == 200:\n  print('User is authenticated', response.json())\nelse:\n  print('User is not authenticated', response.status_code, response.text)\n```\n\n----------------------------------------\n\nTITLE: Running Prisma Studio for Database Management\nDESCRIPTION: Command to run Prisma Studio, a visual database editor that allows viewing and modifying the database directly during development.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm run prisma studio\n```\n\n----------------------------------------\n\nTITLE: Managing Development Dependencies\nDESCRIPTION: Commands for starting and stopping external dependencies like databases and services required for development.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/CLAUDE.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npnpm start-deps\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm stop-deps\n```\n\n----------------------------------------\n\nTITLE: Prisma Studio Launch Command\nDESCRIPTION: Command to start Prisma Studio for database interface access and direct data editing.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/others/self-host.mdx#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\npnpm run prisma studio\n```\n\n----------------------------------------\n\nTITLE: Running Tests in Stack Auth\nDESCRIPTION: Commands for executing different test suites, including all tests, unit tests only, or end-to-end tests.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/CLAUDE.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm test\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm test:unit\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm test:e2e\n```\n\n----------------------------------------\n\nTITLE: Stack Auth Package Changelog\nDESCRIPTION: Comprehensive version history tracking package updates and dependency changes, starting from version 2.4.23 up to 2.8.7. Documents patch changes and dependency updates to @stackframe/stack.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/examples/cjs-test/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @stackframe/example-cjs-test\n\n## 2.8.7\n\n### Patch Changes\n\n- @stackframe/stack@2.8.7\n```\n\n----------------------------------------\n\nTITLE: Markdown Version History\nDESCRIPTION: Version history documentation that tracks patch changes and dependency updates for the @stackframe/stack-backend package and its dependencies.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/apps/backend/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @stackframe/stack-backend\n\n## 2.8.7\n\n### Patch Changes\n\n- @stackframe/stack-emails@2.8.7\n- @stackframe/stack-shared@2.8.7\n\n## 2.8.6\n\n### Patch Changes\n\n- Various changes\n- Updated dependencies\n  - @stackframe/stack-shared@2.8.6\n  - @stackframe/stack-emails@2.8.6\n```\n\n----------------------------------------\n\nTITLE: Creating Database Migrations with Prisma\nDESCRIPTION: Command to create database migrations after making changes to the Prisma schema, which is necessary to update the database structure.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npnpm run prisma migrate dev\n```\n\n----------------------------------------\n\nTITLE: Running Individual Tests\nDESCRIPTION: Commands for executing specific tests by path or pattern matching, useful for focused testing during development.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/CLAUDE.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npnpm test path/to/test.test.ts\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm test -t \"test name pattern\"\n```\n\n----------------------------------------\n\nTITLE: Showing Environment Incomplete Config in JavaScript\nDESCRIPTION: This snippet demonstrates the environment incomplete configuration, which is unchanged from the branch incomplete config in this case.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/packages/stack-shared/src/config/README.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// no change from branch config\n{\n  organizations: {\n    'my-org': {\n      name: 'My Org',\n    }\n  },\n  createTeamOnSignUp: true,\n  sourceOfTruthConnectionString: 'postgresql://...',\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Supabase Table with RLS Policies\nDESCRIPTION: SQL code to create a data table with sample entries and configure row level security policies for different access levels - public, authenticated users, and specific user access.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/others/supabase.mdx#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n-- Create the 'data' table\nCREATE TABLE data (\n  id bigint PRIMARY KEY,\n  text text NOT NULL,\n  user_id UUID\n);\n\n-- Insert sample data\nINSERT INTO data (id, text, user_id) VALUES\n  (1, 'Everyone can see this', NULL),\n  (2, 'Only authenticated users can see this', NULL),\n  (3, 'Only user with specific id can see this', NULL);\n\n-- Enable Row Level Security\nALTER TABLE data ENABLE ROW LEVEL SECURITY;\n\n-- Allow everyone to read the first row\nCREATE POLICY \"Public read\" ON \"public\".\"data\" TO public\nUSING (id = 1);\n\n-- Allow authenticated users to read the second row\nCREATE POLICY \"Authenticated access\" ON \"public\".\"data\" TO authenticated\nUSING (id = 2);\n\n-- Allow only the owner of the row to read it\nCREATE POLICY \"User access\" ON \"public\".\"data\" TO authenticated\nUSING (id = 3 AND auth.uid() = user_id);\n```\n\n----------------------------------------\n\nTITLE: Package Version History in Markdown\nDESCRIPTION: Changelog entries documenting version updates and dependency changes for the @stackframe/example-demo-app package and its dependencies.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/examples/demo/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @stackframe/example-demo-app\n\n## 2.8.7\n\n### Patch Changes\n\n- @stackframe/stack@2.8.7\n- @stackframe/stack-shared@2.8.7\n- @stackframe/stack-ui@2.8.7\n```\n\n----------------------------------------\n\nTITLE: Documenting Version History in Markdown\nDESCRIPTION: This snippet demonstrates how version history and changelogs are documented using Markdown formatting. It includes headers for version numbers and bullet points for describing changes.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# @stackframe/docs\n\n## 2.8.7\n\n## 2.8.6\n\n## 2.8.5\n\n### Patch Changes\n\n- Various changes\n\n## 2.8.4\n\n### Patch Changes\n\n- Various changes\n\n## 2.8.3\n\n### Patch Changes\n\n- Various changes\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry Format in Markdown\nDESCRIPTION: Standard format used for documenting version changes and dependency updates in the package.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/examples/e-commerce/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 2.8.7\n\n### Patch Changes\n\n- @stackframe/stack@2.8.7\n```\n\n----------------------------------------\n\nTITLE: Stack Auth Package Version Changes\nDESCRIPTION: Markdown changelog documenting version updates, dependency changes, and feature additions for the stack-auth package. Shows sequential version history from 0.1.2 through 2.4.22.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/examples/cjs-test/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- Updated dependencies\n  - @stackframe/stack@2.4.23\n\n## 2.4.22\n\n### Patch Changes\n\n- OAuth scopes\n- Updated dependencies\n  - @stackframe/stack@2.4.22\n\n## 2.4.21\n\n### Patch Changes\n\n- Bugfixes\n- Updated dependencies\n  - @stackframe/stack@2.4.21\n```\n\n----------------------------------------\n\nTITLE: Stack-SC Changelog Markdown\nDESCRIPTION: Markdown formatted changelog documenting version history and changes to the stack-sc package, including major features like OTP login, magic links, team management, and various bugfixes.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/packages/stack-sc/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @stackframe/stack-sc\n```\n\n----------------------------------------\n\nTITLE: Structured Version History in Markdown\nDESCRIPTION: Detailed changelog entries documenting version updates and patch changes across multiple releases, focusing on dependency updates with @stackframe/stack package.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/examples/supabase/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @stackframe/example-supabase\n\n## 2.8.7\n\n### Patch Changes\n\n- @stackframe/stack@2.8.7\n\n## 2.8.6\n\n### Patch Changes\n\n- @stackframe/stack@2.8.6\n```\n\n----------------------------------------\n\nTITLE: Getting Project Example\nDESCRIPTION: Example showing how to retrieve the current project using getProject method.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/objects/stack-app.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst project = await stackClientApp.getProject();\n```\n\n----------------------------------------\n\nTITLE: Generating Table of Contents with doctoc in Markdown\nDESCRIPTION: This snippet shows the placeholders for an automatically generated table of contents using the doctoc tool. It includes start and end markers to allow automatic updates.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n- [How to contribute](#how-to-contribute)\n- [Security & bug bounties](#security--bug-bounties)\n- [Before creating a pull request](#before-creating-a-pull-request)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n```\n\n----------------------------------------\n\nTITLE: Checking Global Permission in Client Component\nDESCRIPTION: This snippet shows how to check if a user has a specific global project permission using the usePermission hook in a client-side React component.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/concepts/permissions.mdx#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\";\nimport { useUser } from \"@stackframe/stack\";\n\nexport function CheckGlobalPermission() {\n  const user = useUser({ or: 'redirect' });\n  const permission = user.usePermission('access_admin_dashboard');\n\n  return (\n    <div>\n      {permission ? 'You can access the admin dashboard' : 'Access denied'}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Package.json for Stack Auth Project in JSON\nDESCRIPTION: This snippet defines the package.json configuration for the stack-auth project. It includes project metadata, dependencies, and npm scripts for various tasks such as testing, linting, and building.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/types/connected-account.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"@stackexchange/stack-auth\",\n  \"version\": \"0.1.0\",\n  \"private\": true,\n  \"dependencies\": {\n    \"@stackexchange/stack-auth-ui\": \"^0.1.0\",\n    \"@stackexchange/stackpack-shared\": \"^0.1.0\",\n    \"@stackexchange/stack-auth-client\": \"^0.1.0\",\n    \"@stackexchange/stackpack-validator\": \"^0.1.0\",\n    \"@stackexchange/stackpack-js-utils\": \"^0.1.0\",\n    \"react\": \"^16.13.1\",\n    \"react-dom\": \"^16.13.1\"\n  },\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test\",\n    \"eject\": \"react-scripts eject\",\n    \"lint\": \"eslint src/**/*.js src/**/*.jsx\"\n  },\n  \"eslintConfig\": {\n    \"extends\": \"react-app\"\n  },\n  \"browserslist\": {\n    \"production\": [\n      \">0.2%\",\n      \"not dead\",\n      \"not op_mini all\"\n    ],\n    \"development\": [\n      \"last 1 chrome version\",\n      \"last 1 firefox version\",\n      \"last 1 safari version\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Empty TypeScript File Comment\nDESCRIPTION: Comment indicating that no tab is currently selected in this file. This appears to be a placeholder or auto-generated comment.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/snippets/always-tab-codeblock.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// No tab selected.\n```\n\n----------------------------------------\n\nTITLE: Database Initialization Commands\nDESCRIPTION: Commands for initializing and seeding the database with required initial data using Prisma migrations.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/others/self-host.mdx#2025-04-22_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\npnpm prisma migrate deploy\npnpm prisma db seed\n```\n\n----------------------------------------\n\nTITLE: Project Display Name Type Definition in TypeScript\nDESCRIPTION: Defines the displayName property of the Project type as a string that represents the human-readable name of the project.\nSOURCE: https://github.com/stack-auth/stack-auth/blob/dev/docs/fern/docs/pages-template/sdk/types/project.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare const displayName: string;\n```"
  }
]