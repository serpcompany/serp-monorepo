[
  {
    "owner": "wladpaiva",
    "repo": "aibitat",
    "content": "TITLE: Initializing AIbitat with multiple agents and a channel\nDESCRIPTION: TypeScript code demonstrating how to set up AIbitat with multiple agents, a channel, and start a conversation.\nSOURCE: https://github.com/wladpaiva/aibitat/blob/main/README.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {AIbitat} from 'aibitat'\nimport {cli} from 'aibitat/plugins'\n\nconst aibitat = new AIbitat()\n  .use(cli())\n  .agent('client', {\n    interrupt: 'ALWAYS',\n    role: 'You are a human assistant. Reply \"TERMINATE\" when there is a correct answer or there`s no answer to the question.',\n  })\n  .agent('mathematician', {\n    role: `You are a Mathematician and only solve math problems from @client`,\n  })\n  .agent('reviewer', {\n    role: `You are a Peer-Reviewer and you do not solve math problems. \n    Check the result from @mathematician and then confirm. Just confirm, no talk.`,\n  })\n  .channel('management', ['mathematician', 'reviewer', 'client'])\n\n// aibitat.onMessage(console.log)\n\nawait aibitat.start({\n  from: 'client',\n  to: 'management',\n  content: 'How much is 2 + 2?',\n})\n\nconsole.log(aibitat.chats)\n```\n\n----------------------------------------\n\nTITLE: Defining and using a custom function in AIbitat\nDESCRIPTION: Example of how to define a custom function and add it to an agent's configuration in AIbitat.\nSOURCE: https://github.com/wladpaiva/aibitat/blob/main/README.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst aibitat = new AIbitat()\n  .agent('...', {functions: ['doSomething']})\n  .function({\n    name: 'doSomething',\n    description: 'Let me do something for you.',\n    parameters: {\n      type: 'object',\n      properties: {},\n    },\n    async handler() {\n      return '...'\n    },\n  })\n```\n\n----------------------------------------\n\nTITLE: Creating a custom plugin for AIbitat\nDESCRIPTION: Example of how to create a custom plugin by implementing the AIbitatPlugin interface.\nSOURCE: https://github.com/wladpaiva/aibitat/blob/main/README.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport {AIbitatPlugin} from 'aibitat'\n\nexport function myPlugin(): AIbitatPlugin {\n  return {\n    name: 'my-plugin',\n    setup(aibitat) {\n      console.log(`setting up my plugin`)\n\n      aibitat.onMessage(({from, to, content}) => {\n        console.log(`${from}: ${content}`)\n      })\n    },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Plugin for AIbitat (TypeScript)\nDESCRIPTION: Shows how to create and use a custom plugin in AIbitat. This example sets up a plugin named 'my-plugin' that can perform actions on the AIbitat instance.\nSOURCE: https://github.com/wladpaiva/aibitat/blob/main/CHANGELOG.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AIbitat } from 'aibitat';\n\nconst aibitat = new AIbitat(...)\n    .use({\n        name: 'my-plugin',\n        setup: (aibitat) => {\n            // do something with the AIbitat instance\n        },\n    });\n```\n\n----------------------------------------\n\nTITLE: Registering a Function in AIbitat (TypeScript)\nDESCRIPTION: Demonstrates how to register a function in AIbitat that can be called from conversations. This example sets up a function to fetch and return release notes from GitHub.\nSOURCE: https://github.com/wladpaiva/aibitat/blob/main/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst aibitat = new AIbitat().function({\n  name: 'unique-function-name',\n  description: 'List of releases of AIbitat and the notes for each release.',\n  parameters: {\n    type: 'object',\n    properties: {},\n  },\n  handler: async () => {\n    const response = await fetch(\n      'https://github.com/wladiston/aibitat/releases',\n    )\n    const html = await response.text()\n    const text = cheerio.load(html).text()\n    return text\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using Web Browsing Plugin in AIbitat (TypeScript)\nDESCRIPTION: Shows how to enable the experimental web browsing plugin in AIbitat. This plugin allows web browsing functionality within the AIbitat instance.\nSOURCE: https://github.com/wladpaiva/aibitat/blob/main/CHANGELOG.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AIbitat } from 'aibitat';\nimport { experimental_webBrowsing } from 'aibitat/plugins';\n\nconst aibitat = new AIbitat(...)\n    .use(experimental_webBrowsing());\n```\n\n----------------------------------------\n\nTITLE: Adding CLI Plugin to AIbitat (TypeScript)\nDESCRIPTION: Demonstrates how to add the CLI plugin to an AIbitat instance. This allows extending the AIbitat instance with CLI functionality.\nSOURCE: https://github.com/wladpaiva/aibitat/blob/main/CHANGELOG.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AIbitat } from 'aibitat';\nimport { cli } from 'aibitat/plugins';\n\nconst aibitat = new AIbitat(...)\n    .use(cli());\n```\n\n----------------------------------------\n\nTITLE: Installing AIbitat using Bun package manager\nDESCRIPTION: Commands to set up a new project and install AIbitat using Bun, a fast JavaScript runtime.\nSOURCE: https://github.com/wladpaiva/aibitat/blob/main/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir my-project\ncd my-project\nbun init\n\n# then install aibitat\nbun install aibitat\n```\n\n----------------------------------------\n\nTITLE: Setting up environment variables for AIbitat\nDESCRIPTION: Instructions to create a .env file and add the OpenAI API key for AIbitat.\nSOURCE: https://github.com/wladpaiva/aibitat/blob/main/README.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nOPENAI_API_KEY=...\n```\n\n----------------------------------------\n\nTITLE: Running AIbitat script using Bun\nDESCRIPTION: Command to execute the AIbitat script using the Bun runtime.\nSOURCE: https://github.com/wladpaiva/aibitat/blob/main/README.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbun run index.ts\n```"
  }
]