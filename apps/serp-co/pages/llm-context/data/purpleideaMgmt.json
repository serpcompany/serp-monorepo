[
  {
    "owner": "purpleidea",
    "repo": "mgmt",
    "content": "TITLE: Importing Modules in MCL\nDESCRIPTION: This snippet demonstrates how to import modules in MCL.  Imports bring external code into the current scope. It showcases importing system, local single-file, local module, and remote module sources.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/docs/language-guide.md#_snippet_8\n\nLANGUAGE: mcl\nCODE:\n```\n# a system module import\n\timport \"fmt\"\n\n\t# a local, single file import (relative path, not a module)\n\timport \"dir1/file.mcl\"\n\n\t# a local, module import (relative path, contents are a module)\n\timport \"dir2/\"\n\n\t# a remote module import (absolute remote path, contents are a module)\n\timport \"git://github.com/purpleidea/mgmt-example1/\"\n```\n\n----------------------------------------\n\nTITLE: Resource Definition in MCL\nDESCRIPTION: This snippet demonstrates how to define a resource in MCL. It creates a file resource at '/tmp/hello' with specified content and permissions. Resources represent idempotent workloads.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/docs/language-guide.md#_snippet_3\n\nLANGUAGE: mcl\nCODE:\n```\nfile \"/tmp/hello\" {\n\t\tcontent => \"world\",\n\t\tmode => \"o=rwx\",\n\t}\n```\n\n----------------------------------------\n\nTITLE: Defining a Resource with Internal Edges in MCL\nDESCRIPTION: This snippet demonstrates defining a 'pkg' resource with internal edges ('Before') pointing to 'File' and 'Svc' resources. It also defines 'file' and 'svc' resources with dependencies ('Depend' and 'Notify') between them. The example uses a conditional inclusion with the Elvis operator and showcases multiple 'Before' properties in the same resource.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/docs/language-guide.md#_snippet_13\n\nLANGUAGE: mcl\nCODE:\n```\n$b = true # for example purposes\nif $b {\n\tpkg \"drbd\" {\n\t\tstate => \"installed\",\n\n\t\t# multiple properties may be used in the same resource\n\t\tBefore => File[\"/etc/drbd.conf\"],\n\t\tBefore => Svc[\"drbd\"],\n\t}\n}\nfile \"/etc/drbd.conf\" {\n\tcontent => \"some config\",\n\n\tDepend => $b ?: Pkg[\"drbd\"],\n\tNotify => Svc[\"drbd\"],\n}\nsvc \"drbd\" {\n\tstate => \"running\",\n}\n```\n\n----------------------------------------\n\nTITLE: Resource Meta Parameters Definition in MCL\nDESCRIPTION: This snippet demonstrates how to define meta parameters for a resource in MCL.  Meta parameters influence how the resource is applied. This example sets 'noop', 'delay', and 'autoedge' meta parameters.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/docs/language-guide.md#_snippet_11\n\nLANGUAGE: mcl\nCODE:\n```\nfile \"/tmp/f1\" {\n\tcontent => \"hello!\\n\",\n\n\tMeta:noop => true,\n\tMeta:delay => $b ?: 42,\n\tMeta:autoedge => false,\n}\n```\n\n----------------------------------------\n\nTITLE: Import Mgmt Engine and Traits Packages in Go\nDESCRIPTION: This code snippet shows the required import statements in Go to access the engine interfaces, helper functions, and base functionality for creating `mgmt` resources. It imports the `engine` and `traits` packages from the `github.com/purpleidea/mgmt` repository.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/docs/resource-guide.md#_snippet_0\n\nLANGUAGE: golang\nCODE:\n```\n\t\"github.com/purpleidea/mgmt/engine\"\n\t\"github.com/purpleidea/mgmt/engine/traits\"\n```\n\n----------------------------------------\n\nTITLE: Including a Class in MCL\nDESCRIPTION: This snippet demonstrates how to include a class in MCL.  Including a class executes the statements within it.  It shows including both parameterless and parameterized classes.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/docs/language-guide.md#_snippet_7\n\nLANGUAGE: mcl\nCODE:\n```\ninclude foo\n\n\tinclude bar(\"hello\", 42)\n\tinclude bar(\"world\", 13) # an include can be called multiple times\n```\n\n----------------------------------------\n\nTITLE: Including a Class with a Scoped Prefix (Nested Class) in MCL\nDESCRIPTION: This snippet demonstrates including a class under a new scoped prefix using the `as` keyword. The captured scope of the class at its definition site are made available in the scope of the include. Variables, functions, and child classes are all exported. Here nested classes are accessed in the include scope.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/docs/language-guide.md#_snippet_21\n\nLANGUAGE: mcl\nCODE:\n```\nimport \"fmt\"\nclass c1 {\n\ttest \"t1\" {}\t# gets pulled out\n\t$x = \"hello\"\t# gets exported\n\n\tclass c0 {\n\t\ttest \"t2\" {}\n\t\t$x = \"goodbye\"\n\t}\n}\ninclude c1 as i1\ninclude i1.c0 as i0\n\ntest \"print0\" {\n\tanotherstr => fmt.printf(\"%s\", $i1.x),\t# hello\n\tonlyshow => [\"AnotherStr\",], # displays nicer\n}\ntest \"print1\" {\n\tanotherstr => fmt.printf(\"%s\", $i0.x),\t# goodbye\n\tonlyshow => [\"AnotherStr\",], # displays nicer\n}\n```\n\n----------------------------------------\n\nTITLE: Chaining Resource Dependencies with Edges in MCL\nDESCRIPTION: This snippet shows how to express dependencies between resources using edges. The '->' operator establishes a chain of dependencies, ensuring that the 'Pkg' resource is processed before the 'File' resource, which is processed before the 'Svc' resource.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/docs/language-guide.md#_snippet_14\n\nLANGUAGE: mcl\nCODE:\n```\nPkg[\"drbd\"] -> File[\"/etc/drbd.conf\"] -> Svc[\"drbd\"]\n```\n\n----------------------------------------\n\nTITLE: Edge Definition in MCL\nDESCRIPTION: This snippet demonstrates how to define an edge between two resources in MCL.  It creates a dependency where File['/tmp/hello'] must be applied before Print['alert4'].  Edges represent dependencies between resources.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/docs/language-guide.md#_snippet_4\n\nLANGUAGE: mcl\nCODE:\n```\nFile[\"/tmp/hello\"] -> Print[\"alert4\"]\n```\n\n----------------------------------------\n\nTITLE: Importing MCL Module\nDESCRIPTION: This code snippet demonstrates how to import an MCL module into your MCL project. Specifically, it shows how to import the `purpleidea` module from a remote Git repository.  The `import` statement is a core feature of the MCL language for including external modules.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/modules/README.md#_snippet_0\n\nLANGUAGE: mcl\nCODE:\n```\nimport \"git://github.com/purpleidea/mgmt/modules/purpleidea/\"\n```\n\n----------------------------------------\n\nTITLE: Conditional Statement (if) in MCL\nDESCRIPTION: This snippet demonstrates the structure of an 'if' statement in the mgmt configuration language (MCL). It shows how to define a conditional block that executes statements based on a boolean expression. The 'else' branch is optional.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/docs/language-guide.md#_snippet_0\n\nLANGUAGE: mcl\nCODE:\n```\nif <conditional> {\n\t\t<statements>\n\t} else {\n\t\t# the else branch is optional for if statements\n\t\t<statements>\n\t}\n```\n\n----------------------------------------\n\nTITLE: Setting GOPATH Environment Variable (Shell)\nDESCRIPTION: This snippet sets the GOPATH environment variable to a custom directory, creating the directory if it doesn't exist and exporting the variable.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/docs/quick-start-guide.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmkdir $HOME/gopath\nexport GOPATH=$HOME/gopath\n```\n\n----------------------------------------\n\nTITLE: Running mgmt with a module path\nDESCRIPTION: This example shows how to run `mgmt` with the `--module-path` option to specify the directory where mgmt should look for modules. This is important when using modules interactively or when running mgmt as a service.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/docs/faq.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nmgmt run lang --module-path '/etc/mgmt/modules/' /etc/mgmt/main.mcl\n```\n\n----------------------------------------\n\nTITLE: Adding GOPATH/bin to PATH (Shell)\nDESCRIPTION: This snippet adds the $GOPATH/bin directory to the $PATH environment variable, making executables installed in that directory accessible from the command line.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/docs/quick-start-guide.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nexport PATH=$PATH:$GOPATH/bin\n```\n\n----------------------------------------\n\nTITLE: Looping over a Map (forkv) in MCL\nDESCRIPTION: This snippet demonstrates how to iterate over a map using a 'forkv' loop in MCL. It shows how to access both the key and value of each entry in the map within the loop's body.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/docs/language-guide.md#_snippet_2\n\nLANGUAGE: mcl\nCODE:\n```\n$map = {0 => \"a\", 1 => \"b\", 2 => \"c\",}\n\tforkv $key, $val in $map {\n\t\t# some statements go here\n\t}\n```\n\n----------------------------------------\n\nTITLE: Parameterized Class Definition in MCL\nDESCRIPTION: This snippet demonstrates how to define a parameterized class in MCL.  Classes can accept arguments. This shows a class named 'bar' with parameters '$a' and '$b'.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/docs/language-guide.md#_snippet_6\n\nLANGUAGE: mcl\nCODE:\n```\nclass bar($a, $b) { # a parameterized class\n\t\t# some statements go here\n\t}\n```\n\n----------------------------------------\n\nTITLE: Implement CheckApply Method for Mgmt Resource in Go\nDESCRIPTION: This Go code demonstrates the `CheckApply` method, the main work function for a `mgmt` resource. It checks the resource's state, applies changes if necessary and `apply` is true, and operates in noop mode when `apply` is false.  It returns a boolean indicating if the state is okay and an error if any occurred.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/docs/resource-guide.md#_snippet_6\n\nLANGUAGE: golang\nCODE:\n```\n// CheckApply does the idempotent work of checking and applying resource state.\nfunc (obj *FooRes) CheckApply(ctx context.Context, apply bool) (bool, error) {\n\t// check the state\n\tif state_is_okay { return true, nil } // done early! :)\n\n\t// state was bad\n\n\tif !apply { return false, nil } // don't apply, we're in noop mode\n\n\tif any_error { return false, err } // anytime there's an err!\n\n\t// do the apply!\n\treturn false, nil // after success applying\n}\n```\n\n----------------------------------------\n\nTITLE: Class Definition in MCL\nDESCRIPTION: This snippet demonstrates how to define a class in MCL. Classes group statements for reuse. This shows a simple class named 'foo'.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/docs/language-guide.md#_snippet_5\n\nLANGUAGE: mcl\nCODE:\n```\nclass foo {\n\t\t# some statements go here\n\t}\n```\n\n----------------------------------------\n\nTITLE: Custom YAML Unmarshalling (golang)\nDESCRIPTION: This code snippet shows how to implement a custom `UnmarshalYAML` method for a resource struct. This is recommended for resources used with the `puppet` compiler and allows for setting default values during YAML unmarshalling. It follows the `go-yaml` Unmarshaler interface.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/docs/resource-guide.md#_snippet_14\n\nLANGUAGE: golang\nCODE:\n```\nUnmarshalYAML(unmarshal func(interface{}) error) error // optional\n```\n\n----------------------------------------\n\nTITLE: Resource Parameter Definition with Elvis Operator in MCL\nDESCRIPTION: This snippet demonstrates how to use the elvis operator (?:) to conditionally define a resource parameter.  It allows specifying a default value if a variable is false.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/docs/language-guide.md#_snippet_10\n\nLANGUAGE: mcl\nCODE:\n```\n$b = true # change me to false and then try editing the file manually\nfile \"/tmp/mgmt-elvis\" {\n\tcontent => $b ?: \"hello world\\n\",\n\tstate => $const.res.file.state.exists,\n}\n```\n\n----------------------------------------\n\nTITLE: Simple Function Example in Go\nDESCRIPTION: This example demonstrates how to create a simple function in Go using the `simple` package. The function `talkingsquare` takes an integer as input, squares it, and returns a string representation of the result. It showcases how to register a function using `simple.ModuleRegister` and how to interact with the `types` library to handle input and output values.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/docs/function-guide.md#_snippet_0\n\nLANGUAGE: golang\nCODE:\n```\npackage simple\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\n\t\"github.com/purpleidea/mgmt/lang/funcs/simple\"\n\t\"github.com/purpleidea/mgmt/lang/types\"\n)\n\n// you must register your functions in init when the program starts up\nfunc init() {\n\t// Example function that squares an int and prints out answer as an str.\n\n\tsimple.ModuleRegister(ModuleName, \"talkingsquare\", &simple.Scaffold{\n\t\tT: types.NewType(\"func(int) str\"), // declare the signature\n\t\tF: func(ctx context.Context, input []types.Value) (types.Value, error) {\n\t\t\ti := input[0].Int() // get first arg as an int64\n\t\t\t// must return the above specified value\n\t\t\treturn &types.StrValue{\n\t\t\t\tV: fmt.Sprintf(\"%d^2 is %d\", i, i * i),\n\t\t\t}, nil // no serious errors occurred\n\t\t},\n\t})\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Puppet Configuration File\nDESCRIPTION: This example demonstrates a sample `puppet.conf` file used to configure Puppet's runtime options when running with `mgmt`. It includes settings for the server and vardir.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/docs/puppet-guide.md#_snippet_6\n\nLANGUAGE: puppet\nCODE:\n```\n[main]\nserver=mgmt-master.example.net\nvardir=/var/lib/mgmt/puppet\n```\n\n----------------------------------------\n\nTITLE: Running mgmt with Puppet Configuration\nDESCRIPTION: This command shows how to run `mgmt` with a specific Puppet manifest and a custom Puppet configuration file. The `--puppet-conf` option allows specifying a `puppet.conf` file to customize Puppet's runtime options.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/docs/puppet-guide.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmgmt run puppet --puppet /opt/my-manifest.pp --puppet-conf /etc/mgmt/puppet.conf\n```\n\n----------------------------------------\n\nTITLE: Looping over a List (for) in MCL\nDESCRIPTION: This snippet demonstrates how to iterate over a list using a 'for' loop in MCL. It shows how to access both the index and value of each element in the list within the loop's body.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/docs/language-guide.md#_snippet_1\n\nLANGUAGE: mcl\nCODE:\n```\n$list = [\"a\", \"b\", \"c\",]\n\tfor $index, $value in $list {\n\t\t# some statements go here\n\t}\n```\n\n----------------------------------------\n\nTITLE: Enabling Prometheus in Mgmt\nDESCRIPTION: This command demonstrates how to enable Prometheus support in Mgmt and specify a custom listening address and port. The `--prometheus` flag enables the Prometheus exporter, and `--prometheus-listen` sets the interface and port for Prometheus to scrape.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/docs/prometheus.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./mgmt r --prometheus --prometheus-listen :45001\n```\n\n----------------------------------------\n\nTITLE: mcl Code for Mixed Graph Example 2 (Merged Vertex)\nDESCRIPTION: This MCL code defines a `noop` resource with a name prefixed by `puppet_` to enable merging with a corresponding Puppet class. It also creates file resources and defines a dependency from the noop resource to a file resource.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/docs/puppet-guide.md#_snippet_9\n\nLANGUAGE: mcl\nCODE:\n```\n# lang\nnoop \"puppet_handover_to_mgmt\" {}\nfile \"/tmp/mgmt_dir/\" { state => \"present\" }\nfile \"/tmp/mgmt_dir/a\" { state => \"present\" }\n\nNoop[\"puppet_handover_to_mgmt\"] -> File[\"/tmp/mgmt_dir/\"]\n```\n\n----------------------------------------\n\nTITLE: Execute Command in Development Docker Container (Shell)\nDESCRIPTION: This command demonstrates how to execute arbitrary commands within the `mgmt` development Docker container. It leverages the `docker/scripts/exec-development` script for convenience.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/docs/development.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ndocker/scripts/exec-development test/test-shell.sh load0.sh\n```\n\n----------------------------------------\n\nTITLE: Cmp Example Golang\nDESCRIPTION: Illustrates an example implementation of the Cmp function for a FooRes resource. It checks if the input resource is of the same type and then compares specific properties. It returns an error if properties differ or nil if they are identical.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/docs/resource-guide.md#_snippet_10\n\nLANGUAGE: golang\nCODE:\n```\n// Cmp compares two resources and returns if they are equivalent.\nfunc (obj *FooRes) Cmp(r engine.Res) error {\n\t// we can only compare FooRes to others of the same resource kind\n\tres, ok := r.(*FooRes)\n\tif !ok {\n\t\treturn fmt.Errorf(\"not a %s\", obj.Kind())\n\t}\n\n\tif obj.Whatever != res.Whatever {\n\t\treturn fmt.Errorf(\"the Whatever param differs\")\n\t}\n\tif obj.Flag != res.Flag {\n\t\treturn fmt.Errorf(\"the Flag param differs\")\n\t}\n\n\treturn nil // they must match!\n}\n```\n\n----------------------------------------\n\nTITLE: Run mgmt Command in Development Docker Container (Shell)\nDESCRIPTION: This command runs a specific `mgmt` command within the Docker container, using `docker/scripts/exec-development` to set up the environment.  It shows how to execute the `mgmt run` command with specific arguments and configuration files.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/docs/development.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ndocker/scripts/exec-development ./mgmt run --tmp-prefix lang examples/lang/load0.mcl\n```\n\n----------------------------------------\n\nTITLE: Method Receiver Naming Example in Go\nDESCRIPTION: Shows the preferred naming convention for method receiver variables in Go, recommending the use of `obj` for consistency and readability across the project. This simplifies code copying and review by providing a consistent naming pattern.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/docs/style-guide.md#_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\n// Bar does a thing, and returns the number of baz results found in our\ndatabase.\nfunc (obj *Foo) Bar(baz string) int {\n\tif len(obj.s) > 0 {\n\t\treturn strings.Count(obj.s, baz)\n\t}\n\treturn -1\n}\n```\n\n----------------------------------------\n\nTITLE: Installing ffrank-mgmtgraph Puppet Module\nDESCRIPTION: This command installs the `ffrank-mgmtgraph` Puppet module, which is essential for translating Puppet manifests into a format compatible with mgmt. This module should be installed on the machine running mgmt.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/docs/puppet-guide.md#_snippet_0\n\nLANGUAGE: puppet\nCODE:\n```\npuppet module install ffrank-mgmtgraph\n```\n\n----------------------------------------\n\nTITLE: Implement Cleanup Method for Mgmt Resource in Go\nDESCRIPTION: This Go snippet shows the `Cleanup` method for a `mgmt` resource. It is used to release resources and close persistent connections opened during initialization.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/docs/resource-guide.md#_snippet_5\n\nLANGUAGE: golang\nCODE:\n```\n// Cleanup is run by the engine to clean up after the resource is done.\nfunc (obj *FooRes) Cleanup() error {\n\terr := obj.conn.Close() // close some internal connection\n\tobj.someMap = nil       // free up some large data structure from memory\n\treturn err\n}\n```\n\n----------------------------------------\n\nTITLE: Function Stream Example in Go\nDESCRIPTION: This example illustrates the `Stream` method for a `mgmt` function in Go. The `Stream` method is where the actual work is done, receiving input values on a channel, processing them, and sending output values to another channel. The example showcases proper handling of context cancellation, channel closure using `defer`, and error handling.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/docs/function-guide.md#_snippet_4\n\nLANGUAGE: golang\nCODE:\n```\n// Stream returns the single value that was generated and then closes.\nfunc (obj *FooFunc) Stream(ctx context.Context) error {\n\tdefer close(obj.init.Output) // the sender closes\n\tvar result string\n\tfor {\n\t\tselect {\n\t\tcase input, ok := <-obj.init.Input:\n\t\t\tif !ok {\n\t\t\t\treturn nil // can't output any more\n\t\t\t}\n\n\t\t\tix := input.Struct()[\"a\"].Int()\n\t\t\tif ix < 0 {\n\t\t\t\treturn fmt.Errorf(\"we can't deal with negatives\")\n\t\t\t}\n\n\t\t\tresult = fmt.Sprintf(\"the input is: %d\", ix)\n\n\t\tcase <-ctx.Done():\n\t\t\treturn nil\n\t\t}\n\n\t\tselect {\n\t\tcase obj.init.Output <- &types.StrValue{\n\t\t\tV: result,\n\t\t}:\n\n\t\tcase <-ctx.Done():\n\t\t\treturn nil\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: File resource with state defined\nDESCRIPTION: This example shows how to create a file resource with both `content` and `state` specified.  The `state` parameter ensures that the file will be created if it doesn't exist. Without `state`, the resource will only update the `content` if the file already exists.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/docs/faq.md#_snippet_3\n\nLANGUAGE: mcl\nCODE:\n```\nfile \"/tmp/foo\" {\n\tstate => $const.res.file.state.exists,\n\tcontent => \"hello world\\n\",\n}\n```\n\n----------------------------------------\n\nTITLE: Implement Default Method for Mgmt Resource in Go\nDESCRIPTION: This Go snippet illustrates the implementation of the `Default` method for a `mgmt` resource. It returns a populated resource struct with sensible defaults, specifically avoiding zero values if a more appropriate default exists.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/docs/resource-guide.md#_snippet_2\n\nLANGUAGE: golang\nCODE:\n```\n// Default returns some sensible defaults for this resource.\nfunc (obj *FooRes) Default() engine.Res {\n\treturn &FooRes{\n\t\tAnswer: 42, // sometimes, defaults shouldn't be the zero value\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Avoiding Puppet File Backup Warning\nDESCRIPTION: This command demonstrates how to explicitly set the `backup` parameter to `false` in a Puppet file resource to avoid warnings related to Puppet's default file backup behavior. This is necessary because mgmt does not support Puppet's file bucket functionality.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/docs/puppet-guide.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npuppet mgmtgraph print --code 'file { \"/tmp/mgmt-test\": backup => false }'\n```\n\n----------------------------------------\n\nTITLE: Setting Default File Backup to False in Puppet\nDESCRIPTION: This Puppet code snippet demonstrates how to set a resource default for the `backup` parameter of the `File` type to `false`. This ensures that no backup copies are created, aligning the behavior with mgmt's capabilities and avoiding warnings.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/docs/puppet-guide.md#_snippet_4\n\nLANGUAGE: puppet\nCODE:\n```\nFile { backup => false }\n```\n\n----------------------------------------\n\nTITLE: Example UnmarshalYAML Implementation (golang)\nDESCRIPTION: This example demonstrates a complete implementation of the `UnmarshalYAML` method. It utilizes indirection to avoid infinite recursion, retrieves default values, unmarshals the YAML data, and restores the struct with type conversion. This implementation handles setting defaults before unmarshalling.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/docs/resource-guide.md#_snippet_15\n\nLANGUAGE: golang\nCODE:\n```\n// UnmarshalYAML is the custom unmarshal handler for this struct. It is\n// primarily useful for setting the defaults.\nfunc (obj *FooRes) UnmarshalYAML(unmarshal func(interface{}) error) error {\n\ttype rawRes FooRes // indirection to avoid infinite recursion\n\n\tdef := obj.Default()     // get the default\n\tres, ok := def.(*FooRes) // put in the right format\n\tif !ok {\n\t\treturn fmt.Errorf(\"could not convert to FooRes\")\n\t}\n\traw := rawRes(*res) // convert; the defaults go here\n\n\tif err := unmarshal(&raw); err != nil {\n\t\treturn err\n\t}\n\n\t*obj = FooRes(raw) // restore from indirection with type conversion!\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Running mgmt with Local Puppet Manifest\nDESCRIPTION: This command compiles a local Puppet manifest file using mgmt, similar to `puppet apply`. The file specified by `/path/to/my/manifest.pp` will be processed to configure the system.  Puppet must be installed and accessible in mgmt's search path for this to function correctly.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/docs/documentation.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmgmt run puppet --puppet /path/to/my/manifest.pp\n```\n\n----------------------------------------\n\nTITLE: Watch Example Golang\nDESCRIPTION: Illustrates an example implementation of the Watch function for a FooRes resource. It includes setup, running notification, event handling, and shutdown logic within a select statement.  It also includes error handling.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/docs/resource-guide.md#_snippet_8\n\nLANGUAGE: golang\nCODE:\n```\n// Watch is the listener and main loop for this resource.\nfunc (obj *FooRes) Watch(ctx context.Context) error {\n\t// setup the Foo resource\n\tvar err error\n\tif err, obj.foo = OpenFoo(); err != nil {\n\t\treturn err // we couldn't startup\n\t}\n\tdefer obj.whatever.CloseFoo() // shutdown our Foo\n\n\t// notify engine that we're running\n\tobj.init.Running() // when started, notify engine that we're running\n\n\tvar send = false // send event?\n\tfor {\n\t\tselect {\n\t\t// the actual events!\n\t\tcase event := <-obj.foo.Events:\n\t\t\tif is_an_event {\n\t\t\t\tsend = true\n\t\t\t}\n\n\t\t// event errors\n\t\tcase err := <-obj.foo.Errors:\n\t\t\treturn err // will cause a retry or permanent failure\n\n\t\tcase <-ctx.Done(): // signal for shutdown request\n\t\t\treturn nil\n\t\t}\n\n\t\t// do all our event sending all together to avoid duplicate msgs\n\t\tif send {\n\t\t\tsend = false\n\t\t\tobj.init.Event()\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Generating FuncValue implementations in Golang\nDESCRIPTION: This snippet illustrates how to use a function generator in Golang to create multiple `FuncValue` implementations from a single function generator. The generator returns a function with the signature `func([]types.Value) (types.Value, error)`, which is the expected type for `FuncValue`. It allows for code reuse by passing inputs to build individual functions.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/docs/function-guide.md#_snippet_7\n\nLANGUAGE: golang\nCODE:\n```\nfunc([]types.Value) (types.Value, error)\n```\n\n----------------------------------------\n\nTITLE: Implementing CheckApply with Separate Check and Apply Functions in Go\nDESCRIPTION: This code snippet demonstrates how the `CheckApply` method can be implemented using separate `check` and `apply` functions in Go. It shows how to handle different scenarios, such as checking the state, applying changes if needed, and returning appropriate error codes.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/docs/resource-guide.md#_snippet_17\n\nLANGUAGE: Go\nCODE:\n```\nfunc (obj *FooRes) CheckApply(ctx context.Context, apply bool) (bool, error) {\n\t// my private split implementation of check and apply\n\tif c, err := obj.check(ctx); err != nil {\n\t\treturn false, err // we errored\n\t} else if c {\n\t\treturn true, nil // state was good!\n\t}\n\n\tif !apply {\n\t\treturn false, nil // state needs fixing, but apply is false\n\t}\n\n\terr := obj.apply(ctx) // errors if failure or unable to apply\n\n\treturn false, err // always return false, with an optional error\n}\n```\n\n----------------------------------------\n\nTITLE: Init Struct Definition - Golang\nDESCRIPTION: This code snippet defines the structure of the Init struct, which is passed to the Init method. It contains fields such as Hostname, Input, Output, World, Debug, and Logf, allowing the function to interact with the engine and access necessary resources and information. The Input channel receives input values, and the Output channel is used to send output values.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/docs/language-guide.md#_snippet_27\n\nLANGUAGE: golang\nCODE:\n```\ntype Init struct {\n\tHostname string // uuid for the host\n\tInput  chan types.Value // Engine will close `input` chan\n\tOutput chan types.Value // Stream must close `output` chan\n\tWorld  resources.World\n\tDebug  bool\n\tLogf   func(format string, v ...interface{})\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing a ListValue of Strings in Golang\nDESCRIPTION: This snippet shows how to create a `ListValue` in Golang containing strings for the mgmt configuration management tool.  It is necessary to define the type of the list contents using `types.NewType(\"[]str\")` and populate the `V` field with `StrValue` objects. Failure to correctly specify the type and contents may cause a panic.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/docs/language-guide.md#_snippet_32\n\nLANGUAGE: golang\nCODE:\n```\nsomeListOfStrings := &types.ListValue{\n\tT: types.NewType(\"[]str\"),\t# must match the contents!\n\tV: []types.Value{\n\t\t&types.StrValue{V: \"a\"},\n\t\t&types.StrValue{V: \"bb\"},\n\t\t&types.StrValue{V: \"ccc\"},\n\t},\n}\n```\n\n----------------------------------------\n\nTITLE: Configure mgmt options with systemd - Bash\nDESCRIPTION: This example configures `mgmt` options using systemd by creating a directory for drop-in configuration files and then creating a file `env.conf` to set environment variables for `mgmt`. It sets variables for the seeds, converged timeout, and maximum runtime. Finally, it reloads the systemd daemon.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/docs/documentation.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nsudo mkdir -p /etc/systemd/system/mgmt.service.d/\n\ncat > /etc/systemd/system/mgmt.service.d/env.conf <<EOF\n# Environment variables:\nMGMT_SEEDS=http://127.0.0.1:2379\nMGMT_CONVERGED_TIMEOUT=-1\nMGMT_MAX_RUNTIME=0\n\n# Other CLI options if necessary.\n#OPTS=\"--max-runtime=0\"\nEOF\n\nsudo systemctl daemon-reload\n```\n\n----------------------------------------\n\nTITLE: Defining a Parameterized Class in MCL (Inferred Types)\nDESCRIPTION: This snippet demonstrates a class 'bar' that accepts two parameters, $a and $b, without specifying their types. The types are inferred by the type unification algorithm during inclusion. This allows the class to be used with different types for $a and $b, if possible.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/docs/language-guide.md#_snippet_16\n\nLANGUAGE: mcl\nCODE:\n```\nclass bar($a, $b) {\n\t# some statements go here\n}\n```\n\n----------------------------------------\n\nTITLE: Define a Mgmt Resource Struct in Go\nDESCRIPTION: This Go code snippet demonstrates the structure of a typical resource in `mgmt`. It includes embedding the `Base` trait for default methods, optional traits like `Groupable` and `Refreshable`, a reference to the `Init` struct, public API fields with YAML and language tags, and private fields.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/docs/resource-guide.md#_snippet_1\n\nLANGUAGE: golang\nCODE:\n```\ntype FooRes struct {\n\ttraits.Base // add the base methods without re-implementation\n\ttraits.Groupable\n\ttraits.Refreshable\n\n\tinit *engine.Init\n\n\tWhatever string `lang:\"whatever\" yaml:\"whatever\"` // you pick!\n\tBaz      bool   `lang:\"baz\" yaml:\"baz\"`           // something else\n\n\tsomething string // some private field\n}\n```\n\n----------------------------------------\n\nTITLE: AutoEdges Function Definition Golang\nDESCRIPTION: Defines the AutoEdges function signature, which returns a struct that implements the AutoEdge interface.  This struct is used to match other resources that might be relevant dependencies for this resource.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/docs/resource-guide.md#_snippet_12\n\nLANGUAGE: golang\nCODE:\n```\nAutoEdges() (engine.AutoEdge, error)\n```\n\n----------------------------------------\n\nTITLE: Variable Reuse Examples in Go\nDESCRIPTION: Presents different ways to handle variable reuse in Go functions, recommending the use of new variables instead of modifying input arguments directly. This avoids potential confusion and ensures that the original input remains unchanged.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/docs/style-guide.md#_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\nMyNotIdealFunc(s string, b bool) string {\n\tif !b {\n\t\treturn s + \"hey\"\n\t}\n\ts = strings.Replace(s, \"blah\", \"\", -1) // not ideal (reuse of `s` var)\n\treturn s\n}\n\nMyOkayFunc(s string, b bool) string {\n\tif !b {\n\t\treturn s + \"hey\"\n\t}\n\ts2 := strings.Replace(s, \"blah\", \"\", -1) // doesn't reuse `s` variable\n\treturn s2\n}\n\nMyGreatFunc(s string, b bool) string {\n\tif !b {\n\t\treturn s + \"hey\"\n\t}\n\treturn strings.Replace(s, \"blah\", \"\", -1) // even cleaner\n}\n```\n\n----------------------------------------\n\nTITLE: Info Method Implementation with Unification Variables - Golang\nDESCRIPTION: This code snippet shows an example of implementing the Info method with unification variables in the function signature. The signature includes variables like `?1`, `?2`, and `?3`, allowing the function to work with different types based on the context. Note that functions with unification variables cannot be used inside templates.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/docs/language-guide.md#_snippet_25\n\nLANGUAGE: golang\nCODE:\n```\nfunc (obj *FooFunc) Info() *interfaces.Info {\n\treturn &interfaces.Info{\n\t\tSig: types.NewType(\"func(a ?1, b ?2, foo [?3]) ?1\"),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing a BoolValue in Golang\nDESCRIPTION: This snippet demonstrates how to initialize a `BoolValue` in Golang for the mgmt configuration management tool. It creates a `types.BoolValue` and sets its `V` field to `true`. This is the correct way to initialize simple types like booleans, strings, integers, and floats.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/docs/language-guide.md#_snippet_31\n\nLANGUAGE: golang\nCODE:\n```\nsomeBool := &types.BoolValue{V: true}\n```\n\n----------------------------------------\n\nTITLE: Running mgmt with Inline Puppet Manifest\nDESCRIPTION: This command compiles an ad-hoc Puppet manifest directly from the command line, similar to `puppet apply -e`. In this example, a file resource is created to ensure that `/etc/ntp.conf` exists. Puppet must be installed and accessible in mgmt's search path for this to function correctly.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/docs/documentation.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmgmt run puppet --puppet 'file { \"/etc/ntp.conf\": ensure => file }'\n```\n\n----------------------------------------\n\nTITLE: Resource Meta Parameters Struct Definition in MCL\nDESCRIPTION: This snippet demonstrates how to define a resource's meta parameters using a struct in MCL. Using a struct allows combining related meta parameters and reusing values. Note a full struct must be provided; partial structs are not currently supported.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/docs/language-guide.md#_snippet_12\n\nLANGUAGE: mcl\nCODE:\n```\nfile \"/tmp/f1\" {\n\tcontent => \"hello!\\n\",\n\n\tMeta => $b ?: struct{\n\t\tnoop => false,\n\t\tretry => -1,\n\t\tdelay => 0,\n\t\tpoll => 5,\n\t\tlimit => 4.2,\n\t\tburst => 3,\n\t\tsema => [\"foo:1\", \"bar:3\",],\n\t\tautoedge => true,\n\t\tautogroup => false,\n\t},\n}\n```\n\n----------------------------------------\n\nTITLE: If Statement Example - MCL\nDESCRIPTION: This code snippet shows an example of an `if` statement in MCL. The `if` statement takes a boolean condition and can have one or two branches, each containing statements. Unlike the `if` expression, the `if` statement does not return a value but produces output in the form of resources and edges.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/docs/language-guide.md#_snippet_30\n\nLANGUAGE: mcl\nCODE:\n```\n# this is an if statement, and in this scenario the else branch was omitted\n$b = true\nif $b {\n\tfile \"/tmp/hello\" {\n\t\tcontent => \"world\",\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Watch Function Definition Golang\nDESCRIPTION: Defines the Watch function signature, which is the main loop for a mgmt resource. It receives a context and returns an error. The function monitors the resource state and sends messages when changes are detected.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/docs/resource-guide.md#_snippet_7\n\nLANGUAGE: golang\nCODE:\n```\nWatch(ctx context.Context) error\n```\n\n----------------------------------------\n\nTITLE: Registering a Resource with the Engine (golang)\nDESCRIPTION: This code snippet demonstrates how to register a resource with the mgmt engine, which is necessary for the engine to find, encode, and decode the resource. It uses the `engine.RegisterResource` function, providing a resource kind (lowercase) and a factory function that returns a pointer to the resource struct.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/docs/resource-guide.md#_snippet_13\n\nLANGUAGE: golang\nCODE:\n```\nfunc init() { // special golang method that runs once\n\t// set your resource kind and struct here (the kind must be lower case)\n\tengine.RegisterResource(\"foo\", func() engine.Res { return &FooRes{} })\n}\n```\n\n----------------------------------------\n\nTITLE: Info Method Implementation Example - Golang\nDESCRIPTION: This code snippet provides an example of implementing the Info method. It creates a new Info struct and sets the Sig field to a new type representing the function's signature. This example shows how to define a function signature that takes a string and an integer as input and returns a float.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/docs/language-guide.md#_snippet_24\n\nLANGUAGE: golang\nCODE:\n```\nfunc (obj *FooFunc) Info() *interfaces.Info {\n\treturn &interfaces.Info{\n\t\tSig: types.NewType(\"func(a str, b int) float\"),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Stream Method Signature Definition - Golang\nDESCRIPTION: This code snippet defines the signature of the Stream method, which is part of the Func interface. The Stream method is called by the function engine to start accepting input and producing output. It takes a context.Context as input and returns an error if the stream encounters an issue.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/docs/language-guide.md#_snippet_28\n\nLANGUAGE: golang\nCODE:\n```\nStream(context.Context) error\n```\n\n----------------------------------------\n\nTITLE: Puppet Code for Mixed Graph Example 2 (Merged Vertex)\nDESCRIPTION: This Puppet code defines an empty class with a name prefixed by `mgmt_` to enable merging with a corresponding MCL noop resource. It creates file resources and defines a dependency from a file resource to the class.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/docs/puppet-guide.md#_snippet_10\n\nLANGUAGE: puppet\nCODE:\n```\n# puppet\nclass mgmt_handover_to_mgmt {}\ninclude mgmt_handover_to_mgmt\n\nfile { \"/tmp/puppet_dir\": ensure => \"directory\" }\nfile { \"/tmp/puppet_dir/a\": ensure => \"file\" }\n\nFile[\"/tmp/puppet_dir/a\"] -> Class[\"mgmt_handover_to_mgmt\"]\n```\n\n----------------------------------------\n\nTITLE: Info Struct Definition - Golang\nDESCRIPTION: This code snippet defines the structure of the Info struct, which is returned by the Info() method. It includes the Sig field, which represents the signature of the function and must be of KindFunc type. This ensures that the function's type is properly defined and recognized by the mgmt function engine.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/docs/language-guide.md#_snippet_23\n\nLANGUAGE: golang\nCODE:\n```\ntype Info struct {\n\tSig  *types.Type // the signature of the function, must be KindFunc\n}\n```\n\n----------------------------------------\n\nTITLE: Function Registration Example in Go\nDESCRIPTION: This example demonstrates how to register a function with the `mgmt` engine in Go.  The registration ensures that the function can be found, encoded, and decoded. The `funcs.Register` function is used to register the function, providing the function name and a function that returns a new instance of the function struct.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/docs/function-guide.md#_snippet_5\n\nLANGUAGE: golang\nCODE:\n```\nimport \"github.com/purpleidea/mgmt/lang/funcs\"\n\nfunc init() { // special golang method that runs once\n\tfuncs.Register(\"foo\", func() interfaces.Func { return &FooFunc{} })\n}\n```\n\n----------------------------------------\n\nTITLE: Init Method Signature Definition - Golang\nDESCRIPTION: This code snippet defines the signature of the Init method, which is part of the Func interface. The Init method is called by the function graph engine to create an implementation of the function, receiving an Init struct as input and returning an error if initialization fails.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/docs/language-guide.md#_snippet_26\n\nLANGUAGE: golang\nCODE:\n```\nInit(*Init) error\n```\n\n----------------------------------------\n\nTITLE: Implement Init Method for Mgmt Resource in Go\nDESCRIPTION: This Go code demonstrates the `Init` method, which initializes the `mgmt` resource. It saves the `engine.Init` pointer for later use and performs resource-specific initialization, returning an error if anything fails.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/docs/resource-guide.md#_snippet_4\n\nLANGUAGE: golang\nCODE:\n```\n// Init initializes the Foo resource.\nfunc (obj *FooRes) Init(init *engine.Init) error\n\tobj.init = init // save for later\n\n\t// run the resource specific initialization, and error if anything fails\n\tif some_error {\n\t\treturn err // something went wrong!\n\t}\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Method Receiver Pointer Example in Go\nDESCRIPTION: Demonstrates the recommended practice of using pointer receivers for methods on structs in Go.  Using pointer receivers makes it easier to merge future changes that mutate the state without causing unintended copies of the struct.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/docs/style-guide.md#_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\ntype Foo struct {\n\tWhatever string\n\t// ...\n}\n\n// Bar is implemented correctly as a pointer on Foo.\nfunc (obj *Foo) Bar(baz string) int {\n\t// ...\n}\n\n// Bar is implemented *incorrectly* without a pointer to Foo.\nfunc (obj Foo) Bar(baz string) int {\n\t// ...\n}\n```\n\n----------------------------------------\n\nTITLE: Function Info Example in Go\nDESCRIPTION: This example shows how to implement the `Info` method for a `mgmt` function in Go. The `Info` method returns a struct containing information about the function, such as whether it's pure and its signature. This information is used by the compiler for type checking and optimization.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/docs/function-guide.md#_snippet_2\n\nLANGUAGE: golang\nCODE:\n```\nfunc (obj *FooFunc) Info() *interfaces.Info {\n\treturn &interfaces.Info{\n\t\tPure: true,\n\t\tSig:  types.NewType(\"func(a int) str\"),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Define Mgmt Handover and Handback Classes - Puppet\nDESCRIPTION: These classes define the basic structure for managing the handover and handback processes. They might include custom logic or resource management depending on the specific requirements of the mgmt project. Including both classes ensures they are part of the overall configuration.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/docs/puppet-guide.md#_snippet_12\n\nLANGUAGE: puppet\nCODE:\n```\nclass mgmt_handover {}\nclass mgmt_handback {}\n\ninclude mgmt_handover, mgmt_handback\n```\n\n----------------------------------------\n\nTITLE: Module Function Registration in Go\nDESCRIPTION: This example shows how to register a function within a built-in module in the `mgmt` engine using Go. The `funcs.ModuleRegister` function is used to register the function, specifying the module name, function name, and a function that returns a new instance of the function struct.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/docs/function-guide.md#_snippet_6\n\nLANGUAGE: golang\nCODE:\n```\n// moduleName is already set to \"math\" by the math package. Do this in `init`.\nfuncs.ModuleRegister(moduleName, \"cos\", func() interfaces.Func {\n\treturn &CosFunc{}\n})\n```\n\n----------------------------------------\n\nTITLE: Export Meta-Parameter: Exporting and Using File Resource Data in MCL\nDESCRIPTION: This snippet shows how to use the `Export` meta-parameter in an MCL file resource definition to specify that its data should be exported to specific hosts, while also using it locally.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/docs/documentation.md#_snippet_6\n\nLANGUAGE: mcl\nCODE:\n```\nfile \"/tmp/foo\" {\n\tstate => \"exists\",\n\tcontent => \"i'm exported AND i'm used here\\n\",\n\n\tMeta:export => [\"h1\",],\n}\n\n```\n\n----------------------------------------\n\nTITLE: Function Declaration: WithError\nDESCRIPTION: Defines a function `WithError` that takes a string as input and returns a string and an error. This is a common pattern for error handling in Go.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/lang/funcs/funcgen/fixtures/func_base.txt#_snippet_8\n\nLANGUAGE: Go\nCODE:\n```\nfunc WithError(s string) (string, error)\n```\n\n----------------------------------------\n\nTITLE: If Expression Example - MCL\nDESCRIPTION: This code snippet provides an example of an `if` expression in MCL. The `if` expression takes a boolean condition and must have two branches (then and else), each containing a single expression. The expression returns the value of the executed branch.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/docs/language-guide.md#_snippet_29\n\nLANGUAGE: mcl\nCODE:\n```\n# this is an if expression, and both branches must exist\n$b = true\n$x = if $b {\n\t42\n} else {\n\t-13\n}\n```\n\n----------------------------------------\n\nTITLE: Define Important Stuff Class - Puppet\nDESCRIPTION: This class manages the creation of a directory structure, specifically `/tmp/mgmt_dir/puppet_subtree`. The `ensure => \"directory\"` attribute ensures that the specified path exists as a directory. This could represent setting up critical file resources.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/docs/puppet-guide.md#_snippet_13\n\nLANGUAGE: puppet\nCODE:\n```\nclass important_stuff {\n\tfile { \"/tmp/mgmt_dir/puppet_subtree\":\n\t\tensure => \"directory\"\n\t}\n\t# ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implement Validate Method for Mgmt Resource in Go\nDESCRIPTION: This Go snippet shows the `Validate` method implementation for a `mgmt` resource. It checks if the resource's populated struct is a valid representation and returns an error if it does not conform to specifications.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/docs/resource-guide.md#_snippet_3\n\nLANGUAGE: golang\nCODE:\n```\n// Validate reports any problems with the struct definition.\nfunc (obj *FooRes) Validate() error {\n\tif obj.Answer != 42 { // validate whatever you want\n\t\treturn fmt.Errorf(\"expected an answer of 42\")\n\t}\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Compile mgmt with multiple flags - Bash\nDESCRIPTION: This command compiles mgmt with multiple features disabled. It combines the \"noaugeas\", \"novirt\", and \"nodocker\" tags by setting the GOTAGS environment variable to a space-separated list before running the `make build` command.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/docs/documentation.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nGOTAGS=\"noaugeas novirt nodocker\" make build\n```\n\n----------------------------------------\n\nTITLE: Running mgmt for type-checking only\nDESCRIPTION: This example shows how to use the `--only-unify` option to perform only type checking with the `mgmt run` command. This is useful for verifying the correctness of the code without executing any resource management actions.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/docs/faq.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./mgmt run --tmp-prefix lang --only-unify examples/lang/hello0.mcl\n```\n\n----------------------------------------\n\nTITLE: Defining a Parameterized Class in MCL (Static and Inferred Types)\nDESCRIPTION: This code shows a class 'baz' with a mix of statically defined and inferred types. The parameter '$a' is explicitly defined as a string (str), while the type of '$b' will be inferred during inclusion.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/docs/language-guide.md#_snippet_17\n\nLANGUAGE: mcl\nCODE:\n```\nclass baz($a str, $b) {\n\t# some statements go here\n}\n```\n\n----------------------------------------\n\nTITLE: String Interpolation Type Error Example\nDESCRIPTION: Illustrates a type unification error with string interpolation where an integer is implicitly converted to a string. This snippet showcases the error and provides a working solution by explicitly defining the variable as a string.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/docs/faq.md#_snippet_13\n\nLANGUAGE: mcl\nCODE:\n```\n$num = 42\nprint \"hello\" {\n\tmsg => \"My favourite number is ${num}\",\n}\n```\n\n----------------------------------------\n\nTITLE: Compile mgmt without libvirt - Bash\nDESCRIPTION: This command compiles mgmt without libvirt support by setting the GOTAGS environment variable to \"novirt\" before running the make build command. This is useful for environments where libvirt is not required or causes conflicts.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/docs/documentation.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nGOTAGS=novirt make build\n```\n\n----------------------------------------\n\nTITLE: Running mgmt with a timeout\nDESCRIPTION: This example demonstrates how to run `mgmt` with the `--converged-timeout` flag to shut down after a specified period of inactivity. This allows for on-demand or `cron`-based execution of `mgmt` instead of continuous running.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/docs/faq.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./mgmt run lang examples/lang/hello0.mcl --converged-timeout=5\n```\n\n----------------------------------------\n\nTITLE: Dollar Meta-Parameter: Catching Incorrect Variable Usage in MCL\nDESCRIPTION: This snippet illustrates how the `Dollar` meta-parameter helps prevent errors when using variables in MCL code by ensuring proper interpolation with curly braces.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/docs/documentation.md#_snippet_3\n\nLANGUAGE: mcl\nCODE:\n```\n$foo = \"/tmp/file1\"\nfile \"$foo\" {} # incorrect!\n\n```\n\n----------------------------------------\n\nTITLE: Info Method Signature Definition - Golang\nDESCRIPTION: This code snippet defines the signature of the Info method required for the Func interface. The Info method returns a pointer to an Info struct containing the function's signature, represented as a types.Type. This is a crucial step in defining a function for the mgmt function engine.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/docs/language-guide.md#_snippet_22\n\nLANGUAGE: golang\nCODE:\n```\nInfo() *Info\n```\n\n----------------------------------------\n\nTITLE: Cmp Function Definition Golang\nDESCRIPTION: Defines the Cmp function signature, which compares two resources and returns whether they are identical. It takes another resource as input and returns an error if they are different, or nil if they are identical.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/docs/resource-guide.md#_snippet_9\n\nLANGUAGE: golang\nCODE:\n```\nCmp(engine.Res) error\n```\n\n----------------------------------------\n\nTITLE: UIDs Function Definition Golang\nDESCRIPTION: Defines the UIDs function signature, which returns a list of ResUID interfaces.  This interface represents the particular resource uniquely and is used to add edge dependencies between resources that utilize the Edgeable trait.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/docs/resource-guide.md#_snippet_11\n\nLANGUAGE: golang\nCODE:\n```\nUIDs() []engine.ResUID\n```\n\n----------------------------------------\n\nTITLE: Installing augeas and libvirt development packages on Debian\nDESCRIPTION: This example shows how to install the development packages for augeas and libvirt on a Debian system using the `apt` package manager. These dependencies are required for certain features of `mgmt` to work.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/docs/faq.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\napt install libvirt-dev libaugeas-dev\n```\n\n----------------------------------------\n\nTITLE: Building Mgmt with Docker (Shell)\nDESCRIPTION: This snippet uses Docker to build and run mgmt, extracting the binary and making it executable.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/docs/quick-start-guide.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngit clone --recursive https://github.com/purpleidea/mgmt/\ncd mgmt\ndocker build -t mgmt -f docker/Dockerfile .\ndocker run --rm --entrypoint cat mgmt mgmt > mgmt\nchmod +x mgmt\n./mgmt --version\n# you could now copy the mgmt binary somewhere into your $PATH\n# e.g., /usr/local/bin/ to make it accessible from anywhere\n```\n\n----------------------------------------\n\nTITLE: Build mgmt without augeas support (Go)\nDESCRIPTION: This command builds the `mgmt` project without augeas support by using the `GOTAGS` environment variable during the `make build` process. This is useful if augeas is not available or desired.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/docs/development.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nGOTAGS='noaugeas' make build\n```\n\n----------------------------------------\n\nTITLE: Compile mgmt without docker - Bash\nDESCRIPTION: This command compiles mgmt without Docker support. By setting the GOTAGS environment variable to \"nodocker\" before running the `make build` command, Docker integration is disabled during compilation.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/docs/documentation.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nGOTAGS=nodocker make build\n```\n\n----------------------------------------\n\nTITLE: Build mgmt without libvirt support (Go)\nDESCRIPTION: This command builds the `mgmt` project without libvirt support by using the `GOTAGS` environment variable during the `make build` process. This is useful if libvirt is not available or desired.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/docs/development.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nGOTAGS='novirt' make build\n```\n\n----------------------------------------\n\nTITLE: mcl Code for Mixed Graph Example 1\nDESCRIPTION: This MCL code creates two file resources without defining any dependencies. It represents a simple configuration where a directory and a file are created.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/docs/puppet-guide.md#_snippet_7\n\nLANGUAGE: mcl\nCODE:\n```\n# lang\nfile \"/tmp/mgmt_dir/\" { state => \"present\" }\nfile \"/tmp/mgmt_dir/a\" { state => \"present\" }\n```\n\n----------------------------------------\n\nTITLE: File resource without state defined\nDESCRIPTION: This example shows how to create a file resource specifying only the `content`. This example will only attempt to set the contents of the file if the file already exists. This example will not create the file if the file does not already exist.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/docs/faq.md#_snippet_4\n\nLANGUAGE: mcl\nCODE:\n```\nfile \"/tmp/foo\" {\n\tcontent => \"hello world\\n\",\n}\n```\n\n----------------------------------------\n\nTITLE: Build mgmt without docker support (Go)\nDESCRIPTION: This command builds the `mgmt` project without docker support by using the `GOTAGS` environment variable during the `make build` process.  This is useful if docker support is not required.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/docs/development.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nGOTAGS='nodocker' make build\n```\n\n----------------------------------------\n\nTITLE: Installing PackageKit on Fedora\nDESCRIPTION: This example shows how to install PackageKit on a Fedora system using the `dnf` package manager. PackageKit is used by the `pkg` resource in mgmt to install packages.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/docs/faq.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndnf install /usr/bin/pkcon\n```\n\n----------------------------------------\n\nTITLE: Correct String Interpolation Example\nDESCRIPTION: Illustrates the correct usage of string interpolation by explicitly defining the number as a string. This avoids type unification errors and allows the string interpolation to work as expected.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/docs/faq.md#_snippet_14\n\nLANGUAGE: mcl\nCODE:\n```\n$num = \"42\" # now this is a string\nprint \"hello\" {\n\tmsg => \"My favourite number is ${num}\",\n}\n```\n\n----------------------------------------\n\nTITLE: Including a Class with a Scoped Prefix in MCL\nDESCRIPTION: This snippet demonstrates including a class under a new scoped prefix using the `as` keyword. The captured scope of the class at its definition site are made available in the scope of the include. Variables, functions, and child classes are all exported. Here variables are accessed in the include scope.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/docs/language-guide.md#_snippet_20\n\nLANGUAGE: mcl\nCODE:\n```\nimport \"fmt\"\n\nclass c1 {\n\ttest \"t1\" {}\t# gets pulled out\n\t$x = \"hello\"\t# gets exported\n}\ninclude c1 as i1\n\ntest \"print0\" {\n\tanotherstr => fmt.printf(\"%s\", $i1.x),\t# hello\n\tonlyshow => [\"AnotherStr\",], # displays nicer\n}\n```\n\n----------------------------------------\n\nTITLE: Dollar Meta-Parameter: Correct Variable Usage in MCL\nDESCRIPTION: This snippet demonstrates the correct way to interpolate a variable in MCL using curly braces to avoid unexpected resource naming issues.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/docs/documentation.md#_snippet_4\n\nLANGUAGE: mcl\nCODE:\n```\n$foo = \"/tmp/file1\"\nfile \"${foo}\" {} # correct!\n\n```\n\n----------------------------------------\n\nTITLE: Cloning mgmt Repository (Shell)\nDESCRIPTION: This snippet clones the mgmt repository from GitHub recursively into the specified directory and changes the current directory to the cloned repository.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/docs/quick-start-guide.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit clone --recursive https://github.com/purpleidea/mgmt/ ~/mgmt/\ncd ~/mgmt/\n```\n\n----------------------------------------\n\nTITLE: Running mgmt with Puppet Agent\nDESCRIPTION: This command runs mgmt and requests the configuration from the puppet server, similar to how the `puppet agent` command works. Puppet must be installed and accessible in mgmt's search path for this to function correctly.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/docs/documentation.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmgmt run puppet --puppet agent\n```\n\n----------------------------------------\n\nTITLE: Function Declaration: Nextafter32\nDESCRIPTION: Defines a function `Nextafter32` that takes two float32 values as input and returns the next representable float32 value after x in the direction of y.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/lang/funcs/funcgen/fixtures/func_base.txt#_snippet_11\n\nLANGUAGE: Go\nCODE:\n```\nfunc Nextafter32(x, y float32) (r float32)\n```\n\n----------------------------------------\n\nTITLE: Execute Build in Development Docker Container (Shell)\nDESCRIPTION: This command shows how to execute a build command within the Docker container using the `docker/scripts/exec-development` script. This is useful to rebuild the mgmt binary inside the container.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/docs/development.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ndocker/scripts/exec-development make build\n```\n\n----------------------------------------\n\nTITLE: Defining a Naked Class in MCL\nDESCRIPTION: This code defines a class named 'foo' without any parameters. The class can contain statements to be executed when the class is included.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/docs/language-guide.md#_snippet_15\n\nLANGUAGE: mcl\nCODE:\n```\nclass foo {\n\t# some statements go here\n}\n```\n\n----------------------------------------\n\nTITLE: Commenting Example in Go\nDESCRIPTION: Illustrates proper godoc style for Go functions, emphasizing that the first word of the comment should match the function name and that full sentences should end with a period.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/docs/style-guide.md#_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\n// square multiplies the input integer by itself and returns this product.\nfunc square(x int) int {\n\treturn x * x // we don't care about overflow errors\n}\n```\n\n----------------------------------------\n\nTITLE: Error message for Type Unification\nDESCRIPTION: This snippet shows an example of the error message encountered when there is a type unification issue during string interpolation.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/docs/faq.md#_snippet_15\n\nLANGUAGE: text\nCODE:\n```\nunify error with: topLevel(func() { <built-in:concat> }): type error: int != str\n```\n\n----------------------------------------\n\nTITLE: Installing PackageKit on Debian\nDESCRIPTION: This example shows how to install PackageKit tools on a Debian system using the `apt` package manager. PackageKit is used by the `pkg` resource in mgmt to install packages.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/docs/faq.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\napt install packagekit-tools\n```\n\n----------------------------------------\n\nTITLE: Run Tests in Docker Container (Shell)\nDESCRIPTION: This command runs the `make test` command inside a Docker container. It mounts the current working directory to allow access to the project source code and uses the `purpleidea/mgmt:development` image.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/docs/development.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ndocker run --rm -ti \\\n\t-v $PWD:/go/src/github.com/purpleidea/mgmt/ \\\n\t-w /go/src/github.com/purpleidea/mgmt/ \\\n\tpurpleidea/mgmt:development \\\n\tmake test\n```\n\n----------------------------------------\n\nTITLE: Function Declaration: SuperByte\nDESCRIPTION: Defines a function `SuperByte` that takes a byte slice and a string as input and returns a byte slice.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/lang/funcs/funcgen/fixtures/func_base.txt#_snippet_13\n\nLANGUAGE: Go\nCODE:\n```\nfunc SuperByte(s []byte, t string) []byte\n```\n\n----------------------------------------\n\nTITLE: Constant Declaration: MaxInt8\nDESCRIPTION: Defines a constant `MaxInt8` representing the maximum value for a signed 8-bit integer.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/lang/funcs/funcgen/fixtures/func_base.txt#_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nconst MaxInt8 = 1<<7 - 1 ...\n```\n\n----------------------------------------\n\nTITLE: Function Declaration: ToUpper\nDESCRIPTION: Defines a function `ToUpper` that takes a string as input and returns its uppercase version.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/lang/funcs/funcgen/fixtures/func_base.txt#_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\nfunc ToUpper(s string) string\n```\n\n----------------------------------------\n\nTITLE: Run Shell Integration Tests (Shell)\nDESCRIPTION: This command runs the shell integration tests for the `mgmt` project. These tests are located in the `test/shell/` directory and provide quick and small integration tests.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/docs/development.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nmake test-shell\n```\n\n----------------------------------------\n\nTITLE: Function Declaration: WithNothingElse\nDESCRIPTION: Defines a function `WithNothingElse` that takes a string as input and returns nothing.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/lang/funcs/funcgen/fixtures/func_base.txt#_snippet_10\n\nLANGUAGE: Go\nCODE:\n```\nfunc WithNothingElse(s string)\n```\n\n----------------------------------------\n\nTITLE: Checking Unsupported Attributes\nDESCRIPTION: The command uses `puppet mgmtgraph print` to check if a Puppet manifest contains attributes that are not supported by mgmt. This helps identify potential issues before deploying the manifest with mgmt.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/docs/puppet-guide.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ puppet mgmtgraph print --code 'file { \"/tmp/foo\": mode => \"0600\" }'\n```\n\n----------------------------------------\n\nTITLE: Run Individual Shell Integration Test (Shell)\nDESCRIPTION: This command runs a specific shell integration test, in this case `load0`. These tests are located in the `test/shell/` directory and provide focused integration testing. Use TAB completion for possible tests.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/docs/development.md#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nmake test-shell-load0\n```\n\n----------------------------------------\n\nTITLE: Build Development Docker Image (Shell)\nDESCRIPTION: This command builds the development Docker image for `mgmt`. This image is used for running tests and executing commands within a consistent environment.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/docs/development.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ndocker/scripts/build-development\n```\n\n----------------------------------------\n\nTITLE: Function Init Example in Go\nDESCRIPTION: This example demonstrates the `Init` method for a `mgmt` function in Go. The `Init` method is called to initialize the function and receives a struct containing important information. It's crucial to save a copy of this struct for future use by other methods of the function.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/docs/function-guide.md#_snippet_3\n\nLANGUAGE: golang\nCODE:\n```\n// Init runs some startup code for this function.\nfunc (obj *FooFunc) Init(init *interfaces.Init) error {\n\tobj.init = init\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Build mgmt without augeas, libvirt or docker support (Go)\nDESCRIPTION: This command builds the `mgmt` project without augeas, libvirt, and docker support. It uses the `GOTAGS` environment variable to disable these features during the `make build` process.  This is useful when you want to produce a smaller binary or avoid specific dependencies.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/docs/development.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nGOTAGS='noaugeas novirt nodocker' make build\n```\n\n----------------------------------------\n\nTITLE: Function Declaration: ToLower\nDESCRIPTION: Defines a function `ToLower` that takes a string as input and returns its lowercase version.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/lang/funcs/funcgen/fixtures/func_base.txt#_snippet_6\n\nLANGUAGE: Go\nCODE:\n```\nfunc ToLower(s string) string\n```\n\n----------------------------------------\n\nTITLE: Simple Polymorphic Function Example in Go\nDESCRIPTION: This example demonstrates the definition of a polymorphic function `len` using the simple function API in Go. It registers the function using `simple.Register`, specifying different type signatures and the corresponding implementation function `Len`. The type signatures use unification variables to define the polymorphic behavior.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/docs/function-guide.md#_snippet_1\n\nLANGUAGE: golang\nCODE:\n```\npackage simple\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\n\t\"github.com/purpleidea/mgmt/lang/funcs/simple\"\n\t\"github.com/purpleidea/mgmt/lang/types\"\n)\n\nfunc init() {\n\t// This is the actual definition of the `len` function.\n\tsimple.Register(\"len\", &simple.Scaffold{\n\t\tT: types.NewType(\"func(?1) int\"), // contains a unification var\n\t\tC: simple.TypeMatch([]string{     // match on any of these sigs\n\t\t\t\"func(str) int\",\n\t\t\t\"func([]?1) int\",\n\t\t\t\"func(map{?1: ?2}) int\",\n\t\t}),\n\t\t// The implementation is left as an exercise for the reader.\n\t\tF: Len,\n\t})\n}\n```\n\n----------------------------------------\n\nTITLE: Resolve 'Text file busy' Error During Build\nDESCRIPTION: This snippet shows the error message that appears when the `make` command fails with a 'Text file busy' error and explains the solution, which involves stopping any running mgmt processes, removing the 'mgmt' file, and rebuilding.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/docs/faq.md#_snippet_12\n\nLANGUAGE: text\nCODE:\n```\ncp: cannot create regular file 'mgmt': Text file busy\n```\n\n----------------------------------------\n\nTITLE: Compile mgmt without augeas - Bash\nDESCRIPTION: This command compiles mgmt without augeas support. It sets the GOTAGS environment variable to \"noaugeas\" before running the `make build` command, disabling augeas integration during the compilation process.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/docs/documentation.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nGOTAGS=noaugeas make build\n```\n\n----------------------------------------\n\nTITLE: Accessing Received Values in CheckApply (golang)\nDESCRIPTION: This code snippet shows how to access and check for received values using the `obj.init.Recv()` method inside the `CheckApply` function.  It demonstrates how to check if a value was received, log its origin, and detect if the value has changed during the current `CheckApply` invocation. Requires the `Recvable` trait.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/docs/resource-guide.md#_snippet_16\n\nLANGUAGE: golang\nCODE:\n```\n// inside CheckApply, probably near the top\nif val, exists := obj.init.Recv()[\"some_key\"]; exists {\n\tobj.init.Logf(\"the some_key param was sent to us from: %s.%s\", val.Res, val.Key)\n\tif val.Changed {\n\t\tobj.init.Logf(\"the some_key param was just updated!\")\n\t\t// you may want to invalidate some local cache\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Puppet Manifest Translation\nDESCRIPTION: This command uses the `puppet mgmtgraph print` command to test a simple Puppet manifest and print its YAML representation. It verifies that the Puppet environment is correctly configured and that the translator module is functioning properly.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/docs/puppet-guide.md#_snippet_1\n\nLANGUAGE: puppet\nCODE:\n```\npuppet mgmtgraph print --code 'file { \"/tmp/mgmt-test\": ensure => present }'\n```\n\n----------------------------------------\n\nTITLE: Skipping type unification with mgmt run\nDESCRIPTION: This example demonstrates how to skip the initial type unification check when using the `mgmt run` command with the `--skip-unify` option. Skipping this check can speed up the execution, but it's not recommended for production use.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/docs/faq.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./mgmt run --tmp-prefix lang --skip-unify examples/lang/hello0.mcl\n```\n\n----------------------------------------\n\nTITLE: Puppet Code for Mixed Graph Example 1\nDESCRIPTION: This Puppet code creates two file resources, a directory and a file within it.  These will form a separate subgraph from the MCL resources.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/docs/puppet-guide.md#_snippet_8\n\nLANGUAGE: puppet\nCODE:\n```\n# puppet\nfile { \"/tmp/puppet_dir\": ensure => \"directory\" }\nfile { \"/tmp/puppet_dir/a\": ensure => \"file\" }\n```\n\n----------------------------------------\n\nTITLE: Function Declaration: WithInt\nDESCRIPTION: Defines a function `WithInt` that takes a float64, several integers, a boolean, and a string as input and returns a string.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/lang/funcs/funcgen/fixtures/func_base.txt#_snippet_12\n\nLANGUAGE: Go\nCODE:\n```\nfunc WithInt(s float64, i int, x int64, j, k int, b bool, t string) string\n```\n\n----------------------------------------\n\nTITLE: Function Declaration: AllKind\nDESCRIPTION: Defines a function `AllKind` that takes an integer and a string as input and returns a float64 value.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/lang/funcs/funcgen/fixtures/func_base.txt#_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\nfunc AllKind(x int64, y string) float64\n```\n\n----------------------------------------\n\nTITLE: Importing Modules with Namespaces in MCL\nDESCRIPTION: This snippet demonstrates how to import modules with specific namespaces in MCL.  It shows importing a module and aliasing it, and importing into the top-level namespace.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/docs/language-guide.md#_snippet_9\n\nLANGUAGE: mcl\nCODE:\n```\nimport \"fmt\" as *\t# contents namespaced into top-level names\n\timport \"foo.mcl\"\t# namespaced as foo\n\timport \"dir1/\" as bar\t# namespaced as bar\n\timport \"git://github.com/purpleidea/mgmt-example1/\"\t# namespaced as example1\n```\n\n----------------------------------------\n\nTITLE: Constant Declaration: Euler's Number\nDESCRIPTION: Declares a constant E representing Euler's number with high precision as a float.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/lang/funcs/funcgen/fixtures/func_base.txt#_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nconst E = 2.71828182845904523536028747135266249775724709369995957496696763 ...\n```\n\n----------------------------------------\n\nTITLE: Constant Declaration: MaxFloat32\nDESCRIPTION: Defines a constant `MaxFloat32` representing the maximum value for a 32-bit floating-point number.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/lang/funcs/funcgen/fixtures/func_base.txt#_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nconst MaxFloat32 = 3.40282346638528859811704183484516925440e+38 ...\n```\n\n----------------------------------------\n\nTITLE: Installing augeas and libvirt development packages on Fedora\nDESCRIPTION: This example shows how to install the development packages for augeas and libvirt on a Fedora system using the `dnf` package manager. These dependencies are required for certain features of `mgmt` to work.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/docs/faq.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ndnf install libvirt-devel augeas-devel\n```\n\n----------------------------------------\n\nTITLE: Function Declaration: WithErrorButNothingElse\nDESCRIPTION: Defines a function `WithErrorButNothingElse` that takes a string as input and returns an error.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/lang/funcs/funcgen/fixtures/func_base.txt#_snippet_9\n\nLANGUAGE: Go\nCODE:\n```\nfunc WithErrorButNothingElse(s string) error\n```\n\n----------------------------------------\n\nTITLE: Fix Corrupted etcd Storage Directory\nDESCRIPTION: This snippet shows the error message that appears when the etcd storage directory is corrupt and suggests removing the directory to start over. It clarifies that the etcd directory should not be shared across multiple mgmt members with different cluster views.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/docs/faq.md#_snippet_11\n\nLANGUAGE: text\nCODE:\n```\netcd: server: starting...\netcd: server: start timeout of 1m0s reached\netcd: server: close timeout of 15s reached\n```\n\n----------------------------------------\n\nTITLE: Function Declaration: Max\nDESCRIPTION: Defines a function `Max` that takes two float64 values as input and returns the larger of the two.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/lang/funcs/funcgen/fixtures/func_base.txt#_snippet_7\n\nLANGUAGE: Go\nCODE:\n```\nfunc Max(x, y float64) float64\n```\n\n----------------------------------------\n\nTITLE: Function Declaration: Lgamma\nDESCRIPTION: Declares a function `Lgamma` that calculates the natural logarithm of the absolute value of the Gamma function and returns the result along with its sign.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/lang/funcs/funcgen/fixtures/func_base.txt#_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\nfunc Lgamma(x float64) (lgamma float64, sign int)\n```\n\n----------------------------------------\n\nTITLE: Defining Nested Classes with Colon Syntax in MCL\nDESCRIPTION: This snippet demonstrates an alternative syntax for defining nested classes using colons. This allows avoiding repeated indentation of child classes, improving readability by prefixing the class name with its parent class name and a colon.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/docs/language-guide.md#_snippet_19\n\nLANGUAGE: mcl\nCODE:\n```\nclass base() {\n}\nclass base:inner() {\n}\nclass base:inner:deepest() {\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Nested Classes in MCL\nDESCRIPTION: This example shows how to define nested classes within another class. The inner class 'c2' is defined inside the class 'c1'. An instance of 'c2' is included based on the conditional statement '$a == \"t1\"'. It also imports the 'fmt' module to use the `fmt.printf` function.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/docs/language-guide.md#_snippet_18\n\nLANGUAGE: mcl\nCODE:\n```\nimport \"fmt\"\nclass c1($a, $b) {\n\t# nested class definition\n\tclass c2($c) {\n\t\ttest $a {\n\t\t\tstringptr => fmt.printf(\"%s is %d\", $b, $c),\n\t\t}\n\t}\n\n\tif $a == \"t1\" {\n\t\tinclude c2(42)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: mcl Code for Mixed Graph Example 3 (Multiple Merges)\nDESCRIPTION: This MCL code demonstrates the use of multiple merged vertices. It defines two `noop` resources with `puppet_` prefixes and creates file resources with dependencies to and from the noop resources.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/docs/puppet-guide.md#_snippet_11\n\nLANGUAGE: mcl\nCODE:\n```\n# lang\nnoop \"puppet_handover\" {}\nnoop \"puppet_handback\" {}\nfile \"/tmp/mgmt_dir/\" { state => \"present\" }\nfile \"/tmp/mgmt_dir/a\" { state => \"present\" }\nfile \"/tmp/mgmt_dir/puppet_subtree/state-file\" { state => \"present\" }\n\nFile[\"/tmp/mgmt_dir/\"] -> Noop[\"puppet_handover\"]\nNoop[\"puppet_handback\"] -> File[\"/tmp/mgmt_dir/puppet_subtree/state-file\"]\n```\n\n----------------------------------------\n\nTITLE: Export Meta-Parameter: Exporting File Resource Data in MCL\nDESCRIPTION: This snippet shows how to use the `Export` meta-parameter in an MCL file resource definition to specify that its data should be exported to specific hosts. It also sets the `Hidden` meta-parameter.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/docs/documentation.md#_snippet_5\n\nLANGUAGE: mcl\nCODE:\n```\nfile \"/tmp/foo\" {\n\tstate => \"exists\",\n\tcontent => \"i'm exported!\\n\",\n\n\tMeta:hidden => true,\n\tMeta:export => [\"h1\",],\n}\n\n```\n\n----------------------------------------\n\nTITLE: Define Class Dependencies - Puppet\nDESCRIPTION: This code establishes a dependency chain between the defined classes. `mgmt_handover` is executed before `important_stuff`, which is executed before `mgmt_handback`. This ensures a specific order of operations during Puppet configuration.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/docs/puppet-guide.md#_snippet_14\n\nLANGUAGE: puppet\nCODE:\n```\nClass[\"mgmt_handover\"] -> Class[\"important_stuff\"] -> Class[\"mgmt_handback\"]\n```\n\n----------------------------------------\n\nTITLE: Run All Tests (Go)\nDESCRIPTION: This command executes all the golang tests for the `mgmt` project. These tests are the preferred way to perform unit testing within the project.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/docs/development.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nmake test\n```\n\n----------------------------------------\n\nTITLE: Correct CLI Invocation with Seeds Flag\nDESCRIPTION: This snippet demonstrates the correct way to invoke the CLI with the `--seeds` flag, using an equals sign to ensure the value is properly parsed. This avoids the issue of subsequent arguments being interpreted as additional seed values.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/docs/faq.md#_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\n# better invocation! (note the equals sign)\nmgmt deploy --no-git --seeds=http://127.0.0.1:2379 lang code/test.mcl\n```\n\n----------------------------------------\n\nTITLE: Building mgmt without augeas, libvirt, and docker support\nDESCRIPTION: This example shows how to build `mgmt` without augeas and libvirt support using the `GOTAGS` environment variable with the `make build` command. This can be useful if those dependencies are not available or desired.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/docs/faq.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nGOTAGS=\"noaugeas novirt nodocker\" make build\n```\n\n----------------------------------------\n\nTITLE: Incorrect CLI Invocation with Seeds Flag\nDESCRIPTION: This snippet shows an incorrect CLI invocation using the `--seeds` flag without an equals sign, leading to misinterpretation of the arguments. It highlights the importance of using an equals sign when providing values to flags like `--seeds`, `--server-urls`, and `--client-urls`.\nSOURCE: https://github.com/purpleidea/mgmt/blob/master/docs/faq.md#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n# wrong invocation!\nmgmt deploy --no-git --seeds http://127.0.0.1:2379 lang code/test.mcl\n```"
  }
]