[
  {
    "owner": "santiagocasas",
    "repo": "cosmicfishpie",
    "content": "TITLE: Computing Fisher Matrices for Photometric and Spectroscopic Surveys in Python\nDESCRIPTION: This snippet demonstrates how to compute Fisher matrices for different surveys using CosmicFish. It includes both photometric (Euclid-ISTF and Rubin) and spectroscopic (Euclid-ISTF, DESI_BGS, DESI_ELG) surveys, setting up options and computing the matrices.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/notebooks/Example_Fishers-Various_Surveys-DESI-Rubin-Euclid.ipynb#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nPhotometric_fish_dic = dict()\nSpectroscopic_fish_dic = dict()\n```\n\nLANGUAGE: python\nCODE:\n```\nspecifications = ['Euclid-ISTF-Optimistic', 'Rubin-Optimistic']\n\nfor specif in specifications:\n    options = {\n           'derivatives': '3PT',      ## Derivative option: 3PT or SteM\n           'accuracy': 1,\n           'feedback': 1,\n           'code': 'external',\n           'outroot': 'w0waCDM_external_camb_HP-{}'.format(specif),    #String attached to all the results files\n           'results_dir' :  './results/',\n           'specs_dir' : '../survey_specifications/', \n           'survey_name': specif,\n           'cosmo_model' : 'w0waCDM',\n           'activateMG': False\n           }\n    observables = ['WL','GCph']\n\n    cosmoFM = cosmicfish.FisherMatrix(fiducialpars=fiducial,    #Pass the above dictionaries to cosmoFM, the main cosmicfish class\n                              freepars=freepars,\n                              options=options, \n                              observables=observables, \n                              extfiles=external, \n                              cosmoModel=options['cosmo_model'], \n                              surveyName=options['survey_name']\n                              )\n                            \n    Photometric_fish_dic[options['outroot']] = cosmoFM.compute()    # Compute the Fisher Matrix\n```\n\nLANGUAGE: python\nCODE:\n```\nspecifications = ['Euclid-ISTF-Optimistic', 'DESI_BGS', 'DESI_ELG']\nfor specif in specifications:\n    options = {\n           'derivatives': '3PT',      ## Derivative option: 3PT or STEM of 4PT_FWD\n           'accuracy': 1,\n           'feedback': 1,\n           'code': 'external',\n           'outroot': 'w0waCDM_external_camb_HP-3PT-{}'.format(specif),    #String attached to all the results files\n           'results_dir' :  './results/',\n           'specs_dir' : '../survey_specifications/', \n           'survey_name': specif,\n           'cosmo_model' : 'w0waCDM',\n           'activateMG': False}\n    observables = ['GCsp']\n\n    cosmoFM = cosmicfish.FisherMatrix(fiducialpars=fiducial,    #Pass the above dictionaries to cosmoFM, the main cosmicfish class\n                              freepars=freepars,\n                              options=options, \n                              observables=observables, \n                              extfiles=external, \n                              cosmoModel=options['cosmo_model'], \n                              surveyName=options['survey_name']\n                              )\n                            \n    Spectroscopic_fish_dic[options['outroot']] = cosmoFM.compute()    # Compute the Fisher Matrix\n```\n\n----------------------------------------\n\nTITLE: Visualizing Cosmological Background Functions and Growth Evolution\nDESCRIPTION: Creates a 2Ã—2 grid of plots showing the evolution of key cosmological functions with redshift: Hubble parameter H(z), distances (comoving and angular), growth factor D(z), and growth rate f(z).\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/notebooks/Cosmology-Calculator.ipynb#2025-04-22_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfig, axs = plt.subplots(2, 2, figsize=(12, 12))\ncodelab = options[\"code\"]\naxs[0, 0].semilogx(zz, hub_z, color=snscolors[0], lw=3, label=codelab)\naxs[0, 0].set_xlabel(\"$z$\", fontsize=20)\naxs[0, 0].set_ylabel(r\"$H(z)$\", fontsize=20)\naxs[0, 0].legend(loc=\"best\", fontsize=20)\n\naxs[0, 1].semilogx(zz, chi_z, color=snscolors[1], lw=3, label=r\"$\\chi(z)$\")\naxs[0, 1].semilogx(zz, ang_z, color=snscolors[1], lw=2, ls=\"--\", label=r\"$d_A (z)$\")\naxs[0, 1].set_xlabel(\"$z$\", fontsize=20)\naxs[0, 1].set_ylabel(r\"$d(z)$\", fontsize=20)\naxs[0, 1].legend(loc=\"best\", fontsize=20)\n\naxs[1, 0].semilogx(zz, D_growth_z, color=snscolors[2], lw=3, label=codelab)\naxs[1, 0].set_xlabel(\"$z$\", fontsize=20)\naxs[1, 0].set_ylabel(r\"$D(z)$\", fontsize=20)\naxs[1, 0].legend(loc=\"best\", fontsize=20)\n\naxs[1, 1].semilogx(zz, f_growthrate_z, color=snscolors[3], lw=3, label=codelab)\naxs[1, 1].set_xlabel(\"$z$\", fontsize=20)\naxs[1, 1].set_ylabel(r\"$f(z)$\", fontsize=20)\naxs[1, 1].legend(loc=\"best\", fontsize=20)\n```\n\n----------------------------------------\n\nTITLE: Configuring Cosmicfishpie Parameters for Fisher Matrix Calculation\nDESCRIPTION: Python code demonstrating how to configure Cosmicfishpie options, specify observables, define fiducial parameters, and set step sizes for numerical derivatives in preparation for Fisher matrix calculation.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/docs/source/overview.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\noptions = {\n    'accuracy': 1, # Internal Boost to CF numerical accuracy\n    'feedback': 2, # Verbosity of CF outputs\n    'outroot': 'Euclid_Pessimistic', # The name of results will contain this String\n    'results_dir': 'results/', # Path to where the results will be saved\n    'derivatives': '3PT', # Method to compute finite differentiation\n\n    'nonlinear': True, # If the nonlinear power spectrum should be computed\n    'cosmo_model' : 'LCDM', # Cosmological model used\n    'code': 'camb', # Code to be used\n    'class_config_yaml':'/boltzmann_yaml_files/camb/default.yaml', # Settings for the Einstein Boltzmann solver\n\n    'survey_name': 'Euclid', # Survey Name\n    'specs_dir' : 'survey_specifications/', # Path of survey specification\n    'survey_name_spectro': 'Euclid-Spectroscopic-ISTF-Pessimistic', # Survey specification for the Euclid spectroscopic observables\n    'survey_name_photo': 'Euclid-Photometric-ISTF-Pessimistic', # Survey specification for the Euclid photometric observables\n}\n\n#Observables that should be considered for the forecast.\nobservables = ['GCsp']\n\n#The Cosmicfishpie parameter basis is internally converted to CAMB or CLASS basis\nfiducial = {\"Omegam\":0.32,\n            \"h\":0.67,\n}\n\n#Parameters to be varied and the relative step size for numerical derivatives\nfreepars = {'Omegam': 0.01,\n            'h': 0.01,\n}\n```\n\n----------------------------------------\n\nTITLE: Computing Fisher Matrix for Photometric Survey\nDESCRIPTION: Calculates the Fisher matrix for the photometric survey using the fiducial cosmological parameters and specified observables.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/notebooks/likelihod_photometric.ipynb#2025-04-22_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nfishmat_photo = cosmoFM_fid.compute()\n```\n\n----------------------------------------\n\nTITLE: Plotting 3x2pt Angular Power Spectra\nDESCRIPTION: This snippet creates a comprehensive plot of the 3x2pt angular power spectra, including galaxy-galaxy, lensing-lensing, and galaxy-lensing correlations for various redshift bin combinations.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/notebooks/3x2pt_presentation.ipynb#2025-04-22_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n# Accessing LSS cls\ncls = photo_Cls.result\nell = cls[\"ells\"]\nnorm = ell * (ell + 1) / (2 * np.pi)\n\ncolor = iter(snscolors)\nfig, axs = plt.subplots(3, 1, figsize=(21, 25), sharex=True)\nfor bin1, bin2 in zip([1, 2, 4, 6, 10], [2, 2, 5, 7, 10]):\n    c = next(color)\n    axs[0].loglog(\n        ell,\n        norm * cls[\"GCph \" + str(bin1) + \"xGCph \" + str(bin2)],\n        color=c,\n        label=\"GxG i=\" + str(bin1) + \", j=\" + str(bin2),\n        ls=\"-\",\n        lw=2.1,\n    )\n    axs[1].loglog(\n        ell,\n        norm * cls[\"WL \" + str(bin1) + \"xWL \" + str(bin2)],\n        color=c,\n        label=\"LxL i=\" + str(bin1) + \", j=\" + str(bin2),\n        ls=\"-\",\n        lw=2.1,\n    )\n    corr = norm * cls[\"WL \" + str(bin1) + \"xGCph \" + str(bin2)]\n    if np.mean(corr) < 0:\n        ls = \"--\"\n    else:\n        ls = \"-\"\n    axs[2].loglog(\n        ell, abs(corr), color=c, label=\"LxG i=\" + str(bin1) + \", j=\" + str(bin2), ls=ls, lw=2.1\n    )\naxs[0].set_ylabel(r\"$\\ell(\\ell+1)C_{ij}^{GG}(\\ell)/2\\pi$\", fontsize=35)\naxs[0].legend(bbox_to_anchor=(1.04, 0.5), loc=\"center left\", fontsize=25)\naxs[1].set_ylabel(r\"$\\ell(\\ell+1)C_{ij}^{LL}(\\ell)/2\\pi$\", fontsize=35)\naxs[1].legend(bbox_to_anchor=(1.04, 0.5), loc=\"center left\", fontsize=25)\naxs[2].set_ylabel(r\"$\\ell(\\ell+1)C_{ij}^{LG}(\\ell)/2\\pi$\", fontsize=35)\naxs[2].legend(bbox_to_anchor=(1.04, 0.5), loc=\"center left\", fontsize=25)\n\naxs[2].set_xlim(10, 740)\naxs[2].set_xlabel(r\"Multipole $\\ell$\", fontsize=35)\nfig.subplots_adjust(hspace=0.0)\n\n[ax.tick_params(which=\"major\", length=15, width=2, direction=\"in\") for ax in axs]\n[ax.tick_params(which=\"minor\", length=8, width=1, direction=\"in\") for ax in axs]\n[ax.minorticks_on() for ax in axs]\n[ax.tick_params(axis=\"both\", which=\"major\", labelsize=21) for ax in axs]\n[ax.tick_params(axis=\"both\", which=\"minor\", labelsize=15) for ax in axs]\n\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Computing Photometric Angular Power Spectrum with Cosmicfishpie\nDESCRIPTION: This code computes the photometric angular power spectrum using the Cosmicfishpie library, incorporating fiducial cosmological parameters and various survey-specific parameters.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/notebooks/3x2pt_presentation.ipynb#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nphoto_Cls = phobs.ComputeCls(\n    cosmoFM_A.fiducialcosmopars, cosmoFM_A.photopars, cosmoFM_A.IApars, cosmoFM_A.biaspars\n)\nphCls_A = photo_Cls.compute_all()\n```\n\n----------------------------------------\n\nTITLE: Defining Cosmological Parameters and Configuration Options\nDESCRIPTION: Sets up the fiducial cosmological parameters (including matter density, baryon density, Hubble parameter, etc.) and analysis options like accuracy level, Boltzmann code selection (CAMB), and Euclid survey specifications.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/notebooks/Cosmology-Calculator.ipynb#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfiducial = {\n    \"Omegam\": 0.32,\n    \"Omegab\": 0.05,\n    \"h\": 0.67,\n    \"ns\": 0.96,\n    \"sigma8\": 0.815584,\n    \"w0\": -1.0,\n    \"wa\": 0.0,\n    \"mnu\": 0.06,\n    \"Neff\": 3.044,\n}\n\noptions = {\n    \"accuracy\": 1,\n    \"feedback\": 1,\n    \"code\": \"camb\",\n    \"specs_dir\": \"../survey_specifications/\",\n    \"outroot\": \"3x2pt_presentation\",\n    \"specs_dir\": \"../survey_specifications/\",\n    \"survey_name\": \"Euclid\",\n    \"survey_name_photo\": \"Euclid-Photometric-ISTF-Pessimistic\",\n    \"cosmo_model\": \"w0waCDM\",\n}\n```\n\n----------------------------------------\n\nTITLE: Plotting Linear and Non-Linear Matter Power Spectra at Different Redshifts\nDESCRIPTION: Generates a plot comparing linear and non-linear matter power spectra P(k) at multiple redshifts (z=0, 0.5, 1, 2.5), showing the evolution of structure with redshift and the non-linear enhancement at small scales.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/notebooks/Cosmology-Calculator.ipynb#2025-04-22_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfig, axs = plt.subplots(1, 1, figsize=(12, 7))\ncolor = iter(snscolors)\nzplot = [0, 0.5, 1, 2.5]\nfor zii in zplot:\n    c = next(color)\n    axs.loglog(\n        kk,\n        cosmofuncs.matpow(zii, kk, nonlinear=False),\n        ls=\"--\",\n        c=c,\n        label=\"linear $P(k)$ z=%s\" % zii,\n    )\naxs.set_xlabel(r\"$k \\, [\\mathrm{Mpc}]$\", fontsize=18)\naxs.set_ylabel(r\"$P_{mm} \\, [\\mathrm{Mpc}^{-3}]$\", fontsize=18)\ncolor = iter(snscolors)\nfor zii in zplot:\n    c = next(color)\n    axs.loglog(\n        kk,\n        cosmofuncs.matpow(zii, kk, nonlinear=True),\n        ls=\"-\",\n        c=c,\n        label=\"nonlinear $P(k)$ z=%s\" % zii,\n    )\naxs.legend(fontsize=18)\n```\n\n----------------------------------------\n\nTITLE: Defining Fiducial Cosmological Parameters and Observables\nDESCRIPTION: Sets up the fiducial cosmological parameters for the Î›CDM model including matter density, baryon density, Hubble parameter, and other key parameters. Also defines the observables to be used in the analysis: weak lensing (WL) and photometric galaxy clustering (GCph).\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/notebooks/likelihod_photometric-Debole.ipynb#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfiducial = {\n    \"Omegam\": 0.3145714273,\n    \"Omegab\": 0.0491989,\n    \"h\": 0.6737,\n    \"ns\": 0.96605,\n    \"sigma8\": 0.81,\n    \"w0\": -1.0,\n    \"wa\": 0.0,\n    \"mnu\": 0.06,\n    \"Neff\": 3.044,\n}\nobservables = ['WL', 'GCph']\n```\n\n----------------------------------------\n\nTITLE: Computing Fisher Matrices\nDESCRIPTION: Iterates through different survey specifications to compute Fisher matrices using the configured parameters.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/notebooks/Example_Fisher-GCsp-CLASS-Euclid.ipynb#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nFishers_list = []\nfor survey_spec in ['Optimistic','Superpessimistic']:\n\n    options['survey_name']= 'Euclid-ISTF-'+survey_spec\n    options['outroot']= 'LCDM+Mnu+Neff_internal_class-Euclid-{:s}_3PT'.format(survey_spec)\n\n    cosmoFM = FisherMatrix(fiducialpars=fiducial, freepars=freepars, options=options,\n                      observables=observables, spectrononlinearpars=spectrononlinearpars,\n                      cosmoModel=options['cosmo_model'],surveyName=options['survey_name'])\n\n    Fishers_list.append(cosmoFM.compute())\n```\n\n----------------------------------------\n\nTITLE: Defining Fiducial Cosmological Parameters and Observables\nDESCRIPTION: Sets up the fiducial cosmological parameters (including matter density, baryon density, Hubble parameter, etc.) and specifies the observables to be used (weak lensing and photometric galaxy clustering).\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/notebooks/likelihod_photometric.ipynb#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfiducial = {\n    \"Omegam\": 0.3145714273,\n    \"Omegab\": 0.0491989,\n    \"h\": 0.6737,\n    \"ns\": 0.96605,\n    \"sigma8\": 0.81,\n    \"w0\": -1.0,\n    \"wa\": 0.0,\n    \"mnu\": 0.06,\n    \"Neff\": 3.044,\n}\nobservables = ['WL', 'GCph']\n```\n\n----------------------------------------\n\nTITLE: Initializing the Fisher Matrix with Cosmological Parameters\nDESCRIPTION: Creates a FisherMatrix object using the previously defined fiducial parameters, options, and observables. This step sets up the Euclid-Spectroscopic-ISTF-Pessimistic survey with default settings for galaxy biases and modeling choices.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/notebooks/GCsp_presentation.ipynb#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ncosmoFM_A = cosmicfish.FisherMatrix(\n    fiducialpars=fiducial,\n    options=options,\n    observables=observables,\n    cosmoModel=options[\"cosmo_model\"],\n    surveyName=options[\"survey_name\"],\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Function to Calculate Observable Angular Power Spectra\nDESCRIPTION: Creates a function to compute observable angular power spectra (C_â„“) for different probes. The function handles the computation of auto-correlations (WLÃ—WL, GCphÃ—GCph) and cross-correlations (GCphÃ—WL) while properly including shot noise contributions.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/notebooks/likelihod_photometric-Debole.ipynb#2025-04-22_snippet_14\n\nLANGUAGE: python\nCODE:\n```\ndef observable_Cell(photo_th: pobs.ComputeCls):\n    photo_th.compute_all()\n    binrange_GCph = photo_th.binrange_GCph\n    binrange_WL = photo_th.binrange_WL\n    nbin_GCph = len(binrange_GCph)\n    nbin_WL = len(binrange_WL)\n\n    ells = photo_th.result[\"ells\"]\n    output = dict(ells=ells)\n\n    observables = photo_th.observables\n    if \"WL\" in observables:\n        Cell_LL = np.empty((len(ells), nbin_WL, nbin_WL), dtype=np.float64)\n    if \"GCph\" in observables:\n        Cell_GG = np.empty((len(ells), nbin_GCph, nbin_GCph), dtype=np.float64)\n    if \"WL\" in observables and \"GCph\" in observables:\n        Cell_GL = np.empty((len(ells), nbin_GCph, nbin_WL), dtype=np.float64)\n\n    for i,j in product(binrange_WL, binrange_GCph):\n\n        if \"WL\" in observables:\n            Cell_LL[:,i-1,j-1] = (photo_th.result[\"WL {}xWL {}\".format(i,j)]\n                                  + np.eye(nbin_WL)[i-1,j-1]\n                                  * photo_cov_fid.ellipt_error**2.0 / photo_cov_fid.ngalbin_WL[i-1]\n                                  )\n\n        if \"GCph\" in observables:\n            Cell_GG[:,i-1,j-1] = (photo_th.result[\"GCph {}xGCph {}\".format(i,j)]\n                                  + np.eye(nbin_GCph)[i-1,j-1]\n                                  * 1 / photo_cov_fid.ngalbin_GCph[i-1]\n                                  )\n\n        if \"WL\" in observables and \"GCph\" in observables:\n            Cell_GL[:,i-1,j-1] = photo_th.result[\"GCph {}xWL {}\".format(i,j)]\n\n    if \"WL\" in observables:\n        output[\"Cell_LL\"] = Cell_LL\n    if \"GCph\" in observables:\n        output[\"Cell_GG\"] = Cell_GG\n    if \"WL\" in observables and \"GCph\" in observables:\n        output[\"Cell_GL\"] = Cell_GL\n\n    return output\n```\n\n----------------------------------------\n\nTITLE: Computing Dark Energy FoM for DESI-Rubin Combined Analysis\nDESCRIPTION: Calculates the Dark Energy Figure of Merit (FoM) for the combined DESI spectroscopic and Rubin photometric surveys by marginalizing over w0 and wa parameters and computing the determinant.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/notebooks/Example_Fishers-Various_Surveys-DESI-Rubin-Euclid.ipynb#2025-04-22_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nFisher_RubinDESI_combined_w0wa_marg = fo.marginalise(Fisher_RubinDESI_combined, names=['w0', 'wa'])\nprint(\"Rubin + DESI combined total DE FoM = {:.2f}\".format(np.sqrt(Fisher_RubinDESI_combined_w0wa_marg.determinant())))\n```\n\n----------------------------------------\n\nTITLE: Creating Likelihood Function for Parameter Inference\nDESCRIPTION: Defines the log-likelihood function for parameter inference. This function takes parameter vectors or dictionaries, computes theoretical angular power spectra with those parameters, and returns the log-likelihood based on the chi-squared difference with the fiducial model.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/notebooks/likelihod_photometric-Debole.ipynb#2025-04-22_snippet_20\n\nLANGUAGE: python\nCODE:\n```\ndef loglike(param_vec, prior=None):\n    \n    if type(param_vec) == dict:\n        param_dict = deepcopy(param_vec)\n    elif is_indexable_iterable(param_vec) and prior is not None:\n        #print(f'Loading prior with keys: {prior.keys}')\n        param_dict={key: param_vec[i] for i, key in enumerate(prior.keys)}\n    \n    photopars = deepcopy(cosmoFM_fid.photopars)\n    for ii, pp in enumerate(cosmoFM_fid.photopars.keys()):\n        photopars[ii] = param_dict.pop(pp, cosmoFM_fid.photopars[pp])\n    \n    photobiaspars = deepcopy(cosmoFM_fid.photobiaspars)\n    for ii, pp in enumerate(cosmoFM_fid.photobiaspars.keys()):\n        photobiaspars[pp] = param_dict.pop(pp, cosmoFM_fid.photobiaspars[pp])\n    \n    IApars = deepcopy(cosmoFM_fid.IApars)\n    for ii, pp in enumerate(cosmoFM_fid.IApars.keys()):\n        IApars[pp] = param_dict.pop(pp, cosmoFM_fid.IApars[pp])\n    \n    photo_vary = pobs.ComputeCls(\n        param_dict,\n        photopars,\n        IApars,\n        photobiaspars,\n        )\n    Cells_th = observable_Cell(photo_vary)\n\n    return -0.5 * compute_chi2(Cells_fid,Cells_th)\n```\n\n----------------------------------------\n\nTITLE: Defining CosmicFish Options and Loading External Files in Python\nDESCRIPTION: This snippet sets up the configuration for CosmicFish, including external file paths, parameter names, and fiducial values for cosmological parameters. It also defines the free parameters and their step sizes for derivative calculations.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/notebooks/Example_Fishers-Various_Surveys-DESI-Rubin-Euclid.ipynb#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nexternal = {'directory': '../../../cosmicfish_reloaded/external_input/default_camb_euclid_w0wa_HP/',  ## Files should be in the input4cast format\n            'paramnames': ['Omegam', 'Omegab', 'h', 'ns', 'sigma8', 'w0','wa'],  ## Certain paramnames like Omegam and h are obligatory\n            'folder_paramnames': ['Om', 'Ob', 'h', 'ns', 's8', 'w0', 'wa'],   ## Folder paramnames can have different names as paramnames\n            'file_prefixes' : ['background_Hz','D_Growth-zk',  \n                               'f_GrowthRate-zk', 'Plin-zk',    ## Names of cosmological quantity files can be specified here\n                               'Pnonlin-zk', 'sigma8-z'],\n            'k-units' : 'h/Mpc',   ## Units of the external input files\n            'r-units' : 'Mpc',      \n            'eps_values': [0.00625, 0.01, 0.0125, 0.01875, 0.02, 0.025, 0.03, 0.0375, 0.05, 0.10]   \n            ## Epsilon parameter variations at which files were computed\n            } \n\nfiducial = {\"Omegam\":0.32,\n            \"Omegab\":0.05,\n            \"h\":0.67,\n            \"ns\":0.96,          ## Fiducial values of the cosmological parameters\n            \"sigma8\":0.815584,\n            \"w0\":-1.0,\n            \"wa\":0.\n            }\n## Fiducial values of the nuisance parameters are set by default when specifying the survey below. Can be added also manually.\nfreepars = {\"Omegam\":0.01,\n            \"Omegab\":0.01 ,\n            \"h\":0.01,           \n            \"ns\":0.01,        ## If derivatives are calculated with 3PT, this sets the epsilon step size, per parameter. \n            \"sigma8\":0.01,      ## Should match one of the epsilons available above\n            \"w0\":0.01,\n            \"wa\":0.01\n            } \n```\n\n----------------------------------------\n\nTITLE: Setting Fiducial Cosmological Parameters and Options\nDESCRIPTION: This snippet defines the fiducial cosmological parameters and options for the Fisher matrix calculation, including survey specifications and cosmological model choice.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/notebooks/3x2pt_presentation.ipynb#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfiducial = {\n    \"Omegam\": 0.32,\n    \"Omegab\": 0.05,\n    \"h\": 0.67,\n    \"ns\": 0.96,\n    \"sigma8\": 0.815584,\n    \"w0\": -1.0,\n    \"wa\": 0.0,\n    \"mnu\": 0.06,\n    \"Neff\": 3.044,\n}\n\noptions = {\n    \"accuracy\": 1,\n    \"feedback\": 1,\n    \"code\": \"camb\",\n    \"specs_dir\": \"../survey_specifications/\",\n    \"outroot\": \"3x2pt_presentation\",\n    \"specs_dir\": \"../survey_specifications/\",\n    \"survey_name\": \"Euclid\",\n    \"survey_name_photo\": \"Euclid-Photometric-ISTF-Pessimistic\",\n    \"cosmo_model\": \"w0waCDM\",\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Likelihood Function for Parameter Estimation\nDESCRIPTION: Creates a log-likelihood function that takes parameter vectors or dictionaries, computes the theoretical angular power spectra, and returns the negative log-likelihood based on the chi-squared distance from the fiducial model.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/notebooks/likelihod_photometric.ipynb#2025-04-22_snippet_20\n\nLANGUAGE: python\nCODE:\n```\ndef loglike(param_vec, prior=None):\n    \n    if type(param_vec) == dict:\n        param_dict = deepcopy(param_vec)\n    elif is_indexable_iterable(param_vec) and prior is not None:\n        #print(f'Loading prior with keys: {prior.keys}')\n        param_dict={key: param_vec[i] for i, key in enumerate(prior.keys)}\n    \n    photopars = deepcopy(cosmoFM_fid.photopars)\n    for ii, pp in enumerate(cosmoFM_fid.photopars.keys()):\n        photopars[ii] = param_dict.pop(pp, cosmoFM_fid.photopars[pp])\n    \n    photobiaspars = deepcopy(cosmoFM_fid.photobiaspars)\n    for ii, pp in enumerate(cosmoFM_fid.photobiaspars.keys()):\n        photobiaspars[pp] = param_dict.pop(pp, cosmoFM_fid.photobiaspars[pp])\n    \n    IApars = deepcopy(cosmoFM_fid.IApars)\n    for ii, pp in enumerate(cosmoFM_fid.IApars.keys()):\n        IApars[pp] = param_dict.pop(pp, cosmoFM_fid.IApars[pp])\n    \n    photo_vary = pobs.ComputeCls(\n        param_dict,\n        photopars,\n        IApars,\n        photobiaspars,\n        )\n    Cells_th = observable_Cell(photo_vary)\n\n    return -0.5 * compute_chi2(Cells_fid,Cells_th)\n```\n\n----------------------------------------\n\nTITLE: Combining and Comparing Fisher Matrices for DESI Surveys in Python\nDESCRIPTION: This section demonstrates how to combine Fisher matrices from different DESI surveys (ELG and BGS), rename parameters, and compare the results. It includes marginalization and fixing of nuisance parameters.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/notebooks/Example_Fishers-Various_Surveys-DESI-Rubin-Euclid.ipynb#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nFisher_DESI_ELG = Spectroscopic_fish_dic['w0waCDM_external_camb_HP-3PT-DESI_ELG']\nprint(Fisher_DESI_ELG.get_param_names())\nFisher_DESI_BGS = Spectroscopic_fish_dic['w0waCDM_external_camb_HP-3PT-DESI_BGS']\nprint(Fisher_DESI_BGS.get_param_names())\n```\n\nLANGUAGE: python\nCODE:\n```\nFisher_DESI_BGS.set_param_names(['Omegam', 'Omegab', 'h', 'ns', 'sigma8', 'w0', 'wa', 'lnbBgs8_1', 'lnbBgs8_2', 'lnbBgs8_3', 'lnbBgs8_4', 'lnbBgs8_5', 'PsB_1', 'PsB_2', 'PsB_3', 'PsB_4', 'PsB_5'])\n```\n\nLANGUAGE: python\nCODE:\n```\nFisher_DESI_BGS.set_param_names_latex(['\\\\Omega_{{\\\\rm m}, 0}', '\\\\Omega_{{\\\\rm b}, 0}', 'h', 'n_{\\\\rm s}', '\\\\sigma_8', 'w_0', 'w_a', '\\\\ln(b_{B,g} \\\\sigma_8)_1', '\\\\ln(b_{B,g} \\\\sigma_8)_2', '\\\\ln(b_{B,g} \\\\sigma_8)_3', '\\\\ln(b_{B,g} \\\\sigma_8)_4', '\\\\ln(b_{B,g} \\\\sigma_8)_5', '\\P_{B,S1}', 'P_{B,S2}', 'P_{B,S3}', 'P_{B,S4}', 'P_{B,S5}'])\n```\n\nLANGUAGE: python\nCODE:\n```\nFisher_DESI_EB_full = Fisher_DESI_ELG + Fisher_DESI_BGS\n```\n\nLANGUAGE: python\nCODE:\n```\ncosmoparams = ['Omegam', 'Omegab', 'h', 'ns', 'sigma8', 'w0', 'wa']\n\nFisher_DESI_ELG_marg = fo.marginalise(Fisher_DESI_ELG, names=cosmoparams)\nFisher_DESI_ELG_fix = fo.reshuffle(Fisher_DESI_ELG, names=cosmoparams)\n\nFisher_DESI_BGS_marg = fo.marginalise(Fisher_DESI_BGS, names=cosmoparams)\nFisher_DESI_BGS_fix = fo.reshuffle(Fisher_DESI_BGS, names=cosmoparams)\n\nFisher_DESI_EB_marg = Fisher_DESI_ELG_marg+Fisher_DESI_BGS_marg\nFisher_DESI_EB_fix = Fisher_DESI_ELG_fix+Fisher_DESI_BGS_fix\n```\n\n----------------------------------------\n\nTITLE: Configuring CosmicFishPie Parameters\nDESCRIPTION: Defines the configuration parameters including observables, global options, fiducial cosmological parameters, spectral nonlinear parameters, and free parameters for Fisher matrix computation.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/notebooks/Example_Fisher-GCsp-CLASS-Euclid.ipynb#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n#Define the observables you are interested in\nobservables = ['GCsp']\n\n#Input options for CosmicFish (global options)\noptions = {'accuracy': 1,\n           'outroot': 'LCDM+Mnu+Neff_internal_class-Euclid_3PT',\n           'results_dir': 'results/',\n           'derivatives': '3PT',\n           'nonlinear': True,\n           'feedback': 2,\n           'survey_name': 'Euclid-ISTF-Superpessimistic',\n           'specs_dir' : '../survey_specifications/',\n           'cosmo_model' : 'LCDM',\n           'code': 'class',  ## Using classy wrapper for CLASS, check that it is installed in your environment\n           'class_config_yaml':'../boltzmann_yaml_files/class/fast_spectro.yaml'}\n\n#Internally CosmicFish converts these parameters to the coresponding parameters in CAMB or CLASS \nfiducial = {\"Omegam\":0.32,\n            \"Omegab\":0.05,\n            \"h\":0.67,\n            \"ns\":0.96,\n            \"sigma8\":0.82,\n            \"mnu\":0.06,\n            \"Neff\":3.046}\n\nspectrononlinearpars = {'sigmap_0':5.255388 ,\n                        'sigmap_1':4.828736 ,\n                        'sigmap_2':4.460583 ,\n                        'sigmap_3':4.067725 ,\n                        'sigmav_0':5.255388 ,\n                        'sigmav_1':4.828736 ,\n                        'sigmav_2':4.460583 ,\n                        'sigmav_3':4.067725 ,\n                        }  \n#Parameters to be varied and analyzed and their percentage variation for numerical derivatives\nfreepars = {'Omegam': 0.01,\n            'Omegab': 0.01,\n            'mnu': 0.1,\n            'Neff': 0.01,\n            'h': 0.01,\n            'ns': 0.01,\n            'sigma8': 0.01}\n```\n\n----------------------------------------\n\nTITLE: Defining Cosmological Parameters and Options\nDESCRIPTION: Sets up the fiducial cosmological parameters and various options for the Fisher matrix analysis, including the cosmological model, survey characteristics, and computational settings.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/notebooks/GCsp_presentation.ipynb#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfiducial = {\n    \"Omegam\": 0.32,\n    \"Omegab\": 0.05,\n    \"h\": 0.67,\n    \"ns\": 0.96,\n    \"sigma8\": 0.815584,\n    \"w0\": -1.0,\n    \"wa\": 0.0,\n    \"mnu\": 0.06,\n    \"Neff\": 3.044,\n}\n\noptions = {\n    \"accuracy\": 1,\n    \"feedback\": 1,\n    \"code\": \"camb\",\n    \"outroot\": \"GCsp_presentation\",\n    \"survey_name\": \"Euclid\",\n    \"survey_name_spectro\": \"Euclid-Spectroscopic-ISTF-Pessimistic\",\n    \"cosmo_model\": \"w0waCDM\",\n    \"bfs8terms\": False,\n    \"vary_bias_str\": \"b\",\n}\n```\n\n----------------------------------------\n\nTITLE: Computing Angular Power Spectra and Covariance Matrix\nDESCRIPTION: Initializes and computes angular power spectra (Cls) for the fiducial cosmology and creates a photometric covariance matrix using the fiducial parameters and computed Cls.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/notebooks/likelihod_photometric.ipynb#2025-04-22_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nphoto_fid = pobs.ComputeCls(cosmopars=cosmoFM_fid.fiducialcosmopars,\n                            photopars=cosmoFM_fid.photopars,\n                            IApars=cosmoFM_fid.IApars,\n                            biaspars=cosmoFM_fid.photobiaspars)\n\nphoto_fid.compute_all()\n\nphoto_cov_fid = pcov.PhotoCov(cosmopars=cosmoFM_fid.fiducialcosmopars,\n    photopars=cosmoFM_fid.photopars,\n    IApars=cosmoFM_fid.IApars,\n    biaspars=cosmoFM_fid.photobiaspars,\n    fiducial_Cls=photo_fid)\n```\n\n----------------------------------------\n\nTITLE: Implementing Complete Chi-Square Calculator for Multiple Probes\nDESCRIPTION: Develops a comprehensive function to compute the total chi-squared value across all cosmological probes (WL, GCph, and their cross-correlation). The function handles different combinations of observables and accounts for proper sky fraction weighting and multipole limits.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/notebooks/likelihod_photometric-Debole.ipynb#2025-04-22_snippet_19\n\nLANGUAGE: python\nCODE:\n```\ndef compute_chi2(Cells_fid, Cells_th):\n    \"\"\"\n    Compute Ï‡Â² for wedges using fully vectorized operations.\n    Matches the loop implementation exactly.\n\n    Parameters:\n    ----------\n    Cells_fid: Dict\n\n    Cells_th: Dict\n\n    Returns:\n    -------\n    float\n        Ï‡Â² value\n    \"\"\"\n    chi2 = 0\n    ells = Cells_fid[\"ells\"]\n\n    if \"WL\" in observables and not \"GCph\" in observables:\n        Cells_WL_th = Cells_th[\"Cell_LL\"]\n        Cells_WL_fid = Cells_fid[\"Cell_LL\"]\n\n        iWL = np.searchsorted(ells, ellmax_WL)\n        ells_WL = np.insert(ells, iWL, ellmax_WL)\n        Dl_WL = np.diff(ells_WL)[:iWL]\n        ells_WL = ells_WL[:iWL]\n\n        \n        chi2 += (\n            photo_cov_fid.fsky_WL\n            * compute_chi2_per_obs(Cells_WL_fid, Cells_WL_th, ells_WL, Dl_WL)\n        )\n\n    if \"GCph\" in observables and not \"WL\" in observables:\n        Cells_GC_th = Cells_th[\"Cell_GG\"]\n        Cells_GC_fid = Cells_fid[\"Cell_GG\"]\n\n        iGC = np.searchsorted(ells, ellmax_GC)\n        ells_GC = np.insert(ells, iGC, ellmax_GC)\n        Dl_GC = np.diff(ells_GC)[:iGC]\n        ells_GC = ells_GC[:iGC]\n\n        chi2 += (photo_cov_fid.fsky_GCph\n                 * compute_chi2_per_obs(Cells_GC_fid, Cells_GC_th, ells_GC, Dl_GC))\n\n    if \"GCph\" in observables and \"WL\" in observables:\n        Cells_XC_th = Cells_th[\"Cell_GL\"]\n        Cells_XC_fid = Cells_fid[\"Cell_GL\"]\n        Cells_GC_th = Cells_th[\"Cell_GG\"]\n        Cells_GC_fid = Cells_fid[\"Cell_GG\"]\n        Cells_WL_th = Cells_th[\"Cell_LL\"]\n        Cells_WL_fid = Cells_fid[\"Cell_LL\"]\n\n        iGC = np.searchsorted(ells, ellmax_GC)\n        ells_GC = np.insert(ells, iGC, ellmax_GC)\n        Dl_GC = np.diff(ells_GC)[:iGC]\n        ells_GC = ells_GC[:iGC]\n        iWL = np.searchsorted(ells, ellmax_WL)\n        ells_WL = np.insert(ells, iWL, ellmax_WL)\n        Dl_WL = np.diff(ells_WL)[:iWL]\n        ells_WL = ells_WL[:iWL]\n        iXC = np.searchsorted(ells, ellmax_XC)\n        ells_XC = np.insert(ells, iXC, ellmax_XC)\n        Dl_XC = np.diff(ells_XC)[:iXC]\n        ells_XC = ells_GC[:iXC]\n\n        big_th = np.block([[Cells_WL_th[:iXC],np.transpose(Cells_XC_th,(0,2,1))[:iXC]],\n                           [Cells_XC_th[:iXC], Cells_GC_th[:iXC]]])\n        big_fid = np.block([[Cells_WL_fid[:iXC],np.transpose(Cells_XC_fid,(0,2,1))[:iXC]],\n                           [Cells_XC_fid[:iXC], Cells_GC_fid[:iXC]]])\n\n        chi2 += np.sqrt(photo_cov_fid.fsky_WL*photo_cov_fid.fsky_GCph) * compute_chi2_per_obs(big_fid, big_th,ells_XC, Dl_XC)\n        chi2 += photo_cov_fid.fsky_WL * compute_chi2_per_obs(Cells_WL_fid[:iXC], Cells_WL_th[:iXC],ells_WL[:iXC], Dl_WL[:iXC])\n\n    return chi2\n```\n\n----------------------------------------\n\nTITLE: Computing Background and Linear Perturbation Functions\nDESCRIPTION: Calculates key cosmological background and perturbation quantities as functions of redshift, including comoving distance, angular diameter distance, Hubble parameter, growth factor, and growth rate.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/notebooks/Cosmology-Calculator.ipynb#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nchi_z = cosmofuncs.comoving(zz)\nang_z = cosmofuncs.angdist(zz)\nhub_z = cosmofuncs.Hubble(zz, physical=True)\nD_growth_z = cosmofuncs.growth(zz)\nf_growthrate_z = cosmofuncs.f_growthrate(zz)\n```\n\n----------------------------------------\n\nTITLE: Combining Rubin and DESI Fisher Matrices\nDESCRIPTION: Combines Rubin photometric 3x2pt and DESI spectroscopic galaxy clustering Fisher matrices, then prints parameter names, fiducial values, and 1-sigma confidence bounds for all parameters.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/notebooks/Example_Fishers-Various_Surveys-DESI-Rubin-Euclid.ipynb#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nFisher_RubinDESI_combined = Fisher_DESI_EB_full + Fisher_Rubin_3x2photo\nprint(\"Rubin+DESI Combined Fisher matrix for GC spectro + 3x2pt photometric\")\nfor pp,ff,ss in zip(Fisher_RubinDESI_combined.get_param_names(), Fisher_RubinDESI_combined.get_param_fiducial(), Fisher_RubinDESI_combined.get_confidence_bounds()):\n    print(\"Parameter name {:s}, fiducial={:.4f}, 1sigma bound: {:.2e}\".format(pp,ff,ss))\n```\n\n----------------------------------------\n\nTITLE: Computing Fisher Matrix for Photometric Survey\nDESCRIPTION: Calculates the Fisher information matrix for the photometric survey using the previously configured FisherMatrix object. This computation quantifies the expected parameter constraints and correlations based on the survey specifications.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/notebooks/likelihod_photometric-Debole.ipynb#2025-04-22_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nfishmat_photo = cosmoFM_fid.compute()\n```\n\n----------------------------------------\n\nTITLE: Visualizing Power Spectrum De-wiggling for Non-linear Corrections\nDESCRIPTION: Creates a two-panel figure showing the matter power spectrum alongside the non-wiggle approximation, and the impact of de-wiggling with different Î¼ (angle) values. This visualization helps understand the non-linear corrections applied to the power spectrum.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/notebooks/GCsp_presentation.ipynb#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nz = 1\nkk = np.logspace(-2, np.log10(0.4), 200)\n\nfig, axs = plt.subplots(1,, figsize=(18, 8))\n\ncolor = iter(snscolors)\n\nc = next(color)\naxs[0].loglog(kk, spectro_Pk.cosmo.Pmm(z, kk), c=c, label=\"$P_\\mathrm{mm}$\")\nc = next(color)\naxs[0].loglog(kk, spectro_Pk.cosmo.nonwiggle_pow(z, kk), c=c, label=\"$P_\\mathrm{nw}$\")\naxs[0].set_xlabel(r\"$k$ [$\\mathrm{Mpc}^{-1}$]\", fontsize=20)\naxs[0].set_ylabel(r\"Power Spectrum $P(k)$ [$\\mathrm{Mpc}^{3}$]\", fontsize=20)\naxs[0].legend(fontsize=20)\naxs[0].set_xlim([1e-2, 0.4])\n\ncolormap_mu = sns.color_palette(\"rocket\")\ncolors = iter(colormap_mu)\nmus = np.linspace(0, 1, 6)\n\nsm_mu = plt.cm.ScalarMappable(cmap=ListedColormap(colormap_mu), norm=plt.Normalize(vmin=mus.min(), vmax=mus.max()))\nsm_mu.set_array([])\n\nfor mu in mus:\n    c = next(colors)\n    axs[1].plot(kk, spectro_Pk.dewiggled_pdd(z, kk, mu) / spectro_Pk.normalized_pnw(z, kk), c=c)\n\ncbar_mu = fig.colorbar(sm_mu, ax=axs[1])\ncbar_mu.set_label('Î¼', fontsize=20, rotation=0)\naxs[1].set_xscale(\"log\")\naxs[1].set_xlabel(r\"$k$ [$\\mathrm{Mpc}^{-1}$]\", fontsize=20)\naxs[1].set_ylabel(r\"$P_\\mathrm{dw}(k, \\mu)$/$P_\\mathrm{nw}(k, \\mu)$\", fontsize=20)\naxs[1].set_xlim([1e-2, 0.4])\n\n[ax.tick_params(which=\"major\", length=15, width=2, direction=\"in\") for ax in axs]\n[ax.tick_params(which=\"minor\", length=8, width=1, direction=\"in\") for ax in axs]\n[ax.minorticks_on() for ax in axs]\n[ax.tick_params(axis=\"both\", which=\"major\", labelsize=21) for ax in axs]\n[ax.tick_params(axis=\"both\", which=\"minor\", labelsize=15) for ax in axs]\n\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Computing Dark Energy FoM for Euclid Combined Analysis\nDESCRIPTION: Calculates the Dark Energy Figure of Merit (FoM) for the combined Euclid spectroscopic and photometric surveys by marginalizing over w0 and wa parameters and computing the determinant.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/notebooks/Example_Fishers-Various_Surveys-DESI-Rubin-Euclid.ipynb#2025-04-22_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nFisher_Euclid_combined_w0wa_marg = fo.marginalise(Fisher_Euclid_combined, names=['w0', 'wa'])\nprint(\"Euclid combined total DE FoM = {:.2f}\".format(np.sqrt(Fisher_Euclid_combined_w0wa_marg.determinant())))\n```\n\n----------------------------------------\n\nTITLE: Defining Observables for Cosmological Analysis\nDESCRIPTION: This code defines the observables to be used in the cosmological analysis, specifically galaxy clustering (GCph) and weak lensing (WL).\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/notebooks/3x2pt_presentation.ipynb#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nobservables = [\"GCph\", \"WL\"]\n```\n\n----------------------------------------\n\nTITLE: Creating Visualization Plots from Fisher Matrix Results\nDESCRIPTION: Python code demonstrating how to use the fisher_plotting module to create triangle plots of Fisher matrix results. The code configures plotting options and generates a 2D contour plot of parameter constraints.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/docs/source/overview.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport cosmicfishpie.analysis.fisher_plotting as cfp\n\nplot_options = {\n    'fishers_list': [FA],\n    'fish_labels': ['Euclid Spectroscopic pessimistic'],\n    'plot_pars': list(freepars.keys()),\n    'axis_custom_factors': {'all':7}, # Axis limits cover 3-sigma bounds of first Fisher matrix\n    'plot_method': 'Gaussian',\n    'file_format': '.pdf', # file format for all the plots\n    'outpath' : './plots/', # directory where to store the files, if non-existent, it will be created\n    'outroot':'test_installation_test_plot', # file name root for all the plots, extra names can be added individually\n    'colors':[\"#000000\"],\n}\n\nfish_plotter = cfp.fisher_plotting(**plot_options)\nfish_plotter.plot_fisher(filled=[False])\n```\n\n----------------------------------------\n\nTITLE: Computing and Displaying Fiducial Angular Power Spectra\nDESCRIPTION: Calculates the fiducial angular power spectra using the observable_Cell function and displays the available keys in the result dictionary. This shows which correlation functions have been computed (auto and cross-correlations).\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/notebooks/likelihod_photometric-Debole.ipynb#2025-04-22_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nCells_fid = observable_Cell(photo_fid)\nprint(Cells_fid.keys())\n```\n\n----------------------------------------\n\nTITLE: Initializing Fisher Matrix Analysis with CosmicFish\nDESCRIPTION: Creates a FisherMatrix object with the fiducial cosmological parameters and analysis options. This object is configured for a Euclid-like survey with both weak lensing and photometric galaxy clustering observables using the symbolic computation mode.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/notebooks/likelihod_photometric-Debole.ipynb#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\noptions = {\n    \"accuracy\": 1,\n    \"feedback\": 1,\n    \"code\": \"symbolic\",\n    \"outroot\": outroot,\n    \"survey_name\": \"Euclid\",\n    \"survey_name_photo\": \"Euclid-Photometric-DeboleR1\",\n    \"survey_name_spectro\": False,\n    \"specs_dir\": \"../cosmicfishpie/configs/other_survey_specifications/\",\n    \"cosmo_model\": \"LCDM\",\n}\ncosmoFM_fid = cosmicfish.FisherMatrix(\n    fiducialpars=fiducial,\n    options=options,\n    observables=observables,\n    cosmoModel=options[\"cosmo_model\"],\n    surveyName=options[\"survey_name\"],\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Analysis Scale Limits and Bin Dimensions\nDESCRIPTION: Defines the maximum multipoles (â„“_max) to use in the analysis for weak lensing, galaxy clustering, and cross-correlations. Also calculates the minimum number of bins across probes for consistency, which is important for joint analyses.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/notebooks/likelihod_photometric-Debole.ipynb#2025-04-22_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nellmax_WL = cosmoFM_fid.specs[\"lmax_WL\"]\nellmax_GC = cosmoFM_fid.specs[\"lmax_GCph\"]\nellmax_XC = np.minimum(ellmax_GC,ellmax_WL)\nnbins_Glob = min(len(list(photo_fid.binrange_WL)), len(list(photo_fid.binrange_GCph)))\nprint(nbins_Glob)\n```\n\n----------------------------------------\n\nTITLE: Defining Observable Angular Power Spectrum Function\nDESCRIPTION: Creates a function to compute and organize the angular power spectra for different observables (WL, GCph, and cross-correlations) including shot noise terms. Takes a ComputeCls object and returns a dictionary of power spectra.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/notebooks/likelihod_photometric.ipynb#2025-04-22_snippet_14\n\nLANGUAGE: python\nCODE:\n```\ndef observable_Cell(photo_th: pobs.ComputeCls):\n    photo_th.compute_all()\n    binrange_GCph = photo_th.binrange_GCph\n    binrange_WL = photo_th.binrange_WL\n    nbin_GCph = len(binrange_GCph)\n    nbin_WL = len(binrange_WL)\n\n    ells = photo_th.result[\"ells\"]\n    output = dict(ells=ells)\n\n    observables = photo_th.observables\n    if \"WL\" in observables:\n        Cell_LL = np.empty((len(ells), nbin_WL, nbin_WL), dtype=np.float64)\n    if \"GCph\" in observables:\n        Cell_GG = np.empty((len(ells), nbin_GCph, nbin_GCph), dtype=np.float64)\n    if \"WL\" in observables and \"GCph\" in observables:\n        Cell_GL = np.empty((len(ells), nbin_GCph, nbin_WL), dtype=np.float64)\n\n    for i,j in product(binrange_WL, binrange_GCph):\n\n        if \"WL\" in observables:\n            Cell_LL[:,i-1,j-1] = (photo_th.result[\"WL {}xWL {}\".format(i,j)]\n                                  + np.eye(nbin_WL)[i-1,j-1]\n                                  * photo_cov_fid.ellipt_error**2.0 / photo_cov_fid.ngalbin_WL[i-1]\n                                  )\n\n        if \"GCph\" in observables:\n            Cell_GG[:,i-1,j-1] = (photo_th.result[\"GCph {}xGCph {}\".format(i,j)]\n                                  + np.eye(nbin_GCph)[i-1,j-1]\n                                  * 1 / photo_cov_fid.ngalbin_GCph[i-1]\n                                  )\n\n        if \"WL\" in observables and \"GCph\" in observables:\n            Cell_GL[:,i-1,j-1] = photo_th.result[\"GCph {}xWL {}\".format(i,j)]\n\n    if \"WL\" in observables:\n        output[\"Cell_LL\"] = Cell_LL\n    if \"GCph\" in observables:\n        output[\"Cell_GG\"] = Cell_GG\n    if \"WL\" in observables and \"GCph\" in observables:\n        output[\"Cell_GL\"] = Cell_GL\n\n    return output\n```\n\n----------------------------------------\n\nTITLE: Visualizing Fisher Matrix Comparisons for DESI Surveys in Python\nDESCRIPTION: This snippet sets up the plotting options and generates comparative visualizations of the Fisher matrices for different DESI survey configurations, including marginalized and fixed nuisance parameters.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/notebooks/Example_Fishers-Various_Surveys-DESI-Rubin-Euclid.ipynb#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nplot_options = {'fishers_list': [Fisher_DESI_BGS, Fisher_DESI_ELG, Fisher_DESI_EB_marg, Fisher_DESI_EB_fix, Fisher_DESI_EB_full], \n                'colors': snscolors,\n                'fish_labels': ['DESI BGS','DESI ELG', 'DESI BGS+ELG (marg. nuisance)', 'DESI BGS+ELG (fix nuisance)', 'DESI BGS+ELG (full)'],\n                'filled': False,\n                'plot_pars': cosmoparams,\n                'axis_custom_factors': {'all':3},  ## Axis limits cover 3-sigma bounds of first Fisher matrix\n                'plot_method': 'Gaussian',\n                'file_format': '.pdf',   ##file format for all the plots\n                'outpath' : './plots/',  ## directory where to store the files, if non-existent, it will be created\n                'outroot':'DESI-GCspec_comparison_BGS_ELG_w0waCDM'  ## file name root for all the plots, extra names can be added individually\n                } \n\nfish_plotter = fpp.fisher_plotting(**plot_options)\n#fish_plotter.plot_fisher(filled=False)\nfish_plotter.compare_errors(options={'yrang' : [-500, 500], 'ncol_legend': 2})\n```\n\nLANGUAGE: python\nCODE:\n```\nfish_plotter.plot_fisher(filled=False)\n```\n\n----------------------------------------\n\nTITLE: Comparing Power Spectra from Different Cosmologies\nDESCRIPTION: Creates a two-panel figure comparing the observed power spectra from the fiducial and modified cosmologies. The first panel shows the absolute power spectra while the second panel displays the percentage deviation between them, highlighting the sensitivity to cosmological parameters.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/notebooks/GCsp_presentation.ipynb#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfig, axs = plt.subplots(1, 2, figsize=(18, 8))\n\ncolormap = sns.color_palette(\"colorblind\")\ncolors = iter(colormap)\n\nc = next(colors)\naxs[0].loglog(kk, spectro_Pk.observed_Pgg(1, kk, 1), c=c, label=\"fiducal\")\n\nc = next(colors)\naxs[0].loglog(kk, spectro_Pk_sampled.observed_Pgg(1, kk, 1), c=c, label=\"sample\")\n\naxs[0].set_xlabel(r\"$k$ [$\\mathrm{Mpc}^{-1}$]\", fontsize=20)\naxs[0].set_ylabel(r\"$P(k,z=1,\\mu=1)[\\mathrm{Mpc}^3]$\", fontsize=20)\naxs[0].set_xlim([1e-2, 0.4])\naxs[0].legend(fontsize=20)\naxs[0].set_xscale(\"log\")\n\naxs[1].plot(\n    kk,\n    (spectro_Pk.observed_Pgg(1, kk, 1) - spectro_Pk_sampled.observed_Pgg(1, kk, 1))\n    / (spectro_Pk.observed_Pgg(1, kk, 1) + spectro_Pk_sampled.observed_Pgg(1, kk, 1))\n    * 200,\n    c=\"black\",\n)\n\naxs[1].set_xlabel(r\"$k$ [$\\mathrm{Mpc}^{-1}$]\", fontsize=20)\naxs[1].set_ylabel(r\"% deviation of Power Spectra\", fontsize=20)\naxs[1].set_xlim([1e-2, 0.4])\naxs[1].set_xscale(\"log\")\n\n[ax.tick_params(which=\"major\", length=15, width=2, direction=\"in\") for ax in axs]\n[ax.tick_params(which=\"minor\", length=8, width=1, direction=\"in\") for ax in axs]\n[ax.minorticks_on() for ax in axs]\n[ax.tick_params(axis=\"both\", which=\"major\", labelsize=21, pad=10) for ax in axs]\n[ax.tick_params(axis=\"both\", which=\"minor\", labelsize=15) for ax in axs]\n\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Calculating Likelihood of Fiducial Parameters\nDESCRIPTION: Computes the log-likelihood value for the fiducial parameter set, which should be close to the maximum likelihood point.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/notebooks/likelihod_photometric.ipynb#2025-04-22_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nloglike(photo_cov_fid.allparsfid)\n```\n\n----------------------------------------\n\nTITLE: Testing Likelihood Function with Sample Parameters\nDESCRIPTION: Tests the likelihood function with a sample parameter set that includes cosmological parameters, galaxy bias parameters for different bins, and intrinsic alignment parameters. This verifies that the likelihood calculation works correctly with realistic parameter values.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/notebooks/likelihod_photometric-Debole.ipynb#2025-04-22_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nsamp1dic = {'Omegam': 0.3145714273,\n 'Omegab': 0.0491989,\n 'h': 0.6737,\n 'ns': 0.96605,\n 'sigma8': 0.81,\n 'w0': -1.0,\n 'wa': 0.0,\n 'mnu': 0.06,\n 'Neff': 3.044,\n 'bias_model': 'binned',\n 'b1': 1.0997727037892875,\n 'b2': 1.220245876862528,\n 'b3': 1.2723993083933989,\n 'b4': 1.316624471897739,\n 'b5': 1.35812370570578,\n 'b6': 1.3998214171814918,\n 'b7': 1.4446452851824907,\n 'b8': 1.4964959071110084,\n 'b9': 1.5652475842498528,\n 'b10': 1.7429859437184225,\n 'fout': 0.1,\n 'co': 1,\n 'cb': 1,\n 'sigma_o': 0.05,\n 'sigma_b': 0.05,\n 'zo': 0.1,\n 'zb': 0.0,\n 'IA_model': 'eNLA',\n 'AIA': 1.72,\n 'betaIA': 2.17,\n 'etaIA': -0.41*1.1}\nprint(\"Sample likelihood\", loglike(samp1dic))\n```\n\n----------------------------------------\n\nTITLE: Plotting w0-wa Contours for Combined Survey Analyses\nDESCRIPTION: Creates contour plots specifically for the w0 and wa dark energy parameters, comparing the constraints from Euclid combined and Rubin+DESI combined analyses.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/notebooks/Example_Fishers-Various_Surveys-DESI-Rubin-Euclid.ipynb#2025-04-22_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nplot_options = {'fishers_list': [Fisher_Euclid_combined, Fisher_RubinDESI_combined], \n                'colors': snscolors,\n                'fish_labels': ['Euclid GCsp + 3x2photo', 'DESI ELG+BGS GCsp + Rubin 3x2photo'],\n                'filled': False,\n                'plot_pars': ['w0','wa'],\n                'axis_custom_factors': {'all':3},  ## Axis limits cover 3-sigma bounds of first Fisher matrix\n                'plot_method': 'Gaussian',\n                'file_format': '.pdf',   ##file format for all the plots\n                'outpath' : './plots/',  ## directory where to store the files, if non-existent, it will be created\n                'outroot':'Euclid-Rubin-DESI-combined_w0wa-only'  ## file name root for all the plots, extra names can be added individually\n                } \n\nfish_plotter = fpp.fisher_plotting(**plot_options)\nfish_plotter.plot_fisher(filled=False)\n```\n\n----------------------------------------\n\nTITLE: Testing Likelihood Function with Sample Parameter Set\nDESCRIPTION: Creates a sample parameter dictionary with cosmological and nuisance parameters, including bias parameters for each bin, and calculates its log-likelihood value.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/notebooks/likelihod_photometric.ipynb#2025-04-22_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nsamp1dic = {'Omegam': 0.3145714273,\n 'Omegab': 0.0491989,\n 'h': 0.6737,\n 'ns': 0.96605,\n 'sigma8': 0.81,\n 'w0': -1.0,\n 'wa': 0.0,\n 'mnu': 0.06,\n 'Neff': 3.044,\n 'bias_model': 'binned',\n 'b1': 1.0997727037892875,\n 'b2': 1.220245876862528,\n 'b3': 1.2723993083933989,\n 'b4': 1.316624471897739,\n 'b5': 1.35812370570578,\n 'b6': 1.3998214171814918,\n 'b7': 1.4446452851824907,\n 'b8': 1.4964959071110084,\n 'b9': 1.5652475842498528,\n 'b10': 1.7429859437184225,\n 'fout': 0.1,\n 'co': 1,\n 'cb': 1,\n 'sigma_o': 0.05,\n 'sigma_b': 0.05,\n 'zo': 0.1,\n 'zb': 0.0,\n 'IA_model': 'eNLA',\n 'AIA': 1.72,\n 'betaIA': 2.17,\n 'etaIA': -0.41*1.1}\nprint(\"Sample likelihood\", loglike(samp1dic))\n```\n\n----------------------------------------\n\nTITLE: Implementing Total Chi-squared Calculation\nDESCRIPTION: Defines a function to compute the total chi-squared value by combining contributions from different observables (WL, GCph, and their cross-correlations). Properly handles the multipole range for each observable.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/notebooks/likelihod_photometric.ipynb#2025-04-22_snippet_19\n\nLANGUAGE: python\nCODE:\n```\ndef compute_chi2(Cells_fid, Cells_th):\n    \"\"\"\n    Compute Ï‡Â² for wedges using fully vectorized operations.\n    Matches the loop implementation exactly.\n\n    Parameters:\n    ----------\n    Cells_fid: Dict\n\n    Cells_th: Dict\n\n    Returns:\n    -------\n    float\n        Ï‡Â² value\n    \"\"\"\n    chi2 = 0\n    ells = Cells_fid[\"ells\"]\n\n    if \"WL\" in observables and not \"GCph\" in observables:\n        Cells_WL_th = Cells_th[\"Cell_LL\"]\n        Cells_WL_fid = Cells_fid[\"Cell_LL\"]\n\n        iWL = np.searchsorted(ells, ellmax_WL)\n        ells_WL = np.insert(ells, iWL, ellmax_WL)\n        Dl_WL = np.diff(ells_WL)[:iWL]\n        ells_WL = ells_WL[:iWL]\n\n        \n        chi2 += (\n            photo_cov_fid.fsky_WL\n            * compute_chi2_per_obs(Cells_WL_fid, Cells_WL_th, ells_WL, Dl_WL)\n        )\n\n    if \"GCph\" in observables and not \"WL\" in observables:\n        Cells_GC_th = Cells_th[\"Cell_GG\"]\n        Cells_GC_fid = Cells_fid[\"Cell_GG\"]\n\n        iGC = np.searchsorted(ells, ellmax_GC)\n        ells_GC = np.insert(ells, iGC, ellmax_GC)\n        Dl_GC = np.diff(ells_GC)[:iGC]\n        ells_GC = ells_GC[:iGC]\n\n        chi2 += (photo_cov_fid.fsky_GCph\n                 * compute_chi2_per_obs(Cells_GC_fid, Cells_GC_th, ells_GC, Dl_GC))\n\n    if \"GCph\" in observables and \"WL\" in observables:\n        Cells_XC_th = Cells_th[\"Cell_GL\"]\n        Cells_XC_fid = Cells_fid[\"Cell_GL\"]\n        Cells_GC_th = Cells_th[\"Cell_GG\"]\n        Cells_GC_fid = Cells_fid[\"Cell_GG\"]\n        Cells_WL_th = Cells_th[\"Cell_LL\"]\n        Cells_WL_fid = Cells_fid[\"Cell_LL\"]\n\n        iGC = np.searchsorted(ells, ellmax_GC)\n        ells_GC = np.insert(ells, iGC, ellmax_GC)\n        Dl_GC = np.diff(ells_GC)[:iGC]\n        ells_GC = ells_GC[:iGC]\n        iWL = np.searchsorted(ells, ellmax_WL)\n        ells_WL = np.insert(ells, iWL, ellmax_WL)\n        Dl_WL = np.diff(ells_WL)[:iWL]\n        ells_WL = ells_WL[:iWL]\n        iXC = np.searchsorted(ells, ellmax_XC)\n        ells_XC = np.insert(ells, iXC, ellmax_XC)\n        Dl_XC = np.diff(ells_XC)[:iXC]\n        ells_XC = ells_GC[:iXC]\n\n        big_th = np.block([[Cells_WL_th[:iXC],np.transpose(Cells_XC_th,(0,2,1))[:iXC]],\n                           [Cells_XC_th[:iXC], Cells_GC_th[:iXC]]])\n        big_fid = np.block([[Cells_WL_fid[:iXC],np.transpose(Cells_XC_fid,(0,2,1))[:iXC]],\n                           [Cells_XC_fid[:iXC], Cells_GC_fid[:iXC]]])\n\n        chi2 += np.sqrt(photo_cov_fid.fsky_WL*photo_cov_fid.fsky_GCph) * compute_chi2_per_obs(big_fid, big_th,ells_XC, Dl_XC)\n        chi2 += photo_cov_fid.fsky_WL * compute_chi2_per_obs(Cells_WL_fid[:iXC], Cells_WL_th[:iXC],ells_WL[:iXC], Dl_WL[:iXC])\n\n    return chi2\n```\n\n----------------------------------------\n\nTITLE: Visualizing Observed Power Spectrum at Different Redshifts and Angles\nDESCRIPTION: Creates a two-panel figure showing the observed galaxy power spectrum at different redshifts (z=1.0-1.7) and different observation angles (Î¼ values). This demonstrates how the power spectrum varies with both redshift and the angle of observation.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/notebooks/GCsp_presentation.ipynb#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfig, axs = plt.subplots(1, 2, figsize=(18, 8))\n\ncolormap_z = sns.color_palette(\"autumn\", 8)\ncolors_z = iter(colormap_z)\nzz = np.linspace(1, 1.7, 8)\n\nsm_z = plt.cm.ScalarMappable(cmap=ListedColormap(colormap_z), norm=plt.Normalize(vmin=zz.min(), vmax=zz.max()))\nsm_z.set_array([])\n\nzz = np.linspace(1, 1.7, 8)\nfor z in zz:\n    c = next(colors_z)\n    axs[0].loglog(kk, spectro_Pk.observed_Pgg(z, kk, 1), c=c)\n\naxs[0].set_xlabel(r\"$k$ [$\\mathrm{Mpc}^{-1}$]\", fontsize=20)\naxs[0].set_ylabel(r\"$P(k,z,\\mu=1)[\\mathrm{Mpc}^3]$\", fontsize=20)\naxs[0].set_xlim([1e-2, 0.4])\naxs[0].set_ylim([5*1e1, 5*1e5])\ncbar_z = fig.colorbar(sm_z, ax=axs[0])\ncbar_z.set_label('z', fontsize=20, rotation=0)\n\ncolormap_mu = sns.color_palette(\"rocket\", 6)\ncolors_mu = iter(colormap_mu)\nmus = np.linspace(1, 0, 6)\nsm_mu = plt.cm.ScalarMappable(cmap=ListedColormap(colormap_mu), norm=plt.Normalize(vmin=mus.min(), vmax=mus.max()))\nsm_mu.set_array([])\n\nfor mu in mus:\n    c = next(colors_mu)\n    axs[1].loglog(kk, spectro_Pk.observed_Pgg(1, kk, mu), c=c)\n\naxs[1].set_xlabel(r\"$k$ [$\\mathrm{Mpc}^{-1}$]\", fontsize=20)\naxs[1].set_ylabel(r\"$P(k,z=1,\\mu)[\\mathrm{Mpc}^3]$\", fontsize=20)\naxs[1].set_xlim([1e-2, 0.4])\naxs[1].set_ylim([5*1e1, 5*1e5])\ncbar_mu = fig.colorbar(sm_mu, ax=axs[1])\ncbar_mu.set_label('Î¼', fontsize=20, rotation=0)\n\n[ax.tick_params(which=\"major\", length=15, width=2, direction=\"in\") for ax in axs]\n[ax.tick_params(which=\"minor\", length=8, width=1, direction=\"in\") for ax in axs]\n[ax.minorticks_on() for ax in axs]\n[ax.tick_params(axis=\"both\", which=\"major\", labelsize=21, pad=10) for ax in axs]\n[ax.tick_params(axis=\"both\", which=\"minor\", labelsize=15) for ax in axs]\nplt.tight_layout()\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Loading Fisher Matrices for Different Surveys\nDESCRIPTION: Loads specific Fisher matrices from dictionaries for Rubin and Euclid surveys, including both photometric and spectroscopic observations using a w0waCDM cosmological model.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/notebooks/Example_Fishers-Various_Surveys-DESI-Rubin-Euclid.ipynb#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nFisher_Rubin_3x2photo = Photometric_fish_dic['w0waCDM_external_camb_HP-Rubin-Optimistic']\nFisher_Euclid_3x2photo = Photometric_fish_dic['w0waCDM_external_camb_HP-Euclid-ISTF-Optimistic']\nFisher_Euclid_GCspectro = Spectroscopic_fish_dic['w0waCDM_external_camb_HP-3PT-Euclid-ISTF-Optimistic']\n```\n\n----------------------------------------\n\nTITLE: Listing Available Cosmological Methods\nDESCRIPTION: Lists all callable methods from the cosmological functions object, filtering out special methods (those starting with '__') to show available cosmological calculations.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/notebooks/Cosmology-Calculator.ipynb#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nmethod_list = [\n    attribute\n    for attribute in dir(cosmofuncs)\n    if callable(getattr(cosmofuncs, attribute)) and attribute.startswith(\"__\") is False\n]\nprint(method_list)\n```\n\n----------------------------------------\n\nTITLE: Computing Power Spectra and Covariance for Photometric Survey\nDESCRIPTION: Initializes and computes angular power spectra for photometric observations and their covariance matrix. This involves creating a ComputeCls object with fiducial cosmological parameters and then calculating the photometric covariance (PhotoCov) using these power spectra.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/notebooks/likelihod_photometric-Debole.ipynb#2025-04-22_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nphoto_fid = pobs.ComputeCls(cosmopars=cosmoFM_fid.fiducialcosmopars,\n                            photopars=cosmoFM_fid.photopars,\n                            IApars=cosmoFM_fid.IApars,\n                            biaspars=cosmoFM_fid.photobiaspars)\n\nphoto_fid.compute_all()\n\nphoto_cov_fid = pcov.PhotoCov(cosmopars=cosmoFM_fid.fiducialcosmopars,\n    photopars=cosmoFM_fid.photopars,\n    IApars=cosmoFM_fid.IApars,\n    biaspars=cosmoFM_fid.photobiaspars,\n    fiducial_Cls=photo_fid)\n```\n\n----------------------------------------\n\nTITLE: Defining Chi-Square Function for Matrix Determinant Ratio Test\nDESCRIPTION: Creates a function to compute chi-squared statistics for angular power spectra using determinant ratios. This implementation uses the Wishart-based approximation for the likelihood of Gaussian fields, comparing theoretical predictions with fiducial values.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/notebooks/likelihod_photometric-Debole.ipynb#2025-04-22_snippet_18\n\nLANGUAGE: python\nCODE:\n```\ndef compute_chi2_per_obs(Cell_fid, Cell_th, ells, dells):\n\n    dfid = np.linalg.det(Cell_fid)\n    dth = np.linalg.det(Cell_th)\n\n    nells = len(ells)\n    _, _, nbin = Cell_fid.shape\n\n    dmix = 0\n    for i in range(nbin):\n        Cth_mix = copy(Cell_th)\n        Cth_mix[:,i,:] = Cell_fid[:,i,:]\n        dmix += np.linalg.det(Cth_mix)\n\n    ingrd = (\n        (2*ells+1)\n        *(\n        dmix[:nells]/dth[:nells]\n        + np.log(dth[:nells]/dfid[:nells])\n        - nbin)\n    )\n    ingrd = [*((ingrd[1:]+ingrd[:-1])/2 * dells[:-1]), ingrd[-1]*dells[-1]]\n\n    chi2 = np.sum(ingrd)\n    return chi2\n```\n\n----------------------------------------\n\nTITLE: Plotting Fisher Matrix Contours for Multiple Surveys\nDESCRIPTION: Creates contour plots comparing Fisher matrices from multiple survey configurations including Euclid GCsp, DESI ELG+BGS, and their combinations with photometric observations. Uses a custom plotting module with Gaussian contours.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/notebooks/Example_Fishers-Various_Surveys-DESI-Rubin-Euclid.ipynb#2025-04-22_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nplot_options = {'fishers_list': [Fisher_Euclid_GCspectro, Fisher_DESI_EB_full, \n                                 Fisher_Euclid_combined, Fisher_RubinDESI_combined], \n                'colors': snscolors,\n                'fish_labels': ['Euclid GCsp', 'DESI ELG+BGS GCsp', 'Euclid GCsp + 3x2photo', 'DESI ELG+BGS GCsp + Rubin 3x2photo'],\n                'filled': False,\n                'plot_pars': cosmoparams,\n                'axis_custom_factors': {'all':3},  ## Axis limits cover 3-sigma bounds of first Fisher matrix\n                'plot_method': 'Gaussian',\n                'file_format': '.pdf',   ##file format for all the plots\n                'outpath' : './plots/',  ## directory where to store the files, if non-existent, it will be created\n                'outroot':'Euclid-Rubin-DESI-combined_w0waCDM'  ## file name root for all the plots, extra names can be added individually\n                } \n\nfish_plotter = fpp.fisher_plotting(**plot_options)\nfish_plotter.plot_fisher(filled=True)\n```\n\n----------------------------------------\n\nTITLE: Generating Fisher Matrix Plot\nDESCRIPTION: Creates filled contour plots of the Fisher matrices using the configured plotting options.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/notebooks/Example_Fisher-GCsp-CLASS-Euclid.ipynb#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfish_plotter = fpp.fisher_plotting(**plot_options)\nfish_plotter.plot_fisher(filled=True)\n```\n\n----------------------------------------\n\nTITLE: Visualizing Window Functions for Galaxy Clustering and Weak Lensing\nDESCRIPTION: This code creates a multi-panel plot showing window functions for galaxy clustering, weak lensing, and intrinsic alignments across different redshift bins.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/notebooks/3x2pt_presentation.ipynb#2025-04-22_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n# Testing the generation of kernels and Cls\n\ncolor = iter(snscolors)\nfig, axs = plt.subplots(3, 1, figsize=(13, 9))\nplt.figure(figsize=(10, 8))\nfor ind in photo_Cls.binrange:\n    c = next(color)\n    axs[0].plot(zz, photo_Cls.genwindow(zz, \"GCph\", ind)[0], lw=2.0, color=c)\n    axs[1].plot(zz, photo_Cls.genwindow(zz, \"WL\", ind)[0], lw=3.0, color=c)\n    axs[2].plot(zz, photo_Cls.genwindow(zz, \"WL\", ind)[1], lw=3.0, color=c, label=r\"bin %s\" % ind)\naxs[0].set_xlabel(r\"$z$\", fontsize=20)\n\naxs[0].set_ylabel(r\"$W_i^{G}(z)$\", fontsize=20)\naxs[1].set_ylabel(r\"$W_i^{\\gamma}(z)$\", fontsize=20)\naxs[2].set_ylabel(r\"$W_i^\\mathrm{IA}(z)$\", fontsize=20)\naxs[0].minorticks_on()\naxs[1].minorticks_on()\naxs[2].minorticks_on()\nfig.legend(bbox_to_anchor=(1.04, 0.5), loc=\"center left\", fontsize=20)\n```\n\n----------------------------------------\n\nTITLE: Defining Cosmological Observables for Analysis\nDESCRIPTION: Specifies the cosmological observables to include in the Fisher matrix analysis, selecting photometric galaxy clustering (GCph) and weak lensing (WL) for this example.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/notebooks/Cosmology-Calculator.ipynb#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nobservables = [\"GCph\", \"WL\"]\n```\n\n----------------------------------------\n\nTITLE: Initializing FisherMatrix Object with Cosmicfishpie\nDESCRIPTION: This snippet creates a FisherMatrix object using the Cosmicfishpie library, incorporating the previously defined fiducial parameters, options, and observables.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/notebooks/3x2pt_presentation.ipynb#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ncosmoFM_A = cosmicfish.FisherMatrix(\n    fiducialpars=fiducial,\n    options=options,\n    observables=observables,\n    cosmoModel=options[\"cosmo_model\"],\n    surveyName=options[\"survey_name\"],\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Chi-squared Calculation Per Observable\nDESCRIPTION: Creates a function to compute the chi-squared value for a single observable using determinants of covariance matrices. This function calculates the statistical distance between theoretical and fiducial power spectra.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/notebooks/likelihod_photometric.ipynb#2025-04-22_snippet_18\n\nLANGUAGE: python\nCODE:\n```\ndef compute_chi2_per_obs(Cell_fid, Cell_th, ells, dells):\n\n    dfid = np.linalg.det(Cell_fid)\n    dth = np.linalg.det(Cell_th)\n\n    nells = len(ells)\n    _, _, nbin = Cell_fid.shape\n\n    dmix = 0\n    for i in range(nbin):\n        Cth_mix = copy(Cell_th)\n        Cth_mix[:,i,:] = Cell_fid[:,i,:]\n        dmix += np.linalg.det(Cth_mix)\n\n    ingrd = (\n        (2*ells+1)\n        *(\n        dmix[:nells]/dth[:nells]\n        + np.log(dth[:nells]/dfid[:nells])\n        - nbin)\n    )\n    ingrd = [*((ingrd[1:]+ingrd[:-1])/2 * dells[:-1]), ingrd[-1]*dells[-1]]\n\n    chi2 = np.sum(ingrd)\n    return chi2\n```\n\n----------------------------------------\n\nTITLE: Visualizing Radial Selection Functions with Matplotlib\nDESCRIPTION: This snippet creates a plot of radial selection functions, including the overall redshift distribution and individual redshift bin distributions, using Matplotlib.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/notebooks/3x2pt_presentation.ipynb#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n# Full window function and binned photo n(z) distribution\nwindow = photo_Cls.window\n\ncolor = iter(snscolors)\nplt.figure(figsize=(12, 9))\nplt.plot(zz, window.dNdz(zz), label=r\"$n(z)$\", color=\"k\", lw=3, ls=\"--\")\nfor ind in photo_Cls.binrange:\n    c = next(color)\n    plt.plot(zz, window.ngal_photoz(zz, ind), label=r\"$n^{ph}_{%s}$\" % ind, color=c)\n    plt.plot(zz, window.n_i(zz, ind), ls=\":\")  # label=r'dNi bin-'+str(ind), color=c)\nplt.xlabel(r\"$z$\", fontsize=25)\nplt.ylabel(r\"$n(z)$\", fontsize=25)\nplt.legend(bbox_to_anchor=(1.04, 0.5), loc=\"center left\", fontsize=20)\n```\n\n----------------------------------------\n\nTITLE: Initializing Prior Dictionary for Cosmological Parameters\nDESCRIPTION: Defines a dictionary of prior ranges for various cosmological and nuisance parameters including matter density, baryon density, Hubble parameter, and bias parameters.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/notebooks/likelihod_photometric-Debole.ipynb#2025-04-22_snippet_28\n\nLANGUAGE: python\nCODE:\n```\nprior_dict ={\n 'Omegam': [0.24, 0.4],\n 'Omegab': [0.04, 0.06],\n 'h': [0.61, 0.75],\n 'ns': [0.92, 1.00],\n 'sigma8': [0.79, 0.83],\n 'AIA': [1.0, 3.0],\n 'etaIA' :[-6.0, 6.0],\n 'b1': [1.0, 3.0],\n 'b2': [1.0, 3.0],\n 'b3': [1.0, 3.0],\n 'b4': [1.0, 3.0],\n 'b5': [1.0, 3.0],\n 'b6': [1.0, 3.0],\n 'b7': [1.0, 3.0],\n 'b8': [1.0, 3.0],\n 'b9': [1.0, 3.0],\n 'b10': [1.0, 3.0]\n }\n```\n\n----------------------------------------\n\nTITLE: Extracting Photometric Window Function from Cosmicfishpie\nDESCRIPTION: This code extracts the photometric window function from the computed Cosmicfishpie results for further analysis and visualization.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/notebooks/3x2pt_presentation.ipynb#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nph_window = photo_Cls.window\n```\n\n----------------------------------------\n\nTITLE: Initializing and Running Cosmological Parameter Sampler in Python\nDESCRIPTION: Sets up and runs a sampler for cosmological parameter estimation. It uses the chosen prior, likelihood function, and specified sampler settings. The sampler runs until completion and calculates the evidence and posterior samples.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/notebooks/likelihod_photometric.ipynb#2025-04-22_snippet_31\n\nLANGUAGE: python\nCODE:\n```\nsampler = Sampler(prior_chosen, \n                          loglike, \n                          n_live=sampler_settings[\"n_live\"], \n                          n_networks=sampler_settings[\"n_networks\"], \n                          n_batch=sampler_settings[\"n_batch\"], \n                          pool=sampler_settings[\"pool\"], \n                          pass_dict=False,\n                          filepath=options[\"outroot\"]+\".hdf5\", \n                          resume=True,\n                          likelihood_kwargs={'prior': prior_chosen}\n                          )\nsampler.run(verbose=True, discard_exploration=True)\nlog_z_all = sampler.evidence()\nprint('Evidence:', log_z_all)\npoints_all, log_w_all, log_l_all = sampler.posterior()\n```\n\n----------------------------------------\n\nTITLE: Initializing Prior Dictionary for Cosmological Parameters in Python\nDESCRIPTION: Defines a dictionary of prior ranges for various cosmological and nuisance parameters. Each parameter has a lower and upper bound specified.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/notebooks/likelihod_photometric.ipynb#2025-04-22_snippet_28\n\nLANGUAGE: python\nCODE:\n```\nprior_dict ={\n 'Omegam': [0.24, 0.4],\n 'Omegab': [0.04, 0.06],\n 'h': [0.61, 0.75],\n 'ns': [0.92, 1.00],\n 'sigma8': [0.79, 0.83],\n 'AIA': [1.0, 3.0],\n 'etaIA' :[-6.0, 6.0],\n 'b1': [1.0, 3.0],\n 'b2': [1.0, 3.0],\n 'b3': [1.0, 3.0],\n 'b4': [1.0, 3.0],\n 'b5': [1.0, 3.0],\n 'b6': [1.0, 3.0],\n 'b7': [1.0, 3.0],\n 'b8': [1.0, 3.0],\n 'b9': [1.0, 3.0],\n 'b10': [1.0, 3.0]\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying All Fiducial Parameters\nDESCRIPTION: Outputs the complete set of fiducial parameters for the photometric covariance object. This includes cosmological parameters along with survey-specific parameters such as galaxy bias and intrinsic alignment parameters.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/notebooks/likelihod_photometric-Debole.ipynb#2025-04-22_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nphoto_cov_fid.allparsfid\n```\n\n----------------------------------------\n\nTITLE: Testing Likelihood Function with Fiducial Parameters\nDESCRIPTION: Evaluates the log-likelihood function using the fiducial parameter set. This should return zero (within numerical precision) since the fiducial model is being compared with itself, which is a useful sanity check for the likelihood implementation.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/notebooks/likelihod_photometric-Debole.ipynb#2025-04-22_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nloglike(photo_cov_fid.allparsfid)\n```\n\n----------------------------------------\n\nTITLE: Viewing Photometric Survey Bin Information\nDESCRIPTION: Prints information about the redshift bins and galaxy number densities for both weak lensing (WL) and photometric galaxy clustering (GCph). This shows the binning structure of the survey and the galaxy counts in each bin.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/notebooks/likelihod_photometric-Debole.ipynb#2025-04-22_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nprint(photo_fid.binrange_WL)\nprint(photo_fid.binrange_GCph)\nprint(photo_cov_fid.ngalbin_WL)\nprint(photo_cov_fid.ngalbin_GCph)\n```\n\n----------------------------------------\n\nTITLE: Computing Fiducial Angular Power Spectra and Displaying Keys\nDESCRIPTION: Calculates the fiducial angular power spectra using the previously defined function and prints the keys of the resulting dictionary.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/notebooks/likelihod_photometric.ipynb#2025-04-22_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nCells_fid = observable_Cell(photo_fid)\nprint(Cells_fid.keys())\n```\n\n----------------------------------------\n\nTITLE: Importing and Initializing Spectroscopic Power Spectrum Calculation\nDESCRIPTION: Imports the spectroscopic observation module and creates a ComputeGalSpectro object with the fiducial cosmological parameters to calculate galaxy power spectra.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/notebooks/GCsp_presentation.ipynb#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom cosmicfishpie.LSSsurvey import spectro_obs as spobs\n\nspectro_Pk = spobs.ComputeGalSpectro(cosmoFM_A.fiducialcosmopars)\n```\n\n----------------------------------------\n\nTITLE: Combining Euclid Spectroscopic and Photometric Fisher Matrices\nDESCRIPTION: Combines Euclid spectroscopic galaxy clustering and photometric 3x2pt Fisher matrices, then prints parameter names, fiducial values, and 1-sigma confidence bounds for all parameters.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/notebooks/Example_Fishers-Various_Surveys-DESI-Rubin-Euclid.ipynb#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nFisher_Euclid_combined = Fisher_Euclid_GCspectro + Fisher_Euclid_3x2photo\nprint(\"Euclid Combined Fisher matrix for GC spectro + 3x2pt photometric\")\nfor pp,ff,ss in zip(Fisher_Euclid_combined.get_param_names(), Fisher_Euclid_combined.get_param_fiducial(), Fisher_Euclid_combined.get_confidence_bounds()):\n    print(\"Parameter name {:s}, fiducial={:.4f}, 1sigma bound: {:.2e}\".format(pp,ff,ss))\n```\n\n----------------------------------------\n\nTITLE: Displaying All Fiducial Parameters Again\nDESCRIPTION: Shows all the fiducial parameters from the photometric covariance object, which includes cosmological parameters and nuisance parameters.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/notebooks/likelihod_photometric.ipynb#2025-04-22_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nphoto_cov_fid.allparsfid\n```\n\n----------------------------------------\n\nTITLE: Initializing Fisher Matrix with Euclid Survey Configuration\nDESCRIPTION: Creates a FisherMatrix object for the LCDM cosmological model with the Euclid survey, using symbolic computation. Sets up accuracy, feedback, and survey specifications from the default specifications directory.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/notebooks/likelihod_photometric.ipynb#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\noptions = {\n    \"accuracy\": 1,\n    \"feedback\": 1,\n    \"code\": \"symbolic\",\n    \"outroot\": outroot,\n    \"survey_name\": \"Euclid\",\n    \"survey_name_photo\": \"Euclid-Photometric-ISTF-Pessimistic\",\n    \"survey_name_spectro\": False,\n    \"specs_dir\": \"../cosmicfishpie/configs/default_survey_specifications/\",\n    \"cosmo_model\": \"LCDM\",\n}\ncosmoFM_fid = cosmicfish.FisherMatrix(\n    fiducialpars=fiducial,\n    options=options,\n    observables=observables,\n    cosmoModel=options[\"cosmo_model\"],\n    surveyName=options[\"survey_name\"],\n)\n```\n\n----------------------------------------\n\nTITLE: Displaying All Fiducial Parameters Again\nDESCRIPTION: Shows the complete set of fiducial parameters used in the photometric covariance calculation. This provides a reference for the parameter values that define the baseline model for comparison.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/notebooks/likelihod_photometric-Debole.ipynb#2025-04-22_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nphoto_cov_fid.allparsfid\n```\n\n----------------------------------------\n\nTITLE: Configuring Nautilus Sampler Settings\nDESCRIPTION: Defines the configuration for the Nautilus sampler that will be used for parameter inference. The settings include the number of live points, neural networks, batch size, and parallel processing pools for efficient sampling.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/notebooks/likelihod_photometric-Debole.ipynb#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nsampler_settings = {\n    \"n_live\": 2000,\n    \"n_networks\": 16,\n    \"n_batch\": 256,\n    \"pool\": 8,\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Redshift and Wavenumber Arrays for Cosmological Calculations\nDESCRIPTION: Creates arrays for redshift (z) and wavenumber (k) to evaluate cosmological functions across relevant ranges, with z from 0.001 to 5.0 and k from 0.001 to 10 h/Mpc on logarithmic scale.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/notebooks/Cosmology-Calculator.ipynb#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nzz = np.linspace(0.001, 5.0, 250)  # declare a z-array\nkk = np.logspace(np.log10(1e-3), np.log10(10), 250)  # declare a k-array\n```\n\n----------------------------------------\n\nTITLE: Accessing Cosmological Functions from FisherMatrix\nDESCRIPTION: Extracts the fiducial cosmology object from the FisherMatrix instance, which provides access to various cosmological functions for calculations.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/notebooks/Cosmology-Calculator.ipynb#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ncosmofuncs = cosmoFM_A.fiducialcosmo\n```\n\n----------------------------------------\n\nTITLE: Configuring Priors for Nuisance and Non-nuisance Parameters in Python\nDESCRIPTION: Iterates through the prior dictionary to add parameters to the appropriate prior objects. It distinguishes between nuisance (b-parameters and IA-related) and non-nuisance parameters.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/notebooks/likelihod_photometric.ipynb#2025-04-22_snippet_29\n\nLANGUAGE: python\nCODE:\n```\nfor par in prior_dict.keys():\n    if par in cosmoFM_fid.freeparams.keys():\n        dist_prior = (prior_dict[par][0], prior_dict[par][1])\n        if re.match(r'b\\d+', par):\n            prior_withnuis.add_parameter(par, dist_prior)\n        elif re.search(r'IA', par):\n            prior_withnuis.add_parameter(par, dist_prior)\n        else:\n            prior_nonuis.add_parameter(par, dist_prior)\n            prior_withnuis.add_parameter(par, dist_prior)\n```\n\n----------------------------------------\n\nTITLE: Initializing Prior for Non-Nuisance Parameters\nDESCRIPTION: Creates an empty Prior object that will be used to set up priors for the non-nuisance parameters in the likelihood analysis.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/notebooks/likelihod_photometric.ipynb#2025-04-22_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nprior_nonuis = Prior()\n```\n\n----------------------------------------\n\nTITLE: Viewing All Fiducial Parameters\nDESCRIPTION: Accesses all the fiducial parameters used in the photometric covariance matrix calculation.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/notebooks/likelihod_photometric.ipynb#2025-04-22_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nphoto_cov_fid.allparsfid\n```\n\n----------------------------------------\n\nTITLE: Printing Marginalized Fisher Matrices\nDESCRIPTION: Displays the marginalized Fisher matrix values for both the Rubin+DESI and Euclid combined analyses to directly compare their numerical values.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/notebooks/Example_Fishers-Various_Surveys-DESI-Rubin-Euclid.ipynb#2025-04-22_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nprint(Fisher_RubinDESI_combined_w0wa_marg.fisher_matrix)\nprint(Fisher_Euclid_combined_w0wa_marg.fisher_matrix)\n```\n\n----------------------------------------\n\nTITLE: Displaying All Parameters\nDESCRIPTION: Shows all parameters used in the Fisher matrix calculation, including both free and fixed parameters.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/notebooks/likelihod_photometric.ipynb#2025-04-22_snippet_22\n\nLANGUAGE: python\nCODE:\n```\ncosmoFM_fid.allparams\n```\n\n----------------------------------------\n\nTITLE: Accessing Spectroscopic Fisher Dictionary Keys\nDESCRIPTION: Accesses and retrieves the keys from the Spectroscopic Fisher matrix dictionary to see available survey configurations.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/notebooks/Example_Fishers-Various_Surveys-DESI-Rubin-Euclid.ipynb#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nSpectroscopic_fish_dic.keys()\n```\n\n----------------------------------------\n\nTITLE: Selecting Prior Based on Output Root in Python\nDESCRIPTION: Chooses the appropriate prior (with or without nuisance parameters) based on the output root specified in the options. Raises an error if no valid prior is specified.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/notebooks/likelihod_photometric.ipynb#2025-04-22_snippet_30\n\nLANGUAGE: python\nCODE:\n```\nif \"withnuis\" in options[\"outroot\"]:\n    prior_chosen = prior_withnuis\nelif \"nonuis\" in options[\"outroot\"]:\n    prior_chosen = prior_nonuis\nelse:\n    raise ValueError(\"No prior specified in the outroot\")\nprint(\"Loading prior with keys: \", prior_chosen.keys)\n```\n\n----------------------------------------\n\nTITLE: Displaying All Parameters in Fisher Analysis\nDESCRIPTION: Shows the complete list of parameters in the Fisher matrix analysis, including both fixed and free parameters. This provides a comprehensive view of the parameter space being considered in the analysis.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/notebooks/likelihod_photometric-Debole.ipynb#2025-04-22_snippet_22\n\nLANGUAGE: python\nCODE:\n```\ncosmoFM_fid.allparams\n```\n\n----------------------------------------\n\nTITLE: Saving Sampling Results\nDESCRIPTION: Processes and saves the sampling results to a text file with appropriate headers including likelihood, weights and parameter names.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/notebooks/likelihod_photometric-Debole.ipynb#2025-04-22_snippet_32\n\nLANGUAGE: python\nCODE:\n```\nsample_wghlkl = (np.vstack((points_all.T, np.exp(log_w_all), log_l_all)).T)\n\noutfile_chain = options[\"outroot\"]+\".txt\"\nprint(f\"Saving chain to text file {outfile_chain}\")\n\nheaderlist = ['loglike', 'weights'] + list(prior_chosen.keys)\nheader = \" \".join(headerlist)\nprint(\"Saving header: \", header)\n\nnp.savetxt(outfile_chain, sample_wghlkl, header=header)\n```\n\n----------------------------------------\n\nTITLE: Defining Redshift Range for Window Function Analysis\nDESCRIPTION: This snippet defines a redshift range for analyzing window functions, based on Euclid survey specifications.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/notebooks/3x2pt_presentation.ipynb#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nzz = np.linspace(0.001, 2.5, 250)  ## Euclid specs are only defined up to z=3.\n```\n\n----------------------------------------\n\nTITLE: Displaying Galaxy Bias Parameters at Different Redshifts\nDESCRIPTION: Prints the spectroscopic bias parameters and calculates the galaxy bias at different redshifts (z=1.0, 1.2, 1.4, 1.65) for the galaxy sample 'g'.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/notebooks/GCsp_presentation.ipynb#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nprint(spectro_Pk.spectrobiaspars)\nprint(\"bias term at z=1.0: \", spectro_Pk.bterm_fid(1.0, bias_sample=\"g\"))\nprint(\"bias term at z=1.2: \", spectro_Pk.bterm_fid(1.2, bias_sample=\"g\"))\nprint(\"bias term at z=1.4: \", spectro_Pk.bterm_fid(1.4, bias_sample=\"g\"))\nprint(\"bias term at z=1.65: \", spectro_Pk.bterm_fid(1.65, bias_sample=\"g\"))\n```\n\n----------------------------------------\n\nTITLE: Computing a Fisher Matrix with Cosmicfishpie\nDESCRIPTION: Python code showing how to use the FisherMatrix class from the cosmicfishpie module to compute a Fisher matrix based on previously configured parameters, observables and options.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/docs/source/overview.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport cosmicfishpie.fishermatrix.cosmicfish as cff\n\ncosmoFM = cff.FisherMatrix(\n    fiducialpars=fiducial,\n    freepars=freepars,\n    options=options,\n    observables=observables,\n    cosmoModel=options['cosmo_model'],\n    surveyName=options['survey_name'])\n\nFA = cosmoFM.compute()\n```\n\n----------------------------------------\n\nTITLE: Setting Output Directory for Results\nDESCRIPTION: Defines the output root directory name for saving analysis results. This variable will be used in the Fisher matrix configuration to specify where computed matrices and derived products should be stored.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/notebooks/likelihod_photometric-Debole.ipynb#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\noutroot = \"cosmicjellyfish_Euclid-DeboleR1-3x2photo_symb_withnuis\"\n```\n\n----------------------------------------\n\nTITLE: Importing Core Dependencies for Cosmological Analysis\nDESCRIPTION: Imports essential Python libraries for data analysis, visualization, and logging. These dependencies support numerical operations, visualization, and program flow management through logging and iteration tools.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/notebooks/likelihod_photometric-Debole.ipynb#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport seaborn as sns\nimport numpy as np\nimport logging\nfrom itertools import product\nfrom copy import deepcopy, copy\nfrom collections.abc import Sequence\n```\n\n----------------------------------------\n\nTITLE: Displaying Free Parameters for Fisher Analysis\nDESCRIPTION: Shows the list of free parameters that will be varied in the Fisher matrix analysis. These are the parameters for which sensitivities and correlations will be computed in the Fisher matrix.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/notebooks/likelihod_photometric-Debole.ipynb#2025-04-22_snippet_21\n\nLANGUAGE: python\nCODE:\n```\ncosmoFM_fid.freeparams\n```\n\n----------------------------------------\n\nTITLE: Defining Alternative Cosmological Parameters for Comparison\nDESCRIPTION: Creates a sample cosmology with modified parameters (higher baryon density and Hubble constant) to compare with the fiducial cosmology in subsequent analysis.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/notebooks/GCsp_presentation.ipynb#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nsample = {\n    \"Omegam\": 0.32,\n    \"Omegab\": 0.06,  # 20% higher than the fiducial\n    \"h\": 0.737,  # 10% higher than the fiducal\n    \"ns\": 0.96,\n    \"sigma8\": 0.815584,\n    \"w0\": -1.0,\n    \"wa\": 0.0,\n    \"mnu\": 0.06,\n    \"Neff\": 3.044,\n}\n\nspectro_Pk_sampled = spobs.ComputeGalSpectro(sample, cosmoFM_A.fiducialcosmopars)\n```\n\n----------------------------------------\n\nTITLE: Setting Observable Type to Galaxy Clustering Spectroscopic\nDESCRIPTION: Defines the list of observables to include in the analysis, in this case only the Galaxy Clustering Spectroscopic (GCsp) probe.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/notebooks/GCsp_presentation.ipynb#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nobservables = [\"GCsp\"]\n```\n\n----------------------------------------\n\nTITLE: Importing Core Dependencies for Cosmological Analysis\nDESCRIPTION: Imports essential Python libraries including seaborn for visualization, numpy for numerical operations, logging facilities, and utility functions for iteration and data structure manipulation.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/notebooks/likelihod_photometric.ipynb#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport seaborn as sns\nimport numpy as np\nimport logging\nfrom itertools import product\nfrom copy import deepcopy, copy\nfrom collections.abc import Sequence\n```\n\n----------------------------------------\n\nTITLE: Plotting and Analyzing Fisher Matrices in Python\nDESCRIPTION: This section imports necessary modules for plotting and analysis, sets up color palettes, and prepares for visualization of the Fisher matrix results.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/notebooks/Example_Fishers-Various_Surveys-DESI-Rubin-Euclid.ipynb#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom cosmicfishpie.analysis import fisher_plotting as fpp\nfrom cosmicfishpie.analysis import fisher_operations as fo\nimport seaborn as sns\nsnscolors=sns.color_palette(\"colorblind\")\nsnscolors\n```\n\n----------------------------------------\n\nTITLE: Displaying Angular Power Spectra Shapes\nDESCRIPTION: Prints the shapes of the different angular power spectra matrices for weak lensing, galaxy clustering, and their cross-correlation.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/notebooks/likelihod_photometric.ipynb#2025-04-22_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nprint(Cells_fid[\"Cell_LL\"].shape)\nprint(Cells_fid[\"Cell_GG\"].shape)\nprint(Cells_fid[\"Cell_GL\"].shape)\n```\n\n----------------------------------------\n\nTITLE: Initializing and Running Nested Sampler\nDESCRIPTION: Configures and runs a nested sampling algorithm with specified settings, calculating evidence and posterior samples.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/notebooks/likelihod_photometric-Debole.ipynb#2025-04-22_snippet_31\n\nLANGUAGE: python\nCODE:\n```\nsampler = Sampler(prior_chosen, \n                          loglike, \n                          n_live=sampler_settings[\"n_live\"], \n                          n_networks=sampler_settings[\"n_networks\"], \n                          n_batch=sampler_settings[\"n_batch\"], \n                          pool=sampler_settings[\"pool\"], \n                          pass_dict=False,\n                          filepath=options[\"outroot\"]+\".hdf5\", \n                          resume=True,\n                          likelihood_kwargs={'prior': prior_chosen}\n                          )\nsampler.run(verbose=True, discard_exploration=True)\nlog_z_all = sampler.evidence()\nprint('Evidence:', log_z_all)\npoints_all, log_w_all, log_l_all = sampler.posterior()\n```\n\n----------------------------------------\n\nTITLE: Installing additional external data for CosmicFishPie\nDESCRIPTION: Command to run the provided Python script that downloads required external data files for different experiments from the GitHub repository. The script will prompt for user input during execution.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/docs/source/installation.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython install_external_data.py\n```\n\n----------------------------------------\n\nTITLE: Configuring Parallel Processing Environment Variable\nDESCRIPTION: Sets the OMP_NUM_THREADS environment variable to control the number of cores used by the Einstein Boltzmann Solver for faster execution, first displaying the current value and then setting it to 8.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/notebooks/Cosmology-Calculator.ipynb#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nenvkey = \"OMP_NUM_THREADS\"\n# Set this environment variable to the number of available cores in your machine,\n# to get a fast execution of the Einstein Boltzmann Solver\nprint(\"The value of {:s} is: \".format(envkey), os.environ.get(envkey))\nos.environ[envkey] = str(8)\nprint(\"The value of {:s} is: \".format(envkey), os.environ.get(envkey))\n```\n\n----------------------------------------\n\nTITLE: Displaying Bin Ranges and Galaxy Number Densities\nDESCRIPTION: Prints the bin ranges for weak lensing and photometric galaxy clustering along with the number of galaxies per bin for each observable.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/notebooks/likelihod_photometric.ipynb#2025-04-22_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nprint(photo_fid.binrange_WL)\nprint(photo_fid.binrange_GCph)\nprint(photo_cov_fid.ngalbin_WL)\nprint(photo_cov_fid.ngalbin_GCph)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Parameter Priors\nDESCRIPTION: Iterates through prior dictionary to set up parameter priors, separating nuisance and non-nuisance parameters based on parameter names.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/notebooks/likelihod_photometric-Debole.ipynb#2025-04-22_snippet_30\n\nLANGUAGE: python\nCODE:\n```\nfor par in prior_dict.keys():\n    if par in cosmoFM_fid.freeparams.keys():\n        dist_prior = (prior_dict[par][0], prior_dict[par][1])\n        if re.match(r'b\\d+', par):\n            prior_withnuis.add_parameter(par, dist_prior)\n        elif re.search(r'IA', par):\n            prior_withnuis.add_parameter(par, dist_prior)\n        else:\n            prior_nonuis.add_parameter(par, dist_prior)\n            prior_withnuis.add_parameter(par, dist_prior)\n```\n\n----------------------------------------\n\nTITLE: Importing CosmicFishPie Fisher Matrix Module\nDESCRIPTION: Imports the core functionality from the CosmicFishPie library, specifically the fishermatrix module which contains the cosmicfish class for Fisher matrix calculations.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/notebooks/Cosmology-Calculator.ipynb#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom cosmicfishpie.fishermatrix import cosmicfish\n```\n\n----------------------------------------\n\nTITLE: Creating and Activating Python Environment with Conda\nDESCRIPTION: Commands to create and activate a Python 3.9 environment for CosmicFishPie development using Conda. This isolates the development dependencies from the system Python.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/docs/source/CONTRIBUTING.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nconda create -n cosmicfishpie python=3.9\nconda activate cosmicfishpie\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Multipoles and Determining Minimum Number of Bins\nDESCRIPTION: Gets the maximum multipole values for weak lensing, galaxy clustering, and cross-correlations from the specifications, and determines the minimum number of bins across observables.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/notebooks/likelihod_photometric.ipynb#2025-04-22_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nellmax_WL = cosmoFM_fid.specs[\"lmax_WL\"]\nellmax_GC = cosmoFM_fid.specs[\"lmax_GCph\"]\nellmax_XC = np.minimum(ellmax_GC,ellmax_WL)\nnbins_Glob = min(len(list(photo_fid.binrange_WL)), len(list(photo_fid.binrange_GCph)))\nprint(nbins_Glob)\n```\n\n----------------------------------------\n\nTITLE: Printing Cosmicfishpie Parameters\nDESCRIPTION: This code prints the bias parameters, photometric parameters, and intrinsic alignment parameters from the Cosmicfishpie FisherMatrix object.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/notebooks/3x2pt_presentation.ipynb#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nprint(cosmoFM_A.biaspars)\nprint(cosmoFM_A.photopars)\nprint(cosmoFM_A.IApars)\n```\n\n----------------------------------------\n\nTITLE: Accessing Photometric Fisher Dictionary Keys\nDESCRIPTION: Accesses and retrieves the keys from the Photometric Fisher matrix dictionary to see available survey configurations.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/notebooks/Example_Fishers-Various_Surveys-DESI-Rubin-Euclid.ipynb#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nPhotometric_fish_dic.keys()\n```\n\n----------------------------------------\n\nTITLE: Creating a New Branch for Development\nDESCRIPTION: Git commands to create a new branch for development work and push it to the remote repository. This isolates changes for specific features or bug fixes.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/docs/source/CONTRIBUTING.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n# replace BRANCH with whatever name you want to give it\ngit checkout -b BRANCH\ngit push -u origin BRANCH\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog\nDESCRIPTION: Structured changelog following Keep a Changelog format and Semantic Versioning, documenting version updates from 1.0.1 to 1.2.3 including bug fixes, documentation improvements, and feature additions.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Changelog\n\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\nand this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n\n## Unreleased\n1.0.1 : Bugfix for external file reading for release notebooks.\n        Change `is False` statements with a normal `not` to catch False-equivalents.\n\n1.0.2 : Added documentation for the cosmicfishpie.LSSsurvey submodule\n\n1.0.3 : Added documentation for the cosmicfishpie.fishermatrix submodule\n\n1.0.4 : Merged changes from the old repo to the release repo.\n        Mainly changes to the plotting routine\n        Added new external file for nonlinear power spectra\n        New options for spectroscopic error. Removed infamous h-bug\n\n1.0.5 : Removed a backwards compatibility issue with older version of numpy.\n        Switched Integration to use scipy now\n\n1.0.6 : Restructured default parameters for EBS and Survey Specifications\n\n1.0.7 : Added a new installation script to download external data from the github\n1.0.8 : Overview documentation and initial tests\n1.1.0 : Implemented symbolic as a new boltzmann solver class. Fixes of feedback prints. More docstrings.\n1.1.1 : Resolved gcsp bias bug, new test suite. \n1.1.2 : Coverage badge\n1.1.3 : New split up demonstration notebooks\n1.1.4 : Coverage reports with Codecov\n1.2.0 : Big update of configuration, specification yamls and nuisance parameter interface. No backwards compatibility of yamls!\n1.2.1 : Updating configs of other surveys: SKAO, DESI, LSST to work in new config file structure\n1.2.2 : Galaxy sample split for sources and lenses. Feedback prints more consistent.\n1.2.3 : Added a new likelihood function for photometric and spectroscopic surveys.\n```\n\n----------------------------------------\n\nTITLE: Accessing Intrinsic Alignment Parameters\nDESCRIPTION: Accesses and potentially displays the intrinsic alignment parameters from the Fisher matrix object.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/notebooks/likelihod_photometric.ipynb#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ncosmoFM_fid.IApars\n```\n\n----------------------------------------\n\nTITLE: Initializing CosmicFishPie Fisher Matrix with Configuration\nDESCRIPTION: Creates a FisherMatrix object with the previously defined fiducial parameters, options, observables, cosmological model, and survey specifications to set up the analysis framework.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/notebooks/Cosmology-Calculator.ipynb#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ncosmoFM_A = cosmicfish.FisherMatrix(\n    fiducialpars=fiducial,\n    options=options,\n    observables=observables,\n    cosmoModel=options[\"cosmo_model\"],\n    surveyName=options[\"survey_name\"],\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Package Structure in reStructuredText\nDESCRIPTION: This snippet uses reStructuredText to define the structure of the cosmicfishpie package, including a title and a list of subpackages organized in a table of contents tree.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/docs/source/cosmicfishpie.rst#2025-04-22_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\ncosmicfishpie package\n=====================\n\nSubpackages\n-----------\n\n.. toctree::\n   :maxdepth: 2\n\n   cosmicfishpie.CMBsurvey\n   cosmicfishpie.LSSsurvey\n   cosmicfishpie.analysis\n   cosmicfishpie.cosmology\n   cosmicfishpie.fishermatrix\n   cosmicfishpie.utilities\n```\n\n----------------------------------------\n\nTITLE: RST Module Documentation Block - CosmicFish Module\nDESCRIPTION: Sphinx documentation directive for the cosmicfish module that displays all members, undocumented members, and inheritance hierarchy.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/docs/source/cosmicfishpie.fishermatrix.rst#2025-04-22_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: cosmicfishpie.fishermatrix.cosmicfish\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Importing CosmicFishPie and Nautilus Libraries\nDESCRIPTION: Imports specialized modules from the CosmicFishPie package for Fisher matrix calculations and large-scale structure surveys. Also imports the Nautilus sampling library for Bayesian inference of cosmological parameters.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/notebooks/likelihod_photometric-Debole.ipynb#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom cosmicfishpie.fishermatrix import cosmicfish\nfrom cosmicfishpie.LSSsurvey import photo_obs as pobs\nfrom cosmicfishpie.LSSsurvey import photo_cov as pcov\nfrom cosmicfishpie.utilities.utils import printing as upr\nfrom nautilus import Prior\nfrom nautilus import Sampler\nimport re\nimport time\n```\n\n----------------------------------------\n\nTITLE: Saving Cosmological Parameter Sampling Results to File in Python\nDESCRIPTION: Prepares the sampling results, including parameter values, weights, and log-likelihoods, and saves them to a text file. It creates a header with parameter names and saves the data using numpy's savetxt function.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/notebooks/likelihod_photometric.ipynb#2025-04-22_snippet_32\n\nLANGUAGE: python\nCODE:\n```\nsample_wghlkl = (np.vstack((points_all.T, np.exp(log_w_all), log_l_all)).T)\n\noutfile_chain = options[\"outroot\"]+\".txt\"\nprint(f\"Saving chain to text file {outfile_chain}\")\n\nheaderlist = ['loglike', 'weights'] + list(prior_chosen.keys)\nheader = \" \".join(headerlist)\nprint(\"Saving header: \", header)\n\nnp.savetxt(outfile_chain, sample_wghlkl, header=header)\n```\n\n----------------------------------------\n\nTITLE: Importing NumPy for FoM Calculation\nDESCRIPTION: Imports the NumPy library which will be used for mathematical operations in the Figure of Merit (FoM) calculations.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/notebooks/Example_Fishers-Various_Surveys-DESI-Rubin-Euclid.ipynb#2025-04-22_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\n```\n\n----------------------------------------\n\nTITLE: Configuring Logging for CosmicFishPie\nDESCRIPTION: Sets up the logging configuration for the cosmicfishpie.cosmology.nuisance module. The logging level is set to INFO to provide relevant information during analysis without excessive debug details.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/notebooks/likelihod_photometric-Debole.ipynb#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nlogger = logging.getLogger(\"cosmicfishpie.cosmology.nuisance\")\nlogger.setLevel(logging.INFO)\n```\n\n----------------------------------------\n\nTITLE: Importing CosmicFishPie-Specific Modules and Nautilus Sampler\nDESCRIPTION: Imports modules from the CosmicFishPie package for Fisher matrix calculations, photometric observations, covariance matrices, and utilities. Also imports the Nautilus sampler for Bayesian analysis.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/notebooks/likelihod_photometric.ipynb#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom cosmicfishpie.fishermatrix import cosmicfish\nfrom cosmicfishpie.LSSsurvey import photo_obs as pobs\nfrom cosmicfishpie.LSSsurvey import photo_cov as pcov\nfrom cosmicfishpie.utilities.utils import printing as upr\nfrom nautilus import Prior\nfrom nautilus import Sampler\nimport re\nimport time\n```\n\n----------------------------------------\n\nTITLE: Displaying Intrinsic Alignment Parameters\nDESCRIPTION: Outputs the Intrinsic Alignment (IA) parameters from the Fisher Matrix object. These parameters control how galaxy shapes are correlated due to gravitational interactions during galaxy formation, which is important for weak lensing analyses.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/notebooks/likelihod_photometric-Debole.ipynb#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ncosmoFM_fid.IApars\n```\n\n----------------------------------------\n\nTITLE: Disabling Debug Mode for Printing Utilities\nDESCRIPTION: Turns off the debug mode in the printing utilities module.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/notebooks/likelihod_photometric.ipynb#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nupr.debug = False\n```\n\n----------------------------------------\n\nTITLE: Importing Libraries and Setting Color Palette for Python\nDESCRIPTION: This snippet imports necessary libraries (matplotlib, seaborn, numpy) and sets up a color palette for visualizations.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/notebooks/3x2pt_presentation.ipynb#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\n\nsnscolors = sns.color_palette(\"colorblind\")\n```\n\n----------------------------------------\n\nTITLE: Importing FisherMatrix from CosmicFishPie\nDESCRIPTION: Imports the cosmicfish module from the CosmicFishPie library, which provides tools for Fisher matrix calculations in cosmology.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/notebooks/GCsp_presentation.ipynb#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom cosmicfishpie.fishermatrix import cosmicfish\n```\n\n----------------------------------------\n\nTITLE: Accessing Fiducial Parameters\nDESCRIPTION: Retrieves free parameters from a cosmological Fisher matrix object.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/notebooks/likelihod_photometric-Debole.ipynb#2025-04-22_snippet_29\n\nLANGUAGE: python\nCODE:\n```\ncosmoFM_fid.freeparams\n```\n\n----------------------------------------\n\nTITLE: Configuring Getting Started Documentation Section in Sphinx\nDESCRIPTION: A toctree directive that organizes the 'Getting started' section of the documentation, including installation guide, project overview, and main package documentation.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/docs/source/index.md#2025-04-22_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n{toctree}\n:maxdepth: 2\n:hidden:\n:caption: Getting started\n\ninstallation\noverview\ncosmicfishpie\n```\n\n----------------------------------------\n\nTITLE: Including Overview Content in Sphinx Documentation\nDESCRIPTION: An include directive that embeds the content of overview.md file into the current document.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/docs/source/index.md#2025-04-22_snippet_2\n\nLANGUAGE: restructuredtext\nCODE:\n```\n{include} overview.md\n```\n\n----------------------------------------\n\nTITLE: Configuring Matplotlib Plot Styling\nDESCRIPTION: This snippet defines a custom configuration for Matplotlib plots. It sets colors, fonts, sizes, and other properties for various plot elements including ticks, text, lines, patches, scatter plots, grid, axes, legend, and figure.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/scripts/plot-style.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nxtick.color: 323034\nytick.color: 323034\ntext.color: 323034\nlines.markeredgecolor: black\npatch.facecolor        : bc80bd\npatch.force_edgecolor  : True\npatch.linewidth: 0.8\nscatter.edgecolors: black\ngrid.color: b1afb5\naxes.titlesize: 16\nlegend.title_fontsize: 12\nxtick.labelsize: 12\nytick.labelsize: 12\naxes.labelsize: 12\nfont.size: 10\naxes.prop_cycle : (cycler('color', ['bc80bd' ,'fb8072', 'b3de69','fdb462','fccde5','8dd3c7','ffed6f','bebada','80b1d3', 'ccebc5', 'd9d9d9']))\nmathtext.fontset: stix\nfont.family: STIXGeneral\nlines.linewidth: 2\nlegend.frameon: True\nlegend.framealpha: 0.8\nlegend.fontsize: 10\nlegend.edgecolor: 0.9\nlegend.borderpad: 0.2\nlegend.columnspacing: 1.5\nlegend.labelspacing:  0.4\ntext.usetex: False\naxes.titlelocation: left\naxes.formatter.use_mathtext: True\naxes.autolimit_mode: round_numbers\naxes.labelpad: 3\naxes.formatter.limits: -4, 4\naxes.labelcolor: black\naxes.edgecolor: black\naxes.linewidth: 0.6\naxes.spines.right : True\naxes.spines.top : True\naxes.grid: False\nfigure.titlesize: 18\nfigure.dpi: 200\n```\n\n----------------------------------------\n\nTITLE: Configuring Nautilus Sampler Settings\nDESCRIPTION: Sets up the configuration for the Nautilus sampler, including the number of live points, networks, batch size, and parallel processing pool size.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/notebooks/likelihod_photometric.ipynb#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nsampler_settings = {\n    \"n_live\": 2000,\n    \"n_networks\": 16,\n    \"n_batch\": 256,\n    \"pool\": 8,\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning the CosmicFishPie Repository with HTTPS\nDESCRIPTION: Command to clone a fork of the CosmicFishPie repository using HTTPS. This is the first step when contributing to the project after creating a fork on GitHub.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/docs/source/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/USERNAME/cosmicfishpie.git\n```\n\n----------------------------------------\n\nTITLE: Installing Cosmicfishpie and Dependencies via Shell Commands\nDESCRIPTION: Commands for installing Cosmicfishpie via pip, along with the optional CAMB Einstein-Boltzmann solver dependency, and instructions for testing the installation using pytest.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/docs/source/overview.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ pip install cosmicfishpie\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ pip install camb\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ pytest\n```\n\n----------------------------------------\n\nTITLE: Importing Cosmicfishpie FisherMatrix Module\nDESCRIPTION: This code imports the FisherMatrix class from the Cosmicfishpie library, which is used for cosmological parameter estimation.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/notebooks/3x2pt_presentation.ipynb#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom cosmicfishpie.fishermatrix import cosmicfish\n```\n\n----------------------------------------\n\nTITLE: Examining Angular Power Spectra Dimensions\nDESCRIPTION: Prints the dimensions of the computed angular power spectra arrays for weak lensing (Cell_LL), galaxy clustering (Cell_GG), and cross-correlation (Cell_GL). This shows the structure of the data with dimensions corresponding to multipoles and redshift bins.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/notebooks/likelihod_photometric-Debole.ipynb#2025-04-22_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nprint(Cells_fid[\"Cell_LL\"].shape)\nprint(Cells_fid[\"Cell_GG\"].shape)\nprint(Cells_fid[\"Cell_GL\"].shape)\n```\n\n----------------------------------------\n\nTITLE: Installing CosmicFishPie from source\nDESCRIPTION: Command to install CosmicFishPie from the local source code in development mode using pip. The -e flag enables editable mode so changes to the source code will be reflected immediately.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/docs/source/installation.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install -e .\n```\n\n----------------------------------------\n\nTITLE: Importing CosmicFishPie Fisher Matrix\nDESCRIPTION: Imports the FisherMatrix class from the cosmicfishpie package for cosmological parameter analysis.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/notebooks/Example_Fisher-GCsp-CLASS-Euclid.ipynb#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom cosmicfishpie.fishermatrix.cosmicfish import FisherMatrix\n```\n\n----------------------------------------\n\nTITLE: Installing CosmicFishPie in Development Mode\nDESCRIPTION: Commands to update core Python packages and install the CosmicFishPie package in editable mode with development dependencies. This allows changes to the code to be immediately reflected.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/docs/source/CONTRIBUTING.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npip install -U pip setuptools wheel\npip install -e .[dev]\n```\n\n----------------------------------------\n\nTITLE: Setting Output Root Directory for Results\nDESCRIPTION: Defines the output root directory name for saving results from the Euclid ISTF pessimistic 3x2 photometric analysis with symbolic computation and nuisance parameters.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/notebooks/likelihod_photometric.ipynb#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\noutroot = \"cosmicjellyfish_Euclid-ISTF-Pess-3x2photo_symb_withnuis\"\n```\n\n----------------------------------------\n\nTITLE: Importing Photometric Observable Module from Cosmicfishpie\nDESCRIPTION: This snippet imports the photometric observable module from Cosmicfishpie, which is used to compute angular power spectra.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/notebooks/3x2pt_presentation.ipynb#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom cosmicfishpie.LSSsurvey import photo_obs as phobs\n```\n\n----------------------------------------\n\nTITLE: Setting Up Color Palette and Defining Utility Function\nDESCRIPTION: Sets up a colorblind-friendly color palette using seaborn and defines a utility function to check if a variable is an indexable iterable (like lists or arrays) but not a string.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/notebooks/likelihod_photometric.ipynb#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nsnscolors = sns.color_palette(\"colorblind\")\ndef is_indexable_iterable(var):\n    return isinstance(var, (list, np.ndarray, Sequence)) and not isinstance(var, (str, bytes))\n\n```\n\n----------------------------------------\n\nTITLE: Python Package Dependencies List\nDESCRIPTION: Comprehensive list of Python package dependencies with version specifications for a cosmic analysis project. Includes core scientific packages like numpy and scipy, astronomy packages like astropy and camb, and machine learning libraries like scikit-learn.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nastropy==6.1.7\ncamb==1.5.8\nCython==3.0.11\ngetdist==1.5.4\nh5py==3.12.1\nipython==8.30.0\njoblib==1.4.2\njupyter==1.1.1\nmatplotlib==3.9.3\nnautilus-sampler==1.0.5\nnumpy\npandas\nPyYAML==6.0.2\nscikit-learn==1.5.2\nSciPy\nseaborn\nuv==0.5.5\ncolossus\nsymbolic-pofk@git+https://github.com/DeaglanBartlett/symbolic_pofk.git\n```\n\n----------------------------------------\n\nTITLE: Defining Utility Functions and Setting up Visualization\nDESCRIPTION: Sets up the color palette for plotting using Seaborn's colorblind-friendly colors. Defines a utility function to check if a variable is an indexable iterable, which helps with parameter handling in the pipeline.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/notebooks/likelihod_photometric-Debole.ipynb#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nsnscolors = sns.color_palette(\"colorblind\")\ndef is_indexable_iterable(var):\n    return isinstance(var, (list, np.ndarray, Sequence)) and not isinstance(var, (str, bytes))\n\n```\n\n----------------------------------------\n\nTITLE: Setting Up Fisher Matrix Plotting\nDESCRIPTION: Configures visualization options for plotting Fisher matrices including colors, labels, and output specifications.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/notebooks/Example_Fisher-GCsp-CLASS-Euclid.ipynb#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom cosmicfishpie.analysis import fisher_plotting as fpp\n\nplot_options = {'fishers_list': Fishers_list[::-1], \n                'colors': ['green', 'red'],\n                'fish_labels': ['Euclid Optimistic GCsp','Euclid SuperPess GCsp'][::-1],\n                'plot_pars': [par for par in fiducial],\n                'axis_custom_factors': {'all': 3},  ## Axis limits cover 3-sigma bounds of first Fisher matrix\n                'plot_method': 'Gaussian',\n                'file_format': '.pdf',   ##file format for all the plots\n                'outpath' : './plots/',  ## directory where to store the files, if non-existent, it will be created\n                'outroot':'Euclid-comparison_w0waCDM_GCsp'  ## file name root for all the plots, extra names can be added individually\n                } \n```\n\n----------------------------------------\n\nTITLE: Importing Visualization Libraries in Python\nDESCRIPTION: Imports necessary visualization libraries including matplotlib, seaborn, and numpy for plotting and numerical operations.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/notebooks/GCsp_presentation.ipynb#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import ListedColormap\nimport seaborn as sns\nimport numpy as np\n\nsnscolors = sns.color_palette(\"colorblind\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Jupyter Notebook Autoreload Extension\nDESCRIPTION: Enables the autoreload extension in Jupyter to automatically reload modules before code execution, which is useful during development.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/notebooks/Cosmology-Calculator.ipynb#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%load_ext autoreload\n%autoreload 2\n```\n\n----------------------------------------\n\nTITLE: Importing Data Science and Visualization Libraries\nDESCRIPTION: Sets up the Matplotlib inline display and imports essential libraries for data manipulation and visualization, including NumPy, Matplotlib, and Seaborn with a colorblind-friendly palette.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/notebooks/Cosmology-Calculator.ipynb#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n%matplotlib inline\nimport os\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nsnscolors = sns.color_palette(\"colorblind\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Logger for Cosmology Nuisance Parameters\nDESCRIPTION: Sets up a logger for the cosmology nuisance parameters module with the logging level set to INFO.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/notebooks/likelihod_photometric.ipynb#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nlogger = logging.getLogger(\"cosmicfishpie.cosmology.nuisance\")\nlogger.setLevel(logging.INFO)\n```\n\n----------------------------------------\n\nTITLE: Installing CosmicFishPie with pip\nDESCRIPTION: Commands to install CosmicFishPie package from PyPI using pip. This is the simplest installation method that requires only one command.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/docs/source/installation.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install cosmicfishpie\n```\n\n----------------------------------------\n\nTITLE: Disabling Debug Mode in Utilities\nDESCRIPTION: Disables the debug mode in the utility printing module of CosmicFishPie. This controls the verbosity of the output during analysis, preventing excessive diagnostic information.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/notebooks/likelihod_photometric-Debole.ipynb#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nupr.debug = False\n```\n\n----------------------------------------\n\nTITLE: Cloning the CosmicFishPie repository\nDESCRIPTION: Commands to clone the CosmicFishPie GitHub repository to your local machine and navigate to the project directory for source installation.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/docs/source/installation.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/santiagocasas/cosmicfishpie.git\ncd cosmicfishpie\n```\n\n----------------------------------------\n\nTITLE: Testing Debug Print Function\nDESCRIPTION: Tests the debug print function with a simple message, which won't output anything since debug mode is disabled.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/notebooks/likelihod_photometric.ipynb#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nupr.debug_print(\"test\")\n```\n\n----------------------------------------\n\nTITLE: Running Specific PyTest Tests\nDESCRIPTION: Example command to run tests for a specific module using PyTest. This allows testing just the components affected by changes.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/docs/source/CONTRIBUTING.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\npytest -v tests/a/b_test.py\n```\n\n----------------------------------------\n\nTITLE: Running Code Formatters for CosmicFishPie\nDESCRIPTION: Commands to run isort and black code formatters on the project. These tools ensure code consistency and adherence to the project's formatting standards.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/docs/source/CONTRIBUTING.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nisort .\nblack .\n```\n\n----------------------------------------\n\nTITLE: Building Documentation for CosmicFishPie\nDESCRIPTION: Command to build the documentation for the project. This verifies that any API documentation changes are properly formatted and will build correctly.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/docs/source/CONTRIBUTING.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nmake docs\n```\n\n----------------------------------------\n\nTITLE: Running the Ruff Linter\nDESCRIPTION: Command to run the Ruff linter on the codebase. Linting checks for potential errors and ensures code quality standards are maintained.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/docs/source/CONTRIBUTING.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nruff check .\n```\n\n----------------------------------------\n\nTITLE: Running the CosmicFishPie Release Script\nDESCRIPTION: Command to run the release script which commits changes to the CHANGELOG and version.py files, and creates a new git tag that triggers the GitHub Actions release workflow.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/RELEASE_PROCESS.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./scripts/release.sh\n```\n\n----------------------------------------\n\nTITLE: Running MyPy Type Checker\nDESCRIPTION: Command to run MyPy for type checking the Python code. Type checking helps catch type-related errors and improves code quality.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/docs/source/CONTRIBUTING.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nmypy .\n```\n\n----------------------------------------\n\nTITLE: Updating a Fork with Changes from Upstream\nDESCRIPTION: Git commands to update a fork with the latest changes from the main repository. This ensures the fork stays current with the upstream project before making new contributions.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/docs/source/CONTRIBUTING.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout main  # if not already on main\ngit pull --rebase upstream main\ngit push\n```\n\n----------------------------------------\n\nTITLE: RST Module Documentation Block - Derivatives Module\nDESCRIPTION: Sphinx documentation directive for the derivatives module that displays all members, undocumented members, and inheritance hierarchy.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/docs/source/cosmicfishpie.fishermatrix.rst#2025-04-22_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: cosmicfishpie.fishermatrix.derivatives\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Configuring Development Documentation Section in Sphinx\nDESCRIPTION: A toctree directive for the 'Development' section that includes changelog, contribution guidelines, license information, and a link to the GitHub repository.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/docs/source/index.md#2025-04-22_snippet_1\n\nLANGUAGE: restructuredtext\nCODE:\n```\n{toctree}\n:hidden:\n:caption: Development\nCHANGELOG\nCONTRIBUTING\nLicense <https://raw.githubusercontent.com/santiagocasas/cosmicfishpie/main/LICENSE>\nGitHub Repository <https://github.com/santiagocasas/cosmicfishpie>\n```\n\n----------------------------------------\n\nTITLE: RST Module Documentation Block - Config Module\nDESCRIPTION: Sphinx documentation directive for the configuration module that displays all members, undocumented members, and inheritance hierarchy.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/docs/source/cosmicfishpie.fishermatrix.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: cosmicfishpie.configs.config\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Fixing a Failed Release by Resetting Tags\nDESCRIPTION: Command to delete all local tags and fetch them again from the remote repository when a GitHub Actions release workflow fails and needs to be retried.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/RELEASE_PROCESS.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit tag -l | xargs git tag -d && git fetch -t\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx autodoc for cosmicfishpie.utilities.utils module\nDESCRIPTION: Sphinx reStructuredText directive for automatically documenting the utils module within the cosmicfishpie.utilities package. The directive includes settings to show all members, undocumented members, and inheritance information.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/docs/source/cosmicfishpie.utilities.rst#2025-04-22_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: cosmicfishpie.utilities.utils\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Installing Miniconda with Homebrew\nDESCRIPTION: Command to install Miniconda using Homebrew on macOS. Miniconda is used to create isolated Python environments for development.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/docs/source/CONTRIBUTING.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nbrew install miniconda\n```\n\n----------------------------------------\n\nTITLE: Checking Git Remote Configuration\nDESCRIPTION: Command to view the configured remote repositories. Used to verify the connection between the local clone and remote repositories.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/docs/source/CONTRIBUTING.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit remote -v\n```\n\n----------------------------------------\n\nTITLE: Adding Module Index to Sphinx Documentation\nDESCRIPTION: An eval-rst directive that includes a reference to the module index page, creating a navigational element for API documentation.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/docs/source/index.md#2025-04-22_snippet_3\n\nLANGUAGE: restructuredtext\nCODE:\n```\n{eval-rst}\n* :ref:`modindex`\n```\n\n----------------------------------------\n\nTITLE: Adding Upstream Remote to Git Repository\nDESCRIPTION: Command to add the original CosmicFishPie repository as a remote named 'upstream'. This allows keeping the fork synchronized with the main project.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/docs/source/CONTRIBUTING.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit remote add upstream https://github.com/santiagocasas/cosmicfishpie.git\n```\n\n----------------------------------------\n\nTITLE: Cloning the CosmicFishPie Repository with SSH\nDESCRIPTION: Command to clone a fork of the CosmicFishPie repository using SSH. This is an alternative to HTTPS cloning that works with SSH key authentication.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/docs/source/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:USERNAME/cosmicfishpie.git\n```\n\n----------------------------------------\n\nTITLE: Creating centered project logo in Markdown\nDESCRIPTION: HTML div with centered alignment to display the CosmicFishPie project logo with a specific width.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div align=\"center\">\n  <img src=\"https://github.com/santiagocasas/cosmicfishpie/assets/6987716/1816b3b7-0920-4a2c-aafd-9c4ba1dc3e2b\" width=\"280\">\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Prior Objects for Parameter Inference\nDESCRIPTION: Creates two Prior objects from the Nautilus package: one without nuisance parameters and one with nuisance parameters. These will be used to define the parameter space for Bayesian inference with the Nautilus sampler.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/notebooks/likelihod_photometric-Debole.ipynb#2025-04-22_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nprior_nonuis = Prior()\nprior_withnuis = Prior()\n```\n\n----------------------------------------\n\nTITLE: Testing Debug Print Functionality\nDESCRIPTION: Executes a test of the debug printing functionality. Since debug mode is set to False in the previous snippet, this would not produce output in the console unless the debug setting is changed.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/notebooks/likelihod_photometric-Debole.ipynb#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nupr.debug_print(\"test\")\n```\n\n----------------------------------------\n\nTITLE: Importing CosmicFish and Setting Environment Variables in Python\nDESCRIPTION: This snippet imports the main CosmicFish module and sets the OMP_NUM_THREADS environment variable to optimize performance of the Einstein Boltzmann Solver.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/notebooks/Example_Fishers-Various_Surveys-DESI-Rubin-Euclid.ipynb#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n#Importing main module\nfrom cosmicfishpie.fishermatrix import cosmicfish\nimport os\n```\n\nLANGUAGE: python\nCODE:\n```\nenvkey = 'OMP_NUM_THREADS'\n# Set this environment variable to the number of available cores in your machine, \n# to get a fast execution of the Einstein Boltzmann Solver\nprint(\"The value of {:s} is: \".format(envkey), os.environ.get(envkey))\nos.environ[envkey] = str(8)\nprint(\"The value of {:s} is: \".format(envkey), os.environ.get(envkey))\n```\n\n----------------------------------------\n\nTITLE: Accessing Free Parameters\nDESCRIPTION: Accesses the list of free parameters in the Fisher matrix calculation that could be varied in the likelihood analysis.\nSOURCE: https://github.com/santiagocasas/cosmicfishpie/blob/main/notebooks/likelihod_photometric.ipynb#2025-04-22_snippet_21\n\nLANGUAGE: python\nCODE:\n```\ncosmoFM_fid.freeparams\n```"
  }
]