[
  {
    "owner": "iamfat",
    "repo": "gini-book",
    "content": "TITLE: Define CGI Routes in a Gini Module (PHP)\nDESCRIPTION: This code snippet demonstrates how to define CGI routes within a Gini module's `cgiRoute` method.  It registers routes for 'hello/world', 'user/{id}', and 'user/{id}/comment/{comment}', mapping them to specific controller actions. The routes use named parameters like {id} and {comment}. Dependencies: Gini framework.\nSOURCE: https://github.com/iamfat/gini-book/blob/master/cgi/routing.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace Gini\\Module;\n\nclass Hello {\n    public static function cgiRoute($router) {\n        $router->get('hello/world', 'Real\\\\Hello@actionWorld');\n        $router\n            ->get('user/{id}', 'REST\\\\Hello@getUser')\n            ->put('user/{id}/comment/{comment}', 'REST\\\\Hello@postComment');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Define REST Controller in PHP (Gini)\nDESCRIPTION: This snippet defines a REST controller named 'Hello' within the 'Gini\\Controller\\CGI\\REST' namespace. It includes two methods: 'getArticle' which handles GET requests to retrieve an article by ID, and 'postArticle' which handles POST requests to create an article. Both methods return a JSON response with a 'hello' key set to 'world'.\nSOURCE: https://github.com/iamfat/gini-book/blob/master/rest/write_an_api.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nnamespace Gini\\Controller\\CGI\\REST {\n    use \\Gini\\Controller\\REST;\n    class Hello extends REST {\n        public function getArticle($id) {\n            return \\Gini\\CGI\\Response\\JSON([\"hello\"=>\"world\"]);\n        }\n        public function postArticle($author, $title, $body) {\n            // return \\Gini\\CGI\\Response\\JSON([\"message\"=>\"A.O.\"], 401);\n            return \\Gini\\CGI\\Response\\JSON([\"hello\"=>\"world\"]);\n        }\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining API Controller in Gini with PHP\nDESCRIPTION: Defines a simple API controller named 'Hello' within the Gini framework. The controller resides in the 'Gini\\Controller\\API' namespace and inherits from '\\Controller\\API'. The 'world' method returns the string \"Hello, world!\\n\".\nSOURCE: https://github.com/iamfat/gini-book/blob/master/api/write_an_api.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace Gini\\Controller\\API;\n\nclass Hello extends \\Controller\\API {\n\n    function world() {\n        return \"Hello, world!\\n\";\n    }\n\n}\n\n```\n\n----------------------------------------\n\nTITLE: Making an RPC Call in PHP with Gini\nDESCRIPTION: This snippet demonstrates how to make a remote procedure call using the Gini\\RPC class. It initializes the RPC client with the API endpoint and calls the 'hello->world' method with parameters. The return value of the call will contain the result.\nSOURCE: https://github.com/iamfat/gini-book/blob/master/api/json-rpc_20_over_http.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n$rpc = new \\Gini\\RPC('http://path/to/api');\n$ret = $rpc->hello->world(1, \"abc\");\n```\n\n----------------------------------------\n\nTITLE: Creating a Gini CLI Controller in PHP\nDESCRIPTION: This PHP snippet defines a CLI controller named `Hello` within the `Gini\\Controller\\CLI` namespace.  It contains a single action, `actionWorld()`, which outputs \"Hello, world!\" to the console. The class extends `Gini\\Controller\\CLI`, providing access to CLI-specific functionalities within the Gini framework.\nSOURCE: https://github.com/iamfat/gini-book/blob/master/cli/write_hello,_world.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Gini\\Controller\\CLI;\n\nclass Hello extends \\Gini\\Controller\\CLI {\n\n    function actionWorld() {\n        echo \"Hello, world!\\n\";\n    }\n\n}\n\n```\n\n----------------------------------------\n\nTITLE: Installing a Gini Module - Shell\nDESCRIPTION: This snippet shows how to install a Gini module using the `gini install` command. The command fetches the module, downloads it, and extracts it to a specified path.\nSOURCE: https://github.com/iamfat/gini-book/blob/master/deployment/gini_index.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\n$ gini install my-module '*'\nFetching INDEX file for my-module...\nDownloading my-module from my-module/1.2.0.tgz...\nExtracting my-module to /path/to/my-module...\n```\n\n----------------------------------------\n\nTITLE: Calling Gini API Endpoint with PHP\nDESCRIPTION: Demonstrates how to call the previously defined Gini API endpoint from another PHP program using the Gini\\RPC class.  It creates an RPC client connected to 'http://localhost:3000/api', calls the 'hello->world()' method, and prints the response, which should be \"Hello, world!;\".\nSOURCE: https://github.com/iamfat/gini-book/blob/master/api/write_an_api.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n$rpc = new \\Gini\\RPC('http://localhost:3000/api');\n$response = $rpc->hello->world();\necho $response; // \"Hello, world!\";\n```\n\n----------------------------------------\n\nTITLE: Running the Gini CLI Command in Bash\nDESCRIPTION: This bash snippet demonstrates the steps required to initialize the Gini composer, update dependencies, install the application, clear the cache and run the newly created \"hello world\" command. These commands ensure the Gini framework is properly set up and the custom CLI command is accessible from the command line.\nSOURCE: https://github.com/iamfat/gini-book/blob/master/cli/write_hello,_world.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngini composer init -f\ncomposer update\ngini install\n\ngini cache\ngini hello world\n```\n\n----------------------------------------\n\nTITLE: Initializing a Gini App with the CLI\nDESCRIPTION: This command initializes a new Gini application within a specified directory. It prompts the user for application metadata, such as shortname, name, description, version, and dependencies, and then generates a `gini.json` file containing this information.\nSOURCE: https://github.com/iamfat/gini-book/blob/master/get_started/write_first_app.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ mkdir sample\n$ cd sample\n$ gini init\nShortname [sample]:\nName [Sample]:\nDescription [App description...]:\nVersion [0.1]:\nDependencies [N/A]:\n$ _\n```\n\n----------------------------------------\n\nTITLE: Dynamically Set CGI Routes in Gini (PHP)\nDESCRIPTION: This code snippet shows how to dynamically access and modify the global CGI router in the Gini framework.  `\\Gini\\CGI::router()` retrieves the router instance, which can then be used to define new routes using methods like `get`, `post`, `put`, etc. This allows for runtime configuration of routes. Dependencies: Gini framework.\nSOURCE: https://github.com/iamfat/gini-book/blob/master/cgi/routing.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$router = \\Gini\\CGI::router();\n$router and $router->get('hello/world', 'Hello@actionWorld');\n```\n\n----------------------------------------\n\nTITLE: Publishing/Unpublishing Modules (Passwordless) - Shell\nDESCRIPTION: This snippet demonstrates how to publish and unpublish a Gini module without password prompts by logging in using `gini index login` and logging out using `gini index logout`. It also uses `gini index who` to check current login status.\nSOURCE: https://github.com/iamfat/gini-book/blob/master/deployment/gini_index.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n$ gini index login doejohn\nPassword:\nYou've successfully logged in as doejohn!\n\n$ gini index who\nHey! You are doejohn.\n\n$ gini index publish 1.2.0\nmy-module/1.2.0 was published successfully.\n\n$ gini index unpublish 1.2.0\nmy-module/1.2.0 was unpublished successfully.\n\n$ gini index logout\nYou are logged out now.\n\n$ gini index who\nOops. You are NOBODY.\n```\n\n----------------------------------------\n\nTITLE: Call REST API from Another Module (Gini, PHP)\nDESCRIPTION: This snippet shows how to call the REST API from another Gini module using the \\Gini\\REST client. It creates a new \\Gini\\REST instance, makes a GET request to 'hello/article/1', and then makes a POST request to 'hello/article' with some data. It then prints the response from the GET request.\nSOURCE: https://github.com/iamfat/gini-book/blob/master/rest/write_an_api.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n$rest = new \\Gini\\REST('http://localhost:3000/rest');\n$response = $rest->get('hello/article/1');\necho $response; // \"Hello, world!\";\n\n$response = $rest->post('hello/article', ['author'=>'libai', 'title'=>'jiangjinjiu', 'body'=>'balabala']);\n```\n\n----------------------------------------\n\nTITLE: Tagging a Git Commit for Publishing - Shell\nDESCRIPTION: Before publishing a module, the specified commit needs to be tagged using `git tag`. This snippet shows how to tag a commit with a version number, a prerequisite for the `gini index publish` command.\nSOURCE: https://github.com/iamfat/gini-book/blob/master/deployment/gini_index.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n$ cd /path/to/my-module\n$ git tag 1.2.0\n```\n\n----------------------------------------\n\nTITLE: Nesting CGI Routes in Gini (PHP)\nDESCRIPTION: This code snippet illustrates how to nest CGI routes within the Gini framework.  A route is defined for 'nested/to', which then defines another route 'some-place/action' within a callback function, mapping it to a specific controller action. This enables grouping related routes. Dependencies: Gini framework.\nSOURCE: https://github.com/iamfat/gini-book/blob/master/cgi/routing.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$router->get('nested/to', function($router) {\n    $router->get('some-place/action', 'Real\\\\Place@someAction');\n});\n```\n\n----------------------------------------\n\nTITLE: Downloading Gini Module\nDESCRIPTION: This snippet demonstrates how to download the Gini module using git. It creates a directory to store the module and clones the repository from GitHub.\nSOURCE: https://github.com/iamfat/gini-book/blob/master/get_started/installation.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir $HOME/gini-modules\ncd $HOME/gini-modules\ngit clone https://github.com/iamfat/gini.git\n```\n\n----------------------------------------\n\nTITLE: Handling RPC Exceptions in PHP\nDESCRIPTION: This snippet demonstrates how to handle exceptions that may occur during an RPC call using a try-catch block. An \\Gini\\RPC\\Exception is thrown if an error occurs during the remote procedure call.\nSOURCE: https://github.com/iamfat/gini-book/blob/master/api/json-rpc_20_over_http.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\ntry {\n    $rpc = new \\Gini\\RPC('http://path/to/api');\n    $ret = $rpc->hello->world(1, \"abc\");\n} catch (\\Gini\\RPC\\Exception $e) {\n    // catch the exception\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Gini CGI Controller (PHP)\nDESCRIPTION: This code creates a CGI controller class named 'Hello' within the Gini framework.  It defines an 'actionWorld' function that renders a view called 'hello' with the variable 'world' set to 'world'.  The function returns an HTML response generated from the rendered view.\nSOURCE: https://github.com/iamfat/gini-book/blob/master/cgi/write_hello_world.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace Gini\\Controller\\CGI;\n\nclass Hello extends \\Gini\\Controller\\CGI {\n\n    function actionWorld() {\n        $view = V('hello', ['world'=>'world']);\n        return new \\Gini\\CGI\\Response\\HTML($view);\n    }\n\n}\n\n```\n\n----------------------------------------\n\nTITLE: Initializing PHPUnit Environment with Gini\nDESCRIPTION: This command initializes the PHPUnit environment by generating the `ci/test` directory and the `phpunit.xml.dist` configuration file. It prepares the project for running PHPUnit tests.\nSOURCE: https://github.com/iamfat/gini-book/blob/master/testing/phpunit.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngini ci phpunit init\n```\n\n----------------------------------------\n\nTITLE: Initializing Gini and Updating Web Directory (Bash)\nDESCRIPTION: These commands initialize a Gini project, update dependencies using Composer, clear the cache, and update the web directory.  This ensures that the newly created controller and view are accessible through the web server.\nSOURCE: https://github.com/iamfat/gini-book/blob/master/cgi/write_hello_world.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\ngini composer init -f\ncomposer update\ngini cache\ngini web update\n```\n\n----------------------------------------\n\nTITLE: Initializing Composer for Gini App (Shell)\nDESCRIPTION: This snippet demonstrates how to initialize Composer for a Gini application. It generates a composer.json file using the `gini composer init` command and then installs the dependencies using `composer install`. The `gini composer init` command is specific to the Gini framework.\nSOURCE: https://github.com/iamfat/gini-book/blob/master/deployment/gini_composer_mirror.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ gini composer init\nGenerating Composer configuration file...\n   done.\n$ composer install\n```\n\n----------------------------------------\n\nTITLE: Getting RPC Call Result in PHP\nDESCRIPTION: This example demonstrates retrieving the result of an RPC call in PHP. The return value of the $rpc->hello->world() call directly provides the result from the remote service.\nSOURCE: https://github.com/iamfat/gini-book/blob/master/api/json-rpc_20_over_http.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n$rpc = new \\Gini\\RPC('http://path/to/api');\n$ret = $rpc->hello->world(1, \"abc\");\n// $ret = 'Hello, world!'\n```\n\n----------------------------------------\n\nTITLE: Update Cache and Preview Web Server (Bash)\nDESCRIPTION: This snippet demonstrates how to update the cache and preview the web server using Gini CLI commands. The 'gini cache' command updates the application cache. The 'gini web update' command updates the web server configuration. The 'gini web preview <host:port>' command starts a local web server for previewing the API.\nSOURCE: https://github.com/iamfat/gini-book/blob/master/rest/write_an_api.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\n$ gini cache\n$ gini web update\n$ gini web preview <host:port>    # default is localhost:3000\n```\n\n----------------------------------------\n\nTITLE: Setting User-Specific Path\nDESCRIPTION: This snippet shows how to add the Gini binary directory to the user's PATH environment variable by modifying the ~/.profile file.  This allows the user to execute Gini commands from any directory.\nSOURCE: https://github.com/iamfat/gini-book/blob/master/get_started/installation.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport PATH=$HOME/gini-modules/gini/bin:$PATH\n```\n\n----------------------------------------\n\nTITLE: Setting up Composer Mirror in China (Shell)\nDESCRIPTION: This snippet shows how to configure a global Composer mirror to `packagist.phpcomposer.com` to improve package download speeds in China. The `composer config -g` command is used to set the `repo.packagist` repository URL globally.\nSOURCE: https://github.com/iamfat/gini-book/blob/master/deployment/gini_composer_mirror.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n$ composer config -g repo.packagist composer https://packagist.phpcomposer.com\n```\n\n----------------------------------------\n\nTITLE: Checking Gini Version - Shell\nDESCRIPTION: This snippet demonstrates how to check the current version of a Gini module and how to set a new version using the `gini version` command. It shows the command usage and the expected output.\nSOURCE: https://github.com/iamfat/gini-book/blob/master/deployment/gini_index.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ gini version\nmy-module/1.2.0\n\n$ gini version 1.3.0-beta\nmy-module/1.3.0-beta\n```\n\n----------------------------------------\n\nTITLE: Module Entry Point Class in Gini (PHP)\nDESCRIPTION: Defines a module entry point class with `setup` and `shutdown` methods that are executed at the beginning and end of each request, respectively. The `setup` method runs during application initialization, while the `shutdown` method runs after the response is sent to the client. The module's namespace corresponds to the module's directory name or the ID defined in `gini.json`.\nSOURCE: https://github.com/iamfat/gini-book/blob/master/cgi/request_lifecycle.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n// 如果模块目录叫 my-module, 或者在 gini.json 定义的 id: my-module\n// 入口会是是 class/Gini/Module/MyModule.php\n\nnamespace Gini\\Module;\n\nclass MyModule extends Prototype {\n\n    public static function setup() {\n        // run when each request started\n    }\n\n    public static function shutdown() {\n        // run when each request finished\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Request Example\nDESCRIPTION: This snippet shows an example of the JSON payload that is sent when making an RPC call. The 'jsonrpc' field indicates the JSON-RPC version, 'method' specifies the remote method to call, 'params' contains the arguments, and 'id' is used to match requests and responses.\nSOURCE: https://github.com/iamfat/gini-book/blob/master/api/json-rpc_20_over_http.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\"jsonrpc\": \"2.0\", \"method\": \"hello/world\", \"params\": [1, \"abc\"], \"id\": 1}\n```\n\n----------------------------------------\n\nTITLE: Deploying Gini Kernel Globally\nDESCRIPTION: This snippet demonstrates how to deploy the Gini kernel to a global location (/usr/local/share/gini). It clones the Gini repository into a shared directory.\nSOURCE: https://github.com/iamfat/gini-book/blob/master/get_started/installation.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p /usr/local/share/gini-modules\ngit clone https://github.com/iamfat/gini /usr/local/share/gini-modules/gini\n```\n\n----------------------------------------\n\nTITLE: Querying Users with Those ORM in Gini\nDESCRIPTION: This code snippet demonstrates how to query users using the Those ORM in the Gini PHP framework. It fetches users whose name begins with 'J' and whose father is in the set of users whose email contains 'genee'.\nSOURCE: https://github.com/iamfat/gini-book/blob/master/README.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n// 查询所有名字以'J'开头, 爸爸的email中存在genee的用户\n$users = those('users')\n    ->whose('name')->beginWith('J')\n    ->andWhose('father')->isIn(\n        those('users')->whose('email')->contains('genee')\n    );\n```\n\n----------------------------------------\n\nTITLE: Gini App Configuration File (gini.json)\nDESCRIPTION: This JSON file contains the configuration details of a Gini application. It includes the application's ID, name, description, version, and any dependencies it may have. This file is automatically generated during the `gini init` process.\nSOURCE: https://github.com/iamfat/gini-book/blob/master/get_started/write_first_app.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": \"sample\",\n    \"name\": \"Sample\",\n    \"description\": \"App description...\",\n    \"version\": \"0.1\",\n    \"dependencies\": \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Starting a Gini Web Preview Server (Bash)\nDESCRIPTION: This command starts a local development server using the Gini framework. The `<host:port>` argument specifies the address and port the server will listen on; the default is `localhost:3000`.\nSOURCE: https://github.com/iamfat/gini-book/blob/master/cgi/write_hello_world.md#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\n# 开始运行\ngini web preview <host:port>    # default is localhost:3000\n```\n\n----------------------------------------\n\nTITLE: JSON Response Example\nDESCRIPTION: This snippet illustrates a normal JSON response from the remote service. The 'jsonrpc' field indicates the JSON-RPC version, 'result' contains the result of the call, and 'id' matches the request.\nSOURCE: https://github.com/iamfat/gini-book/blob/master/api/json-rpc_20_over_http.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\"jsonrpc\": \"2.0\", \"result\": \"Hello, world!\", \"id\": 1}\n```\n\n----------------------------------------\n\nTITLE: Publishing/Unpublishing Modules (Regular) - Shell\nDESCRIPTION: This snippet demonstrates how to publish and unpublish a Gini module using the `gini index publish` and `gini index unpublish` commands. It requires user authentication with a username and password.\nSOURCE: https://github.com/iamfat/gini-book/blob/master/deployment/gini_index.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n$ gini index publish 1.2.0\nUser: doejohn\nPassword:\nmy-module/1.2.0 was published successfully.\n\n$ gini index unpublish 1.2.0\nUser: doejohn\nPassword:\nmy-module/1.2.0 was unpublished successfully.\n```\n\n----------------------------------------\n\nTITLE: Creating a PHPUnit Test with Gini\nDESCRIPTION: This command creates a new PHPUnit test file with the specified name. In this example, it generates the `ci/test/Hello/World.php` file, providing a starting point for writing test cases.\nSOURCE: https://github.com/iamfat/gini-book/blob/master/testing/phpunit.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngini ci phpunit create Hello/World\n```\n\n----------------------------------------\n\nTITLE: Expected Output of the Gini CLI Command\nDESCRIPTION: This bash snippet shows the expected output when executing the `gini hello world` command. It simply prints the string \"Hello, world!\" to the console.\nSOURCE: https://github.com/iamfat/gini-book/blob/master/cli/write_hello,_world.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nHello, world!\n```\n\n----------------------------------------\n\nTITLE: Pulling and Running Gini Docker Image\nDESCRIPTION: This snippet provides commands to pull a pre-built Gini development environment Docker image and run it. It maps port 9000 of the container to port 9000 on the host machine.\nSOURCE: https://github.com/iamfat/gini-book/blob/master/get_started/installation.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull genee/gini-dev\ndocker run --name gini-dev -d -p 9000:9000 genee/gini-dev\n```\n\n----------------------------------------\n\nTITLE: Example PHPUnit Test Case\nDESCRIPTION: This is an example of a basic PHPUnit test case. It defines a test method `testHello` that currently asserts `false` with a placeholder message, indicating that the test implementation is needed. The class extends `Gini\\PHPUnit\\TestCase\\CLI`.\nSOURCE: https://github.com/iamfat/gini-book/blob/master/testing/phpunit.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Gini\\PHPUnit\\Hello;\n\nclass World extends \\Gini\\PHPUnit\\TestCase\\CLI {\n\n    public function testHello() {\n        $this->assertTrue(false, \"PLEASE IMPLEMENT THIS!\");\n    }\n\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining a Gini Framework Module Class in PHP\nDESCRIPTION: This code snippet demonstrates how to define a module class in the Gini framework. The class resides in the `Gini\\Module` namespace and includes static methods for setup, shutdown, and diagnostics. The `setup` method is called at the beginning of each request, `shutdown` at the end, and `diagnose` when running `gini doctor`.\nSOURCE: https://github.com/iamfat/gini-book/blob/master/cli/concept.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n// path/to/mymodule/class/Gini/Module/MyModule.php\n\nnamespace Gini\\Module;\n\nclass MyModule {\n\n    static function setup() {\n        // run when each request started\n    }\n\n    static function shutdown() {\n        // run when each request finished\n    }\n    \n    static function diagnose() {\n        // run to check all things required for module\n        // will be called by `gini doctor`\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Users with Those ORM in PHP\nDESCRIPTION: This code snippet demonstrates how to use Those ORM to query users whose names begin with 'J' and whose father's email contains 'genee'. It showcases the natural semantic syntax provided by Those ORM for database interaction.\nSOURCE: https://github.com/iamfat/gini-book/blob/master/overview/about_gini.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n// 查询所有名字以'J'开头, 爸爸的email中存在genee的用户\n$users = those('users')\n    ->whose('name')->beginWith('J')\n    ->andWhose('father')->isIn(\n        those('users')->whose('email')->contains('genee')\n    );\n```\n\n----------------------------------------\n\nTITLE: Creating a Gini View (HTML)\nDESCRIPTION: This is the HTML view file that displays the \"Hello, world!\" message. It uses PHP's short echo tag `<?= ?>` to output the value of the `$world` variable, which is passed from the controller.\nSOURCE: https://github.com/iamfat/gini-book/blob/master/cgi/write_hello_world.md#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<h1>Hello, <?= $world ?>!</h1>\n```\n\n----------------------------------------\n\nTITLE: Setting Global Path in /etc/profile.d\nDESCRIPTION: This snippet shows how to set the PATH environment variable globally by creating a file in /etc/profile.d. This makes Gini commands available to all users on the system.\nSOURCE: https://github.com/iamfat/gini-book/blob/master/get_started/installation.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nexport PATH=/usr/local/share/gini/bin:$PATH\n```\n\n----------------------------------------\n\nTITLE: Handle Named Variables in Gini Route Parameters (PHP)\nDESCRIPTION: This code demonstrates how the Gini framework automatically handles named variables defined in routes (e.g., `{uid}` and `{comment}`). The framework uses reflection to map the named variables to the corresponding parameters in the controller action, regardless of their order. This allows for flexible parameter ordering in the controller method. Dependencies: Gini framework.\nSOURCE: https://github.com/iamfat/gini-book/blob/master/cgi/routing.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$router->get('user/{uid}/comment/{comment}', 'REST\\\\Hello@postComment');\n\nclass Hello extends REST {\n    public function postComment($comment, $uid) {\n        // 在这样的参数顺序中, 系统扔能确保传入数据正常\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Gini Configuration and Running Web Server with Bash\nDESCRIPTION: Executes a series of Gini commands to update the application cache, configuration, and web server. The 'gini cache' command updates the cache, 'gini config update' updates the configuration, 'gini web update' updates the web server, and 'gini web preview <host:port>' starts a local development server, defaulting to localhost:3000.\nSOURCE: https://github.com/iamfat/gini-book/blob/master/api/write_an_api.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\n$ gini cache\n$ gini config update\n$ gini web update\n$ gini web preview <host:port>    # default is localhost:3000\n```"
  }
]