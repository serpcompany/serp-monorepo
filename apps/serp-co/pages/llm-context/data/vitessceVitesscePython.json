[
  {
    "owner": "vitessce",
    "repo": "vitessce-python",
    "content": "TITLE: Optimizing and Converting AnnData to Zarr Format\nDESCRIPTION: Optimizes the AnnData object for visualization by selecting relevant columns and embeddings, then converts it to Zarr format. This step is crucial for efficient data loading in Vitessce and only executes if the Zarr file doesn't already exist.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/data_export_s3.ipynb#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nzarr_filepath = join(\"data\", \"habib17.processed.zarr\")\nif not isdir(zarr_filepath):\n    adata = optimize_adata(\n        adata,\n        obs_cols=[\"CellType\"],\n        obsm_keys=[\"X_umap\"],\n        var_cols=[\"top_highly_variable\"],\n        optimize_X=True,\n    )\n    adata.write_zarr(zarr_filepath, chunks=[adata.shape[0], VAR_CHUNK_SIZE])\n```\n\n----------------------------------------\n\nTITLE: Configuring Vitessce for SpatialData Visualization in Python\nDESCRIPTION: This code configures Vitessce for visualizing SpatialData. It sets up the VitessceConfig, adds a dataset using SpatialDataWrapper, configures various views like spatial, feature list, and layer controller, and sets up view coordination and layout.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/spatial_data.ipynb#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nvc = VitessceConfig(\n    schema_version=\"1.0.16\",\n    name='Visium SpatialData Demo (visium_associated_xenium_io)',\n)\n# Add data to the configuration:\nwrapper = SpatialDataWrapper(\n    sdata_path=spatialdata_filepath,\n    # The following paths are relative to the root of the SpatialData zarr store on-disk.\n    image_path=\"images/CytAssist_FFPE_Human_Breast_Cancer_full_image\",\n    table_path=\"tables/table\",\n    obs_feature_matrix_path=\"tables/table/X\",\n    obs_spots_path=\"shapes/CytAssist_FFPE_Human_Breast_Cancer\",\n    region=\"CytAssist_FFPE_Human_Breast_Cancer\",\n    coordinate_system=\"global\",\n    coordination_values={\n        # The following tells Vitessce to consider each observation as a \"spot\"\n        \"obsType\": \"spot\",\n    }\n)\ndataset = vc.add_dataset(name='Breast Cancer Visium').add_object(wrapper)\n\n# Add views (visualizations) to the configuration:\nspatial = vc.add_view(\"spatialBeta\", dataset=dataset)\nfeature_list = vc.add_view(vt.FEATURE_LIST, dataset=dataset)\nlayer_controller = vc.add_view(\"layerControllerBeta\", dataset=dataset)\nvc.link_views_by_dict([spatial, layer_controller], {\n    'imageLayer': CL([{\n        'photometricInterpretation': 'RGB',\n    }]),\n}, scope_prefix=get_initial_coordination_scope_prefix(\"A\", \"image\"))\nobs_sets = vc.add_view(vt.OBS_SETS, dataset=dataset)\nvc.link_views([spatial, layer_controller, feature_list, obs_sets], ['obsType'], [wrapper.obs_type_label])\n\n# Layout the views\nvc.layout(spatial | (feature_list / layer_controller / obs_sets));\n```\n\n----------------------------------------\n\nTITLE: Downloading and Processing COVID-19 Cell Atlas Data in Python\nDESCRIPTION: Downloads a dataset from the COVID-19 Cell Atlas, reads it into an AnnData object, and performs initial data processing. This includes calculating dispersions and identifying highly variable genes.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/data_export_files.ipynb#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nadata_filepath = join(\"data\", \"habib17.processed.h5ad\")\nif not isfile(adata_filepath):\n    os.makedirs(\"data\", exist_ok=True)\n    urlretrieve('https://covid19.cog.sanger.ac.uk/habib17.processed.h5ad', adata_filepath)\n\nadata = read_h5ad(adata_filepath)\ntop_dispersion = adata.var[\"dispersions_norm\"][\n    sorted(\n        range(len(adata.var[\"dispersions_norm\"])),\n        key=lambda k: adata.var[\"dispersions_norm\"][k],\n    )[-51:][0]\n]\nadata.var[\"top_highly_variable\"] = (\n    adata.var[\"dispersions_norm\"] > top_dispersion\n)\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for Vitessce Data Processing\nDESCRIPTION: Imports necessary Python libraries including the SnapWrapper from vitessce, file path manipulation tools, matrix reading utilities, data manipulation libraries, and JSON handling for saving outputs.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/data_conversion.ipynb#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom vitessce import SnapWrapper\nfrom os.path import join\nfrom scipy.io import mmread\nimport pandas as pd\nimport numpy as np\nimport json\n```\n\n----------------------------------------\n\nTITLE: Configuring Vitessce for SpatialData Visualization\nDESCRIPTION: Creates a Vitessce configuration for visualizing a SpatialData object by specifying the data components to visualize, including tables, images, and segmentation labels. Sets up coordination between different visualization components.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/spatial_data_mouseliver.ipynb#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Create a VitessceConfig instance.\nvc = VitessceConfig(schema_version=\"1.0.17\", name=\"SpatialData Demo\")\n\n# Instantiate the wrapper class, specifying data fields of interest.\nwrapper = SpatialDataWrapper(\n    sdata_path=spatialdata_filepath,\n    # The following paths are relative to the root of the SpatialData Zarr store on-disk.\n    table_path=\"tables/table\",\n    image_path=\"images/raw_image\",\n    labels_path=\"labels/segmentation_mask\",\n    obs_feature_matrix_path=\"tables/table/X\",\n    obs_set_paths=[\"tables/table/obs/annotation\"],\n    obs_set_names=[\"Annotation\"],\n    region=\"nucleus_boundaries\",\n    coordinate_system=\"global\",\n    coordination_values={\n      \"obsType\": \"cell\"   \n    }\n)\n# Add a new dataset to the Vitessce configuration,\n# then add the wrapper class instance to this dataset.\ndataset = vc.add_dataset(name='Mouse Liver').add_object(wrapper)\n\n# Add views (visualizations) to the configuration.\nspatial = vc.add_view(\"spatialBeta\", dataset=dataset)\nfeature_list = vc.add_view(\"featureList\", dataset=dataset)\nlayer_controller = vc.add_view(\"layerControllerBeta\", dataset=dataset)\nobs_sets = vc.add_view(\"obsSets\", dataset=dataset)\nheatmap = vc.add_view(\"heatmap\", dataset=dataset)\n\nvc.link_views_by_dict([spatial, layer_controller], {\n    \"imageLayer\": CL([{\n        \"photometricInterpretation\": \"BlackIsZero\",\n        \"imageChannel\": CL([{\n            \"spatialTargetC\": 0,\n            \"spatialChannelColor\": [255, 255, 255],\n            \"spatialChannelWindow\": [0, 4000],\n        }])\n    }]),\n}, scope_prefix=get_initial_coordination_scope_prefix(\"A\", \"image\"))\n\nvc.link_views_by_dict([spatial, layer_controller], {\n    \"segmentationLayer\": CL([{\n        \"segmentationChannel\": CL([{\n            \"obsColorEncoding\": \"cellSetSelection\",\n        }]),\n    }]),\n}, scope_prefix=get_initial_coordination_scope_prefix(\"A\", \"obsSegmentations\"))\n\nvc.link_views([spatial, layer_controller, feature_list, obs_sets, heatmap], [\"obsType\"], [wrapper.obs_type_label])\n\n# Layout the views in a grid arrangement.\nvc.layout((spatial / heatmap) | (layer_controller / (feature_list | obs_sets)));\n```\n\n----------------------------------------\n\nTITLE: Creating Vitessce Configuration with Genomic Profiles\nDESCRIPTION: Builds a Vitessce configuration that includes a genomic profiles view (HiGlass), scatterplot for UMAP visualization, and cell sets panel, connecting them to the dataset with appropriate data wrappers.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/widget_genomic_profiles.ipynb#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nvc = VitessceConfig(schema_version=\"1.0.15\", name='HuBMAP snATAC-seq')\ndataset = vc.add_dataset(name='HBM485.TBWH.322').add_object(MultivecZarrWrapper(\n    zarr_path=multivec_zarr_path\n)).add_object(AnnDataWrapper(\n    adata_path=adata_zarr_path,\n    obs_embedding_paths=[\"obsm/X_umap\"],\n    obs_embedding_names=[\"UMAP\"],\n    obs_set_paths=[\"obs/cluster\"],\n    obs_set_names=[\"Cluster\"],\n))\n\ngenomic_profiles = vc.add_view(vt.GENOMIC_PROFILES, dataset=dataset)\nscatter = vc.add_view(vt.SCATTERPLOT, dataset=dataset, mapping = \"UMAP\")\ncell_sets = vc.add_view(vt.OBS_SETS, dataset=dataset)\n\nvc.layout(genomic_profiles / (scatter | cell_sets));\n```\n\n----------------------------------------\n\nTITLE: Optimizing and Saving AnnData to Zarr Format in Python\nDESCRIPTION: Optimizes the AnnData object for Vitessce visualization by selecting specific columns and keys. The optimized data is then saved in Zarr format for efficient access.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/data_export_files.ipynb#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nzarr_filepath = join(\"data\", \"habib17.processed.zarr\")\nif not isdir(zarr_filepath):\n    adata = optimize_adata(\n        adata,\n        obs_cols=[\"CellType\"],\n        obsm_keys=[\"X_umap\"],\n        var_cols=[\"top_highly_variable\"],\n        optimize_X=True,\n    )\n    adata.write_zarr(zarr_filepath, chunks=[adata.shape[0], VAR_CHUNK_SIZE])\n```\n\n----------------------------------------\n\nTITLE: Creating Vitessce Configuration for Data Visualization in Python\nDESCRIPTION: Sets up a Vitessce configuration by adding datasets, views, and layout for the processed data. This includes scatterplot, cell sets, gene list, and heatmap components.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/data_export_files.ipynb#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nvc = VitessceConfig(schema_version=\"1.0.15\", name='Habib et al', description='COVID-19 Healthy Donor Brain')\ndataset = vc.add_dataset(name='Brain').add_object(AnnDataWrapper(\n        adata_path=zarr_filepath,\n        obs_embedding_paths=[\"obsm/X_umap\"],\n        obs_embedding_names=[\"UMAP\"],\n        obs_set_paths=[\"obs/CellType\"],\n        obs_set_names=[\"Cell Type\"],\n        obs_feature_matrix_path=\"X\",\n        feature_filter_path=\"var/top_highly_variable\"\n))\nscatterplot = vc.add_view(cm.SCATTERPLOT, dataset=dataset, mapping=\"X_umap\")\ncell_sets = vc.add_view(cm.OBS_SETS, dataset=dataset)\ngenes = vc.add_view(cm.FEATURE_LIST, dataset=dataset)\nheatmap = vc.add_view(cm.HEATMAP, dataset=dataset)\nvc.layout((scatterplot | (cell_sets / genes)) / heatmap);\n```\n\n----------------------------------------\n\nTITLE: Defining Visualization Layout in Vitessce\nDESCRIPTION: Configures the layout of visualization components using Vitessce's layout syntax, arranging views in a 2x2 grid with horizontal and vertical concatenation.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/web_app_brain.ipynb#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nvc.layout((scatterplot | cell_sets) / (heatmap | genes));\n```\n\n----------------------------------------\n\nTITLE: Converting AnnData to Zarr Format with Optimizations\nDESCRIPTION: Converts the AnnData object to Zarr format for efficient data access. Applies optimizations to the data structure by selecting specific observation columns, embedding keys, and optimizing the expression matrix.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/widget_pbmc.ipynb#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nzarr_filepath = join(\"data\", \"pbmc3k_final.zarr\")\nif not isdir(zarr_filepath):\n    adata = optimize_adata(\n        adata,\n        obs_cols=[\"leiden\"],\n        obsm_keys=[\"X_umap\", \"X_pca\"],\n        optimize_X=True,\n    )\n    adata.write_zarr(zarr_filepath, chunks=[adata.shape[0], VAR_CHUNK_SIZE])\n```\n\n----------------------------------------\n\nTITLE: Creating Vitessce View Configuration\nDESCRIPTION: Defines a Vitessce configuration including dataset, data wrapper, and multiple visualization components (scatterplots, cell sets, feature list, and heatmap). Sets up a layout for arranging the components in the final widget.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/widget_pbmc.ipynb#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nvc = VitessceConfig(schema_version=\"1.0.15\", name='PBMC Reference')\ndataset = vc.add_dataset(name='PBMC 3k').add_object(AnnDataWrapper(\n    adata_store=zarr_filepath,\n    obs_set_paths=[\"obs/leiden\"],\n    obs_set_names=[\"Leiden\"],\n    obs_embedding_paths=[\"obsm/X_umap\", \"obsm/X_pca\"],\n    obs_embedding_names=[\"UMAP\", \"PCA\"],\n    obs_feature_matrix_path=\"X\"\n))\n\numap = vc.add_view(cm.SCATTERPLOT, dataset=dataset, mapping=\"UMAP\")\npca = vc.add_view(cm.SCATTERPLOT, dataset=dataset, mapping=\"PCA\")\ncell_sets = vc.add_view(cm.OBS_SETS, dataset=dataset)\ngenes = vc.add_view(cm.FEATURE_LIST, dataset=dataset)\nheatmap = vc.add_view(cm.HEATMAP, dataset=dataset)\n\nvc.layout((umap / pca) | ((cell_sets | genes) / heatmap));\n```\n\n----------------------------------------\n\nTITLE: Configuring Vitessce Visualization Components\nDESCRIPTION: Creates a Vitessce configuration with multiple linked views including a scatterplot for tSNE visualization, cell sets view for clusters, and a spatial view. Sets up the AnnDataWrapper to connect the dataset to the visualization components.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/widget_loom.ipynb#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nvc = VitessceConfig(schema_version=\"1.0.15\", name='Loom Example', description='osmFISH dataset of the mouse cortex including all cells')\nw = AnnDataWrapper(adata_path=zarr_filepath, obs_set_paths=[\"obs/ClusterName\"], obs_set_names=[\"Clusters\"], obs_locations_path=\"obsm/spatial\", obs_segmentations_path=\"obsm/segmentations\", obs_embedding_paths=[\"obsm/tSNE\"])\ndataset = vc.add_dataset(name='SScortex').add_object(w)\n\ntsne = vc.add_view(cm.SCATTERPLOT, dataset=dataset, mapping=\"tSNE\")\ncell_sets = vc.add_view(cm.OBS_SETS, dataset=dataset)\nspatial = vc.add_view(cm.SPATIAL, dataset=dataset)\n\nspatial_segmentation_layer_value = {\n  \"opacity\": 1,\n  \"radius\": 0,\n  \"visible\": True,\n  \"stroked\": False\n}\n\nvc.link_views([spatial], [ct.SPATIAL_ZOOM, ct.SPATIAL_TARGET_X, ct.SPATIAL_TARGET_Y, ct.SPATIAL_SEGMENTATION_LAYER], [-6.43, 10417.69, 24885.55, spatial_segmentation_layer_value])\nvc.layout(spatial | (tsne / cell_sets));\n```\n\n----------------------------------------\n\nTITLE: Configuring Vitessce Visualization for Single-Cell Data\nDESCRIPTION: Creates a Vitessce configuration with multiple visualization components for the single-cell dataset. Specifies data paths within the H5AD file for UMAP embeddings, cell type annotations, and gene expression values, then arranges the components in a grid layout.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/widget_brain_h5ad.ipynb#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nvc = VitessceConfig(schema_version=\"1.0.17\", name='Nakshatri et al', description='snRNA-seq analyses of breast tissues of healthy women of diverse genetic ancestry')\n\ndataset = vc.add_dataset(name='84df8fa1').add_object(AnnDataWrapper(\n        adata_path=adata_filepath,\n        ref_path=json_filepath, # We specify paths to both the H5AD and JSON files\n        obs_embedding_paths=[\"obsm/X_wnn.umap\"],\n        obs_embedding_names=[\"UMAP\"],\n        obs_set_paths=[\"obs/cell_type\"],\n        obs_set_names=[\"Cell Type\"],\n        obs_feature_matrix_path=\"X\",\n    )\n)\n\nscatterplot = vc.add_view(cm.SCATTERPLOT, dataset=dataset, mapping=\"UMAP\")\ncell_sets = vc.add_view(cm.OBS_SETS, dataset=dataset)\ncell_set_sizes = vc.add_view(cm.OBS_SET_SIZES, dataset=dataset)\ngenes = vc.add_view(cm.FEATURE_LIST, dataset=dataset)\n\nvc.layout((scatterplot | cell_sets) / (cell_set_sizes | genes));\n```\n\n----------------------------------------\n\nTITLE: Creating Vitessce Configuration Object\nDESCRIPTION: Initializes a VitessceConfig object with metadata about the visualization project, including schema version, name, and description.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/web_app_brain.ipynb#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nvc = VitessceConfig(schema_version=\"1.0.15\", name='Habib et al', description='COVID-19 Healthy Donor Brain')\n```\n\n----------------------------------------\n\nTITLE: Creating Vitessce Configuration with Multiple Views\nDESCRIPTION: Sets up a Vitessce configuration with multiple interactive views including a scatterplot, cell sets panel, gene list, and heatmap. The configuration is based on the optimized AnnData object and specifies which data components should be displayed in each view.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/data_export_s3.ipynb#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nvc = VitessceConfig(schema_version=\"1.0.15\", name='Habib et al', description='COVID-19 Healthy Donor Brain')\ndataset = vc.add_dataset(name='Brain').add_object(AnnDataWrapper(\n        adata_path=zarr_filepath,\n        obs_embedding_paths=[\"obsm/X_umap\"],\n        obs_embedding_names=[\"UMAP\"],\n        obs_set_paths=[\"obs/CellType\"],\n        obs_set_names=[\"Cell Type\"],\n        obs_feature_matrix_path=\"X\",\n        feature_filter_path=\"var/top_highly_variable\"\n))\nscatterplot = vc.add_view(cm.SCATTERPLOT, dataset=dataset, mapping=\"UMAP\")\ncell_sets = vc.add_view(cm.OBS_SETS, dataset=dataset)\ngenes = vc.add_view(cm.FEATURE_LIST, dataset=dataset)\nheatmap = vc.add_view(cm.HEATMAP, dataset=dataset)\nvc.layout((scatterplot | (cell_sets / genes)) / heatmap);\n```\n\n----------------------------------------\n\nTITLE: Configuring Vitessce Visualization\nDESCRIPTION: Setting up the Vitessce configuration including dataset, views, coordination, and layout settings for spatial transcriptomics visualization.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/widget_plugin_spatial-query.ipynb#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nvc = VitessceConfig(schema_version=\"1.0.16\", name=\"Spatial-Query\")\ndataset = vc.add_dataset(\"Query results\").add_object(AnnDataWrapper(\n    adata_path=zarr_path,\n    obs_feature_matrix_path=\"X\",\n    obs_set_paths=[\"obs/predicted.ASCT.celltype\"],\n    obs_set_names=[\"Cell Type\"],\n    obs_spots_path=\"obsm/X_spatial\",\n    feature_labels_path=\"var/hugo_symbol\",\n    coordination_values={\n        \"featureLabelsType\": \"Gene symbol\",\n    }\n))\n\nspatial_view = vc.add_view(\"spatialBeta\", dataset=dataset)\nlc_view = vc.add_view(\"layerControllerBeta\", dataset=dataset)\nsets_view = vc.add_view(\"obsSets\", dataset=dataset)\nfeatures_view = vc.add_view(\"featureList\", dataset=dataset)\nsq_view = vc.add_view(\"spatialQuery\", dataset=dataset)\n\nobs_set_selection_scope, = vc.add_coordination(\"obsSetSelection\",)\nobs_set_selection_scope.set_value(None)\n\nsets_view.use_coordination(obs_set_selection_scope)\nsq_view.use_coordination(obs_set_selection_scope)\nspatial_view.use_coordination(obs_set_selection_scope)\nfeatures_view.use_coordination(obs_set_selection_scope)\n\nvc.link_views([spatial_view, lc_view, sets_view, features_view],\n    [\"additionalObsSets\", \"obsSetColor\"],\n    [plugin.additional_obs_sets, plugin.obs_set_color]\n)\nvc.link_views_by_dict([spatial_view, lc_view], {\n    \"spotLayer\": CL([\n        {\n            \"obsType\": \"cell\",\n            \"spatialSpotRadius\": 15,\n        },\n    ])\n})\n\nvc.layout((spatial_view | (lc_view / features_view)) / (sets_view | sq_view));\n```\n\n----------------------------------------\n\nTITLE: Configuring Vitessce Visualization\nDESCRIPTION: Sets up a Vitessce configuration with image and segmentation data sources, adds spatial and layer controller views, and establishes view coordination.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/widget_modify_config.ipynb#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nvc = VitessceConfig(schema_version=\"1.0.16\")\ndataset = vc.add_dataset(name='Spraggins').add_object(\n    ImageOmeTiffWrapper(\n        img_url=\"https://storage.googleapis.com/vitessce-demo-data/kpmp-f2f-march-2023/S-1905-017737/S-1905-017737_PAS_2of2_bf.ome.tif\",\n        offsets_url=\"https://storage.googleapis.com/vitessce-demo-data/kpmp-f2f-march-2023/S-1905-017737/S-1905-017737_PAS_2of2_bf.offsets.json\"\n    )\n).add_object(\n    ObsSegmentationsOmeTiffWrapper(\n        img_url=\"https://storage.googleapis.com/vitessce-demo-data/kpmp-f2f-march-2023/S-1905-017737/S-1905-017737_PAS_2of2.ome.tif\",\n        offsets_url=\"https://storage.googleapis.com/vitessce-demo-data/kpmp-f2f-march-2023/S-1905-017737/S-1905-017737_PAS_2of2.offsets.json\",\n        obs_types_from_channel_names=True\n    )\n)\n\nspatial = vc.add_view(\"spatialBeta\", dataset=dataset)\nlc = vc.add_view(\"layerControllerBeta\", dataset=dataset)\n\nvc.link_views_by_dict([spatial, lc], {\n    \"imageLayer\": CL([\n        {\n          \"photometricInterpretation\": \"RGB\"\n        }\n    ]),\n}, meta=True, scope_prefix=get_initial_coordination_scope_prefix(\"A\", \"image\"))\n\nvc.layout(spatial | lc);\n```\n\n----------------------------------------\n\nTITLE: Saving AnnData Object as Zarr Store\nDESCRIPTION: Creates a directory if needed and saves the AnnData object as a Zarr store with appropriate chunking for efficient data access.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/cellbrowser_to_vitessce_config_conversion.ipynb#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nzarr_filepath = join(\"data\", \"out.adata.zarr\")\nos.makedirs(os.path.dirname(zarr_filepath), exist_ok=True)\nadata.write_zarr(zarr_filepath, chunks=[adata.shape[0], VAR_CHUNK_SIZE])\n```\n\n----------------------------------------\n\nTITLE: Configuring Vitessce for Multi-Modal Image Visualization\nDESCRIPTION: Creates a Vitessce configuration for visualizing multi-modal imaging data. Sets up a dataset with multiple images from different assays (PAS, AF, IMS) with physical size scaling enabled to properly align the images. Adds spatial view, status view, and layer controller components to the visualization layout.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/widget_on_colab.ipynb#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nvc = VitessceConfig(schema_version=\"1.0.15\", name='Spraggins Multi-Modal', description='PAS + IMS + AF From https://portal.hubmapconsortium.org/browse/collection/6a6efd0c1a2681dc7d2faab8e4ab0bca')\ndataset = vc.add_dataset(name='Spraggins').add_object(\n    MultiImageWrapper(\n        image_wrappers=[\n            OmeTiffWrapper(img_url='https://assets.hubmapconsortium.org/f4188a148e4c759092d19369d310883b/ometiff-pyramids/processedMicroscopy/VAN0006-LK-2-85-PAS_images/VAN0006-LK-2-85-PAS_registered.ome.tif?token=', name='PAS'),\n            OmeTiffWrapper(img_url='https://assets.hubmapconsortium.org/2130d5f91ce61d7157a42c0497b06de8/ometiff-pyramids/processedMicroscopy/VAN0006-LK-2-85-AF_preIMS_images/VAN0006-LK-2-85-AF_preIMS_registered.ome.tif?token=', name='AF'),\n            OmeTiffWrapper(img_url='https://assets.hubmapconsortium.org/be503a021ed910c0918842e318e6efa2/ometiff-pyramids/ometiffs/VAN0006-LK-2-85-IMS_PosMode_multilayer.ome.tif?token=', name='IMS Pos Mode'),\n            OmeTiffWrapper(img_url='https://assets.hubmapconsortium.org/ca886a630b2038997a4cfbbf4abfd283/ometiff-pyramids/ometiffs/VAN0006-LK-2-85-IMS_NegMode_multilayer.ome.tif?token=', name='IMS Neg Mode')\n        ],\n        use_physical_size_scaling=True,\n )\n)\nspatial = vc.add_view(cm.SPATIAL, dataset=dataset)\nstatus = vc.add_view(cm.STATUS, dataset=dataset)\nlc = vc.add_view(cm.LAYER_CONTROLLER, dataset=dataset).set_props(disableChannelsIfRgbDetected=True)\nvc.layout(spatial | (lc / status));\n```\n\n----------------------------------------\n\nTITLE: Configuring Vitessce with Remote Zarr Store in Python\nDESCRIPTION: This Python code shows how to configure a Vitessce dataset using a remote Zarr store. It demonstrates the use of a Zarr FSStore for S3 storage and the creation of a VitessceConfig object with an AnnDataWrapper using this store.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/data_options.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport zarr\nfrom vitessce import VitessceConfig, AnnDataWrapper\n\n# ...\nstore = zarr.storage.FSStore(\"s3://my_bucket/path/to/my_store.adata.zarr\")\n\nvc = VitessceConfig(name=\"My Vitessce Configuration\")\nvc.add_dataset(name=\"My Dataset\").add_object(AnnDataWrapper(\n    adata_store=store,\n    # ...\n))\n# ...\nvc.widget()\n```\n\n----------------------------------------\n\nTITLE: Adding Visualization Components to Vitessce Configuration\nDESCRIPTION: Adds specific visualization components to the Vitessce configuration, including a scatterplot with UMAP embedding, cell sets viewer, feature list, and heatmap.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/web_app_brain.ipynb#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nscatterplot = vc.add_view(cm.SCATTERPLOT, dataset=dataset, mapping=\"UMAP\")\ncell_sets = vc.add_view(cm.OBS_SETS, dataset=dataset)\ngenes = vc.add_view(cm.FEATURE_LIST, dataset=dataset)\nheatmap = vc.add_view(cm.HEATMAP, dataset=dataset)\n```\n\n----------------------------------------\n\nTITLE: Converting and Saving SnapATAC Data for Vitessce\nDESCRIPTION: Creates a SnapWrapper instance with the loaded data, generates cell and cell sets JSON files, and creates a multi-resolution Zarr file for genomic data visualization. The outputs are saved to disk for future use with Vitessce.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/data_conversion.ipynb#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nzarr_filepath = join('data', 'snapatac', 'out.snap.multires.zarr')\n\nw = SnapWrapper(mtx, barcodes_df, bins_df, clusters_df)\n\ncells_json = w.create_cells_json()\ncell_sets_json = w.create_cell_sets_json()\n\nwith open(join('data', 'snapatac', 'out.cells.json'), 'w') as f:\n    json.dump(cells_json, f)\n\nwith open(join('data', 'snapatac', 'out.cell-sets.json'), 'w') as f:\n    json.dump(cell_sets_json, f)\n\n\nw.create_genomic_multivec_zarr(zarr_filepath)\n```\n\n----------------------------------------\n\nTITLE: Configuring Vitessce Visualization with Multiple Image Sources\nDESCRIPTION: Creates a VitessceConfig object with multiple image sources from HubMap, including PAS, AF, and IMS images. Sets up the visualization layout with spatial, layer controller, and custom chat components.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/widget_plugin_custom.ipynb#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nvc = VitessceConfig(schema_version=\"1.0.15\", name='Spraggins Multi-Modal', description='PAS + IMS + AF From https://portal.hubmapconsortium.org/browse/collection/6a6efd0c1a2681dc7d2faab8e4ab0bca')\ndataset = vc.add_dataset(name='Spraggins').add_object(\n    MultiImageWrapper(\n        image_wrappers=[\n            OmeTiffWrapper(img_url='https://assets.hubmapconsortium.org/f4188a148e4c759092d19369d310883b/ometiff-pyramids/processedMicroscopy/VAN0006-LK-2-85-PAS_images/VAN0006-LK-2-85-PAS_registered.ome.tif?token=', name='PAS'),\n            OmeTiffWrapper(img_url='https://assets.hubmapconsortium.org/2130d5f91ce61d7157a42c0497b06de8/ometiff-pyramids/processedMicroscopy/VAN0006-LK-2-85-AF_preIMS_images/VAN0006-LK-2-85-AF_preIMS_registered.ome.tif?token=', name='AF'),\n            OmeTiffWrapper(img_url='https://assets.hubmapconsortium.org/be503a021ed910c0918842e318e6efa2/ometiff-pyramids/ometiffs/VAN0006-LK-2-85-IMS_PosMode_multilayer.ome.tif?token=', name='IMS Pos Mode'),\n            OmeTiffWrapper(img_url='https://assets.hubmapconsortium.org/ca886a630b2038997a4cfbbf4abfd283/ometiff-pyramids/ometiffs/VAN0006-LK-2-85-IMS_NegMode_multilayer.ome.tif?token=', name='IMS Neg Mode')\n        ],\n        use_physical_size_scaling=True,\n )\n)\nspatial = vc.add_view(cm.SPATIAL, dataset=dataset)\nstatus = vc.add_view(\"chat\", dataset=dataset)\nlc = vc.add_view(cm.LAYER_CONTROLLER, dataset=dataset).set_props(disableChannelsIfRgbDetected=True)\nvc.layout(spatial | (lc / status));\n```\n\n----------------------------------------\n\nTITLE: Adding AnnData Dataset to Vitessce Configuration\nDESCRIPTION: Creates a dataset in the Vitessce configuration and adds the AnnData object using AnnDataWrapper, specifying data mappings for embeddings, cell sets, and feature matrices.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/web_app_brain.ipynb#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndataset = vc.add_dataset(name='Brain').add_object(AnnDataWrapper(\n        adata,\n        obs_embedding_paths=[\"obsm/X_umap\"],\n        obs_embedding_names=[\"UMAP\"],\n        obs_set_paths=[\"obs/CellType\"],\n        obs_set_names=[\"Cell Type\"],\n        obs_feature_matrix_path=\"X\",\n        feature_filter_path=\"var/top_highly_variable\"\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Creating AnnData Object from snATAC-seq Data\nDESCRIPTION: Constructs an AnnData object containing the snATAC-seq matrix, cell metadata with clusters, and UMAP coordinates for dimensionality reduction visualization.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/widget_genomic_profiles.ipynb#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nobs = clusters_df[[\"cluster\"]]\nobs[\"cluster\"] = obs[\"cluster\"].astype(str)\nobsm = { \"X_umap\": clusters_df[[\"umap.1\", \"umap.2\"]].values }\nadata = AnnData(X=mtx, obs=obs, var=bins_df, obsm=obsm)\nadata\n```\n\n----------------------------------------\n\nTITLE: Configuring Vitessce Visualization\nDESCRIPTION: Sets up Vitessce configuration with two images - a pyramidal image and its segmentation bitmask. Creates a layout with spatial view, layer controller, and status components.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/widget_imaging_segmentation.ipynb#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nvc = VitessceConfig(schema_version=\"1.0.15\", name='MCMicro Bitmask Visualization', description='Segmentation + Data of Exemplar 001')\ndataset = vc.add_dataset(name='MCMicro').add_object(\n    MultiImageWrapper(\n        image_wrappers=[\n            OmeTiffWrapper(img_url='https://vitessce-demo-data.storage.googleapis.com/exemplar-001/exemplar-001.pyramid.ome.tif', name='Image'),\n            OmeTiffWrapper(img_url='https://vitessce-demo-data.storage.googleapis.com/exemplar-001/cellMask.pyramid.ome.tif', name='Mask', is_bitmask=True),\n        ]\n )\n)\nspatial = vc.add_view(cm.SPATIAL, dataset=dataset)\nstatus = vc.add_view(cm.STATUS, dataset=dataset)\nlc = vc.add_view(cm.LAYER_CONTROLLER, dataset=dataset)\nvc.layout(spatial | (lc / status));\n```\n\n----------------------------------------\n\nTITLE: Configuring Vitessce for Image Visualization\nDESCRIPTION: Creates Vitessce configurations for visualizing OME-Zarr and OME-TIFF images with layer controllers and spatial views.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/spatial_data_mouseliver.ipynb#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nvc = VitessceConfig(schema_version=\"1.0.17\", name=\"Image (ome-zarr)\")\n\n# Add data.\nimg_wrapper = ImageOmeZarrWrapper(\n    img_path=ome_zarr_filepath,\n    coordination_values={\n        \"fileUid\": \"image\",\n    }\n)\nsegmentations_wrapper = ObsSegmentationsOmeZarrWrapper(\n    img_path=labels_ome_zarr_filepath,\n    coordination_values={\n        \"fileUid\": \"segmentations\",\n    }\n)\ndataset = vc.add_dataset(name='Mouse Liver').add_object(img_wrapper).add_object(segmentations_wrapper)\n\n# Add views.\nspatial = vc.add_view(\"spatialBeta\", dataset=dataset)\nlayer_controller = vc.add_view(\"layerControllerBeta\", dataset=dataset)\n\nvc.layout(hconcat(spatial, layer_controller, split=(2, 1)));\n```\n\n----------------------------------------\n\nTITLE: Configuring Vitessce for Zarr-based AnnData Visualization\nDESCRIPTION: Sets up a Vitessce configuration for visualizing Zarr-based AnnData with multiple coordinated views including heatmap, feature list, and observation sets.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/spatial_data_mouseliver.ipynb#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nvc = VitessceConfig(schema_version=\"1.0.17\", name=\"AnnData (zarr)\")\n# Add data.\nwrapper = AnnDataWrapper(\n    adata_path=adata_zarr_filepath,\n    obs_feature_matrix_path=\"X\",\n    obs_set_paths=[\"obs/annotation\"],\n    obs_set_names=[\"Annotation\"],\n    coordination_values={\n      \"obsType\": \"cell\"   \n    }\n)\ndataset = vc.add_dataset(name='Mouse Liver').add_object(wrapper)\n\n# Add views.\nheatmap = vc.add_view(vt.HEATMAP, dataset=dataset)\nfeature_list = vc.add_view(vt.FEATURE_LIST, dataset=dataset)\nobs_sets = vc.add_view(vt.OBS_SETS, dataset=dataset)\nviolin_plots = vc.add_view(\"obsSetFeatureValueDistribution\", dataset=dataset)\n\nvc.link_views([heatmap, feature_list, obs_sets], ['obsType', 'featureValueColormapRange'], ['cell', [0, 0.01]])\n\n# Layout the views.\nvc.layout((heatmap / violin_plots) | (feature_list / obs_sets));\n```\n\n----------------------------------------\n\nTITLE: Converting UCSC Cell Browser Project to AnnData\nDESCRIPTION: Demonstrates converting a UCSC Cell Browser project named \"adultPancreas\" to an AnnData object using the convert_cell_browser_project_to_anndata function, keeping only marker genes.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/cellbrowser_to_vitessce_config_conversion.ipynb#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Example run, coverting \"adultPancreas\" project:\nadata = convert_cell_browser_project_to_anndata(project_name=\"adultPancreas\", keep_only_marker_genes=True)\n```\n\n----------------------------------------\n\nTITLE: Configuring Vitessce for Multi-Modal Imaging Data Visualization\nDESCRIPTION: This code snippet sets up the Vitessce configuration for visualizing multi-modal imaging data. It includes adding a dataset, configuring image layers, and setting up coordination scopes for spatial views and layer controllers.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/widget_imaging_beta.ipynb#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nvc = VitessceConfig(schema_version=\"1.0.16\", name='Spraggins Multi-Modal', description='PAS + IMS + AF From https://portal.hubmapconsortium.org/browse/collection/6a6efd0c1a2681dc7d2faab8e4ab0bca')\ndataset = vc.add_dataset(name='Spraggins').add_file(\n    url='https://assets.hubmapconsortium.org/f4188a148e4c759092d19369d310883b/ometiff-pyramids/processedMicroscopy/VAN0006-LK-2-85-PAS_images/VAN0006-LK-2-85-PAS_registered.ome.tif?token=',\n    file_type=\"image.ome-tiff\",\n    coordination_values={\n        \"fileUid\": \"PAS\",\n    },\n)\n\nimageScopes = vc.add_coordination_by_dict({\n    \"imageLayer\": CL([\n      {\n        \"fileUid\": 'PAS',\n        \"spatialLayerOpacity\": 1,\n        \"spatialLayerVisible\": True,\n        \"photometricInterpretation\": 'RGB',\n        \"imageChannel\": CL([\n          {\n            \"spatialTargetC\": 0,\n            \"spatialChannelColor\": [255, 0, 0],\n            \"spatialChannelVisible\": True,\n            \"spatialChannelOpacity\": 1.0,\n            \"spatialChannelWindow\": [0, 255],\n          },\n          {\n            \"spatialTargetC\": 1,\n            \"spatialChannelColor\": [0, 255, 0],\n            \"spatialChannelVisible\": True,\n            \"spatialChannelOpacity\": 1.0,\n            \"spatialChannelWindow\": [0, 255],\n          },\n          {\n            \"spatialTargetC\": 2,\n            \"spatialChannelColor\": [0, 0, 255],\n            \"spatialChannelVisible\": True,\n            \"spatialChannelOpacity\": 1.0,\n            \"spatialChannelWindow\": [0, 255],\n          },\n        ]),\n      }\n    ])\n})\n\nmetaCoordinationScope = vc.add_meta_coordination()\nmetaCoordinationScope.use_coordination_by_dict(imageScopes)\n\nspatial = vc.add_view(\"spatialBeta\", dataset=dataset)\nlc = vc.add_view(\"layerControllerBeta\", dataset=dataset)\n\nspatial.use_meta_coordination(metaCoordinationScope)\nlc.use_meta_coordination(metaCoordinationScope)\n\nvc.layout(spatial | lc);\n```\n\n----------------------------------------\n\nTITLE: Rendering Vitessce Widget in Python\nDESCRIPTION: This snippet creates and renders the Vitessce widget based on the previously configured VitessceConfig. It's the final step in visualizing the SpatialData using Vitessce.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/spatial_data.ipynb#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nvw = vc.widget()\nvw\n```\n\n----------------------------------------\n\nTITLE: Saving AnnData to Zarr Format\nDESCRIPTION: Writes the AnnData object to the AnnData-zarr format for efficient storage and access in Vitessce visualizations.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/widget_genomic_profiles.ipynb#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# Save anndata object to AnnData-Zarr format.\nadata.write_zarr(adata_zarr_path)\n```\n\n----------------------------------------\n\nTITLE: Configuring Vitessce for Multi-Modal Imaging Visualization in Python\nDESCRIPTION: Creates and configures a Vitessce visualization by setting up a dataset with multiple image wrappers for PAS, AF, and IMS images. Enables physical size scaling to ensure proper alignment of images from different modalities. Adds spatial view, status component, and layer controller to the visualization layout.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/widget_imaging.ipynb#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nvc = VitessceConfig(schema_version=\"1.0.15\", name='Spraggins Multi-Modal', description='PAS + IMS + AF From https://portal.hubmapconsortium.org/browse/collection/6a6efd0c1a2681dc7d2faab8e4ab0bca')\ndataset = vc.add_dataset(name='Spraggins').add_object(\n    MultiImageWrapper(\n        image_wrappers=[\n            OmeTiffWrapper(img_url='https://assets.hubmapconsortium.org/f4188a148e4c759092d19369d310883b/ometiff-pyramids/processedMicroscopy/VAN0006-LK-2-85-PAS_images/VAN0006-LK-2-85-PAS_registered.ome.tif?token=', name='PAS'),\n            OmeTiffWrapper(img_url='https://assets.hubmapconsortium.org/2130d5f91ce61d7157a42c0497b06de8/ometiff-pyramids/processedMicroscopy/VAN0006-LK-2-85-AF_preIMS_images/VAN0006-LK-2-85-AF_preIMS_registered.ome.tif?token=', name='AF'),\n            OmeTiffWrapper(img_url='https://assets.hubmapconsortium.org/be503a021ed910c0918842e318e6efa2/ometiff-pyramids/ometiffs/VAN0006-LK-2-85-IMS_PosMode_multilayer.ome.tif?token=', name='IMS Pos Mode'),\n            OmeTiffWrapper(img_url='https://assets.hubmapconsortium.org/ca886a630b2038997a4cfbbf4abfd283/ometiff-pyramids/ometiffs/VAN0006-LK-2-85-IMS_NegMode_multilayer.ome.tif?token=', name='IMS Neg Mode')\n        ],\n        use_physical_size_scaling=True,\n )\n)\nspatial = vc.add_view(cm.SPATIAL, dataset=dataset)\nstatus = vc.add_view(cm.STATUS, dataset=dataset)\nlc = vc.add_view(cm.LAYER_CONTROLLER, dataset=dataset).set_props(disableChannelsIfRgbDetected=True)\nvc.layout(spatial | (lc / status));\n```\n\n----------------------------------------\n\nTITLE: Exporting Vitessce Configuration and Data to S3\nDESCRIPTION: Uploads all data objects referenced in the Vitessce configuration to the specified S3 bucket. The export method returns an updated configuration dictionary with file URLs pointing to the uploaded S3 files.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/data_export_s3.ipynb#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nconfig_dict = vc.export(to='S3', s3=s3, bucket_name='vitessce-export-examples', prefix='test')\n```\n\n----------------------------------------\n\nTITLE: Launching Vitessce Web Application\nDESCRIPTION: Launches the Vitessce web application, which serves the processed data locally and opens a web browser to display the configured visualizations.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/web_app_brain.ipynb#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nvc.web_app()\n```\n\n----------------------------------------\n\nTITLE: Configuring Vitessce Visualization\nDESCRIPTION: Sets up the Vitessce configuration including data wrapper, views, and view coordination settings for spatial visualization.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/spatial_data_blobs.ipynb#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nvc = VitessceConfig(\n    schema_version=\"1.0.17\",\n    name='Visium SpatialData Demo (blobs)',\n)\n# Add data to the configuration:\nwrapper = SpatialDataWrapper(\n    sdata_store=spatialdata_filepath,\n    # The following paths are relative to the root of the SpatialData zarr store on-disk.\n    image_path=\"images/blobs_image\",\n    labels_path=\"labels/blobs_labels\",\n    coordinate_system=\"global\",\n    coordination_values={\n        \"obsType\": \"blob\",\n        \"fileUid\": \"my_unique_id\"\n    }\n)\ndataset = vc.add_dataset(name='Blobs').add_object(wrapper)\n\n# Add views (visualizations) to the configuration:\nspatial = vc.add_view(\"spatialBeta\", dataset=dataset)\nlayer_controller = vc.add_view(\"layerControllerBeta\", dataset=dataset)\n\nvc.link_views_by_dict([spatial, layer_controller], {\n    'imageLayer': CL([{\n        \"fileUid\": \"my_unique_id\",\n        'photometricInterpretation': 'BlackIsZero',\n        'spatialLayerOpacity': 0.9,\n        'imageChannel': CL([\n            {\n                \"spatialTargetC\": 0,\n                \"spatialChannelColor\": [255, 0, 0],\n                \"spatialChannelOpacity\": 1.0\n            },\n            {\n                \"spatialTargetC\": 1,\n                \"spatialChannelColor\": [0, 255, 0],\n                \"spatialChannelOpacity\": 1.0\n            },\n            {\n                \"spatialTargetC\": 2,\n                \"spatialChannelColor\": [0, 0, 255],\n                \"spatialChannelOpacity\": 1.0\n            }\n        ])\n    }]),\n}, scope_prefix=get_initial_coordination_scope_prefix(\"A\", \"image\"))\n\nvc.link_views_by_dict([spatial, layer_controller], {\n    'segmentationLayer': CL([{\n        \"fileUid\": \"my_unique_id\",\n        'segmentationChannel': CL([{\n            'spatialChannelVisible': True,\n            'obsType': 'blob',\n        }]),\n    }]),\n}, scope_prefix=get_initial_coordination_scope_prefix(\"A\", \"obsSegmentations\"))\n\n# Layout the views\nvc.layout(spatial | layer_controller);\n```\n\n----------------------------------------\n\nTITLE: Generating H5AD Reference Spec JSON for Vitessce Compatibility\nDESCRIPTION: Creates a reference spec JSON file that maps AnnData object keys to byte offsets in the H5AD file. This is required for Vitessce to efficiently load specific parts of the H5AD file without loading the entire dataset into memory.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/widget_brain_h5ad.ipynb#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\njson_filepath = join(\"data\", \"84df8fa1-ab53-43c9-a439-95dcb9148265.h5ad.reference.json\")\nif not isfile(json_filepath):\n    ref_dict = generate_h5ad_ref_spec(h5_url)\n    with open(json_filepath, \"w\") as f:\n        json.dump(ref_dict, f)\n```\n\n----------------------------------------\n\nTITLE: Adding Visualization Components\nDESCRIPTION: Configures various visualization components including scatterplot, cell sets, gene list, and heatmap.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/widget_brain.ipynb#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nscatterplot = vc.add_view(cm.SCATTERPLOT, dataset=dataset, mapping=\"UMAP\")\ncell_sets = vc.add_view(cm.OBS_SETS, dataset=dataset)\ngenes = vc.add_view(cm.FEATURE_LIST, dataset=dataset)\nheatmap = vc.add_view(cm.HEATMAP, dataset=dataset)\n```\n\n----------------------------------------\n\nTITLE: Configuring Vitessce with AnnData-Zarr Store\nDESCRIPTION: Creates an AnnDataWrapper instance that defines how to access data from the Zarr store, and builds a Vitessce configuration for visualization.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/cellbrowser_to_vitessce_config_conversion.ipynb#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nanndata_wrapper_inst = AnnDataWrapper(\n    adata_path=zarr_filepath,\n    obs_feature_matrix_path=\"X\",\n    obs_embedding_paths=[\"obsm/X_tsne\"],\n    obs_embedding_names=[\"t-SNE\"],\n    obs_set_paths=[\"obs/cluster\", \"obs/age\"],\n    obs_set_names=[\"cluster\", \"age\"],\n)\nvc = VitessceConfig(schema_version=\"1.0.15\", name=\"Vitessce configuration for CellBrowser project adultPancreas\")\nanndata_wrapper_inst.auto_view_config(vc)\n```\n\n----------------------------------------\n\nTITLE: Converting AnnData to Multivec-Zarr Format for Genomic Profiles\nDESCRIPTION: Sorts cluster IDs numerically and converts the AnnData object to multivec-zarr format, which is suitable for efficiently storing and visualizing genomic profiles in Vitessce.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/widget_genomic_profiles.ipynb#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Sort cluster IDs\ncluster_ids = obs[\"cluster\"].unique().tolist()\ncluster_ids.sort(key=int)\n# Save genomic profiles to multivec-zarr format.\nadata_to_multivec_zarr(adata, multivec_zarr_path, obs_set_col=\"cluster\", obs_set_name=\"Cluster\", obs_set_vals=cluster_ids)\n```\n\n----------------------------------------\n\nTITLE: Extracting and Saving Images from SpatialData\nDESCRIPTION: Extracts image and segmentation mask arrays from SpatialData object and saves them to OME-Zarr and OME-TIFF formats.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/spatial_data_mouseliver.ipynb#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimg_arr = sdata.images['raw_image'].to_numpy()\nlabels_arr = sdata.labels['segmentation_mask'].to_numpy()\nlabels_arr = labels_arr[np.newaxis, :]\n\nmultiplex_img_to_ome_zarr(img_arr, [\"Channel 0\"], ome_zarr_filepath)\nmultiplex_img_to_ome_zarr(labels_arr, [\"cell\"], labels_ome_zarr_filepath)\n\nmultiplex_img_to_ome_tiff(img_arr, [\"Channel 0\"], ome_tiff_filepath)\noffsets = get_offsets(ome_tiff_filepath)\nwith open(offsets_json_filepath, \"w\") as f:\n    json.dump(offsets, f)\n```\n\n----------------------------------------\n\nTITLE: Configuring Dataset in Vitessce\nDESCRIPTION: Adds the dataset to Vitessce configuration with AnnData wrapper and specified data paths.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/widget_brain.ipynb#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndataset = vc.add_dataset(name='Brain').add_object(AnnDataWrapper(\n        adata_path=zarr_filepath,\n        obs_embedding_paths=[\"obsm/X_umap\"],\n        obs_embedding_names=[\"UMAP\"],\n        obs_set_paths=[\"obs/CellType\"],\n        obs_set_names=[\"Cell Type\"],\n        obs_feature_matrix_path=\"X\",\n        initial_feature_filter_path=\"var/top_highly_variable\"\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Vitessce Widget from AnnData Using from_object Shortcut\nDESCRIPTION: Creates and displays a Vitessce widget from the AnnData object using the from_object shortcut. Specifies embedding paths, feature matrices, and metadata to visualize. The widget displays UMAP embeddings and cell type annotations.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/widget_shortcut.ipynb#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nvw = VitessceConfig.from_object(AnnDataWrapper(\n        adata,\n        obs_embedding_paths=[\"obsm/X_umap\"],\n        obs_embedding_names=[\"UMAP\"],\n        obs_set_paths=[\"obs/CellType\"],\n        obs_set_names=[\"Cell Type\"],\n        obs_feature_matrix_path=\"X\",\n        feature_filter_path=\"var/top_highly_variable\"\n), schema_version=\"1.0.15\").widget(height=800)\nvw\n```\n\n----------------------------------------\n\nTITLE: Creating and Displaying the Vitessce Widget\nDESCRIPTION: Creates the interactive Vitessce widget from the previously defined configuration and displays it in the notebook. This renders the complete interactive visualization with scatterplot, cell set menus, and gene expression panels.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/widget_brain_h5ad.ipynb#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nvw = vc.widget()\nvw\n```\n\n----------------------------------------\n\nTITLE: Setting up AWS S3 Credentials with boto3\nDESCRIPTION: Creates a boto3 S3 resource using AWS credentials stored in environment variables. These credentials are required for uploading data files to an S3 bucket in the next step.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/data_export_s3.ipynb#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ns3 = boto3.resource(\n    service_name='s3',\n    aws_access_key_id=os.environ['VITESSCE_S3_ACCESS_KEY_ID'],\n    aws_secret_access_key=os.environ['VITESSCE_S3_SECRET_ACCESS_KEY'],\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Vitessce View Configuration\nDESCRIPTION: Configures the Vitessce visualization layout including dataset definition, view components (UMAP, PCA scatterplots, cell sets, feature list, and heatmap), and their arrangement in the final widget.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/widget_pbmc_remote.ipynb#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nvc = VitessceConfig(schema_version=\"1.0.15\", name='PBMC Reference')\ndataset = vc.add_dataset(name='PBMC 3k').add_object(AnnDataWrapper(adata_url=url, obs_set_paths=[\"obs/louvain\"], obs_set_names=[\"Louvain\"], obs_embedding_paths=[\"obsm/X_umap\", \"obsm/X_pca\"], obs_embedding_names=[\"UMAP\", \"PCA\"], obs_feature_matrix_path=\"X\"))\n\numap = vc.add_view(cm.SCATTERPLOT, dataset=dataset, mapping=\"UMAP\")\npca = vc.add_view(cm.SCATTERPLOT, dataset=dataset, mapping=\"PCA\")\ncell_sets = vc.add_view(cm.OBS_SETS, dataset=dataset)\ngenes = vc.add_view(cm.FEATURE_LIST, dataset=dataset)\nheatmap = vc.add_view(cm.HEATMAP, dataset=dataset)\n\nvc.layout((umap / pca) | ((cell_sets | genes) / heatmap));\n```\n\n----------------------------------------\n\nTITLE: Rendering the Vitessce Widget\nDESCRIPTION: Creates and displays the interactive Vitessce widget with the defined configuration, setting the height to 800 pixels for proper visualization.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/widget_genomic_profiles.ipynb#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nvw = vc.widget(height=800)\nvw\n```\n\n----------------------------------------\n\nTITLE: Configuring Vitessce with Local Zarr Store in Python\nDESCRIPTION: This Python code demonstrates how to configure a Vitessce dataset using a local Zarr store. It shows the creation of a VitessceConfig object and the addition of an AnnDataWrapper with a local Zarr store path.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/data_options.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom vitessce import VitessceConfig, AnnDataWrapper\n\n# ...\nadata.write_zarr(\"my_store.adata.zarr\")\n\nvc = VitessceConfig(name=\"My Vitessce Configuration\")\nvc.add_dataset(name=\"My Dataset\").add_object(AnnDataWrapper(\n    adata_store=\"my_store.adata.zarr\",\n    # ...\n))\n# ...\nvc.widget()\n```\n\n----------------------------------------\n\nTITLE: Saving Optimized AnnData to Zarr Store\nDESCRIPTION: Optimizes the AnnData object by selecting specific observation columns and obsm keys, then writes it to a Zarr store. The optimization helps improve performance for visualization, and the Zarr format enables efficient access to large datasets.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/widget_loom.ipynb#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nzarr_filepath = join(\"data\", \"osmFISH_SScortex_mouse_all_cells.zarr\")\nif not isdir(zarr_filepath) or True:\n    adata = optimize_adata(\n        adata,\n        obs_cols=[\"ClusterName\"],\n        obsm_keys=[\"tSNE\", \"spatial\", \"segmentations\"],\n        optimize_X=True,\n    )\n    adata.write_zarr(zarr_filepath, chunks=[adata.shape[0], VAR_CHUNK_SIZE])\n```\n\n----------------------------------------\n\nTITLE: Preprocessing Gene Expression Data\nDESCRIPTION: Identifies the top 50 highly variable genes based on dispersion norm for heatmap visualization.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/widget_brain.ipynb#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ntop_dispersion = adata.var[\"dispersions_norm\"][\n    sorted(\n        range(len(adata.var[\"dispersions_norm\"])),\n        key=lambda k: adata.var[\"dispersions_norm\"][k],\n    )[-51:][0]\n]\nadata.var[\"top_highly_variable\"] = (\n    adata.var[\"dispersions_norm\"] > top_dispersion\n)\n```\n\n----------------------------------------\n\nTITLE: Creating and Displaying the Vitessce Widget in Python\nDESCRIPTION: Generates the interactive Vitessce widget from the configured visualization and displays it. This creates the final interactive visualization for exploring the multi-modal imaging data.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/widget_imaging.ipynb#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nvw = vc.widget()\nvw\n```\n\n----------------------------------------\n\nTITLE: Creating and Displaying the Vitessce Widget\nDESCRIPTION: Creates a Vitessce widget from the configured visualization and displays it in the notebook. This code generates an interactive visualization interface for exploring the multi-modal imaging data.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/widget_on_colab.ipynb#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nvw = vc.widget()\nvw\n```\n\n----------------------------------------\n\nTITLE: Configuring Vitessce Multi-Modal Visualization\nDESCRIPTION: Sets up the Vitessce configuration with multiple image sources including PAS, AF, and IMS images from HuBMAP. Configures the layout with spatial view, layer controller, and status components.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/widget_plugin_demo.ipynb#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nvc = VitessceConfig(schema_version=\"1.0.15\", name='Spraggins Multi-Modal', description='PAS + IMS + AF From https://portal.hubmapconsortium.org/browse/collection/6a6efd0c1a2681dc7d2faab8e4ab0bca')\ndataset = vc.add_dataset(name='Spraggins').add_object(\n    MultiImageWrapper(\n        image_wrappers=[\n            OmeTiffWrapper(img_url='https://assets.hubmapconsortium.org/f4188a148e4c759092d19369d310883b/ometiff-pyramids/processedMicroscopy/VAN0006-LK-2-85-PAS_images/VAN0006-LK-2-85-PAS_registered.ome.tif?token=', name='PAS'),\n            OmeTiffWrapper(img_url='https://assets.hubmapconsortium.org/2130d5f91ce61d7157a42c0497b06de8/ometiff-pyramids/processedMicroscopy/VAN0006-LK-2-85-AF_preIMS_images/VAN0006-LK-2-85-AF_preIMS_registered.ome.tif?token=', name='AF'),\n            OmeTiffWrapper(img_url='https://assets.hubmapconsortium.org/be503a021ed910c0918842e318e6efa2/ometiff-pyramids/ometiffs/VAN0006-LK-2-85-IMS_PosMode_multilayer.ome.tif?token=', name='IMS Pos Mode'),\n            OmeTiffWrapper(img_url='https://assets.hubmapconsortium.org/ca886a630b2038997a4cfbbf4abfd283/ometiff-pyramids/ometiffs/VAN0006-LK-2-85-IMS_NegMode_multilayer.ome.tif?token=', name='IMS Neg Mode')\n        ],\n        use_physical_size_scaling=True,\n )\n)\nspatial = vc.add_view(cm.SPATIAL, dataset=dataset)\nstatus = vc.add_view(\"demo\", dataset=dataset)\nlc = vc.add_view(cm.LAYER_CONTROLLER, dataset=dataset).set_props(disableChannelsIfRgbDetected=True)\nvc.layout(spatial | (lc / status));\n```\n\n----------------------------------------\n\nTITLE: Creating and Displaying the Vitessce Widget\nDESCRIPTION: Creates the Vitessce widget with the custom chat plugin and displays it. The widget combines the configured visualization with interactive functionality.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/widget_plugin_custom.ipynb#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nvw = vc.widget(plugins=[ChatPlugin()])\nvw\n```\n\n----------------------------------------\n\nTITLE: Converting Data to Zarr Format\nDESCRIPTION: Optimizes the AnnData object and converts it to Zarr format for efficient loading in Vitessce.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/widget_brain.ipynb#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nzarr_filepath = join(\"data\", \"habib17.processed.zarr\")\nif not isdir(zarr_filepath):\n    adata = optimize_adata(\n        adata,\n        obs_cols=[\"CellType\"],\n        obsm_keys=[\"X_umap\"],\n        optimize_X=True,\n        var_cols=[\"top_highly_variable\"],\n    )\n    adata.write_zarr(zarr_filepath, chunks=[adata.shape[0], VAR_CHUNK_SIZE])\n```\n\n----------------------------------------\n\nTITLE: Updating Widget Configuration\nDESCRIPTION: Demonstrates how to programmatically modify widget settings including zoom level and segmentation layer properties.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/widget_modify_config.ipynb#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Programatically set a different zoom level and toggle the visibility/color of different segmentation layers:\nvw.config = {\n    **vw.config,\n    # Need to provide a fresh \"uid\" value.\n    # This will tell Vitessce that the contents should be diff-ed against the previous config.\n    \"uid\": f\"new_config_{random.random()}\",\n    \"coordinationSpace\": {\n      # Information about the coordination space can be found at https://vitessce.io/docs/coordination-types/\n      **vw.config[\"coordinationSpace\"],\n      \"spatialZoom\": {\n          **vw.config[\"coordinationSpace\"][\"spatialZoom\"],\n          \"A\": -8\n      },\n      \"spatialChannelVisible\": {\n          **vw.config[\"coordinationSpace\"][\"spatialChannelVisible\"],\n          \"init_A_obsSegmentations_0\": True,\n          \"init_A_obsSegmentations_1\": False,\n          \"init_A_obsSegmentations_2\": False,\n          \"init_A_obsSegmentations_3\": False\n      },\n      \"spatialChannelColor\": {\n          **vw.config[\"coordinationSpace\"][\"spatialChannelColor\"],\n          \"init_A_obsSegmentations_0\": [255, 0, 0],\n      }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering the Vitessce Widget\nDESCRIPTION: Creates and renders the interactive Vitessce widget using the configured visualization. The widget method transforms the Vitessce configuration into an interactive Jupyter widget that can be displayed in a notebook.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/widget_loom.ipynb#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nvw = vc.widget()\nvw\n```\n\n----------------------------------------\n\nTITLE: Creating Vitessce Widget\nDESCRIPTION: Generates the interactive Vitessce widget from the configuration. Uses proxy=True parameter to enable compatibility with cloud notebook environments.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/widget_pbmc_remote.ipynb#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nvw = vc.widget()\nvw\n```\n\n----------------------------------------\n\nTITLE: Downloading and Extracting SpatialData in Python\nDESCRIPTION: This snippet checks if the SpatialData is already present, and if not, downloads and extracts it from a zip file. It handles file operations and URL retrieval to prepare the data for visualization.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/spatial_data.ipynb#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nif not isdir(spatialdata_filepath):\n    if not isfile(zip_filepath):\n        os.makedirs(data_dir, exist_ok=True)\n        urlretrieve('https://s3.embl.de/spatialdata/spatialdata-sandbox/visium_associated_xenium_io.zip', zip_filepath)\n    with zipfile.ZipFile(zip_filepath,\"r\") as zip_ref:\n        zip_ref.extractall(data_dir)\n        os.rename(join(data_dir, \"data.zarr\"), spatialdata_filepath)\n```\n\n----------------------------------------\n\nTITLE: Configuring Vitessce Dataset and Views\nDESCRIPTION: Creates a Vitessce configuration with a dataset containing OME-TIFF images and segmentations. Sets up spatial and layer controller views with linked coordination for image display.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/widget_segmentations_beta.ipynb#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nvc = VitessceConfig(schema_version=\"1.0.16\")\ndataset = vc.add_dataset(name='Spraggins').add_object(\n    ImageOmeTiffWrapper(\n        img_url=\"https://storage.googleapis.com/vitessce-demo-data/kpmp-f2f-march-2023/S-1905-017737/S-1905-017737_PAS_2of2_bf.ome.tif\",\n        offsets_url=\"https://storage.googleapis.com/vitessce-demo-data/kpmp-f2f-march-2023/S-1905-017737/S-1905-017737_PAS_2of2_bf.offsets.json\"\n    )\n).add_object(\n    ObsSegmentationsOmeTiffWrapper(\n        img_url=\"https://storage.googleapis.com/vitessce-demo-data/kpmp-f2f-march-2023/S-1905-017737/S-1905-017737_PAS_2of2.ome.tif\",\n        offsets_url=\"https://storage.googleapis.com/vitessce-demo-data/kpmp-f2f-march-2023/S-1905-017737/S-1905-017737_PAS_2of2.offsets.json\",\n        obs_types_from_channel_names=True\n    )\n)\n\nspatial = vc.add_view(\"spatialBeta\", dataset=dataset)\nlc = vc.add_view(\"layerControllerBeta\", dataset=dataset)\n\nvc.link_views_by_dict([spatial, lc], {\n    \"imageLayer\": CL([\n        {\n          \"photometricInterpretation\": \"RGB\"   \n        }\n    ]),\n}, meta=True, scope_prefix=get_initial_coordination_scope_prefix(\"A\", \"image\"))\n\nvc.layout(spatial | lc);\n```\n\n----------------------------------------\n\nTITLE: Displaying Vitessce Widget\nDESCRIPTION: Creates and displays the configured Vitessce widget in the notebook environment.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/widget_segmentations_beta.ipynb#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nvw = vc.widget()\nvw\n```\n\n----------------------------------------\n\nTITLE: Exporting Vitessce Configuration to Local Files in Python\nDESCRIPTION: Exports the Vitessce configuration and associated data files to a local directory. The base_url parameter is set to indicate where the files will be served from.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/data_export_files.ipynb#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nconfig_dict = vc.export(to='files', base_url='http://localhost:3000', out_dir='./test')\n```\n\n----------------------------------------\n\nTITLE: Opening Loom File with AnnData\nDESCRIPTION: Reads the Loom file into an AnnData object using AnnData's read_loom function. Specifies obsm_names to map the tSNE and spatial coordinates from the Loom file to the AnnData object.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/widget_loom.ipynb#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nadata = read_loom(loom_filepath, obsm_names={\"tSNE\": [\"_tSNE_1\", \"_tSNE_2\"], \"spatial\": [\"X\", \"Y\"]})\n```\n\n----------------------------------------\n\nTITLE: Creating Vitessce Widget\nDESCRIPTION: Generates the final interactive widget from the configuration.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/widget_brain.ipynb#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nvw = vc.widget()\nvw\n```\n\n----------------------------------------\n\nTITLE: Creating Vitessce Widget in Python\nDESCRIPTION: This snippet creates the Vitessce widget using the configured visualization settings. It specifies a custom JavaScript URL for the widget's functionality.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/widget_imaging_beta.ipynb#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nvw = vc.widget(custom_js_url='http://localhost:8000/packages/main/prod/dist/index.min.js')\nvw\n```\n\n----------------------------------------\n\nTITLE: Downloading and Processing COVID-19 Cell Atlas Data\nDESCRIPTION: Downloads a dataset from the COVID-19 Cell Atlas and processes it by identifying highly variable genes. The code checks if the file already exists before downloading and processes the AnnData object to prepare it for visualization.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/data_export_s3.ipynb#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nadata_filepath = join(\"data\", \"habib17.processed.h5ad\")\nif not isfile(adata_filepath):\n    os.makedirs(\"data\", exist_ok=True)\n    urlretrieve('https://covid19.cog.sanger.ac.uk/habib17.processed.h5ad', adata_filepath)\n\nadata = read_h5ad(adata_filepath)\ntop_dispersion = adata.var[\"dispersions_norm\"][\n    sorted(\n        range(len(adata.var[\"dispersions_norm\"])),\n        key=lambda k: adata.var[\"dispersions_norm\"][k],\n    )[-51:][0]\n]\nadata.var[\"top_highly_variable\"] = (\n    adata.var[\"dispersions_norm\"] > top_dispersion\n)\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies for Vitessce Data Preparation in Python\nDESCRIPTION: Imports necessary Python libraries and modules for data processing, file handling, and Vitessce configuration. This includes AnnData, Scanpy, and various Vitessce-specific imports.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/data_export_files.ipynb#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport json\nfrom urllib.parse import quote_plus\nfrom os.path import join, isfile, isdir\nfrom urllib.request import urlretrieve\nfrom anndata import read_h5ad\nimport scanpy as sc\n\nfrom vitessce import (\n    VitessceWidget,\n    VitessceConfig,\n    Component as cm,\n    CoordinationType as ct,\n    AnnDataWrapper,\n)\nfrom vitessce.data_utils import (\n    optimize_adata,\n    VAR_CHUNK_SIZE,\n)\n```\n\n----------------------------------------\n\nTITLE: Creating and Rendering a Vitessce Widget in Python\nDESCRIPTION: Creates a Vitessce widget instance from a dictionary configuration using the VitessceConfig.from_dict static method and renders it in a notebook environment by calling the widget method.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/widget_from_dict.ipynb#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nvc = VitessceConfig.from_dict(dries_config)\nvw = vc.widget()\nvw\n```\n\n----------------------------------------\n\nTITLE: Opening the Vitessce Visualization in a Web Browser\nDESCRIPTION: Creates a URL for the vitessce.io website with the exported configuration embedded, then opens it in a web browser. This allows for sharing interactive visualizations with colleagues by simply sharing the URL.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/data_export_s3.ipynb#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nvitessce_url = \"http://vitessce.io/?url=data:,\" + quote_plus(json.dumps(config_dict))\nimport webbrowser\nwebbrowser.open(vitessce_url)\n```\n\n----------------------------------------\n\nTITLE: Configuring Data Source Locations in AnnDataWrapper with Different Parameter Suffixes\nDESCRIPTION: This example demonstrates how to specify different data location options for the AnnDataWrapper class. It shows how to replace the default local path parameter with alternatives for remote URLs, Zarr stores, or Lamin artifacts.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/spatial_data_mouseliver.ipynb#2025-04-23_snippet_13\n\nLANGUAGE: diff\nCODE:\n```\nAnnDataWrapper(\n-    adata_path=\"./mouse_liver.spatialdata.zarr\",\n+    adata_url=\"https://example.com/mouse_liver.spatialdata.zarr\", # Absolute URL\n+    adata_store=\"./mouse_liver.spatialdata.zarr\", # String interpreted as root of DirectoryStore\n+    adata_store=zarr.DirectoryStore(\"./mouse_liver.spatialdata.zarr\"), # Instance of zarr.storage\n+    adata_artifact=adata_zarr_artifact, # Instance of ln.Artifact\n    ...\n```\n\n----------------------------------------\n\nTITLE: Rendering Vitessce Widget\nDESCRIPTION: Creates and displays the Vitessce widget using the configured settings.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/spatial_data_blobs.ipynb#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nvw = vc.widget()\nvw\n```\n\n----------------------------------------\n\nTITLE: Adding Dataset to Configuration\nDESCRIPTION: Configures the dataset with AnnData wrapper and specifies data paths and embeddings.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/widget_brain_with_base_dir.ipynb#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndataset = vc.add_dataset(name='Brain').add_object(AnnDataWrapper(\n        adata_path=zarr_relative_filepath,\n        obs_embedding_paths=[\"obsm/X_umap\"],\n        obs_embedding_names=[\"UMAP\"],\n        obs_set_paths=[\"obs/CellType\"],\n        obs_set_names=[\"Cell Type\"],\n        obs_feature_matrix_path=\"X\",\n        initial_feature_filter_path=\"var/top_highly_variable\"\n    ))\n```\n\n----------------------------------------\n\nTITLE: Converting to Zarr Format\nDESCRIPTION: Optimizes the AnnData object and converts it to Zarr format for efficient loading in Vitessce.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/widget_brain_with_base_dir.ipynb#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nzarr_relative_filepath = \"habib17.processed.zarr\" # Relative to BASE_DIR\nzarr_filepath = join(BASE_DIR, zarr_relative_filepath)\nif not isdir(zarr_filepath):\n    adata = optimize_adata(\n        adata,\n        obs_cols=[\"CellType\"],\n        obsm_keys=[\"X_umap\"],\n        optimize_X=True,\n        var_cols=[\"top_highly_variable\"],\n    )\n    adata.write_zarr(zarr_filepath, chunks=[adata.shape[0], VAR_CHUNK_SIZE])\n```\n\n----------------------------------------\n\nTITLE: Rendering Vitessce Widget\nDESCRIPTION: Creating and displaying the Vitessce widget with the configured visualization and plugin.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/widget_plugin_spatial-query.ipynb#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nvw = vc.widget(height=900, plugins=[plugin], remount_on_uid_change=False)\nvw\n```\n\n----------------------------------------\n\nTITLE: Adding Visualization Components\nDESCRIPTION: Adds various visualization components including scatterplot, cell sets, gene list, and heatmap.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/widget_brain_with_base_dir.ipynb#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nscatterplot = vc.add_view(cm.SCATTERPLOT, dataset=dataset, mapping=\"UMAP\")\ncell_sets = vc.add_view(cm.OBS_SETS, dataset=dataset)\ngenes = vc.add_view(cm.FEATURE_LIST, dataset=dataset)\nheatmap = vc.add_view(cm.HEATMAP, dataset=dataset)\n```\n\n----------------------------------------\n\nTITLE: Rendering the Vitessce Widget\nDESCRIPTION: Creates and displays the interactive Vitessce widget based on the configured visualization settings. This widget provides an interactive interface for exploring the spatial omics data.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/spatial_data_mouseliver.ipynb#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nvw = vc.widget()\nvw\n```\n\n----------------------------------------\n\nTITLE: Converting VitessceConfig to JSON in Python\nDESCRIPTION: Converts the VitessceConfig object to a dictionary and then to a formatted JSON string. This is useful for serializing configurations or inspecting their structure.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/config_to_python.ipynb#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport json\nprint(json.dumps(vc.to_dict(), indent=2))\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies for Vitessce Single-Cell Visualization in Python\nDESCRIPTION: Imports necessary libraries for downloading data, processing AnnData objects, and creating Vitessce visualizations. Key imports include anndata for H5AD file handling, scanpy for single-cell analysis, and vitessce components for building interactive visualizations.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/widget_brain_h5ad.ipynb#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom os.path import join, isfile, isdir\nfrom urllib.request import urlretrieve\nfrom anndata import read_h5ad\nimport scanpy as sc\nimport json\n\nfrom vitessce import (\n    VitessceConfig,\n    Component as cm,\n    CoordinationType as ct,\n    AnnDataWrapper,\n)\nfrom vitessce.data_utils import (\n    generate_h5ad_ref_spec\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Visualization Layout\nDESCRIPTION: Arranges the visualization components in a grid layout using concatenation operators.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/widget_brain.ipynb#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nvc.layout((scatterplot | cell_sets) / (heatmap | genes));\n```\n\n----------------------------------------\n\nTITLE: Loading H5AD Data\nDESCRIPTION: Loads the downloaded H5AD file into an AnnData object for processing.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/widget_brain.ipynb#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nadata = read_h5ad(adata_filepath)\n```\n\n----------------------------------------\n\nTITLE: Rendering Vitessce Widget\nDESCRIPTION: Creates and displays the interactive Vitessce widget based on the previously defined configuration.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/widget_pbmc.ipynb#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nvw = vc.widget()\nvw\n```\n\n----------------------------------------\n\nTITLE: Loading snATAC-seq Data from HuBMAP Portal\nDESCRIPTION: Loads raw snATAC-seq data including the matrix, barcodes, genomic bins, and cell clusters with UMAP coordinates from files downloaded from the HuBMAP portal.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/widget_genomic_profiles.ipynb#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nmtx = mmread(join('data', 'snapatac', 'filtered_cell_by_bin.mtx')).toarray()\nbarcodes_df = pd.read_csv(join('data', 'snapatac', 'barcodes.txt'), header=None)\nbins_df = pd.read_csv(join('data', 'snapatac', 'bins.txt'), header=None, names=[\"interval\"])\nclusters_df = pd.read_csv(join('data', 'snapatac', 'umap_coords_clusters.csv'), index_col=0)\n```\n\n----------------------------------------\n\nTITLE: Loading Source Data for SnapATAC Processing\nDESCRIPTION: Loads the necessary input data files for SnapATAC processing, including a matrix market file for cell-by-bin data, barcodes and bins information from text files, and UMAP coordinates with cluster information from a CSV file.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/data_conversion.ipynb#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nmtx = mmread(join('data', 'snapatac', 'filtered_cell_by_bin.mtx'))\nbarcodes_df = pd.read_csv(join('data', 'snapatac', 'barcodes.txt'), header=None)\nbins_df = pd.read_csv(join('data', 'snapatac', 'bins.txt'), header=None)\nclusters_df = pd.read_csv(join('data', 'snapatac', 'umap_coords_clusters.csv'), index_col=0)\n```\n\n----------------------------------------\n\nTITLE: Downloading COVID-19 Cell Atlas Data\nDESCRIPTION: Downloads the Habib17 dataset from the COVID-19 Cell Atlas if not already present in the local data directory.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/widget_brain.ipynb#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nadata_filepath = join(\"data\", \"habib17.processed.h5ad\")\nif not isfile(adata_filepath):\n    os.makedirs(\"data\", exist_ok=True)\n    urlretrieve('https://covid19.cog.sanger.ac.uk/habib17.processed.h5ad', adata_filepath)\n```\n\n----------------------------------------\n\nTITLE: Creating Vitessce Widget\nDESCRIPTION: Creates and displays the Vitessce widget with the configured visualization and demo plugin.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/widget_plugin_demo.ipynb#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nvw = vc.widget(plugins=[DemoPlugin()])\nvw\n```\n\n----------------------------------------\n\nTITLE: Creating Widget\nDESCRIPTION: Creates the final widget instance from the configuration.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/widget_brain_with_base_dir.ipynb#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nvw = vc.widget()\nvw\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies for Vitessce Python\nDESCRIPTION: Imports necessary Python modules including OS utilities, data loading libraries (anndata, scanpy), and Vitessce components required for visualization configuration.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/web_app_brain.ipynb#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom os.path import join\nfrom urllib.request import urlretrieve\nfrom anndata import read_h5ad\nimport scanpy as sc\n\nfrom vitessce import (\n    VitessceConfig,\n    Component as cm,\n    CoordinationType as ct,\n    AnnDataWrapper,\n)\n```\n\n----------------------------------------\n\nTITLE: Loading Sample Blob Data\nDESCRIPTION: Creates a sample blob dataset using spatialdata's built-in datasets module.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/spatial_data_blobs.ipynb#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nsdata = spatialdata.datasets.blobs()\n```\n\n----------------------------------------\n\nTITLE: Creating Vitessce Widget\nDESCRIPTION: Instantiates a Vitessce widget from the configuration and displays it.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/widget_modify_config.ipynb#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nvw = vc.widget(remount_on_uid_change=False)\nvw\n```\n\n----------------------------------------\n\nTITLE: Preprocessing Data for Visualization in Vitessce\nDESCRIPTION: Identifies the top 50 highly variable genes based on dispersion norm for visualization in a heatmap, and marks them with a boolean flag in the AnnData variable annotations.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/web_app_brain.ipynb#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ntop_dispersion = adata.var[\"dispersions_norm\"][\n    sorted(\n        range(len(adata.var[\"dispersions_norm\"])),\n        key=lambda k: adata.var[\"dispersions_norm\"][k],\n    )[-51:][0]\n]\nadata.var[\"top_highly_variable\"] = (\n    adata.var[\"dispersions_norm\"] > top_dispersion\n)\n```\n\n----------------------------------------\n\nTITLE: Importing Vitessce Dependencies for Visualization Configuration\nDESCRIPTION: Imports the necessary classes and functions from the Vitessce Python package for visualization configuration, including view types, coordination types, and data wrappers for different formats like AnnData, SpatialData, and OME-TIFF/Zarr.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/spatial_data_mouseliver.ipynb#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom vitessce import (\n    VitessceConfig,\n    ViewType as vt,\n    CoordinationType as ct,\n    CoordinationLevel as CL,\n    SpatialDataWrapper,\n    AnnDataWrapper,\n    ImageOmeTiffWrapper,\n    ImageOmeZarrWrapper,\n    ObsSegmentationsOmeZarrWrapper,\n    get_initial_coordination_scope_prefix,\n    hconcat,\n    vconcat,\n)\nfrom vitessce.data_utils import (\n    VAR_CHUNK_SIZE,\n    generate_h5ad_ref_spec,\n    multiplex_img_to_ome_tiff,\n    multiplex_img_to_ome_zarr,\n)\n```\n\n----------------------------------------\n\nTITLE: Importing Vitessce Configuration Classes in Python\nDESCRIPTION: Imports the necessary classes from vitessce to work with configuration objects. These classes are essential for creating and manipulating Vitessce visualizations programmatically.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/config_to_python.ipynb#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom vitessce import VitessceConfig, VitessceChainableConfig, VitessceConfigDatasetFile\n```\n\n----------------------------------------\n\nTITLE: Defining Output Paths for Zarr Files\nDESCRIPTION: Sets the file paths for saving the data in multivec-zarr and AnnData-zarr formats, which are efficient for Vitessce visualizations.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/widget_genomic_profiles.ipynb#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nmultivec_zarr_path = join(\"data\", \"HBM485.TBWH.322.multivec.zarr\")\nadata_zarr_path = join(\"data\", \"HBM485.TBWH.322.adata.zarr\")\n```\n\n----------------------------------------\n\nTITLE: Downloading PBMC Dataset\nDESCRIPTION: Downloads the PBMC3k final dataset from a remote URL if it doesn't exist locally. Creates a data directory if needed and saves the H5AD file to disk.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/widget_pbmc.ipynb#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nadata_filepath = join(\"data\", \"pbmc3k_final.h5ad\")\nif not isfile(adata_filepath):\n    os.makedirs(\"data\", exist_ok=True)\n    urlretrieve('https://seurat.nygenome.org/pbmc3k_final.h5ad', adata_filepath)\n```\n\n----------------------------------------\n\nTITLE: Downloading and Extracting the SpatialData Example Dataset\nDESCRIPTION: Downloads the mouse liver SpatialData example dataset as a zip file and extracts it if it doesn't exist locally. This dataset was generated by Guilliams et al. and processed using SPArrOW during the SpatialData developer workshop.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/spatial_data_mouseliver.ipynb#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nif not isdir(spatialdata_filepath):\n    if not isfile(zip_filepath):\n        os.makedirs(data_dir, exist_ok=True)\n        urlretrieve('https://s3.embl.de/spatialdata/spatialdata-sandbox/mouse_liver.zip', zip_filepath)\n    with zipfile.ZipFile(zip_filepath,\"r\") as zip_ref:\n        zip_ref.extractall(data_dir)\n        os.rename(join(data_dir, \"data.zarr\"), spatialdata_filepath)\n```\n\n----------------------------------------\n\nTITLE: Importing External Dependencies in Plugin ESM\nDESCRIPTION: This code demonstrates how to dynamically import external JavaScript libraries from CDN sources like jsdelivr within a Vitessce plugin. It shows an async implementation of createPlugins that imports d3 from a CDN.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/widget_plugins.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nPLUGIN_ESM = \"\"\"\nasync function createPlugins(utilsForPlugins) {\n    const {\n        React,\n        PluginFileType,\n        PluginViewType,\n        PluginCoordinationType,\n        PluginJointFileType,\n        z,\n        useCoordination,\n    } = utilsForPlugins;\n\n    const d3 = await import('https://cdn.jsdelivr.net/npm/d3@7/+esm');\n\n    // Do something with d3 here...\n\n    return {\n        pluginViewTypes: undefined,\n        pluginFileTypes: undefined,\n        pluginCoordinationTypes: undefined,\n        pluginJointFileTypes: undefined,\n    };\n}\nexport default { createPlugins };\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Saving AnnData to Zarr and H5AD\nDESCRIPTION: Demonstrates saving AnnData object to both Zarr and H5AD formats with optional chunk sizing for performance optimization.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/spatial_data_mouseliver.ipynb#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nadata.write_zarr(adata_zarr_filepath, chunks=(adata.shape[0], VAR_CHUNK_SIZE))\n\nadata.write_h5ad(adata_h5ad_filepath)\n```\n\n----------------------------------------\n\nTITLE: Importing Pre-defined Vitessce Configuration in Python\nDESCRIPTION: Imports a pre-defined Vitessce configuration dictionary from an example_configs module. This configuration references a dataset stored in AWS S3.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/widget_from_dict.ipynb#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom example_configs import dries as dries_config\n```\n\n----------------------------------------\n\nTITLE: Importing Vitessce Python Dependencies\nDESCRIPTION: Imports necessary modules from the vitessce package for widget configuration, including components, coordination types, and wrappers for handling image data. Also imports the transform function from oxc_py for JavaScript transformation.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/widget_plugin_custom.ipynb#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom vitessce import (\n    VitessceConfig,\n    Component as cm,\n    CoordinationType as ct,\n    OmeTiffWrapper,\n    MultiImageWrapper,\n    VitesscePlugin\n)\nfrom oxc_py import transform\n```\n\n----------------------------------------\n\nTITLE: Loading AnnData Dataset\nDESCRIPTION: Loads the previously downloaded H5AD file into an AnnData object for further processing and visualization.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/widget_pbmc.ipynb#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nadata = read_h5ad(adata_filepath)\n```\n\n----------------------------------------\n\nTITLE: Importing Vitessce Components\nDESCRIPTION: Imports required classes and components from the Vitessce library including configuration, component types, coordination types, and various image wrapper classes.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/widget_segmentations_beta.ipynb#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom vitessce import (\n    VitessceConfig,\n    Component as cm,\n    CoordinationType as ct,\n    OmeTiffWrapper,\n    MultiImageWrapper,\n    CoordinationLevel as CL,\n    ObsSegmentationsOmeTiffWrapper,\n    ImageOmeTiffWrapper,\n    get_initial_coordination_scope_prefix,\n)\n```\n\n----------------------------------------\n\nTITLE: Preprocessing AnnData for Visualization\nDESCRIPTION: Identifies highly variable genes based on the normalized dispersion scores in the dataset. Creates a new boolean column 'top_highly_variable' that will be used for filtering features in the visualization.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/widget_shortcut.ipynb#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ntop_dispersion = adata.var[\"dispersions_norm\"][\n    sorted(\n        range(len(adata.var[\"dispersions_norm\"])),\n        key=lambda k: adata.var[\"dispersions_norm\"][k],\n    )[-51:][0]\n]\nadata.var[\"top_highly_variable\"] = (\n    adata.var[\"dispersions_norm\"] > top_dispersion\n)\n```\n\n----------------------------------------\n\nTITLE: Loading AnnData Object from H5AD File\nDESCRIPTION: Reads the downloaded H5AD file into an AnnData object for downstream processing and visualization.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/widget_shortcut.ipynb#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nadata = read_h5ad(join(\"data\", \"habib17.processed.h5ad\"))\n```\n\n----------------------------------------\n\nTITLE: Reading SpatialData from Zarr\nDESCRIPTION: Loads a SpatialData object from a Zarr store and extracts the AnnData table.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/spatial_data_mouseliver.ipynb#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nsdata = read_zarr(spatialdata_filepath)\nsdata\n\nadata = sdata.tables['table']\nadata\n```\n\n----------------------------------------\n\nTITLE: Loading and Converting AnnData\nDESCRIPTION: Reading H5AD file and converting it to Zarr format for visualization.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/widget_plugin_spatial-query.ipynb#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nadata = read_h5ad(join(\"data\", \"HBM987_KWLK_254\", \"secondary_analysis.h5ad\"))\nzarr_path = join(\"data\", \"HBM987_KWLK_254\", \"secondary_analysis.h5ad.zarr\")\nadata.write_zarr(zarr_path)\n```\n\n----------------------------------------\n\nTITLE: Preprocessing Data for Visualization\nDESCRIPTION: Identifies and filters the top 50 highly variable genes based on dispersion norm for heatmap visualization.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/widget_brain_with_base_dir.ipynb#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ntop_dispersion = adata.var[\"dispersions_norm\"][\n    sorted(\n        range(len(adata.var[\"dispersions_norm\"])),\n        key=lambda k: adata.var[\"dispersions_norm\"][k],\n    )[-51:][0]\n]\nadata.var[\"top_highly_variable\"] = (\n    adata.var[\"dispersions_norm\"] > top_dispersion\n)\n```\n\n----------------------------------------\n\nTITLE: Loading AnnData File\nDESCRIPTION: Loads the downloaded H5AD file into an AnnData object.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/widget_brain_with_base_dir.ipynb#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nadata = read_h5ad(adata_filepath)\n```\n\n----------------------------------------\n\nTITLE: Checking Configuration URLs\nDESCRIPTION: Validates the data URLs in the configuration relative to the base directory.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/widget_brain_with_base_dir.ipynb#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nconfig_dict = vc.to_dict(base_url=BASE_URL_PLACEHOLDER)\nconfig_dict\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies for Vitessce Widget\nDESCRIPTION: Imports required packages and classes for working with Vitessce visualization widgets, including AnnData handling and Vitessce configuration components.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/widget_brain_with_base_dir.ipynb#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom os.path import join, isfile, isdir\nfrom urllib.request import urlretrieve\nfrom anndata import read_h5ad\n\nfrom vitessce import (\n    VitessceConfig,\n    Component as cm,\n    CoordinationType as ct,\n    AnnDataWrapper,\n    BASE_URL_PLACEHOLDER,\n)\nfrom vitessce.data_utils import (\n    optimize_adata,\n    VAR_CHUNK_SIZE,\n)\n```\n\n----------------------------------------\n\nTITLE: Downloading the H5AD Single-Cell Dataset\nDESCRIPTION: Downloads the H5AD file from the specified URL if it doesn't already exist locally. Creates a 'data' directory if needed and saves the file there using the original filename.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/widget_brain_h5ad.ipynb#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nadata_filepath = join(\"data\", \"84df8fa1-ab53-43c9-a439-95dcb9148265.h5ad\")\nif not isfile(adata_filepath):\n    os.makedirs(\"data\", exist_ok=True)\n    urlretrieve(h5_url, adata_filepath)\n```\n\n----------------------------------------\n\nTITLE: Generating H5AD Reference Specification\nDESCRIPTION: Creates a JSON reference specification file required for Vitessce to read H5AD-formatted data.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/spatial_data_mouseliver.ipynb#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nref_dict = generate_h5ad_ref_spec(adata_h5ad_filepath)\nwith open(ref_spec_json_filepath, \"w\") as f:\n    json.dump(ref_dict, f)\n```\n\n----------------------------------------\n\nTITLE: Accessing Generated Imports in Python\nDESCRIPTION: Displays the list of required imports returned by the to_python method. These are the classes needed for the generated code to work correctly.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/config_to_python.ipynb#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimports\n```\n\n----------------------------------------\n\nTITLE: Creating Vitessce Configuration\nDESCRIPTION: Initializes the Vitessce configuration with schema version and name.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/widget_brain_with_base_dir.ipynb#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nvc = VitessceConfig(schema_version=\"1.0.15\", name='Habib et al', base_dir=BASE_DIR)\n```\n\n----------------------------------------\n\nTITLE: Downloading Loom Data File\nDESCRIPTION: Downloads the osmFISH Loom file from the Linnarsson lab repository if it doesn't already exist locally. Creates a data directory if needed and saves the downloaded file to a specified path.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/widget_loom.ipynb#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nloom_filepath = join(\"data\", \"osmFISH_SScortex_mouse_all_cells.loom\")\nif not isfile(loom_filepath):\n    os.makedirs(\"data\", exist_ok=True)\n    urlretrieve('http://loom.linnarssonlab.org/clone/osmFISH/osmFISH_SScortex_mouse_all_cells.loom', loom_filepath)\n```\n\n----------------------------------------\n\nTITLE: Accessing Unstructured Data\nDESCRIPTION: Accesses the unstructured data dictionary from the SpatialData table.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/spatial_data_blobs.ipynb#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nsdata.table.uns\n```\n\n----------------------------------------\n\nTITLE: Defining the H5AD Dataset URL for Single-Cell Data\nDESCRIPTION: Specifies the URL to a publicly available H5AD file containing single-cell RNA-seq data from the cellxgene database. This is the source data for the visualization.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/widget_brain_h5ad.ipynb#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nh5_url = \"https://datasets.cellxgene.cziscience.com/84df8fa1-ab53-43c9-a439-95dcb9148265.h5ad\"\n```\n\n----------------------------------------\n\nTITLE: Downloading COVID-19 Cell Atlas Dataset\nDESCRIPTION: Creates a data directory and downloads a dataset from the COVID-19 Cell Atlas (Habib17) using urlretrieve.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/widget_shortcut.ipynb#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nos.makedirs(\"data\", exist_ok=True)\nadata_filepath = join(\"data\", \"habib17.processed.h5ad\")\nurlretrieve('https://covid19.cog.sanger.ac.uk/habib17.processed.h5ad', adata_filepath)\n```\n\n----------------------------------------\n\nTITLE: Loading VitessceConfig from Dictionary in Python\nDESCRIPTION: Creates a VitessceConfig instance from a dictionary representation using the from_dict method. This allows conversion from JSON-like configuration objects to the Python API.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/config_to_python.ipynb#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nvc = VitessceConfig.from_dict(dries_config)\n```\n\n----------------------------------------\n\nTITLE: Creating Vitessce Widget\nDESCRIPTION: Creates and displays the Vitessce widget using the configured visualization settings.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/widget_imaging_segmentation.ipynb#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nvw = vc.widget()\nvw\n```\n\n----------------------------------------\n\nTITLE: Importing Vitessce Dependencies\nDESCRIPTION: Imports necessary Vitessce components and utilities including configuration, component types, coordination types, and wrapper classes.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/widget_modify_config.ipynb#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom vitessce import (\n    VitessceConfig,\n    Component as cm,\n    CoordinationType as ct,\n    OmeTiffWrapper,\n    MultiImageWrapper,\n    CoordinationLevel as CL,\n    ObsSegmentationsOmeTiffWrapper,\n    ImageOmeTiffWrapper,\n    get_initial_coordination_scope_prefix,\n)\nimport random\n```\n\n----------------------------------------\n\nTITLE: Downloading Dataset\nDESCRIPTION: Downloads the COVID-19 Cell Atlas dataset if not already present in the base directory.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/widget_brain_with_base_dir.ipynb#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nadata_relative_filepath = \"habib17.processed.h5ad\" # Relative to BASE_DIR\nadata_filepath = join(BASE_DIR, adata_relative_filepath)\nif not isfile(adata_filepath):\n    os.makedirs(BASE_DIR, exist_ok=True)\n    urlretrieve('https://covid19.cog.sanger.ac.uk/habib17.processed.h5ad', adata_filepath)\n```\n\n----------------------------------------\n\nTITLE: Formatting Chromosome Names in Genomic Bin Data\nDESCRIPTION: Modifies the chromosome names in bin data by adding the 'chr' prefix to make them compatible with negspy chromosome naming conventions.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/widget_genomic_profiles.ipynb#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# The genome assembly is GRCh38 but the chromosome names in the bin names do not start with the \"chr\" prefix.\n# This is incompatible with the chromosome names from `negspy`, so we need to append the prefix.\nbins_df[\"interval\"] = bins_df[\"interval\"].apply(lambda x: \"chr\" + x)\n```\n\n----------------------------------------\n\nTITLE: Serving Exported Vitessce Files Locally Using http-server\nDESCRIPTION: Instructions for serving the exported Vitessce files using the http-server package. This allows local viewing of the Vitessce visualization.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/data_export_files.ipynb#2025-04-23_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ncd test\nhttp-server ./ --cors -p 3000\n```\n\n----------------------------------------\n\nTITLE: Initializing Vitessce Configuration\nDESCRIPTION: Creates a new Vitessce configuration with schema version and metadata.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/widget_brain.ipynb#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nvc = VitessceConfig(schema_version=\"1.0.15\", name='Habib et al', description='COVID-19 Healthy Donor Brain')\n```\n\n----------------------------------------\n\nTITLE: Writing SpatialData\nDESCRIPTION: Saves the SpatialData object to disk in zarr format.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/spatial_data_blobs.ipynb#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nsdata.write(spatialdata_filepath)\n```\n\n----------------------------------------\n\nTITLE: Defining Layout\nDESCRIPTION: Specifies the arrangement of visualization components in the widget layout.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/widget_brain_with_base_dir.ipynb#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nvc.layout((scatterplot | cell_sets) / (heatmap | genes));\n```\n\n----------------------------------------\n\nTITLE: Importing Vitessce Components\nDESCRIPTION: Imports necessary classes and types from the Vitessce library for configuration and visualization.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/spatial_data_blobs.ipynb#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom vitessce import (\n    VitessceConfig,\n    ViewType as vt,\n    CoordinationType as ct,\n    CoordinationLevel as CL,\n    SpatialDataWrapper,\n    get_initial_coordination_scope_prefix\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Remote Data URL\nDESCRIPTION: Defines the URL for accessing the pbmc3k dataset stored as a zarr store in Google Cloud Storage. The dataset is preprocessed and ready for visualization.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/widget_pbmc_remote.ipynb#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nurl = 'https://storage.googleapis.com/vitessce-demo-data/anndata-test/pbmc3k_processed.zarr/'\n```\n\n----------------------------------------\n\nTITLE: Generating Pseudo-Segmentations as Diamond Shapes\nDESCRIPTION: Creates diamond-shaped polygons for each cell centered on its spatial coordinates. These polygons serve as cell segmentations and are stored in the AnnData object's obsm attribute under 'segmentations'.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/widget_loom.ipynb#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nnum_cells = adata.obs.shape[0]\nadata.obsm[\"segmentations\"] = np.zeros((num_cells, 4, 2))\nradius = 100\nfor i in range(num_cells):\n    adata.obsm[\"segmentations\"][i, :, :] = to_diamond(adata.obsm['spatial'][i, 0], adata.obsm['spatial'][i, 1], radius)\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries\nDESCRIPTION: Importing necessary Python modules including Vitessce configuration components, AnnData, and the SpatialQuery plugin.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/widget_plugin_spatial-query.ipynb#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom os.path import join\nfrom anndata import read_h5ad\nfrom vitessce import (\n    VitessceConfig,\n    AnnDataWrapper,\n    ViewType as vt,\n    CoordinationType as ct,\n    CoordinationLevel as CL,\n)\nfrom vitessce.widget_plugins import SpatialQueryPlugin\n```\n\n----------------------------------------\n\nTITLE: Importing Vitessce Dependencies\nDESCRIPTION: Imports required Vitessce components including VitessceConfig, Component types, CoordinationType, and image wrapper classes for handling OME-TIFF files.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/widget_imaging_segmentation.ipynb#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom vitessce import (\n    VitessceConfig,\n    Component as cm,\n    CoordinationType as ct,\n    OmeTiffWrapper,\n    MultiImageWrapper,\n)\nfrom os.path import join\n```\n\n----------------------------------------\n\nTITLE: Initializing Vitessce Widget with Proxy for Remote Jupyter in Python\nDESCRIPTION: This Python snippet shows how to initialize a Vitessce widget with the proxy parameter set to True, which is necessary when accessing a notebook from a local web browser while the Jupyter process is running remotely.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/data_options.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nvc.widget(proxy=True)\n```\n\n----------------------------------------\n\nTITLE: Importing Utility Dependencies for Vitessce Visualization\nDESCRIPTION: Imports basic Python utilities needed for downloading example datasets and handling file operations including path manipulation, HTTP requests, zip file extraction, and JSON processing.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/spatial_data_mouseliver.ipynb#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom os.path import join, isfile, isdir\nfrom urllib.request import urlretrieve\nimport zipfile\nimport json\n```\n\n----------------------------------------\n\nTITLE: Initializing SpatialQuery Plugin\nDESCRIPTION: Creating an instance of the SpatialQuery plugin with the loaded AnnData object.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/widget_plugin_spatial-query.ipynb#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nplugin = SpatialQueryPlugin(adata)\n```\n\n----------------------------------------\n\nTITLE: Importing Vitessce Python Components\nDESCRIPTION: Imports the necessary classes from the Vitessce library, including VitessceConfig for widget configuration, Component for defining visualization components, CoordinationType for data coordination, and wrapper classes for handling image data.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/widget_on_colab.ipynb#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom vitessce import (\n    VitessceConfig,\n    Component as cm,\n    CoordinationType as ct,\n    OmeTiffWrapper,\n    MultiImageWrapper,\n)\nfrom os.path import join\n```\n\n----------------------------------------\n\nTITLE: Importing Vitessce Components in Python\nDESCRIPTION: This snippet imports necessary classes and functions from the Vitessce library to set up the visualization configuration.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/widget_imaging_beta.ipynb#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom vitessce import (\n    VitessceConfig,\n    Component as cm,\n    CoordinationType as ct,\n    OmeTiffWrapper,\n    MultiImageWrapper,\n    CoordinationLevel as CL,\n)\nfrom os.path import join\n```\n\n----------------------------------------\n\nTITLE: Creating Vitessce widget in Python\nDESCRIPTION: Python code to create and display a Vitessce widget. The widget configuration can be accessed after creating the widget instance.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/README.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nvw = vc.widget()\nvw\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies for Vitessce Visualization\nDESCRIPTION: Imports necessary Python packages for data handling and Vitessce visualization. This includes file operations, data loading utilities, and Vitessce-specific configuration classes and components.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/widget_pbmc.ipynb#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom os.path import join, isfile, isdir\nfrom urllib.request import urlretrieve\nfrom anndata import read_h5ad\nimport scanpy as sc\n\nfrom vitessce import (\n    VitessceConfig,\n    Component as cm,\n    CoordinationType as ct,\n    AnnDataWrapper,\n)\nfrom vitessce.data_utils import (\n    optimize_adata,\n    VAR_CHUNK_SIZE,\n)\n```\n\n----------------------------------------\n\nTITLE: Loading AnnData from H5AD File\nDESCRIPTION: Loads the downloaded H5AD file into an AnnData object, which may print a FutureWarning.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/web_app_brain.ipynb#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nadata = read_h5ad(adata_filepath)\n```\n\n----------------------------------------\n\nTITLE: Rendering Vitessce Widget from Reconstructed Config\nDESCRIPTION: Calls the widget method on the reconstructed VitessceConfig to create a visual Vitessce widget. This verifies that the reconstructed configuration works correctly.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/config_to_python.ipynb#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nreconstructed_vc.widget()\n```\n\n----------------------------------------\n\nTITLE: Importing Example Configurations in Python\nDESCRIPTION: Imports a pre-defined example configuration named 'dries' from an example_configs module. This provides a starting point for demonstrating configuration functionality.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/config_to_python.ipynb#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom example_configs import dries as dries_config\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies for Vitessce Visualization\nDESCRIPTION: Imports required Python packages including os, urllib, anndata, scanpy, and vitessce components for data handling and visualization. Sets up basic requirements for creating Vitessce visualizations.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/widget_pbmc_remote.ipynb#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom os.path import join\nfrom urllib.request import urlretrieve\nfrom anndata import read_h5ad\nimport scanpy as sc\n\nfrom vitessce import (\n    VitessceConfig,\n    Component as cm,\n    CoordinationType as ct,\n    AnnDataWrapper,\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for Data Preparation Examples in reStructuredText\nDESCRIPTION: A reStructuredText toctree directive that organizes links to various notebooks demonstrating data preparation examples for Vitessce-Python. It includes notebooks for data export to S3, file-based data export, and widget creation with brain visualization examples.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/data_examples.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 2\n\n   notebooks/data_export_s3\n   notebooks/data_export_files\n   notebooks/widget_brain_with_base_dir\n   notebooks/widget_brain_h5ad\n```\n\n----------------------------------------\n\nTITLE: Setting Base Directory\nDESCRIPTION: Defines the base directory for data storage and relative path resolution.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/widget_brain_with_base_dir.ipynb#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nBASE_DIR = \"data\"\n```\n\n----------------------------------------\n\nTITLE: Importing Data Structure Dependencies for Transformation Tasks\nDESCRIPTION: Imports Python libraries needed for data transformations between different formats including NumPy for numerical operations, SpatialData for reading Zarr files, AnnData for single-cell data, and OME-Zarr/TiffFile for image handling.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/spatial_data_mouseliver.ipynb#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nfrom spatialdata import read_zarr\nfrom anndata import AnnData\nfrom ome_zarr.writer import write_image\nimport tifffile\nfrom generate_tiff_offsets import get_offsets\n```\n\n----------------------------------------\n\nTITLE: Installing Vitessce Python Package with pip\nDESCRIPTION: Command to install the vitessce Python package with all dependencies. Requires Python 3.9 or greater and installs from PyPI.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/index.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install vitessce[all]\n```\n\n----------------------------------------\n\nTITLE: Generating Python Code from VitessceConfig\nDESCRIPTION: Calls the to_python method to generate Python code that can recreate the VitessceConfig instance. This returns both required imports and the actual code snippet.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/config_to_python.ipynb#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimports, code = vc.to_python()\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies for Vitessce Widget\nDESCRIPTION: Imports necessary Python packages for handling file operations, data downloading, and single-cell data processing with AnnData and scanpy. Also imports Vitessce components required for visualization configuration.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/widget_shortcut.ipynb#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom os.path import join\nfrom urllib.request import urlretrieve\nfrom anndata import read_h5ad\nimport scanpy as sc\n\nfrom vitessce import (\n    VitessceConfig,\n    Component as cm,\n    CoordinationType as ct,\n    AnnDataWrapper,\n)\n```\n\n----------------------------------------\n\nTITLE: Running and deploying demos to cloud storage\nDESCRIPTION: Command to run the Snakemake workflow with upload enabled, which processes the data and uploads it to configured cloud storage services.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/demos/README.md#2025-04-23_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nsnakemake --cores all --rerun-triggers mtime --config upload=true\n```\n\n----------------------------------------\n\nTITLE: Minimal Vitessce Plugin JavaScript Implementation\nDESCRIPTION: This code demonstrates the most basic structure for a Vitessce plugin, defining an EcmaScript Module that exports a createPlugins function. The function returns an object with properties for different plugin types that can be customized.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/widget_plugins.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nPLUGIN_ESM = \"\"\"\nfunction createPlugins(utilsForPlugins) {\n    const {\n        React,\n        PluginFileType,\n        PluginViewType,\n        PluginCoordinationType,\n        PluginJointFileType,\n        z,\n        useCoordination,\n    } = utilsForPlugins;\n    return {\n        pluginViewTypes: undefined,\n        pluginFileTypes: undefined,\n        pluginCoordinationTypes: undefined,\n        pluginJointFileTypes: undefined,\n    };\n}\nexport default { createPlugins };\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies for Vitessce Visualization\nDESCRIPTION: Imports necessary libraries for file operations, data downloading, AnnData processing, and Vitessce visualization components. Key imports include AnnData for reading Loom files and the Vitessce configuration classes for creating visualizations.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/widget_loom.ipynb#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom os.path import join, isfile, isdir\nfrom urllib.request import urlretrieve\nfrom anndata import read_loom\nimport numpy as np\n\nfrom vitessce import (\n    VitessceConfig,\n    Component as cm,\n    CoordinationType as ct,\n    AnnDataWrapper,\n)\nfrom vitessce.data_utils import (\n    optimize_adata,\n    to_diamond,\n    VAR_CHUNK_SIZE,\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Up File Paths for Example Dataset\nDESCRIPTION: Defines the file paths for the mouse liver example dataset in various formats including SpatialData Zarr, AnnData Zarr, H5AD, OME-TIFF, and OME-Zarr that will be used throughout the tutorial.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/spatial_data_mouseliver.ipynb#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndata_dir = \"data\"\nzip_filepath = join(data_dir, \"mouse_liver.spatialdata.zarr.zip\")\nspatialdata_filepath = join(data_dir, \"mouse_liver.spatialdata.zarr\")\nadata_zarr_filepath = join(data_dir, \"mouse_liver.anndata.zarr\")\nadata_h5ad_filepath = join(data_dir, \"mouse_liver.h5ad\")\nref_spec_json_filepath = join(data_dir, \"mouse_liver.h5ad.ref.json\")\nome_tiff_filepath = join(data_dir, \"mouse_liver.ome.tif\")\noffsets_json_filepath = join(data_dir, \"mouse_liver.ome.tif.offsets.json\")\nome_zarr_filepath = join(data_dir, \"mouse_liver.ome.zarr\")\nlabels_ome_zarr_filepath = join(data_dir, \"mouse_liver.labels.ome.zarr\")\n```\n\n----------------------------------------\n\nTITLE: Rendering Vitessce configuration templates\nDESCRIPTION: Command to render all Jinja2 templates for Vitessce configurations, replacing placeholders with appropriate URLs.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/demos/README.md#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nsnakemake fill_templates -j 1\n```\n\n----------------------------------------\n\nTITLE: Importing Vitessce Demo Plugin\nDESCRIPTION: Imports the DemoPlugin from Vitessce widget plugins for additional functionality.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/widget_plugin_demo.ipynb#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom vitessce.widget_plugins import DemoPlugin\n```\n\n----------------------------------------\n\nTITLE: Importing Vitessce Components for Multi-Modal Imaging Visualization in Python\nDESCRIPTION: Imports the necessary modules from Vitessce Python, including VitessceConfig for widget configuration, Component for layout components, CoordinationType for data coordination, and OmeTiffWrapper and MultiImageWrapper for handling image data.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/widget_imaging.ipynb#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom vitessce import (\n    VitessceConfig,\n    Component as cm,\n    CoordinationType as ct,\n    OmeTiffWrapper,\n    MultiImageWrapper,\n)\nfrom os.path import join\n```\n\n----------------------------------------\n\nTITLE: Installing Vitessce Python Package\nDESCRIPTION: Installs the Vitessce Python package with all optional dependencies using pip.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/widget_modify_config.ipynb#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n!pip install \"vitessce[all]\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Chat Plugin in JavaScript using React\nDESCRIPTION: Creates a JavaScript plugin for Vitessce using React to implement a chat interface. The plugin includes a chat view component with message history state, input handling, and communication with Python backend through command invocation.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/widget_plugin_custom.ipynb#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nPLUGIN_ESM = transform(\"\"\"\nfunction createPlugins(utilsForPlugins) {\n    const {\n        React,\n        PluginFileType,\n        PluginViewType,\n        PluginCoordinationType,\n        PluginJointFileType,\n        z,\n        useCoordination,\n        invokeCommand,\n    } = utilsForPlugins;\n    \n    const CSS = `\n        .chat {\n            overflow-y: scroll;\n        }\n    `;\n    \n    function ChatView(props) {\n        \n        const [nextMessage, setNextMessage] = React.useState('');\n        const [isLoading, setIsLoading] = React.useState(false);\n        const [chatHistory, setChatHistory] = React.useState([]); // chatHistory is an array of message objects like [{ user, text }, ...]\n                       \n        async function handleClick() {     \n            setChatHistory(prev => ([\n                ...prev,\n                { user: 'You', text: nextMessage },\n            ]));\n            setIsLoading(true);\n            const [chatReceiveValue, chatReceiveBuffers] = await invokeCommand(\"chat_send\", nextMessage, []);\n            setChatHistory(prev => ([\n                ...prev,\n                { user: 'AI', text: chatReceiveValue.text },\n            ]));\n            setIsLoading(false);\n        }\n        \n        return (\n            <>\n                <style>{CSS}</style>\n                <div className=\"chat\">\n                    <p>Chat view</p>\n                    <div>\n                        {chatHistory.map(message => (\n                            <p key={`${message.user}-${message.text}`}>\n                                <b>{message.user}</b>:\n                                <span>{message.text}</span>\n                            </p>\n                        ))}\n                    </div>\n                    <input type=\"text\" value={nextMessage} onChange={e => setNextMessage(e.target.value)} disabled={isLoading} />\n                    <button onClick={handleClick}>Send message</button>\n                </div>\n            </>\n        );\n    }\n\n    const pluginViewTypes = [\n        new PluginViewType('chat', ChatView, []),\n    ];\n    return { pluginViewTypes };\n}\nexport default { createPlugins };\n\"\"\")\n\n\ndef handle_chat_message(message, buffers):\n    return { \"text\": message.upper() }, []\n\n\nclass ChatPlugin(VitesscePlugin):\n    plugin_esm = PLUGIN_ESM\n    commands = {\n        \"chat_send\": handle_chat_message,\n    }\n```\n\n----------------------------------------\n\nTITLE: Importing Vitessce and Supporting Libraries\nDESCRIPTION: Imports necessary classes and functions from Vitessce and other supporting libraries for data manipulation and analysis.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/widget_genomic_profiles.ipynb#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom vitessce import (\n    VitessceConfig,\n    ViewType as vt,\n    CoordinationType as ct,\n    AnnDataWrapper,\n    MultivecZarrWrapper,\n)\nfrom vitessce.data_utils import (\n    adata_to_multivec_zarr,\n)\nfrom os.path import join\nfrom scipy.io import mmread\nimport pandas as pd\nimport numpy as np\nfrom anndata import AnnData\n```\n\n----------------------------------------\n\nTITLE: Passing a Custom Plugin to Vitessce Widget\nDESCRIPTION: This code shows how to create a subclass of VitesscePlugin with a custom plugin_esm property and pass it to a VitessceConfig instance. The plugin is then added to the widget configuration.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/widget_plugins.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom vitessce import VitessceConfig, VitesscePlugin\n\nclass MyPlugin(VitesscePlugin):\n    plugin_esm = PLUGIN_ESM\n\nvc = VitessceConfig(description=\"A Vitessce widget with a custom plugin\")\n# Some more configuration here...\n\nplugin = MyPlugin()\nvc.widget(plugins=[plugin])\n```\n\n----------------------------------------\n\nTITLE: Importing SpatialData Library\nDESCRIPTION: Imports the spatialdata package which is required for working with spatial data objects.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/spatial_data_blobs.ipynb#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport spatialdata\n```\n\n----------------------------------------\n\nTITLE: Setting File Paths for SpatialData in Python\nDESCRIPTION: This code defines file paths for the data directory, zip file, and extracted SpatialData directory. It sets up the locations for data handling in the tutorial.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/spatial_data.ipynb#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndata_dir = \"data\"\nzip_filepath = join(data_dir, \"visium.spatialdata.zarr.zip\")\nspatialdata_filepath = join(data_dir, \"visium.spatialdata.zarr\")\n```\n\n----------------------------------------\n\nTITLE: Installing Required Python Packages\nDESCRIPTION: Installation of necessary Python packages including Vitessce, esbuild_py, anndata, mlxtend, and SpatialQuery from GitHub.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/widget_plugin_spatial-query.ipynb#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n#!pip install \"vitessce[all]==3.3.0\" esbuild_py anndata\n!pip install \"mlxtend~=0.23.0\"\n#!pip install -i \"https://test.pypi.org/simple/\" SpatialQuery\n!pip install \"SpatialQuery @ git+https://github.com/ShaokunAn/Spatial-Query@main\"\n```\n\n----------------------------------------\n\nTITLE: File Position Range Mappings\nDESCRIPTION: Lists file numbers and their corresponding position ranges. Format is file:startPosition-endPosition where positions appear to be in 5000-unit increments.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/tests/data/test.snap.bins.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n1:10001-15000\n1:15001-20000\n1:65001-70000\n1:80001-85000\n1:105001-110000\n1:115001-120000\n1:270001-275000\n2:10001-15000\n2:15001-20000\n2:20001-25000\n2:25001-30000\n2:30001-35000\n2:35001-40000\n2:55001-60000\n3:15001-20000\n18:10001-15000\n```\n\n----------------------------------------\n\nTITLE: Accessing widget configuration in Python\nDESCRIPTION: Python code to access the configuration of a Vitessce widget after it has been created.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/README.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nvw.config\n```\n\n----------------------------------------\n\nTITLE: Importing Vitessce Config Class in Python\nDESCRIPTION: Imports the VitessceConfig class which is the main entry point for creating Vitessce visualizations in Python.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/widget_from_dict.ipynb#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom vitessce import VitessceConfig\n```\n\n----------------------------------------\n\nTITLE: Downloading COVID-19 Cell Atlas Data\nDESCRIPTION: Creates a data directory and downloads a single-cell RNA-seq dataset from the COVID-19 Cell Atlas repository.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/web_app_brain.ipynb#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nos.makedirs(\"data\", exist_ok=True)\nadata_filepath = join(\"data\", \"habib17.processed.h5ad\")\nurlretrieve('https://covid19.cog.sanger.ac.uk/habib17.processed.h5ad', adata_filepath)\n```\n\n----------------------------------------\n\nTITLE: Configuring SSH Port Forwarding for Remote File Access in Bash\nDESCRIPTION: This bash script demonstrates how to set up SSH port forwarding to access remote files and serve them using a local HTTP server. It includes steps for SSH connection, optional login node access, starting an interactive compute session, and running an HTTP server.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/data_options.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Replace REMOTE_PORT and LOCAL_PORT below with the desired port numbers.\n# Replace my_username and cluster.university.edu.\nssh -L REMOTE_PORT:127.0.0.1:LOCAL_PORT my_username@cluster.university.edu\n# Optionally SSH to a particular login node first.\nssh -L REMOTE_PORT:127.0.0.1:REMOTE_PORT login01\n# Optionally start an interactive compute session first, but make sure tunneling/port forwarding is enabled.\n# Note: this command may be different depending on the cluster and job management system.\nsrun -t 0-3:00 --pty -p interactive --tunnel REMOTE_PORT:REMOTE_PORT /bin/bash\n# cd to some directory with files to serve.\nhttp-server --cors='*' --port REMOTE_PORT .\n```\n\n----------------------------------------\n\nTITLE: Displaying Generated Python Configuration Code\nDESCRIPTION: Prints the Python code string that was generated by the to_python method. This code can be evaluated to recreate the VitessceConfig instance.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/config_to_python.ipynb#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nprint(code)\n```\n\n----------------------------------------\n\nTITLE: Installing Vitessce Python Package with All Dependencies\nDESCRIPTION: Installs the Vitessce Python package with all optional dependencies using pip. This command should be run in a notebook cell or terminal.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/widget_on_colab.ipynb#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n!pip install vitessce[all]\n```\n\n----------------------------------------\n\nTITLE: Defining Plugin Views Using JSX Transformation\nDESCRIPTION: This example demonstrates how to use the transform function from oxc_py to convert JSX syntax to valid JavaScript. It creates a simple React component for a plugin view type that displays 'Hello world from JSX!'.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/widget_plugins.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom oxc_py import transform\n\nPLUGIN_ESM = transform(\"\"\"\nfunction createPlugins(utilsForPlugins) {\n    const {\n        React,\n        PluginFileType,\n        PluginViewType,\n        PluginCoordinationType,\n        PluginJointFileType,\n        z,\n        useCoordination,\n    } = utilsForPlugins;\n\n    function MyPluginView(props) {\n        return (\n            <p>Hello world from JSX!</p>\n        );\n    }\n\n    const pluginViewTypes = [\n        new PluginViewType('myPlugin', MyPluginView, []),\n    ];\n    return { pluginViewTypes };\n}\nexport default { createPlugins };\n\"\"\")\n```\n\n----------------------------------------\n\nTITLE: Creating a ReStructuredText Table of Contents for Vitessce-Python Widget Examples\nDESCRIPTION: A toctree directive that organizes notebook examples for the Vitessce-Python documentation. The directive is configured with maxdepth=2 and lists seven different notebook examples showing various applications of the Vitessce visualization toolkit.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/widget_examples.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 2\n\n   notebooks/widget_brain\n   notebooks/widget_genomic_profiles\n   notebooks/widget_imaging\n   notebooks/widget_pbmc\n   notebooks/widget_loom\n   notebooks/widget_from_dict\n   notebooks/widget_pbmc_remote.ipynb\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies for Vitessce Visualization\nDESCRIPTION: Imports required Python packages including Vitessce components, AnnData utilities, and data processing libraries for single-cell analysis.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/widget_brain.ipynb#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom os.path import join, isfile, isdir\nfrom urllib.request import urlretrieve\nfrom anndata import read_h5ad\nimport scanpy as sc\n\nfrom vitessce import (\n    VitessceConfig,\n    Component as cm,\n    CoordinationType as ct,\n    AnnDataWrapper,\n)\nfrom vitessce.data_utils import (\n    optimize_adata,\n    VAR_CHUNK_SIZE,\n)\n```\n\n----------------------------------------\n\nTITLE: Inspecting Widget Configuration\nDESCRIPTION: Retrieves and displays the current widget configuration in JSON format.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/widget_modify_config.ipynb#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Inspect the current configuration value.\n# This is a dict in the JSON-based format https://vitessce.io/docs/view-config-json/\nvw.config\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies for Vitessce and Data Handling in Python\nDESCRIPTION: This snippet imports necessary modules for file operations, URL handling, and Vitessce configuration. It includes imports from the vitessce package for creating visualizations.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/spatial_data.ipynb#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom os.path import join, isfile, isdir\nfrom urllib.request import urlretrieve\nimport zipfile\n\nfrom vitessce import (\n    VitessceConfig,\n    ViewType as vt,\n    CoordinationType as ct,\n    CoordinationLevel as CL,\n    SpatialDataWrapper,\n    get_initial_coordination_scope_prefix\n)\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies for Vitessce Data Preparation and AWS S3 Export\nDESCRIPTION: Imports necessary libraries for data handling, AWS S3 interaction, and Vitessce visualization configuration. Includes packages for URL handling, file operations, AnnData processing, and Vitessce components.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/data_export_s3.ipynb#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport boto3\nimport json\nfrom urllib.parse import quote_plus\nfrom os.path import join, isfile, isdir\nfrom urllib.request import urlretrieve\nfrom anndata import read_h5ad\nimport scanpy as sc\n\nfrom vitessce import (\n    VitessceWidget,\n    VitessceConfig,\n    Component as cm,\n    CoordinationType as ct,\n    AnnDataWrapper,\n)\nfrom vitessce.data_utils import (\n    optimize_adata,\n    VAR_CHUNK_SIZE,\n)\n```\n\n----------------------------------------\n\nTITLE: Reconstructing VitessceConfig from Generated Code\nDESCRIPTION: Uses Python's eval function to execute the generated code string, creating a new VitessceConfig instance that should match the original. This demonstrates the roundtrip capability.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/config_to_python.ipynb#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nreconstructed_vc = eval(code)\n```\n\n----------------------------------------\n\nTITLE: Rendering Vitessce Widget in Notebook\nDESCRIPTION: Creates and displays a Vitessce widget based on the configuration, allowing interactive visualization of the data within the notebook.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/cellbrowser_to_vitessce_config_conversion.ipynb#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nvw = vc.widget()\nvw\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for UCSC Cell Browser to Vitessce Conversion\nDESCRIPTION: Imports the necessary Python modules for converting UCSC Cell Browser data to Vitessce format, including utilities for file handling, data conversion, and Vitessce configuration.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/cellbrowser_to_vitessce_config_conversion.ipynb#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport json\nfrom os.path import join\nfrom vitessce import (\n    convert_cell_browser_project_to_anndata,\n    AnnDataWrapper,\n    VitessceConfig,\n)\nfrom vitessce.data_utils import VAR_CHUNK_SIZE\n```\n\n----------------------------------------\n\nTITLE: Displaying Vitessce visualization with proxy and host settings\nDESCRIPTION: Python code to display Vitessce visualization when Jupyter is running on a remote machine, specifying both proxy and host_name parameters.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/README.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nvc.display(proxy=True, host_name=\"http://localhost:8888\")\n```\n\n----------------------------------------\n\nTITLE: Creating Vitessce widget with proxy for remote Jupyter\nDESCRIPTION: Python code to create a Vitessce widget when Jupyter is running on a remote machine, using the proxy option.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/README.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nvw = vc.widget(proxy=True)\nvw\n```\n\n----------------------------------------\n\nTITLE: Installing vitessce with pip\nDESCRIPTION: Command to install the vitessce package with all dependencies using pip package manager.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install vitessce[all]\n```\n\n----------------------------------------\n\nTITLE: Development installation setup\nDESCRIPTION: Commands for setting up a development environment for vitessce-python. Requires NodeJS and NPM as prerequisites.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone https://github.com/vitessce/vitessce-python.git\n$ cd vitessce-python\n$ uv sync --extra dev --extra docs --extra all\n```\n\n----------------------------------------\n\nTITLE: Setting File Path\nDESCRIPTION: Defines the file path where the SpatialData object will be saved in zarr format.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/spatial_data_blobs.ipynb#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nspatialdata_filepath = join(\"data\", \"blobs.spatialdata.zarr\")\n```\n\n----------------------------------------\n\nTITLE: Opening Vitessce Visualization in Web Browser using Python\nDESCRIPTION: Generates a URL for the Vitessce visualization based on the exported configuration and opens it in a web browser. This allows for easy sharing and viewing of the interactive visualization.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/data_export_files.ipynb#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nvitessce_url = \"http://vitessce.io/?url=data:,\" + quote_plus(json.dumps(config_dict))\nimport webbrowser\nwebbrowser.open(vitessce_url)\n```\n\n----------------------------------------\n\nTITLE: Importing Path Utilities\nDESCRIPTION: Imports os.path.join for handling file paths in a platform-independent way.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/spatial_data_blobs.ipynb#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom os.path import join\n```\n\n----------------------------------------\n\nTITLE: Setting up Vitessce Python environment with UV\nDESCRIPTION: Navigates to the notebooks directory and uses UV to synchronize dependencies with additional extras for development, documentation, and all optional features.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncd docs/notebooks\nuv sync --extra dev --extra docs --extra all\n```\n\n----------------------------------------\n\nTITLE: Importing Vitessce Components\nDESCRIPTION: Imports the necessary classes and components from the Vitessce library including configuration, component types, and image wrappers.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/widget_plugin_demo.ipynb#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom vitessce import (\n    VitessceConfig,\n    Component as cm,\n    CoordinationType as ct,\n    OmeTiffWrapper,\n    MultiImageWrapper,\n)\nfrom os.path import join\n```\n\n----------------------------------------\n\nTITLE: Running Jupyter Lab for Vitessce notebooks\nDESCRIPTION: Launches Jupyter Lab using UV to interact with the Vitessce Python example notebooks.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/README.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nuv run jupyter lab\n```\n\n----------------------------------------\n\nTITLE: Troubleshooting Vitessce Lab extension conflicts\nDESCRIPTION: Uninstalls the previous Vitessce Jupyter widget to avoid conflicts between version 1 and version 2 JavaScript code.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/docs/notebooks/README.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\njupyter labextension uninstall vitessce-jupyter\n```\n\n----------------------------------------\n\nTITLE: Setting up the vitessce-python-demos environment\nDESCRIPTION: Commands to create and activate a conda environment for Vitessce Python demos and install the required dependencies.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/demos/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncd demos\nconda env create -f environment.yml\nconda activate vitessce-python-demos\npip install -e \"..[dev]\"\n```\n\n----------------------------------------\n\nTITLE: Running linting and tests\nDESCRIPTION: Commands to run flake8 for linting and pytest for running test cases in the project.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nuv run flake8\nuv run pytest\n```\n\n----------------------------------------\n\nTITLE: Formatting a single Python file with autopep8\nDESCRIPTION: Command to format a single Python file using autopep8 with aggressive mode to enforce PEP 8 style guide.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nuv run autopep8 --in-place --aggressive ./path/to/file.py\n```\n\n----------------------------------------\n\nTITLE: Formatting all Python files in project\nDESCRIPTION: Command to find and format all Python files in the project using autopep8 with aggressive mode.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nfind . -name '*.py' -exec uv run autopep8 --in-place --aggressive '{}' \\;\n```\n\n----------------------------------------\n\nTITLE: Building documentation\nDESCRIPTION: Command to build the HTML documentation for the project using Sphinx.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nuv run make html\n```\n\n----------------------------------------\n\nTITLE: Running the Snakemake workflow\nDESCRIPTION: Command to execute the Snakemake workflow using all available CPU cores and rerunning based on file modification time.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/demos/README.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nsnakemake --cores all --rerun-triggers mtime\n```\n\n----------------------------------------\n\nTITLE: Serving data locally with HTTP server\nDESCRIPTION: Command to start an HTTP server with CORS enabled for local development and testing of Vitessce visualizations.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/demos/README.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nhttp-server --cors='*' --port 8000 .\n```\n\n----------------------------------------\n\nTITLE: Creating a new demo directory\nDESCRIPTION: Command to run a shell script that creates a new demo directory structure with the specified name.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/demos/README.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n./create_demo.sh {new_demo_dirname}\n```\n\n----------------------------------------\n\nTITLE: Rendering individual local template\nDESCRIPTION: Command to render a specific demo's Vitessce configuration template for local development, with output redirected to a JSON file.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/demos/README.md#2025-04-23_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\npython fill_template.py -d codeluppi-2018 -t local > ./codeluppi-2018/vitessce.local.json\n```\n\n----------------------------------------\n\nTITLE: Rendering individual remote template\nDESCRIPTION: Command to render a specific demo's Vitessce configuration template for remote deployment with a specified version number.\nSOURCE: https://github.com/vitessce/vitessce-python/blob/main/demos/README.md#2025-04-23_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\npython fill_template.py -d codeluppi-2018 -t remote -v 0.0.33 > ./codeluppi-2018/vitessce.remote.json\n```"
  }
]