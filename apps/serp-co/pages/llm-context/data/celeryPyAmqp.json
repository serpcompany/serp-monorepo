[
  {
    "owner": "celery",
    "repo": "py-amqp",
    "content": "TITLE: Creating AMQP Consumer with Acknowledgments in Python\nDESCRIPTION: This example shows how to create a message consumer that acknowledges received messages explicitly. It sets up a callback function to process messages and uses drain_events() in a loop to continuously receive messages.\nSOURCE: https://github.com/celery/py-amqp/blob/main/README.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport amqp\n\nwith amqp.Connection('broker.example.com') as c:\n    ch = c.channel()\n    def on_message(message):\n        print('Received message (delivery tag: {}): {}'.format(message.delivery_tag, message.body))\n        ch.basic_ack(message.delivery_tag)\n    ch.basic_consume(queue='test', callback=on_message)\n    while True:\n        c.drain_events()\n```\n\n----------------------------------------\n\nTITLE: Creating AMQP Producer with Custom Exchange and Publisher Confirms\nDESCRIPTION: This snippet shows how to create a producer that publishes to a specific exchange with publisher confirms enabled and a custom virtual host. It uses connection parameters to configure the AMQP connection with specific options.\nSOURCE: https://github.com/celery/py-amqp/blob/main/README.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport amqp\n\nwith amqp.Connection(\n    'broker.example.com', exchange='test_exchange',\n    confirm_publish=True, virtual_host='test_vhost'\n) as c:\n    ch = c.channel()\n    ch.basic_publish(amqp.Message('Hello World'), routing_key='test')\n```\n\n----------------------------------------\n\nTITLE: Initializing Simple Producer with AMQP Connection in Python\nDESCRIPTION: This example demonstrates creating a simple message producer that connects to a broker and publishes a message to the 'test' queue using the default exchange. It uses a context manager to ensure proper connection handling.\nSOURCE: https://github.com/celery/py-amqp/blob/main/README.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport amqp\n\nwith amqp.Connection('broker.example.com') as c:\n    ch = c.channel()\n    ch.basic_publish(amqp.Message('Hello World'), routing_key='test')\n```\n\n----------------------------------------\n\nTITLE: Creating AMQP Consumer with Automatic Acknowledgments in Python\nDESCRIPTION: This example demonstrates how to create a message consumer with automatic acknowledgments (no_ack=True). Messages are automatically acknowledged upon receipt, eliminating the need for explicit acknowledgment in the callback function.\nSOURCE: https://github.com/celery/py-amqp/blob/main/README.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport amqp\n\nwith amqp.Connection('broker.example.com') as c:\n    ch = c.channel()\n    def on_message(message):\n        print('Received message (delivery tag: {}): {}'.format(message.delivery_tag, message.body))\n    ch.basic_consume(queue='test', callback=on_message, no_ack=True)\n    while True:\n        c.drain_events()\n```\n\n----------------------------------------\n\nTITLE: Documenting AMQP Transport Classes in RST\nDESCRIPTION: ReStructuredText documentation defining the structure and contents of the amqp.transport module, including autoclass directives for _AbstractTransport, SSLTransport, TCPTransport, and Transport classes.\nSOURCE: https://github.com/celery/py-amqp/blob/main/docs/reference/amqp.transport.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n=====================================================\n ``amqp.transport``\n=====================================================\n\n.. contents::\n    :local:\n.. currentmodule:: amqp.transport\n\n.. automodule:: amqp.transport\n\n.. autoclass:: _AbstractTransport\n    :members:\n    :undoc-members:\n\n.. autoclass:: SSLTransport\n    :members:\n    :private-members: _wrap_context, _wrap_socket_sni\n    :undoc-members:\n\n.. autoclass:: TCPTransport\n    :members:\n    :undoc-members:\n\n.. autoclass:: Transport\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Importing AMQP Channel Module in Python\nDESCRIPTION: This snippet demonstrates how to import the amqp.channel module in Python. It uses the currentmodule directive to set the context for subsequent autodoc directives.\nSOURCE: https://github.com/celery/py-amqp/blob/main/docs/reference/amqp.channel.rst#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. currentmodule:: amqp.channel\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Module Documentation\nDESCRIPTION: ReStructuredText documentation structure for the amqp.connection module, including table of contents and automodule directives.\nSOURCE: https://github.com/celery/py-amqp/blob/main/docs/reference/amqp.connection.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n=====================================================\n ``amqp.connection``\n=====================================================\n\n.. contents::\n    :local:\n.. currentmodule:: amqp.connection\n\n.. automodule:: amqp.connection\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Block for AMQP Exceptions\nDESCRIPTION: Sphinx documentation configuration block that sets up auto-documentation for the amqp.exceptions module. It includes local table of contents, sets the current module, and configures autodoc to include all members and undocumented members.\nSOURCE: https://github.com/celery/py-amqp/blob/main/docs/reference/amqp.exceptions.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. contents::\n    :local:\n.. currentmodule:: amqp.exceptions\n\n.. automodule:: amqp.exceptions\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Specifying vine Package Version Requirement for py-amqp\nDESCRIPTION: This snippet defines the version requirement for the 'vine' package. It specifies that the project requires vine version 5.0.0 or higher, but less than version 6.0.0.\nSOURCE: https://github.com/celery/py-amqp/blob/main/requirements/default.txt#2025-04-23_snippet_0\n\nLANGUAGE: Plain Text\nCODE:\n```\nvine>=5.0.0,<6.0.0\n```\n\n----------------------------------------\n\nTITLE: Generating AMQP Channel Module Documentation in Python\nDESCRIPTION: This snippet uses the automodule directive to automatically generate documentation for the amqp.channel module. It includes all members and undocumented members of the module.\nSOURCE: https://github.com/celery/py-amqp/blob/main/docs/reference/amqp.channel.rst#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: amqp.channel\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Documenting AMQP Utility Functions in Python\nDESCRIPTION: This snippet demonstrates the use of Sphinx documentation directives to automatically generate documentation for the amqp.utils module. It includes all members and undocumented members of the module.\nSOURCE: https://github.com/celery/py-amqp/blob/main/docs/reference/amqp.utils.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: amqp.utils\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Sphinx Documentation Configuration for amqp.abstract_channel\nDESCRIPTION: This snippet shows the Sphinx documentation structure for the amqp.abstract_channel module. It includes directives for generating a table of contents, setting the current module context, and automatically documenting all module members.\nSOURCE: https://github.com/celery/py-amqp/blob/main/docs/reference/amqp.abstract_channel.rst#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n=====================================================\n ``amqp.abstract_channel``\n=====================================================\n\n.. contents::\n    :local:\n.. currentmodule:: amqp.abstract_channel\n\n.. automodule:: amqp.abstract_channel\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Module Documentation Structure using reStructuredText\nDESCRIPTION: Defines the structure for the amqp.protocol module documentation using reStructuredText format. It includes a table of contents, sets the current module context, and configures the autodoc extension to include all members and undocumented members.\nSOURCE: https://github.com/celery/py-amqp/blob/main/docs/reference/amqp.protocol.rst#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n=====================================================\n ``amqp.protocol``\n=====================================================\n\n.. contents::\n    :local:\n.. currentmodule:: amqp.protocol\n\n.. automodule:: amqp.protocol\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation for AMQP SASL Module\nDESCRIPTION: This RST markup configures Sphinx to generate documentation for the AMQP SASL authentication module. It sets up the table of contents, specifies the current module, and configures the automodule directive to include all members and undocumented members.\nSOURCE: https://github.com/celery/py-amqp/blob/main/docs/reference/amqp.sasl.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. contents::\n    :local:\n.. currentmodule:: amqp.sasl\n\n.. automodule:: amqp.sasl\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Structure for AMQP Platform Module\nDESCRIPTION: ReStructuredText documentation template defining the structure and auto-documentation directives for the amqp.platform module. Includes table of contents and automodule directive for generating API documentation.\nSOURCE: https://github.com/celery/py-amqp/blob/main/docs/reference/amqp.platform.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n=====================================================\n ``amqp.platform``\n=====================================================\n\n.. contents::\n    :local:\n.. currentmodule:: amqp.platform\n\n.. automodule:: amqp.platform\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Specifying pytest Dependencies for py-amqp Celery Project\nDESCRIPTION: This snippet defines the pytest and related package dependencies with version constraints. It includes pytest core, pytest-sugar for test result formatting, and pytest-rerunfailures for re-running failed tests.\nSOURCE: https://github.com/celery/py-amqp/blob/main/requirements/test.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\npytest>=6.2.5,<=8.0.0\npytest-sugar>=0.9.1\npytest-rerunfailures>=6.0\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Dependencies for py-amqp Celery Project\nDESCRIPTION: This code snippet lists the required Python packages and their minimum versions for the py-amqp Celery project. It includes setuptools and wheel for packaging, flake8 for linting, tox for testing, sphinx2rst for documentation conversion, bumpversion for version management, and pydocstyle for docstring style checking.\nSOURCE: https://github.com/celery/py-amqp/blob/main/requirements/pkgutils.txt#2025-04-23_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\nsetuptools>=20.6.7\nwheel>=0.29.0\nflake8>=3.8.3\ntox>=2.3.1\nsphinx2rst>=1.0\nbumpversion\npydocstyle==1.1.1\n```\n\n----------------------------------------\n\nTITLE: Python Test Dependencies List\nDESCRIPTION: List of required Python packages for testing, including code coverage and parallel test execution tools. These packages are typically used in CI/CD pipelines and development environments to ensure code quality and test efficiency.\nSOURCE: https://github.com/celery/py-amqp/blob/main/requirements/test-ci.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\npytest-cov\ncodecov\npytest-xdist\n```\n\n----------------------------------------\n\nTITLE: Specifying sphinx_celery Dependency for py-amqp Project\nDESCRIPTION: This code snippet defines a dependency requirement for the sphinx_celery package with a minimum version of 2.1.3. This is typically used in a requirements file to ensure the proper documentation tools are available for building project documentation.\nSOURCE: https://github.com/celery/py-amqp/blob/main/requirements/docs.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nsphinx_celery>=2.1.3\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Documentation Index\nDESCRIPTION: ReStructuredText markup for the main documentation page of the AMQP Python client library. Includes section headers, table of contents directive, and sphinx documentation references.\nSOURCE: https://github.com/celery/py-amqp/blob/main/docs/index.rst#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n=============================================\n amqp - Python AMQP low-level client library\n=============================================\n\n.. include:: includes/introduction.txt\n\nContents\n========\n\n.. toctree::\n    :maxdepth: 2\n\n    reference/index\n    changelog\n\nIndices and tables\n==================\n\n* :ref:`genindex`\n* :ref:`modindex`\n* :ref:`search`\n```\n\n----------------------------------------\n\nTITLE: Including Changelog in reStructuredText Documentation\nDESCRIPTION: This directive includes the Changelog file from the parent directory into the current document. It's used to maintain a single source of truth for version history and changes in the py-amqp project.\nSOURCE: https://github.com/celery/py-amqp/blob/main/docs/changelog.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. include:: ../Changelog\n```"
  }
]