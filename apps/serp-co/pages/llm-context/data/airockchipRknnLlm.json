[
  {
    "owner": "airockchip",
    "repo": "rknn-llm",
    "content": "TITLE: Generate Quantization Data and Export RKLLM Model (Python)\nDESCRIPTION: This snippet demonstrates how to generate the data_quant.json file needed for quantizing the RKLLM model, and how to export the model using provided python scripts. It takes the path to the DeepSeek-R1-Distill-Qwen-1.5B model as input.\nSOURCE: https://github.com/airockchip/rknn-llm/blob/main/examples/DeepSeek-R1-Distill-Qwen-1.5B_Demo/Readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd export\npython generate_data_quant.py -m /path/to/DeepSeek-R1-Distill-Qwen-1.5B\npython export_rkllm.py\n```\n\n----------------------------------------\n\nTITLE: Enable Multi-turn Dialogue Mode - C++\nDESCRIPTION: This code snippet demonstrates how to enable multi-turn dialogue mode by setting the `keep_history` parameter to `1` and manually clearing the cache using `rkllm_clear_kv_cache`. It prevents the conversation history from being cleared after each round.\nSOURCE: https://github.com/airockchip/rknn-llm/blob/main/examples/Multimodal_Interactive_Dialogue_Demo/README.md#_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nrkllm_infer_params.keep_history = 1;\nrkllm_clear_kv_cache(llmHandle, 1);\n```\n\n----------------------------------------\n\nTITLE: Run C++ LLM Demo on Device (Linux)\nDESCRIPTION: This snippet demonstrates how to run the compiled C++ demo on the target device after pushing the compiled binaries, model, and configuration scripts. It includes setting the library path, executing the fixed-frequency script, setting the logging level, and finally executing the demo with the path to the RKLLM model, and sequence lengths as parameters. The model path, sequence length, and max sequence length are key parameters.\nSOURCE: https://github.com/airockchip/rknn-llm/blob/main/examples/DeepSeek-R1-Distill-Qwen-1.5B_Demo/Readme.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nadb shell\ncd /data/demo_Linux_aarch64\n# export lib path\nexport LD_LIBRARY_PATH=./lib\n# Execute the fixed-frequency script\nsh fix_freq_rk3588.sh\n# Set the logging level for performance analysis\nexport RKLLM_LOG_LEVEL=1\n./llm_demo /path/to/your/rkllm/model 2048 4096\n```\n\n----------------------------------------\n\nTITLE: Customizing Chat Templates - C++\nDESCRIPTION: This code snippet shows how to customize the chat template by modifying the system prompt, prefix, and postfix using the `rkllm_set_chat_template` function. This allows for controlling the format of prompts used in the dialogue.\nSOURCE: https://github.com/airockchip/rknn-llm/blob/main/examples/Multimodal_Interactive_Dialogue_Demo/README.md#_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nrkllm_set_chat_template(llmHandle, \n  \"<|im_start|>system\\nYou are a helpful assistant.<|im_end|>\\n\", \n  \"<|im_start|>user\\n\", \n  \"<|im_end|>\\n<|im_start|>assistant\\n\"\n);\n```\n\n----------------------------------------\n\nTITLE: Compile and Build C++ Demo (Linux)\nDESCRIPTION: This snippet shows how to compile the C++ demo for board-side inference.  It provides instructions for building for both Linux and Android, and pushing the necessary files to the device. It highlights the steps needed to build the demo using `build-linux.sh` or `build-android.sh` and then transferring the output to the target device via adb.\nSOURCE: https://github.com/airockchip/rknn-llm/blob/main/examples/DeepSeek-R1-Distill-Qwen-1.5B_Demo/Readme.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd deploy\n# for linux\n./build-linux.sh\n# for android\n./build-android.sh\n# push install dir to device\nadb push install/demo_Linux_aarch64 /data\n# push model file to device\nadb push DeepSeek-R1-Distill-Qwen-1.5B.rkllm /data/demo_Linux_aarch64\n# push the appropriate fixed-frequency script to the device\nadb push ../../../scripts/fix_freq_rk3588.sh /data/demo_Linux_aarch64\n```\n\n----------------------------------------\n\nTITLE: Run Demo on Target Board - Bash\nDESCRIPTION: These bash commands are executed on the target board to set up the environment and run the demo.  It sets the library path, adjusts CPU and NPU frequencies using a provided script, and executes the demo with specified model and image paths, along with buffer sizes.\nSOURCE: https://github.com/airockchip/rknn-llm/blob/main/examples/Multimodal_Interactive_Dialogue_Demo/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Export library path\nexport LD_LIBRARY_PATH=./lib\n\n# Set CPU and NPU frequency\nsh fix_freq_rk3588.sh\n\n# Run the demo\n./demo demo.jpg ./Qwen2-VL-2B_vision_rk3588.rknn ./Qwen2-VL-2B_llm_w8a8_rk3588.rkllm 2048 4096\n```\n\n----------------------------------------\n\nTITLE: Adding Executable and Linking Libraries\nDESCRIPTION: This snippet adds the executable, includes directories, and links the necessary libraries. It first defines the source files, adds the executable target, includes the rkllm API path, and then conditionally links against librkllmrt.so, log, and OpenMP based on the operating system.\nSOURCE: https://github.com/airockchip/rknn-llm/blob/main/examples/DeepSeek-R1-Distill-Qwen-1.5B_Demo/deploy/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCE_FILES_1 src/llm_demo.cpp)\nadd_executable(llm_demo ${SOURCE_FILES_1})\n\nset(RKLLM_API_PATH \"${CMAKE_SOURCE_DIR}/../../../rkllm-runtime/${CMAKE_SYSTEM_NAME}/librkllm_api\")\ninclude_directories(${RKLLM_API_PATH}/include)\nif(CMAKE_SYSTEM_NAME STREQUAL \"Android\")\n    set(RKLLM_RT_LIB ${RKLLM_API_PATH}/${CMAKE_ANDROID_ARCH_ABI}/librkllmrt.so)\n    find_package(OpenMP REQUIRED)\n    target_link_libraries(llm_demo  ${RKLLM_RT_LIB} log OpenMP::OpenMP_CXX)\nelseif(CMAKE_SYSTEM_NAME STREQUAL \"Linux\")\n    set(RKLLM_RT_LIB ${RKLLM_API_PATH}/aarch64/librkllmrt.so)\n    target_link_libraries(llm_demo  ${RKLLM_RT_LIB})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting paths for rkllm runtime\nDESCRIPTION: This snippet sets the paths for the rkllm runtime library and include files. It defines the `RKLLM_PATH`, `LIBRKLLMRT`, and `LIBRKLLMRT_INCLUDES` variables.\nSOURCE: https://github.com/airockchip/rknn-llm/blob/main/examples/Multimodal_Interactive_Dialogue_Demo/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nset(RKLLM_PATH ${CMAKE_CURRENT_SOURCE_DIR}/../../rkllm-runtime)\nset(LIBRKLLMRT ${RKLLM_PATH}/${CMAKE_SYSTEM_NAME}/librkllm_api/${TARGET_LIB_ARCH}/librkllmrt.so)\nset(LIBRKLLMRT_INCLUDES ${RKLLM_PATH}/${CMAKE_SYSTEM_NAME}/librkllm_api/include)\n```\n\n----------------------------------------\n\nTITLE: Adding executable and linking libraries\nDESCRIPTION: This snippet includes the necessary directories, adds the executable, and links the required libraries. It includes the rknnrt and rkllmrt include directories, creates an executable named `${PROJECT_NAME}`, and links it with OpenCV, librknnrt, and librkllmrt.\nSOURCE: https://github.com/airockchip/rknn-llm/blob/main/examples/Multimodal_Interactive_Dialogue_Demo/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\ninclude_directories(${LIBRKNNRT_INCLUDES} ${LIBRKLLMRT_INCLUDES})\nadd_executable(${PROJECT_NAME} src/image_enc.cc src/main.cpp)\ntarget_link_libraries(${PROJECT_NAME} PRIVATE ${OpenCV_LIBS} ${LIBRKNNRT} ${LIBRKLLMRT})\n```\n\n----------------------------------------\n\nTITLE: Building RKLLM-Server-Gradio Demo (Bash)\nDESCRIPTION: This script builds the RKLLM-Server-Gradio demo. It uses parameters such as workshop path, model path, and the target platform to build the Gradio-based server for interacting with the RKLLM model.\nSOURCE: https://github.com/airockchip/rknn-llm/blob/main/examples/rkllm_server_demo/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Usage: ./build_rkllm_server_gradio.sh --workshop [RKLLM-Server Working Path] --model_path [Absolute Path of Converted RKLLM Model on Board] --platform [Target Platform: rk3588/rk3576] [--lora_model_path [Lora Model Path]] [--prompt_cache_path [Prompt Cache File Path]]\n./build_rkllm_server_gradio.sh --workshop /user/data --model_path /user/data/model.rkllm --platform rk3588\n```\n\n----------------------------------------\n\nTITLE: Building RKLLM-Server-Flask Demo (Bash)\nDESCRIPTION: This script builds the RKLLM-Server-Flask demo. It takes parameters such as the working path, model path, and target platform. The script compiles the necessary components and prepares the Flask server for deployment.\nSOURCE: https://github.com/airockchip/rknn-llm/blob/main/examples/rkllm_server_demo/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Usage: ./build_rkllm_server_flask.sh --workshop [RKLLM-Server Working Path] --model_path [Absolute Path of Converted RKLLM Model on Board] --platform [Target Platform: rk3588/rk3576] [--lora_model_path [Lora Model Path]] [--prompt_cache_path [Prompt Cache File Path]]\n./build_rkllm_server_flask.sh --workshop /user/data --model_path /user/data/model.rkllm --platform rk3588\n```\n\n----------------------------------------\n\nTITLE: Compile C++ Demo - Bash\nDESCRIPTION: These bash commands are used to compile the C++ demo for either Linux or Android. It also includes steps to push the compiled demo, model files, a demo image, and a frequency-setting script to the device using ADB.\nSOURCE: https://github.com/airockchip/rknn-llm/blob/main/examples/Multimodal_Interactive_Dialogue_Demo/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Compile for Linux\n./build-linux.sh\n\n# Compile for Android\n./build-android.sh\n\n# Push the compiled demo to the device\nadb push ./install/demo_Linux_aarch64 /data\n\n# Push model files to the device\nadb push Qwen2-VL-2B_llm_w8a8_rk3588.rkllm /data/demo_Linux_aarch64\nadb push Qwen2-VL-2B_vision_rk3588.rknn /data/demo_Linux_aarch64\n\n# Push a demo image to the device\nadb push ./demo.jpg /data/demo_Linux_aarch64\n\n# Push the frequency-setting script to the device\nadb push rknn-llm/scripts/fix_freq_rk3588.sh /data\n```\n\n----------------------------------------\n\nTITLE: CMake Project Setup\nDESCRIPTION: This snippet sets up the basic CMake project configuration, including the minimum required CMake version, project name, and C++ standard to be used. It's essential for defining the foundation of the build process.\nSOURCE: https://github.com/airockchip/rknn-llm/blob/main/examples/DeepSeek-R1-Distill-Qwen-1.5B_Demo/deploy/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\nproject(rkllm_demo)\n\nset(CMAKE_CXX_STANDARD 11)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\n```\n\n----------------------------------------\n\nTITLE: Setting compiler flags\nDESCRIPTION: This snippet sets the compiler flags for C and C++. The `-Wl,--allow-shlib-undefined` flag allows undefined symbols in shared libraries, preventing linking errors. The C++ standard is set to c++11.\nSOURCE: https://github.com/airockchip/rknn-llm/blob/main/examples/Multimodal_Interactive_Dialogue_Demo/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -Wl,--allow-shlib-undefined\")\nset(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -std=c++11 -Wl,--allow-shlib-undefined\")\n```\n\n----------------------------------------\n\nTITLE: Finding OpenCV package\nDESCRIPTION: This snippet finds the OpenCV package, specifying its location based on the operating system. It sets the `OpenCV_DIR` variable to the appropriate path for Linux or Android, then uses `find_package` to locate the OpenCV library.\nSOURCE: https://github.com/airockchip/rknn-llm/blob/main/examples/Multimodal_Interactive_Dialogue_Demo/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif (CMAKE_SYSTEM_NAME MATCHES \"Linux\")\n  set(OpenCV_DIR ${CMAKE_CURRENT_SOURCE_DIR}/../Qwen2-VL-2B_Demo/deploy/3rdparty/opencv-linux-aarch64/share/OpenCV)\nelif(CMAKE_SYSTEM_NAME MATCHES \"Android\")\n  set(OpenCV_DIR ${CMAKE_CURRENT_SOURCE_DIR}/../Qwen2-VL-2B_Demo/deploy/3rdparty/opencv-mobile-3.4.20-android/sdk/native/jni/abi-${CMAKE_ANDROID_ARCH_ABI})\nendif()\nfind_package(OpenCV REQUIRED)\n```\n\n----------------------------------------\n\nTITLE: Setting target properties to hide symbols\nDESCRIPTION: This snippet sets target properties to hide symbols, preventing potential conflicts with RKLLM.  It uses the `-Wl,--no-undefined` flag to error if there are undefined symbols and `--version-script` to control symbol visibility.\nSOURCE: https://github.com/airockchip/rknn-llm/blob/main/examples/Multimodal_Interactive_Dialogue_Demo/CMakeLists.txt#_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nset_target_properties(${PROJECT_NAME} PROPERTIES LINK_FLAGS  -Wl,--no-undefined,--version-script,${CMAKE_SOURCE_DIR}/c_export.map)\n```\n\n----------------------------------------\n\nTITLE: Setting minimum CMake version and project name\nDESCRIPTION: This snippet sets the minimum required CMake version and defines the project name. The minimum version ensures that the CMake features used are supported. The project command sets the name of the project.\nSOURCE: https://github.com/airockchip/rknn-llm/blob/main/examples/Multimodal_Interactive_Dialogue_Demo/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.15.1)\n\nproject(demo)\n```\n\n----------------------------------------\n\nTITLE: Architecture Detection for Android and Linux\nDESCRIPTION: This snippet detects the target architecture based on the operating system. For Android, it uses the CMAKE_ANDROID_ARCH_ABI variable. For Linux, it checks the size of a void pointer to determine whether it's aarch64 or armhf, and it adjusts the architecture string if uclibc is being used.\nSOURCE: https://github.com/airockchip/rknn-llm/blob/main/examples/DeepSeek-R1-Distill-Qwen-1.5B_Demo/deploy/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif (CMAKE_SYSTEM_NAME STREQUAL \"Android\")\n    set (TARGET_LIB_ARCH ${CMAKE_ANDROID_ARCH_ABI})\nelse()\n    if(CMAKE_SIZEOF_VOID_P EQUAL 8)\n        set (TARGET_LIB_ARCH aarch64)\n    else()\n        set (TARGET_LIB_ARCH armhf)\n    endif()\n    if (CMAKE_C_COMPILER MATCHES \"uclibc\")\n        set (TARGET_LIB_ARCH ${TARGET_LIB_ARCH}_uclibc)\n    endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting paths for rknn runtime\nDESCRIPTION: This snippet sets the paths for the rknn runtime library and include files.  It defines the `RKNN_PATH`, `LIBRKNNRT`, and `LIBRKNNRT_INCLUDES` variables.\nSOURCE: https://github.com/airockchip/rknn-llm/blob/main/examples/Multimodal_Interactive_Dialogue_Demo/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nset(RKNN_PATH ${CMAKE_CURRENT_SOURCE_DIR}/../Qwen2-VL-2B_Demo/deploy/3rdparty/librknnrt)\nset(LIBRKNNRT ${RKNN_PATH}/${CMAKE_SYSTEM_NAME}/librknn_api/${TARGET_LIB_ARCH}/librknnrt.so)\nset(LIBRKNNRT_INCLUDES ${RKNN_PATH}/${CMAKE_SYSTEM_NAME}/librknn_api/include)\n```\n\n----------------------------------------\n\nTITLE: Installing targets and programs\nDESCRIPTION: This snippet installs the executable, libraries, and demo image to the specified directory. It sets the installation prefix and then uses the `install` command to copy the files to the appropriate locations.\nSOURCE: https://github.com/airockchip/rknn-llm/blob/main/examples/Multimodal_Interactive_Dialogue_Demo/CMakeLists.txt#_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nset(CMAKE_INSTALL_PREFIX ${CMAKE_SOURCE_DIR}/install/demo_${CMAKE_SYSTEM_NAME}_${TARGET_LIB_ARCH})\ninstall(TARGETS ${PROJECT_NAME} DESTINATION ./)\ninstall(PROGRAMS ${LIBRKNNRT} ${LIBRKLLMRT} DESTINATION lib)\ninstall(PROGRAMS demo.jpg DESTINATION ./)\n```\n\n----------------------------------------\n\nTITLE: Installation Configuration\nDESCRIPTION: This snippet configures the installation process, defining the installation prefix and the files to be installed. It sets the installation prefix to a directory under the source directory and installs the executable and the runtime library to their respective destinations.\nSOURCE: https://github.com/airockchip/rknn-llm/blob/main/examples/DeepSeek-R1-Distill-Qwen-1.5B_Demo/deploy/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# Install the executable file to the specified directory\nset(CMAKE_INSTALL_PREFIX ${CMAKE_SOURCE_DIR}/install/demo_${CMAKE_SYSTEM_NAME}_${TARGET_LIB_ARCH})\ninstall(TARGETS llm_demo DESTINATION ./)\ninstall(PROGRAMS ${RKLLM_RT_LIB} DESTINATION lib)\n```\n\n----------------------------------------\n\nTITLE: Setting target library architecture\nDESCRIPTION: This snippet determines the target library architecture based on the operating system and processor architecture. For Android, it uses the `CMAKE_ANDROID_ARCH_ABI` variable. For other systems, it checks the size of a void pointer and uses `aarch64` or `armhf` accordingly. It also handles the `uclibc` C compiler.\nSOURCE: https://github.com/airockchip/rknn-llm/blob/main/examples/Multimodal_Interactive_Dialogue_Demo/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif (CMAKE_SYSTEM_NAME STREQUAL \"Android\")\n    set (TARGET_LIB_ARCH ${CMAKE_ANDROID_ARCH_ABI})\nelse()\n    if(CMAKE_SIZEOF_VOID_P EQUAL 8)\n        set (TARGET_LIB_ARCH aarch64)\n    else()\n        set (TARGET_LIB_ARCH armhf)\n    endif()\n    if (CMAKE_C_COMPILER MATCHES \"uclibc\")\n        set (TARGET_LIB_ARCH ${TARGET_LIB_ARCH}_uclibc)\n    endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding link options for Linux\nDESCRIPTION: This snippet adds link options specifically for Linux. `-Wl,-Bsymbolic` binds references to global symbols to their definitions within a shared library.\nSOURCE: https://github.com/airockchip/rknn-llm/blob/main/examples/Multimodal_Interactive_Dialogue_Demo/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif(${CMAKE_VERSION} VERSION_GREATER \"3.15.0\" AND CMAKE_SYSTEM_NAME STREQUAL \"Linux\")\n  add_link_options(\"-Wl,-Bsymbolic\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Install RKLLM Toolkit and Runtime\nDESCRIPTION: This snippet shows the required versions of rkllm-toolkit and rkllm-runtime for this demo, along with the minimum required Python version.  These are necessary dependencies for model conversion and inference.\nSOURCE: https://github.com/airockchip/rknn-llm/blob/main/examples/DeepSeek-R1-Distill-Qwen-1.5B_Demo/Readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrkllm-toolkit==1.2.0\nrkllm-runtime==1.2.0\npython >=3.8\n```\n\n----------------------------------------\n\nTITLE: Disable CUDA Extension Build (Python 3.12)\nDESCRIPTION: This command is needed to prevent build errors when installing the package in a Python 3.12 environment. It disables the building of CUDA extensions.\nSOURCE: https://github.com/airockchip/rknn-llm/blob/main/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nexport BUILD_CUDA_EXT=0\n```\n\n----------------------------------------\n\nTITLE: Checking for Colorspace Extensions in libjpeg-turbo (C)\nDESCRIPTION: This code snippet demonstrates how to check for the existence of libjpeg-turbo's colorspace extensions at compile time using the `#ifdef` preprocessor directive. It checks if the `JCS_EXTENSIONS` macro is defined, indicating the presence of colorspace extensions.\nSOURCE: https://github.com/airockchip/rknn-llm/blob/main/examples/Qwen2-VL-2B_Demo/deploy/3rdparty/opencv-linux-aarch64/share/OpenCV/licenses/libjpeg-turbo-README.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#ifdef JCS_EXTENSIONS\n\n```\n\n----------------------------------------\n\nTITLE: Checking for Alpha Channel Colorspace Extensions (C)\nDESCRIPTION: This code snippet shows how to check for the existence of alpha channel colorspace extensions at compile time. It uses the `#ifdef` preprocessor directive to determine if the `JCS_ALPHA_EXTENSIONS` macro is defined, which indicates that alpha channel colorspace extensions are available.\nSOURCE: https://github.com/airockchip/rknn-llm/blob/main/examples/Qwen2-VL-2B_Demo/deploy/3rdparty/opencv-linux-aarch64/share/OpenCV/licenses/libjpeg-turbo-README.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n#ifdef JCS_ALPHA_EXTENSIONS\n\n```\n\n----------------------------------------\n\nTITLE: Configuring libjpeg-turbo without in-memory source/destination managers\nDESCRIPTION: This snippet illustrates how to configure libjpeg-turbo to exclude the in-memory source/destination managers (jpeg_mem_src() and jpeg_mem_dest()). This configuration restores the pre-1.3 behavior where these functions are only included when emulating the libjpeg v8 API/ABI. It involves passing specific arguments to the configure or cmake build systems.\nSOURCE: https://github.com/airockchip/rknn-llm/blob/main/examples/Qwen2-VL-2B_Demo/deploy/3rdparty/opencv-linux-aarch64/share/OpenCV/licenses/libjpeg-turbo-README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n`configure` example: `--without-mem-srcdst`\n`cmake` example: `-DWITH_MEM_SRCDST=0`\n```"
  }
]