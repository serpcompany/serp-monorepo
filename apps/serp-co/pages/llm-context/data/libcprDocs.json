[
  {
    "owner": "libcpr",
    "repo": "docs",
    "content": "TITLE: Making a Basic GET Request with cpr in C++\nDESCRIPTION: This snippet demonstrates how to perform a simple GET request using the cpr library. It includes setting a URL, basic authentication, and URL parameters, then shows how to access the response properties.\nSOURCE: https://github.com/libcpr/docs/blob/main/index.md#2025-04-21_snippet_0\n\nLANGUAGE: c++\nCODE:\n```\n#include <cpr/cpr.h>\n\nint main(int argc, char** argv) {\n    cpr::Response r = cpr::Get(cpr::Url{\"https://api.github.com/repos/libcpr/cpr/contributors\"},\n                      cpr::Authentication{\"user\", \"pass\", cpr::AuthMode::BASIC},\n                      cpr::Parameters{{\"anon\", \"true\"}, {\"key\", \"value\"}});\n    r.status_code;                  // 200\n    r.header[\"content-type\"];       // application/json; charset=utf-8\n    r.text;                         // JSON text string\n}\n```\n\n----------------------------------------\n\nTITLE: Using Session Objects in C++ Requests\nDESCRIPTION: Demonstrates how to create and use a Session object to make stateful HTTP requests. It shows setting URL and parameters, making GET requests, and updating session parameters.\nSOURCE: https://github.com/libcpr/docs/blob/main/advanced-usage.md#2025-04-21_snippet_5\n\nLANGUAGE: c++\nCODE:\n```\ncpr::Url url = cpr::Url{\"http://www.httpbin.org/get\"};\ncpr::Parameters parameters = cpr::Parameters{{\"hello\", \"world\"}};\ncpr::Session session;\nsession.SetUrl(url);\nsession.SetParameters(parameters);\n\ncpr::Response r = session.Get();        // Equivalent to cpr::Get(url, parameters);\nstd::cout << r.url << std::endl;        // Prints http://www.httpbin.org/get?hello=world\n\ncpr::Parameters new_parameters = cpr::Parameters{{\"key\", \"value\"}};\nsession.SetParameters(new_parameters);\n\ncpr::Response new_r = session.Get();    // Equivalent to cpr::Get(url, new_parameters);\nstd::cout << new_r.url << std::endl;    // Prints http://www.httpbin.org/get?key=value\n```\n\n----------------------------------------\n\nTITLE: POST Request with Raw Data\nDESCRIPTION: Demonstrates making POST requests with raw data using the Body option and custom Content-Type header.\nSOURCE: https://github.com/libcpr/docs/blob/main/introduction.md#2025-04-21_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\ncpr::Response r = cpr::Post(cpr::Url{\"http://www.httpbin.org/post\"},\n                   cpr::Body{\"This is raw POST data\"},\n                   cpr::Header{{\"Content-Type\", \"text/plain\"}});\n```\n\n----------------------------------------\n\nTITLE: Basic Asynchronous HTTP Request\nDESCRIPTION: Shows how to make a basic asynchronous GET request using CPR's async interface. Returns an AsyncResponse that can be retrieved later.\nSOURCE: https://github.com/libcpr/docs/blob/main/advanced-usage.md#2025-04-21_snippet_14\n\nLANGUAGE: c++\nCODE:\n```\nAsyncResponse fr = cpr::GetAsync(cpr::Url{\"http://www.httpbin.org/get\"});\n// Sometime later...\ncpr::Response r = fr.get(); // This blocks until the request is complete\nstd::cout << r.text << std::endl;\n```\n\n----------------------------------------\n\nTITLE: Basic GET Request with Parameters in CPR\nDESCRIPTION: Demonstrates making a basic GET request with URL parameters using the CPR library. Shows how parameter order is arbitrary and both approaches produce identical results.\nSOURCE: https://github.com/libcpr/docs/blob/main/introduction.md#2025-04-21_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ncpr::Response r = cpr::Get(cpr::Url{\"http://www.httpbin.org/get\"},\n                  cpr::Parameters{{\"hello\", \"world\"}}); // Url object before Parameters\n```\n\n----------------------------------------\n\nTITLE: SSL/TLS Configuration Examples in C++\nDESCRIPTION: Examples of configuring SSL/TLS options in CPR including version selection, ALPN/NPN settings, and certificate verification.\nSOURCE: https://github.com/libcpr/docs/blob/main/advanced-usage.md#2025-04-21_snippet_41\n\nLANGUAGE: c++\nCODE:\n```\ncpr::SslOptions sslOpts = cpr::Ssl(ssl:TLSv1_2{});\ncpr::Response r = cpr::Get(cpr::Url{\"https://www.httpbin.org/get\"}, sslOpts);\n\ncpr::SslOptions sslOpts = cpr::Ssl(ssl::ALPN{false}, ssl::NPN{false});\ncpr::Response r = cpr::Get(cpr::Url{\"https://www.httpbin.org/get\"}, sslOpts);\n\ncpr::SslOptions sslOpts = cpr::Ssl(ssl::PinnedPublicKey{\"pubkey.pem\"});\ncpr::Response r = cpr::Get(cpr::Url{\"https://www.httpbin.org/get\"}, sslOpts);\n\ncpr::SslOptions sslOpts = cpr::Ssl(ssl::CertFile{\"cert.pem\"}, ssl::KeyFile{\"key.pem\"});\ncpr::Response r = cpr::Get(cpr::Url{\"https://www.httpbin.org/get\"}, sslOpts);\n\ncpr::SslOptions sslOpts = cpr::Ssl(ssl::CertFile{\"cert.pem\"}, ssl::KeyBlob{\"-----BEGIN RSA PRIVATE KEY-----[...]\"});\ncpr::Response r = cpr::Get(cpr::Url{\"https://www.httpbin.org/get\"}, sslOpts);\n```\n\n----------------------------------------\n\nTITLE: Basic GET Request Implementation\nDESCRIPTION: Shows how to make a simple GET request and access response properties including status code, headers, and response text.\nSOURCE: https://github.com/libcpr/docs/blob/main/introduction.md#2025-04-21_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#include <cpr/cpr.h> // Make sure this header is available in your include path\n\n// Somewhere else\ncpr::Response r = cpr::Get(cpr::Url{\"http://www.httpbin.org/get\"});\n```\n\n----------------------------------------\n\nTITLE: Multiple Async Requests with Vector Container\nDESCRIPTION: Demonstrates how to manage multiple async requests using a vector container and process them later in a loop.\nSOURCE: https://github.com/libcpr/docs/blob/main/advanced-usage.md#2025-04-21_snippet_16\n\nLANGUAGE: c++\nCODE:\n```\nstd::vector<cpr::AsyncResponse> container{};\ncpr::Url url = cpr::Url{\"http://www.httpbin.org/get\"};\nfor (int i = 0; i < 10; ++i) {\n    container.emplace_back(cpr::GetAsync(url, cpr::Parameters{{\"i\", std::to_string(i)}}));\n}\n// Sometime later\nfor (cpr::AsyncResponse& ar: container) {\n    cpr::Response r = ar.get();\n    std::cout << r.text << std::endl;\n}\n```\n\n----------------------------------------\n\nTITLE: POST Request with Form Data\nDESCRIPTION: Shows how to make POST requests with form-encoded data using the Payload option.\nSOURCE: https://github.com/libcpr/docs/blob/main/introduction.md#2025-04-21_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\ncpr::Response r = cpr::Post(cpr::Url{\"http://www.httpbin.org/post\"},\n                   cpr::Payload{{\"key\", \"value\"}});\n```\n\n----------------------------------------\n\nTITLE: Using C++ Requests Session with curl's Advanced API\nDESCRIPTION: Demonstrates how to use a Session object with curl's advanced API for more control over the HTTP request process.\nSOURCE: https://github.com/libcpr/docs/blob/main/advanced-usage.md#2025-04-21_snippet_9\n\nLANGUAGE: c++\nCODE:\n```\ncpr::Url url = cpr::Url{\"http://www.httpbin.org/get\"};\ncpr::Session session;\nsession.SetOption(url);\nsession.PrepareGet();\n\n// Here, curl_easy_perform would typically be replaced\n// by a more complex scheme using curl_multi API\nCURLcode curl_result = curl_easy_perform(session.GetCurlHolder()->handle);\n\ncpr::Response response = session.Complete(curl_result);\n```\n\n----------------------------------------\n\nTITLE: Session-Based Async Request\nDESCRIPTION: Demonstrates how to perform async requests using a CPR Session object with proper shared pointer management.\nSOURCE: https://github.com/libcpr/docs/blob/main/advanced-usage.md#2025-04-21_snippet_18\n\nLANGUAGE: c++\nCODE:\n```\nstd::shared_ptr<cpr::Session> session = std::make_shared<cpr::Session>();\ncpr::Url url = cpr::Url{\"http://www.httpbin.org/get\"};\nsession->SetUrl(url);\ncpr::AsyncResponse fr = session->GetAsync();\ncpr::Response r = fr.get();\nstd::cout << r.text << std::endl;\n```\n\n----------------------------------------\n\nTITLE: Handling CPR Response Objects\nDESCRIPTION: Example showing how to handle CPR Response objects, including error checking and response data access.\nSOURCE: https://github.com/libcpr/docs/blob/main/advanced-usage.md#2025-04-21_snippet_2\n\nLANGUAGE: c++\nCODE:\n```\ncpr::Response r = cpr::Get(cpr::Url{\"http://www.httpbin.org/get\"});\nif(r.status_code == 0)\n    std::cerr << r.error.message << std::endl;\nelse if (r.status_code >= 400) {\n    std::cerr << \"Error [\" << r.status_code << \"] making request\" << std::endl;\n} else {\n    std::cout << \"Request took \" << r.elapsed << std::endl;\n    std::cout << \"Body:\" << std::endl << r.text;\n}\n```\n\n----------------------------------------\n\nTITLE: Sending PUT Requests with Form Data in CPR\nDESCRIPTION: Example of sending PUT requests with form data using CPR. This demonstrates the different HTTP method semantics and how to use the PUT method for updating resources.\nSOURCE: https://github.com/libcpr/docs/blob/main/advanced-usage.md#2025-04-21_snippet_36\n\nLANGUAGE: c++\nCODE:\n```\n#include <assert.h>\n\n// We can't POST to the \"/put\" endpoint so the status code is rightly 405\nassert(cpr::Post(cpr::Url{\"http://www.httpbin.org/put\"},\n                 cpr::Payload{{\"key\", \"value\"}}).status_code == 405);\n\n// On the other hand, this works just fine\ncpr::Response r = cpr::Put(cpr::Url{\"http://www.httpbin.org/put\"},\n                  cpr::Payload{{\"key\", \"value\"}});\nstd::cout << r.text << std::endl;\n\n/*\n * {\n *   \"args\": {},\n *   \"data\": \"\",\n *   \"files\": {},\n *   \"form\": {\n *     \"key\": \"value\"\n *   },\n *   \"headers\": {\n *     ..\n *     \"Content-Type\": \"application/x-www-form-urlencoded\",\n *     ..\n *   },\n *   \"json\": null,\n *   \"url\": \"https://httpbin.org/put\"\n * }\n */\n```\n\n----------------------------------------\n\nTITLE: Downloading Files to Disk with CPR\nDESCRIPTION: Example of downloading a file to disk using CPR's Download function. This demonstrates how to save a file directly from an HTTP response to a local file stream.\nSOURCE: https://github.com/libcpr/docs/blob/main/advanced-usage.md#2025-04-21_snippet_38\n\nLANGUAGE: c++\nCODE:\n```\nstd::ofstream of(\"1.jpg\", std::ios::binary);\ncpr::Response r = cpr::Download(of, cpr::Url{\"http://www.httpbin.org/1.jpg\"});\nstd::cout << \"http status code = \" << r.status_code << std::endl << std::endl;\n```\n\n----------------------------------------\n\nTITLE: Sending PATCH Requests with Form Data in CPR\nDESCRIPTION: Example of sending PATCH requests with form data using CPR. This demonstrates how to use the PATCH method for partially updating resources, similar to the PUT method but with different semantics.\nSOURCE: https://github.com/libcpr/docs/blob/main/advanced-usage.md#2025-04-21_snippet_37\n\nLANGUAGE: c++\nCODE:\n```\n#include <assert.h>\n\n// We can't POST or PUT to the \"/patch\" endpoint so the status code is rightly 405\nassert(cpr::Post(cpr::Url{\"http://www.httpbin.org/patch\"},\n                 cpr::Payload{{\"key\", \"value\"}}).status_code == 405);\nassert(cpr::Put(cpr::Url{\"http://www.httpbin.org/patch\"},\n                cpr::Payload{{\"key\", \"value\"}}).status_code == 405);\n\n// On the other hand, this works just fine[libcurl](http://curl.haxx.se/libcurl/)\ncpr::Response r = cpr::Patch(cpr::Url{\"http://www.httpbin.org/patch\"},\n                    cpr::Payload{{\"key\", \"value\"}});\nstd::cout << r.text << std::endl;\n\n/*\n * {\n *   \"args\": {},\n *   \"data\": \"\",\n *   \"files\": {},\n *   \"form\": {\n *     \"key\": \"value\"\n *   },\n *   \"headers\": {\n *     ..\n *     \"Content-Type\": \"application/x-www-form-urlencoded\",\n *     ..\n *   },\n *   \"json\": null,\n *   \"url\": \"https://httpbin.org/patch\"\n * }\n */\n```\n\n----------------------------------------\n\nTITLE: GET Request with Multiple Parameters\nDESCRIPTION: Demonstrates creating GET requests with multiple URL parameters, both inline and with pre-constructed Parameter objects.\nSOURCE: https://github.com/libcpr/docs/blob/main/introduction.md#2025-04-21_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\n// Constructing it in place\ncpr::Response r = cpr::Get(cpr::Url{\"http://www.httpbin.org/get\"},\n                  cpr::Parameters{{\"hello\", \"world\"}, {\"stay\", \"cool\"}});\n\n// Constructing it outside\ncpr::Parameters parameters = cpr::Parameters{{\"hello\", \"world\"}, {\"stay\", \"cool\"}};\ncpr::Response r_outside = cpr::Get(cpr::Url{\"http://www.httpbin.org/get\"}, parameters);\n```\n\n----------------------------------------\n\nTITLE: Setting HTTP Protocol Version in LibCPR\nDESCRIPTION: Demonstrates how to specify the HTTP protocol version for requests, including support for HTTP/1.0, HTTP/1.1, HTTP/2, and HTTP/3.\nSOURCE: https://github.com/libcpr/docs/blob/main/advanced-usage.md#2025-04-21_snippet_48\n\nLANGUAGE: c++\nCODE:\n```\ncpr::Response r = cpr::Get(cpr::Url{\"http://google.de\"},\n                  cpr::HttpVersion{cpr::HttpVersionCode::VERSION_2_0});\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Request Headers in CPR\nDESCRIPTION: Examples demonstrating how to set and combine custom headers in CPR requests, including multiple header parameters from different sources.\nSOURCE: https://github.com/libcpr/docs/blob/main/advanced-usage.md#2025-04-21_snippet_3\n\nLANGUAGE: c++\nCODE:\n```\ntemplate<class ...Ts>\ncpr::Response myGet(Ts&& ...ts) {\n    return cpr::Get(std::forward<Ts>(ts)...,\n           cpr::Header{{\"Authorization\", \"token\"}});\n}\n\n...\n\ncpr::Response r = cpr::myGet(cpr::Url{\"http://www.httpbin.org/headers\"},\n                  cpr::Header{{\"accept\", \"application/json\"}});\nstd::cout << r.text << std::endl;\n```\n\n----------------------------------------\n\nTITLE: Setting Request Timeout\nDESCRIPTION: Shows how to set timeout constraints for HTTP requests using milliseconds.\nSOURCE: https://github.com/libcpr/docs/blob/main/advanced-usage.md#2025-04-21_snippet_21\n\nLANGUAGE: c++\nCODE:\n```\n#include <assert.h>\n\ncpr::Response r = cpr::Get(cpr::Url{\"http://www.httpbin.org/get\"},\n                  cpr::Timeout{1000}); // Let's hope we aren't using Time Warner Cable\nassert(r.elapsed <= 1); // Less than one second should have elapsed\n```\n\n----------------------------------------\n\nTITLE: Multipart POST Request with File Upload\nDESCRIPTION: Shows how to upload files and additional data using multipart form data, including file name customization.\nSOURCE: https://github.com/libcpr/docs/blob/main/introduction.md#2025-04-21_snippet_5\n\nLANGUAGE: C++\nCODE:\n```\ncpr::Response r = cpr::Post(cpr::Url{\"http://www.httpbin.org/post\"},\n                   cpr::Multipart{{\"key\", \"large value\"},\n                                  {\"name\", cpr::File{\"path-to-file\"}}});\n```\n\n----------------------------------------\n\nTITLE: Setting Request Timeout with Chrono Literals\nDESCRIPTION: Demonstrates setting request timeouts using chrono literals for more readable duration specification.\nSOURCE: https://github.com/libcpr/docs/blob/main/advanced-usage.md#2025-04-21_snippet_22\n\nLANGUAGE: c++\nCODE:\n```\n#include <cassert>\n#include <chrono>\n\nusing namespace std::chrono_literals;\n\ncpr::Response r = cpr::Get(cpr::Url{\"http://www.httpbin.org/get\"},\n                  cpr::Timeout{1s}); // Let's hope we aren't using Time Warner Cable\nassert(r.elapsed <= 1); // Less than one second should have elapsed\n```\n\n----------------------------------------\n\nTITLE: Buffer-based POST Request\nDESCRIPTION: Demonstrates how to make POST requests using in-memory buffers instead of files, supporting both STL containers and C-style pointers.\nSOURCE: https://github.com/libcpr/docs/blob/main/introduction.md#2025-04-21_snippet_6\n\nLANGUAGE: C++\nCODE:\n```\nstd::vector<char> content{'t', 'e', 's', 't'};\ncpr::Response r = cpr::Post(cpr::Url{\"http://www.httpbin.org/post\"},\n                   cpr::Multipart{{\"key\", \"large value\"},\n                                  {\"name\", cpr::Buffer{content.begin(), content.end(), \"filename.txt\"}}});\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Compression in C++ Requests Session\nDESCRIPTION: Demonstrates how to set HTTP compression options in a Session object for stateful connections.\nSOURCE: https://github.com/libcpr/docs/blob/main/advanced-usage.md#2025-04-21_snippet_11\n\nLANGUAGE: c++\nCODE:\n```\ncpr::Url url{server->GetBaseUrl() + \"/check_accept_encoding.html\"};\ncpr::Session session;\nsession.SetUrl(url);\n\nsession.SetAcceptEncoding({{cpr::AcceptEncodingMethods::deflate, cpr::AcceptEncodingMethods::gzip, cpr::AcceptEncodingMethods::zlib}});\n// or you could specify specific schemes with the customized string\nsession.SetAcceptEncoding({{\"deflate\", \"gzip\", \"zlib\"}});\n\nResponse response = session.Get();\n```\n\n----------------------------------------\n\nTITLE: HTTP Request Methods Implementation in C++\nDESCRIPTION: Shows various HTTP request methods (DELETE, PATCH, HEAD, OPTIONS) implementation in CPR with blocking, async, and callback modes.\nSOURCE: https://github.com/libcpr/docs/blob/main/advanced-usage.md#2025-04-21_snippet_40\n\nLANGUAGE: c++\nCODE:\n```\n// Regular, blocking modes\ncpr::Response delete_response = cpr::Delete(cpr::Url{\"http://www.httpbin.org/delete\"});\ncpr::Response patch_response = cpr::Patch(cpr::Url{\"http://www.httpbin.org/patch\"});\ncpr::Response head_response = cpr::Head(cpr::Url{\"http://www.httpbin.org/get\"});\ncpr::Response options_response = cpr::OPTIONS(cpr::Url{\"http://www.httpbin.org/get\"});\n\n// Asynchronous, future mode\nAsyncResponse async_delete_response = cpr::DeleteAsync(cpr::Url{\"http://www.httpbin.org/delete\"});\nAsyncResponse async_patch_response = cpr::PatchAsync(cpr::Url{\"http://www.httpbin.org/get\"});\nAsyncResponse async_head_response = cpr::HeadAsync(cpr::Url{\"http://www.httpbin.org/get\"});\nAsyncResponse async_options_response = cpr::OptionsAsync(cpr::Url{\"http://www.httpbin.org/get\"});\n\n// Asynchronous, callback mode\nauto cb_delete_response = cpr::DeleteCallback([](cpr::Response r) {\n        return r.text;\n    }, cpr::Url{\"http://www.httpbin.org/delete\"});\nauto cb_patch_response = cpr::PatchCallback([](cpr::Response r) {\n        return r.text;\n    }, cpr::Url{\"http://www.httpbin.org/patch\"});\nauto cb_head_response = cpr::HeadCallback([](cpr::Response r) {\n        return r.status_code;\n    }, cpr::Url{\"http://www.httpbin.org/get\"});\nauto cb_options_response = cpr::OptionsCallback([](cpr::Response r) {\n        return r.status_code;\n    }, cpr::Url{\"http://www.httpbin.org/get\"});\n```\n\n----------------------------------------\n\nTITLE: Async Callback Implementation\nDESCRIPTION: Shows how to use the callback interface for asynchronous requests with lambda functions.\nSOURCE: https://github.com/libcpr/docs/blob/main/advanced-usage.md#2025-04-21_snippet_19\n\nLANGUAGE: c++\nCODE:\n```\nauto future_text = cpr::GetCallback([](cpr::Response r) {\n        return r.text;\n    }, cpr::Url{\"http://www.httpbin.org/get\"});\n// Sometime later\nif (future_text.wait_for(std::chrono::seconds(0)) == std::future_status::ready) {\n    std::cout << future_text.get() << std::endl;\n}\n```\n\n----------------------------------------\n\nTITLE: Cancellable Multi-Async Requests\nDESCRIPTION: Shows how to use MultiAsync for parallel requests with cancellation support using a threadpool.\nSOURCE: https://github.com/libcpr/docs/blob/main/advanced-usage.md#2025-04-21_snippet_17\n\nLANGUAGE: c++\nCODE:\n```\n// The second template parameter denotes a cancellable transaction\nusing AsyncResC = cpr::AsyncWrapper<Response, true>;\n\ncpr::Url postUrl{\"http://www.httpbin.org/post\"};\nstd::vector<AsyncResC>responses{MultiPostAsync(\n    std::tuple{post_url, cpr::Payload{{\"name\", \"Alice\"}}},\n    std::tuple{post_url, cpr::Payload{{\"role\", \"admin\"}}}\n    // ...\n)};\n// If the first transaction isn't completed within 10 ms, we'd like to cancel all of them\nbool all_cancelled{false};\nif(responses.at(0).wait_for(std::chrono::milliseconds(10)) == std::future_status::timeout) {\n    all_cancelled = true;\n    for(AsyncResC& res: responses) {\n        all_cancelled &= (res.Cancel() == CancellationResult::success);\n    }\n}\n// If not cancelled, process results\n```\n\n----------------------------------------\n\nTITLE: Basic Authentication in libcpr C++\nDESCRIPTION: Demonstrates how to perform Basic Authentication using libcpr. Uses username and password combination to authenticate against an HTTP endpoint.\nSOURCE: https://github.com/libcpr/docs/blob/main/introduction.md#2025-04-21_snippet_7\n\nLANGUAGE: c++\nCODE:\n```\ncpr::Response r = cpr::Get(cpr::Url{\"http://www.httpbin.org/basic-auth/user/pass\"},\n                  cpr::Authentication{\"user\", \"pass\", cpr::AuthMode::BASIC});\nstd::cout << r.text << std::endl;\n\n/*\n * {\n *   \"authenticated\": true,\n *   \"user\": \"user\"\n * }\n */\n```\n\n----------------------------------------\n\nTITLE: Initializing CPR Data Structures\nDESCRIPTION: Examples of initializing different CPR data structures including Header, Parameters, Payload, and Multipart objects.\nSOURCE: https://github.com/libcpr/docs/blob/main/advanced-usage.md#2025-04-21_snippet_4\n\nLANGUAGE: c++\nCODE:\n```\ncpr::Header header = cpr::Header{{\"header-key\", \"header-value\"}};\ncpr::Parameters parameters = cpr::Parameters{{\"parameter-key\", \"parameter-value\"}};\ncpr::Payload payload = cpr::Payload{{\"payload-key\", \"payload-value\"}};\ncpr::Multipart multipart = cpr::Multipart{{\"multipart-key\", \"multipart-value\"}};\n```\n\n----------------------------------------\n\nTITLE: Digest Authentication in libcpr C++\nDESCRIPTION: Shows implementation of Digest Authentication using libcpr. Similar to Basic Authentication but uses the DIGEST authentication mode for enhanced security.\nSOURCE: https://github.com/libcpr/docs/blob/main/introduction.md#2025-04-21_snippet_8\n\nLANGUAGE: c++\nCODE:\n```\ncpr::Response r = cpr::Get(cpr::Url{\"http://www.httpbin.org/digest-auth/auth/user/pass\"},\n                  cpr::Authentication{\"user\", \"pass\", cpr::AuthMode::DIGEST});\nstd::cout << r.text << std::endl;\n\n/*\n * {\n *   \"authenticated\": true,\n *   \"user\": \"user\"\n * }\n */\n```\n\n----------------------------------------\n\nTITLE: Implementing WriteCallback in CPR for Streaming Downloads\nDESCRIPTION: The WriteCallback function signature used by libcurl to handle streaming data downloads. This callback is called whenever there is data received that needs to be saved, allowing for custom streaming or buffering.\nSOURCE: https://github.com/libcpr/docs/blob/main/advanced-usage.md#2025-04-21_snippet_25\n\nLANGUAGE: c++\nCODE:\n```\nbool writeCallback(const std::string_view & data, intptr_t userdata);\n```\n\n----------------------------------------\n\nTITLE: OAuth Bearer Token Authentication in libcpr C++\nDESCRIPTION: Demonstrates OAuth Bearer Token authentication using the Bearer object in libcpr. Shows how to authenticate using an access token.\nSOURCE: https://github.com/libcpr/docs/blob/main/introduction.md#2025-04-21_snippet_9\n\nLANGUAGE: c++\nCODE:\n```\ncpr::Response r = cpr::Get(cpr::Url{\"http://www.httpbin.org/bearer\"},\n                  cpr::Bearer{\"ACCESS_TOKEN\"});\nstd::cout << r.text << std::endl;\n\n/*\n * {\n *   \"authenticated\": true,\n *   \"token\": \"ACCESS_TOKEN\"\n * }\n */\n```\n\n----------------------------------------\n\nTITLE: Implementing ProgressCallback in CPR for Transfer Progress Monitoring\nDESCRIPTION: The ProgressCallback function signature provides transfer progress information from libcurl. It reports download and upload progress in bytes, allowing applications to track and display transfer status.\nSOURCE: https://github.com/libcpr/docs/blob/main/advanced-usage.md#2025-04-21_snippet_26\n\nLANGUAGE: c++\nCODE:\n```\nbool progressCallback(cpr_off_t downloadTotal, cpr_off_t downloadNow, cpr_off_t uploadTotal, cpr_off_t uploadNow, intptr_t userdata);\n```\n\n----------------------------------------\n\nTITLE: Implementing File Download with Callback in C++\nDESCRIPTION: Demonstrates how to download a file into memory using CPR with a callback function. Uses GetDownloadFileLength() to pre-allocate memory and implements a write callback to handle the downloaded data.\nSOURCE: https://github.com/libcpr/docs/blob/main/advanced-usage.md#2025-04-21_snippet_39\n\nLANGUAGE: c++\nCODE:\n```\nstruct File\n{\n    void*  file_buf;   // file data will be saved to\n    int64_t read_len;  // file bytes\n};\nbool write_data(std::string data, intptr_t userdata)\n{\n    File* pf = reinterpret_cast<File*>(userdata);\n    memcpy(pf->file_buf + pf->read_len, data.data(), data.size());\n    pf->read_len += data.size();\n    return true; // Return `true` on success, or `false` to **cancel** the transfer.\n}\nvoid download_to_mem(File &f)\n{\n    cpr::Session session;\n    session.SetUrl(cpr::Url{\"http://www.httpbin.org/1.jpg\"});\n    f.read_len = session.GetDownloadFileLength();\n    f.file_buf = malloc(f.read_len);\n    cpr::Result r = session.Download(cpr::WriteCallback{write_data, reinterpret_cast<File*>(&f)});\n}\nint main()\n{\n    File f{nullptr, 0};\n    download_to_mem(f);\n    // do something\n    free(f.file_buf); // free file data buf\n    return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Alternative Session Configuration in C++ Requests\nDESCRIPTION: Shows an alternative way to configure a Session object using the SetOption method instead of specific setters.\nSOURCE: https://github.com/libcpr/docs/blob/main/advanced-usage.md#2025-04-21_snippet_8\n\nLANGUAGE: c++\nCODE:\n```\ncpr::Url url = cpr::Url{\"http://www.httpbin.org/get\"};\ncpr::Parameters parameters = cpr::Parameters{{\"hello\", \"world\"}};\ncpr::Session session;\nsession.SetOption(url);\nsession.SetOption(parameters);\ncpr::Response r = session.Get();\n```\n\n----------------------------------------\n\nTITLE: Implementing Range Requests in LibCPR\nDESCRIPTION: Shows various ways to make HTTP range requests for partial content retrieval, including single ranges, open-ended ranges, and multiple ranges.\nSOURCE: https://github.com/libcpr/docs/blob/main/advanced-usage.md#2025-04-21_snippet_49\n\nLANGUAGE: c++\nCODE:\n```\ncpr::Response r = cpr::Get(cpr::Url{\"http://www.httpbin.org/headers\"},\n                           cpr::Range{1, 5});\n```\n\nLANGUAGE: c++\nCODE:\n```\ncpr::Response r = cpr::Get(cpr::Url{\"http://www.httpbin.org/headers\"},\n                           cpr::Range{std::nullopt, 5});\n```\n\nLANGUAGE: c++\nCODE:\n```\ncpr::Response r = cpr::Get(cpr::Url{\"http://www.httpbin.org/headers\"},\n                           cpr::MultiRange{cpr::Range{1, 3}, cpr::Range{5, 6}});\n```\n\nLANGUAGE: c++\nCODE:\n```\ncpr::Session session;\nsession.SetOption(cpr::Range{1, 3});                    // Alternative: SetRange()\nsession.SetOption(cpr::MultiRange{cpr::Range{1, 3},\n                                  cpr::Range{5, 6}});   // Alternative: SetMultiRange()\n```\n\n----------------------------------------\n\nTITLE: Getting Full Request URL in C++ Requests Session\nDESCRIPTION: Demonstrates how to obtain the full request URL from a Session object before making the actual request.\nSOURCE: https://github.com/libcpr/docs/blob/main/advanced-usage.md#2025-04-21_snippet_7\n\nLANGUAGE: c++\nCODE:\n```\ncpr::Url url = cpr::Url{\"http://www.httpbin.org/get\"};\ncpr::Parameters parameters = cpr::Parameters{{\"hello\", \"world\"}};\ncpr::Session session;\nsession.SetUrl(url);\nsession.SetParameters(parameters);\n\nstd::string fullRequestUrl = session.GetFullRequestUrl();\nstd::cout << fullRequestUrl << std::endl;   // Prints http://www.httpbin.org/get?hello=world\n```\n\n----------------------------------------\n\nTITLE: Configuring Redirect Behavior in LibCPR\nDESCRIPTION: Shows how to configure redirect handling including maximum redirects, authentication forwarding, and POST behavior after redirects.\nSOURCE: https://github.com/libcpr/docs/blob/main/advanced-usage.md#2025-04-21_snippet_47\n\nLANGUAGE: c++\nCODE:\n```\ncpr::Response r = cpr::Post(cpr::Url{\"http://www.httpbin.org/get\"},\n                  cpr::Payload{{\"key\", \"value\"}},\n                  cpr::Redirect{42L, true, false, PostRedirectFlags::POST_301 | PostRedirectFlags::POST_302});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Certificate Information in LibCPR\nDESCRIPTION: Shows how to retrieve and display certificate information after making an HTTPS request. Returns certificate details including subject, issuer, version, and signature algorithm.\nSOURCE: https://github.com/libcpr/docs/blob/main/advanced-usage.md#2025-04-21_snippet_44\n\nLANGUAGE: c++\nCODE:\n```\nUrl url = \"https://github.com\";\nResponse response = cpr::Get(url);\nstd::vector<CertInfo> certInfos = response.GetCertInfos();\nfor (const CertInfo& certInfo : certInfos) {\n    for (const std::string& entry : certInfo) {\n        std::cout << entry << std::endl;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting a Basic HTTP Proxy in CPR\nDESCRIPTION: Example of using the Proxies object in CPR to route HTTP requests through a proxy server. The proxy configuration is passed as a parameter to the Get request.\nSOURCE: https://github.com/libcpr/docs/blob/main/advanced-usage.md#2025-04-21_snippet_29\n\nLANGUAGE: c++\nCODE:\n```\ncpr::Response r = cpr::Get(cpr::Url{\"http://www.httpbin.org/get\"},\n                  cpr::Proxies{{\"http\", \"http://www.fakeproxy.com\"}});\nstd::cout << r.url << std::endl; // Prints http://www.httpbin.org/get, not the proxy url\n```\n\n----------------------------------------\n\nTITLE: Linking against cpr in CMake Project\nDESCRIPTION: This snippet demonstrates how to link a target against the cpr library in a CMake project after it has been made available through FetchContent or find_package.\nSOURCE: https://github.com/libcpr/docs/blob/main/index.md#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(your_target_name PRIVATE cpr::cpr)\n```\n\n----------------------------------------\n\nTITLE: Configuring SSL Certificate Verification in LibCPR\nDESCRIPTION: Demonstrates how to configure SSL certificate verification using a certificate buffer. This is useful for validating self-signed certificates when making HTTPS requests.\nSOURCE: https://github.com/libcpr/docs/blob/main/advanced-usage.md#2025-04-21_snippet_43\n\nLANGUAGE: c++\nCODE:\n```\ncpr::SslOptions sslOpts = cpr::Ssl(ssl::CaBuffer{\"-----BEGIN CERTIFICATE-----[...]\"}); \ncpr::Response r = cpr::Get(cpr::Url{\"https://www.httpbin.org/get\"}, sslOpts);\n```\n\n----------------------------------------\n\nTITLE: Implementing DebugCallback in CPR for Verbose Debugging\nDESCRIPTION: The DebugCallback function signature and enumeration for libcurl verbose debugging. This callback receives detailed information about HTTP transfers, including headers and data being sent and received.\nSOURCE: https://github.com/libcpr/docs/blob/main/advanced-usage.md#2025-04-21_snippet_28\n\nLANGUAGE: c++\nCODE:\n```\nenum class DebugCallback::InfoType {\n  TEXT = 0,\n  HEADER_IN = 1,\n  HEADER_OUT = 2,\n  DATA_IN = 3,\n  DATA_OUT = 4,\n  SSL_DATA_IN = 5,\n  SSL_DATA_OUT = 6,\n};\nvoid debugCallback(DebugCallback::InfoType type, std::string data, intptr_t userdata);\n```\n\n----------------------------------------\n\nTITLE: Sending Cookies in CPR Requests\nDESCRIPTION: Example of sending cookies in subsequent HTTP requests using CPR. This demonstrates how to reuse cookies from a previous response or set new cookies for a request.\nSOURCE: https://github.com/libcpr/docs/blob/main/advanced-usage.md#2025-04-21_snippet_33\n\nLANGUAGE: c++\nCODE:\n```\ncpr::Response r = cpr::Get(cpr::Url{\"http://www.httpbin.org/cookies/set?cookies=yummy\"});\ncpr::Response another_r = cpr::Get(cpr::Url{\"http://www.httpbin.org/cookies\"}, r.cookies);\nstd::cout << another_r.text << std::endl;\n\n/*\n * {\n *   \"cookies\": {\n *     \"cookie\": \"yummy\"\n *   }\n * }\n */\n```\n\n----------------------------------------\n\nTITLE: Building and Installing cpr from Source with System CURL\nDESCRIPTION: This bash script shows the steps to clone, build, and install the cpr library from source using CMake with system CURL. This installation method allows using find_package() to integrate cpr into projects.\nSOURCE: https://github.com/libcpr/docs/blob/main/index.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/libcpr/cpr.git\ncd cpr && mkdir build && cd build\ncmake .. -DCPR_USE_SYSTEM_CURL=ON\ncmake --build . --parallel\nsudo cmake --install .\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Cookies in CPR Requests\nDESCRIPTION: Example of setting custom cookies in a CPR HTTP request. By default, cookies and their values are URL-encoded for compatibility with web servers.\nSOURCE: https://github.com/libcpr/docs/blob/main/advanced-usage.md#2025-04-21_snippet_34\n\nLANGUAGE: c++\nCODE:\n```\ncpr::Response r = cpr::Get(cpr::Url{\"http://www.httpbin.org/cookies\"},\n                  cpr::Cookies{{\"ice cream\", \"is delicious\"}});\nstd::cout << r.text << std::endl;\n\n/*\n * {\n *   \"cookies\": {\n *     \"ice%20cream\": \"is%20delicious\"\n *   }\n * }\n */\n```\n\n----------------------------------------\n\nTITLE: Retrieving and Parsing Cookies in CPR Response\nDESCRIPTION: Example of retrieving and displaying cookie information from a CPR HTTP response. This code shows how to access various cookie properties like domain, path, and value.\nSOURCE: https://github.com/libcpr/docs/blob/main/advanced-usage.md#2025-04-21_snippet_32\n\nLANGUAGE: c++\nCODE:\n```\ncpr::Response r = cpr::Get(cpr::Url{\"http://www.httpbin.org/cookies/set?cookies=yummy\"});\nfor(const auto &cookie : r.cookies) {\n    std::cout << cookie.GetDomain() << \":\";\n    std::cout << cookie.IsIncludingSubdomains() << \":\";\n    std::cout << cookie.GetPath() << \":\";\n    std::cout << cookie.IsHttpsOnly() << \":\";\n    std::cout << cookie.GetExpiresString() << \":\";\n    std::cout << cookie.GetName() << \":\";\n    std::cout << cookie.GetValue() << std::endl;\n    // For example, this will print:\n    // www.httpbin.org:0:/:0:Thu, 01 Jan 1970 00:00:00 GMT:cookies:yummy\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CPR Version Macros in C++\nDESCRIPTION: Preprocessor macros that expose version information for the CPR library. Includes string version, major/minor/patch numbers, and a hex format version number.\nSOURCE: https://github.com/libcpr/docs/blob/main/advanced-usage.md#2025-04-21_snippet_0\n\nLANGUAGE: c++\nCODE:\n```\n/**\n * CPR version as a string.\n **/\n#define CPR_VERSION \"1.7.0\"\n\n/**\n * CPR version split up into parts.\n **/\n#define CPR_VERSION_MAJOR 1\n#define CPR_VERSION_MINOR 7\n#define CPR_VERSION_PATCH 0\n\n/**\n * CPR version as a single hex digit.\n * it can be split up into three parts:\n * 0xAABBCC\n * AA: The current CPR major version number in a hex format.\n * BB: The current CPR minor version number in a hex format.\n * CC: The current CPR patch version number in a hex format.\n *\n * Examples:\n * '0x010702' -> 01.07.02 -> CPR_VERSION: 1.7.2\n * '0xA13722' -> A1.37.22 -> CPR_VERSION: 161.55.34\n **/\n#define CPR_VERSION_NUM 0x010702\n```\n\n----------------------------------------\n\nTITLE: Using ProgressCallback to Monitor HTTP Downloads in CPR\nDESCRIPTION: Example demonstrating how to implement a progress callback function with CPR to track download progress. The callback prints the current download status and returns true to continue the transfer.\nSOURCE: https://github.com/libcpr/docs/blob/main/advanced-usage.md#2025-04-21_snippet_27\n\nLANGUAGE: c++\nCODE:\n```\nint main(int argc, char** argv) {\n    cpr::Response r = cpr::Get(cpr::Url{\"http://www.httpbin.org/get\"},\n                      cpr::ProgressCallback([&](cpr_off_t downloadTotal, cpr_off_t downloadNow, cpr_off_t uploadTotal, cpr_off_t uploadNow, intptr_t userdata) -> bool\n    {\n        std::cout << \"Downloaded \" << downloadNow << \" / \" << downloadTotal << \" bytes.\" << std::endl;\n        return true;\n    }));\n    return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Building and Running cpr Tests\nDESCRIPTION: This bash script shows how to clone, build, and run the cpr test suite. It enables tests with the CPR_BUILD_TESTS CMake option and runs them with ctest.\nSOURCE: https://github.com/libcpr/docs/blob/main/index.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/libcpr/cpr.git\ncd cpr && mkdir build && cd build\ncmake .. -DCPR_BUILD_TESTS=ON # There are other test related options like 'CPR_BUILD_TESTS_SSL' and 'CPR_BUILD_TESTS_PROXY'\ncmake --build . --parallel\nctest -VV # -VV is optional since it enables verbose output\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Compression in C++ Requests\nDESCRIPTION: Shows how to configure HTTP compression options for requests using the AcceptEncoding option, both for individual requests and in a Session object.\nSOURCE: https://github.com/libcpr/docs/blob/main/advanced-usage.md#2025-04-21_snippet_10\n\nLANGUAGE: c++\nCODE:\n```\ncpr::Response r = cpr::Get(cpr::Url{\"http://www.httpbin.org/get\"},\n                  cpr::AcceptEncoding{{cpr::AcceptEncodingMethods::deflate, cpr::AcceptEncodingMethods::gzip, cpr::AcceptEncodingMethods::zlib}});\n// or you could specify specific schemes with the customized string\ncpr::Response r = cpr::Get(cpr::Url{\"http://www.httpbin.org/get\"},\n                  cpr::AcceptEncoding{{\"deflate\", \"gzip\", \"zlib\"}});\n```\n\n----------------------------------------\n\nTITLE: Conditional OAuth Bearer Token Authentication in libcpr C++\nDESCRIPTION: Shows version-dependent implementation of OAuth Bearer Token authentication, handling both modern libcurl versions (>=7.61.0) and older versions that require manual header manipulation.\nSOURCE: https://github.com/libcpr/docs/blob/main/introduction.md#2025-04-21_snippet_10\n\nLANGUAGE: c++\nCODE:\n```\n#if CPR_LIBCURL_VERSION_NUM >= 0x073D00\n    // Perform the request like usually:\n    cpr::Response r = cpr::Get(cpr::Url{\"http://www.httpbin.org/bearer\"},\n                  cpr::Bearer{\"ACCESS_TOKEN\"});\n#else\n    // Manually add the Authorization header:\n    cpr::Response r = cpr::Get(cpr::Url{\"http://www.httpbin.org/bearer\"},\n                  cpr::Header{{\"Authorization\", \"Bearer ACCESS_TOKEN\"}});\n#endif\nstd::cout << r.text << std::endl;\n\n/*\n * {\n *   \"authenticated\": true,\n *   \"token\": \"ACCESS_TOKEN\"\n * }\n */\n```\n\n----------------------------------------\n\nTITLE: Managing Headers and Content in C++ Requests Session\nDESCRIPTION: Shows how to set custom headers and body content in a Session object, make POST and GET requests, and manage the session state by removing content and headers.\nSOURCE: https://github.com/libcpr/docs/blob/main/advanced-usage.md#2025-04-21_snippet_6\n\nLANGUAGE: c++\nCODE:\n```\ncpr::Url getUrl = cpr::Url{\"http://www.httpbin.org/get\"};\ncpr::Url postUrl = cpr::Url{\"http://www.httpbin.org/post\"};\ncpr::Session session;\nsession.SetUrl(postUrl);\nsession.SetHeader(Header{{\"My-Custom-Header\", \"hello\"}, {\"Content-Type\", \"application/json\"}});\nsession.SetBody(Body{\"x=5\"});\n\ncpr::Response postResponse = session.Post();\nstd::cout << postResponse.text << std::endl;\n// [...] \"headers\": \" My-Custom-Header\": \" hello\", \"Content-Type\": \"application/json\" [...] \"data\": \"x=5\"\n\nsession.RemoveContent();                    // don't send a body in next request\nauto& headers = session.GetHeader();        // also don't send unnecessary headers\nheaders.erase(\"content-type\");              // headers interface is case-insensitive\nsession.SetUrl(getUrl);\ncpr::Response getResponse = session.Get();  // equivalent to cpr::Get(getUrl);\nstd::cout << getResponse.text << std::endl;\n// [...] \"headers\": \" My-Custom-Header\": \" hello\", [...] /* no data */\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Proxies with CPR Session\nDESCRIPTION: Example showing how to set different proxies for HTTP and HTTPS protocols using a CPR Session. This allows intelligent routing of requests through different proxies based on the protocol used.\nSOURCE: https://github.com/libcpr/docs/blob/main/advanced-usage.md#2025-04-21_snippet_30\n\nLANGUAGE: c++\nCODE:\n```\ncpr::Session session;\nsession.SetProxies({{\"http\", \"http://www.fakeproxy.com\"},\n                    {\"https\", \"http://www.anotherproxy.com\"}})\nsession.SetUrl(\"http://www.httpbin.org/get\");\n{\n    cpr::Response r = session.Get();\n    std::cout << r.url << std::endl; // Prints http://www.httpbin.org/get after going\n                                     // through http://www.fakeproxy.com\n}\nsession.SetUrl(\"https://www.httpbin.org/get\");\n{\n    cpr::Response r = session.Get();\n    std::cout << r.url << std::endl; // Prints https://www.httpbin.org/get after going\n                                     // through http://www.anotherproxy.com\n}\n```\n\n----------------------------------------\n\nTITLE: Authenticating with HTTP Proxies in CPR\nDESCRIPTION: Example of using authenticated proxies in CPR. This demonstrates how to provide username and password credentials for a proxy when making HTTP requests.\nSOURCE: https://github.com/libcpr/docs/blob/main/advanced-usage.md#2025-04-21_snippet_31\n\nLANGUAGE: c++\nCODE:\n```\ncpr::Response r = cpr::Get(cpr::Url{\"http://www.httpbin.org/get\"},\n                  cpr::Proxies{{\"http\", \"http://www.fake_auth_proxy.com\"}},\n                  cpr::ProxyAuthentication{{\"http\", EncodedAuthentiction{\"user\", \"pass\"}}});\nstd::cout << r.text << std::endl;\n/*\n * {\n *   \"args\": {},\n *   \"headers\": {\n *     ..\n *   },\n *   \"url\": \"http://httpbin.org/get\"\n * }\n */\n```\n\n----------------------------------------\n\nTITLE: Async Request with Wait Operation\nDESCRIPTION: Shows how to use wait() function with async requests to control when the response is retrieved.\nSOURCE: https://github.com/libcpr/docs/blob/main/advanced-usage.md#2025-04-21_snippet_15\n\nLANGUAGE: c++\nCODE:\n```\ncpr::AsyncResponse fr = cpr::GetAsync(cpr::Url{\"http://www.httpbin.org/get\"});\nfr.wait(); // This waits until the request is complete\ncpr::Response r = fr.get(); // Since the request is complete, this returns immediately\nstd::cout << r.text << std::endl;\n```\n\n----------------------------------------\n\nTITLE: Session-Based Async Callback\nDESCRIPTION: Demonstrates async callbacks using a CPR Session object with shared pointer management.\nSOURCE: https://github.com/libcpr/docs/blob/main/advanced-usage.md#2025-04-21_snippet_20\n\nLANGUAGE: c++\nCODE:\n```\nstd::shared_ptr<cpr::Session> session = std::make_shared<cpr::Session>();\ncpr::Url url = cpr::Url{\"http://www.httpbin.org/get\"};\nsession->SetUrl(url);\nauto future_text = session->GetCallback([](Response r) {\n        return r.text;\n    });\n// Sometime later\nif (future_text.wait_for(std::chrono::seconds(0)) == std::future_status::ready) {\n    std::cout << future_text.get() << std::endl;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Request Logging Interceptor in C++\nDESCRIPTION: Example implementation of a logging interceptor that monitors request URLs and response status codes without modifying the request or response.\nSOURCE: https://github.com/libcpr/docs/blob/main/advanced-usage.md#2025-04-21_snippet_50\n\nLANGUAGE: c++\nCODE:\n```\nclass LoggingInterceptor : public cpr::Interceptor {\n  public:\n    cpr::Response intercept(cpr::Session& session) override {\n        // Log the request URL\n        std::cout << \"Request url: \" << session.GetFullRequestUrl() << std::endl;\n\n        // Proceed the request and save the response\n        cpr::Response response = proceed(session);\n\n        // Log response status code\n        std::cout << \"Response status code: \" << response.status_code << std::endl;\n\n        // Return the stored response\n        return response;\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Network Interface in LibCPR\nDESCRIPTION: Shows how to specify the outgoing network interface for HTTP requests. Includes examples for both default interface selection and specific interface designation.\nSOURCE: https://github.com/libcpr/docs/blob/main/advanced-usage.md#2025-04-21_snippet_45\n\nLANGUAGE: c++\nCODE:\n```\ncpr::Response r = cpr::Get(cpr::Url{\"http://www.httpbin.org/get\"},\n                  cpr::Interface{\"\"}); // Let the TCP stack decide (same as default)\n```\n\nLANGUAGE: c++\nCODE:\n```\ncpr::Response r = cpr::Get(cpr::Url{\"http://www.httpbin.org/get\"},\n                  cpr::Interface{\"eth0\"}); // eth0 will be used as outgoing interface\n```\n\n----------------------------------------\n\nTITLE: Setting Local Port Configuration in LibCPR\nDESCRIPTION: Demonstrates how to configure local port and port range for HTTP requests. Useful when specific source ports are required for network connectivity.\nSOURCE: https://github.com/libcpr/docs/blob/main/advanced-usage.md#2025-04-21_snippet_46\n\nLANGUAGE: c++\nCODE:\n```\ncpr::Response r = cpr::Get(cpr::Url{\"http://www.httpbin.org/get\"},\n                  cpr::LocalPort{50000},        // local port number 50000 will be used as source port\n                  cpr::LocalPortRange{100});    // if port 50000 is already in use the first free port up to 50099 will be used\n```\n\n----------------------------------------\n\nTITLE: Setting Up Multi-Perform Sessions\nDESCRIPTION: Example of creating and configuring multiple sessions for use with MultiPerform.\nSOURCE: https://github.com/libcpr/docs/blob/main/advanced-usage.md#2025-04-21_snippet_55\n\nLANGUAGE: c++\nCODE:\n```\n// Create and setup session objects\ncpr::Url url{\"https://www.httpbin.org/get\"};\nstd::shared_ptr<cpr::Session> session_1 = std::make_shared<cpr::Session>();\nstd::shared_ptr<cpr::Session> session_2 = std::make_shared<cpr::Session>();\nsession_1->SetUrl(url);\nsession_2->SetUrl(url);\n\n// Create MultiPerform object\ncpr::MultiPerform multiperform;\n\n// Add sessions to the MultiPerform\nmultiperform.AddSession(session_1);\nmultiperform.AddSession(session_2);\n```\n\n----------------------------------------\n\nTITLE: Executing Multi-Perform GET Request\nDESCRIPTION: Shows how to execute a GET request using MultiPerform.\nSOURCE: https://github.com/libcpr/docs/blob/main/advanced-usage.md#2025-04-21_snippet_56\n\nLANGUAGE: c++\nCODE:\n```\n// Perform GET request on all previously added sessions\nstd::vector<cpr::Response> responses = multiperform.Get();\n```\n\n----------------------------------------\n\nTITLE: Adding Interceptor to CPR Session\nDESCRIPTION: Demonstrates how to add an interceptor to a CPR session using AddInterceptor method with shared pointer.\nSOURCE: https://github.com/libcpr/docs/blob/main/advanced-usage.md#2025-04-21_snippet_51\n\nLANGUAGE: c++\nCODE:\n```\n// Setup the session\ncpr::Url url{\"https://www.httpbin.org/get\"};\ncpr::Session session;\nsession.SetUrl(url);\n\n// Add an interceptor to the session\nsession.AddInterceptor(std::make_shared<LoggingInterceptor>());\n```\n\n----------------------------------------\n\nTITLE: Making Request with Interceptor\nDESCRIPTION: Shows how to make a GET request using a session with an attached interceptor and demonstrates the output.\nSOURCE: https://github.com/libcpr/docs/blob/main/advanced-usage.md#2025-04-21_snippet_52\n\nLANGUAGE: c++\nCODE:\n```\n// Make a get request to the session we have previously added our LoggingInterceptor to\nResponse response = session.Get();\n\n/*\n* Output produced by the LoggingInterceptor:\n*   Request url: https://www.httpbin.org/get\n*   Response status code: 200\n*/\n```\n\n----------------------------------------\n\nTITLE: HTTP Method Change Interceptor\nDESCRIPTION: Implementation of an interceptor that changes the HTTP method of the request to HEAD.\nSOURCE: https://github.com/libcpr/docs/blob/main/advanced-usage.md#2025-04-21_snippet_53\n\nLANGUAGE: c++\nCODE:\n```\nclass ChangeRequestMethodToHeadInterceptor : public Interceptor {\n  public:\n    Response intercept(Session& session) override {\n        // Change the request http method to HEAD\n        return proceed(session, Interceptor::ProceedHttpMethod::HEAD_REQUEST);\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Multi-Perform Logging Interceptor Implementation\nDESCRIPTION: Complete example of implementing and using a logging interceptor for multi-perform requests.\nSOURCE: https://github.com/libcpr/docs/blob/main/advanced-usage.md#2025-04-21_snippet_54\n\nLANGUAGE: c++\nCODE:\n```\n#include <iostream>\n#include <vector>\n#include <memory>\n#include <cpr/cpr.h>\n\nclass LoggingInterceptorMulti : public InterceptorMulti {\n  public:\n    std::vector<Response> intercept(MultiPerform& multi) {\n        // Log the request URL\n        std::cout << \"Request url:  \" << multi.GetSessions().front().first->GetFullRequestUrl(); << '\\n';\n\n        // Proceed the request and save the response\n        std::vector<cpr::Response> response = proceed(multi);\n\n        // Log response status code\n        std::cout << \"Response status code:  \" << response.front().status_code << '\\n';\n\n        // Return the stored response\n        return response;\n    }\n};\n\nint main() {\n    Url url{\"https://www.httpbin.org/get\"};\n    std::shared_ptr<Session> session = std::make_shared<Session>();\n    session->SetUrl(url);\n\n    MultiPerform multi;\n    multi.AddSession(session);\n    multi.AddInterceptor(std::make_shared<LoggingInterceptorMulti>());\n\n    std::vector<Response> response = multi.Get();\n}\n```\n\n----------------------------------------\n\nTITLE: Manual Domain Name Resolution\nDESCRIPTION: Demonstrates how to specify custom IP address resolutions for specific domain names and ports.\nSOURCE: https://github.com/libcpr/docs/blob/main/advanced-usage.md#2025-04-21_snippet_57\n\nLANGUAGE: c++\nCODE:\n```\ncpr::Response getResponse = cpr::Get(cpr::Url{\"https://www.example.com\"},\n                                     std::vector<cpr::Resolve>({cpr::Resolve{\"www.example.com\", \"127.0.0.1\", {443}},\n                                                                cpr::Resolve{\"www.example.com\", \"127.0.0.2\", {80}}},\n                                                                cpr::Resolve{\"subdomain.example.com\", \"127.0.0.3\"}));\n// Not specifying any ports defaults to 80 and 443\n```\n\n----------------------------------------\n\nTITLE: CPR Response Object Structure Definition\nDESCRIPTION: Definition of the Response object structure containing fields for HTTP response data including status code, body, headers, and timing information.\nSOURCE: https://github.com/libcpr/docs/blob/main/advanced-usage.md#2025-04-21_snippet_1\n\nLANGUAGE: c++\nCODE:\n```\nlong status_code;               // The HTTP status code for the request\nstd::string text;               // The body of the HTTP response\nHeader header;                  // A map-like collection of the header fields\nUrl url;                        // The effective URL of the ultimate request\ndouble elapsed;                 // The total time of the request in seconds\nCookies cookies;                // A vector-like collection of cookies returned in the request\nError error;                    // An error object containing the error code and a message\nstd::string raw_header;         // The raw header string\nstd::string status_line;        // The status line of the response\nstd::string reason;             // The reason for the status code\ncpr_off_t uploaded_bytes;       // How many bytes have been sent to the server\ncpr_off_t downloaded_bytes;     // How many bytes have been received from the server\nlong redirect_count;            // How many redirects occurred\n\nstd::vector<CertInfo> GetCertInfos(); // Returns a vector of certificate information objects (HTTPS only)\n```\n\n----------------------------------------\n\nTITLE: Reserving Space for Large Responses in CPR\nDESCRIPTION: Demonstrates how to pre-allocate memory for large HTTP responses to prevent frequent string resizing. Uses ReserveSize parameter to allocate 4MB of space.\nSOURCE: https://github.com/libcpr/docs/blob/main/advanced-usage.md#2025-04-21_snippet_13\n\nLANGUAGE: c++\nCODE:\n```\ncpr::Response r = cpr::Get(cpr::Url{\"http://xxx/file\"},\n                  cpr::ReserveSize{1024 * 1024 * 4});   // Reserve space for at least 4 million characters\n```\n\n----------------------------------------\n\nTITLE: Setting Unencoded Cookies in CPR Requests\nDESCRIPTION: Example of setting cookies without URL-encoding in a CPR HTTP request. This is done by setting the encode parameter to false in the Cookies constructor.\nSOURCE: https://github.com/libcpr/docs/blob/main/advanced-usage.md#2025-04-21_snippet_35\n\nLANGUAGE: c++\nCODE:\n```\ncpr::Response r = cpr::Get(cpr::Url{\"http://www.httpbin.org/cookies\"},\n                  cpr::Cookies{{\"ice cream\", \"is delicious\"}}, false);\nstd::cout << r.text << std::endl;\n\n/*\n * {\n *   \"cookies\": {\n *     \"ice cream\": \"is delicious\"\n *   }\n * }\n */\n```\n\n----------------------------------------\n\nTITLE: Disabling Accept-Encoding Header in C++ Requests\nDESCRIPTION: Shows how to disable the Accept-Encoding header in C++ Requests using the AcceptEncoding option with the 'disabled' value.\nSOURCE: https://github.com/libcpr/docs/blob/main/advanced-usage.md#2025-04-21_snippet_12\n\nLANGUAGE: c++\nCODE:\n```\ncpr::Session session;\nsession.SetUrl(\"https://example.com\");\nsession.SetAcceptEncoding({AcceptEncodingMethods::disabled}); // Disable setting the `Accept-Encoding` header\nResponse response = session.Get();\n```\n\n----------------------------------------\n\nTITLE: Integrating cpr into CMake Project using FetchContent\nDESCRIPTION: This snippet shows how to integrate cpr into a CMake project using the FetchContent module. It pulls the cpr repository at a specific version and makes it available as a target for linking.\nSOURCE: https://github.com/libcpr/docs/blob/main/index.md#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(FetchContent)\nFetchContent_Declare(cpr GIT_REPOSITORY https://github.com/libcpr/cpr.git\n                         GIT_TAG 1.10.5) # Replace with your desired version from: https://github.com/libcpr/cpr/releases\nFetchContent_MakeAvailable(cpr)\n```\n\n----------------------------------------\n\nTITLE: Using find_package to Link with cpr in CMake\nDESCRIPTION: This CMake snippet demonstrates how to find an installed cpr package and link it to an executable target. This approach is used after installing cpr on the system.\nSOURCE: https://github.com/libcpr/docs/blob/main/index.md#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(cpr REQUIRED)\nadd_executable(your_target_name your_target_name.cpp)\ntarget_link_libraries(your_target_name PRIVATE cpr::cpr)\n```\n\n----------------------------------------\n\nTITLE: Header Callback Function Signature\nDESCRIPTION: Defines the signature for header callback functions used to process server response headers.\nSOURCE: https://github.com/libcpr/docs/blob/main/advanced-usage.md#2025-04-21_snippet_24\n\nLANGUAGE: c++\nCODE:\n```\nbool headerCallback(const std::string_view & data, intptr_t userdata);\n```\n\n----------------------------------------\n\nTITLE: Read Callback Function Signature\nDESCRIPTION: Defines the signature for read callback functions used in streaming uploads.\nSOURCE: https://github.com/libcpr/docs/blob/main/advanced-usage.md#2025-04-21_snippet_23\n\nLANGUAGE: c++\nCODE:\n```\nbool readCallback(char* buffer, size_t & length, intptr_t userdata);\n```\n\n----------------------------------------\n\nTITLE: Building cpr as a Static Library\nDESCRIPTION: This bash script shows how to build cpr as a static library instead of the default shared library. It uses the BUILD_SHARED_LIBS CMake option set to OFF along with system CURL.\nSOURCE: https://github.com/libcpr/docs/blob/main/index.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/libcpr/cpr.git\ncd cpr && mkdir build && cd build\ncmake .. -DCPR_USE_SYSTEM_CURL=ON -DBUILD_SHARED_LIBS=OFF\ncmake --build . --parallel\nsudo cmake --install .\n```\n\n----------------------------------------\n\nTITLE: SSL Certificate Extraction Commands\nDESCRIPTION: Bash commands for extracting and processing SSL certificates and public keys from servers.\nSOURCE: https://github.com/libcpr/docs/blob/main/advanced-usage.md#2025-04-21_snippet_42\n\nLANGUAGE: bash\nCODE:\n```\nopenssl s_client -servername www.httpbin.org -connect www.httpbin.org:443 < /dev/null | sed -n \"/-----BEGIN/,/-----END/p\" > www.httpbin.org.pem\n\nopenssl x509 -in www.httpbin.org.pem -pubkey -noout > www.httpbin.org.pubkey.pem\n\nopenssl asn1parse -noout -inform pem -in www.httpbin.org.pubkey.pem -out www.httpbin.org.pubkey.der\n\nopenssl dgst -sha256 -binary www.httpbin.org.pubkey.der | openssl base64\n```"
  }
]