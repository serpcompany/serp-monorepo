[
  {
    "owner": "muxinc",
    "repo": "mux-node-sdk",
    "content": "TITLE: Basic Mux Client Usage\nDESCRIPTION: Example showing how to initialize the Mux client and create a video asset with public playback policy.\nSOURCE: https://github.com/muxinc/mux-node-sdk/blob/master/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport Mux from '@mux/mux-node';\n\nconst client = new Mux({\n  tokenId: process.env['MUX_TOKEN_ID'],\n  tokenSecret: process.env['MUX_TOKEN_SECRET'],\n});\n\nasync function main() {\n  const asset = await client.video.assets.create({\n    inputs: [{ url: 'https://storage.googleapis.com/muxdemofiles/mux-video-intro.mp4' }],\n    playback_policies: ['public'],\n  });\n\n  console.log(asset.id);\n}\n\nmain();\n```\n\n----------------------------------------\n\nTITLE: Installing Mux Node SDK\nDESCRIPTION: Basic installation command for the Mux Node SDK using npm package manager.\nSOURCE: https://github.com/muxinc/mux-node-sdk/blob/master/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @mux/mux-node\n```\n\n----------------------------------------\n\nTITLE: Interacting with Video Assets using Mux Node SDK in TypeScript\nDESCRIPTION: Methods for creating, retrieving, updating, and managing video assets through the Mux API. Includes functionality for creating and managing playback IDs, tracks, and generating subtitles.\nSOURCE: https://github.com/muxinc/mux-node-sdk/blob/master/api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclient.video.assets.create({ ...params }) -> Asset\n```\n\nLANGUAGE: typescript\nCODE:\n```\nclient.video.assets.retrieve(assetId) -> Asset\n```\n\nLANGUAGE: typescript\nCODE:\n```\nclient.video.assets.update(assetId, { ...params }) -> Asset\n```\n\nLANGUAGE: typescript\nCODE:\n```\nclient.video.assets.list({ ...params }) -> AssetsBasePage\n```\n\nLANGUAGE: typescript\nCODE:\n```\nclient.video.assets.delete(assetId) -> void\n```\n\nLANGUAGE: typescript\nCODE:\n```\nclient.video.assets.createPlaybackId(assetId, { ...params }) -> PlaybackID\n```\n\nLANGUAGE: typescript\nCODE:\n```\nclient.video.assets.createTrack(assetId, { ...params }) -> Track\n```\n\nLANGUAGE: typescript\nCODE:\n```\nclient.video.assets.deletePlaybackId(assetId, playbackId) -> void\n```\n\nLANGUAGE: typescript\nCODE:\n```\nclient.video.assets.deleteTrack(assetId, trackId) -> void\n```\n\nLANGUAGE: typescript\nCODE:\n```\nclient.video.assets.generateSubtitles(assetId, trackId, { ...params }) -> AssetGenerateSubtitlesResponse\n```\n\nLANGUAGE: typescript\nCODE:\n```\nclient.video.assets.retrieveInputInfo(assetId) -> AssetRetrieveInputInfoResponse\n```\n\nLANGUAGE: typescript\nCODE:\n```\nclient.video.assets.retrievePlaybackId(assetId, playbackId) -> PlaybackID\n```\n\nLANGUAGE: typescript\nCODE:\n```\nclient.video.assets.updateMasterAccess(assetId, { ...params }) -> Asset\n```\n\nLANGUAGE: typescript\nCODE:\n```\nclient.video.assets.updateMP4Support(assetId, { ...params }) -> Asset\n```\n\n----------------------------------------\n\nTITLE: TypeScript Request & Response Types\nDESCRIPTION: Demonstration of using TypeScript type definitions for request parameters and response fields in the Mux SDK.\nSOURCE: https://github.com/muxinc/mux-node-sdk/blob/master/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport Mux from '@mux/mux-node';\n\nconst client = new Mux({\n  tokenId: process.env['MUX_TOKEN_ID'],\n  tokenSecret: process.env['MUX_TOKEN_SECRET'],\n});\n\nasync function main() {\n  const params: Mux.Video.AssetCreateParams = {\n    inputs: [{ url: 'https://storage.googleapis.com/muxdemofiles/mux-video-intro.mp4' }],\n    playback_policies: ['public'],\n  };\n  const asset: Mux.Video.Asset = await client.video.assets.create(params);\n}\n\nmain();\n```\n\n----------------------------------------\n\nTITLE: Managing Live Streams with Mux Node SDK in TypeScript\nDESCRIPTION: Methods for creating, retrieving, updating, and managing live streams. Includes functionality for enabling/disabling streams, creating playback IDs, and setting up simulcast targets.\nSOURCE: https://github.com/muxinc/mux-node-sdk/blob/master/api.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nclient.video.liveStreams.create({ ...params }) -> LiveStream\n```\n\nLANGUAGE: typescript\nCODE:\n```\nclient.video.liveStreams.retrieve(liveStreamId) -> LiveStream\n```\n\nLANGUAGE: typescript\nCODE:\n```\nclient.video.liveStreams.update(liveStreamId, { ...params }) -> LiveStream\n```\n\nLANGUAGE: typescript\nCODE:\n```\nclient.video.liveStreams.list({ ...params }) -> LiveStreamsBasePage\n```\n\nLANGUAGE: typescript\nCODE:\n```\nclient.video.liveStreams.delete(liveStreamId) -> void\n```\n\nLANGUAGE: typescript\nCODE:\n```\nclient.video.liveStreams.complete(liveStreamId) -> void\n```\n\nLANGUAGE: typescript\nCODE:\n```\nclient.video.liveStreams.createPlaybackId(liveStreamId, { ...params }) -> PlaybackID\n```\n\nLANGUAGE: typescript\nCODE:\n```\nclient.video.liveStreams.createSimulcastTarget(liveStreamId, { ...params }) -> SimulcastTarget\n```\n\nLANGUAGE: typescript\nCODE:\n```\nclient.video.liveStreams.deletePlaybackId(liveStreamId, playbackId) -> void\n```\n\nLANGUAGE: typescript\nCODE:\n```\nclient.video.liveStreams.deleteSimulcastTarget(liveStreamId, simulcastTargetId) -> void\n```\n\nLANGUAGE: typescript\nCODE:\n```\nclient.video.liveStreams.disable(liveStreamId) -> void\n```\n\nLANGUAGE: typescript\nCODE:\n```\nclient.video.liveStreams.enable(liveStreamId) -> void\n```\n\nLANGUAGE: typescript\nCODE:\n```\nclient.video.liveStreams.resetStreamKey(liveStreamId) -> LiveStream\n```\n\nLANGUAGE: typescript\nCODE:\n```\nclient.video.liveStreams.retrievePlaybackId(liveStreamId, playbackId) -> PlaybackID\n```\n\nLANGUAGE: typescript\nCODE:\n```\nclient.video.liveStreams.retrieveSimulcastTarget(liveStreamId, simulcastTargetId) -> SimulcastTarget\n```\n\nLANGUAGE: typescript\nCODE:\n```\nclient.video.liveStreams.updateEmbeddedSubtitles(liveStreamId, { ...params }) -> LiveStream\n```\n\nLANGUAGE: typescript\nCODE:\n```\nclient.video.liveStreams.updateGeneratedSubtitles(liveStreamId, { ...params }) -> LiveStream\n```\n\n----------------------------------------\n\nTITLE: JWT Token Generation Examples\nDESCRIPTION: Examples of generating different types of JWT tokens for playback, thumbnails, GIFs, storyboards, and viewer counts.\nSOURCE: https://github.com/muxinc/mux-node-sdk/blob/master/README.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst token = mux.jwt.signPlaybackId('some-playback-id');\n\nconst thumbParams = { time: 14, width: 100 };\nconst thumbToken = mux.jwt.signPlaybackId('some-playback-id', {\n  type: 'thumbnail',\n  params: thumbParams,\n});\n\nconst gifToken = mux.jwt.signPlaybackId('some-playback-id', { type: 'gif' });\n\nconst storyboardToken = mux.jwt.signPlaybackId('some-playback-id', {\n  type: 'storyboard',\n});\n\nconst statsToken = mux.jwt.signViewerCounts('some-live-stream-id', {\n  type: 'live_stream',\n});\n```\n\n----------------------------------------\n\nTITLE: Express Webhook Handler\nDESCRIPTION: Example of implementing a webhook handler in Express with signature verification and error handling.\nSOURCE: https://github.com/muxinc/mux-node-sdk/blob/master/README.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst Mux = require('@mux/mux-node');\nconst mux = new Mux();\nconst express = require('express');\nconst bodyParser = require('body-parser');\n\nconst webhookSecret = process.env.WEBHOOK_SECRET;\nconst app = express();\n\napp.post('/webhooks', bodyParser.raw({ type: 'application/json' }), async (req, res) => {\n  try {\n    const isValidSignature = mux.webhooks.verifySignature(req.body, req.headers, webhookSecret);\n    console.log('Success:', isValidSignature);\n    const jsonFormattedBody = JSON.parse(req.body);\n    res.json({ received: true });\n  } catch (err) {\n    return res.status(400).send(`Webhook Error: ${err.message}`);\n  }\n});\n\napp.listen(3000, () => {\n  console.log('Example app listening on port 3000!');\n});\n```\n\n----------------------------------------\n\nTITLE: Working with Playback IDs in Mux Node SDK\nDESCRIPTION: Method for retrieving information about a specific playback ID, which is used to identify and access video content.\nSOURCE: https://github.com/muxinc/mux-node-sdk/blob/master/api.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nclient.video.playbackIds.retrieve(playbackId) -> PlaybackIDRetrieveResponse\n```\n\n----------------------------------------\n\nTITLE: Handling API Errors in Mux Node SDK with TypeScript\nDESCRIPTION: Demonstrates how to catch and handle API errors when creating a live stream. Shows error property access including status code, error name, and response headers.\nSOURCE: https://github.com/muxinc/mux-node-sdk/blob/master/README.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nasync function main() {\n  const liveStream = await client.video.liveStreams\n    .create({ playback_policies: ['public'] })\n    .catch(async (err) => {\n      if (err instanceof Mux.APIError) {\n        console.log(err.status); // 400\n        console.log(err.name); // BadRequestError\n        console.log(err.headers); // {server: 'nginx', ...}\n      } else {\n        throw err;\n      }\n    });\n}\n\nmain();\n```\n\n----------------------------------------\n\nTITLE: Webhook Methods\nDESCRIPTION: Methods for handling webhook events including unwrapping and signature verification.\nSOURCE: https://github.com/muxinc/mux-node-sdk/blob/master/api.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nclient.webhooks.unwrap(body, headers, secret) -> UnwrapWebhookEvent\nclient.webhooks.verifySignature(body, headers, secret) -> void\n```\n\n----------------------------------------\n\nTITLE: Webhook Handling in Next.js\nDESCRIPTION: Example of handling Mux webhooks in a Next.js API route with payload validation and type checking.\nSOURCE: https://github.com/muxinc/mux-node-sdk/blob/master/README.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { revalidatePath } from 'next/cache';\nimport { headers } from 'next/headers';\n\nimport Mux from '@mux/mux-node';\n\nconst mux = new Mux({\n  webhookSecret: process.env.MUX_WEBHOOK_SECRET,\n});\n\nexport async function POST(request: Request) {\n  const headersList = headers();\n  const body = await request.text();\n  const event = mux.webhooks.unwrap(body, headersList);\n\n  switch (event.type) {\n    case 'video.live_stream.active':\n    case 'video.live_stream.idle':\n    case 'video.live_stream.disabled':\n      if (event.data.id === 'MySpecialTVLiveStreamID') {\n        revalidatePath('/tv');\n      }\n      break;\n    default:\n      break;\n  }\n\n  return Response.json({ message: 'ok' });\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Playback Restrictions in Mux Node SDK\nDESCRIPTION: Methods for creating, retrieving, and managing playback restrictions that control access to video content. Includes functionality for updating referrer and user agent restrictions.\nSOURCE: https://github.com/muxinc/mux-node-sdk/blob/master/api.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nclient.video.playbackRestrictions.create({ ...params }) -> PlaybackRestriction\n```\n\nLANGUAGE: typescript\nCODE:\n```\nclient.video.playbackRestrictions.retrieve(playbackRestrictionId) -> PlaybackRestriction\n```\n\nLANGUAGE: typescript\nCODE:\n```\nclient.video.playbackRestrictions.list({ ...params }) -> PlaybackRestrictionsBasePage\n```\n\nLANGUAGE: typescript\nCODE:\n```\nclient.video.playbackRestrictions.delete(playbackRestrictionId) -> void\n```\n\nLANGUAGE: typescript\nCODE:\n```\nclient.video.playbackRestrictions.updateReferrer(playbackRestrictionId, { ...params }) -> PlaybackRestriction\n```\n\nLANGUAGE: typescript\nCODE:\n```\nclient.video.playbackRestrictions.updateUserAgent(playbackRestrictionId, { ...params }) -> PlaybackRestriction\n```\n\n----------------------------------------\n\nTITLE: Auto-pagination with Async Iterators in Mux Node SDK\nDESCRIPTION: Demonstrates how to use async iterators to automatically paginate through list results, collecting all video delivery usage reports across multiple pages.\nSOURCE: https://github.com/muxinc/mux-node-sdk/blob/master/README.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nasync function fetchAllVideoDeliveryUsages(params) {\n  const allVideoDeliveryUsages = [];\n  // Automatically fetches more pages as needed.\n  for await (const deliveryReport of client.video.deliveryUsage.list()) {\n    allVideoDeliveryUsages.push(deliveryReport);\n  }\n  return allVideoDeliveryUsages;\n}\n```\n\n----------------------------------------\n\nTITLE: Manual Pagination in Mux Node SDK\nDESCRIPTION: Shows how to manually handle pagination for list endpoints, processing one page at a time and using convenience methods to fetch subsequent pages when needed.\nSOURCE: https://github.com/muxinc/mux-node-sdk/blob/master/README.md#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nlet page = await client.video.deliveryUsage.list();\nfor (const deliveryReport of page.data) {\n  console.log(deliveryReport);\n}\n\n// Convenience methods are provided for manually paginating:\nwhile (page.hasNextPage()) {\n  page = await page.getNextPage();\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: JWT Methods\nDESCRIPTION: Methods for signing various types of IDs with JWT tokens including playback IDs, space IDs and viewer counts.\nSOURCE: https://github.com/muxinc/mux-node-sdk/blob/master/api.md#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nclient.jwt.signPlaybackId(playbackId, config) -> Promise<string>\nclient.jwt.signSpaceId(spaceId, config) -> Promise<string>\nclient.jwt.signViewerCounts(id, config) -> Promise<string>\n```\n\n----------------------------------------\n\nTITLE: Configuring Retry Behavior in Mux Node SDK\nDESCRIPTION: Shows how to configure retry behavior for API requests. Demonstrates setting max retries globally for all requests and overriding for individual requests.\nSOURCE: https://github.com/muxinc/mux-node-sdk/blob/master/README.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// Configure the default for all requests:\nconst client = new Mux({\n  maxRetries: 0, // default is 2\n});\n\n// Or, configure per-request:\nawait client.video.assets.retrieve('t02rm...', {\n  maxRetries: 5,\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Request Timeouts in Mux Node SDK\nDESCRIPTION: Illustrates how to configure timeout durations for API requests. Shows global timeout configuration and per-request overrides with appropriate error handling information.\nSOURCE: https://github.com/muxinc/mux-node-sdk/blob/master/README.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// Configure the default for all requests:\nconst client = new Mux({\n  timeout: 20 * 1000, // 20 seconds (default is 1 minute)\n});\n\n// Override per-request:\nawait client.video.assets.retrieve('t02rm...', {\n  timeout: 5 * 1000,\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Raw Response Data in Mux Node SDK\nDESCRIPTION: Demonstrates how to access the raw Response object and its properties when making API requests. Shows methods for obtaining headers and other response metadata.\nSOURCE: https://github.com/muxinc/mux-node-sdk/blob/master/README.md#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst client = new Mux();\n\nconst response = await client.video.assets\n  .create({\n    inputs: [{ url: 'https://storage.googleapis.com/muxdemofiles/mux-video-intro.mp4' }],\n    playback_policies: ['public'],\n  })\n  .asResponse();\nconsole.log(response.headers.get('X-My-Header'));\nconsole.log(response.statusText); // access the underlying Response object\n\nconst { data: asset, response: raw } = await client.video.assets\n  .create({\n    inputs: [{ url: 'https://storage.googleapis.com/muxdemofiles/mux-video-intro.mp4' }],\n    playback_policies: ['public'],\n  })\n  .withResponse();\nconsole.log(raw.headers.get('X-My-Header'));\nconsole.log(asset.id);\n```\n\n----------------------------------------\n\nTITLE: Real-Time Data Methods\nDESCRIPTION: Methods for accessing real-time metrics, dimensions, breakdowns and timeseries data.\nSOURCE: https://github.com/muxinc/mux-node-sdk/blob/master/api.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nclient.data.realTime.listDimensions() -> RealTimeDimensionsResponse\nclient.data.realTime.listMetrics() -> RealTimeMetricsResponse\nclient.data.realTime.retrieveBreakdown(realtimeMetricId, { ...params }) -> RealTimeBreakdownResponse\nclient.data.realTime.retrieveHistogramTimeseries(realtimeHistogramMetricId, { ...params }) -> RealTimeHistogramTimeseriesResponse\nclient.data.realTime.retrieveTimeseries(realtimeMetricId, { ...params }) -> RealTimeTimeseriesResponse\n```\n\n----------------------------------------\n\nTITLE: Metrics API Methods\nDESCRIPTION: Methods for retrieving various metrics data including comparisons, insights, overall values, timeseries data and breakdown values.\nSOURCE: https://github.com/muxinc/mux-node-sdk/blob/master/api.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nclient.data.metrics.list({ ...params }) -> AllMetricValuesResponse\nclient.data.metrics.getInsights(metricId, { ...params }) -> InsightsResponse\nclient.data.metrics.getOverallValues(metricId, { ...params }) -> OverallValuesResponse\nclient.data.metrics.getTimeseries(metricId, { ...params }) -> MetricTimeseriesDataResponse\nclient.data.metrics.listBreakdownValues(metricId, { ...params }) -> BreakdownValuesBasePage\n```\n\n----------------------------------------\n\nTITLE: Video Views Methods\nDESCRIPTION: Methods for retrieving individual video view data and listing multiple video views.\nSOURCE: https://github.com/muxinc/mux-node-sdk/blob/master/api.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nclient.data.videoViews.retrieve(videoViewId) -> VideoViewResponse\nclient.data.videoViews.list({ ...params }) -> AbridgedVideoViewsBasePage\n```\n\n----------------------------------------\n\nTITLE: Making Custom Requests to Undocumented Endpoints in Mux Node SDK\nDESCRIPTION: Shows how to make HTTP requests to undocumented API endpoints using the client's HTTP verb methods while maintaining client configuration options like retries.\nSOURCE: https://github.com/muxinc/mux-node-sdk/blob/master/README.md#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.post('/some/path', {\n  body: { some_prop: 'foo' },\n  query: { some_query_arg: 'bar' },\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Delivery Usage Data in Mux Node SDK\nDESCRIPTION: Method for retrieving delivery usage reports to track video delivery metrics across a Mux account.\nSOURCE: https://github.com/muxinc/mux-node-sdk/blob/master/api.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclient.video.deliveryUsage.list({ ...params }) -> DeliveryReportsPageWithTotal\n```\n\n----------------------------------------\n\nTITLE: Running the Mux v8 Codemod Script in Bash\nDESCRIPTION: This command runs a codemod script that automatically converts existing Mux Node SDK code from pre-8.0 syntax to the new 8.0 syntax. The script edits project files in place to update function calls.\nSOURCE: https://github.com/muxinc/mux-node-sdk/blob/master/UPGRADE_8.x.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @getgrit/launcher apply mux_v8\n```\n\n----------------------------------------\n\nTITLE: Signing Keys Methods\nDESCRIPTION: Methods for managing signing keys including creation, retrieval, listing and deletion.\nSOURCE: https://github.com/muxinc/mux-node-sdk/blob/master/api.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nclient.system.signingKeys.create() -> SigningKey\nclient.system.signingKeys.retrieve(signingKeyId) -> SigningKey\nclient.system.signingKeys.list({ ...params }) -> SigningKeysBasePage\nclient.system.signingKeys.delete(signingKeyId) -> void\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Agent for Proxy Support in Mux Node SDK\nDESCRIPTION: Demonstrates how to configure HTTP agents for use with proxies or custom connection handling. Shows global configuration and per-request overrides.\nSOURCE: https://github.com/muxinc/mux-node-sdk/blob/master/README.md#2025-04-21_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport http from 'http';\nimport { HttpsProxyAgent } from 'https-proxy-agent';\n\n// Configure the default for all requests:\nconst client = new Mux({\n  httpAgent: new HttpsProxyAgent(process.env.PROXY_URL),\n});\n\n// Override per-request:\nawait client.video.assets.retrieve('t02rm...', {\n  httpAgent: new http.Agent({ keepAlive: false }),\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing the Fetch Client with a Logging Middleware\nDESCRIPTION: Shows how to provide a custom fetch implementation that adds logging middleware to inspect requests and responses for debugging or monitoring purposes.\nSOURCE: https://github.com/muxinc/mux-node-sdk/blob/master/README.md#2025-04-21_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { fetch } from 'undici'; // as one example\nimport Mux from '@mux/mux-node';\n\nconst client = new Mux({\n  fetch: async (url: RequestInfo, init?: RequestInit): Promise<Response> => {\n    console.log('About to make a request', url, init);\n    const response = await fetch(url, init);\n    console.log('Got response', response);\n    return response;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Undocumented Parameters in Mux Node SDK\nDESCRIPTION: Demonstrates how to pass undocumented parameters to API endpoints by using TypeScript expect-error annotations to bypass type checking while maintaining runtime functionality.\nSOURCE: https://github.com/muxinc/mux-node-sdk/blob/master/README.md#2025-04-21_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nclient.foo.create({\n  foo: 'my_param',\n  bar: 12,\n  // @ts-expect-error baz is not yet public\n  baz: 'undocumented option',\n});\n```\n\n----------------------------------------\n\nTITLE: Setting up Mux Node SDK environment with Yarn\nDESCRIPTION: Commands to install dependencies and build the Mux Node SDK project using Yarn package manager.\nSOURCE: https://github.com/muxinc/mux-node-sdk/blob/master/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ yarn\n$ yarn build\n```\n\n----------------------------------------\n\nTITLE: Linking local Mux Node SDK repository\nDESCRIPTION: Steps to clone the Mux Node SDK repository and link it locally using Yarn or pnpm package managers.\nSOURCE: https://github.com/muxinc/mux-node-sdk/blob/master/CONTRIBUTING.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n# Clone\n$ git clone https://www.github.com/muxinc/mux-node-sdk\n$ cd mux-node-sdk\n\n# With yarn\n$ yarn link\n$ cd ../my-package\n$ yarn link @mux/mux-node\n\n# With pnpm\n$ pnpm link --global\n$ cd ../my-package\n$ pnpm link -—global @mux/mux-node\n```\n\n----------------------------------------\n\nTITLE: Running a Mux Node SDK example file\nDESCRIPTION: Commands to make an example file executable and run it using Yarn and tsn.\nSOURCE: https://github.com/muxinc/mux-node-sdk/blob/master/CONTRIBUTING.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ chmod +x examples/<your-example>.ts\n# run the example against your api\n$ yarn tsn -T examples/<your-example>.ts\n```\n\n----------------------------------------\n\nTITLE: Adding an example TypeScript file for Mux Node SDK\nDESCRIPTION: Template for creating a new example file in the examples directory, using TypeScript and npm run.\nSOURCE: https://github.com/muxinc/mux-node-sdk/blob/master/CONTRIBUTING.md#2025-04-21_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n#!/usr/bin/env -S npm run tsn -T\n…\n```\n\n----------------------------------------\n\nTITLE: Importing Node Shims in JavaScript\nDESCRIPTION: Example of manually importing Node.js shims in a JavaScript environment. This import ensures that the SDK uses node-fetch instead of the global fetch API.\nSOURCE: https://github.com/muxinc/mux-node-sdk/blob/master/src/_shims/README.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport '@mux/mux-node/shims/node'\n```\n\n----------------------------------------\n\nTITLE: Importing Web Shims in JavaScript\nDESCRIPTION: Example of manually importing web shims in a JavaScript environment. This import ensures that the SDK uses the global fetch API available in web environments.\nSOURCE: https://github.com/muxinc/mux-node-sdk/blob/master/src/_shims/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport '@mux/mux-node/shims/web'\n```\n\n----------------------------------------\n\nTITLE: Running tests for Mux Node SDK\nDESCRIPTION: Command to execute the test suite for the Mux Node SDK project using Yarn.\nSOURCE: https://github.com/muxinc/mux-node-sdk/blob/master/CONTRIBUTING.md#2025-04-21_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\n$ yarn run test\n```\n\n----------------------------------------\n\nTITLE: Installing Mux Node SDK from Git source\nDESCRIPTION: npm command to install the Mux Node SDK directly from its GitHub repository.\nSOURCE: https://github.com/muxinc/mux-node-sdk/blob/master/CONTRIBUTING.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n$ npm install git+ssh://git@github.com:muxinc/mux-node-sdk.git\n```\n\n----------------------------------------\n\nTITLE: Setting up mock server for Mux Node SDK tests\nDESCRIPTION: Command to set up a mock server using Prism against the OpenAPI specification for running tests.\nSOURCE: https://github.com/muxinc/mux-node-sdk/blob/master/CONTRIBUTING.md#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n$ npx prism mock path/to/your/openapi.yml\n```\n\n----------------------------------------\n\nTITLE: Formatting and fixing lint issues in Mux Node SDK\nDESCRIPTION: Command to automatically format code and fix linting issues in the Mux Node SDK project using Yarn.\nSOURCE: https://github.com/muxinc/mux-node-sdk/blob/master/CONTRIBUTING.md#2025-04-21_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\n$ yarn fix\n```\n\n----------------------------------------\n\nTITLE: Linting Mux Node SDK codebase\nDESCRIPTION: Command to run the linter on the Mux Node SDK project using Yarn.\nSOURCE: https://github.com/muxinc/mux-node-sdk/blob/master/CONTRIBUTING.md#2025-04-21_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\n$ yarn lint\n```\n\n----------------------------------------\n\nTITLE: Version Reference Links\nDESCRIPTION: Git commit and issue references in changelog format showing changes between SDK versions\nSOURCE: https://github.com/muxinc/mux-node-sdk/blob/master/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* rebuild project due to codegen change ([#411](https://github.com/muxinc/mux-node-sdk/issues/411)) ([5cee0e9](https://github.com/muxinc/mux-node-sdk/commit/5cee0e93d70bc1ff792ccde03d9b63d3ce5b8f23))\n\n* **readme:** add bundle size badge ([#409](https://github.com/muxinc/mux-node-sdk/issues/409)) ([b538159](https://github.com/muxinc/mux-node-sdk/commit/b538159f9dff76726a16b39337eed879287600f8))\n```"
  }
]