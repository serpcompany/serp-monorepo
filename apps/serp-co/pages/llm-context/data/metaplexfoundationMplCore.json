[
  {
    "owner": "metaplex-foundation",
    "repo": "mpl-core",
    "content": "TITLE: Basic Asset and Collection Operations with Mpl Core\nDESCRIPTION: Comprehensive example demonstrating core operations including creating assets, fetching assets, creating collections, fetching collections, creating assets within collections, transferring assets, and querying assets using GPA (GetProgramAccounts).\nSOURCE: https://github.com/metaplex-foundation/mpl-core/blob/main/clients/js/README.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Create an asset\nconst assetAddress = generateSigner(umi);\nconst owner = generateSigner(umi);\nawait create(umi, {\n  name: 'Test Asset',\n  uri: 'https://example.com/asset.json',\n  asset: assetAddress,\n  owner: owner.publicKey, // optional, will default to payer\n}).sendAndConfirm(umi);\n\n// Fetch an asset\nconst asset = await fetchAssetV1(umi, assetAddress.publicKey);\n\n// Create a collection\nconst collectionUpdateAuthority = generateSigner(umi);\nconst collectionAddress = generateSigner(umi);\nawait createCollection(umi, {\n  name: 'Test Collection',\n  uri: 'https://example.com/collection.json',\n  collection: collectionAddress,\n  updateAuthority: collectionUpdateAuthority.publicKey, // optional, defaults to payer\n}).sendAndConfirm(umi);\n\n// Fetch a collection\nconst collection = await fetchCollectionV1(umi, collectionAddress.publicKey);\n\n// Create an asset in a collection, the authority must be the updateAuthority of the collection\nawait create(umi, {\n  name: 'Test Asset',\n  uri: 'https://example.com/asset.json',\n  asset: assetAddress,\n  collection,\n  authority: collectionUpdateAuthority, // optional, defaults to payer\n}).sendAndConfirm(umi);\n\n// Transfer an asset\nconst recipient = generateSigner(umi);\nawait transfer(umi, {\n  asset,\n  newOwner: recipient.publicKey,\n}).sendAndConfirm(umi);\n\n// Transfer an asset in a collection\nawait transfer(umi, {\n  asset,\n  newOwner: recipient.publicKey,\n  collection,\n}).sendAndConfirm(umi);\n\n// GPA fetch assets by owner\nconst assetsByOwner = await getAssetV1GpaBuilder(umi)\n  .whereField('key', Key.AssetV1)\n  .whereField('owner', owner.publicKey)\n  .getDeserialized();\n\n// GPA fetch assets by collection\nconst assetsByCollection = await getAssetV1GpaBuilder(umi)\n  .whereField('key', Key.AssetV1)\n  .whereField(\n    'updateAuthority',\n    updateAuthority('Collection', [collectionAddress.publicKey])\n  )\n  .getDeserialized();\n\n// DAS API (RPC based indexing) fetch assets by owner/collection\n// Coming soon\n```\n\n----------------------------------------\n\nTITLE: Advanced Asset and Collection Operations with Plugins\nDESCRIPTION: Examples showing advanced operations such as freezing assets with delegates, unfreezing assets, and creating collections with royalty settings that specify multiple creators with percentage shares.\nSOURCE: https://github.com/metaplex-foundation/mpl-core/blob/main/clients/js/README.md#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst umi = await createUmi();\n\n// Freezing an asset\nconst assetAddress = generateSigner(umi);\nconst freezeDelegate = generateSigner(umi);\n\nawait addPlugin(umi, {\n  asset: assetAddress.publicKey,\n  // adds the owner-managed freeze plugin to the asset\n  plugin: {\n    type: 'FreezeDelegate',\n    frozen: true,\n    \n    // Optionally set the authority to a delegate who can unfreeze. If unset, this will be the Owner\n    // This is functionally the same as calling addPlugin and approvePluginAuthority separately.\n    // Freezing with a delegate is commonly used for escrowless staking programs.\n    authority: {\n      type: 'Address',\n      address: freezeDelegate.publicKey,\n    },\n  }\n}).sendAndConfirm(umi);\n\n// Unfreezing an asset with a delegate\n// Revoking an authority will revert the authority back to the owner for owner-managed plugins\nawait revokePluginAuthority(umi, {\n  asset: assetAddress.publicKey,\n  plugin: {\n    type: 'FreezeDelegate',\n  },\n  authority: freezeDelegate,\n}).sendAndConfirm(umi);\n\n// Create a collection with royalties\nconst collectionAddress = generateSigner(umi);\nconst creator1 = generateSigner(umi);\nconst creator2 = generateSigner(umi);\n\nawait createCollection(umi, {\n  name: 'Test Collection',\n  uri: 'https://example.com/collection.json',\n  collection: collectionAddress,\n  plugins: [\n    {\n      type: 'Royalties',\n        basisPoints: 500,\n        creators: [\n          {\n            address: creator1.publicKey,\n            percentage: 20,\n          },\n          {\n            address: creator2.publicKey,\n            percentage: 80,\n          },\n        ],\n        ruleSet: ruleSet('None'), // Compatibility rule set\n\n    },\n  ],\n}).sendAndConfirm(umi);\n\n// Create an asset in a collection.\n// Assets in a collection will inherit the collection's authority-managed plugins, in this case the royalties plugin\nawait create(umi, {\n  name: 'Test Asset',\n  uri: 'https://example.com/asset.json',\n  asset: assetAddress,\n  collection: await fetchCollectionV1(umi, collectionAddress.publicKey),\n}).sendAndConfirm(umi);\n```\n\n----------------------------------------\n\nTITLE: Configuring Umi with Wallet Adapter for Frontend Use\nDESCRIPTION: Example showing how to set up Umi with wallet adapter integration for frontend applications, using React wallet adapter hooks to connect Solana wallets with the Umi framework.\nSOURCE: https://github.com/metaplex-foundation/mpl-core/blob/main/clients/js/README.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useConnection, useWallet } from '@solana/wallet-adapter-react';\nimport { walletAdapterIdentity } from '@metaplex-foundation/umi-signer-wallet-adapters';\n\nexport function MyComponent() {\n   const wallet = useWallet();\n   const { connection } = useConnection();\n   const umi = createUmi(connection)\n      .use(walletAdapterIdentity(wallet))\n      .use(mplCore())\n\n   // rest of component\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Mpl Core with Umi Instance\nDESCRIPTION: Basic setup to register the Mpl Core library with a Umi instance by creating a Umi instance with a specified RPC endpoint and applying the mplCore plugin.\nSOURCE: https://github.com/metaplex-foundation/mpl-core/blob/main/clients/js/README.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createUmi } from '@metaplex-foundation/umi-bundle-defaults';\nimport { mplCore } from '@metaplex-foundation/mpl-core';\n\nconst umi = createUmi('<your rpc endpoint>');\numi.use(mplCore());\n```\n\n----------------------------------------\n\nTITLE: Installing Mpl Core Library with npm\nDESCRIPTION: Command to install the Mpl Core library from npm, which is needed after setting up the Umi framework.\nSOURCE: https://github.com/metaplex-foundation/mpl-core/blob/main/clients/js/README.md#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @metaplex-foundation/mpl-core\n```\n\n----------------------------------------\n\nTITLE: Installing Mpl Core SDK using Cargo in Rust\nDESCRIPTION: This command adds the mpl-core package to your Rust project using Cargo, the Rust package manager. It should be run from your project folder to install the Mpl Core SDK.\nSOURCE: https://github.com/metaplex-foundation/mpl-core/blob/main/clients/rust/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo add mpl-core\n```\n\n----------------------------------------\n\nTITLE: Building and Testing Rust Client for Mpl Core\nDESCRIPTION: Commands for building and testing the Rust client. The test command requires building the program first and specifies the output directory for SBF (Solana Binary Format) files.\nSOURCE: https://github.com/metaplex-foundation/mpl-core/blob/main/clients/rust/CONTRIBUTING.md#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# Build the client\ncargo build\n\n# Test the client (requires building the program first)\ncargo test-sbf --sbf-out-dir ../../programs/.bin\n```\n\n----------------------------------------\n\nTITLE: Building Mpl Core Program\nDESCRIPTION: Builds the program and outputs a .so file to target/deploy directory, which is used by config/shank.cjs for local validator initialization\nSOURCE: https://github.com/metaplex-foundation/mpl-core/blob/main/programs/mpl-core/README.md#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncargo build-bpf\n```\n\n----------------------------------------\n\nTITLE: Testing Mpl Core Program\nDESCRIPTION: Builds the program and runs its Rust test suite using cargo's test framework\nSOURCE: https://github.com/metaplex-foundation/mpl-core/blob/main/programs/mpl-core/README.md#2025-04-18_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncargo test-bpf\n```\n\n----------------------------------------\n\nTITLE: Building and Testing Mpl Core JavaScript Client\nDESCRIPTION: These commands demonstrate how to build the client, run all tests, and test specific files or patterns. Building is required before running tests.\nSOURCE: https://github.com/metaplex-foundation/mpl-core/blob/main/clients/js/CONTRIBUTING.md#2025-04-18_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n# Build the client.\npnpm build\n\n# Test the client (requires building first).\npnpm build && pnpm test\n\n# Test a specific file or set of files.\npnpm build && pnpm test test/somefile.test.js\npnpm build && pnpm test test/somePattern*\n```\n\n----------------------------------------\n\nTITLE: Linting and Formatting Mpl Core JavaScript Client\nDESCRIPTION: These commands are used to lint and format the JavaScript client code, ensuring consistency and code quality.\nSOURCE: https://github.com/metaplex-foundation/mpl-core/blob/main/clients/js/CONTRIBUTING.md#2025-04-18_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npnpm lint:fix\npnpm format:fix\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Mpl Core JavaScript Client\nDESCRIPTION: This command installs the necessary dependencies for the Mpl Core JavaScript client using pnpm package manager.\nSOURCE: https://github.com/metaplex-foundation/mpl-core/blob/main/clients/js/CONTRIBUTING.md#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npnpm install\n```"
  }
]