[
  {
    "owner": "qmk",
    "repo": "qmk_firmware",
    "content": "TITLE: C Code Style Example\nDESCRIPTION: Illustrates the coding conventions with an example of enums and a function in C. The example demonstrates indentation, brace style, commenting, and optional brace usage within an `if-else` statement. This example highlights how code within QMK firmware should generally be structured and formatted.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/coding_conventions_c.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n/* Enums for foo */\nenum foo_state {\n    FOO_BAR,\n    FOO_BAZ,\n};\n\n/* Returns a value */\nint foo(void) {\n    if (some_condition) {\n        return FOO_BAR;\n    } else {\n        return -1;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Install QMK CLI on Windows (MSYS2)\nDESCRIPTION: This command installs the QMK CLI and its dependencies (git, python-qmk) using the pacman package manager within the MSYS2 environment on Windows. It disables download timeout and skips confirmation prompts for unattended installation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/newbs_getting_started.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npacman --needed --noconfirm --disable-download-timeout -S git mingw-w64-x86_64-python-qmk\n```\n\n----------------------------------------\n\nTITLE: Installing QMK CLI using Homebrew (macOS, Linux)\nDESCRIPTION: This snippet shows how to install the QMK CLI on macOS or Linux using Homebrew. It taps the qmk/qmk repository and installs the qmk package. It also includes an optional step to set the QMK_HOME environment variable and run the qmk setup command to clone the qmk_firmware repository.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/cli.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nbrew install qmk/qmk/qmk\nexport QMK_HOME='~/qmk_firmware' # Optional, set the location for `qmk_firmware`\nqmk setup  # This will clone `qmk/qmk_firmware` and optionally set up your build environment\n```\n\n----------------------------------------\n\nTITLE: DFU-Util Command Line Flashing (Shell)\nDESCRIPTION: This command demonstrates how to flash a firmware .bin file to an STM32 device using the `dfu-util` command-line tool.  The command specifies the device (0483:DF11), the address (0x8000000), and the filename to flash. This command is used when the STM32 is in DFU mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/flashing.md#_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\ndfu-util -a 0 -d 0483:DF11 -s 0x8000000:leave -D <filename>\n```\n\n----------------------------------------\n\nTITLE: Enabling SPI in halconf.h (C)\nDESCRIPTION: This snippet shows how to enable SPI in the `halconf.h` file for ChibiOS. This is necessary to use the SPI driver for WS2812 LEDs on STM32 microcontrollers.  The `HAL_USE_SPI` macro must be defined as `TRUE` to enable the SPI peripheral.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/ws2812.md#_snippet_8\n\nLANGUAGE: C\nCODE:\n```\n#pragma once\n\n#define HAL_USE_SPI TRUE // [!code focus]\n\n#include_next <halconf.h>\n```\n\n----------------------------------------\n\nTITLE: Drawing Rect Example with `qp_rect` and `qp_flush` in C\nDESCRIPTION: This example demonstrates how to draw a rectangle on the display and then flush the drawing operations. It draws a rectangle based on the current RGB color, throttled to 30fps.  `qp_rect` draws the rectangle, and `qp_flush` ensures it is displayed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/quantum_painter.md#_snippet_49\n\nLANGUAGE: c\nCODE:\n```\nvoid housekeeping_task_user(void) {\n    static uint32_t last_draw = 0;\n    if (timer_elapsed32(last_draw) > 33) { // Throttle to 30fps\n        last_draw = timer_read32();\n        // Draw a rect based off the current RGB color\n        qp_rect(display, 0, 7, 0, 239, rgb_matrix_get_hue(), 255, 255);\n        qp_flush(display);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Keymap Definition\nDESCRIPTION: Defines the keymaps array, which holds multiple layers of keymap information. Each layer is a matrix of action codes, representing the functionality of each key. The `MATRIX_ROWS` and `MATRIX_COLS` are hardware specific definitions.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/keymap.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nconst uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {\n```\n\n----------------------------------------\n\nTITLE: Disabling Debug Messages in config.h\nDESCRIPTION: This code snippet shows how to disable debug messages (dprint) in the `config.h` file to reduce the .hex file size. By defining `NO_DEBUG`, debug messages will be excluded from the compiled firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/getting_started_make_guide.md#_snippet_2\n\nLANGUAGE: C\nCODE:\n```\n#define NO_DEBUG\n```\n\n----------------------------------------\n\nTITLE: Multiple Macros in C with `process_record_user`\nDESCRIPTION: This snippet demonstrates how to define and use multiple macros within the `process_record_user` function in a QMK keymap.  It involves defining multiple custom keycodes and adding corresponding cases to the switch statement within `process_record_user`.  It shows how different strings can be sent based on different custom key presses.  Requires QMK firmware environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/feature_macros.md#_snippet_2\n\nLANGUAGE: C\nCODE:\n```\nenum custom_keycodes {\n    QMKBEST = SAFE_RANGE,\n    QMKURL,\n    MY_OTHER_MACRO,\n};\n\nbool process_record_user(uint16_t keycode, keyrecord_t *record) {\n    switch (keycode) {\n    case QMKBEST:\n        if (record->event.pressed) {\n            // when keycode QMKBEST is pressed\n            SEND_STRING(\"QMK is the best thing ever!\");\n        } else {\n            // when keycode QMKBEST is released\n        }\n        break;\n\n    case QMKURL:\n        if (record->event.pressed) {\n            // when keycode QMKURL is pressed\n            SEND_STRING(\"https://qmk.fm/\\n\");\n        } else {\n            // when keycode QMKURL is released\n        }\n        break;\n\n    case MY_OTHER_MACRO:\n        if (record->event.pressed) {\n           SEND_STRING(SS_LCTL(\"ac\")); // selects all and copies\n        }\n        break\n    }\n    return true;\n};\n\nconst uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {\n    [0] = {\n        {MY_CUSTOM_MACRO, MY_OTHER_MACRO},\n        // ...\n    },\n};\n```\n\n----------------------------------------\n\nTITLE: Parallel Compilation - qmk compile\nDESCRIPTION: This command compiles firmware using parallel processing to speed up compilation. It requires the `-j` or `--parallel` flag to specify the number of jobs.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/cli_commands.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nqmk compile -j <num_jobs> -kb <keyboard_name>\n```\n\nLANGUAGE: shell\nCODE:\n```\nqmk compile -j 0 -kb <keyboard_name>\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Song\nDESCRIPTION: Demonstrates how to define a custom song using a 2D float array and the `SONG` macro, which allows for customized sounds to be played.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/audio.md#_snippet_13\n\nLANGUAGE: c\nCODE:\n```\nfloat my_song[][2] = SONG(QWERTY_SOUND);\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Key Combos in QMK - C\nDESCRIPTION: This code snippet demonstrates how to define basic key combos in QMK Firmware. It defines two combos: one for sending the Escape key when A and B are pressed together, and another for sending Ctrl+Z when C and D are pressed.  It requires `COMBO_ENABLE = yes` in `rules.mk`. The `COMBO_END` macro terminates each key sequence.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/combo.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nconst uint16_t PROGMEM test_combo1[] = {KC_A, KC_B, COMBO_END};\nconst uint16_t PROGMEM test_combo2[] = {KC_C, KC_D, COMBO_END};\ncombo_t key_combos[] = {\n    COMBO(test_combo1, KC_ESC),\n    COMBO(test_combo2, LCTL(KC_Z)), // keycodes with modifiers are possible too!\n};\n```\n\n----------------------------------------\n\nTITLE: Enabling Auto Shift in rules.mk (QMK)\nDESCRIPTION: This snippet demonstrates how to enable the Auto Shift feature by adding a line to the `rules.mk` file in your keymap folder. This is the primary step to activate Auto Shift in your QMK firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/auto_shift.md#_snippet_0\n\nLANGUAGE: makefile\nCODE:\n```\nAUTO_SHIFT_ENABLE = yes\n```\n\n----------------------------------------\n\nTITLE: Custom Keycode with Send String (C)\nDESCRIPTION: This example shows how to create a custom keycode in `keymap.c` that sends the string \"Hello, world!\" followed by a newline character when pressed. The `SEND_STRING` macro is used to send the string.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/send_string.md#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nbool process_record_user(uint16_t keycode, keyrecord_t *record) {\n    switch (keycode) {\n        case SS_HELLO:\n            if (record->event.pressed) {\n                SEND_STRING(\"Hello, world!\\n\");\n            }\n            return false;\n    }\n\n    return true;\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Combo Handling with process_combo_event in QMK - C\nDESCRIPTION: This snippet demonstrates how to use the `process_combo_event` function to add custom handling to combos in QMK Firmware. It defines combos that, when activated, send an email address or clear the current line. This approach allows for more complex actions beyond simply sending keycodes.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/combo.md#_snippet_4\n\nLANGUAGE: c\nCODE:\n```\nenum combo_events {\n  EM_EMAIL,\n  BSPC_LSFT_CLEAR,\n};\n\nconst uint16_t PROGMEM email_combo[] = {KC_E, KC_M, COMBO_END};\nconst uint16_t PROGMEM clear_line_combo[] = {KC_BSPC, KC_LSFT, COMBO_END};\n\ncombo_t key_combos[] = {\n  [EM_EMAIL] = COMBO_ACTION(email_combo),\n  [BSPC_LSFT_CLEAR] = COMBO_ACTION(clear_line_combo),\n};\n/* COMBO_ACTION(x) is same as COMBO(x, KC_NO) */\n\nvoid process_combo_event(uint16_t combo_index, bool pressed) {\n  switch(combo_index) {\n    case EM_EMAIL:\n      if (pressed) {\n        SEND_STRING(\"john.doe@example.com\");\n      }\n      break;\n    case BSPC_LSFT_CLEAR:\n      if (pressed) {\n        tap_code16(KC_END);\n        tap_code16(S(KC_HOME));\n        tap_code16(KC_BSPC);\n      }\n      break;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking for Errors and Anti-Patterns - qmk lint\nDESCRIPTION: Checks over a keyboard and/or keymap and highlights common errors, problems, and anti-patterns. It is directory aware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/cli_commands.md#_snippet_23\n\nLANGUAGE: shell\nCODE:\n```\nqmk lint -kb rominronin/katana60/rev2\n```\n\nLANGUAGE: shell\nCODE:\n```\nqmk lint [-km KEYMAP] [-kb KEYBOARD] [--strict]\n```\n\n----------------------------------------\n\nTITLE: LAYOUT Macro Definition in C\nDESCRIPTION: This C macro `LAYOUT()` maps the keyboard's matrix to physical keys, pre-populating unused switch locations with `KC_NO`. It helps in separating the physical layout definition from the keycode definitions, simplifying keymap creation. The macro takes keycodes as parameters and organizes them into a 2D array matching the keyboard matrix.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/understanding_qmk.md#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n#define LAYOUT( \\\n    k00, k01, k02, k03, \\\n    k10, k11, k12, k13, \\\n    k20, k21, k22, \\\n    k30, k31, k32, k33, \\\n    k40,      k42 \\\n) { \\\n    { k00, k01,   k02, k03   }, \\\n    { k10, k11,   k12, k13   }, \\\n    { k20, k21,   k22, KC_NO }, \\\n    { k30, k31,   k32, k33   }, \\\n    { k40, KC_NO, k42, KC_NO } \\\n}\n```\n\n----------------------------------------\n\nTITLE: Unicode Map Lower/Upper Case Pairs\nDESCRIPTION: This example shows how to define lower and upper case pairs in a Unicode Map. When the key is pressed with shift or capslock, the upper-case variant will be input, otherwise the lower-case.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/unicode.md#_snippet_4\n\nLANGUAGE: c\nCODE:\n```\nconst uint32_t PROGMEM unicode_map[] = {\n    [AE_LOWER] = 0x00E6,  // æ\n    [AE_UPPER] = 0x00C6,  // Æ\n};\n```\n\n----------------------------------------\n\nTITLE: Setting STM32-DFU Bootloader in rules.mk (Make)\nDESCRIPTION: This code snippet configures the build system to use the STM32-DFU bootloader. This setting is necessary for STM32 microcontrollers to ensure compatibility with the STM32's built-in DFU bootloader. Alternatively, `apm32-dfu` can be used for APM32 MCUs.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/flashing.md#_snippet_13\n\nLANGUAGE: make\nCODE:\n```\n# Bootloader selection\nBOOTLOADER = stm32-dfu\n```\n\n----------------------------------------\n\nTITLE: Enabling Basic Unicode\nDESCRIPTION: This snippet demonstrates how to enable Basic Unicode support, which allows input of code points up to `U+7FFF`. This involves adding `UNICODE_ENABLE = yes` to your `rules.mk` file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/unicode.md#_snippet_1\n\nLANGUAGE: makefile\nCODE:\n```\nUNICODE_ENABLE = yes\n```\n\n----------------------------------------\n\nTITLE: Flashing with dfu-programmer via command line\nDESCRIPTION: This snippet provides the commands for flashing a keyboard using `dfu-programmer`. It includes erasing the flash memory, flashing the `.hex` file, and resetting the device. Replace `<mcu>` with the specific microcontroller and `<filename>` with the path to the .hex file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/flashing.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ndfu-programmer <mcu> erase --force\ndfu-programmer <mcu> flash --force <filename>\ndfu-programmer <mcu> reset\n```\n\n----------------------------------------\n\nTITLE: Committing and Pushing Changes to GitHub\nDESCRIPTION: This code snippet outlines the steps to add, commit, and push changes made to the QMK Firmware on a local machine to a forked repository on GitHub. The process involves using `git add .` to stage all modified files, `git commit -m \"adding my keymap\"` to commit the changes with a descriptive message, and `git push` to upload the commits to the remote repository. This workflow ensures that local changes are synchronized with the GitHub fork, allowing for collaboration and contribution to the QMK project.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/getting_started_github.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nuser@computer:~$ git add .\nuser@computer:~$ git commit -m \"adding my keymap\"\n[master cccb1608] adding my keymap\n 1 file changed, 1 insertion(+)\n create mode 100644 keyboards/planck/keymaps/mine/keymap.c\nuser@computer:~$ git push\nCounting objects: 1, done.\nDelta compression using up to 4 threads.\nCompressing objects: 100% (1/1), done.\nWriting objects: 100% (1/1), 1.64 KiB | 0 bytes/s, done.\nTotal 1 (delta 1), reused 0 (delta 0)\nremote: Resolving deltas: 100% (1/1), completed with 1 local objects.\nTo https://github.com/whoeveryouare/qmk_firmware.git\n + 20043e64...7da94ac5 master -> master\n```\n\n----------------------------------------\n\nTITLE: Overriding Key Behavior with process_record_user() (C)\nDESCRIPTION: This snippet demonstrates how to override or supplement the behavior of existing or custom keycodes using the `process_record_user()` function.  The function is called on every key press and release and allows for custom actions to be performed. It shows how to define behavior for a custom keycode (FOO) and supplement the Enter key with a sound.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/custom_quantum_functions.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nbool process_record_user(uint16_t keycode, keyrecord_t *record) {\n  switch (keycode) {\n    case FOO:\n      if (record->event.pressed) {\n        // Do something when pressed\n      } else {\n        // Do something else when release\n      }\n      return false; // Skip all further processing of this key\n    case KC_ENTER:\n      // Play a tone when enter is pressed\n      if (record->event.pressed) {\n        PLAY_SONG(tone_qwerty);\n      }\n      return true; // Let QMK send the enter press/release events\n    default:\n      return true; // Process all other keycodes normally\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Combos with Enum in QMK - C\nDESCRIPTION: This code snippet shows how to define a long list of combos using an `enum` list for better organization in QMK Firmware. It defines combos for ESC, TAB, Left Shift, and a layer modifier. Using an enum improves code readability and maintainability.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/combo.md#_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nenum combos {\n  AB_ESC,\n  JK_TAB,\n  QW_SFT,\n  SD_LAYER\n};\n\nconst uint16_t PROGMEM ab_combo[] = {KC_A, KC_B, COMBO_END};\nconst uint16_t PROGMEM jk_combo[] = {KC_J, KC_K, COMBO_END};\nconst uint16_t PROGMEM qw_combo[] = {KC_Q, KC_W, COMBO_END};\nconst uint16_t PROGMEM sd_combo[] = {KC_S, KC_D, COMBO_END};\n\ncombo_t key_combos[] = {\n  [AB_ESC] = COMBO(ab_combo, KC_ESC),\n  [JK_TAB] = COMBO(jk_combo, KC_TAB),\n  [QW_SFT] = COMBO(qw_combo, KC_LSFT),\n  [SD_LAYER] = COMBO(sd_combo, MO(_LAYER)),\n};\n```\n\n----------------------------------------\n\nTITLE: Sourcing QMK Tab Completion Script - Bash\nDESCRIPTION: This command sources the `qmk_tab_complete.sh` script, enabling tab completion for the QMK CLI for the current user.  The path to the script must be adjusted if `qmk_firmware` is located elsewhere. This is typically added to `.profile` or `.bashrc`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/cli_tab_complete.md#_snippet_0\n\nLANGUAGE: Shell Script\nCODE:\n```\nsource ~/qmk_firmware/util/qmk_tab_complete.sh\n```\n\n----------------------------------------\n\nTITLE: Registering a Keycode in QMK\nDESCRIPTION: This code snippet shows how to register a keycode, effectively simulating a key press, using the `register_code()` function in QMK Firmware. The function takes a keycode constant (e.g., `KC_ESC`, `KC_C`, `KC_LSFT`) as an argument.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/feature_macros.md#_snippet_10\n\nLANGUAGE: c\nCODE:\n```\nregister_code(<kc>);\n```\n\n----------------------------------------\n\nTITLE: Installing QMK CLI using pip (Python)\nDESCRIPTION: This snippet shows how to install the QMK CLI using pip, the Python package installer. It ensures that Python 3.7 or later is installed, then installs the qmk package.  It also includes an optional step to set the QMK_HOME environment variable and run the qmk setup command to clone the qmk_firmware repository.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/cli.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npython3 -m pip install qmk\nexport QMK_HOME='~/qmk_firmware' # Optional, set the location for `qmk_firmware`\nqmk setup  # This will clone `qmk/qmk_firmware` and optionally set up your build environment\n```\n\n----------------------------------------\n\nTITLE: Defining DPI Options for PloopyCo Devices in C\nDESCRIPTION: This snippet demonstrates how to define an array of DPI options for a PloopyCo device using the `PLOOPY_DPI_OPTIONS` macro and set the default DPI with `PLOOPY_DPI_DEFAULT`.  The DPI_CONFIG macro cycles through the options.  These definitions are crucial for configuring the sensitivity and speed of the trackball or mouse. The `PLOOPY_DPI_DEFAULT` define sets the index of the default value in the `PLOOPY_DPI_OPTIONS` array.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ploopyco/readme.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#define PLOOPY_DPI_OPTIONS { 1200, 1600, 2400 }\n#define PLOOPY_DPI_DEFAULT 1\n```\n\n----------------------------------------\n\nTITLE: Defining Matrix Rows in QMK config.h\nDESCRIPTION: This code snippet defines the number of rows in the keyboard's matrix for a QMK firmware project. This setting is configured in the `config.h` file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/config_options.md#_snippet_5\n\nLANGUAGE: c\nCODE:\n```\n#define MATRIX_ROWS 5\n```\n\n----------------------------------------\n\nTITLE: Basic OLED Configuration (C)\nDESCRIPTION: This section provides a list of basic configuration options for the OLED display, which should be placed in `config.h`. It includes settings for brightness, column offset, display clock, font, and other features. These settings allow you to customize the behavior and appearance of the OLED display.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/oled_driver.md#_snippet_8\n\nLANGUAGE: C\nCODE:\n```\n#define OLED_BRIGHTNESS 128\n```\n\n----------------------------------------\n\nTITLE: Defining Modifier Keys to Neutralize in config.h (C)\nDESCRIPTION: This snippet defines a list of modifier key masks to neutralize. By default, only left Alt and left GUI are neutralized. This allows customizing which modifier keys will have a dummy keycode sent between register and unregister events to prevent unintended actions in applications that bind actions to modifier key taps.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/key_overrides.md#_snippet_5\n\nLANGUAGE: c\nCODE:\n```\n#define MODS_TO_NEUTRALIZE { <mod_mask_1>, <mod_mask_2>, ... }\n```\n\n----------------------------------------\n\nTITLE: Configuring PWM Hardware Audio Driver (rules.mk)\nDESCRIPTION: Sets the audio driver to `pwm_hardware` in `rules.mk` to use hardware-based PWM signal generation for audio output on STM32 devices. This requires further configuration in `config.h`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/audio.md#_snippet_9\n\nLANGUAGE: makefile\nCODE:\n```\nAUDIO_DRIVER = pwm_hardware\n```\n\n----------------------------------------\n\nTITLE: Configuring Per-Chord Customization in QMK Firmware (C)\nDESCRIPTION: This code snippet demonstrates how to customize Chordal Hold behavior on a per-chord basis in QMK firmware by defining the `get_chordal_hold()` function. It allows specific chords to be held, while others are treated as taps based on the defined conditions. This overrides the default opposite hands rule for the specified chords.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/tap_hold.md#_snippet_18\n\nLANGUAGE: c\nCODE:\n```\nbool get_chordal_hold(uint16_t tap_hold_keycode, keyrecord_t* tap_hold_record,\n                      uint16_t other_keycode, keyrecord_t* other_record) {\n    // Exceptionally allow some one-handed chords for hotkeys.\n    switch (tap_hold_keycode) {\n        case LCTL_T(KC_Z):\n            if (other_keycode == KC_C || other_keycode == KC_V) {\n                return true;\n            }\n            break;\n\n        case RCTL_T(KC_SLSH):\n            if (other_keycode == KC_N) {\n                return true;\n            }\n            break;\n    }\n    // Otherwise defer to the opposite hands rule.\n    return get_chordal_hold_default(tap_hold_record, other_record);\n}\n```\n\n----------------------------------------\n\nTITLE: Momentary Layer Activation with Modifiers using LM\nDESCRIPTION: This function momentarily activates a layer along with specified modifiers. It only supports layers 0-15. Modifiers are prefixed with `MOD_` and can be combined using bitwise OR. Using right-hand modifiers may affect all listed modifiers.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/feature_layers.md#_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nLM(layer, mod)\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware from Configurator Export - qmk flash\nDESCRIPTION: This command flashes firmware from a JSON export obtained from the QMK Configurator. It supports specifying a bootloader using the `-bl` flag. The `-c` flag may be included to clean before compiling.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/cli_commands.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nqmk flash [-bl <bootloader>] [-c] [-e <var>=<value>] [-j <num_jobs>] <configuratorExport.json>\n```\n\n----------------------------------------\n\nTITLE: Run QMK Setup\nDESCRIPTION: This command initializes the QMK environment. It clones the QMK firmware repository (unless already cloned) and installs any necessary dependencies. It prompts the user for configuration options.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/newbs_getting_started.md#_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nqmk setup\n```\n\n----------------------------------------\n\nTITLE: Defining Command Key Combination in QMK config.h\nDESCRIPTION: This code snippet defines a key combination that allows the use of magic commands for debugging purposes in QMK firmware. This setting is configured in the `config.h` file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/config_options.md#_snippet_28\n\nLANGUAGE: c\nCODE:\n```\n#define IS_COMMAND() (get_mods() == MOD_MASK_SHIFT)\n```\n\n----------------------------------------\n\nTITLE: Defining Quick Tap Term\nDESCRIPTION: Defines the timing (in milliseconds) for using a dual-role key to repeat a keycode. Modifies Tap Toggle functionality (`TT` or One Shot Tap Toggle). Defaults to `TAPPING_TERM` if not defined.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/config_options.md#_snippet_48\n\nLANGUAGE: C\nCODE:\n```\n#define QUICK_TAP_TERM 100\n```\n\n----------------------------------------\n\nTITLE: Compile QMK Firmware (with keyboard/keymap)\nDESCRIPTION: This command compiles the QMK firmware for a specific keyboard and keymap.  This is useful when defaults are not configured, or to override them.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/newbs_building_firmware.md#_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nqmk compile -kb <keyboard> -km <keymap>\n```\n\n----------------------------------------\n\nTITLE: Define Audio Pin, PWM Driver and Channel - C\nDESCRIPTION: This configures the audio pin, PWM driver, and channel for hardware PWM. `AUDIO_PIN` defines the physical pin to be used, `AUDIO_PWM_DRIVER` selects the PWM driver, and `AUDIO_PWM_CHANNEL` specifies the channel within the driver. These definitions are used to route the PWM signal to the desired output.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/audio.md#_snippet_8\n\nLANGUAGE: C\nCODE:\n```\n//config.h:\n#define AUDIO_PIN A8\n#define AUDIO_PWM_DRIVER PWMD1\n#define AUDIO_PWM_CHANNEL 1\n```\n\n----------------------------------------\n\nTITLE: Tap Hold Reset Callback in QMK\nDESCRIPTION: This code defines the `tap_dance_tap_hold_reset` callback function for a tap dance. It unregisters the held keycode, if any, to prevent it from being stuck down.  It depends on the `tap_dance_tap_hold_t` struct being defined.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/tap_dance.md#_snippet_8\n\nLANGUAGE: c\nCODE:\n```\nvoid tap_dance_tap_hold_reset(tap_dance_state_t *state, void *user_data) {\n    tap_dance_tap_hold_t *tap_hold = (tap_dance_tap_hold_t *)user_data;\n\n    if (tap_hold->held) {\n        unregister_code16(tap_hold->held);\n        tap_hold->held = 0;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Install QMK CLI on macOS (Homebrew)\nDESCRIPTION: This command installs the QMK CLI using Homebrew, a package manager for macOS. It utilizes the qmk/qmk tap, which contains the formula for installing QMK and its dependencies.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/newbs_getting_started.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nbrew install qmk/qmk/qmk\n```\n\n----------------------------------------\n\nTITLE: Adding Source Files in rules.mk (Make)\nDESCRIPTION: This snippet demonstrates how to add source files (like `<name>.c`) to the build process using the `rules.mk` file within the QMK userspace.  The `SRC += <name>.c` line includes the specified C file in the compilation. This allows you to add custom functionality to your keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/feature_userspace.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nSRC += <name>.c\n```\n\n----------------------------------------\n\nTITLE: Defining Leader Key Callbacks (QMK)\nDESCRIPTION: This C code defines the `leader_start_user` and `leader_end_user` callbacks.  `leader_start_user` is executed when the Leader key is pressed.  `leader_end_user` is called after the sequence ends, allowing for custom actions based on the entered key sequence.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/leader_key.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nvoid leader_start_user(void) {\n    // Do something when the leader key is pressed\n}\n\nvoid leader_end_user(void) {\n    if (leader_sequence_one_key(KC_F)) {\n        // Leader, f => Types the below string\n        SEND_STRING(\"QMK is awesome.\");\n    } else if (leader_sequence_two_keys(KC_D, KC_D)) {\n        // Leader, d, d => Ctrl+A, Ctrl+C\n        SEND_STRING(SS_LCTL(\"a\") SS_LCTL(\"c\"));\n    } else if (leader_sequence_three_keys(KC_D, KC_D, KC_S)) {\n        // Leader, d, d, s => Types the below string\n        SEND_STRING(\"https://start.duckduckgo.com\\n\");\n    } else if (leader_sequence_two_keys(KC_A, KC_S)) {\n        // Leader, a, s => GUI+S\n        tap_code16(LGUI(KC_S));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure QMK default keyboard\nDESCRIPTION: This command sets the default keyboard in the QMK build environment. It configures the `user.keyboard` setting to a specific keyboard path. Replace `clueboard/66/rev4` with the desired keyboard path relative to the `qmk_firmware/keyboards` directory.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/newbs_building_firmware.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nqmk config user.keyboard=clueboard/66/rev4\n```\n\n----------------------------------------\n\nTITLE: Flash firmware using QMK CLI with keyboard and keymap\nDESCRIPTION: This command allows you to flash your firmware by explicitly specifying the keyboard and keymap if not configured in the CLI, or if you have multiple keyboards.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/newbs_flashing.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nqmk flash -kb <my_keyboard> -km <my_keymap>\n```\n\n----------------------------------------\n\nTITLE: Enabling Per-Key Permissive Hold\nDESCRIPTION: Enables the use of individual permissive hold settings for each key. Allows you to specify which keys use Permissive Hold. Requires `PERMISSIVE_HOLD` to be enabled.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/config_options.md#_snippet_47\n\nLANGUAGE: C\nCODE:\n```\n#define PERMISSIVE_HOLD_PER_KEY\n```\n\n----------------------------------------\n\nTITLE: Configuring Keyboard Matrix Dimensions in Config.h\nDESCRIPTION: This code snippet shows how to configure the keyboard matrix dimensions (number of rows and columns) and whether the matrix has ghosting issues within the `Config.h` file. This configuration is essential for the firmware to scan the keyboard matrix correctly and interpret key presses accurately.  Correctly defining these values is necessary for the keyboard to function.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/tmk_core/readme.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n#define MATRIX_ROWS 8\n#define MATRIX_COLS 8\n#define MATRIX_HAS_GHOST\n```\n\n----------------------------------------\n\nTITLE: Compiling Firmware for Keymaps - qmk compile\nDESCRIPTION: This command compiles firmware for a specified keyboard and keymap. It requires the `-kb` and `-km` flags to specify the keyboard and keymap names, respectively. Optional arguments include `-e` for environment variables and `-j` for parallel compilation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/cli_commands.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nqmk compile [-c] [-e <var>=<value>] [-j <num_jobs>] -kb <keyboard_name> -km <keymap_name>\n```\n\n----------------------------------------\n\nTITLE: Documenting Features Template in Markdown\nDESCRIPTION: This example provides a basic template for documenting new features in QMK Firmware. It includes a page title, a brief description of the feature, and a table listing relevant keycodes with their long name, short name, and description. New documentation pages should be added to `docs/features/<my_cool_feature>.md` and linked in `docs/_sidebar.json`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/documentation_best_practices.md#_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n# My Cool Feature\n\nThis page describes my cool feature. You can use my cool feature to make coffee and order cream and sugar to be delivered via drone.\n\n## My Cool Feature Keycodes\n\n|Long Name|Short Name|Description|\n|---------|----------|-----------|\n|KC_COFFEE||Make Coffee|\n|KC_CREAM||Order Cream|\n|KC_SUGAR||Order Sugar|\n```\n\n----------------------------------------\n\nTITLE: Implementing 'lite' custom matrix functions\nDESCRIPTION: This code shows the required functions for the 'lite' custom matrix implementation in `matrix.c`.  `matrix_init_custom` is for hardware initialization, and `matrix_scan_custom` performs the matrix scanning, returning `true` if the matrix has changed.  Dependencies include the hardware setup specific to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/custom_matrix.md#_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nvoid matrix_init_custom(void) {\n    // TODO: initialize hardware here\n}\n\nbool matrix_scan_custom(matrix_row_t current_matrix[]) {\n    bool matrix_has_changed = false;\n\n    // TODO: add matrix scanning routine here\n\n    return matrix_has_changed;\n}\n```\n\n----------------------------------------\n\nTITLE: Create a new QMK keymap (with keyboard)\nDESCRIPTION: This command creates a new keymap for a specific keyboard.  The `-kb` flag is used to specify the keyboard. If QMK build environment defaults are not set for the keyboard, this is needed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/newbs_building_firmware.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nqmk new-keymap -kb <keyboard_name>\n```\n\n----------------------------------------\n\nTITLE: Enabling Pointing Device Status Synchronization\nDESCRIPTION: This definition enables transmitting the pointing device status to the master side of the split keyboard. The purpose of this feature is to enable the use of pointing devices on the slave side. Additional configuration is required. It is defined in `config.h`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/split_keyboard.md#_snippet_22\n\nLANGUAGE: c\nCODE:\n```\n#define SPLIT_POINTING_ENABLE\n```\n\n----------------------------------------\n\nTITLE: Control Display Power with `qp_power` in C\nDESCRIPTION: The `qp_power` function is used to turn the display panel on or off.  It takes a `painter_device_t` object and a boolean value indicating whether to power on (`true`) or power off (`false`) the display. Note that backlight control is separate.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/quantum_painter.md#_snippet_45\n\nLANGUAGE: c\nCODE:\n```\nbool qp_power(painter_device_t device, bool power_on);\n```\n\n----------------------------------------\n\nTITLE: Defining Slave-Side Handler Function\nDESCRIPTION: This code defines a slave-side handler function for a custom data synchronization transaction. It receives data from the master, processes it, and sends data back to the master. In this example, it adds 5 to the incoming data.  This function needs to be registered using `transaction_register_rpc`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/split_keyboard.md#_snippet_29\n\nLANGUAGE: c\nCODE:\n```\nvoid user_sync_a_slave_handler(uint8_t in_buflen, const void* in_data, uint8_t out_buflen, void* out_data) {\n    const master_to_slave_t *m2s = (const master_to_slave_t*)in_data;\n    slave_to_master_t *s2m = (slave_to_master_t*)out_data;\n    s2m->s2m_data = m2s->m2s_data + 5; // whatever comes in, add 5 so it can be sent back\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Encoder Map in keymap.c (QMK)\nDESCRIPTION: This snippet demonstrates how to define an encoder map in the `keymap.c` file of a QMK Firmware project. The `encoder_map` array maps encoder movements (clockwise and counter-clockwise) to specific keycodes for different layers and encoders. It relies on `ENCODER_MAP_ENABLE` being defined. `NUM_ENCODERS` and `NUM_DIRECTIONS` need to be defined.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/encoders.md#_snippet_10\n\nLANGUAGE: c\nCODE:\n```\n#if defined(ENCODER_MAP_ENABLE)\nconst uint16_t PROGMEM encoder_map[][NUM_ENCODERS][NUM_DIRECTIONS] = {\n    [0] = { ENCODER_CCW_CW(MS_WHLU, MS_WHLD),  ENCODER_CCW_CW(KC_VOLD, KC_VOLU)  },\n    [1] = { ENCODER_CCW_CW(UG_HUED, UG_HUEU),  ENCODER_CCW_CW(UG_SATD, UG_SATU)  },\n    [2] = { ENCODER_CCW_CW(UG_VALD, UG_VALU),  ENCODER_CCW_CW(UG_SPDD, UG_SPDU)  },\n    [3] = { ENCODER_CCW_CW(UG_PREV, UG_NEXT),  ENCODER_CCW_CW(KC_RIGHT, KC_LEFT) },\n};\n#endif\n```\n\n----------------------------------------\n\nTITLE: Tap Dance Action Definition in QMK\nDESCRIPTION: This code defines an array of `tap_dance_action_t` structs, using the `ACTION_TAP_DANCE_TAP_HOLD` macro to configure a specific tap dance action (`CT_CLN`) to send `KC_COLN` on tap and `KC_SCLN` on hold.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/tap_dance.md#_snippet_10\n\nLANGUAGE: c\nCODE:\n```\ntap_dance_action_t tap_dance_actions[] = {\n    [CT_CLN] = ACTION_TAP_DANCE_TAP_HOLD(KC_COLN, KC_SCLN),\n};\n```\n\n----------------------------------------\n\nTITLE: Filtering Remembered Modifiers in QMK (C)\nDESCRIPTION: This code snippet demonstrates how to filter remembered modifiers in QMK firmware using the `remember_last_key_user` callback. It specifically shows how to forget the Shift modifier on letter keys when Shift or AltGr are the only active modifiers. This can prevent unwanted capitalization when repeating shifted letters.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/repeat_key.md#_snippet_7\n\nLANGUAGE: c\nCODE:\n```\nbool remember_last_key_user(uint16_t keycode, keyrecord_t* record,\n                            uint8_t* remembered_mods) {\n    // Forget Shift on letter keys when Shift or AltGr are the only mods.\n    switch (keycode) {\n        case KC_A ... KC_Z:\n            if ((*remembered_mods & ~(MOD_MASK_SHIFT | MOD_BIT(KC_RALT))) == 0) {\n                *remembered_mods &= ~MOD_MASK_SHIFT;\n            }\n            break;\n    }\n\n    return true;\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Feature Definition (Make)\nDESCRIPTION: This snippet demonstrates how to conditionally define a feature (e.g., `MACROS_ENABLED`) using `OPT_DEFS` in `rules.mk`. The `-D` prefix ensures that `MACROS_ENABLED` is defined as a macro during compilation, which can then be used in C/H files to conditionally compile code.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/feature_userspace.md#_snippet_5\n\nLANGUAGE: make\nCODE:\n```\nifeq ($(strip $(MACROS_ENABLED)), yes)\n    OPT_DEFS += -DMACROS_ENABLED\nendif\n```\n\n----------------------------------------\n\nTITLE: Configuring full custom matrix in rules.mk\nDESCRIPTION: This snippet configures the full custom matrix implementation by setting `CUSTOM_MATRIX = yes` in the `rules.mk` file. This enables the complete custom matrix handling, requiring implementation of `matrix_get_row`, `matrix_print`, `matrix_init`, and `matrix_scan` functions.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/custom_matrix.md#_snippet_3\n\nLANGUAGE: make\nCODE:\n```\nCUSTOM_MATRIX = yes\n```\n\n----------------------------------------\n\nTITLE: Defining Dummy Modifier Neutralizer Keycode in config.h (C)\nDESCRIPTION: This code snippet defines a dummy keycode that will be sent in between the register and unregister events of a suppressed modifier. This is done to counteract the issue of modifier key taps triggering actions when using key overrides with suppressed modifiers.  This prevents programs from interpreting the mod suppression induced by key overrides as a lone tap of a modifier key.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/key_overrides.md#_snippet_4\n\nLANGUAGE: c\nCODE:\n```\n#define DUMMY_MOD_NEUTRALIZER_KEYCODE KC_RIGHT_CTRL\n```\n\n----------------------------------------\n\nTITLE: LED Mapping for Single-Color in <keyboardname>.c\nDESCRIPTION: This snippet demonstrates how to map LED indices to specific output pins (SWx_CSx) on the IS31FL3745 driver for single-color LEDs.  It defines a `g_is31fl3745_leds` array of `is31fl3745_led_t` structures. Each structure specifies the driver index and the PWM register address for the LED.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/is31fl3745.md#_snippet_4\n\nLANGUAGE: c\nCODE:\n```\nconst is31fl3745_led_t PROGMEM g_is31fl3745_leds[IS31FL3745_LED_COUNT] = {\n/* Driver\n *   |  V */\n    {0, SW1_CS1},\n    // etc...\n};\n```\n\n----------------------------------------\n\nTITLE: Enabling Layer Lock in rules.mk\nDESCRIPTION: This snippet demonstrates how to enable the Layer Lock feature in the `rules.mk` file of your QMK keyboard firmware. By setting `LAYER_LOCK_ENABLE` to `yes`, you activate the necessary components for Layer Lock functionality.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/layer_lock.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nLAYER_LOCK_ENABLE = yes\n```\n\n----------------------------------------\n\nTITLE: LED mapping for RGB driver (C)\nDESCRIPTION: This code snippet illustrates how to map LED indices to the IS31FL3731 driver outputs for an RGB LED configuration.  It defines a `g_is31fl3731_leds` array of `is31fl3731_led_t` structs, specifying the driver index and PWM register addresses for each color channel (red, green, blue) of each LED.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/is31fl3731.md#_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nconst is31fl3731_led_t PROGMEM g_is31fl3731_leds[IS31FL3731_LED_COUNT] = {\n/* Driver\n *   |  R     G     B */\n    {0, C1_1, C1_2, C1_3},\n    // etc...\n};\n```\n\n----------------------------------------\n\nTITLE: Defining UCIS Symbol Table\nDESCRIPTION: This code demonstrates how to create a mapping table for UCIS in your `keymap.c`. It uses the `UCIS_TABLE` macro to define a table of mnemonics and their corresponding Unicode code points.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/unicode.md#_snippet_6\n\nLANGUAGE: c\nCODE:\n```\nconst ucis_symbol_t ucis_symbol_table[] = UCIS_TABLE(\n    UCIS_SYM(\"poop\", 0x1F4A9),                // 💩\n    UCIS_SYM(\"rofl\", 0x1F923),                // 🤣\n    UCIS_SYM(\"ukr\", 0x1F1FA, 0x1F1E6),        // 🇺🇦\n    UCIS_SYM(\"look\", 0x0CA0, 0x005F, 0x0CA0)  // ಠ_ಠ\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using a Surface in C\nDESCRIPTION: This C code snippet shows an example of initializing a surface and framebuffer, allocating memory using `SURFACE_REQUIRED_BUFFER_BYTE_SIZE` macro and initializing it using `qp_rgb565_make_surface` function. This surface is then initialized for Quantum Painter with `qp_init`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/quantum_painter.md#_snippet_39\n\nLANGUAGE: c\nCODE:\n```\nstatic painter_device_t my_surface;\nstatic uint8_t my_framebuffer[SURFACE_REQUIRED_BUFFER_BYTE_SIZE(240, 80, 16)]; // Allocate a buffer for a 16bpp 240x80 RGB565 display\nvoid keyboard_post_init_kb(void) {\n    my_surface = qp_rgb565_make_surface(240, 80, my_framebuffer);\n    qp_init(my_surface, QP_ROTATION_0);\n    keyboard_post_init_user();\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Auto Shift Release Handler - C\nDESCRIPTION: Defines the custom Auto Shift release handler to unregister specific keycodes based on whether shift is active. This example handles the `KC_DOT` key, unregistering `KC_DOT` when not shifted and `KC_EXLM` when shifted. It also handles retro shift tap keys.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/auto_shift.md#_snippet_8\n\nLANGUAGE: c\nCODE:\n```\nvoid autoshift_release_user(uint16_t keycode, bool shifted, keyrecord_t *record) {\n    switch(keycode) {\n        case KC_DOT:\n            unregister_code16((!shifted) ? KC_DOT : KC_EXLM);\n            break;\n        default:\n            // & 0xFF gets the Tap key for Tap Holds, required when using Retro Shift\n            // The IS_RETRO check isn't really necessary here, always using\n            // keycode & 0xFF would be fine.\n            unregister_code16((IS_RETRO(keycode)) ? keycode & 0xFF : keycode);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Split USB Detection in QMK\nDESCRIPTION: This enables USB connection detection (with timeout) when delegating master/slave roles in a split keyboard. It is the default behavior for ARM-based keyboards and required for AVR Teensy without hardware modifications. It is crucial for proper split keyboard functionality.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/config_options.md#_snippet_98\n\nLANGUAGE: c\nCODE:\n```\n#define SPLIT_USB_DETECT\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware with nuvoisp\nDESCRIPTION: This command installs the nuvoton-isp tool and then uses it to flash the specified firmware file to the keyboard. It requires Python and pip. The firmware file (ducky_one2mini_default.bin) must be present in the current directory or a specified path.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ducky/one2mini/1861st/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\npip install --user nuvoton-isp\nnuvoisp -f ducky_one2mini_default.bin\n```\n\n----------------------------------------\n\nTITLE: Add Keycode to UCIS Buffer - C\nDESCRIPTION: This function adds a keycode to the UCIS (Unicode Composing Input Sequence) input sequence buffer. The keycode must be between `KC_A` and `KC_Z`, or `KC_1` and `KC_0`. It takes a `uint16_t` keycode as input and returns `true` if added successfully.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/unicode.md#_snippet_26\n\nLANGUAGE: C\nCODE:\n```\nbool ucis_add(uint16_t keycode)\n```\n\n----------------------------------------\n\nTITLE: Implementing weak custom matrix callbacks\nDESCRIPTION: This code provides weak implementations for the `matrix_init_kb`, `matrix_scan_kb`, `matrix_init_user`, and `matrix_scan_user` functions. These weak attributes allow the user to override these functions in their keymap or keyboard code without causing a compilation error if they are not defined.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/custom_matrix.md#_snippet_5\n\nLANGUAGE: c\nCODE:\n```\n__attribute__((weak)) void matrix_init_kb(void) { matrix_init_user(); }\n\n__attribute__((weak)) void matrix_scan_kb(void) { matrix_scan_user(); }\n\n__attribute__((weak)) void matrix_init_user(void) {}\n\n__attribute__((weak)) void matrix_scan_user(void) {}\n```\n\n----------------------------------------\n\nTITLE: Toggling Layer Activation using TG\nDESCRIPTION: This function toggles the activation state of a specified layer. If the layer is inactive, it becomes active; if the layer is active, it becomes inactive. `TG` is used to switch between layers on a more permanent basis.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/feature_layers.md#_snippet_6\n\nLANGUAGE: c\nCODE:\n```\nTG(layer)\n```\n\n----------------------------------------\n\nTITLE: Blinking Lighting Layers for Visual Feedback (C)\nDESCRIPTION: This code shows how to create blinking lighting layers for visual feedback, typically to acknowledge actions or toggle settings.  It uses `rgblight_blink_layer` to blink a layer once for a specified duration, or `rgblight_blink_layer_repeat` to blink a layer multiple times. `rgblight_unblink_layer` and `rgblight_unblink_all_but_layer` can be used to stop blinking. Requires `#define RGBLIGHT_LAYER_BLINK` in `config.h` and `rgblight.h`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/rgblight.md#_snippet_7\n\nLANGUAGE: C\nCODE:\n```\nconst rgblight_segment_t PROGMEM _yes_layer[] = RGBLIGHT_LAYER_SEGMENTS( {9, 6, HSV_GREEN} );\nconst rgblight_segment_t PROGMEM _no_layer[] = RGBLIGHT_LAYER_SEGMENTS( {9, 6, HSV_RED} );\n\nconst rgblight_segment_t* const PROGMEM _rgb_layers[] =\n    RGBLIGHT_LAYERS_LIST( _yes_layer, _no_layer );\n\nvoid keyboard_post_init_user(void) {\n    rgblight_layers = _rgb_layers;\n}\n\n// Note we user post_process_record_user because we want the state\n// after the flag has been flipped...\nvoid post_process_record_user(uint16_t keycode, keyrecord_t *record) {\n    switch (keycode) {\n        case QK_DEBUG_TOGGLE:\n            rgblight_blink_layer(debug_enable ? 0 : 1, 500);\n            break;\n\n        case NK_TOGG:\n        case NK_ON:\n        case NK_OFF:\n            rgblight_blink_layer(keymap_config.nkro ? 0 : 1, 500);\n            break;\n    }\n}\n```\n\nLANGUAGE: C\nCODE:\n```\nvoid post_process_record_user(uint16_t keycode, keyrecord_t *record) {\n    switch (keycode) {\n        case QK_DEBUG_TOGGLE:\n            rgblight_blink_layer_repeat(debug_enable ? 0 : 1, 200, 3);\n            break;\n    }\n}\n```\n\nLANGUAGE: C\nCODE:\n```\nrgblight_blink_layer(1, 500);\nrgblight_unblink_all_but_layer(1);\n```\n\nLANGUAGE: C\nCODE:\n```\nrgblight_unblink_layer(3);\nrgblight_blink_layer(2, 500);\n```\n\n----------------------------------------\n\nTITLE: Leader Key Handling (New)\nDESCRIPTION: This code snippet showcases the new way of handling leader key sequences using the `leader_end_user` callback.  The function checks for specific key sequences using `leader_sequence_one_key`, `leader_sequence_two_keys` or `leader_sequence_three_keys` and performs corresponding actions such as sending strings or tapping keycodes.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/ChangeLog/20230226.md#_snippet_4\n\nLANGUAGE: c\nCODE:\n```\nvoid leader_end_user(void) {\n    if (leader_sequence_one_key(KC_F)) {\n        // Leader, f => Types the below string\n        SEND_STRING(\"QMK is awesome.\");\n    } else if (leader_sequence_two_keys(KC_D, KC_D)) {\n        // Leader, d, d => Ctrl+A, Ctrl+C\n        SEND_STRING(SS_LCTL(\"a\") SS_LCTL(\"c\"));\n    } else if (leader_sequence_three_keys(KC_D, KC_D, KC_S)) {\n        // Leader, d, d, s => Types the below string\n        SEND_STRING(\"https://start.duckduckgo.com\\n\");\n    } else if (leader_sequence_two_keys(KC_A, KC_S)) {\n        // Leader, a, s => GUI+S\n        tap_code16(LGUI(KC_S));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Limit Number of Layers in `config.h`\nDESCRIPTION: Limits the maximum number of layers supported by the firmware in `config.h`. This can be set to 8 bits (up to 8 layers) or 16 bits (up to 16 layers). If layers are not used at all, the functionality can be removed altogether.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/squeezing_avr.md#_snippet_9\n\nLANGUAGE: c\nCODE:\n```\n#define LAYER_STATE_8BIT\n```\n\nLANGUAGE: c\nCODE:\n```\n#define LAYER_STATE_16BIT\n```\n\nLANGUAGE: c\nCODE:\n```\n#define NO_ACTION_LAYER\n```\n\n----------------------------------------\n\nTITLE: Defining Matrix Columns in QMK config.h\nDESCRIPTION: This code snippet defines the number of columns in the keyboard's matrix for a QMK firmware project. This setting is configured in the `config.h` file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/config_options.md#_snippet_6\n\nLANGUAGE: c\nCODE:\n```\n#define MATRIX_COLS 15\n```\n\n----------------------------------------\n\nTITLE: LED Mapping for Single-Color Driver (C)\nDESCRIPTION: This C code snippet shows how to map the output pins of the IS31FL3742A single-color driver to specific LEDs. Each `is31fl3742a_led_t` structure maps a driver index and the PWM register address for controlling the brightness of a single LED. The array `g_is31fl3742a_leds` defines the mapping between the driver's outputs and the LEDs.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/is31fl3742a.md#_snippet_5\n\nLANGUAGE: c\nCODE:\n```\nconst is31fl3742a_led_t PROGMEM g_is31fl3742a_leds[IS31FL3742A_LED_COUNT] = {\n/* Driver\n *   |  V */\n    {0, SW1_CS1},\n    // etc...\n};\n```\n\n----------------------------------------\n\nTITLE: Representing Caps Word State (C)\nDESCRIPTION: This code snippet demonstrates how to use the `caps_word_set_user` callback function to get notified when Caps Word turns on or off. This is useful to represent the Caps Word state, e.g., by setting an LED or playing a sound.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/caps_word.md#_snippet_6\n\nLANGUAGE: c\nCODE:\n```\nvoid caps_word_set_user(bool active) {\n    if (active) {\n        // Do something when Caps Word activates.\n    } else {\n        // Do something when Caps Word deactivates.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Mod-Tap Key Combination\nDESCRIPTION: This code defines a Mod-Tap key that activates Left Control and Left Shift when held, and sends Escape when tapped. It utilizes the `MT` macro with combined modifier keys.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/mod_tap.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nMT(MOD_LCTL | MOD_LSFT, KC_ESC)\n```\n\n----------------------------------------\n\nTITLE: Compile Userspace Build Targets (qmk userspace-compile)\nDESCRIPTION: This command compiles all the External Userspace build targets.  It has options for setting environment variables, performing a dry run, cleaning object files, setting parallel jobs, and removing temporary files.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/cli_commands.md#_snippet_37\n\nLANGUAGE: text\nCODE:\n```\nqmk userspace-compile [-h] [-e ENV] [-n] [-c] [-j PARALLEL] [-t]\n```\n\nLANGUAGE: text\nCODE:\n```\n$ qmk userspace-compile\n```\n\n----------------------------------------\n\nTITLE: Reading Host Keyboard LED State in QMK (C)\nDESCRIPTION: This C code snippet demonstrates how to read the Caps Lock LED state from the host computer using the `host_keyboard_led_state()` function in QMK. The function returns an `led_t` struct, which contains boolean values for each LED state. The code extracts the `caps_lock` field from this struct.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/led_indicators.md#_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nbool caps = host_keyboard_led_state().caps_lock;\n```\n\n----------------------------------------\n\nTITLE: Implementing Macros in C File (C)\nDESCRIPTION: This code snippet shows how to implement macros in a C file for QMK firmware. It includes the previously defined header file and defines two functions: `process_record_keymap` (weakly defined) and `process_record_user`. The `process_record_user` function handles the `KC_MAKE` keycode, which compiles the firmware and adds the flash command based on the keyboard bootloader. It sends a string command to execute the compilation, incorporating shift and control modifiers for additional options.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/feature_userspace.md#_snippet_8\n\nLANGUAGE: c\nCODE:\n```\n#include \"<name>.h\"\n\n__attribute__ ((weak))\nbool process_record_keymap(uint16_t keycode, keyrecord_t *record) {\n  return true;\n}\n\nbool process_record_user(uint16_t keycode, keyrecord_t *record) {\n  switch (keycode) {\n    case KC_MAKE:  // Compiles the firmware, and adds the flash command based on keyboard bootloader\n            if (!record->event.pressed) {\n            uint8_t temp_mod = get_mods();\n            uint8_t temp_osm = get_oneshot_mods();\n            clear_mods(); clear_oneshot_mods();\n            SEND_STRING(\"make \" QMK_KEYBOARD \":\" QMK_KEYMAP);\n    #ifndef FLASH_BOOTLOADER\n            if ((temp_mod | temp_osm) & MOD_MASK_SHIFT)\n    #endif\n            {\n                SEND_STRING(\":flash\");\n            }\n            if ((temp_mod | temp_osm) & MOD_MASK_CTRL) {\n                SEND_STRING(\" -j8 --output-sync\");\n            }\n            tap_code(KC_ENT);\n            set_mods(temp_mod);\n        }\n        break;\n\n  }\n  return process_record_keymap(keycode, record);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Serial Driver to USART in rules.mk (Make)\nDESCRIPTION: This snippet configures the QMK firmware to use the USART serial driver for split keyboard communication. It involves setting the SERIAL_DRIVER variable in the rules.mk file. This driver offloads the communication to a USART hardware device, for half-duplex communication.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/serial.md#_snippet_3\n\nLANGUAGE: make\nCODE:\n```\nSERIAL_DRIVER = usart\n```\n\n----------------------------------------\n\nTITLE: Quad Function Tap Dance Implementation in QMK\nDESCRIPTION: This code implements a quad function tap dance, where a single key can perform four different actions based on the number of taps and whether the key is held or tapped.  It defines a static `td_tap_t` to store the state and uses `register_code` and `unregister_code` to send and release keycodes. It registers the X key for a single tap, Control for a single hold, Escape for a double tap, and Alt for a double hold.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/tap_dance.md#_snippet_17\n\nLANGUAGE: c\nCODE:\n```\n// Create an instance of 'td_tap_t' for the 'x' tap dance.\nstatic td_tap_t xtap_state = {\n    .is_press_action = true,\n    .state = TD_NONE\n};\n\nvoid x_finished(tap_dance_state_t *state, void *user_data) {\n    xtap_state.state = cur_dance(state);\n    switch (xtap_state.state) {\n        case TD_SINGLE_TAP: register_code(KC_X); break;\n        case TD_SINGLE_HOLD: register_code(KC_LCTL); break;\n        case TD_DOUBLE_TAP: register_code(KC_ESC); break;\n        case TD_DOUBLE_HOLD: register_code(KC_LALT); break;\n        // Last case is for fast typing. Assuming your key is `f`:\n        // For example, when typing the word `buffer`, and you want to make sure that you send `ff` and not `Esc`.\n        // In order to type `ff` when typing fast, the next character will have to be hit within the `TAPPING_TERM`, which by default is 200ms.\n        case TD_DOUBLE_SINGLE_TAP: tap_code(KC_X); register_code(KC_X); break;\n        default: break;\n    }\n}\n\nvoid x_reset(tap_dance_state_t *state, void *user_data) {\n    switch (xtap_state.state) {\n        case TD_SINGLE_TAP: unregister_code(KC_X); break;\n        case TD_SINGLE_HOLD: unregister_code(KC_LCTL); break;\n        case TD_DOUBLE_TAP: unregister_code(KC_ESC); break;\n        case TD_DOUBLE_HOLD: unregister_code(KC_LALT); break;\n        case TD_DOUBLE_SINGLE_TAP: unregister_code(KC_X); break;\n        default: break;\n    }\n    xtap_state.state = TD_NONE;\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional RGB Feature Inclusion (Make)\nDESCRIPTION: This snippet shows how to conditionally include RGB-related source files in the build based on whether the `RGBLIGHT_ENABLE` feature is enabled.  This is done by checking the value of the `RGBLIGHT_ENABLE` variable in the `rules.mk` file, allowing for flexible feature inclusion based on the keyboard's capabilities.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/feature_userspace.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nifeq ($(strip $(RGBLIGHT_ENABLE)), yes)\n  # Include my fancy rgb functions source here\n  SRC += cool_rgb_stuff.c\nendif\n```\n\n----------------------------------------\n\nTITLE: Overriding Default USART Driver for SERIAL (config.h)\nDESCRIPTION: This code snippet demonstrates how to override the default USART driver for the `SERIAL` subsystem in the `config.h` file. It's needed when using a USART peripheral that isn't the default `SD1` driver. Replace `SD3` with the correct driver name corresponding to the selected USART peripheral, e.g., `SD2`, `SD3`, etc.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/serial.md#_snippet_12\n\nLANGUAGE: C\nCODE:\n```\n#define SERIAL_USART_DRIVER SD3\n```\n\n----------------------------------------\n\nTITLE: Load and Draw Image Example in C\nDESCRIPTION: This example demonstrates how to load an image and draw it on the display during initialization. It loads the image using `qp_load_image_mem` and then draws it on the bottom-right corner of the display.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/quantum_painter.md#_snippet_65\n\nLANGUAGE: c\nCODE:\n```\n// Draw an image on the bottom-right of the 240x320 display on initialisation\nstatic painter_image_handle_t my_image;\nvoid keyboard_post_init_kb(void) {\n    my_image = qp_load_image_mem(gfx_my_image);\n    if (my_image != NULL) {\n```\n\n----------------------------------------\n\nTITLE: Enabling Split Watchdog in QMK\nDESCRIPTION: This enables a watchdog timer on the slave side, which reboots the slave if no communication is received from the master within a specified timeout.  This can resolve issues where both halves incorrectly detect themselves as slaves when using `SPLIT_USB_DETECT`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/config_options.md#_snippet_101\n\nLANGUAGE: c\nCODE:\n```\n#define SPLIT_WATCHDOG_ENABLE\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Alternate Keys (C)\nDESCRIPTION: This function, `get_alt_repeat_key_keycode_user`, allows defining custom alternate keys based on the last pressed keycode and active modifiers. The example demonstrates reversing Ctrl+Y and Ctrl+Z. Returns `KC_TRNS` to use default definitions.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/repeat_key.md#_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nuint16_t get_alt_repeat_key_keycode_user(uint16_t keycode, uint8_t mods) {\n    if ((mods & MOD_MASK_CTRL)) {  // Was Ctrl held?\n        switch (keycode) {\n            case KC_Y: return C(KC_Z);  // Ctrl + Y reverses to Ctrl + Z.\n            case KC_Z: return C(KC_Y);  // Ctrl + Z reverses to Ctrl + Y.\n        }\n    }\n\n    return KC_TRNS;  // Defer to default definitions.\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Key Repeats in QMK (C)\nDESCRIPTION: This code snippet shows how to handle key repeats in QMK firmware using `get_repeat_key_count()` within `process_record_user()`. It demonstrates how to execute different actions based on whether a custom keycode (`MY_MACRO`) is being used normally or is being repeated.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/repeat_key.md#_snippet_9\n\nLANGUAGE: c\nCODE:\n```\nbool process_record_user(uint16_t keycode, keyrecord_t* record) {\n    switch (keycode) {\n        case MY_MACRO:\n            if (get_repeat_key_count() > 0) {\n                // MY_MACRO is being repeated!\n                if (record->event.pressed) {\n                    SEND_STRING(\"repeat!\");    \n                }\n            } else {                          \n                // MY_MACRO is being used normally.\n                if (record->event.pressed) {\n                    SEND_STRING(\"macro\");\n                }\n            }\n            return false;\n     \n        // Other macros...\n    }\n    return true;\n}\n```\n\n----------------------------------------\n\nTITLE: TAP, DOWN, UP Keycodes with SEND_STRING() in C\nDESCRIPTION: This snippet illustrates how to use `SS_TAP()`, `SS_DOWN()`, and `SS_UP()` within `SEND_STRING()` to send key presses and releases for special keys like Ctrl or Home.  It also shows how to combine these with regular strings and delays. The prefix `X_` is used instead of `KC_` for these wrapped keycodes. Requires QMK firmware environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/feature_macros.md#_snippet_4\n\nLANGUAGE: C\nCODE:\n```\nSEND_STRING(SS_TAP(X_HOME));\n\nSEND_STRING(\"VE\"SS_TAP(X_HOME)\"LO\");\n\nSEND_STRING(\"VE\" SS_DELAY(1000) SS_TAP(X_HOME) \"LO\");\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Music Mask in QMK\nDESCRIPTION: This C macro definition allows you to customize the `MUSIC_MASK`, which determines which keycodes are processed as notes in Music Mode.  By default, keycodes less than 0xFF are used.  This example shows how to capture all keycodes, but warns that it will get the user stuck in music mode until restart.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/audio.md#_snippet_20\n\nLANGUAGE: c\nCODE:\n```\n#define MUSIC_MASK keycode != KC_NO\n```\n\n----------------------------------------\n\nTITLE: Modify get_tapping_term for Dynamic Adjustment (C)\nDESCRIPTION: This code snippet demonstrates how to modify the `get_tapping_term` function to work with dynamic tapping term adjustments.  It replaces the static `TAPPING_TERM` with the global variable `g_tapping_term`. Requires `DYNAMIC_TAPPING_TERM_ENABLE` to be set.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/tap_hold.md#_snippet_4\n\nLANGUAGE: C\nCODE:\n```\nuint16_t get_tapping_term(uint16_t keycode, keyrecord_t *record) {\n    switch (keycode) {\n        case SFT_T(KC_SPC):\n           return g_tapping_term + 1250;\n        case LT(1, KC_GRV):\n            return 130;\n        default:\n            return g_tapping_term;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling WS2812 RGBW Support in config.h (C)\nDESCRIPTION: This snippet shows how to enable RGBW support for WS2812 LEDs that have a dedicated white LED.  Defining `WS2812_RGBW` enables the driver to automatically convert RGB data to include the white channel, resulting in more accurate white color rendering. This relies on the application providing RGB data, which this driver then converts.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/ws2812.md#_snippet_2\n\nLANGUAGE: C\nCODE:\n```\n#define WS2812_RGBW\n```\n\n----------------------------------------\n\nTITLE: Enabling Master Side Matrix Mirroring\nDESCRIPTION: This definition enables mirroring of the master side matrix to the slave side. This is useful for features that react or require knowledge of master side key presses on the slave side, such as cosmetic RGB effects.  It is defined in `config.h`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/split_keyboard.md#_snippet_15\n\nLANGUAGE: c\nCODE:\n```\n#define SPLIT_TRANSPORT_MIRROR\n```\n\n----------------------------------------\n\nTITLE: Compiling Helix Pico with RGB Backlight Enabled\nDESCRIPTION: This snippet demonstrates compiling the Helix Pico firmware with RGB backlight enabled directly from the command line and flashing it.  This bypasses the need to edit the `rules.mk` file. Uses a keyboard name `helix/pico/back`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/helix/pico/keymaps/default/readme_jp.md#_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\n$ make helix/pico/back:default:flash\n```\n\n----------------------------------------\n\nTITLE: Enabling ADNS 5050 Sensor Driver (Make)\nDESCRIPTION: This code snippet shows how to enable the ADNS 5050 sensor driver for the Pointing Device feature in QMK Firmware by adding the `POINTING_DEVICE_DRIVER = adns5050` line to the `rules.mk` file. This requires defining the clock, data, and chip select pins in `config.h`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/pointing_device.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nPOINTING_DEVICE_DRIVER = adns5050\n```\n\n----------------------------------------\n\nTITLE: Selecting Vendor (PIO) Driver in rules.mk\nDESCRIPTION: This snippet demonstrates how to select the vendor (PIO) driver for WS2812 LEDs in the `rules.mk` file.  This driver is RP2040-only and uses the PIO (programmable I/O) system and DMA to offload processing from the CPU. Setting the driver to vendor uses the PIO implementation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/ws2812.md#_snippet_5\n\nLANGUAGE: Make\nCODE:\n```\nWS2812_DRIVER = vendor\n```\n\n----------------------------------------\n\nTITLE: Enabling Autocorrect in QMK\nDESCRIPTION: This snippet shows how to enable the Autocorrect feature in your `rules.mk` file. Setting `AUTOCORRECT_ENABLE` to `yes` will enable the autocorrection functionality in your QMK firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/autocorrect.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nAUTOCORRECT_ENABLE = yes\n```\n\n----------------------------------------\n\nTITLE: Defining Tapping Term\nDESCRIPTION: Defines the duration (in milliseconds) before a key press is registered as a hold action. This is a global setting, but can be overridden on a per-key basis using `TAPPING_TERM_PER_KEY`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/config_options.md#_snippet_41\n\nLANGUAGE: C\nCODE:\n```\n#define TAPPING_TERM 200\n```\n\n----------------------------------------\n\nTITLE: Flipping Encoder Direction in config.h (QMK)\nDESCRIPTION: This snippet shows how to flip the direction of an encoder in the `config.h` file of a QMK Firmware project. Defining the `ENCODER_DIRECTION_FLIP` macro reverses the clockwise and counter-clockwise directions of the encoder.  This is useful if the encoder is physically mounted in a way that reverses the intended direction.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/encoders.md#_snippet_3\n\nLANGUAGE: c\nCODE:\n```\n#define ENCODER_DIRECTION_FLIP\n```\n\n----------------------------------------\n\nTITLE: Building Keychron Q8 Firmware using Make\nDESCRIPTION: These `make` commands build the QMK firmware for various Keychron Q8 layouts (ANSI, ANSI with Encoder, ISO, ISO with Encoder) using the default keymap. It requires a configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keychron/q8/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake keychron/q8/ansi:default\n```\n\nLANGUAGE: Makefile\nCODE:\n```\nmake keychron/q8/ansi_encoder:default\n```\n\nLANGUAGE: Makefile\nCODE:\n```\nmake keychron/q8/iso:default\n```\n\nLANGUAGE: Makefile\nCODE:\n```\nmake keychron/q8/iso_encoder:default\n```\n\n----------------------------------------\n\nTITLE: Setting Pointing Device Driver to SPI in rules.mk (Make)\nDESCRIPTION: This snippet illustrates how to set the pointing device driver to `cirque_pinnacle_spi` within the `rules.mk` file, enabling support for Cirque Pinnacle trackpads communicating via SPI.  It necessitates a `rules.mk` file within the user's QMK keymap. This configuration is crucial for initializing the correct SPI communication protocol.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/pointing_device.md#_snippet_8\n\nLANGUAGE: make\nCODE:\n```\nPOINTING_DEVICE_DRIVER = cirque_pinnacle_spi\n```\n\n----------------------------------------\n\nTITLE: Reading Multiple Keys Configuration with QMK CLI\nDESCRIPTION: This snippet demonstrates how to read multiple configuration values at once, in this case, `user`, `compile.keyboard`, and `compile.keymap`. This allows the user to check several related settings with a single command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/cli_configuration.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nqmk config user compile.keyboard compile.keymap\n```\n\n----------------------------------------\n\nTITLE: Tap Dance: LED Control on Multiple Taps in keymap.c\nDESCRIPTION: This code implements a tap dance that controls LEDs based on the tap count. It lights up LEDs one by one on the first three taps, then turns them off on the fourth tap and resets the keyboard.  It requires the `ergodox_right_led_*` functions (specific to Ergodox keyboards) and the QMK core.  It uses `ACTION_TAP_DANCE_FN_ADVANCED` to define separate functions for each tap, when the dance finishes, and on reset. This example demonstrates complex use-cases using tap dance.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/tap_dance.md#_snippet_5\n\nLANGUAGE: c\nCODE:\n```\n// On each tap, light up one LED, from right to left\n// On the fourth tap, turn them off from right to left\nvoid dance_flsh_each(tap_dance_state_t *state, void *user_data) {\n    switch (state->count) {\n        case 1:\n            ergodox_right_led_3_on();\n            break;\n        case 2:\n            ergodox_right_led_2_on();\n            break;\n        case 3:\n            ergodox_right_led_1_on();\n            break;\n        case 4:\n            ergodox_right_led_3_off();\n            wait_ms(50);\n            ergodox_right_led_2_off();\n            wait_ms(50);\n            ergodox_right_led_1_off();\n    }\n}\n\n// On the fourth tap, set the keyboard on flash state\nvoid dance_flsh_finished(tap_dance_state_t *state, void *user_data) {\n    if (state->count >= 4) {\n        reset_keyboard();\n    }\n}\n\n// If the flash state didn't happen, then turn off LEDs, left to right\nvoid dance_flsh_reset(tap_dance_state_t *state, void *user_data) {\n    ergodox_right_led_1_off();\n    wait_ms(50);\n    ergodox_right_led_2_off();\n    wait_ms(50);\n    ergodox_right_led_3_off();\n}\n\n// All tap dances now put together. Example 2 is \"CT_FLSH\"\ntap_dance_action_t tap_dance_actions[] = {\n    [TD_ESC_CAPS] = ACTION_TAP_DANCE_DOUBLE(KC_ESC, KC_CAPS),\n    [CT_EGG] = ACTION_TAP_DANCE_FN(dance_egg),\n    [CT_FLSH] = ACTION_TAP_DANCE_FN_ADVANCED(dance_flsh_each, dance_flsh_finished, dance_flsh_reset)\n};\n```\n\n----------------------------------------\n\nTITLE: Creating New Keymap (QMK CLI)\nDESCRIPTION: Creates a new keymap for the Keyhive Uno rev2 keyboard using the QMK command-line interface. This generates a new directory with the necessary files for customizing the keyboard's functionality.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keyhive/uno/readme.md#_snippet_3\n\nLANGUAGE: QMK CLI\nCODE:\n```\nqmk new-keymap -kb keyhive/uno/rev2\n```\n\n----------------------------------------\n\nTITLE: Remapping Shift + Backspace to Delete in QMK Firmware (C)\nDESCRIPTION: This C code snippet remaps Shift + Backspace to the Delete key in QMK Firmware. It uses `mod_state` to store and restore the modifier state and `delkey_registered` to track the KC_DEL key status. It temporarily removes the shift modifier, registers KC_DEL, restores the shift modifier, and unregisters KC_DEL on release.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/feature_advanced_keycodes.md#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n// Initialize variable holding the binary\n// representation of active modifiers.\nuint8_t mod_state;\nbool process_record_user(uint16_t keycode, keyrecord_t *record) {\n    // Store the current modifier state in the variable for later reference\n    mod_state = get_mods();\n    switch (keycode) {\n\n    case KC_BSPC:\n        {\n        // Initialize a boolean variable that keeps track\n        // of the delete key status: registered or not?\n        static bool delkey_registered;\n        if (record->event.pressed) {\n            // Detect the activation of either shift keys\n            if (mod_state & MOD_MASK_SHIFT) {\n                // First temporarily canceling both shifts so that\n                // shift isn't applied to the KC_DEL keycode\n                del_mods(MOD_MASK_SHIFT);\n                register_code(KC_DEL);\n                // Update the boolean variable to reflect the status of KC_DEL\n                delkey_registered = true;\n                // Reapplying modifier state so that the held shift key(s)\n                // still work even after having tapped the Backspace/Delete key.\n                set_mods(mod_state);\n                return false;\n            }\n        } else { // on release of KC_BSPC\n            // In case KC_DEL is still being sent even after the release of KC_BSPC\n            if (delkey_registered) {\n                unregister_code(KC_DEL);\n                delkey_registered = false;\n                return false;\n            }\n        }\n        // Let QMK process the KC_BSPC keycode as usual outside of shift\n        return true;\n    }\n\n    }\n    return true;\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Pointing Device Driver in rules.mk (Make)\nDESCRIPTION: This snippet shows how to define the pointing device driver in the `rules.mk` file to enable Cirque Pinnacle trackpad support, selecting either I2C or SPI communication.  It requires a `rules.mk` file in your QMK keymap. Selecting the appropriate driver is essential for the firmware to communicate with the trackpad.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/pointing_device.md#_snippet_7\n\nLANGUAGE: make\nCODE:\n```\nPOINTING_DEVICE_DRIVER = cirque_pinnacle_i2c\n```\n\n----------------------------------------\n\nTITLE: Configuring QMK Behavior - qmk config\nDESCRIPTION: This command allows configuring the behavior of QMK.  The optional `-ro` flag sets the configuration to read-only. Followed by one or more configuration tokens.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/cli_commands.md#_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nqmk config [-ro] [config_token1] [config_token2] [...] [config_tokenN]\n```\n\n----------------------------------------\n\nTITLE: Enabling Strict Key Processing (QMK)\nDESCRIPTION: This snippet configures strict key processing for leader sequences in `config.h`. When enabled with `LEADER_KEY_STRICT_KEY_PROCESSING`, the full keycode of Mod-Taps and Layer-Taps is added to the sequence buffer, rather than just the 'tap' keycode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/leader_key.md#_snippet_7\n\nLANGUAGE: C\nCODE:\n```\n#define LEADER_KEY_STRICT_KEY_PROCESSING\n```\n\n----------------------------------------\n\nTITLE: Get Unicode Map Index - C\nDESCRIPTION: This function gets the index into the `unicode_map` array for a given keycode. It respects the shift state for pair keycodes. It takes a `uint16_t` keycode as input.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/unicode.md#_snippet_20\n\nLANGUAGE: C\nCODE:\n```\nuint8_t unicodemap_index(uint16_t keycode)\n```\n\n----------------------------------------\n\nTITLE: Defining the Base Layer Keymap\nDESCRIPTION: This snippet defines the base layer keymap for the Navpad 1.0. It shows the assignment of various keys, including standard keys, media keys, and navigation keys. LT(1,KC_PENT) defines a key that acts as KC_PENT when tapped, and switches to layer 1 (FN1) when held.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/yushakobo/navpad/10/keymaps/default/readme.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n   ,-------------------------------. ,-------.\n   | KC_PSCR  | KC_SCRL  | KC_PAUS | |KC_MUTE|\n   |----------+----------+----------+-------------------------------------------------.\n   | KC_INS   | KC_HOME  | KC_PGUP  | KC_ESC   | KC_PSLS   | KC_PAST  | KC_PMNS       |\n   |----------+----------+----------+----------+-----------+----------+---------------|\n   | KC_DEL   | KC_END   | KC_PGDN  | KC_P7    | KC_P8     | KC_P9    | KC_PPLS       |\n   `--------------------------------+----------+-----------+----------+---------------|\n                                    | KC_P4    | KC_P5     | KC_P6    | KC_PPLS       |\n   ,--------------------------------+----------+-----------+----------+---------------|\n   | S(KC_TAB)| KC_UP    | KC_TAB   | KC_P1    | KC_P2     | KC_P3    | LT(1,KC_PENT) |\n   |----------+----------+----------+----------+-----------+----------+---------------|\n   | KC_LEFT  | KC_DOWN  | KC_RGHT  | KC_P0    | TAP_00    | KC_PDOT  | LT(1,KC_PENT) |\n   '----------------------------------------------------------------------------------`\n```\n\n----------------------------------------\n\nTITLE: Enabling Tone Multiplexing (config.h)\nDESCRIPTION: Enables the tone multiplexing feature by defining `AUDIO_ENABLE_TONE_MULTIPLEXING` and sets the default multiplexing rate using `AUDIO_TONE_MULTIPLEXING_RATE_DEFAULT`. This feature allows playing multiple tones (e.g. chords) on a single speaker.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/audio.md#_snippet_11\n\nLANGUAGE: c\nCODE:\n```\n#define AUDIO_ENABLE_TONE_MULTIPLEXING\n#define AUDIO_TONE_MULTIPLEXING_RATE_DEFAULT 10\n```\n\n----------------------------------------\n\nTITLE: Enabling I2C Driver in QMK Firmware\nDESCRIPTION: This snippet illustrates how to enable the I2C driver in QMK Firmware. The old method of adding `i2c_master.c` to either `SRC` or `QUANTUM_LIB_SRC` is replaced with `I2C_DRIVER_REQUIRED = yes`. The build system then includes the necessary files based on this flag.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/ChangeLog/20231126.md#_snippet_3\n\nLANGUAGE: Makefile\nCODE:\n```\nI2C_DRIVER_REQUIRED = yes\n```\n\n----------------------------------------\n\nTITLE: Defining and Associating Tap Dance Actions (Example 5)\nDESCRIPTION: This code snippet defines the `tap_dance_actions` array and associates the `ALT_LP` keycode with the `altlp_finished` and `altlp_reset` functions. This array is used by QMK to handle the tap dance functionality for the specified keycode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/tap_dance.md#_snippet_21\n\nLANGUAGE: c\nCODE:\n```\n// Define `ACTION_TAP_DANCE_FN_ADVANCED()` for each tapdance keycode, passing in `finished` and `reset` functions\ntap_dance_action_t tap_dance_actions[] = {\n    [ALT_LP] = ACTION_TAP_DANCE_FN_ADVANCED(NULL, altlp_finished, altlp_reset)\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing OLED Display (C)\nDESCRIPTION: This function initializes the OLED display and sets the initial rotation.  It returns true if the initialization was successful, false otherwise. It takes an `oled_rotation_t` enum as input to specify the desired rotation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/oled_driver.md#_snippet_11\n\nLANGUAGE: c\nCODE:\n```\n// Initialize the oled display, rotating the rendered output based on the define passed in.\n// Returns true if the OLED was initialized successfully\nbool oled_init(oled_rotation_t rotation);\n```\n\n----------------------------------------\n\nTITLE: Setting RGB Underglow based on Layer - C\nDESCRIPTION: This code snippet demonstrates how to set the RGB underglow lights based on the active layer using the Planck keyboard as an example.  It utilizes a switch statement to determine which color to set based on the highest active layer. Dependencies include rgblight functions.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/feature_layers.md#_snippet_11\n\nLANGUAGE: c\nCODE:\n```\nlayer_state_t layer_state_set_user(layer_state_t state) {\n    switch (get_highest_layer(state)) {\n    case _RAISE:\n        rgblight_setrgb (0x00,  0x00, 0xFF);\n        break;\n    case _LOWER:\n        rgblight_setrgb (0xFF,  0x00, 0x00);\n        break;\n    case _PLOVER:\n        rgblight_setrgb (0x00,  0xFF, 0x00);\n        break;\n    case _ADJUST:\n        rgblight_setrgb (0x7A,  0x00, 0xFF);\n        break;\n    default: //  for any other layers, or the default layer\n        rgblight_setrgb (0x00,  0xFF, 0xFF);\n        break;\n    }\n  return state;\n}\n```\n\n----------------------------------------\n\nTITLE: Global Current Control Configuration (C)\nDESCRIPTION: This C code snippet shows how to adjust the global current control value for the IS31FL3742A in `config.h`. This setting controls the current sunk by the `CSx` pins, allowing you to reduce the overall brightness and power consumption of the LEDs. The value ranges from 0 to 255.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/is31fl3742a.md#_snippet_3\n\nLANGUAGE: c\nCODE:\n```\n#define IS31FL3742A_GLOBAL_CURRENT 0xFF\n```\n\n----------------------------------------\n\nTITLE: Tapping a Keycode with Delay in QMK\nDESCRIPTION: This example demonstrates how to tap a keycode with a specified delay between the press and release events, using the `tap_code_delay()` function in QMK Firmware.  The function takes a keycode constant and a delay in milliseconds as arguments.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/feature_macros.md#_snippet_13\n\nLANGUAGE: c\nCODE:\n```\ntap_code_delay(<kc>, <delay>);\n```\n\n----------------------------------------\n\nTITLE: Getting OLED Dimensions (C)\nDESCRIPTION: These functions return the maximum number of characters and lines that can fit on the OLED display. These can vary depending on the specific display being used.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/oled_driver.md#_snippet_35\n\nLANGUAGE: c\nCODE:\n```\n// Returns the maximum number of characters that will fit on a line\nuint8_t oled_max_chars(void);\n\n// Returns the maximum number of lines that will fit on the OLED\nuint8_t oled_max_lines(void);\n```\n\n----------------------------------------\n\nTITLE: Custom Permissive Hold Function\nDESCRIPTION: This C code defines a custom `get_permissive_hold` function to selectively enable permissive hold for specific keycodes. It checks the keycode and returns `true` to enable hold action or `false` to disable it when another key is tapped within the tapping term. In this example, hold action is enabled for `LT(1, KC_BSPC)`\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/tap_hold.md#_snippet_7\n\nLANGUAGE: c\nCODE:\n```\nbool get_permissive_hold(uint16_t keycode, keyrecord_t *record) {\n    switch (keycode) {\n        case LT(1, KC_BSPC):\n            // Immediately select the hold action when another key is tapped.\n            return true;\n        default:\n            // Do not select the hold action when another key is tapped.\n            return false;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: DIP Switch Callback in keyboard.c\nDESCRIPTION: This snippet shows the `dip_switch_update_kb` callback function that can be implemented in the `<keyboard>.c` file. It calls the user-defined callback function `dip_switch_update_user` and returns its result.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/dip_switch.md#_snippet_5\n\nLANGUAGE: C\nCODE:\n```\nbool dip_switch_update_kb(uint8_t index, bool active) { \n    if (!dip_switch_update_user(index, active)) { return false; }\n    return true;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Raw HID Usage Page and ID in config.h\nDESCRIPTION: This snippet shows how to configure the HID Usage Page and Usage ID for the Raw HID interface in the `config.h` file.  These values define the specific HID endpoint that the host computer will use to communicate with the keyboard. The default values can be overridden to avoid conflicts with other HID devices.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/rawhid.md#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n|Define          |Default |Description                            |\n|----------------|--------|---------------------------------------|\n|`RAW_USAGE_PAGE`|`0xFF60`|The usage page of the Raw HID interface|\n|`RAW_USAGE_ID`  |`0x61`  |The usage ID of the Raw HID interface  |\n```\n\n----------------------------------------\n\nTITLE: Layer Tap-Toggle using TT\nDESCRIPTION: This function acts as both a momentary layer switch and a layer toggle. Holding the key activates the layer momentarily. Repeatedly tapping the key toggles the layer on or off. The number of taps required to toggle can be configured with `TAPPING_TOGGLE`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/feature_layers.md#_snippet_8\n\nLANGUAGE: c\nCODE:\n```\nTT(layer)\n```\n\n----------------------------------------\n\nTITLE: Defining Matrix IO Delay in QMK config.h\nDESCRIPTION: This code snippet defines the delay in microseconds between changing matrix pin state and reading values in QMK firmware. This setting is configured in the `config.h` file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/config_options.md#_snippet_9\n\nLANGUAGE: c\nCODE:\n```\n#define MATRIX_IO_DELAY 30\n```\n\n----------------------------------------\n\nTITLE: Host LED Status Indicator (Caps Lock) in C\nDESCRIPTION: This code snippet demonstrates how to indicate the Host LED status (specifically Caps Lock) by lighting up a specific LED. It checks the Caps Lock state and sets the color of LED #5 to white if it's on, and turns it off otherwise.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/rgb_matrix.md#_snippet_10\n\nLANGUAGE: c\nCODE:\n```\nbool rgb_matrix_indicators_advanced_user(uint8_t led_min, uint8_t led_max) {\n    if (host_keyboard_led_state().caps_lock) {\n        RGB_MATRIX_INDICATOR_SET_COLOR(5, 255, 255, 255); // assuming caps lock is at led #5\n    } else {\n        RGB_MATRIX_INDICATOR_SET_COLOR(5, 0, 0, 0);\n    }\n    return false;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating keymap.json from keymap.c - qmk c2json\nDESCRIPTION: Creates a keymap.json file from a keymap.c.  Parsing C source files is not easy, therefore this subcommand may not work with your keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/cli_commands.md#_snippet_22\n\nLANGUAGE: shell\nCODE:\n```\nqmk c2json -km default -kb handwired/dactyl_promicro\n```\n\nLANGUAGE: shell\nCODE:\n```\nqmk c2json keyboards/handwired/dactyl_promicro/keymaps/default/keymap.c\n```\n\nLANGUAGE: shell\nCODE:\n```\nqmk c2json -km KEYMAP -kb KEYBOARD [-q] [--no-cpp] [-o OUTPUT] filename\n```\n\n----------------------------------------\n\nTITLE: Disabling Print Messages in config.h\nDESCRIPTION: This code snippet shows how to disable print and user print messages in the `config.h` file to reduce the .hex file size. By defining `NO_PRINT`, both print and user print messages will be excluded from the compiled firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/getting_started_make_guide.md#_snippet_3\n\nLANGUAGE: C\nCODE:\n```\n#define NO_PRINT\n```\n\n----------------------------------------\n\nTITLE: Clean Build Folder (qmk clean)\nDESCRIPTION: This command cleans up the `.build` folder. The `--all` option deletes all .hex or .bin files in the `qmk_firmware` directory.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/cli_commands.md#_snippet_29\n\nLANGUAGE: text\nCODE:\n```\nqmk clean [-a]\n```\n\n----------------------------------------\n\nTITLE: Defining Per-Key Hold On Other Key Press Function\nDESCRIPTION: This function allows you to customize the hold behavior for individual keycodes when another key is pressed. It returns `true` to immediately select the hold action, or `false` to select the tap action by default, providing granular control over dual-role key behavior.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/tap_hold.md#_snippet_10\n\nLANGUAGE: c\nCODE:\n```\nbool get_hold_on_other_key_press(uint16_t keycode, keyrecord_t *record) {\n    switch (keycode) {\n        case LT(1, KC_BSPC):\n            // Immediately select the hold action when another key is pressed.\n            return true;\n        default:\n            // Do not select the hold action when another key is pressed.\n            return false;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Analog Joystick Axes\nDESCRIPTION: This snippet demonstrates how to configure analog joystick axes within a `keymap.c` file by using the `joystick_config_t` array.  The X axis is configured to read input from pin `A4`, mapping analog values between 900 and 285 to the range of -127 to 127. The Y axis is defined as a virtual axis, requiring manual updates to its value via code.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/joystick.md#_snippet_4\n\nLANGUAGE: c\nCODE:\n```\njoystick_config_t joystick_axes[JOYSTICK_AXIS_COUNT] = {\n    JOYSTICK_AXIS_IN(A4, 900, 575, 285),\n    JOYSTICK_AXIS_VIRTUAL\n};\n```\n\n----------------------------------------\n\nTITLE: Enabling Hold on Other Key Press\nDESCRIPTION: Selects the hold action of a dual-role key as soon as the tap of the dual-role key is interrupted by the press of another key.  Provides more responsive hold actions. Requires a dual-role key to be defined.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/config_options.md#_snippet_50\n\nLANGUAGE: C\nCODE:\n```\n#define HOLD_ON_OTHER_KEY_PRESS\n```\n\n----------------------------------------\n\nTITLE: Playing a Custom Song\nDESCRIPTION: Shows how to play a custom song using the `PLAY_SONG` macro.  The defined song `my_song` will be played when this code is executed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/audio.md#_snippet_14\n\nLANGUAGE: c\nCODE:\n```\nPLAY_SONG(my_song);\n```\n\n----------------------------------------\n\nTITLE: Enabling Raw HID in rules.mk\nDESCRIPTION: This snippet shows how to enable Raw HID functionality in the `rules.mk` file.  This is a necessary step to activate the Raw HID feature within the QMK firmware build process. Without this line, the Raw HID functionality will not be included in the compiled firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/rawhid.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nRAW_ENABLE = yes\n```\n\n----------------------------------------\n\nTITLE: Stepping to Previous LED Matrix Effect (C)\nDESCRIPTION: This function moves to the previous enabled LED matrix effect. The new effect is saved to EEPROM.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/led_matrix.md#_snippet_22\n\nLANGUAGE: C\nCODE:\n```\nvoid led_matrix_step_reverse(void)\n```\n\n----------------------------------------\n\nTITLE: Flashing Keyboard Firmware\nDESCRIPTION: This command flashes the built firmware onto the Satisfaction75 keyboard (rev1) with the default keymap. It depends on a properly configured QMK build environment and a connected keyboard in flashable mode.  The 'make' command with the 'flash' target initiates the flashing process.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cannonkeys/satisfaction75/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake cannonkeys/satisfaction75/rev1:default:flash\n```\n\n----------------------------------------\n\nTITLE: Enabling Unicode Common Module\nDESCRIPTION: This code snippet demonstrates how to enable the common Unicode module in the keymap's `rules.mk` file. This is a prerequisite for using any of the Unicode input methods.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/unicode.md#_snippet_0\n\nLANGUAGE: makefile\nCODE:\n```\nUNICODE_COMMON = yes\n```\n\n----------------------------------------\n\nTITLE: Example Compile Usage 3 - qmk compile\nDESCRIPTION: This example demonstrates compiling the colemak keymap for the gh60/satan keyboard after navigating to the appropriate directory.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/cli_commands.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ cd ~/qmk_firmware/keyboards/gh60/satan/keymaps/colemak\n$ qmk compile\nΨ Compiling keymap with make gh60/satan:colemak\n...\n```\n\n----------------------------------------\n\nTITLE: Stepping to Next LED Matrix Effect (C)\nDESCRIPTION: This function advances to the next enabled LED matrix effect in the sequence. The new effect is persisted to EEPROM.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/led_matrix.md#_snippet_20\n\nLANGUAGE: C\nCODE:\n```\nvoid led_matrix_step(void)\n```\n\n----------------------------------------\n\nTITLE: Momentary Layer Activation with MO\nDESCRIPTION: This function momentarily activates a specified layer. The layer remains active only while the key is held down, and is deactivated as soon as the key is released. It is often used to access symbols, numbers, or other less-frequently used keys.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/feature_layers.md#_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nMO(layer)\n```\n\n----------------------------------------\n\nTITLE: Defining Product Name in QMK config.h\nDESCRIPTION: This code snippet defines the product name (keyboard name) for a QMK firmware project. This setting is configured in the `config.h` file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/config_options.md#_snippet_4\n\nLANGUAGE: c\nCODE:\n```\n#define PRODUCT \"Board\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Analog Driver in QMK\nDESCRIPTION: This snippet shows how to enable the analog driver in your QMK keyboard firmware by adding a line to your `rules.mk` file.  This ensures that the ADC driver is included during the build process, allowing you to use its functions and features.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/adc.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nANALOG_DRIVER_REQUIRED = yes\n```\n\n----------------------------------------\n\nTITLE: Setting OLED Driver Type (Makefile)\nDESCRIPTION: This snippet demonstrates how to specify the OLED driver type in the `rules.mk` file. Setting `OLED_DRIVER = ssd1306` configures the firmware to use the `ssd1306` driver, compatible with SSD1306, SH1106, and SH1107 OLED controllers. This setting is essential for ensuring proper communication and display functionality.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/oled_driver.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nOLED_DRIVER = ssd1306\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Encoder Behavior in keyboard.c (QMK)\nDESCRIPTION: This snippet demonstrates how to override the default encoder behavior using the `encoder_update_kb` function in `<keyboard>.c`. The function takes the encoder index and rotation direction as input and performs custom actions based on these parameters. The function calls the user defined `encoder_update_user`, and only executes code if the user function returns `true` or doesn't exist.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/encoders.md#_snippet_12\n\nLANGUAGE: c\nCODE:\n```\nbool encoder_update_kb(uint8_t index, bool clockwise) {\n    if (!encoder_update_user(index, clockwise)) {\n      return false; /* Don't process further events if user function exists and returns false */\n    }\n    if (index == 0) { /* First encoder */\n        if (clockwise) {\n            tap_code(KC_PGDN);\n        } else {\n            tap_code(KC_PGUP);\n        }\n    } else if (index == 1) { /* Second encoder */\n        if (clockwise) {\n            rgb_matrix_increase_hue();\n        } else {\n            rgb_matrix_decrease_hue();\n        }\n    }\n    return true;\n}\n```\n\n----------------------------------------\n\nTITLE: Selecting SPI Driver in rules.mk\nDESCRIPTION: This snippet demonstrates how to select the SPI driver for WS2812 LEDs in the `rules.mk` file.  This driver is ARM-only and uses the SPI peripheral and DMA to offload processing from the CPU. The DI pin of the LEDs must be connected to the MOSI pin of the MCU.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/ws2812.md#_snippet_7\n\nLANGUAGE: Make\nCODE:\n```\nWS2812_DRIVER = spi\n```\n\n----------------------------------------\n\nTITLE: Cloning QMK Firmware Repository using Git\nDESCRIPTION: This code snippet demonstrates how to clone a forked QMK Firmware repository from GitHub to a local machine using the `git clone` command with the `--recurse-submodules` option. The command initializes the cloning process, downloads the repository contents, and checks out the necessary submodules. This allows users to have a complete copy of the QMK Firmware source code on their local system to make modifications and build custom keymaps.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/getting_started_github.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nuser@computer:~$ git clone --recurse-submodules https://github.com/whoeveryouare/qmk_firmware.git\nCloning into 'qmk_firmware'...\nremote: Enumerating objects: 9, done.\nremote: Counting objects: 100% (9/9), done.\nremote: Compressing objects: 100% (5/5), done.\nremote: Total 183883 (delta 5), reused 4 (delta 4), pack-reused 183874\nReceiving objects: 100% (183883/183883), 132.90 MiB | 9.57 MiB/s, done.\nResolving deltas: 100% (119972/119972), done.\n...\nSubmodule path 'lib/chibios': checked out '587968d6cbc2b0e1c7147540872f2a67e59ca18b'\nSubmodule path 'lib/chibios-contrib': checked out 'ede48346eee4b8d6847c19bc01420bee76a5e486'\nSubmodule path 'lib/googletest': checked out 'ec44c6c1675c25b9827aacd08c02433cccde7780'\nSubmodule path 'lib/lufa': checked out 'ce10f7642b0459e409839b23cc91498945119b4d'\n```\n\n----------------------------------------\n\nTITLE: Generating Autocorrect Data\nDESCRIPTION: This snippet shows the command to generate the `autocorrect_data.h` file from a text file containing the autocorrection rules. The `qmk generate-autocorrect-data` command processes the text file and creates the C header file with the trie library.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/autocorrect.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nqmk generate-autocorrect-data autocorrect_dictionary.txt\n```\n\n----------------------------------------\n\nTITLE: Configuring One Shot Key Behavior in QMK config.h\nDESCRIPTION: This code snippet demonstrates how to configure the behavior of one-shot keys by defining `ONESHOT_TAP_TOGGLE` and `ONESHOT_TIMEOUT` in the `config.h` file. `ONESHOT_TAP_TOGGLE` controls the number of taps required to lock a key, while `ONESHOT_TIMEOUT` defines the time (in ms) before a one-shot key is released.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/one_shot_keys.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#define ONESHOT_TAP_TOGGLE 5  /* Tapping this number of times holds the key until tapped once again. */\n#define ONESHOT_TIMEOUT 5000  /* Time (in ms) before the one shot key is released */\n```\n\n----------------------------------------\n\nTITLE: Setting Soft Serial Communication Pin\nDESCRIPTION: This definition sets the pin used for serial communication between the split keyboard halves. It should be defined in `config.h`.  If using serial communication, and I2C is also enabled, the pin must be different than D0 and D1, as those are used for I2C.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/split_keyboard.md#_snippet_10\n\nLANGUAGE: c\nCODE:\n```\n#define SOFT_SERIAL_PIN D0\n```\n\n----------------------------------------\n\nTITLE: Mapping Single-Color LEDs using is31fl3236_led_t in C\nDESCRIPTION: This C code snippet illustrates how to map single-color LEDs to specific outputs of the IS31FL3236 driver. The `g_is31fl3236_leds` array links LED indices to the driver's output pins for brightness control. `IS31FL3236_LED_COUNT` needs to be defined with the amount of single-color LEDs.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/is31fl3236.md#_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nconst is31fl3236_led_t PROGMEM g_is31fl3236_leds[IS31FL3236_LED_COUNT] = {\n/* Driver\n     |  V */\n    {0, OUT1},\n    // etc...\n};\n```\n\n----------------------------------------\n\nTITLE: Inverting Handedness by Pin Logic in config.h (C)\nDESCRIPTION: This code snippet demonstrates how to invert the logic for handedness determination when using a pin.  Adding `SPLIT_HAND_PIN_LOW_IS_LEFT` to the `config.h` file will cause a low signal on the configured pin to indicate the left hand.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/split_keyboard.md#_snippet_3\n\nLANGUAGE: c\nCODE:\n```\n#define\tSPLIT_HAND_PIN_LOW_IS_LEFT\n```\n\n----------------------------------------\n\nTITLE: Undefining and Redefining Macro in C\nDESCRIPTION: This code snippet demonstrates how to override a setting defined in a previous `config.h` file within the QMK firmware.  It first undefines the existing macro `MY_SETTING` using `#undef`, then redefines it with a new value using `#define`. This allows keymaps to customize settings inherited from keyboard or userspace configurations.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/getting_started_introduction.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n#pragma once\n\n// overrides go here!\n#undef MY_SETTING\n#define MY_SETTING 4\n```\n\n----------------------------------------\n\nTITLE: Defining Vendor ID in QMK config.h\nDESCRIPTION: This code snippet defines the Vendor ID (VID) for a USB device in the QMK firmware configuration. The VID is a unique identifier assigned to a vendor, and for most DIY projects, any value can be used. This setting is configured in the `config.h` file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/config_options.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#define VENDOR_ID 0x1234\n```\n\n----------------------------------------\n\nTITLE: Custom Auto Shifted Keys (QMK, C)\nDESCRIPTION: This snippet illustrates how to define specific keys to be automatically shifted using the `get_custom_auto_shifted_key` function.  This allows you to override the default auto-shift behaviour for individual keys. You can define specific keys like `KC_DOT` to always be shifted.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/auto_shift.md#_snippet_4\n\nLANGUAGE: c\nCODE:\n```\nbool get_custom_auto_shifted_key(uint16_t keycode, keyrecord_t *record) {\n    switch(keycode) {\n        case KC_DOT:\n            return true;\n        default:\n            return false;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Open current folder in Windows Explorer\nDESCRIPTION: This command opens the current directory in Windows Explorer. It's useful for quickly accessing the folder containing the compiled firmware file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/newbs_flashing.md#_snippet_0\n\nLANGUAGE: batch\nCODE:\n```\nstart .\n```\n\n----------------------------------------\n\nTITLE: Makefile Configuration for Debugging (Makefile)\nDESCRIPTION: This Makefile snippet configures the QMK Firmware build process for debugging. It enables debug information, disables link-time optimization, and sets the optimization level to 'g'. These settings ensure that the generated firmware contains debugging symbols and is not aggressively optimized, allowing for breakpoints and variable inspection during debugging. This configuration needs to be added to the keyboard's `rules.mk` file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/other_vscode.md#_snippet_3\n\nLANGUAGE: makefile\nCODE:\n```\n# Enable debug information in the final binaries\nDEBUG_ENABLE = yes\n# Disable optimisations for debugging purposes\nLTO_ENABLE = no\nOPT = g\n```\n\n----------------------------------------\n\nTITLE: Defining Backlight Pin in QMK config.h\nDESCRIPTION: This code snippet defines the pin used for controlling the backlight in QMK firmware. This setting is configured in the `config.h` file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/config_options.md#_snippet_21\n\nLANGUAGE: c\nCODE:\n```\n#define BACKLIGHT_PIN B7\n```\n\n----------------------------------------\n\nTITLE: Load Font from Memory (C)\nDESCRIPTION: This snippet defines the `qp_load_font_mem` function, which loads a QFF font from memory or flash.  It returns a handle to the font, which is required for text measurement and drawing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/quantum_painter.md#_snippet_73\n\nLANGUAGE: c\nCODE:\n```\npainter_font_handle_t qp_load_font_mem(const void *buffer);\n```\n\n----------------------------------------\n\nTITLE: Enabling Split Watchdog Timer - C\nDESCRIPTION: This code snippet enables a software watchdog timer on the slave side of a split keyboard. If no communication is received from the master within `SPLIT_WATCHDOG_TIMEOUT`, the slave reboots. Useful when `SPLIT_USB_DETECT` incorrectly assigns both sides as slaves.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/split_keyboard.md#_snippet_42\n\nLANGUAGE: c\nCODE:\n```\n#define SPLIT_WATCHDOG_ENABLE\n```\n\n----------------------------------------\n\nTITLE: Generating RGB Breathe Table (QMK)\nDESCRIPTION: This command generates a lookup table (LUT) header file for the RGB Lighting feature's breathing animation.  The output file `rgblight_breathe_table.h` should be placed in the keyboard or keymap directory to override the default LUT.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/cli_commands.md#_snippet_44\n\nLANGUAGE: qmk\nCODE:\n```\nqmk generate-rgb-breathe-table [-q] [-o OUTPUT] [-m MAX] [-c CENTER]\n```\n\n----------------------------------------\n\nTITLE: Enable Retro Shift - C\nDESCRIPTION: Enables the Retro Shift feature by defining `RETRO_SHIFT` in the `config.h` file.  This allows tap hold keys to produce a shifted version of the tap keycode on release. Optionally define to a value to set the hold time which disables the tap on release, useful for modifier key combinations.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/auto_shift.md#_snippet_9\n\nLANGUAGE: c\nCODE:\n```\n#define RETRO_SHIFT\n```\n\n----------------------------------------\n\nTITLE: Enable PMW33xx Firmware Upload\nDESCRIPTION: This code snippet shows how to re-enable firmware upload for PMW33xx sensors by defining `PMW33XX_UPLOAD_SROM` in the keymap's `config.h`. This is an opt-in feature due to licensing concerns.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/ChangeLog/20240825.md#_snippet_3\n\nLANGUAGE: C\nCODE:\n```\n#define PMW33XX_UPLOAD_SROM\n```\n\n----------------------------------------\n\nTITLE: Configuring Auto Shift with Timeout and Special Keys (QMK, C)\nDESCRIPTION: This code block demonstrates how to configure the `AUTO_SHIFT_TIMEOUT` and disable Auto Shift for special keys by adding defines to your `config.h` file.  `AUTO_SHIFT_TIMEOUT` controls how long a key must be held before the shifted character is emitted.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/auto_shift.md#_snippet_2\n\nLANGUAGE: c\nCODE:\n```\n#pragma once\n\n#define AUTO_SHIFT_TIMEOUT 150\n#define NO_AUTO_SHIFT_SPECIAL\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Key Override in QMK (C)\nDESCRIPTION: This code snippet demonstrates how to create a basic key override using `ko_make_basic`. It remaps `shift` + `backspace` to send `delete`. The `key_overrides` array globally defines the active overrides.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/key_overrides.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nconst key_override_t delete_key_override = ko_make_basic(MOD_MASK_SHIFT, KC_BSPC, KC_DEL);\n\n// This globally defines all key overrides to be used\nconst key_override_t *key_overrides[] = {\n\t&delete_key_override\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Tap-Only Combos\nDESCRIPTION: This code snippet shows how to create tap-only combos using `COMBO_MUST_TAP_PER_COMBO` and the `get_combo_must_tap` function. The function iterates through the keys in the combo's chord and checks if any of them are Mod-Tap, Layer-Tap, or Momentary keys. If such a key is found, the function returns `true`, indicating that the combo should only activate when tapped.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/combo.md#_snippet_7\n\nLANGUAGE: c\nCODE:\n```\n#ifdef COMBO_MUST_TAP_PER_COMBO\nbool get_combo_must_tap(uint16_t combo_index, combo_t *combo) {\n    // If you want all combos to be tap-only, just uncomment the next line\n    // return true\n\n    // If you want *all* combos, that have Mod-Tap/Layer-Tap/Momentary keys in its chord, to be tap-only, this is for you:\n    uint16_t key;\n    uint8_t idx = 0;\n    while ((key = pgm_read_word(&combo->keys[idx])) != COMBO_END) {\n        switch (key) {\n            case QK_MOD_TAP...QK_MOD_TAP_MAX:\n            case QK_LAYER_TAP...QK_LAYER_TAP_MAX:\n            case QK_MOMENTARY...QK_MOMENTARY_MAX:\n                return true;\n        }\n        idx += 1;\n    }\n    return false;\n\n}\n#endif\n```\n\n----------------------------------------\n\nTITLE: Defining Right-Side Matrix Row and Column Pins - C\nDESCRIPTION: This code snippet shows how to define the row and column pins for the right side of a split keyboard matrix. This is necessary when the left and right sides have different pin configurations. The number of pins defined must match the number of rows/columns, padding with `NO_PIN` if needed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/split_keyboard.md#_snippet_34\n\nLANGUAGE: c\nCODE:\n```\n#define MATRIX_ROW_PINS_RIGHT { <row pins> }\n#define MATRIX_COL_PINS_RIGHT { <col pins> }\n```\n\n----------------------------------------\n\nTITLE: Enabling RGB Light Layers\nDESCRIPTION: Enables the use of lighting layers, allowing for togglable lighting effects.  Useful for indicating the current keyboard layer or Caps Lock state.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/config_options.md#_snippet_70\n\nLANGUAGE: C\nCODE:\n```\n#define RGBLIGHT_LAYERS\n```\n\n----------------------------------------\n\nTITLE: Set Color of All LEDs - IS31FL3733 (RGB)\nDESCRIPTION: This function sets the color of all LEDs connected to an IS31FL3733 RGB driver. It takes red, green, and blue color values as input and applies them to all LEDs. No immediate update occurs; `is31fl3733_update_pwm_buffers()` must be called afterwards.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/is31fl3733.md#_snippet_6\n\nLANGUAGE: C\nCODE:\n```\nvoid is31fl3733_set_color_all(uint8_t red, uint8_t green, uint8_t blue)\n```\n\n----------------------------------------\n\nTITLE: Defining Product ID in QMK config.h\nDESCRIPTION: This code snippet defines the Product ID (PID) for a USB device in the QMK firmware configuration. The PID is a unique identifier assigned to a specific product by the vendor, and for most DIY projects, any value can be used. This setting is configured in the `config.h` file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/config_options.md#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n#define PRODUCT_ID 0x5678\n```\n\n----------------------------------------\n\nTITLE: Set Global Tapping Term in config.h (C)\nDESCRIPTION: This code snippet sets the global tapping term in milliseconds. The tapping term determines the threshold between a tap and a hold action for dual-role keys. This configuration is done within the `config.h` file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/tap_hold.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define TAPPING_TERM 200\n```\n\n----------------------------------------\n\nTITLE: Building KBD67 Mk.II RGB V3 Firmware with Make\nDESCRIPTION: This command builds the default firmware for the KBD67 Mk.II RGB V3 keyboard. It requires the QMK build environment to be set up correctly.  The output will be a `.bin` file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kbdfans/kbd67/mkiirgb/v3/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake kbdfans/kbd67/mkiirgb/v3:default\n```\n\n----------------------------------------\n\nTITLE: Setting USB Vendor and Product IDs in Config.h\nDESCRIPTION: This code snippet shows how to define the USB vendor and product IDs, as well as the manufacturer and product strings, within the `Config.h` file.  These definitions are crucial for the host computer to properly identify the keyboard. The IDs need to be unique to avoid conflicts with other USB devices.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/tmk_core/readme.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define VENDOR_ID       0xFEED\n#define PRODUCT_ID      0xBEEF\n#define MANUFACTURER    t.m.k.\n#define PRODUCT         Macway mod\n```\n\n----------------------------------------\n\nTITLE: Enabling Retro Tapping\nDESCRIPTION: Enables the Retro Tapping feature. This allows a key to be registered as a tap even after the `TAPPING_TERM` has elapsed, provided no other key interruption occurred between the press and release. Requires `TAPPING_TERM` to be defined.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/config_options.md#_snippet_43\n\nLANGUAGE: C\nCODE:\n```\n#define RETRO_TAPPING\n```\n\n----------------------------------------\n\nTITLE: Defining LED Matrix Configuration Options (C)\nDESCRIPTION: This code snippet shows various configuration options that can be set in `config.h` to customize the behavior of the LED matrix. Options include enabling key release responses, setting timeouts, disabling effects during sleep, limiting LED processing, setting maximum brightness, and defining default states for the LED matrix.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/led_matrix.md#_snippet_6\n\nLANGUAGE: c\nCODE:\n```\n#define LED_MATRIX_KEYRELEASES // reactive effects respond to keyreleases (instead of keypresses)\n#define LED_MATRIX_TIMEOUT 0 // number of milliseconds to wait until led automatically turns off\n#define LED_MATRIX_SLEEP // turn off effects when suspended\n#define LED_MATRIX_LED_PROCESS_LIMIT (LED_MATRIX_LED_COUNT + 4) / 5 // limits the number of LEDs to process in an animation per task run (increases keyboard responsiveness)\n#define LED_MATRIX_LED_FLUSH_LIMIT 16 // limits in milliseconds how frequently an animation will update the LEDs. 16 (16ms) is equivalent to limiting to 60fps (increases keyboard responsiveness)\n#define LED_MATRIX_MAXIMUM_BRIGHTNESS 255 // limits maximum brightness of LEDs\n#define LED_MATRIX_DEFAULT_ON true // Sets the default enabled state, if none has been set\n#define LED_MATRIX_DEFAULT_MODE LED_MATRIX_SOLID // Sets the default mode, if none has been set\n#define LED_MATRIX_DEFAULT_VAL LED_MATRIX_MAXIMUM_BRIGHTNESS // Sets the default brightness value, if none has been set\n#define LED_MATRIX_DEFAULT_SPD 127 // Sets the default animation speed, if none has been set\n#define LED_MATRIX_VAL_STEP 8 // The value by which to increment the brightness per adjustment action\n#define LED_MATRIX_SPD_STEP 16 // The value by which to increment the animation speed per adjustment action\n#define LED_MATRIX_DEFAULT_FLAGS LED_FLAG_ALL // Sets the default LED flags, if none has been set\n#define LED_MATRIX_SPLIT { X, Y }   // (Optional) For split keyboards, the number of LEDs connected on each half. X = left, Y = Right.\n                                    // If reactive effects are enabled, you also will want to enable SPLIT_TRANSPORT_MIRROR\n```\n\n----------------------------------------\n\nTITLE: Enabling Advanced MIDI in QMK config.h\nDESCRIPTION: This snippet shows how to enable advanced MIDI functionality in QMK firmware. Defining `MIDI_ADVANCED` in `config.h` enables a more feature-rich MIDI implementation with support for octave shifts, channel changes, and more.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/midi.md#_snippet_2\n\nLANGUAGE: C\nCODE:\n```\n#define MIDI_ADVANCED\n```\n\n----------------------------------------\n\nTITLE: Finish Unicode Input Sequence - C\nDESCRIPTION: This function completes the Unicode input sequence. The exact behavior depends on the currently selected input mode, as described in the function documentation. This function is weakly defined and can be overridden in user code.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/unicode.md#_snippet_16\n\nLANGUAGE: C\nCODE:\n```\nvoid unicode_input_finish(void)\n```\n\n----------------------------------------\n\nTITLE: Enabling Layer State Synchronization\nDESCRIPTION: This definition enables syncing of the layer state between both halves of the split keyboard. This is required for features such as displaying the currently active layer on an OLED display.  It is defined in `config.h`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/split_keyboard.md#_snippet_16\n\nLANGUAGE: c\nCODE:\n```\n#define SPLIT_LAYER_STATE_ENABLE\n```\n\n----------------------------------------\n\nTITLE: Including a Keymap Header in keymap.c - C\nDESCRIPTION: This snippet demonstrates how to include a language-specific keymap header file in your `keymap.c` file.  This allows you to use language-specific keycodes in your keymap. You must include QMK_KEYBOARD_H and then include the desired language keymap header. The OS keyboard layout must be configured to match.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/reference_keymap_extras.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#include QMK_KEYBOARD_H\n\n#include \"keymap_japanese.h\" // [!code focus]\n```\n\n----------------------------------------\n\nTITLE: Enabling Split RGB Light\nDESCRIPTION: Needed if both halves of the board have RGB LEDs wired directly to the RGB output pin on the controllers instead of passing the output of the left half to the input of the right half.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/config_options.md#_snippet_75\n\nLANGUAGE: C\nCODE:\n```\n#define RGBLIGHT_SPLIT\n```\n\n----------------------------------------\n\nTITLE: Decreasing Global Effect Brightness in QMK (C)\nDESCRIPTION: This function decreases the global brightness of the LED matrix effect and stores the new value in EEPROM.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/led_matrix.md#_snippet_27\n\nLANGUAGE: C\nCODE:\n```\nvoid led_matrix_decrease_val(void)\n```\n\n----------------------------------------\n\nTITLE: Add Keyboard/Keymap to Userspace (qmk userspace-add)\nDESCRIPTION: This command adds a keyboard/keymap to the External Userspace build targets.  It accepts keyboard and keymap arguments, and can also accept a path to a keymap JSON file.  The keyboard and keymap are specified using the `-kb` and `-km` options respectively.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/cli_commands.md#_snippet_34\n\nLANGUAGE: text\nCODE:\n```\nqmk userspace-add [-h] [-km KEYMAP] [-kb KEYBOARD] [builds ...]\n```\n\nLANGUAGE: text\nCODE:\n```\n$ qmk userspace-add -kb planck/rev6 -km default\n```\n\n----------------------------------------\n\nTITLE: Configuring Audio Driver for STM32 DAC (rules.mk)\nDESCRIPTION: Sets the audio driver to `dac_basic` in `rules.mk` to use the DAC peripheral for audio output on STM32 devices.  This allows the use of pins A4 or A5 as audio output.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/audio.md#_snippet_2\n\nLANGUAGE: makefile\nCODE:\n```\nAUDIO_DRIVER = dac_basic\n```\n\n----------------------------------------\n\nTITLE: Compile QMK Firmware\nDESCRIPTION: This command compiles the QMK firmware for the configured keyboard and keymap. It uses the QMK CLI to build the firmware based on the `keymap.c` and keyboard configuration.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/newbs_building_firmware.md#_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nqmk compile\n```\n\n----------------------------------------\n\nTITLE: Format C Code (qmk format-c)\nDESCRIPTION: This command formats C code using clang-format. It can format all core code, specific files, or only changed files against a specified branch. Uses `git diff` by default.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/cli_commands.md#_snippet_40\n\nLANGUAGE: text\nCODE:\n```\nqmk format-c [file1] [file2] [...] [fileN]\n```\n\nLANGUAGE: text\nCODE:\n```\nqmk format-c -a\n```\n\nLANGUAGE: text\nCODE:\n```\nqmk format-c\n```\n\nLANGUAGE: text\nCODE:\n```\nqmk format-c -b branch_name\n```\n\n----------------------------------------\n\nTITLE: Layer Indicator on Configured Keycode Keys in C\nDESCRIPTION: This code snippet implements a layer indicator that highlights only keys with configured keycodes on the active layer. It iterates through the matrix, checks the layer state, and sets the LED color to green if a keycode is defined for the key position on the current layer.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/rgb_matrix.md#_snippet_8\n\nLANGUAGE: c\nCODE:\n```\nbool rgb_matrix_indicators_advanced_user(uint8_t led_min, uint8_t led_max) {\n    if (get_highest_layer(layer_state) > 0) {\n        uint8_t layer = get_highest_layer(layer_state);\n\n        for (uint8_t row = 0; row < MATRIX_ROWS; ++row) {\n            for (uint8_t col = 0; col < MATRIX_COLS; ++col) {\n                uint8_t index = g_led_config.matrix_co[row][col];\n\n                if (index >= led_min && index < led_max && index != NO_LED &&\n                keymap_key_to_keycode(layer, (keypos_t){col,row}) > KC_TRNS) {\n                    rgb_matrix_set_color(index, RGB_GREEN);\n                }\n            }\n        }\n    }\n    return false;\n}\n```\n\n----------------------------------------\n\nTITLE: Send Unicode String - C\nDESCRIPTION: This function sends a string containing Unicode characters. It takes a `const char *` representing the string to send as an argument.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/unicode.md#_snippet_19\n\nLANGUAGE: C\nCODE:\n```\nvoid send_unicode_string(const char *str)\n```\n\n----------------------------------------\n\nTITLE: Setting the Bootloader in rules.mk for Atmel DFU\nDESCRIPTION: This snippet sets the `BOOTLOADER` variable in the `rules.mk` file to `atmel-dfu`. This configuration is necessary for keyboards using the Atmel DFU bootloader to ensure compatibility during the flashing process. Optionally `lufa-dfu` or `qmk-dfu` can be used.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/flashing.md#_snippet_1\n\nLANGUAGE: Make\nCODE:\n```\n# Bootloader selection\nBOOTLOADER = atmel-dfu\n```\n\n----------------------------------------\n\nTITLE: Defining RGB LED Split\nDESCRIPTION: Defines the number of LEDs connected to the RGB pin on each half of a split keyboard. First value is for the left half, and the second is for the right half. When defined, RGBLIGHT_SPLIT is implicitly defined.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/config_options.md#_snippet_76\n\nLANGUAGE: C\nCODE:\n```\n#define RGBLED_SPLIT { 6, 6 }\n```\n\n----------------------------------------\n\nTITLE: Enabling Split Modifiers in QMK\nDESCRIPTION: This ensures the current modifier state (normal, weak, and oneshot) is available on the slave when using the QMK-provided split transport. This allows modifier keys to function correctly across both halves.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/config_options.md#_snippet_107\n\nLANGUAGE: c\nCODE:\n```\n#define SPLIT_MODS_ENABLE\n```\n\n----------------------------------------\n\nTITLE: Configuring USART TX/RX Pins (Full-Duplex) in config.h (C)\nDESCRIPTION: This code snippet defines the GPIO pins to be used for the USART serial TX and RX pins for full-duplex communication. It's important to choose pins that are mapped to the USART peripheral's TX and RX functions. These pins need to be defined in the config.h file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/serial.md#_snippet_8\n\nLANGUAGE: c\nCODE:\n```\n#define SERIAL_USART_FULL_DUPLEX   // Enable full duplex operation mode.\n#define SERIAL_USART_TX_PIN B6     // USART TX pin\n#define SERIAL_USART_RX_PIN B7     // USART RX pin\n```\n\n----------------------------------------\n\nTITLE: Enabling Tap Dance in rules.mk\nDESCRIPTION: To enable the Tap Dance feature in your QMK firmware, you need to add `TAP_DANCE_ENABLE = yes` to your `rules.mk` file. This enables the feature and adds slightly less than 1KB to the firmware size.  No specific dependencies are required other than the standard QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/tap_dance.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nTAP_DANCE_ENABLE = yes\n```\n\n----------------------------------------\n\nTITLE: Enabling NKRO in QMK Firmware\nDESCRIPTION: This snippet details how to enable NKRO (N-Key Rollover) in QMK Firmware.  You need to add `NKRO_ENABLE = yes` to your `rules.mk` file. Then, assign and press the `NK_TOGG` keycode to switch between modes at runtime.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/ChangeLog/20231126.md#_snippet_7\n\nLANGUAGE: Makefile\nCODE:\n```\nNKRO_ENABLE = yes\n```\n\n----------------------------------------\n\nTITLE: Reading Entire Configuration with QMK CLI\nDESCRIPTION: This snippet demonstrates how to display the entire QMK CLI configuration using the `qmk config` command without any arguments. It will output all currently set configuration values.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/cli_configuration.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nqmk config\n```\n\n----------------------------------------\n\nTITLE: Defining Right-Hand Matrix Pins in QMK\nDESCRIPTION: These macros define the row and column pins for the right half of a split keyboard matrix.  If defined, the size of `MATRIX_ROW_PINS` must match `MATRIX_ROW_PINS_RIGHT`, and the same applies to column pins. This allows for different pinouts between the left and right halves.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/config_options.md#_snippet_94\n\nLANGUAGE: c\nCODE:\n```\n#define MATRIX_ROW_PINS_RIGHT { <row pins> }\n```\n\nLANGUAGE: c\nCODE:\n```\n#define MATRIX_COL_PINS_RIGHT { <col pins> }\n```\n\n----------------------------------------\n\nTITLE: Enable Matrix Scan Rate Debug - C\nDESCRIPTION: This code snippet defines the `DEBUG_MATRIX_SCAN_RATE` macro, which enables logging of the matrix scan rate. This allows you to measure the frequency at which the switch matrix is being scanned. This line needs to be added to your `config.h` file within your keymap folder.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/faq_debug.md#_snippet_3\n\nLANGUAGE: c\nCODE:\n```\n#define DEBUG_MATRIX_SCAN_RATE\n```\n\n----------------------------------------\n\nTITLE: Enabling Haptic Feedback Synchronization\nDESCRIPTION: This definition enables the triggering of haptic feedback on the slave side of the split keyboard, sending information such as mode, dwell, and whether buzz is enabled. It is defined in `config.h`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/split_keyboard.md#_snippet_23\n\nLANGUAGE: c\nCODE:\n```\n#define SPLIT_HAPTIC_ENABLE\n```\n\n----------------------------------------\n\nTITLE: Invoking Slave-Side Handler Function from Master\nDESCRIPTION: This code demonstrates how to invoke a slave-side handler function from the master side. It uses `transaction_rpc_exec` to send data to the slave, receive data back, and then print the received value.  This interaction should be throttled (e.g., in the housekeeping task) to avoid negatively affecting keyboard performance.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/split_keyboard.md#_snippet_31\n\nLANGUAGE: c\nCODE:\n```\nvoid housekeeping_task_user(void) {\n    if (is_keyboard_master()) {\n        // Interact with slave every 500ms\n        static uint32_t last_sync = 0;\n        if (timer_elapsed32(last_sync) > 500) {\n            master_to_slave_t m2s = {6};\n            slave_to_master_t s2m = {0};\n            if(transaction_rpc_exec(USER_SYNC_A, sizeof(m2s), &m2s, sizeof(s2m), &s2m)) {\n                last_sync = timer_read32();\n                dprintf(\"Slave value: %d\\n\", s2m.s2m_data); // this will now be 11, as the slave adds 5\n            } else {\n                dprint(\"Slave sync failed!\\n\");\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling the Step Sequencer in rules.mk\nDESCRIPTION: To enable the step sequencer, add the following line to your `rules.mk` file. This activates the sequencer feature within your QMK firmware build.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/sequencer.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nSEQUENCER_ENABLE = yes\n```\n\n----------------------------------------\n\nTITLE: Handling Custom Keycodes in keyboard.c (Recommended)\nDESCRIPTION: This code snippet shows how to handle custom keycodes in the keyboard's source file (`<keyboard>.c`). It defines the `process_record_kb` function, which handles the custom keycodes and then calls the `process_record_user` function. The `process_record_kb` function uses a switch statement to determine the correct custom keycode to use.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/configurator_default_keymaps.md#_snippet_5\n\nLANGUAGE: c\nCODE:\n```\nbool process_record_kb(uint16_t keycode, keyrecord_t *record) {\n    switch(keycode) {\n        case CUSTOM_1:\n            if (record->event.pressed) {\n                SEND_STRING(\"This is custom keycode #1.\");\n            }\n            return false;\n        case CUSTOM_2:\n            if (record->event.pressed) {\n                SEND_STRING(\"This is custom keycode #2.\");\n            }\n            return false;\n        case CUSTOM_3:\n            if (record->event.pressed) {\n                SEND_STRING(\"This is custom keycode #3.\");\n            }\n            return false;\n    }\n    return process_record_user(keycode, record);\n};\n```\n\n----------------------------------------\n\nTITLE: Tap Hold Finished Callback in QMK\nDESCRIPTION: This code defines the `tap_dance_tap_hold_finished` callback function for a tap dance. It registers either the tap or hold keycode depending on the `state->pressed` and `state->count` values, which determine if the key was held or tapped, and also the `PERMISSIVE_HOLD` setting. It depends on the `tap_dance_tap_hold_t` struct being defined.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/tap_dance.md#_snippet_7\n\nLANGUAGE: c\nCODE:\n```\nvoid tap_dance_tap_hold_finished(tap_dance_state_t *state, void *user_data) {\n    tap_dance_tap_hold_t *tap_hold = (tap_dance_tap_hold_t *)user_data;\n\n    if (state->pressed) {\n        if (state->count == 1\n#ifndef PERMISSIVE_HOLD\n            && !state->interrupted\n#endif\n        ) {\n            register_code16(tap_hold->hold);\n            tap_hold->held = tap_hold->hold;\n        } else {\n            register_code16(tap_hold->tap);\n            tap_hold->held = tap_hold->tap;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Default Encoder Position in config.h (QMK)\nDESCRIPTION: This snippet defines the default position for 4x encoders in `config.h`. It is used when the encoder sends a high level on both pins by default. The `ENCODER_DEFAULT_POS` macro is defined with a value representing the default state of the encoder pins. This helps the firmware handle encoders that skip pulses when changing direction.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/encoders.md#_snippet_6\n\nLANGUAGE: c\nCODE:\n```\n#define ENCODER_DEFAULT_POS 0x3\n```\n\n----------------------------------------\n\nTITLE: Remove Programmable Button in QMK\nDESCRIPTION: This C function resets the state of a specific programmable button, simulating a button release. It takes the button index as input, ranging from 0 to 31.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/programmable_button.md#_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nvoid programmable_button_remove(uint8_t index)\n```\n\n----------------------------------------\n\nTITLE: Installing Development Requirements - Python\nDESCRIPTION: Installs the necessary Python packages for QMK CLI development using pip. This command ensures you have all the required tools for testing, linting, and formatting.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/cli_development.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\npython3 -m pip install -r requirements-dev.txt\n```\n\n----------------------------------------\n\nTITLE: Format Text Files (qmk format-text)\nDESCRIPTION: This command formats text files to have proper Unix (LF) line endings. It ensures that all text files in the repository have Unix line endings, which is crucial for Windows users.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/cli_commands.md#_snippet_39\n\nLANGUAGE: text\nCODE:\n```\nqmk format-text\n```\n\n----------------------------------------\n\nTITLE: Flashing QMK Firmware to Durgod Venus\nDESCRIPTION: This command flashes the built QMK firmware to the Durgod Venus keyboard. It uses the `make` command with the target specified as `durgod/venus:default:flash`.  This requires the keyboard to be in a flashable state (e.g., bootloader mode).\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/durgod/dgk6x/venus/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake durgod/venus:default:flash\n```\n\n----------------------------------------\n\nTITLE: Including IS31FL3733 Driver in rules.mk\nDESCRIPTION: This snippet shows how to include the IS31FL3733 driver in your `rules.mk` file.  It adds the driver path to the `COMMON_VPATH`, includes the `is31fl3733-mono.c` (single-color) or `is31fl3733.c` (RGB) source files, and sets `I2C_DRIVER_REQUIRED` to `yes`. This ensures the driver is compiled and I²C support is enabled.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/is31fl3733.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nCOMMON_VPATH += $(DRIVER_PATH)/led/issi\nSRC += is31fl3733-mono.c # For single-color\nSRC += is31fl3733.c # For RGB\nI2C_DRIVER_REQUIRED = yes\n```\n\n----------------------------------------\n\nTITLE: Configuring Serial Communication in config.h\nDESCRIPTION: This snippet demonstrates how to configure the serial communication method in the `config.h` file for a split keyboard in QMK firmware. It involves defining specific macros (`USE_SDI1_ON_STANDARD_ROLE_PINS`, `USE_SDI1_ON_ALTERNATE_ROLE_PINS`, or `USE_SDI2`) to select the desired serial data interface (SDI). This configuration determines the pins used for serial communication between the two halves of the split keyboard. Ensure only one of these macros is defined to avoid conflicts.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/splittest/bluepill/readme.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#ifdef USE_SDI1_ON_STANDARD_ROLE_PINS\n    // Use USART1 with standard role pins (A9, A10)\n#elif USE_SDI1_ON_ALTERNATE_ROLE_PINS\n    // Use USART1 with alternate role pins (B6, B7)\n#elif USE_SDI2\n    // Use USART2 (A2, A3)\n#else\n    // Default configuration\n#endif\n```\n\n----------------------------------------\n\nTITLE: Enabling Hold On Other Key Press\nDESCRIPTION: This snippet enables the \"hold on other key press\" mode for all dual-role keys. When enabled, the hold action is triggered if another key is pressed within the tapping term after the dual-role key, improving the behavior for fast typists or high `TAPPING_TERM` settings.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/tap_hold.md#_snippet_8\n\nLANGUAGE: c\nCODE:\n```\n#define HOLD_ON_OTHER_KEY_PRESS\n```\n\n----------------------------------------\n\nTITLE: Enabling RGB Light in rules.mk (Makefile)\nDESCRIPTION: This line enables the keyboard RGB underglow feature in the QMK firmware. It needs to be added to the `rules.mk` file in your keymap directory. The `RGBLIGHT_ENABLE` flag is set to `yes` to activate the RGB functionality.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/westfoxtrot/cypher/rev1/keymaps/kwer/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nRGBLIGHT_ENABLE = yes        # Enable keyboard RGB underglow\n```\n\n----------------------------------------\n\nTITLE: Disable RGB Matrix Effects in `config.h`\nDESCRIPTION: Disables various RGB Matrix effects in the keymap's `config.h`. Disabling unused effects helps to reduce firmware size by removing the associated code.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/squeezing_avr.md#_snippet_13\n\nLANGUAGE: c\nCODE:\n```\n#undef ENABLE_RGB_MATRIX_ALPHAS_MODS\n#undef ENABLE_RGB_MATRIX_GRADIENT_UP_DOWN\n#undef ENABLE_RGB_MATRIX_GRADIENT_LEFT_RIGHT\n#undef ENABLE_RGB_MATRIX_BREATHING\n#undef ENABLE_RGB_MATRIX_BAND_SAT\n#undef ENABLE_RGB_MATRIX_BAND_VAL\n#undef ENABLE_RGB_MATRIX_BAND_PINWHEEL_SAT\n#undef ENABLE_RGB_MATRIX_BAND_PINWHEEL_VAL\n#undef ENABLE_RGB_MATRIX_BAND_SPIRAL_SAT\n#undef ENABLE_RGB_MATRIX_BAND_SPIRAL_VAL\n#undef ENABLE_RGB_MATRIX_CYCLE_ALL\n#undef ENABLE_RGB_MATRIX_CYCLE_LEFT_RIGHT\n#undef ENABLE_RGB_MATRIX_CYCLE_UP_DOWN\n#undef ENABLE_RGB_MATRIX_RAINBOW_MOVING_CHEVRON\n#undef ENABLE_RGB_MATRIX_CYCLE_OUT_IN\n#undef ENABLE_RGB_MATRIX_CYCLE_OUT_IN_DUAL\n#undef ENABLE_RGB_MATRIX_CYCLE_PINWHEEL\n#undef ENABLE_RGB_MATRIX_CYCLE_SPIRAL\n#undef ENABLE_RGB_MATRIX_DUAL_BEACON\n#undef ENABLE_RGB_MATRIX_RAINBOW_BEACON\n#undef ENABLE_RGB_MATRIX_RAINBOW_PINWHEELS\n#undef ENABLE_RGB_MATRIX_FLOWER_BLOOMING\n#undef ENABLE_RGB_MATRIX_RAINDROPS\n#undef ENABLE_RGB_MATRIX_JELLYBEAN_RAINDROPS\n#undef ENABLE_RGB_MATRIX_HUE_BREATHING\n#undef ENABLE_RGB_MATRIX_HUE_PENDULUM\n#undef ENABLE_RGB_MATRIX_HUE_WAVE\n#undef ENABLE_RGB_MATRIX_PIXEL_FRACTAL\n#undef ENABLE_RGB_MATRIX_PIXEL_FLOW\n#undef ENABLE_RGB_MATRIX_PIXEL_RAIN\n\n#undef ENABLE_RGB_MATRIX_TYPING_HEATMAP\n#undef ENABLE_RGB_MATRIX_DIGITAL_RAIN\n\n#undef ENABLE_RGB_MATRIX_SOLID_REACTIVE_SIMPLE\n#undef ENABLE_RGB_MATRIX_SOLID_REACTIVE\n#undef ENABLE_RGB_MATRIX_SOLID_REACTIVE_WIDE\n#undef ENABLE_RGB_MATRIX_SOLID_REACTIVE_MULTIWIDE\n#undef ENABLE_RGB_MATRIX_SOLID_REACTIVE_CROSS\n#undef ENABLE_RGB_MATRIX_SOLID_REACTIVE_MULTICROSS\n#undef ENABLE_RGB_MATRIX_SOLID_REACTIVE_NEXUS\n#undef ENABLE_RGB_MATRIX_SOLID_REACTIVE_MULTINEXUS\n#undef ENABLE_RGB_MATRIX_SPLASH\n#undef ENABLE_RGB_MATRIX_MULTISPLASH\n#undef ENABLE_RGB_MATRIX_SOLID_SPLASH\n#undef ENABLE_RGB_MATRIX_SOLID_MULTISPLASH\n```\n\n----------------------------------------\n\nTITLE: Flashing Keychron V6 Firmware\nDESCRIPTION: This command flashes the built firmware to the Keychron V6 keyboard. It depends on the keyboard, keymap (default) and microcontroller (stm32l432) and requires a configured build environment and the necessary flashing tools to be installed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keychron/v6/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake keychron/v6/v6_ansi_stm32l432:flash\n```\n\n----------------------------------------\n\nTITLE: Defining BACKLIGHT_ON_STATE for P-channel MOSFET backlight - config.h\nDESCRIPTION: This code snippet shows how to define `BACKLIGHT_ON_STATE` in the keyboard-level `config.h` file. This is required when using a P-channel MOSFET for the backlight, as the default \"on\" state has been changed to `1`, which impacts all keyboards using software PWM backlight that do not define it explicitly. Setting `BACKLIGHT_ON_STATE` to `0` configures the backlight for use with a P-channel MOSFET.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/ChangeLog/20200229.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define BACKLIGHT_ON_STATE 0\n```\n\n----------------------------------------\n\nTITLE: Creating a New Keyboard Project with `qmk new-keyboard`\nDESCRIPTION: This shell command initiates the creation of a new QMK keyboard project. It prompts the user for keyboard name, maintainer information, base layout, and development board details to generate the necessary project files with default settings. The user then needs to customize the generated files to match their keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/porting_your_keyboard_to_qmk.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ qmk new-keyboard\nΨ Generating a new QMK keyboard directory\n\nΨ Name Your Keyboard Project\nΨ For more information, see:\nhttps://docs.qmk.fm/hardware_keyboard_guidelines#naming-your-keyboard-project\nKeyboard Name? mycoolkeeb\nΨ Attribution\nΨ Used for maintainer, copyright, etc.\nYour GitHub Username? [jsmith] \nΨ More Attribution\nΨ Used for maintainer, copyright, etc.\nYour Real Name? [John Smith] \nΨ Pick Base Layout\nΨ As a starting point, one of the common layouts can be used to\nbootstrap the process\nDefault Layout?\n    1. 60_abnt2\n    ...\n    65. none of the above\nPlease enter your choice: [65] \nΨ What Powers Your Project\nΨ Is your board using a separate development board, such as a Pro Micro,\nor is the microcontroller integrated onto the PCB?\n\nFor more information, see:\nhttps://docs.qmk.fm/compatible_microcontrollers\nUsing a Development Board? [y/n] y\nΨ Select Development Board\nΨ For more information, see:\nhttps://docs.qmk.fm/compatible_microcontrollers\nDevelopment Board?\n    1. bit_c_pro\n    ...\n    14. promicro\n    ...\n    18. svlinky\nPlease enter your choice: [14] \nΨ Created a new keyboard called mycoolkeeb.\nΨ Build Command: qmk compile -kb mycoolkeeb -km default.\nΨ Project Location: /Users/jsmith/qmk_firmware/keyboards/mycoolkeeb.\nΨ Now update the config files to match the hardware!\n```\n\n----------------------------------------\n\nTITLE: Intercepting Tap Function in QMK\nDESCRIPTION: This code snippet demonstrates how to intercept the tap function of a Mod-Tap key using the `process_record_user` function in QMK. It allows sending a shifted keycode (KC_DQUO) on tap that cannot be directly used with `MT()` due to keycode limitations.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/mod_tap.md#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nbool process_record_user(uint16_t keycode, keyrecord_t *record) {\n    switch (keycode) {\n        case LCTL_T(KC_DQUO):\n            if (record->tap.count && record->event.pressed) {\n                tap_code16(KC_DQUO); // Send KC_DQUO on tap\n                return false;        // Return false to ignore further processing of key\n            }\n            break;\n    }\n    return true;\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Locking Support in QMK config.h\nDESCRIPTION: This code snippet enables mechanical locking support in QMK firmware. Use KC_LCAP, KC_LNUM, or KC_LSCR instead in the keymap. This setting is configured in the `config.h` file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/config_options.md#_snippet_26\n\nLANGUAGE: c\nCODE:\n```\n#define LOCKING_SUPPORT_ENABLE\n```\n\n----------------------------------------\n\nTITLE: Enabling Chordal Hold\nDESCRIPTION: This snippet enables the chordal hold feature, which changes how tap-hold keys behave when other keys are pressed within the tapping term. It settles the tap-hold key as tapped if the keys are on the same hand, and relies on Permissive Hold or Hold On Other Key Press for opposite hand scenarios.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/tap_hold.md#_snippet_14\n\nLANGUAGE: c\nCODE:\n```\n#define CHORDAL_HOLD\n```\n\n----------------------------------------\n\nTITLE: Deleting Configuration Values with QMK CLI\nDESCRIPTION: This snippet shows how to delete a configuration value by setting it to `None`. In this case, the `default.keymap` is being cleared, effectively removing the default keymap setting. This action allows the user to revert to the system's default or require explicit specification of the keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/cli_configuration.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ qmk config default.keymap=None\n```\n\n----------------------------------------\n\nTITLE: Building Knobgoblin Firmware (QMK)\nDESCRIPTION: This snippet shows the command to build the default firmware for the Knobgoblin keyboard using the QMK build environment. It assumes that the QMK build environment is already set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/knobgoblin/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake knobgoblin:default\n```\n\n----------------------------------------\n\nTITLE: Setting Host Language in keymap.json - JSON\nDESCRIPTION: This snippet shows how to specify the host language within a `keymap.json` file. The `host_language` key is used to tell QMK to use the specified language when interpreting keycodes, primarily useful for `SEND_STRING()`. The value should match the language name used for Sendstring LUT headers.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/reference_keymap_extras.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"keyboard\": \"handwired/my_macropad\",\n    \"keymap\": \"my_keymap\",\n    \"host_language\": \"swedish\", // [!code focus]\n    \"layout\": \"LAYOUT_all\",\n    \"layers\": [\n        [\"SE_ARNG\"]\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Auto Shift Press Handler - C\nDESCRIPTION: Defines the custom Auto Shift press handler to register specific keycodes based on whether shift is active.  This example handles the `KC_DOT` key, registering `KC_DOT` when not shifted and `KC_EXLM` when shifted. It also adds weak shift modifiers and registers the keycode, handling retro shift tap keys.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/auto_shift.md#_snippet_7\n\nLANGUAGE: c\nCODE:\n```\nvoid autoshift_press_user(uint16_t keycode, bool shifted, keyrecord_t *record) {\n    switch(keycode) {\n        case KC_DOT:\n            register_code16((!shifted) ? KC_DOT : KC_EXLM);\n            break;\n        default:\n            if (shifted) {\n                add_weak_mods(MOD_BIT(KC_LSFT));\n            }\n            // & 0xFF gets the Tap key for Tap Holds, required when using Retro Shift\n            register_code16((IS_RETRO(keycode)) ? keycode & 0xFF : keycode);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Encoder Mapping in rules.mk (QMK)\nDESCRIPTION: This snippet demonstrates how to enable encoder mapping in the `rules.mk` file of a QMK Firmware project.  Setting `ENCODER_MAP_ENABLE` to `yes` enables the encoder mapping functionality, which allows you to map encoder movements to specific keycodes. This effectively integrates encoders into the QMK keycode processing pipeline.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/encoders.md#_snippet_9\n\nLANGUAGE: make\nCODE:\n```\nENCODER_MAP_ENABLE = yes\n```\n\n----------------------------------------\n\nTITLE: Enabling USART2 in ChibiOS/ARM\nDESCRIPTION: This code snippet shows how to enable USART2 in the `mcuconf.h` file for a ChibiOS/ARM-based project. This involves undefining the default and then defining it as TRUE. This configuration is necessary to use the USART2 peripheral for UART communication.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/uart.md#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n#pragma once\n\n#include_next <mcuconf.h>\n\n#undef STM32_SERIAL_USE_USART2 // [!code focus]\n#define STM32_SERIAL_USE_USART2 TRUE // [!code focus]\n```\n\n----------------------------------------\n\nTITLE: Flashing MW75R2 Firmware with QMK\nDESCRIPTION: This command builds and flashes the default firmware to the MW75R2 keyboard.  It combines the build process with the flashing operation, automatically uploading the compiled firmware to the keyboard's microcontroller. This requires the keyboard to be in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mwstudio/mw75r2/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake mwstudio/mw75r2:default:flash\n```\n\n----------------------------------------\n\nTITLE: Conditional Macro Processing (C)\nDESCRIPTION: This snippet shows how to conditionally process macros within the `process_record_user` function based on the `MACROS_ENABLED` macro.  This allows you to include or exclude macro-related code based on whether the feature is enabled in the `rules.mk` file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/feature_userspace.md#_snippet_6\n\nLANGUAGE: c\nCODE:\n```\nbool process_record_user(uint16_t keycode, keyrecord_t *record) {\n  switch (keycode) {\n#ifdef MACROS_ENABLED\n  case MACRO1:\n    if (!record->event.pressed) {\n      SEND_STRING(\"This is macro 1!\");\n    }\n    break;\n  case MACRO2:\n    if (!record->event.pressed) {\n      SEND_STRING(\"This is macro 2!\");\n    }\n    break;\n#endif\n  }\n  return true;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TKL ANSI Tsangan Split BS RShift Layout\nDESCRIPTION: This snippet defines a TKL ANSI layout with a Tsangan bottom row, split backspace, and split right shift. The keyboard physical arrangement is visualized in ASCII art format and used in custom QMK keymaps. The layout assumes knowledge of standard keyboard conventions plus Tsangan, split backspace and split right shift variations.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/layouts/default/readme.md#_snippet_18\n\nLANGUAGE: text\nCODE:\n```\n┌───┐   ┌───┬───┬───┬───┐ ┌───┬───┬───┬───┐ ┌───┬───┬───┬───┐ ┌───┬───┬───┐\n│   │   │   │   │   │   │ │   │   │   │   │ │   │   │   │   │ │   │   │   │\n└───┘   └───┴───┴───┴───┘ └───┴───┴───┴───┘ └───┴───┴───┴───┘ └───┴───┴───┘\n┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┐ ┌───┬───┬───┐\n│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │ │   │   │   │\n├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴───┤ ├───┼───┼───┤\n│     │   │   │   │   │   │   │   │   │   │   │   │   │     │ │   │   │   │\n├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴─────┤ └───┴───┴───┘\n│      │   │   │   │   │   │   │   │   │   │   │   │        │\n├──────┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴────┬───┤     ┌───┐\n│        │   │   │   │   │   │   │   │   │   │   │      │   │     │   │\n├─────┬──┴┬──┴──┬┴───┴───┴───┴───┴───┴───┴──┬┴───┴┬───┬─┴───┤ ┌───┼───┼───┐\n│     │   │     │                           │     │   │     │ │   │   │   │\n└─────┴───┴─────┴───────────────────────────┴─────┴───┴─────┘ └───┴───┴───┘\n```\n\n----------------------------------------\n\nTITLE: Matrix Diagram for Morgan65 Keyboard\nDESCRIPTION: This diagram visually represents the physical arrangement of keys in the Morgan65 keyboard matrix. It shows the row and column connections for each key, which are essential for configuring the keyboard firmware to correctly identify key presses. The diagram also includes annotations for specific key sizes and layouts, such as the 2u Backspace, ISO Enter, 2.25u LShift, and Tsangan layout.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/bioi/morgan65/matrix_diagram.md#_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┐    ┌───────┐\n│00 │01 │02 │03 │04 │05 │06 │07 │08 │09 │0A │0B │0C │0D │49 │43 │    │0D     │ 2u Backspace\n├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴───┼───┤    └─┬─────┤\n│10   │11 │12 │13 │14 │15 │16 │17 │18 │19 │1A │1B │1C │1D   │44 │      │     │\n├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴─────┼───┤   ┌──┴┐2D  │ ISO Enter\n│20    │21 │22 │23 │24 │25 │26 │27 │28 │29 │2A │2B │2D      │47 │   │2C │    │\n├────┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴────┬───┼───┤   └───┴────┘\n│30  │31 │32 │33 │34 │35 │36 │37 │38 │39 │3A │3B │3C    │3D │48 │\n├────┼───┴┬──┴─┬─┴───┴───┴───┴───┴───┴──┬┴───┼───┴┬─┬───┼───┼───┤\n│40  │41  │42  │45                      │46  │4A  │ │4B │4C │4D │\n└────┴────┴────┴────────────────────────┴────┴────┘ └───┴───┴───┘\n┌────────┐\n│30      │ 2.25u LShift\n└────────┘\n┌─────┬───┬─────┬───────────────────────────┬─────┐\n│40   │41 │42   │45                         │4A   │ Tsangan\n└─────┴───┴─────┴───────────────────────────┴─────┘\n```\n\n----------------------------------------\n\nTITLE: Defining LED Matrix Effects Enum (C)\nDESCRIPTION: This code snippet defines an enumeration of available LED matrix effects. Each enum member represents a different animation or behavior for the LED matrix, such as solid color, breathing, band scrolling, reactive effects, and wave patterns. The last element `LED_MATRIX_EFFECT_MAX` indicates the upper bound of the enum.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/led_matrix.md#_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nenum led_matrix_effects {\n    LED_MATRIX_NONE = 0,\n    LED_MATRIX_SOLID = 1,           // Static single val, no speed support\n    LED_MATRIX_ALPHAS_MODS,         // Static dual val, speed is val for LEDs marked as modifiers\n    LED_MATRIX_BREATHING,           // Cycling brightness animation\n    LED_MATRIX_BAND,                // Band fading brightness scrolling left to right\n    LED_MATRIX_BAND_PINWHEEL,       // 3 blade spinning pinwheel fades brightness\n    LED_MATRIX_BAND_SPIRAL,         // Spinning spiral fades brightness\n    LED_MATRIX_CYCLE_LEFT_RIGHT,    // Full gradient scrolling left to right\n    LED_MATRIX_CYCLE_UP_DOWN,       // Full gradient scrolling top to bottom\n    LED_MATRIX_CYCLE_OUT_IN,        // Full gradient scrolling out to in\n    LED_MATRIX_DUAL_BEACON,         // Full gradient spinning around center of keyboard\n    LED_MATRIX_SOLID_REACTIVE_SIMPLE,   // Pulses keys hit then fades out\n    LED_MATRIX_SOLID_REACTIVE_WIDE,       // Value pulses near a single key hit then fades out\n    LED_MATRIX_SOLID_REACTIVE_MULTIWIDE,  // Value pulses near multiple key hits then fades out\n    LED_MATRIX_SOLID_REACTIVE_CROSS,      // Value pulses the same column and row of a single key hit then fades out\n    LED_MATRIX_SOLID_REACTIVE_MULTICROSS, // Value pulses the same column and row of multiple key hits then fades out\n    LED_MATRIX_SOLID_REACTIVE_NEXUS,      // Value pulses away on the same column and row of a single key hit then fades out\n    LED_MATRIX_SOLID_REACTIVE_MULTINEXUS, // Value pulses away on the same column and row of multiple key hits then fades out\n    LED_MATRIX_SOLID_SPLASH,             // Value pulses away from a single key hit then fades out\n    LED_MATRIX_SOLID_MULTISPLASH,        // Value pulses away from multiple key hits then fades out\n    LED_MATRIX_WAVE_LEFT_RIGHT,           // Sine wave scrolling from left to right\n    LED_MATRIX_WAVE_UP_DOWN,              // Sine wave scrolling from up to down\n    LED_MATRIX_EFFECT_MAX\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Tap Dance Logic and Functions (Example 6)\nDESCRIPTION: This code defines the core tap dance logic and functions for the second example. `cur_dance` determines the current tap dance state based on tap count and key press status. `ql_finished` handles the actions for each state (single tap sends KC_QUOT, single hold activates `_MY_LAYER`, double tap toggles `_MY_LAYER`). `ql_reset` handles layer deactivation when the key is released after a hold.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/tap_dance.md#_snippet_23\n\nLANGUAGE: c\nCODE:\n```\n// Determine the current tap dance state\ntd_state_t cur_dance(tap_dance_state_t *state) {\n    if (state->count == 1) {\n        if (!state->pressed) return TD_SINGLE_TAP;\n        else return TD_SINGLE_HOLD;\n    } else if (state->count == 2) return TD_DOUBLE_TAP;\n    else return TD_UNKNOWN;\n}\n\n// Initialize tap structure associated with example tap dance key\nstatic td_tap_t ql_tap_state = {\n    .is_press_action = true,\n    .state = TD_NONE\n};\n\n// Functions that control what our tap dance key does\nvoid ql_finished(tap_dance_state_t *state, void *user_data) {\n    ql_tap_state.state = cur_dance(state);\n    switch (ql_tap_state.state) {\n        case TD_SINGLE_TAP:\n            tap_code(KC_QUOT);\n            break;\n        case TD_SINGLE_HOLD:\n            layer_on(_MY_LAYER);\n            break;\n        case TD_DOUBLE_TAP:\n            // Check to see if the layer is already set\n            if (layer_state_is(_MY_LAYER)) {\n                // If already set, then switch it off\n                layer_off(_MY_LAYER);\n            } else {\n                // If not already set, then switch the layer on\n                layer_on(_MY_LAYER);\n            }\n            break;\n        default:\n            break;\n    }\n}\n\nvoid ql_reset(tap_dance_state_t *state, void *user_data) {\n    // If the key was held down and now is released then switch off the layer\n    if (ql_tap_state.state == TD_SINGLE_HOLD) {\n        layer_off(_MY_LAYER);\n    }\n    ql_tap_state.state = TD_NONE;\n}\n```\n\n----------------------------------------\n\nTITLE: Flashing MJ6XY keyboard firmware\nDESCRIPTION: This command flashes the default firmware to the MJ6XY rev3 keyboard. It assumes the keyboard is in a state where it can be flashed, or will be automatically put in the correct mode.  Requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/melgeek/mj6xy/readme.md#_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nmake melgeek/mj6xy/rev3:default:flash\n```\n\n----------------------------------------\n\nTITLE: Disable Extraneous Systems in `rules.mk`\nDESCRIPTION: Disables various systems in `rules.mk` such as console, command, mousekey, and extrakey support to reduce the firmware size. Disabling these features removes the code related to them, leading to a smaller compiled size. Users should disable only features they do not need.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/squeezing_avr.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nCONSOLE_ENABLE = no\nCOMMAND_ENABLE = no\nMOUSEKEY_ENABLE = no\nEXTRAKEY_ENABLE = no\n```\n\n----------------------------------------\n\nTITLE: Backlight Pin Definition in config.h\nDESCRIPTION: This code snippet demonstrates how to define the backlight pin in the `config.h` file.  It specifies the pin to be used for controlling the in-switch LED backlighting. The `BACKLIGHT_ENABLE` option in `rules.mk` must be enabled for this definition to take effect.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/getting_started_make_guide.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n#define BACKLIGHT_PIN B7\n```\n\n----------------------------------------\n\nTITLE: ADB Port Definition\nDESCRIPTION: Defines macros for ADB connection in config.h if using a port other than PD0.  These macros specify the port, pin, data direction register, and data bit used for ADB communication. This allows customization of the ADB connection based on the hardware configuration.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/converter/adb_usb/readme.md#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nADB_PORT, ADB_PIN, ADB_DDR, ADB_DATA_BIT\n```\n\n----------------------------------------\n\nTITLE: Setting RP2040 Bootloader in rules.mk\nDESCRIPTION: This snippet demonstrates how to set the bootloader to `rp2040` in the `rules.mk` file. This configuration is necessary for enabling the UF2 bootloader on Raspberry Pi RP2040-based keyboards within the QMK Firmware environment. This selection is essential for the drag-and-drop flashing process to function correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/flashing.md#_snippet_21\n\nLANGUAGE: make\nCODE:\n```\n# Bootloader selection\nBOOTLOADER = rp2040\n```\n\n----------------------------------------\n\nTITLE: Defining Combo Reference Layers using Macros - C\nDESCRIPTION: This snippet defines combo reference layers using the `COMBO_REF_LAYER` macro.  It associates the _DVORAK layer with the _QWERTY layer and the _NAV layer with itself. A default reference layer is also defined using `DEFAULT_REF_LAYER`. These definitions are used by the QMK combo system to determine which layer to use when resolving combos.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/combo.md#_snippet_13\n\nLANGUAGE: c\nCODE:\n```\nCOMBO_REF_LAYER(_DVORAK, _QWERTY)\nCOMBO_REF_LAYER(_NAV, _NAV)\nDEFAULT_REF_LAYER(_MY_COMBO_LAYER).\n```\n\n----------------------------------------\n\nTITLE: Flashing Pre-compiled Firmware - qmk flash\nDESCRIPTION: This command flashes a pre-compiled firmware file (hex or bin). For certain bootloaders (HalfKay, QMK HID, USBaspLoader) and ISP flashing, the microcontroller must be specified using the `-m` argument.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/cli_commands.md#_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nqmk flash [-m <microcontroller>] <compiledFirmware.[bin|hex]>\n```\n\n----------------------------------------\n\nTITLE: Setting the PMW3360 driver in rules.mk\nDESCRIPTION: This snippet illustrates how to configure the PMW3360 sensor as the pointing device driver in the `rules.mk` file. This setting ensures that the correct driver files for the PMW3360 sensor are included during compilation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/pointing_device.md#_snippet_12\n\nLANGUAGE: Make\nCODE:\n```\nPOINTING_DEVICE_DRIVER = pmw3360\n```\n\n----------------------------------------\n\nTITLE: Enabling WPM Synchronization\nDESCRIPTION: This definition enables transmitting the current WPM (words per minute) to the slave side of the split keyboard. The purpose is to support cosmetic use of WPM, such as displaying the current value on an OLED screen. It is defined in `config.h`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/split_keyboard.md#_snippet_19\n\nLANGUAGE: c\nCODE:\n```\n#define SPLIT_WPM_ENABLE\n```\n\n----------------------------------------\n\nTITLE: Defining Chordal Hold Layout\nDESCRIPTION: This snippet demonstrates how to define the handedness of each key on the keyboard using a layout array. The `chordal_hold_layout` array specifies whether a key is on the left ('L'), right ('R'), or exempt ('*') hand, which influences chordal hold behavior.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/tap_hold.md#_snippet_15\n\nLANGUAGE: c\nCODE:\n```\nconst char chordal_hold_layout[MATRIX_ROWS][MATRIX_COLS] PROGMEM =\n    LAYOUT(\n        'L', 'L', 'L', 'L', 'L', 'L',  'R', 'R', 'R', 'R', 'R', 'R', \n        'L', 'L', 'L', 'L', 'L', 'L',  'R', 'R', 'R', 'R', 'R', 'R', \n        'L', 'L', 'L', 'L', 'L', 'L',  'R', 'R', 'R', 'R', 'R', 'R', \n                       'L', 'L', 'L',  'R', 'R', 'R'\n    );\n```\n\n----------------------------------------\n\nTITLE: Building MNK88 Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the MNK88 keyboard using the QMK build environment. It requires the QMK build environment to be set up correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kopibeng/mnk88/readme.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmake kopibeng/mnk88:default\n```\n\n----------------------------------------\n\nTITLE: Defining Tapping Toggle Count\nDESCRIPTION: Defines the number of taps required to trigger the tapping toggle feature.  This determines how many times a key needs to be tapped consecutively to switch between tap and hold actions. Requires a keycode using `TAPPING_TOGGLE`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/config_options.md#_snippet_45\n\nLANGUAGE: C\nCODE:\n```\n#define TAPPING_TOGGLE 2\n```\n\n----------------------------------------\n\nTITLE: Configure PS/2 Pins and USART (C)\nDESCRIPTION: This code configures the clock and data pins, and initializes the USART peripheral for PS/2 communication. Requires `PS2_DRIVER_USART` to be defined. This code should be placed in your keyboard's `config.h` file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/ps2_mouse.md#_snippet_8\n\nLANGUAGE: c\nCODE:\n```\n#ifdef PS2_DRIVER_USART\n#define PS2_CLOCK_PIN   D5\n#define PS2_DATA_PIN    D2\n\n/* synchronous, odd parity, 1-bit stop, 8-bit data, sample at falling edge */\n/* set DDR of CLOCK as input to be slave */\n#define PS2_USART_INIT() do {   \\\n    PS2_CLOCK_DDR &= ~(1<<PS2_CLOCK_BIT);   \\\n    PS2_DATA_DDR &= ~(1<<PS2_DATA_BIT);     \\\n    UCSR1C = ((1 << UMSEL10) |  \\\n              (3 << UPM10)   |  \\\n              (0 << USBS1)   |  \\\n              (3 << UCSZ10)  |  \\\n              (0 << UCPOL1));   \\\n    UCSR1A = 0;                 \\\n    UBRR1H = 0;                 \\\n    UBRR1L = 0;                 \\\n} while (0)\n#define PS2_USART_RX_INT_ON() do {  \\\n    UCSR1B = ((1 << RXCIE1) |       \\\n              (1 << RXEN1));        \\\n} while (0)\n#define PS2_USART_RX_POLL_ON() do { \\\n    UCSR1B = (1 << RXEN1);          \\\n} while (0)\n#define PS2_USART_OFF() do {    \\\n    UCSR1C = 0;                 \\\n    UCSR1B &= ~((1 << RXEN1) |  \\\n                (1 << TXEN1));  \\\n} while (0)\n#define PS2_USART_RX_READY      (UCSR1A & (1<<RXC1))\n#define PS2_USART_RX_DATA       UDR1\n#define PS2_USART_ERROR         (UCSR1A & ((1<<FE1) | (1<<DOR1) | (1<<UPE1)))\n#define PS2_USART_RX_VECT       USART1_RX_vect\n#endif\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Encoder Resolutions in config.h (QMK)\nDESCRIPTION: This snippet shows how to define the resolutions for multiple encoders individually in the `config.h` file of a QMK Firmware project.  The `ENCODER_RESOLUTIONS` macro is defined as an array, with each element corresponding to the resolution of a different encoder. This allows you to use encoders with different resolutions on the same keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/encoders.md#_snippet_5\n\nLANGUAGE: c\nCODE:\n```\n#define ENCODER_RESOLUTIONS { 4, 2 }\n```\n\n----------------------------------------\n\nTITLE: Increasing Global Effect Brightness without EEPROM (C)\nDESCRIPTION: This function increases the global effect brightness, but the change is not stored in EEPROM and will be lost on reset.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/led_matrix.md#_snippet_26\n\nLANGUAGE: C\nCODE:\n```\nvoid led_matrix_increase_val_noeeprom(void)\n```\n\n----------------------------------------\n\nTITLE: Custom layer_state_set Function (C)\nDESCRIPTION: This snippet defines a `layer_state_set_user` function, along with a `layer_state_set_keymap` as a weak symbol, allowing userspace to modify the layer state and then call the keymap's implementation if it exists. This enables customization of layer behavior in both userspace and keymaps without conflicts.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/feature_userspace.md#_snippet_4\n\nLANGUAGE: c\nCODE:\n```\n__attribute__ ((weak))\nlayer_state_t layer_state_set_keymap (layer_state_t state) {\n  return state;\n}\n\nlayer_state_t layer_state_set_user (layer_state_t state) {\n  state = update_tri_layer_state(state, 2, 3, 5);\n  return layer_state_set_keymap (state);\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Analog Driver in QMK Firmware\nDESCRIPTION: This snippet demonstrates how to enable the analog driver in QMK Firmware. Instead of manually adding the source file `analog.c` to the `SRC` variable, you now specify `ANALOG_DRIVER_REQUIRED = yes` in your configuration. This allows the build system to automatically manage dependencies.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/ChangeLog/20231126.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nANALOG_DRIVER_REQUIRED = yes\n```\n\n----------------------------------------\n\nTITLE: Enable Bluetooth in rules.mk (QMK)\nDESCRIPTION: These lines enable Bluetooth functionality and specify the Bluetooth driver in the `rules.mk` file.  `BLUETOOTH_ENABLE = yes` activates Bluetooth support. `BLUETOOTH_DRIVER` selects the appropriate driver for the Bluetooth chip being used, such as `bluefruit_le` for the Adafruit Bluefruit LE SPI Friend or `rn42` for the RN-42 module.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/wireless.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nBLUETOOTH_ENABLE = yes\nBLUETOOTH_DRIVER = bluefruit_le # or rn42\n```\n\n----------------------------------------\n\nTITLE: Configuring PWM Software Audio Driver (rules.mk)\nDESCRIPTION: Sets the audio driver to `pwm_software` in `rules.mk`, enabling software-based PWM signal generation for audio output. A timer callback toggles the selected pin in software.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/audio.md#_snippet_7\n\nLANGUAGE: makefile\nCODE:\n```\nAUDIO_DRIVER = pwm_software\n```\n\n----------------------------------------\n\nTITLE: Enabling NKRO for Plover\nDESCRIPTION: To enable NKRO (n-key rollover) for better Plover input, add `NKRO_ENABLE = yes` to your `rules.mk`. This allows switching to NKRO mode. To automatically enable NKRO, add `#define FORCE_NKRO` in your `config.h`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/stenography.md#_snippet_0\n\nLANGUAGE: makefile\nCODE:\n```\nNKRO_ENABLE = yes\n```\n\n----------------------------------------\n\nTITLE: Reading I2C Register (8-bit Address) - C\nDESCRIPTION: This function reads data from a register with an 8-bit address on the specified I2C device. It takes the device address, register address, a pointer to a data buffer, the number of bytes to read, and a timeout value as input.  It returns an `i2c_status_t` indicating the status of the operation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/i2c.md#_snippet_5\n\nLANGUAGE: C\nCODE:\n```\ni2c_status_t i2c_read_register(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length, uint16_t timeout)\n```\n\n----------------------------------------\n\nTITLE: Timer Backlight Driver Configuration (Make)\nDESCRIPTION: This snippet shows how to select the Timer backlight driver in `rules.mk`. This driver uses an interrupt handler attached to a timer to control the backlight pin.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/backlight.md#_snippet_4\n\nLANGUAGE: make\nCODE:\n```\nBACKLIGHT_DRIVER = timer\n```\n\n----------------------------------------\n\nTITLE: LED Mapping (RGB) in keyboardname.c (C)\nDESCRIPTION: This snippet shows how to map the output pins to LED indices for the IS31FL3729 RGB driver in your keyboard's `.c` file.  It defines an array that specifies the driver index and PWM register addresses for the red, green, and blue channels of each LED.  Requires the `IS31FL3729_LED_COUNT` define.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/is31fl3729.md#_snippet_4\n\nLANGUAGE: c\nCODE:\n```\nconst is31fl3729_led_t PROGMEM g_is31fl3729_leds[IS31FL3729_LED_COUNT] = {\n/* Driver\n *   |  R        G        B */\n    {0, SW1_CS1, SW1_CS2, SW1_CS3},\n    // etc...\n};\n```\n\n----------------------------------------\n\nTITLE: Flashing WT65-H2 Firmware (QMK)\nDESCRIPTION: This command builds and flashes the default QMK firmware for the wilba.tech WT65-H2 keyboard to the device. It requires a configured QMK build environment and a connected keyboard in flashing mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wilba_tech/wt65_h2/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake wilba_tech/wt65_h2:default:flash\n```\n\n----------------------------------------\n\nTITLE: Generating info.json for QMK Keyboard\nDESCRIPTION: This command generates an `info.json` file for a specified keyboard in QMK Firmware.  It's used to consolidate keyboard parameters, making maintenance easier and enabling non-technical users to manage keyboard configurations. The output shows warnings for duplicate keys between `config.h`, `rules.mk` and the generated `info.json`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/ChangeLog/20210227.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nuser@hostname:~/qmk_firmware/keyboards/lets_split:0$ qmk generate-info-json > new-info.json\nuser@hostname:~/qmk_firmware/keyboards/lets_split:0$ mv new-info.json info.json\nuser@hostname:~/qmk_firmware/keyboards/lets_split:0$ qmk info\n⚠ lets_split/rev2: DEBOUNCE in config.h is overwriting debounce in info.json\n⚠ lets_split/rev2: DEVICE_VER in config.h is overwriting usb.device_ver in info.json\n⚠ lets_split/rev2: DIODE_DIRECTION in config.h is overwriting diode_direction in info.json\n⚠ lets_split/rev2: MANUFACTURER in config.h is overwriting manufacturer in info.json\n⚠ lets_split/rev2: RGB_DI_PIN in config.h is overwriting rgblight.pin in info.json\n⚠ lets_split/rev2: RGBLED_NUM in config.h is overwriting rgblight.led_count in info.json\n⚠ lets_split/rev2: PRODUCT_ID in config.h is overwriting usb.pid in info.json\n⚠ lets_split/rev2: VENDOR_ID in config.h is overwriting usb.vid in info.json\n⚠ lets_split/rev2: Matrix pins are specified in both info.json and config.h, the config.h values win.\n⚠ lets_split/rev2: LAYOUTS in rules.mk is overwriting community_layouts in info.json\n⚠ lets_split/rev2: Feature bootmagic is specified in both info.json and rules.mk, the rules.mk value wins.\n⚠ lets_split/rev2: Feature mousekey is specified in both info.json and rules.mk, the rules.mk value wins.\n⚠ lets_split/rev2: Feature extrakey is specified in both info.json and rules.mk, the rules.mk value wins.\n⚠ lets_split/rev2: Feature console is specified in both info.json and rules.mk, the rules.mk value wins.\n⚠ lets_split/rev2: Feature command is specified in both info.json and rules.mk, the rules.mk value wins.\n⚠ lets_split/rev2: Feature nkro is specified in both info.json and rules.mk, the rules.mk value wins.\n⚠ lets_split/rev2: Feature backlight is specified in both info.json and rules.mk, the rules.mk value wins.\n⚠ lets_split/rev2: Feature midi is specified in both info.json and rules.mk, the rules.mk value wins.\n⚠ lets_split/rev2: Feature audio is specified in both info.json and rules.mk, the rules.mk value wins.\n⚠ lets_split/rev2: Feature unicode is specified in both info.json and rules.mk, the rules.mk value wins.\n⚠ lets_split/rev2: Feature bluetooth is specified in both info.json and rules.mk, the rules.mk value wins.\n⚠ lets_split/rev2: Feature rgblight is specified in both info.json and rules.mk, the rules.mk value wins.\n⚠ lets_split/rev2: Feature sleep_led is specified in both info.json and rules.mk, the rules.mk value wins.\nKeyboard Name: Let's Split\nManufacturer: Wootpatoot\nWebsite:\nMaintainer: QMK Community\nKeyboard Folder: lets_split/rev2\nLayouts: LAYOUT, LAYOUT_ortho_4x12\nSize: 13 x 4\nProcessor: atmega32u4\nBootloader: caterina\n```\n\n----------------------------------------\n\nTITLE: Matrix Diagram for DeskDaily Daily60\nDESCRIPTION: The provided diagram illustrates the key matrix layout for the DeskDaily Daily60 keyboard. It shows the physical arrangement of keys and their corresponding row/column addresses within the matrix, which are critical for the keyboard controller to identify which key is pressed. The diagram includes representations for various layouts including standard, ISO Enter, LShift, RShift, Tsangan and Tsangan Split Space.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/nightly_boards/daily60/matrix_diagram.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n                                                    ┌───────┐\n                                       2u Backspace │0D     │\n                                                    └───────┘\n┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┐\n│00 │01 │02 │03 │04 │05 │06 │07 │08 │09 │0A │0B │0C │0D │1D │\n├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴───┤      ┌─────┐\n│10   │11 │12 │13 │14 │15 │16 │17 │18 │19 │1A │1B │1C │2D   │      │     │\n├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴─────┤   ┌──┴┐2D  │\n│20    │21 │22 │23 │24 │25 │26 │27 │28 │29 │2A │2B │2C      │   │2C │    │\n├────┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴────┬───┤   └───┴────┘\n│30  │31 │32 │33 │34 │35 │36 │37 │38 │39 │3A │3B │3C    │3D │    ISO Enter\n├────┼───┴┬──┴─┬─┴───┴───┴───┴───┴───┴──┬┴───┼───┴┬────┬┴───┤\n│40  │42  │43  │47                      │4A  │4B  │4C  │4D  │\n└────┴────┴────┴────────────────────────┴────┴────┴────┴────┘\n┌────────┐                                       ┌──────────┐\n│30      │ 2.25u LShift             2.75u RShift │3C        │\n└────────┘                                       └──────────┘\n┌─────┬───┬─────┬───────────────────────────┬─────┬───┬─────┐\n│40   │42 │43   │48                         │4B   │4C │4D   │ Tsangan\n└─────┴───┴─────┴───────────────────────────┴─────┴───┴─────┘\n┌─────┬───┬─────┬────────┬───┬───┬──────────┬─────┬───┬─────┐\n│40   │42 │43   │45      │47 │48 │49        │4B   │4C │4D   │ Tsangan Split Space\n└─────┴───┴─────┴────────┴───┴───┴──────────┴─────┴───┴─────┘\n```\n\n----------------------------------------\n\nTITLE: OLED Logo Definition - Japanese (C)\nDESCRIPTION: This C code defines a bitmap for an OLED display, representing a Japanese-style logo.  Each byte represents a column of pixels on the OLED screen. These bitmaps can be integrated into the QMK firmware to customize the OLED display on the Pancake 2 keyboard.  The code requires no external dependencies, assuming it will be used within the QMK framework.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/spaceman/pancake/rev2/readme.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n0x00, 0xC0, 0x3C, 0x00, 0x04, 0x1A,\n    0xE4, 0x00, 0x82, 0x84, 0x40, 0x20,\n    0x18, 0x00, 0x10, 0x0E, 0x84, 0x7C,\n    0x04, 0x00, 0x10, 0x10, 0x10, 0x10,\n    0x10, 0x00, 0x24, 0x24, 0xFE, 0x24,\n    0x24, 0x00, 0x00, 0xC0, 0x20, 0x10,\n    0x10, 0x08, 0x08, 0x08, 0x08, 0x04,\n    0x04, 0x04, 0x04, 0x04, 0x64, 0x74,\n    0x74, 0x34, 0x04, 0x04, 0x04, 0x04,\n    0x04, 0x08, 0x08, 0x08, 0x08, 0x10,\n    0x10, 0x20, 0xC0, 0x00, 0x00, 0x8C,\n    0x53, 0x22, 0x22, 0x44, 0xC4, 0x5C,\n    0x4C, 0x88, 0x88, 0x88, 0x88, 0x88,\n    0x88, 0x88, 0x88, 0x88, 0x88, 0x88,\n    0x88, 0x88, 0x88, 0x44, 0x44, 0x44,\n    0xC4, 0x22, 0x22, 0x53, 0x8C, 0x00,\n    0x00, 0x01, 0x0E, 0x04, 0x04, 0x08,\n    0x09, 0x08, 0x08, 0x10, 0x10, 0x10,\n    0x10, 0x10, 0x10, 0x11, 0x13, 0x10,\n    0x10, 0x10, 0x10, 0x10, 0x10, 0x18,\n    0x08, 0x08, 0x08, 0x04, 0x04, 0x02,\n    0x01, 0x00,\n```\n\n----------------------------------------\n\nTITLE: Customizing Combo Timeout Window\nDESCRIPTION: This code snippet demonstrates how to customize the timeout window for individual combos using `COMBO_TERM_PER_COMBO` and the `get_combo_term` function. The timeout value can be determined based on the combo's keycode, index, or the keys within the chord. It uses a switch statement to assign different timeout values based on the combo's characteristics. The default timeout, `COMBO_TERM`, is used if no specific condition is met.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/combo.md#_snippet_5\n\nLANGUAGE: c\nCODE:\n```\n#ifdef COMBO_TERM_PER_COMBO\nuint16_t get_combo_term(uint16_t combo_index, combo_t *combo) {\n    // decide by combo->keycode\n    switch (combo->keycode) {\n        case KC_X:\n            return 50;\n    }\n\n    // or with combo index, i.e. its name from enum.\n    switch (combo_index) {\n        case COMBO_NAME_HERE:\n            return 9001;\n    }\n\n    // And if you're feeling adventurous, you can even decide by the keys in the chord,\n    // i.e. the exact array of keys you defined for the combo.\n    // This can be useful if your combos have a common key and you want to apply the\n    // same combo term for all of them.\n    if (combo->keys[0] == KC_ENT) { // if first key in the array is Enter\n        return 150;\n    }\n\n    return COMBO_TERM;\n}\n#endif\n```\n\n----------------------------------------\n\nTITLE: Tap Dance: Sending String on Multiple Taps in keymap.c\nDESCRIPTION: This code defines a tap dance function that sends the string \"Safety dance!\" after the key is tapped 100 times.  It uses the `SEND_STRING` macro and `reset_tap_dance` function.  It depends on the QMK core and requires the Tap Dance feature to be enabled. The function is associated with the `CT_EGG` tap dance action.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/tap_dance.md#_snippet_4\n\nLANGUAGE: c\nCODE:\n```\nvoid dance_egg(tap_dance_state_t *state, void *user_data) {\n    if (state->count >= 100) {\n        SEND_STRING(\"Safety dance!\");\n        reset_tap_dance(state);\n    }\n}\n\ntap_dance_action_t tap_dance_actions[] = {\n    [CT_EGG] = ACTION_TAP_DANCE_FN(dance_egg),\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Row Pins for Keyboard Matrix (QMK)\nDESCRIPTION: This code defines the pins used for the rows in the keyboard matrix. It's crucial for the firmware to correctly identify which row a keypress originates from. This is part of the keymap configuration in QMK.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/magicforce61/readme.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#define MATRIX_ROW_PINS { D0, D1, D2, D3, D4 }\n```\n\n----------------------------------------\n\nTITLE: Compiling with RGB Underglow Enabled\nDESCRIPTION: This snippet demonstrates how to compile the firmware with RGB underglow enabled. It uses the `helix/rev2/under` keyword in the make command to select a keymap with underglow functionality enabled.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/helix/rev2/keymaps/default/readme_jp.md#_snippet_11\n\nLANGUAGE: makefile\nCODE:\n```\n$ make helix/rev2/under:default:flash\n```\n\n----------------------------------------\n\nTITLE: Querying Keyboard Info using QMK with Text Output\nDESCRIPTION: This code snippet shows how to query keyboard information using the `qmk info` command. The `-f text` option specifies that the output should be in plain text format, and `-kb clueboard/card` specifies the keyboard to retrieve information for. The output is a list of key-value pairs representing keyboard properties and configurations, using JSON dot notation for nested values.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/ChangeLog/20210828.md#_snippet_3\n\nLANGUAGE: Text\nCODE:\n```\n$ qmk info -f text -kb clueboard/card\n  bootloader: atmel-dfu\n  debounce: 20\n  diode_direction: ROW2COL\n  features.audio: True\n  features.backlight: True\n  features.bluetooth: False\n  features.bootmagic: False\n  features.command: True\n  features.console: True\n  features.extrakey: True\n  features.lto: True\n  features.midi: False\n  features.mousekey: True\n  features.nkro: False\n  features.rgblight: True\n  features.unicode: False\n  height: 8\n  keyboard_folder: clueboard/card\n  keyboard_name: Cluecard\n  layout_aliases.LAYOUT: LAYOUT_all\n  layouts: LAYOUT_all\n  maintainer: skullydazed\n  manufacturer: Clueboard\n  matrix_pins.cols: F1, F6, F7\n  matrix_pins.rows: B4, F0, F4, F5\n  platform: unknown\n  processor: atmega32u4\n  processor_type: avr\n  protocol: LUFA\n  rgblight.brightness_steps: 17\n  rgblight.hue_steps: 10\n  rgblight.led_count: 4\n  rgblight.pin: E6\n  rgblight.saturation_steps: 17\n  split.transport.protocol: serial\n  usb.device_ver: 0x0001\n  usb.pid: 0x2330\n  usb.vid: 0xC1ED\n  width: 10\n```\n\n----------------------------------------\n\nTITLE: DIP Switch Mask Callback in keymap.c (Bitmask)\nDESCRIPTION: This snippet shows the `dip_switch_update_mask_user` callback function implemented in the `keymap.c` file to handle DIP switch changes using a bitmask.  It checks specific bits in the `state` variable to determine which layers to activate or deactivate.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/dip_switch.md#_snippet_8\n\nLANGUAGE: C\nCODE:\n```\nbool dip_switch_update_mask_user(uint32_t state) { \n    if (state & (1UL<<0) && state & (1UL<<1)) {\n        layer_on(_ADJUST); // C on esc\n    } else {\n        layer_off(_ADJUST);\n    }\n    if (state & (1UL<<0)) {\n        layer_on(_TEST_A); // A on ESC\n    } else {\n        layer_off(_TEST_A);\n    }\n    if (state & (1UL<<1)) {\n        layer_on(_TEST_B); // B on esc\n    } else {\n        layer_off(_TEST_B);\n    }\n    return true;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Serial Driver to Vendor (RP2040 + PIO) in rules.mk (Make)\nDESCRIPTION: This snippet configures the QMK firmware to use the vendor-specific serial driver for split keyboard communication on RP2040 with PIO. It involves setting the SERIAL_DRIVER variable in the rules.mk file. This option is used when utilizing the RP2040's PIO subsystem.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/serial.md#_snippet_4\n\nLANGUAGE: make\nCODE:\n```\nSERIAL_DRIVER = vendor\n```\n\n----------------------------------------\n\nTITLE: Configuring Joystick Axes and Buttons\nDESCRIPTION: This snippet illustrates how to configure the number of joystick buttons, axes, and axis resolution within the QMK firmware by defining `JOYSTICK_BUTTON_COUNT`, `JOYSTICK_AXIS_COUNT`, and `JOYSTICK_AXIS_RESOLUTION` in `config.h`. The button count ranges from 0 to 32, the axis count from 0 to 6, and the resolution from 8 to 16 bits.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/joystick.md#_snippet_2\n\nLANGUAGE: c\nCODE:\n```\n// Min 0, max 32\n#define JOYSTICK_BUTTON_COUNT 16\n// Min 0, max 6: X, Y, Z, Rx, Ry, Rz\n#define JOYSTICK_AXIS_COUNT 3\n// Min 8, max 16\n#define JOYSTICK_AXIS_RESOLUTION 10\n```\n\n----------------------------------------\n\nTITLE: Setting the PAW3204 driver in rules.mk\nDESCRIPTION: This snippet demonstrates how to specify the PAW3204 sensor as the pointing device driver in the `rules.mk` file. This setting informs the build system to include the necessary driver files for the PAW3204 sensor.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/pointing_device.md#_snippet_9\n\nLANGUAGE: Make\nCODE:\n```\nPOINTING_DEVICE_DRIVER = paw3204\n```\n\n----------------------------------------\n\nTITLE: Building DZ64RGB Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the DZ64RGB keyboard using the QMK build environment. It requires a properly configured QMK build environment to execute successfully. The output is a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/dztech/dz64rgb/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake dztech/dz64rgb:default\n```\n\n----------------------------------------\n\nTITLE: Reading and Fading Display Buffer using ST7565 in C\nDESCRIPTION: This code demonstrates how to read the raw display buffer of the ST7565 LCD and implement a fading effect by randomly turning off pixels. It uses the `st7565_read_raw` function to get a pointer to the buffer and its remaining size. It then iterates through the buffer, randomly clears bits in each byte, and writes the modified byte back to the display using `st7565_write_raw_byte`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/st7565.md#_snippet_3\n\nLANGUAGE: c\nCODE:\n```\n//Setup some mask which can be or'd with bytes to turn off pixels\nconst uint8_t single_bit_masks[8] = {127, 191, 223, 239, 247, 251, 253, 254};\n\nstatic void fade_display(void) {\n    //Define the reader structure\n    display_buffer_reader_t reader;\n    uint8_t buff_char;\n    if (random() % 30 == 0) {\n        srand(timer_read());\n        // Fetch a pointer for the buffer byte at index 0. The return structure\n        // will have the pointer and the number of bytes remaining from this\n        // index position if we want to perform a sequential read by\n        // incrementing the buffer pointer\n        reader = st7565_read_raw(0);\n        //Loop over the remaining buffer and erase pixels as we go\n        for (uint16_t i = 0; i < reader.remaining_element_count; i++) {\n            //Get the actual byte in the buffer by dereferencing the pointer\n            buff_char = *reader.current_element;\n            if (buff_char != 0) {\n                st7565_write_raw_byte(buff_char & single_bit_masks[rand() % 8], i);\n            }\n            //increment the pointer to fetch a new byte during the next loop\n            reader.current_element++;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Configuration Values (Attribute Style) - Python\nDESCRIPTION: Shows how to delete a configuration value using attribute-style access in the QMK CLI. This method utilizes dot notation to specify the section and key for removal.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/cli_development.md#_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\ndel(cli.config.<section>.<key>)\n```\n\n----------------------------------------\n\nTITLE: Customizing WPM Regression Count in QMK Firmware (C)\nDESCRIPTION: This C code snippet demonstrates how to customize the WPM regression count when `WPM_ALLOW_COUNT_REGRESSION` is defined using the `wpm_regress_count` function.  This allows penalizing certain keycodes (like delete or backspace) by reducing the WPM. It makes use of the QK_LCTL, QK_LSFT, QK_RCTL, QK_RSFT, QK_MOD_TAP, QK_LAYER_TAP, QK_MODS, KC_DEL, KC_BSPC, MOD_MASK_CTRL, get_mods(), and get_oneshot_mods() functions.  The function signature is `uint8_t wpm_regress_count(uint16_t keycode)`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/wpm.md#_snippet_2\n\nLANGUAGE: c\nCODE:\n```\n__attribute__((weak)) uint8_t wpm_regress_count(uint16_t keycode) {\n    bool weak_modded = (keycode >= QK_LCTL && keycode < QK_LSFT) || (keycode >= QK_RCTL && keycode < QK_RSFT);\n    \n    if ((keycode >= QK_MOD_TAP && keycode <= QK_MOD_TAP_MAX) || (keycode >= QK_LAYER_TAP && keycode <= QK_LAYER_TAP_MAX) || (keycode >= QK_MODS && keycode <= QK_MODS_MAX)) {\n        keycode = keycode & 0xFF;\n    } else if (keycode > 0xFF) {\n        keycode = 0;\n    }\n    if (((get_mods() | get_oneshot_mods()) & MOD_MASK_CTRL} || weak_modded) && (keycode == KC_DEL || keycode == KC_BSPC)) {\n        return WPM_ESTIMATED_WORD_SIZE;\n    }\n    if (keycode == KC_DEL || keycode == KC_BSPC) {\n        return 1;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Processing keycodes and toggling RGB layer in C\nDESCRIPTION: This `process_record_user` function handles keycodes, including a custom `RGB_LYR` keycode to toggle the `rgb_layer_change` setting. When `RGB_LYR` is pressed, it toggles the setting, updates the EEPROM using `eeconfig_update_user()`, and updates the layer color if the setting is enabled. It also disables layer indication if any of the standard RGB mode keycodes are used.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/feature_eeprom.md#_snippet_3\n\nLANGUAGE: c\nCODE:\n```\n\nbool process_record_user(uint16_t keycode, keyrecord_t *record) {\n  switch (keycode) {\n    case FOO:\n      if (record->event.pressed) {\n        // Do something when pressed\n      } else {\n        // Do something else when release\n      }\n      return false; // Skip all further processing of this key\n    case KC_ENTER:\n        // Play a tone when enter is pressed\n        if (record->event.pressed) {\n            PLAY_SONG(tone_qwerty);\n        }\n        return true; // Let QMK send the enter press/release events\n    case RGB_LYR:  // This allows me to use underglow as layer indication, or as normal\n        if (record->event.pressed) {\n            user_config.rgb_layer_change ^= 1; // Toggles the status\n            eeconfig_update_user(user_config.raw); // Writes the new status to EEPROM\n            if (user_config.rgb_layer_change) { // if layer state indication is enabled,\n                layer_state_set(layer_state);   // then immediately update the layer color\n            }\n        }\n        return false;\n    case RGB_MODE_FORWARD ... RGB_MODE_GRADIENT: // For any of the RGB codes (see quantum_keycodes.h, L400 for reference)\n        if (record->event.pressed) { //This disables layer indication, as it's assumed that if you're changing this ... you want that disabled\n            if (user_config.rgb_layer_change) {        // only if this is enabled\n                user_config.rgb_layer_change = false;  // disable it, and\n                eeconfig_update_user(user_config.raw); // write the setings to EEPROM\n            }\n        }\n        return true; break;\n    default:\n      return true; // Process all other keycodes normally\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting RGBLight Animation Intervals in QMK (C)\nDESCRIPTION: This C code snippet shows how to define the animation speeds for various RGBLight modes in QMK Firmware. It sets the intervals (in milliseconds) for breathing, rainbow mood, rainbow swirl, snake, knight, and twinkle animations, and defines hue ranges for static gradient modes. The `PROGMEM` keyword indicates that these arrays are stored in flash memory to conserve RAM.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/rgblight.md#_snippet_3\n\nLANGUAGE: c\nCODE:\n```\n// How long (in milliseconds) to wait between animation steps for each of the \"Solid color breathing\" animations\nconst uint8_t RGBLED_BREATHING_INTERVALS[] PROGMEM = {30, 20, 10, 5};\n\n// How long (in milliseconds) to wait between animation steps for each of the \"Cycling rainbow\" animations\nconst uint8_t RGBLED_RAINBOW_MOOD_INTERVALS[] PROGMEM = {120, 60, 30};\n\n// How long (in milliseconds) to wait between animation steps for each of the \"Swirling rainbow\" animations\nconst uint8_t RGBLED_RAINBOW_SWIRL_INTERVALS[] PROGMEM = {100, 50, 20};\n\n// How long (in milliseconds) to wait between animation steps for each of the \"Snake\" animations\nconst uint8_t RGBLED_SNAKE_INTERVALS[] PROGMEM = {100, 50, 20};\n\n// How long (in milliseconds) to wait between animation steps for each of the \"Knight\" animations\nconst uint8_t RGBLED_KNIGHT_INTERVALS[] PROGMEM = {127, 63, 31};\n\n// How long (in milliseconds) to wait between animation steps for each of the \"Twinkle\" animations\nconst uint8_t RGBLED_TWINKLE_INTERVALS[] PROGMEM = {50, 25, 10};\n\n// These control which hues are selected for each of the \"Static gradient\" modes\nconst uint8_t RGBLED_GRADIENT_RANGES[] PROGMEM = {255, 170, 127, 85, 64};\n```\n\n----------------------------------------\n\nTITLE: Defining Encoder Pins in config.h (QMK)\nDESCRIPTION: This snippet shows how to define the A and B pins for a single encoder in the `config.h` file of a QMK Firmware project. The `ENCODER_A_PINS` and `ENCODER_B_PINS` macros are defined as arrays containing the pin names connected to the encoder's A and B outputs, respectively. This configuration tells the firmware which pins to monitor for encoder rotation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/encoders.md#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n#define ENCODER_A_PINS { B12 }\n#define ENCODER_B_PINS { B13 }\n```\n\n----------------------------------------\n\nTITLE: Compiling Firmware in Keyboard Directory - qmk compile\nDESCRIPTION: This command compiles firmware when executed from within a keyboard directory. It automatically detects the keyboard and keymap.  Alternatively, `--keymap <keymap_name>` can specify a keymap. Assumes the existence of a default keymap if none is specified.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/cli_commands.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nqmk compile\n```\n\n----------------------------------------\n\nTITLE: Implementing full custom matrix functions\nDESCRIPTION: This code shows the required functions for the full custom matrix implementation in `matrix.c`. `matrix_get_row` returns the data for a given row, `matrix_print` dumps the matrix state to the console, `matrix_init` initializes the hardware and global matrix, and `matrix_scan` performs the matrix scanning. It relies on `debounce_init`, `debounce`, `matrix_init_kb`, and `matrix_scan_kb`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/custom_matrix.md#_snippet_4\n\nLANGUAGE: c\nCODE:\n```\nmatrix_row_t matrix_get_row(uint8_t row) {\n    // TODO: return the requested row data\n}\n\nvoid matrix_print(void) {\n    // TODO: use print() to dump the current matrix state to console\n}\n\nvoid matrix_init(void) {\n    // TODO: initialize hardware and global matrix state here\n\n    // Unless hardware debouncing - Init the configured debounce routine\n    debounce_init(MATRIX_ROWS);\n\n    // This *must* be called for correct keyboard behavior\n    matrix_init_kb();\n}\n\nuint8_t matrix_scan(void) {\n    bool changed = false;\n\n    // TODO: add matrix scanning routine here\n\n    // Unless hardware debouncing - use the configured debounce routine\n    changed = debounce(raw_matrix, matrix, MATRIX_ROWS, changed);\n\n    // This *must* be called for correct keyboard behavior\n    matrix_scan_kb();\n\n    return changed;\n}\n```\n\n----------------------------------------\n\nTITLE: Cancel Unicode Input Sequence - C\nDESCRIPTION: This function cancels the Unicode input sequence. The exact behavior depends on the currently selected input mode, as described in the function documentation. This function is weakly defined and can be overridden in user code.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/unicode.md#_snippet_17\n\nLANGUAGE: C\nCODE:\n```\nvoid unicode_input_cancel(void)\n```\n\n----------------------------------------\n\nTITLE: Enabling Windows HexNumpad\nDESCRIPTION: This code snippet shows how to enable the HexNumpad Unicode input mode on Windows via a registry command. It requires administrator privileges and a reboot. Note that this method only supports code points up to `U+FFFF`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/unicode.md#_snippet_8\n\nLANGUAGE: batch\nCODE:\n```\nreg add \"HKCU\\Control Panel\\Input Method\" -v EnableHexNumpad -t REG_SZ -d 1\n```\n\n----------------------------------------\n\nTITLE: Flashing with Teensy Loader CLI via command line\nDESCRIPTION: This snippet shows the command for flashing a keyboard using the Teensy Loader Command Line. Replace `<mcu>` with the specific microcontroller and `<filename>` with the `.hex` file path. The `-v` option enables verbose output.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/flashing.md#_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\nteensy_loader_cli -v -mmcu=<mcu> <filename>\n```\n\n----------------------------------------\n\nTITLE: Setting Configuration Values with QMK CLI\nDESCRIPTION: This snippet demonstrates how to set a configuration value using the `qmk config` command. Specifically, it sets the `default.keymap` to `default`. This allows users to configure default settings for QMK CLI operations.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/cli_configuration.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ qmk config default.keymap=default\n```\n\n----------------------------------------\n\nTITLE: Split Keyboard Scrolling Mode Implementation in QMK\nDESCRIPTION: This C code implements scrolling mode for a split keyboard based on the active layer. When the `_RAISE` layer is active, scrolling mode is enabled and the CPI is set to 2000.  When the `_RAISE` layer is deactivated, scrolling mode is disabled, and the CPI is reset to 8000, if it was previously enabled. The mouse movement is redirected to scroll commands in `pointing_device_task_user` when scrolling mode is active. Depends on QMK's layer management system.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/pointing_device.md#_snippet_20\n\nLANGUAGE: c\nCODE:\n```\nstatic bool scrolling_mode = false;\n\nlayer_state_t layer_state_set_user(layer_state_t state) {\n    switch (get_highest_layer(state)) {\n        case _RAISE:  // If we're on the _RAISE layer enable scrolling mode\n            scrolling_mode = true;\n            pointing_device_set_cpi(2000);\n            break;\n        default:\n            if (scrolling_mode) {  // check if we were scrolling before and set disable if so\n                scrolling_mode = false;\n                pointing_device_set_cpi(8000);\n            }\n            break;\n    }\n    return state;\n}\n\nreport_mouse_t pointing_device_task_user(report_mouse_t mouse_report) {\n    if (scrolling_mode) {\n        mouse_report.h = mouse_report.x;\n        mouse_report.v = mouse_report.y;\n        mouse_report.x = 0;\n        mouse_report.y = 0;\n    }\n    return mouse_report;\n}\n```\n\n----------------------------------------\n\nTITLE: Apply Autocorrect with Sound - C\nDESCRIPTION: This example demonstrates how to customize the autocorrection process in QMK.  It plays a sound when a typo is corrected and then executes the autocorrection by sending backspaces and the corrected string. Requires `AUDIO_ENABLE` to be defined. It returns `false` to prevent default autocorrection handling.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/autocorrect.md#_snippet_5\n\nLANGUAGE: c\nCODE:\n```\n#ifdef AUDIO_ENABLE\nfloat autocorrect_song[][2] = SONG(TERMINAL_SOUND);\n#endif\n\nbool apply_autocorrect(uint8_t backspaces, const char *str, char *typo, char *correct) {\n#ifdef AUDIO_ENABLE\n    PLAY_SONG(autocorrect_song);\n#endif\n    for (uint8_t i = 0; i < backspaces; ++i) {\n        tap_code(KC_BSPC);\n    }\n    send_string_P(str);\n    return false;\n}\n```\n\n----------------------------------------\n\nTITLE: Step to Next Unicode Input Mode - C\nDESCRIPTION: This function changes the current Unicode input mode to the next available mode in a sequence.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/unicode.md#_snippet_11\n\nLANGUAGE: C\nCODE:\n```\nvoid unicode_input_mode_step(void)\n```\n\n----------------------------------------\n\nTITLE: Enabling SSD1351 Driver in rules.mk (Make)\nDESCRIPTION: This snippet demonstrates how to enable the SSD1351 display driver for Quantum Painter by adding the driver to the `QUANTUM_PAINTER_DRIVERS` variable in the `rules.mk` file. This step is necessary to include the driver in the build process. Dependencies include Quantum Painter being enabled.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/quantum_painter.md#_snippet_26\n\nLANGUAGE: make\nCODE:\n```\nQUANTUM_PAINTER_ENABLE = yes\nQUANTUM_PAINTER_DRIVERS += ssd1351_spi\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware to Bakeneko 65 V3 with QMK\nDESCRIPTION: This command flashes the default firmware to the Bakeneko 65 V3 keyboard (revision 3) using the QMK build environment. It requires the QMK build environment to be configured and the necessary flashing tools installed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kkatano/bakeneko65/rev3/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake kkatano/bakeneko65/rev3:default:flash\n```\n\n----------------------------------------\n\nTITLE: Defining Matrix Column Pins in QMK config.h\nDESCRIPTION: This code snippet defines the pins connected to the columns of the keyboard matrix in QMK firmware. The pins should be listed from left to right. It is defined in `config.h` file. It may be omitted if matrix reads are handled in an alternate manner.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/config_options.md#_snippet_8\n\nLANGUAGE: c\nCODE:\n```\n#define MATRIX_COL_PINS { F1, F0, B0, C7, F4, F5, F6, F7, D4, D6, B4, D7 }\n```\n\n----------------------------------------\n\nTITLE: Defining Combo Term\nDESCRIPTION: Defines the time window (in milliseconds) during which combo keys must be detected. Defaults to `TAPPING_TERM` if not defined. Influences how quickly combo keys need to be pressed to trigger.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/config_options.md#_snippet_58\n\nLANGUAGE: C\nCODE:\n```\n#define COMBO_TERM 200\n```\n\n----------------------------------------\n\nTITLE: Enabling Per-Key Quick Tap Term\nDESCRIPTION: This snippet enables per-key configuration for the `QUICK_TAP_TERM` feature. By defining `QUICK_TAP_TERM_PER_KEY` and `get_quick_tap_term`, the quick tap term can be customized for individual keycodes based on specific conditions.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/tap_hold.md#_snippet_12\n\nLANGUAGE: c\nCODE:\n```\n#define QUICK_TAP_TERM_PER_KEY\n```\n\n----------------------------------------\n\nTITLE: Enabling Per-Key Quick Tap Term\nDESCRIPTION: Enables the use of individual quick tap term settings for each key.  This allows for customized timings for each dual-role key. Requires `QUICK_TAP_TERM` to be defined.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/config_options.md#_snippet_49\n\nLANGUAGE: C\nCODE:\n```\n#define QUICK_TAP_TERM_PER_KEY\n```\n\n----------------------------------------\n\nTITLE: Enabling Extra Keys in QMK\nDESCRIPTION: This snippet shows how to enable extra keys (System, Audio Control Keys) in QMK by setting `EXTRAKEY_ENABLE = yes` in the `rules.mk` file. This enables the use of special function keys like volume control or media playback.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/faq_misc.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nEXTRAKEY_ENABLE = yes          # Audio control and System control\n```\n\n----------------------------------------\n\nTITLE: Setting Idle Timeout in config.h (C)\nDESCRIPTION: This code snippet illustrates how to set an idle timeout for Layer Lock in QMK firmware. If no keys are pressed for the specified duration (in milliseconds), the locked layer will automatically unlock.  This helps prevent unintended layer activation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/layer_lock.md#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n#define LAYER_LOCK_IDLE_TIMEOUT 60000  // Turn off after 60 seconds.\n```\n\n----------------------------------------\n\nTITLE: Adding a Keymap to External Userspace Build Targets\nDESCRIPTION: This snippet demonstrates how to add a keymap to the list of build targets in the external userspace.  This is required for using GitHub Actions to automatically build firmware. It showcases adding both a keyboard/keymap combination and a JSON-based keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/newbs_external_userspace.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n# for a keyboard/keymap combo:\nqmk userspace-add -kb <keyboard> -km <keymap>\n# or, for a json-based keymap (if kept \"loose\"):\nqmk userspace-add <relative/path/to/my/keymap.json>\n```\n\n----------------------------------------\n\nTITLE: Setting tinyuf2 Bootloader in rules.mk (Make)\nDESCRIPTION: This code snippet configures the build system to use the tinyuf2 bootloader, which is currently only supported on F303/F401/F411 MCUs. Setting the bootloader ensures that the firmware is built with tinyuf2 compatibility.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/flashing.md#_snippet_19\n\nLANGUAGE: make\nCODE:\n```\n# Bootloader selection\nBOOTLOADER = tinyuf2\n```\n\n----------------------------------------\n\nTITLE: Defining Master Right Hand\nDESCRIPTION: Master half is defined to be the right half. Inverts the default, where the plugged-in side is assumed to be the left half.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/config_options.md#_snippet_91\n\nLANGUAGE: C\nCODE:\n```\n#define MASTER_RIGHT\n```\n\n----------------------------------------\n\nTITLE: Flashing Keychron V10 Firmware with Make\nDESCRIPTION: These `make` commands are used to flash the compiled QMK firmware to the Keychron V10 keyboard. The first command flashes the ANSI layout with an encoder, while the second flashes the ISO layout with an encoder. These commands require a properly configured QMK build environment and a connected keyboard in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keychron/v10/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake keychron/v10/ansi_encoder:default:flash\nmake keychron/v10/iso_encoder:default:flash\n```\n\n----------------------------------------\n\nTITLE: Enabling Caps Word in rules.mk (Make)\nDESCRIPTION: This code snippet demonstrates how to enable the Caps Word feature in the `rules.mk` file.  Setting `CAPS_WORD_ENABLE` to `yes` activates the feature within the QMK firmware.  This is a prerequisite for using any of the Caps Word functionalities.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/caps_word.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nCAPS_WORD_ENABLE = yes\n```\n\n----------------------------------------\n\nTITLE: Enabling Permissive Hold in QMK\nDESCRIPTION: This code snippet enables the `PERMISSIVE_HOLD` option for all dual-role keys in the QMK firmware. This setting makes tap and hold keys work better for fast typists by prioritizing the hold action when another key is tapped within the tapping term.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/tap_hold.md#_snippet_5\n\nLANGUAGE: c\nCODE:\n```\n#define PERMISSIVE_HOLD\n```\n\n----------------------------------------\n\nTITLE: Configuring DAC Additive Audio Driver (rules.mk)\nDESCRIPTION: Sets the audio driver to `dac_additive` in `rules.mk` to enable additive wave synthesis using the DAC peripheral, allowing for more complex sound generation.  This requires defining `AUDIO_PIN` in `config.h`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/audio.md#_snippet_5\n\nLANGUAGE: makefile\nCODE:\n```\nAUDIO_DRIVER = dac_additive\n```\n\n----------------------------------------\n\nTITLE: Direct Pin Matrix Configuration in `keyboard.json`\nDESCRIPTION: This JSON snippet demonstrates how to configure a direct pin matrix in `keyboard.json`. This method connects each switch to a separate pin instead of sharing row/column pins. The matrix dimensions are inferred from the `matrix_pins.direct` array.  `null` can be used to fill empty spaces, but should be minimized. `diode_direction`, `matrix_pins.cols` and `matrix_pins.rows` are ignored when `matrix_pins.direct` is present.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/porting_your_keyboard_to_qmk.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n    \"matrix_pins\": {\n        \"direct\": [\n            [\"F1\", \"E6\", \"B0\", \"B2\", \"B3\"],\n            [\"F5\", \"F0\", \"B1\", \"B7\", \"D2\"],\n            [\"F6\", \"F7\", \"C7\", \"D5\", \"D3\"],\n            [\"B5\", \"C6\", \"B6\", null, null]\n        ]\n    },\n```\n\n----------------------------------------\n\nTITLE: Enabling Split USB Detection - C\nDESCRIPTION: This code snippet enables dynamic master/slave detection based on USB communication activity. The half with active USB communication becomes the master, otherwise it's the slave. Without this option, the half with VBUS detection becomes the master. Enabled by default on ChibiOS/ARM.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/split_keyboard.md#_snippet_39\n\nLANGUAGE: c\nCODE:\n```\n#define SPLIT_USB_DETECT\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Split Transport in rules.mk (Make)\nDESCRIPTION: This code snippet demonstrates how to specify a custom transport (communication method) for the split keyboard by setting the `SPLIT_TRANSPORT` variable to `custom` in the `rules.mk` file. This is needed if the keyboard uses a non-standard communication method between the halves.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/split_keyboard.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nSPLIT_TRANSPORT = custom\n```\n\n----------------------------------------\n\nTITLE: Setting Default Layer Order in Firmware (C)\nDESCRIPTION: This code snippet demonstrates how to change the default layer order in the QMK firmware. By reordering the `enum layers` definition, you can specify a different layer to be the default upon startup. This change persists across boots, as it is directly defined in the firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/splitkb/halcyon/kyria/keymaps/default/readme.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nenum layers {\n    _DVORAK = 0,\n    _QWERTY,\n    _COLEMAK_DH,\n    _NAV,\n    _SYM,\n    _FUNCTION,\n    _ADJUST\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Custom RPC Buffer Sizes\nDESCRIPTION: These definitions allow altering the default inbound and outbound data sizes for remote procedure calls (RPCs). `RPC_M2S_BUFFER_SIZE` sets the maximum buffer size for data sent from the master to the slave, and `RPC_S2M_BUFFER_SIZE` sets the maximum buffer size for data sent from the slave to the master. The default is 32 bytes each.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/split_keyboard.md#_snippet_33\n\nLANGUAGE: c\nCODE:\n```\n// Master to slave:\n#define RPC_M2S_BUFFER_SIZE 48\n// Slave to master:\n#define RPC_S2M_BUFFER_SIZE 48\n```\n\n----------------------------------------\n\nTITLE: Sending Strings in QMK Firmware\nDESCRIPTION: This example demonstrates how to send a string using the `send_string()` function in QMK Firmware. This is useful for printing dynamically generated strings rather than constant, literal strings. The input is a null-terminated character array.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/feature_macros.md#_snippet_7\n\nLANGUAGE: c\nCODE:\n```\nchar my_str[4] = \"ok.\";\nsend_string(my_str);\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Encoders with Shared Pins Advanced (QMK)\nDESCRIPTION: This snippet shows how to configure multiple encoders using shared pins in `config.h`. This example defines three encoders using only three pins. It defines `ENCODER_A_PINS` and `ENCODER_B_PINS` macros to share pin B1 and B3.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/encoders.md#_snippet_15\n\nLANGUAGE: c\nCODE:\n```\n#define ENCODER_A_PINS { B1, B1, B2 }\n#define ENCODER_B_PINS { B2, B3, B3 }\n```\n\n----------------------------------------\n\nTITLE: Tap Hold Action Macro in QMK\nDESCRIPTION: This macro, `ACTION_TAP_DANCE_TAP_HOLD`, defines a tap dance action with specified tap and hold keycodes. It initializes the `tap_dance_tap_hold_t` struct with the given keycodes and associates it with the tap dance action.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/tap_dance.md#_snippet_9\n\nLANGUAGE: c\nCODE:\n```\n#define ACTION_TAP_DANCE_TAP_HOLD(tap, hold) \\\n    { .fn = {NULL, tap_dance_tap_hold_finished, tap_dance_tap_hold_reset}, .user_data = (void *)&((tap_dance_tap_hold_t){tap, hold, 0}), }\n```\n\n----------------------------------------\n\nTITLE: Include QMK Keyboard Header\nDESCRIPTION: Includes the QMK keyboard header file, which provides definitions and macros necessary for defining keymaps. This header provides access to all keycodes and keyboard-specific configurations.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/keymap.md#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n#include QMK_KEYBOARD_H\n```\n\n----------------------------------------\n\nTITLE: Building Infinity88 Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the Infinity88 keyboard using the QMK build environment. It assumes that the QMK build environment is already set up. The resulting firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechlovin/infinity88/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake mechlovin/infinity88:default\n```\n\n----------------------------------------\n\nTITLE: Enabling Basic MIDI in QMK config.h\nDESCRIPTION: This snippet shows how to enable basic MIDI functionality in QMK firmware.  Defining `MIDI_BASIC` in `config.h` enables a simplified MIDI implementation with limited functionality.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/midi.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n#define MIDI_BASIC\n```\n\n----------------------------------------\n\nTITLE: Setting Number of LEDs per Controller - C\nDESCRIPTION: This code snippet sets the number of RGB LEDs directly connected to each controller in a split keyboard. The first number is the LED count for the left side, and the second is for the right side. It automatically enables `RGBLIGHT_SPLIT` if it's not already enabled.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/split_keyboard.md#_snippet_38\n\nLANGUAGE: c\nCODE:\n```\n#define RGBLED_SPLIT { 6, 6 }\n```\n\n----------------------------------------\n\nTITLE: suspend_power_down_user and suspend_wakeup_init_user\nDESCRIPTION: Example implementations of `suspend_power_down_user()` and `suspend_wakeup_init_user()` functions in QMK.  These functions are called when the keyboard is idled and when it wakes up, respectively. They can be used to stop or start functionality like RGB lights or backlights to save power or improve user experience.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/custom_quantum_functions.md#_snippet_5\n\nLANGUAGE: c\nCODE:\n```\nvoid suspend_power_down_user(void) {\n    // code will run multiple times while keyboard is suspended\n}\n\nvoid suspend_wakeup_init_user(void) {\n    // code will run on keyboard wakeup\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Macros with `post_process_record_user`\nDESCRIPTION: This example demonstrates usage of `post_process_record_user()` for sending a keycode before and after the processed keystroke. This is useful for modifying the behavior of normal keys. The `f22_tracker` variable is used to ensure the keycode is only unregistering when the last of that keycodes has been released.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/feature_macros.md#_snippet_3\n\nLANGUAGE: C\nCODE:\n```\nstatic uint8_t f22_tracker;\n\nbool process_record_user(uint16_t keycode, keyrecord_t *record) {\n  switch (keycode) {\n    case KC_A ... KC_F21: //notice how it skips over F22\n    case KC_F23 ... KC_EXSEL: //exsel is the last one before the modifier keys\n      if (record->event.pressed) {\n        register_code(KC_F22); //this means to send F22 down\n        f22_tracker++;\n        register_code(keycode);\n        return false;\n      }\n      break;\n  }\n  return true;\n}\n\nvoid post_process_record_user(uint16_t keycode, keyrecord_t *record) {\n  switch (keycode) {\n    case KC_A ... KC_F21: //notice how it skips over F22\n    case KC_F23 ... KC_EXSL: //exsel is the last one before the modifier keys\n      if (!record->event.pressed) {\n        f22_tracker--;\n        if (!f22_tracker) {\n            unregister_code(KC_F22); //this means to send F22 up\n        }\n      }\n      break;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling ADNS 9800 Sensor Driver (Make)\nDESCRIPTION: This code snippet shows how to enable the ADNS 9800 sensor driver for the Pointing Device feature in QMK Firmware by adding the `POINTING_DEVICE_DRIVER = adns9800` line to the `rules.mk` file. This driver uses SPI communication and requires setting the chip select pin.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/pointing_device.md#_snippet_2\n\nLANGUAGE: make\nCODE:\n```\nPOINTING_DEVICE_DRIVER = adns9800\n```\n\n----------------------------------------\n\nTITLE: Enable PS/2 Mouse with Interrupt Driver (ARM ChibiOS)\nDESCRIPTION: This snippet enables PS/2 mouse support using the interrupt driver on ARM microcontrollers using ChibiOS.  It requires setting `PS2_MOUSE_ENABLE`, `PS2_ENABLE` and defining `PS2_DRIVER` in `rules.mk`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/ps2_mouse.md#_snippet_4\n\nLANGUAGE: make\nCODE:\n```\nPS2_MOUSE_ENABLE = yes\nPS2_ENABLE = yes\nPS2_DRIVER = interrupt\n```\n\n----------------------------------------\n\nTITLE: Changing Both Tap and Hold Functions in QMK\nDESCRIPTION: This code demonstrates customizing both the tap and hold functions of a layer-tap key using `process_record_user`. This example creates a single key that performs a copy operation (Ctrl+C) on tap and a paste operation (Ctrl+V) when held down, using `LT(0, KC_NO)` as the keycode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/mod_tap.md#_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nbool process_record_user(uint16_t keycode, keyrecord_t *record) {\n    switch (keycode) {\n        case LT(0,KC_NO):\n            if (record->tap.count && record->event.pressed) {\n                tap_code16(C(KC_C)); // Intercept tap function to send Ctrl-C\n            } else if (record->event.pressed) {\n                tap_code16(C(KC_V)); // Intercept hold function to send Ctrl-V\n            }\n            return false;\n    }\n    return true;\n}\n```\n\n----------------------------------------\n\nTITLE: Tapping a Modded Keycode with Delay in QMK\nDESCRIPTION: This example demonstrates how to tap a keycode with modifiers and a specified delay between the press and release events, using the `tap_code16_delay()` function.  The function takes a keycode constant and a delay in milliseconds as arguments.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/feature_macros.md#_snippet_17\n\nLANGUAGE: c\nCODE:\n```\ntap_code16_delay(<kc>, <delay>);\n```\n\n----------------------------------------\n\nTITLE: Intercept Steno Chord Sending in QMK (C)\nDESCRIPTION: This function allows you to intercept and modify the steno chord that is about to be sent. The `mode` parameter indicates the steno mode (`STENO_MODE_BOLT` or `STENO_MODE_GEMINI`), and the `chord` parameter contains the actual chord data.  Return `true` to allow the regular sending process to continue, or `false` to indicate that you have handled the sending.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/stenography.md#_snippet_5\n\nLANGUAGE: c\nCODE:\n```\nbool send_steno_chord_user(steno_mode_t mode, uint8_t chord[MAX_STROKE_SIZE]);\n```\n\n----------------------------------------\n\nTITLE: Getting LED Matrix Suspend State (C)\nDESCRIPTION: This function retrieves the current suspend state of the LED matrix. It returns `true` if the LED Matrix is currently in the suspended state.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/led_matrix.md#_snippet_38\n\nLANGUAGE: C\nCODE:\n```\nbool led_matrix_get_suspend_state(void)\n```\n\n----------------------------------------\n\nTITLE: Defining Default Layer Songs in QMK - C\nDESCRIPTION: This configuration defines the songs that will be played when switching to different default layers in QMK, when Audio is enabled. The `DEFAULT_LAYER_SONGS` macro is defined in `config.h` and contains an array of song definitions, each corresponding to a specific layer. The example provided maps `QWERTY_SOUND`, `COLEMAK_SOUND`, and `DVORAK_SOUND` to their respective layers.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/ref_functions.md#_snippet_3\n\nLANGUAGE: c\nCODE:\n```\n#define DEFAULT_LAYER_SONGS { SONG(QWERTY_SOUND), \\\n                              SONG(COLEMAK_SOUND), \\\n                              SONG(DVORAK_SOUND) \\\n                            }\n```\n\n----------------------------------------\n\nTITLE: Setting Split USB Detection Timeout - C\nDESCRIPTION: This code snippet sets the maximum timeout (in milliseconds) for detecting master/slave when using `SPLIT_USB_DETECT`.  This allows the keyboard to determine which side is master or slave when both are connected to USB.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/split_keyboard.md#_snippet_40\n\nLANGUAGE: c\nCODE:\n```\n#define SPLIT_USB_TIMEOUT 2000\n```\n\n----------------------------------------\n\nTITLE: Enabling Handedness by EEPROM in config.h (C)\nDESCRIPTION: This code enables handedness determination by reading from the EEPROM (persistent storage). `EE_HANDS` defined in `config.h` tells the firmware to check the EEPROM on startup to determine the keyboard half and layout orientation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/split_keyboard.md#_snippet_6\n\nLANGUAGE: c\nCODE:\n```\n#define EE_HANDS\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple Operations with QMK CLI\nDESCRIPTION: This snippet illustrates how to combine multiple read and write operations into a single `qmk config` command. The example sets and then deletes the `compile.keymap`, as well as setting other compile options. This allows for efficient management of configuration values.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/cli_configuration.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ qmk config compile default.keymap=default compile.keymap=None\n```\n\n----------------------------------------\n\nTITLE: Mapping LEDs (C)\nDESCRIPTION: This code shows how to map LEDs to specific outputs on the IS31FL3736 driver, defining the connection between LED channels (Red, Green, Blue for RGB; Value for single-color) and physical pins. This snippet is added to the `<keyboardname>.c` file. Dependencies: `IS31FL3736_LED_COUNT` macro should be defined. `SW*_CS*` macros should be defined to map to correct pins.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/is31fl3736.md#_snippet_4\n\nLANGUAGE: C\nCODE:\n```\nconst is31fl3736_led_t PROGMEM g_is31fl3736_leds[IS31FL3736_LED_COUNT] = {\n/* Driver\n *   |  R         G         B */\n    {0, SW1_CS1,  SW1_CS2,  SW1_CS3},\n    // etc...\n};\n```\n\nLANGUAGE: C\nCODE:\n```\nconst is31fl3736_led_t PROGMEM g_is31fl3736_leds[IS31FL3736_LED_COUNT] = {\n/* Driver\n *   |  V */\n    {0, SW1_CS1},\n    // etc...\n};\n```\n\n----------------------------------------\n\nTITLE: Caps Lock Indicator on Alphanumeric Keys in C\nDESCRIPTION: This code snippet implements an RGB matrix indicator for Caps Lock status, specifically highlighting alphanumeric keys. It iterates through the LEDs and checks if Caps Lock is active and if the LED is flagged as a keylight. If both conditions are met, it sets the LED color to red.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/rgb_matrix.md#_snippet_6\n\nLANGUAGE: c\nCODE:\n```\nbool rgb_matrix_indicators_advanced_user(uint8_t led_min, uint8_t led_max) {\n    if (host_keyboard_led_state().caps_lock) {\n        for (uint8_t i = led_min; i < led_max; i++) {\n            if (g_led_config.flags[i] & LED_FLAG_KEYLIGHT) {\n                rgb_matrix_set_color(i, RGB_RED);\n            }\n        }\n    }\n    return false;\n}\n```\n\n----------------------------------------\n\nTITLE: Performing OLED Tasks (C)\nDESCRIPTION: This function performs periodic tasks related to the OLED display, including timeout management and calling user-defined tasks. The `oled_task_kb` and `oled_task_user` functions are weak functions that can be overridden by the keyboard or user code to customize the task execution.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/oled_driver.md#_snippet_30\n\nLANGUAGE: c\nCODE:\n```\n// Basically it's oled_render, but with timeout management and oled_task_user calling!\nvoid oled_task(void);\n\n// Called at the start of oled_task, weak function overridable by the user\nbool oled_task_kb(void);\nbool oled_task_user(void);\n```\n\n----------------------------------------\n\nTITLE: Super ALT+TAB Macro in QMK\nDESCRIPTION: This example implements a Super ALT+TAB macro in QMK Firmware. It registers ALT and taps TAB, allowing you to cycle through windows. If the key is tapped again within 1000ms, it sends another TAB; otherwise, it releases ALT. This implementation requires global variables and modifications to `process_record_user` and `matrix_scan_user`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/feature_macros.md#_snippet_21\n\nLANGUAGE: c\nCODE:\n```\nbool is_alt_tab_active = false; // ADD this near the beginning of keymap.c\nuint16_t alt_tab_timer = 0;     // we will be using them soon.\n\nenum custom_keycodes {          // Make sure have the awesome keycode ready\n  ALT_TAB = SAFE_RANGE,\n};\n\nbool process_record_user(uint16_t keycode, keyrecord_t *record) {\n  switch (keycode) { // This will do most of the grunt work with the keycodes.\n    case ALT_TAB:\n      if (record->event.pressed) {\n        if (!is_alt_tab_active) {\n          is_alt_tab_active = true;\n          register_code(KC_LALT);\n        }\n        alt_tab_timer = timer_read();\n        register_code(KC_TAB);\n      } else {\n        unregister_code(KC_TAB);\n      }\n      break;\n  }\n  return true;\n}\n\nvoid matrix_scan_user(void) { // The very important timer.\n  if (is_alt_tab_active) {\n    if (timer_elapsed(alt_tab_timer) > 1000) {\n      unregister_code(KC_LALT);\n      is_alt_tab_active = false;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Quick Tap Term (New)\nDESCRIPTION: This code snippet demonstrates the new method of configuring the quick tap term using `get_quick_tap_term`, replacing `TAPPING_FORCE_HOLD`. The function returns a `uint16_t` value representing the quick tap term in milliseconds for a given keycode. Setting the value to 0 disables auto-repeat. In this example, auto-repeat is disabled for `SFT_T(KC_SPC)`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/ChangeLog/20230226.md#_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nuint16_t get_quick_tap_term(uint16_t keycode, keyrecord_t *record) {\n    switch (keycode) {\n        case SFT_T(KC_SPC):\n            return 0;\n        default:\n            return QUICK_TAP_TERM;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Including ADC Header in QMK\nDESCRIPTION: This code snippet demonstrates how to include the necessary header file for using the ADC driver in your QMK firmware. Including `analog.h` provides access to the functions and definitions needed to read analog values from the specified ADC channels.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/adc.md#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n#include \"analog.h\"\n```\n\n----------------------------------------\n\nTITLE: Including IS31FL3745 driver in rules.mk\nDESCRIPTION: This snippet demonstrates how to include the IS31FL3745 driver source files in the `rules.mk` file for QMK Firmware. It specifies the necessary paths and source files for both single-color and RGB LED configurations.  The `I2C_DRIVER_REQUIRED` flag ensures that the I2C driver is also included.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/is31fl3745.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nCOMMON_VPATH += $(DRIVER_PATH)/led/issi\nSRC += is31fl3745-mono.c # For single-color\nSRC += is31fl3745.c # For RGB\nI2C_DRIVER_REQUIRED = yes\n```\n\n----------------------------------------\n\nTITLE: Setting PWM Frequency in config.h (IS31FL3741A)\nDESCRIPTION: Defines the PWM frequency for the IS31FL3741A driver. Several frequency options are available, with 29 kHz being the default. This setting should be added to your `config.h` file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/is31fl3741.md#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n#define IS31FL3741_PWM_FREQUENCY IS31FL3741_PWM_FREQUENCY_29K_HZ\n```\n\n----------------------------------------\n\nTITLE: Flashing ODIN75 Default Firmware (QMK)\nDESCRIPTION: This command builds and flashes the default firmware to the ODIN75 keyboard. Requires a configured QMK build environment and a connected ODIN75 keyboard in bootloader mode.  The command compiles and flashes the keymap `default` located in the `kbdfans/odin75` directory.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kbdfans/odin75/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake kbdfans/odin75:default:flash\n```\n\n----------------------------------------\n\nTITLE: Defining 68% ISO Keyboard Layout\nDESCRIPTION: This snippet defines a 68% ISO keyboard layout using ASCII art.  It represents the physical arrangement of keys, allowing users to visualize the layout before configuring it in QMK firmware.  No dependencies are explicitly listed, but it assumes a basic understanding of keyboard layout conventions.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/layouts/default/readme.md#_snippet_12\n\nLANGUAGE: text\nCODE:\n```\n┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───────┐┌───┬───┐\n│   │   │   │   │   │   │   │   │   │   │   │   │   │       ││   │   │\n├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─────┤├───┼───┤\n│     │   │   │   │   │   │   │   │   │   │   │   │   │     ││   │   │\n├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┐    │└───┴───┘\n│      │   │   │   │   │   │   │   │   │   │   │   │   │    │\n├────┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴───┴────┤┌───┐\n│    │   │   │   │   │   │   │   │   │   │   │   │          ││   │\n├────┼───┴┬──┴─┬─┴───┴───┴───┴───┴───┴──┬┴───┼───┴┬────┬─┬──┴┼───┼───┐\n│    │    │    │                        │    │    │    │ │   │   │   │\n└────┴────┴────┴────────────────────────┴────┴────┴────┘ └───┴───┴───┘\n```\n\n----------------------------------------\n\nTITLE: Defining Tap Dance Functions (Example 5)\nDESCRIPTION: This code snippet defines the tap dance functions for the first example, including `cur_dance` to determine the tap dance state, `altlp_finished` to handle the actions based on the tap dance state (e.g., sending `KC_LPRN` or activating `KC_LALT`), and `altlp_reset` to reset the state and unregister the keycodes or modifiers. It relies on `tap_dance_state_t` for state management.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/tap_dance.md#_snippet_20\n\nLANGUAGE: c\nCODE:\n```\n// Determine the tapdance state to return\ntd_state_t cur_dance(tap_dance_state_t *state) {\n    if (state->count == 1) {\n        if (state->interrupted || !state->pressed) return TD_SINGLE_TAP;\n        else return TD_SINGLE_HOLD;\n    }\n\n    if (state->count == 2) return TD_DOUBLE_SINGLE_TAP;\n    else return TD_UNKNOWN; // Any number higher than the maximum state value you return above\n}\n\n// Handle the possible states for each tapdance keycode you define:\n\nvoid altlp_finished(tap_dance_state_t *state, void *user_data) {\n    td_state = cur_dance(state);\n    switch (td_state) {\n        case TD_SINGLE_TAP:\n            register_code16(KC_LPRN);\n            break;\n        case TD_SINGLE_HOLD:\n            register_mods(MOD_BIT(KC_LALT)); // For a layer-tap key, use `layer_on(_MY_LAYER)` here\n            break;\n        case TD_DOUBLE_SINGLE_TAP: // Allow nesting of 2 parens `((` within tapping term\n            tap_code16(KC_LPRN);\n            register_code16(KC_LPRN);\n            break;\n        default:\n            break;\n    }\n}\n\nvoid altlp_reset(tap_dance_state_t *state, void *user_data) {\n    switch (td_state) {\n        case TD_SINGLE_TAP:\n            unregister_code16(KC_LPRN);\n            break;\n        case TD_SINGLE_HOLD:\n            unregister_mods(MOD_BIT(KC_LALT)); // For a layer-tap key, use `layer_off(_MY_LAYER)` here\n            break;\n        case TD_DOUBLE_SINGLE_TAP:\n            unregister_code16(KC_LPRN);\n            break;\n        default:\n            break;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TKL ANSI Keyboard Layout\nDESCRIPTION: This snippet defines a Tenkeyless (TKL) ANSI keyboard layout visually with ASCII art. It shows the layout of keys, suitable for use in configuring QMK firmware. No dependencies are mentioned other than the understanding of standard keyboard configurations.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/layouts/default/readme.md#_snippet_15\n\nLANGUAGE: text\nCODE:\n```\n┌───┐   ┌───┬───┬───┬───┐ ┌───┬───┬───┬───┐ ┌───┬───┬───┬───┐ ┌───┬───┬───┐\n│   │   │   │   │   │   │ │   │   │   │   │ │   │   │   │   │ │   │   │   │\n└───┘   └───┴───┴───┴───┘ └───┴───┴───┴───┘ └───┴───┴───┴───┘ └───┴───┴───┘\n┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───────┐ ┌───┬───┬───┐\n│   │   │   │   │   │   │   │   │   │   │   │   │   │       │ │   │   │   │\n├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─────┤ ├───┼───┼───┤\n│     │   │   │   │   │   │   │   │   │   │   │   │   │     │ │   │   │   │\n├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴─────┤ └───┴───┴───┘\n│      │   │   │   │   │   │   │   │   │   │   │   │        │\n├──────┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴────────┤     ┌───┐\n│        │   │   │   │   │   │   │   │   │   │   │          │     │   │\n├────┬───┴┬──┴─┬─┴───┴───┴───┴───┴───┴──┬┴───┼───┴┬────┬────┤ ┌───┼───┼───┐\n│    │    │    │                        │    │    │    │    │ │   │   │   │\n└────┴────┴────┴────────────────────────┴────┴────┴────┴────┘ └───┴───┴───┘\n```\n\n----------------------------------------\n\nTITLE: Enabling UCIS\nDESCRIPTION: This snippet enables the UCIS (Unicode Composing Input System) feature by adding `UCIS_ENABLE = yes` to the `rules.mk` file. This enables the use of mnemonics for inputting Unicode characters.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/unicode.md#_snippet_5\n\nLANGUAGE: makefile\nCODE:\n```\nUCIS_ENABLE = yes\n```\n\n----------------------------------------\n\nTITLE: Defining RGB Lighting Layers in keymap.c (C)\nDESCRIPTION: This code defines multiple lighting layers using the `RGBLIGHT_LAYER_SEGMENTS` macro. Each layer specifies the LED ranges and colors to overlay when the layer is active. The layers are defined using `rgblight_segment_t` structs and assigned symbolic names. Requires `rgblight.h`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/rgblight.md#_snippet_4\n\nLANGUAGE: C\nCODE:\n```\n// Light LEDs 6 to 9 and 12 to 15 red when caps lock is active. Hard to ignore!\nconst rgblight_segment_t PROGMEM my_capslock_layer[] = RGBLIGHT_LAYER_SEGMENTS(\n    {6, 4, HSV_RED},       // Light 4 LEDs, starting with LED 6\n    {12, 4, HSV_RED}       // Light 4 LEDs, starting with LED 12\n);\n// Light LEDs 9 & 10 in cyan when keyboard layer 1 is active\nconst rgblight_segment_t PROGMEM my_layer1_layer[] = RGBLIGHT_LAYER_SEGMENTS(\n    {9, 2, HSV_CYAN}\n);\n// Light LEDs 11 & 12 in purple when keyboard layer 2 is active\nconst rgblight_segment_t PROGMEM my_layer2_layer[] = RGBLIGHT_LAYER_SEGMENTS(\n    {11, 2, HSV_PURPLE}\n);\n// Light LEDs 13 & 14 in green when keyboard layer 3 is active\nconst rgblight_segment_t PROGMEM my_layer3_layer[] = RGBLIGHT_LAYER_SEGMENTS(\n    {13, 2, HSV_GREEN}\n);\n// etc..\n```\n\n----------------------------------------\n\nTITLE: Enabling/Disabling Lighting Layers based on Keyboard State (C)\nDESCRIPTION: This code demonstrates how to enable and disable lighting layers based on the keyboard's state, such as Caps Lock status and active layer. The `rgblight_set_layer_state` function is used to control the state of each layer. These functions are typically called within `led_update_user`, `default_layer_state_set_user`, and `layer_state_set_user` functions. Requires `rgblight.h`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/rgblight.md#_snippet_6\n\nLANGUAGE: C\nCODE:\n```\nbool led_update_user(led_t led_state) {\n    rgblight_set_layer_state(0, led_state.caps_lock);\n    return true;\n}\n\nlayer_state_t default_layer_state_set_user(layer_state_t state) {\n    rgblight_set_layer_state(1, layer_state_cmp(state, _DVORAK));\n    return state;\n}\n\nlayer_state_t layer_state_set_user(layer_state_t state) {\n    rgblight_set_layer_state(2, layer_state_cmp(state, _FN));\n    rgblight_set_layer_state(3, layer_state_cmp(state, _ADJUST));\n    return state;\n}\n```\n\n----------------------------------------\n\nTITLE: Remove Last Character from UCIS Buffer - C\nDESCRIPTION: This function removes the last character from the UCIS (Unicode Composing Input Sequence) input sequence buffer. It returns `true` if the sequence was not empty.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/unicode.md#_snippet_27\n\nLANGUAGE: C\nCODE:\n```\nbool ucis_remove_last(void)\n```\n\n----------------------------------------\n\nTITLE: Flashing GREATSWORD80 Firmware (QMK)\nDESCRIPTION: This command flashes the default firmware onto the GREATSWORD80 keyboard using the QMK build environment. It requires the keyboard to be in bootloader mode and utilizes the appropriate flashing tool based on the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/eason/greatsword80/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake eason/greatsword80:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Erkbd Firmware via UF2\nDESCRIPTION: This describes the flashing process for the Erkbd keyboard using a UF2 file. This method assumes the keyboard is in bootloader mode, which exposes it as a removable storage device. Dragging and dropping the .uf2 file initiates the flashing process.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/erikpeyronson/erkbd/readme.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nEnter bootloader, drag and drop .uft2 file on the removable storage\n```\n\n----------------------------------------\n\nTITLE: Defining Right-Side Direct Pins - C\nDESCRIPTION: This code snippet shows how to define direct pins for the right side of a split keyboard. This allows specifying different direct pins for each side of the keyboard, useful for boards with differently shaped halves.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/split_keyboard.md#_snippet_35\n\nLANGUAGE: c\nCODE:\n```\n#define DIRECT_PINS_RIGHT { { F1, F0, B0, C7 }, { F4, F5, F6, F7 } }\n```\n\n----------------------------------------\n\nTITLE: Forcing NKRO in config.h\nDESCRIPTION: This code snippet shows how to force NKRO (N-Key Rollover) in the `config.h` file. By defining `FORCE_NKRO`, NKRO will be enabled by default, overriding the default behavior of being off even if `NKRO_ENABLE` is set in `rules.mk`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/getting_started_make_guide.md#_snippet_5\n\nLANGUAGE: C\nCODE:\n```\n#define FORCE_NKRO\n```\n\n----------------------------------------\n\nTITLE: Fading OLED Display Example (C)\nDESCRIPTION: This snippet shows how to slowly fade the OLED display by randomly turning off pixels. It uses the `oled_read_raw` function to access the display buffer and `oled_write_raw_byte` to modify individual bytes. The `single_bit_masks` array contains masks used to clear bits in the buffer, effectively turning off pixels. `reader.current_element` is incremented to loop through the bytes in the buffer. This example demonstrates reading and writing directly to the OLED buffer for advanced display effects.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/oled_driver.md#_snippet_5\n\nLANGUAGE: C\nCODE:\n```\n//Setup some mask which can be or'd with bytes to turn off pixels\nconst uint8_t single_bit_masks[8] = {127, 191, 223, 239, 247, 251, 253, 254};\n\nstatic void fade_display(void) {\n    //Define the reader structure\n    oled_buffer_reader_t reader;\n    uint8_t buff_char;\n    if (random() % 30 == 0) {\n        srand(timer_read());\n        // Fetch a pointer for the buffer byte at index 0. The return structure\n        // will have the pointer and the number of bytes remaining from this\n        // index position if we want to perform a sequential read by\n        // incrementing the buffer pointer\n        reader = oled_read_raw(0);\n        //Loop over the remaining buffer and erase pixels as we go\n        for (uint16_t i = 0; i < reader.remaining_element_count; i++) {\n            //Get the actual byte in the buffer by dereferencing the pointer\n            buff_char = *reader.current_element;\n            if (buff_char != 0) {\n                oled_write_raw_byte(buff_char & single_bit_masks[rand() % 8], i);\n            }\n            //increment the pointer to fetch a new byte during the next loop\n            reader.current_element++;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Define Modifier Key Combination\nDESCRIPTION: Defines a combination of modifier keys using bitwise OR operations. This is used to represent simultaneous key presses like Shift+Ctrl+Alt. This example defines modifier keys for grave accent.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/keymap.md#_snippet_2\n\nLANGUAGE: c\nCODE:\n```\n#define GRAVE_MODS  (MOD_BIT(KC_LSFT)|MOD_BIT(KC_RSFT)|MOD_BIT(KC_LGUI)|MOD_BIT(KC_RGUI)|MOD_BIT(KC_LALT)|MOD_BIT(KC_RALT))\n```\n\n----------------------------------------\n\nTITLE: Building KBD75RGB Firmware with Make\nDESCRIPTION: This command compiles the default keymap for the KBD75RGB keyboard using the QMK build environment.  It utilizes the `make` command with the target specified as `kbdfans/kbd75rgb:default`. Ensure the QMK build environment is properly configured before running this command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kbdfans/kbd75rgb/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake kbdfans/kbd75rgb:default\n```\n\n----------------------------------------\n\nTITLE: Clearing All Pressed Modifiers in QMK\nDESCRIPTION: This code snippet demonstrates how to clear all currently pressed modifiers using the `clear_mods()` function in QMK Firmware. This can be useful when you want to ensure certain modifiers are not active.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/feature_macros.md#_snippet_19\n\nLANGUAGE: c\nCODE:\n```\nclear_mods();\n```\n\n----------------------------------------\n\nTITLE: DIP Switch Configuration Table\nDESCRIPTION: This table describes the DIP switch settings for enabling or disabling the GUI keys (K41/K4C) on the KC60SE keyboard.  It shows the correlation between DIP switch positions (#1 and #2) and the enabled/disabled state of the K41 and K4C keys.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kc60se/readme.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n dip      keys\n #1  #2  K41 K4C\n  1   1   1   1    both keys enabled\n  1   0   0   1\n  0   1   1   0\n  0   0   0   0    both keys disabled\n```\n\n----------------------------------------\n\nTITLE: Defining TKL ANSI WKL Keyboard Layout\nDESCRIPTION: This snippet shows a TKL ANSI layout with no Windows (GUI) keys, rendered using ASCII art. The physical arrangement defines a keyboard configuration usable in the QMK ecosystem. Layout assumes the standard conventions of keyboards, and in particular WKL variations.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/layouts/default/readme.md#_snippet_19\n\nLANGUAGE: text\nCODE:\n```\n┌───┐   ┌───┬───┬───┬───┐ ┌───┬───┬───┬───┐ ┌───┬───┬───┬───┐ ┌───┬───┬───┐\n│   │   │   │   │   │   │ │   │   │   │   │ │   │   │   │   │ │   │   │   │\n└───┘   └───┴───┴───┴───┘ └───┴───┴───┴───┘ └───┴───┴───┴───┘ └───┴───┴───┘\n┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───────┐ ┌───┬───┬───┐\n│   │   │   │   │   │   │   │   │   │   │   │   │   │       │ │   │   │   │\n├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─────┤ ├───┼───┼───┤\n│     │   │   │   │   │   │   │   │   │   │   │   │   │     │ │   │   │   │\n├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴─────┤ └───┴───┴───┘\n│      │   │   │   │   │   │   │   │   │   │   │   │        │\n├──────┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴────────┤     ┌───┐\n│        │   │   │   │   │   │   │   │   │   │   │          │     │   │\n├─────┬──┴┬──┴──┬┴───┴───┴───┴───┴───┴───┴──┬┴───┴┬───┬─────┤ ┌───┼───┼───┐\n│     │   │     │                           │     │   │     │ │   │   │   │\n└─────┘   └─────┴───────────────────────────┴─────┘   └─────┘ └───┴───┴───┘\n```\n\n----------------------------------------\n\nTITLE: Switching to Custom LED Matrix Effect (C)\nDESCRIPTION: This code snippet shows how to switch to a custom LED matrix effect programmatically using the `led_matrix_mode()` function. It demonstrates prepending `LED_MATRIX_CUSTOM_` to the effect name defined in the `LED_MATRIX_EFFECT()` macro when calling `led_matrix_mode()`. This allows you to activate your custom effect during runtime.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/led_matrix.md#_snippet_5\n\nLANGUAGE: c\nCODE:\n```\nled_matrix_mode(LED_MATRIX_CUSTOM_my_cool_effect);\n```\n\n----------------------------------------\n\nTITLE: De-ghosting configuration (C)\nDESCRIPTION: This snippet illustrates how to configure the pulldown and pullup resistor values on the `SWy` and `CSx` pins, respectively, to eliminate ghosting effects. This is done by defining `IS31FL3743A_SW_PULLDOWN` and `IS31FL3743A_CS_PULLUP` in your `config.h`.  The valid values are enumerated within the original document, along with their resistance values. Modifying these defines requires an understanding of the ghosting phenomenon as described in the IS31FL3743A datasheet.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/is31fl3743a.md#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n#define IS31FL3743A_SW_PULLDOWN IS31FL3743A_PDR_2K_OHM_SW_OFF\n#define IS31FL3743A_CS_PULLUP IS31FL3743A_PUR_2K_OHM_CS_OFF\n```\n\n----------------------------------------\n\nTITLE: Defining Split Watchdog Timeout in QMK\nDESCRIPTION: This sets the maximum timeout (in milliseconds) for the slave to wait for communication from the master when `SPLIT_WATCHDOG_ENABLE` is used. This value determines how long the slave waits before rebooting.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/config_options.md#_snippet_102\n\nLANGUAGE: c\nCODE:\n```\n#define SPLIT_WATCHDOG_TIMEOUT 3000\n```\n\n----------------------------------------\n\nTITLE: Flashing Klor firmware using Make\nDESCRIPTION: This command builds and flashes the default firmware for the Klor keyboard onto the microcontroller. It uses the `make` command with the keyboard identifier, default keymap, and the `flash` target.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/geigeigeist/klor/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake geigeigeist/klor:default:flash\n```\n\n----------------------------------------\n\nTITLE: 60% ANSI WKL Split BS RShift Diagram\nDESCRIPTION: ASCII art visualization of a 60% ANSI layout with no Windows keys, a split backspace, and split right shift. This combines the minimalist aesthetic of a WKL layout with the functional benefits of split keys. The diagram represents the described key configuration.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/layouts/default/readme.md#_snippet_8\n\nLANGUAGE: text\nCODE:\n```\n┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┐\n│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │\n├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴───┤\n│     │   │   │   │   │   │   │   │   │   │   │   │   │     │\n├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴─────┤\n│      │   │   │   │   │   │   │   │   │   │   │   │        │\n├──────┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴────┬───┤\n│        │   │   │   │   │   │   │   │   │   │   │      │   │\n├─────┬──┴┬──┴──┬┴───┴───┴───┴───┴───┴───┴──┬┴───┴┬───┬─┴───┤\n│     │   │     │                           │     │   │     │\n└─────┘   └─────┴───────────────────────────┴─────┘   └─────┘\n```\n\n----------------------------------------\n\nTITLE: 60% ANSI Tsangan Split BS RShift Diagram\nDESCRIPTION: This is an ASCII art diagram representing a 60% ANSI keyboard layout with a Tsangan bottom row, a split backspace, and a split right shift key. This represents a highly customized and ergonomic layout option. The diagram visualizes this complex arrangement.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/layouts/default/readme.md#_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┐\n│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │\n├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴───┤\n│     │   │   │   │   │   │   │   │   │   │   │   │   │     │\n├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴─────┤\n│      │   │   │   │   │   │   │   │   │   │   │   │        │\n├──────┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴────┬───┤\n│        │   │   │   │   │   │   │   │   │   │   │      │   │\n├─────┬──┴┬──┴──┬┴───┴───┴───┴───┴───┴───┴──┬┴───┴┬───┬─┴───┤\n│     │   │     │                           │     │   │     │\n└─────┴───┴─────┴───────────────────────────┴─────┴───┴─────┘\n```\n\n----------------------------------------\n\nTITLE: RGB Matrix Effects Enum Definition in C\nDESCRIPTION: This code snippet defines an enum called `rgb_matrix_effects` that lists all available RGB matrix effects in QMK Firmware. Each effect is assigned a unique numerical value, allowing it to be referenced and selected within the firmware.  These effects control the RGB lighting patterns on the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/rgb_matrix.md#_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nenum rgb_matrix_effects {\n    RGB_MATRIX_NONE = 0,\n    RGB_MATRIX_SOLID_COLOR = 1,     // Static single hue, no speed support\n    RGB_MATRIX_ALPHAS_MODS,         // Static dual hue, speed is hue for secondary hue\n    RGB_MATRIX_GRADIENT_UP_DOWN,    // Static gradient top to bottom, speed controls how much gradient changes\n    RGB_MATRIX_GRADIENT_LEFT_RIGHT,    // Static gradient left to right, speed controls how much gradient changes\n    RGB_MATRIX_BREATHING,           // Single hue brightness cycling animation\n    RGB_MATRIX_BAND_SAT,        // Single hue band fading saturation scrolling left to right\n    RGB_MATRIX_BAND_VAL,        // Single hue band fading brightness scrolling left to right\n    RGB_MATRIX_BAND_PINWHEEL_SAT,   // Single hue 3 blade spinning pinwheel fades saturation\n    RGB_MATRIX_BAND_PINWHEEL_VAL,   // Single hue 3 blade spinning pinwheel fades brightness\n    RGB_MATRIX_BAND_SPIRAL_SAT,     // Single hue spinning spiral fades saturation\n    RGB_MATRIX_BAND_SPIRAL_VAL,     // Single hue spinning spiral fades brightness\n    RGB_MATRIX_CYCLE_ALL,           // Full keyboard solid hue cycling through full gradient\n    RGB_MATRIX_CYCLE_LEFT_RIGHT,    // Full gradient scrolling left to right\n    RGB_MATRIX_CYCLE_UP_DOWN,       // Full gradient scrolling top to bottom\n    RGB_MATRIX_CYCLE_OUT_IN,        // Full gradient scrolling out to in\n    RGB_MATRIX_CYCLE_OUT_IN_DUAL,   // Full dual gradients scrolling out to in\n    RGB_MATRIX_RAINBOW_MOVING_CHEVRON,  // Full gradient Chevron shapped scrolling left to right\n    RGB_MATRIX_CYCLE_PINWHEEL,      // Full gradient spinning pinwheel around center of keyboard\n    RGB_MATRIX_CYCLE_SPIRAL,        // Full gradient spinning spiral around center of keyboard\n    RGB_MATRIX_DUAL_BEACON,         // Full gradient spinning around center of keyboard\n    RGB_MATRIX_RAINBOW_BEACON,      // Full tighter gradient spinning around center of keyboard\n    RGB_MATRIX_RAINBOW_PINWHEELS,   // Full dual gradients spinning two halfs of keyboard\n    RGB_MATRIX_FLOWER_BLOOMING,     // Full tighter gradient of first half scrolling left to right and second half scrolling right to left\n    RGB_MATRIX_RAINDROPS,           // Randomly changes a single key's hue\n    RGB_MATRIX_JELLYBEAN_RAINDROPS, // Randomly changes a single key's hue and saturation\n    RGB_MATRIX_HUE_BREATHING,       // Hue shifts up a slight ammount at the same time, then shifts back\n    RGB_MATRIX_HUE_PENDULUM,        // Hue shifts up a slight ammount in a wave to the right, then back to the left\n    RGB_MATRIX_HUE_WAVE,            // Hue shifts up a slight ammount and then back down in a wave to the right\n    RGB_MATRIX_PIXEL_FRACTAL,       // Single hue fractal filled keys pulsing horizontally out to edges\n    RGB_MATRIX_PIXEL_FLOW,          // Pulsing RGB flow along LED wiring with random hues\n    RGB_MATRIX_PIXEL_RAIN,          // Randomly light keys with random hues\n    RGB_MATRIX_TYPING_HEATMAP,      // How hot is your WPM!\n    RGB_MATRIX_DIGITAL_RAIN,        // That famous computer simulation\n    RGB_MATRIX_SOLID_REACTIVE_SIMPLE,   // Pulses keys hit to hue & value then fades value out\n    RGB_MATRIX_SOLID_REACTIVE,      // Static single hue, pulses keys hit to shifted hue then fades to current hue\n    RGB_MATRIX_SOLID_REACTIVE_WIDE,       // Hue & value pulse near a single key hit then fades value out\n    RGB_MATRIX_SOLID_REACTIVE_MULTIWIDE,  // Hue & value pulse near multiple key hits then fades value out\n    RGB_MATRIX_SOLID_REACTIVE_CROSS,      // Hue & value pulse the same column and row of a single key hit then fades value out\n    RGB_MATRIX_SOLID_REACTIVE_MULTICROSS, // Hue & value pulse the same column and row of multiple key hits then fades value out\n    RGB_MATRIX_SOLID_REACTIVE_NEXUS,      // Hue & value pulse away on the same column and row of a single key hit then fades value out\n    RGB_MATRIX_SOLID_REACTIVE_MULTINEXUS, // Hue & value pulse away on the same column and row of multiple key hits then fades value out\n    RGB_MATRIX_SPLASH,              // Full gradient & value pulse away from a single key hit then fades value out\n    RGB_MATRIX_MULTISPLASH,         // Full gradient & value pulse away from multiple key hits then fades value out\n    RGB_MATRIX_SOLID_SPLASH,        // Hue & value pulse away from a single key hit then fades value out\n    RGB_MATRIX_SOLID_MULTISPLASH,   // Hue & value pulse away from multiple key hits then fades value out\n    RGB_MATRIX_STARLIGHT,           // LEDs turn on and off at random at varying brightness, maintaining user set color\n    RGB_MATRIX_STARLIGHT_DUAL_HUE,  // LEDs turn on and off at random at varying brightness, modifies user set hue by +- 30\n    RGB_MATRIX_STARLIGHT_DUAL_SAT,  // LEDs turn on and off at random at varying brightness, modifies user set saturation by +- 30\n    RGB_MATRIX_RIVERFLOW,           // Modification to breathing animation, offset's animation depending on key location to simulate a river flowing\n    RGB_MATRIX_EFFECT_MAX\n};\n```\n\n----------------------------------------\n\nTITLE: Keyboard Matrix Diagram for Potato 65\nDESCRIPTION: This diagram represents the keyboard matrix layout for the Potato 65 Solderable. Each key's position in the matrix is indicated by its row and column coordinates (e.g., 00, 01, 10, 11). This is essential for correctly mapping key presses to actions within the keyboard's firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/buildakb/potato65s/matrix_diagram.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n                                                    ┌───────┐\n                                       2u Backspace │0D     │\n                                                    └───────┘\n┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┐\n│00 │01 │02 │03 │04 │05 │06 │07 │08 │09 │0A │0B │0C │0D │2C │0E │\n├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴───┼───┤\n│10   │11 │12 │13 │14 │15 │16 │17 │18 │19 │1A │1B │1C │1D   │1E │\n├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴─────┼───┤\n│20    │21 │22 │23 │24 │25 │26 │27 │28 │29 │2A │2B │2D      │2E │\n├──────┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴────┬───┼───┤\n│30      │31 │32 │33 │34 │35 │36 │37 │38 │39 │3A │3C    │3D │3E │\n├────┬───┴┬──┴─┬─┴───┴───┴───┴───┴───┴──┬┴───┼───┴┬─┬───┼───┼───┤\n│40  │41  │42  │43                      │49  │4A  │ │4C │4D │4E │\n└────┴────┴────┴────────────────────────┴────┴────┘ └───┴───┴───┘\n┌─────┬───┬─────┬───────────────────────────┬─────┐\n│40   │41 │42   │43                         │4A   │ Blocker Tsangan\n└─────┴───┴─────┴───────────────────────────┴─────┘\n```\n\n----------------------------------------\n\nTITLE: OLED Task Implementation in keymap.c (C)\nDESCRIPTION: This code snippet demonstrates how to implement the `oled_task_user` function in your `keymap.c` file. This function is responsible for updating the OLED display with relevant information, such as the current keyboard layer and LED status. It uses `oled_write_P` and `oled_write_ln_P` to write strings to the OLED screen, leveraging the `PSTR` macro for storing strings in program memory. The `get_highest_layer` function determines the active layer, and `host_keyboard_led_state` retrieves the LED status.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/oled_driver.md#_snippet_3\n\nLANGUAGE: C\nCODE:\n```\n#ifdef OLED_ENABLE\nbool oled_task_user(void) {\n    // Host Keyboard Layer Status\n    oled_write_P(PSTR(\"Layer: \"), false);\n\n    switch (get_highest_layer(layer_state)) {\n        case _QWERTY:\n            oled_write_P(PSTR(\"Default\\n\"), false);\n            break;\n        case _FN:\n            oled_write_P(PSTR(\"FN\\n\"), false);\n            break;\n        case _ADJ:\n            oled_write_P(PSTR(\"ADJ\\n\"), false);\n            break;\n        default:\n            // Or use the write_ln shortcut over adding '\\n' to the end of your string\n            oled_write_ln_P(PSTR(\"Undefined\"), false);\n    }\n\n    // Host Keyboard LED Status\n    led_t led_state = host_keyboard_led_state();\n    oled_write_P(led_state.num_lock ? PSTR(\"NUM \") : PSTR(\"    \"), false);\n    oled_write_P(led_state.caps_lock ? PSTR(\"CAP \") : PSTR(\"    \"), false);\n    oled_write_P(led_state.scroll_lock ? PSTR(\"SCR \") : PSTR(\"    \"), false);\n    \n    return false;\n}\n#endif\n```\n\n----------------------------------------\n\nTITLE: CannonKeys Vida Keyboard Matrix Diagram\nDESCRIPTION: This diagram illustrates the key matrix layout for the CannonKeys Vida keyboard. It shows the row and column connections for each key position, essential for firmware configuration and hardware debugging. Different layouts like standard, ISO enter and Tsangan/WKL/HHKB are visualized.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cannonkeys/vida/solderable/matrix_diagram.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n                                                    ┌───────┐\n                                       2u Backspace │0D     │\n                                                    └───────┘\n┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┐\n│00 │01 │02 │03 │04 │05 │06 │07 │08 │09 │0A │0B │0C │0D │2C │\n├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴───┤      ┌─────┐\n│10   │11 │12 │13 │14 │15 │16 │17 │18 │19 │1A │1B │1C │1D   │      │     │\n├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴─────┤   ┌──┴┐2D  │ ISO Enter\n│20    │21 │22 │23 │24 │25 │26 │27 │28 │29 │2A │2B │2D      │   │1D │    │\n├────┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴────┬───┤   └───┴────┘\n│30  │31 │32 │33 │34 │35 │36 │37 │38 │39 │3A │3B │3C    │3D │\n├────┼───┴┬──┴─┬─┴───┴───┴───┴───┴───┴──┬┴───┼───┴┬────┬┴───┤\n│40  │41  │42  │46                      │4A  │4B  │4C  │4D  │\n└────┴────┴────┴────────────────────────┴────┴────┴────┴────┘\n┌────────┐                                       ┌──────────┐\n│30      │ 2.25u LShift             2.75u RShift │3C        │\n└────────┘                                       └──────────┘\n┌─────┬───┬─────┬───────────────────────────┬─────┬───┬─────┐\n│40   │41 │42   │46                         │4B   │4C │4D   │ Tsangan/WKL/HHKB\n└─────┴───┴─────┴───────────────────────────┴─────┴───┴─────┘\n```\n\n----------------------------------------\n\nTITLE: QMK API Example JSON Payload\nDESCRIPTION: This JSON payload defines the keyboard, keymap, layout, and layers for a QMK firmware compilation job. The `keyboard` field specifies the target keyboard. The `keymap` field names the keymap. The `layout` field defines the keyboard layout, and the `layers` array contains the keycodes for each layer.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/api_docs.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"keyboard\": \"clueboard/66/rev2\",\n  \"keymap\": \"my_awesome_keymap\",\n  \"layout\": \"LAYOUT_all\",\n  \"layers\": [\n    [\"KC_GRV\",\"KC_1\",\"KC_2\",\"KC_3\",\"KC_4\",\"KC_5\",\"KC_6\",\"KC_7\",\"KC_8\",\"KC_9\",\"KC_0\",\"KC_MINS\",\"KC_EQL\",\"KC_GRV\",\"KC_BSPC\",\"KC_PGUP\",\"KC_TAB\",\"KC_Q\",\"KC_W\",\"KC_E\",\"KC_R\",\"KC_T\",\"KC_Y\",\"KC_U\",\"KC_I\",\"KC_O\",\"KC_P\",\"KC_LBRC\",\"KC_RBRC\",\"KC_BSLS\",\"KC_PGDN\",\"KC_CAPS\",\"KC_A\",\"KC_S\",\"KC_D\",\"KC_F\",\"KC_G\",\"KC_H\",\"KC_J\",\"KC_K\",\"KC_L\",\"KC_SCLN\",\"KC_QUOT\",\"KC_NUHS\",\"KC_ENT\",\"KC_LSFT\",\"KC_NUBS\",\"KC_Z\",\"KC_X\",\"KC_C\",\"KC_V\",\"KC_B\",\"KC_N\",\"KC_M\",\"KC_COMM\",\"KC_DOT\",\"KC_SLSH\",\"KC_INT1\",\"KC_RSFT\",\"KC_UP\",\"KC_LCTL\",\"KC_LGUI\",\"KC_LALT\",\"KC_INT5\",\"KC_SPC\",\"KC_SPC\",\"KC_INT4\",\"KC_RALT\",\"KC_RCTL\",\"MO(1)\",\"KC_LEFT\",\"KC_DOWN\",\"KC_RIGHT\"],\n    [\"KC_ESC\",\"KC_F1\",\"KC_F2\",\"KC_F3\",\"KC_F4\",\"KC_F5\",\"KC_F6\",\"KC_F7\",\"KC_F8\",\"KC_F9\",\"KC_F10\",\"KC_F11\",\"KC_F12\",\"KC_TRNS\",\"KC_DEL\",\"BL_STEP\",\"KC_TRNS\",\"KC_TRNS\",\"KC_TRNS\",\"KC_TRNS\",\"KC_TRNS\",\"KC_TRNS\",\"_______\",\"KC_TRNS\",\"KC_PSCR\",\"KC_SCRL\",\"KC_PAUS\",\"KC_TRNS\",\"KC_TRNS\",\"KC_TRNS\",\"KC_TRNS\",\"KC_TRNS\",\"KC_TRNS\",\"MO(2)\",\"KC_TRNS\",\"KC_TRNS\",\"KC_TRNS\",\"KC_TRNS\",\"KC_TRNS\",\"KC_TRNS\",\"KC_TRNS\",\"KC_TRNS\",\"KC_TRNS\",\"KC_TRNS\",\"KC_TRNS\",\"KC_TRNS\",\"KC_TRNS\",\"KC_TRNS\",\"KC_TRNS\",\"KC_TRNS\",\"KC_TRNS\",\"KC_TRNS\",\"KC_TRNS\",\"KC_TRNS\",\"KC_TRNS\",\"KC_TRNS\",\"KC_TRNS\",\"KC_TRNS\",\"KC_TRNS\",\"KC_PGUP\",\"KC_TRNS\",\"KC_TRNS\",\"KC_TRNS\",\"KC_TRNS\",\"KC_TRNS\",\"KC_TRNS\",\"KC_TRNS\",\"KC_TRNS\",\"KC_TRNS\",\"MO(1)\",\"KC_LEFT\",\"KC_PGDN\",\"KC_RGHT\"],\nn  ]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Enabling Backlight in rules.mk (Make)\nDESCRIPTION: This snippet shows how to enable backlighting in the `rules.mk` file.  This is required to activate the backlighting feature in QMK firmware. Setting `BACKLIGHT_ENABLE` to `yes` enables the backlight functionality.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/backlight.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nBACKLIGHT_ENABLE = yes\n```\n\n----------------------------------------\n\nTITLE: Advanced Drag Scroll with Speed Control in QMK\nDESCRIPTION: This C code provides an advanced implementation of drag scrolling with adjustable scroll speed. It uses floating-point accumulators to smooth the scroll input and allows setting the scroll speed using `SCROLL_DIVISOR_H` and `SCROLL_DIVISOR_V`. The drag scrolling is active only while the `DRAG_SCROLL` key is held down. Also, drag scrolling is disabled when not on `AUTO_MOUSE_DEFAULT_LAYER`\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/pointing_device.md#_snippet_19\n\nLANGUAGE: c\nCODE:\n```\nenum custom_keycodes {\n    DRAG_SCROLL = SAFE_RANGE,\n};\n\nbool set_scrolling = false;\n\n// Modify these values to adjust the scrolling speed\n#define SCROLL_DIVISOR_H 8.0\n#define SCROLL_DIVISOR_V 8.0\n\n// Variables to store accumulated scroll values\nfloat scroll_accumulated_h = 0;\nfloat scroll_accumulated_v = 0;\n\n// Function to handle mouse reports and perform drag scrolling\nreport_mouse_t pointing_device_task_user(report_mouse_t mouse_report) {\n    // Check if drag scrolling is active\n    if (set_scrolling) {\n        // Calculate and accumulate scroll values based on mouse movement and divisors\n        scroll_accumulated_h += (float)mouse_report.x / SCROLL_DIVISOR_H;\n        scroll_accumulated_v += (float)mouse_report.y / SCROLL_DIVISOR_V;\n\n        // Assign integer parts of accumulated scroll values to the mouse report\n        mouse_report.h = (int8_t)scroll_accumulated_h;\n        mouse_report.v = (int8_t)scroll_accumulated_v;\n\n        // Update accumulated scroll values by subtracting the integer parts\n        scroll_accumulated_h -= (int8_t)scroll_accumulated_h;\n        scroll_accumulated_v -= (int8_t)scroll_accumulated_v;\n\n        // Clear the X and Y values of the mouse report\n        mouse_report.x = 0;\n        mouse_report.y = 0;\n    }\n    return mouse_report;\n}\n\n// Function to handle key events and enable/disable drag scrolling\nbool process_record_user(uint16_t keycode, keyrecord_t *record) {\n    switch (keycode) {\n        case DRAG_SCROLL:\n            // Toggle set_scrolling when DRAG_SCROLL key is pressed or released\n            set_scrolling = record->event.pressed;\n            break;\n        default:\n            break;\n    }\n    return true;\n}\n\n// Function to handle layer changes and disable drag scrolling when not in AUTO_MOUSE_DEFAULT_LAYER\nlayer_state_t layer_state_set_user(layer_state_t state) {\n    // Disable set_scrolling if the current layer is not the AUTO_MOUSE_DEFAULT_LAYER\n    if (get_highest_layer(state) != AUTO_MOUSE_DEFAULT_LAYER) {\n        set_scrolling = false;\n    }\n    return state;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Enabling RGB Light Synchronization - C\nDESCRIPTION: This code snippet enables RGB Light mode synchronization between the controllers of a split keyboard. This is for keyboards with RGB LEDs directly wired to the controller, not using the \"extra data\" option on the TRRS cable. It requires the `RGBLIGHT_SPLIT` macro to be defined.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/split_keyboard.md#_snippet_37\n\nLANGUAGE: c\nCODE:\n```\n#define RGBLIGHT_SPLIT\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Debouncing in QMK Firmware - Makefile\nDESCRIPTION: This code snippet shows how to configure QMK Firmware to use a custom debouncing algorithm.  This involves setting `DEBOUNCE_TYPE` to `custom` and adding the `debounce.c` source file to the build process by modifying the `rules.mk` file.  It requires implementing your own debouncing logic within the `debounce.c` file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/feature_debounce_type.md#_snippet_2\n\nLANGUAGE: makefile\nCODE:\n```\nDEBOUNCE_TYPE = custom\n```\n\nLANGUAGE: makefile\nCODE:\n```\nSRC += debounce.c\n```\n\n----------------------------------------\n\nTITLE: One Shot Locked Modifiers Changed Callback in QMK\nDESCRIPTION: This C code snippet shows how to implement the `oneshot_locked_mods_changed_user` callback function in QMK. This function is called when a modifier key is locked by pressing it the specified number of times, as defined by `ONESHOT_TAP_TOGGLE`. The `mods` argument contains a bitmask of the active, locked modifiers after the change, enabling custom logic based on the locked modifier state. The function prints to the console which modifiers are currently locked, or indicates when all locked modifiers are off.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/one_shot_keys.md#_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nvoid oneshot_locked_mods_changed_user(uint8_t mods) {\n  if (mods & MOD_MASK_SHIFT) {\n    println(\"Oneshot locked mods SHIFT\");\n  }\n  if (mods & MOD_MASK_CTRL) {\n    println(\"Oneshot locked mods CTRL\");\n  }\n  if (mods & MOD_MASK_ALT) {\n    println(\"Oneshot locked mods ALT\");\n  }\n  if (mods & MOD_MASK_GUI) {\n    println(\"Oneshot locked mods GUI\");\n  }\n  if (!mods) {\n    println(\"Oneshot locked mods off\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling I2C Communication for Split Keyboard\nDESCRIPTION: This definition enables the use of I2C for communication between the halves of the split keyboard. This is only applicable for AVR-based boards. This setting should be defined in the `config.h` file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/split_keyboard.md#_snippet_9\n\nLANGUAGE: c\nCODE:\n```\n#define USE_I2C\n```\n\n----------------------------------------\n\nTITLE: Reloading udev rules on Linux\nDESCRIPTION: These commands reload udev rules and trigger an event to apply the new rules, ensuring that the system recognizes the keyboard bootloader device with the correct permissions.  These are necessary after adding or modifying udev rules. Requires root privileges.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/faq_build.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo udevadm control --reload-rules\nsudo udevadm trigger\n```\n\n----------------------------------------\n\nTITLE: Defining Mousekey Max Speed\nDESCRIPTION: Defines the maximum speed for mouse key movements, limiting how quickly the cursor can move. Governs the top end cursor speed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/config_options.md#_snippet_84\n\nLANGUAGE: C\nCODE:\n```\n#define MOUSEKEY_MAX_SPEED 7\n```\n\n----------------------------------------\n\nTITLE: Multiple Tri-Layer State Updates in QMK - C\nDESCRIPTION: This code showcases how to apply multiple `update_tri_layer_state` calls within the `layer_state_set_user` function. By chaining these calls, the code enables more complex layer activation schemes. In this example, two tri-layer combinations are checked and updated (`_LOWER`, `_RAISE`, `_ADJUST`) and (`_RAISE`, `_SYMB`, `_SPECIAL`). This allows the activation of `_ADJUST` when both `_LOWER` and `_RAISE` are active, and `_SPECIAL` when both `_RAISE` and `_SYMB` are active.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/ref_functions.md#_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nlayer_state_t layer_state_set_user(layer_state_t state) {\n  state = update_tri_layer_state(state, _LOWER, _RAISE, _ADJUST);\n  state = update_tri_layer_state(state, _RAISE, _SYMB, _SPECIAL);\n  return state;\n}\n```\n\n----------------------------------------\n\nTITLE: Building DZ60RGB Firmware (AVR V2.1)\nDESCRIPTION: This command builds the QMK firmware specifically for the DZ60RGB-WKL V2.1, utilizing an ATmega32U4 AVR microcontroller. It assumes that a functional QMK build environment is available.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/dztech/dz60rgb_wkl/readme.md#_snippet_2\n\nLANGUAGE: make\nCODE:\n```\nmake dztech/dz60rgb_wkl/v2_1:default # AVR (ATmega32U4)\n```\n\n----------------------------------------\n\nTITLE: Replacing USB IDs with info.json - JSON\nDESCRIPTION: This snippet illustrates the new method of specifying USB IDs using the `info.json` file in QMK Firmware.  The JSON structure contains the keyboard name, manufacturer, and USB-related information such as vendor ID (vid), product ID (pid), and device version.  This approach is now the preferred and required method.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/ChangeLog/20221126.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"keyboard_name\": \"MyKeyboard\",\n    \"manufacturer\": \"Me\",\n    \"usb\": {\n        \"vid\": \"0x1234\",\n        \"pid\": \"0x5678\",\n        \"device_version\": \"0.0.1\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining OLED Rotation Enum in C\nDESCRIPTION: This code snippet defines an enum `oled_rotation_t` for specifying the rotation angle of the OLED display. The enum includes values for 0, 90, 180, and 270-degree rotations. These values are used as flags.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/oled_driver.md#_snippet_9\n\nLANGUAGE: c\nCODE:\n```\n// OLED Rotation enum values are flags\ntypedef enum {\n    OLED_ROTATION_0   = 0,\n    OLED_ROTATION_90  = 1,\n    OLED_ROTATION_180 = 2,\n    OLED_ROTATION_270 = 3, // OLED_ROTATION_90 | OLED_ROTATION_180\n} oled_rotation_t;\n```\n\n----------------------------------------\n\nTITLE: Sending MIDI CC Messages with Custom Keycode in QMK\nDESCRIPTION: This snippet demonstrates how to send MIDI Control Change (CC) messages using a custom keycode in QMK firmware. It shows how to define a custom keycode, handle it in `process_record_user()`, and send CC messages based on key press and release events. It requires the inclusion of `QMK_KEYBOARD_H` and assumes the existence of a `MidiDevice` object and `midi_config.channel` setting.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/midi.md#_snippet_3\n\nLANGUAGE: C\nCODE:\n```\n#include QMK_KEYBOARD_H\n\nextern MidiDevice midi_device;\n\n// MIDI CC codes for generic on/off switches (80, 81, 82, 83)\n// Off: 0-63\n// On:  64-127\n\n#define MIDI_CC_OFF 0\n#define MIDI_CC_ON  127\n\nenum custom_keycodes {\n    MIDI_CC80 = SAFE_RANGE,\n};\n\nbool process_record_user(uint16_t keycode, keyrecord_t *record) {\n    switch (keycode) {\n        case MIDI_CC80:\n            if (record->event.pressed) {\n                midi_send_cc(&midi_device, midi_config.channel, 80, MIDI_CC_ON);\n            } else {\n                midi_send_cc(&midi_device, midi_config.channel, 80, MIDI_CC_OFF);\n            }\n            return true;\n    }\n    return true;\n};\n\nconst uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {\n    LAYOUT(\n        // ...\n        MIDI_CC80,\n        // ...\n    )\n};\n```\n\n----------------------------------------\n\nTITLE: Base Layer Example\nDESCRIPTION: Illustrates the structure of a base layer definition within the keymap. It uses the `LAYOUT` macro to map keycodes to specific positions on the keyboard. This includes standard keycodes and special function keys.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/keymap.md#_snippet_4\n\nLANGUAGE: c\nCODE:\n```\n[_BL] = LAYOUT(\n    F(0),    KC_1,    KC_2,   KC_3,   KC_4,   KC_5,   KC_6,   KC_7,   KC_8,   KC_9,    KC_0,     KC_MINS,  KC_EQL,   KC_GRV,  KC_BSPC,          KC_PGUP,\n    KC_TAB,  KC_Q,    KC_W,   KC_E,   KC_R,   KC_T,   KC_Y,   KC_U,   KC_I,   KC_O,    KC_P,     KC_LBRC,  KC_RBRC,  KC_BSLS,                   KC_PGDN,\n    KC_CAPS, KC_A,    KC_S,   KC_D,   KC_F,   KC_G,   KC_H,   KC_J,   KC_K,   KC_L,    KC_SCLN,  KC_QUOT,  KC_NUHS,  KC_ENT,\n    KC_LSFT, KC_NUBS, KC_Z,   KC_X,   KC_C,   KC_V,   KC_B,   KC_N,   KC_M,   KC_COMM, KC_DOT,   KC_SLSH,  KC_INT1,  KC_RSFT,          KC_UP,\n    KC_LCTL, KC_LGUI, KC_LALT, KC_INT5,          KC_SPC,KC_SPC,                        KC_INT4,  KC_RALT,  KC_RCTL,  MO(_FL), KC_LEFT, KC_DOWN, KC_RGHT\n),\n```\n\n----------------------------------------\n\nTITLE: Flashing the HEX.4B keyboard firmware with QMK\nDESCRIPTION: This command flashes the default firmware onto the HEX.4B Rev.2 keyboard using the QMK build environment.  It builds the firmware and then attempts to flash it to the keyboard. Requires a correctly configured QMK build environment and the keyboard to be in a flashable state (e.g., bootloader mode).\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechlovin/hex4b/rev2/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake mechlovin/hex4b/rev2:default:flash\n```\n\n----------------------------------------\n\nTITLE: Default Auto Shifted Keys (QMK, C)\nDESCRIPTION: This snippet showcases the default implementation of `get_auto_shifted_key`, which determines which keys are considered for auto-shifting based on preprocessor definitions (e.g., `NO_AUTO_SHIFT_ALPHA`). This function determines which keycodes will trigger auto shift behavior based on defined groups.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/auto_shift.md#_snippet_5\n\nLANGUAGE: c\nCODE:\n```\nbool get_auto_shifted_key(uint16_t keycode, keyrecord_t *record) {\n    switch (keycode) {\n# ifndef NO_AUTO_SHIFT_ALPHA\n        case AUTO_SHIFT_ALPHA:\n# endif\n# ifndef NO_AUTO_SHIFT_NUMERIC\n        case AUTO_SHIFT_NUMERIC:\n# endif\n# ifndef NO_AUTO_SHIFT_SPECIAL\n# ifndef NO_AUTO_SHIFT_TAB\n        case KC_TAB:\n#        endif\n# ifndef NO_AUTO_SHIFT_SYMBOLS\n        case AUTO_SHIFT_SYMBOLS:\n#        endif\n# endif\n# ifdef AUTO_SHIFT_ENTER\n        case KC_ENT:\n# endif\n            return true;\n    }\n    return get_custom_auto_shifted_key(keycode, record);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Matrix Unselect Drive High in QMK config.h\nDESCRIPTION: This code snippet defines that on un-select of matrix pins, rather than setting pins to input-high, sets them to output-high, in QMK firmware. This setting is configured in the `config.h` file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/config_options.md#_snippet_11\n\nLANGUAGE: c\nCODE:\n```\n#define MATRIX_UNSELECT_DRIVE_HIGH\n```\n\n----------------------------------------\n\nTITLE: Add Programmable Button in QMK\nDESCRIPTION: This C function sets the state of a specific programmable button, simulating a button press. It takes the button index as input, ranging from 0 to 31.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/programmable_button.md#_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nvoid programmable_button_add(uint8_t index)\n```\n\n----------------------------------------\n\nTITLE: Creating LD7032 devices in C\nDESCRIPTION: These C code snippets show how to create LD7032 display devices using either SPI or I2C interface with the Quantum Painter library. The functions `qp_ld7032_make_spi_device` and `qp_ld7032_make_i2c_device` are used to instantiate the display objects.  They take parameters like panel dimensions, pin configurations, SPI divisor, SPI mode or I2C address.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/quantum_painter.md#_snippet_34\n\nLANGUAGE: c\nCODE:\n```\n// SPI-based LD7032:\npainter_device_t qp_ld7032_make_spi_device(uint16_t panel_width, uint16_t panel_height, pin_t chip_select_pin, pin_t dc_pin, pin_t reset_pin, uint16_t spi_divisor, int spi_mode);\n// I2C-based LD7032:\npainter_device_t qp_ld7032_make_i2c_device(uint16_t panel_width, uint16_t panel_height, uint8_t i2c_address);\n```\n\n----------------------------------------\n\nTITLE: Updating QMK CLI on Linux or WSL\nDESCRIPTION: This command updates the QMK CLI on Linux or WSL using pip. It installs or upgrades the qmk package for the current user.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/ChangeLog/20220528.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npython3 -m pip install --user --upgrade qmk\n```\n\n----------------------------------------\n\nTITLE: Enabling OLED in rules.mk (Makefile)\nDESCRIPTION: This snippet shows how to enable the OLED feature in the `rules.mk` file of your QMK keyboard firmware.  Setting `OLED_ENABLE = yes` tells the build system to include the OLED driver code during compilation. This is a required step for using OLED displays with your keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/oled_driver.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nOLED_ENABLE = yes\n```\n\n----------------------------------------\n\nTITLE: Registering a Modded Keycode in QMK\nDESCRIPTION: This code snippet shows how to register a keycode with modifiers (Shift, Alt, Control, GUI) applied to it, using the `register_code16()` function in QMK Firmware. This avoids the need to register the mod and keycode separately.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/feature_macros.md#_snippet_14\n\nLANGUAGE: c\nCODE:\n```\nregister_code16(<kc>);\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Encoders with Shared Pins (QMK)\nDESCRIPTION: This snippet shows how to configure multiple encoders using shared pins in `config.h`. This example defines two encoders using only three pins. It defines `ENCODER_A_PINS` and `ENCODER_B_PINS` macros to share pin B1. \nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/encoders.md#_snippet_14\n\nLANGUAGE: c\nCODE:\n```\n#define ENCODER_A_PINS { B1, B1 }\n#define ENCODER_B_PINS { B2, B3 }\n```\n\n----------------------------------------\n\nTITLE: LED Matrix Configuration Example - JSON\nDESCRIPTION: This JSON snippet illustrates how to define a single LED configuration within the `layout` array for the LED matrix feature. It specifies the LED's matrix position, x and y coordinates, and flags, determining its type and behavior. This object is used to define the layout and characteristics of individual LEDs within the LED matrix.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/reference_info_json.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\"matrix\": [2, 1], \"x\": 20, \"y\": 48, \"flags\": 2}\n```\n\n----------------------------------------\n\nTITLE: Add path to .bashrc\nDESCRIPTION: This command adds the `$HOME/.local/bin` directory to the user's PATH and sources the `.bashrc` file to apply the changes in the current shell session. This is a workaround for a Debian/Ubuntu bug that removes `$HOME/.local/bin` from the PATH.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/newbs_getting_started.md#_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\necho 'PATH=\"$HOME/.local/bin:$PATH\"' >> $HOME/.bashrc && source $HOME/.bashrc\n```\n\n----------------------------------------\n\nTITLE: Building Odelia Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the Odelia keyboard. It requires a properly configured QMK build environment.  The output is a .hex or .bin file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/odelia/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake odelia:default\n```\n\n----------------------------------------\n\nTITLE: Setting Forced Data Synchronization Throttle\nDESCRIPTION: This definition sets the maximum time (in milliseconds) before a forced synchronization of data from the master to the slave side.  This acts as a safety net in case data changes are not detected. It is defined in `config.h`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/split_keyboard.md#_snippet_12\n\nLANGUAGE: c\nCODE:\n```\n#define FORCED_SYNC_THROTTLE_MS 100\n```\n\n----------------------------------------\n\nTITLE: Decreasing Global Effect Brightness without EEPROM (C)\nDESCRIPTION: This function decreases the global effect brightness. The change is not written to EEPROM and will be lost on reset.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/led_matrix.md#_snippet_28\n\nLANGUAGE: C\nCODE:\n```\nvoid led_matrix_decrease_val_noeeprom(void)\n```\n\n----------------------------------------\n\nTITLE: Custom Mouse Keycode Example in QMK\nDESCRIPTION: This C code snippet demonstrates how to define a custom keycode (MS_SPECIAL) in QMK to simulate mouse clicks and scrolling. When the key is pressed, it sets the vertical and horizontal scroll values to 127 and clicks the left mouse button. When released, it reverses the scrolling and releases the mouse button.  It requires including necessary QMK headers such as `report.h`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/pointing_device.md#_snippet_17\n\nLANGUAGE: c\nCODE:\n```\ncase MS_SPECIAL:\n    report_mouse_t currentReport = pointing_device_get_report();\n    if (record->event.pressed) {\n        currentReport.v = 127;\n        currentReport.h = 127;\n        currentReport.buttons |= MOUSE_BTN1;  // this is defined in report.h\n    } else {\n        currentReport.v = -127;\n        currentReport.h = -127;\n        currentReport.buttons &= ~MOUSE_BTN1;\n    }\n    pointing_device_set_report(currentReport);\n    pointing_device_send();\n    break;\n```\n\n----------------------------------------\n\nTITLE: Selecting Generic RP2040 Board - Make\nDESCRIPTION: This snippet demonstrates how to select the `GENERIC_RP_RP2040` board in the keyboard's `rules.mk` file. This board provides a base configuration without any pre-configured pins or drivers, allowing users to define all necessary pins and drivers themselves. This is useful for custom RP2040 keyboard designs that don't align with the Generic Pro Micro RP2040 configuration.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/platformdev_rp2040.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nBOARD = GENERIC_RP_RP2040\n```\n\n----------------------------------------\n\nTITLE: Skipping Flashing Support with Environment Variable\nDESCRIPTION: Disables flashing support within the Docker container by setting the `SKIP_FLASHING_SUPPORT` environment variable to 1. This allows the container to run as unprivileged on Linux, and without docker-machine on Windows/macOS.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/getting_started_docker.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nSKIP_FLASHING_SUPPORT=1 util/docker_build.sh keyboard:keymap:target\n```\n\n----------------------------------------\n\nTITLE: Customize Build Options in rules.mk - Makefile\nDESCRIPTION: This snippet shows how to customize the build options for the HelixPico keyboard by modifying the `rules.mk` file. It allows enabling or disabling features such as LED backlight, LED underglow, LED animations, and IOS device connectivity by uncommenting and editing the specified variables. The user can enable/disable the specified features by changing `no` to `yes` and vice versa.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/helix/pico/keymaps/default/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\n# Helix Spacific Build Options\n# you can uncomment and edit follows 4 Variables\n#  jp: 以下の4つの変数を必要に応じて編集し、コメントアウトをはずします。\n# LED_BACK_ENABLE = no        # LED backlight (Enable WS2812 RGB underlight.)\n# LED_UNDERGLOW_ENABLE = no   # LED underglow (Enable WS2812 RGB underlight.)\n# LED_ANIMATIONS = yes        # LED animations\n# IOS_DEVICE_ENABLE = no      # connect to IOS device (iPad,iPhone)\n```\n\n----------------------------------------\n\nTITLE: Mod-Tap Interrupt Handling (New)\nDESCRIPTION: This code snippet demonstrates the updated way of handling mod-tap interrupts using `get_hold_on_other_key_press`. It uses a switch statement to determine whether to enable `HOLD_ON_OTHER_KEY_PRESS` based on the keycode. It specifically disables `HOLD_ON_OTHER_KEY_PRESS` (enables `IGNORE_MOD_TAP_INTERRUPT`) for `LCTL_T(KC_A)` and enables it for all other mod-taps.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/ChangeLog/20230226.md#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nbool get_hold_on_other_key_press(uint16_t keycode, keyrecord_t *record) {\n    switch(keycode) {\n        // Capture all mod-tap keycodes.\n        case QK_MOD_TAP ... QK_MOD_TAP_MAX:\n            if (keycode == LCTL_T(KC_A)) {\n                // Disable HOLD_ON_OTHER_KEY_PRESS for LCTL_T(KC_A)\n                // aka enable IGNORE_MOD_TAP_INTERRUPT for LCTL_T(KC_A).\n                return false;\n            } else {\n                // Enable HOLD_ON_OTHER_KEY_PRESS for every other mod-tap keycode.\n                return true;\n            }\n        default:\n            return false;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware with AnnePro2-Tools\nDESCRIPTION: This command flashes the compiled firmware to the Anne Pro 2 keyboard using the AnnePro2-Tools utility. The keyboard needs to be in DFU/IAP mode. The path to the `annepro2_tools` executable and the binary file must be correct.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/annepro2/readme.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nannepro2_tools annepro2_c15_default.bin\n```\n\n----------------------------------------\n\nTITLE: Animate Image Declarations (C)\nDESCRIPTION: These are the function declarations for animating images with Quantum Painter. `qp_animate` draws an image at a specified location, while `qp_animate_recolor` allows recoloring monochrome animations. Both return a `deferred_token` for controlling the animation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/quantum_painter.md#_snippet_67\n\nLANGUAGE: c\nCODE:\n```\ndeferred_token qp_animate(painter_device_t device, uint16_t x, uint16_t y, painter_image_handle_t image);\ndeferred_token qp_animate_recolor(painter_device_t device, uint16_t x, uint16_t y, painter_image_handle_t image, uint8_t hue_fg, uint8_t sat_fg, uint8_t val_fg, uint8_t hue_bg, uint8_t sat_bg, uint8_t val_bg);\n```\n\n----------------------------------------\n\nTITLE: Defining MCU in QMK rules.mk\nDESCRIPTION: Specifies the microcontroller unit (MCU) being used. An example is the `atmega32u4`. This setting is crucial for selecting the correct architecture and compiler settings.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/config_options.md#_snippet_113\n\nLANGUAGE: makefile\nCODE:\n```\nMCU = atmega32u4\n```\n\n----------------------------------------\n\nTITLE: Setting Split Watchdog Timeout - C\nDESCRIPTION: This code snippet sets the maximum timeout (in milliseconds) that the slave will wait for communication from the master when using `SPLIT_WATCHDOG_ENABLE`. If no communication occurs within this time, the slave will reboot.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/split_keyboard.md#_snippet_43\n\nLANGUAGE: c\nCODE:\n```\n#define SPLIT_WATCHDOG_TIMEOUT 3000\n```\n\n----------------------------------------\n\nTITLE: Define SPI Clock Divisor for External Flash (C)\nDESCRIPTION: This configuration option sets the clock divisor used to derive the SPI frequency from the peripheral clock. A lower divisor results in a higher SPI clock frequency. The value should be chosen based on the FLASH chip's maximum SPI clock frequency, as specified in its datasheet.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/flash.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n#define EXTERNAL_FLASH_SPI_CLOCK_DIVISOR     8\n```\n\n----------------------------------------\n\nTITLE: Disable Auto Mouse on Certain Layers - C\nDESCRIPTION: This code snippet demonstrates how to disable the auto mouse feature when specific layers are active in QMK firmware.  It utilizes the `layer_state_set_user` function to check the highest active layer and disable auto mouse if layers `_LAYER5` through `_LAYER7` are active. It is critical to remove the auto mouse target layer before disabling auto mouse to prevent getting stuck on that layer.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/pointing_device.md#_snippet_26\n\nLANGUAGE: c\nCODE:\n```\n// in keymap.c:\nlayer_state_t layer_state_set_user(layer_state_t state) {\n    // checks highest layer other than target layer\n    switch(get_highest_layer(remove_auto_mouse_layer(state, true))) {\n        case _LAYER5 ... _LAYER7:\n            // remove_auto_mouse_target must be called to adjust state *before* setting enable\n            state = remove_auto_mouse_layer(state, false);\n            set_auto_mouse_enable(false);\n            break;\n        default:\n            set_auto_mouse_enable(true);\n            break;\n    }\n    // recommend that any code that makes adjustment based on auto mouse layer state would go here\n    return state;\n}\n```\n\n----------------------------------------\n\nTITLE: Matrix State Example (KC_NUM Pressed)\nDESCRIPTION: This example demonstrates the matrix state after the `KC_NUM` key is pressed. The corresponding position in the matrix is set to `1`, while the other positions remain `0`. This represents a change in the keyboard state due to a key press.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/understanding_qmk.md#_snippet_4\n\nLANGUAGE: null\nCODE:\n```\n{\n    {1,0,0,0},\n    {0,0,0,0},\n    {0,0,0,0},\n    {0,0,0,0},\n    {0,0,0,0}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Media and Brightness Controls via Key Overrides (C)\nDESCRIPTION: This snippet shows how to configure a single key to control media, volume, and screen brightness by combining it with modifier keys like `Ctrl`, `Shift`, and `Alt`. It utilizes `ko_make_with_layers_negmods_and_options` to specify modifiers, negative modifiers, layers, and options.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/key_overrides.md#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nconst key_override_t next_track_override = \n\tko_make_with_layers_negmods_and_options(\n   \t\tMOD_MASK_CTRL,       // Trigger modifiers: ctrl\n    \tKC_MPLY,             // Trigger key: play/pause\n    \tKC_MNXT,             // Replacement key\n    \t~0,                  // Activate on all layers\n    \tMOD_MASK_SA,         // Do not activate when shift or alt are pressed\n    \tko_option_no_reregister_trigger); // Specifies that the play key is not registered again after lifting ctrl\n    \nconst key_override_t prev_track_override = ko_make_with_layers_negmods_and_options(MOD_MASK_CS, KC_MPLY,\n\t\t\t\t\t\t\tKC_MPRV, ~0, MOD_MASK_ALT, ko_option_no_reregister_trigger);\n\nconst key_override_t vol_up_override = ko_make_with_layers_negmods_and_options(MOD_MASK_ALT, KC_MPLY,\n\t\t\t\t\t\t\tKC_VOLU, ~0, MOD_MASK_CS, ko_option_no_reregister_trigger);\n\nconst key_override_t vol_down_override = ko_make_with_layers_negmods_and_options(MOD_MASK_SA, KC_MPLY,\n\t\t\t\t\t\t\tKC_VOLD, ~0, MOD_MASK_CTRL, ko_option_no_reregister_trigger);\n\nconst key_override_t brightness_up_override = ko_make_with_layers_negmods_and_options(MOD_MASK_CA, KC_MPLY,\n\t\t\t\t\t\t\tKC_BRIU, ~0, MOD_MASK_SHIFT, ko_option_no_reregister_trigger);\n\nconst key_override_t brightness_down_override = ko_make_basic(MOD_MASK_CSA, KC_MPLY, KC_BRID);\n\n// This globally defines all key overrides to be used\nconst key_override_t *key_overrides[] = {\n\t&next_track_override,\n\t&prev_track_override,\n\t&vol_up_override,\n\t&vol_down_override,\n\t&brightness_up_override,\n\t&brightness_down_override\n};\n```\n\n----------------------------------------\n\nTITLE: Compile and Flash Firmware for Hotswap PCB - QMK\nDESCRIPTION: This command compiles and flashes the QMK firmware for the Mode Eighty V2 keyboard with a hotswap PCB using the default layout and `dfu-util`. It assumes the keyboard is in DFU mode. The QMK build environment and `dfu-util` must be installed and configured.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mode/m80v2/readme.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmake mode/m80v2/m80v2h:default:flash # Hotswap\n```\n\n----------------------------------------\n\nTITLE: QMK DFU Bootloader Rules.mk Configuration\nDESCRIPTION: This snippet describes how to add the 'BOOTLOADER=qmk-dfu' setting to the rules.mk file of your keymap. This configuration ensures proper reboot/reset functionality when using the QMK DFU bootloader, preventing the device from immediately jumping back into the firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ploopyco/trackball/rev1_004/readme.md#_snippet_1\n\nLANGUAGE: makefile\nCODE:\n```\nBOOTLOADER=qmk-dfu\n```\n\n----------------------------------------\n\nTITLE: Enabling DAC Channels and Timers in mcuconf.h - C\nDESCRIPTION: This snippet shows how to enable specific DAC channels (DAC1_CH1 and DAC1_CH2) and timers (TIM6, TIM7, and TIM8) in the `mcuconf.h` file. This is necessary for configuring the DAC-based audio drivers on STM32 ARM microcontrollers using ChibiOS.  These settings are needed for the basic DAC driver.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/audio.md#_snippet_2\n\nLANGUAGE: c\nCODE:\n```\n#pragma once\n\n#include_next <mcuconf.h>\n\n#undef STM32_DAC_USE_DAC1_CH1 // [!code focus]\n#define STM32_DAC_USE_DAC1_CH1 TRUE // [!code focus]\n#undef STM32_DAC_USE_DAC1_CH2 // [!code focus]\n#define STM32_DAC_USE_DAC1_CH2 TRUE // [!code focus]\n#undef STM32_GPT_USE_TIM6 // [!code focus]\n#define STM32_GPT_USE_TIM6 TRUE // [!code focus]\n#undef STM32_GPT_USE_TIM7 // [!code focus]\n#define STM32_GPT_USE_TIM7 TRUE // [!code focus]\n#undef STM32_GPT_USE_TIM8 // [!code focus]\n#define STM32_GPT_USE_TIM8 TRUE // [!code focus]\n```\n\n----------------------------------------\n\nTITLE: shutdown_user Implementation Example\nDESCRIPTION: Example implementation of the `shutdown_user()` function in QMK. Similar to `shutdown_kb()`, this allows for cleanup tasks. This example sets the RGB matrix color based on whether the keyboard is jumping to the bootloader or soft resetting, and also shows how to disable `shutdown_kb` by returning false.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/custom_quantum_functions.md#_snippet_7\n\nLANGUAGE: c\nCODE:\n```\nbool shutdown_user(bool jump_to_bootloader) {\n    if (jump_to_bootloader) {\n        // red for bootloader\n        rgb_matrix_set_color_all(RGB_RED);\n    } else {\n        // off for soft reset\n        rgb_matrix_set_color_all(RGB_OFF);\n    }\n    // force flushing -- otherwise will never happen\n    rgb_matrix_update_pwm_buffers();\n    // false to not process kb level\n    return false;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting the PMW3389 driver in rules.mk\nDESCRIPTION: This snippet shows how to specify the PMW3389 sensor as the pointing device driver within the `rules.mk` file. This setting instructs the build process to include the required driver components for the PMW3389 sensor.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/pointing_device.md#_snippet_13\n\nLANGUAGE: Make\nCODE:\n```\nPOINTING_DEVICE_DRIVER = pmw3389\n```\n\n----------------------------------------\n\nTITLE: Flashing Preonic Rev1/Rev2 Firmware (dfu)\nDESCRIPTION: This command flashes the compiled QMK firmware onto a Preonic rev1 or rev2 keyboard using the DFU bootloader. It assumes the keyboard is in DFU mode and that the 'dfu' tool is available in the system's PATH. The target is the 'default' keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/preonic/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake preonic/rev2:default:dfu\n```\n\n----------------------------------------\n\nTITLE: Defining RGB LED Configuration in config.h (C)\nDESCRIPTION: These lines define the data input pin and the number of LEDs on the RGB strip. `WS2812_DI_PIN` specifies the microcontroller pin connected to the data line of the WS2812b RGB strip, and `RGBLED_NUM` sets the total number of LEDs on the strip. These definitions are placed in the `config.h` file of your QMK keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/westfoxtrot/cypher/rev1/keymaps/kwer/readme.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n#define WS2812_DI_PIN F7\n#define RGBLED_NUM 15        // Change this number to the amount of LEDs on the strip you soldered\n```\n\n----------------------------------------\n\nTITLE: Generate QMK Docs (qmk generate-docs)\nDESCRIPTION: This command generates QMK documentation for production.  Requires `node` and `yarn`, and operating system support for symlinks. The `-s` option serves the generated docs on port 4173.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/cli_commands.md#_snippet_43\n\nLANGUAGE: text\nCODE:\n```\nusage: qmk generate-docs [-h] [-s]\n```\n\n----------------------------------------\n\nTITLE: Flashing Sofle Keyboard Firmware (QMK)\nDESCRIPTION: This command flashes the compiled firmware to the Sofle keyboard. It utilizes the QMK make system to flash the keyboard with the default keymap. The keyboard must be in bootloader mode, which is typically achieved by pressing the reset button.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/sofle/rev1/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake sofle:default:flash\n```\n\n----------------------------------------\n\nTITLE: Keyboard Matrix Diagram\nDESCRIPTION: This diagram shows the key matrix layout for the CherryB.Studio CB1800 keyboard. Each cell represents a key, and the numbers indicate the corresponding row/column assignment within the matrix. This is crucial for understanding how key presses are detected and interpreted by the keyboard controller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cherrybstudio/cb1800/matrix_diagram.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n┌───┐┌───┬───┬───┬───┐┌───┬───┬───┬───┐┌───┬───┬───┬───┐┌───┐ ┌───┬───┬───┬───┐\n│00 ││01 │02 │03 │04 ││05 │06 │07 │08 ││09 │0A │10 │11 ││99 │ │12 │13 │14 │15 │\n└───┘└───┴───┴───┴───┘└───┴───┴───┴───┘└───┴───┴───┴───┘└───┘ ├───┼───┼───┼───┤\n                                                              │16 │17 │18 │19 │     2u Backspace\n┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┐ ├───┼───┼───┼───┤    ┌───────┐\n│1A │20 │21 │22 │23 │24 │25 │26 │27 │28 │29 │2A │30 │31 │32 │ │33 │34 │35 │36 │    │32     │\n├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴───┤ ├───┼───┼───┼───┤    └─┬─────┤   ┌───┐\n│37   │38 │39 │3A │40 │41 │42 │43 │44 │45 │46 │47 │48 │49   │ │4A │50 │51 │52 │      │     │   │   │ 2u\n├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴─────┤ ├───┼───┼───┼───┤   ┌──┴┐65  │   │52 │ Numpad\n│53    │54 │55 │56 │57 │58 │59 │5A │60 │61 │62 │63 │65      │ │66 │67 │68 │69 │   │64 │    │   │   │ Plus\n├────┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴────┬───┘ ├───┼───┼───┼───┤   └───┴────┘   ├───┤\n│6A  │70 │71 │72 │73 │74 │75 │76 │77 │78 │79 │7A │80    │┌───┐│82 │83 │84 │85 │    ISO Enter   │   │ 2u\n├───┬┴──┬┴──┬┴───┴───┴───┴───┴───┴──┬┴──┬┴──┬┴──┬┴──┬───┘│81 │└───┼───┼───┼───┤                │85 │ Numpad\n│86 │87 │88 │89                     │8A │90 │91 │92 │┌───┼───┼───┐│96 │97 │98 │                │   │ Enter\n└───┴───┴───┴───────────────────────┴───┴───┴───┴───┘│93 │94 │95 │└───┴───┴───┘                └───┘\n                                                     └───┴───┴───┘\n┌────────┐\n│6A      │ 2.25u LShift\n└────────┘\n┌─────┬─────┬───────────────────────────┬─────┬─────┐\n│86   │88   │89                         │8A   │92   │ WKL\n└─────┴─────┴───────────────────────────┴─────┴─────┘\n```\n\n----------------------------------------\n\nTITLE: Switchplate Peripherals 910 Matrix Diagram\nDESCRIPTION: This diagram represents the key matrix for the Switchplate Peripherals 910 keyboard. It shows the physical arrangement of keys and their corresponding row and column assignments within the matrix. The labels (e.g., 00, 01, 10) indicate the matrix coordinates for each key.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/switchplate/switchplate910/matrix_diagram.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n                                                    ┌───────┐\n                                       2u Backspace │0E     │\n                                                    └───────┘\n┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┐\n│00 │01 │02 │03 │04 │05 │06 │07 │08 │09 │0A │0B │0C │0D │0E │2D │\n├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴───┼───┤\n│10   │11 │12 │13 │14 │15 │16 │17 │18 │19 │1A │1B │1C │1D   │1E │\n├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴─────┼───┤\n│20    │21 │22 │23 │24 │25 │26 │27 │28 │29 │2A │2B │2C      │2E │\n├──────┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴────┬───┼───┤\n│30      │31 │32 │33 │34 │35 │36 │37 │38 │39 │3A │3B    │3C │3E │\n├────┬───┴┬──┴─┬─┴───┴───┴───┴───┴───┴──┬┴───┼───┴┬─┬───┼───┼───┤\n│40  │41  │42  │45                      │48  │49  │ │4B │4C │4E │\n└────┴────┴────┴────────────────────────┴────┴────┘ └───┴───┴───┘\n┌─────┬───┬─────┬───────────────────────────┬─────┐\n│40   │41 │42   │45                         │49   │ Blocker Tsangan\n└─────┴───┴─────┴───────────────────────────┴─────┘\n```\n\n----------------------------------------\n\nTITLE: 60% ANSI Arrow Split BS Layout Diagram\nDESCRIPTION: ASCII art diagram visualizing a 60% ANSI keyboard layout featuring an arrow cluster and a split backspace key. This layout provides both arrow keys and a split backspace for enhanced functionality. The diagram illustrates the key arrangement.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/layouts/default/readme.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┐\n│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │\n├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴───┤\n│     │   │   │   │   │   │   │   │   │   │   │   │   │     │\n├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴─────┤\n│      │   │   │   │   │   │   │   │   │   │   │   │        │\n├──────┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴───┴┬───┬───┤\n│        │   │   │   │   │   │   │   │   │   │      │   │   │\n├────┬───┴┬──┴─┬─┴───┴───┴───┴───┴───┴──┬┴──┬┴──┬───┼───┼───┤\n│    │    │    │                        │   │   │   │   │   │\n└────┴────┴────┴────────────────────────┴───┴───┴───┴───┴───┘\n```\n\n----------------------------------------\n\nTITLE: 60% ANSI Arrow Layout Diagram\nDESCRIPTION: Visualization of the 60% ANSI keyboard layout with a dedicated arrow cluster using ASCII art. The diagram depicts the key arrangement with the arrow keys placed in the bottom right corner. It gives a visual representation of a 60% ANSI layout with arrow keys.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/layouts/default/readme.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───────┐\n│   │   │   │   │   │   │   │   │   │   │   │   │   │       │\n├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─────┤\n│     │   │   │   │   │   │   │   │   │   │   │   │   │     │\n├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴─────┤\n│      │   │   │   │   │   │   │   │   │   │   │   │        │\n├──────┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴───┴┬───┬───┤\n│        │   │   │   │   │   │   │   │   │   │      │   │   │\n├────┬───┴┬──┴─┬─┴───┴───┴───┴───┴───┴──┬┴──┬┴──┬───┼───┼───┤\n│    │    │    │                        │   │   │   │   │   │\n└────┴────┴────┴────────────────────────┴───┴───┴───┴───┴───┘\n```\n\n----------------------------------------\n\nTITLE: Rendering QMK Logo on OLED (C)\nDESCRIPTION: This snippet shows how to render the QMK logo on the OLED display. The `render_logo` function defines a static array `qmk_logo` containing the character codes for the logo. These characters map to predefined glyphs in the default font. The `oled_write_P` function writes the logo to the display.  The `oled_task_user` function calls `render_logo` to update the display.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/oled_driver.md#_snippet_4\n\nLANGUAGE: C\nCODE:\n```\nstatic void render_logo(void) {\n    static const char PROGMEM qmk_logo[] = {\n        0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E, 0x8F, 0x90, 0x91, 0x92, 0x93, 0x94,\n        0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xAF, 0xB0, 0xB1, 0xB2, 0xB3, 0xB4,\n        0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0x00\n    };\n\n    oled_write_P(qmk_logo, false);\n}\n\nbool oled_task_user(void) {\n    render_logo();\n    return false;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom LED Matrix Effects (C)\nDESCRIPTION: This code snippet demonstrates how to define custom LED matrix effects in QMK Firmware. It involves declaring the effects using the `LED_MATRIX_EFFECT` macro and defining their implementation within the `LED_MATRIX_CUSTOM_EFFECT_IMPLS` ifdef block. The example shows both a simple effect and a more complex effect with initialization and runtime methods.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/led_matrix.md#_snippet_4\n\nLANGUAGE: c\nCODE:\n```\n// !!! DO NOT ADD #pragma once !!! //\n\n// Step 1.\n// Declare custom effects using the LED_MATRIX_EFFECT macro\n// (note the lack of semicolon after the macro!)\nLED_MATRIX_EFFECT(my_cool_effect)\nLED_MATRIX_EFFECT(my_cool_effect2)\n\n// Step 2.\n// Define effects inside the `LED_MATRIX_CUSTOM_EFFECT_IMPLS` ifdef block\n#ifdef LED_MATRIX_CUSTOM_EFFECT_IMPLS\n\n// e.g: A simple effect, self-contained within a single method\nstatic bool my_cool_effect(effect_params_t* params) {\n  LED_MATRIX_USE_LIMITS(led_min, led_max);\n  for (uint8_t i = led_min; i < led_max; i++) {\n    led_matrix_set_value(i, 0xFF);\n  }\n  return led_matrix_check_finished_leds(led_max);\n}\n\n// e.g: A more complex effect, relying on external methods and state, with\n// dedicated init and run methods\nstatic uint8_t some_global_state;\nstatic void my_cool_effect2_complex_init(effect_params_t* params) {\n  some_global_state = 1;\n}\nstatic bool my_cool_effect2_complex_run(effect_params_t* params) {\n  LED_MATRIX_USE_LIMITS(led_min, led_max);\n  for (uint8_t i = led_min; i < led_max; i++) {\n    led_matrix_set_value(i, some_global_state++);\n  }\n  return led_matrix_check_finished_leds(led_max);\n}\nstatic bool my_cool_effect2(effect_params_t* params) {\n  if (params->init) my_cool_effect2_complex_init(params);\n  return my_cool_effect2_complex_run(params);\n}\n\n#endif // LED_MATRIX_CUSTOM_EFFECT_IMPLS\n```\n\n----------------------------------------\n\nTITLE: Defining TKL ISO Tsangan Split Layout - QMK\nDESCRIPTION: Defines a TKL (Tenkeyless) ISO layout with an F13 key, Tsangan bottom row, split backspace, and split right shift. This layout provides a compact form factor with specific key arrangement modifications.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/layouts/default/readme.md#_snippet_21\n\nLANGUAGE: plaintext\nCODE:\n```\n┌───┐┌───┬───┬───┬───┐┌───┬───┬───┬───┐┌───┬───┬───┬───┐┌───┐ ┌───┬───┬───┐\n│   ││   │   │   │   ││   │   │   │   ││   │   │   │   ││   │ │   │   │   │\n└───┘└───┴───┴───┴───┘└───┴───┴───┴───┘└───┴───┴───┴───┘└───┘ └───┴───┴───┘\n┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┐ ┌───┬───┬───┐\n│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │ │   │   │   │\n├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴───┤ ├───┼───┼───┤\n│     │   │   │   │   │   │   │   │   │   │   │   │   │     │ │   │   │   │\n├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┐    │ └───┴───┴───┘\n│      │   │   │   │   │   │   │   │   │   │   │   │   │    │\n├────┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴───┴┬───┤     ┌───┐\n│    │   │   │   │   │   │   │   │   │   │   │   │      │   │     │   │\n├────┴┬──┴┬──┴──┬┴───┴───┴───┴───┴───┴───┴──┬┴───┴┬───┬─┴───┤ ┌───┼───┼───┐\n│     │   │     │                           │     │   │     │ │   │   │   │\n└─────┴───┴─────┴───────────────────────────┴─────┴───┴─────┘ └───┴───┴───┘\n```\n\n----------------------------------------\n\nTITLE: Compiling Skeletyl Firmware with v2 (Splinky v3) and default keymap\nDESCRIPTION: This command compiles the QMK firmware for the Skeletyl keyboard with v2 shield (Splinky v3) and default keymap. It uses the `qmk compile` command with specific parameters for the keyboard, version, and keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/bastardkb/skeletyl/readme.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nqmk compile -kb bastardkb/skeletyl/v2/splinky_3 -km default\n```\n\n----------------------------------------\n\nTITLE: Keyboard Matrix Diagram\nDESCRIPTION: This diagram visually represents the keyboard matrix, showing the key positions and their corresponding row and column assignments. It's based on VIA data and may not perfectly align with the QMK source code.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/igloo/matrix_diagram.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n                                                    ┌───────┐\n                                       2u Backspace │0D     │\n                                                    └───────┘\n┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┐┌───┬───┬───┐\n│00 │01 │02 │03 │04 │05 │06 │07 │08 │09 │0A │0B │0C │2F │0D ││0E │0F │0G │\n├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴───┤├───┼───┼───┤      ┌─────┐\n│10   │11 │12 │13 │14 │15 │16 │17 │18 │19 │1A │1B │1C │1D   ││1E │1F │1G │      │     │\n├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴─────┤└───┴───┴───┘   ┌──┴┐2D  │ ISO Enter\n│20    │21 │22 │23 │24 │25 │26 │27 │28 │29 │2A │2B │2C      │                │2E │    │\n├────┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴────┬───┤    ┌───┐       └───┴────┘\n│30  │31 │32 │33 │34 │35 │36 │37 │38 │39 │3A │3B │3C    │3E │    │3F │\n├────┼───┴┬──┴─┬─┴───┴───┴───┴───┴───┴──┬┴───┼───┴┬────┬┴───┤┌───┼───┼───┐\n│40  │41  │42  │47                      │49  │4A  │4B  │4D  ││4E │4F │4G │\n└────┴────┴────┴────────────────────────┴────┴────┴────┴────┘└───┴───┴───┘\n┌────────┐                                       ┌──────────┐\n│30      │ 2.25u LShift             2.75u RShift │3C        │\n└────────┘                                       └──────────┘\n┌─────┬───┬─────┬───────────┬───┬───────────┬─────┬───┬─────┐\n│40   │41 │42   │45         │44 │46         │4A   │4B │4D   │ Tsangan/WKL Split Space\n└─────┴───┴─────┴───────────┴───┴───────────┴─────┴───┴─────┘\n┌─────┬───┬─────┬───────────────────────────┬─────┬───┬─────┐\n│40   │41 │42   │44                         │4A   │4B │4D   │ Tsangan/WKL\n└─────┴───┴─────┴───────────────────────────┴─────┴───┴─────┘\n```\n\n----------------------------------------\n\nTITLE: 60% ISO Arrow Layout Diagram\nDESCRIPTION: This ASCII art diagram visualizes a 60% ISO keyboard layout that includes a dedicated arrow cluster. This combines the ISO key arrangement with the added functionality of arrow keys. The diagram represents the key arrangement.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/layouts/default/readme.md#_snippet_11\n\nLANGUAGE: text\nCODE:\n```\n┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───────┐\n│   │   │   │   │   │   │   │   │   │   │   │   │   │       │\n├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─────┤\n│     │   │   │   │   │   │   │   │   │   │   │   │   │     │\n├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┐    │\n│      │   │   │   │   │   │   │   │   │   │   │   │   │    │\n├────┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴───┴┬──┴┬───┤\n│    │   │   │   │   │   │   │   │   │   │   │      │   │   │\n├────┼───┴┬──┴─┬─┴───┴───┴───┴───┴───┴──┬┴──┬┴──┬───┼───┼───┤\n│    │    │    │                        │   │   │   │   │   │\n└────┴────┴────┴────────────────────────┴───┴───┴───┴───┴───┘\n```\n\n----------------------------------------\n\nTITLE: Defining Device Version in QMK config.h\nDESCRIPTION: This code snippet defines the device version for a QMK firmware project, often used for revisions of the keyboard.  This setting is configured in the `config.h` file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/config_options.md#_snippet_2\n\nLANGUAGE: c\nCODE:\n```\n#define DEVICE_VER 0x0100\n```\n\n----------------------------------------\n\nTITLE: Configure Wear-Leveling RP2040 Driver\nDESCRIPTION: This snippet configures the wear-leveling driver for the RP2040 microcontroller. It allows specifying the flash size, base address, logical size, backing size, and write size.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/eeprom.md#_snippet_6\n\nLANGUAGE: c\nCODE:\n```\n#define WEAR_LEVELING_RP2040_FLASH_SIZE PICO_FLASH_SIZE_BYTES\n#define WEAR_LEVELING_RP2040_FLASH_BASE (flash_size-sector_size)\n#define WEAR_LEVELING_LOGICAL_SIZE (backing_size/2)\n#define WEAR_LEVELING_BACKING_SIZE 8192\n#define BACKING_STORE_WRITE_SIZE 2\n```\n\n----------------------------------------\n\nTITLE: Enabling DIP Switch Support in QMK rules.mk\nDESCRIPTION: This snippet shows how to enable DIP switch support by setting the `DIP_SWITCH_ENABLE` variable to `yes` in the `rules.mk` file. This enables the necessary functionality for using DIP switches within the QMK firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/dip_switch.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nDIP_SWITCH_ENABLE = yes\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware to Viktus Styrka (QMK)\nDESCRIPTION: This command flashes the built firmware to the Viktus Styrka Atmel Edition keyboard using the QMK build environment.  It requires a configured build environment and assumes the keyboard is connected and in a flashable state. This combines the build and flash steps.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/nopunin10did/styrkatmel/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake nopunin10did/styrkatmel:default:flash\n```\n\n----------------------------------------\n\nTITLE: OLED code optimization\nDESCRIPTION: Demonstrates how to rewrite code to avoid using `sprintf` or `snprintf`, which can significantly reduce firmware size. Shows an example of converting WPM display code to use `oled_write_P` and `get_u8_str` instead.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/squeezing_avr.md#_snippet_11\n\nLANGUAGE: c\nCODE:\n```\n    // OLD CODE\n    char wpm_str[4] = {0};\n    sprintf(wpm_str, \"WPM: %03d\", get_current_wpm());\n    oled_write(wpm_str, ' '), false);\n```\n\nLANGUAGE: c\nCODE:\n```\n    // NEW CODE\n    oled_write_P(PSTR(\"WPM: \"), false);\n    oled_write(get_u8_str(get_current_wpm(), ' '), false);\n```\n\nLANGUAGE: c\nCODE:\n```\n    // NEW CODE\n    oled_write_P(PSTR(\"WPM: \"), false);\n    oled_write(get_u8_str(get_current_wpm(), '0'), false);\n```\n\n----------------------------------------\n\nTITLE: Flashing Gingham Keyboard Firmware\nDESCRIPTION: This command flashes the compiled firmware to the Gingham keyboard. It assumes the keyboard is connected and in a state ready to receive the firmware. It relies on the QMK build environment's flashing tools.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/yiancardesigns/gingham/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake yiancardesigns/gingham:default:flash\n```\n\n----------------------------------------\n\nTITLE: Enabling OS Detection Debugging (C)\nDESCRIPTION: This snippet shows how to enable OS detection debugging. It requires defining `OS_DETECTION_DEBUG_ENABLE` in `config.h`, enabling the console in `rules.mk`, and including the `os_detection.h` header in your `keymap.c`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/os_detection.md#_snippet_3\n\nLANGUAGE: c\nCODE:\n```\n#define OS_DETECTION_DEBUG_ENABLE\n```\n\n----------------------------------------\n\nTITLE: Defining FN1 Layer Keymap for Navpad\nDESCRIPTION: This snippet defines the FN1 layer keymap for the Navpad 1.0 keyboard. This layer is activated when the FN1 key is held down.  The keymap includes system controls, navigation keys, and shifted key combinations. LT keys are used to create layer tap keys. `QK_BOOT` is used to reset the keyboard. `EE_CLR` clears the eeprom.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/yushakobo/navpad/10_helix_r/keymaps/default/readme.md#_snippet_1\n\nLANGUAGE: QMK Keymap\nCODE:\n```\n   ,-------------------------------. ,------.\n   | QK_BOOT  | EE_CLR   | KC_NO   | | KC_NO |\n   |----------+----------+----------+-------------------------------------------------.                ,-----------------------------------------------------------------------.\n   | KC_NO    | KC_NO    | KC_NO    | KC_NUM   | KC_QUOT   | KC_PEQL  | KC_NO         |\n   `--------------------------------+----------+-----------+----------+---------------|                |------------+----------+-----------+-----------+-----------+-----------|\n   | KC_CAPS  | KC_NUM   | KC_SCRL  | S(KC_9)  | KC_UP     | S(KC_0)  | S(KC_SPC)     |\n   `--------------------------------+----------+-----------+----------+---------------|                |------------+----------+-----------+-----------+-----------+-----------|\n                                    | KC_LEFT  | KC_BTN3   | KC_RGHT  | S(KC_SPC)     |\n   ,--------------------------------+----------+-----------+----------+---------------|  ,-------------+------------+----------+-----------+-----------+-----------+-----------|\n   | KC_TRNS  | S(KC_ENT)| KC_TRNS  | KC_BSPC  | KC_DOWN   | KC_DEL   | KC_TRNS       |\n   |----------+----------+----------+----------+-----------+----------+---------------|  |-------------+------------+----------+-----------+-----------+-----------+-----------|\n   | KC_BTN1  | KC_ENT   |S(KC_SPC)|LT(2,KC_SPC)|KC_SPC    | KC_COMM  | KC_TRNS       |\n   '----------------------------------------------------------------------------------`  '-------------------------------------------------------------------------------------`\n```\n\n----------------------------------------\n\nTITLE: Advancing to the Next Page\nDESCRIPTION: Advances the cursor to the next page on the display. If `clearPageRemainder` is true, the remaining portion of the current page is filled with spaces (' ').  The cursor wraps to the beginning when it reaches the end of the display.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/st7565.md#_snippet_11\n\nLANGUAGE: C\nCODE:\n```\n// Advances the cursor to the next page, writing ' ' if true\n// Wraps to the begining when out of bounds\nvoid st7565_advance_page(bool clearPageRemainder);\n```\n\n----------------------------------------\n\nTITLE: Enabling RGB Lighting with APA102 Driver in rules.mk\nDESCRIPTION: This snippet enables RGB lighting and specifies the APA102 driver in the `rules.mk` file.  It sets the `RGBLIGHT_ENABLE` variable to `yes` and specifies `apa102` as the driver to be used.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/rgblight.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nRGBLIGHT_ENABLE = yes\nRGBLIGHT_DRIVER = apa102\n```\n\n----------------------------------------\n\nTITLE: Building ATLANTIS AK81_VE Firmware (QMK)\nDESCRIPTION: This command is used to build the default firmware for the ATLANTIS AK81_VE keyboard within the QMK firmware environment. It assumes that the QMK build environment has been properly set up. The built firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/atlantis/ak81_ve/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake atlantis/ak81_ve:default\n```\n\n----------------------------------------\n\nTITLE: Defining I2C Address in C\nDESCRIPTION: These snippets demonstrate two ways to define an I2C device address in C, accounting for the required left shift. The first example shifts the 7-bit address using the bitwise left shift operator.  The second example defines the already shifted 7-bit address.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/i2c.md#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n#define MY_I2C_ADDRESS (0x18 << 1)\n```\n\nLANGUAGE: c\nCODE:\n```\n#define MY_I2C_ADDRESS 0x30\n```\n\n----------------------------------------\n\nTITLE: Defining Keyboard Layout Macro with Shorthand (C)\nDESCRIPTION: This code demonstrates an alternative way to define a keyboard layout macro using shorthand for `KC_NO`. This helps to visually represent the absence of a key and improve debugging. The `XXX` macro is defined as an alias for `KC_NO`, which represents an empty switch position in the matrix.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/reference_configurator_support.md#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n#pragma once\n\n#define XXX KC_NO\n\n#define LAYOUT( \\\n    k00, k01, k02, k03, \\\n    k10, k11, k12, k13, \\\n    k20, k21, k22,      \\\n    k30, k31, k32, k33, \\\n    k40,      k42       \\\n  ) { \\\n    { k00, k01, k02, k03 }, \\\n    { k10, k11, k12, k13 }, \\\n    { k20, k21, k22, XXX }, \\\n    { k30, k31, k32, k33 }, \\\n    { k40, XXX, k42, XXX }  \\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Base Layer Keymap for Navpad\nDESCRIPTION: This snippet defines the base layer keymap for the Navpad 1.0 keyboard. It maps specific keycodes to physical keys on the keyboard, including alphanumeric keys, function keys, and navigation keys. The keymap uses a matrix representation to define the layout. `LT(1,KC_PENT)` and `LT(1,KC_SPC)` are used to create layer tap keys. TAP_00 sends \"00\".\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/yushakobo/navpad/10_helix_r/keymaps/default/readme.md#_snippet_0\n\nLANGUAGE: QMK Keymap\nCODE:\n```\n   ,-------------------------------. ,------.\n   | KC_PSCR  | KC_SCRL  | KC_PAUS | |KC_MUTE|\n   |----------+----------+----------+-------------------------------------------------.                ,-----------------------------------------------------------------------.\n   | KC_INS   | KC_HOME  | KC_PGUP  | KC_ESC   | KC_PSLS   | KC_PAST  | KC_PMNS       |\n   |----------+----------+----------+----------+-----------+----------+---------------|                |------------+----------+-----------+-----------+-----------+-----------|\n   | KC_DEL   | KC_END   | KC_PGDN  | KC_P7    | KC_P8     | KC_P9    | KC_PPLS       |                | KC_Y       | KC_U     | KC_I      | KC_O      | KC_P      | KC_BSPC   |\n   `--------------------------------+----------+-----------+----------+---------------|                |------------+----------+-----------+-----------+-----------+-----------|\n                                    | KC_P4    | KC_P5     | KC_P6    | KC_PPLS       |                | KC_H       | KC_J     | KC_K      | KC_L      | KC_SCLN   | KC_QUOT   |\n   ,--------------------------------+----------+-----------+----------+---------------|  ,-------------+------------+----------+-----------+-----------+-----------+-----------|\n   | S(KC_TAB)| KC_UP    | KC_TAB   | KC_P1    | KC_P2     | KC_P3    | LT(1,KC_PENT) |\n   |----------+----------+----------+----------+-----------+----------+---------------|  |-------------+------------+----------+-----------+-----------+-----------+-----------|\n   | KC_LEFT  | KC_DOWN  | KC_RGHT  | KC_P0    | TAP_00    | KC_PDOT  | LT(1,KC_PENT) |\n   '----------------------------------------------------------------------------------`  '-------------------------------------------------------------------------------------`\n```\n\n----------------------------------------\n\nTITLE: Setting WS2812 SPI Baudrate in config.h (STM32)\nDESCRIPTION: This code snippet defines the SPI divisor for the WS2812 driver. This value must be selected based on the clock tree provided by STM32CubeMX, and needs to be one of the supported divisors (2, 4, 8, 16, 32, 64, 128, or 256). This configuration is crucial for ensuring correct communication speed with the WS2812 LEDs when using the SPI driver.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/ws2812.md#_snippet_11\n\nLANGUAGE: c\nCODE:\n```\n#define WS2812_SPI_DIVISOR 16\n```\n\n----------------------------------------\n\nTITLE: Custom Bootmagic Scan Function (C)\nDESCRIPTION: This snippet shows how to replace the default `bootmagic_scan` function to add custom logic for triggering Bootmagic. This allows for more advanced handling, such as requiring additional keys to be pressed or resetting the EEPROM. The snippet includes a basic example of checking the Bootmagic key and jumping to the bootloader.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/bootmagic.md#_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nvoid bootmagic_scan(void) {\n    matrix_scan();\n    wait_ms(DEBOUNCE * 2);\n    matrix_scan();\n\n    if (matrix_get_row(BOOTMAGIC_ROW) & (1 << BOOTMAGIC_COLUMN)) {\n      // Jump to bootloader.\n      bootloader_jump();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Keymap Layer Definition in C\nDESCRIPTION: This code defines the keymap layers for the Nomu30 keyboard. Each layer is defined using the LAYOUT macro, which maps keycodes to specific keys or functions.  The layers include the base layer (_BASE), lower layer (_LOWER), raise layer (_RAISE), and adjust layer (_ADJUST). Special keycodes like KC_SLSF, KC_Z_CT, and AG_NORM are used to define custom functions and layer switching.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/recompile_keys/nomu30/keymaps/center_sprit/readme.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n  [_BASE] = LAYOUT(\n  //,-------------------------------------------------------------------------------------------------------------.\n          KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,  KC_BSLO,     KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,\n  //|---------+---------+---------+---------+---------+---------+---------+---------+---------+---------+---------|\n       KC_SLSF,     KC_A,     KC_S,     KC_D,     KC_F,     KC_G,     KC_H,     KC_J,     KC_K,     KC_L,  KC_ENSF,\n  //|---------+---------+---------+---------+---------+---------+---------+---------+---------+---------+---------|\n       KC_Z_CT,  KC_X_AL,  KC_C_GU,     KC_V,     KC_B,  KC_SPRA,     KC_N,  KC_M_CT,  KC_CODO\n  //`---------+---------+---------+---------+---------+---------+---------+---------+---------'\n  ),\n\n  [_LOWER] = LAYOUT(\n  //,-------------------------------------------------------------------------------------------------------------.\n         KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,  _______,  KC_MINS,   KC_EQL,  KC_INT3,  KC_LBRC,  KC_RBRC,\n  //|---------+---------+---------+---------+---------+---------+---------+---------+---------+---------+---------|\n       _______,    KC_F6,    KC_F7,    KC_F8,    KC_F9,   KC_F10,  XXXXXXX,  XXXXXXX,  KC_SCLN,  KC_QUOT,  KC_BSSF,\n  //|---------+---------+---------+---------+---------+---------+---------+---------+---------+---------+---------|\n       KC_11CT,  KC_12AL,   KC_ESC,   KC_TAB,    KANJI,  KC_MLAD,  XXXXXXX,  KC_COMM,   KC_DOT\n  //`---------+---------+---------+---------+---------+---------+---------+---------+---------'\n  ),\n\n  [_RAISE] = LAYOUT(\n  //,-------------------------------------------------------------------------------------------------------------.\n          KC_1,     KC_2,     KC_3,     KC_4,     KC_5,  _______,     KC_6,     KC_7,     KC_8,     KC_9,     KC_0,\n  //|---------+---------+---------+---------+---------+---------+---------+---------+---------+---------+---------|\n       _______,  XXXXXXX,  XXXXXXX,  XXXXXXX,  XXXXXXX,  XXXXXXX,  KC_LEFT,  KC_DOWN,    KC_UP,  KC_RGHT,  KC_LSFT,\n  //|---------+---------+---------+---------+---------+---------+---------+---------+---------+---------+---------|\n       KC_LCTL,  KC_LALT,  KC_LGUI,  XXXXXXX,  XXXXXXX,  _______,  XXXXXXX,  KC_SLSH,  KC_INT1\n  //`---------+---------+---------+---------+---------+---------+---------+---------+---------'\n  ),\n\n  [_ADJUST] = LAYOUT(\n  //,-------------------------------------------------------------------------------------------------------------.\n         QK_BOOT, RGBRST,  AG_NORM,  AG_SWAP,  XXXXXXX,  _______,  XXXXXXX,  XXXXXXX,  XXXXXXX,  XXXXXXX,  XXXXXXX,\n  //|---------+---------+---------+---------+---------+---------+---------+---------+---------+---------+---------|\n       _______,  RGB_TOG,  RGB_HUI,  RGB_SAI,  RGB_VAI,  XXXXXXX,  KC_MS_L,  KC_MS_D,  KC_MS_U,  KC_MS_R,  XXXXXXX,\n  //|---------+---------+---------+---------+---------+---------+---------+---------+---------+---------+---------|\n       RGB_MOD,  RGB_HUD,  RGB_SAD,  RGB_VAD,  XXXXXXX,  _______,  KC_BTN1,  KC_BTN2,  XXXXXXX\n  //`---------+---------+---------+---------+---------+---------+---------+---------+---------'\n  )\n\n```\n\n----------------------------------------\n\nTITLE: Enabling Permissive Hold Per Key in QMK\nDESCRIPTION: This code snippet enables the `PERMISSIVE_HOLD_PER_KEY` option in QMK, allowing for granular control over the permissive hold behavior.  It requires the definition and implementation of the `get_permissive_hold` function in the keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/tap_hold.md#_snippet_6\n\nLANGUAGE: c\nCODE:\n```\n#define PERMISSIVE_HOLD_PER_KEY\n```\n\n----------------------------------------\n\nTITLE: Flashing the Work Louder Loop Firmware\nDESCRIPTION: This command builds and flashes the default firmware to the Work Louder Loop keyboard. It leverages the QMK build environment and the configured flashing tools to upload the compiled firmware to the device's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/work_louder/loop/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake work_louder/loop:default:flash\n```\n\n----------------------------------------\n\nTITLE: Customizing Key Represses for Combos\nDESCRIPTION: This example showcases customizing key represses after a combo is activated using `COMBO_PROCESS_KEY_REPRESS` and the `process_combo_key_repress` function, combined with a custom `process_combo_event` function. This is used to create special handling for Alt+Tab window switching. On combo activation, Alt is registered and Tab is pressed. Releasing and repressing G switches windows forward, while doing the same with F switches them backwards.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/combo.md#_snippet_11\n\nLANGUAGE: c\nCODE:\n```\nenum combos {\n    CMB_ALTTAB\n};\n\nconst uint16_t PROGMEM combo_alttab[] = {KC_F, KC_G, COMBO_END};\n\ncombo_t key_combos[COMBO_LENGTH] = {\n    [CMB_ALTTAB] = COMBO(combo_alttab, KC_NO), // KC_NO to leave processing for process_combo_event\n};\n\nvoid process_combo_event(uint16_t combo_index, bool pressed) {\n    switch (combo_index) {\n        case CMB_ALTTAB:\n            if (pressed) {\n                register_mods(MOD_LALT);\n                tap_code(KC_TAB);\n            } else {\n                unregister_mods(MOD_LALT);\n            }\n            break;\n    }\n}\n\nbool process_combo_key_repress(uint16_t combo_index, combo_t *combo, uint8_t key_index, uint16_t keycode) {\n    switch (combo_index) {\n        case CMB_ALTTAB:\n            switch (keycode) {\n                case KC_F:\n                    tap_code16(S(KC_TAB));\n                    return true;\n                case KC_G:\n                    tap_code(KC_TAB);\n                    return true;\n            }\n    }\n    return false;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Virtual Joystick Axes\nDESCRIPTION: This snippet illustrates how to implement virtual joystick axes controlled by key presses. The code defines two virtual axes (X and Y) and updates their values based on keypad presses (KC_P8, KC_P2, KC_P4, KC_P6). A precision modifier (KC_P0) reduces the axis value for finer control.  The `joystick_set_axis` function is used to update the axis values programmatically within the `process_record_user` function.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/joystick.md#_snippet_5\n\nLANGUAGE: c\nCODE:\n```\njoystick_config_t joystick_axes[JOYSTICK_AXIS_COUNT] = {\n    JOYSTICK_AXIS_VIRTUAL, // x\n    JOYSTICK_AXIS_VIRTUAL  // y\n};\n\nstatic bool precision = false;\nstatic uint16_t precision_mod = 64;\nstatic uint16_t axis_val = 127;\n\nbool process_record_user(uint16_t keycode, keyrecord_t *record) {\n    int16_t precision_val = axis_val;\n    if (precision) {\n        precision_val -= precision_mod;\n    }\n\n    switch (keycode) {\n        case KC_P8:\n            joystick_set_axis(1, record->event.pressed ? -precision_val : 0);\n            return false;\n        case KC_P2:\n            joystick_set_axis(1, record->event.pressed ? precision_val : 0);\n            return false;\n        case KC_P4:\n            joystick_set_axis(0, record->event.pressed ? -precision_val : 0);\n            return false;\n        case KC_P6:\n            joystick_set_axis(0, record->event.pressed ? precision_val : 0);\n            return false;\n        case KC_P0:\n            precision = record->event.pressed;\n            return false;\n    }\n    return true;\n}\n```\n\n----------------------------------------\n\nTITLE: Simple Raw HID Example (Python)\nDESCRIPTION: This Python code snippet demonstrates how to send a raw HID report to the keyboard and receive a response.  It uses the `pyhidapi` library.  It first enumerates HID devices, filters for the correct usage page and ID, opens the device, sends a report containing 'A', and then reads the response. It depends on `pyhidapi` being installed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/rawhid.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport sys\nimport hid\n\nvendor_id     = 0x4335\nproduct_id    = 0x0002\n\nusage_page    = 0xFF60\nusage         = 0x61\nreport_length = 32\n\ndef get_raw_hid_interface():\n    device_interfaces = hid.enumerate(vendor_id, product_id)\n    raw_hid_interfaces = [i for i in device_interfaces if i['usage_page'] == usage_page and i['usage'] == usage]\n\n    if len(raw_hid_interfaces) == 0:\n        return None\n\n    interface = hid.Device(path=raw_hid_interfaces[0]['path'])\n\n    print(f\"Manufacturer: {interface.manufacturer}\")\n    print(f\"Product: {interface.product}\")\n\n    return interface\n\ndef send_raw_report(data):\n    interface = get_raw_hid_interface()\n\n    if interface is None:\n        print(\"No device found\")\n        sys.exit(1)\n\n    request_data = [0x00] * (report_length + 1) # First byte is Report ID\n    request_data[1:len(data) + 1] = data\n    request_report = bytes(request_data)\n\n    print(\"Request:\")\n    print(request_report)\n\n    try:\n        interface.write(request_report)\n\n        response_report = interface.read(report_length, timeout=1000)\n\n        print(\"Response:\")\n        print(response_report)\n    finally:\n        interface.close()\n\nif __name__ == '__main__':\n    send_raw_report([\n        0x41\n    ])\n```\n\n----------------------------------------\n\nTITLE: Get Display Geometry (C)\nDESCRIPTION: This snippet defines the `qp_get_geometry` function, which retrieves the width, height, rotation, X offset, and Y offset of the display in a single call. Passing `NULL` allows skipping specific values.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/quantum_painter.md#_snippet_83\n\nLANGUAGE: c\nCODE:\n```\nvoid qp_get_geometry(painter_device_t device, uint16_t *width, uint16_t *height, painter_rotation_t *rotation, uint16_t *offset_x, uint16_t *offset_y);\n```\n\n----------------------------------------\n\nTITLE: Defining Fullsize ANSI Layout - QMK\nDESCRIPTION: Defines a fullsize ANSI keyboard layout, the standard and most complete layout, including function keys, alphanumeric keys, a number pad, and arrow keys.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/layouts/default/readme.md#_snippet_29\n\nLANGUAGE: plaintext\nCODE:\n```\n┌───┐   ┌───┬───┬───┬───┐ ┌───┬───┬───┬───┐ ┌───┬───┬───┬───┐ ┌───┬───┬───┐\n│   │   │   │   │   │   │ │   │   │   │   │ │   │   │   │   │ │   │   │   │\n└───┘   └───┴───┴───┴───┘ └───┴───┴───┴───┘ └───┴───┴───┴───┘ └───┴───┴───┘\n┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───────┐ ┌───┬───┬───┐ ┌───┬───┬───┬───┐\n│   │   │   │   │   │   │   │   │   │   │   │   │   │       │ │   │   │   │ │   │   │   │   │\n├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─────┤ ├───┼───┼───┤ ├───┼───┼───┼───┤\n│     │   │   │   │   │   │   │   │   │   │   │   │   │     │ │   │   │   │ │   │   │   │   │\n├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴─────┤ └───┴───┴───┘ ├───┼───┼───┤   │\n│      │   │   │   │   │   │   │   │   │   │   │   │        │               │   │   │   │   │\n├──────┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴────────┤     ┌───┐     ├───┼───┼───┼───┤\n│        │   │   │   │   │   │   │   │   │   │   │          │     │   │     │   │   │   │   │\n├────┬───┴┬──┴─┬─┴───┴───┴───┴───┴───┴──┬┴───┼───┴┬────┬────┤ ┌───┼───┼───┐ ├───┴───┼───┤   │\n│    │    │    │                        │    │    │    │    │ │   │   │   │ │       │   │   │\n└────┴────┴────┴────────────────────────┴────┴────┴────┴────┘ └───┴───┴───┘ └───────┴───┴───┘\n```\n\n----------------------------------------\n\nTITLE: Sauce Mild Keyboard Matrix Diagram\nDESCRIPTION: This is a visual representation of the key matrix for the Sauce Mild keyboard. Each cell represents a key, and the numbers indicate the matrix coordinates (row and column). This is crucial for mapping keys in the firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/sauce/mild/matrix_diagram.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n┌───┐   ┌───┬───┬───┬───┐ ┌───┬───┬───┬───┐ ┌───┬───┬───┬───┐┌───┬───┬───┐\n│00 │   │01 │02 │03 │04 │ │05 │06 │07 │08 │ │09 │0A │0B │0C ││0E │0F │0G │\n└───┘   └───┴───┴───┴───┘ └───┴───┴───┴───┘ └───┴───┴───┴───┘└───┴───┴───┘\n┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┐┌───┬───┬───┐    ┌───────┐\n│10 │11 │12 │13 │14 │15 │16 │17 │18 │19 │1A │1B │1C │1D │4C ││1E │1F │1G │    │1D     │ 2u Backspace\n├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴───┤├───┼───┼───┤    └─┬─────┤\n│20   │21 │22 │23 │24 │25 │26 │27 │28 │29 │2A │2B │2C │2D   ││2E │2F │2G │      │     │\n├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴─────┤└───┴───┴───┘   ┌──┴┐3D  │ ISO Enter\n│30    │31 │32 │33 │34 │35 │36 │37 │38 │39 │3A │3B │3D      │                │3C │    │\n├────┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴────┬───┤    ┌───┐       └───┴────┘\n│40  │51 │41 │42 │43 │44 │45 │46 │47 │48 │49 │4A │4B    │4D │    │4F │\n├────┴┬──┴┬──┴──┬┴───┴───┴───┴───┴───┴───┴──┬┴───┴┬───┬─┴───┤┌───┼───┼───┐\n│50   │   │53   │55                         │5A   │   │5D   ││5E │5F │5G │\n└─────┘   └─────┴───────────────────────────┴─────┘   └─────┘└───┴───┴───┘\n┌────────┐                                       ┌──────────┐\n│40      │ 2.25u LShift                          │4B        │ 2.75u RShift\n└────────┘                                       └──────────┘\n```\n\n----------------------------------------\n\nTITLE: Defining 96% ANSI Layout - QMK\nDESCRIPTION: Defines a 96% ANSI layout. This layout is more compact than fullsize, offering a number pad while minimizing overall keyboard size.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/layouts/default/readme.md#_snippet_27\n\nLANGUAGE: plaintext\nCODE:\n```\n┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┐\n│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │\n├───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┴───┼───┼───┼───┼───┤\n│   │   │   │   │   │   │   │   │   │   │   │   │   │       │   │   │   │   │\n├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─────┼───┼───┼───┼───┤\n│     │   │   │   │   │   │   │   │   │   │   │   │   │     │   │   │   │   │\n├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴─────┼───┼───┼───┤   │\n│      │   │   │   │   │   │   │   │   │   │   │   │        │   │   │   │   │\n├──────┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴────┬───┼───┼───┼───┼───┤\n│        │   │   │   │   │   │   │   │   │   │   │      │   │   │   │   │   │\n├────┬───┴┬──┴─┬─┴───┴───┴───┴───┴───┴──┬┴──┬┴──┬┴──┬───┼───┼───┼───┼───┤   │\n│    │    │    │                        │   │   │   │   │   │   │   │   │   │\n└────┴────┴────┴────────────────────────┴───┴───┴───┴───┴───┴───┴───┴───┴───┘\n```\n\n----------------------------------------\n\nTITLE: Configure Bluefruit LE Pins in config.h (QMK)\nDESCRIPTION: These defines configure the pins used for the Adafruit Bluefruit LE SPI Friend in the `config.h` file. These pins connect the AVR MCU to the Nordic BLE chip via SPI.  `BLUEFRUIT_LE_RST_PIN` is the reset pin, `BLUEFRUIT_LE_CS_PIN` is the chip select pin, and `BLUEFRUIT_LE_IRQ_PIN` is the interrupt request pin.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/wireless.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define BLUEFRUIT_LE_RST_PIN D4\n#define BLUEFRUIT_LE_CS_PIN  B4\n#define BLUEFRUIT_LE_IRQ_PIN E6\n```\n\n----------------------------------------\n\nTITLE: Decreasing Effect Speed in QMK (C)\nDESCRIPTION: This function decreases the speed of the LED matrix effect and saves the new speed to EEPROM.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/led_matrix.md#_snippet_32\n\nLANGUAGE: C\nCODE:\n```\nvoid led_matrix_decrease_speed(void)\n```\n\n----------------------------------------\n\nTITLE: Configuring ST7565 Display Rotation for Split Keyboard in C\nDESCRIPTION: This code demonstrates how to configure the display rotation differently for the master and slave halves of a split keyboard using `is_keyboard_master()`. The `st7565_init_user` function checks if the current keyboard half is the master and, if not, returns `DISPLAY_ROTATION_180` to flip the display 180 degrees. The `st7565_task_user` function then conditionally renders different content (status or logo) based on whether the current half is the master.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/st7565.md#_snippet_4\n\nLANGUAGE: c\nCODE:\n```\n#ifdef ST7565_ENABLE\ndisplay_rotation_t st7565_init_user(display_rotation_t rotation) {\n    if (!is_keyboard_master()) {\n        return DISPLAY_ROTATION_180;  // flips the display 180 degrees if offhand\n    }\n\n    return rotation;\n}\n\nvoid st7565_task_user(void) {\n    if (is_keyboard_master()) {\n        render_status();  // Renders the current keyboard state (layer, lock, caps, scroll, etc)\n    } else {\n        render_logo();  // Renders a static logo\n    }\n}\n#endif\n```\n\n----------------------------------------\n\nTITLE: Enable Link Time Optimization (LTO)\nDESCRIPTION: Enables Link Time Optimization in `rules.mk` to reduce the compiled firmware size. This setting can significantly reduce the final binary size but may increase the compilation time. It also disables Action Functions and Action Macros.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/squeezing_avr.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nLTO_ENABLE = yes\n```\n\n----------------------------------------\n\nTITLE: DIP Switch Mask Callback in keyboard.c\nDESCRIPTION: This snippet presents the `dip_switch_update_mask_kb` callback function that can be implemented in the `<keyboard>.c` file to handle DIP switch changes using a bitmask. It calls the user-defined callback function `dip_switch_update_mask_user` and returns its result.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/dip_switch.md#_snippet_7\n\nLANGUAGE: C\nCODE:\n```\nbool dip_switch_update_mask_kb(uint32_t state) { \n    if (!dip_switch_update_mask_user(state)) { return false; }\n    return true;\n}\n```\n\n----------------------------------------\n\nTITLE: Typing Strings with SEND_STRING() in C\nDESCRIPTION: This C code snippet demonstrates how to use the `SEND_STRING()` macro within the `process_record_user()` function to type out a predefined string when a custom keycode is pressed. It involves defining a custom keycode, checking for its activation within the `process_record_user()` function, and using `SEND_STRING()` to output the desired string. Requires including necessary QMK headers and defining the keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/feature_macros.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nenum custom_keycodes {\n    QMKBEST = SAFE_RANGE,\n};\n\nbool process_record_user(uint16_t keycode, keyrecord_t *record) {\n    switch (keycode) {\n    case QMKBEST:\n        if (record->event.pressed) {\n            // when keycode QMKBEST is pressed\n            SEND_STRING(\"QMK is the best thing ever!\");\n        } else {\n            // when keycode QMKBEST is released\n        }\n        break;\n    }\n    return true;\n};\n\nconst uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {\n    [0] = {\n        {QMKBEST, KC_ESC},\n        // ...\n    },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring PWM Hardware (config.h)\nDESCRIPTION: Defines the audio output pin and PWM driver settings for hardware PWM signal generation. Configures the timer and channel to directly drive the pin through the PWM hardware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/audio.md#_snippet_10\n\nLANGUAGE: c\nCODE:\n```\n#define AUDIO_PIN A8\n#define AUDIO_PWM_DRIVER PWMD1\n#define AUDIO_PWM_CHANNEL 1\n#define AUDIO_PWM_PAL_MODE 42\n```\n\n----------------------------------------\n\nTITLE: Keyboard Post Initialization (C)\nDESCRIPTION: This snippet shows the use of the `keyboard_post_init_user()` function, which runs at the end of the keyboard initialization process. The example configures RGB underglow settings, enabling it and setting the color and mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/custom_quantum_functions.md#_snippet_3\n\nLANGUAGE: C\nCODE:\n```\nvoid keyboard_post_init_user(void) {\n  // Call the post init code.\n  rgblight_enable_noeeprom(); // enables Rgb, without saving settings\n  rgblight_sethsv_noeeprom(180, 255, 255); // sets the color to teal/cyan without saving\n  rgblight_mode_noeeprom(RGBLIGHT_MODE_BREATHING + 3); // sets mode to Fast breathing without saving\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Strings with Shortcuts\nDESCRIPTION: This example shows how to combine the `send_string()` function with QMK's shortcut macros for sending strings and tapping keys. This allows for creating complex outputs with both static and dynamic text. It leverages the `SEND_STRING` and `SS_TAP` macros.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/feature_macros.md#_snippet_8\n\nLANGUAGE: c\nCODE:\n```\nchar my_str[4] = \"ok.\";\nSEND_STRING(\"I said: \");\nsend_string(my_str);\nSEND_STRING(\"..\"SS_TAP(X_END));\n```\n\n----------------------------------------\n\nTITLE: Combining and Enabling RGB Lighting Layers (C)\nDESCRIPTION: This code combines the defined lighting layers into an array using the `RGBLIGHT_LAYERS_LIST` macro. This array is then assigned to the `rgblight_layers` variable during keyboard setup in the `keyboard_post_init_user` function. Later layers in the array take precedence when multiple layers overlap. Requires `rgblight.h`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/rgblight.md#_snippet_5\n\nLANGUAGE: C\nCODE:\n```\n// Now define the array of layers. Later layers take precedence\nconst rgblight_segment_t* const PROGMEM my_rgb_layers[] = RGBLIGHT_LAYERS_LIST(\n    my_capslock_layer,\n    my_layer1_layer,    // Overrides caps lock layer\n    my_layer2_layer,    // Overrides other layers\n    my_layer3_layer     // Overrides other layers\n);\n\nvoid keyboard_post_init_user(void) {\n    // Enable the LED layers\n    rgblight_layers = my_rgb_layers;\n}\n```\n\n----------------------------------------\n\nTITLE: ST7565 Initialization User Override\nDESCRIPTION: A weak function that can be overridden by the user to customize the initialization process of the ST7565 display. It takes the initial rotation value as input and can return a new `display_rotation_t` value to override the default rotation.  The original rotation value passed into `st7565_init` is passed into this function.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/st7565.md#_snippet_7\n\nLANGUAGE: C\nCODE:\n```\n// Called at the start of st7565_init, weak function overridable by the user\n// rotation - the value passed into st7565_init\n// Return new display_rotation_t if you want to override default rotation\ndisplay_rotation_t st7565_init_user(display_rotation_t rotation);\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware to Knife66 ISO\nDESCRIPTION: This command builds and flashes the default firmware to the Knife66 ISO keyboard. It requires a configured QMK build environment and a connected keyboard in DFU mode or another supported flashing mode. The ':flash' target invokes the flashing process after the firmware has been built.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/misterknife/knife66_iso/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake misterknife/knife66_iso:default:flash\n```\n\n----------------------------------------\n\nTITLE: Set Unicode Input Mode - C\nDESCRIPTION: This function sets the Unicode input mode. It takes a `uint8_t` representing the desired mode as an argument.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/unicode.md#_snippet_10\n\nLANGUAGE: C\nCODE:\n```\nvoid set_unicode_input_mode(uint8_t mode)\n```\n\n----------------------------------------\n\nTITLE: Enabling Console Output in rules.mk (QMK)\nDESCRIPTION: This snippet enables console output, which is necessary for debugging OS detection.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/os_detection.md#_snippet_4\n\nLANGUAGE: make\nCODE:\n```\nCONSOLE_ENABLE = yes\n```\n\n----------------------------------------\n\nTITLE: Building and Flashing Firmware with Docker\nDESCRIPTION: Extends the previous command to also flash the compiled firmware to the keyboard directly from Docker. This requires the `target` parameter, which specifies the flashing target. Mass storage bootloaders are not supported.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/getting_started_docker.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nutil/docker_build.sh keyboard:keymap:target\n# For example: util/docker_build.sh planck/rev6:default:flash\n```\n\n----------------------------------------\n\nTITLE: Teensy++ Pin Configuration for Model M Conversion\nDESCRIPTION: This code snippet illustrates the default pinout configuration for the Teensy++ 2.0 board when used for converting an IBM Model M keyboard to QMK firmware. It specifies which pins correspond to columns, rows, and status LEDs on the keyboard matrix. This configuration is crucial for correctly mapping the keyboard's keys to the controller's input/output.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ibm/model_m/teensypp/readme.md#_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\nColumns: 1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16  \nPins:    C7 C6 C5 C4 C3 C2 C1 C0 E1 E0 D7 D6 D5 D4 D3 D2  \n--------------------------------------------------------  \nRows: 1  2  3  4  5  6  7  8  \nPins: F7 F6 F5 F4 F3 F2 F1 F0  \n--------------------------------------------------------  \nStatus LEDs: CapsLock +5V ScrollLock NumLock  \nPins:        B6       5V  B5         B4\n```\n\n----------------------------------------\n\nTITLE: Advanced Tap Dance Action Definition in QMK\nDESCRIPTION: This code defines a tap dance action using `ACTION_TAP_DANCE_FN_ADVANCED` to associate the 'x' tap dance with the `x_finished` and `x_reset` functions.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/tap_dance.md#_snippet_18\n\nLANGUAGE: c\nCODE:\n```\ntap_dance_action_t tap_dance_actions[] = {\n    [X_CTL] = ACTION_TAP_DANCE_FN_ADVANCED(NULL, x_finished, x_reset)\n};\n```\n\n----------------------------------------\n\nTITLE: Enabling Tri-Layer in QMK\nDESCRIPTION: This snippet shows how to enable Tri-Layer support in QMK firmware by adding `TRI_LAYER_ENABLE = yes` to your `rules.mk` file. This enables the use of `QK_TRI_LAYER_LOWER` and `QK_TRI_LAYER_UPPER` keycodes for layer switching.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/tri_layer.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nTRI_LAYER_ENABLE = yes\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware\nDESCRIPTION: This command flashes the compiled firmware to the glyphkbd_v2 keyboard. It uses the QMK make system along with a suitable flashing tool to upload the generated firmware to the keyboard's microcontroller. The command relies on the QMK Firmware build environment being properly configured with the necessary flashing tools.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/galile0/glyphkbd_v2/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake galile0/glyphkbd_v2:default:flash\n```\n\n----------------------------------------\n\nTITLE: Disabling RGBLight Animations in QMK (diff)\nDESCRIPTION: This code snippet demonstrates how to selectively disable RGBLight animations in QMK Firmware using `#undef` to reduce memory footprint. It disables the static gradient and rainbow swirl animations while defining the number of LEDs and hue/saturation steps.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/rgblight.md#_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n #undef RGBLIGHT_LED_COUNT\n+#undef RGBLIGHT_EFFECT_STATIC_GRADIENT\n+#undef RGBLIGHT_EFFECT_RAINBOW_SWIRL\n #define RGBLIGHT_LED_COUNT 12\n #define RGBLIGHT_HUE_STEP 8\n #define RGBLIGHT_SAT_STEP 8\n```\n\n----------------------------------------\n\nTITLE: Using sudo with dfu-programmer on Linux\nDESCRIPTION: This snippet demonstrates how to use the `sudo` command with `dfu-programmer` on Linux to flash firmware onto an ATMega32u4-based keyboard controller.  It includes commands for erasing, flashing, and resetting the device. This is a workaround for permission issues and requires `dfu-programmer` to be installed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/faq_build.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo dfu-programmer atmega32u4 erase --force\n$ sudo dfu-programmer atmega32u4 flash your.hex\n$ sudo dfu-programmer atmega32u4 reset\n```\n\n----------------------------------------\n\nTITLE: Advanced Keyboard-Level LED Matrix Indicator Callback (C)\nDESCRIPTION: This keyboard-level callback, invoked after rendering but before flushing the LEDs, takes the start and end indices of the LED batch.  The return value is unused.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/led_matrix.md#_snippet_41\n\nLANGUAGE: C\nCODE:\n```\nbool led_matrix_indicators_advanced_kb(uint8_t led_min, uint8_t led_max)\n```\n\n----------------------------------------\n\nTITLE: Rotary Encoder Behavior Definition\nDESCRIPTION: This snippet defines the behavior of Rotary Encoder No.1 for different layers.  In the BASE layer, CW (clockwise) increments volume (KC_VOLU), while CCW (counter-clockwise) decrements volume (KC_VOLD). In the FN1 layer, CW increases the RGB light hue, and CCW decreases it. In FN2, CW increases RGB light saturation, CCW decreases it.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/yushakobo/navpad/10/keymaps/default/readme.md#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n|BASE|KC_VOLU|KC_VOLD|\n|FN1|rgblight_increse_hue()|rgblight_decrese_hue()|\n|FN2|rgblight_increse_sat()|rgblight_decrese_sat()|\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Map and Indices\nDESCRIPTION: This code shows how to create a mapping table and an enum for the Unicode Map feature in `keymap.c`.  It defines an array `unicode_map` holding unicode code points, and an enum for accessing array indexes.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/unicode.md#_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nenum unicode_names {\n    BANG,\n    IRONY,\n    SNEK\n};\n\nconst uint32_t PROGMEM unicode_map[] = {\n    [BANG]  = 0x203D,  // ‽\n    [IRONY] = 0x2E2E,  // ⸮\n    [SNEK]  = 0x1F40D, // 🐍\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Winry315 Orientation in config.h\nDESCRIPTION: These defines specify the default orientation of the Winry315 macropad for RGB Matrix effects in the `config.h` file. The orientation can be set to top, left, right, or bottom, affecting how RGB effects are displayed.  It's crucial for consistent visual feedback when using RGB lighting.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/winry/winry315/readme.md#_snippet_2\n\nLANGUAGE: C\nCODE:\n```\n#define WINRY315_DEFAULT_ORIENTATION WINRY315_ORIENTATION_TOP\n#define WINRY315_DEFAULT_ORIENTATION WINRY315_ORIENTATION_LEFT\n#define WINRY315_DEFAULT_ORIENTATION WINRY315_ORIENTATION_RIGHT\n#define WINRY315_DEFAULT_ORIENTATION WINRY315_ORIENTATION_BOTTOM\n```\n\n----------------------------------------\n\nTITLE: Building KBD67 Mk.II RGB Firmware (AVR V3)\nDESCRIPTION: This command builds the QMK firmware for the KBD67 Mk.II RGB keyboard, version 3, which utilizes an AVR-based ATmega32U4 microcontroller and an IS31FL3741 RGB LED driver. The build process will generate a .bin file. This requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kbdfans/kbd67/mkiirgb/readme.md#_snippet_2\n\nLANGUAGE: make\nCODE:\n```\nmake kbdfans/kbd67/mkiirgb/v3:default # AVR (ATmega32U4+IS31FL3741)\n```\n\n----------------------------------------\n\nTITLE: Flashing QK65 Hotswap Firmware\nDESCRIPTION: This command builds and flashes the default firmware for the QK65 hotswap keyboard. It assumes a connected keyboard in bootloader mode and a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/qwertykeys/qk65/hotswap/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake qwertykeys/qk65/hotswap:default:flash\n```\n\n----------------------------------------\n\nTITLE: Searching Keyboard/Keymap Targets - qmk find\nDESCRIPTION: This command allows searching through keyboard/keymap targets, filtering by specific criteria defined in `info.json` and `rules.mk` files. Filters use a \"dotty\" syntax. Allows for specifying the keymap name to build, as well as printing arbitrary values for each matched target.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/cli_commands.md#_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\nqmk find -f 'processor==STM32F411'\n```\n\nLANGUAGE: shell\nCODE:\n```\nqmk find -f 'processor==STM32F411' -f 'features.rgb_matrix==true'\n```\n\nLANGUAGE: shell\nCODE:\n```\nqmk find -f 'processor==STM32F411' -p 'keyboard_name' -p 'features.rgb_matrix'\n```\n\nLANGUAGE: shell\nCODE:\n```\nqmk find [-h] [-km KEYMAP] [-p PRINT] [-f FILTER]\n```\n\n----------------------------------------\n\nTITLE: Define Timer for Software PWM - C\nDESCRIPTION: This snippet defines which timer will be used for software PWM. The selected timer's callbacks will be used to toggle the audio pin in software.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/audio.md#_snippet_10\n\nLANGUAGE: C\nCODE:\n```\n#define AUDIO_STATE_TIMER GPTD8\n```\n\n----------------------------------------\n\nTITLE: Setting Soft Serial Speed (config.h)\nDESCRIPTION: This code snippet demonstrates how to define the soft serial speed. Adjusting the speed impacts the communication speed for serial. Lowering the speed helps to resolve failed transactions. This should be put into your `config.h` file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/serial.md#_snippet_17\n\nLANGUAGE: C\nCODE:\n```\n#define SELECT_SOFT_SERIAL_SPEED n\n```\n\n----------------------------------------\n\nTITLE: Configuring Audio Pin for AVR Boards (config.h)\nDESCRIPTION: Defines the audio output pin for AVR-based boards. You can select one of the available pins (C4, C5, C6, B5, B6, B7) for the primary speaker and optionally another one (B5, B6, B7) for the secondary speaker using `AUDIO_PIN` and `AUDIO_PIN_ALT`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/audio.md#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n#define AUDIO_PIN C4\n#define AUDIO_PIN C5\n#define AUDIO_PIN C6\n#define AUDIO_PIN B5\n#define AUDIO_PIN B6\n#define AUDIO_PIN B7\n```\n\nLANGUAGE: c\nCODE:\n```\n#define AUDIO_PIN_ALT B5\n#define AUDIO_PIN_ALT B6\n#define AUDIO_PIN_ALT B7\n```\n\n----------------------------------------\n\nTITLE: Defining Layer Order in QMK Firmware (C)\nDESCRIPTION: This code snippet demonstrates how to redefine the order of layers in the QMK firmware to change the default layer. By reordering the enum, you can set a different layer, such as Dvorak, as the base layer.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/splitkb/kyria/keymaps/default/readme.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nenum layers {\n    _DVORAK = 0,\n    _QWERTY,\n    _COLEMAK_DH,\n    _NAV,\n    _SYM,\n    _FUNCTION,\n    _ADJUST\n};\n```\n\n----------------------------------------\n\nTITLE: Using One-Way Data Transfer RPCs\nDESCRIPTION: These helper methods allow for one way data transfer from the master to the slave and from the slave to the master, allowing the user to avoid sending a response when it is not necessary.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/split_keyboard.md#_snippet_32\n\nLANGUAGE: c\nCODE:\n```\nbool transaction_rpc_exec(int8_t transaction_id, uint8_t initiator2target_buffer_size, const void *initiator2target_buffer, uint8_t target2initiator_buffer_size, void *target2initiator_buffer);\nbool transaction_rpc_send(int8_t transaction_id, uint8_t initiator2target_buffer_size, const void *initiator2target_buffer);\nbool transaction_rpc_recv(int8_t transaction_id, uint8_t target2initiator_buffer_size, void *target2initiator_buffer);\n```\n\n----------------------------------------\n\nTITLE: Flashing GK61 Firmware with Make\nDESCRIPTION: This snippet shows how to flash the QMK firmware to the Skyloong GK61 keyboard using the `make` command.  It builds upon the build command, adding the `:flash` target. It depends on having a suitable flashing tool installed and configured.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/skyloong/gk61/v1/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake skyloong/gk61/v1:default:flash\n```\n\nLANGUAGE: make\nCODE:\n```\nmake skyloong/gk61/v1:via:flash\n```\n\n----------------------------------------\n\nTITLE: Matrix Representation Example\nDESCRIPTION: This example shows a data structure representing the state of a 5x4 keyboard matrix.  A value of `0` indicates the key is not pressed, while `1` indicates it is pressed. It's used to store the current state of keys pressed on a keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/understanding_qmk.md#_snippet_0\n\nLANGUAGE: null\nCODE:\n```\n{\n    {0,0,0,0},\n    {0,0,0,0},\n    {0,0,0,0},\n    {0,0,0,0},\n    {0,0,0,0}\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling I2C Driver in QMK with make\nDESCRIPTION: This snippet shows how to enable the I2C driver in your QMK project by setting the `I2C_DRIVER_REQUIRED` variable to `yes` in the `rules.mk` file. This ensures that the I2C driver code is included during the build process, allowing you to use the I2C API in your code.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/i2c.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nI2C_DRIVER_REQUIRED = yes\n```\n\n----------------------------------------\n\nTITLE: Advancing OLED Page (C)\nDESCRIPTION: This function advances the cursor to the next page on the OLED display. If `clearPageRemainder` is true, it writes spaces to the remainder of the current page. The cursor wraps to the beginning when it goes out of bounds.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/oled_driver.md#_snippet_17\n\nLANGUAGE: c\nCODE:\n```\n// Advances the cursor to the next page, writing ' ' if true\n// Wraps to the beginning when out of bounds\nvoid oled_advance_page(bool clearPageRemainder);\n```\n\n----------------------------------------\n\nTITLE: Enabling Timer Driver in halconf.h for STM32\nDESCRIPTION: This snippet demonstrates enabling the General Purpose Timer (GPT) driver in the `halconf.h` file for STM32 microcontrollers. Setting `HAL_USE_GPT` to `TRUE` enables the general-purpose timer functionality within the ChibiOS HAL. This is a prerequisite for using timers in the firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/backlight.md#_snippet_10\n\nLANGUAGE: c\nCODE:\n```\n#pragma once\n\n#define HAL_USE_GPT TRUE // [!code focus]\n\n#include_next <halconf.h>\n```\n\n----------------------------------------\n\nTITLE: Output Pins Configuration Example C\nDESCRIPTION: This C code snippet shows how to define output pins (rows or columns, depending on DIODE_DIRECTION) for the matrix scanning functionality in QMK Firmware. It uses the MATRIX_OUT_PORTS and MATRIX_OUT_PINS macros to specify the ports and pins used for the output signals.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/symmetric70_proto/matrix_fast/readme.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n// list of OUTPUT(row) ports\n#define MATRIX_OUT_PORTS  \\\n    (Port_D, MCU_GPIO, D0), \\\n    (Port_C, MCU_GPIO, C0), \\\n    (Port_E, MCU_GPIO, E0), \\\n    (Port_B, MCU_GPIO, B0)\n// list of OUTPUT pins\n#define MATRIX_OUT_PINS  \\\n    (0, Port_D, 4), \\\n    (1, Port_C, 6), \\\n    (2, Port_D, 7), \\\n    (3, Port_E, 6), \\\n    (4, Port_B, 4), \\\n    (5, Port_B, 5)\n```\n\n----------------------------------------\n\nTITLE: Keymap-Level LED Matrix Indicator Callback (C)\nDESCRIPTION: This keymap-level callback function is invoked after an animation frame is rendered but before it is flushed to the LEDs. It returns `true` to continue running the keyboard-level callback.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/led_matrix.md#_snippet_40\n\nLANGUAGE: C\nCODE:\n```\nbool led_matrix_indicators_user(void)\n```\n\n----------------------------------------\n\nTITLE: Process Autocorrect User Example\nDESCRIPTION: This snippet showcases the `process_autocorrect_user` function, which allows customization of incoming keycodes and handling of exceptions. This example demonstrates how to exclude custom keycodes from being processed by the autocorrect engine and how to reset the autocorrect buffer for specific keycodes.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/autocorrect.md#_snippet_4\n\nLANGUAGE: c\nCODE:\n```\nbool process_autocorrect_user(uint16_t *keycode, keyrecord_t *record, uint8_t *typo_buffer_size, uint8_t *mods) {\n    // See quantum_keycodes.h for reference on these matched ranges.\n    switch (*keycode) {\n        // Exclude these keycodes from processing.\n        case KC_LSFT:\n        case KC_RSFT:\n        case KC_CAPS:\n        case QK_TO ... QK_ONE_SHOT_LAYER_MAX:\n        case QK_LAYER_TAP_TOGGLE ... QK_LAYER_MOD_MAX:\n        case QK_ONE_SHOT_MOD ... QK_ONE_SHOT_MOD_MAX:\n            return false;\n\n        // Mask for base keycode from shifted keys.\n        case QK_LSFT ... QK_LSFT + 255:\n        case QK_RSFT ... QK_RSFT + 255:\n            if (*keycode >= QK_LSFT && *keycode <= (QK_LSFT + 255)) {\n                *mods |= MOD_LSFT;\n            } else {\n                *mods |= MOD_RSFT;\n            }\n            *keycode &= 0xFF; // Get the basic keycode.\n            return true;\n#ifndef NO_ACTION_TAPPING\n        // Exclude tap-hold keys when they are held down\n        // and mask for base keycode when they are tapped.\n        case QK_LAYER_TAP ... QK_LAYER_TAP_MAX:\n# ifdef NO_ACTION_LAYER\n            // Exclude Layer Tap, if layers are disabled\n            // but action tapping is still enabled.\n            return false;\n# endif\n        case QK_MOD_TAP ... QK_MOD_TAP_MAX:\n            // Exclude hold if mods other than Shift is not active\n            if (!record->tap.count) {\n                return false;\n            }\n            *keycode &= 0xFF;\n            break;\n#else\n        case QK_MOD_TAP ... QK_MOD_TAP_MAX:\n        case QK_LAYER_TAP ... QK_LAYER_TAP_MAX:\n            // Exclude if disabled\n            return false;\n#endif\n        // Exclude swap hands keys when they are held down\n        // and mask for base keycode when they are tapped.\n        case QK_SWAP_HANDS ... QK_SWAP_HANDS_MAX:\n#ifdef SWAP_HANDS_ENABLE\n            if (*keycode >= 0x56F0 || !record->tap.count) {\n                return false;\n            }\n            *keycode &= 0xFF;\n            break;\n#else\n            // Exclude if disabled\n            return false;\n#endif\n        // Handle custom keycodes\n        case QMKBEST:\n            return false;\n        case QMKLAYER:\n            *typo_buffer_size = 0;\n            return false;\n    }\n\n    // Disable autocorrect while a mod other than shift is active.\n    if ((*mods & ~MOD_MASK_SHIFT) != 0) {\n        *typo_buffer_size = 0;\n        return false;\n    }\n\n    return true;\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Digitizer State Directly in QMK\nDESCRIPTION: This snippet shows how to directly modify the digitizer state by accessing the `digitizer_state` struct and then using `digitizer_flush` to send the updated state to the host.  This allows for setting multiple parameters in a single report.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/digitizer.md#_snippet_2\n\nLANGUAGE: c\nCODE:\n```\ndigitizer_state.in_range = true;\ndigitizer_state.dirty = true;\ndigitizer_flush();\n```\n\n----------------------------------------\n\nTITLE: Running specific QMK tests by substring\nDESCRIPTION: This command executes unit tests whose names match a given substring.  The substring can contain colons for more specific matching.  This allows for running a subset of tests based on feature or test type.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/unit_testing.md#_snippet_2\n\nLANGUAGE: Makefile\nCODE:\n```\nmake test:matchingsubstring\n```\n\nLANGUAGE: Makefile\nCODE:\n```\nmake test:tap_hold_configurations\n```\n\nLANGUAGE: Makefile\nCODE:\n```\nmake test:retro_shift:tap_hold_configurations\n```\n\n----------------------------------------\n\nTITLE: Mapping LEDs for Single-Color Driver in keyboardname.c\nDESCRIPTION: This snippet shows how to map LEDs to the IS31FL3733 single-color driver in your `<keyboardname>.c` file. It defines a `g_is31fl3733_leds` array of type `is31fl3733_led_t` to specify the driver index and PWM register address for each LED.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/is31fl3733.md#_snippet_5\n\nLANGUAGE: c\nCODE:\n```\nconst is31fl3733_led_t PROGMEM g_is31fl3733_leds[IS31FL3733_LED_COUNT] = {\n/* Driver\n *   |  V */\n    {0, SW1_CS1},\n    // etc...\n};\n```\n\n----------------------------------------\n\nTITLE: Writing String to OLED (C)\nDESCRIPTION: This function writes a string to the OLED display at the current cursor position. The `invert` parameter controls whether the pixels are inverted. The cursor is advanced while writing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/oled_driver.md#_snippet_20\n\nLANGUAGE: c\nCODE:\n```\n// Writes a string to the buffer at current cursor position\n// Advances the cursor while writing, inverts the pixels if true\nvoid oled_write(const char *data, bool invert);\n```\n\n----------------------------------------\n\nTITLE: Defining RGB Light Value Step\nDESCRIPTION: Defines the units to step when increasing/decreasing value (brightness). Determines the granularity of brightness adjustments.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/config_options.md#_snippet_79\n\nLANGUAGE: C\nCODE:\n```\n#define RGBLIGHT_VAL_STEP 12\n```\n\n----------------------------------------\n\nTITLE: Setting Effect Speed in QMK (C)\nDESCRIPTION: This function sets the speed of the LED matrix effect.  The new speed, ranging from 0 to 255, is saved to EEPROM.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/led_matrix.md#_snippet_34\n\nLANGUAGE: C\nCODE:\n```\nvoid led_matrix_set_speed(uint8_t speed)\n```\n\n----------------------------------------\n\nTITLE: Enabling Encoders via ENCODER_ENABLE\nDESCRIPTION: This configuration enables encoder support using the ENCODER_ENABLE flag in the rules.mk file.  When enabled, the `encoder_update_user` function is used for handling encoder events. The index is zero-indexed, corresponding to the physical encoder.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/planck/rev7/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nENCODER_ENABLE = yes\n```\n\n----------------------------------------\n\nTITLE: Disabling Tap Dance in QMK config.h\nDESCRIPTION: This code snippet disables tap dance and other tapping features in QMK firmware, potentially reducing code size. This setting is configured in the `config.h` file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/config_options.md#_snippet_36\n\nLANGUAGE: c\nCODE:\n```\n#define NO_ACTION_TAPPING\n```\n\n----------------------------------------\n\nTITLE: Verifying Remote Repository Configuration\nDESCRIPTION: This Git command lists all configured remote repositories, including their URLs, allowing you to verify that the 'upstream' remote has been added correctly. The output shows both fetch and push URLs for each remote.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/newbs_git_using_your_master_branch.md#_snippet_1\n\nLANGUAGE: Git\nCODE:\n```\ngit remote -v\n```\n\n----------------------------------------\n\nTITLE: Enable PS/2 Mouse with Busywait Driver\nDESCRIPTION: This snippet enables PS/2 mouse support using the busywait driver. It's the simplest method but may lead to jerky movement.  It requires setting `PS2_MOUSE_ENABLE`, `PS2_ENABLE` and defining `PS2_DRIVER` in `rules.mk` and defining clock/data pins in `config.h`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/ps2_mouse.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nPS2_MOUSE_ENABLE = yes\nPS2_ENABLE = yes\nPS2_DRIVER = busywait\n```\n\n----------------------------------------\n\nTITLE: Post-Process Steno Keypresses in QMK (C)\nDESCRIPTION: This function is called after a key has been processed, but before a chord is sent. It provides hooks for functionalities such as displaying live steno chords. The `mode` parameter indicates the steno mode, `chord` contains the current chord data, and `n_pressed_keys` indicates the number of physical keys pressed. Use `record->event.pressed` and `n_pressed_keys` to determine chord completion.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/stenography.md#_snippet_7\n\nLANGUAGE: c\nCODE:\n```\nbool post_process_steno_user(uint16_t keycode, keyrecord_t *record, steno_mode_t mode, uint8_t chord[MAX_STROKE_SIZE], int8_t n_pressed_keys);\n```\n\n----------------------------------------\n\nTITLE: Setting MASTER_RIGHT in config.h - C\nDESCRIPTION: This line, placed in `config.h`, defines the `MASTER_RIGHT` macro, indicating that the right half of the split keyboard should be treated as the master side when the USB cable is plugged into it.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/xealous/readme.md#_snippet_4\n\nLANGUAGE: c\nCODE:\n```\n #define MASTER_RIGHT\n```\n\n----------------------------------------\n\nTITLE: Defining 75% ISO Keyboard Layout\nDESCRIPTION: This snippet visually defines a 75% ISO keyboard layout using ASCII art, providing a clear representation of the key arrangement. It aids in the configuration of keyboard layouts within QMK. It doesn't depend on explicit libraries, but assumes prior knowledge of standard ISO keyboard conventions.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/layouts/default/readme.md#_snippet_14\n\nLANGUAGE: text\nCODE:\n```\n┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┐\n│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │\n├───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┴───┼───┤\n│   │   │   │   │   │   │   │   │   │   │   │   │   │       │   │\n├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─────┼───┤\n│     │   │   │   │   │   │   │   │   │   │   │   │   │     │   │\n├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┐    ├───┤\n│      │   │   │   │   │   │   │   │   │   │   │   │   │    │   │\n├────┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴───┴┬───┼───┤\n│    │   │   │   │   │   │   │   │   │   │   │   │      │   │   │\n├────┼───┴┬──┴─┬─┴───┴───┴───┴───┴───┴──┬┴──┬┴──┬┴──┬───┼───┼───┤\n│    │    │    │                        │   │   │   │   │   │   │\n└────┴────┴────┴────────────────────────┴───┴───┴───┴───┴───┴───┘\n```\n\n----------------------------------------\n\nTITLE: Flashing the fatotesa keyboard firmware using make\nDESCRIPTION: This command builds and flashes the default keymap for the fatotesa keyboard to the connected device. It requires a properly set up QMK build environment and the necessary flashing tools installed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/fatotesa/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake fatotesa:default:flash\n```\n\n----------------------------------------\n\nTITLE: Installing Planck Firmware (rev6)\nDESCRIPTION: This command flashes the built firmware to a Planck keyboard, specifically for revision 6. It uses the dfu-util tool. A successful build with the 'make' command is a prerequisite.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/planck/readme.md#_snippet_2\n\nLANGUAGE: make\nCODE:\n```\nmake planck/rev6:default:dfu-util\n```\n\n----------------------------------------\n\nTITLE: Compile Dactyl ManuForm VIA Firmware\nDESCRIPTION: This command compiles the VIA-enabled firmware for the Dactyl ManuForm 4x6 variant. It allows for real-time keymap configuration using the VIA configurator. The command requires the QMK build environment to be set up correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/dactyl_manuform/readme.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nqmk compile -kb handwired/dactyl_manuform/4x6 -km via\n```\n\n----------------------------------------\n\nTITLE: Enabling Encoders via ENCODER_MAP_ENABLE\nDESCRIPTION: This configuration enables encoder mapping, using the ENCODER_MAP_ENABLE flag. Requires defining `const uint16_t PROGMEM encoder_map[][NUM_ENCODERS][NUM_DIRECTIONS]` for configuring keycodes. When enabled, `encoder_update_user` is not used.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/planck/rev7/readme.md#_snippet_2\n\nLANGUAGE: Makefile\nCODE:\n```\nENCODER_ENABLE = yes\nENCODER_MAP_ENABLE = yes\n```\n\n----------------------------------------\n\nTITLE: Defining TKL JIS Layout - QMK\nDESCRIPTION: Defines a TKL (Tenkeyless) JIS (Japanese Industrial Standard) layout with an F13 key. This layout is specific to the Japanese keyboard standard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/layouts/default/readme.md#_snippet_24\n\nLANGUAGE: plaintext\nCODE:\n```\n┌───┐┌───┬───┬───┬───┐┌───┬───┬───┬───┐┌───┬───┬───┬───┐┌───┐ ┌───┬───┬───┐\n│   ││   │   │   │   ││   │   │   │   ││   │   │   │   ││   │ │   │   │   │\n└───┘└───┴───┴───┴───┘└───┴───┴───┴───┘└───┴───┴───┴───┘└───┘ └───┴───┴───┘\n┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┐ ┌───┬───┬───┐\n│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │ │   │   │   │\n├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴───┤ ├───┼───┼───┤\n│     │   │   │   │   │   │   │   │   │   │   │   │   │     │ │   │   │   │\n├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┐    │ └───┴───┴───┘\n│      │   │   │   │   │   │   │   │   │   │   │   │   │    │\n├──────┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴────┤     ┌───┐\n│        │   │   │   │   │   │   │   │   │   │   │   │      │     │   │\n├────┬───┴┬──┴─┬─┴──┬┴───┴───┴───┴─┬─┴──┬┴───┼───┴┬──┴─┬────┤ ┌───┼───┼───┐\n│    │    │    │    │              │    │    │    │    │    │ │   │   │   │\n└────┴────┴────┴────┴──────────────┴────┴────┴────┴────┴────┘ └───┴───┴───┘\n```\n\n----------------------------------------\n\nTITLE: Matrix Diagram for FJLabs Midway60\nDESCRIPTION: This diagram shows the key layout of the FJLabs Midway60 keyboard and how each key is mapped within the key matrix. It helps understand the physical connection between the keys and the microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/fjlabs/midway60/matrix_diagram.md#_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n                                                    ┌───────┐\n                                       2u Backspace │0D     │\n                                                    └───────┘\n┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┐\n│00 │01 │02 │03 │04 │05 │06 │07 │08 │09 │0A │0B │0C │0D │2D │\n├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴───┤      ┌─────┐\n│10   │11 │12 │13 │14 │15 │16 │17 │18 │19 │1A │1B │1C │1D   │      │     │\n├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴─────┤   ┌──┴┐1D  │ ISO Enter\n│20    │21 │22 │23 │24 │25 │26 │27 │28 │29 │2A │2B │2C      │   │2C │    │\n├────┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴────┬───┤   └───┴────┘\n│30  │31 │32 │33 │34 │35 │36 │37 │38 │39 │3A │3B │3C    │3D │\n├────┼───┴┬──┴─┬─┴───┴───┴───┴───┴───┴──┬┴───┼───┴┬────┬┴───┤\n│40  │41  │42  │46                      │49  │4A  │4C  │4D  │\n└────┴────┴────┴────────────────────────┴────┴────┴────┴────┘\n┌────────┐                                       ┌──────────┐\n│30      │ 2.25u LShift             2.75u RShift │3C        │\n└────────┘                                       └──────────┘\n┌─────┬───┬─────┬───────────────────────────┬─────┬───┬─────┐\n│40   │41 │42   │46                         │4A   │4C │4D   │ Tsangan/WKL/HHKB\n└─────┴───┴─────┴───────────────────────────┴─────┴───┴─────┘\n```\n\n----------------------------------------\n\nTITLE: Layer Indicator on All Keys in C\nDESCRIPTION: This code snippet demonstrates a layer indicator on all keys using RGB matrix. It iterates through the LEDs and sets the color based on the highest active layer. Layer 2 is blue, layer 1 is yellow, and the default layer has no color change.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/rgb_matrix.md#_snippet_7\n\nLANGUAGE: c\nCODE:\n```\nbool rgb_matrix_indicators_advanced_user(uint8_t led_min, uint8_t led_max) {\n    for (uint8_t i = led_min; i < led_max; i++) {\n        switch(get_highest_layer(layer_state|default_layer_state)) {\n            case 2:\n                rgb_matrix_set_color(i, RGB_BLUE);\n                break;\n            case 1:\n                rgb_matrix_set_color(i, RGB_YELLOW);\n                break;\n            default:\n                break;\n        }\n    }\n    return false;\n}\n```\n\n----------------------------------------\n\nTITLE: Including IS31FL3743A driver in rules.mk (Make)\nDESCRIPTION: This snippet demonstrates how to include the IS31FL3743A driver source files in your `rules.mk` file.  It specifies the necessary source files for both single-color and RGB LED configurations, as well as setting the `I2C_DRIVER_REQUIRED` flag.  Ensure that `$(DRIVER_PATH)` is correctly defined in your environment. The presence of `I2C_DRIVER_REQUIRED = yes` indicates the I2C driver is a dependency.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/is31fl3743a.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nCOMMON_VPATH += $(DRIVER_PATH)/led/issi\nSRC += is31fl3743a-mono.c # For single-color\nSRC += is31fl3743a.c # For RGB\nI2C_DRIVER_REQUIRED = yes\n```\n\n----------------------------------------\n\nTITLE: Apply Autocorrect with Display/Console - C\nDESCRIPTION: This example demonstrates how to detect and display autocorrection events in QMK. It writes \"Auto-corrected\" to the OLED display (if `OLED_ENABLE` is defined) and prints the typo and corrected words to the console (if `CONSOLE_ENABLE` is defined). It returns `true` to allow the internal QMK code to execute the autocorrection.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/autocorrect.md#_snippet_6\n\nLANGUAGE: c\nCODE:\n```\nbool apply_autocorrect(uint8_t backspaces, const char *str, char *typo, char *correct) {\n#ifdef OLED_ENABLE\n    oled_write_P(PSTR(\"Auto-corrected\"), false);\n#endif\n#ifdef CONSOLE_ENABLE\n    printf(\"'%s' was corrected to '%s'\\n\", typo, correct);\n#endif\n    return true;\n}\n```\n\n----------------------------------------\n\nTITLE: Xelus MechaMaker La+ Key Matrix Diagram\nDESCRIPTION: This diagram represents the key matrix of the Xelus MechaMaker La+ keyboard.  It shows the row and column connections for each key. The numbers represent the matrix position. The 2u Backspace key is also depicted.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/xelus/la_plus/matrix_diagram.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n                                                    ┌───────┐\n                                       2u Backspace │0D     │\n                                                    └───────┘\n┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┐\n│00 │01 │02 │03 │04 │05 │06 │07 │08 │09 │0A │0B │0C │0D │2D │0E │\n├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴───┼───┤\n│10   │11 │12 │13 │14 │15 │16 │17 │18 │19 │1A │1B │1C │1D   │1E │\n├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴─────┼───┤\n│20    │21 │22 │23 │24 │25 │26 │27 │28 │29 │2A │2B │2C      │2E │\n├──────┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴────┬───┼───┤\n│30      │31 │32 │33 │34 │35 │36 │37 │38 │39 │3A │3C    │3D │3E │\n├────┬───┴┬──┴─┬─┴───┴───┴───┴───┴───┴──┬┴───┴┬──┴──┬───┼───┼───┤\n│40  │41  │42  │48                      │49   │4A   │4C │4D │4E │\n└────┴────┴────┴────────────────────────┴─────┴─────┴───┴───┴───┘\n```\n\n----------------------------------------\n\nTITLE: Transferring Surface Contents to Display in C\nDESCRIPTION: This C code snippet demonstrates how to transfer the contents of a surface to a display using the `qp_surface_draw` function. It takes source and target display devices along with the coordinates and a flag indicating whether to copy the entire surface or only the dirty region.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/quantum_painter.md#_snippet_41\n\nLANGUAGE: c\nCODE:\n```\nbool qp_surface_draw(painter_device_t surface, painter_device_t display, uint16_t x, uint16_t y, bool entire_surface);\n```\n\n----------------------------------------\n\nTITLE: Example Keymap Definition - C\nDESCRIPTION: This C code defines the keymaps array for a keyboard, including multiple layers. It showcases the use of `LAYOUT_all` macro, keycodes (e.g., `KC_ESC`, `KC_F1`), layer modifiers (e.g., `MO(1)`), and special functions (e.g., `UG_TOGG`, `QK_BOOT`).\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/configurator_default_keymaps.md#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n#include QMK_KEYBOARD_H\n\nconst uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {\n\n  [0] = LAYOUT_all(\n    KC_ESC,           KC_F1,   KC_F2,   KC_F3,   KC_F4,   KC_F5,   KC_F6,   KC_F7,   KC_F8,   KC_F9,   KC_F10,  KC_F11,  KC_F12,              KC_PSCR, KC_SCRL, KC_PAUS,\n    KC_GRV,  KC_1,    KC_2,    KC_3,    KC_4,    KC_5,    KC_6,    KC_7,    KC_8,    KC_9,    KC_0,    KC_MINS, KC_EQL,  KC_BSPC, KC_BSPC,    KC_INS,  KC_HOME, KC_PGUP,\n    KC_TAB,  KC_Q,    KC_W,    KC_E,    KC_R,    KC_T,    KC_Y,    KC_U,    KC_I,    KC_O,    KC_P,    KC_LBRC, KC_RBRC, KC_BSLS,             KC_DEL,  KC_END,  KC_PGDN,\n    KC_CAPS, KC_A,    KC_S,    KC_D,    KC_F,    KC_G,    KC_H,    KC_J,    KC_K,    KC_L,    KC_SCLN, KC_QUOT, KC_NUHS, KC_ENT,\n    KC_LSFT, KC_NUBS, KC_Z,    KC_X,    KC_C,    KC_V,    KC_B,    KC_N,    KC_M,    KC_COMM, KC_DOT,  KC_SLSH, KC_RSFT, KC_TRNS,                      KC_UP,\n    KC_LCTL, KC_LGUI, KC_LALT,                            KC_SPC,                             KC_RALT, MO(1),   KC_RGUI, KC_RCTL,             KC_LEFT, KC_DOWN, KC_RGHT),\n\n  [1] = LAYOUT_all(\n    KC_TRNS,          KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, UG_TOGG, UG_NEXT, UG_HUED, UG_HUEU,          UG_SATD, UG_SATU, UG_VALD, UG_VALU,    BL_TOGG, BL_DOWN, BL_UP, \n    KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS,    KC_TRNS, KC_TRNS, KC_VOLU,\n    KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, QK_BOOT, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS,             KC_MPLY, KC_MNXT, KC_VOLD,\n    KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS,\n    KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS,                      KC_TRNS,\n    KC_TRNS, KC_TRNS, KC_TRNS,                            KC_TRNS,                            KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS,             KC_TRNS, KC_TRNS, KC_TRNS),\n\n};\n\n```\n\n----------------------------------------\n\nTITLE: Set Pixel Color with `qp_setpixel` in C\nDESCRIPTION: The `qp_setpixel` function sets the color of a specific pixel on the display. It takes the `painter_device_t`, the x and y coordinates of the pixel, and the hue, saturation, and value (HSV) color components as parameters.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/quantum_painter.md#_snippet_50\n\nLANGUAGE: c\nCODE:\n```\nbool qp_setpixel(painter_device_t device, uint16_t x, uint16_t y, uint8_t hue, uint8_t sat, uint8_t val);\n```\n\n----------------------------------------\n\nTITLE: Flashing Quefrency Rev. 4 Firmware with QMK\nDESCRIPTION: This command flashes the compiled firmware to the Quefrency Rev. 4 keyboard. It requires the QMK build environment and assumes the board is connected and in flashing mode.  The board definition specifies the keebio/quefrency/rev4 and the target is flash.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keebio/quefrency/rev4/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake keebio/quefrency/rev4:default:flash\n```\n\n----------------------------------------\n\nTITLE: Rendering QMK Logo on ST7565 LCD in C\nDESCRIPTION: This code demonstrates how to render the QMK logo on the ST7565 LCD. It defines a `qmk_logo` array containing special character codes that correspond to the logo's graphical representation in the default font. The `st7565_write_P` function is then used to write these character codes to the display, rendering the logo.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/st7565.md#_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nstatic void render_logo(void) {\n    static const char PROGMEM qmk_logo[] = {\n        0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E, 0x8F, 0x90, 0x91, 0x92, 0x93, 0x94,\n        0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xAF, 0xB0, 0xB1, 0xB2, 0xB3, 0xB4,\n        0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0x00\n    };\n\n    st7565_write_P(qmk_logo, false);\n}\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for Atmel Controller (Pro Micro)\nDESCRIPTION: This command builds the QMK firmware for the Sweet 16 v2 macropad using a Pro Micro controller. It requires a properly configured QMK build environment. The resulting firmware can then be flashed to the Pro Micro.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/1upkeyboards/sweet16v2/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake 1upkeyboards/sweet16v2/promicro:default\n```\n\n----------------------------------------\n\nTITLE: Adjusting De-Ghosting Resistor Values in config.h\nDESCRIPTION: Configures the pull-up and pull-down resistor values for the SWx and CSx pins to eliminate ghosting.  These definitions are placed in the `config.h` file. The example sets both the SW pull-up and CS pull-down resistors to 32k ohms.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/is31fl3741.md#_snippet_2\n\nLANGUAGE: c\nCODE:\n```\n#define IS31FL3741_SW_PULLUP IS31FL3741_PUR_32K_OHM\n#define IS31FL3741_CS_PULLDOWN IS31FL3741_PDR_32K_OHM\n```\n\n----------------------------------------\n\nTITLE: Matrix Diagram for Xelus Trinity XT TKL\nDESCRIPTION: This diagram visually represents the matrix layout of the Xelus Trinity XT TKL keyboard. It shows the row and column positions for each key, facilitating the configuration of the keyboard matrix in the firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/xelus/trinityxttkl/matrix_diagram.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n┌───┬───┐┌───┐   ┌───┬───┬───┬───┐ ┌───┬───┬───┬───┐ ┌───┬───┬───┬───┐┌───┬───┬───┐\n│00 │01 ││02 │   │04 │05 │06 │07 │ │08 │09 │0A │0B │ │0C │0D │0E │0F ││0G │0H │0I │\n└───┴───┘└───┘   └───┴───┴───┴───┘ └───┴───┴───┴───┘ └───┴───┴───┴───┘└───┴───┴───┘\n┌───┬───┐┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┐┌───┬───┬───┐    ┌───────┐\n│10 │11 ││12 │13 │14 │15 │16 │17 │18 │19 │1A │1B │1C │1D │1E │1F │3F ││1G │1H │1I │    │1F     │ 2u Backspace\n├───┼───┤├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴───┤├───┼───┼───┤    └───────┘\n│20 │21 ││22   │23 │24 │25 │26 │27 │28 │29 │2A │2B │2C │2D │2E │2F   ││2G │2H │2I │\n├───┼───┤├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴─────┤└───┴───┴───┘\n│30 │31 ││32    │33 │34 │35 │36 │37 │38 │39 │3A │3B │3C │3D │3E      │\n├───┼───┤├──────┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴────┬───┤    ┌───┐        ┌──────────┐\n│40 │41 ││42      │43 │44 │45 │46 │47 │48 │49 │4A │4B │4C │4E    │4F │    │4H │        │4E        │ 2.75u RShift\n├───┼───┤├─────┬──┴┬──┴──┬┴───┴───┴──┬┴──┬┴───┴───┴──┬┴───┴┬───┬─┴───┤┌───┼───┼───┐    └──────────┘\n│50 │51 ││52   │   │53   │54         │55 │5B         │5C   │   │5F   ││5G │5H │5I │\n└───┴───┘└─────┘   └─────┴───────────┴───┴───────────┴─────┘   └─────┘└───┴───┴───┘\n         ┌─────┬───┬─────┬───────────────────────────┬─────┬───┬─────┐\n         │52   │   │53   │55                         │5C   │   │5F   │ WKL\n         └─────┘   └─────┴───────────────────────────┴─────┘   └─────┘\n```\n\n----------------------------------------\n\nTITLE: Matrix Diagram for GrayStudio Aero 75 Hotswap\nDESCRIPTION: This code represents the matrix layout for the GrayStudio Aero 75 Hotswap keyboard. Each cell in the diagram shows the row and column number associated with a specific key.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/gray_studio/aero75/matrix_diagram.md#_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n┌───┐ ┌───┬───┬───┬───┐┌───┬───┬───┬───┐┌───┬───┬───┬───┐   ┌───┐\n│00 │ │01 │02 │03 │04 ││05 │06 │07 │08 ││09 │0A │0B │0D │   │0F │\n└───┘ └───┴───┴───┴───┘└───┴───┴───┴───┘└───┴───┴───┴───┘   └───┘\n┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───────┬───┐\n│10 │11 │12 │13 │14 │15 │16 │17 │18 │19 │1A │1B │1C │1D     │1F │\n├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─────┼───┤\n│20   │22 │23 │24 │25 │26 │27 │28 │29 │2A │2B │2C │2D │2E   │2F │\n├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴─────┼───┤\n│30    │32 │33 │34 │35 │36 │37 │38 │39 │3A │3B │3C │3D      │3F │\n├──────┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴────┬───┼───┤\n│40      │42 │43 │44 │45 │46 │47 │48 │49 │4A │4B │4D    │4E │4F │\n├────┬───┴┬──┴─┬─┴───┴───┴───┴───┴───┴──┬┴───┼───┴┬─┬───┼───┼───┤\n│50  │51  │53  │57                      │5A  │5B  │ │5D │5E │5F │\n└────┴────┴────┴────────────────────────┴────┴────┘ └───┴───┴───┘\n```\n\n----------------------------------------\n\nTITLE: Setting Serial Driver to USART (Full-Duplex) in rules.mk (Make)\nDESCRIPTION: This snippet configures the QMK firmware to use the USART serial driver for split keyboard communication, setting up for full-duplex, if RP2040 + PIO is not used. It involves setting the SERIAL_DRIVER variable in the rules.mk file. This driver offloads the communication to a USART hardware device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/serial.md#_snippet_7\n\nLANGUAGE: make\nCODE:\n```\nSERIAL_DRIVER = usart\n```\n\n----------------------------------------\n\nTITLE: Setting Persistent Default Layer with PDF\nDESCRIPTION: This function sets a persistent default layer. Unlike `DF()`, this switch lasts through power loss. It can be used to permanently switch to a different layout, such as from QWERTY to Dvorak, until changed again.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/feature_layers.md#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nPDF(layer)\n```\n\n----------------------------------------\n\nTITLE: Rendering Boot Message on OLED (C)\nDESCRIPTION: This snippet demonstrates how to render a message on the OLED display when booting into bootloader mode or rebooting.  The `oled_render_boot` function clears the display and writes a message indicating either bootloader mode or a reboot. The `oled_render_dirty(true)` function forces an immediate update of the display. The `shutdown_user` function calls `oled_render_boot` when shutting down or entering bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/oled_driver.md#_snippet_7\n\nLANGUAGE: C\nCODE:\n```\nvoid oled_render_boot(bool bootloader) {\n    oled_clear();\n    for (int i = 0; i < 16; i++) {\n        oled_set_cursor(0, i);\n        if (bootloader) {\n            oled_write_P(PSTR(\"Awaiting New Firmware \"), false);\n        } else {\n            oled_write_P(PSTR(\"Rebooting \"), false);\n        }\n    }\n\n    oled_render_dirty(true);\n}\n\nbool shutdown_user(bool jump_to_bootloader) {\n    oled_render_boot(jump_to_bootloader);\n}\n```\n\n----------------------------------------\n\nTITLE: Inverting Display\nDESCRIPTION: Inverts the display colors. If `invert` is true, the display is inverted; if `invert` is false, the display is returned to its normal state. Returns `true` if the screen was or is inverted.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/st7565.md#_snippet_31\n\nLANGUAGE: C\nCODE:\n```\n// Inverts the display\n// Returns true if the screen was or is inverted\nbool st7565_invert(bool invert);\n```\n\n----------------------------------------\n\nTITLE: Building Keychron V6 Firmware\nDESCRIPTION: This command builds the default firmware for the Keychron V6 keyboard.  It specifies the keyboard, keymap (default), and microcontroller (stm32l432). The user must have a configured build environment to use this command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keychron/v6/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake keychron/v6/v6_ansi_stm32l432:default\n```\n\n----------------------------------------\n\nTITLE: Setting PWM Frequency in config.h (C)\nDESCRIPTION: This snippet shows how to define the PWM frequency for the IS31FL3729 driver in your `config.h` file. This allows you to adjust the frequency at which the LEDs are pulsed, affecting their perceived brightness and smoothness.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/is31fl3729.md#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n#define IS31FL3729_PWM_FREQUENCY IS31FL3729_PWM_FREQUENCY_32K_HZ\n```\n\n----------------------------------------\n\nTITLE: Keyboard Specific One Shot Callbacks in QMK\nDESCRIPTION: This snippet shows the signatures for the keyboard-specific one-shot callbacks in QMK.  These callbacks are intended for keyboard-level customizations, and the `_user` variant should be called to allow for further user-level customization. These functions allow for reacting to changes in one-shot locked modifiers, one-shot modifiers and one-shot layers at the keyboard level.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/one_shot_keys.md#_snippet_4\n\nLANGUAGE: c\nCODE:\n```\nvoid oneshot_locked_mods_changed_kb(uint8_t mods);\nvoid oneshot_mods_changed_kb(uint8_t mods);\nvoid oneshot_layer_changed_kb(uint8_t layer);\n```\n\n----------------------------------------\n\nTITLE: Flashing TechnicPad Firmware\nDESCRIPTION: This command flashes the compiled firmware to the TechnicPad keyboard. It requires a properly configured QMK build environment and a connected keyboard in flashing mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/technicpad/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake handwired/technicpad:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware for RF R1 8-9Xu with QMK\nDESCRIPTION: This command builds and flashes the QMK firmware for the RF R1 8-9Xu keyboard with the default keymap. It requires a properly configured QMK build environment and a connected keyboard in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cipulot/rf_r1_8_9xu/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake cipulot/rf_r1_8_9xu:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing BM65RGB Firmware with Make\nDESCRIPTION: This command flashes the built firmware to the BM65RGB keyboard.  It builds and flashes the keyboard firmware using the make command with the flash target. The keyboard needs to be in a state where it is able to receive the flashed firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kprepublic/bm65hsrgb/rev1/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake kprepublic/bm65rgb/rev1:default:flash\n```\n\n----------------------------------------\n\nTITLE: Defining External Pullup in config.h (C)\nDESCRIPTION: This snippet shows how to define an external pull-up resistor for the WS2812 data pin in the `config.h` file.  Defining `WS2812_EXTERNAL_PULLUP` configures the GPIO pin for open-drain mode, which is necessary when the logic level voltage is lower than the power supply voltage.  A pull-up resistor is then required between the DI pin and VCC.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/ws2812.md#_snippet_10\n\nLANGUAGE: C\nCODE:\n```\n#define WS2812_EXTERNAL_PULLUP\n```\n\n----------------------------------------\n\nTITLE: Defining a custom character on the LCD (C)\nDESCRIPTION: This snippet shows how to define a custom character (QMK Psi) and display it along with the text \"QMK Firmware\" on the LCD. It uses the `hd44780_define_char_P` function to define the custom character from PROGMEM, and the `hd44780_puts_P` function to print the custom character and text to the display.  The `psi` array holds the byte representation of the custom character.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/hd44780.md#_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nconst uint8_t PROGMEM psi[8] = { 0x15, 0x15, 0x15, 0x0E, 0x04, 0x04, 0x04, 0x00 };\n\nvoid keyboard_post_init_user(void) {\n    hd44780_init(false, false);\n    hd44780_define_char_P(0, psi);\n    // Cursor is incremented while defining characters so must be reset\n    hd44780_home();\n    // 0x08 to avoid null terminator\n    hd44780_puts_P(PSTR(\"\\x08 QMK Firmware\"));\n}\n```\n\n----------------------------------------\n\nTITLE: Encoder Callback Update - After Change - C\nDESCRIPTION: This code snippet shows the updated encoder callback function definition in QMK Firmware.  The `encoder_update_kb` function's return type has been changed to `bool`, and it now returns the result of `encoder_update_user`. The `encoder_update_user` function also now returns a boolean value, indicating whether the keyboard level code should run or be overridden. It is important to return `true` to allow the keyboard level code to run and `false` to override it.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/ChangeLog/20210529.md#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nbool encoder_update_kb(uint8_t index, bool clockwise) {\n    return encoder_update_user(index, clockwise);\n}\n\nbool encoder_update_user(uint8_t index, bool clockwise) {\n    if (index == 0) { /* First encoder */\n        if (clockwise) {\n            tap_code(KC_PGDN);\n        } else {\n            tap_code(KC_PGUP);\n        }\n    } else if (index == 1) { /* Second encoder */\n        if (clockwise) {\n            tap_code(KC_DOWN);\n        } else {\n            tap_code(KC_UP);\n        }\n    }\n    return true; \n    // If you return true, this will allow the keyboard level code to run, as well. \n    //Returning false will override the keyboard level code. Depending on how the keyboard level function is set up.\n}\n```\n\n----------------------------------------\n\nTITLE: Flashing Z40 keyboard firmware with default keymap\nDESCRIPTION: This command builds and flashes the firmware onto the Quarkeys Z40 keyboard using the default keymap.  It requires a properly configured build environment and a connected keyboard in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/quarkeys/z40/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake quarkeys/z40:default:flash\n```\n\n----------------------------------------\n\nTITLE: Stop Animation Function (C)\nDESCRIPTION: This snippet defines the `qp_stop_animation` function, used to stop a previously started animation using its `deferred_token`. This requires a valid `deferred_token` obtained from `qp_animate` or `qp_animate_recolor`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/quantum_painter.md#_snippet_69\n\nLANGUAGE: c\nCODE:\n```\nvoid qp_stop_animation(deferred_token anim_token);\n```\n\n----------------------------------------\n\nTITLE: Playing a Custom Song in a Loop\nDESCRIPTION: Shows how to play a custom song in a loop using the `PLAY_LOOP` macro.  The defined song `my_song` will be played repeatedly when this code is executed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/audio.md#_snippet_15\n\nLANGUAGE: c\nCODE:\n```\nPLAY_LOOP(my_song);\n```\n\n----------------------------------------\n\nTITLE: Flashing TONE QMK Firmware\nDESCRIPTION: This command builds and flashes the default firmware for the TONE keyboard. It requires the QMK build environment to be set up. The command compiles the firmware and then attempts to flash it onto the connected TONE keyboard using the appropriate flashing tool.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/peranekofactory/tone/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake peranekofactory/tone:default:flash\n```\n\n----------------------------------------\n\nTITLE: Enabling RGB Underglow and Compiling QMK Firmware (Shell)\nDESCRIPTION: This code snippet shows how to enable RGB underglow in a QMK keymap by adding `RGBLIGHT_ENABLE = yes` to the `rules.mk` file. It also demonstrates the command to compile the firmware after enabling the feature.  The `make` command builds the firmware for the specified keyboard and keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kc60/mod_rgb_underglow.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nRGBLIGHT_ENABLE = yes\n```\n\nLANGUAGE: Shell\nCODE:\n```\nmake kc60:<keymap>\n```\n\n----------------------------------------\n\nTITLE: Converting Keymap JSON to C\nDESCRIPTION: This command converts the `keymap.json` file to a `keymap.c` file using the `qmk json2c` utility.  The `-o` option specifies the output file name.  This allows for custom C code to be added for functionality not supported by the JSON format, such as custom OLED or encoder behavior.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/splitkb/aurora/corne/keymaps/default/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nqmk json2c -o keymap.c keymap.json\n```\n\n----------------------------------------\n\nTITLE: Setting the custom driver in rules.mk\nDESCRIPTION: This snippet showcases how to specify a custom driver for the pointing device in the `rules.mk` file. This allows users to implement their own driver logic when the existing drivers don't meet their requirements.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/pointing_device.md#_snippet_15\n\nLANGUAGE: Make\nCODE:\n```\nPOINTING_DEVICE_DRIVER = custom\n```\n\n----------------------------------------\n\nTITLE: Compiling Skeletyl Firmware\nDESCRIPTION: This command compiles the QMK firmware for the Skeletyl keyboard. It requires specifying the keyboard, version, shield (elitec, splinky, stemcell), and keymap. Replace {VERSION} and {KEYMAP} with appropriate values. Use 'default' or 'via' for the keymap. Consult the table for specific compile commands for each shield version.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/bastardkb/skeletyl/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nqmk compile -kb bastardkb/skeletyl/{VERSION}/elitec -km {KEYMAP}\n```\n\n----------------------------------------\n\nTITLE: Building Firmware with Specific Keymap\nDESCRIPTION: This snippet demonstrates how to build the firmware with a specific keymap.  Replace `[default|jack|<name>]` with the desired keymap name. The specified keymap file (e.g., `<name>.c`) should reside in the `keymaps` folder.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/dichotomy/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ make [default|jack|<name>]\n```\n\n----------------------------------------\n\nTITLE: Configure Scaling Register for LED (RGB) - C\nDESCRIPTION: The `is31fl3743a_set_scaling_register` function configures the scaling registers for a single LED within an RGB setup. It accepts an LED index along with red, green, and blue scaling values. Changes take effect after calling `is31fl3743a_update_scaling_registers()`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/is31fl3743a.md#_snippet_8\n\nLANGUAGE: C\nCODE:\n```\nvoid is31fl3743a_set_scaling_register(uint8_t index, uint8_t red, uint8_t green, uint8_t blue)\n```\n\n----------------------------------------\n\nTITLE: Setting the PMW3320 driver in rules.mk\nDESCRIPTION: This snippet details how to set the PMW3320 sensor as the pointing device driver in the `rules.mk` file. This tells the build system to include the necessary driver components for the PMW3320 sensor.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/pointing_device.md#_snippet_11\n\nLANGUAGE: Make\nCODE:\n```\nPOINTING_DEVICE_DRIVER = pmw3320\n```\n\n----------------------------------------\n\nTITLE: Setting PWM Frequency (C)\nDESCRIPTION: This code snippet shows how to define the PWM frequency for the IS31FL3736B LED driver in the `config.h` file. This allows customization of the LED refresh rate. Available frequencies are defined as `IS31FL3736_PWM_FREQUENCY_*_HZ` macros.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/is31fl3736.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n#define IS31FL3736_PWM_FREQUENCY IS31FL3736_PWM_FREQUENCY_8K4_HZ\n```\n\n----------------------------------------\n\nTITLE: Flashing Claw44 Firmware with QMK\nDESCRIPTION: This command builds and flashes the default firmware for the Claw44 keyboard using the QMK build environment.  It requires a properly configured QMK build environment and a connected keyboard in a flashable state. This command combines the build and flash steps.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/dailycraft/claw44/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake dailycraft/claw44:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Planck Firmware with QMK Make\nDESCRIPTION: This snippet shows how to build the Planck keyboard firmware using the QMK `make` command. It assumes that the QMK build environment is already set up. The command builds the `default` keymap for the `rev5` version of the Planck keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/planck/rev5/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake planck/rev5:default\n```\n\n----------------------------------------\n\nTITLE: Pearl Boards Atlas Keyboard Matrix Diagram\nDESCRIPTION: This is a visual representation of the keyboard matrix for the Pearl Boards Atlas.  It maps the physical keys to their row and column positions within the matrix.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/pearlboards/atlas/matrix_diagram.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n              ┌───┐\n              │42 │ Rotary Encoder\n┌───┬───┬───┬─┴─┬─┴─┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┐    ┌───────┐\n│00 │01 │02 │03 │04 │05 │06 │07 │08 │09 │0A │0B │0C │0D │0E │0F │    │0E     │ 2u Backspace\n├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴───┼───┤    └─┬─────┤\n│10   │11 │12 │13 │14 │15 │16 │17 │18 │19 │1A │1B │1C │1D   │1F │      │     │\n├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴─────┼───┤   ┌──┴┐2D  │ ISO Enter\n│20    │21 │22 │23 │24 │25 │26 │27 │28 │29 │2A │2B │2D      │2F │   │2C │    │\n├────┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴────┬───┼───┤   └───┴────┘\n│30  │31 │32 │33 │34 │35 │36 │37 │38 │39 │3A │3B │3C    │3D │3F │\n├────┴┬──┼───┴─┬─┴───┴───┴───┴───┴───┴───┴─┬─┴───┼──┬───┼───┼───┤\n│40   │  │41   │47                         │4B   │  │4C │4D │4F │\n└─────┘  └─────┴───────────────────────────┴─────┘  └───┴───┴───┘\n┌────────┐\n│30      │ 2.25u LShift\n└────────┘\n```\n\n----------------------------------------\n\nTITLE: Defining Encoder Modes and Triggering Actions in C\nDESCRIPTION: This C code defines an enum for different encoder modes (DEF_DPI, SNP_DPI, VOL, SEL) and a function `spleeb_encoder_mode_trigger` that is triggered when the encoder mode changes. The function takes the mode and direction (clockwise) as input, and performs actions based on the selected mode, such as cycling pointer DPI or adjusting volume.  It utilizes QMK functions like `tap_code` and `get_mods`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/spleeb/readme.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nenum spleeb_enc_mode {\n    DEF_DPI,\n    SNP_DPI,\n    VOL,\n    SEL,\n};\n\nvoid spleeb_encoder_mode_trigger(uint8_t mode, bool clockwise) {\n    dprintf(\"spleeb_encoder_mode_trigger m: %u, c: %u\\n\", mode, clockwise);\n    switch (mode) {\n        case DEF_DPI:\n            spleeb_cycle_pointer_default_dpi(clockwise);\n            break;\n        case SNP_DPI:\n            spleeb_cycle_pointer_sniping_dpi(clockwise);\n            break;\n        case VOL:\n            tap_code(clockwise ? KC_VOLU : KC_VOLD);\n            break;\n        case SEL:\n            bool     is_shift = get_mods() & MOD_MASK_SHIFT;\n            uint16_t dir      = clockwise ? KC_RIGHT : KC_LEFT;\n            if (is_shift) {\n                tap_code(dir);\n            } else {\n                tap_code16(LSFT(LCTL(dir)));\n            }\n\n        default:\n            break;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Cycling through Layers with a Custom Keycode - C\nDESCRIPTION: This code snippet demonstrates how to implement a custom keycode to cycle through a range of layers in QMK Firmware. It defines a new keycode `KC_CYCLE_LAYERS` and implements the logic to cycle through layers when the keycode is pressed. It also includes logic to handle layer boundaries, ensuring that cycling wraps around to the starting layer.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/feature_layers.md#_snippet_12\n\nLANGUAGE: c\nCODE:\n```\n// Define the keycode, `QK_USER` avoids collisions with existing keycodes\nenum keycodes {\n  KC_CYCLE_LAYERS = QK_USER,\n};\n\n// 1st layer on the cycle\n#define LAYER_CYCLE_START 0\n// Last layer on the cycle\n#define LAYER_CYCLE_END   4\n\n// Add the behaviour of this new keycode\nbool process_record_user(uint16_t keycode, keyrecord_t *record) {\n  switch (keycode) {\n    case KC_CYCLE_LAYERS:\n      // Our logic will happen on presses, nothing is done on releases\n      if (!record->event.pressed) { \n        // We've already handled the keycode (doing nothing), let QMK know so no further code is run unnecessarily\n        return false;\n      }\n\n      uint8_t current_layer = get_highest_layer(layer_state);\n\n      // Check if we are within the range, if not quit\n      if (current_layer > LAYER_CYCLE_END || current_layer < LAYER_CYCLE_START) {\n        return false;\n      }\n\n      uint8_t next_layer = current_layer + 1;\n      if (next_layer > LAYER_CYCLE_END) {\n          next_layer = LAYER_CYCLE_START;\n      }\n      layer_move(next_layer);\n      return false;\n\n    // Process other keycodes normally\n    default:\n      return true;\n  }\n}\n\n// Place `KC_CYCLE_LAYERS` as a keycode in your keymap\n```\n\n----------------------------------------\n\nTITLE: Flashing np12 Keypad Firmware\nDESCRIPTION: This command flashes the default firmware onto the np12 keypad. It requires a properly configured QMK build environment and a connected keypad in a flashable state. It programs the compiled firmware onto the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/np12/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake np12:default:flash\n```\n\n----------------------------------------\n\nTITLE: Configuring multiple PMW33XX sensors\nDESCRIPTION: This snippet demonstrates how to initialize and read data from multiple PMW33XX sensors connected to a keyboard. It involves setting the CS pins in `config.h`, initializing the sensors in `pointing_device_init_kb`, and merging the reports from each sensor in `pointing_device_task_kb`. The code constrains the movement delta to the range of -127 to 127 for HID compliance.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/pointing_device.md#_snippet_14\n\nLANGUAGE: C\nCODE:\n```\n// in config.h:\n#define PMW33XX_CS_PINS { B5, B6 }\n// in keyboard.c:\n#ifdef POINTING_DEVICE_ENABLE\nvoid pointing_device_init_kb(void) {\n    pmw33xx_init(1);         // index 1 is the second device.\n    pmw33xx_set_cpi(0, 800); // applies to first sensor\n    pmw33xx_set_cpi(1, 800); // applies to second sensor\n    pointing_device_init_user();\n}\n\n// Contains report from sensor #0 already, need to merge in from sensor #1\nreport_mouse_t pointing_device_task_kb(report_mouse_t mouse_report) {\n    pmw33xx_report_t report = pmw33xx_read_burst(1);\n    if (!report.motion.b.is_lifted && report.motion.b.is_motion) {\n// From quantum/pointing_device_drivers.c\n#define constrain_hid(amt) ((amt) < -127 ? -127 : ((amt) > 127 ? 127 : (amt)))\n        mouse_report.x = constrain_hid(mouse_report.x + report.delta_x);\n        mouse_report.y = constrain_hid(mouse_report.y + report.delta_y);\n    }\n    return pointing_device_task_user(mouse_report);\n}\n#endif\n```\n\n----------------------------------------\n\nTITLE: Defining Macros in JSON Keymap\nDESCRIPTION: This snippet demonstrates how to define macros within a `keymap.json` file for use with QMK Configurator or `qmk compile`. The `macros` list contains arrays representing individual macros, composed of strings (for direct typing) and objects (for actions like key presses, releases, delays, and beeps).  The macros are then assigned to keys in the `layers` section.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/feature_macros.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"keyboard\": \"handwired/my_macropad\",\n    \"keymap\": \"my_keymap\",\n    \"macros\": [\n        [\n            {\"action\":\"down\", \"keycodes\": [\"LSFT\"]},\n            \"hello world1\",\n            {\"action\": \"up\",\"keycodes\": [\"LSFT\"]}\n        ],\n        [\n            {\"action\":\"tap\", \"keycodes\": [\"LCTL\", \"LALT\", \"DEL\"]}\n        ],\n        [\n            \"ding!\",\n            {\"action\":\"beep\"}\n        ],\n        [\n            {\"action\":\"tap\", \"keycodes\": [\"F1\"]},\n            {\"action\":\"delay\", \"duration\": 1000},\n            {\"action\":\"tap\", \"keycodes\": [\"PGDN\"]}\n        ]\n    ],\n    \"layout\": \"LAYOUT_all\",\n    \"layers\": [\n        [\"QK_MACRO_0\", \"QK_MACRO_1\", \"QK_MACRO_2\", \"QK_MACRO_3\"]\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Keyboard Matrix Diagram\nDESCRIPTION: This is a visual representation of the key matrix for the Basic IO Instruments G60BLE keyboard. It shows the arrangement of keys and their corresponding matrix coordinates.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/bioi/g60ble/matrix_diagram.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┐          ┌───────┐\n│00 │01 │02 │03 │04 │05 │06 │07 │08 │09 │0A │0B │0C │0D │49 │          │0D     │ 2u Backspace\n├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴───┤          └─┬─────┤\n│10   │11 │12 │13 │14 │15 │16 │17 │18 │19 │1A │1B │1C │1D   │            │     │\n├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴─────┤         ┌──┴┐2D  │ ISO Enter\n│20    │21 │22 │23 │24 │25 │26 │27 │28 │29 │2A │2B │2D      │         │2C │    │\n├────┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴────┬───┤   ┌─────┴┬──┴┬───┤\n│30  │31 │32 │33 │34 │35 │36 │37 │38 │39 │3A │3B │3D    │3C │   │3D    │47 │3C │ 1.75u/1u/1u RShift\n├────┼───┴┬──┴─┬─┴───┴───┴───┴───┴───┴──┬┴──┬┴──┬┴──┬───┼───┤   └──────┴───┴───┘\n│40  │41  │42  │45                      │4A │4B │48 │4C │4D │\n└────┴────┴────┴────────────────────────┴───┴───┴───┴───┴───┘\n┌────────┐                                    ┌─────────────┐\n│30      │ 2.25u LShift                       │3D           │ 2.75u RShift\n└────────┘                                    └─────────────┘\n┌────┬────┬────┬────────────────────────┬────┬────┬────┬────┐\n│40  │41  │42  │45                      │4A  │4B  │4C  │4D  │ Standard\n└────┴────┴────┴────────────────────────┴────┴────┴────┴────┘\n┌─────┬───┬─────┬───────────────────────────┬─────┬───┬─────┐\n│40   │41 │42   │45                         │4B   │4C │4D   │ Tsangan/WKL/HHKB\n└─────┴───┴─────┴───────────────────────────┴─────┴───┴─────┘\n```\n\n----------------------------------------\n\nTITLE: Update Tri-Layer Logic in QMK - C\nDESCRIPTION: This code demonstrates how to use the `update_tri_layer` function in QMK to dynamically enable a layer based on the state of two other layers. It is commonly used within the `process_record_user` function to toggle the ADJUST layer based on the state of the LOWER and RAISE layers. The function takes three layer identifiers as input (x, y, z) and turns on layer `z` if layers `x` and `y` are both active, otherwise turns off layer `z`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/ref_functions.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nbool process_record_user(uint16_t keycode, keyrecord_t *record) {\n  switch (keycode) {\n    case LOWER:\n      if (record->event.pressed) {\n        layer_on(_LOWER);\n        update_tri_layer(_LOWER, _RAISE, _ADJUST);\n      } else {\n        layer_off(_LOWER);\n        update_tri_layer(_LOWER, _RAISE, _ADJUST);\n      }\n      return false;\n    case RAISE:\n      if (record->event.pressed) {\n        layer_on(_RAISE);\n        update_tri_layer(_LOWER, _RAISE, _ADJUST);\n      } else {\n        layer_off(_RAISE);\n        update_tri_layer(_LOWER, _RAISE, _ADJUST);\n      }\n      return false;\n    }\n  return true;\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Azoteq IQS5XX Trackpad Driver (Make)\nDESCRIPTION: This code snippet shows how to enable the Azoteq IQS5XX trackpad driver for the Pointing Device feature in QMK Firmware by adding the `POINTING_DEVICE_DRIVER = azoteq_iqs5xx` line to the `rules.mk` file.  This requires setting the trackpad dimensions and I2C address in `config.h`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/pointing_device.md#_snippet_6\n\nLANGUAGE: make\nCODE:\n```\nPOINTING_DEVICE_DRIVER = azoteq_iqs5xx\n```\n\n----------------------------------------\n\nTITLE: Defining Direct Pins in QMK config.h\nDESCRIPTION: This code snippet defines pins mapped to rows and columns directly. Defines a matrix where each switch is connected to a separate pin and ground. This setting is configured in the `config.h` file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/config_options.md#_snippet_13\n\nLANGUAGE: c\nCODE:\n```\n#define DIRECT_PINS { { F1, F0, B0, C7 }, { F4, F5, F6, F7 } }\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware with Make\nDESCRIPTION: This command flashes the built firmware to the balloondogcaps/tr90pm keyboard using the `make` command. It requires a configured build environment and appropriate flashing tools.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/balloondogcaps/tr90pm/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake balloondogcaps/tr90pm:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Keyboard Firmware\nDESCRIPTION: This command is used to flash the compiled firmware onto the YMDK NP24 U4 RGB6 keyboard. It utilizes the QMK build environment and the appropriate flashing tools for the ATmega32U4 microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ymdk/np24/u4rgb6/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake ymdk/np24/u4rgb6:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing minim Keyboard Firmware\nDESCRIPTION: This command builds and flashes the default QMK firmware for the minim keyboard. It requires a properly configured QMK build environment and a connected keyboard in bootloader mode.  The command uses the dfu-programmer or dfu-util to flash the compiled firmware to the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/matthewdias/minim/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake matthewdias/minim:default:flash\n```\n\n----------------------------------------\n\nTITLE: Setting Encoder Pins for Pro Micro in config.h\nDESCRIPTION: These directives in `config.h` configure the encoder pins when using a Pro Micro controller with the Terrazzo keyboard. They set the encoder to use only the top or bottom position due to the Pro Micro's limited pin availability. C6 and D4 are defined as ENCODER_A_PINS and ENCODER_B_PINS respectively.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/terrazzo/readme.md#_snippet_3\n\nLANGUAGE: C\nCODE:\n```\n#define ENCODER_A_PINS { C6 }\n#define ENCODER_B_PINS { D4 }\n```\n\n----------------------------------------\n\nTITLE: Rotary Encoder Configuration in keymap.c\nDESCRIPTION: This C code snippet configures the behavior of the rotary encoder.  It defines the `encoder_update_user` function, which is called when the rotary encoder is turned. When rotated clockwise, it sends KC_PGDN. When rotated counter-clockwise, it sends KC_PGUP. The `index` parameter identifies which encoder is being used.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ckeys/thedora/readme.md#_snippet_2\n\nLANGUAGE: C\nCODE:\n```\nbool encoder_update_user(uint8_t index, bool clockwise) {\n  if (index == 0) { /* First encoder */\n    if (clockwise) {\n      tap_code(KC_PGDN); // What the rotary encoder repeatedly does when turned right.\n    } else {\n      tap_code(KC_PGUP); // What it does when turned to the left.\n    }\n  }\n    return true;\n}\n```\n\n----------------------------------------\n\nTITLE: Flashing rskeys100 Firmware with QMK\nDESCRIPTION: This command builds and flashes the default firmware for the rskeys100 keyboard to the connected device using the QMK build environment. It requires the QMK environment to be set up and the necessary flashing tools to be installed.  The `flash` target combines the build and flash steps into one command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ryanskidmore/rskeys100/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake ryanskidmore/rskeys100:default:flash\n```\n\n----------------------------------------\n\nTITLE: New OLED task function in keymap\nDESCRIPTION: This C code shows the new way keymap code overrides the OLED drawing. The `oled_task_user` function must now return a boolean value to signal whether or not the keyboard-level drawing code should still be executed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/ChangeLog/20211127.md#_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nbool oled_task_user(void) {\n    // keymap drawing code\n    return false;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Transient EEPROM Size in QMK\nDESCRIPTION: Defines the size of the transient EEPROM storage in QMK Firmware, configurable via `config.h`. This setting determines the amount of RAM allocated for emulating EEPROM, with data being lost upon power loss.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/eeprom.md#_snippet_3\n\nLANGUAGE: C\nCODE:\n```\n#define TRANSIENT_EEPROM_SIZE\n```\n\n----------------------------------------\n\nTITLE: Building CK60 Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the CK60 keyboard using the QMK build environment. It specifies the keyboard layout and configuration to compile.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/senselessclay/ck60/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake senselessclay/ck60:default\n```\n\n----------------------------------------\n\nTITLE: Defining Macros in keymap.json\nDESCRIPTION: This JSON snippet demonstrates how to define macros within a `keymap.json` file for use with QMK Configurator and `qmk compile`.  It shows the structure for defining multiple macros with actions such as key down, key up, tap, delay, and beep. This enables complex keyboard shortcuts and automated sequences.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/ChangeLog/20211127.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"keyboard\": \"handwired/my_macropad\",\n    \"keymap\": \"my_keymap\",\n    \"macros\": [\n        [ // first listed is QK_MACRO_0...\n            {\"action\":\"down\", \"keycodes\": [\"LSFT\"]},\n            \"hello world1\",\n            {\"action\": \"up\",\"keycodes\": [\"LSFT\"]}\n        ],\n        [ // ...then QK_MACRO_1...\n            {\"action\":\"tap\", \"keycodes\": [\"LCTL\", \"LALT\", \"DEL\"]}\n        ],\n        [ // ...then QK_MACRO_2...\n            \"ding!\",\n            {\"action\":\"beep\"}\n        ],\n        [ // ...and QK_MACRO_3.\n            {\"action\":\"tap\", \"keycodes\": [\"F1\"]},\n            {\"action\":\"delay\", \"duration\": \"1000\"},\n            {\"action\":\"tap\", \"keycodes\": [\"PGDN\"]}\n        ]\n    ],\n    \"layout\": \"LAYOUT_all\",\n    \"layers\": [\n        [\"QK_MACRO_0\", \"QK_MACRO_1\", \"QK_MACRO_2\", \"QK_MACRO_3\"]\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware via DFU\nDESCRIPTION: This command flashes the compiled QMK firmware to the Nebula12B keyboard using the DFU (Device Firmware Upgrade) protocol. Requires the keyboard to be in DFU mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/spaceholdings/nebula12b/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake nebula12b:<keymap>:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing MF-34 Keyboard Firmware using QMK\nDESCRIPTION: This command flashes the compiled firmware to the MF-34 keyboard. It requires the QMK build environment to be set up and the keyboard to be connected and in a state where it can receive the firmware. It uses the default keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/magic_force/mf34/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake magic_force/mf34:default:flash\n```\n\n----------------------------------------\n\nTITLE: Makefile Configuration Options\nDESCRIPTION: This section defines build options for the Helix keyboard. It allows users to enable or disable features such as OLED display, LED backlighting, LED underglow, LED animations, and iOS device support. Uncommenting and editing these variables in `rules.mk` enables the corresponding features.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/helix/rev2/keymaps/default/readme_jp.md#_snippet_0\n\nLANGUAGE: makefile\nCODE:\n```\n# Helix Spacific Build Options\n# you can uncomment and edit follows 7 Variables\n#  jp: 以下の7つの変数を必要に応じて編集し、コメントアウトをはずします。\n# OLED_ENABLE = yes            # OLED_ENABLE\n# LOCAL_GLCDFONT = no         # use each keymaps \"helixfont.h\" insted of \"common/glcdfont.c\"\n# LED_BACK_ENABLE = no        # LED backlight (Enable WS2812 RGB underlight.)\n# LED_UNDERGLOW_ENABLE = no   # LED underglow (Enable WS2812 RGB underlight.)\n# LED_ANIMATIONS = yes        # LED animations\n# IOS_DEVICE_ENABLE = no      # connect to IOS device (iPad,iPhone)\n```\n\n----------------------------------------\n\nTITLE: Defining Column Pins for Keyboard Matrix (QMK)\nDESCRIPTION: This code defines the pins used for the columns in the keyboard matrix. It is essential for the firmware to identify which column a keypress comes from, in combination with row pin. This is part of the keymap configuration in QMK.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/magicforce61/readme.md#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n#define MATRIX_COL_PINS { B5, B4, B3, B2, B1, B0, E7, E6, F0, F1, F2, F3, F4, F5 }\n```\n\n----------------------------------------\n\nTITLE: Defining a Keymap Layer (QMK)\nDESCRIPTION: This code defines a keymap layer within the QMK firmware.  It specifies the keys assigned to each position on the numpad for a particular layer.  `LAYOUT` is a QMK macro that arranges the keys in a matrix layout, using `KC_*` keycodes to define each key's function. `KC_FN0` is used to switch to another layer.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/gamenum/readme.md#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n  [DEF] = LAYOUT(\n    KC_FN0,  KC_SLSH, KC_ASTR, KC_MINS,\n    KC_7,    KC_8,    KC_9,    KC_PLUS,\n    KC_4,    KC_5,    KC_6,\n    KC_1,    KC_2,    KC_3,\n    KC_0,             KC_DOT,  KC_ENT\n  )\n```\n\n----------------------------------------\n\nTITLE: Writing PROGMEM String to OLED (C)\nDESCRIPTION: These functions write strings stored in PROGMEM (program memory) to the OLED display. `oled_write_P` writes a string, while `oled_write_ln_P` writes a string and advances to the next line. `oled_write_raw_P` writes raw data to the OLED buffer. These are used on AVR architectures for memory optimization. They're remapped to the regular functions on ARM.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/oled_driver.md#_snippet_27\n\nLANGUAGE: c\nCODE:\n```\n#if defined(__AVR__)\n// Writes a PROGMEM string to the buffer at current cursor position\n// Advances the cursor while writing, inverts the pixels if true\n// Remapped to call 'void oled_write(const char *data, bool invert);' on ARM\nvoid oled_write_P(const char *data, bool invert);\n\n// Writes a PROGMEM string to the buffer at current cursor position\n// Advances the cursor while writing, inverts the pixels if true\n// Advances the cursor to the next page, wiring ' ' to the remainder of the current page\n// Remapped to call 'void oled_write_ln(const char *data, bool invert);' on ARM\nvoid oled_write_ln_P(const char *data, bool invert);\n\n// Writes a PROGMEM string to the buffer at current cursor position\nvoid oled_write_raw_P(const char *data, uint16_t size);\n#else\n# define oled_write_P(data, invert) oled_write(data, invert)\n# define oled_write_ln_P(data, invert) oled_write_ln(data, invert)\n# define oled_write_raw_P(data, size) oled_write_raw(data, size)\n#endif // defined(__AVR__)\n```\n\n----------------------------------------\n\nTITLE: Flashing TKC Portico75 Firmware with QMK\nDESCRIPTION: This command builds and flashes the default firmware for the TKC Portico75 keyboard using the QMK build environment. It requires a properly configured QMK environment and a connected keyboard in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/tkc/portico75/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake tkc/portico75:default:flash\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow Configuration\nDESCRIPTION: This YAML file defines a GitHub Actions workflow for building QMK firmware. It specifies the trigger events (push and workflow_dispatch), the build environment (ubuntu-latest container), and the build steps.  The workflow checks out the QMK firmware and the userspace repository, then compiles the firmware using `qmk compile` and archives the resulting firmware files.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/newbs_building_firmware_workflow.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nname: Build QMK firmware\non: [push, workflow_dispatch]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    container: ghcr.io/qmk/qmk_cli\n    strategy:\n      fail-fast: false\n      matrix:\n# List of keymap json files to build\n        file:\n        - username.json\n# End of json file list\n\n    steps:\n\n    - name: Disable git safe directory checks\n      run : git config --global --add safe.directory '*'\n\n    - name: Checkout QMK\n      uses: actions/checkout@v3\n      with:\n        repository: qmk/qmk_firmware\n        submodules: recursive\n\n    - name: Checkout userspace\n      uses: actions/checkout@v3\n      with:\n        path: users/${{ github.actor }}\n\n    - name: Build firmware\n      run: qmk compile \"users/${{ github.actor }}/${{ matrix.file }}\"\n\n    - name: Archive firmware\n      uses: actions/upload-artifact@v3\n      continue-on-error: true\n      with:\n        name: ${{ matrix.file }}_${{ github.actor }}\n        path: |\n          *.hex\n          *.bin\n          *.uf2\n```\n\n----------------------------------------\n\nTITLE: Setting MATRIX_IO_DELAY Value - Makefile\nDESCRIPTION: This snippet demonstrates how to set the MATRIX_IO_DELAY value during compilation using the `make` command. The `MTEST` variable is used to define the delay value, which affects the timing of I/O operations during matrix scanning. This configuration is specifically tailored for the symmetric70_proto keyboard layout on a Pro Micro microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/symmetric70_proto/matrix_debug/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake MTEST=mdelay0 handwired/symmetric70_proto/promicro/normal:default:flash\nmake MTEST=mdelay=1 handwired/symmetric70_proto/promicro/normal:default:flash\nmake MTEST=mdelay=2 handwired/symmetric70_proto/promicro/normal:default:flash\nmake MTEST=mdelay=3 handwired/symmetric70_proto/promicro/normal:default:flash\nmake MTEST=mdelay=4 handwired/symmetric70_proto/promicro/normal:default:flash\nmake MTEST=mdelay=5 handwired/symmetric70_proto/promicro/normal:default:flash\nmake MTEST=mdelay=10 handwired/symmetric70_proto/promicro/normal:default:flash\nmake MTEST=mdelay=20 handwired/symmetric70_proto/promicro/normal:default:flash\nmake MTEST=mdelay=30 handwired/symmetric70_proto/promicro/normal:default:flash\n```\n\n----------------------------------------\n\nTITLE: Customizing Key Releases for Combos\nDESCRIPTION: This code snippet demonstrates how to customize key releases after a combo is activated using `COMBO_PROCESS_KEY_RELEASE` and the `process_combo_key_release` function. It shows an example where a combo resolves to two modifiers, and on key releases, the modifiers are unregistered one by one, depending on which key was released.  The function returns `false` to prevent the combo from being released automatically.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/combo.md#_snippet_10\n\nLANGUAGE: c\nCODE:\n```\nenum combos {\n  AB_MODS\n};\n\nconst uint16_t PROGMEM ab_combo[] = {KC_A, KC_B, COMBO_END};\n\ncombo_t key_combos[] = {\n  [AB_MODS] = COMBO(ab_combo, LCTL(KC_LSFT)),\n};\n\nbool process_combo_key_release(uint16_t combo_index, combo_t *combo, uint8_t key_index, uint16_t keycode) {\n    switch (combo_index) {\n        case AB_MODS:\n            switch(keycode) {\n                case KC_A:\n                    unregister_mods(MOD_MASK_CTRL);\n                    break;\n                case KC_B:\n                    unregister_mods(MOD_MASK_SHIFT);\n                    break;\n            }\n            return false; // do not release combo\n    }\n    return false;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining USB Frequency in QMK rules.mk\nDESCRIPTION: Specifies the USB frequency, often the same as the CPU frequency. Defined as `$(F_CPU)`. This is used for configuring the USB interface.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/config_options.md#_snippet_116\n\nLANGUAGE: makefile\nCODE:\n```\nF_USB = $(F_CPU)\n```\n\n----------------------------------------\n\nTITLE: Enabling DAC and GPT in halconf.h - C\nDESCRIPTION: This snippet demonstrates how to enable the DAC and GPT (General Purpose Timer) in the `halconf.h` file for ChibiOS. This is required for using the DAC-based audio drivers in QMK on ARM platforms. It enables the HAL_USE_DAC and HAL_USE_GPT definitions.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/audio.md#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n#pragma once\n\n#define HAL_USE_DAC TRUE // [!code focus]\n#define HAL_USE_GPT TRUE // [!code focus]\n\n#include_next <halconf.h>\n```\n\n----------------------------------------\n\nTITLE: Enable PS/2 Mouse with Interrupt Driver (AVR)\nDESCRIPTION: This snippet enables PS/2 mouse support using the interrupt driver on AVR microcontrollers.  It requires setting `PS2_MOUSE_ENABLE`, `PS2_ENABLE` and defining `PS2_DRIVER` in `rules.mk`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/ps2_mouse.md#_snippet_2\n\nLANGUAGE: make\nCODE:\n```\nPS2_MOUSE_ENABLE = yes\nPS2_ENABLE = yes\nPS2_DRIVER = interrupt\n```\n\n----------------------------------------\n\nTITLE: Adjusting Timeout with Per-Key Timing (QMK)\nDESCRIPTION: This snippet reduces the `LEADER_TIMEOUT` after enabling per-key timing in `config.h`. Since each key press resets the timer with per-key timing enabled, a shorter overall timeout is generally recommended.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/leader_key.md#_snippet_4\n\nLANGUAGE: C\nCODE:\n```\n#define LEADER_TIMEOUT 250\n```\n\n----------------------------------------\n\nTITLE: Flashing Keychron Q5 Firmware\nDESCRIPTION: These commands are used to flash the compiled QMK firmware onto the Keychron Q5 keyboard.  The `make` command, with the `:flash` suffix, triggers the flashing process after building.  Ensure that the keyboard is in flashing mode before executing these commands.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keychron/q5/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake keychron/q5/ansi:default:flash\n```\n\nLANGUAGE: shell\nCODE:\n```\nmake keychron/q5/ansi_encoder:default:flash\n```\n\nLANGUAGE: shell\nCODE:\n```\nmake keychron/q5/iso:default:flash\n```\n\nLANGUAGE: shell\nCODE:\n```\nmake keychron/q5/iso_encoder:default:flash\n```\n\n----------------------------------------\n\nTITLE: Enabling Audio Voices in QMK config.h\nDESCRIPTION: This code snippet enables the alternate audio voices in QMK firmware, allowing cycling through different voices. This setting is configured in the `config.h` file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/config_options.md#_snippet_14\n\nLANGUAGE: c\nCODE:\n```\n#define AUDIO_VOICES\n```\n\n----------------------------------------\n\nTITLE: Interactive Build Parameter Input with Docker\nDESCRIPTION: Executes the `util/docker_build.sh` script without any parameters, prompting the user to input the build parameters interactively. This allows users to build for all keyboards or keymaps.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/getting_started_docker.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nutil/docker_build.sh\n# Reads parameters as input (leave blank for all keyboards/keymaps)\n```\n\n----------------------------------------\n\nTITLE: Disable Music Mode in `config.h` and `rules.mk`\nDESCRIPTION: Disables the music mode feature in both `config.h` and `rules.mk` if the Audio feature is enabled but music mode is not used. This removes the matrix-to-note translation code.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/squeezing_avr.md#_snippet_8\n\nLANGUAGE: c\nCODE:\n```\n#define NO_MUSIC_MODE\n```\n\nLANGUAGE: make\nCODE:\n```\nMUSIC_ENABLE = no\n```\n\n----------------------------------------\n\nTITLE: Custom Key to Toggle Auto Mouse - C\nDESCRIPTION: This code snippet shows how to create a custom keycode to toggle the auto mouse feature on and off in QMK firmware. It defines a custom keycode `AM_Toggle` and implements the `process_record_user` function to handle the key press.  The code disables target layer if needed, toggles the auto mouse enable state, and manages a global boolean variable `auto_mouse_tg_off`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/pointing_device.md#_snippet_28\n\nLANGUAGE: c\nCODE:\n```\n// in config.h:\nenum user_custom_keycodes {\n    AM_Toggle = SAFE_RANGE\n};\n\n// in keymap.c:\n// set up global bool to adjust other user code\nbool auto_mouse_tg_off = !AUTO_MOUSE_ENABLED;\n\nbool process_record_user(uint16_t keycode, keyrecord_t* record) {\n    switch (keycode) {\n        // toggle auto mouse enable key\n        case AM_Toggle:\n            if(record->event.pressed) { // key down\n                auto_mouse_layer_off(); // disable target layer if needed\n                set_auto_mouse_enabled((AUTO_MOUSE_ENABLED) ^ 1);\n                auto_mouse_tg_off = !get_auto_mouse_enabled();\n            } // do nothing on key up\n            return false; // prevent further processing of keycode\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Step to Previous Unicode Input Mode - C\nDESCRIPTION: This function changes the current Unicode input mode to the previous mode in a sequence.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/unicode.md#_snippet_12\n\nLANGUAGE: C\nCODE:\n```\nvoid unicode_input_mode_step_reverse(void)\n```\n\n----------------------------------------\n\nTITLE: Enabling QMK DFU features in config.h\nDESCRIPTION: These defines in `config.h` enable additional features for the QMK DFU bootloader, such as matrix scanning for exiting the bootloader and LED/speaker feedback.  `QMK_ESC_OUTPUT` and `QMK_ESC_INPUT` define the pins for the matrix scan.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/flashing.md#_snippet_3\n\nLANGUAGE: C\nCODE:\n```\n#define QMK_ESC_OUTPUT F1  // COL pin if COL2ROW\n#define QMK_ESC_INPUT  D5  // ROW pin if COL2ROW\n// Optional:\n//#define QMK_LED E6\n//#define QMK_SPEAKER C6\n```\n\n----------------------------------------\n\nTITLE: Flashing OpenDeck Firmware - Makefile\nDESCRIPTION: This command builds and flashes the default firmware for the OpenDeck32 Rev1 keyboard. It requires a properly configured QMK build environment and access to the device via USB.  After running, the user needs to press the reset switch on the PCB.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/opendeck/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake opendeck/32/rev1:default:flash\n```\n\n----------------------------------------\n\nTITLE: OS Variant Enum Definition (C)\nDESCRIPTION: This code defines an enumeration (`os_variant_t`) representing the different operating systems that can be detected. The `detected_host_os()` function returns one of these values.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/os_detection.md#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nenum {\n    OS_UNSURE,\n    OS_LINUX,\n    OS_WINDOWS,\n    OS_MACOS,\n    OS_IOS,\n} os_variant_t;\n```\n\n----------------------------------------\n\nTITLE: Disabling Keycode Filtering for Mod-Tap\nDESCRIPTION: Disables keycode filtering for Mod-Tap and Layer-Tap keycodes during leader key processing. If enabled, specific keycodes like `MT(MOD_CTL, KC_A)` need to be fully specified.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/config_options.md#_snippet_54\n\nLANGUAGE: C\nCODE:\n```\n#define LEADER_KEY_STRICT_KEY_PROCESSING\n```\n\n----------------------------------------\n\nTITLE: QMK Make Command Example\nDESCRIPTION: This snippet demonstrates how to build the QMK firmware for the Planck keyboard, specifically the rev4 version with the default keymap. It assumes the build environment is already set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/documentation_templates.md#_snippet_2\n\nLANGUAGE: Makefile\nCODE:\n```\nmake planck/rev4:default\n```\n\n----------------------------------------\n\nTITLE: Adjust Layer Keymap\nDESCRIPTION: This code defines the Adjust layer, accessed by simultaneously holding down the Sym and Nav/Edit keys. This layer allows for adjusting keyboard settings such as base layer (QWERTY, Colemak-DH, Dvorak), Alt/GUI swapping, backlight control and accessing the bootloader.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/hillside/48/keymaps/default/readme.md#_snippet_5\n\nLANGUAGE: None\nCODE:\n```\n|       |QWERT|DVORK|COLMK|AG_SWAP|CTR_SWAP|----------------------|     | F11 | F12 |PR_SCR|    |       |\n|       |     |     |     |AG_NORM|CTR_NORM|----------------------|MOD+ |BRI+ |HUE+ |SAT+ |     |       |\n|       | GUI | ALT |CTRL |SHIFT|     |     |--------------|RGBTOG|MOD- |BRI- |HUE- |SAT- |     | BOOT  |\n--------------|     |-----|     |     | *** |     |---| *** |     |     |     |-----|     |--------------\n```\n\n----------------------------------------\n\nTITLE: User LED Update Implementation with Audio in QMK (C)\nDESCRIPTION: This C code shows an example of user-level LED update implementation `led_update_user` in QMK. It plays a sound when the Caps Lock state changes, provided that `AUDIO_ENABLE` is defined. The function returns `true` to allow the keyboard-level LED function to maintain the LED state. It relies on the `PLAY_SONG` macro and `caps_on` and `caps_off` song definitions which are defined based on `CAPS_LOCK_ON_SOUND` and `CAPS_LOCK_OFF_SOUND` macros respectively.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/led_indicators.md#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n#ifdef AUDIO_ENABLE\n  float caps_on[][2] = SONG(CAPS_LOCK_ON_SOUND);\n  float caps_off[][2] = SONG(CAPS_LOCK_OFF_SOUND);\n#endif\n\nbool led_update_user(led_t led_state) {\n    #ifdef AUDIO_ENABLE\n    static uint8_t caps_state = 0;\n    if (caps_state != led_state.caps_lock) {\n        led_state.caps_lock ? PLAY_SONG(caps_on) : PLAY_SONG(caps_off);\n        caps_state = led_state.caps_lock;\n    }\n    #endif\n    return true;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Right Hand as Master\nDESCRIPTION: This C preprocessor directive, when defined in `config.h`, configures the right-hand side of the split keyboard as the master. This is needed when the USB cable is always plugged into the right board.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/not_so_minidox/readme.md#_snippet_2\n\nLANGUAGE: C\nCODE:\n```\n #define MASTER_RIGHT\n```\n\n----------------------------------------\n\nTITLE: Flashing DAISY Firmware\nDESCRIPTION: This command flashes the compiled firmware onto the DAISY keyboard. It requires a configured QMK Firmware environment and a connected DAISY keyboard. It builds the firmware first if necessary.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/draytronics/daisy/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake draytronics/daisy:default:flash\n```\n\n----------------------------------------\n\nTITLE: Configure QMK default keymap\nDESCRIPTION: This command sets the default keymap name in the QMK build environment. It configures the `user.keymap` setting, typically using the GitHub username.  This avoids having to specify the keymap when building.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/newbs_building_firmware.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nqmk config user.keymap=<github_username>\n```\n\n----------------------------------------\n\nTITLE: OS Detection Callback Implementation (C)\nDESCRIPTION: This code demonstrates how to use the `process_detected_host_os_kb` callback function at the keyboard level.  It first calls the user-defined callback, and then performs OS-specific actions, such as setting the RGB matrix color.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/os_detection.md#_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nbool process_detected_host_os_kb(os_variant_t detected_os) {\n    if (!process_detected_host_os_user(detected_os)) {\n        return false;\n    }\n    switch (detected_os) {\n        case OS_MACOS:\n        case OS_IOS:\n            rgb_matrix_set_color_all(RGB_WHITE);\n            break;\n        case OS_WINDOWS:\n            rgb_matrix_set_color_all(RGB_BLUE);\n            break;\n        case OS_LINUX:\n            rgb_matrix_set_color_all(RGB_ORANGE);\n            break;\n        case OS_UNSURE:\n            rgb_matrix_set_color_all(RGB_RED);\n            break;\n    }\n    \n    return true;\n}\n```\n\n----------------------------------------\n\nTITLE: Building Yun65 Firmware with QMK\nDESCRIPTION: This command builds the QMK firmware for the Yun65 keyboard, specifically the 'default' keymap.  It assumes the QMK build environment has already been set up. The output is the firmware file ready to be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/spaceman/yun65/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake spaceman/yun65:default\n```\n\n----------------------------------------\n\nTITLE: Configuring Idle Timeout in config.h (C)\nDESCRIPTION: This code snippet demonstrates how to configure the `CAPS_WORD_IDLE_TIMEOUT` in the `config.h` file. This sets the duration (in milliseconds) after which Caps Word automatically turns off if no keys are pressed. Setting it to 0 disables the timeout.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/caps_word.md#_snippet_4\n\nLANGUAGE: c\nCODE:\n```\n#define CAPS_WORD_IDLE_TIMEOUT 3000  // 3 seconds.\n```\n\n----------------------------------------\n\nTITLE: Flashing Scotto37 Firmware (QMK)\nDESCRIPTION: This command compiles and flashes the default keymap to the Scotto37 keyboard. It requires a properly configured QMK build environment and a connected keyboard in bootloader mode. The command utilizes the 'flash' target, which typically invokes a flashing tool like dfu-util or similar based on the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/scottokeebs/scotto37/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake handwired/scottokeebs/scotto37:default:flash\n```\n\n----------------------------------------\n\nTITLE: Configuring Handedness by Matrix Pin in config.h (C)\nDESCRIPTION: This code configures the firmware to determine handedness by reading key matrix pins. `SPLIT_HAND_MATRIX_GRID` defines the output and input pins to use. It leverages an unused intersection in the key matrix to identify the handedness.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/split_keyboard.md#_snippet_4\n\nLANGUAGE: c\nCODE:\n```\n#define SPLIT_HAND_MATRIX_GRID D0, F1\n```\n\n----------------------------------------\n\nTITLE: Define External Flash Block Size (C)\nDESCRIPTION: This configuration option defines the block size of the external FLASH chip in bytes. Blocks are larger erasable units, usually composed of multiple sectors. This parameter is less critical than sector size but can be relevant for specific FLASH chips or operations.  The value should match the block size from the datasheet.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/flash.md#_snippet_4\n\nLANGUAGE: C\nCODE:\n```\n#define EXTERNAL_FLASH_BLOCK_SIZE            (64 * 1024)\n```\n\n----------------------------------------\n\nTITLE: Building a Keymap using make command\nDESCRIPTION: This snippet shows the command used to build a keyboard keymap in QMK. It takes the format `make <keyboard>:<layout>`, where `<keyboard>` is the keyboard name and `<layout>` is the layout name.  This builds the firmware for the specified keyboard with the specified layout.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/feature_layouts.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nmake <keyboard>:<layout>\n```\n\n----------------------------------------\n\nTITLE: Building FRL84 Keyboard Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the studiokestra/frl84 keyboard using the QMK build environment.  It compiles the keyboard layout and necessary QMK modules to create a firmware image ready for flashing. The 'default' specifies the default keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/studiokestra/frl84/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake studiokestra/frl84:default\n```\n\n----------------------------------------\n\nTITLE: Creating a GC9A01 Device Instance (C)\nDESCRIPTION: This code snippet shows how to create an instance of the GC9A01 display device in firmware using the `qp_gc9a01_make_spi_device` function. The function takes parameters for panel dimensions, SPI pins (chip select, data/command, reset), SPI divisor, and SPI mode.  The returned device handle is required for subsequent drawing operations.  Requires the `gc9a01_spi` driver to be enabled.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/quantum_painter.md#_snippet_5\n\nLANGUAGE: c\nCODE:\n```\npainter_device_t qp_gc9a01_make_spi_device(uint16_t panel_width, uint16_t panel_height, pin_t chip_select_pin, pin_t dc_pin, pin_t reset_pin, uint16_t spi_divisor, int spi_mode);\n```\n\n----------------------------------------\n\nTITLE: Building the Mechboards Micropad Firmware (QMK)\nDESCRIPTION: This snippet demonstrates how to build the firmware for the Mechboards Micropad keyboard using the QMK build environment. It utilizes the `make` command with the specified keyboard and keymap.  Requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/mechboards_micropad/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake handwired/mechboards_micropad:default\n```\n\n----------------------------------------\n\nTITLE: Defining Sniping DPI Configuration\nDESCRIPTION: These defines customize the sniping mode DPI scaling behavior for the Charybdis trackball. `CHARYBDIS_MINIMUM_SNIPING_DPI` sets the minimum DPI value for sniping mode, and `CHARYBDIS_SNIPING_DPI_CONFIG_STEP` defines the DPI increment step.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/bastardkb/charybdis/readme.md#_snippet_3\n\nLANGUAGE: C\nCODE:\n```\n#define CHARYBDIS_MINIMUM_SNIPING_DPI 200\n#define CHARYBDIS_SNIPING_DPI_CONFIG_STEP 100\n```\n\n----------------------------------------\n\nTITLE: Customizing Zinc Keyboard via rules.mk (QMK)\nDESCRIPTION: This code block shows the settings available in `rules.mk` file for customizing the Zinc keyboard. It includes options to enable/disable LED backlight, underglow, continuous LED, LED animations, and iOS device connection.  Edit `qmk_firmware/keyboards/zinc/rev1/keymaps/~/rules.mk` to adjust these settings.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/25keys/zinc/keymaps/default/readme_en.md#_snippet_4\n\nLANGUAGE: qmk\nCODE:\n```\n# Zinc keyboard customize\nLED_BACK_ENABLE = no        # LED backlight (Enable SK6812mini backlight)\nLED_UNDERGLOW_ENABLE = no   # LED underglow (Enable WS2812 RGB underlight)\nLED_BOTH_ENABLE = no        # LED backlight and underglow\nLED_RGB_CONT = no           # LED continuous backlight or/and underglow between left Zinc and right Zinc\nLED_ANIMATIONS = yes        # LED animations\nIOS_DEVICE_ENABLE = no      # connect to IOS device (iPad,iPhone)\n```\n\n----------------------------------------\n\nTITLE: Defining Master Side Handedness in QMK\nDESCRIPTION: These definitions specify which side of the split keyboard is considered the master. `MASTER_RIGHT` designates the right side as the master, while `MASTER_LEFT` designates the left side. This setting should be defined in the `config.h` file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/split_keyboard.md#_snippet_7\n\nLANGUAGE: c\nCODE:\n```\n#define MASTER_RIGHT\n```\n\n----------------------------------------\n\nTITLE: Flashing Keychron V8 Firmware\nDESCRIPTION: This command flashes the compiled firmware onto the Keychron V8 keyboard. It requires the QMK flashing tools to be properly installed and configured. The default keymap is flashed to the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keychron/v8/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake keychron/v8/ansi:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing MW660 Firmware (QMK)\nDESCRIPTION: This command flashes the default firmware to the MW660 keyboard using the QMK build system. It requires the build environment to be properly set up. The `:flash` target uploads the compiled firmware image to the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mwstudio/mw660/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake mwstudio/mw660:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware to LW-75 with Make\nDESCRIPTION: This command builds and flashes the default firmware to the LW-75 keyboard using the QMK build environment. It compiles the source code, creates the firmware file, and then flashes it onto the keyboard. Requires QMK build environment setup and a connected keyboard in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/laneware/lw75/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake laneware/lw75:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Keychron V2 Firmware (Make)\nDESCRIPTION: This command is used to flash the compiled firmware onto the Keychron V2 keyboard. It requires the QMK Firmware environment and a compatible flashing tool.  The command builds upon the build command by adding the `:flash` target.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keychron/v2/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake keychron/v2/ansi:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Keychron V7 Firmware - Make Command\nDESCRIPTION: This command flashes the compiled firmware to the Keychron V7 keyboard. It builds the firmware if necessary and then uses the appropriate flashing tool to upload the firmware to the keyboard's microcontroller. The keyboard must be in a flashable state for this command to succeed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keychron/v7/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake keychron/v7/ansi:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building PRKL30 with Feather using QMK\nDESCRIPTION: This command builds the QMK firmware for the PRKL30 keyboard using an Adafruit Feather controller. It assumes that the build environment has been set up correctly according to the QMK documentation. The `default` keymap is used in this example.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/prkl30/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake handwired/prkl30/feather:default\n```\n\n----------------------------------------\n\nTITLE: Building QMK Firmware for Bakeneko 60\nDESCRIPTION: This command builds the default keymap for the Bakeneko 60 keyboard using the QMK firmware. It utilizes the 'make' command with the specified keyboard and keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kkatano/bakeneko60/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake kkatano/bakeneko60:default\n```\n\n----------------------------------------\n\nTITLE: Compiling Firmware in Layout Directory - qmk compile\nDESCRIPTION: This command compiles firmware when executed from within a layout directory. It requires the `-kb` flag to specify the keyboard name.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/cli_commands.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nqmk compile -kb <keyboard_name>\n```\n\n----------------------------------------\n\nTITLE: Set Different Target Layer - C\nDESCRIPTION: This code snippet illustrates how to change the target layer for the auto mouse feature based on the active default layer in QMK firmware. The `default_layer_state_set_user` function is used to set the target layer to `_MOUSE_LAYER_2` when `_DEFAULT_LAYER_2` is active and sets back to `_MOUSE_LAYER_1` otherwise.  It also demonstrates how to avoid unnecessarily deactivating the target layer by checking if the target layer is already set.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/pointing_device.md#_snippet_27\n\nLANGUAGE: c\nCODE:\n```\n// in keymap.c\nlayer_state_t default_layer_state_set_user(layer_state_t state) {\n    // switch on change in default layer need to check if target layer already set to avoid turning off layer needlessly\n    switch(get_highest_layer(state)) {\n        case _DEFAULT_LAYER_2:\n            if ((AUTO_MOUSE_TARGET_LAYER) == _MOUSE_LAYER_2) break;\n            auto_mouse_layer_off();\n            set_auto_mouse_layer(_MOUSE_LAYER_2);\n            break;\n        \n        default:\n            if((AUTO_MOUSE_TARGET_LAYER) == _MOUSE_LAYER_1) break;\n            auto_mouse_layer_off();\n            set_auto_mouse_layer(_MOUSE_LAYER_1);\n    }\n    return state;\n}\n```\n\n----------------------------------------\n\nTITLE: Compiling Charybdis Firmware\nDESCRIPTION: This command compiles the Charybdis keyboard firmware. It requires specifying the keyboard layout, version, and keymap. Replace `{LAYOUT}`, `{VERSION}`, and `{KEYMAP}` with appropriate values.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/bastardkb/charybdis/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nqmk compile -kb bastardkb/charybdis/{LAYOUT}/{VERSION}/elitec -km {KEYMAP}\n```\n\n----------------------------------------\n\nTITLE: Enabling Leader Per-Key Timing\nDESCRIPTION: Sets the timer for leader key chords to run on each key press rather than overall. Resets the timeout after each key is tapped.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/config_options.md#_snippet_53\n\nLANGUAGE: C\nCODE:\n```\n#define LEADER_PER_KEY_TIMING\n```\n\n----------------------------------------\n\nTITLE: Building Keychron Q9 Firmware\nDESCRIPTION: These commands are used to build the QMK firmware for the Keychron Q9 keyboard with different layouts such as ANSI and ISO, and with or without an encoder.  The `make` command compiles the firmware based on the specified keyboard, layout, and keymap.  The user must have the QMK build environment set up prior to running these commands.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keychron/q9/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake keychron/q9/ansi:default\nmake keychron/q9/ansi_encoder:default\nmake keychron/q9/iso:default\nmake keychron/q9/iso_enocder:default\n```\n\n----------------------------------------\n\nTITLE: Defining Maximum Connection Errors for Split Keyboard\nDESCRIPTION: This definition sets the maximum number of consecutive failed communication attempts before the master part assumes the slave is disconnected. This allows using the master part without the slave connected. Set to 0 to disable this check. It is defined in `config.h`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/split_keyboard.md#_snippet_13\n\nLANGUAGE: c\nCODE:\n```\n#define SPLIT_MAX_CONNECTION_ERRORS 10\n```\n\n----------------------------------------\n\nTITLE: Flashing PocketPad Firmware\nDESCRIPTION: This command flashes the compiled firmware to the PocketPad keyboard. It requires the QMK build environment to be set up and the keyboard to be connected to the computer.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/butterkeebs/pocketpad/readme.md#_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nmake butterkeebs/pocketpad:default:flash\n```\n\n----------------------------------------\n\nTITLE: Keycode Assignment in C\nDESCRIPTION: This C code assigns keycodes to physical locations on the keyboard matrix using the `LAYOUT()` macro.  It defines a `keymaps` array, mapping matrix locations to specific keycodes (e.g., `KC_NUM`, `KC_PSLS`). This enables the firmware to determine the key pressed based on its position in the matrix.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/understanding_qmk.md#_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nconst uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {\n    [0] = LAYOUT(\n        KC_NUM,  KC_PSLS, KC_PAST, KC_PMNS,\n        KC_P7,   KC_P8,   KC_P9,   KC_PPLS,\n        KC_P4,   KC_P5,   KC_P6,\n        KC_P1,   KC_P2,   KC_P3,   KC_PENT,\n        KC_P0,            KC_PDOT\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling WS2812 SPI Circular Buffer in config.h\nDESCRIPTION: This code snippet enables the circular buffer for the WS2812 driver when using SPI. Enabling the circular buffer can reduce or eliminate flickering issues that may occur due to timing constraints or buffer limitations. This setting can be beneficial if the LED display exhibits flickering artifacts.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/ws2812.md#_snippet_12\n\nLANGUAGE: c\nCODE:\n```\n#define WS2812_SPI_USE_CIRCULAR_BUFFER\n```\n\n----------------------------------------\n\nTITLE: Setting the Pimoroni Trackball driver in rules.mk\nDESCRIPTION: This snippet shows how to configure the Pimoroni Trackball module as the pointing device driver within the `rules.mk` file. This setting ensures that the appropriate driver components for the Pimoroni Trackball are incorporated during the build process.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/pointing_device.md#_snippet_10\n\nLANGUAGE: Make\nCODE:\n```\nPOINTING_DEVICE_DRIVER = pimoroni_trackball\n```\n\n----------------------------------------\n\nTITLE: Defining Pinout and Backlight Settings - QMK\nDESCRIPTION: These #define statements configure the keyboard matrix direction, LED pins for Caps Lock, Scroll Lock, and Num Lock, backlight pins, and the number of backlight levels for the handwired keyboard. They are essential for the QMK firmware to correctly interface with the keyboard's hardware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/oem_iso_fullsize/readme.md#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n#define DIODE_DIRECTION ROW2COL\n#define LED_CAPS_LOCK_PIN C7\n#define LED_SCROLL_LOCK_PIN A3\n#define LED_NUM_LOCK_PIN C6\n#define BACKLIGHT_PINS { B5, E5, E4, A7, A1, A2 }\n#define BACKLIGHT_LEVELS 1\n```\n\n----------------------------------------\n\nTITLE: Setting Audio Driver to PWM Hardware - make\nDESCRIPTION: This snippet shows how to set the audio driver to pwm_hardware in the makefile for AVR-based boards. This configuration automatically configures the audio driver to use the PWM hardware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/audio.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nAUDIO_DRIVER = pwm_hardware\n```\n\n----------------------------------------\n\nTITLE: Defining RGB Light Saturation Step\nDESCRIPTION: Defines the units to step when increasing/decreasing saturation.  Determines the granularity of saturation adjustments.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/config_options.md#_snippet_78\n\nLANGUAGE: C\nCODE:\n```\n#define RGBLIGHT_SAT_STEP 25\n```\n\n----------------------------------------\n\nTITLE: Reading Single Key Configuration with QMK CLI\nDESCRIPTION: This snippet illustrates how to read a single configuration value, specifically `compile.keyboard`. This allows the user to check the current setting for the keyboard used during compilation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/cli_configuration.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nqmk config compile.keyboard\n```\n\n----------------------------------------\n\nTITLE: Enabling Combo Term Per Combo\nDESCRIPTION: Enables per-combo COMBO_TERM extension and `get_combo_term()` function. Sets specific combo timeouts.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/config_options.md#_snippet_62\n\nLANGUAGE: C\nCODE:\n```\n#define COMBO_TERM_PER_COMBO\n```\n\n----------------------------------------\n\nTITLE: Building Quefrency Rev. 5 Firmware\nDESCRIPTION: This command builds the default firmware for the Quefrency Rev. 5 keyboard. It assumes that the QMK build environment has already been set up. The resulting firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keebio/quefrency/rev5/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake keebio/quefrency/rev5:default\n```\n\n----------------------------------------\n\nTITLE: Set Unicode Input Mode User Callback - C\nDESCRIPTION: This function is a user-level callback that's invoked when the input mode is changed. It takes the new input mode as a `uint8_t` argument.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/unicode.md#_snippet_13\n\nLANGUAGE: C\nCODE:\n```\nvoid unicode_input_mode_set_user(uint8_t input_mode)\n```\n\n----------------------------------------\n\nTITLE: Creating a SSD1351 Device Instance (C)\nDESCRIPTION: This code snippet shows how to create an instance of the SSD1351 display device in firmware using the `qp_ssd1351_make_spi_device` function. The function takes parameters for panel dimensions, SPI pins (chip select, data/command, reset), SPI divisor, and SPI mode. The returned device handle is required for subsequent drawing operations. Requires the `ssd1351_spi` driver to be enabled.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/quantum_painter.md#_snippet_27\n\nLANGUAGE: c\nCODE:\n```\npainter_device_t qp_ssd1351_make_spi_device(uint16_t panel_width, uint16_t panel_height, pin_t chip_select_pin, pin_t dc_pin, pin_t reset_pin, uint16_t spi_divisor, int spi_mode);\n```\n\n----------------------------------------\n\nTITLE: Compiling with RGB Backlight Enabled\nDESCRIPTION: This snippet demonstrates how to compile the firmware with RGB backlighting enabled.  It uses the `helix/rev2/back` keyword in the make command to select a keymap with backlight functionality enabled.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/helix/rev2/keymaps/default/readme_jp.md#_snippet_10\n\nLANGUAGE: makefile\nCODE:\n```\n$ make helix/rev2/back:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building QMK Firmware for GMMK PRO (ISO)\nDESCRIPTION: This command builds the default QMK firmware for the GMMK PRO (ISO) keyboard.  It assumes the QMK build environment is already set up.  The output is a firmware file ready to be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/gmmk/pro/rev2/iso/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake gmmk/pro/rev2/iso:default\n```\n\n----------------------------------------\n\nTITLE: Calculating Physical LED Position in C\nDESCRIPTION: This snippet provides the formula for calculating the physical `x` and `y` coordinates of an LED based on its column and row position.  `NUMBER_OF_COLS` and `NUMBER_OF_ROWS` refer to the physical layout, not the electrical layout. These positions are relative to the top-left of the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/led_matrix.md#_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nx = 224 / (NUMBER_OF_COLS - 1) * COL_POSITION\ny =  64 / (NUMBER_OF_ROWS - 1) * ROW_POSITION\n```\n\n----------------------------------------\n\nTITLE: Disable Additional Features in `rules.mk`\nDESCRIPTION: Disables features such as space cadet, grave esc, and magic keycodes in `rules.mk` to further reduce the firmware size. These features are enabled by default, so disabling them can free up valuable space.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/squeezing_avr.md#_snippet_2\n\nLANGUAGE: make\nCODE:\n```\nSPACE_CADET_ENABLE = no\nGRAVE_ESC_ENABLE = no \nMAGIC_ENABLE = no\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Encoder Pins in config.h (QMK)\nDESCRIPTION: This snippet demonstrates how to define the A and B pins for multiple encoders in the `config.h` file of a QMK Firmware project.  The `ENCODER_A_PINS` and `ENCODER_B_PINS` macros are defined as arrays, with each element corresponding to the A or B pin of a different encoder. This allows the firmware to handle multiple encoders simultaneously.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/encoders.md#_snippet_2\n\nLANGUAGE: c\nCODE:\n```\n#define ENCODER_A_PINS { encoder1a, encoder2a }\n#define ENCODER_B_PINS { encoder1b, encoder2b }\n```\n\n----------------------------------------\n\nTITLE: Configuring RGB Matrix in config.h - C\nDESCRIPTION: This code block configures various RGB Matrix settings in the `config.h` file for the Corne keyboard. It enables keypress reactions, suspends effects during sleep, enables framebuffer effects, and defines animation speeds and brightness limits. Conditional compilation using `#ifdef RGB_MATRIX_ENABLE` ensures that these settings are only applied when RGB Matrix is enabled, avoiding potential conflicts or errors if RGB Light is used instead.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/crkbd/readme.md#_snippet_3\n\nLANGUAGE: c\nCODE:\n```\n#ifdef RGB_MATRIX_ENABLE\n#   define RGB_MATRIX_KEYPRESSES // reacts to keypresses\n// #   define RGB_MATRIX_KEYRELEASES // reacts to keyreleases (instead of keypresses)\n#   define RGB_MATRIX_SLEEP // turn off effects when suspended\n#   define RGB_MATRIX_FRAMEBUFFER_EFFECTS\n// #   define RGB_MATRIX_LED_PROCESS_LIMIT (RGB_MATRIX_LED_COUNT + 4) / 5 // limits the number of LEDs to process in an animation per task run (increases keyboard responsiveness)\n// #   define RGB_MATRIX_LED_FLUSH_LIMIT 16 // limits in milliseconds how frequently an animation will update the LEDs. 16 (16ms) is equivalent to limiting to 60fps (increases keyboard responsiveness)\n#    define RGB_MATRIX_MAXIMUM_BRIGHTNESS 150 // limits maximum brightness of LEDs to 150 out of 255. Higher may cause the controller to crash. \n#    define RGB_MATRIX_HUE_STEP 8\n#    define RGB_MATRIX_SAT_STEP 8\n#    define RGB_MATRIX_VAL_STEP 8\n#    define RGB_MATRIX_SPD_STEP 10\n\n/* Enable the animations you want/need.  You may need to enable only a small number of these because       *\n * they take up a lot of space.  Enable and confirm that you can still successfully compile your firmware. */\n// RGB Matrix Animation modes. Explicitly enabled\n// For full list of effects, see:\n// https://docs.qmk.fm/#/feature_rgb_matrix?id=rgb-matrix-effects\n#    define ENABLE_RGB_MATRIX_ALPHAS_MODS\n#    define ENABLE_RGB_MATRIX_GRADIENT_UP_DOWN\n#    define ENABLE_RGB_MATRIX_GRADIENT_LEFT_RIGHT\n#    define ENABLE_RGB_MATRIX_BREATHING\n#    define ENABLE_RGB_MATRIX_BAND_SAT\n#    define ENABLE_RGB_MATRIX_BAND_VAL\n#    define ENABLE_RGB_MATRIX_BAND_PINWHEEL_SAT\n#    define ENABLE_RGB_MATRIX_BAND_PINWHEEL_VAL\n#    define ENABLE_RGB_MATRIX_BAND_SPIRAL_SAT\n#    define ENABLE_RGB_MATRIX_BAND_SPIRAL_VAL\n#    define ENABLE_RGB_MATRIX_CYCLE_ALL\n#    define ENABLE_RGB_MATRIX_CYCLE_LEFT_RIGHT\n#    define ENABLE_RGB_MATRIX_CYCLE_UP_DOWN\n#    define ENABLE_RGB_MATRIX_RAINBOW_MOVING_CHEVRON\n#    define ENABLE_RGB_MATRIX_CYCLE_OUT_IN\n#    define ENABLE_RGB_MATRIX_CYCLE_OUT_IN_DUAL\n#    define ENABLE_RGB_MATRIX_CYCLE_PINWHEEL\n#    define ENABLE_RGB_MATRIX_CYCLE_SPIRAL\n#    define ENABLE_RGB_MATRIX_DUAL_BEACON\n#    define ENABLE_RGB_MATRIX_RAINBOW_BEACON\n#    define ENABLE_RGB_MATRIX_RAINBOW_PINWHEELS\n#    define ENABLE_RGB_MATRIX_RAINDROPS\n#    define ENABLE_RGB_MATRIX_JELLYBEAN_RAINDROPS\n#    define ENABLE_RGB_MATRIX_HUE_BREATHING\n#    define ENABLE_RGB_MATRIX_HUE_PENDULUM\n#    define ENABLE_RGB_MATRIX_HUE_WAVE\n#    define ENABLE_RGB_MATRIX_PIXEL_RAIN\n#    define ENABLE_RGB_MATRIX_PIXEL_FLOW\n#    define ENABLE_RGB_MATRIX_PIXEL_FRACTAL\n// enabled only if RGB_MATRIX_FRAMEBUFFER_EFFECTS is defined\n#    define ENABLE_RGB_MATRIX_TYPING_HEATMAP\n#    define ENABLE_RGB_MATRIX_DIGITAL_RAIN\n// enabled only of RGB_MATRIX_KEYPRESSES or RGB_MATRIX_KEYRELEASES is defined\n#    define ENABLE_RGB_MATRIX_SOLID_REACTIVE_SIMPLE\n#    define ENABLE_RGB_MATRIX_SOLID_REACTIVE\n#    define ENABLE_RGB_MATRIX_SOLID_REACTIVE_WIDE\n#    define ENABLE_RGB_MATRIX_SOLID_REACTIVE_MULTIWIDE\n#    define ENABLE_RGB_MATRIX_SOLID_REACTIVE_CROSS\n#    define ENABLE_RGB_MATRIX_SOLID_REACTIVE_MULTICROSS\n#    define ENABLE_RGB_MATRIX_SOLID_REACTIVE_NEXUS\n#    define ENABLE_RGB_MATRIX_SOLID_REACTIVE_MULTINEXUS\n#    define ENABLE_RGB_MATRIX_SPLASH\n#    define ENABLE_RGB_MATRIX_MULTISPLASH\n#    define ENABLE_RGB_MATRIX_SOLID_SPLASH\n#    define ENABLE_RGB_MATRIX_SOLID_MULTISPLASH\n#endif\n```\n\n----------------------------------------\n\nTITLE: Enable PS/2 Mouse with USART Driver\nDESCRIPTION: This snippet enables PS/2 mouse support using the USART driver.  It requires setting `PS2_MOUSE_ENABLE`, `PS2_ENABLE` and defining `PS2_DRIVER` in `rules.mk`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/ps2_mouse.md#_snippet_7\n\nLANGUAGE: make\nCODE:\n```\nPS2_MOUSE_ENABLE = yes\nPS2_ENABLE = yes\nPS2_DRIVER = usart\n```\n\n----------------------------------------\n\nTITLE: Enabling Forced NKRO in QMK config.h\nDESCRIPTION: This code snippet forces NKRO on during keyboard startup regardless of EEPROM setting. NKRO can still be turned off but will be turned on again if the keyboard reboots.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/config_options.md#_snippet_39\n\nLANGUAGE: c\nCODE:\n```\n#define FORCE_NKRO\n```\n\n----------------------------------------\n\nTITLE: Pragma Once Directive in C\nDESCRIPTION: This code snippet uses the `#pragma once` directive. This directive ensures that a header file is included only once during compilation, preventing multiple definitions of the same symbols and potential errors.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/getting_started_introduction.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#pragma once\n```\n\n----------------------------------------\n\nTITLE: Disabling Music Mode in QMK\nDESCRIPTION: This C macro definition allows you to completely disable Music Mode in QMK. This is useful for reducing the firmware size if you do not use Music Mode, which can be beneficial for controllers with limited memory.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/audio.md#_snippet_19\n\nLANGUAGE: c\nCODE:\n```\n#define NO_MUSIC_MODE\n```\n\n----------------------------------------\n\nTITLE: Configuring RGB LED Count in QMK config.h (C)\nDESCRIPTION: This code snippet demonstrates how to configure the number of LEDs for RGB underglow in the `config.h` file within a QMK keymap. It undefines the default `RGBLIGHT_LED_COUNT` and then defines it with the desired number of LEDs. This configuration ensures the QMK firmware correctly controls the connected LED strip.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kc60/mod_rgb_underglow.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#pragma once\n\n#undef RGBLIGHT_LED_COUNT\n#define RGBLIGHT_LED_COUNT <number of leds>\n```\n\n----------------------------------------\n\nTITLE: Connecting to Keyboard Consoles - qmk console\nDESCRIPTION: This command connects to keyboard consoles to get debugging messages. Requires the keyboard firmware to be compiled with `CONSOLE_ENABLE=yes`. Allows specifying device by PID/VID/index, listing devices, and showing timestamps and VID/PID.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/cli_commands.md#_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\nqmk console\n```\n\nLANGUAGE: shell\nCODE:\n```\nqmk console -l\n```\n\nLANGUAGE: shell\nCODE:\n```\nqmk console -d C1ED:2370\n```\n\nLANGUAGE: shell\nCODE:\n```\nqmk console -d C1ED:2370:2\n```\n\nLANGUAGE: shell\nCODE:\n```\nqmk console -n -t\n```\n\nLANGUAGE: shell\nCODE:\n```\nqmk console --no-bootloaders\n```\n\nLANGUAGE: shell\nCODE:\n```\nqmk console [-d <pid>:<vid>[:<index>]] [-l] [-n] [-t] [-w <seconds>]\n```\n\n----------------------------------------\n\nTITLE: Formatting JSON Files - qmk format-json\nDESCRIPTION: Formats a JSON file in a human-friendly way. Can usually detect the format of the JSON (info.json or keymap.json), but you can override this with `--format`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/cli_commands.md#_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\nqmk format-json [-f FORMAT] <json_file>\n```\n\n----------------------------------------\n\nTITLE: Generate Compilation Database (qmk generate-compilation-database)\nDESCRIPTION: This command creates a `compile_commands.json` file for use with IDEs and language servers, which helps with include file resolution. Requires specifying the keyboard and keymap using `-kb` and `-km` options, or relying on directory context.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/cli_commands.md#_snippet_41\n\nLANGUAGE: text\nCODE:\n```\nqmk generate-compilation-database [-kb KEYBOARD] [-km KEYMAP]\n```\n\nLANGUAGE: text\nCODE:\n```\n$ cd ~/qmk_firmware/keyboards/gh60/satan/keymaps/colemak\n```\n\nLANGUAGE: text\nCODE:\n```\n$ qmk generate-compilation-database\n```\n\n----------------------------------------\n\nTITLE: Creating SH1106 devices in C\nDESCRIPTION: These C code snippets show how to create SH1106 display devices using either SPI or I2C interface with the Quantum Painter library. The functions `qp_sh1106_make_spi_device` and `qp_sh1106_make_i2c_device` are used to instantiate the display objects. They take parameters like panel dimensions, pin configurations, SPI divisor, SPI mode or I2C address.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/quantum_painter.md#_snippet_31\n\nLANGUAGE: c\nCODE:\n```\n// SPI-based SH1106:\npainter_device_t qp_sh1106_make_spi_device(uint16_t panel_width, uint16_t panel_height, pin_t chip_select_pin, pin_t dc_pin, pin_t reset_pin, uint16_t spi_divisor, int spi_mode);\n// I2C-based SH1106:\npainter_device_t qp_sh1106_make_i2c_device(uint16_t panel_width, uint16_t panel_height, uint8_t i2c_address);\n```\n\n----------------------------------------\n\nTITLE: Building Split65 with ProMicro using QMK\nDESCRIPTION: This command builds the QMK firmware for the Split65 keyboard using a ProMicro controller with the default configuration. It uses the `make` command with the target specified as `handwired/split65/promicro:default`. No dependencies outside of the QMK build environment are required. The output is a compiled firmware ready for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/split65/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/split65/promicro:default\n```\n\n----------------------------------------\n\nTITLE: Setting OLED Transport Protocol (Makefile)\nDESCRIPTION: This snippet shows how to configure the OLED transport protocol in `rules.mk`. Setting `OLED_TRANSPORT = i2c` selects I2C communication with the OLED panel.  Alternatively, `OLED_TRANSPORT = spi` would select SPI communication.  Ensure this matches your hardware configuration.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/oled_driver.md#_snippet_2\n\nLANGUAGE: Makefile\nCODE:\n```\nOLED_TRANSPORT = i2c\n```\n\n----------------------------------------\n\nTITLE: Building Keyboard Firmware (Make)\nDESCRIPTION: This command compiles the firmware for the macroboard keyboard with the default keymap.  It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/macroboard/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake handwired/macroboard:default\n```\n\n----------------------------------------\n\nTITLE: Building Caravan Firmware with Make\nDESCRIPTION: This snippet shows the command to build the default firmware for the Caravan keyboard using the QMK make command. It assumes that the QMK build environment has already been set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/thevankeyboards/caravan/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake thevankeyboards/caravan:default\n```\n\n----------------------------------------\n\nTITLE: Building the Nicekey Firmware (QMK)\nDESCRIPTION: This snippet shows the command to build the firmware for the Nicekey keyboard using the QMK build system. It compiles the code for the 'handwired/nicekey' keyboard with the 'default' keymap.  It assumes the QMK build environment is already set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/nicekey/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake handwired/nicekey:default\n```\n\n----------------------------------------\n\nTITLE: Building SiCK-PAD Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the SiCK-PAD numpad using the QMK build environment. It requires a properly configured QMK build environment and will generate a .hex file for flashing to the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/sick_pad/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake handwired/sick_pad:default\n```\n\n----------------------------------------\n\nTITLE: Building Naked48 Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the Naked48 keyboard (revision 1) using the QMK build environment. It specifies the keyboard, keymap, and programmer (avrdude). Ensure the QMK build environment is set up before running this command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/salicylic_acid3/naked48/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake salicylic_acid3/naked48/rev1:default:avrdude\n```\n\n----------------------------------------\n\nTITLE: Building OEM ISO Fullsize Keyboard Firmware - QMK\nDESCRIPTION: This command builds the default keymap for the handwired OEM ISO Fullsize keyboard using the QMK firmware build environment.  It assumes the QMK build environment is properly set up and configured. The output will be a .hex or .bin file that can be flashed to the Teensy++ 2.0.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/oem_iso_fullsize/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake handwired/oem_iso_fullsize:default\n```\n\n----------------------------------------\n\nTITLE: Building Keyboard Firmware with Make\nDESCRIPTION: This command compiles the firmware for the Gopolar GG86 keyboard using the default keymap.  It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/gopolar/gg86/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake gopolar/gg86:default\n```\n\n----------------------------------------\n\nTITLE: Building Panda65_01 Default Keymap (Makefile)\nDESCRIPTION: This command builds the default keymap for the Panda65_01 keyboard using the QMK build environment. It utilizes the `make` command with the specified target `generic_panda/panda65_01:default`. No specific dependencies are needed other than a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/generic_panda/panda65_01/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake generic_panda/panda65_01:default\n```\n\n----------------------------------------\n\nTITLE: Building Uni660 Rev2 ISO Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Uni660 Rev2 ISO keyboard using the QMK build environment.  It compiles the source code and generates a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/sirius/uni660/rev2/iso/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake sirius/uni660/rev2/iso:default\n```\n\n----------------------------------------\n\nTITLE: Building the Meme Keyboard Firmware\nDESCRIPTION: This command builds the default keymap for the Meme keyboard using the QMK build environment.  It assumes that the QMK build environment has been correctly configured.  The output will be a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/meme/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake meme:default\n```\n\n----------------------------------------\n\nTITLE: Building Wanderland Keyboard Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the KiwiKey Wanderland keyboard using the QMK build environment. It assumes the QMK build environment is correctly set up.  The resulting firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kiwikey/wanderland/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake kiwikey/wanderland:default\n```\n\n----------------------------------------\n\nTITLE: Building KB16-01 Firmware with QMK CLI\nDESCRIPTION: This command compiles the QMK firmware for the KB16-01 macropad (revision 2) with the default keymap using the QMK CLI.  It requires the QMK CLI to be installed and configured. The resulting firmware is ready to be flashed onto the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/doio/kb16/rev2/readme.md#_snippet_1\n\nLANGUAGE: QMK CLI\nCODE:\n```\n`qmk compile -kb doio/kb16/rev2 -km default`\n```\n\n----------------------------------------\n\nTITLE: Copyright Header Example in C\nDESCRIPTION: This code snippet shows the recommended format for a copyright header in C files within the QMK firmware. It includes the copyright year, author's name, and email address. If modifying existing code, include the original author's information.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/hardware_keyboard_guidelines.md#_snippet_6\n\nLANGUAGE: C\nCODE:\n```\nCopyright 2017 Your Name <your@email.com>\n```\n\n----------------------------------------\n\nTITLE: Defining the Graphics Descriptor structure in C\nDESCRIPTION: This code snippet defines the structure for the graphics descriptor block in the QMK Graphics Format (QGF). It contains the block header, magic number, QGF version, total file size, negated total file size, image width, image height, and frame count. The `__attribute__((packed))` ensures no padding is added, and the structure size is asserted to be 23 bytes.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/quantum_painter_qgf.md#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\ntypedef struct __attribute__((packed)) qgf_graphics_descriptor_v1_t {\n    qgf_block_header_v1_t header;               // = { .type_id = 0x00, .neg_type_id = (~0x00), .length = 18 }\n    uint24_t              magic;                // constant, equal to 0x464751 (\"QGF\")\n    uint8_t               qgf_version;          // constant, equal to 0x01\n    uint32_t              total_file_size;      // total size of the entire file, starting at offset zero\n    uint32_t              neg_total_file_size;  // negated value of total_file_size, used for detecting parsing errors\n    uint16_t              image_width;          // in pixels\n    uint16_t              image_height;         // in pixels\n    uint16_t              frame_count;          // minimum of 1\n} qgf_graphics_descriptor_v1_t;\n// _Static_assert(sizeof(qgf_graphics_descriptor_v1_t) == (sizeof(qgf_block_header_v1_t) + 18), \"qgf_graphics_descriptor_v1_t must be 23 bytes in v1 of QGF\");\n```\n\n----------------------------------------\n\nTITLE: Convert keymap.json to keymap.c (Bash)\nDESCRIPTION: This command converts the `keymap.json` file to a `keymap.c` file using the `qmk json2c` utility. The `-o keymap.c` option specifies the output file name. This conversion is necessary for adding custom C code and functionalities not supported by the JSON format.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/splitkb/aurora/helix/keymaps/default/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nqmk json2c -o keymap.c keymap.json\n```\n\n----------------------------------------\n\nTITLE: Building the Boulevard Keyboard Firmware (Makefile)\nDESCRIPTION: This command builds the default keymap for the Boulevard keyboard using the QMK make system. It compiles the firmware for the `eyeohdesigns/theboulevard` keyboard with the `default` keymap.  It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/eyeohdesigns/theboulevard/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake eyeohdesigns/theboulevard:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Sessanta Keyboard Firmware (QMK)\nDESCRIPTION: This command flashes the built firmware to the Sessanta keyboard. It requires a proper QMK build environment and a connected keyboard in bootloader mode. After successful execution, the new firmware will be running on the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/boardsource/sessanta/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake boardsource/sessanta:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Winry315 Firmware with Make\nDESCRIPTION: This command compiles and flashes the default firmware for the Winry315 macropad using the `make` command.  It requires a properly configured QMK build environment and a connected Winry315 in bootloader mode. The command will attempt to flash the compiled firmware to the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/winry/winry315/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake winry/winry315:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing WT65-XTX with QMK\nDESCRIPTION: This command flashes the default keymap to the wilba_tech/wt65_xtx keyboard using the QMK build system. It requires a properly configured QMK build environment and a connected keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wilba_tech/wt65_xtx/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake wilba_tech/wt65_xtx:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Knife66 Firmware with QMK\nDESCRIPTION: This command flashes the default firmware onto the Knife66 keyboard using the QMK build environment. It requires the keyboard to be in a state where it can accept a firmware update, often bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/misterknife/knife66/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake misterknife/knife66:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Gorthage Truck Keyboard Firmware\nDESCRIPTION: This command flashes the compiled firmware onto the Gorthage Truck keyboard. It requires the QMK build environment and a suitable flashing tool. The keyboard needs to be in flashing mode for this command to succeed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/gorthage_truck/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake gorthage_truck:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing LeFishe Firmware with Make\nDESCRIPTION: This command builds and flashes the default firmware for the LeFishe keyboard. It requires a configured QMK build environment and a connected keyboard in bootloader mode. The output is the keyboard running the newly flashed firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/lyso1/lefishe/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake lyso1/lefishe:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Mini1800 RevA Firmware (QMK)\nDESCRIPTION: This command compiles and flashes the QMK firmware for the Mini1800 RevA keyboard with the default keymap. It requires the QMK build environment and a connected keyboard in a flashable state (e.g., bootloader mode).\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/lfkeyboards/mini1800/reva/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake lfkeyboards/mini1800/reva:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing AC001 Firmware\nDESCRIPTION: This command builds and flashes the default firmware to the AC001 keyboard.  It uses the QMK make system, assuming the bootloader is active and the QMK environment is set up.  It depends on the dfu-programmer or similar tools.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/hfdkb/ac001/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake hfdkb/ac001:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Pizza65 Firmware (QMK)\nDESCRIPTION: This command flashes the default firmware onto the Pizza65 keyboard. It uses the QMK build environment and requires a connected keyboard in flashing mode. It assumes the default target is configured for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/pizzakeyboards/pizza65/readme.md#_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nmake pizzakeyboards/pizza65:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Pisces Firmware - Makefile\nDESCRIPTION: This command flashes the default firmware onto the Pisces keyboard. It requires the keyboard to be in bootloader mode. The QMK build environment must be set up correctly beforehand.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/pisces/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake pisces:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing the Keyboard Firmware\nDESCRIPTION: This command flashes the compiled firmware to the handwired/3dp660_oled keyboard. It requires the QMK build environment and assumes the keyboard is in a state ready to receive the firmware. It uses the `make` command with the `flash` target.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/3dp660_oled/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake handwired/3dp660_oled:default:flash\n```\n\n----------------------------------------\n\nTITLE: Configuring PWM Timer in mcuconf.h for STM32\nDESCRIPTION: This snippet demonstrates how to configure a specific PWM timer (TIM4 in this example) within the `mcuconf.h` file for STM32. It undefines the default setting and then defines `STM32_PWM_USE_TIM4` to `TRUE`, enabling the specified timer for PWM output.  This configuration is necessary to allocate a timer to PWM functionality.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/backlight.md#_snippet_9\n\nLANGUAGE: c\nCODE:\n```\n#pragma once\n\n#include_next <mcuconf.h>\n\n#undef STM32_PWM_USE_TIM4 // [!code focus]\n#define STM32_PWM_USE_TIM4 TRUE // [!code focus]\n```\n\n----------------------------------------\n\nTITLE: Alternative Keymaps using SEND_STRING() in C\nDESCRIPTION: This snippet illustrates how to include an alternative keymap such as Colemak using `#include \"sendstring_colemak.h\"` to ensure that `SEND_STRING` functions correctly reflects the actual keyboard layout used by the host operating system. This requires having the correct sendstring include file available within the QMK firmware environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/feature_macros.md#_snippet_6\n\nLANGUAGE: C\nCODE:\n```\n#include \"sendstring_colemak.h\"\n```\n\n----------------------------------------\n\nTITLE: Base Layer Keymap\nDESCRIPTION: Illustrates the base layer keymap of the KC60SE keyboard, showing the standard key assignments and their positions. It includes keys like Esc, Tab, Ctrl, Shift, Alt, and Space, along with alphanumeric and symbol keys.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kc60se/keymaps/default/readme.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n  ,--------------------------------------------------------------------------.\n  | esc|  1 |  2 |  3 |  4 |  5 |  6 |  7 |  8 |  9 |  0 |  - |  = |  \\ |  ` |\n  |--------------------------------------------------------------------------|\n  | tab   |  Q |  W |  E |  R |  T |  Y |  U |  I |  O |  P |  [ |  ] | bksp |\n  |--------------------------------------------------------------------------|\n  | ctrl   |  A |  S |  D |  F |  G |  H |  J |  K |  L |  ; |  ' |  enter   |\n  |--------------------------------------------------------------------------|\n  | lshift   |  Z |  X |  C |  V |  B |  N |  M |  , |  . |  / | rshift | fn0|\n  `--------------------------------------------------------------------------'\n         |lalt| fn0   |               space              | rgui  |ralt|\n         `------------------------------------------------------------'\n```\n\n----------------------------------------\n\nTITLE: Configuring DAC Waveform (config.h)\nDESCRIPTION: Defines the waveform to be used with the `dac_additive` audio driver. You can select from sine, triangle, trapezoid, or square waveforms by defining the corresponding macro in `config.h`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/audio.md#_snippet_6\n\nLANGUAGE: c\nCODE:\n```\n#define AUDIO_DAC_SAMPLE_WAVEFORM_SINE\n#define AUDIO_DAC_SAMPLE_WAVEFORM_TRIANGLE\n#define AUDIO_DAC_SAMPLE_WAVEFORM_TRAPEZOID\n#define AUDIO_DAC_SAMPLE_WAVEFORM_SQUARE\n```\n\n----------------------------------------\n\nTITLE: Draw Image with `qp_drawimage` and `qp_drawimage_recolor` in C\nDESCRIPTION: The `qp_drawimage` and `qp_drawimage_recolor` functions draw an image on the display. `qp_drawimage` draws the image at a specified location. `qp_drawimage_recolor` allows for recoloring monochrome-based images.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/quantum_painter.md#_snippet_64\n\nLANGUAGE: c\nCODE:\n```\nbool qp_drawimage(painter_device_t device, uint16_t x, uint16_t y, painter_image_handle_t image);\nbool qp_drawimage_recolor(painter_device_t device, uint16_t x, uint16_t y, painter_image_handle_t image, uint8_t hue_fg, uint8_t sat_fg, uint8_t val_fg, uint8_t hue_bg, uint8_t sat_bg, uint8_t val_bg);\n```\n\n----------------------------------------\n\nTITLE: Flashing Iris Keyboard Firmware\nDESCRIPTION: This command flashes the default firmware to the Iris Rev. 6 keyboard. It requires a configured build environment and a connected keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keebio/iris/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake keebio/iris/rev6:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing IDOBAO ID87 QMK Firmware\nDESCRIPTION: This command builds and flashes the default QMK firmware for the IDOBAO ID87 keyboard (version 1) onto the board. It requires a properly configured QMK build environment and a connected keyboard. The board must be in bootloader mode for the flashing to succeed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/idobao/id87/v1/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake idobao/id87/v1:default:flash\n```\n\n----------------------------------------\n\nTITLE: Enabling AW20216S Driver in rules.mk\nDESCRIPTION: This snippet shows how to enable the AW20216S driver by adding the necessary paths and source files to the `rules.mk` file. This configuration ensures that the driver code is included during the build process and that the SPI driver is enabled.  Dependencies: Requires the `DRIVER_PATH` variable to be defined.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/aw20216s.md#_snippet_0\n\nLANGUAGE: Make\nCODE:\n```\nCOMMON_VPATH += $(DRIVER_PATH)/led\nSRC += aw20216s.c\nSPI_DRIVER_REQUIRED = yes\n```\n\n----------------------------------------\n\nTITLE: Defining the FN1 Layer Keymap\nDESCRIPTION: This snippet defines the FN1 layer keymap for the Navpad 1.0.  It shows the key assignments when the FN1 layer is active. KC_TRNS indicates a transparent key, which passes through the keycode from the layer below. S(KC_ENT) represents Shift+Enter.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/yushakobo/navpad/10/keymaps/default/readme.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n   ,-------------------------------. ,-------.\n   | QK_BOOT  | EE_CLR   | KC_NO   | | KC_NO |\n   |----------+----------+----------+-------------------------------------------------.\n   | KC_NO    | KC_NO    | KC_NO    | KC_NUM   | KC_QUOT   | KC_PEQL  | KC_NO         |\n   |----------+----------+----------+----------+-----------+----------+---------------|\n   | KC_CAPS  | KC_NUM   | KC_SCRL  | S(KC_9)  | KC_UP     | S(KC_0)  | S(KC_SPC)     |\n   `--------------------------------+----------+-----------+----------+---------------|\n                                    | KC_LEFT  | KC_BTN3   | KC_RGHT  | S(KC_SPC)     |\n   ,--------------------------------+----------+-----------+----------+---------------|\n   | KC_TRNS  | S(KC_ENT)| KC_TRNS  | KC_BSPC  | KC_DOWN   | KC_DEL   | KC_TRNS       |\n   |----------+----------+----------+----------+-----------+----------+---------------|\n   | KC_BTN1  | KC_ENT   |S(KC_SPC)|LT(2,KC_SPC)|KC_SPC    | KC_COMM  | KC_TRNS       |\n   '----------------------------------------------------------------------------------`\n```\n\n----------------------------------------\n\nTITLE: Building KBD67 rev2 Firmware with QMK\nDESCRIPTION: This command builds the default keymap for the KBD67 rev2 keyboard using the QMK firmware. It requires the QMK build environment to be set up beforehand.  The resulting firmware can then be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kbdfans/kbd67/rev2/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake kbdfans/kbd67/rev2:default\n```\n\n----------------------------------------\n\nTITLE: Flashing bat43 Keyboard Firmware\nDESCRIPTION: This command flashes the compiled firmware to the bat43 keyboard. It uses the QMK build environment and the 'make' command with the target specified as 'dailycraft/bat43:default:flash'.  The keyboard needs to be in bootloader mode for this command to work.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/dailycraft/bat43/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake dailycraft/bat43:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware on PT60 Keyboard\nDESCRIPTION: These commands are used to flash the compiled QMK firmware onto the Prototypist PT60 keyboard. The `:flash` target tells the `make` command to both build the firmware and flash it to the keyboard using the appropriate flashing tool. The keyboard needs to be in bootloader mode for the flashing to be successful.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/prototypist/pt60/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake prototypist/pt60:default:flash\n```\n\nLANGUAGE: make\nCODE:\n```\nmake prototypist/pt60:via:flash\n```\n\nLANGUAGE: make\nCODE:\n```\nmake prototypist/pt60:default_ansi:flash\n```\n\n----------------------------------------\n\nTITLE: Adding a new layer definition in keymap.c (QMK)\nDESCRIPTION: This code snippet shows how to add a new layer definition in the `keymap.c` file of the QMK firmware. The new definition assigns a number to the new layer.  It's required for adding new layers to the keyboard layout.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/gamenum/readme.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#define OSY 2\n#define NAMEHERE 3\n```\n\n----------------------------------------\n\nTITLE: Building Ortholinear Layout with QMK\nDESCRIPTION: This command builds the QMK firmware for the Ave keyboard with an ortholinear layout. It uses the `make` command with the specified target `kingly_keys/ave/ortho:default`.  It assumes that the QMK build environment has been set up properly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kingly_keys/ave/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake kingly_keys/ave/ortho:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Right Side Firmware - Make Command\nDESCRIPTION: This command builds and flashes the firmware specifically for the right side of the Split-Cloud keyboard. It is necessary to set the handedness of each side of the split keyboard using EEPROM.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/split_cloud/readme.md#_snippet_2\n\nLANGUAGE: make\nCODE:\n```\nmake handwired/split_cloud:default:avrdude-split-right\n```\n\n----------------------------------------\n\nTITLE: Customizing Zygomorph with rules.mk\nDESCRIPTION: This snippet showcases the `rules.mk` file used for customizing the Zygomorph keyboard within the QMK firmware. It allows enabling or disabling various features like Bootmagic, Mouse keys, Extra keys, Console, RGB lighting, and more.  Modifying these variables affects the keyboard's functionality and firmware size.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/rgbkb/zygomorph/keymaps/default/readme.md#_snippet_0\n\nLANGUAGE: QMK\nCODE:\n```\n# Variables you can set for Zygomorph\n\nBOOTMAGIC_ENABLE = no       # Enable Bootmagic Lite\nMOUSEKEY_ENABLE = no        # Mouse keys(+4700)\nEXTRAKEY_ENABLE = yes       # Audio control and System control(+450)\nCONSOLE_ENABLE = yes        # Console for debug(+400)\nCOMMAND_ENABLE = no         # Commands for debug and configuration\nNKRO_ENABLE = no\nRGBLIGHT_ENABLE = yes       # Enable global lighting effects. Do not enable with RGB Matrix\nRGB_MATRIX_ENABLE = no      # Enable per-key coordinate based RGB effects. Do not enable with RGBlight (+8500)\nRGB_MATRIX_KEYPRESSES = no  # Enable reactive per-key effects. Can be very laggy (+1500)\nRGBLIGHT_FULL_POWER = yes   # Allow maximum RGB brightness. Otherwise, limited to a safe level for a normal USB-A port\nSWAP_HANDS_ENABLE = no      # Enable one-hand typing\nENCODER_ENABLE = yes        # Enable rotary encoder (+90)\nOLED_ENABLE = yes\nIOS_DEVICE_ENABLE = no      # Limit max brightness to connect to IOS device (iPad,iPhone)\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware to 1upSuper16v3\nDESCRIPTION: This command builds and flashes the default firmware to the 1upSuper16v3 keyboard. It uses the `make` command with the `:flash` target. Ensure the QMK build environment is correctly configured and the keyboard is in bootloader mode prior to flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/1upkeyboards/1upsuper16v3/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake 1upkeyboards/1upsuper16v3:default:flash\n```\n\n----------------------------------------\n\nTITLE: ASCII Glyph Table Structure Definition in C\nDESCRIPTION: This code defines the structure for the ASCII glyph table in the QMK Font Format (QFF). It contains an array of 95 glyph entries (0x20 to 0x7E).  Each glyph entry is a `uint24_t` value encoding both the glyph width and the offset to the glyph data within the font data block. This block, if present, immediately follows the font descriptor block.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/quantum_painter_qff.md#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n#define QFF_GLYPH_WIDTH_BITS 6\n#define QFF_GLYPH_WIDTH_MASK ((1<<QFF_GLYPH_WIDTH_BITS)-1)\n#define QFF_GLYPH_OFFSET_BITS 18\n#define QFF_GLYPH_OFFSET_MASK (((1<<QFF_GLYPH_OFFSET_BITS)-1) << QFF_GLYPH_WIDTH_BITS)\n\ntypedef struct __attribute__((packed)) qff_ascii_glyph_table_v1_t {\n    qgf_block_header_v1_t header;  // = { .type_id = 0x01, .neg_type_id = (~0x01), .length = 285 }\n    uint24_t glyph[95];            // 95 glyphs, 0x20..0x7E, see bits/masks above for values\n} qff_ascii_glyph_table_v1_t;\n// _Static_assert(sizeof(qff_ascii_glyph_table_v1_t) == (sizeof(qgf_block_header_v1_t) + 285), \"qff_ascii_glyph_table_v1_t must be 290 bytes in v1 of QFF\");\n```\n\n----------------------------------------\n\nTITLE: Combo Definition in `combos.def` - C\nDESCRIPTION: This snippet demonstrates the syntax for defining combos in the `combos.def` file. It showcases different combo types, including basic keycodes, modifiers, and string sending. The COMB macro defines simple keycode combos, while SUBS sends strings. These definitions are processed by the `g/keymap_combo.h` macro.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/combo.md#_snippet_14\n\nLANGUAGE: c\nCODE:\n```\n// Alternate reference layers by layer\n//               Layer     Reference layer\nCOMBO_REF_LAYER(_DVORAK, _QWERTY)  // reference the qwerty layer for dvorak.\nCOMBO_REF_LAYER(_NAV, _NAV) // explicit reference to self instead of the default.\n\n//   name     result    chord keys\nCOMB(AB_ESC,   KC_ESC,   KC_A, KC_B)\nCOMB(JK_TAB,   KC_TAB,   KC_J, KC_K)\nCOMB(JKL_SPC,  KC_SPC,   KC_J, KC_K, KC_L)\nCOMB(BSSL_CLR, KC_NO,    KC_BSPC, KC_LSFT) // using KC_NO as the resulting keycode is the same as COMBO_ACTION before.\nCOMB(QW_UNDO,  C(KC_Z),  KC_Q, KC_W)\nSUBS(TH_THE,   \"the\",    KC_T, KC_H)\n...\n```\n\n----------------------------------------\n\nTITLE: Example Compile Usage 1 - qmk compile\nDESCRIPTION: This example demonstrates compiling the default keymap for the planck/rev6 keyboard after navigating to the appropriate directory.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/cli_commands.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ qmk config compile.keymap=default\n$ cd ~/qmk_firmware/keyboards/planck/rev6\n$ qmk compile\nΨ Compiling keymap with make planck/rev6:default\n...\n```\n\n----------------------------------------\n\nTITLE: Building Planck Firmware with Make\nDESCRIPTION: This code snippet demonstrates how to build the default firmware for the Planck keyboard (rev1) using the `make` command. It requires a properly configured QMK build environment. The output is the compiled firmware ready to be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/planck/rev1/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake planck/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Swapping Pins in config.h (QMK)\nDESCRIPTION: This code snippet provides a workaround for PCB revisions of the Ferris Sweep keyboard where the pins for certain keys (Q and B, or P and N) are swapped. It redefines `DIRECT_PINS` and `DIRECT_PINS_RIGHT` in the keymap's `config.h` file to remap the pins `E6` and `D7` in the firmware, correcting the key assignments. This snippet is crucial for users with specific PCB revisions to ensure proper key functionality. It requires an understanding of the keymap structure and `config.h` file within the QMK firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ferris/sweep/readme.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#undef DIRECT_PINS\n#define DIRECT_PINS { \\\n    { D7, F7, F6, F5, F4 }, \\\n    { B1, B3, B2, B6, D3 }, \\\n    { D1, D0, D4, C6, E6 }, \\\n    { B4, B5, NO_PIN, NO_PIN, NO_PIN } \\\n}\n#undef DIRECT_PINS_RIGHT\n#define DIRECT_PINS_RIGHT { \\\n    { F4, F5, F6, F7, D7 }, \\\n    { D3, B6, B2, B3, B1 }, \\\n    { E6, C6, D4, D0, D1 }, \\\n    { B5, B4, NO_PIN, NO_PIN, NO_PIN } \\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Debounce Time in QMK config.h\nDESCRIPTION: This code snippet defines the debounce delay in milliseconds when reading the value of a pin in QMK firmware (default is 5ms). This setting is configured in the `config.h` file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/config_options.md#_snippet_25\n\nLANGUAGE: c\nCODE:\n```\n#define DEBOUNCE 5\n```\n\n----------------------------------------\n\nTITLE: Building Honeycomb Firmware with Make\nDESCRIPTION: This code snippet shows the command to build the Honeycomb keyboard firmware using the `make` command. It also shows an alternative command to automatically flash the controller using `avrdude`. The `make` utility is required, and the QMK environment must be set up correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keyhive/honeycomb/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake keyhive/honeycomb:default\n# or use this to automatically flash the controller\nmake keyhive/honeycomb:default:avrdude\n```\n\n----------------------------------------\n\nTITLE: Flashing QCK75 Firmware\nDESCRIPTION: This command flashes the compiled firmware onto the QCK75/v1 keyboard.  It requires a connected keyboard and appropriate drivers installed for the keyboard's bootloader. The command combines the build and flashing steps in a single action.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/qck75/v1/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake qck75/v1:default:flash\n```\n\n----------------------------------------\n\nTITLE: Git Checkout Develop\nDESCRIPTION: This snippet outlines the git commands to checkout the develop branch, pull latest changes, edit the readme, roll up changelog, commit the changes, and push to the upstream develop branch.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/breaking_changes.md#_snippet_0\n\nLANGUAGE: git\nCODE:\n```\ngit checkout develop\n```\n\nLANGUAGE: git\nCODE:\n```\ngit pull --ff-only\n```\n\nLANGUAGE: git\nCODE:\n```\nEdit `readme.md`\nRemove the notes about `develop`\n```\n\nLANGUAGE: git\nCODE:\n```\nRoll up the ChangeLog into one file.\n```\n\nLANGUAGE: git\nCODE:\n```\ngit commit -m 'Merge point for <DATE> Breaking Change'\n```\n\nLANGUAGE: git\nCODE:\n```\ngit push upstream develop\n```\n\n----------------------------------------\n\nTITLE: Building BM60HSRGB_ISO Firmware (rev2)\nDESCRIPTION: This command builds the default firmware for the rev2 version of the BM60HSRGB_ISO keyboard using the QMK build environment. It compiles the keymap and necessary drivers into a firmware image.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kprepublic/bm60hsrgb_iso/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake kprepublic/bm60hsrgb_iso/rev2:default\n```\n\n----------------------------------------\n\nTITLE: Flashing HAD60 Firmware (Makefile)\nDESCRIPTION: This command compiles and flashes the default keymap for the HAD60 keyboard using the QMK Firmware build environment. It requires the QMK build environment to be set up correctly, and the keyboard to be in a flashable state. The output is the keyboard running the newly flashed firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/senselessclay/had60/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake senselessclay/had60:default:flash\n```\n\n----------------------------------------\n\nTITLE: Selecting PWM Driver in rules.mk\nDESCRIPTION: This snippet demonstrates how to select the PWM driver for WS2812 LEDs in the `rules.mk` file.  This driver is ARM-only and utilizes the PWM peripheral and DMA to offload processing from the CPU. This allows more precise control of the LED brightness and color.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/ws2812.md#_snippet_6\n\nLANGUAGE: Make\nCODE:\n```\nWS2812_DRIVER = pwm\n```\n\n----------------------------------------\n\nTITLE: Flashing QMK Firmware\nDESCRIPTION: This command flashes the QMK firmware to the specified keyboard. It uses the `qmk flash` command with the `-kb` option to specify the keyboard (ez_maker/directpins/teensy_32) and the `-km` option to specify the keymap (default).\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ez_maker/directpins/teensy_32/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nqmk flash -kb ez_maker/directpins/teensy_32 -km default\n```\n\n----------------------------------------\n\nTITLE: Building SL40 Keyboard Firmware with Make\nDESCRIPTION: This command builds the firmware for the SL40 keyboard using the `make` command. It specifies the keyboard layout as `wsk/sl40` and the keymap as `default`. It assumes that the QMK build environment has already been set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wsk/sl40/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake wsk/sl40:default\n```\n\n----------------------------------------\n\nTITLE: Define External Flash Sector Size (C)\nDESCRIPTION: This configuration option defines the sector size of the external FLASH chip in bytes. Sectors are the smallest erasable units in most FLASH chips. The sector size is critical for erase operations and should match the value specified in the FLASH chip's datasheet.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/flash.md#_snippet_3\n\nLANGUAGE: C\nCODE:\n```\n#define EXTERNAL_FLASH_SECTOR_SIZE           (4 * 1024)\n```\n\n----------------------------------------\n\nTITLE: Defining Slave-to-Master Data Structure\nDESCRIPTION: This code defines a structure for data sent from the slave side to the master side during custom data synchronization. It contains an integer `s2m_data`. It is used for custom data sync.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/split_keyboard.md#_snippet_28\n\nLANGUAGE: c\nCODE:\n```\ntypedef struct _slave_to_master_t {\n    int s2m_data;\n} slave_to_master_t;\n```\n\n----------------------------------------\n\nTITLE: Building Choco60 Firmware (Makefile)\nDESCRIPTION: This command builds the default firmware for the Choco60 keyboard, specifically the rev1 version. It utilizes the `make` command within the QMK firmware environment. Before running this command, ensure the QMK build environment is properly configured.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/recompile_keys/choco60/rev1/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake choco60/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Including Keyboard Header in Keymap\nDESCRIPTION: This code snippet demonstrates the use of `QMK_KEYBOARD_H` to include the keyboard's header file in a keyboard-agnostic way. Instead of directly including a specific header file (e.g., `#include \"planck.h\"`), this includes the correct header based on the keyboard being compiled.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/feature_layouts.md#_snippet_6\n\nLANGUAGE: c\nCODE:\n```\n#include QMK_KEYBOARD_H\n```\n\n----------------------------------------\n\nTITLE: Building MYSTERIUM keyboard firmware\nDESCRIPTION: This command builds the default firmware for the MYSTERIUM keyboard using the QMK build environment. It assumes that the QMK build environment has been properly set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/coseyfannitutti/mysterium/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake coseyfannitutti/mysterium:default\n```\n\n----------------------------------------\n\nTITLE: Building Keychron V3 Firmware (QMK)\nDESCRIPTION: This command builds the default ANSI layout firmware for the Keychron V3 keyboard.  It uses the QMK make system to compile the firmware. No specific dependencies are listed but a functioning QMK build environment is required.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keychron/v3/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake keychron/v3/ansi:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Gray Studio Space65 R3 Firmware\nDESCRIPTION: This command builds and flashes the default firmware to the Gray Studio Space65 R3 keyboard. It requires the QMK build environment to be set up correctly and uses the specified configuration to compile and upload the firmware to the keyboard's microcontroller using the appropriate flashing tool.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/gray_studio/space65r3/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake gray_studio space65r3:default:flash\n```\n\n----------------------------------------\n\nTITLE: Fixing unstable column read on 3.3V Pro Micro\nDESCRIPTION: This C code snippet updates the delay in the `matrix.c` file to improve read stability when using a 3.3V Pro Micro. It increases the delay to 300 microseconds, ensuring reliable column reading. This resolves issues with weird characters appearing in certain columns.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/lets_split/readme.md#_snippet_5\n\nLANGUAGE: c\nCODE:\n```\n// _delay_us(30);  // without this wait read unstable value.\n_delay_us(300);  // without this wait read unstable value.\n```\n\n----------------------------------------\n\nTITLE: Flashing YMD96 Firmware\nDESCRIPTION: This command builds and flashes the default firmware for the YMD96 keyboard. It requires a properly configured QMK build environment and the necessary flashing tools installed. The keyboard needs to be in flashing mode for this command to work.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ymdk/ymd96/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake ymdk/ymd96:default:flash\n```\n\n----------------------------------------\n\nTITLE: Calculating Surface Buffer Size in C\nDESCRIPTION: This C code snippet calculates the required buffer size (in bytes) for a surface using the `SURFACE_REQUIRED_BUFFER_BYTE_SIZE` macro, based on the width, height, and bit depth. This macro should be used when allocating the memory buffer for the surface.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/quantum_painter.md#_snippet_38\n\nLANGUAGE: c\nCODE:\n```\n// Buffer required for a 240x80 16bpp surface:\nuint8_t framebuffer[SURFACE_REQUIRED_BUFFER_BYTE_SIZE(240, 80, 16)];\n```\n\n----------------------------------------\n\nTITLE: Input Pins Configuration Example C\nDESCRIPTION: This C code snippet illustrates how to define input pins (columns or rows, depending on DIODE_DIRECTION) for the matrix scanning process in QMK Firmware. It uses the MATRIX_IN_PORTS and MATRIX_IN_PINS macros to define the ports and pins used for input signals.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/symmetric70_proto/matrix_fast/readme.md#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n// list of INPUT ports\n#define MATRIX_IN_PORTS (Port_F, MCU_GPIO, F0), (Port_B, MCU_GPIO, B0)\n// list of INPUT pins\n#define MATRIX_IN_PINS \\\n    (0, Port_F, 4), \\\n    (1, Port_F, 5), \\\n    (2, Port_F, 6), \\\n    (3, Port_F, 7), \\\n    (4, Port_B, 1), \\\n    (5, Port_B, 3)\n```\n\n----------------------------------------\n\nTITLE: Building DB60 (hotswap) Firmware with QMK\nDESCRIPTION: This command builds the firmware for the hotswap ANSI CannonKeys DB60 keyboard using the QMK build environment. It is designed for the Bakeneko keyboards from CannonKeys. The `default` keyword specifies the default keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cannonkeys/db60/readme.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmake cannonkeys/db60/hotswap:default\n```\n\n----------------------------------------\n\nTITLE: Combined Keypress Example (C)\nDESCRIPTION: This example types Ctrl+A followed by Ctrl+C, without releasing Ctrl in between.  It demonstrates using the `SS_LCTL` macro to send a combination of a modifier key (left control) and other characters.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/send_string.md#_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nSEND_STRING(SS_LCTL(\"ac\"));\n```\n\n----------------------------------------\n\nTITLE: Defining DIP Switch Pins in config.h (GPIO)\nDESCRIPTION: This snippet demonstrates how to define the GPIO pins connected to the DIP switches in the `config.h` file.  The `DIP_SWITCH_PINS` macro is used to specify the pins. `DIP_SWITCH_PINS_RIGHT` can be defined for split keyboards.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/dip_switch.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n// Connects each switch in the dip switch to the GPIO pin of the MCU\n#define DIP_SWITCH_PINS { B14, A15, A10, B9 }\n// For split keyboards, you can separately define the right side pins\n#define DIP_SWITCH_PINS_RIGHT { ... }\n```\n\n----------------------------------------\n\nTITLE: Enabling RGB Underglow in rules.mk\nDESCRIPTION: This snippet demonstrates how to enable RGB underglow by modifying the `LED_UNDERGLOW_ENABLE` option in `rules.mk`. Setting it to `yes` activates the RGB underglow feature.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/helix/pico/keymaps/default/readme_jp.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nLED_UNDERGLOW_ENABLE = yes   # LED underglow (Enable WS2812 RGB underlight.)\n```\n\n----------------------------------------\n\nTITLE: Compiling Jot50 Firmware\nDESCRIPTION: This command compiles the default keymap for the Jot50 keyboard using the QMK build environment. It assumes that the QMK build environment is correctly set up. The output will be a firmware file that can be flashed to the Arduino Pro Micro.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/jot50/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake handwired/jot50:default\n```\n\n----------------------------------------\n\nTITLE: Keyboard Matrix Diagram\nDESCRIPTION: This diagram visually represents the key matrix of the Prototypist J-01 Rev1 keyboard. It shows the row and column connections for each key, along with variations in the spacebar and left shift configurations.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/prototypist/j01/matrix_diagram.md#_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n                                                              ┌───────┐\n                                                 2u Backspace │0F     │\n                                                              └───────┘\n┌───┬───┐ ┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┐ ┌───┐\n│00 │01 │ │02 │03 │04 │05 │06 │07 │08 │09 │0A │0B │0C │0D │0E │0F │0G │ │0H │\n├───┼───┤ ├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴───┤ ├───┤      ┌─────┐\n│10 │11 │ │12   │13 │14 │15 │16 │17 │18 │19 │1A │1B │1C │1D │1E │1F   │ │1H │      │     │\n├───┼───┤ ├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴─────┤ ├───┤   ┌──┴┐2F  │\n│20 │21 │ │22    │23 │24 │25 │26 │27 │28 │29 │2A │2B │2C │2D │2F      │ │2H │   │2E │    │\n├───┼───┤ ├────┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴────┬───┘ ├───┤   └───┴────┘\n│30 │31 │ │32  │33 │34 │35 │36 │37 │38 │39 │3A │3B │3C │3D │3E    │┌───┐│3H │    ISO Enter\n├───┼───┤ ├────┴┬──┴┬──┴──┬┴───┴───┼───┴───┴──┬┴───┴┬──┴┬──┴──┬───┘│3G │└───┘\n│40 │41 │ │42   │43 │44   │46      │48        │4B   │4C │4D   │┌───┼───┼───┐\n└───┴───┘ └─────┴───┴─────┴────────┴──────────┴─────┴───┴─────┘│4F │4G │4H │\n                                                               └───┴───┴───┘\n          ┌────────┐\n          │32      │ 2.25u LShift\n          └────────┘\n          ┌────┬───┬────┬───────────────────────┬────┬───┬────┐\n          │42  │43 │44  │48                     │4B  │4C │4D  │ \"Standard\" (6u Space)\n          └────┴───┴────┴───────────────────────┴────┴───┴────┘\n          ┌─────┬─────┬───────────────────────────┬─────┬─────┐\n          │42   │43   │48                         │4C   │4D   │ WKL\n          └─────┴─────┴───────────────────────────┴─────┴─────┘\n          ┌────┬────┬────┬────────────────────────┬─────┬─────┐\n          │42  │43  │44  │48                      │4C  │4D  │ RWKL\n          └────┴────┴────┴────────────────────────┴─────┴─────┘\n```\n\n----------------------------------------\n\nTITLE: Flashing TADA68 Firmware (Win/Mac/Linux)\nDESCRIPTION: This command builds and flashes the default firmware for the TADA68 keyboard using the QMK build environment.  It creates and flashes a .bin file using the dfu-programmer tool. Requires a properly configured QMK environment. This command builds the firmware, converts it to a compatible format and flashes it onto the device. It needs to be run from the root QMK directory.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/tada68/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake tada68:default:flashbin\n```\n\n----------------------------------------\n\nTITLE: Compiling Technika QMK Firmware\nDESCRIPTION: This snippet demonstrates how to compile the Technika QMK firmware with the default keymap using the `make` command. It assumes that the QMK build environment has been set up correctly. The command invokes the makefile to build the firmware for the `technika` keyboard with the `default` keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/technika/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake technika:default\n```\n\n----------------------------------------\n\nTITLE: Building capsule65i Keyboard Firmware (QMK)\nDESCRIPTION: This command is used to build the default firmware for the capsule65i keyboard within the QMK Firmware environment. It requires a properly set up build environment as detailed in the QMK documentation. The output will be a firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/pixelspace/capsule65i/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake pixelspace/capsule65i:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Default Firmware - QMK\nDESCRIPTION: This command compiles and flashes the default firmware for the humble40 keyboard. It requires a correctly configured QMK build environment and a connected keyboard in bootloader mode.  The keyboard will reboot with the new firmware after successful flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/eyeohdesigns/humble40/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake eyeohdesigns/humble40:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Sinc Keyboard Firmware with QMK\nDESCRIPTION: This command builds and flashes the default firmware to the Keebio Sinc Rev1 keyboard.  It assumes the QMK build environment is properly configured and the keyboard is connected in flashing mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keebio/sinc/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake keebio/sinc/rev1:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing QMK Firmware to Darmoshark K3\nDESCRIPTION: This command builds and flashes the default QMK firmware for the Darmoshark K3 keyboard. It requires a properly configured QMK build environment and a connected keyboard in bootloader mode. The command programs the firmware onto the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/darmoshark/k3/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake darmoshark/k3:default:flash\n```\n\n----------------------------------------\n\nTITLE: Split Keyboard Layout Example (C)\nDESCRIPTION: This snippet shows an example of a split keyboard layout definition in a `<keyboard>.h` file. It helps to determine row and column locations of the right and left hand keys.  It demonstrates the structure of how keys are defined in the matrix.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/bootmagic.md#_snippet_4\n\nLANGUAGE: c\nCODE:\n```\n#define LAYOUT_split_3x5_2( \\\n        L01, L02, L03, L04, L05,   R01, R02, R03, R04, R05, \\\n        L06, L07, L08, L09, L10,   R06, R07, R08, R09, R10, \\\n        L11, L12, L13, L14, L15,   R11, R12, R13, R14, R15, \\\n                       L16, L17,   R16, R17                 \\\n    ) \\\n    { \\\n        { L01, L02, L03, L04, L05 }, \\\n        { L06, L07, L08, L09, L10 }, \\\n        { L11, L12, L13, L14, L15 }, \\\n        { L16, L17, KC_NO, KC_NO, KC_NO }, \\\n        { R01, R02, R03, R04, R05 }, \\\n        { R06, R07, R08, R09, R10 }, \\\n        { R11, R12, R13, R14, R15 }, \\\n        { R16, R17, KC_NO, KC_NO, KC_NO }  \\\n    }\n```\n\n----------------------------------------\n\nTITLE: Using Modifiers as Layer Keys (C)\nDESCRIPTION: This snippet demonstrates using modifier keys (`rGUI` + `rAlt`) as a momentary layer key. It uses a custom function `momentary_layer` to toggle a layer on and off when the modifiers are pressed and released. It utilizes a `key_override_t` struct directly for advanced customization.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/key_overrides.md#_snippet_3\n\nLANGUAGE: c\nCODE:\n```\n// This is called when the override activates and deactivates. Enable the fn layer on activation and disable on deactivation\nbool momentary_layer(bool key_down, void *layer) {\n    if (key_down) {\n        layer_on((uint8_t)(uintptr_t)layer);\n    } else {\n        layer_off((uint8_t)(uintptr_t)layer);\n    }\n\n    return false;\n}\n\nconst key_override_t fn_override = {.trigger_mods          = MOD_BIT(KC_RGUI) | MOD_BIT(KC_RCTL),                       //\n                                   .layers                 = ~(1 << LAYER_FN),                                          //\n                                   .suppressed_mods        = MOD_BIT(KC_RGUI) | MOD_BIT(KC_RCTL),                       //\n                                   .options                = ko_option_no_unregister_on_other_key_down,                 //\n                                   .negative_mod_mask      = (uint8_t) ~(MOD_BIT(KC_RGUI) | MOD_BIT(KC_RCTL)),          //\n                                   .custom_action          = momentary_layer,                                           //\n                                   .context                = (void *)LAYER_FN,                                          //\n                                   .trigger                = KC_NO,                                                     //\n                                   .replacement            = KC_NO,                                                     //\n                                   .enabled                = NULL};\n```\n\n----------------------------------------\n\nTITLE: Tap Hold Implementation with process_record_user in QMK\nDESCRIPTION: This code implements a tap-hold functionality using `process_record_user()` to detect key releases. It sends a different keycode based on whether the key was tapped or held. It defines a struct `tap_dance_tap_hold_t` to store the tap and hold keycodes, and uses the `process_record_user` to trigger the tap action on key release if the tap dance state indicates a tap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/tap_dance.md#_snippet_6\n\nLANGUAGE: c\nCODE:\n```\ntypedef struct {\n    uint16_t tap;\n    uint16_t hold;\n    uint16_t held;\n} tap_dance_tap_hold_t;\n\nbool process_record_user(uint16_t keycode, keyrecord_t *record) {\n    tap_dance_action_t *action;\n\n    switch (keycode) {\n        case TD(CT_CLN):  // list all tap dance keycodes with tap-hold configurations\n            action = &tap_dance_actions[QK_TAP_DANCE_GET_INDEX(keycode)];\n            if (!record->event.pressed && action->state.count && !action->state.finished) {\n                tap_dance_tap_hold_t *tap_hold = (tap_dance_tap_hold_t *)action->user_data;\n                tap_code16(tap_hold->tap);\n            }\n    }\n    return true;\n}\n```\n\n----------------------------------------\n\nTITLE: Controlling Combo Activation by Holding\nDESCRIPTION: This code snippet illustrates how to control whether a combo must be held down to activate using `COMBO_MUST_HOLD_PER_COMBO` and the `get_combo_must_hold` function. The function checks if the combo's keycode is a modifier or a momentary layer key and returns `true` if so, indicating that the combo must be held. Alternatively, the behavior can be customized for each combo index.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/combo.md#_snippet_6\n\nLANGUAGE: c\nCODE:\n```\n#ifdef COMBO_MUST_HOLD_PER_COMBO\nbool get_combo_must_hold(uint16_t combo_index, combo_t *combo) {\n    // Same as above, decide by keycode, the combo index, or by the keys in the chord.\n\n    if (KEYCODE_IS_MOD(combo->keycode) || \n        (combo->keycode >= QK_MOMENTARY && combo->keycode <= QK_MOMENTARY_MAX) // MO(kc) keycodes\n        ) {\n        return true;\n    }\n\n    switch (combo_index) {\n        case COMBO_NAME_HERE:\n            return true;\n    }\n\n    return false;\n}\n#endif\n```\n\n----------------------------------------\n\nTITLE: Flashing B.mini Firmware with QMK\nDESCRIPTION: This command flashes the built firmware onto the B.mini keyboard. It requires the QMK build environment to be set up and the necessary flashing tools to be installed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/winkeyless/bmini/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake winkeyless/bmini:default:flash\n```\n\n----------------------------------------\n\nTITLE: Encoder Callback Update - Before Change - C\nDESCRIPTION: This code snippet demonstrates the original encoder callback function definition in QMK Firmware, prior to the change where the function return type was modified to `bool`. It shows how the `encoder_update_kb` function, which is a `void` function, calls the `encoder_update_user` function to handle encoder events. It illustrates the original structure before the necessary updates for compatibility with the new QMK Firmware version.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/ChangeLog/20210529.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nvoid encoder_update_kb(uint8_t index, bool clockwise) {\n    encoder_update_user(index, clockwise);\n}\n\nvoid encoder_update_user(uint8_t index, bool clockwise) {\n    if (index == 0) { /* First encoder */\n        if (clockwise) {\n            tap_code(KC_PGDN);\n        } else {\n            tap_code(KC_PGUP);\n        }\n    } else if (index == 1) { /* Second encoder */\n        if (clockwise) {\n            tap_code(KC_DOWN);\n        } else {\n            tap_code(KC_UP);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: OLED Configuration for Split Keyboards (C)\nDESCRIPTION: This snippet demonstrates how to configure OLED displays differently on a split keyboard.  The `oled_init_user` function rotates the display on the non-master side by 180 degrees. The `oled_task_user` function renders different content based on whether the keyboard is the master or not.  The `is_keyboard_master()` function from `split_util.h` determines which content to render.  This allows for different information or orientations on each half of the split keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/oled_driver.md#_snippet_6\n\nLANGUAGE: C\nCODE:\n```\n#ifdef OLED_ENABLE\noled_rotation_t oled_init_user(oled_rotation_t rotation) {\n    if (!is_keyboard_master()) {\n        return OLED_ROTATION_180;  // flips the display 180 degrees if offhand\n    }\n\n    return rotation;\n}\n\nbool oled_task_user(void) {\n    if (is_keyboard_master()) {\n        render_status();  // Renders the current keyboard state (layer, lock, caps, scroll, etc)\n    } else {\n        render_logo();  // Renders a static logo\n        oled_scroll_left();  // Turns on scrolling\n    }\n    return false;\n}\n#endif\n```\n\n----------------------------------------\n\nTITLE: Configuring USB IDs in info.json - JSON\nDESCRIPTION: This JSON snippet shows the new preferred way to specify USB Vendor ID, Product ID, Device Version, Manufacturer and Product Name in the `info.json` file.  This data-driven approach replaces the previous method of using `#define` statements in `config.h`. The `usb` object contains the `vid`, `pid`, and `device_version` keys, while `keyboard_name` and `manufacturer` are defined at the top level.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/ChangeLog/20220827.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"keyboard_name\": \"MyKeyboard\",\n    \"manufacturer\": \"Me\",\n    \"usb\": {\n        \"vid\": \"0x1234\",\n        \"pid\": \"0x5678\",\n        \"device_version\": \"0.0.1\"\n    },\n    // ... layouts, etc. ...\n}\n```\n\n----------------------------------------\n\nTITLE: Remapping Alt+Escape to Alt+Tab in QMK (C)\nDESCRIPTION: This code snippet demonstrates how to remap the Alt+Escape key combination to Alt+Tab in QMK firmware using the process_record_user function. It checks if only the Left Alt key is pressed and, if so, registers and unregisters the Tab keycode, effectively performing Alt+Tab. This example utilizes the get_mods() function to determine the current modifier state and register_code/unregister_code for sending keypresses.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/feature_advanced_keycodes.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool process_record_user(uint16_t keycode, keyrecord_t *record) {\n    switch (keycode) {\n\n    case KC_ESC:\n        // Detect the activation of only Left Alt\n        if (get_mods() == MOD_BIT(KC_LALT)) {\n            if (record->event.pressed) {\n                // No need to register KC_LALT because it's already active.\n                // The Alt modifier will apply on this KC_TAB.\n                register_code(KC_TAB);\n            } else {\n                unregister_code(KC_TAB);\n            }\n            // Do not let QMK process the keycode further\n            return false;\n        }\n        // Else, let QMK process the KC_ESC keycode as usual\n        return true;\n\n    }\n    return true;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Keyboard Layout Macro in .h file (C)\nDESCRIPTION: This code defines a keyboard layout macro in a `.h` file, representing a 17-key numpad. It utilizes preprocessor directives to create a reusable layout definition. The `LAYOUT` macro takes key names as input and arranges them in a matrix format. `KC_NO` is used to represent empty switch positions.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/reference_configurator_support.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#pragma once\n\n#define LAYOUT( \\\n    k00, k01, k02, k03, \\\n    k10, k11, k12, k13, \\\n    k20, k21, k22,      \\\n    k30, k31, k32, k33, \\\n    k40,      k42       \\\n  ) { \\\n    { k00, k01,   k02, k03   }, \\\n    { k10, k11,   k12, k13   }, \\\n    { k20, k21,   k22, KC_NO }, \\\n    { k30, k31,   k32, k33   }, \\\n    { k40, KC_NO, k42, KC_NO }  \\\n}\n```\n\n----------------------------------------\n\nTITLE: Building CB65 Firmware\nDESCRIPTION: This command builds the default firmware for the CherryB Studio CB65 keyboard. It uses the `make` command within the QMK firmware environment to compile the firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cherrybstudio/cb65/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake cherrybstudio/cb65:default\n```\n\n----------------------------------------\n\nTITLE: Handling Layer Switching and LEDs in keymap.c (QMK)\nDESCRIPTION: This code snippet demonstrates how to handle layer switching and control LEDs within the `process_record_user` function in the `keymap.c` file of the QMK firmware.  It checks which layer switch button is pressed and then sets the associated LED pins high or low to indicate the active layer. The pins for the LEDs need to be configured in `gamenum.c`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/gamenum/readme.md#_snippet_4\n\nLANGUAGE: c\nCODE:\n```\n  case KC_FN1:\n    if (record->event.pressed) {\n      PORTC &= ~(1 << 6); // PC6 goes low \n      PORTD |= (1<<4); //PD4 goes high\n    }\n    break;\n```\n\n----------------------------------------\n\nTITLE: Flashing Momokai Aurora Firmware (Makefile)\nDESCRIPTION: This command flashes the compiled firmware onto the Momokai Aurora keyboard. It requires the QMK build environment to be set up and the keyboard to be connected to the computer.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/momokai/aurora/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake momokai/aurora:default:flash\n```\n\n----------------------------------------\n\nTITLE: Enabling Legacy Magic Handling\nDESCRIPTION: Enables magic configuration handling for advanced keycodes (such as Mod Tap and Layer Tap). Older style configuration for these functions.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/config_options.md#_snippet_68\n\nLANGUAGE: C\nCODE:\n```\n#define LEGACY_MAGIC_HANDLING\n```\n\n----------------------------------------\n\nTITLE: Ignoring Backspace with Repeat Key (C)\nDESCRIPTION: This function, `remember_last_key_user`, allows configuring keys to be ignored by the Repeat Key feature. The example ignores the Backspace key, preventing it from being repeated. Returning `false` ignores the key, while `true` allows it to be repeated.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/repeat_key.md#_snippet_6\n\nLANGUAGE: c\nCODE:\n```\nbool remember_last_key_user(uint16_t keycode, keyrecord_t* record,\n                            uint8_t* remembered_mods) {\n    switch (keycode) {\n        case KC_BSPC:\n            return false;  // Ignore backspace.\n    }\n\n    return true;  // Other keys can be repeated.\n}\n```\n\n----------------------------------------\n\nTITLE: Matrix Diagram for wilba.tech WT60-G\nDESCRIPTION: This snippet represents the matrix diagram for the wilba.tech WT60-G keyboard. It visually maps the keys to their matrix coordinates, which are essential for defining the keyboard's keymap. The diagram includes labels for various layout options, such as ISO Enter and Tsangan/WKL/HHKB.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wilba_tech/wt60_g/matrix_diagram.md#_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n                                                    ┌───────┐\n                                       2u Backspace │0D     │\n                                                    └───────┘\n┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┐\n│00 │01 │02 │03 │04 │05 │06 │07 │08 │09 │0A │0B │0C │0D │2D │\n├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴───┤      ┌─────┐\n│10   │11 │12 │13 │14 │15 │16 │17 │18 │19 │1A │1B │1C │1D   │      │     │\n├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴─────┤   ┌──┴┐1D  │\n│20    │21 │22 │23 │24 │25 │26 │27 │28 │29 │2A │2B │2C      │   │2C │    │\n├────┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴────┬───┤   └───┴────┘\n│30  │31 │32 │33 │34 │35 │36 │37 │38 │39 │3A │3B │3C    │3D │    ISO Enter\n├────┼───┴┬──┴─┬─┴───┴───┴───┴───┴───┴──┬┴───┼───┴┬────┬┴───┤\n│40  │41  │42  │46                      │4A  │4B  │4C  │4D  │\n└────┴────┴────┴────────────────────────┴────┴────┴────┴────┘\n┌────────┐                                       ┌──────────┐\n│30      │ 2.25u LShift             2.75u RShift │3C        │\n└────────┘                                       └──────────┘\n┌─────┬───┬─────┬───────────────────────────┬─────┬───┬─────┐\n│40   │41 │42   │46                         │4B   │4C │4D   │ Tsangan/WKL/HHKB\n└─────┴───┴─────┴───────────────────────────┴─────┴───┴─────┘\n```\n\n----------------------------------------\n\nTITLE: Building Haven60 Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Haven60 keyboard using the QMK build environment.  It compiles the source code and creates a firmware image that can be flashed onto the keyboard.  Requires QMK build environment to be properly set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ah/haven60/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake ah/haven60:default\n```\n\n----------------------------------------\n\nTITLE: Setting LED Matrix Effect Mode without EEPROM (C)\nDESCRIPTION: This function sets the currently running LED matrix effect without writing it to EEPROM. The effect will not persist across resets.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/led_matrix.md#_snippet_19\n\nLANGUAGE: C\nCODE:\n```\nvoid led_matrix_mode_noeeprom(uint8_t mode)\n```\n\n----------------------------------------\n\nTITLE: Compiling Skeletyl Firmware with v2 and default keymap\nDESCRIPTION: This command compiles the QMK firmware for the Skeletyl keyboard with v2 shield (Elite-C) and default keymap. It uses the `qmk compile` command with specific parameters for the keyboard, version, and keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/bastardkb/skeletyl/readme.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nqmk compile -kb bastardkb/skeletyl/v2/elitec -km default\n```\n\n----------------------------------------\n\nTITLE: Flashing Chroma Firmware with QMK\nDESCRIPTION: This command flashes the compiled firmware to the Chroma keyboard using the QMK build environment. It requires a properly configured QMK build environment and a connected Chroma keyboard in a flashable state.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cipulot/chroma/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake cipulot/chroma:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware to Paraluman Keyboard\nDESCRIPTION: This command flashes the built firmware to the Paraluman keyboard using the default keymap. It requires a properly configured QMK build environment and a connected keyboard in a flashable state.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/nightly_boards/paraluman/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake nightly_boards/paraluman:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing the Binary_Monkey firmware\nDESCRIPTION: This command flashes the compiled QMK firmware onto the Binary_Monkey keyboard. The keyboard must be in bootloader mode before executing this command. Requires a configured QMK build environment and a connected keyboard in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/jkdlab/binary_monkey/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake jkdlab/binary_monkey:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Uno Firmware (QMK)\nDESCRIPTION: Flashes the compiled firmware onto the Keyhive Uno rev2 keyboard.  This command assumes the bootloader is already installed and accessible. Adjust the revision (`rev2`) if using the `rev1` version.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keyhive/uno/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake keyhive/uno/rev2:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Freyr Keyboard Firmware (QMK)\nDESCRIPTION: This command flashes the compiled firmware to the Freyr keyboard using the QMK build environment.  It uses the `make` command, specifying the keyboard, keymap, and the `flash` target. This requires the QMK build environment to be correctly configured and the keyboard to be in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/hnahkb/freyr/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake hnahkb/freyr:default:flash\n```\n\n----------------------------------------\n\nTITLE: Running Tests and Linting - Python\nDESCRIPTION: Executes the test suite for the QMK CLI using the `pytest` subcommand. This command runs the defined tests to ensure the code functions correctly and adheres to coding standards.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/cli_development.md#_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nqmk pytest\n```\n\n----------------------------------------\n\nTITLE: Building Default Firmware\nDESCRIPTION: This command builds the default firmware for the ilumkb/volcano660 keyboard.  It requires a properly configured QMK build environment and assumes the 'default' keymap is available. The output is a .hex or .bin file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ilumkb/volcano660/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake ilumkb/volcano660:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Keychron Q6 Firmware\nDESCRIPTION: This command builds and flashes the default ANSI layout firmware to the Keychron Q6 keyboard. It requires a properly configured QMK build environment and a compatible flashing tool.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keychron/q6/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake keychron/q6/ansi:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building ai03 Andromeda Firmware with QMK\nDESCRIPTION: This command builds the default keymap for the ai03 Andromeda keyboard using the QMK build environment. It requires a properly configured QMK build environment. The output will be the firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ai03/andromeda/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake ai03/andromeda:default\n```\n\n----------------------------------------\n\nTITLE: Update Scaling Registers - C\nDESCRIPTION: The `is31fl3743a_update_scaling_registers` function flushes the scaling register values to the IS31FL3743A LED driver. It must be called after modifying scaling registers using `is31fl3743a_set_scaling_register`. The driver index is passed as an argument.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/is31fl3743a.md#_snippet_11\n\nLANGUAGE: C\nCODE:\n```\nvoid is31fl3743a_update_scaling_registers(uint8_t index)\n```\n\n----------------------------------------\n\nTITLE: Defining Keyboard Layout: tkl_iso_tsangan_split_bs_rshift\nDESCRIPTION: This code snippet defines the keyboard layout `LAYOUT_tkl_iso_tsangan_split_bs_rshift`. It represents a Tenkeyless ISO layout with split Backspace, split Right Shift, and a Tsangan Bottom Row. This layout is used in QMK firmware to map physical keys to logical keycodes.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/layouts/default/tkl_iso_tsangan_split_bs_rshift/readme.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n# tkl_iso_tsangan_split_bs_rshift\n\n    LAYOUT_tkl_iso_tsangan_split_bs_rshift\n\n```\n\n----------------------------------------\n\nTITLE: Setting Configuration Values (Attribute Style) - Python\nDESCRIPTION: Illustrates how to set a configuration value using attribute-style access in the QMK CLI. This method utilizes dot notation to specify the section and key, offering a more concise syntax.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/cli_development.md#_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\ncli.config.<section>.<key> = <value>\n```\n\n----------------------------------------\n\nTITLE: Building Sugar Glider Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the mechwild/sugarglider keyboard. It leverages the QMK build environment to compile the keyboard's firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechwild/sugarglider/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake mechwild/sugarglider:default\n```\n\n----------------------------------------\n\nTITLE: Matrix Direct Pin Configuration - JSON\nDESCRIPTION: This JSON snippet demonstrates how to configure the matrix pins in a QMK firmware configuration using the `direct` method. It represents a 2-dimensional array where each inner array corresponds to a row and contains the GPIO pin assignments for each column in that row. This configuration is used for direct matrix scanning where each key switch has a dedicated pin.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/reference_info_json.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n[\n    [\"A0\", \"A1\", \"A2\"],\n    [\"B0\", \"B1\", \"B2\"],\n    [\"C0\", \"C1\", \"C2\"]\n]\n```\n\n----------------------------------------\n\nTITLE: Function Layer Keymap Definition in QMK Firmware (C)\nDESCRIPTION: This code defines a function layer keymap named `_FL` in QMK Firmware using the `LAYOUT` macro. `_______` keys will pass through to lower active layers. The `MO(_CL)` key activates another layer. BL_STEP controls backlight stepping.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/keymap.md#_snippet_5\n\nLANGUAGE: C\nCODE:\n```\n[_FL] = LAYOUT(\n    KC_GRV,  KC_F1,   KC_F2,  KC_F3,  KC_F4,  KC_F5,  KC_F6,  KC_F7,  KC_F8,  KC_F9,   KC_F10,   KC_F11,   KC_F12,   _______, KC_DEL,           BL_STEP,\n    _______, _______, _______,_______,_______,_______,_______,_______,KC_PSCR,KC_SCRL, KC_PAUS,  _______,  _______,  _______,                   _______,\n    _______, _______, MO(_CL),_______,_______,_______,_______,_______,_______,_______, _______,  _______,  _______,  _______,\n    _______, _______, _______,_______,_______,_______,_______,_______,_______,_______, _______,  _______,  _______,  _______,          KC_PGUP,\n    _______, _______, _______, _______,        _______,_______,                        _______,  _______,  _______,  MO(_FL), KC_HOME, KC_PGDN, KC_END\n),\n```\n\n----------------------------------------\n\nTITLE: Enable Complementary PWM Output - C\nDESCRIPTION: This code snippet enables the complementary output for PWM.  Defining `AUDIO_PWM_COMPLEMENTARY_OUTPUT` makes the PWM output available on a complementary output pin.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/audio.md#_snippet_9\n\nLANGUAGE: C\nCODE:\n```\n// config.h:\n#define AUDIO_PWM_COMPLEMENTARY_OUTPUT\n```\n\n----------------------------------------\n\nTITLE: Helix Specific Build Options\nDESCRIPTION: These are build options that can be customized in the `rules.mk` file for the Helix keyboard.  They enable or disable features like OLED display, custom fonts, LED backlighting, underglow, animations, and IOS device connectivity. Uncomment the lines and edit the variables as needed to customize your build.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/helix/rev2/keymaps/default/readme.md#_snippet_6\n\nLANGUAGE: Makefile\nCODE:\n```\n# Helix Spacific Build Options\n# you can uncomment and edit follows 7 Variables\n#  jp: 以下の7つの変数を必要に応じて編集し、コメントアウトをはずします。\n# OLED_ENABLE = yes           # OLED_ENABLE\n# LOCAL_GLCDFONT = no         # use each keymaps \"helixfont.h\" insted of \"common/glcdfont.c\"\n# LED_BACK_ENABLE = no        # LED backlight (Enable WS2812 RGB underlight.)\n# LED_UNDERGLOW_ENABLE = no   # LED underglow (Enable WS2812 RGB underlight.)\n# LED_ANIMATIONS = yes        # LED animations\n# IOS_DEVICE_ENABLE = no      # connect to IOS device (iPad,iPhone)\n```\n\n----------------------------------------\n\nTITLE: Configuring STM32 Onboard EEPROM Size in QMK\nDESCRIPTION: Defines the size of the EEPROM to be used on STM32 L0/L1 devices in QMK. This configuration is set in `config.h` to override the default value. It's crucial for controlling the amount of flash dedicated to EEPROM emulation, impacting erase times.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/eeprom.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define STM32_ONBOARD_EEPROM_SIZE\n```\n\n----------------------------------------\n\nTITLE: Setting Global Current Control in config.h\nDESCRIPTION: Sets the global current control value for the CSx pins. The value ranges from 0 to 255. This definition goes in your `config.h` file. The default value is 0xFF (255).\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/is31fl3741.md#_snippet_3\n\nLANGUAGE: c\nCODE:\n```\n#define IS31FL3741_GLOBAL_CURRENT 0xFF\n```\n\n----------------------------------------\n\nTITLE: Including IS31FL3731 driver in rules.mk\nDESCRIPTION: This snippet shows how to include the IS31FL3731 driver in your `rules.mk` file. It adds the necessary source files to the build process. The `I2C_DRIVER_REQUIRED` flag ensures that the I2C driver is also included.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/is31fl3731.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nCOMMON_VPATH += $(DRIVER_PATH)/led/issi\nSRC += is31fl3731-mono.c # For single-color\nSRC += is31fl3731.c # For RGB\nI2C_DRIVER_REQUIRED = yes\n```\n\n----------------------------------------\n\nTITLE: Configure Scaling Register for LED (Mono) - C\nDESCRIPTION: The `is31fl3743a_set_scaling_register` function configures the scaling register for a single LED within a single-color setup. It takes an LED index and a scaling value as input. Use `is31fl3743a_update_scaling_registers()` to apply the new values.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/is31fl3743a.md#_snippet_9\n\nLANGUAGE: C\nCODE:\n```\nvoid is31fl3743a_set_scaling_register(uint8_t index, uint8_t value)\n```\n\n----------------------------------------\n\nTITLE: LSJ Ares Matrix Diagram\nDESCRIPTION: This diagram represents the keyboard matrix for the LSJ Ares keyboard. The matrix shows the row and column assignments for each key. It also illustrates different bottom row layouts, including Tsangan/WKL/HHKB and True HHKB variations, highlighting the different shift key configurations.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ares/matrix_diagram.md#_snippet_0\n\nLANGUAGE: None\nCODE:\n```\n                                                    ┌───────┐\n                                       2u Backspace │4E     │\n                                                    └───────┘\n┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┐\n│40 │41 │42 │43 │44 │45 │46 │47 │48 │49 │4A │4B │4C │4D │4E │\n├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴───┤      ┌─────┐\n│30   │31 │32 │33 │34 │35 │36 │37 │38 │39 │3A │3B │3C │3D   │      │     │\n├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴─────┤   ┌──┴┐2D  │ ISO Enter\n│20    │21 │22 │23 │24 │25 │26 │27 │28 │29 │2A │2B │2D      │   │2C │    │\n├────┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴────┬───┤   └───┴────┘\n│10  │11 │12 │13 │14 │15 │16 │17 │18 │19 │1A │1B │1C    │1D │\n├────┼───┴┬──┴─┬─┴───┴───┴───┴───┴───┴──┬┴───┼───┴┬────┬┴───┤\n│00  │01  │02  │06                      │0A  │0B  │0C  │0D  │\n└────┴────┴────┴────────────────────────┴────┴────┴────┴────┘\n┌────────┐                                       ┌──────────┐\n│10      │ 2.25u LShift             2.75u RShift │1C        │\n└────────┘                                       └──────────┘\n┌─────┬───┬─────┬───────────────────────────┬─────┬───┬─────┐\n│00   │01 │02   │06                         │0B   │0C │0D   │ Tsangan/WKL/HHKB\n└─────┴───┴─────┴───────────────────────────┴─────┴───┴─────┘\n┌─────┬───┬─────┬───────────────────────┬─────┬───┬───┬─────┐\n│00   │01 │02   │06                     │0A   │0B │0C │0D   │ True HHKB\n└─────┴───┴─────┴───────────────────────┴─────┴───┴───┴─────┘\n```\n\n----------------------------------------\n\nTITLE: Building Foundation Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the mechlovin/foundation keyboard. It requires the QMK build environment to be set up. The output will be a .hex or .bin file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechlovin/foundation/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake mechlovin/foundation:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware with Make (DFU)\nDESCRIPTION: This command builds and flashes the QMK firmware to the System76 Launch keyboard using the `make` command and DFU (Device Firmware Update). It compiles the keymap 'default' and then flashes it to the keyboard. The keyboard needs to be in DFU mode. The output is the keyboard running the new firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/system76/launch_1/readme.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmake -r system76/launch_1:default:flash\n```\n\n----------------------------------------\n\nTITLE: Enabling Host LED State Synchronization\nDESCRIPTION: This definition enables syncing of the host LED status (Caps Lock, Num Lock, etc.) between both halves of the split keyboard.  It is required for features such as displaying the Host LED status on an OLED display.  It is defined in `config.h`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/split_keyboard.md#_snippet_17\n\nLANGUAGE: c\nCODE:\n```\n#define SPLIT_LED_STATE_ENABLE\n```\n\n----------------------------------------\n\nTITLE: Flashing OR87 Firmware with QMK\nDESCRIPTION: This command flashes the compiled firmware onto the OR87 keyboard using the QMK build environment. It requires the keyboard to be in bootloader mode and uses the appropriate flashing tool for the target microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/relapsekb/or87/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake relapsekb/or87:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Keyboard Firmware with Make\nDESCRIPTION: This command flashes the built firmware to the Phoenix Project No 1 keyboard. It requires a properly configured QMK build environment and a connected keyboard in bootloader mode. This command assumes the default keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/rico/phoenix_project_no1/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake rico/phoenix_project_no1:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building SM68 Firmware using QMK\nDESCRIPTION: This snippet shows how to build the default firmware for the SM68 keyboard using the QMK firmware. It assumes that the build environment is already set up.  The command uses the `make` command-line tool with the keyboard name and keymap specified.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/hineybush/sm68/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake hineybush/sm68:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Mini1800 RevC with QMK\nDESCRIPTION: This command compiles and flashes the QMK firmware for the Mini1800 RevC keyboard with the default keymap. It assumes a properly configured QMK build environment and a connected keyboard in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/lfkeyboards/mini1800/readme.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nmake lfkeyboards/mini1800/revc:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Lily58 Lite Rev3 with QMK\nDESCRIPTION: This command builds and flashes the default keymap to the Lily58 Lite Rev3 keyboard. It assumes the QMK build environment is set up and that the keyboard is in bootloader mode. Requires the QMK build environment and a configured flashing tool.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/lily58/lite_rev3/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake lily58/lite_rev3:default:flash\n```\n\n----------------------------------------\n\nTITLE: Importing KBFirmware configuration example with QMK CLI\nDESCRIPTION: This example shows a specific invocation of the `qmk import-kbfirmware` command, providing the file path to the exported JSON configuration file. The output details the steps taken by QMK during the import, indicating the creation of a new keyboard directory and suggesting further actions such as navigating to the directory and compiling the firmware. It is important that qmk is installed and configured before using this command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/hand_wire.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ qmk import-kbfirmware ~/Downloads/gh62.json \nΨ Importing gh62.json.\n\n⚠ Support here is basic - Consider using 'qmk new-keyboard' instead\nΨ Imported a new keyboard named gh62.\nΨ To start working on things, `cd` into keyboards/gh62,\nΨ or open the directory in your preferred text editor.\nΨ And build with qmk compile -kb gh62 -km default.\n```\n\n----------------------------------------\n\nTITLE: Defining the Frame Palette structure in C\nDESCRIPTION: This code snippet defines the structure for the frame palette block in the QMK Graphics Format (QGF). It contains the block header and an array of HSV palette entries. Each entry contains hue, saturation, and value components. The `__attribute__((packed))` ensures no padding is added. The number of palette entries depends on the frame format.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/quantum_painter_qgf.md#_snippet_4\n\nLANGUAGE: c\nCODE:\n```\ntypedef struct __attribute__((packed)) qgf_palette_v1_t {\n    qgf_block_header_v1_t header;     // = { .type_id = 0x03, .neg_type_id = (~0x03), .length = (N * 3 * sizeof(uint8_t)) }\n    struct {  // container for a single HSV palette entry\n        uint8_t h;                    // hue component: `[0,360)` degrees is mapped to `[0,255]` uint8_t.\n        uint8_t s;                    // saturation component: `[0,1]` is mapped to `[0,255]` uint8_t.\n        uint8_t v;                    // value component: `[0,1]` is mapped to `[0,255]` uint8_t.\n    } hsv[N];                         // N * hsv, where N is the number of palette entries depending on the frame format in the descriptor\n} qgf_palette_v1_t;\n```\n\n----------------------------------------\n\nTITLE: ERM Motor Setup (C)\nDESCRIPTION: These C preprocessor definitions are used to configure the DRV2605L driver for an Eccentric Rotating Mass (ERM) vibration motor.  The definitions specify feedback settings like braking factor and loop gain, as well as motor-specific parameters such as rated voltage and peak voltage. These settings should be adjusted based on the motor's datasheet.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/haptic_feedback.md#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n#define DRV2605L_FB_ERM_LRA 0\n#define DRV2605L_FB_BRAKEFACTOR 3 /* For 1x:0, 2x:1, 3x:2, 4x:3, 6x:4, 8x:5, 16x:6, Disable Braking:7 */\n#define DRV2605L_FB_LOOPGAIN 1 /* For  Low:0, Medium:1, High:2, Very High:3 */\n\n/* Please refer to your datasheet for the optimal setting for your specific motor. */\n#define DRV2605L_RATED_VOLTAGE 3\n#define DRV2605L_V_PEAK 5\n```\n\n----------------------------------------\n\nTITLE: Keyboard LED Update Implementation in QMK (C)\nDESCRIPTION: This C code snippet demonstrates a keyboard-level LED update function `led_update_kb` in QMK. It inverts the LED state before writing to GPIO pins. The function first calls `led_update_user` and only executes the GPIO writes if `led_update_user` returns `true`.  It assumes GPIO pins B0-B4 are connected to the LEDs and are active-low.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/led_indicators.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nbool led_update_kb(led_t led_state) {\n    bool res = led_update_user(led_state);\n    if(res) {\n        // gpio_write_pin sets the pin high for 1 and low for 0.\n        // In this example the pins are inverted, setting\n        // it low/0 turns it on, and high/1 turns the LED off.\n        // This behavior depends on whether the LED is between the pin\n        // and VCC or the pin and GND.\n        gpio_write_pin(B0, !led_state.num_lock);\n        gpio_write_pin(B1, !led_state.caps_lock);\n        gpio_write_pin(B2, !led_state.scroll_lock);\n        gpio_write_pin(B3, !led_state.compose);\n        gpio_write_pin(B4, !led_state.kana);\n    }\n    return res;\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Alternate Key Repeats in QMK (C)\nDESCRIPTION: This code snippet demonstrates handling alternate key repeats in QMK. It defines a macro (`MY_MACRO`) as its own alternate using `get_alt_repeat_key_keycode_user` and then handles repeating, alternate repeating, and normal usage within `process_record_user` using `get_repeat_key_count()`.  The code requires defining `MY_MACRO` as a custom keycode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/repeat_key.md#_snippet_10\n\nLANGUAGE: c\nCODE:\n```\nuint16_t get_alt_repeat_key_keycode_user(uint16_t keycode, uint8_t mods) {\n    switch (keycode) {\n        case MY_MACRO: return MY_MACRO;  // MY_MACRO is its own alternate.\n    }\n    return KC_TRNS;\n}\n\nbool process_record_user(uint16_t keycode, keyrecord_t* record) {\n    switch (keycode) {\n        case MY_MACRO:\n            if (get_repeat_key_count() > 0) {        // Repeating.\n                if (record->event.pressed) {\n                    SEND_STRING(\"repeat!\");    \n                }\n            } else if (get_repeat_key_count() < 0) { // Alternate repeating.\n                if (record->event.pressed) {\n                    SEND_STRING(\"alt repeat!\");\n                }\n            } else {                                 // Used normally.\n                if (record->event.pressed) {\n                    SEND_STRING(\"macro\");\n                }\n            }\n            return false;\n     \n        // Other macros...\n    }\n    return true;\n}\n```\n\n----------------------------------------\n\nTITLE: Associating Tap Dance Actions and Setting Tapping Term (Example 6)\nDESCRIPTION: This code associates the `QUOT_LAYR` keycode with the defined tap dance functions (`ql_finished`, `ql_reset`) using `ACTION_TAP_DANCE_FN_ADVANCED`. Additionally, it defines a custom tapping term for tap dance keys using the `get_tapping_term` function, ensuring a longer delay for tap dance actions to be reliably completed. `TAPPING_TERM_PER_KEY` needs to be defined in `config.h` to enable the per-key tapping terms.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/tap_dance.md#_snippet_24\n\nLANGUAGE: c\nCODE:\n```\n// Associate our tap dance key with its functionality\ntap_dance_action_t tap_dance_actions[] = {\n    [QUOT_LAYR] = ACTION_TAP_DANCE_FN_ADVANCED(NULL, ql_finished, ql_reset)\n};\n\n// Set a long-ish tapping term for tap-dance keys\nuint16_t get_tapping_term(uint16_t keycode, keyrecord_t *record) {\n    switch (keycode) {\n        case QK_TAP_DANCE ... QK_TAP_DANCE_MAX:\n            return 275;\n        default:\n            return TAPPING_TERM;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing WPM Keycode Inclusion in QMK Firmware (C)\nDESCRIPTION: This C code snippet demonstrates how to customize which keycodes are included in the WPM calculation using the `wpm_keycode_user` function. It checks the keycode and returns `true` to include it, or `false` to exclude it.  It uses the QK_MOD_TAP, QK_LAYER_TAP, QK_MODS, KC_A, KC_0, KC_TAB, and KC_SLSH keycode constants.  The function signature is `bool wpm_keycode_user(uint16_t keycode)`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/wpm.md#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nbool wpm_keycode_user(uint16_t keycode) {\n    if ((keycode >= QK_MOD_TAP && keycode <= QK_MOD_TAP_MAX) || (keycode >= QK_LAYER_TAP && keycode <= QK_LAYER_TAP_MAX) || (keycode >= QK_MODS && keycode <= QK_MODS_MAX)) {\n        keycode = keycode & 0xFF;\n    } else if (keycode > 0xFF) {\n        keycode = 0;\n    }\n    if ((keycode >= KC_A && keycode <= KC_0) || (keycode >= KC_TAB && keycode <= KC_SLSH)) {\n        return true;\n    }\n\n    return false;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting USART Driver Timeout (config.h)\nDESCRIPTION: This code snippet configures the timeout for the USART driver in milliseconds. The default timeout is 20ms.  Adjusting the timeout can be useful for troubleshooting serial communication issues. This should be put into your `config.h` file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/serial.md#_snippet_18\n\nLANGUAGE: C\nCODE:\n```\n#define SERIAL_USART_TIMEOUT 20    // USART driver timeout. default 20\n```\n\n----------------------------------------\n\nTITLE: Ergodox Keyboard Layout Definition\nDESCRIPTION: Defines the layout for an Ergodox keyboard using the `LAYOUT_ergodox` macro within the QMK firmware. This macro likely specifies the physical arrangement of keys on the Ergodox keyboard, allowing users to create keymaps and define key functionalities.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/layouts/default/ergodox/readme.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nLAYOUT_ergodox\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Keycodes in Header File (C)\nDESCRIPTION: This code snippet demonstrates how to define custom keycodes in a header file for use in QMK firmware. It includes necessary header files and defines an enum for custom keycodes, including `KC_MAKE` and `NEW_SAFE_RANGE`. `NEW_SAFE_RANGE` is used to avoid overlapping keycodes.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/feature_userspace.md#_snippet_7\n\nLANGUAGE: c\nCODE:\n```\n#pragma once\n\n#include \"quantum.h\"\n#include \"action.h\"\n#include \"version.h\"\n\n// Define all of\nenum custom_keycodes {\n  KC_MAKE = SAFE_RANGE,\n  NEW_SAFE_RANGE  //use \"NEW_SAFE_RANGE\" for keymap specific codes\n};\n```\n\n----------------------------------------\n\nTITLE: Enabling Programmable Buttons in QMK\nDESCRIPTION: This snippet demonstrates how to enable programmable button functionality in a QMK Firmware project. It requires adding a specific line to the `rules.mk` file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/programmable_button.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nPROGRAMMABLE_BUTTON_ENABLE = yes\n```\n\n----------------------------------------\n\nTITLE: Building VIA-compatible keymap for Framework keyboard with QMK\nDESCRIPTION: This command builds a VIA-compatible keymap for the Framework keyboard using the QMK firmware build environment.  This allows the keyboard to be configured using the VIA configurator.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/7c8/framework/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake 7c8/framework:via     # via-compatible keymap\n```\n\n----------------------------------------\n\nTITLE: Flashing MT40 Keyboard Firmware with QMK\nDESCRIPTION: This command builds and flashes the default keymap for the MT40 keyboard. It uses the 'make' command with the target specified as 'mt/mt40:default:flash'. This command requires a properly configured QMK build environment and a connected MT40 keyboard in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mt/mt40/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake mt/mt40:default:flash\n```\n\n----------------------------------------\n\nTITLE: MiSS-1200 and MiSTress-1200 Pin Configuration\nDESCRIPTION: This code defines the pin assignments for connecting an Amiga 1200 keyboard membrane to a MiSS-1200 (ATmega32u4) or MiSTress-1200 (Atmega16u4) board. It specifies the pins used for columns, rows, and the CapsLock LED, and provides a mapping between these pins and the corresponding keyboard signals. This configuration is essential for the keyboard matrix scanning process on these boards.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/converter/a1200/readme.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nColumns: 1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16  \nPins:    D0 D1 C7 D6 B7 B6 B5 B4 E6 D7 C6 D4 B2 D5 D3 D2 \n--------------------------------------------------------  \nRows: 1  2  3  4  5  6  7  8  \nPins: F7 F6 F5 F4 F1 F0 B1 B3  \n--------------------------------------------------------  \nStatus LEDs: CapsLock +5V   \nPins:        B0       5V    \n```\n\n----------------------------------------\n\nTITLE: Enabling IOS Device Support\nDESCRIPTION: This code snippet from `rules.mk` shows the setting to enable compatibility with iOS devices (iPad, iPhone). Enabling this option might involve reducing the brightness of RGB underglow or backlight. Changing `IOS_DEVICE_ENABLE` to `yes` enables this functionality.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/25keys/zinc/keymaps/default/readme_jp.md#_snippet_8\n\nLANGUAGE: Makefile\nCODE:\n```\nIOS_DEVICE_ENABLE = no      # connect to IOS device (iPad,iPhone)\n```\n\n----------------------------------------\n\nTITLE: Enabling Per-Key Retro Tapping\nDESCRIPTION: Enables the use of individual retro tapping settings for each key. This allows for fine-grained control over Retro Tapping behavior, customizing which keys should use retro tapping. Requires `RETRO_TAPPING` to be enabled.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/config_options.md#_snippet_44\n\nLANGUAGE: C\nCODE:\n```\n#define RETRO_TAPPING_PER_KEY\n```\n\n----------------------------------------\n\nTITLE: Get Display Width (C)\nDESCRIPTION: This snippet defines the `qp_get_width` function, which returns the width of the display in pixels.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/quantum_painter.md#_snippet_78\n\nLANGUAGE: c\nCODE:\n```\nuint16_t qp_get_width(painter_device_t device);\n```\n\n----------------------------------------\n\nTITLE: Flashing wings42 Keyboard Firmware\nDESCRIPTION: This command flashes the built firmware onto the wings42 keyboard. It uses the QMK build environment and assumes a bootloader is present on the Pro Micro controller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/dailycraft/wings42/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake dailycraft/wings42:default:flash\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Keycodes in C for Spleeb Firmware\nDESCRIPTION: This C code defines a set of custom keycodes for the Spleeb keyboard firmware. These keycodes are used to trigger specific actions, such as changing pointer DPI, toggling sniping mode, or controlling drag scrolling.  `POINTER_DEFAULT_DPI_FORWARD`, `SNIPING_MODE`, `DRAGSCROLL_MODE` and similar macros must be defined elsewhere. Depending on the configuration, pointing or encoder keymaps may not be included.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/spleeb/readme.md#_snippet_4\n\nLANGUAGE: C\nCODE:\n```\n#define DF_MOD POINTER_DEFAULT_DPI_FORWARD\n#define DF_RMOD POINTER_DEFAULT_DPI_REVERSE\n#define SP_MOD POINTER_SNIPING_DPI_FORWARD\n#define SP_RMOD POINTER_SNIPING_DPI_REVERSE\n#define SNIPING SNIPING_MODE\n#define SNP_TOG SNIPING_MODE_TOGGLE\n#define DRGSCRL DRAGSCROLL_MODE\n#define DRG_TOG DRAGSCROLL_MODE_TOGGLE\n#define ENC_STL ENC_MODE_STEP_LEFT\n#define ENC_STR ENC_MODE_STEP_RIGHT\n```\n\n----------------------------------------\n\nTITLE: Enabling LD7032 Driver in rules.mk\nDESCRIPTION: This code snippet shows how to enable the LD7032 driver using SPI and I2C in the `rules.mk` file for the Quantum Painter library.  This step is necessary to use LD7032 displays.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/quantum_painter.md#_snippet_33\n\nLANGUAGE: make\nCODE:\n```\nQUANTUM_PAINTER_ENABLE = yes\n# For SPI:\nQUANTUM_PAINTER_DRIVERS += ld7032_spi\n# For I2C:\nQUANTUM_PAINTER_DRIVERS += ld7032_i2c\n```\n\n----------------------------------------\n\nTITLE: Cancelling Deferred Execution with cancel_deferred_exec in C\nDESCRIPTION: This code snippet demonstrates how to cancel a pending deferred execution using `cancel_deferred_exec()`. It takes a `deferred_token` as input. After cancellation, the token should be considered invalid and not reused.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/custom_quantum_functions.md#_snippet_11\n\nLANGUAGE: C\nCODE:\n```\n// This will cancel my_token's future execution\ncancel_deferred_exec(my_token);\n```\n\n----------------------------------------\n\nTITLE: LRA Motor Setup (C)\nDESCRIPTION: These C preprocessor definitions configure the DRV2605L driver for a Linear Resonant Actuator (LRA) motor. It includes settings for feedback, rated voltage, peak voltage, RMS voltage, and the LRA's resonant frequency. These settings must match the specifications in the LRA motor's datasheet for optimal performance.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/haptic_feedback.md#_snippet_2\n\nLANGUAGE: c\nCODE:\n```\n#define DRV2605L_FB_ERM_LRA 1\n#define DRV2605L_FB_BRAKEFACTOR 3 /* For 1x:0, 2x:1, 3x:2, 4x:3, 6x:4, 8x:5, 16x:6, Disable Braking:7 */\n#define DRV2605L_FB_LOOPGAIN 1 /* For  Low:0, Medium:1, High:2, Very High:3 */\n\n/* Please refer to your datasheet for the optimal setting for your specific motor. */\n#define DRV2605L_RATED_VOLTAGE 2\n#define DRV2605L_V_PEAK 2.8\n#define DRV2605L_V_RMS 2.0 \n#define DRV2605L_V_PEAK 2.1\n#define DRV2605L_F_LRA 205 /* resonance freq */\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Encoder Behavior in keymap.c (QMK)\nDESCRIPTION: This snippet demonstrates how to override the default encoder behavior using the `encoder_update_user` function in `keymap.c`. This function allows you to customize encoder actions on a per-keymap basis. The function takes the encoder index and rotation direction as input and performs custom actions based on these parameters.  Returning `true` allows the keyboard/core level encoder code to run, while returning `false` overrides it.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/encoders.md#_snippet_13\n\nLANGUAGE: c\nCODE:\n```\nbool encoder_update_user(uint8_t index, bool clockwise) {\n    if (index == 0) { /* First encoder */\n        if (clockwise) {\n            tap_code(KC_PGDN);\n        } else {\n            tap_code(KC_PGUP);\n        }\n    } else if (index == 1) { /* Second encoder */\n        if (clockwise) {\n            rgb_matrix_increase_hue();\n        } else {\n            rgb_matrix_decrease_hue();\n        }\n    }\n    return false;\n}\n```\n\n----------------------------------------\n\nTITLE: Dvorak Layout - Helix Keyboard\nDESCRIPTION: Defines the Dvorak key layout for the Helix keyboard, which optimizes key placement for faster typing in English. This layout rearranges the keys compared to Qwerty to reduce finger travel.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/helix/rev2/keymaps/default/readme.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n ,-----------------------------------------.             ,-----------------------------------------.\n |   `  |   1  |   2  |   3  |   4  |   5  |             |   6  |   7  |   8  |   9  |   0  | Bksp |\n |------+------+------+------+------+------|             |------+------+------+------+------+------|\n | Tab  |   '  |   ,  |   .  |   P  |   Y  |             |   F  |   G  |   C  |   R  |   L  | Del  |\n |------+------+------+------+------+------|             |------+------+------+------+------+------|\n | Ctrl |   A  |   O  |   E  |   U  |   I  |             |   D  |   H  |   T  |   N  |   S  |  /   |\n |------+------+------+------+------+------+------+------+------+------+------+------+------+------|\n | Shift|   ;  |   Q  |   J  |   K  |   X  |   [  |   ]  |   B  |   M  |   W  |   V  |   Z  |Enter |\n |------+------+------+------+------+------+------+------+------+------+------+------+------+------|\n |Adjust| Esc  | Alt  | GUI  | EISU |Lower |Space |Space |Raise | KANA | Left | Down |  Up  |Right |\n `-------------------------------------------------------------------------------------------------'\n```\n\n----------------------------------------\n\nTITLE: Enabling SPI Peripheral in mcuconf.h - ChibiOS/ARM\nDESCRIPTION: This snippet shows how to enable a specific SPI peripheral (SPI2 in this example) in the `mcuconf.h` file for ChibiOS/ARM.  The `STM32_SPI_USE_SPI2` macro is defined as `TRUE`, ensuring that the selected SPI peripheral is activated and available for use.  Note that the original definition is first undefined using `#undef` to ensure there are no conflicts.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/spi.md#_snippet_2\n\nLANGUAGE: c\nCODE:\n```\n#pragma once\n\n#include_next <mcuconf.h>\n\n#undef STM32_SPI_USE_SPI2 // [!code focus]\n#define STM32_SPI_USE_SPI2 TRUE // [!code focus]\n```\n\n----------------------------------------\n\nTITLE: Implementing board_init function in C\nDESCRIPTION: This C code snippet demonstrates how to implement the `board_init` function in a keyboard's source file. This function is executed directly after the ChibiOS initialization routines have completed, enabling use of normal low-level ChibiOS functionality.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/platformdev_chibios_earlyinit.md#_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nvoid board_init(void) {\n    // initialize anything that requires ChibiOS\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing LED Matrix Indicators Callback (C)\nDESCRIPTION: This code demonstrates implementing a custom LED matrix indicator callback in QMK Firmware. It checks for a user-defined indicator function and then sets the LED value using `led_matrix_set_value`. This allows customizing LED behavior to indicate status such as Caps Lock or active layer.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/led_matrix.md#_snippet_7\n\nLANGUAGE: c\nCODE:\n```\nbool led_matrix_indicators_kb(void) {\n    if (!led_matrix_indicators_user()) {\n        return false;\n    }\n    led_matrix_set_value(index, value);\n    return true;\n}\n```\n\n----------------------------------------\n\nTITLE: Building SMALLKEYBOARD Firmware (QMK)\nDESCRIPTION: This command builds the SMALLKEYBOARD firmware with the default keymap.  It uses the QMK build system.  The output is a .hex or .bin file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/smallkeyboard/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake smallkeyboard:default\n```\n\n----------------------------------------\n\nTITLE: Defining DIP Switch Map in keymap.c\nDESCRIPTION: This snippet demonstrates how to define the DIP switch map in the `keymap.c` file. The `dip_switch_map` array maps DIP switch states to keycodes using the `DIP_SWITCH_OFF_ON` macro. Requires `DIP_SWITCH_MAP_ENABLE` to be defined.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/dip_switch.md#_snippet_4\n\nLANGUAGE: C\nCODE:\n```\n#if defined(DIP_SWITCH_MAP_ENABLE)\nconst uint16_t PROGMEM dip_switch_map[NUM_DIP_SWITCHES][NUM_DIP_STATES] = {\n    DIP_SWITCH_OFF_ON(DF(0), DF(1)),\n    DIP_SWITCH_OFF_ON(EC_NORM, EC_SWAP)\n};\n#endif\n```\n\n----------------------------------------\n\nTITLE: Setting ErgoDox EZ Indicator LED Brightness in C\nDESCRIPTION: These C functions allow you to control the brightness of the indicator LEDs on the ErgoDox EZ keyboard. The `ergodox_led_all_set` function controls all LEDs, while the other functions control individual LEDs on the right side of the keyboard. The `level` parameter ranges from 0 to 255.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ergodox_ez/readme.md#_snippet_3\n\nLANGUAGE: C\nCODE:\n```\nvoid ergodox_led_all_set(uint8_t level);\nvoid ergodox_right_led_1_set(uint8_t level);\nvoid ergodox_right_led_2_set(uint8_t level);\nvoid ergodox_right_led_3_set(uint8_t level);\n```\n\n----------------------------------------\n\nTITLE: Enabling Split WPM in QMK\nDESCRIPTION: This ensures the current WPM (words per minute) is available on the slave when using the QMK-provided split transport. This enables WPM information to be displayed or used on the slave side.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/config_options.md#_snippet_108\n\nLANGUAGE: c\nCODE:\n```\n#define SPLIT_WPM_ENABLE\n```\n\n----------------------------------------\n\nTITLE: Flashing wendy Keyboard Firmware\nDESCRIPTION: This command flashes the built firmware to the wendy keyboard.  It requires the QMK build environment to be set up correctly and utilizes the `make` command with the `:flash` target.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kibou/wendy/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake kibou/wendy:default:flash\n```\n\n----------------------------------------\n\nTITLE: One Shot Layer Changed Callback in QMK\nDESCRIPTION: This C code snippet demonstrates how to implement the `oneshot_layer_changed_user` callback function in QMK. This function is invoked whenever a one-shot layer is activated or deactivated.  The `layer` argument indicates the active layer number, allowing the user to perform specific actions based on the activated layer. The function prints a message to the console indicating which one shot layer is active, or that one shot layers are off.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/one_shot_keys.md#_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nvoid oneshot_layer_changed_user(uint8_t layer) {\n  if (layer == 1) {\n    println(\"Oneshot layer 1 on\");\n  }\n  if (!layer) {\n    println(\"Oneshot layer off\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Reading I2C Register (16-bit Address) - C\nDESCRIPTION: This function reads data from a register with a 16-bit address (big endian) on the specified I2C device. The function takes the device address, register address, a pointer to a data buffer, the number of bytes to read, and a timeout value as input. It returns an `i2c_status_t` indicating the status of the operation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/i2c.md#_snippet_6\n\nLANGUAGE: C\nCODE:\n```\ni2c_status_t i2c_read_register16(uint8_t devaddr, uint16_t regaddr, uint8_t* data, uint16_t length, uint16_t timeout)\n```\n\n----------------------------------------\n\nTITLE: Matrix Diagram Representation\nDESCRIPTION: This snippet visualizes the key matrix layout of the Mechlovin Studio Zed65 910 Rev1 keyboard. It shows the row and column assignments for each key, represented by hexadecimal codes. This helps in understanding the keyboard's internal wiring and mapping of keys.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechlovin/zed65/910/matrix_diagram.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n                                                    ┌───────┐\n                                       2u Backspace │0D     │\n                                                    └───────┘\n┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┐\n│00 │01 │02 │03 │04 │05 │06 │07 │08 │09 │0A │0B │0C │0D │2C │\n├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴───┼───┐      ┌─────┐\n│10   │11 │12 │13 │14 │15 │16 │17 │18 │19 │1A │1B │1C │1D   │1E │      │     │\n├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴─────┼───┤   ┌──┴┐2D  │ ISO Enter\n│20    │21 │22 │23 │24 │25 │26 │27 │28 │29 │2A │2B │2D      │2E │   │1D │    │\n├────┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴────┬───┼───┤   └───┴────┘\n│30  │31 │32 │33 │34 │35 │36 │37 │38 │39 │3A │3B │3C    │3D │3E │\n├────┼───┴┬──┴─┬─┴───┴───┴───┴───┴───┴──┬┴──┬┴──┬┴──┬───┼───┼───┤\n│40  │41  │42  │46                      │49 │4A │4B │4C │4D │4E │\n└────┴────┴────┴────────────────────────┴───┴───┴───┴───┴───┴───┘\n┌────────┐                                       ┌──────────┐\n│30      │ 2.25u LShift             2.75u RShift │3C        │\n└────────┘                                       └──────────┘\n┌────┬────┬────┬────────────────────────┬────┬────┐\n│40  │41  │42  │46                      │49  │4A  │ Blocker\n└────┴────┴────┴────────────────────────┴────┴────┘\n┌─────┬───┬─────┬───────────────────────────┬─────┐\n│40   │41 │42   │46                         │4A   │ Blocker Tsangan\n└─────┴───┴─────┴───────────────────────────┴─────┘\n```\n\n----------------------------------------\n\nTITLE: Building DZ65RGB V2 Firmware with QMK\nDESCRIPTION: This snippet shows how to build the default firmware for the DZ65RGB V2 keyboard using the QMK build environment. It uses the `make` command with the keyboard and keymap specified as arguments. Ensure the QMK build environment is set up before executing this command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/dztech/dz65rgb/v2/readme.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nmake dztech/dz65rgb/v2:default\n```\n\n----------------------------------------\n\nTITLE: Setting Global Brightness in C\nDESCRIPTION: The `apa102_set_brightness` function sets the global brightness level for all LEDs in the chain. It takes a brightness value from 0 to 31 as input. This affects the overall intensity of the LEDs.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/apa102.md#_snippet_5\n\nLANGUAGE: C\nCODE:\n```\nvoid apa102_set_brightness(uint8_t brightness)\n```\n\n----------------------------------------\n\nTITLE: Colemak Layout - Helix Keyboard\nDESCRIPTION: Defines the Colemak key layout for the Helix keyboard. It shows the key assignments for each physical key, optimized for Colemak users. This layout remaps the standard Qwerty positions for improved typing efficiency.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/helix/rev2/keymaps/default/readme.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n ,-----------------------------------------.             ,-----------------------------------------.\n |   `  |   1  |   2  |   3  |   4  |   5  |             |   6  |   7  |   8  |   9  |   0  | Del  |\n |------+------+------+------+------+------|             |------+------+------+------+------+------|\n | Tab  |   Q  |   W  |   F  |   P  |   G  |             |   J  |   L  |   U  |   Y  |   ;  | Bksp |\n |------+------+------+------+------+------|             |------+------+------+------+------+------|\n | Ctrl |   A  |   R  |   S  |   T  |   D  |             |   H  |   N  |   E  |   I  |   O  |  '   |\n |------+------+------+------+------+------+------+------+------+------+------+------+------+------|\n | Shift|   Z  |   X  |   C  |   V  |   B  |   [  |   ]  |   K  |   M  |   ,  |   .  |   /  |Enter |\n |------+------+------+------+------+------+------+------+------+------+------+------+------+------|\n |Adjust| Esc  | Alt  | GUI  | EISU |Lower |Space |Space |Raise | KANA | Left | Down |  Up  |Right |\n `-------------------------------------------------------------------------------------------------'\n```\n\n----------------------------------------\n\nTITLE: Configuring MSYS2 Terminal in VS Code on Windows\nDESCRIPTION: This JSON snippet configures the integrated terminal in VS Code to use MSYS2 on Windows. It defines a profile named 'QMK_MSYS' with the path to `bash.exe`, sets environment variables (MSYSTEM and CHERE_INVOKING), and specifies arguments for the shell. This configuration allows users to run QMK build commands directly from VS Code's terminal with proper environment settings.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/other_vscode.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n     \"terminal.integrated.profiles.windows\": {\n         \"QMK_MSYS\": {\n             \"path\": \"C:/QMK_MSYS/usr/bin/bash.exe\",\n             \"env\": {\n                 \"MSYSTEM\": \"MINGW64\",\n                 \"CHERE_INVOKING\": \"1\"\n             },\n             \"args\": [\"--login\"]\n         }\n     },\n\n     \"terminal.integrated.cursorStyle\": \"line\"\n }\n```\n\n----------------------------------------\n\nTITLE: Flashing Potato65 Firmware with QMK\nDESCRIPTION: This command flashes the default firmware to the Potato65 hotswap keyboard using the QMK build system. It requires a properly configured QMK build environment and a connected keyboard in a state ready to receive a flash.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/buildakb/potato65hs/readme.md#_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nmake buildakb/potato65hs:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing SquishyFRL Firmware\nDESCRIPTION: This command flashes the compiled SquishyFRL keyboard firmware to the keyboard's STM32F103RB microcontroller using dfu-util. Ensure dfu-util is installed and the keyboard is in DFU mode. Replace 'path/to/rmi_kb_squishyfrl_via.bin' with the actual path to the compiled firmware file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/rmi_kb/squishyfrl/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ndfu-util -d 1eaf:0003 -a 2 -D path/to/rmi_kb_squishyfrl_via.bin\n```\n\n----------------------------------------\n\nTITLE: MCU and Board Configuration for Proton C in rules.mk\nDESCRIPTION: This snippet shows how to configure the `MCU` and `BOARD` variables in the `rules.mk` file for the Proton C microcontroller in a QMK firmware project. It removes variables like `BOOTLOADER` and `EXTRA_FLAGS` if they exist. This is crucial for the firmware to correctly target the Proton C's STM32F303 processor.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/platformdev_proton_c.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nMCU = STM32F303\nBOARD = QMK_PROTON_C\n```\n\n----------------------------------------\n\nTITLE: Flashing the Boulevard Keyboard Firmware (Makefile)\nDESCRIPTION: This command builds and flashes the default keymap for the Boulevard keyboard using the QMK make system.  It compiles the firmware for the `eyeohdesigns/theboulevard` keyboard with the `default` keymap and then flashes it to the keyboard. It requires a properly configured QMK build environment and a connected keyboard in a flashable state.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/eyeohdesigns/theboulevard/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake eyeohdesigns/theboulevard:default:flash\n```\n\n----------------------------------------\n\nTITLE: Build PHASEONE default firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the KBDFANS PHASEONE keyboard using the QMK build environment.  It assumes the QMK build environment is properly set up as described in the QMK documentation. The output is a .hex or .bin file suitable for flashing to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kbdfans/phaseone/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake kbdfans/phaseone:default\n```\n\n----------------------------------------\n\nTITLE: Defining Soft Serial Speed in QMK\nDESCRIPTION: This macro sets the protocol speed when using serial communication in QMK Firmware.  Available speeds include 0 (about 189kbps, experimental), 1 (about 137kbps, default), 2 (about 75kbps), 3 (about 39kbps), 4 (about 26kbps), and 5 (about 20kbps).\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/config_options.md#_snippet_97\n\nLANGUAGE: c\nCODE:\n```\n#define SELECT_SOFT_SERIAL_SPEED <speed>\n```\n\n----------------------------------------\n\nTITLE: Building QMK Firmware for Foundation Keyboard\nDESCRIPTION: This command builds the QMK firmware for the wavtype/foundation keyboard with the default keymap. It requires a properly configured QMK build environment. This produces a .hex or .bin file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wavtype/foundation/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake wavtype/foundation:default\n```\n\n----------------------------------------\n\nTITLE: Flashing GMMK V2 96% (ISO) Firmware\nDESCRIPTION: This command flashes the compiled firmware onto the GMMK V2 96% (ISO) keyboard. It requires QMK to be properly set up and the keyboard to be in bootloader mode.  The `default` specifies the keymap and `flash` initiates the flashing process.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/gmmk/gmmk2/p96/iso/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake gmmk/gmmk2/p96/iso:default:flash\n```\n\n----------------------------------------\n\nTITLE: Configuring Maximum Number of LD7032 Displays\nDESCRIPTION: These C code snippets show how to configure the maximum number of supported LD7032 displays for SPI and I2C interfaces within the `config.h` file. The `LD7032_NUM_SPI_DEVICES` and `LD7032_NUM_I2C_DEVICES` macros control the number of displays.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/quantum_painter.md#_snippet_35\n\nLANGUAGE: c\nCODE:\n```\n// 3 SPI displays:\n#define LD7032_NUM_SPI_DEVICES 3\n// 3 I2C displays:\n#define LD7032_NUM_I2C_DEVICES 3\n```\n\n----------------------------------------\n\nTITLE: Building QMK Firmware for Acheron Athena\nDESCRIPTION: This command builds the QMK firmware for the Acheron Athena keyboard with the default layout. Replace `<revision>` with either `Alpha` or `Beta` depending on your PCB revision. This assumes that the QMK build environment has already been set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/acheron/athena/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake acheron/athena/<revision>:default\n```\n\n----------------------------------------\n\nTITLE: QMK Keymap Layer Definition\nDESCRIPTION: This code snippet shows where the list of Layers begins in the keymap.c file. Below this line, you will find lines containing LAYOUT, indicating the start of each layer and the keys that comprise that layer.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/newbs_building_firmware.md#_snippet_4\n\nLANGUAGE: c\nCODE:\n```\nconst uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {\n```\n\n----------------------------------------\n\nTITLE: Configuring USART TX Pin in config.h (C)\nDESCRIPTION: This code snippet defines the GPIO pin to be used for the USART serial TX pin.  It's important to choose a pin that is mapped to the USART peripheral's TX function. This pin needs to be defined in the config.h file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/serial.md#_snippet_5\n\nLANGUAGE: c\nCODE:\n```\n#define SERIAL_USART_TX_PIN B6     // The GPIO pin that is used split communication.\n```\n\n----------------------------------------\n\nTITLE: Building Keyboard Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Brick65S keyboard using the QMK build environment. It requires QMK to be set up correctly. The output is a .hex or .bin file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/era/sirind/brick65s/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake era/sirind/brick65s:default\n```\n\n----------------------------------------\n\nTITLE: Setting Cursor Position with Digitizer in QMK\nDESCRIPTION: This snippet demonstrates how to set the cursor position to the middle of the screen using the `digitizer_set_position` function. The `digitizer_in_range_on` function is called to indicate that the digitizer is active.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/digitizer.md#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\ndigitizer_in_range_on();\ndigitizer_set_position(0.5, 0.5);\n```\n\n----------------------------------------\n\nTITLE: Defining Backlight Levels in QMK config.h\nDESCRIPTION: This code snippet defines the number of backlight levels available (maximum 31 excluding off) in QMK firmware. This setting is configured in the `config.h` file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/config_options.md#_snippet_22\n\nLANGUAGE: c\nCODE:\n```\n#define BACKLIGHT_LEVELS 3\n```\n\n----------------------------------------\n\nTITLE: Flashing Cerberus Firmware (QMK)\nDESCRIPTION: These commands flash the compiled firmware to the Cerberus keyboard using QMK. The first command flashes the hotswap version and the second flashes the solderable version using the default keymap. Requires QMK build environment and appropriate flashing tools.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cannonkeys/cerberus/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake cannonkeys/cerberus/hotswap:default:flash\n```\n\nLANGUAGE: Makefile\nCODE:\n```\nmake cannonkeys/cerberus/solderable:default:flash\n```\n\n----------------------------------------\n\nTITLE: Inverting Drag-Scroll Direction\nDESCRIPTION: These defines invert the horizontal and vertical scrolling directions when drag-scroll is enabled. `CHARYBDIS_DRAGSCROLL_REVERSE_X` inverts horizontal scrolling, while `CHARYBDIS_DRAGSCROLL_REVERSE_Y` inverts vertical scrolling.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/bastardkb/charybdis/readme.md#_snippet_2\n\nLANGUAGE: C\nCODE:\n```\n#define CHARYBDIS_DRAGSCROLL_REVERSE_X\n```\n\nLANGUAGE: C\nCODE:\n```\n#define CHARYBDIS_DRAGSCROLL_REVERSE_Y\n```\n\n----------------------------------------\n\nTITLE: Disabling Alternate Repeat Key (C)\nDESCRIPTION: This code snippet demonstrates how to disable the Alternate Repeat Key functionality to reduce firmware size by defining `NO_ALT_REPEAT_KEY` in `config.h`. This disables the default alternate key definitions and the `QK_ALT_REPEAT_KEY` keycode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/repeat_key.md#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n#define NO_ALT_REPEAT_KEY\n```\n\n----------------------------------------\n\nTITLE: Enabling WPM in QMK rules.mk\nDESCRIPTION: This snippet shows how to enable the Word Per Minute (WPM) feature in QMK Firmware by adding `WPM_ENABLE = yes` to the `rules.mk` file. This enables the WPM calculation for use in keyboard features.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/wpm.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nWPM_ENABLE = yes\n```\n\n----------------------------------------\n\nTITLE: Page Opening Example in Markdown\nDESCRIPTION: This example demonstrates the recommended structure for opening a documentation page in QMK. It includes an H1 heading followed by a brief paragraph that describes the content of the page. The heading should be short and avoid excessive whitespace to prevent issues with the table of contents.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/documentation_best_practices.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# My Page Title\n\nThis page covers my super cool feature. You can use this feature to make coffee, squeeze fresh oj, and have an egg mcmuffin and hashbrowns delivered from your local macca's by drone.\n```\n\n----------------------------------------\n\nTITLE: Setting Global Current Control in config.h (C)\nDESCRIPTION: This snippet demonstrates how to set the global current control value in your `config.h` file. It shows how to define the `IS31FL3746A_GLOBAL_CURRENT` macro to a specific value, typically `0xFF` for the maximum current.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/is31fl3746a.md#_snippet_3\n\nLANGUAGE: C\nCODE:\n```\n#define IS31FL3746A_GLOBAL_CURRENT 0xFF\n```\n\n----------------------------------------\n\nTITLE: Defining Right-Hand Direct Pins in QMK\nDESCRIPTION: This macro defines the direct pins for the right half of a split keyboard.  If defined, the size of `DIRECT_PINS` must be the same as `DIRECT_PINS_RIGHT`. It allows for different direct pin configurations between the left and right halves.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/config_options.md#_snippet_95\n\nLANGUAGE: c\nCODE:\n```\n#define DIRECT_PINS_RIGHT { { F1, F0, B0, C7 }, { F4, F5, F6, F7 } }\n```\n\n----------------------------------------\n\nTITLE: Example Features Object in info.json - JSON\nDESCRIPTION: This JSON snippet demonstrates the structure for configuring keyboard features within the `info.json` file. It shows how to enable or disable specific features like `rgb_matrix` and `rgblight` by setting their corresponding boolean values. This configuration is used by QMK Firmware to customize the keyboard's functionality during compilation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/reference_info_json.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n        \"rgb_matrix\": true,\n        \"rgblight\": false\n    }\n```\n\n----------------------------------------\n\nTITLE: Base Layer Keymap Definition\nDESCRIPTION: Defines the base layer key assignments for the Dozen0 keyboard. This includes common functions like Cut, Copy, Paste, Up, Delete, Backspace, Ctrl, Shift, Left, Down, Right, and Enter. It also includes access to the Raise and Lower layers.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/yynmt/dozen0/keymaps/default/readme.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n,-----------------------------------------.\n|  Cut | Copy |Paste |  Up  |Delete| Bksp |\n|      |      |      |      |      |Raise |\n|------+------+------+------+------+------|\n| Ctrl |Shift | Left | Down |Right |Enter |\n|      |      |      |      |      |Lower |\n`-----------------------------------------'\n```\n\n----------------------------------------\n\nTITLE: Flashing Haven80 Hotswap Firmware\nDESCRIPTION: This command builds and flashes the default firmware for the Haven80 hotswap keyboard.  It relies on the QMK make system to compile the firmware and then uses a flashing tool to upload it to the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ah/haven80/hotswap/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake ah/haven80/hotswap:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Atreus Firmware for STM32F103 Controller\nDESCRIPTION: This command builds the Atreus keyboard firmware specifically for a variant powered by an STM32F103C8T6 microcontroller and flashes it. It ensures the firmware is compiled with the correct libraries and settings for the STM32F103.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/atreus/readme.md#_snippet_4\n\nLANGUAGE: makefile\nCODE:\n```\nmake atreus/f103:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building suihankey Firmware\nDESCRIPTION: This command builds the firmware for the suihankey keyboard with the default keymap. It assumes that the QMK build environment has been set up correctly. The resulting firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kakunpc/suihankey/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake kakunpc/suihankey/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Building the 2x5keypad firmware using QMK\nDESCRIPTION: This command builds the default keymap for the 2x5keypad keyboard within the QMK Firmware environment. It assumes the user has already set up their build environment according to the QMK documentation. The resulting firmware can then be flashed onto the Pro Micro controller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/2x5keypad/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake handwired/2x5keyapd:default\n```\n\n----------------------------------------\n\nTITLE: Building Snatchpad Firmware (Makefile)\nDESCRIPTION: This command builds the default firmware for the Snatchpad macropad. It uses the QMK build environment to compile the source code into a firmware image that can be flashed onto the device. Requires a correctly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/snatchpad/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/snatchpad:default\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for ortho5x14 with QMK\nDESCRIPTION: This snippet demonstrates how to build the firmware for the ortho5x14 keyboard using the QMK build system. It assumes that the QMK build environment has been set up correctly. The command `make handwired/ortho5x14:default` compiles the firmware with the default keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/ortho5x14/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake handwired/ortho5x14:default\n```\n\n----------------------------------------\n\nTITLE: Compiling Iron180 V2 QMK Firmware with Make\nDESCRIPTION: This command compiles the default keymap for the Iron180 V2 keyboard using the QMK build environment. The `<version>` parameter specifies the PCB version, which can be `v2s` (solderable) or `v2h` (hotswap). Requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/smithrune/iron180v2/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake smithrune/iron180v2/<version>/default\n```\n\n----------------------------------------\n\nTITLE: Building BDN9-BLE Firmware with QMK\nDESCRIPTION: This command builds the firmware for the BDN9-BLE keyboard with the default keymap using the QMK build environment. It requires a properly configured QMK build environment and will generate a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/bdn9_ble/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/bdn9_ble:default\n```\n\n----------------------------------------\n\nTITLE: Building Boardsource 5x12 Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Boardsource 5x12 keyboard using the QMK build environment. It requires the QMK build environment to be properly set up. The resulting firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/boardsource/5x12/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake boardsource/5x12:default\n```\n\n----------------------------------------\n\nTITLE: Building Dumbo Keyboard Firmware with Make\nDESCRIPTION: This command builds the default firmware for the Dumbo keyboard.  It requires a properly configured QMK build environment. It outputs the compiled firmware ready to be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/dumbo/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake dumbo:default\n```\n\n----------------------------------------\n\nTITLE: Making Keyboard Firmware\nDESCRIPTION: This command builds the firmware for the EC TKL keyboard with the default keymap. It uses the `make` command-line tool with the target specified as `cipulot/ec_tkl:default`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cipulot/ec_tkl/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake cipulot/ec_tkl:default\n```\n\n----------------------------------------\n\nTITLE: Making the BKS65 Firmware - Makefile\nDESCRIPTION: This command builds the QMK firmware for the fjlabs/bks65 keyboard using the default configuration. It requires a properly set up QMK build environment as outlined in the linked documentation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/fjlabs/bks65/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake fjlabs/bks65:default\n```\n\n----------------------------------------\n\nTITLE: Building LCK75 Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the LCK75 keyboard using the QMK build environment. It requires a properly configured QMK environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/lyso1/lck75/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake lyso1/lck75:default\n```\n\n----------------------------------------\n\nTITLE: Building Firmware with Default Keymap\nDESCRIPTION: This snippet shows how to build the firmware with the default keymap. It uses the `make default` command. This assumes you have set up your development environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/dichotomy/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake default\n```\n\n----------------------------------------\n\nTITLE: Building firmware for keyten/kt60_mu with QMK\nDESCRIPTION: This command builds the default firmware for the keyten/kt60_mu keyboard using the QMK build environment.  It compiles the source code into a firmware image that can be flashed onto the keyboard. Ensure the QMK build environment is properly set up before executing this command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keyten/kt60_mu/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake keyten/kt60_mu:default\n```\n\n----------------------------------------\n\nTITLE: Building Reverb Firmware\nDESCRIPTION: This command builds the default firmware for the Reverb keyboard using the QMK build environment. It assumes that the QMK build environment is already set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/dasky/reverb/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake dasky/reverb:default\n```\n\n----------------------------------------\n\nTITLE: Building hifumi with QMK\nDESCRIPTION: This snippet shows how to build the default keymap for the hifumi macro pad using the QMK build environment. It assumes that the build environment is already set up. The command compiles the hifumi keyboard with the default keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/hifumi/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake hifumi:default\n```\n\n----------------------------------------\n\nTITLE: Building Claw44 Firmware - QMK\nDESCRIPTION: This command builds the default firmware for the Claw44 keyboard revision 1 using the QMK build environment. It assumes that the QMK build environment has already been set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/dailycraft/claw44/rev1/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake claw44/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Building Split-Cloud Keyboard Firmware - Make Command\nDESCRIPTION: This command is used to compile the default firmware for the Split-Cloud keyboard. It utilizes the QMK build environment to generate the firmware that can be flashed onto the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/split_cloud/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake handwired/split_cloud:default\n```\n\n----------------------------------------\n\nTITLE: Building DZ96 Firmware (QMK)\nDESCRIPTION: This command builds the default keymap for the DZ96 keyboard using the QMK firmware.  It assumes that the QMK build environment has been set up. The resulting firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/dztech/dz96/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake dztech/dz96:default\n```\n\n----------------------------------------\n\nTITLE: Building KBD75HS Firmware with Make\nDESCRIPTION: This snippet demonstrates how to build the firmware for the KBD75HS keyboard using the `make` command. It assumes that the QMK build environment has already been set up. The command specifies the keyboard (`kbdfans/kbd75hs`) and the keymap (`default`).\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kbdfans/kbd75hs/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake kbdfans/kbd75hs:default\n```\n\n----------------------------------------\n\nTITLE: Building Keyboard Firmware\nDESCRIPTION: This command builds the default keymap for the Constellation EC keyboard. It assumes the QMK build environment has been set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cipulot/ec_constellation/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake cipulot/ec_constellation:default\n```\n\n----------------------------------------\n\nTITLE: Building Baragon Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the Baragon macropad using the QMK build environment. It assumes that the QMK build environment has already been set up. The resulting firmware can then be flashed onto the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/phantagom/baragon/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake phantagom/baragon:default\n```\n\n----------------------------------------\n\nTITLE: Building Planck Rev2 Firmware (Default)\nDESCRIPTION: This command is used to build the default firmware for the Planck rev2 keyboard using the QMK build environment. It assumes that the QMK build environment is already set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/planck/rev2/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake planck/rev2:default\n```\n\n----------------------------------------\n\nTITLE: Compiling QMK Firmware for DOIO KB04\nDESCRIPTION: This command compiles the QMK firmware for the DOIO KB04 keyboard with the default keymap. It requires a correctly set up QMK build environment.  The command takes the keyboard name (doio/kb04) and keymap name (default) as arguments. The output is a firmware file suitable for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/doio/kb04/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nqmk compile -kb doio/kb04 -km default\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware for BINEPAD BN009 (R2)\nDESCRIPTION: This command builds and flashes the default firmware for the BINEPAD BN009 R2 variant using the QMK build environment. It compiles the keymap and programs the firmware onto the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/binepad/bn009/readme.md#_snippet_3\n\nLANGUAGE: make\nCODE:\n```\nmake binepad/bn009/r2:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Alish40 Firmware (make)\nDESCRIPTION: This command flashes the compiled firmware to the Alish40 keyboard. It uses the `make` command with the `:flash` target to program the keyboard's microcontroller with the firmware. Requires a properly configured build environment and connected keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/reedskeebs/alish40/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake reedskeebs/alish40:default:flash\n```\n\n----------------------------------------\n\nTITLE: Enabling Large Mouse Reports\nDESCRIPTION: This define enables support for larger mouse motion reports (from -32767 to 32767), providing more precision for the trackball. Requires reflashing both keyboard halves.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/bastardkb/charybdis/readme.md#_snippet_7\n\nLANGUAGE: C\nCODE:\n```\n#define MOUSE_EXTENDED_REPORT\n```\n\n----------------------------------------\n\nTITLE: Building GummyKey Firmware\nDESCRIPTION: Builds the default firmware for the GummyKey keyboard.  Requires a properly configured QMK build environment. The command compiles the keyboard's firmware using the default keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/gummykey/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake gummykey:default\n```\n\n----------------------------------------\n\nTITLE: Building Ahgase VIA Firmware\nDESCRIPTION: This command compiles the QMK firmware for the Ahgase keyboard with VIA support.  It requires the QMK build environment to be set up. The compiled firmware can then be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/plywrks/ahgase/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake plywrks/ahgase:via\n```\n\n----------------------------------------\n\nTITLE: Flashing YM68 Firmware\nDESCRIPTION: This command flashes the compiled firmware onto the YM68 keyboard. It utilizes the QMK flashing tools to transfer the firmware image to the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ymdk/ym68/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake ymdk/ym68:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing the default keymap onto Mercury65 via QMK\nDESCRIPTION: This command is used to flash the compiled default keymap onto the Mercury65 keyboard using the QMK firmware. It programs the firmware onto the keyboard's microcontroller. This requires the QMK build environment to be properly set up and the keyboard to be in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/drewkeys/mercury65/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake drewkeys/mercury65:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing QMK Firmware to Alexa Hotswap PCB\nDESCRIPTION: This command flashes the compiled QMK firmware to the Alexa Hotswap PCB. It requires the necessary flashing tools to be installed and configured. The keyboard must be in bootloader mode for flashing to succeed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/lucid/alexa/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake lucid/alexa:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Big Series Firmware - Makefile\nDESCRIPTION: This snippet shows how to build the firmware for the Big Series Keyboards using the `make` command within the QMK Firmware environment. It specifies the keyboard layout and keymap to build. Two examples are provided: one for a 1-key layout with the default keymap, and another for a 3-key layout with a ctrl-alt-del keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/woodkeys/bigseries/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake woodkeys/bigseries/1key:default\nmake woodkeys/bigseries/3key:ctrl-alt-del\n```\n\n----------------------------------------\n\nTITLE: Flashing the Feker IK75 Keyboard Firmware\nDESCRIPTION: This command flashes the compiled firmware to the Feker IK75 keyboard. It requires a properly configured QMK build environment and a connected keyboard in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/feker/ik75/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake feker/ik75:default:flash\n```\n\n----------------------------------------\n\nTITLE: Keymap (Base Layer) Default Layer\nDESCRIPTION: This snippet represents the default keymap layout for the kbd67 keyboard. It visually depicts the arrangement of keys on the base layer and their corresponding functions. No specific dependencies or code implementation is involved, as it's purely a keymap representation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kbdfans/kbd67/rev1/keymaps/default/readme.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n/* Keymap (Base Layer) Default Layer\n * ,----------------------------------------------------------------.\n * |Esc|  1|  2|  3|  4|  5|  6|  7|  8|  9|  0|  -|  =|Backsp |Home|\n * |----------------------------------------------------------------|\n * |Tab  |  Q|  W|  E|  R|  T|  Y|  U|  I|  O|  P|  [|  ]|  \\  |PgUp|\n * |----------------------------------------------------------------|\n * |Ctrl   |  A|  S|  D|  F|  G|  H|  J|  K|  L|  ;|  '|Return |PgDn|\n * |----------------------------------------------------------------|\n * |Shift   |  Z|  X|  C|  V|  B|  N|  M|  ,|  .|  /|Shift | Up|End |\n * |----------------------------------------------------------------|\n * |Ctrl|Win |Alt |        Space          |Alt| FN|Ctrl|Lef|Dow|Rig |\n * `----------------------------------------------------------------'\n */\n```\n\n----------------------------------------\n\nTITLE: Overriding I2C Initialization in C\nDESCRIPTION: This snippet provides an example of overriding the weakly defined `i2c_init` function for custom initialization.  It releases the SDA and SCL pins, waits briefly, and then configures the pins for I2C alternate function mode with open-drain and pull-up resistors. This gives fine-grained control over I2C pin setup.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/i2c.md#_snippet_4\n\nLANGUAGE: c\nCODE:\n```\nvoid i2c_init(void) {\n    gpio_set_pin_input(B6); // Try releasing special pins for a short time\n    gpio_set_pin_input(B7);\n    wait_ms(10); // Wait for the release to happen\n\n    palSetPadMode(GPIOB, 6, PAL_MODE_ALTERNATE(4) | PAL_STM32_OTYPE_OPENDRAIN | PAL_STM32_PUPDR_PULLUP); // Set B6 to I2C function\n    palSetPadMode(GPIOB, 7, PAL_MODE_ALTERNATE(4) | PAL_STM32_OTYPE_OPENDRAIN | PAL_STM32_PUPDR_PULLUP); // Set B7 to I2C function\n}\n```\n\n----------------------------------------\n\nTITLE: Modifier-Based Layer Indicator using HSV in C\nDESCRIPTION: This code snippet sets the color of modifier keys based on the layer state, using HSV color representation for brightness control. It converts the HSV value to RGB before setting the LED color, ensuring that the brightness does not exceed the maximum allowed value.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/rgb_matrix.md#_snippet_9\n\nLANGUAGE: c\nCODE:\n```\nbool rgb_matrix_indicators_advanced_user(uint8_t led_min, uint8_t led_max) {\n    hsv_t hsv = {0, 255, 255};\n\n    if (layer_state_is(layer_state, 2)) {\n        hsv = (hsv_t){130, 255, 255};\n    } else {\n        hsv = (hsv_t){30, 255, 255};\n    }\n\n    if (hsv.v > rgb_matrix_get_val()) {\n        hsv.v = rgb_matrix_get_val();\n    }\n    rgb_t rgb = hsv_to_rgb(hsv);\n\n    for (uint8_t i = led_min; i < led_max; i++) {\n        if (HAS_FLAGS(g_led_config.flags[i], 0x01)) { // 0x01 == LED_FLAG_MODIFIER\n            rgb_matrix_set_color(i, rgb.r, rgb.g, rgb.b);\n        }\n    }\n    return false;\n}\n```\n\n----------------------------------------\n\nTITLE: Black Pill Pinout Diagram\nDESCRIPTION: This shows the suggested pin layout when connecting the Black Pill to the Zenith Z-150.  This diagram maps specific Black Pill pins to the rows (R), columns (C), LEDs (LN, LS, LC) and power (3V3, GND) for direct wiring to the keyboard matrix.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/z150/readme.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n      R0  R1  R2  R3  R4  R6          R9  LC  LN  LS\n,--------------------------------------------------------------------,\n|B12 B13 B14 B15  A8  A9 A10 A11 A12 A15  B3  B4  B5  B6  B7 3V3 GND |---,\n|                                                                    |USB|\n|B11 B10  B1  B0  A7  A6  A5  A4  A3  A2  A1  A0 RST C13  B9  B8 GND |---'\n'--------------------------------------------------------------------'\n  C0  C1  C2  C3  C4  C5  C6  C7  R5  R8  R7  RA    \n```\n\n----------------------------------------\n\nTITLE: Flashing BM60HSRGB_ISO Firmware (rev2)\nDESCRIPTION: This command builds and flashes the default firmware for the rev2 version of the BM60HSRGB_ISO keyboard to the board. It relies on the QMK build environment and associated flashing tools.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kprepublic/bm60hsrgb_iso/readme.md#_snippet_3\n\nLANGUAGE: Makefile\nCODE:\n```\nmake kprepublic/bm60hsrgb_iso/rev2:default:flash\n```\n\n----------------------------------------\n\nTITLE: LED Mapping for Single-Color Driver (C)\nDESCRIPTION: This snippet shows how to map LED indices to specific output pins for the single-color driver. Similar to the RGB mapping, an array `g_is31fl3743a_leds` is created in `<keyboardname>.c`. Each element defines the driver index and the PWM register address (corresponding to SWx_CSy pin) for the LED. `PROGMEM` stores the array in program memory, which is crucial in embedded systems where RAM is limited.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/is31fl3743a.md#_snippet_4\n\nLANGUAGE: c\nCODE:\n```\nconst is31fl3743a_led_t PROGMEM g_is31fl3743a_leds[IS31FL3743A_LED_COUNT] = {\n/* Driver\n *   |  V */\n    {0, SW1_CS1},\n    // etc...\n};\n```\n\n----------------------------------------\n\nTITLE: Flashing Default Firmware for Lime Keyboard\nDESCRIPTION: This command compiles and flashes the default firmware onto the Lime keyboard. It assumes that the QMK build environment is set up and that the keyboard is connected.  The user is prompted to press the reset button during the flashing process.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/lime/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake lime:default:flash\n```\n\n----------------------------------------\n\nTITLE: Defining a Music Map in QMK\nDESCRIPTION: This C code defines a `music_map` array, which is used to remap the scaling for Music Mode.  This is useful for boards with non-standard matrix layouts, such as the Planck Rev6 or split keyboards. To use this, you must define the `MUSIC_MAP` preprocessor directive.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/audio.md#_snippet_22\n\nLANGUAGE: c\nCODE:\n```\nconst uint8_t music_map[MATRIX_ROWS][MATRIX_COLS] = LAYOUT_ortho_4x12(\n\t36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\n\t24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35,\n\t12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,\n\t 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11\n);\n```\n\n----------------------------------------\n\nTITLE: Lower Layer - Helix Keyboard\nDESCRIPTION: Defines the Lower layer keymap for the Helix keyboard. This layer is activated when the Lower key is held, providing access to symbols, function keys, and media controls.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/helix/rev2/keymaps/default/readme.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n ,-----------------------------------------.             ,-----------------------------------------.\n |   ~  |   !  |   @  |   #  |   $  |   %  |             |   ^  |   &  |   *  |   (  |   )  |      |\n |------+------+------+------+------+------|             |------+------+------+------+------+------|\n |   ~  |   !  |   @  |   #  |   $  |   %  |             |   ^  |   &  |   *  |   (  |   )  |      |\n |------+------+------+------+------+------|             |------+------+------+------+------+------|\n |      |  F1  |  F2  |  F3  |  F4  |  F5  |             |  F6  |   _  |   +  |   {  |   }  |  |   |\n |------+------+------+------+------+------+------+------+------+------+------+------+------+------|\n |      |  F7  |  F8  |  F9  |  F10 |  F11 |  (   |   )  |  F12 |      |      | Home | End  |      |\n |------+------+------+------+------+------+------+------+------+------+------+------+------+------|\n |      |      |      |      |      |      |      |      |      |      | Next | Vol- | Vol+ | Play |\n `-------------------------------------------------------------------------------------------------'\n```\n\n----------------------------------------\n\nTITLE: Update Tri-Layer State Function in QMK - C\nDESCRIPTION: This code shows how to use the `update_tri_layer_state` function within the `layer_state_set_user` function in QMK. This approach allows layer activation to automatically trigger tri-layer logic. The function `update_tri_layer_state` accepts the current layer state and three layer identifiers (x, y, z). It enables layer `z` only when both layers `x` and `y` are active. This code assumes that `_LOWER`, `_RAISE`, and `_ADJUST` are predefined layer names.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/ref_functions.md#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nlayer_state_t layer_state_set_user(layer_state_t state) {\n  return update_tri_layer_state(state, _LOWER, _RAISE, _ADJUST);\n}\n```\n\n----------------------------------------\n\nTITLE: Keymap Fn Layer\nDESCRIPTION: This snippet represents the function layer keymap layout for the kbd67 keyboard. It visually depicts the arrangement of keys on the function layer and their corresponding functions when the function key is pressed. No specific dependencies or code implementation is involved, as it's purely a keymap representation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kbdfans/kbd67/rev1/keymaps/default/readme.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n  /* Keymap Fn Layer\n   * ,----------------------------------------------------------------.\n   * |~ `|F1 |F2 |F3 |F4 |F5 |F6 |F7 |F8 |F9 |F10|F11|F12|Del    |Ins |\n   * |----------------------------------------------------------------|\n   * |Caps |   |Up |   |   |   |   |   |PSc|SLk|Pau|Up |   |     |    |\n   * |----------------------------------------------------------------|\n   * |      |Lef|Dow|Rig|   |   |   |   |Hom|PUp|Lef|Rig|        |    |\n   * |----------------------------------------------------------------|\n   * |        |   |   |   |   |   |   |   |End|PDn|Dow|      |PUp|    |\n   * |----------------------------------------------------------------|\n   * |    |    |    |                       |   |   |    |Hom|PDn|End |\n   * `----------------------------------------------------------------'\n   */\n```\n\n----------------------------------------\n\nTITLE: Conditional RGBLED Configuration in post_rules.mk\nDESCRIPTION: This code snippet demonstrates how to conditionally enable RGBLIGHT and define LED counts based on the `RGBLED_OPTION_TYPE` variable in the `post_rules.mk` file. It also includes error handling for invalid `RGBLED_OPTION_TYPE` values. It uses `ifeq` to check for specific `RGBLED_OPTION_TYPE` values and define `RGBLIGHT_ENABLE` and `OPT_DEFS` accordingly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/hardware_keyboard_guidelines.md#_snippet_5\n\nLANGUAGE: makefile\nCODE:\n```\nifeq ($(filter $(strip $(RGBLED_OPTION_TYPE))x, nonex backlightx underglowx x),)\n   $(error unknown RGBLED_OPTION_TYPE value \"$(RGBLED_OPTION_TYPE)\")\nendif\n\nifeq ($(strip $(RGBLED_OPTION_TYPE)),backlight)\n  RGBLIGHT_ENABLE = yes\n  OPT_DEFS += -DRGBLIGHT_LED_COUNT=30\nendif\nifeq ($(strip $(RGBLED_OPTION_TYPE)),underglow)\n  RGBLIGHT_ENABLE = yes\n  OPT_DEFS += -DRGBLIGHT_LED_COUNT=6\nendif\n```\n\n----------------------------------------\n\nTITLE: Defining Audio Feedback for Leader Key (QMK)\nDESCRIPTION: This example demonstrates playing different sounds based on the success or failure of a leader key sequence. It defines songs that are played when the sequence starts, succeeds, or fails, providing audio feedback to the user. Requires `AUDIO_ENABLE`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/leader_key.md#_snippet_8\n\nLANGUAGE: C\nCODE:\n```\n#ifdef AUDIO_ENABLE\nfloat leader_start_song[][2] = SONG(ONE_UP_SOUND);\nfloat leader_succeed_song[][2] = SONG(ALL_STAR);\nfloat leader_fail_song[][2] = SONG(RICK_ROLL);\n#endif\n\nvoid leader_start_user(void) {\n#ifdef AUDIO_ENABLE\n    PLAY_SONG(leader_start_song);\n#endif\n}\n\nvoid leader_end_user(void) {\n    bool did_leader_succeed = false;\n\n    if (leader_sequence_one_key(KC_E)) {\n        SEND_STRING(SS_LCTL(SS_LSFT(\"t\")));\n        did_leader_succeed = true;\n    } else if (leader_sequence_two_keys(KC_E, KC_D)) {\n        SEND_STRING(SS_LGUI(\"r\") \"cmd\\n\" SS_LCTL(\"c\"));\n        did_leader_succeed = true;\n    }\n\n#ifdef AUDIO_ENABLE\n    if (did_leader_succeed) {\n        PLAY_SONG(leader_succeed_song);\n    } else {\n        PLAY_SONG(leader_fail_song);\n    }\n#endif\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling SERIAL Subsystem in ChibiOS HAL (halconf.h)\nDESCRIPTION: This code snippet demonstrates how to enable the `SERIAL` subsystem within the ChibiOS HAL (Hardware Abstraction Layer). This configuration is necessary to utilize the `SERIAL` driver for serial communication. The code must be added to the keyboard's `halconf.h` file. It includes a `#pragma once` directive to prevent multiple inclusions and an `#include_next` directive to include the next `halconf.h` file in the include path.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/serial.md#_snippet_10\n\nLANGUAGE: C\nCODE:\n```\n#pragma once\n\n#define HAL_USE_SERIAL TRUE // [!code focus]\n\n#include_next <halconf.h>\n```\n\n----------------------------------------\n\nTITLE: Building Atreyu Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the Atreyu keyboard using the QMK build environment. It compiles the keymap and firmware, preparing it for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/atreyu/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake atreyu:default\n```\n\n----------------------------------------\n\nTITLE: Enabling Charybdis Configuration Syncing\nDESCRIPTION: This define enables the synchronization of Charybdis configuration between keyboard halves, allowing features like RGB matrix status displays to reflect the current configuration.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/bastardkb/charybdis/readme.md#_snippet_6\n\nLANGUAGE: C\nCODE:\n```\n#define CHARYBDIS_CONFIG_SYNC\n```\n\n----------------------------------------\n\nTITLE: Making MJ6XY keyboard firmware\nDESCRIPTION: This command builds the default firmware for the MJ6XY rev3 keyboard. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/melgeek/mj6xy/readme.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmake melgeek/mj6xy/rev3:default\n```\n\n----------------------------------------\n\nTITLE: Building Firmware\nDESCRIPTION: This command builds the default firmware for the BM68HSRGB keyboard (revision 2). It requires a properly configured QMK build environment. The output is a .hex or .bin file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kprepublic/bm68hsrgb/rev2/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake kprepublic/bm68hsrgb/rev2:default\n```\n\n----------------------------------------\n\nTITLE: Update PWM Buffers - C\nDESCRIPTION: This function, `is31fl3743a_update_pwm_buffers`, flushes the PWM values to the LED driver. This is necessary after setting brightness values for individual LEDs using `is31fl3743a_set_value`. It takes the driver index as input.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/is31fl3743a.md#_snippet_10\n\nLANGUAGE: C\nCODE:\n```\nvoid is31fl3743a_update_pwm_buffers(uint8_t index)\n```\n\n----------------------------------------\n\nTITLE: Keeping User Print Messages in config.h\nDESCRIPTION: This code snippet demonstrates how to disable print messages but keep user print messages enabled in the `config.h` file. Defining `USER_PRINT` allows user print messages to be included in the compiled firmware while excluding standard print messages.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/getting_started_make_guide.md#_snippet_4\n\nLANGUAGE: C\nCODE:\n```\n#define USER_PRINT\n```\n\n----------------------------------------\n\nTITLE: Flashing Ghoul Firmware (STM32)\nDESCRIPTION: This command flashes the default firmware for the Ghoul keyboard using the STM32 MicroMod. It invokes the `make` command with the `flash` target for the tzarc/ghoul/rev1 board with the stm32 MCU. It requires a correctly configured QMK build environment and a connected keyboard in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/tzarc/ghoul/readme.md#_snippet_2\n\nLANGUAGE: Makefile\nCODE:\n```\nmake tzarc/ghoul/rev1/stm32:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Joker Firmware with Make\nDESCRIPTION: This command builds the default keymap for the Joker keyboard using the QMK build environment. It utilizes the `make` command with the target specified as `jaykeeb/joker:default`.  This requires the QMK build environment to be properly set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/jaykeeb/joker/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake jaykeeb/joker:default\n```\n\n----------------------------------------\n\nTITLE: Building minim Keyboard Firmware\nDESCRIPTION: This command builds the default QMK firmware for the minim keyboard. It requires a properly configured QMK build environment. The output will be a .hex or .bin file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/matthewdias/minim/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake matthewdias/minim:default\n```\n\n----------------------------------------\n\nTITLE: Generic Hook to (Dis)allow Combo Activation\nDESCRIPTION: This code snippet shows how to use a generic hook, `COMBO_SHOULD_TRIGGER`, to conditionally allow or disallow combo activation. The `combo_should_trigger` function takes the combo index, combo structure, keycode, and key record as input. It checks the combo index and the current layer state and returns `false` to disable the combo if certain conditions are met.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/combo.md#_snippet_9\n\nLANGUAGE: c\nCODE:\n```\nbool combo_should_trigger(uint16_t combo_index, combo_t *combo, uint16_t keycode, keyrecord_t *record) {\n    /* Disable combo `SOME_COMBO` on layer `_LAYER_A` */\n    switch (combo_index) {\n        case SOME_COMBO:\n            if (layer_state_is(_LAYER_A)) {\n                return false;\n            }\n    }\n\n    return true;\n}\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware to Albacore Macropad (QMK)\nDESCRIPTION: This command builds and flashes the default firmware for the Albacore macropad using the QMK build environment. This command assumes that the QMK build environment is correctly set up and that the device is connected and recognized. The command combines building and flashing into a single step.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/paprikman/albacore/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake paprikman/albacore:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building GK61 PRO Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the GK61 PRO keyboard using the QMK build environment. It compiles the source code and generates a firmware image ready to be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/skyloong/gk61/pro/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake skyloong/gk61/pro:default\n```\n\n----------------------------------------\n\nTITLE: Building QMK Firmware for AEBoards Satellite\nDESCRIPTION: This command is used to build the QMK firmware for the AEBoards Satellite keyboard, specifically the rev1 version with the default keymap. It assumes that the QMK build environment is already set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/aeboards/satellite/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake aeboards/satellite/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Compiling ScottoMacrodeck Firmware\nDESCRIPTION: This command compiles the default firmware for the ScottoMacrodeck using the QMK build environment. It requires the QMK build environment to be set up correctly. The compiled firmware can then be flashed to the macropad.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/scottokeebs/scottomacrodeck/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake handwired/scottokeebs/scottomacrodeck:default\n```\n\n----------------------------------------\n\nTITLE: Compiling Helix Pico with RGB Underglow Enabled\nDESCRIPTION: This snippet shows how to compile the Helix Pico firmware with RGB underglow enabled from the command line and flashing it. This also bypasses the need to edit `rules.mk`. Uses a keyboard name `helix/pico/under`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/helix/pico/keymaps/default/readme_jp.md#_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\n$ make helix/pico/under:default:flash\n```\n\n----------------------------------------\n\nTITLE: Compile Viendi8L Firmware\nDESCRIPTION: This command compiles the default layout for the Viendi8L keyboard firmware using the QMK build environment. It requires the QMK build environment to be set up correctly.  The output is a `*.bin` file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/viendi8l/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake viendi8l:default\n```\n\n----------------------------------------\n\nTITLE: Building Breeze Rev1 Firmware with QMK\nDESCRIPTION: This snippet provides the command to compile the default firmware for the Breeze Rev1 keyboard using the QMK build environment.  It assumes that the QMK build environment has been properly set up. The resulting firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/afternoonlabs/breeze/rev1/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake afternoonlabs/breeze/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Define SPI Slave Select Pin for External Flash (C)\nDESCRIPTION: This configuration option defines the SPI slave select pin used to communicate with the external FLASH chip.  It is crucial for addressing the FLASH chip correctly during SPI communication.  The value should be set according to the hardware connection on the PCB.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/flash.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define EXTERNAL_FLASH_SPI_SLAVE_SELECT_PIN  _none_\n```\n\n----------------------------------------\n\nTITLE: Setting Clipping Range for RGB LEDs in QMK Firmware (C)\nDESCRIPTION: This code shows how to set the clipping range for RGB LEDs in QMK Firmware. This allows for using a buffer larger than the actual number of LEDs, useful for split keyboards. This requires `rgblight_set_clipping_range` function. The example sets the clipping range to start at index 3 and span 4 LEDs.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/rgblight.md#_snippet_11\n\nLANGUAGE: c\nCODE:\n```\n// some source\nrgblight_set_clipping_range(3, 4);\n```\n\n----------------------------------------\n\nTITLE: Flashing Wren Keyboard Firmware (QMK)\nDESCRIPTION: This command builds and flashes the default keymap for the Wren keyboard to the connected device. It depends on the QMK build environment being correctly configured and the keyboard being in a flashable state. The command assumes that a flashing tool is already installed and configured correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wren/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake wren:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Keaboard Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Keaboard revision 1 using the QMK build system. It compiles the source code and creates a firmware image that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keaboard/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake keaboard/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Idobao ID96 Firmware\nDESCRIPTION: This command builds and flashes the default firmware to the Idobao ID96 keyboard. It requires the QMK build environment to be set up and the keyboard to be in bootloader mode.  It relies on dfu-programmer or similar tools configured by QMK's build system.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/idobao/id96/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake idobao/id96:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing WT65-G Firmware (QMK)\nDESCRIPTION: This command flashes the default firmware onto the wilba.tech WT65-G keyboard using the QMK build environment.  It requires a correctly configured QMK build environment and appropriate flashing tools.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wilba_tech/wt65_g/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake wilba_tech/wt65_g:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building SAM SG81M Keyboard Firmware\nDESCRIPTION: This command compiles the default keymap for the SAM SG81M keyboard using the QMK build environment. It assumes that the QMK firmware environment has been properly configured. It generates a .hex file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/sam/sg81m/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake sam/sg81m:default\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for TOFU_JR_V1 using QMK\nDESCRIPTION: This command is used to compile the firmware for the TOFU_JR_V1 keyboard with the default keymap using the QMK build environment. It requires the QMK build environment to be set up correctly, as described in the QMK documentation. The output is a .hex or .bin file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/dztech/tofu/jr/v1/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake dztech/tofu/jr:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Mini Winni Firmware with QMK\nDESCRIPTION: This command flashes the compiled firmware onto the Mini Winni macropad. It requires the QMK build environment and a connected Mini Winni device in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/winkeys/mini_winni/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake winkeys/mini_winni:default:flash\n```\n\n----------------------------------------\n\nTITLE: Compiling KBD67 Hotswap Firmware with QMK\nDESCRIPTION: This command compiles the default firmware for the KBD67 Hotswap keyboard using the QMK build system. It requires the QMK build environment to be properly set up. The compiled firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kbdfans/kbd67/readme.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmake kbdfans/kbd67/hotswap:default\n```\n\n----------------------------------------\n\nTITLE: Backup Original Firmware using dfu-util\nDESCRIPTION: This snippet shows how to back up the original firmware image using `dfu-util`. It lists available DFU devices and uploads the firmware from the specified address. Requires dfu-util to be installed and the keyboard to be in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/durgod/dgk6x/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndfu-util --list\ndfu-util --alt 0 --dfuse-address 0x08000000 --upload ${OLD_STOCK_BIN}\n```\n\n----------------------------------------\n\nTITLE: Setting RGB and HSV Colors in QMK Firmware (C)\nDESCRIPTION: This code snippet demonstrates how to set RGB and HSV colors, as well as how to set specific LEDs and ranges of LEDs to desired color values using QMK Firmware's rgblight functions.  It relies on the QMK rgblight library being properly initialized. The code snippets sets orange color to the RGB lights and a green color to HSV lights, sets the third RGB LED to Gold, and sets the HSV color of the leds between indexes 0 and 6 (inclusive) to white.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/rgblight.md#_snippet_9\n\nLANGUAGE: c\nCODE:\n```\nrgblight_setrgb(RGB_ORANGE);\nrgblight_sethsv_noeeprom(HSV_GREEN);\nrgblight_setrgb_at(RGB_GOLD, 3);\nrgblight_sethsv_range(HSV_WHITE, 0, 6);\n```\n\n----------------------------------------\n\nTITLE: Function Layer Keymap\nDESCRIPTION: Defines the function layer keymap accessible via the Fn key. It includes function keys (F1-F12), media keys (mprv, mply, mnxt), volume controls, and other special functions like NKRO, print screen, scroll lock, and pause.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kc60se/keymaps/default/readme.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n  ,--------------------------------------------------------------------------.\n  |    | f1 | f2 | f3 | f4 | f5 | f6 | f7 | f8 | f9 | f10| f11| f12|    | ins|\n  |--------------------------------------------------------------------------|\n  | caps |blon|blup|    |    |NKRO|    |    | psc|slck|paus| up |    |  del  |\n  |--------------------------------------------------------------------------|\n  |       |vol-|vol+|mute|    |    | *  | /  |home|pgup|left|rght| penter    |\n  |--------------------------------------------------------------------------|\n  |          |mprv|mply|mnxt|    |    | +  | -  |end |pgdn|down|        |    |\n  `--------------------------------------------------------------------------'\n          |    |      |                                  | mstop |    |\n          `-----------------------------------------------------------'\n```\n\n----------------------------------------\n\nTITLE: Decoding RLE Data Pseudocode\nDESCRIPTION: Pseudocode for decoding Run-Length Encoded (RLE) data as used in QMK's QGF/QFF formats. It handles both non-repeating and repeating sections by reading a marker byte, determining the length and type of section, and either reading multiple unique bytes or repeating a single byte the specified number of times. The pseudocode reads until the end of the file (EOF) is reached.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/quantum_painter_rle.md#_snippet_0\n\nLANGUAGE: pseudocode\nCODE:\n```\nwhile !EOF\n    marker = READ_OCTET()\n\n    if marker >= 128\n        length = marker - 128\n        for i = 0 ... length-1\n            c = READ_OCTET()\n            WRITE_OCTET(c)\n\n    else\n        length = marker\n        c = READ_OCTET()\n        for i = 0 ... length-1\n            WRITE_OCTET(c)\n\n```\n\n----------------------------------------\n\nTITLE: Defining the Frame Delta structure in C\nDESCRIPTION: This code snippet defines the structure for the frame delta block in the QMK Graphics Format (QGF). It contains the block header, left, top, right, and bottom pixel locations defining the sub-image. The `__attribute__((packed))` ensures no padding is added, and the structure size is asserted to be 13 bytes.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/quantum_painter_qgf.md#_snippet_5\n\nLANGUAGE: c\nCODE:\n```\ntypedef struct __attribute__((packed)) qgf_delta_v1_t {\n    qgf_block_header_v1_t header;  // = { .type_id = 0x04, .neg_type_id = (~0x04), .length = 8 }\n    uint16_t left;                 // The left pixel location to draw the delta image\n    uint16_t top;                  // The top pixel location to draw the delta image\n    uint16_t right;                // The right pixel location to to draw the delta image\n    uint16_t bottom;               // The bottom pixel location to to draw the delta image\n} qgf_delta_v1_t;\n// _Static_assert(sizeof(qgf_delta_v1_t) == 13, \"qgf_delta_v1_t must be 13 bytes in v1 of QGF\");\n```\n\n----------------------------------------\n\nTITLE: Intercepting Hold Function in QMK\nDESCRIPTION: This code demonstrates intercepting the hold function of a layer-tap key (LT) using `process_record_user` to send custom keycodes. In this example, it assigns cut, copy, and paste functionality to the X, C, and V keys respectively when held down.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/mod_tap.md#_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nbool process_record_user(uint16_t keycode, keyrecord_t *record) {\n    switch (keycode) {\n        case LT(0,KC_X):\n            if (!record->tap.count && record->event.pressed) {\n                tap_code16(C(KC_X)); // Intercept hold function to send Ctrl-X\n                return false;\n            }\n            return true;             // Return true for normal processing of tap keycode\n        case LT(0,KC_C):\n            if (!record->tap.count && record->event.pressed) {\n                tap_code16(C(KC_C)); // Intercept hold function to send Ctrl-C\n                return false;\n            }\n            return true;             // Return true for normal processing of tap keycode\n        case LT(0,KC_V):\n            if (!record->tap.count && record->event.pressed) {\n                tap_code16(C(KC_V)); // Intercept hold function to send Ctrl-V\n                return false;\n            }\n            return true;             // Return true for normal processing of tap keycode\n    }\n    return true;\n}\n```\n\n----------------------------------------\n\nTITLE: Flashing Halfcliff Keyboard Firmware - QMK\nDESCRIPTION: This snippet shows how to flash the pre-built or newly built firmware to the Halfcliff keyboard using the `make` command with the `:flash` target. This assumes the keyboard is connected and the bootloader is active. The command initiates the flashing process, uploading the compiled firmware to the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/halfcliff/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake halfcliff:default:flash\n```\n\n----------------------------------------\n\nTITLE: Defining Tap Dance Keys and Actions in keymap.c\nDESCRIPTION: This example shows how to define a tap dance key and associated actions using the `TD()` macro and the `tap_dance_actions` array.  It defines a tap dance key `TD_ESC_CAPS` that sends `KC_ESC` on a single tap and `KC_CAPS` on a double tap. Dependencies include the QMK core and the Tap Dance feature being enabled in `rules.mk`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/tap_dance.md#_snippet_2\n\nLANGUAGE: c\nCODE:\n```\n// Tap Dance declarations\nenum {\n    TD_ESC_CAPS,\n};\n\n// Tap Dance definitions\ntap_dance_action_t tap_dance_actions[] = {\n    // Tap once for Escape, twice for Caps Lock\n    [TD_ESC_CAPS] = ACTION_TAP_DANCE_DOUBLE(KC_ESC, KC_CAPS),\n};\n\n// Add tap dance item to your keymap in place of a keycode\nconst uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {\n    // ...\n    TD(TD_ESC_CAPS)\n    // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a ILI9486 Device Instance (C)\nDESCRIPTION: This code snippet shows how to create an instance of the ILI9486 display device in firmware using the `qp_ili9486_make_spi_device` function. The function takes parameters for panel dimensions, SPI pins (chip select, data/command, reset), SPI divisor, and SPI mode. The returned device handle is required for subsequent drawing operations.  Requires the `ili9486_spi` driver to be enabled.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/quantum_painter.md#_snippet_14\n\nLANGUAGE: c\nCODE:\n```\npainter_device_t qp_ili9486_make_spi_device(uint16_t panel_width, uint16_t panel_height, pin_t chip_select_pin, pin_t dc_pin, pin_t reset_pin, uint16_t spi_divisor, int spi_mode);\n```\n\n----------------------------------------\n\nTITLE: Defining Alternate Keys for SFB Elimination (C)\nDESCRIPTION: This snippet remaps common same-finger bigrams (SFBs) on QWERTY.  For example, typing 'E' followed by Alternate Repeat will type 'D', addressing the \"ED\" bigram. The function uses a switch statement to map specific keycodes to their alternates.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/repeat_key.md#_snippet_4\n\nLANGUAGE: c\nCODE:\n```\nuint16_t get_alt_repeat_key_keycode_user(uint16_t keycode, uint8_t mods) {\n    switch (keycode) {\n        case KC_E: return KC_D;  // For \"ED\" bigram.\n        case KC_D: return KC_E;  // For \"DE\" bigram.\n        case KC_C: return KC_E;  // For \"CE\" bigram.\n        case KC_L: return KC_O;  // For \"LO\" bigram.\n        case KC_U: return KC_N;  // For \"UN\" bigram.\n    }\n\n    return KC_TRNS;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a ILI9488 Device Instance (C)\nDESCRIPTION: This code snippet shows how to create an instance of the ILI9488 display device in firmware using the `qp_ili9488_make_spi_device` function. The function takes parameters for panel dimensions, SPI pins (chip select, data/command, reset), SPI divisor, and SPI mode. The returned device handle is required for subsequent drawing operations.  Requires the `ili9488_spi` driver to be enabled.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/quantum_painter.md#_snippet_18\n\nLANGUAGE: c\nCODE:\n```\npainter_device_t qp_ili9488_make_spi_device(uint16_t panel_width, uint16_t panel_height, pin_t chip_select_pin, pin_t dc_pin, pin_t reset_pin, uint16_t spi_divisor, int spi_mode);\n```\n\n----------------------------------------\n\nTITLE: Creating a ST7789 Device Instance (C)\nDESCRIPTION: This code snippet shows how to create an instance of the ST7789 display device in firmware using the `qp_st7789_make_spi_device` function. The function takes parameters for panel dimensions, SPI pins (chip select, data/command, reset), SPI divisor, and SPI mode. The returned device handle is required for subsequent drawing operations. Requires the `st7789_spi` driver to be enabled.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/quantum_painter.md#_snippet_24\n\nLANGUAGE: c\nCODE:\n```\npainter_device_t qp_st7789_make_spi_device(uint16_t panel_width, uint16_t panel_height, pin_t chip_select_pin, pin_t dc_pin, pin_t reset_pin, uint16_t spi_divisor, int spi_mode);\n```\n\n----------------------------------------\n\nTITLE: LED Configuration Struct in C\nDESCRIPTION: This code snippet illustrates the structure `led_config_t` which defines the LED matrix configuration.  It includes mappings from key matrix positions to LED indices, LED indices to physical positions on the keyboard, and LED indices to flags indicating the LED type. The physical position is used for LED animations.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/led_matrix.md#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nled_config_t g_led_config = { {\n  // Key Matrix to LED Index\n  {   5, NO_LED, NO_LED,   0 },\n  { NO_LED, NO_LED, NO_LED, NO_LED },\n  {   4, NO_LED, NO_LED,   1 },\n  {   3, NO_LED, NO_LED,   2 }\n}, {\n  // LED Index to Physical Position\n  { 188,  16 }, { 187,  48 }, { 149,  64 }, { 112,  64 }, {  37,  48 }, {  38,  16 }\n}, {\n  // LED Index to Flag\n  1, 4, 4, 4, 4, 1\n} };\n```\n\n----------------------------------------\n\nTITLE: Building GK61 Firmware with Make\nDESCRIPTION: This snippet demonstrates how to build the QMK firmware for the Skyloong GK61 keyboard using the `make` command. It includes examples for building the default firmware and the VIA-compatible firmware. The command requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/skyloong/gk61/v1/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake skyloong/gk61/v1:default\n```\n\nLANGUAGE: make\nCODE:\n```\nmake skyloong/gk61/v1:via\n```\n\n----------------------------------------\n\nTITLE: Defining Flash Chip Compatibility for RP2040\nDESCRIPTION: These code snippets define the compatibility of the RP2040 with different flash chips, enabling the selection of the appropriate second-stage bootloader. They are included in the `config.h` file of your keyboard layout. The correct definition ensures proper interaction with the external flash memory during boot.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/platformdev_rp2040.md#_snippet_2\n\nLANGUAGE: C\nCODE:\n```\n#define RP2040_FLASH_AT25SF128A\n```\n\nLANGUAGE: C\nCODE:\n```\n#define RP2040_FLASH_GD25Q64CS\n```\n\nLANGUAGE: C\nCODE:\n```\n#define RP2040_FLASH_W25X10CL\n```\n\nLANGUAGE: C\nCODE:\n```\n#define RP2040_FLASH_IS25LP080\n```\n\nLANGUAGE: C\nCODE:\n```\n#define RP2040_FLASH_GENERIC_03H\n```\n\n----------------------------------------\n\nTITLE: Initializing LCD and displaying \"Hello, world!\" (C)\nDESCRIPTION: This snippet shows how to initialize the HD44780 LCD and display the \"Hello, world!\" message using the `hd44780_init` and `hd44780_puts_P` functions. The `keyboard_post_init_user` function is called after the keyboard is initialized, making it a suitable place for initializing the LCD and printing the message.  `hd44780_puts_P` writes a PROGMEM string to the display.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/hd44780.md#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nvoid keyboard_post_init_user(void) {\n    hd44780_init(true, true); // Show blinking cursor\n    hd44780_puts_P(PSTR(\"Hello, world!\\n\"));\n}\n```\n\n----------------------------------------\n\nTITLE: Convert VIA Keymap to JSON (qmk via2json)\nDESCRIPTION: This command generates a `keymap.json` from a VIA keymap backup, converting both layers and macros. Requires a keyboard specification using `-kb KEYBOARD` and a filename argument.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/cli_commands.md#_snippet_30\n\nLANGUAGE: text\nCODE:\n```\nqmk via2json -kb KEYBOARD [-l LAYOUT] [-km KEYMAP] [-o OUTPUT] filename\n```\n\nLANGUAGE: text\nCODE:\n```\n$ qmk via2json -kb ai03/polaris -o polaris_keymap.json polaris_via_backup.json\n```\n\n----------------------------------------\n\nTITLE: Flashing Jones Keyboard Firmware - QMK\nDESCRIPTION: This command flashes the compiled firmware onto the Jones keyboard (version 1) using the QMK build environment.  It assumes the keyboard is connected and in a flashable state, potentially requiring bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/jones/v1/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake jones/v1:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building the QMK Firmware for Mode M256-WH PCB\nDESCRIPTION: This command builds the default keymap for the Mode M256-WH keyboard using the QMK firmware build system. It compiles the firmware and creates a .hex file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mode/m256wh/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake mode/m256wh:default\n```\n\n----------------------------------------\n\nTITLE: Building Trifecta Keyboard Firmware with QMK\nDESCRIPTION: This code snippet shows the command to build the default keymap for the Trifecta keyboard using the QMK build environment. It assumes that the QMK build environment is already set up and configured correctly. The command `make basekeys/trifecta:default` compiles the firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/basekeys/trifecta/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake basekeys/trifecta:default\n```\n\n----------------------------------------\n\nTITLE: Building M65 rev2 firmware with make\nDESCRIPTION: This command builds the default firmware for the M65 keyboard revision 2 using the QMK make system. It compiles the necessary source code and generates a firmware image suitable for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mlego/m65/readme.md#_snippet_2\n\nLANGUAGE: Makefile\nCODE:\n```\nmake mlego/m65/rev2:default\n```\n\n----------------------------------------\n\nTITLE: Building MonsGeek M3 Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the MonsGeek M3 keyboard. It requires the QMK build environment to be set up. The output will be a .hex or .bin file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/monsgeek/m3/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake monsgeek/m3:default\n```\n\n----------------------------------------\n\nTITLE: Building CannonKeys Cloudline Firmware\nDESCRIPTION: This command builds the default firmware for the CannonKeys Cloudline keyboard. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cannonkeys/cloudline/readme.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmake cannonkeys/cloudline:default\n```\n\n----------------------------------------\n\nTITLE: Building Baguette Keyboard Firmware\nDESCRIPTION: This command builds the default keymap for the Baguette keyboard using the QMK firmware build environment.  It assumes that the QMK build environment is already set up.  The output is a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/baguette/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake baguette:default\n```\n\n----------------------------------------\n\nTITLE: Compiling ANAVI Knob 1 Firmware with QMK\nDESCRIPTION: This command compiles the firmware for the ANAVI Knob 1 keyboard using the QMK build environment. It specifies the keyboard layout (anavi/knob1) and the keymap (default). This command assumes that the QMK build environment has already been set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/anavi/knob1/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nqmk compile -kb anavi/knob1 -km default\n```\n\n----------------------------------------\n\nTITLE: Flashing M64 RGB Firmware with QMK\nDESCRIPTION: This command flashes the built firmware onto the M64 RGB keyboard using the QMK build environment. It requires the keyboard to be in bootloader mode. The command uses the default flashing method configured for the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mss_studio/m64_rgb/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake mss_studio/m64_rgb:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Skelett 40 Firmware\nDESCRIPTION: This command builds the Skelett 40 keyboard firmware with the default keymap within the QMK build environment. It compiles the source code and generates the firmware file for flashing to the keyboard. The QMK build environment must be set up prior to running this command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/novelkeys/skelett40/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake novelkeys/skelett40:default\n```\n\n----------------------------------------\n\nTITLE: Flashing n60-s Firmware with QMK\nDESCRIPTION: This command flashes the default firmware onto the n60-s keyboard using the QMK build environment. It requires a connected and bootloader-ready keyboard. Make sure QMK environment is configured correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/nightly_boards/n60_s/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake nightly_boards/n60_s:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Bolek Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Bolek keyboard using the QMK build environment. It assumes that the QMK build environment has already been set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/bolek/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake handwired/bolek:default\n```\n\n----------------------------------------\n\nTITLE: Building JKB2 Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the JKB2 osu! Macropad. It requires a properly configured QMK build environment. This generates the firmware file that can be flashed onto the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/jadookb/jkb2/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake jadookb/jkb2:default\n```\n\n----------------------------------------\n\nTITLE: Building bandominedoni Firmware\nDESCRIPTION: This command builds the default firmware for the bandominedoni keyboard. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/bandominedoni/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake bandominedoni:default\n```\n\n----------------------------------------\n\nTITLE: Building Janky No.9 Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the Janky No.9 macropad using the QMK build environment.  It requires a properly configured QMK build environment. The output is the compiled firmware ready to be flashed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/jankycaps/janky9/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake jankycaps/janky9:default\n```\n\n----------------------------------------\n\nTITLE: Compiling firmware for Scotto34 keyboard\nDESCRIPTION: This command compiles the default firmware for the Scotto34 keyboard. It requires a correctly set up QMK build environment. The output is a firmware file ready to be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/scottokeebs/scotto34/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake scottokeebs/scotto34:default\n```\n\n----------------------------------------\n\nTITLE: Ping I2C Address - C\nDESCRIPTION: This function pings the I2C bus for a specific address to check if a device is present. It attempts to read a single byte from register 0 at the given address. It can be overridden for specific use cases.  The function takes the device address and a timeout value as input and returns an `i2c_status_t` indicating the status of the operation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/i2c.md#_snippet_7\n\nLANGUAGE: C\nCODE:\n```\ni2c_status_t i2c_ping_address(uint8_t address, uint16_t timeout)\n```\n\n----------------------------------------\n\nTITLE: Defining QMK Keyboard Layout: 60 ISO Split Backspace Right Shift\nDESCRIPTION: This snippet defines a keyboard layout macro for QMK firmware. It creates a 60% ISO layout with a split backspace and right shift key configuration. The LAYOUT_60_iso_split_bs_rshift macro is used to generate the key arrangement for the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/layouts/default/60_iso_split_bs_rshift/readme.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nLAYOUT_60_iso_split_bs_rshift\n```\n\n----------------------------------------\n\nTITLE: Inverting OLED Display (C)\nDESCRIPTION: This function inverts the colors of the OLED display.  It takes a boolean value indicating whether to invert the display or not.  Returns true if the display was or is inverted.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/oled_driver.md#_snippet_34\n\nLANGUAGE: c\nCODE:\n```\n// Inverts the display\n// Returns true if the screen was or is inverted\nbool oled_invert(bool invert);\n```\n\n----------------------------------------\n\nTITLE: Modifying _delay_us in matrix.c - C\nDESCRIPTION: This code snippet shows how to modify the delay in `matrix.c` to improve stability with 3.3V Pro Micros.  The original delay is commented out and replaced with a longer delay of 300 microseconds.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/xealous/readme.md#_snippet_5\n\nLANGUAGE: c\nCODE:\n```\n// _delay_us(30);  // without this wait read unstable value.\n_delay_us(300);  // without this wait read unstable value.\n```\n\n----------------------------------------\n\nTITLE: Flashing Levinson Firmware with Pro Micro - avrdude\nDESCRIPTION: This command compiles and flashes the Levinson keyboard firmware rev3 to a Pro Micro controller using avrdude. It requires a correctly configured QMK build environment and a connected Pro Micro. Assumes `avrdude` is the correct flasher for the MCU.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keebio/levinson/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake keebio/levinson/rev3:default:avrdude\n```\n\n----------------------------------------\n\nTITLE: Getting Maximum Display Lines\nDESCRIPTION: Returns the maximum number of lines that can fit on the ST7565 display. The return type is `uint8_t`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/st7565.md#_snippet_33\n\nLANGUAGE: C\nCODE:\n```\n// Returns the maximum number of lines that will fit on the display\nuint8_t st7565_max_lines(void);\n```\n\n----------------------------------------\n\nTITLE: Compiling QMK Firmware\nDESCRIPTION: Compiles the QMK firmware for the handwired Atreus50 keyboard with the default keymap. This command must be executed within the QMK build environment after it has been properly set up.  It generates the firmware file that can be flashed onto the microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/atreus50/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake handwired/atreus50:default\n```\n\n----------------------------------------\n\nTITLE: Building QMK Firmware with Make\nDESCRIPTION: This command builds the QMK firmware for the GG Keyboards Genesis Solder PCB using the `make` command. It compiles the firmware with the default configuration. Ensure the QMK build environment is set up before running this command. The output is a firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ggkeyboards/genesis/solder/readme.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmake ggkeyboards/genesis/solder:default\n```\n\n----------------------------------------\n\nTITLE: Checking Key Press State in QMK\nDESCRIPTION: This code snippet demonstrates how to check if a key is being pressed or released within a QMK Firmware macro. It uses the `record->event.pressed` boolean to determine the key state. This check occurs within the `process_record_user` function of the keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/feature_macros.md#_snippet_9\n\nLANGUAGE: c\nCODE:\n```\nif (record->event.pressed) {\n    // on keydown\n} else {\n    // on keyup\n}\n```\n\n----------------------------------------\n\nTITLE: Convert JSON Keymap to C (Bash)\nDESCRIPTION: This command converts a `keymap.json` file to a `keymap.c` file using the `qmk json2c` tool. The `-o` flag specifies the output file name.  This allows users to add custom C code for advanced keyboard functionality, but disables the use of the JSON file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/splitkb/aurora/lily58/keymaps/default/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nqmk json2c -o keymap.c keymap.json\n```\n\n----------------------------------------\n\nTITLE: Matrix Diagram Visualization\nDESCRIPTION: This snippet represents a visual diagram of the keyboard matrix for the CannonKeys Gentoo Hotswap. It illustrates how rows and columns are organized and interconnected, which is crucial for understanding key mapping and diagnosing issues. It is a visual representation only and does not contain executable code.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cannonkeys/gentoo_hs/matrix_diagram.md#_snippet_0\n\nLANGUAGE: Diagram\nCODE:\n```\n┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───────┐ ┌───┐\n│00 │01 │02 │03 │04 │05 │06 │07 │08 │09 │0A │0B │0C │0D     │ │0E │\n├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─────┤ ├───┤\n│10   │11 │12 │13 │14 │15 │16 │17 │18 │19 │1A │1B │1C │1D   │ │1E │\n├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴─────┤ ├───┤\n│20    │21 │22 │23 │24 │25 │26 │27 │28 │29 │2A │2B │2D      │ │2E │\n├──────┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴────┬───┘ ├───┤\n│30      │32 │33 │34 │35 │36 │37 │38 │39 │3A │3B │3C    │┌───┐│3E │\n├────┬───┴┬──┴─┬─┴───┴───┴───┴───┴───┴──┬┴───┴┬──┴──┬───┘│3D │└───┘\n│40  │41  │42  │46                      │4A   │4B   │┌───┼───┼───┐\n└────┴────┴────┴────────────────────────┴─────┴─────┘│4C │4D │4E │\n                                                     └───┴───┴───┘\n```\n\n----------------------------------------\n\nTITLE: Flashing keyten kt60-M Firmware\nDESCRIPTION: This command builds and flashes the default firmware for the keyten kt60-M keyboard. It requires a properly configured QMK build environment and a connected keyboard in a flashable state.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keyten/kt60_m/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake keyten/kt60_m:default:flash\n```\n\n----------------------------------------\n\nTITLE: Enabling Per-Key Tapping Term\nDESCRIPTION: Enables the use of individual tapping term settings for each key.  This requires additional configuration for each key, defining the specific tapping term value to use. This setting allows for fine-grained control over tap-hold behavior.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/config_options.md#_snippet_42\n\nLANGUAGE: C\nCODE:\n```\n#define TAPPING_TERM_PER_KEY\n```\n\n----------------------------------------\n\nTITLE: Making the default keymap for Mercury65 in QMK\nDESCRIPTION: This command is used to build the default keymap for the Mercury65 keyboard using the QMK firmware. It compiles the keymap and prepares it for flashing onto the keyboard.  It depends on the QMK build environment being properly set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/drewkeys/mercury65/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake drewkeys/mercury65:default\n```\n\n----------------------------------------\n\nTITLE: Flashing the Ishi 80 Mk 0 Firmware\nDESCRIPTION: This command builds and flashes the default keymap for the Ishi 80 Mk 0 keyboard using the argo_works/ishi/80/mk0_avr_extra configuration. It requires a properly configured QMK build environment and a connected keyboard in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/argo_works/ishi/80/mk0_avr_extra/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake argo_works/ishi/80/mk0_avr_extra:default:flash\n```\n\n----------------------------------------\n\nTITLE: Example Layout Compile Usage - qmk compile\nDESCRIPTION: This example demonstrates compiling the mechmerlin-ansi keymap for the dz60 keyboard after navigating to the appropriate layout directory.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/cli_commands.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n$ cd ~/qmk_firmware/layouts/community/60_ansi/mechmerlin-ansi\n$ qmk compile -kb dz60\nΨ Compiling keymap with make dz60:mechmerlin-ansi\n...\n```\n\n----------------------------------------\n\nTITLE: Unicode Map Array Definition in QMK\nDESCRIPTION: Defines a constant array named `unicode_map` that stores 32-bit unicode values. The `PROGMEM` attribute indicates that this array should be stored in the program memory (flash) of the microcontroller to conserve RAM.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/signum/3_0/keymaps/default/km_template.txt#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nconst uint32_t unicode_map[] PROGMEM = {\n//<uc_map/>\n};\n```\n\n----------------------------------------\n\nTITLE: Flashing keyboard firmware (make)\nDESCRIPTION: This command builds and flashes the default firmware for the mechlovin/olly/jf keyboard using the QMK build system. It requires a properly configured build environment and a compatible flashing tool. The command combines the build and flash steps for convenience.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechlovin/olly/jf/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake mechlovin/olly/jf:default:flash\n```\n\n----------------------------------------\n\nTITLE: Switch Statement Keycode Range Usage - C\nDESCRIPTION: This code snippet demonstrates how to use predefined keycode ranges within a switch statement in QMK Firmware.  It shows the transformation from individual keycode cases to using `BASIC_KEYCODE_RANGE` and `MODIFIER_KEYCODE_RANGE` for more concise and maintainable code. This simplifies handling groups of related keycodes and makes keymaps less susceptible to keycode value changes.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/ChangeLog/20231126.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n    switch (keycode) {\n        case KC_A ... KC_EXSEL:\n        case KC_LEFT_CTRL ... KC_RIGHT_GUI:\n        /* do stuff with basic and modifier keycodes */\n```\n\nLANGUAGE: c\nCODE:\n```\n    switch (keycode) {\n        case BASIC_KEYCODE_RANGE:\n        case MODIFIER_KEYCODE_RANGE:\n        /* do stuff with basic and modifier keycodes */\n```\n\n----------------------------------------\n\nTITLE: Flashing space_space Keyboard Firmware (QMK)\nDESCRIPTION: This command flashes the default firmware onto the space_space keyboard, revision 2, using the QMK build environment. It requires the QMK environment to be properly configured and the keyboard to be in a flashable state.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/qpockets/space_space/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake qpockets/space_space/rev2:default:flash\n```\n\n----------------------------------------\n\nTITLE: Custom Keyboard Level RGB Matrix Indicators in C\nDESCRIPTION: This code snippet defines a custom keyboard level RGB matrix indicator function. It calls the user-defined indicator function and then sets the color of a specific LED using `rgb_matrix_set_color`. This function allows for custom logic to control the RGB LEDs on the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/rgb_matrix.md#_snippet_4\n\nLANGUAGE: c\nCODE:\n```\nbool rgb_matrix_indicators_kb(void) {\n    if (!rgb_matrix_indicators_user()) {\n        return false;\n    }\n    rgb_matrix_set_color(index, red, green, blue);\n    return true;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Base Layer Keymap\nDESCRIPTION: This section defines the base layer keymap for the BM43hsrgb keyboard. It specifies the function of each key when no modifiers are active. The layout includes standard alphanumeric keys, modifiers like Shift and Ctrl, and navigation keys.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kprepublic/bm43hsrgb/keymaps/default/readme.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n,----------------------------------------------------------------------------.\n|  ESC  |  Q  |  W  |  E  |  R  |  T  |  Y  |  U  |  I  |  O  |  P  |  Bscp  |\n|----------------------------------------------------------------------------+\n|  Tab    |  A  |  S  |  D  |  F  |  G  |  H  |  J  |  K  |  L  |  Enter     |\n|----------------------------------------------------------------------------+\n|  Shift         |  Z  |  X  |  C  |  V  |  B  |  N  |  M  |  ,  |  ↑  |  .  |\n|----------------------------------------------------------------------------+\n| Ctrl | Win | Alt |  Space         |  Space        |  Fn  |  ←  |  ↓  |  →  |\n`----------------------------------------------------------------------------'\n```\n\n----------------------------------------\n\nTITLE: Setting Individual LED Color in C\nDESCRIPTION: The `apa102_set_color` function sets the color of a specific LED in the APA102 chain. It takes the LED index and RGB values as input. The changes are not immediately reflected; `apa102_flush()` must be called afterward to update the LEDs.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/apa102.md#_snippet_2\n\nLANGUAGE: C\nCODE:\n```\nvoid apa102_set_color(uint16_t index, uint8_t red, uint8_t green, uint8_t blue)\n```\n\n----------------------------------------\n\nTITLE: Flashing Sha Keyboard Firmware (QMK)\nDESCRIPTION: This command builds and flashes the default keymap for the Sha keyboard to the connected device.  It requires the QMK build environment to be set up and the device to be in a flashable state (e.g., bootloader mode).\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/sha/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake sha:default:flash\n```\n\n----------------------------------------\n\nTITLE: Enabling Bluetooth for Adafruit Feather 32U4 BLE (QMK)\nDESCRIPTION: This snippet shows how to enable Bluetooth functionality on the Adafruit Feather 32U4 BLE within the QMK firmware. It requires adding a specific line to the `rules.mk` file.  This allows the device to use the `PRODUCT` value from `config.h` for the device name.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/converter/m0110_usb/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nBLUETOOTH = bluefruit_le\n```\n\n----------------------------------------\n\nTITLE: Building YMD67 Keyboard Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the YMD67 keyboard using the QMK build environment.  It assumes that the QMK build environment is already set up. The output is the compiled firmware that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ymdk/ymd67/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake ymdk/ymd67:default\n```\n\n----------------------------------------\n\nTITLE: Building i75 Firmware with Pro Micro - Make Command\nDESCRIPTION: This command builds the default firmware specifically for the i75 keyboard using a Pro Micro controller. The command requires the QMK build environment to be properly configured. This will generate a `.hex` or `.bin` file suitable for flashing onto the Pro Micro controller on the i75.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/40percentclub/i75/readme.md#_snippet_1\n\nLANGUAGE: makefile\nCODE:\n```\nmake 40percentclub/i75/promicro:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Chalice Keyboard Firmware\nDESCRIPTION: This command builds and flashes the default firmware for the Chalice keyboard to the connected Pro-Micro. It depends on the QMK build environment and a connected, bootloader-ready Pro-Micro.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/chalice/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake chalice:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Iskar Keyboard Firmware\nDESCRIPTION: This command compiles the default keymap for the Iskar keyboard using the QMK firmware build environment. It requires the QMK build environment to be set up correctly. The output is a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/drewkeys/iskar/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake drewkkeys/iskar:default\n```\n\n----------------------------------------\n\nTITLE: Building suika85ergo Firmware (QMK)\nDESCRIPTION: This command compiles the default keymap for the suika85ergo keyboard using the QMK build system. It requires a correctly set up QMK build environment. The output will be a .hex or .bin file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/suikagiken/suika85ergo/readme.md#_snippet_0\n\nLANGUAGE: QMK Make\nCODE:\n```\nmake suikagiken/suika85ergo:default\n```\n\n----------------------------------------\n\nTITLE: Building MarcoPad Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the MarcoPad using the QMK build environment. It compiles the source code and generates a firmware file that can be flashed onto the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/marcopad/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake marcopad:default\n```\n\n----------------------------------------\n\nTITLE: Building the cosmo65 Firmware\nDESCRIPTION: This command builds the default keymap for the cosmo65 keyboard. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cosmo65/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake cosmo65:default\n```\n\n----------------------------------------\n\nTITLE: Building MS Sculpt Keyboard Firmware\nDESCRIPTION: This command builds the default keymap for the MS Sculpt keyboard using the QMK build environment.  It requires the QMK build environment to be properly set up.  The output is a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ms_sculpt/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake ms_sculpt:default\n```\n\n----------------------------------------\n\nTITLE: Building PLUTO Keyboard Firmware with Make\nDESCRIPTION: This command builds the default keymap for the dztech/pluto keyboard. It requires a properly configured QMK build environment. The output will be a firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/dztech/pluto/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake dztech/pluto:default\n```\n\n----------------------------------------\n\nTITLE: Building Ducky One 2 Mini Firmware\nDESCRIPTION: This command builds the default firmware for the Ducky One 2 Mini keyboard using the QMK build system. It requires a properly configured QMK build environment. The output is a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ducky/one2mini/1861st/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake ducky/one2mini:default\n```\n\n----------------------------------------\n\nTITLE: Building MK47 Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the MK47 keyboard using the QMK build environment. It compiles the keyboard layout and creates the firmware file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/inland/mk47/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake inland/mk47:default\n```\n\n----------------------------------------\n\nTITLE: Building QMK Firmware for Lemonpad\nDESCRIPTION: This command builds the QMK firmware for the handwired/lemonpad keyboard with the default keymap. It requires the QMK build environment to be set up beforehand.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/lemonpad/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake handwired/lemonpad:default\n```\n\n----------------------------------------\n\nTITLE: Building QMK Firmware for MNT Reform\nDESCRIPTION: This command builds the QMK firmware for the MNT Reform USB Keyboard (Standalone) with the default keymap. It assumes the QMK build environment is already set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mntre_v3/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake mntre_v3:default\n```\n\n----------------------------------------\n\nTITLE: Building Gray Studio Space65 Firmware\nDESCRIPTION: This command builds the default firmware for the Gray Studio Space65 keyboard. It assumes that the QMK build environment has already been set up. Use this command in your QMK firmware directory.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/gray_studio/space65/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake gray_studio/space65:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Stratos keyboard firmware (QMK)\nDESCRIPTION: This command builds and flashes the default firmware to the Stratos keyboard. It requires a properly set up QMK build environment and a connected keyboard in bootloader mode. Ensure the correct bootloader is installed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/stratos/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake stratos:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Sofle Keyboard with Default Keymap using avrdude\nDESCRIPTION: This command flashes the compiled firmware onto the Sofle keyboard using avrdude. It requires the keyboard to be in bootloader mode (reset button pressed) and assumes avrdude is properly configured in the build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/sofle/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake sofle:default:avrdude\n```\n\n----------------------------------------\n\nTITLE: Building eiri Keyboard Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the eiri keyboard using the QMK build environment. It compiles the keyboard layout and necessary drivers into a firmware image ready for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/emajesty/eiri/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake emajesty/eiri:default\n```\n\n----------------------------------------\n\nTITLE: Building THE60 firmware\nDESCRIPTION: This command is used to build the firmware for the THE60 keyboard with the default keymap. It assumes that the QMK build environment has already been set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/lazydesigners/the60/rev1/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake lazydesigners/the60/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Building CannonKeys Instant65 Firmware (QMK)\nDESCRIPTION: This command compiles the QMK Firmware for the CannonKeys Instant65 keyboard with the default keymap.  It requires the QMK build environment to be set up correctly and utilizes the make command. The output is a firmware file suitable for flashing onto the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cannonkeys/instant65/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake cannonkeys/instant65:default\n```\n\n----------------------------------------\n\nTITLE: Building Cospad Firmware with Make\nDESCRIPTION: This command compiles the default keymap for the Cospad keypad using the QMK build environment. It requires a properly configured QMK build environment. The compiled firmware can then be flashed onto the Cospad.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kprepublic/cospad/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake kprepublic/cospad:default\n```\n\n----------------------------------------\n\nTITLE: Building and flashing default idb_60 firmware\nDESCRIPTION: This command builds the default firmware for the idb/idb_60 keyboard and then flashes it to the keyboard using the QMK build environment. Requires the build environment and appropriate flashing tools to be set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/idb/idb_60/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake idb/idb_60:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for Octopad+ Keyboard (QMK)\nDESCRIPTION: This command builds the firmware for the DeskDaily Octopad+ keyboard using the QMK build environment.  It targets the `nightly_boards/octopadplus` keyboard and the `default` keymap. The `make` command is used to initiate the build process, which compiles the source code and generates the firmware file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/nightly_boards/octopadplus/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake nightly_boards/octopadplus:default\n```\n\n----------------------------------------\n\nTITLE: Building suisei Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the suisei keyboard. It assumes that the QMK build environment is already set up. The resulting firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kibou/suisei/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake kibou/suisei:default\n```\n\n----------------------------------------\n\nTITLE: Flashing MMKZOO65 Firmware with QMK\nDESCRIPTION: This command flashes the built firmware to the MMKZOO65 keyboard using the QMK build environment and the default flashing method. It requires a properly configured QMK environment and a connected keyboard in flashing mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mmkzoo65/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake mmkzoo65:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Primus75 Firmware\nDESCRIPTION: This command builds and flashes the default firmware for the Primus75 keyboard. It requires the QMK build environment to be set up correctly and a compatible flashing tool. The flash command overwrites the existing firmware on the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ilumkb/primus75/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake ilumkb/primus75:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing MariOrion v2.5 with QMK Make\nDESCRIPTION: These commands are used to flash the built MariOrion v2.5 firmware to the keyboard using the QMK build environment. The `make` command compiles and flashes the firmware for either the `prod` (production) or `proto` (prototype) version with the default keymap. Requires a configured QMK build environment and a connected keyboard in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mariorion_v25/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake mariorion_v25/prod:default:flash\n```\n\nLANGUAGE: shell\nCODE:\n```\nmake mariorion_v25/proto:default:flash\n```\n\n----------------------------------------\n\nTITLE: Set Brightness of All LEDs\nDESCRIPTION: Sets the brightness of all LEDs using the IS31FL3745 driver (single-color). Requires the brightness value as input.  The LED update is deferred until `is31fl3745_update_pwm_buffers()` is called.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/is31fl3745.md#_snippet_6\n\nLANGUAGE: c\nCODE:\n```\nvoid is31fl3745_set_value_all(uint8_t value)\n```\n\n----------------------------------------\n\nTITLE: Building NK65 Firmware with VIA support - make\nDESCRIPTION: This command builds the firmware for the NK65 keyboard with VIA support using the QMK build environment. It requires the QMK build environment to be properly set up beforehand. The command produces a firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/novelkeys/nk65/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake novelkeys/nk65:via\n```\n\n----------------------------------------\n\nTITLE: Building CSTM80 Firmware\nDESCRIPTION: This command builds the default firmware for the Drop CSTM80 keyboard. It requires a properly set up QMK build environment as described in the QMK documentation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/drop/cstm80/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake drop/cstm80:default\n```\n\n----------------------------------------\n\nTITLE: Base Layer Keymap - Dvorak\nDESCRIPTION: This code represents the Dvorak base layer of the Hillside 48 keyboard layout.  It defines the alternative assignment of keys, optimized for Dvorak users including modifiers and special keys.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/hillside/48/keymaps/default/readme.md#_snippet_1\n\nLANGUAGE: None\nCODE:\n```\nDvorak\n|  `    |  '  |  ,  |  .  |  P  |  Y  |---------------------------|  F  |  G  |  C  |  R  |  L  | BKSPC |\n| TAB   |  A  |  O  |  E  |  U  |  I  |---------------------------|  D  |  H  |  T  |  N  |  S  | ENTER |\n| SHIFT |  ;  |  Q  |  J  |  K  |  X  | ESC |---------------|CAPS |  B  |  M  |  W  |  V  |  Z  | SHIFT |\n--------------|CTRL |-----| GUI | ALT | Sym |SHIFT|---| Nav |SPACE| ALT | GUI |-----|  /  |--------------\n```\n\n----------------------------------------\n\nTITLE: Building QMK Firmware for mammoth75x\nDESCRIPTION: This command builds the default keymap for the mammoth75x keyboard. It uses the `make` command with the target specified as `wuque/mammoth75x:default`. This will compile the firmware and generate a `.hex` file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wuque/mammoth75x/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake wuque/mammoth75x:default\n```\n\n----------------------------------------\n\nTITLE: Cloning and Configuring External Userspace Repository (Local)\nDESCRIPTION: This snippet demonstrates how to clone the default external userspace repository and configure QMK to use it. It assumes you are in your home directory and prefer to keep the repository local.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/newbs_external_userspace.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncd $HOME\ngit clone https://github.com/qmk/qmk_userspace.git\nqmk config user.overlay_dir=\"$(realpath qmk_userspace)\"\n```\n\n----------------------------------------\n\nTITLE: Building p1800fl Firmware using Make\nDESCRIPTION: This command builds the default firmware for the p1800fl keyboard using the QMK build environment. It requires the QMK build environment to be set up correctly. The output is a .hex or .bin file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/team0110/p1800fl/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake team0110/p1800fl:default\n```\n\n----------------------------------------\n\nTITLE: shutdown_kb Implementation Example\nDESCRIPTION: Example implementation of the `shutdown_kb()` function in QMK. This function is called when the firmware is reset or when jumping to the bootloader. It allows for cleanup tasks such as turning off RGB matrices. It checks if it's a soft reset or a bootloader jump and sets the RGB matrix color accordingly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/custom_quantum_functions.md#_snippet_6\n\nLANGUAGE: c\nCODE:\n```\nbool shutdown_kb(bool jump_to_bootloader) {\n    if (!shutdown_user(jump_to_bootloader)) {\n        return false;\n    }\n    \n    if (jump_to_bootloader) {\n        // red for bootloader\n        rgb_matrix_set_color_all(RGB_OFF);\n    } else {\n        // off for soft reset\n        rgb_matrix_set_color_all(RGB_GREEN);\n    }\n    // force flushing -- otherwise will never happen\n    rgb_matrix_update_pwm_buffers();\n    return true;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RGB Light LED Count\nDESCRIPTION: Defines the number of LEDs in the RGB lighting setup. Sets the quantity of LEDs to control.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/config_options.md#_snippet_74\n\nLANGUAGE: C\nCODE:\n```\n#define RGBLIGHT_LED_COUNT 12\n```\n\n----------------------------------------\n\nTITLE: Adding a Community Module to keymap.json from external userspace (JSON)\nDESCRIPTION: This JSON snippet adds a community module from an external userspace to the `modules` array in `keymap.json`.  Replace `{user}` and `{module_name}` with the correct values for the module you want to include.  The module path is relative to the `modules/` directory.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/community_modules.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"modules\": [\n        \"qmk/hello_world\",\n        \"{user}/{module_name}\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Kimera Core Pinout and Component Mapping\nDESCRIPTION: This C-style comment block describes the pinout and component mapping for the Kimera Core v1.0, including the atmega32u4 microcontroller and the PCA9555 I2C IO expanders.  It details the connections between various components and their corresponding pins on the microcontroller and IO expanders.  The information is crucial for understanding the hardware layout and configuring the firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/xiudi/xd84/dev.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n/*\nKimera_core_v1.0 Components\n\n             U1 (atmega32u4)\n           ,----------------.\n      TX --| TX0(PD3)   RAW |--\n      RX --| RX1(PD2)   GND |--\n         --| GND      RESET |-- RST\n         --| GND        VCC |--\n     SDA --| 2(PD1) (PF4)A3 |--\n     SCL --| 3(PD0) (PF5)A2 |--\n   (INT) --| 4(PD4) (PF6)A1 |--\n         --| 5(PC6) (PF7)A0 |--\n         --| 6(PD7) (PB1)15 |-- SCK\n    LED2 --| 7(PE6) (PB3)14 |-- MISO\n    LED1 --| 8(PB4) (PB2)16 |-- MOSI\n    LED3 --| 9(PB5) (PB6)10 |-- LED4\n          `----------------'\n\n         IC1 (PCA9555)                  IC2 (PCA9555)\n         ,----------.                   ,----------.\n   SDA --| SDA  P00 |-- P1        SDA --| SDA  P00 |-- P17\n   SCL --| SCL  P01 |-- P2        SCL --| SCL  P01 |-- P18\n   INT --| INT  P02 |-- P3        INT --| INT  P02 |-- P19\n         |      P03 |-- P4              |      P03 |-- P20\n   GND --| A0   P04 |-- P5        VCC --| A0   P04 |-- P21\n   SJ1 --| A1   P05 |-- P6        SJ1 --| A1   P05 |-- P22\n   SJ2 --| A2   P06 |-- P7        SJ2 --| A2   P06 |-- P23\n         |      P07 |-- P8              |      P07 |-- P24\n         |          |                   |          |\n         |      P10 |-- P9              |      P10 |-- P25\n         |      P11 |-- P10             |      P11 |-- P26\n         |      P12 |-- P11             |      P12 |-- P27\n         |      P13 |-- P12             |      P13 |-- P28\n         |      P14 |-- P13             |      P14 |-- P29\n         |      P15 |-- P14             |      P15 |-- P30\n         |      P16 |-- P15             |      P16 |-- P31\n         |      P17 |-- P16             |      P17 |-- P32\n         `----------'                   `----------'\n*/\n```\n\n----------------------------------------\n\nTITLE: Import Keymap from keymap.json (qmk import-keymap)\nDESCRIPTION: This command imports a data-driven `keymap.json` keymap into the repository. Requires the filename as an argument.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/cli_commands.md#_snippet_32\n\nLANGUAGE: text\nCODE:\n```\nusage: qmk import-keymap [-h] filename\n```\n\nLANGUAGE: text\nCODE:\n```\nqmk import-keymap ~/Downloads/asdf2.json\n```\n\n----------------------------------------\n\nTITLE: Configuring Maximum ILI9163 Devices (C)\nDESCRIPTION: This snippet shows how to configure the maximum number of ILI9163 displays that can be used by setting the `ILI9163_NUM_DEVICES` macro in `config.h`. The default value is 1. This is a preprocessor definition. Requires Quantum Painter to be enabled.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/quantum_painter.md#_snippet_9\n\nLANGUAGE: c\nCODE:\n```\n// 3 displays:\n#define ILI9163_NUM_DEVICES 3\n```\n\n----------------------------------------\n\nTITLE: Enabling Strict Layer Release in QMK config.h\nDESCRIPTION: This code snippet force a key release to be evaluated using the current layer stack instead of remembering which layer it came from (used for advanced cases).\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/config_options.md#_snippet_40\n\nLANGUAGE: c\nCODE:\n```\n#define STRICT_LAYER_RELEASE\n```\n\n----------------------------------------\n\nTITLE: Sol Keyboard rules.mk Customization (QMK)\nDESCRIPTION: This snippet shows the configurable variables in the `rules.mk` file for the Sol keyboard within the QMK Firmware. These settings enable or disable features like Bootmagic, Mouse keys, RGB lighting, OLED display, and more, allowing users to customize the firmware build according to their needs.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/rgbkb/sol/keymaps/default/readme.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# Variables you can set for SOL\n\nBOOTMAGIC_ENABLE = no       # Enable Bootmagic Lite\nMOUSEKEY_ENABLE = no        # Mouse keys(+4700)\nEXTRAKEY_ENABLE = yes       # Audio control and System control(+450)\nCONSOLE_ENABLE = yes        # Console for debug(+400)\nCOMMAND_ENABLE = yes        # Commands for debug and configuration\nNKRO_ENABLE = no\nRGBLIGHT_ENABLE = yes       # Enable global lighting effects. Do not enable with RGB Matrix\nLED_MIRRORED = yes          # Mirror LEDs across halves (enable DIP 1 on slave, and DIP 2 and 3 on master)\nRGB_MATRIX_ENABLE = no      # Enable per-key coordinate based RGB effects. Do not enable with RGBlight (+8500)\nRGB_MATRIX_KEYPRESSES = no  # Enable reactive per-key effects. Can be very laggy (+1500)\nRGBLIGHT_FULL_POWER = no    # Allow maximum RGB brightness. Otherwise, limited to a safe level for a normal USB-A port\nSWAP_HANDS_ENABLE = no      # Enable one-hand typing\n\nOLED_ENABLE = no     # Enable the OLED Driver (+5000)\nIOS_DEVICE_ENABLE = no      # Limit max brightness to connect to IOS device (iPad,iPhone)\n```\n\n----------------------------------------\n\nTITLE: Keyboard Matrix Layout\nDESCRIPTION: This snippet visually represents the keyboard matrix layout, indicating the row and column assignments for each key.  It shows the physical arrangement of keys and their corresponding matrix coordinates.  The diagram is likely used to define keymap within QMK firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/bestway/matrix_diagram.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───────┐┌───┬───┬───┐    \n│00 │01 │02 │03 │04 │05 │06 │07 │08 │09 │0A │0B │0C │0D     ││0E │0F │0G │    \n├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─────┤├───┼───┼───┤      ┌─────┐\n│10   │11 │12 │13 │14 │15 │16 │17 │18 │19 │1A │1B │1C │1D   ││1E │1F │1G │      │     │\n├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴─────┤└───┴───┴───┘   ┌──┴┐2C  │ ISO Enter\n│20    │21 │22 │23 │24 │25 │26 │27 │28 │29 │2A │2B │2C      │                │1D │    │\n├──────┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴────────┤    ┌───┐       └───┴────┘\n│30      │31 │32 │33 │34 │35 │36 │37 │38 │39 │3A │3C        │    │3F │\n├────────┴──┴─┬─┴───┴───┴───┴───┴───┴──┬┴───┼───┴┬────┬────┤┌───┼───┼───┐\n│40  │41  │42  │45                      │49  │4A  │4B  │4C  ││4E │4F │4G │\n└────┴────┴────┴────────────────────────┴────┴────┴────┴────┘└───┴───┴───┘\n\n┌─────┬───┬─────┬───────────────────────────┬─────┬───┬─────┐\n│40   │41 │42   │45                         │4A   │4B │4C   │ Tsangan/WKL\n└─────┴───┴─────┴───────────────────────────┴─────┴───┴─────┘\n```\n\n----------------------------------------\n\nTITLE: Building the labyrinth75 keyboard\nDESCRIPTION: This command compiles the default keymap for the labyrinth75 keyboard. It assumes that the QMK build environment has been set up correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/labyrinth75/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake labyrinth75:default\n```\n\n----------------------------------------\n\nTITLE: PS/2 Mouse Additional Settings (C)\nDESCRIPTION: These defines configure various PS/2 mouse features like remote mode, scrolling, and scaling. These settings are placed in `config.h`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/ps2_mouse.md#_snippet_11\n\nLANGUAGE: c\nCODE:\n```\n/* Use remote mode instead of the default stream mode (see link) */\n#define PS2_MOUSE_USE_REMOTE_MODE\n\n/* Enable the scrollwheel or scroll gesture on your mouse or touchpad */\n#define PS2_MOUSE_ENABLE_SCROLLING\n\n/* Some mice will need a scroll mask to be configured. The default is 0xFF. */\n#define PS2_MOUSE_SCROLL_MASK 0x0F\n\n/* Applies a transformation to the movement before sending to the host (see link) */\n#define PS2_MOUSE_USE_2_1_SCALING\n\n/* The time to wait after initializing the ps2 host */\n#define PS2_MOUSE_INIT_DELAY 1000 /* Default */\n```\n\n----------------------------------------\n\nTITLE: Compiling Skeletyl Firmware with v1 and via keymap\nDESCRIPTION: This command compiles the QMK firmware for the Skeletyl keyboard with v1 shield (Elite-C) and via keymap. It uses the `qmk compile` command with specific parameters for the keyboard, version, and keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/bastardkb/skeletyl/readme.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nqmk compile -kb bastardkb/skeletyl/v1/elitec -km via\n```\n\n----------------------------------------\n\nTITLE: Increasing Global Effect Brightness in QMK (C)\nDESCRIPTION: This function increases the global brightness of the LED matrix effect, and the new value is saved to EEPROM.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/led_matrix.md#_snippet_25\n\nLANGUAGE: C\nCODE:\n```\nvoid val_matrix_increase_val(void)\n```\n\n----------------------------------------\n\nTITLE: Building Atlas Keyboard Firmware with Make\nDESCRIPTION: This command builds the default firmware for the Atlas keyboard using the QMK build environment. It assumes the user has already set up the build environment as described in the QMK documentation. The command compiles the keyboard's keymap and generates a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/pearlboards/atlas/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake pearlboards/atlas:default\n```\n\n----------------------------------------\n\nTITLE: Reading Raw Display Buffer\nDESCRIPTION: Returns a pointer to the start index in the buffer plus the remaining buffer length as a struct `display_buffer_reader_t`. Takes `start_index` (uint16_t) to specify the starting position in the buffer.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/st7565.md#_snippet_17\n\nLANGUAGE: C\nCODE:\n```\n// Returns a pointer to the requested start index in the buffer plus remaining\n// buffer length as struct\ndisplay_buffer_reader_t st7565_read_raw(uint16_t start_index);\n```\n\n----------------------------------------\n\nTITLE: QMK Flash Command with Converter\nDESCRIPTION: This command demonstrates how to flash a keyboard with a specific converter target using the `qmk flash` command. The `-e CONVERT_TO=<target>` flag specifies the desired target controller for the conversion process. It requires QMK CLI to be installed and configured.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/feature_converters.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nqmk flash -c -kb keebio/bdn9/rev1 -km default -e CONVERT_TO=proton_c\n```\n\n----------------------------------------\n\nTITLE: Install Windows Build Tools using XPM\nDESCRIPTION: This command uses the xPack Manager to globally install the Windows build tools. This is a necessary step for Windows users to compile code. The `--global` flag ensures the toolchain is accessible system-wide.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/arm_debugging.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nxpm install --global @gnu-mcu-eclipse/windows-build-tools\n```\n\n----------------------------------------\n\nTITLE: Measuring Delay Time - Makefile\nDESCRIPTION: This snippet demonstrates how to compile the firmware with the `matrix_debug_delay` option to measure the delay time during matrix scanning. The resulting measurements provide insights into the timing behavior of the matrix scanning process. This is specific to the symmetric70_proto keyboard on a Pro Micro.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/symmetric70_proto/matrix_debug/readme.md#_snippet_2\n\nLANGUAGE: Makefile\nCODE:\n```\nmake MTEST=matrix_debug_delay[,<other options>..] handwired/symmetric70_proto/promicro/normal:default:flash\n```\n\n----------------------------------------\n\nTITLE: Compiling Anne Pro 2 C15 Keymap\nDESCRIPTION: This command compiles the default keymap for the Anne Pro 2 C15 keyboard using the QMK build environment. It requires a correctly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/annepro2/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake annepro2/c15:default\n```\n\n----------------------------------------\n\nTITLE: LVGL Attach Example (C)\nDESCRIPTION: This example shows how to initialize a display, and attach LVGL to it. `qp_make_.......` is used to create a painter_device_t, which is then initialized with `qp_init` before calling `qp_lvgl_attach`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/quantum_painter_lvgl.md#_snippet_2\n\nLANGUAGE: C\nCODE:\n```\nstatic painter_device_t display;\nvoid keyboard_post_init_kb(void) {\n    display = qp_make_.......;         // Create the display\n    qp_init(display, QP_ROTATION_0);   // Initialise the display\n    \n    if (qp_lvgl_attach(display)) {     // Attach LVGL to the display\n        ...Your code to draw           // Run LVGL specific code to draw\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Unload Image with `qp_close_image` in C\nDESCRIPTION: The `qp_close_image` function releases the resources associated with a loaded image. It takes the image handle as input and frees the memory used by the image data. This is important for managing memory and preventing leaks.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/quantum_painter.md#_snippet_63\n\nLANGUAGE: c\nCODE:\n```\nbool qp_close_image(painter_image_handle_t image);\n```\n\n----------------------------------------\n\nTITLE: Flashing the HelixPico Firmware - Makefile\nDESCRIPTION: This snippet provides instructions on how to flash the built HelixPico keyboard firmware to the keyboard using the `make` command. Different flash configurations are shown, including flashing with backlight, backlight without animation, and with underglow. The first command flashes the default version. Subsequent commands flash with backlight, backlight without animation and underglow respectively.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/helix/pico/keymaps/default/readme.md#_snippet_3\n\nLANGUAGE: Makefile\nCODE:\n```\n$ make helix/pico:default:flash\n$ make helix/pico/back:default:flash               # with backlight\n$ make HELIX=no_ani helix/pico/back:default:flash  # with backlight without animation\n$ make helix/pico/under:default:flash              # with underglow\n```\n\n----------------------------------------\n\nTITLE: WT65-G2 Keyboard Matrix Diagram\nDESCRIPTION: This diagram illustrates the matrix layout of the wilba.tech WT65-G2 keyboard.  Each cell represents a key, and the numbers indicate the row and column the key is connected to in the matrix.  This information is crucial for configuring the keyboard firmware correctly, allowing the controller to identify which key is pressed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wilba_tech/wt65_g2/matrix_diagram.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n                                                    ┌───────┐\n                                       2u Backspace │0D     │\n                                                    └───────┘\n┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┐\n│00 │01 │02 │03 │04 │05 │06 │07 │08 │09 │0A │0B │0C │0D │2D │0E │\n├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴───┼───┤      ┌─────┐\n│10   │11 │12 │13 │14 │15 │16 │17 │18 │19 │1A │1B │1C │1D   │1E │      │     │\n├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴─────┼───┤   ┌──┴┐1D  │\n│20    │21 │22 │23 │24 │25 │26 │27 │28 │29 │2A │2B │2C      │2E │   │2C │    │\n├────┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴────┬───┼───┤   └───┴────┘\n│30  │31 │32 │33 │34 │35 │36 │37 │38 │39 │3A │3B │3C    │3D │3E │    ISO Enter\n├────┴┬──┼───┴─┬─┴───┴───┴───┴───┴───┴───┴─┬─┴───┼──┬───┼───┼───┤\n│40   │  │42   │46                         │4B   │  │4C │4D │4E │\n└─────┘  └─────┴───────────────────────────┴─────┘  └───┴───┴───┘\n┌────────┐\n│30      │ 2.25u LShift\n└────────┘\n```\n\n----------------------------------------\n\nTITLE: Building QMK Firmware for Keychron C1 Pro\nDESCRIPTION: This command builds the QMK firmware for the Keychron C1 Pro keyboard with specified layout (ANSI) and backlight configuration (RGB or White).  The `make` command compiles the source code and generates a firmware file that can be flashed onto the keyboard.  Requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keychron/c1_pro/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake keychron/c1/ansi/rgb:default\n```\n\nLANGUAGE: bash\nCODE:\n```\nmake keychron/c1/ansi/white:default\n```\n\n----------------------------------------\n\nTITLE: Building Keychron Q4 Firmware\nDESCRIPTION: This snippet shows how to build the firmware for different layouts and versions of the Keychron Q4 keyboard using the `make` command. It specifies the keyboard, layout (ANSI/ISO), and version (v1/v2).\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keychron/q4/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake keychron/q4/ansi/v1:default\nmake keychron/q4/ansi/v2:default\nmake keychron/q4/iso:default\n```\n\n----------------------------------------\n\nTITLE: Configuring General Purpose Timer in mcuconf.h for STM32\nDESCRIPTION: This snippet shows how to configure a specific General Purpose Timer (GPT) timer (TIM15 in this example) within the `mcuconf.h` file for STM32. The `STM32_GPT_USE_TIM15` macro is set to `TRUE` after being undefined if it exists, enabling the use of timer 15.  This step allocates a timer to GPT functionality.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/backlight.md#_snippet_11\n\nLANGUAGE: c\nCODE:\n```\n#pragma once\n\n#include_next <mcuconf.h>\n\n#undef STM32_GPT_USE_TIM15 // [!code focus]\n#define STM32_GPT_USE_TIM15 TRUE // [!code focus]\n```\n\n----------------------------------------\n\nTITLE: Checking Compile Status via cURL\nDESCRIPTION: This cURL command checks the status of a compilation job using the job ID. It sends a GET request to the `/v1/compile/{job_id}` endpoint. The response contains information about the job's status, such as `queued`, `running`, `finished`, or `failed`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/api_docs.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\n$ curl https://api.qmk.fm/v1/compile/ea1514b3-bdfc-4a7b-9b5c-08752684f7f6\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware to PetruziaMini Keyboard\nDESCRIPTION: This command flashes the built QMK firmware onto the PetruziaMini keyboard. It assumes the keyboard's microcontroller is connected and accessible via the command line flashing tool. The command also requires the QMK build environment setup.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/petruziamini/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/petruziamini:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware\nDESCRIPTION: This command flashes the built firmware to the meck_tkl keyboard. It depends on the QMK build environment and the correct flashing tool being configured for the STM32 Blackpill. The keyboard should be in DFU mode before executing this command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/meck_tkl/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake handwired/meck_tkl:default:flash\n```\n\n----------------------------------------\n\nTITLE: Define get_tapping_term Function (C)\nDESCRIPTION: This code defines a function, `get_tapping_term`, that allows you to specify different tapping terms for different keys. It uses a switch statement to return the appropriate tapping term based on the keycode.  It should be added to your keymap file. Dependencies include `keyrecord_t`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/tap_hold.md#_snippet_2\n\nLANGUAGE: C\nCODE:\n```\nuint16_t get_tapping_term(uint16_t keycode, keyrecord_t *record) {\n    switch (keycode) {\n        case SFT_T(KC_SPC):\n            return TAPPING_TERM + 1250;\n        case LT(1, KC_GRV):\n            return 130;\n        default:\n            return TAPPING_TERM;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Flashing XT87 Firmware\nDESCRIPTION: This command flashes the built firmware to the XT87 keyboard. It uses the `make` command within the QMK Firmware environment, specifying the `kopibeng/xt87` keyboard, the `default` keymap, and the `flash` target. This command requires a correctly configured QMK build environment and a connected keyboard in flashable mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kopibeng/xt87/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake kopibeng/xt87:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Erdnuss65 Firmware (QMK)\nDESCRIPTION: This command builds and flashes the default firmware to the Erdnuss65 keyboard. It depends on the QMK build environment and requires the keyboard to be connected and in a flashable state. The command combines the build and flash steps, simplifying the process.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/citrus/erdnuss65/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake citrus/erdnuss65:default:flash\n```\n\n----------------------------------------\n\nTITLE: Formatting Keymap JSON with json2crab.py\nDESCRIPTION: This command formats the exported keymap JSON file for better readability and compatibility with the Ferris keyboard's keymap structure. It uses the `json2crab.py` script, located in the `keyboards/handwired/ferris/keymaps` directory, to convert the JSON file exported from the QMK Configurator into the format used by the Ferris keymap.  The input is the downloaded JSON file, and the output overwrites the existing `keymap.json` file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ferris/keymaps/default/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n./keyboards/handwired/ferris/keymaps/json2crab.py --input <Your download directory>/default.json > ./keyboards/handwired/ferris/keymaps/default/keymap.json\n```\n\n----------------------------------------\n\nTITLE: Layer Lock with Mod-Tap (C)\nDESCRIPTION: This code snippet demonstrates how to combine Layer Lock functionality with a mod-tap key in QMK Firmware. Specifically, it shows how to implement a key that acts as Shift on hold and toggles Layer Lock on tap. This leverages the `process_record_user` function to intercept and modify the behavior of the tapping event, toggling the highest active layer.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/layer_lock.md#_snippet_3\n\nLANGUAGE: c\nCODE:\n```\n#define SFTLLCK LSFT_T(KC_0)\n\n// Use SFTLLCK in your keymap...\n\nbool process_record_user(uint16_t keycode, keyrecord_t *record) {\n    switch (keycode) {\n        case SFTLLCK:\n            if (record->tap.count) {\n                if (record->event.pressed) {\n                    // Toggle the lock on the highest layer.\n                    layer_lock_invert(get_highest_layer(layer_state));\n                }\n                return false;\n            }\n            break;\n\n        // Other macros...\n    }\n    return true;\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Digitizer Feature in QMK\nDESCRIPTION: This snippet shows how to enable the digitizer feature in the `rules.mk` file of a QMK firmware project. This enables the necessary modules for the digitizer to function.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/digitizer.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nDIGITIZER_ENABLE = yes\n```\n\n----------------------------------------\n\nTITLE: Building GreatPad Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the GreatPad keyboard using the QMK Firmware build system. It compiles the necessary source code and generates a firmware image that can be flashed onto the device. Requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/gkeyboard/greatpad/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake gkeyboard/greatpad:default\n```\n\n----------------------------------------\n\nTITLE: Configure PS/2 Pins for Busywait Driver (C)\nDESCRIPTION: This snippet defines the clock and data pins for the PS/2 mouse when using the busywait driver. Ensure that `PS2_DRIVER_BUSYWAIT` is defined. This code should be placed in your keyboard's `config.h` file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/ps2_mouse.md#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n#ifdef PS2_DRIVER_BUSYWAIT\n# define PS2_CLOCK_PIN   D1\n# define PS2_DATA_PIN    D2\n#endif\n```\n\n----------------------------------------\n\nTITLE: Flashing Emu Keyboard Firmware\nDESCRIPTION: This command compiles and flashes the QMK firmware onto the Emu keyboard with the default keymap. It requires a configured QMK build environment and a connected keyboard in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kineticlabs/emu/hotswap/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake kineticlabs/emu:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Keyboard Firmware - QMK\nDESCRIPTION: This command compiles and flashes the QMK firmware to the Boardrun Bizarre keyboard using the default keymap.  It requires a properly configured build environment and a connected keyboard in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/boardrun/bizarre/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake boardrun/bizarre:default:flash\n```\n\n----------------------------------------\n\nTITLE: Configure Scaling Register (Mono)\nDESCRIPTION: Configures the scaling register for a single LED using the IS31FL3745 driver (single-color). Requires the LED index and scaling value as input. The register update is deferred until `is31fl3745_update_scaling_registers()` is called.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/is31fl3745.md#_snippet_8\n\nLANGUAGE: c\nCODE:\n```\nvoid is31fl3745_set_scaling_register(uint8_t index, uint8_t value)\n```\n\n----------------------------------------\n\nTITLE: DIP Switch Callback Example (After)\nDESCRIPTION: This code snippet illustrates the DIP switch callback implementation after the change, where the functions now return `bool`. This allows the keyboard code to determine if the callback handled the event or if it should continue processing. Returning `true` allows keyboard code to execute, `false` prevents it.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/ChangeLog/20210828.md#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nbool dip_switch_update_kb(uint8_t index, bool active) {\n    if (!(dip_switch_update_user(index, active))) { return false; }\n    return true;\n}\n\nbool dip_switch_update_user(uint8_t index, bool active) {\n    switch (index) {\n        case 0:\n            if(active) { audio_on(); } else { audio_off(); }\n            break;\n    }\n    return true; // Returning true allows keyboard code to execute, false will tell the keyboard code \"I've already handled it\".\n}\n\nbool dip_switch_update_mask_kb(uint32_t state) {\n    if (!dip_switch_update_mask_user(state)) { return false; }\n    return true;\n}\n\nbool dip_switch_update_mask_user(uint32_t state) {\n    if (state & (1UL<<0) && state & (1UL<<1)) {\n        layer_on(_ADJUST); // C on esc\n    } else {\n        layer_off(_ADJUST);\n    }\n    return true; // Returning true allows keyboard code to execute, false will tell the keyboard code \"I've already handled it\".\n}\n```\n\n----------------------------------------\n\nTITLE: Building iS0 Firmware (QMK)\nDESCRIPTION: This command compiles the QMK Firmware for the iS0 keyboard with the default keymap. It requires a properly set up QMK build environment. The output is the compiled firmware ready to be flashed onto the iS0.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/illuminati/is0/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake illuminati/is0:default\n```\n\n----------------------------------------\n\nTITLE: Building Oddball v1 Firmware with PMW3360 Sensor\nDESCRIPTION: This command compiles the Oddball v1 keyboard firmware specifically configured for a PMW3360 sensor.  It uses the QMK build system, targeting the 'pmw3360' keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/oddball/v1/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake oddball/v1:pmw3360\n```\n\n----------------------------------------\n\nTITLE: Flashing PuckBuddy Firmware\nDESCRIPTION: This command flashes the compiled firmware to the PuckBuddy macropad. It requires the QMK build environment and appropriate flashing tools to be configured correctly for the STM32 Blackpill.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechwild/puckbuddy/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake mechwild/puckbuddy:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing QK100 ANSI default keymap - Make\nDESCRIPTION: This command flashes the compiled firmware onto the QK100 ANSI keyboard using the QMK build environment. It uses the `qwertykeys/qk100/ansi` keyboard definition and the `default` keymap configuration and requires the keyboard to be in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/qwertykeys/qk100/ansi/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake qwertykeys/qk100/ansi:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building the Wave Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the Wave keyboard. It uses the QMK build system to compile the keymap and generate the firmware image. Requires a properly set up QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/etiennecollin/wave/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake etiennecollin/wave:default\n```\n\n----------------------------------------\n\nTITLE: Building Genesis Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Genesis macro pad using the QMK build environment.  It compiles the source code and creates a firmware file ready for flashing. The command assumes the QMK build environment is correctly set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/custommk/genesis/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake custommk/genesis:default\n```\n\n----------------------------------------\n\nTITLE: Building Trinity XT TKL Firmware\nDESCRIPTION: This command builds the default firmware for the Trinity XT TKL keyboard using the QMK build environment. It assumes that the QMK build environment is already set up. The output will be a firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/xelus/trinityxttkl/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake xelus/trinityxttkl:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Panda65_01 Default Keymap (Makefile)\nDESCRIPTION: This command builds and flashes the default keymap for the Panda65_01 keyboard to the connected device. It uses the `make` command with the `flash` target. Ensure that the QMK build environment is properly configured and the keyboard is in the correct flashing mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/generic_panda/panda65_01/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake generic_panda/panda65_01:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing the Firmware\nDESCRIPTION: This command flashes the built firmware onto the 3keyecosystem/2key2 keyboard. It assumes the keyboard is connected and in a state ready to receive the firmware. Requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/3keyecosystem/2key2/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake 3keyecosystem/2key2:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Scythe Firmware with QMK\nDESCRIPTION: This snippet shows how to build the default firmware for the Scythe keyboard using the QMK build environment. It assumes the user has already set up their QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kagizaraya/scythe/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake kagizaraya/scythe:default:dfu\n```\n\n----------------------------------------\n\nTITLE: Building Grandiceps Firmware\nDESCRIPTION: These commands are used to build the firmware for the Grandiceps keyboard. The first command builds for the original revision, while the second builds for revision 2 which includes I2C eeprom and trackball support. Requires a correctly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/tkw/grandiceps/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake tkw/grandiceps:default\n```\n\nLANGUAGE: Makefile\nCODE:\n```\nmake tkw/grandiceps/rev2:default\n```\n\n----------------------------------------\n\nTITLE: Building Panc40 keyboard firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Panc40 keyboard using the QMK build environment. It assumes that the QMK build environment is properly configured and accessible from the command line. The output will be a .hex file that can be flashed to the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/panc40/readme.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmake panc40:default\n```\n\n----------------------------------------\n\nTITLE: Building Firmware: QMK Make Command\nDESCRIPTION: This command builds the default firmware for the boston_meetup/2019 keyboard. Ensure that the QMK build environment is set up before running this command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/boston_meetup/2019/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake boston_meetup/2019:default\n```\n\n----------------------------------------\n\nTITLE: Flashing default keymap for Framework keyboard with QMK\nDESCRIPTION: This command flashes the compiled firmware onto the Framework keyboard using the QMK firmware flashing tools.  It requires the QMK build environment and a connected keyboard in DFU mode or other supported bootloader.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/7c8/framework/readme.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmake 7c8/framework:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Ergo68 Keyboard Firmware (QMK)\nDESCRIPTION: This command flashes the compiled firmware to the yushakobo/ergo68 keyboard. It assumes that the keyboard is in bootloader mode and uses the appropriate flashing tool.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/yushakobo/ergo68/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake yushakobo/ergo68:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for YMDK Melody96\nDESCRIPTION: This command builds the default firmware for the YMDK Melody96 Soldered keyboard. It requires the QMK build environment to be set up properly.  The output will be a .hex or .bin file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ymdk/melody96/soldered/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake ymdk/melody96/soldered:default\n```\n\n----------------------------------------\n\nTITLE: Building Soyuz Keyboard Firmware (QMK)\nDESCRIPTION: This command builds the QMK firmware for the Soyuz keyboard with the default keymap. It assumes the QMK build environment has already been set up. It compiles the necessary source files to create a firmware image suitable for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/wwa/soyuz/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/wwa/soyuz:default\n```\n\n----------------------------------------\n\nTITLE: Building QMK Firmware for Swagkeys Integral\nDESCRIPTION: This command builds the QMK Firmware for the Swagkeys Integral keyboard with the default keymap. It requires a properly configured QMK build environment. The output will be a firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/swagkeys/integral/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake swagkeys/integral:default\n```\n\n----------------------------------------\n\nTITLE: Building Rosaline Firmware (Ortholinear)\nDESCRIPTION: This command builds the QMK firmware for the Rosaline keyboard with an ortholinear layout using the default keymap. It assumes the QMK build environment is already set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/peej/rosaline/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake peej/rosaline/ortho:default\n```\n\n----------------------------------------\n\nTITLE: Building E7-V1 SE Firmware - Make\nDESCRIPTION: This snippet shows how to build the default firmware for the E7-V1 SE keyboard using the `make` command. It assumes that the QMK build environment has already been set up. No dependencies are explicitly listed but relies on QMK firmware's build system.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/exclusive/e7v1se/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake exclusive/e7v1se:default\n```\n\n----------------------------------------\n\nTITLE: Compiling tkk keyboard with QMK CLI\nDESCRIPTION: This command compiles the default keymap for the 'tkk' keyboard using the QMK command line interface.  It provides an alternative method to the make command for compiling the firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/tkk/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nqmk compile -kb handwired/tkk -km default\n```\n\n----------------------------------------\n\nTITLE: Building TONE Keyboard Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the TONE keyboard, specifically the rev1 version, under the peranekofactory/tone directory. It uses the QMK make system to compile the firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/peranekofactory/tone/rev1/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake peranekofactory/tone/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Building 1upocarina Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the 1upocarina keyboard using the QMK build environment. It compiles the keyboard's keymap and other configurations into a firmware image that can be flashed onto the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/1upkeyboards/1upocarina/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake 1upkeyboards/1upocarina:default\n```\n\n----------------------------------------\n\nTITLE: Flashing CannonKeys Ripple Firmware\nDESCRIPTION: This command builds and flashes the default firmware for the CannonKeys Ripple keyboard. It requires a configured QMK build environment and a connected keyboard in flashing mode. The keyboard will be flashed with the new firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cannonkeys/ripple/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake cannonkeys/ripple:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware with Make\nDESCRIPTION: This command builds and flashes the default firmware for the Lightweight65 keyboard using the `make` command. It specifies the keyboard (`holyswitch/lightweight65`), the keymap (`default`), and the `flash` target.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/holyswitch/lightweight65/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake holyswitch/lightweight65:default:flash\n```\n\n----------------------------------------\n\nTITLE: Compiling Scotto37 Firmware (QMK)\nDESCRIPTION: This command compiles the default keymap for the Scotto37 keyboard using the QMK firmware build environment. It assumes the QMK build environment has already been set up. The output will be a firmware file suitable for flashing to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/scottokeebs/scotto37/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake handwired/scottokeebs/scotto37:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Kuro 65 Firmware\nDESCRIPTION: This command flashes the default firmware to the Kuro 65 keyboard. It requires a properly configured QMK build environment and a connected keyboard in bootloader mode. The command assumes that the `kuro/kuro65:default` build has been completed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kuro/kuro65/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake kuro/kuro65:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Puca Pad Firmware with QMK\nDESCRIPTION: This command flashes the compiled QMK firmware to the Puca Pad keyboard using the default keymap. It uses the `make` command with the target specified as `ffkeebs/puca:default:flash`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ffkeebs/puca/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake ffkeebs/puca:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing ErgoDash Firmware (QMK)\nDESCRIPTION: This command builds and flashes the default firmware to the ErgoDash Rev1 keyboard using avrdude. It requires the QMK build environment to be set up and avrdude to be configured correctly for the Pro Micro.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/omkbd/ergodash/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\n`make omkbd/ergodash/rev1:default:avrdude`\n```\n\n----------------------------------------\n\nTITLE: Flashing Southpaw Extended 65% Keyboard Firmware\nDESCRIPTION: This command flashes the built firmware to the Southpaw Extended 65% keyboard with the default ANSI layout. It extends the build command with the `:flash` target.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/switchplate/southpaw_65/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake switchplate/southpaw_65:default_ansi:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Flygone60 Firmware\nDESCRIPTION: This command flashes the built firmware to the Flygone60 keyboard. It requires a properly configured QMK build environment and a connected keyboard in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/shandoncodes/flygone60/rev3/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake shandoncodes/flygone60/rev3:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Kyria Firmware (rev2)\nDESCRIPTION: This command flashes the built QMK firmware to the Kyria keyboard with revision 2 using the default configuration. It assumes the QMK build environment is correctly configured and the keyboard is connected in a flashable state. Requires `dfu-util` or similar flashing tool.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/splitkb/kyria/readme.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nmake splitkb/kyria/rev2:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Emu Keyboard Firmware\nDESCRIPTION: This command compiles the QMK firmware for the Emu keyboard with the default keymap. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kineticlabs/emu/hotswap/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake kineticlabs/emu:default\n```\n\n----------------------------------------\n\nTITLE: Compiling Firmware for Geistmaschine/Geist - QMK\nDESCRIPTION: This command compiles the firmware for the Geistmaschine/Geist keyboard using the QMK build environment. It uses the 'default' keymap. This command assumes the QMK build environment is already set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/geistmaschine/geist/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nqmk compile geistmaschine/geist -km default\n```\n\n----------------------------------------\n\nTITLE: Building Baion 808 Firmware with QMK\nDESCRIPTION: This command is used to build the default keymap for the Baion 808 keyboard firmware using the QMK build environment. Ensure the QMK build environment is set up before running this command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/baion_808/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake baion_808:default\n```\n\n----------------------------------------\n\nTITLE: Building Tris Default Keymap - QMK\nDESCRIPTION: This command builds the default keymap for the Tris keyboard using QMK.  It utilizes the `make` command with the keyboard name and keymap specified. The resulting firmware can then be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/tgr/tris/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake tris:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Nasu Firmware via dfu-util\nDESCRIPTION: This command flashes the compiled Nasu keyboard firmware using dfu-util. It assumes the keyboard is in DFU mode. Replace <keymap> with the desired keymap. Requires dfu-util to be installed and configured correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/nasu/readme.md#_snippet_1\n\nLANGUAGE: QMK Make\nCODE:\n```\nmake nasu:<keymap>:dfu-util\n```\n\n----------------------------------------\n\nTITLE: Flashing firmware for SteelSeries Prime+ (QMK)\nDESCRIPTION: This command builds and flashes the default firmware to the SteelSeries Prime+ mouse using the QMK build environment. It requires the QMK build environment to be set up and the device to be in bootloader mode. This will overwrite any existing firmware on the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/steelseries/prime_plus/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake steelseries/prime_plus:default:flash\n```\n\n----------------------------------------\n\nTITLE: Deprecating USB IDs in config.h - C\nDESCRIPTION: This snippet demonstrates the old method of specifying USB IDs within the `config.h` file in QMK Firmware.  It includes definitions for vendor ID, product ID, device version, manufacturer, and product name.  This method is deprecated and replaced by the info.json file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/ChangeLog/20221126.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#define VENDOR_ID    0x1234\n#define PRODUCT_ID   0x5678\n#define DEVICE_VER   0x0001\n#define MANUFACTURER Me\n#define PRODUCT      MyKeyboard\n```\n\n----------------------------------------\n\nTITLE: Flashing Onekey Keyboard Firmware\nDESCRIPTION: This command flashes the compiled QMK firmware to the Onekey keyboard. It requires the QMK command-line tools to be properly configured and the keyboard to be in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/onekey/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake handwired/onekey:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building ogurec keyboard firmware\nDESCRIPTION: These `make` commands build the QMK firmware for the ogurec keyboard. The first builds for the default configuration, while the second builds for the right-sided PM placement. Ensure that the QMK build environment is set up before executing these commands.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/drhigsby/ogurec/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake drhigsby/ogurec:default\n```\n\nLANGUAGE: make\nCODE:\n```\nmake drhigsby/ogurec/right_pm:default\n```\n\n----------------------------------------\n\nTITLE: Building WT60-G2 QMK Firmware\nDESCRIPTION: This command builds the default QMK firmware for the wilba.tech WT60-G2 keyboard. It requires a properly set up QMK build environment. The command compiles the keyboard's keymap and firmware, creating a .hex or .bin file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wilba_tech/wt60_g2/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake wilba_tech/wt60_g2:default\n```\n\n----------------------------------------\n\nTITLE: Flashing the Work Louder Numpad Firmware\nDESCRIPTION: This command flashes the built firmware to the Work Louder Numpad keyboard. It requires a correctly configured QMK build environment and a connected keyboard in a flashable state. It uses the `make` command with the target `work_louder/numpad:default:flash`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/work_louder/numpad/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake work_louder/numpad:default:flash\n```\n\n----------------------------------------\n\nTITLE: Docker run command\nDESCRIPTION: This command runs the keymap beautifier script inside a Docker container. It copies the input file, executes the script, and writes the output to a file. The -p and -c options enable pretty output and center justification.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ergodox_ez/util/keymap_beautifier/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ncd QMK_GIT_REPO_dir/keyboards/ergodox_ez/util/keymap_beautifier\ncp PATH_TO_YOUR_C_SOURCE_FILE.c input.c\n./docker_run.sh input.c -p -c -o output.c\n```\n\n----------------------------------------\n\nTITLE: Flashing ic45_v2 Keyboard Firmware\nDESCRIPTION: This command flashes the default firmware onto the handwired ic45_v2 keyboard. It depends on the QMK build environment being set up and the necessary flashing tools being installed. The keyboard needs to be in bootloader mode to accept the firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/ic45_v2/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake handwired/ic45_v2:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Pluckey Firmware (QMK)\nDESCRIPTION: This command builds and flashes the QMK firmware to the Pluckey keyboard with the default keymap. It depends on a correctly configured QMK build environment and a connected Pluckey keyboard with a compatible bootloader.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/pluckey/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake pluckey:default:flash\n```\n\n----------------------------------------\n\nTITLE: Mounting TADA68 on Linux\nDESCRIPTION: This command mounts the TADA68 keyboard as a volume in Linux. It uses the vfat filesystem and sets various options for read-write access, user and group IDs, file and directory permissions, character sets, and error handling.  `<path to device>` needs to be replaced with the correct device path (e.g., `/dev/sdb1`).\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/tada68/readme.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmount -t vfat -o rw,nosuid,nodev,relatime,uid=1000,gid=1000,fmask=0022,dmask=0022,codepage=437,iocharset=iso8859-1,shortname=mixed,showexec,utf8,flush,errors=remount-ro,uhelper=udisks2 <path to device> /mnt/tada68\n```\n\n----------------------------------------\n\nTITLE: Example: Neutralizing Multiple Modifiers (C)\nDESCRIPTION: This example demonstrates how to neutralize left Alt, left GUI, right GUI, and left Control+Shift keys. The `MODS_TO_NEUTRALIZE` macro is defined with the corresponding modifier masks. The comment clarifies that the list of masks should be 8-bit packed bit-arrays, so `MOD_BIT(<kc>)` or `MOD_MASK_xxx` should be used instead of `MOD_xxx` constants.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/key_overrides.md#_snippet_7\n\nLANGUAGE: c\nCODE:\n```\n// Neutralize left alt, left GUI, right GUI and left Control+Shift\n#define MODS_TO_NEUTRALIZE { MOD_BIT(KC_LEFT_ALT), MOD_BIT(KC_LEFT_GUI), MOD_BIT(KC_RIGHT_GUI), MOD_BIT(KC_LEFT_CTRL)|MOD_BIT(KC_LEFT_SHIFT) }\n```\n\n----------------------------------------\n\nTITLE: Using Software Timers in QMK - C\nDESCRIPTION: This code demonstrates how to use software timers in QMK Firmware to measure elapsed time for specific events. It initializes a timer variable, reads the current timer value, and then checks if a certain duration (e.g., 100ms) has passed since the timer was started. The `timer_read()` function retrieves the current timer value, and the `timer_elapsed()` function calculates the time elapsed since the timer was last read.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/ref_functions.md#_snippet_4\n\nLANGUAGE: c\nCODE:\n```\nstatic uint16_t key_timer;\nkey_timer = timer_read();\n\nif (timer_elapsed(key_timer) < 100) {\n  // do something if less than 100ms have passed\n} else {\n  // do something if 100ms or more have passed\n}\n```\n\n----------------------------------------\n\nTITLE: DIP Switch Callback in keymap.c (Individual Switches)\nDESCRIPTION: This snippet shows the `dip_switch_update_user` callback function that can be implemented in the `keymap.c` file to handle individual DIP switch changes.  It uses a `switch` statement to execute different actions based on the DIP switch index and state.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/dip_switch.md#_snippet_6\n\nLANGUAGE: C\nCODE:\n```\nbool dip_switch_update_user(uint8_t index, bool active) { \n    switch (index) {\n        case 0:\n            if(active) { audio_on(); } else { audio_off(); }\n            break;\n        case 1:\n            if(active) { clicky_on(); } else { clicky_off(); }\n            break;\n        case 2:\n            if(active) { music_on(); } else { music_off(); }\n            break;\n        case 3:\n            if (active) {\n                #ifdef AUDIO_ENABLE\n                    PLAY_SONG(plover_song);\n                #endif\n                layer_on(_PLOVER);\n            } else {\n                #ifdef AUDIO_ENABLE\n                    PLAY_SONG(plover_gb_song);\n                #endif\n                layer_off(_PLOVER);\n            }\n            break;\n    }\n    return true;\n}\n```\n\n----------------------------------------\n\nTITLE: Diode Matrix Configuration in `keyboard.json`\nDESCRIPTION: This JSON snippet demonstrates how to configure a diode matrix in the `keyboard.json` file. It specifies the pins connected to the columns and rows of the matrix using the `matrix_pins` object. The `diode_direction` setting indicates the direction in which the diodes are oriented (either `COL2ROW` or `ROW2COL`). The dimensions of the matrix are inferred from the number of elements in the `cols` and `rows` arrays.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/porting_your_keyboard_to_qmk.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n    \"matrix_pins\": {\n        \"cols\": [\"C1\", \"C2\", \"C3\", \"C4\"],\n        \"rows\": [\"D1\", \"D2\", \"D3\", \"D4\"]\n    },\n```\n\nLANGUAGE: JSON\nCODE:\n```\n    \"diode_direction\": \"ROW2COL\",\n```\n\n----------------------------------------\n\nTITLE: Analog Joystick Custom Weights Example (C)\nDESCRIPTION: This code snippet defines custom weights for lever positions when using the analog joystick. It is assigned to `ANALOG_JOYSTICK_WEIGHTS` in `config.h`. These weights modify the sensitivity and feel of the joystick.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/pointing_device.md#_snippet_4\n\nLANGUAGE: c\nCODE:\n```\n#define ANALOG_JOYSTICK_WEIGHTS {0,2,4,5,7,8,9,10,12,13,14,15,15,16,17,18,18,19,19,20,20,21,21,21,22,22,22,22,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,24,24,24,24,24,24,25,25,25,26,26,26,27,28,28,29,29,30,31,32,33,34,35,36,37,38,40,41,43,44,46,48,49,51,53,56,58,60,62,65,68,70,73,76,79,82,85,89,92,96,100}\n```\n\n----------------------------------------\n\nTITLE: Encoder Update Function with Layer Switching (C)\nDESCRIPTION: This C code defines the `encoder_update_user` function, which is called when the encoder is rotated. It scrolls a pixel based on rotation direction and changes the keyboard's volume when the \"NAV\" layer is active. Otherwise, it sends Page Up/Down commands, modifying encoder behavior based on the current layer.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/terrazzo/readme.md#_snippet_4\n\nLANGUAGE: C\nCODE:\n```\nbool encoder_update_user(uint8_t index, bool clockwise) {\n    terrazzo_scroll_pixel(clockwise);\n    switch(get_highest_layer(layer_state)) {\n      case _NAV:\n        // Change volume when on nav layer\n        clockwise ? tap_code(KC_AUDIO_VOL_UP) : tap_code(KC_AUDIO_VOL_DOWN);\n        break;\n      default:\n        // Default encoder behavior of Page Up and Down\n        clockwise ? tap_code(KC_PGDN) : tap_code(KC_PGUP);\n        break;\n    }   \n    return true;\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Double-Tap Reset Bootloader Entry - C\nDESCRIPTION: This snippet shows the configuration options required in `config.h` to enable the double-tap reset mechanism for entering the RP2040 bootloader.  It defines the activation macro, the timeout window, and an optional status LED GPIO pin. This functionality provides an alternative way to access the bootloader, similar to AVR Pro Micros.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/platformdev_rp2040.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#define RP2040_BOOTLOADER_DOUBLE_TAP_RESET // Activates the double-tap behavior\n#define RP2040_BOOTLOADER_DOUBLE_TAP_RESET_TIMEOUT 200U // Timeout window in ms in which the double tap can occur.\n#define RP2040_BOOTLOADER_DOUBLE_TAP_RESET_LED GP17 // Specify a optional status led by GPIO number which blinks when entering the bootloader\n```\n\n----------------------------------------\n\nTITLE: Flashing QMK Firmware to Emu Hotswap\nDESCRIPTION: This command flashes the compiled QMK firmware to the Emu Hotswap keyboard. This requires the keyboard to be in bootloader mode. The bootloader can be entered by pressing the physical reset button (SW1) or holding down ESC while plugging in the board.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kineticlabs/emu/soldered/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake kineticlabs/emu_hotswap:default:flash\n```\n\n----------------------------------------\n\nTITLE: Defining Encoder Mode Map in C\nDESCRIPTION: This C code defines a 2D array `spleeb_encoder_mode_map` that maps encoders to their respective modes.  The array is indexed by encoder number and contains the encoder modes for that encoder. `NUM_ENCODERS` and `SPLEEB_ENCODER_MODE_COUNT` should be defined elsewhere in the firmware. `SPLEEB_ENC_MODE` is likely a macro to convert the enum value to a constant.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/spleeb/readme.md#_snippet_3\n\nLANGUAGE: C\nCODE:\n```\nconst spleeb_enc_mode_t spleeb_encoder_mode_map[NUM_ENCODERS][SPLEEB_ENCODER_MODE_COUNT] = {\n    [0] = {SPLEEB_ENC_MODE(VOL), SPLEEB_ENC_MODE(SEL)},\n    [1] = {SPLEEB_ENC_MODE(DEF_DPI), SPLEEB_ENC_MODE(SNP_DPI), SPLEEB_ENC_MODE(SEL)},\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Options in rules.mk (commented out)\nDESCRIPTION: This code block presents example build options in `rules.mk` that can be uncommented and edited to customize the Helix Pico keyboard. These options control LED backlight, underglow, animations, and iOS device compatibility. The comments are in Japanese.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/helix/pico/keymaps/default/readme_jp.md#_snippet_9\n\nLANGUAGE: Makefile\nCODE:\n```\n# Helix Spacific Build Options\n# you can uncomment and edit follows 4 Variables\n#  jp: 以下の4つの変数を必要に応じて編集し、コメントアウトをはずします。\n# LED_BACK_ENABLE = no        # LED backlight (Enable WS2812 RGB underlight.)\n# LED_UNDERGLOW_ENABLE = no   # LED underglow (Enable WS2812 RGB underlight.)\n# LED_ANIMATIONS = yes        # LED animations\n# IOS_DEVICE_ENABLE = no      # connect to IOS device (iPad,iPhone)\n```\n\n----------------------------------------\n\nTITLE: Building the HelixPico Firmware - Makefile\nDESCRIPTION: This snippet provides instructions on how to build the HelixPico keyboard firmware using the `make` command. Different build configurations are shown, including building with backlight, backlight without animation, and with underglow.  The first command builds the default version. Subsequent commands build with backlight, backlight without animation and underglow respectively. Navigate to qmk_firmware top directory first.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/helix/pico/keymaps/default/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\n$ make helix/pico:default\n$ make helix/pico/back:default               # with backlight\n$ make HELIX=no-ani helix/pico/back:default  # with backlight without animation\n$ make helix/pico/under:default              # with underglow\n```\n\n----------------------------------------\n\nTITLE: Activating USART Peripheral for SERIAL (mcuconf.h)\nDESCRIPTION: This code snippet activates a specific USART peripheral for the `SERIAL` driver, which is typically used for STM32 MCUs. This configuration is added to the `mcuconf.h` file.  The `#undef STM32_SERIAL_USE_USARTn` and `#define STM32_SERIAL_USE_USARTn TRUE` lines ensure the specific USART peripheral (*n*) is enabled for serial communication. Replace *n* with the USART peripheral number you wish to use.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/serial.md#_snippet_11\n\nLANGUAGE: C\nCODE:\n```\n#pragma once\n\n#include_next <mcuconf.h>\n\n#undef STM32_SERIAL_USE_USARTn // [!code focus]\n#define STM32_SERIAL_USE_USARTn TRUE // [!code focus]\n```\n\n----------------------------------------\n\nTITLE: Scrolling OLED Display (C)\nDESCRIPTION: These functions start or stop scrolling the OLED display. `oled_scroll_right` starts scrolling to the right, `oled_scroll_left` starts scrolling to the left, and `oled_scroll_off` stops scrolling.  `is_oled_scrolling` returns true if the OLED is currently scrolling, false otherwise. Note that the display contents cannot be changed while scrolling.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/oled_driver.md#_snippet_33\n\nLANGUAGE: c\nCODE:\n```\n// Begin scrolling the entire display right\n// Returns true if the screen was scrolling or starts scrolling\n// NOTE: display contents cannot be changed while scrolling\nbool oled_scroll_right(void);\n\n// Begin scrolling the entire display left\n// Returns true if the screen was scrolling or starts scrolling\n// NOTE: display contents cannot be changed while scrolling\nbool oled_scroll_left(void);\n\n// Turns off display scrolling\n// Returns true if the screen was not scrolling or stops scrolling\nbool oled_scroll_off(void);\n\n// Returns true if the oled is currently scrolling, false if it is\n// not\nbool is_oled_scrolling(void);\n```\n\n----------------------------------------\n\nTITLE: Define Custom Dynamic Tapping Term Keys (C)\nDESCRIPTION: This code snippet defines custom keys for dynamically adjusting the tapping term at runtime. It requires modifications to the `process_record_user` function.  `SAFE_RANGE` needs to be defined. Requires `DYNAMIC_TAPPING_TERM_ENABLE` to be set.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/tap_hold.md#_snippet_3\n\nLANGUAGE: C\nCODE:\n```\nenum custom_dynamic_tapping_term_keys = {\n    DT_UP_50 = SAFE_RANGE,\n    DT_DOWN_50,\n    DT_UP_X2,\n    DT_DOWN_X2,\n}\n\nbool process_record_user(uint16_t keycode, keyrecord_t *record) {\n    switch (keycode) {\n    case DT_UP_50:\n        if (record->event.pressed) {\n            g_tapping_term += 50;\n        }\n        break;\n    case DT_DOWN_50:\n        if (record->event.pressed) {\n            g_tapping_term -= 50;\n        }\n        break;\n    case DT_UP_X2:\n        if (record->event.pressed) {\n            g_tapping_term *= 2;\n        }\n        break;\n    case DT_DOWN_X2:\n        if (record->event.pressed) {\n            g_tapping_term /= 2;\n        }\n        break;\n    }\n    return true;\n};\n```\n\n----------------------------------------\n\nTITLE: Selecting Debounce Method in QMK Firmware - Makefile\nDESCRIPTION: This code snippet demonstrates how to select a specific debounce method in QMK Firmware by setting the `DEBOUNCE_TYPE` variable in the `rules.mk` file. The value of this variable determines which debouncing algorithm will be used. If `DEBOUNCE_TYPE` is undefined, `sym_defer_g` is used by default. Different algorithms are available to choose from, each with their own performance and memory usage characteristics.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/feature_debounce_type.md#_snippet_1\n\nLANGUAGE: makefile\nCODE:\n```\nDEBOUNCE_TYPE = <name of algorithm>\n```\n\n----------------------------------------\n\nTITLE: Customizing Word Breaking Keys (C)\nDESCRIPTION: This code snippet shows the default implementation of the `caps_word_press_user` callback function.  This function defines which keycodes should be shifted (considered letters) and which keycodes are considered word-breaking, deactivating Caps Word.  This function can be customized to suit specific needs.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/caps_word.md#_snippet_5\n\nLANGUAGE: c\nCODE:\n```\nbool caps_word_press_user(uint16_t keycode) {\n    switch (keycode) {\n        // Keycodes that continue Caps Word, with shift applied.\n        case KC_A ... KC_Z:\n        case KC_MINS:\n            add_weak_mods(MOD_BIT(KC_LSFT));  // Apply shift to next key.\n            return true;\n\n        // Keycodes that continue Caps Word, without shifting.\n        case KC_1 ... KC_0:\n        case KC_BSPC:\n        case KC_DEL:\n        case KC_UNDS:\n            return true;\n\n        default:\n            return false;  // Deactivate Caps Word.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Building LDK65 QMK Firmware\nDESCRIPTION: This command builds the default QMK firmware for the fjlabs/ldk65 keyboard. It requires a properly configured QMK build environment. The output is the compiled firmware ready to be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/fjlabs/ldk65/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake fjlabs/ldk65:default\n```\n\n----------------------------------------\n\nTITLE: QMK Hello World Subcommand - Python\nDESCRIPTION: A basic example of a QMK CLI subcommand written in Python. It demonstrates how to use the `milc` framework to define arguments, create a subcommand, and log information to the user. It shows how to integrate with the QMK configuration system.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/cli_development.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n\"\"\"QMK Python Hello World\n\nThis is an example QMK CLI script.\n\"\"\"\nfrom milc import cli\n\n\n@cli.argument('-n', '--name', default='World', help='Name to greet.')\n@cli.subcommand('QMK Hello World.')\ndef hello(cli):\n    \"\"\"Log a friendly greeting.\n    \"\"\"\n    cli.log.info('Hello, %s!', cli.config.hello.name)\n```\n\n----------------------------------------\n\nTITLE: Building Keychron V1 Firmware with QMK\nDESCRIPTION: This command builds the default ANSI layout firmware for the Keychron V1 keyboard.  It requires a properly configured QMK build environment. The command outputs the compiled firmware file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keychron/v1/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake keychron/v1/ansi:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Keychron V3 Firmware (QMK)\nDESCRIPTION: This command builds and flashes the default ANSI layout firmware to the Keychron V3 keyboard. It requires a configured QMK build environment and a compatible flashing tool. Assumes the bootloader is ready.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keychron/v3/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake keychron/v3/ansi:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing B.mini EX Keyboard Firmware\nDESCRIPTION: This command flashes the compiled firmware to the B.mini EX keyboard. It requires a correctly configured QMK build environment and a connected B.mini EX keyboard in bootloader mode. The board will need to be put into DFU or similar bootloader mode before running this command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/winkeyless/bminiex/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake winkeyless/bminiex:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building DT40 Firmware (QMK)\nDESCRIPTION: This command builds the default QMK firmware for the Skyloong DT40 keyboard.  It requires a properly configured QMK build environment.  The output is a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/skyloong/dt40/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake skyloong/dt40:default\n```\n\n----------------------------------------\n\nTITLE: Listing Git Remotes\nDESCRIPTION: This command lists the configured remote repositories in Git. It shows the names and URLs of the remote repositories that the local repository is tracking. This is used to verify that both the origin (your fork) and the upstream (QMK's repository) are configured as remotes.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/newbs_git_resynchronize_a_branch.md#_snippet_1\n\nLANGUAGE: git\nCODE:\n```\ngit remote -v\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for CMM.Studio Saka68\nDESCRIPTION: This command builds the default firmware for the CMM.Studio Saka68 keyboard. It requires a properly configured QMK build environment. The output is a firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cmm_studio/saka68/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake cmm_studio/saka68:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Cajal Firmware (QMK)\nDESCRIPTION: This command flashes the pre-built firmware onto the Cajal keyboard. It assumes the keyboard is in bootloader mode, accessible by pressing the reset button on the PCB. A QMK build environment with flashing tools is required.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/walletburner/cajal/readme.md#_snippet_2\n\nLANGUAGE: qmk\nCODE:\n```\nmake walletburner/cajal:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building QMK Firmware for Twilight keyboard\nDESCRIPTION: This command builds the QMK Firmware for the Twilight keyboard with the default keymap. It assumes that the QMK build environment is already set up. The command compiles the firmware and generates a .hex file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wolf/twilight/readme.md#_snippet_0\n\nLANGUAGE: Make\nCODE:\n```\nmake wolf/twilight:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Dynamis Keyboard Firmware with QMK\nDESCRIPTION: This command flashes the default firmware for the Dynamis keyboard to the device. It requires a properly configured QMK build environment and the keyboard to be in bootloader mode. This command combines the build and flash steps.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/bbrfkr/dynamis/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake bbrfkr/dynamis:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Phoenix Keyboard Firmware with QMK\nDESCRIPTION: This command flashes the specified keymap onto the Phoenix keyboard. It requires QMK Toolbox or the QMK CLI to be installed and configured. Replace `<keymap>` with the desired keymap name.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cablecardesigns/phoenix/readme.md#_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nmake cablecardesigns/phoenix:<keymap>:flash\n```\n\n----------------------------------------\n\nTITLE: Building ALETH42 Firmware with QMK\nDESCRIPTION: This code snippet provides the command to build the default firmware for the ALETH42 keyboard using the QMK build environment. It assumes the QMK build environment is already set up. It will compile the firmware and generate a .hex file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/25keys/aleth42/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake 25keys/aleth42/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Building HBCP Firmware with QMK\nDESCRIPTION: This command is used to compile the default keymap for the hineybush/hbcp keyboard using the QMK firmware build environment.  It assumes that the QMK build environment has already been set up according to the QMK documentation. The `default` keyword specifies the default keymap to be compiled.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/hineybush/hbcp/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake hineybush/hbcp:default\n```\n\n----------------------------------------\n\nTITLE: Building QMK Firmware\nDESCRIPTION: This command builds the default keymap for the DactylMacropad keyboard using the QMK build system.  It assumes that the QMK build environment is already set up.  No specific input is needed besides navigating to the keyboard's directory.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/dactylmacropad/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake default:default\n```\n\n----------------------------------------\n\nTITLE: Building the Firmware - concreteflowers/cor:default\nDESCRIPTION: This command builds the default firmware for the concreteflowers/cor keyboard. It requires a properly configured QMK build environment. The output will be a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/concreteflowers/cor/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake concreteflowers/cor:default\n```\n\n----------------------------------------\n\nTITLE: Building Ingrained Firmware (Makefile)\nDESCRIPTION: This command builds the default firmware for the Ingrained keyboard. It uses the QMK make system to compile the firmware based on the `ingrained` keyboard definition and the `default` keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ingrained/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake ingrained:default\n```\n\n----------------------------------------\n\nTITLE: Building Nodu keyboard firmware using QMK\nDESCRIPTION: This snippet shows how to compile the firmware for the Nodu keyboard using the QMK build environment. It assumes that the QMK build environment has already been set up according to the QMK documentation. The 'default' keymap will be used.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/swiftrax/nodu/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/swiftrax/nodu:default\n```\n\n----------------------------------------\n\nTITLE: LED Update Function\nDESCRIPTION: This C code snippet presents a user-defined `led_update_user` function for controlling the LEDs on the XD75 keyboard based on keyboard state.  It toggles the capslock LED based on `led_state.caps_lock` and GP100 based on some custom state `some_custom_state`. Requires `led_t` struct and related LED control functions (`capslock_led_on`, `capslock_led_off`, `gp100_led_on`, `gp100_led_off`).\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/xiudi/xd75/readme.md#_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nbool led_update_user(led_t led_state) {\n    if (led_state.caps_lock) {\n        capslock_led_on();\n    } else {\n        capslock_led_off();\n    }\n\n    if (some_custom_state) {\n      gp100_led_on();\n    } else {\n      gp100_led_off();\n    }\n\n    return false;\n}\n```\n\n----------------------------------------\n\nTITLE: Flashing Ciel Keyboard Firmware - QMK\nDESCRIPTION: This command flashes the compiled firmware onto the Ciel keyboard. It requires the keyboard to be in bootloader mode, typically achieved by pressing the reset button. The command assumes a working QMK build environment and appropriate flashing tools.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/chickenman/ciel/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake chickenman/ciel:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building DSP40 Firmware with QMK\nDESCRIPTION: This snippet shows how to build the default firmware for the DSP40 keyboard using the QMK build environment. It uses the `make` command with the target `keebio/dsp40/rev1:default`. The user should have already set up their QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keebio/dsp40/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake keebio/dsp40/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Flashing AMJ84 Firmware with QMK\nDESCRIPTION: This command builds and flashes the default firmware for the AMJ84 keyboard using QMK. It requires a properly configured QMK build environment and a connected keyboard in bootloader mode. It assumes the necessary tools for flashing are available in the environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/amjkeyboard/amj84/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake amjkeyboard/amj84:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Hubble Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the Hubble keyboard using the QMK build environment. It requires the QMK build environment to be properly set up. The output will be a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/hubble/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake hubble:default\n```\n\n----------------------------------------\n\nTITLE: Compiling Sofle Pro Keyboard Firmware - QMK\nDESCRIPTION: This command compiles the QMK firmware for the Sofle Pro keyboard with the default keymap. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechboards/sofle/pro/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nqmk compile -kb mechboards/sofle/pro -km default\n```\n\n----------------------------------------\n\nTITLE: Building WestM65 Firmware with QMK\nDESCRIPTION: This snippet shows how to build the default firmware for the WestM65 keyboard using the QMK build environment. It assumes that the QMK build environment has already been set up according to the QMK documentation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/westm/westmergo/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake westm/westmergo:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Kay60 Firmware\nDESCRIPTION: This command builds and flashes the default firmware to the Kay60 keyboard. It requires a properly configured QMK build environment and a connected keyboard in a state ready to receive the firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechlovin/kay60/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake mechlovin/kay60:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building EnvKB 65M QMK Firmware\nDESCRIPTION: This command builds the default firmware for the EnvKB 65M keyboard using the QMK build environment.  It assumes the QMK build environment is already set up. The output will be a .hex or .bin file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/enviousdesign/65m/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake enviousdesign/65m:default\n```\n\n----------------------------------------\n\nTITLE: LED Mapping for RGB Driver (C)\nDESCRIPTION: This C code snippet shows how to map the output pins of the IS31FL3742A RGB driver to specific LEDs. Each `is31fl3742a_led_t` structure maps a driver index and PWM register addresses for the red, green, and blue channels of a single RGB LED.  This array, `g_is31fl3742a_leds`, is used to control the color of individual LEDs.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/is31fl3742a.md#_snippet_4\n\nLANGUAGE: c\nCODE:\n```\nconst is31fl3742a_led_t PROGMEM g_is31fl3742a_leds[IS31FL3742A_LED_COUNT] = {\n/* Driver\n *   |  R         G         B */\n    {0, SW1_CS1,  SW1_CS2,  SW1_CS3},\n    // etc...\n};\n```\n\n----------------------------------------\n\nTITLE: Suspend/Wakeup Display Power Example in C\nDESCRIPTION: This example shows how to manage display power during suspend and wakeup events in QMK. It saves the current backlight level, turns off the backlight and display during suspend, and restores them upon wakeup. The `qp_power` function is used to control the display's power state.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/quantum_painter.md#_snippet_46\n\nLANGUAGE: c\nCODE:\n```\nstatic uint8_t last_backlight = 255;\nvoid suspend_power_down_user(void) {\n    if (last_backlight == 255) {\n        last_backlight = get_backlight_level();\n    }\n    backlight_set(0);\n    rgb_matrix_set_suspend_state(true);\n    qp_power(display, false);\n}\n\nvoid suspend_wakeup_init_user(void) {\n    qp_power(display, true);\n    rgb_matrix_set_suspend_state(false);\n    if (last_backlight != 255) {\n        backlight_set(last_backlight);\n    }\n    last_backlight = 255;\n}\n```\n\n----------------------------------------\n\nTITLE: Compiling Firmware for KTR1010 LEDs - QMK\nDESCRIPTION: This command compiles the QMK firmware for the PrimeKB Meridian keyboard, specifically targeting PCBs equipped with KTR1010 RGB LEDs. It outputs a firmware binary optimized for these LEDs. Requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/primekb/meridian/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake primekb/meridian/ktr1010:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Rad Keyboard Firmware (Makefile)\nDESCRIPTION: This command builds and flashes the default firmware for the Rad Macro Pad.  It uses the `make` command with the `flash` target, assuming the QMK build environment is set up and the necessary flashing tools are installed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/rad/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake rad:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Equinox XL with QMK\nDESCRIPTION: This command builds the default keymap for the Equinox XL keyboard. It assumes the QMK build environment is already set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ai03/equinox_xl/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake ai03/equinox_xl:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Plume65 Firmware\nDESCRIPTION: This command builds and flashes the default keymap for the Plume65 keyboard to the device. It requires a configured QMK build environment and a connected Plume65 keyboard in a flashable state (e.g., via DFU or bootloader mode). The command combines the build and flash steps into a single operation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/plume/plume65/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake plume/plume65:default:flash\n```\n\n----------------------------------------\n\nTITLE: Compiling Gergo Default Keymap\nDESCRIPTION: This command compiles the default keymap for the ErgoTaco keyboard. This is useful for testing if the build environment is correctly configured. It requires the QMK firmware to be set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/gboards/ergotaco/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake gboards/ergotaco:default\n```\n\n----------------------------------------\n\nTITLE: Flashing frobiac/redtilt QMK Firmware\nDESCRIPTION: This command flashes the pre-built QMK Firmware onto the frobiac/redtilt keyboard. It requires a correctly configured build environment with the necessary tools for flashing to the specified microcontroller. The target microcontroller must be in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/frobiac/redtilt/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake frobiac/redtilt:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing M48 Keyboard Firmware (QMK)\nDESCRIPTION: This command flashes the pre-built or newly built default firmware for the M48 keyboard (rev1) onto the keyboard's microcontroller using the QMK build environment. It requires the keyboard to be in flashing mode.  Assumes dfu-util or similar flashing utility is installed and configured.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mlego/m48/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake mlego/m48/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Split65 with Proton C using QMK\nDESCRIPTION: This command builds and flashes the QMK firmware for the Split65 keyboard using a Proton C controller with the default configuration. It uses the `make` command with the target specified as `handwired/split65/stm32:default:flash`. It assumes that the QMK build environment is properly configured for flashing to a Proton C. The keyboard must be in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/split65/readme.md#_snippet_3\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/split65/stm32:default:flash\n```\n\n----------------------------------------\n\nTITLE: Initializing keyboard user configuration in C\nDESCRIPTION: This function initializes the keyboard's user configuration by reading from the EEPROM and setting the default layer's RGB color based on the `rgb_layer_change` flag. It uses `eeconfig_read_user()` to populate the `user_config` structure and `rgblight_enable_noeeprom()`, `rgblight_sethsv_noeeprom()`, and `rgblight_mode_noeeprom()` to set the RGB lighting if enabled.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/feature_eeprom.md#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nvoid keyboard_post_init_user(void) {\n  // Call the keymap level matrix init.\n\n  // Read the user config from EEPROM\n  user_config.raw = eeconfig_read_user();\n\n  // Set default layer, if enabled\n  if (user_config.rgb_layer_change) {\n    rgblight_enable_noeeprom();\n    rgblight_sethsv_noeeprom(HSV_CYAN);\n    rgblight_mode_noeeprom(1);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining QMK Keyboard Layout Macro\nDESCRIPTION: This code snippet defines a QMK keyboard layout macro named `LAYOUT_tkl_f13_ansi_split_bs_rshift`. This macro is used to specify the key positions and sizes for a Tenkeyless (TKL) keyboard with an ANSI layout, featuring an F13 key, a split Backspace key, and a split Right Shift key. The exact keymap and assignments would be defined within the implementation of this layout macro in the QMK firmware source code.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/layouts/default/tkl_f13_ansi_split_bs_rshift/readme.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nLAYOUT_tkl_f13_ansi_split_bs_rshift\n```\n\n----------------------------------------\n\nTITLE: Adding custom mouse keys - C\nDESCRIPTION: This code snippet demonstrates how to add custom keycodes to be treated as mouse keys in QMK, causing the target layer to be held while pressed. This is achieved by using the `is_mouse_record_kb` callback to check for specific keycodes, such as `KC_ENT` (Enter) and `KC_RIGHT` ... `KC_UP` (Arrow keys).\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/pointing_device.md#_snippet_25\n\nLANGUAGE: c\nCODE:\n```\n// in <keyboard>.c:\nbool is_mouse_record_kb(uint16_t keycode, keyrecord_t* record) {\n    switch(keycode) {\n        case KC_ENT:\n            return true;\n        case KC_RIGHT ... KC_UP:\n            return true;\n        default:\n            return false;\n    }\n    return  is_mouse_record_user(keycode, record);\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Images to QGF Format\nDESCRIPTION: This snippet provides an example of using the `qmk painter-convert-graphics` command to convert an image (my_image.gif) to a QGF file format with mono16 color scheme.  The converted files are then written to the specified output directory (./generated/). Requires Pillow module for image loading.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/quantum_painter.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ cd /home/qmk/qmk_firmware/keyboards/my_keeb\n$ qmk painter-convert-graphics -f mono16 -i my_image.gif -o ./generated/\nWriting /home/qmk/qmk_firmware/keyboards/my_keeb/generated/my_image.qgf.h...\nWriting /home/qmk/qmk_firmware/keyboards/my_keeb/generated/my_image.qgf.c...\n```\n\n----------------------------------------\n\nTITLE: Defining Right-Hand Encoder Pins for Split Keyboard (QMK)\nDESCRIPTION: This snippet shows how to define encoder pins and resolutions specifically for the right half of a split keyboard in the `config.h` file of a QMK Firmware project. The `ENCODER_A_PINS_RIGHT`, `ENCODER_B_PINS_RIGHT`, and `ENCODER_RESOLUTIONS_RIGHT` macros override the default definitions for the right side. This allows you to use different encoder configurations on each half of the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/encoders.md#_snippet_7\n\nLANGUAGE: c\nCODE:\n```\n#define ENCODER_A_PINS_RIGHT { encoder1a, encoder2a }\n#define ENCODER_B_PINS_RIGHT { encoder1b, encoder2b }\n#define ENCODER_RESOLUTIONS_RIGHT { 2, 4 }\n```\n\n----------------------------------------\n\nTITLE: Drag Scroll Implementation in QMK\nDESCRIPTION: This C code implements drag scrolling by intercepting the mouse report in the `pointing_device_task_user` callback. It redirects mouse movement to scroll commands when the `set_scrolling` flag is enabled, toggled by pressing the `DRAG_SCROLL` key.  Dependencies include standard QMK key handling functions.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/pointing_device.md#_snippet_18\n\nLANGUAGE: c\nCODE:\n```\nenum custom_keycodes {\n    DRAG_SCROLL = SAFE_RANGE,\n};\n\nbool set_scrolling = false;\n\nreport_mouse_t pointing_device_task_user(report_mouse_t mouse_report) {\n    if (set_scrolling) {\n        mouse_report.h = mouse_report.x;\n        mouse_report.v = mouse_report.y;\n        mouse_report.x = 0;\n        mouse_report.y = 0;\n    }\n    return mouse_report;\n}\n\nbool process_record_user(uint16_t keycode, keyrecord_t *record) {\n    if (keycode == DRAG_SCROLL && record->event.pressed) {\n        set_scrolling = !set_scrolling;\n    }\n    return true;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Tap Dance States and Functions (Example 6)\nDESCRIPTION: This code snippet initializes the tap dance states and declares the tap dance functions for the second example, including `cur_dance`, `ql_finished`, and `ql_reset`. It sets up the necessary enums and typedefs for managing the tap dance states.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/tap_dance.md#_snippet_22\n\nLANGUAGE: c\nCODE:\n```\n// Define a type for as many tap dance states as you need\ntypedef enum {\n    TD_NONE,\n    TD_UNKNOWN,\n    TD_SINGLE_TAP,\n    TD_SINGLE_HOLD,\n    TD_DOUBLE_TAP\n} td_state_t;\n\ntypedef struct {\n    bool is_press_action;\n    td_state_t state;\n} td_tap_t;\n\nenum {\n    QUOT_LAYR, // Our custom tap dance key; add any other tap dance keys to this enum \n};\n\n// Declare the functions to be used with your tap dance key(s)\n\n// Function associated with all tap dances\ntd_state_t cur_dance(tap_dance_state_t *state);\n\n// Functions associated with individual tap dances\nvoid ql_finished(tap_dance_state_t *state, void *user_data);\nvoid ql_reset(tap_dance_state_t *state, void *user_data);\n```\n\n----------------------------------------\n\nTITLE: Initializing Tap Dance Keycodes and States (Example 5)\nDESCRIPTION: This code snippet initializes the tap dance keycodes and defines the tap dance states required for the first example. It also includes the declaration of tap dance functions `cur_dance`, `altlp_finished`, and `altlp_reset`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/tap_dance.md#_snippet_19\n\nLANGUAGE: c\nCODE:\n```\n// Tap Dance keycodes\nenum td_keycodes {\n    ALT_LP // Our example key: `LALT` when held, `(` when tapped. Add additional keycodes for each tapdance.\n};\n\n// Define a type containing as many tapdance states as you need\ntypedef enum {\n    TD_NONE,\n    TD_UNKNOWN,\n    TD_SINGLE_TAP,\n    TD_SINGLE_HOLD,\n    TD_DOUBLE_SINGLE_TAP\n} td_state_t;\n\n// Create a global instance of the tapdance state type\nstatic td_state_t td_state;\n\n// Declare your tapdance functions:\n\n// Function to determine the current tapdance state\ntd_state_t cur_dance(tap_dance_state_t *state);\n\n// `finished` and `reset` functions for each tapdance keycode\nvoid altlp_finished(tap_dance_state_t *state, void *user_data);\nvoid altlp_reset(tap_dance_state_t *state, void *user_data);\n```\n\n----------------------------------------\n\nTITLE: Initializing user EEPROM configuration in C\nDESCRIPTION: This function initializes the user EEPROM configuration. It resets the `user_config.raw` value to 0, enables the `rgb_layer_change` flag by default, writes the default value to EEPROM using `eeconfig_update_user()`, and sets the default RGB lighting to CYAN using `rgblight_enable()`, `rgblight_sethsv()`, and `rgblight_mode()`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/feature_eeprom.md#_snippet_4\n\nLANGUAGE: c\nCODE:\n```\nvoid eeconfig_init_user(void) {  // EEPROM is getting reset!\n  user_config.raw = 0;\n  user_config.rgb_layer_change = true; // We want this enabled by default\n  eeconfig_update_user(user_config.raw); // Write default value to EEPROM now\n\n  // use the non noeeprom versions, to write these values to EEPROM too\n  rgblight_enable(); // Enable RGB by default\n  rgblight_sethsv(HSV_CYAN);  // Set it to CYAN by default\n  rgblight_mode(1); // set to solid by default\n}\n```\n\n----------------------------------------\n\nTITLE: Flashing Iron160 Firmware - Make Command\nDESCRIPTION: These commands compile and flash the QMK firmware for the Iron 160 keyboard, specifying either the solderable (iron160_s) or hotswap (iron160_h) PCB variant with the default keymap.  The `:flash` target requires the PCB to be in DFU mode and uses dfu-util behind the scenes.  Dependencies include a properly configured QMK build environment and dfu-util.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/smithrune/iron160/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake smithrune/iron160/iron160_s:default:flash\n```\n\nLANGUAGE: shell\nCODE:\n```\nmake smithrune/iron160/iron160_h:default:flash\n```\n\n----------------------------------------\n\nTITLE: Handling Raw HID Data on Keyboard (C)\nDESCRIPTION: This C code snippet defines the `raw_hid_receive` function, which is a callback function that gets invoked when a raw HID report is received from the host.  The `data` parameter is a pointer to the received data, and `length` is the length of the report (always `RAW_EPSIZE`).  User code should be placed within this function to process the received data.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/rawhid.md#_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nvoid raw_hid_receive(uint8_t *data, uint8_t length) {\n    // Your code goes here\n    // `data` is a pointer to the buffer containing the received HID report\n    // `length` is the length of the report - always `RAW_EPSIZE`\n}\n```\n\n----------------------------------------\n\nTITLE: Flashing the Firmware\nDESCRIPTION: This command flashes the compiled firmware to the Bruce keyboard. It assumes the keyboard is connected and in a state ready to receive the firmware.  Requires QMK build environment and appropriate flashing tools configured.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/jlw/bruce_the_keyboard/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake jlw/bruce_the_keyboard:flash\n```\n\n----------------------------------------\n\nTITLE: Writing PROGMEM Line and Advancing Page\nDESCRIPTION: Writes a string stored in PROGMEM (`data`) to the display buffer at the current cursor position. If `invert` is true, the pixels are inverted. It then advances to the next page, filling the remainder of the current page with spaces (' '). On ARM, it calls `st7565_write_ln`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/st7565.md#_snippet_22\n\nLANGUAGE: C\nCODE:\n```\n// Writes a PROGMEM string to the buffer at current cursor position\n// Advances the cursor while writing, inverts the pixels if true\n// Advances the cursor to the next page, wiring ' ' to the remainder of the current page\n// Remapped to call 'void st7565_write_ln(const char *data, bool invert);' on ARM\nvoid st7565_write_ln_P(const char *data, bool invert);\n```\n\n----------------------------------------\n\nTITLE: RGB Light Timeout in housekeeping_task_user\nDESCRIPTION: This example demonstrates how to use `void housekeeping_task_user(void)` to implement an RGB Light timeout feature using `rgblight_suspend()` and `rgblight_wakeup()`. It defines a timer and checks for keyboard activity to suspend the RGB lights after a specified period of inactivity. The code also shows how to refresh the timer on key presses and encoder updates.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/custom_quantum_functions.md#_snippet_4\n\nLANGUAGE: c\nCODE:\n```\n#define RGBLIGHT_SLEEP  // enable rgblight_suspend() and rgblight_wakeup() in keymap.c\n#define RGBLIGHT_TIMEOUT 900000  // ms to wait until rgblight time out, 900K ms is 15min.\n```\n\nLANGUAGE: c\nCODE:\n```\nstatic uint32_t key_timer;           // timer for last keyboard activity, use 32bit value and function to make longer idle time possible\nstatic void refresh_rgb(void);       // refreshes the activity timer and RGB, invoke whenever any activity happens\nstatic void check_rgb_timeout(void); // checks if enough time has passed for RGB to timeout\nbool is_rgb_timeout = false;         // store if RGB has timed out or not in a boolean\n\nvoid refresh_rgb(void) {\n    key_timer = timer_read32(); // store time of last refresh\n    if (is_rgb_timeout)\n    {\n        is_rgb_timeout = false;\n        rgblight_wakeup();\n    }\n}\nvoid check_rgb_timeout(void) {\n    if (!is_rgb_timeout && timer_elapsed32(key_timer) > RGBLIGHT_TIMEOUT) // check if RGB has already timeout and if enough time has passed\n    {\n        rgblight_suspend();\n        is_rgb_timeout = true;\n    }\n}\n/* Then, call the above functions from QMK's built in post processing functions like so */\n/* Runs at the end of each scan loop, check if RGB timeout has occured or not */\nvoid housekeeping_task_user(void) {\n#ifdef RGBLIGHT_TIMEOUT\n    check_rgb_timeout();\n#endif\n}\n/* Runs after each key press, check if activity occurred */\nvoid post_process_record_user(uint16_t keycode, keyrecord_t *record) {\n#ifdef RGBLIGHT_TIMEOUT\n    if (record->event.pressed)\n        refresh_rgb();\n#endif\n}\n/* Runs after each encoder tick, check if activity occurred */\nvoid post_encoder_update_user(uint8_t index, bool clockwise) {\n#ifdef RGBLIGHT_TIMEOUT\n    refresh_rgb();\n#endif\n```\n\n----------------------------------------\n\nTITLE: Advanced Music Mask in keymap.c\nDESCRIPTION: This C code snippet demonstrates how to use `music_mask_user` in your `keymap.c` to control which keycodes are processed in Music Mode.  This function allows you to define exceptions to the `MUSIC_MASK` by returning `false` for keycodes that should always be processed, even in Music Mode.  Here, `RAISE` and `LOWER` are always processed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/audio.md#_snippet_21\n\nLANGUAGE: c\nCODE:\n```\nbool music_mask_user(uint16_t keycode) {\n    switch (keycode) {\n      case RAISE:\n      case LOWER:\n        return false;\n      default:\n        return true;\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Force Pushing to Origin\nDESCRIPTION: This command force-pushes the local `master` branch to the `origin` remote repository, which is your fork on GitHub. The `--force-with-lease` flag prevents accidental overwrites of remote changes that are not reflected in the local repository. The `--recurse-submodules=on-demand` flag ensures submodules are handled correctly. This synchronizes the remote fork with the local branch, effectively overwriting any conflicting changes on the remote.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/newbs_git_resynchronize_a_branch.md#_snippet_6\n\nLANGUAGE: git\nCODE:\n```\ngit push --recurse-submodules=on-demand --force-with-lease\n```\n\n----------------------------------------\n\nTITLE: Activating USART Peripheral for SIO (mcuconf.h)\nDESCRIPTION: This code snippet activates a USART peripheral for the `SIO` driver, typically used for STM32 MCUs. It's added to `mcuconf.h`. The `#undef STM32_SIO_USE_USARTn` and `#define STM32_SIO_USE_USARTn TRUE` lines activate the specific USART peripheral, indicated by *n*, for serial communication. Replace *n* with the appropriate USART peripheral number.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/serial.md#_snippet_14\n\nLANGUAGE: C\nCODE:\n```\n#pragma once\n\n#include_next <mcuconf.h>\n\n#undef STM32_SIO_USE_USARTn // [!code focus]\n#define STM32_SIO_USE_USARTn TRUE // [!code focus]\n```\n\n----------------------------------------\n\nTITLE: Defining Fn Layer Keymap\nDESCRIPTION: This section defines the Fn layer keymap, which is activated when the Fn key is held. It specifies the alternate functions assigned to various keys, including RGB control (H+/H-, S+/S-, B+/B-) and boot mode activation (QK_BOOT).\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kprepublic/bm43hsrgb/keymaps/default/readme.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n,----------------------------------------------------------------------------.\n|   QK_BOOT   |     |     |     |    |     |     |     |     |     |     |     |\n|----------------------------------------------------------------------------+\n|        |     |     |     |     |     |     |     |     |     |             |\n|----------------------------------------------------------------------------+\n|          | RGB_T | RGB_M |  H+  |  H-  |  S+  |  S-  |  B+  |  B-  |   |   |\n|----------------------------------------------------------------------------+\n|      |     |     |                |                |     |     |     |     |\n`----------------------------------------------------------------------------'\n```\n\n----------------------------------------\n\nTITLE: Mapping RGB LEDs (C)\nDESCRIPTION: This snippet shows how to map RGB LEDs to the IS31FL3218 outputs in your `<keyboardname>.c` file. Each element in the `g_is31fl3218_leds` array represents an LED, and the `OUTx` macros define the PWM register addresses for the red, green, and blue channels. `IS31FL3218_LED_COUNT` defines the number of LEDs.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/is31fl3218.md#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nconst is31fl3218_led_t PROGMEM g_is31fl3218_leds[IS31FL3218_LED_COUNT] = {\n/*   R     G     B */\n    {OUT1, OUT2, OUT3},\n    // etc...\n};\n```\n\n----------------------------------------\n\nTITLE: Building Pabile P20 Firmware with QMK - Makefile\nDESCRIPTION: These commands are used to build the firmware for the Pabile P20 keyboard using the QMK build environment.  The 'make' command compiles the firmware for specific versions (ver1 and ver2) with a default configuration. The user must have set up their QMK build environment beforehand. The commands assume that the user is in the root directory of the QMK firmware repository.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/pabile/p20/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake pabile/p20/ver1:default  # for ver1\nmake pabile/p20/ver2:default  # for ver2\n```\n\n----------------------------------------\n\nTITLE: LED Mapping for RGB in <keyboardname>.c\nDESCRIPTION: This snippet demonstrates how to map LED indices to specific output pins (SWx_CSx) on the IS31FL3745 driver for RGB LEDs.  It defines a `g_is31fl3745_leds` array of `is31fl3745_led_t` structures. Each structure specifies the driver index and the PWM register addresses for the red, green, and blue channels of an LED.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/is31fl3745.md#_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nconst is31fl3745_led_t PROGMEM g_is31fl3745_leds[IS31FL3745_LED_COUNT] = {\n/* Driver\n *   |  R         G         B */\n    {0, SW1_CS1,  SW1_CS2,  SW1_CS3},\n    // etc...\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Soft Serial Pin in config.h (C)\nDESCRIPTION: This code snippet defines the GPIO pin to be used for the bitbang serial communication. This pin is used for both transmitting and receiving data between the split halves.  The pin needs to be defined in the config.h file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/serial.md#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n#define SOFT_SERIAL_PIN D0  // or D1, D2, D3, E6\n```\n\n----------------------------------------\n\nTITLE: Building Prime_M with VIA Support - Makefile\nDESCRIPTION: This command compiles the QMK firmware for the Prime_M keyboard with VIA support enabled. This allows for real-time keymap customization using the VIA configurator. The QMK build environment must be properly set up before running this command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/primekb/prime_m/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake primekb/prime_m:via\n```\n\n----------------------------------------\n\nTITLE: Building Staggered Layout with QMK\nDESCRIPTION: This command builds the QMK firmware for the Ave keyboard with a staggered layout. It uses the `make` command with the specified target `kingly_keys/ave/staggered:default`. It assumes that the QMK build environment has been set up properly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kingly_keys/ave/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake kingly_keys/ave/staggered:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Technik-S Firmware with QMK\nDESCRIPTION: This command flashes the compiled firmware onto the Technik-S keyboard using the QMK build environment. It assumes that the keyboard is connected and in the correct mode for flashing (e.g., DFU mode).  This will overwrite the existing firmware on the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/boardsource/technik_s/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake boardsource/technik_s:default:flash\n```\n\n----------------------------------------\n\nTITLE: Making Micropad 4x4 Default Keymap\nDESCRIPTION: This command builds the default keymap for the Micropad 4x4 keyboard using the QMK build environment. It compiles the firmware and prepares it for flashing to the device.  Ensure the QMK build environment is properly set up before running this command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/nibell/micropad4x4/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake nibell/micropad4x4:default\n```\n\n----------------------------------------\n\nTITLE: Building BLANK.01 keyboard firmware - Makefile\nDESCRIPTION: This command builds the default firmware for the BLANK.01 keyboard using the QMK build system.  It requires the QMK build environment to be set up.  The output is a firmware file ready to be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/blank/blank01/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake blank/blank01:default\n```\n\n----------------------------------------\n\nTITLE: Building ALF X2 Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the ALF X2 keyboard. It assumes that the QMK build environment is properly set up. The resulting firmware can then be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/alf/x2/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake alf/x2:default\n```\n\n----------------------------------------\n\nTITLE: Building Zoom98 Firmware - Make Command\nDESCRIPTION: This command builds the default firmware for the Zoom98 keyboard. It requires the QMK build environment to be properly set up, including necessary dependencies and configurations.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/meletrix/zoom98/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake meletrix/zoom98:default\n```\n\n----------------------------------------\n\nTITLE: Building default keymap for Doro67 Regular PCB\nDESCRIPTION: This command builds the default keymap for the Doro67 Regular PCB keyboard. It uses the 'make' command within the QMK Firmware environment. Ensure the QMK build environment is properly set up before executing this command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/doro67/regular/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake doro67/regular:default\n```\n\n----------------------------------------\n\nTITLE: Defining RGB Light Max Layers\nDESCRIPTION: Defines the maximum number of lighting layers. Defaults to 8 and can be expanded up to 32.  Increasing the maximum will increase firmware size and slow sync on split keyboards.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/config_options.md#_snippet_71\n\nLANGUAGE: C\nCODE:\n```\n#define RGBLIGHT_MAX_LAYERS\n```\n\n----------------------------------------\n\nTITLE: Cloning and Configuring External Userspace Repository (GitHub)\nDESCRIPTION: This snippet demonstrates how to clone a forked external userspace repository from GitHub and configure QMK to use it. It assumes that you have already forked the qmk_userspace repository on GitHub and are in your home directory.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/newbs_external_userspace.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncd $HOME\ngit clone https://github.com/{myusername}/qmk_userspace.git\nqmk config user.overlay_dir=\"$(realpath qmk_userspace)\"\n```\n\n----------------------------------------\n\nTITLE: Flashing firmware to Scotto34 keyboard\nDESCRIPTION: This command compiles and flashes the default firmware to the Scotto34 keyboard. It depends on a properly configured QMK build environment and a connected keyboard in bootloader mode. This directly flashes the compiled firmware onto the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/scottokeebs/scotto34/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake scottokeebs/scotto34:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Lily58 Firmware with QMK\nDESCRIPTION: This command compiles the default keymap for the Lily58 keyboard using the QMK Firmware build environment. It requires QMK to be set up correctly before execution. It outputs the compiled firmware file, which can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/lily58/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake lily58:default\n```\n\n----------------------------------------\n\nTITLE: Building Beatervan with QMK\nDESCRIPTION: This command builds the default keymap for the Beatervan keyboard using the QMK firmware. It requires a correctly configured build environment as described in the QMK documentation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/beatervan/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake beatervan:default\n```\n\n----------------------------------------\n\nTITLE: Generating Compilation Database for QMK Firmware\nDESCRIPTION: This command generates a `compile_commands.json` file, which is used by the clangd extension to provide accurate code completion and error checking.  The `<keyboard>` and `<keymap>` parameters specify which keyboard and keymap to generate the compilation database for. This allows VS Code to understand the project's build configuration and provide better IntelliSense.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/other_vscode.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nqmk generate-compilation-database -kb <keyboard> -km <keymap>\n```\n\n----------------------------------------\n\nTITLE: Defining user configuration structure using union in C\nDESCRIPTION: This snippet defines a union to create a 32-bit structure (`user_config_t`) for storing configuration settings in memory and writing to the EEPROM. It includes a boolean flag `rgb_layer_change` for toggling RGB layer indication.  It allows accessing the entire 32-bit value as `raw` or individual bitfields within the structure.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/feature_eeprom.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\ntypedef union {\n  uint32_t raw;\n  struct {\n    bool     rgb_layer_change :1;\n  };\n} user_config_t;\n\nuser_config_t user_config;\n```\n\n----------------------------------------\n\nTITLE: Conditional Expressions Example - Python\nDESCRIPTION: Illustrates the use of conditional expressions (inline if statements) in QMK Python code.  Their usage is allowed in variable assignments but discouraged elsewhere.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/coding_conventions_python.md#_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nx = 1 if cond else 2\n```\n\n----------------------------------------\n\nTITLE: Building NK1 Firmware\nDESCRIPTION: This command builds the default keymap for the NK1 keypad using the QMK build environment. It requires the QMK build environment to be set up correctly. The output is a .hex file that can be flashed to the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/novelkeys/nk1/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake novelkeys/nk1:default\n```\n\n----------------------------------------\n\nTITLE: Raise Layer - Helix Keyboard\nDESCRIPTION: Defines the Raise layer keymap for the Helix keyboard. This layer is activated when the Raise key is held, providing access to numbers, function keys, and other symbols.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/helix/rev2/keymaps/default/readme.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n ,-----------------------------------------.             ,-----------------------------------------.\n |   `  |   1  |   2  |   3  |   4  |   5  |             |   6  |   7  |   8  |   9  |   0  | Bksp |\n |------+------+------+------+------+------|             |------+------+------+------+------+------|\n |   `  |   1  |   2  |   3  |   4  |   5  |             |   6  |   7  |   8  |   9  |   0  | Del  |\n |------+------+------+------+------+------|             |------+------+------+------+------+------|\n |      |  F1  |  F2  |  F3  |  F4  |  F5  |             |  F6  |   -  |   =  |   [  |   ]  |  \\   |\n |------+------+------+------+------+------+------+------+------+------+------+------+------+------|\n |      |  F7  |  F8  |  F9  |  F10 |  F11 |      |      |  F12 |      |      |PageDn|PageUp|      |\n |------+------+------+------+------+------+------+------+------+------+------+------+------+------|\n |      |      |      |      |      |      |      |      |      |      | Next | Vol- | Vol+ | Play |\n `-------------------------------------------------------------------------------------------------'\n```\n\n----------------------------------------\n\nTITLE: Building the Default Orthodox Firmware - make command\nDESCRIPTION: This command builds the default .hex file for the Orthodox keyboard firmware. It navigates to the firmware root directory and uses the `make` command with the target `orthodox/rev1:default`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/orthodox/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ make orthodox/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Flashing AUMZ Work Keyboard Firmware\nDESCRIPTION: This command flashes the built QMK firmware onto the AUMZ Work keyboard. Replace `<version>` with the specific version of the keyboard (e.g., hotswap or soldered). It depends on the QMK build environment being configured and the keyboard being in a flashable state.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/jaykeeb/aumz_work/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake jaykeeb/aumz_work/<version>:default:flash\n```\n\n----------------------------------------\n\nTITLE: FIXME Comment Formatting\nDESCRIPTION: This snippet demonstrates the required format for FIXME comments within the QMK Firmware codebase. It includes the keyword `FIXME`, the GitHub username of the author, and a brief description of the issue to be addressed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/coding_conventions_python.md#_snippet_11\n\nLANGUAGE: text\nCODE:\n```\nFIXME(username): Revisit this code when the frob feature is done.\n```\n\n----------------------------------------\n\nTITLE: Building Firmware with QMK for Postage Board\nDESCRIPTION: These commands are used to build the firmware for the Postage Board keyboard using the QMK build environment.  The `make` command compiles the keyboard layout specified (e.g., `handwired/postageboard/r1:default`) into a firmware that can be flashed onto the Postage Board.  It relies on the QMK build environment being properly set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/postageboard/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake handwired/postageboard/r1:default\n```\n\n----------------------------------------\n\nTITLE: Enforcing Key Press Order in Combos\nDESCRIPTION: This code snippet demonstrates how to enforce a specific key press order for combos using `COMBO_MUST_PRESS_IN_ORDER_PER_COMBO` and the `get_combo_must_press_in_order` function. The function checks the combo index and returns `true` for specific combos that should only activate if their keys are pressed in the order defined in the combo's key array.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/combo.md#_snippet_8\n\nLANGUAGE: c\nCODE:\n```\n#ifdef COMBO_MUST_PRESS_IN_ORDER_PER_COMBO\nbool get_combo_must_press_in_order(uint16_t combo_index, combo_t *combo) {\n    switch (combo_index) {\n        /* List combos here that you want to only activate if their keys\n         * are pressed in the same order as they are defined in the combo's key\n         * array. */\n        case COMBO_NAME_HERE:\n            return true;\n        default:\n            return false;\n    }\n}\n#endif\n```\n\n----------------------------------------\n\nTITLE: Building n2 Keyboard Firmware with QMK\nDESCRIPTION: This command compiles the QMK Firmware for the n2 keyboard with the default keymap. It requires the QMK build environment to be properly configured as described in the linked documentation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/nightly_boards/n2/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake nightly_boards/n2:default\n```\n\n----------------------------------------\n\nTITLE: Building Alps64 Firmware with Make\nDESCRIPTION: This command is used to build the default keymap for the Alps64 keyboard using the QMK firmware. It assumes that the QMK build environment has already been set up. The output will be a firmware file that can be flashed to the Alps64 keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/alps64/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake alps64:default\n```\n\n----------------------------------------\n\nTITLE: Building i75 Firmware - Make Command\nDESCRIPTION: This command builds the default firmware for the i75 keyboard using the `make` command. It assumes the QMK build environment is already set up and configured correctly. The output will be a `.hex` or `.bin` file that can be flashed to the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/40percentclub/i75/readme.md#_snippet_0\n\nLANGUAGE: makefile\nCODE:\n```\nmake 40percentclub/i75:default\n```\n\n----------------------------------------\n\nTITLE: Navigation, Editing, Number and Function Layer Keymap\nDESCRIPTION: This code defines the navigation, editing, number, and function layer, accessed by holding the Nav/Edit key. It includes mappings for numbers, function keys, arrow keys, and editing commands.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/hillside/48/keymaps/default/readme.md#_snippet_4\n\nLANGUAGE: None\nCODE:\n```\n| CUT   |  1  |  2  |  3  |  4  |  5  |---------------------------|  6  |  7  |  8  |  9  |  0  | BSPC  |\n| COPY  |LEFT |DOWN | UP  |RIGHT|PASTE|---------------------------|PG_UP|SHIFT|CTRL | ALT | GUI | PG_DN |\n| SHIFT | F1  | F2  | F3  | F4  | F5  |UNDO |---------------|REDO | F6  | F7  | F8  | F9  | F10 | SHIFT |\n--------------|CTRL |-----| GUI | ALT | Adj |SHIFT|---| *** |SPACE| ALT | GUI |-----|CTRL |--------------\n```\n\n----------------------------------------\n\nTITLE: Building TGR LENA Firmware (Makefile)\nDESCRIPTION: This snippet demonstrates how to build the default firmware for the TGR LENA keyboard using the QMK build environment. It utilizes the `make` command with the keyboard and keymap specified as arguments.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kopibeng/tgr_lena/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake kopibeng/tgr_lena:default\n```\n\n----------------------------------------\n\nTITLE: Flashing TH1800 Keyboard Firmware\nDESCRIPTION: This command flashes the compiled firmware onto the mechlovin/th1800 keyboard.  It uses the QMK build environment and flashing tools to upload the firmware to the keyboard's microcontroller. Requires the keyboard to be in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechlovin/th1800/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake mechlovin/th1800:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Keychron V8 Firmware\nDESCRIPTION: This command is used to build the default ANSI layout firmware for the Keychron V8 keyboard using the QMK build environment. It compiles the keyboard's keymap and firmware into a flashable binary.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keychron/v8/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake keychron/v8/ansi:default\n```\n\n----------------------------------------\n\nTITLE: Building Sodium42 Firmware with QMK\nDESCRIPTION: This snippet shows how to build the default firmware for the Sodium42 keyboard using the QMK build environment. It assumes that the QMK build environment has been set up correctly. The `make` command compiles the firmware and prepares it for flashing to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/nacly/sodium42/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake nacly/sodium42:default\n```\n\n----------------------------------------\n\nTITLE: Compiling All External Userspace Build Targets\nDESCRIPTION: This snippet demonstrates how to compile all the keymaps that have been added to the external userspace build targets. The resulting firmware files will be placed in the root of the External Userspace directory.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/newbs_external_userspace.md#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nqmk userspace-compile\n```\n\n----------------------------------------\n\nTITLE: Building bigknob Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the bigknob macropad using the QMK build environment. It requires a properly configured QMK build environment. The output is a firmware file that can be flashed onto the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/leafcutterlabs/bigknob/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake leafcutterlabs/bigknob:default\n```\n\n----------------------------------------\n\nTITLE: Another way to add Layout to Keyboard's rules.mk\nDESCRIPTION: This snippet demonstrates an alternative configuration of layout in keyboard's `rules.mk` file. The `LAYOUTS` variable is set to `60_iso`, indicating that the keyboard supports this layout.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/feature_layouts.md#_snippet_3\n\nLANGUAGE: makefile\nCODE:\n```\nLAYOUTS = 60_iso\n```\n\n----------------------------------------\n\nTITLE: Flashing Louhi Keyboard Firmware\nDESCRIPTION: This command flashes the default firmware to the Louhi keyboard using the QMK build environment. It depends on the `make` command and the QMK flashing tools being correctly configured.  The keyboard needs to be in a flashable state (e.g., bootloader mode).\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/pohjolaworks/louhi/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake pohjolaworks/louhi:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building JKB65 RGB R2 Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the JKB65 RGB R2 keyboard using the QMK build environment.  It uses the `make` command with the target specified as `jadookb/jkb65/r2:default`.  Dependencies include the QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/jadookb/jkb65/r2/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake jadookb/jkb65/r2:default\n```\n\n----------------------------------------\n\nTITLE: Building GMMK PRO Firmware\nDESCRIPTION: This command builds the default firmware for the GMMK PRO ANSI keyboard. It requires a correctly set up QMK build environment. The output will be a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/gmmk/pro/rev1/ansi/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake gmmk/pro/rev1/ansi:default\n```\n\n----------------------------------------\n\nTITLE: Setting Joystick Driver Type\nDESCRIPTION: This snippet shows how to configure the joystick driver type. The default is `analog`, but it can be changed to `digital` by setting `JOYSTICK_DRIVER = digital` in the `rules.mk` file. This selection dictates whether the joystick input is processed as analog or digital signals.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/joystick.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nJOYSTICK_DRIVER = digital\n```\n\n----------------------------------------\n\nTITLE: Building the EC Alveus Firmware\nDESCRIPTION: This command builds the default firmware for the EC Alveus keyboard. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cipulot/ec_alveus/1_0_0/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake cipulot/ec_alveus/1_0_0:default\n```\n\n----------------------------------------\n\nTITLE: Flashing WT65-FX Keyboard Firmware\nDESCRIPTION: This command builds and flashes the default firmware onto the wilba.tech WT65-FX keyboard. It depends on the QMK build environment and a configured flashing tool.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wilba_tech/wt65_fx/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake wilba_tech/wt65_fx:default:flash\n```\n\n----------------------------------------\n\nTITLE: Disabling Layers in QMK config.h\nDESCRIPTION: This code snippet disables layer functionality in QMK firmware, potentially reducing code size. This setting is configured in the `config.h` file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/config_options.md#_snippet_35\n\nLANGUAGE: c\nCODE:\n```\n#define NO_ACTION_LAYER\n```\n\n----------------------------------------\n\nTITLE: Building Halfcliff Keyboard Firmware - QMK\nDESCRIPTION: This snippet demonstrates how to build the default firmware for the Halfcliff keyboard using the `make` command within the QMK firmware environment. It assumes that the build environment is already set up and configured correctly. The command compiles the keyboard firmware, generating a .hex file suitable for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/halfcliff/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake halfcliff:default\n```\n\n----------------------------------------\n\nTITLE: info.json Example (JSON)\nDESCRIPTION: This JSON configuration file defines the physical layout of the numpad for the QMK Configurator. It includes metadata such as keyboard name, URL, maintainer, and tags.  The `layouts` section contains the physical layout data, defining the position and size of each key. The x, y, w and h attributes determine key position, width and height respectively.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/reference_configurator_support.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"keyboard_name\": \"Numpad\",\n    \"url\": \"\",\n    \"maintainer\": \"qmk\",\n    \"tags\": {\n        \"form_factor\": \"numpad\"\n    },\n    \"layouts\": {\n        \"LAYOUT\": {\n            \"layout\": [\n                {\"label\":\"Num Lock\", \"x\":0, \"y\":0},\n                {\"label\":\"/\", \"x\":1, \"y\":0},\n                {\"label\":\"*\", \"x\":2, \"y\":0},\n                {\"label\":\"-\", \"x\":3, \"y\":0},\n                {\"label\":\"7\", \"x\":0, \"y\":1},\n                {\"label\":\"8\", \"x\":1, \"y\":1},\n                {\"label\":\"9\", \"x\":2, \"y\":1},\n                {\"label\":\"+\", \"x\":3, \"y\":1, \"h\":2},\n                {\"label\":\"4\", \"x\":0, \"y\":2},\n                {\"label\":\"5\", \"x\":1, \"y\":2},\n                {\"label\":\"6\", \"x\":2, \"y\":2},\n                {\"label\":\"1\", \"x\":0, \"y\":3},\n                {\"label\":\"2\", \"x\":1, \"y\":3},\n                {\"label\":\"3\", \"x\":2, \"y\":3},\n                {\"label\":\"Enter\", \"x\":3, \"y\":3, \"h\":2},\n                {\"label\":\"0\", \"x\":0, \"y\":4, \"w\":2},\n                {\"label\":\".\", \"x\":2, \"y\":4}\n            ]\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: PS/2 Mouse Debug Settings (C)\nDESCRIPTION: These defines are used to enable debugging features for the PS/2 mouse. These settings are placed in `config.h`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/ps2_mouse.md#_snippet_17\n\nLANGUAGE: c\nCODE:\n```\n/* To debug the mouse reports */\n#define PS2_MOUSE_DEBUG_HID\n#define PS2_MOUSE_DEBUG_RAW\n```\n\n----------------------------------------\n\nTITLE: Enabling Combo Must Hold Mods\nDESCRIPTION: Enables extending the timeout on combos containing modifier keys. This feature provides more leniency when pressing modifier keys within a combo sequence.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/config_options.md#_snippet_59\n\nLANGUAGE: C\nCODE:\n```\n#define COMBO_MUST_HOLD_MODS\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware to Chouchou Keyboard (QMK)\nDESCRIPTION: This command flashes the default firmware to the Chouchou keyboard using the QMK build environment. It requires that the keyboard is connected to the computer and that the necessary flashing tools are installed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/chouchou/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake chouchou:default:flash\n```\n\n----------------------------------------\n\nTITLE: Selecting TX Bolt Protocol\nDESCRIPTION: To select the TX Bolt stenography protocol, add the following lines to your `rules.mk`: `STENO_ENABLE = yes` and `STENO_PROTOCOL = txbolt`. This configures QMK to communicate with Plover using the TX Bolt protocol.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/stenography.md#_snippet_2\n\nLANGUAGE: makefile\nCODE:\n```\nSTENO_ENABLE = yes\nSTENO_PROTOCOL = txbolt\n```\n\n----------------------------------------\n\nTITLE: Rendering OLED Display (C)\nDESCRIPTION: These functions render the dirty blocks to the OLED display. `oled_render_dirty` renders all dirty blocks or a subset based on the `all` parameter. `oled_render` is an alias for `oled_render_dirty(false)`, rendering only the currently dirty blocks.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/oled_driver.md#_snippet_15\n\nLANGUAGE: c\nCODE:\n```\n// Alias to oled_render_dirty to avoid a change in api.\n#define oled_render() oled_render_dirty(false)\n\n// Renders all dirty blocks to the display at one time or a subset depending on the value of\n// all.\nvoid oled_render_dirty(bool all);\n```\n\n----------------------------------------\n\nTITLE: Flashing Knight_Plus Firmware - Makefile\nDESCRIPTION: This snippet demonstrates how to flash the QMK firmware onto the X-BOWS Knight_Plus keyboard.  It uses the `make` command with the `:flash` suffix to build and flash the firmware in one step.  Two configurations (default and VIA) are provided.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/xbows/knight_plus/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake xbows/knight_plus:default:flash\n```\n\nLANGUAGE: Makefile\nCODE:\n```\nmake xbows/knight_plus:via:flash\n```\n\n----------------------------------------\n\nTITLE: Enabling Per-Key Timeout (QMK)\nDESCRIPTION: This snippet enables per-key timing for the leader key sequence in `config.h`. `LEADER_PER_KEY_TIMING` allows a new timeout to be started with each keypress in the sequence, offering more time to complete complex sequences.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/leader_key.md#_snippet_3\n\nLANGUAGE: C\nCODE:\n```\n#define LEADER_PER_KEY_TIMING\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for Satellite Rev1\nDESCRIPTION: This snippet demonstrates how to build the firmware for the aeboards/satellite/rev1 keyboard using the QMK build environment.  It builds the default keymap and VIA keymap. It requires the QMK build environment to be set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/aeboards/satellite/rev1/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake aeboards/satellite/rev1:default\nmake aeboards/satellite/rev1:via\n```\n\n----------------------------------------\n\nTITLE: Adding Bootloader Option in rules.mk (Make)\nDESCRIPTION: This code snippet demonstrates how to add a bootloader option to the `rules.mk` file in a QMK firmware userspace folder. This allows users to always include the bootloader option, even on boards without a shift button. It checks for the `FLASH_BOOTLOADER` variable and adds a definition to `OPT_DEFS` if it's set to `yes`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/feature_userspace.md#_snippet_9\n\nLANGUAGE: make\nCODE:\n```\nifeq ($(strip $(FLASH_BOOTLOADER)), yes)\n    OPT_DEFS += -DFLASH_BOOTLOADER\nendif\n```\n\n----------------------------------------\n\nTITLE: Flashing the Bastion75 Firmware\nDESCRIPTION: This command builds and flashes the default firmware for the CannonKeys Bastion75 keyboard to the connected device. It requires the QMK build environment and a correctly configured flashing tool.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cannonkeys/bastion75/readme.md#_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nmake cannonkeys/bastion75:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Eagle II Keyboard Firmware - Makefile\nDESCRIPTION: This command builds the default firmware for the handwired Eagle II keyboard using the QMK build environment. It requires a correctly set up build environment as described in the QMK documentation. The resulting firmware can then be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/eagleii/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/eagleii:default\n```\n\n----------------------------------------\n\nTITLE: Generate Analog Joystick Weights with JS\nDESCRIPTION: This JavaScript code generates an array of weights for the analog joystick driver, based on a given formula. The generated JSON string can be used to define `ANALOG_JOYSTICK_WEIGHTS` in `config.h`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/pointing_device.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nJSON.stringify(Array.from(Array(101).keys()).map(x => Math.ceil((((x/100-0.4)**3+0.064)/0.282*100))))\n```\n\n----------------------------------------\n\nTITLE: Building Gentoo Keyboard Firmware with QMK - Make Command\nDESCRIPTION: This snippet demonstrates how to build the default firmware for the Gentoo keyboard using the `make` command within the QMK Firmware environment. It assumes the build environment has been set up according to QMK's documentation. The command compiles the firmware and prepares it for flashing to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cannonkeys/gentoo/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake cannonkeys/gentoo:default\n```\n\n----------------------------------------\n\nTITLE: Building and Flashing Gergo Firmware\nDESCRIPTION: This command builds the Gergo keyboard firmware with the 'germ' keymap and flashes it to the keyboard using dfu-programmer.  It requires QMK and dfu-programmer to be installed. You must also reset your keyboard for the flashing to succeed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/gboards/gergo/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake gboards/gergo:germ:dfu\n```\n\n----------------------------------------\n\nTITLE: Flashing Ampersand Keyboard Firmware (QMK)\nDESCRIPTION: This command flashes the built firmware to the Ampersand keyboard.  It builds the default firmware (if not already built) and then uses the appropriate flashing tool to upload the firmware to the keyboard's microcontroller. The QMK build environment and dfu-programmer or similar tools must be correctly configured.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/whitefacemountain/ampersand/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake whitefacemountain/ampersand:default:flash\n```\n\n----------------------------------------\n\nTITLE: Adjusting De-Ghosting Resistors in config.h (C)\nDESCRIPTION: This snippet demonstrates how to adjust the pulldown and pullup resistor values for de-ghosting in your `config.h` file. It shows how to set the `IS31FL3746A_SW_PULLDOWN` and `IS31FL3746A_CS_PULLUP` macros to specific resistance values.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/is31fl3746a.md#_snippet_2\n\nLANGUAGE: C\nCODE:\n```\n#define IS31FL3746A_SW_PULLDOWN IS31FL3746A_PDR_2K_OHM_SW_OFF\n#define IS31FL3746A_CS_PULLUP IS31FL3746A_PUR_2K_OHM_CS_OFF\n```\n\n----------------------------------------\n\nTITLE: Building Vertex Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the Vertex keyboard.  It requires a correctly set up QMK build environment. The output is the compiled firmware ready for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kb_elmo/vertex/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake kb_elmo/vertex:default\n```\n\n----------------------------------------\n\nTITLE: Building MurphPad Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the MurphPad using the QMK build environment. It compiles the keyboard's keymap and other configurations into a firmware image.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechwild/murphpad/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake mechwild/murphpad:default\n```\n\n----------------------------------------\n\nTITLE: Building Lyra Keyboard Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Lyra keyboard using QMK. It prepares the firmware for flashing onto the keyboard's microcontroller, requiring a configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/malevolti/lyra/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake malevolti/lyra:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware to Mercury Macropad (QMK)\nDESCRIPTION: This command flashes the compiled firmware to the Mercury macropad using the QMK build environment. It requires QMK to be set up, the firmware to be compiled, and the bootloader to be ready.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/wwa/mercury/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake handwired/wwa/mercury:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing EEPROM for right hand\nDESCRIPTION: This command flashes the EEPROM of the right-hand side of the Let's Split keyboard.  It uses `avrdude` to write the `eeprom-righthand.eep` file to the EEPROM. The `$(COM_PORT)` variable needs to be replaced with the correct serial port of the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/lets_split/readme.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\navrdude -p atmega32u4 -P $(COM_PORT) -c avr109 -U eeprom:w:\\\"./quantum/split_common/eeprom-righthand.eep\\\"\n```\n\n----------------------------------------\n\nTITLE: Building DZ65RGB V1 Firmware\nDESCRIPTION: This command builds the default firmware for the DZ65RGB V1 keyboard using the QMK build environment. It requires the QMK build environment to be set up beforehand.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/dztech/dz65rgb/v1/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake dztech/dz65rgb/v1:default\n```\n\n----------------------------------------\n\nTITLE: Building Mini1800 RevA Firmware (QMK)\nDESCRIPTION: This command compiles the QMK firmware for the Mini1800 RevA keyboard with the default keymap. It assumes that the QMK build environment is properly set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/lfkeyboards/mini1800/reva/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake lfkeyboards/mini1800/reva:default\n```\n\n----------------------------------------\n\nTITLE: Customizing Zinc keyboard features\nDESCRIPTION: This code block shows the configurable options within the `rules.mk` file for customizing the Zinc keyboard firmware.  It includes options to enable or disable LED backlighting, LED underglow, combined backlighting and underglow, continuous RGB, LED animations, and iOS device compatibility.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/25keys/zinc/keymaps/default/readme_jp.md#_snippet_5\n\nLANGUAGE: Makefile\nCODE:\n```\n# Zinc keyboard customize\nLED_BACK_ENABLE = no        # LED backlight (Enable SK6812mini backlight)\nLED_UNDERGLOW_ENABLE = no   # LED underglow (Enable WS2812 RGB underlight)\nLED_BOTH_ENABLE = no        # LED backlight and underglow\nLED_RGB_CONT = no           # LED continuous backlight or/and underglow between left Zinc and right Zinc\nLED_ANIMATIONS = yes        # LED animations\nIOS_DEVICE_ENABLE = no      # connect to IOS device (iPad,iPhone)\n```\n\n----------------------------------------\n\nTITLE: Defining Combos with Advanced Keycodes in QMK - C\nDESCRIPTION: This code snippet shows how to define combos using advanced keycodes like Mod-Tap and Tap Dance in QMK Firmware. It defines two combos using `LSFT_T(KC_A)`, `LT(1, KC_B)`, `TD(TD_ESC_CAPS)`, and `KC_F1`.  The full keycode definition needs to be used in the combo definition.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/combo.md#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nconst uint16_t PROGMEM test_combo1[] = {LSFT_T(KC_A), LT(1, KC_B), COMBO_END};\nconst uint16_t PROGMEM test_combo2[] = {TD(TD_ESC_CAPS), KC_F1, COMBO_END};\n```\n\n----------------------------------------\n\nTITLE: Building with command line options\nDESCRIPTION: This shows how to build the Zinc keyboard firmware with specific options set via the command line. This allows for temporary overriding settings without changing the `rules.mk` file. Options include settings for backlighting, underglow, and iOS device compatibility.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/25keys/zinc/keymaps/default/readme_jp.md#_snippet_4\n\nLANGUAGE: Makefile\nCODE:\n```\n# Zinc keyboard 'default' keymap: convenient command line option\nmake ZINC=<options> zinc:defualt\n#    option= back | under | both | cont | na | ios\n#    ex.\n#      make ZINC=under    zinc:defualt\n#      make ZINC=under,ios zinc:defualt\n#      make ZINC=back     zinc:default\n#      make ZINC=back,na  zinc:default\n#      make ZINC=back,ios zinc:default\n```\n\n----------------------------------------\n\nTITLE: Configuring De-Ghosting (C)\nDESCRIPTION: This snippet illustrates how to configure the pull-up and pull-down resistor values for the `SWy` and `CSx` pins, respectively, to eliminate ghosting effects in the LED matrix.  It modifies the `IS31FL3736_SW_PULLUP` and `IS31FL3736_CS_PULLDOWN` macros. Dependencies: `IS31FL3736_PUR_*_OHM` and `IS31FL3736_PDR_*_OHM` macros are predefined.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/is31fl3736.md#_snippet_2\n\nLANGUAGE: C\nCODE:\n```\n#define IS31FL3736_SW_PULLUP IS31FL3736_PUR_0_OHM\n#define IS31FL3736_CS_PULLDOWN IS31FL3736_PDR_0_OHM\n```\n\n----------------------------------------\n\nTITLE: Enabling Quantum Painter in QMK Firmware (rules.mk)\nDESCRIPTION: This code snippet shows how to enable the Quantum Painter API and select drivers within the `rules.mk` file in QMK Firmware. The `QUANTUM_PAINTER_ENABLE` variable enables the overall functionality. The `QUANTUM_PAINTER_DRIVERS` variable is used to specify the driver(s) that should be included in the build.  Multiple drivers can be included by appending to the variable with `+=`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/quantum_painter.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nQUANTUM_PAINTER_ENABLE = yes\nQUANTUM_PAINTER_DRIVERS += ......\n```\n\n----------------------------------------\n\nTITLE: Defining Chordal Hold Handedness Function\nDESCRIPTION: This snippet demonstrates how to define the handedness of each key functionally using the `chordal_hold_handedness` function. The function takes a `keypos_t` as input and returns 'L', 'R', or '*' based on the key's matrix position, influencing chordal hold behavior.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/tap_hold.md#_snippet_16\n\nLANGUAGE: c\nCODE:\n```\nchar chordal_hold_handedness(keypos_t key) {\n    if (key.col == 0 || key.col == MATRIX_COLS - 1) {\n        return '*';  // Exempt the outer columns.\n    }\n    // On split keyboards, typically, the first half of the rows are on the\n    // left, and the other half are on the right.\n    return key.row < MATRIX_ROWS / 2 ? 'L' : 'R';\n}\n```\n\n----------------------------------------\n\nTITLE: Setting HSV Values at Specific LEDs (C)\nDESCRIPTION: This example demonstrates how to set the HSV value of specific LEDs using `rgblight_sethsv_at`.  The index specifies the LED to be changed. `rgblight_set()` is automatically called by these functions. This is an example of direct operation for effects and animations. Requires `rgblight.h`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/rgblight.md#_snippet_8\n\nLANGUAGE: C\nCODE:\n```\nrgblight_sethsv_at(HSV_WHITE, 0); // led 0\nrgblight_sethsv_at(HSV_RED,   1); // led 1\nrgblight_sethsv_at(HSV_GREEN, 2); // led 2\n// The above functions automatically calls rgblight_set(), so there is no need to call it explicitly.\n// Note that it is inefficient to call repeatedly.\n```\n\n----------------------------------------\n\nTITLE: Set RGB LED Scaling Register - IS31FL3729 (C)\nDESCRIPTION: Configures the scaling registers for a single RGB LED on the IS31FL3729 driver. This function sets the scaling values for the red, green, and blue channels of the specified LED. The changes are not immediately applied; `is31fl3729_update_scaling_registers()` must be called to flush the changes to the driver. The `index` refers to the LED index in the `g_is31fl3729_leds` array.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/is31fl3729.md#_snippet_6\n\nLANGUAGE: C\nCODE:\n```\nvoid is31fl3729_set_scaling_register(uint8_t index, uint8_t red, uint8_t green, uint8_t blue)\n```\n\n----------------------------------------\n\nTITLE: Defining Shift+Tab as Alternate for Tab (C)\nDESCRIPTION: This example implements `get_alt_repeat_key_keycode_user` to define Shift+Tab as the alternate for Tab, and vice versa. It checks if the Shift modifier was active and returns the appropriate keycode. `KC_TRNS` defers to defaults if no match.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/repeat_key.md#_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nuint16_t get_alt_repeat_key_keycode_user(uint16_t keycode, uint8_t mods) {\n    bool shifted = (mods & MOD_MASK_SHIFT);  // Was Shift held?\n    switch (keycode) {\n        case KC_TAB:\n            if (shifted) {        // If the last key was Shift + Tab,\n                return KC_TAB;    // ... the reverse is Tab.\n            } else {              // Otherwise, the last key was Tab,\n                return S(KC_TAB); // ... and the reverse is Shift + Tab.\n            }\n    }\n\n    return KC_TRNS;\n}\n```\n\n----------------------------------------\n\nTITLE: New RGB Matrix Keymap Code Example - C\nDESCRIPTION: This snippet presents the updated method for implementing RGB Matrix indicator code in keymaps within QMK Firmware.  The function `bool rgb_matrix_indicators_user(void)` now returns a boolean value to indicate whether the keymap has handled the LED behavior. Returning `false` allows the keyboard-level implementation to proceed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/ChangeLog/20221126.md#_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nbool rgb_matrix_indicators_user(void) {\n    // keymap LED code\n    return false;\n}\n```\n\n----------------------------------------\n\nTITLE: Turning OLED On/Off (C)\nDESCRIPTION: These functions control the power state of the OLED display. `oled_on` turns the display on, `oled_off` turns it off, and `is_oled_on` returns the current power state. `oled_on` and `oled_off` return true if the state was changed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/oled_driver.md#_snippet_28\n\nLANGUAGE: c\nCODE:\n```\n// Can be used to manually turn on the screen if it is off\n// Returns true if the screen was on or turns on\nbool oled_on(void);\n\n// Can be used to manually turn off the screen if it is on\n// Returns true if the screen was off or turns off\nbool oled_off(void);\n\n// Returns true if the oled is currently on, false if it is\n// not\nbool is_oled_on(void);\n```\n\n----------------------------------------\n\nTITLE: Enabling Locking Resync in QMK config.h\nDESCRIPTION: This code snippet enables locking resynchronization, which attempts to keep the switch state consistent with the keyboard LED state in QMK firmware. This setting is configured in the `config.h` file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/config_options.md#_snippet_27\n\nLANGUAGE: c\nCODE:\n```\n#define LOCKING_RESYNC_ENABLE\n```\n\n----------------------------------------\n\nTITLE: Building Chimera LS Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the Chimera LS keyboard using the QMK build environment.  It requires the QMK build environment to be properly set up and configured according to the QMK documentation. The command produces a firmware file suitable for flashing onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/glenpickle/chimera_ls/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake glenpickle/chimera_ls:default\n```\n\n----------------------------------------\n\nTITLE: Making Bolt Keyboard Firmware - QMK\nDESCRIPTION: This command is used to compile the default keymap for the Bolt keyboard using the QMK build environment. It assumes that the QMK build environment has been set up correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/lazydesigners/bolt/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake lazydesigners/bolt:default\n```\n\n----------------------------------------\n\nTITLE: Compiling Firmware for Big Knob\nDESCRIPTION: This command compiles the QMK firmware for the Big Knob keyboard with the default keymap. It requires a correctly set up QMK build environment. The output will be the compiled firmware ready to be flashed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/jpe230/big_knob/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nqmk compile -kb jpe230/big_knob -km default\n```\n\n----------------------------------------\n\nTITLE: Flashing rainkeeb Firmware\nDESCRIPTION: This command flashes the compiled firmware onto the rainkeeb keyboard using the QMK build environment. It requires the keyboard to be in bootloader mode, accessible via the reset button.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/rainkeebs/rainkeeb/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake rainkeebs/rainkeeb:default:flash\n```\n\n----------------------------------------\n\nTITLE: Check Programmable Button State in QMK\nDESCRIPTION: This C function gets the state of a button specified by the provided index (0-31). It returns `true` if the button is currently pressed, `false` otherwise.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/programmable_button.md#_snippet_6\n\nLANGUAGE: c\nCODE:\n```\nbool programmable_button_is_on(uint8_t index)\n```\n\n----------------------------------------\n\nTITLE: Building wings42 Keyboard Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the wings42 keyboard using the QMK build environment. It compiles the keyboard layout and generates the firmware file ready for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/dailycraft/wings42/rev2/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake dailycraft/wings42:default\n```\n\n----------------------------------------\n\nTITLE: Building Zed65 Firmware with QMK\nDESCRIPTION: This command builds the default keymap for the Mechlovin Zed65 keyboard using the QMK firmware build system. It assumes that the QMK build environment is already set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechlovin/zed65/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake mechlovin/zed65:default\n```\n\n----------------------------------------\n\nTITLE: Building AkeGata Denki Device One Firmware\nDESCRIPTION: This command builds the default firmware for the AkeGata Denki Device One keyboard. It assumes that the QMK build environment has already been set up.  It compiles the keyboard firmware and generates a .hex or .bin file ready to flash to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/akegata_denki/device_one/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake akegata_denki/device_one:default\n```\n\n----------------------------------------\n\nTITLE: Building Flygone60 Firmware\nDESCRIPTION: This command builds the default firmware for the Flygone60 keyboard using the QMK build environment. It assumes that the QMK build environment has been properly set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/shandoncodes/flygone60/rev3/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake shandoncodes/flygone60/rev3:default\n```\n\n----------------------------------------\n\nTITLE: Compiling Skeletyl Firmware with v2 (Splinky v3) and via keymap\nDESCRIPTION: This command compiles the QMK firmware for the Skeletyl keyboard with v2 shield (Splinky v3) and via keymap. It uses the `qmk compile` command with specific parameters for the keyboard, version, and keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/bastardkb/skeletyl/readme.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nqmk compile -kb bastardkb/skeletyl/v2/splinky_3 -km via\n```\n\n----------------------------------------\n\nTITLE: Building Gothic50 Firmware with QMK\nDESCRIPTION: This snippet demonstrates how to compile the default keymap for the Gothic50 keyboard using the QMK firmware build environment. It assumes that the QMK build environment has been properly set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wsk/gothic50/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake wsk/gothic50:default\n```\n\n----------------------------------------\n\nTITLE: Compiling PICO PAD keyboard layout using QMK\nDESCRIPTION: This command compiles the default keymap for the adafruit/pico_pad keyboard using the QMK firmware.  It assumes that the QMK build environment is already set up. The compiled firmware can then be flashed to the PICO PAD.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/adafruit/pico_pad/readme.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nqmk compile -kb adafruit/pico_pad -km default\n```\n\n----------------------------------------\n\nTITLE: Building Atreus Firmware with Default Configuration (AVRDUDE)\nDESCRIPTION: This command builds the default Atreus keyboard firmware and flashes it using AVRDUDE. It assumes that the build environment is set up correctly. This is a generic command that will work for a standard Atreus configuration.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/atreus/readme.md#_snippet_0\n\nLANGUAGE: makefile\nCODE:\n```\nmake atreus:default:avrdude\n```\n\n----------------------------------------\n\nTITLE: Flashing Keymap to 0xCB 1337 with QMK\nDESCRIPTION: This command flashes the compiled keymap to the 0xCB 1337 keyboard using the QMK firmware. This requires the keyboard to be in bootloader mode. Ensure that the build environment is correctly configured before executing this command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/0xcb/1337/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake 0xcb/1337:default:flash\n```\n\n----------------------------------------\n\nTITLE: Formatting Python Code (QMK)\nDESCRIPTION: This command formats python code in the qmk_firmware repository. It doesn't take any specific arguments.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/cli_commands.md#_snippet_48\n\nLANGUAGE: qmk\nCODE:\n```\nqmk format-python\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Tapping Term in config.h\nDESCRIPTION: This code snippet defines a custom `TAPPING_TERM` and `TAPPING_TERM_PER_KEY` in the `config.h` file.  `TAPPING_TERM` specifies the maximum time (in milliseconds) allowed between taps for a Tap Dance key. `TAPPING_TERM_PER_KEY` is used for custom `get_tapping_term` functions. These definitions require the QMK core and are commonly used with the Tap Dance feature.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/tap_dance.md#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n#define TAPPING_TERM 175\n#define TAPPING_TERM_PER_KEY\n```\n\n----------------------------------------\n\nTITLE: Mapping RGB LEDs using is31fl3236_led_t in C\nDESCRIPTION: This C code snippet shows how to map RGB LEDs to specific outputs on the IS31FL3236 driver. The `g_is31fl3236_leds` array defines the mapping between LED indices and the driver's output pins for red, green, and blue channels. `IS31FL3236_LED_COUNT` should be defined to the number of LEDs.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/is31fl3236.md#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nconst is31fl3236_led_t PROGMEM g_is31fl3236_leds[IS31FL3236_LED_COUNT] = {\n/* Driver\n     |  R     G     B */\n    {0, OUT1, OUT2, OUT3},\n    // etc...\n};\n```\n\n----------------------------------------\n\nTITLE: Custom Backlight Driver Implementation (C)\nDESCRIPTION: This snippet shows the basic API for a custom backlight driver. It includes `backlight_init_ports`, `backlight_set`, and `backlight_task` functions. These functions allow users to initialize ports, set the backlight level, and perform periodic tasks related to the backlight.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/backlight.md#_snippet_7\n\nLANGUAGE: c\nCODE:\n```\nvoid backlight_init_ports(void) {\n    // Optional - runs on startup\n    //   Usually you want to configure pins here\n}\nvoid backlight_set(uint8_t level) {\n    // Optional - runs on level change\n    //   Usually you want to respond to the new value\n}\n\nvoid backlight_task(void) {\n    // Optional - runs periodically\n    //   Note that this is called in the main keyboard loop,\n    //   so long running actions here can cause performance issues\n}\n```\n\n----------------------------------------\n\nTITLE: Unlock STM32F103 with OpenOCD\nDESCRIPTION: This command unlocks the STM32F103 microcontroller using OpenOCD. It is used to resolve the `Unknown memory region` error during flashing. The command initializes OpenOCD with the ST-Link interface and STM32F1x target configurations, halts the processor, unlocks the flash memory, resets the processor, halts it again, and exits.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/isp_flashing_guide.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nopenocd -f interface/stlink.cfg -f target/stm32f1x.cfg -c \"init; reset halt; stm32f1x unlock 0; reset halt; exit\"\n```\n\n----------------------------------------\n\nTITLE: Flashing PT-80 Firmware with Make\nDESCRIPTION: These commands demonstrate how to flash the QMK firmware to the Prototypist PT-80 keyboard with different configurations using the `make` command. The configurations include default, VIA, and ANSI layouts. The `flash` target is used to trigger the flashing process.  Ensure that the QMK build environment is properly set up and that the keyboard is in the correct bootloader mode before executing these commands.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/prototypist/pt80/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake prototypist/pt80:default:flash\n```\n\nLANGUAGE: make\nCODE:\n```\nmake prototypist/pt80:via:flash\n```\n\nLANGUAGE: make\nCODE:\n```\nmake prototypist/pt80:default_ansi:flash\n```\n\n----------------------------------------\n\nTITLE: Converting Keymap JSON to C using QMK CLI\nDESCRIPTION: This code snippet demonstrates how to convert a keymap.json file to a keymap.c file using the QMK command-line interface. This is useful for adding custom C code to the keymap, allowing for more advanced functionality like custom OLED or encoder behavior. Note that using a keymap.c file will cause the keymap.json file to be ignored by the QMK build system.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/splitkb/aurora/sweep/keymaps/default/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd ./keymaps/splitkb/aurora/corne/my_personal_keymap\n```\n\nLANGUAGE: bash\nCODE:\n```\nqmk json2c -o keymap.c keymap.json\n```\n\n----------------------------------------\n\nTITLE: Defining the Frame Offset structure in C\nDESCRIPTION: This code snippet defines the structure for the frame offset block in the QMK Graphics Format (QGF). It contains the block header and an array of offsets to each frame's descriptor block. The `__attribute__((packed))` ensures no padding is added. The length of the offset array depends on the number of frames.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/quantum_painter_qgf.md#_snippet_2\n\nLANGUAGE: c\nCODE:\n```\ntypedef struct __attribute__((packed)) qgf_frame_offsets_v1_t {\n    qgf_block_header_v1_t header;    // = { .type_id = 0x01, .neg_type_id = (~0x01), .length = (N * sizeof(uint32_t)) }\n    uint32_t              offset[N]; // where 'N' is the number of frames in the file\n} qgf_frame_offsets_v1_t;\n```\n\n----------------------------------------\n\nTITLE: Include IS31FL3736 Driver in rules.mk (Make)\nDESCRIPTION: This snippet demonstrates how to include the IS31FL3736 driver in your `rules.mk` file for use with the LED Matrix or RGB Matrix features. It specifies the paths to the necessary source files for both single-color and RGB LED configurations and sets the `I2C_DRIVER_REQUIRED` flag. Dependencies: `DRIVER_PATH` variable must be defined.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/is31fl3736.md#_snippet_0\n\nLANGUAGE: Make\nCODE:\n```\nCOMMON_VPATH += $(DRIVER_PATH)/led/issi\nSRC += is31fl3736-mono.c # For single-color\nSRC += is31fl3736.c # For RGB\nI2C_DRIVER_REQUIRED = yes\n```\n\n----------------------------------------\n\nTITLE: STM32 USART Configuration options in config.h (C)\nDESCRIPTION: This code snippet defines additional configuration options for STM32 microcontrollers. It includes options for remapping USART pins and setting the pin alternate function. These settings need to be adjusted based on the specific STM32 MCU being used. SERIAL_USART_TX_PAL_MODE defines the 'alternate function' for the TX pin.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/serial.md#_snippet_6\n\nLANGUAGE: c\nCODE:\n```\n#define USART1_REMAP               // Remap USART TX and RX pins on STM32F103 MCUs, see table below.\n#define SERIAL_USART_TX_PAL_MODE 7 // Pin \"alternate function\", see the respective datasheet for the appropriate values for your MCU. default: 7\n```\n\n----------------------------------------\n\nTITLE: Merge Conflict Example - Diff\nDESCRIPTION: This snippet shows an example of a merge conflict within a file.  The `<<<<<<< HEAD` marks the beginning of the changes in the current branch.  The `=======` separates the changes from the current branch and the incoming changes. The `>>>>>>> Commit #1` marks the end of the merge conflict section, including the commit hash where the change originates.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/newbs_git_resolving_merge_conflicts.md#_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n<<<<<<< HEAD\n<p>For help with any issues, email us at support@webhost.us.</p>\n=======\n<p>Need help? Email support@webhost.us.</p>\n>>>>>>> Commit #1\n```\n\n----------------------------------------\n\nTITLE: Building KBD67 Mk.II RGB Firmware (AVR V2)\nDESCRIPTION: This command builds the QMK firmware for the KBD67 Mk.II RGB keyboard, version 2, which utilizes an AVR-based ATmega32U4 microcontroller and an IS31FL3731 RGB LED driver. This build process generates a .hex file. A properly configured QMK build environment is a prerequisite. The compiled firmware will be placed in the QMK firmware directory.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kbdfans/kbd67/mkiirgb/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake kbdfans/kbd67/mkiirgb/v2:default # AVR (ATmega32U4+IS31FL3731)\n```\n\n----------------------------------------\n\nTITLE: ISP Header Pin Descriptions\nDESCRIPTION: This describes the function of each pin in the ISP header, including the signal names (MISO, VCC, SCLK, MOSI, Reset, Ground), their corresponding MCU pins (B3, B1, B2) and additional information such as usage and location\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kc60se/readme.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n  1 - B3      MISO, column 13, square pad\n  2 - VCC\n  3 - B1      SCLK, column 7\n  4 - B2      MOSI, caplock led\n  5 - Reset   | momentary jump 5 and 6\n  6 - Ground  | to enter Bootloader\n```\n\n----------------------------------------\n\nTITLE: Function Arguments Docstring Example - Python\nDESCRIPTION: Demonstrates how to document function arguments in docstrings according to QMK's Python conventions. It includes descriptions for arguments, return values, and potential exceptions, separated by blank lines.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/coding_conventions_python.md#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\ndef my_awesome_function(start=None, offset=0):\n    \"\"\"Return the number of seconds since 1970 Jan 1 00:00 UTC.\n\n    This function always returns an integer number of seconds.\n\n\n    Args:\n        start\n            The time to start at instead of 1970 Jan 1 00:00 UTC\n\n        offset\n            Return an answer that has this number of seconds subtracted first\n\n    Returns:\n        An integer describing a number of seconds.\n\n    Raises:\n        ValueError\n            When `start` or `offset` are not positive numbers\n    \"\"\"\n    if start < 0 or offset < 0:\n        raise ValueError('start and offset must be positive numbers.')\n\n    if not start:\n        start = time.time()\n\n    return int(start - offset)\n```\n\n----------------------------------------\n\nTITLE: Drawing Rainbow Line with `qp_setpixel` in C\nDESCRIPTION: This example draws a vertical rainbow line on the display using `qp_setpixel`. It iterates through the height of the display, setting each pixel's color based on its vertical position.  `qp_flush` is called to display the changes.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/quantum_painter.md#_snippet_51\n\nLANGUAGE: c\nCODE:\n```\nvoid housekeeping_task_user(void) {\n    static uint32_t last_draw = 0;\n    if (timer_elapsed32(last_draw) > 33) { // Throttle to 30fps\n        last_draw = timer_read32();\n        // Draw a 240px high vertical rainbow line on X=0:\n        for (int i = 0; i < 239; ++i) {\n            qp_setpixel(display, 0, i, i, 255, 255);\n        }\n        qp_flush(display);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Drawing Text on Initialization (C)\nDESCRIPTION: This code shows how to load a font, measure the width of a text string, and then draw the text on the display during keyboard initialization. The font `font_noto11` should be pre-compiled and available in the project.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/quantum_painter.md#_snippet_77\n\nLANGUAGE: c\nCODE:\n```\n// Draw a text message on the bottom-right of the 240x320 display on initialisation\nstatic painter_font_handle_t my_font;\nvoid keyboard_post_init_kb(void) {\n    my_font = qp_load_font_mem(font_noto11);\n    if (my_font != NULL) {\n        static const char *text = \"Hello from QMK!\";\n        int16_t width = qp_textwidth(my_font, text);\n        qp_drawtext(display, (240 - width), (320 - my_font->line_height), my_font, text);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Simple Raw HID Example (C)\nDESCRIPTION: This C code snippet provides a simple example of handling raw HID data on the keyboard. It reads the first byte of the received report and responds with 'B' if it's 'A'.  `memset` is used to clear the response buffer.  It requires the `raw_hid_send` function to send data back to the host.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/rawhid.md#_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nvoid raw_hid_receive(uint8_t *data, uint8_t length) {\n    uint8_t response[length];\n    memset(response, 0, length);\n    response[0] = 'B';\n\n    if(data[0] == 'A') {\n        raw_hid_send(response, length);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Cancel UCIS Sequence - C\nDESCRIPTION: This function cancels the UCIS (Unicode Composing Input Sequence) input sequence.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/unicode.md#_snippet_29\n\nLANGUAGE: C\nCODE:\n```\nvoid ucis_cancel(void)\n```\n\n----------------------------------------\n\nTITLE: Building the DeskDaily Jisoo Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the DeskDaily Jisoo keyboard. It requires QMK build environment setup.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/nightly_boards/jisoo/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake nightly_boards/jisoo:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Moment Keyboard Firmware (QMK)\nDESCRIPTION: This command builds and flashes the QMK firmware for the Moment keyboard with the default keymap. It requires a properly set up QMK build environment and a connected keyboard in bootloader mode.  The keyboard's microcontroller will be updated with the new firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cannonkeys/moment/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake cannonkeys/moment:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware to Monsgeek M6\nDESCRIPTION: This command builds and flashes the default firmware to the Monsgeek M6 keyboard. It requires the QMK build environment and a compatible flashing tool to be configured. The keyboard needs to be in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/monsgeek/m6/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake monsgeek/m6:default:flash\n```\n\n----------------------------------------\n\nTITLE: Moonlander split keyboard detection\nDESCRIPTION: This code snippet demonstrates how to detect if the right side of the Moonlander keyboard is disconnected. When disconnected, it activates a specific layer on the keyboard to enable specific settings.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/zsa/moonlander/readme.md#_snippet_2\n\nLANGUAGE: C\nCODE:\n```\nvoid housekeeping_task_user(void) {\n    if (!is_transport_connected()) {\n        // set layer\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Building the mini1800 Firmware\nDESCRIPTION: This command builds the QMK firmware for the mini1800 keyboard with the default keymap. It requires QMK build environment setup.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/enviousdesign/commissions/mini1800/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake enviousdesign/commissions/mini1800:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Odelia Keyboard Firmware\nDESCRIPTION: This command builds and flashes the default firmware to the Odelia keyboard.  It assumes that the QMK build environment is set up correctly and that the necessary flashing tools are installed and configured.  The target device must be in the correct bootloader mode for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/odelia/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake odelia:default:flash\n```\n\n----------------------------------------\n\nTITLE: Disabling One-Shot Modifiers in QMK config.h\nDESCRIPTION: This code snippet disables one-shot modifiers in QMK firmware, potentially reducing code size. This setting is configured in the `config.h` file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/config_options.md#_snippet_37\n\nLANGUAGE: c\nCODE:\n```\n#define NO_ACTION_ONESHOT\n```\n\n----------------------------------------\n\nTITLE: Building XT60 Firmware with VIA\nDESCRIPTION: This command builds the QMK firmware for the XT60 keyboard with VIA support. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kopibeng/xt60/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake kopibeng/xt60:via\n```\n\n----------------------------------------\n\nTITLE: Building Firmware with Make\nDESCRIPTION: This command builds the default firmware for the prototypist/oceanographer keyboard.  It uses the `make` command with the target specified as `prototypist/oceanographer:default`. The build environment must be set up beforehand according to QMK documentation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/prototypist/oceanographer/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake prototypist/oceanographer:default\n```\n\n----------------------------------------\n\nTITLE: Building MelGeek Mach80 Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the MelGeek Mach80 rev1 keyboard using the QMK build environment.  It assumes the QMK build environment has been properly set up according to the QMK documentation. It produces a firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/melgeek/mach80/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake melgeek/mach80/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Building Pearl Keyboard Firmware\nDESCRIPTION: This snippet provides the command to build the default firmware for the Pearl keyboard using the QMK build environment.  It assumes that the QMK build environment has already been set up. The output is a compiled firmware ready to be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/pearlboards/pearl/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake pearlboards/pearl:default\n```\n\n----------------------------------------\n\nTITLE: Building Molecule Keyboard Firmware\nDESCRIPTION: Builds the default keymap for the Molecule keyboard using the `make` command within the QMK Firmware environment. This command compiles the firmware based on the configuration files for the 'molecule' keyboard and 'default' keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/molecule/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake molecule:default\n```\n\n----------------------------------------\n\nTITLE: Building Adelie Keyboard Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Adelie keyboard using the QMK build environment.  It assumes that the QMK build environment has already been set up. No specific parameters are used, it relies on the default configuration for the Adelie keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cannonkeys/adelie/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake cannonkeys/adelie:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Hailey Firmware (QMK)\nDESCRIPTION: This command flashes the built firmware onto the Hailey keyboard using the QMK build environment.  It requires a connected keyboard in flashing mode and a properly configured build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/nightingale_studios/hailey/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake nightingale_studios/hailey:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Numpad Firmware with QMK Makefile\nDESCRIPTION: This command builds the QMK firmware for the AlhenKB Macropad 5x4 configured as a numpad. It requires the QMK build environment to be correctly configured. The resulting .hex or .bin file can be used to flash the device with the numpad layout.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/alhenkb/macropad5x4/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake alhenkb/macropad5x4:numpad\n```\n\n----------------------------------------\n\nTITLE: Compiling and Flashing Firmware for WS2812 LEDs - QMK\nDESCRIPTION: This command compiles the QMK firmware for the PrimeKB Meridian keyboard (WS2812 LEDs) and then flashes it directly to the keyboard's microcontroller, assuming the device is in DFU mode.  It combines the compile and flash steps into a single command. Ensure the keyboard is in DFU mode prior to running this command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/primekb/meridian/readme.md#_snippet_2\n\nLANGUAGE: make\nCODE:\n```\nmake primekb/meridian/ws1812:default:flash\n```\n\n----------------------------------------\n\nTITLE: Adjust Layer - Helix Keyboard\nDESCRIPTION: Defines the Adjust layer keymap for the Helix keyboard, activated when both Lower and Raise keys are held. This layer provides access to less frequently used functions, such as RGB control, audio toggles, and layout selection.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/helix/rev2/keymaps/default/readme.md#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n ,-----------------------------------------.             ,-----------------------------------------.\n |  F1  |  F2  |  F3  |  F4  |  F5  |  F6  |             |  F7  |  F8  |  F9  |  F10 |  F11 |  F12 |\n |------+------+------+------+------+------|             |------+------+------+------+------+------|\n |      | Reset|RGBRST|      |      |      |             |      |      |      |      |      |  Del |\n |------+------+------+------+------+------|             |------+------+------+------+------+------|\n |      |      |      |Aud on|Audoff| Mac  |             | Win  |Qwerty|Colemk|Dvorak|      |      |\n |------+------+------+------+------+------+------+------+------+------+------+------+------+------|\n |      |      |      |      |      |      |      |      |      |      |RGB ON| HUE+ | SAT+ | VAL+ |\n |------+------+------+------+------+------+------+------+------+------+------+------+------+------|\n |      |      |      |      |      |      |      |      |      |      | MODE | HUE- | SAT- | VAL- |\n `-------------------------------------------------------------------------------------------------'\n```\n\n----------------------------------------\n\nTITLE: Flashing the Lemon40 Firmware\nDESCRIPTION: This command flashes the compiled firmware to the Lemon40 keyboard.  It assumes the keyboard is connected and in a state ready to receive the flash. Requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/horrortroll/lemon40/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake horrortroll/lemon40:default:flash\n```\n\n----------------------------------------\n\nTITLE: Compiling Firmware with Perfmode Keymap\nDESCRIPTION: This command compiles the QMK firmware for the Anvil Native keyboard with the 'perfmode' keymap. This keymap includes all features present on the keyboard when sold. The command requires QMK CLI to be installed and configured.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/teleport/native/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nqmk compile -kb teleport/native/iso -km perfmode\n```\n\nLANGUAGE: shell\nCODE:\n```\nqmk compile -kb teleport/native/ansi -km perfmode\n```\n\n----------------------------------------\n\nTITLE: Building Phoenix Keyboard Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Phoenix keyboard using the QMK build environment.  It requires a properly configured QMK build environment. The output is the compiled firmware ready to be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cablecardesigns/phoenix/readme.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmake cablecardesigns/phoenix:default\n```\n\n----------------------------------------\n\nTITLE: Flashing h65 Firmware with QMK\nDESCRIPTION: This command compiles and flashes the default keymap for the h65 keyboard to the device. It assumes the QMK build environment is set up correctly and the keyboard is in a flashable state (e.g., bootloader mode). The command combines the build and flash steps.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/hineybush/h65/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake h65:default:flash\n```\n\n----------------------------------------\n\nTITLE: Defining the Frame Descriptor structure in C\nDESCRIPTION: This code snippet defines the structure for the frame descriptor block in the QMK Graphics Format (QGF). It contains the block header, frame format, flags, compression scheme, transparency index, and delay. The `__attribute__((packed))` ensures no padding is added, and the structure size is asserted to be 11 bytes.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/quantum_painter_qgf.md#_snippet_3\n\nLANGUAGE: c\nCODE:\n```\ntypedef struct __attribute__((packed)) qgf_frame_v1_t {\n    qgf_block_header_v1_t header;              // = { .type_id = 0x02, .neg_type_id = (~0x02), .length = 5 }\n    uint8_t               format;              // Frame format, see below.\n    uint8_t               flags;               // Frame flags, see below.\n    uint8_t               compression_scheme;  // Compression scheme, see below.\n    uint8_t               transparency_index;  // palette index used for transparent pixels (not yet implemented)\n    uint16_t              delay;               // frame delay time for animations (in units of milliseconds)\n} qgf_frame_v1_t;\n// _Static_assert(sizeof(qgf_frame_v1_t) == (sizeof(qgf_block_header_v1_t) + 6), \"qgf_frame_v1_t must be 11 bytes in v1 of QGF\");\n```\n\n----------------------------------------\n\nTITLE: Building Macrocat Firmware\nDESCRIPTION: This command builds the default firmware for the Macrocat keyboard using the QMK build system. It requires the QMK build environment to be set up correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/macrocat/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake macrocat:default\n```\n\n----------------------------------------\n\nTITLE: Building Traveller Firmware (Makefile)\nDESCRIPTION: This command builds the default firmware for the Traveller keyboard within the QMK Firmware environment. It utilizes the 'make' command with specific arguments to compile the firmware for the 'handwired/traveller' keyboard layout with the 'default' keymap. It assumes that the QMK build environment is already set up and configured correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/traveller/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/traveller:default\n```\n\n----------------------------------------\n\nTITLE: Building the ogurec/right_pm keymap\nDESCRIPTION: This command compiles the default keymap for the ogurec/right_pm keyboard within the QMK Firmware environment. It requires a properly configured build environment as described in the QMK documentation. The output is a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/drhigsby/ogurec/right_pm/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake ogurec/right_pm:default\n```\n\n----------------------------------------\n\nTITLE: Enabling PWM in halconf.h (ChibiOS)\nDESCRIPTION: This code snippet enables the PWM subsystem within the ChibiOS hardware abstraction layer (HAL). This is a prerequisite for using the PWM driver for WS2812 LEDs. PWM must be enabled at the board level for proper functionality.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/ws2812.md#_snippet_13\n\nLANGUAGE: c\nCODE:\n```\n#pragma once\n\n#define HAL_USE_PWM TRUE // [!code focus]\n\n#include_next <halconf.h>\n```\n\n----------------------------------------\n\nTITLE: Flash Lily58 R2G Firmware\nDESCRIPTION: This command flashes the QMK firmware for the Lily58 R2G keyboard with the mb_via keymap to the keyboard. It requires a properly configured QMK build environment and a connected keyboard in bootloader mode. The command assumes the appropriate flashing tools are installed and configured.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/lily58/r2g/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake lily58/r2g:mb_via:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Dactyl Firmware with teensy-loader-cli\nDESCRIPTION: This command flashes the compiled `.hex` firmware file to the Teensy microcontroller using the `teensy_loader_cli` command-line tool. It requires the `teensy_loader_cli` tool to be installed and accessible. The `-mmcu=atmega32u4` option specifies the microcontroller type. The `<keymapname>` should be replaced with the desired keymap name matching the built `.hex` file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/dactyl/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n<path/to/>teensy_loader_cli -mmcu=atmega32u4 -w handwired_dactyl_<keymapname>.hex\n```\n\n----------------------------------------\n\nTITLE: Determine Tap Dance State in QMK\nDESCRIPTION: This code defines the `cur_dance` function, which determines the current state of the tap dance based on the `tap_dance_state_t`.  It uses the `state->count`, `state->interrupted`, and `state->pressed` values to determine whether the key was tapped, held, double-tapped, or double-held.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/tap_dance.md#_snippet_16\n\nLANGUAGE: c\nCODE:\n```\n/* Return an integer that corresponds to what kind of tap dance should be executed.\n * \n * How to figure out tap dance state: interrupted and pressed.\n * \n * Interrupted: If the state of a dance is \"interrupted\", that means that another key has been hit\n *  under the tapping term. This is typically indicative that you are trying to \"tap\" the key.\n * \n * Pressed: Whether or not the key is still being pressed. If this value is true, that means the tapping term\n *  has ended, but the key is still being pressed down. This generally means the key is being \"held\".\n * \n * One thing that is currently not possible with qmk software in regards to tap dance is to mimic the \"permissive hold\"\n *  feature. In general, advanced tap dances do not work well if they are used with commonly typed letters.\n *  For example \"A\". Tap dances are best used on non-letter keys that are not hit while typing letters.\n * \n * Good places to put an advanced tap dance:\n *  z,q,x,j,k,v,b, any function key, home/end, comma, semi-colon\n * \n * Criteria for \"good placement\" of a tap dance key:\n *  Not a key that is hit frequently in a sentence\n *  Not a key that is used frequently to double tap, for example 'tab' is often double tapped in a terminal, or\n *    in a web form. So 'tab' would be a poor choice for a tap dance.\n *  Letters used in common words as a double. For example 'p' in 'pepper'. If a tap dance function existed on the\n *    letter 'p', the word 'pepper' would be quite frustrating to type.\n * \n * For the third point, there does exist the 'TD_DOUBLE_SINGLE_TAP', however this is not fully tested\n * \n */\ntd_state_t cur_dance(tap_dance_state_t *state) {\n    if (state->count == 1) {\n        if (state->interrupted || !state->pressed) return TD_SINGLE_TAP;\n        // Key has not been interrupted, but the key is still held. Means you want to send a 'HOLD'.\n        else return TD_SINGLE_HOLD;\n    } else if (state->count == 2) {\n        // TD_DOUBLE_SINGLE_TAP is to distinguish between typing \"pepper\", and actually wanting a double tap\n        // action when hitting 'pp'. Suggested use case for this return value is when you want to send two\n        // keystrokes of the key, and not the 'double tap' action/macro.\n        if (state->interrupted) return TD_DOUBLE_SINGLE_TAP;\n        else if (state->pressed) return TD_DOUBLE_HOLD;\n        else return TD_DOUBLE_TAP;\n    }\n\n    // Assumes no one is trying to type the same letter three times (at least not quickly).\n    // If your tap dance key is 'KC_W', and you want to type \"www.\" quickly - then you will need to add\n    // an exception here to return a 'TD_TRIPLE_SINGLE_TAP', and define that enum just like 'TD_DOUBLE_SINGLE_TAP'\n    if (state->count == 3) {\n        if (state->interrupted || !state->pressed) return TD_TRIPLE_TAP;\n        else return TD_TRIPLE_HOLD;\n    } else return TD_UNKNOWN;\n}\n```\n\n----------------------------------------\n\nTITLE: Compiling Firmware for Geekboards Macropad v2 with VIA\nDESCRIPTION: This command compiles the QMK firmware for the Geekboards Macropad v2 using the VIA keymap. This process transforms the source code into a firmware image that can be flashed onto the device. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/geekboards/macropad_v2/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake geekboards/macropad_v2:via\n```\n\n----------------------------------------\n\nTITLE: Flashing Mini1800 RevA with QMK\nDESCRIPTION: This command compiles and flashes the QMK firmware for the Mini1800 RevA keyboard with the default keymap. It assumes a properly configured QMK build environment and a connected keyboard in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/lfkeyboards/mini1800/readme.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmake lfkeyboards/mini1800/reva:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Potato65 Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Potato65 hotswap keyboard using the QMK build system. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/buildakb/potato65hs/readme.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmake buildakb/potato65hs:default\n```\n\n----------------------------------------\n\nTITLE: Building think65v3 with QMK\nDESCRIPTION: This command builds the default keymap for the Gray Studio think65v3 keyboard using the QMK Firmware. It leverages the make command to compile the firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/gray_studio/think65v3/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake gray_studio/think65v3:default\n```\n\n----------------------------------------\n\nTITLE: Building Stream Cheap Firmware with Make\nDESCRIPTION: These commands build the QMK firmware for different Stream Cheap configurations using the `make` command.  They specify the keyboard layout and keymap to compile. Each command targets a specific version of the macropad (2x3, 2x4, 2x5) with a default or VIA keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/stream_cheap/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/stream_cheap/2x3:default\nmake handwired/stream_cheap/2x4:default\nmake handwired/stream_cheap/2x4:via\nmake handwired/stream_cheap/2x5:default\n```\n\n----------------------------------------\n\nTITLE: Flashing EC 60X Firmware - QMK\nDESCRIPTION: This command flashes the built firmware onto the EC 60X keyboard using the QMK build environment. It requires the keyboard to be in bootloader mode.  It extends the build command by adding the 'flash' target to upload the firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cipulot/ec_60x/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake cipulot/ec_60x:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing B.fake Keyboard Firmware\nDESCRIPTION: This command flashes the compiled firmware onto the B.fake keyboard. This assumes the keyboard is in bootloader mode and the QMK build environment is correctly configured.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/bfake/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake bfake:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building the S7 Elephant Firmware\nDESCRIPTION: This command builds the default firmware for the S7 Elephant keyboard (revision 2) using the QMK build environment. It requires the QMK build environment to be set up beforehand.  The compiled firmware can then be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/jacky_studio/s7_elephant/rev2/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake s7_elephant/rev2:default\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for YD60MQ Keyboard\nDESCRIPTION: These commands build the firmware for the YD60MQ keyboard with different LED variants.  The `make` command is used within the QMK firmware environment. The target specifies the keyboard (ymdk/yd60mq) and the variant (default, 12led, 16led).\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ymdk/yd60mq/readme.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmake ymdk/yd60mq:default        # builds the 12 LED variant\nmake ymdk/yd60mq/12led:default  # also builds the 12 LED variant\nmake ymdk/yd60mq/16led:default  # builds the 16 LED variant\n```\n\n----------------------------------------\n\nTITLE: Building Keyboard Firmware (Make Command)\nDESCRIPTION: This command compiles the QMK firmware for the handwired/hwpm87 keyboard with the default keymap. It assumes the QMK build environment is already set up and configured.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/hwpm87/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake handwired/hwpm87:default\n```\n\n----------------------------------------\n\nTITLE: Building WT65-H3 Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the wilba_tech WT65-H3 keyboard. It uses the `make` command with the target `wilba_tech/wt65_h3:default`. Ensure the QMK build environment is properly set up before running this command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wilba_tech/wt65_h3/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake wilba_tech/wt65_h3:default\n```\n\n----------------------------------------\n\nTITLE: Flashing YMDK/MT84 Firmware (QMK)\nDESCRIPTION: This command flashes the default keymap onto the YMDK/MT84 keyboard's revision 1 using the QMK build environment. It requires the QMK build environment to be configured and a flashing tool (e.g., dfu-programmer, avrdude) to be installed and accessible. It combines the build and flash steps into one command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ymdk/ymd75/rev1/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake ymdk/ymd75/rev1:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building the dztech/mellow keyboard firmware\nDESCRIPTION: This command builds the default firmware for the dztech/mellow keyboard. It requires a properly configured QMK build environment. The output will be a firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/dztech/mellow/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake dztech/mellow:default\n```\n\n----------------------------------------\n\nTITLE: Flashing ErgoDone Firmware with hid_bootloader_cli\nDESCRIPTION: This command flashes the ErgoDone keyboard with the compiled .hex file using the `hid_bootloader_cli` utility. It requires the TKG Toolkit, specifically the old version from 2017-10-03, and the ErgoDone to be in flash mode (achieved by holding specific keys during reconnection). The `atmega32u4` flag specifies the microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ktec/ergodone/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nhid_bootloader_cli -mmcu=atmega32u4 ktec_ergodone_default.hex\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware to YD60MQ Keyboard\nDESCRIPTION: These commands build and flash the firmware for the YD60MQ keyboard with different LED variants using the DFU bootloader. The `make` command is used within the QMK firmware environment with the `:flash` target. The target specifies the keyboard (ymdk/yd60mq) and the variant (default, 12led, 16led).\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ymdk/yd60mq/readme.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nmake ymdk/yd60mq:default:flash        # builds and flashes the 12 LED variant\nmake ymdk/yd60mq/12led:default:flash  # also builds and flashes the 12 LED variant\nmake ymdk/yd60mq/16led:default:flash  # builds and flashes the 16 LED variant\n```\n\n----------------------------------------\n\nTITLE: Flashing Keychron Q9 Firmware\nDESCRIPTION: These commands are used to flash the compiled QMK firmware onto the Keychron Q9 keyboard.  The `make` command with the `flash` target uploads the firmware to the keyboard.  The board must be in a flashable state, often achieved by resetting the board or using a bootloader. The specific method depends on the bootloader used.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keychron/q9/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake keychron/q9/ansi:default:flash\nmake keychron/q9/ansi_encoder:default:flash\nmake keychron/q9/iso:default:flash\nmake keychron/q9/iso_encoder:default:flash\n```\n\n----------------------------------------\n\nTITLE: Adjusting De-Ghosting Resistors in config.h (C)\nDESCRIPTION: This snippet shows how to adjust the pull-up and pull-down resistor values for the SWy and CSx pins of the IS31FL3729 driver in your `config.h` file to eliminate ghosting. Ghosting occurs due to parasitic currents when multiple LEDs are connected.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/is31fl3729.md#_snippet_2\n\nLANGUAGE: c\nCODE:\n```\n#define IS31FL3729_SW_PULLDOWN IS31FL3729_SW_PULLDOWN_2K_OHM_SW_OFF\n#define IS31FL3729_CS_PULLUP IS31FL3729_CS_PULLUP_2K_OHM_CS_OFF\n```\n\n----------------------------------------\n\nTITLE: Conditional RGB Feature Inclusion with Define (Make)\nDESCRIPTION: This snippet demonstrates an alternative method to conditionally include RGB source files.  It checks for the existence of the `RGB_ENABLE` variable, which can be defined in the keymap's `rules.mk`.  This provides another way to enable/disable features based on keymap-specific configurations.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/feature_userspace.md#_snippet_2\n\nLANGUAGE: make\nCODE:\n```\nifdef RGB_ENABLE\n  # Include my fancy rgb functions source here\n  SRC += cool_rgb_stuff.c\nendif\n```\n\n----------------------------------------\n\nTITLE: Defining Keyboard Layout Macro in QMK\nDESCRIPTION: This code snippet defines the `LAYOUT_60_iso_tsangan_split_bs_rshift` macro.  This macro is used in QMK firmware to specify the layout of a 60% keyboard with an ISO enter key, a Tsangan (window keyless) bottom row, a split backspace, and a split right shift. It determines how the keys are arranged and mapped on the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/layouts/community/60_iso_tsangan_split_bs_rshift/readme.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nLAYOUT_60_iso_tsangan_split_bs_rshift\n```\n\n----------------------------------------\n\nTITLE: Building RS60 Rev2 Keyboard with QMK\nDESCRIPTION: This snippet shows how to build the QMK firmware for the RS60 Rev2 keyboard. It includes two build targets: 'default' and 'via'.  The 'default' target builds the standard firmware while the 'via' target builds the firmware with VIA support. You need to have the QMK build environment set up before executing these commands.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/xelus/rs60/rev2_0/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake xelus/rs60/rev2_0:default\nmake xelus/rs60/rev2_0:via\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware for TKC TKL A/B87 using Make\nDESCRIPTION: This command flashes the compiled firmware to the TKC TKL A/B87 keyboard using the QMK build environment. The `flash` target is appended to the `make` command, specifying the device to flash to, and defaults to using the dfu-programmer or other configured flasher. Proper QMK environment setup and a compatible bootloader on the keyboard are required.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/tkc/tkl_ab87/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake tkc/tkl_ab87:default:flash\n```\n\n----------------------------------------\n\nTITLE: Implementing a MacOS-friendly Grave Escape with Key Overrides (C)\nDESCRIPTION: This example shows how to implement a flexible Grave Escape feature similar to the built-in Grave Escape but with more control and without macOS bugs. It remaps `Shift` + `Esc` to send `~` and `GUI` + `Esc` to send `` ` ``.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/key_overrides.md#_snippet_2\n\nLANGUAGE: c\nCODE:\n```\n// Shift + esc = ~\nconst key_override_t tilde_esc_override = ko_make_basic(MOD_MASK_SHIFT, KC_ESC, S(KC_GRV));\n\n// GUI + esc = `\nconst key_override_t grave_esc_override = ko_make_basic(MOD_MASK_GUI, KC_ESC, KC_GRV);\n\nconst key_override_t *key_overrides[] = {\n\t&tilde_esc_override,\n\t&grave_esc_override\n};\n```\n\n----------------------------------------\n\nTITLE: Disabling Analog Comparator (C/C++)\nDESCRIPTION: These code snippets show two ways to disable the analog comparator in an AVR microcontroller using the ACSR register. The first method directly assigns 0x80 to ACSR, and the second uses bitwise operations.  It's crucial to disable analog comparator interrupts before modifying ACD to prevent unwanted interrupts.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/power.txt#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nACSR = 0x80;\nor\nACSR &= ~_BV(ACIE);\nACSR |= _BV(ACD);\n```\n\n----------------------------------------\n\nTITLE: KLE Raw Data Example\nDESCRIPTION: This is an example of raw data from Keyboard Layout Editor (KLE) representing the numpad layout. This data is used as input for the QMK KLE-JSON Converter to generate the `info.json` file. Height and width properties define the size of specific keys.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/reference_configurator_support.md#_snippet_2\n\nLANGUAGE: Text\nCODE:\n```\n[\"Num Lock\",\"/\",\"*\",\"-\"],\n[\"7\\nHome\",\"8\\n↑\",\"9\\nPgUp\",{h:2},\"+\"],\n[\"4\\n←\",\"5\",\"6\\n→\"],\n[\"1\\nEnd\",\"2\\n↓\",\"3\\nPgDn\",{h:2},\"Enter\"],\n[{w:2},\"0\\nIns\",\".\\nDel\"]\n```\n\n----------------------------------------\n\nTITLE: Building Scorpio Firmware\nDESCRIPTION: This command builds the default firmware for the Scorpio keyboard using the QMK build system. It compiles the keyboard layout and creates a flashable binary file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kwstudio/scorpio/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake kwstudio/scorpio:default\n```\n\n----------------------------------------\n\nTITLE: Drawing Rainbow Ellipses with `qp_ellipse` in C\nDESCRIPTION: This example draws a set of filled ellipses down the left side of the display, creating a rainbow effect. The `qp_ellipse` function draws each filled ellipse, and `qp_flush` updates the display.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/quantum_painter.md#_snippet_59\n\nLANGUAGE: c\nCODE:\n```\nvoid housekeeping_task_user(void) {\n    static uint32_t last_draw = 0;\n    if (timer_elapsed32(last_draw) > 33) { // Throttle to 30fps\n        last_draw = timer_read32();\n        // Draw 16x8 filled ellipses down the left side of the display\n        for (int i = 0; i < 239; i+=8) {\n            qp_ellipse(display, 8, 4+i, 16, 8, i, 255, 255, true);\n        }\n        qp_flush(display);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Building Helix Keyboard with Make\nDESCRIPTION: This snippet demonstrates how to build the Helix keyboard firmware using the `make` command in QMK. The command requires specifying the `<helix_build_name>` and `<keymap_name>` parameters, allowing users to compile firmware variations for different Helix revisions and custom keymaps.  The specific `<helix_build_name>` is chosen based on the keyboard revision.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/ChangeLog/20201128.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake <helix_build_name>:<keymap_name>\n```\n\n----------------------------------------\n\nTITLE: Compiling Iron160 Firmware - Make Command\nDESCRIPTION: These commands compile the QMK firmware for the Iron 160 keyboard, specifying either the solderable (iron160_s) or hotswap (iron160_h) PCB variant with the default keymap.  The `make` command uses the QMK build environment to generate the firmware file.  Dependencies include a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/smithrune/iron160/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake smithrune/iron160/iron160_s:default\n```\n\nLANGUAGE: shell\nCODE:\n```\nmake smithrune/iron160/iron160_h:default\n```\n\n----------------------------------------\n\nTITLE: Setting Max DAC Sample Value in QMK Audio for ARM\nDESCRIPTION: This C macro definition allows you to adjust the maximum DAC (Digital-to-Analog Converter) sample value for ARM devices. This is useful for controlling the volume of the audio output, especially if the board is too loud. The DAC typically runs in 12-bit mode, so a value of 4095U represents 100% volume. This only applies to WAVEFORM_SQUARE.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/audio.md#_snippet_17\n\nLANGUAGE: c\nCODE:\n```\n#define AUDIO_DAC_SAMPLE_MAX 4095U\n```\n\n----------------------------------------\n\nTITLE: Flashing CG108 Keyboard Firmware (QMK)\nDESCRIPTION: This command flashes the compiled QMK firmware to the dtisaac/cg108 keyboard with the default keymap. It relies on the QMK build environment and appropriate flashing tools being configured. The command assumes the keyboard is in a flashable state (e.g., bootloader mode).\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/dtisaac/cg108/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake dtisaac/cg108:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing EEPROM to Redox Pro Micros\nDESCRIPTION: These commands flash the EEPROM to the left and right halves of the Redox keyboard, respectively. The EE_HANDS setting is used, and the avrdude bootloader is specified. It's crucial to reset the Pro Micro into bootloader mode before flashing by connecting GND to RST twice in quick succession.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/redox_media/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nqmk flash -kb redox/media -km media_ch -bl avrdude-split-left\n```\n\nLANGUAGE: Shell\nCODE:\n```\nqmk flash -kb redox/media -km media_ch -bl avrdude-split-right\n```\n\n----------------------------------------\n\nTITLE: Defining the Frame Data structure in C\nDESCRIPTION: This code snippet defines the structure for the frame data block in the QMK Graphics Format (QGF). It contains the block header and an array of data bytes representing the image data. The `__attribute__((packed))` ensures no padding is added. The number of data bytes depends on the frame's image format and dimensions.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/quantum_painter_qgf.md#_snippet_6\n\nLANGUAGE: c\nCODE:\n```\ntypedef struct __attribute__((packed)) qgf_data_v1_t {\n    qgf_block_header_v1_t header;   // = { .type_id = 0x05, .neg_type_id = (~0x05), .length = N }\n    uint8_t               data[N];  // N data octets\n} qgf_data_v1_t;\n```\n\n----------------------------------------\n\nTITLE: Flashing Magnus M75H with Default Keymap\nDESCRIPTION: This command compiles and flashes the default keymap for the Smith and Rune Magnus keyboard (M75H PCB) directly to the board when in DFU mode. It is the same as the compile command but extends it with the `:flash` target. It requires `dfu-util` to be installed and configured correctly, and the QMK build environment configured.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/smithrune/magnus/readme.md#_snippet_3\n\nLANGUAGE: Makefile\nCODE:\n```\nmake smithrune/magnus/m75h:default:flash\n```\n\n----------------------------------------\n\nTITLE: Setting Combo Reference Layer using a Function - C\nDESCRIPTION: This code snippet shows how to override the default combo reference layer selection with a custom function. It uses a switch statement based on the current layer to return a specific reference layer for combo resolution. If no match is found, a default reference layer is returned.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/combo.md#_snippet_12\n\nLANGUAGE: c\nCODE:\n```\n#define COMBO_REF_DEFAULT _MY_COMBO_LAYER\n\nuint8_t combo_ref_from_layer(uint8_t layer){\n    switch (get_highest_layer(layer_state)){\n        case _DVORAK: return _QWERTY;\n        case _NAV: return _NAV;\n        default: return _MY_COMBO_LAYER;\n    }\n    return layer;  // important if default is not in case.\n}\n```\n\n----------------------------------------\n\nTITLE: LED Mapping (Single-Color) in keyboardname.c (C)\nDESCRIPTION: This snippet shows how to map the output pins to LED indices for the IS31FL3729 single-color driver in your keyboard's `.c` file.  It defines an array that specifies the driver index and PWM register address for each LED. Requires the `IS31FL3729_LED_COUNT` define.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/is31fl3729.md#_snippet_5\n\nLANGUAGE: c\nCODE:\n```\nconst is31fl3729_led_t PROGMEM g_is31fl3729_leds[IS31FL3729_LED_COUNT] = {\n/* Driver\n *   |  V */\n    {0, SW1_CS1},\n    // etc...\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Template Files\nDESCRIPTION: These shell commands create the directory structure and initial files needed for the QMK keymap project in a userspace configuration.  It creates the `.github/workflows` directory, the `build.yml` workflow file, `config.h`, creates a `rules.mk` to include `source.c` and a basic `source.c` file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/newbs_building_firmware_workflow.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmkdir -p ~/qmk_keymap/.github/workflows\ntouch ~/qmk_keymap/.github/workflows/build.yml\ntouch ~/qmk_keymap/config.h\necho \"SRC += source.c\" > ~/qmk_keymap/rules.mk\necho \"#include QMK_KEYBOARD_H\" > ~/qmk_keymap/source.c\n```\n\n----------------------------------------\n\nTITLE: Drawing Rainbow Rectangles with `qp_rect` in C\nDESCRIPTION: This example draws a set of filled rectangles down the left side of the display, creating a rainbow effect. The `qp_rect` function draws each filled rectangle, and `qp_flush` updates the display.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/quantum_painter.md#_snippet_55\n\nLANGUAGE: c\nCODE:\n```\nvoid housekeeping_task_user(void) {\n    static uint32_t last_draw = 0;\n    if (timer_elapsed32(last_draw) > 33) { // Throttle to 30fps\n        last_draw = timer_read32();\n        // Draw 8px-wide rainbow filled rectangles down the left side of the display\n        for (int i = 0; i < 239; i+=8) {\n            qp_rect(display, 0, i, 7, i+7, i, 255, 255, true);\n        }\n        qp_flush(display);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware to 3w6_2040 - QMK\nDESCRIPTION: This command flashes the compiled .uf2 firmware to the keycapsss/3w6_2040 keyboard using QMK. The keyboard needs to be in bootloader mode, either by Bootmagic reset, physical reset button, or keycode in layout. Alternatively, the .uf2 file can be dragged and dropped to the mass storage device that appears when in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keycapsss/3w6_2040/readme.md#_snippet_1\n\nLANGUAGE: QMK\nCODE:\n```\nqmk flash -kb keycapsss/3w6_2040 -km default\n```\n\n----------------------------------------\n\nTITLE: Configuring Underglow RGB (QMK)\nDESCRIPTION: This code snippet in `config.h` configures the RGB matrix for underglow on the xdboards/recon keyboard when using split keyboard configuration. `RGB_MATRIX_SPLIT { 5, 5 }` defines the split layout with 5 LEDs per side and `RGB_MATRIX_LED_COUNT 10` sets the total number of LEDs. This configuration is needed when using underglow RGB without per-key RGB LEDs.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/xdboards/recon/readme.md#_snippet_2\n\nLANGUAGE: C\nCODE:\n```\n#define RGB_MATRIX_SPLIT { 5, 5 }\n#define RGB_MATRIX_LED_COUNT 10\n```\n\n----------------------------------------\n\nTITLE: Enabling I2C Peripheral in ChibiOS mcuconf.h\nDESCRIPTION: This snippet shows how to enable a specific I2C peripheral (I2C2 in this example) in the ChibiOS microcontroller configuration file (`mcuconf.h`). Undefining and then defining `STM32_I2C_USE_I2C2` as `TRUE` activates the I2C2 peripheral for use. This configures the hardware for I2C communication.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/i2c.md#_snippet_3\n\nLANGUAGE: c\nCODE:\n```\n#pragma once\n\n#include_next <mcuconf.h>\n\n#undef STM32_I2C_USE_I2C2 // [!code focus]\n#define STM32_I2C_USE_I2C2 TRUE // [!code focus]\n```\n\n----------------------------------------\n\nTITLE: Enable Debug Mode in Keymap - C\nDESCRIPTION: This code snippet enables debug mode in the user's keymap by setting `debug_enable` and `debug_matrix` to true within the `keyboard_post_init_user` function. This will increase the amount of debug output from the keyboard.  It should be placed in your keymap.c file.  It requires the QMK firmware environment to be set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/faq_debug.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nvoid keyboard_post_init_user(void) {\n  // Customise these values to desired behaviour\n  debug_enable=true;\n  debug_matrix=true;\n  //debug_keyboard=true;\n  //debug_mouse=true;\n}\n```\n\n----------------------------------------\n\nTITLE: Neutralizing Modifier Key Taps with Retro Tapping (C)\nDESCRIPTION: This code snippet shows how to define a dummy keycode to neutralize modifier key taps when using retro tapping in QMK firmware. This prevents unintended actions from being triggered by single taps of modifier keys due to retro tapping's mod suppression.  It also shows how to configure which modifiers should be neutralized.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/tap_hold.md#_snippet_21\n\nLANGUAGE: c\nCODE:\n```\n#define DUMMY_MOD_NEUTRALIZER_KEYCODE KC_RIGHT_CTRL\n```\n\nLANGUAGE: c\nCODE:\n```\n#define MODS_TO_NEUTRALIZE { MOD_BIT(KC_LEFT_ALT), MOD_BIT(KC_LEFT_GUI) }\n```\n\nLANGUAGE: c\nCODE:\n```\n// Neutralize left alt, left GUI, right GUI and left Control+Shift\n#define MODS_TO_NEUTRALIZE { MOD_BIT(KC_LEFT_ALT), MOD_BIT(KC_LEFT_GUI), MOD_BIT(KC_RIGHT_GUI), MOD_BIT(KC_LEFT_CTRL)|MOD_BIT(KC_LEFT_SHIFT) }\n```\n\n----------------------------------------\n\nTITLE: Flashing Keychron Q2 Firmware with Make\nDESCRIPTION: These commands use the 'make' command-line tool to flash the built QMK firmware onto the Keychron Q2 keyboard. The layouts include ANSI, ISO, and JIS, with variations for encoder support. The 'flash' target compiles and flashes the firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keychron/q2/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake keychron/q2/ansi:default:flash\nmake keychron/q2/ansi_encoder:default:flash\nmake keychron/q2/iso:default:flash\nmake keychron/q2/iso_encoder:default:flash\nmake keychron/q2/jis:default:flash\nmake keychron/q2/jis_encoder:default:flash\n```\n\n----------------------------------------\n\nTITLE: Enabling Encoder Support in rules.mk (QMK)\nDESCRIPTION: This snippet demonstrates how to enable basic encoder support in the `rules.mk` file of a QMK Firmware project.  It sets the `ENCODER_ENABLE` variable to `yes`, which tells the build system to include the necessary encoder drivers and functionality. This is the first step in integrating encoder functionality into your keyboard firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/encoders.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nENCODER_ENABLE = yes\n```\n\n----------------------------------------\n\nTITLE: Defining Overlapping Key Combos in QMK - C\nDESCRIPTION: This example demonstrates how to define overlapping combos in QMK Firmware.  If all three keys are pressed, only the three-key combo will activate.  This prevents both combos from firing when all keys in both are pressed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/combo.md#_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nconst uint16_t PROGMEM test_combo1[] = {LSFT_T(KC_A), LT(1, KC_B), COMBO_END};\nconst uint16_t PROGMEM test_combo2[] = {LSFT_T(KC_A), LT(1, KC_B), KC_C, COMBO_END};\ncombo_t key_combos[] = {\n    COMBO(test_combo1, KC_ESC)\n    COMBO(test_combo2, KC_TAB)\n};\n```\n\n----------------------------------------\n\nTITLE: Flashing Keycult Zero Firmware with Make\nDESCRIPTION: This command flashes the firmware onto the Keycult Zero keyboard using the `make` command. It assumes the QMK build environment is properly configured and that the keyboard is in the correct flashing mode (typically achieved by holding Escape while plugging in the keyboard). The `<keymap>` argument specifies the keymap to use during flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keycult/keycult_zero/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake keycult/keycult_zero:<keymap>:flash\n```\n\n----------------------------------------\n\nTITLE: Animating Image on Initialization (C)\nDESCRIPTION: This snippet demonstrates how to load and animate an image using `qp_load_image_mem` and `qp_animate` during keyboard initialization. It initializes `my_image` and `my_anim`, then starts the animation if the image loads successfully.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/quantum_painter.md#_snippet_68\n\nLANGUAGE: c\nCODE:\n```\n// Animate an image on the bottom-right of the 240x320 display on initialisation\nstatic painter_image_handle_t my_image;\nstatic deferred_token my_anim;\nvoid keyboard_post_init_kb(void) {\n    my_image = qp_load_image_mem(gfx_my_image);\n    if (my_image != NULL) {\n        my_anim = qp_animate(display, (240 - my_image->width), (320 - my_image->height), my_image);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Building the keyboard firmware with Make\nDESCRIPTION: These commands build the keyboard firmware for different hardware platforms using the `make` command. Each command specifies the keyboard, keymap, and target microcontroller. These targets will generate firmware that can be flashed to the respective boards.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ibm/model_m_122/m122_3270/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake ibm/model_m_122/m122_3270/blackpill:default\nmake ibm/model_m_122/m122_3270/bluepill:default\nmake ibm/model_m_122/m122_3270/teensy:default\n```\n\n----------------------------------------\n\nTITLE: Building OpenDeck Firmware - Makefile\nDESCRIPTION: This command builds the default firmware for the OpenDeck32 Rev1 keyboard.  It requires a properly configured QMK build environment.  The output will be a firmware file that can be flashed to the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/opendeck/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake opendeck/32/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Building the split75 Firmware with QMK\nDESCRIPTION: This command builds the default keymap for the split75 keyboard using the QMK build environment. It assumes that the QMK build environment has already been set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mt/split75/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake mt/split75:default\n```\n\n----------------------------------------\n\nTITLE: Building M65 rev1 firmware with make\nDESCRIPTION: This command builds the default firmware for the M65 keyboard revision 1 using the QMK make system. It compiles the necessary source code and generates a firmware image suitable for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mlego/m65/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake mlego/m65/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Building Keyboard Firmware (Makefile)\nDESCRIPTION: This command builds the default firmware for the hardwareabstraction/handwire keyboard. It compiles the keyboard layout and generates a .hex file ready for flashing. Requires a properly set up QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/hardwareabstraction/handwire/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake hardwareabstraction/handwire:default\n```\n\n----------------------------------------\n\nTITLE: Building TIDBIT Default Keymap\nDESCRIPTION: This command builds the QMK firmware for the TIDBIT keyboard with the default keymap. It assumes that the QMK build environment is already set up. The resulting firmware can then be flashed onto the TIDBIT.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/nullbitsco/tidbit/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake nullbitsco/tidbit:default\n```\n\n----------------------------------------\n\nTITLE: Building MelGeek MJ63 Firmware with QMK\nDESCRIPTION: This snippet shows how to build the default firmware for the MelGeek MJ63 keyboard revision 1 using the QMK build environment. It assumes that the build environment has already been set up. The 'make' command compiles the firmware and creates a .hex or .bin file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/melgeek/mj63/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake melgeek/mj63/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Building Skelett 60 Firmware with Make\nDESCRIPTION: This command builds the default keymap for the Skelett 60 keyboard using the QMK build system. It assumes that the QMK build environment has been properly set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/novelkeys/skelett60/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake novelkeys/skelett60:default\n```\n\n----------------------------------------\n\nTITLE: Flashing MT84RGB Keyboard Firmware\nDESCRIPTION: This command builds and flashes the default firmware for the MT84RGB keyboard to the device. It requires the QMK build environment to be configured and the necessary tools for flashing to be installed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mt/mt84/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake mt/mt84:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Claw44 Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Claw44 keyboard using the QMK build environment.  It assumes the QMK build environment has been properly set up according to the QMK documentation.  The output will be a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/dailycraft/claw44/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake dailycraft/claw44:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Dactyl Tracer Firmware\nDESCRIPTION: This command flashes the compiled firmware to the Dactyl Tracer keyboard. It requires a connected and configured QMK build environment and a compatible flashing tool.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/dactyl_tracer/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake handwired/dactyl_tracer:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Keygem KG60 ANSI Firmware with Make\nDESCRIPTION: This command builds the default firmware for the Keygem KG60 ANSI keyboard using the `make` command. It requires a properly configured QMK build environment. The output will be a `.hex` or `.bin` file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keygem/kg60ansi/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake keygem/kg60ansi:default\n```\n\n----------------------------------------\n\nTITLE: Flashing JRIS65 Firmware - Makefile\nDESCRIPTION: This command flashes the compiled firmware to the JRIS65 hotswap keyboard. It assumes the keyboard is in bootloader mode and uses the appropriate flashing tool.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mykeyclub/jris65/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake mykeyclub/jris65/hotswap:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building QEZ Keyboard Firmware (QMK)\nDESCRIPTION: This command compiles the QMK firmware for the QEZ keyboard with the default keymap. It requires a properly set up QMK build environment. The resulting firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kb_elmo/qez/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake kb_elmo/qez:default\n```\n\n----------------------------------------\n\nTITLE: Building Matrix 8XV1.2 OG Firmware\nDESCRIPTION: This command builds the default firmware for the Matrix 8XV1.2 OG keyboard (rev2) using the QMK build environment. It assumes the user has already set up their build environment according to the QMK documentation. The output is a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/matrix/m12og/rev2/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake matrix/m12og/rev2:default\n```\n\n----------------------------------------\n\nTITLE: Building Chimera Ergo Firmware with Make\nDESCRIPTION: This snippet shows how to build the default keymap for the Chimera Ergo keyboard using the `make` command. It requires a properly configured QMK build environment. The command compiles the firmware and generates a `.hex` or `.bin` file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/glenpickle/chimera_ergo/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake glenpickle/chimera_ergo:default\n```\n\n----------------------------------------\n\nTITLE: Building YR80 Firmware with QMK\nDESCRIPTION: This command builds the default keymap for the YR80 keyboard using the QMK Firmware build system.  It requires a properly configured QMK build environment.  The command generates a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/yandrstudio/yr80/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake yandrstudio/yr80:default\n```\n\n----------------------------------------\n\nTITLE: Building Lune Keyboard Firmware with Make\nDESCRIPTION: This command builds the default firmware for the Lune keyboard. It uses the QMK make system to compile the firmware based on the configuration files specified for the `plywrks/lune` keyboard and the `default` keymap. It's a necessary step before flashing the firmware onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/plywrks/lune/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake plywrks/lune:default\n```\n\n----------------------------------------\n\nTITLE: Building Glitch Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the Glitch keyboard using the QMK build environment. It compiles the source code and generates a firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/p3d/glitch/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake p3d/glitch:default\n```\n\n----------------------------------------\n\nTITLE: Base Layer Keymap - QWERTY\nDESCRIPTION: This code represents the QWERTY base layer of the Hillside 48 keyboard layout. It defines the default assignment of keys including modifiers and special keys.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/hillside/48/keymaps/default/readme.md#_snippet_0\n\nLANGUAGE: None\nCODE:\n```\n|  `    |  Q  |  W  |  E  |  R  |  T  |---------------------------|  Y  |  U  |  I  |  O  |  P  | BKSPC |\n| TAB   |  A  |  S  |  D  |  F  |  G  |---------------------------|  H  |  J  |  K  |  L  |  ;  | ENTER |\n| SHIFT |  Z  |  X  |  C  |  V  |  B  | ESC |---------------|CAPS |  N  |  M  |  ,  |  .  |  /  | SHIFT |\n--------------|CTRL |-----| GUI | ALT | Sym |SHIFT|---| Nav |SPACE| ALT | GUI |-----|  '  |--------------\n```\n\n----------------------------------------\n\nTITLE: Flashing Keyboard Firmware (Make)\nDESCRIPTION: This command flashes the built firmware onto the Hillside 46 keyboard. It requires the QMK build environment and a connected keyboard in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/hillside/46/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake hillside/46/0_1:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing firmware on MNK 65 EC\nDESCRIPTION: This command flashes the compiled firmware onto the Monokei MNK 65 EC keyboard.  It uses the QMK build environment to both build the firmware (if necessary) and then upload it to the keyboard's microcontroller. Requires a properly configured QMK build environment and a connected keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cipulot/mnk_65_ec/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake cipulot/mnk_65_ec:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building 1up60hse Firmware with QMK\nDESCRIPTION: This command is used to build the default firmware for the 1up60hse keyboard using the QMK build environment. It requires QMK to be set up and configured.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/1upkeyboards/1up60hse/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake 1upkeyboards/1up60hse:default\n```\n\n----------------------------------------\n\nTITLE: Compiling QMK Firmware for CHERISH-75 with Default Keymap\nDESCRIPTION: This command compiles the QMK firmware for the CHERISH-75 keyboard using the default keymap. It requires QMK MSYS environment to be properly installed and configured. The resulting firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/soda/cherish/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nqmk compile -kb soda/cherish -km default\n```\n\n----------------------------------------\n\nTITLE: Building NOP60 Firmware\nDESCRIPTION: This command is used to compile the firmware for the NOP60 keyboard with the default keymap.  It assumes that the QMK build environment has already been set up.  The resulting firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/checkerboards/nop60/readme.md#_snippet_0\n\nLANGUAGE: Make\nCODE:\n```\nmake checkerboards/nop60:default\n```\n\n----------------------------------------\n\nTITLE: Flashing The Mark: 65 Keyboard Firmware\nDESCRIPTION: This command flashes the default firmware onto the Boardsource The Mark: 65 keyboard.  It uses the compiled firmware file and a flashing tool to write the firmware to the keyboard's microcontroller.  Requires a properly configured QMK build environment and a connected keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/boardsource/the_mark/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake boardsource/the_mark:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Krado66 Firmware with Make\nDESCRIPTION: This command compiles and flashes the Krado66 keyboard firmware to the device. It uses the QMK make system and requires a properly configured build environment and connected keyboard in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kradoindustries/krado66/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake kradoindustries/krado66:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Aplx6 Firmware with Make\nDESCRIPTION: This command builds the default firmware for the Aplx6 keyboard (rev1) using the QMK build environment.  It requires a properly configured QMK build environment and will generate a .hex file that can be flashed to the Pro Micro controller. The `aplyard/aplx6/rev1` specifies the keyboard and revision, and `default` specifies the keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/aplyard/aplx6/rev1/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake aplyard/aplx6/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Building Mechmini 2.0 Firmware with QMK\nDESCRIPTION: This code snippet shows how to build the Mechmini 2.0 keyboard firmware with the default keymap using the QMK build environment. It assumes that the build environment has been set up correctly as described in the QMK documentation. The command `make mechkeys/mechmini/v2:default` compiles the firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechkeys/mechmini/v2/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake mechkeys/mechmini/v2:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Cyberstar Keyboard Firmware with Make\nDESCRIPTION: This command flashes the compiled Cyberstar keyboard firmware onto the keyboard using the QMK CLI. Replace `<keymap>` with the desired keymap. This assumes the keyboard is in DFU mode. Requires QMK Toolbox or CLI to be installed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/cyberstar/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/cyberstar:<keymap>:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Keychron Q8 Firmware using Make\nDESCRIPTION: These `make` commands flash the QMK firmware onto the Keychron Q8 keyboard for different layouts (ANSI, ANSI with Encoder, ISO, ISO with Encoder) using the default keymap. The `:flash` target uploads the compiled firmware to the keyboard. Requires a configured QMK build environment and the keyboard to be in a flashable state.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keychron/q8/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake keychron/q8/ansi:default:flash\n```\n\nLANGUAGE: Makefile\nCODE:\n```\nmake keychron/q8/ansi_encoder:default:flash\n```\n\nLANGUAGE: Makefile\nCODE:\n```\nmake keychron/q8/iso:default:flash\n```\n\nLANGUAGE: Makefile\nCODE:\n```\nmake keychron/q8/iso_encoder:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Macrowo_Pad Firmware (make)\nDESCRIPTION: This command is used to build the default firmware for the Macrowo_Pad keyboard. It requires a properly configured QMK build environment. The output will be a firmware file ready to be flashed onto the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/tender/macrowo_pad/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake tender/macrowo_pad:default\n```\n\n----------------------------------------\n\nTITLE: Flashing RGB Backlight Firmware for Keychron S1 (ANSI)\nDESCRIPTION: This command builds and flashes the QMK firmware for the Keychron S1 keyboard with RGB backlight and ANSI layout, using the default configuration. It requires a properly configured QMK build environment. This command combines the build and flash steps into a single operation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keychron/s1/readme.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmake keychron/s1/ansi/rgb:default:flash\n```\n\n----------------------------------------\n\nTITLE: Enabling and configuring automatic mouse layer - C\nDESCRIPTION: This code snippet shows how to enable and configure the automatic mouse layer feature in QMK. It involves defining `POINTING_DEVICE_AUTO_MOUSE_ENABLE` in `config.h`, optionally setting `AUTO_MOUSE_DEFAULT_LAYER`, and calling `set_auto_mouse_enable(true)` in `pointing_device_init_user`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/pointing_device.md#_snippet_24\n\nLANGUAGE: c\nCODE:\n```\n// in config.h:\n#define POINTING_DEVICE_AUTO_MOUSE_ENABLE\n// only required if not setting mouse layer elsewhere\n#define AUTO_MOUSE_DEFAULT_LAYER <index of your mouse layer>\n\n// in keymap.c:\nvoid pointing_device_init_user(void) {\n    set_auto_mouse_layer(<mouse_layer>); // only required if AUTO_MOUSE_DEFAULT_LAYER is not set to index of <mouse_layer>\n    set_auto_mouse_enable(true);         // always required before the auto mouse feature will work\n}\n```\n\n----------------------------------------\n\nTITLE: Building Noxary 378 Firmware with Make\nDESCRIPTION: This snippet shows how to build the default firmware for the Noxary 378 keyboard using the `make` command within the QMK firmware environment.  It assumes the user has already set up their build environment as per QMK documentation. The command will compile the firmware based on the `noxary/378` keyboard definition and the `default` keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/noxary/378/readme.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmake noxary/378:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Pteropus Keyboard Firmware\nDESCRIPTION: These commands flash the compiled firmware onto the Pteropus keyboard.  The `make` command with the `:flash` target programs the keyboard with the specified keymap. Requires a properly configured QMK build environment and a connected keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/pteropus/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake pteropus:default:flash\n```\n\nLANGUAGE: Makefile\nCODE:\n```\nmake pteropus:manna-harbour_miryoku:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing firmware to edinburgh41\nDESCRIPTION: This command flashes the built firmware to the edinburgh41 keyboard. It utilizes the `make` command with the `flash` target within the QMK Firmware environment. Requires a connected keyboard in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/edinburgh41/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake edinburgh41:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building the Winry 25-key keyboard firmware with QMK\nDESCRIPTION: This command builds the QMK firmware for the Winry/Winry25tc keyboard using the default configuration.  It assumes that the QMK build environment has already been properly set up.  The compiled firmware can then be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/winry/winry25tc/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake winry/winry25tc:default\n```\n\n----------------------------------------\n\nTITLE: Intercept Keypress Processing in QMK Steno (C)\nDESCRIPTION: This function is called when a keypress is received, before it is processed by the steno engine. The `keycode` parameter represents the keycode of the pressed key (`QK_STENO_BOLT`, `QK_STENO_GEMINI`, or `STN_*` values), and the `record` parameter contains the key record data. Returning `true` allows the regular processing to proceed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/stenography.md#_snippet_6\n\nLANGUAGE: c\nCODE:\n```\nbool process_steno_user(uint16_t keycode, keyrecord_t *record) { return true; }\n```\n\n----------------------------------------\n\nTITLE: Flashing SENSE75 Firmware with QMK\nDESCRIPTION: This command builds and flashes the default firmware for the SENSE75 keyboard using the QMK build environment.  It assumes the keyboard is connected and QMK is properly configured.  This command also assumes that dfu-util is installed and accessible in your environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/drop/sense75/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake drop/sense75:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Iris LM-K Firmware (Makefile)\nDESCRIPTION: This command flashes the compiled firmware onto the Iris LM-K keyboard. It requires the QMK build environment to be set up and the keyboard to be connected to the computer. The command combines building and flashing the keyboard firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keebio/iris_lm/k1/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake keebio/iris_lm/k1:default:flash\n```\n\n----------------------------------------\n\nTITLE: Compiling Firmware for WS2812 LEDs - QMK\nDESCRIPTION: This command compiles the QMK firmware for the PrimeKB Meridian keyboard, specifically targeting PCBs equipped with WS2812 RGB LEDs.  It creates a firmware binary that can be flashed to the keyboard. You must have the QMK build environment set up correctly to use this command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/primekb/meridian/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake primekb/meridian/ws1812:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Lune Keyboard Firmware with Make\nDESCRIPTION: This command flashes the compiled firmware to the Lune keyboard. It utilizes the QMK make system to build the firmware and then automatically flash it to the keyboard's microcontroller, typically using a DFU bootloader. Requires the keyboard to be in bootloader mode, accessed via the reset button.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/plywrks/lune/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake plywrks/lune:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Bloomer v3 Firmware using QMK\nDESCRIPTION: This command builds the QMK firmware for the Bloomer v3 keyboard with the default keymap. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cozykeys/bloomer/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake cozykeys/bloomer/v3:default\n```\n\n----------------------------------------\n\nTITLE: Building LFK65-HS default keymap with QMK\nDESCRIPTION: This command builds the default keymap for the LFK65-HS keyboard using the QMK firmware. It requires a properly set up QMK build environment. The output is a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/lfkeyboards/lfk65_hs/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake lfkeyboards/lfk65_hs:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware for Geekboards Macropad v2 with VIA\nDESCRIPTION: This command flashes the compiled QMK firmware onto the Geekboards Macropad v2 using the VIA keymap. The device must be in bootloader mode for this command to succeed.  It utilizes the QMK flashing tools to write the firmware to the device's memory.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/geekboards/macropad_v2/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake geekboards/macropad_v2:via:flash\n```\n\n----------------------------------------\n\nTITLE: Building Jelly Epoch Hotswap Firmware - QMK\nDESCRIPTION: This command compiles the default QMK firmware for the Jelly Epoch hotswap PCB. It uses the `make` command with the keyboard and keymap specified as arguments. This process generates the firmware file which can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/owlab/jelly_epoch/hotswap/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake owlab/jelly_epoch/hotswap:default\n```\n\n----------------------------------------\n\nTITLE: Drawing Rainbow Line with `qp_line` in C\nDESCRIPTION: This example draws a set of lines down the left side of the display, creating a rainbow effect.  The `qp_line` function draws each line, and `qp_flush` updates the display.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/quantum_painter.md#_snippet_53\n\nLANGUAGE: c\nCODE:\n```\nvoid housekeeping_task_user(void) {\n    static uint32_t last_draw = 0;\n    if (timer_elapsed32(last_draw) > 33) { // Throttle to 30fps\n        last_draw = timer_read32();\n        // Draw 8px-wide rainbow down the left side of the display\n        for (int i = 0; i < 239; ++i) {\n            qp_line(display, 0, i, 7, i, i, 255, 255);\n        }\n        qp_flush(display);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Rebasing Branch with Upstream Master - Bash\nDESCRIPTION: This snippet initiates a rebase operation, which replays the changes from the current branch on top of the upstream master branch.  This integrates recent changes from the main repository into the working branch. It requires that the upstream repository has been fetched and that there are no uncommitted changes in the working directory.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/newbs_git_resolving_merge_conflicts.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit rebase upstream/master\n```\n\n----------------------------------------\n\nTITLE: Writing Line to Display and Advancing Page\nDESCRIPTION: Writes a string (`data`) to the display buffer at the current cursor position. If `invert` is true, the pixels of the string are inverted. After writing the string, it advances to the next page, filling the remainder of the current page with spaces (' ').\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/st7565.md#_snippet_15\n\nLANGUAGE: C\nCODE:\n```\n// Writes a string to the buffer at current cursor position\n// Advances the cursor while writing, inverts the pixels if true\n// Advances the cursor to the next page, wiring ' ' to the remainder of the current page\nvoid st7565_write_ln(const char *data, bool invert);\n```\n\n----------------------------------------\n\nTITLE: Flashing the Helix Side Firmware\nDESCRIPTION: This command flashes the right-hand side (Helix) firmware to the Navpad using `avrdude` and split keyboard functionality. It requires the QMK build environment and `avrdude` to be correctly configured.  The `:avrdude-split-right` target specifies the flashing method for the right side of a split keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/yushakobo/navpad/10_helix_r/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake yushakobo/navpad/10_helix_r:default:avrdude-split-right\n```\n\n----------------------------------------\n\nTITLE: Writing Firmware to Virtual Block Device on Linux\nDESCRIPTION: This command uses `dd` to write the firmware image directly to the virtual block device representing the keyboard's flash memory. It's crucial to identify the correct device path to avoid data loss. It skips the first 4 sectors of the block device, as the firmware starts at the 5th sector.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/hhkb/yang/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndd if=FLASH.bin of=<path of virtual block device> seek=4\n```\n\n----------------------------------------\n\nTITLE: Measuring matrix_scan() Execution Time - Makefile\nDESCRIPTION: This snippet shows how to compile the firmware with the `matrix_debug_scan` option to measure the execution time of the `matrix_scan()` function. This option allows for profiling the matrix scanning process and identifying performance bottlenecks. It compiles for a handwired symmetric70_proto keyboard on a Pro Micro.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/symmetric70_proto/matrix_debug/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake MTEST=matrix_debug_scan[,<other options>..] handwired/symmetric70_proto/promicro/normal:default:flash\n```\n\n----------------------------------------\n\nTITLE: Install ARM Toolchain using XPM\nDESCRIPTION: This command uses the xPack Manager (XPM) to globally install the ARM toolchain, which is required for compiling code for ARM microcontrollers. It downloads and installs the `arm-none-eabi-gcc` toolchain, a suite of tools necessary for building ARM-based applications. The `--global` flag ensures the toolchain is accessible system-wide.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/arm_debugging.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nxpm install --global @xpack-dev-tools/arm-none-eabi-gcc\n```\n\n----------------------------------------\n\nTITLE: Finding Virtual Block Device Path\nDESCRIPTION: This snippet shows how to identify the virtual block device path after the keyboard boots into flash mode on Linux. It uses the `sudo dmesg` command to search for the device name (e.g., `sdx`) in the system logs.  The full path will be `/dev/sdx`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/hhkb/yang/memo.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo dmesg\n```\n\n----------------------------------------\n\nTITLE: Flashing IKKI68 Firmware using QMK\nDESCRIPTION: This command builds and flashes the default firmware for the IKKI68 keyboard. It requires a properly set up QMK build environment and a connected keyboard in bootloader mode. The command builds the firmware and then attempts to flash it onto the keyboard. Ensure you have the necessary permissions to access the keyboard's USB device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wuque/ikki68/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake wuque/ikki68:default:flash\n```\n\n----------------------------------------\n\nTITLE: Diff Code Block Example\nDESCRIPTION: This 'diff' code snippet illustrates changes being made to a configuration file, specifically un-defining some RGBLIGHT effects and defining the RGBLIGHT_LED_COUNT. It demonstrates including diffs to show proposed code changes in the QMK documentation. No dependencies are required.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/__capabilities.md#_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n```diff\n #undef RGBLIGHT_LED_COUNT\n+#undef RGBLIGHT_EFFECT_STATIC_GRADIENT\n+#undef RGBLIGHT_EFFECT_RAINBOW_SWIRL\n #define RGBLIGHT_LED_COUNT 12\n #define RGBLIGHT_HUE_STEP 8\n #define RGBLIGHT_SAT_STEP 8\n```\n```\n\n----------------------------------------\n\nTITLE: Building Keychron Q5 Firmware\nDESCRIPTION: These commands are used to build the QMK firmware for different layouts of the Keychron Q5 keyboard, including ANSI and ISO layouts, as well as configurations with and without an encoder.  The `make` command invokes the QMK build system to compile the firmware. The first part of the command specifies the keyboard, layout, and keymap to use.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keychron/q5/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake keychron/q5/ansi:default\n```\n\nLANGUAGE: shell\nCODE:\n```\nmake keychron/q5/ansi_encoder:default\n```\n\nLANGUAGE: shell\nCODE:\n```\nmake keychron/q5/iso:default\n```\n\nLANGUAGE: shell\nCODE:\n```\nmake keychron/q5/iso_encoder:default\n```\n\n----------------------------------------\n\nTITLE: Building Console Keyboard Firmware\nDESCRIPTION: These commands are used to build the firmware for the Console Keyboard with different key configurations (18, 20, 27, and 30 keys). The `make` command compiles the firmware using the default keymap. The commands require a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/consolekeyboard/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/consolekeyboard/18key:default\nmake handwired/consolekeyboard/20key:default\nmake handwired/consolekeyboard/27key:default\nmake handwired/consolekeyboard/30key:default\n```\n\n----------------------------------------\n\nTITLE: Flashing QMK Firmware to Unicomp Keyboard\nDESCRIPTION: This command flashes the built QMK firmware to the Unicomp keyboard. It requires a configured QMK build environment and a method for putting the keyboard into bootloader mode (e.g., holding ESC while plugging in, or using the RST&PROG button).\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/unicomp/classic_ultracl_pre_2013/overnumpad_1xb/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake unicomp/classic_ultracl_pre_2013/overnumpad_1xb:default:flash\n```\n\n----------------------------------------\n\nTITLE: DFU-Util Command Line Flashing for AT32 (Shell)\nDESCRIPTION: This command demonstrates how to flash a firmware .bin file to an AT32 device using the `dfu-util` command-line tool. The command specifies the device (2E3C:DF11), the address (0x8000000), and the filename to flash. This command is used when the AT32 is in DFU mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/flashing.md#_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\ndfu-util -a 0 -d 2E3C:DF11 -s 0x8000000:leave -D <filename>\n```\n\n----------------------------------------\n\nTITLE: DFU-Util Command Line Flashing for STM32duino (Shell)\nDESCRIPTION: This command demonstrates how to flash a firmware .bin file to an STM32F103 device with the STM32duino bootloader using `dfu-util`. The `-a 2` argument specifies the interface number required for this bootloader, and the VID/PID (1EAF:0003) are specific to the STM32duino.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/flashing.md#_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\ndfu-util -a 2 -d 1EAF:0003 -D <filename>\n```\n\n----------------------------------------\n\nTITLE: Configuring Command Feature in config.h (C)\nDESCRIPTION: This code snippet demonstrates how to configure the Command feature to use a different key combination in the `config.h` file. Instead of Left Shift + Right Shift, this example uses Left Ctrl + Right Ctrl. This prevents conflicts with `BOTH_SHIFTS_TURNS_ON_CAPS_WORD` when both features are enabled.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/caps_word.md#_snippet_2\n\nLANGUAGE: c\nCODE:\n```\n// Activate Command with Left Ctrl + Right Ctrl.\n#define IS_COMMAND() (get_mods() == MOD_MASK_CTRL)\n```\n\n----------------------------------------\n\nTITLE: Modifier Key Shortcuts with SEND_STRING() in C\nDESCRIPTION: This example demonstrates how to use modifier key shortcuts like `SS_LCTL()`, `SS_LSFT()`, and `SS_LALT()` within `SEND_STRING()` to send combined key presses such as Ctrl+a. It shows how to send a modifier key press, followed by a string, and then release the modifier key.  It requires QMK firmware environment and correct keymap configuration.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/feature_macros.md#_snippet_5\n\nLANGUAGE: C\nCODE:\n```\nSEND_STRING(SS_LCTL(\"a\"));\n```\n\n----------------------------------------\n\nTITLE: Sending Commands/Data to OLED (C)\nDESCRIPTION: These functions send commands and data to the OLED display. `oled_send_cmd` and `oled_send_data` are used for regular RAM data, while `oled_send_cmd_P` is used for PROGMEM data (for AVR architectures). They take a pointer to the data and the size of the data as input.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/oled_driver.md#_snippet_13\n\nLANGUAGE: c\nCODE:\n```\n// Send commands/data to screen\nbool oled_send_cmd(const uint8_t *data, uint16_t size);\nbool oled_send_cmd_P(const uint8_t *data, uint16_t size);\nbool oled_send_data(const uint8_t *data, uint16_t size);\n```\n\n----------------------------------------\n\nTITLE: Advanced User RGB Matrix Indicators in C\nDESCRIPTION: This code snippet defines an advanced user-defined RGB matrix indicator function. It utilizes the `RGB_MATRIX_INDICATOR_SET_COLOR` macro to set the color of a specific LED. This function is intended for heavily customized displays where rendering every LED per cycle is computationally expensive.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/rgb_matrix.md#_snippet_5\n\nLANGUAGE: c\nCODE:\n```\nbool rgb_matrix_indicators_advanced_user(uint8_t led_min, uint8_t led_max) {\n    RGB_MATRIX_INDICATOR_SET_COLOR(index, red, green, blue);\n    return false;\n}\n```\n\n----------------------------------------\n\nTITLE: Flash Bootloader using ST-Link\nDESCRIPTION: This command flashes the bootloader binary to the STM32 Bluepill using the ST-Link programmer.  It resets the device, writes the binary file to the specified memory address (0x08000000), and verifies the write.  `<path-to-bootloader>` should be replaced with the actual path to the bootloader `.bin` file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/isp_flashing_guide.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nst-flash --reset --format binary write <path-to-bootloader> 0x08000000\n```\n\n----------------------------------------\n\nTITLE: Implementing early_hardware_init_post function in C\nDESCRIPTION: This C code snippet demonstrates how to implement the `early_hardware_init_post` function in a keyboard's source file. This function is executed after RAM has been cleared, and clocks and GPIOs are configured. The intended use is for register writes, variable initialization, and GPIO toggling.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/platformdev_chibios_earlyinit.md#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nvoid early_hardware_init_post(void) {\n    // toggle GPIO pins and write to variables\n}\n```\n\n----------------------------------------\n\nTITLE: Planck .hex File Size Example\nDESCRIPTION: This code block displays the output of a `make` command, indicating the size of the generated .hex file for a Planck keyboard.  It's used as an example to illustrate acceptable .hex file sizes and prevent issues with flashing the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/faq_misc.md#_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\nLinking: .build/planck_rev4_cbbrowne.elf                                                            [OK]\nCreating load file for Flash: .build/planck_rev4_cbbrowne.hex                                       [OK]\n\nSize after:\n   text    data     bss     dec     hex filename\n      0   22396       0   22396    577c planck_rev4_cbbrowne.hex\n```\n\n----------------------------------------\n\nTITLE: Compiling Dactyl ManuForm Mini Firmware with QMK\nDESCRIPTION: This command compiles the firmware for the handwired Dactyl ManuForm Mini keyboard with a 5x6_2_5 layout and the default configuration using the QMK build environment.  It assumes the QMK build environment has been properly set up according to the QMK documentation.  The resulting firmware can then be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/dactyl_manuform/5x6_2_5/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake handwired/dactyl_manuform/5x6_2_5:default\n```\n\n----------------------------------------\n\nTITLE: Building 8-Pack Macropad Firmware - make command\nDESCRIPTION: This snippet demonstrates how to build the default firmware for the 8-Pack Macropad using the `make` command within the QMK Firmware environment.  It assumes that the QMK build environment has already been set up.  The command compiles the firmware and generates a .hex or .bin file that can be flashed onto the macropad.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/8pack/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake 8pack:default\n```\n\n----------------------------------------\n\nTITLE: Defining keyboard layout: LAYOUT_60_iso_wkl_split_bs_rshift\nDESCRIPTION: This code snippet defines a keyboard layout named `LAYOUT_60_iso_wkl_split_bs_rshift`. It indicates a 60% keyboard with ISO layout, WKL design, split backspace, and standard right shift.  It's intended to be used within a QMK firmware configuration to specify the key arrangement.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/layouts/community/60_iso_wkl_split_bs_rshift/readme.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nLAYOUT_60_iso_wkl_split_bs_rshift\n```\n\n----------------------------------------\n\nTITLE: Defining QMK Escape Codes in config.h (C)\nDESCRIPTION: This code snippet defines the pins used for the QMK escape sequence, allowing the keyboard to enter bootloader mode. It specifies the column and row pins to trigger the escape sequence. Optionally, LED and speaker pins can also be defined.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/flashing.md#_snippet_12\n\nLANGUAGE: c\nCODE:\n```\n#define QMK_ESC_OUTPUT F1  // COL pin if COL2ROW\n#define QMK_ESC_INPUT  D5  // ROW pin if COL2ROW\n// Optional:\n//#define QMK_LED E6\n//#define QMK_SPEAKER C6\n```\n\n----------------------------------------\n\nTITLE: Including IS31FL3236 Driver in rules.mk\nDESCRIPTION: This snippet demonstrates how to include the IS31FL3236 driver source files in your `rules.mk` file. It specifies the paths for both the single-color and RGB versions of the driver, and also sets `I2C_DRIVER_REQUIRED` to `yes`, indicating that an I2C driver is necessary.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/is31fl3236.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nCOMMON_VPATH += $(DRIVER_PATH)/led/issi\nSRC += is31fl3236-mono.c # For single-color\nSRC += is31fl3236.c # For RGB\nI2C_DRIVER_REQUIRED = yes\n```\n\n----------------------------------------\n\nTITLE: Building Pan Keyboard Firmware (ATmega32A)\nDESCRIPTION: This command builds the default firmware for the Pan keyboard with the ATmega32A microcontroller using the QMK build environment.  It assumes the build environment has been set up correctly. No specific input files are required as it utilizes the default configuration.  The output is the compiled firmware ready to be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/rgbkb/pan/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake rgbkb/pan/rev1/32a:default\n```\n\n----------------------------------------\n\nTITLE: Enabling SPI in halconf.h - ChibiOS/ARM\nDESCRIPTION: This snippet demonstrates how to enable SPI in the `halconf.h` file for ChibiOS/ARM. It sets `HAL_USE_SPI` and `SPI_USE_WAIT` to `TRUE` and `SPI_SELECT_MODE` to `SPI_SELECT_MODE_PAD`, activating the SPI functionality and enabling the wait mode. These configurations are crucial for using the SPI peripheral.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/spi.md#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n#pragma once\n\n#define HAL_USE_SPI TRUE // [!code focus]\n#define SPI_USE_WAIT TRUE // [!code focus]\n#define SPI_SELECT_MODE SPI_SELECT_MODE_PAD // [!code focus]\n\n#include_next <halconf.h>\n```\n\n----------------------------------------\n\nTITLE: RGB Backlight Configuration\nDESCRIPTION: These #define symbols are used within the keymap's config.h file to enable or disable specific RGB backlight LEDs based on the keyboard layout. They allow customization of the backlight behavior for features such as split backspace, split left shift, split right shift, 7U spacebar, ISO Enter, and HHKB blockers.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wilba_tech/zeal60/readme.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nRGB_BACKLIGHT_USE_SPLIT_BACKSPACE\n```\n\nLANGUAGE: C\nCODE:\n```\nRGB_BACKLIGHT_USE_SPLIT_LEFT_SHIFT\n```\n\nLANGUAGE: C\nCODE:\n```\nRGB_BACKLIGHT_USE_SPLIT_RIGHT_SHIFT\n```\n\nLANGUAGE: C\nCODE:\n```\nRGB_BACKLIGHT_USE_7U_SPACEBAR\n```\n\nLANGUAGE: C\nCODE:\n```\nRGB_BACKLIGHT_USE_ISO_ENTER\n```\n\nLANGUAGE: C\nCODE:\n```\nRGB_BACKLIGHT_DISABLE_HHKB_BLOCKER_LEDS\n```\n\n----------------------------------------\n\nTITLE: Creating Surfaces in C\nDESCRIPTION: These C code snippets demonstrate how to create surfaces in memory using Quantum Painter.  Functions `qp_make_rgb565_surface` (16bpp) and `qp_make_mono1bpp_surface` (1bpp) allocate a surface in RAM. The `buffer` argument is a pointer to a pre-allocated memory region.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/quantum_painter.md#_snippet_37\n\nLANGUAGE: c\nCODE:\n```\n// 16bpp RGB565 surface:\npainter_device_t qp_make_rgb565_surface(uint16_t panel_width, uint16_t panel_height, void *buffer);\n// 1bpp monochrome surface:\npainter_device_t qp_make_mono1bpp_surface(uint16_t panel_width, uint16_t panel_height, void *buffer);\n```\n\n----------------------------------------\n\nTITLE: Flashing Fave 87 Firmware with QMK\nDESCRIPTION: This command builds and flashes the default firmware for the linworks/fave87 keyboard using the QMK build environment. It requires a properly configured QMK build environment and a connected keyboard in flashing mode.  The keyboard will need to be put into the correct mode prior to flashing, commonly a reset switch or key combination.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/linworks/fave87/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake linworks/fave87:default:flash\n```\n\n----------------------------------------\n\nTITLE: Defining Keyboard Layout: 60% ANSI WKL Split\nDESCRIPTION: This snippet defines a keyboard layout named `LAYOUT_60_ansi_wkl_split_bs_rshift`.  It is likely used within a QMK firmware configuration to specify the key arrangement for a 60% ANSI WKL keyboard with a split backspace and right shift.  The specific details of the layout (e.g., keycodes) would be defined elsewhere in the QMK project.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/layouts/community/60_ansi_wkl_split_bs_rshift/readme.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nLAYOUT_60_ansi_wkl_split_bs_rshift\n```\n\n----------------------------------------\n\nTITLE: Flashing Levinson Firmware with Elite-C - dfu\nDESCRIPTION: This command compiles and flashes the Levinson keyboard firmware rev3 to an Elite-C controller using dfu. It requires adding `BOOTLOADER = atmel-dfu` to the `rules.mk` file to ensure proper resetting of the board. Requires the user to manually place the Elite-C into DFU mode by holding the reset button.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keebio/levinson/readme.md#_snippet_2\n\nLANGUAGE: Makefile\nCODE:\n```\nmake keebio/levinson/rev3:default:dfu\n```\n\n----------------------------------------\n\nTITLE: Flashing Pre-compiled Firmware to Pro-Micro (Linux)\nDESCRIPTION: This command flashes a pre-compiled .hex firmware file to a Pro-Micro board on Linux using `avrdude`. It specifies the microcontroller type, programmer, flash memory operation, and serial port. Requires `avrdude` to be installed and the correct serial port to be identified.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/converter/xmk/readme.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\navrdude -p atmega32u4 -c avr109 -U flash:w:converter_xmk_default.hex:i -P /dev/ttyACM0\n```\n\n----------------------------------------\n\nTITLE: Implementing a custom pointing device driver\nDESCRIPTION: This snippet presents the function signatures required for implementing a custom pointing device driver. It includes initialization, report retrieval, CPI getting and setting functions. The user is responsible for implementing the logic within these functions to interface with their custom pointing device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/pointing_device.md#_snippet_16\n\nLANGUAGE: C\nCODE:\n```\nvoid           pointing_device_driver_init(void) {}\nreport_mouse_t pointing_device_driver_get_report(report_mouse_t mouse_report) { return mouse_report; }\nuint16_t       pointing_device_driver_get_cpi(void) { return 0; }\nvoid           pointing_device_driver_set_cpi(uint16_t cpi) {}\n```\n\n----------------------------------------\n\nTITLE: Enabling SPI1 in mcuconf.h (C)\nDESCRIPTION: This snippet shows how to enable SPI1 in the `mcuconf.h` file for ChibiOS on STM32. This step is required when using the SPI driver for WS2812 LEDs, and specifies which SPI peripheral will be used. The `STM32_SPI_USE_SPI1` macro is set to `TRUE` to enable SPI1.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/ws2812.md#_snippet_9\n\nLANGUAGE: C\nCODE:\n```\n#pragma once\n\n#include_next <mcuconf.h>\n\n#undef STM32_SPI_USE_SPI1 // [!code focus]\n#define STM32_SPI_USE_SPI1 TRUE // [!code focus]\n```\n\n----------------------------------------\n\nTITLE: Calculating LED Physical Position (C)\nDESCRIPTION: This C code calculates the physical position (x, y coordinates) of an LED on the keyboard. The formula is based on the number of columns and rows and the column and row position of the LED.  The default expected range of values for `{ x, y }` is the inclusive range `{ 0..224, 0..64 }`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/rgb_matrix.md#_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nx = 224 / (NUMBER_OF_COLS - 1) * COL_POSITION\ny =  64 / (NUMBER_OF_ROWS - 1) * ROW_POSITION\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware with Avrdude\nDESCRIPTION: This command flashes the compiled .hex firmware file onto the Arduino Pro Micro microcontroller using `avrdude`. The command specifies the microcontroller type, port, programmer, and the path to the .hex file.  The device name might need to be adjusted depending on the system.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/space_oddity/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\navrdude -p atmega32u4 -P /dev/ttyACM0 -c avr109 -U flash:w:handwired_space_oddity_default.hex\n```\n\n----------------------------------------\n\nTITLE: Setting OLED Scroll Area (C)\nDESCRIPTION: This function sets the specific rows of the OLED screen to scroll.  It takes the start and end line as input. Default values scroll the entire display. On a 128x32 screen, lines 4-7 are not used.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/oled_driver.md#_snippet_31\n\nLANGUAGE: c\nCODE:\n```\n// Set the specific 8 lines rows of the screen to scroll.\n// 0 is the default for start, and 7 for end, which is the entire\n// height of the screen.  For 128x32 screens, rows 4-7 are not used.\nvoid oled_scroll_set_area(uint8_t start_line, uint8_t end_line);\n```\n\n----------------------------------------\n\nTITLE: Building Scotto36 Firmware with Make\nDESCRIPTION: This command builds the default firmware for the Scotto36 keyboard using the QMK build environment. It assumes the user has already set up their build environment according to the QMK documentation. The output is a .hex file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/scottokeebs/scotto36/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/scottokeebs/scotto36:default\n```\n\n----------------------------------------\n\nTITLE: Adding TODO comments for missing tests - Python\nDESCRIPTION: This code snippet demonstrates how to add TODO comments to your code to indicate where tests are needed. It follows a specific format that includes the 'unassigned' keyword, your GitHub username, and the type of test (unit or integration) that should be written.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/cli_development.md#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n# TODO(unassigned/<your_github_username>): Write <unit|integration> tests\n```\n\n----------------------------------------\n\nTITLE: Flashing the Sleepy Keeb Firmware\nDESCRIPTION: This command flashes the compiled default firmware to the Sleepy Keeb keyboard. It requires a configured QMK build environment and a connected keyboard in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/sleepy_craft_studios/sleepy_keeb/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake sleepy_keeb:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Neopad Firmware (QMK)\nDESCRIPTION: This command builds the firmware for the Neopad macropad, specifically the 'rev1' revision with the 'default' keymap.  It assumes the QMK build environment is already set up according to the QMK documentation. The command compiles the keymap and necessary firmware files into a .hex or .bin file ready for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/rookiebwoy/neopad/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake rookiebwoy/neopad/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Defining Keyboard Layout: 60% ANSI Split Backspace Right Shift\nDESCRIPTION: This code snippet defines a specific keyboard layout, namely `LAYOUT_60_ansi_split_bs_rshift`.  It likely represents the arrangement of keys on a 60% ANSI keyboard with a split backspace and a right shift key configuration. This layout definition would be used within a keyboard firmware to map keycodes to physical keys.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/layouts/default/60_ansi_split_bs_rshift/readme.md#_snippet_0\n\nLANGUAGE: undefined\nCODE:\n```\nLAYOUT_60_ansi_split_bs_rshift\n```\n\n----------------------------------------\n\nTITLE: Building Nano Keyboard Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the 40percentclub/nano keyboard using the QMK build environment. It assumes that the QMK build environment has been correctly set up according to the QMK documentation. The resulting firmware can then be flashed to the Pro Micro controller of the Nano keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/40percentclub/nano/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake 40percentclub/nano:default\n```\n\n----------------------------------------\n\nTITLE: Enabling ST7565 driver in QMK using Makefile\nDESCRIPTION: This snippet shows how to enable the ST7565 LCD driver in your QMK keyboard project. By adding `ST7565_ENABLE = yes` to your `rules.mk` file, you instruct the QMK build system to include the necessary driver code during compilation. This allows you to then use the ST7565-related functions in your `keymap.c`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/st7565.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nST7565_ENABLE = yes\n```\n\n----------------------------------------\n\nTITLE: Building Polyandry Firmware with QMK Compile and Teensy 2.0 Controller\nDESCRIPTION: This command compiles the default firmware for the Polyandry keyboard using the `qmk compile` command, targeting a PJRC Teensy 2.0 controller.  It provides an alternative method of compilation specifying a different controller type. This presumes a properly set up QMK Firmware build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/40percentclub/polyandry/readme.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nqmk compile -kb 40percentclub/polyandry/teensy2 -km default\n```\n\n----------------------------------------\n\nTITLE: Overriding Default USART Driver for SIO (config.h)\nDESCRIPTION: This code snippet overrides the default USART driver for the `SIO` subsystem in the `config.h` file. This is necessary when using a USART peripheral different from the default `SIOD1` driver. Replace `SIOD3` with the corresponding driver name for the selected USART peripheral, for example, `SIOD2`, `SIOD3`, etc.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/serial.md#_snippet_15\n\nLANGUAGE: C\nCODE:\n```\n#define SERIAL_USART_DRIVER SIOD3\n```\n\n----------------------------------------\n\nTITLE: Interactive Program GPL Notice\nDESCRIPTION: This snippet shows how to display a short notice when an interactive program starts, informing the user about the license and warranty information. The notice includes a copyright statement, a warranty disclaimer, and instructions on how to view the full license details.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/lib/usbhost/USB_Host_Shield_2.0/gpl2.txt#_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\nGnomovision version 69, Copyright (C) year name of author\nGnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\nThis is free software, and you are welcome to redistribute it\nunder certain conditions; type `show c' for details.\n```\n\n----------------------------------------\n\nTITLE: Configure Wear-Leveling EFL Driver\nDESCRIPTION: This snippet configures the wear-leveling Embedded Flash (EFL) driver. It allows overriding default settings like the first sector, flash size, number of sectors to omit, logical size, backing size and write size.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/eeprom.md#_snippet_4\n\nLANGUAGE: c\nCODE:\n```\n#define WEAR_LEVELING_EFL_FIRST_SECTOR _unset_\n#define WEAR_LEVELING_EFL_FLASH_SIZE _unset_\n#define WEAR_LEVELING_EFL_OMIT_LAST_SECTOR_COUNT 0\n#define WEAR_LEVELING_LOGICAL_SIZE (backing_size/2)\n#define WEAR_LEVELING_BACKING_SIZE 2048\n#define BACKING_STORE_WRITE_SIZE _automatic_\n```\n\n----------------------------------------\n\nTITLE: Flashing EEPROM for right half - Shell\nDESCRIPTION: This command flashes the EEPROM of the right half of the keyboard with the `eeprom-righthand.eep` file, configuring it as the right-hand side when `EE_HANDS` is defined in `config.h`. Replace `$(COM_PORT)` with the correct COM port. Requires `avrdude` or equivalent.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/xealous/readme.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\navrdude -p atmega32u4 -P $(COM_PORT) -c avr109 -U eeprom:w:\"./quantum/split_common/eeprom-righthand.eep\"\n// or the equivalent in dfu-programmer\n```\n\n----------------------------------------\n\nTITLE: Creating a System-Wide Symlink for QMK Tab Completion\nDESCRIPTION: This command creates a symbolic link to the `qmk_tab_complete.sh` script in the `/etc/profile.d` directory, making tab completion available to all users on the system.  The source path must be adjusted if `qmk_firmware` is located elsewhere. Requires appropriate permissions (e.g., root).\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/cli_tab_complete.md#_snippet_2\n\nLANGUAGE: Shell Script\nCODE:\n```\nln -s ~/qmk_firmware/util/qmk_tab_complete.sh /etc/profile.d/qmk_tab_complete.sh\n```\n\n----------------------------------------\n\nTITLE: Compiling QMK Firmware for GH60 Satan with HHKB 7u Layout (bash)\nDESCRIPTION: This command compiles the QMK firmware for the gh60/satan keyboard with the hhkb_7u keymap. It uses the qmk compile command, specifying the keyboard and keymap as arguments. No dependencies are explicitly listed, but a working QMK environment is required.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/gh60/satan/keymaps/hhkb_7u/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ qmk compile -kb gh60/satan -km hhkb_7u\n```\n\n----------------------------------------\n\nTITLE: Building RART4X4 Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the RART4X4 macropad using the QMK build environment. Ensure the QMK build environment is properly set up before executing this command. No specific input or output files are explicitly mentioned, but the command compiles the firmware, ready to be flashed onto the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/rart/rart4x4/readme.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmake rart/rart4x4:default\n```\n\n----------------------------------------\n\nTITLE: Fetching from Upstream\nDESCRIPTION: This command fetches updates from the `upstream` remote repository, which is configured to point to QMK's repository.  The `--recurse-submodules` flag ensures that submodules are also updated. This step retrieves the latest changes from the upstream repository without merging them into the local branch.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/newbs_git_resynchronize_a_branch.md#_snippet_4\n\nLANGUAGE: git\nCODE:\n```\ngit fetch --recurse-submodules upstream\n```\n\n----------------------------------------\n\nTITLE: Building Adelais rev.4 Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Adelais rev.4 keyboard with standard LEDs using the QMK build environment. It assumes that the QMK build environment has been properly set up. The command utilizes the `make` utility to compile the firmware based on the specified keyboard, layout, and revision.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechlovin/adelais/standard_led/arm/rev4/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake mechlovin/adelais/standard_led/rev4:default\n```\n\n----------------------------------------\n\nTITLE: Copying Firmware to TADA68 (Mac/Linux)\nDESCRIPTION: This command copies the generated firmware file (`FLASH.bin`) to the mounted TADA68 volume on Mac or Linux.  `<path to your qmk_firmware folder>` should be replaced with the correct path to the QMK firmware directory. This assumes that the user renames the built firmware from `tada68_default.bin` to `FLASH.bin`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/tada68/readme.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncp -r <path to your qmk_firmware folder>/FLASH.bin .\n```\n\n----------------------------------------\n\nTITLE: Defining LED mapping array for single-color LEDs in .c file\nDESCRIPTION: This code snippet shows how to define the LED mapping array `g_snled27351_leds` in your `<keyboardname>.c` file for single-color LEDs.  Each entry in the array maps an LED index to the corresponding driver index and the PWM register address for the LED's brightness.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/snled27351.md#_snippet_2\n\nLANGUAGE: C\nCODE:\n```\nconst snled27351_led_t PROGMEM g_snled27351_leds[SNLED27351_LED_COUNT] = {\n/* Driver\n *   |  V */\n    {0, CB1_CA1},\n    // etc...\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Debounce Time in QMK Firmware - C\nDESCRIPTION: This code snippet shows how to set the debounce time in QMK Firmware using the `DEBOUNCE` macro in the `config.h` file. The debounce time is the duration for which the system waits for the switch to stabilize after a state change. Setting `DEBOUNCE` to `0` disables debouncing. The default value is 5 milliseconds.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/feature_debounce_type.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#define DEBOUNCE 10\n```\n\n----------------------------------------\n\nTITLE: Flashing Cypher Rev6 Firmware with QMK\nDESCRIPTION: This command flashes the compiled firmware onto the Cypher Rev6 keyboard using the QMK build environment. It requires that the firmware has already been built and that the keyboard is connected to the computer in a flashable state (usually bootloader mode).  The command assumes a properly configured QMK build environment and the necessary flashing tools.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cablecardesigns/cypher/rev6/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake cablecardesigns/cypher/rev6:default:flash\n```\n\n----------------------------------------\n\nTITLE: Defining Key Handedness in keyboard.json\nDESCRIPTION: This snippet shows an example of how to define handedness in the keyboard.json file. By adding a \"hand\" field with a value of \"L\", \"R\", or \"*\" to a key's layout definition, you can specify its handedness for chordal hold calculations.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/tap_hold.md#_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\"matrix\": [5, 6], \"x\": 0, \"y\": 5.5, \"w\": 1.25, \"hand\", \"*\"}\n```\n\n----------------------------------------\n\nTITLE: Enabling Momentary Acceleration in QMK Constant Speed Mode (C)\nDESCRIPTION: This code snippet shows how to enable momentary mode in QMK firmware's constant speed mouse key mode by defining `MK_MOMENTARY_ACCEL` in the `config.h` file. When enabled, the chosen cursor speed is only active while the corresponding key is held down. It requires `MK_3_SPEED` to be defined first.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/mouse_keys.md#_snippet_2\n\nLANGUAGE: c\nCODE:\n```\n#define MK_MOMENTARY_ACCEL\n```\n\n----------------------------------------\n\nTITLE: LED Mapping in keyboardname.c (RGB)\nDESCRIPTION: Maps LED indices to specific driver and pin configurations for RGB LEDs. The anode of each color channel is connected to the `SW1` pin and the cathodes are connected to the `CS` pins of the IS31FL3741 driver. This example maps the first LED on driver 0.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/is31fl3741.md#_snippet_4\n\nLANGUAGE: c\nCODE:\n```\nconst is31fl3741_led_t PROGMEM g_is31fl3741_leds[IS31FL3741_LED_COUNT] = {\n/* Driver\n *   |  R         G         B */\n    {0, SW1_CS1,  SW1_CS2,  SW1_CS3},\n    // etc...\n};\n```\n\n----------------------------------------\n\nTITLE: Combining LED Mapping and Clipping Range (C)\nDESCRIPTION: This code snippet demonstrates how to combine LED mapping with a clipping range in QMK Firmware. This requires definition of `RGBLIGHT_LED_COUNT` and `RGBLIGHT_LED_MAP` in the `config.h`, and calling `rgblight_set_clipping_range`. The example sets the clipping range and reverse the LEDs order\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/rgblight.md#_snippet_12\n\nLANGUAGE: c\nCODE:\n```\n// config.h\n#define RGBLIGHT_LED_COUNT 8\n#define RGBLIGHT_LED_MAP { 7, 6, 5, 4, 3, 2, 1, 0 }\n\n// some source\nrgblight_set_clipping_range(3, 4);\n```\n\n----------------------------------------\n\nTITLE: Building and Flashing Acheron Apollo87H Firmware - Makefile\nDESCRIPTION: This command builds and flashes the default layout for the Acheron Apollo87H keyboard firmware using the QMK build environment. The `<revision>` parameter specifies the PCB revision (Gamma or Delta). It requires the QMK build environment and necessary flashing tools (like dfu-util or QMK Toolbox) to be set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/acheron/apollo/87h/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake acheron/apollo/87h/<revision>:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Iron 165R2 Firmware - Makefile\nDESCRIPTION: These commands compile and flash the QMK firmware for the Iron 165R2 keyboard with the default keymap for either the STM32F072 or STM32F411 microcontroller. This assumes the PCB is already in DFU mode. The `make` command invokes the QMK build system to generate the firmware binary and flash it to the microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/smithrune/iron165r2/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake smithrune/iron165r2/f072:default:flash\n```\n\nLANGUAGE: Makefile\nCODE:\n```\nmake smithrune/iron165r2/f411:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Noxary 268.2 RGB Firmware (QMK)\nDESCRIPTION: This snippet demonstrates how to build the default firmware for the Noxary 268.2 RGB keyboard using the QMK build environment. It assumes that the QMK build environment has already been set up correctly. This command will compile the firmware and generate a .hex file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/noxary/268_2_rgb/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake noxary/268_2_RGB:default\n```\n\n----------------------------------------\n\nTITLE: Fetching and updating ChibiOS-Contrib\nDESCRIPTION: Fetches all updates, tags, and pruned branches from all remotes, checks out the specified branch, pulls changes using fast-forward only, and then pushes the branch to the origin remote. `chibios-20.3.x` should be replaced with the desired branch name.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/chibios_upgrade_instructions.md#_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\ngit fetch --all --tags --prune\n```\n\nLANGUAGE: Shell\nCODE:\n```\ngit checkout chibios-20.3.x\n```\n\nLANGUAGE: Shell\nCODE:\n```\ngit pull --ff-only\n```\n\nLANGUAGE: Shell\nCODE:\n```\ngit push origin chibios-20.3.x\n```\n\n----------------------------------------\n\nTITLE: Encoder Hand Swap Configuration in QMK\nDESCRIPTION: This code defines the `encoder_hand_swap_config` array, which maps the original encoder indexes to the new encoder indexes when the swap-hands action is active. It is conditionally compiled based on `SWAP_HANDS_ENABLE` and `ENCODER_MAP_ENABLE` being defined. The `NUM_ENCODERS` macro defines the size of the array.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/swap_hands.md#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n#if defined(SWAP_HANDS_ENABLE) && defined(ENCODER_MAP_ENABLE)\nconst uint8_t PROGMEM encoder_hand_swap_config[NUM_ENCODERS] = { 1, 0 };\n#endif\n```\n\n----------------------------------------\n\nTITLE: Building and Flashing Concertina Firmware via CLI\nDESCRIPTION: This command builds and flashes the firmware for the Concertina 64-key keyboard with the default keymap. It requires a connected Concertina keyboard to be in flashing mode. It combines the compilation and flashing steps into a single command, simplifying the firmware update process. Ensure the QMK build environment is properly configured.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/concertina/64key/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake handwired/concertina/64key:default:flash\n```\n\n----------------------------------------\n\nTITLE: Setting UF2 Bootloader in rules.mk (F103)\nDESCRIPTION: This snippet demonstrates how to set the bootloader to `uf2boot` in the `rules.mk` file. This configuration ensures that the QMK build process includes the necessary settings for the UF2 bootloader to function correctly on F103-based keyboards. This setting is crucial for enabling the drag-and-drop flashing functionality.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/flashing.md#_snippet_20\n\nLANGUAGE: make\nCODE:\n```\n# Bootloader selection\nBOOTLOADER = uf2boot\n```\n\n----------------------------------------\n\nTITLE: Flashing Avalanche Firmware with Make\nDESCRIPTION: These commands use the `make` command to flash the QMK firmware onto different versions of the Avalanche keyboard PCB. Each command specifies the keyboard layout (avalanche/v1, avalanche/v2, avalanche/v3), the keymap (default), and the flash target. Requires a configured QMK build environment and a connected keyboard in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/avalanche/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake avalanche/v1:default:flash  # for v1 PCBs\n```\n\nLANGUAGE: shell\nCODE:\n```\nmake avalanche/v2:default:flash  # for v2 PCBs\n```\n\nLANGUAGE: shell\nCODE:\n```\nmake avalanche/v3:default:flash  # for v3 PCBs\n```\n\n----------------------------------------\n\nTITLE: Probe ST-Link Connection\nDESCRIPTION: This command checks if the ST-Link programmer can communicate with the STM32 Bluepill. It provides information about the connected device, including its version, serial number, flash size, SRAM size, and chip ID. A successful probe is indicated by a chip ID of `0x0410`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/isp_flashing_guide.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nst-info --probe\n```\n\n----------------------------------------\n\nTITLE: Building i75 Firmware with Teensy 2.0 - Make Command\nDESCRIPTION: This command builds the default firmware for the i75 keyboard using a PJRC Teensy 2.0 controller. The QMK build environment needs to be set up correctly before executing this command. This will generate a `.hex` or `.bin` file for flashing onto the Teensy 2.0 controller on the i75 keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/40percentclub/i75/readme.md#_snippet_2\n\nLANGUAGE: makefile\nCODE:\n```\nmake 40percentclub/i75/teensy2:default\n```\n\n----------------------------------------\n\nTITLE: LED Matrix Animations Configuration - JSON\nDESCRIPTION: This JSON snippet shows how to enable or disable specific LED matrix animations within the QMK firmware configuration.  It defines a dictionary where each key is an animation name and the value is a boolean indicating whether the animation is enabled.  Animations not explicitly listed default to disabled.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/reference_info_json.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"alphas_mods\": true,\n    \"breathing\": true,\n    \"cycle_left_right\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Retro Shift with Hold Time - C\nDESCRIPTION: Enables Retro Shift with a specific hold time defined in milliseconds. Holding a tap hold key longer than this time will not produce the tap on release, instead triggering the hold action, and effectively enabling modifiers to be held for combining with mouse clicks without generating taps on release.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/auto_shift.md#_snippet_10\n\nLANGUAGE: c\nCODE:\n```\n#define RETRO_SHIFT 500\n```\n\n----------------------------------------\n\nTITLE: Building Firmware with Make\nDESCRIPTION: This command shows how to build the firmware for a specific keyboard using the `make` command. Replace `gboards/k/gergoplex` with your keyboard's path and `default` with your desired keymap. The `:flash` suffix is optional, and used for flashing the firmware to the keyboard immediately after building.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/gboards/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake gboards/k/gergoplex:default:flash\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Keycodes in keyboard.h (Recommended)\nDESCRIPTION: This code snippet shows the recommended way to define custom keycodes for QMK Configurator compatibility. The custom keycode `enum` is defined in the keyboard's header file (`<keyboard>.h`) using the name `keyboard_keycodes`. The `enum` starts with `QK_KB_0` instead of `SAFE_RANGE`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/configurator_default_keymaps.md#_snippet_4\n\nLANGUAGE: c\nCODE:\n```\nenum keyboard_keycodes {\n    CUSTOM_1 = QK_KB_0,\n    CUSTOM_2,\n    CUSTOM_3,\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Keycodes in keymap.c (C)\nDESCRIPTION: This snippet demonstrates how to define custom keycodes in your `keymap.c` file using the `SAFE_RANGE` macro. This ensures that your custom keycodes are unique and do not conflict with existing keycodes.  The defined keycodes can then be used within your keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/custom_quantum_functions.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nenum my_keycodes {\n  FOO = SAFE_RANGE,\n  BAR\n};\n```\n\n----------------------------------------\n\nTITLE: Remapping LED Order in QMK Firmware (C)\nDESCRIPTION: This code demonstrates how to remap the logical order of LEDs in QMK Firmware. This is accomplished using the `RGBLIGHT_LED_MAP` macro in the `config.h` file. The example shows reversing the LED order for a 4-LED configuration, requires definition of `RGBLIGHT_LED_COUNT` and `RGBLIGHT_LED_MAP`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/rgblight.md#_snippet_10\n\nLANGUAGE: c\nCODE:\n```\n// config.h\n\n#define RGBLIGHT_LED_COUNT 4\n#define RGBLIGHT_LED_MAP { 3, 2, 1, 0 }\n```\n\n----------------------------------------\n\nTITLE: Advanced Keymap-Level LED Matrix Indicator Callback (C)\nDESCRIPTION: This keymap-level callback is called after animation rendering but before LED flushing.  It takes LED start and end indices and returns `true` to continue the keyboard-level callback.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/led_matrix.md#_snippet_42\n\nLANGUAGE: C\nCODE:\n```\nbool led_matrix_indicators_advanced_user(uint8_t led_min, uint8_t led_max)\n```\n\n----------------------------------------\n\nTITLE: Overriding OLED Initialization (C)\nDESCRIPTION: These weak functions (`oled_init_kb` and `oled_init_user`) can be overridden by the keyboard or user code to customize the OLED initialization process. They take an `oled_rotation_t` enum as input and return a new `oled_rotation_t` value, allowing to override the default rotation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/oled_driver.md#_snippet_12\n\nLANGUAGE: c\nCODE:\n```\n// Called at the start of oled_init, weak function overridable by the user\n// rotation - the value passed into oled_init\n// Return new oled_rotation_t if you want to override default rotation\noled_rotation_t oled_init_kb(oled_rotation_t rotation);\noled_rotation_t oled_init_user(oled_rotation_t rotation);\n```\n\n----------------------------------------\n\nTITLE: Encoder Map Key Delay and Resolution\nDESCRIPTION: These options can be used to configure encoder key delay and encoder resolution in `config.h`. Encoder key delay determines the delay before a keypress is registered, and resolution affects how many pulses per detent.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/planck/rev7/readme.md#_snippet_4\n\nLANGUAGE: C\nCODE:\n```\n#define ENCODER_MAP_KEY_DELAY 10\n#define ENCODER_RESOLUTION 4\n```\n\n----------------------------------------\n\nTITLE: Get Unicode Input Mode - C\nDESCRIPTION: This function retrieves the currently active Unicode input mode. It returns a `uint8_t` representing the mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/unicode.md#_snippet_9\n\nLANGUAGE: C\nCODE:\n```\nuint8_t get_unicode_input_mode(void)\n```\n\n----------------------------------------\n\nTITLE: Building QMK Firmware for IBM Model M SSK\nDESCRIPTION: This command builds the QMK firmware for the IBM Model M SSK keyboard using the specified configuration. It compiles the firmware for the Teensy++ 2.0 microcontroller with the 'default' keymap. This assumes the QMK build environment has been set up correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ibm/model_m_ssk/teensypp_ssk/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake ibm/model_m_ssk/teensypp_ssk:default\n```\n\n----------------------------------------\n\nTITLE: Building S65 Firmware\nDESCRIPTION: This command builds the default firmware for the S65 keyboard. It uses the QMK make system to compile the firmware for the `bioi/s65` keyboard with the `default` keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/bioi/s65/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake bioi/s65:default\n```\n\n----------------------------------------\n\nTITLE: Building PRKL30 with Pro Micro using QMK\nDESCRIPTION: This command builds the QMK firmware for the PRKL30 keyboard using a Pro Micro controller. It assumes that the build environment has been set up correctly according to the QMK documentation. The `default` keymap is used in this example.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/prkl30/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake handwired/prkl30/promicro:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Iris Keyboard Firmware\nDESCRIPTION: This command flashes the compiled firmware onto the Iris keyboard. It uses the QMK build environment and requires the keyboard to be connected to the computer in a flashable state. The target \"default\" specifies the keymap to be used.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/iriskeyboards/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake iriskeyboards:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building ErgoDone Firmware with Make\nDESCRIPTION: This command builds the default keymap for the ErgoDone keyboard using the QMK build environment. It requires the QMK build environment to be set up correctly. The output is a .hex file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ktec/ergodone/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake ktec/ergodone:default\n```\n\n----------------------------------------\n\nTITLE: Building Bento Box Firmware\nDESCRIPTION: This command builds the default firmware for the Bento Box macropad using QMK.  It requires a properly configured QMK build environment. The resulting firmware can then be flashed to the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/synthandkeys/bento_box/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake synthandkeys/bento_box:default\n```\n\n----------------------------------------\n\nTITLE: Building m3n3van firmware with QMK\nDESCRIPTION: This command compiles the default firmware for the m3n3van keyboard using the QMK build environment. It assumes that the build environment has been properly set up according to the QMK documentation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/matthewdias/m3n3van/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake matthewdias/m3n3van:default\n```\n\n----------------------------------------\n\nTITLE: Flashing WT80-G Firmware\nDESCRIPTION: This command builds and flashes the default firmware to the wilba.tech WT80-G keyboard. It requires the QMK build environment to be set up and the necessary flashing tools to be installed and configured. The board needs to be in the correct flashing mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wilba_tech/wt80_g/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake wilba_tech/wt80_g:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building daskeyboard4 Firmware - QMK\nDESCRIPTION: This command builds the default QMK firmware for the handwired daskeyboard4. It assumes that the QMK build environment has already been set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/daskeyboard/daskeyboard4/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake handwired/daskeyboard/daskeyboard4:default\n```\n\n----------------------------------------\n\nTITLE: Flashing t75 Keyboard Firmware\nDESCRIPTION: This command flashes the compiled firmware onto the t75 keyboard. It requires a connected keyboard in bootloader mode and uses the appropriate flashing tools configured in the QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/vertex/t75/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake vertex/t75:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing QMK Firmware\nDESCRIPTION: This command flashes the compiled QMK firmware to the lostdotfish/rp2040_orbweaver keyboard with the default keymap. It requires the QMK build environment and a connected keyboard in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/lostdotfish/rp2040_orbweaver/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake lostdotfish/rp2040_orbweaver:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Suit80 ANSI Default Firmware - make command\nDESCRIPTION: This command builds the default firmware for the Suit80 ANSI keyboard. It requires a properly configured QMK build environment. The output is a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/owlab/suit80/ansi/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake owlab/suit80/ansi:default\n```\n\n----------------------------------------\n\nTITLE: Making model-v Keyboard Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the model-v keyboard.  It requires QMK build environment to be set up.  The output is a .hex file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/matthewdias/model_v/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake matthewdias/model_v:default\n```\n\n----------------------------------------\n\nTITLE: Flashing orba Firmware with QMK\nDESCRIPTION: This command builds and flashes the default firmware for the orba keyboard. It extends the build command by adding the ':flash' target, instructing QMK to automatically flash the compiled firmware to the connected keyboard. This requires a properly configured QMK environment and a connected orba keyboard in bootloader mode (or auto-flash enabled).\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/jaykeeb/orba/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake jaykeeb/orba:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing MTB60 Hotswap Firmware\nDESCRIPTION: This command builds and flashes the default firmware for the MTB60 Hotswap Edition keyboard. It requires the QMK build environment to be configured and the keyboard to be in a flashable state.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mtbkeys/mtb60/hotswap/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake mtbkeys/mtb60/hotswap:default:flash\n```\n\n----------------------------------------\n\nTITLE: Compiling Keyboard Firmware with Make\nDESCRIPTION: This command compiles the keyboard firmware for the IDOBAO ID63 keyboard with the default keymap using the `make` command. It provides an alternative method to the `qmk compile` command, specifying the keyboard and keymap as arguments.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/idobao/id63/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake idobao/id63:default\n```\n\n----------------------------------------\n\nTITLE: Building XD004 Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the XD004 keyboard using the QMK build environment. It compiles the keyboard layout and generates the firmware file for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/xiudi/xd004/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake xiudi/xd004/v1:default\n```\n\n----------------------------------------\n\nTITLE: Flashing keyboard firmware with Make\nDESCRIPTION: This command compiles and flashes the firmware for the handwired/dc/mc/001 keyboard with the default keymap. It depends on a correctly configured build environment and a connected keyboard in flashable mode. The flashing process writes the new firmware to the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/dc/mc/001/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/dc/mc/001:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building the Firmware\nDESCRIPTION: This snippet shows how to build the default keymap for the Neson Design Nico keyboard using the QMK build environment. It requires the QMK build environment to be properly set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/neson_design/nico/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake neson_design/nico:default\n```\n\n----------------------------------------\n\nTITLE: Building VN66 Firmware with QMK\nDESCRIPTION: This snippet demonstrates how to build the default firmware for the VN66 keyboard using the QMK build system. It utilizes the `make` command with the keyboard name and default keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/hnahkb/vn66/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake hnahkb/vn66:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Gentleman65 Firmware\nDESCRIPTION: This command flashes the compiled firmware onto the Gentleman65 keyboard. It requires the board to be in bootloader mode (activated by pressing the reset button twice). It extends the build command by adding the `:flash` target.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/jkeys_design/gentleman65_se_s/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake jkeys_design/gentleman65_se_s:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing LCK75 Firmware (QMK)\nDESCRIPTION: This command flashes the built firmware to the LCK75 keyboard. It assumes the QMK build environment is set up and the default firmware has been built.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/lyso1/lck75/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake lyso1/lck75:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Foxlab Key 65 Hotswap Firmware\nDESCRIPTION: This command builds the default firmware for the Foxlab Key 65 Hotswap keyboard within the QMK Firmware environment. It assumes that the build environment has already been set up. The resulting firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/foxlab/key65/hotswap/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake foxlab/key65/hotswap:default\n```\n\n----------------------------------------\n\nTITLE: Building CannonKeys Obliterated75 with QMK\nDESCRIPTION: This command builds the default keymap for the CannonKeys Obliterated75 keyboard using the QMK firmware. It assumes that the QMK build environment has already been set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cannonkeys/obliterated75/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake cannonkeys/obliterated75:default\n```\n\n----------------------------------------\n\nTITLE: Flashing rb18 Firmware with QMK\nDESCRIPTION: This command builds and flashes the default firmware for the rb18 numpad to the connected Elite-C controller using the QMK build system.  It combines the build and flash steps, automating the process of updating the keyboard's firmware. Requires the QMK build environment and a connected, flashable controller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ryanbaekr/rb18/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake ryanbaekr/rb18:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Millipad Firmware with QMK\nDESCRIPTION: This command flashes the compiled firmware onto the Millipad. The Millipad needs to be in bootloader mode for this command to work.  Requires a QMK build environment and a connected Millipad in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/millipad/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake millipad:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing EVO70 R2 Firmware (QMK)\nDESCRIPTION: This command flashes the compiled firmware onto the EVO70 R2 keyboard using the QMK build environment. This operation requires the keyboard to be in bootloader mode. The `custommk/evo70_r2:default:flash` argument specifies the keyboard, keymap and flash target.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/custommk/evo70_r2/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake custommk/evo70_r2:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Majbritt Firmware with QMK Make\nDESCRIPTION: This snippet shows how to build the default firmware for the Majbritt keyboard (rev1) using the QMK make command. It assumes that the QMK build environment has already been set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/sidderskb/majbritt/rev1/readme.md#_snippet_0\n\nLANGUAGE: QMK Makefile\nCODE:\n```\nmake sidderskb/majbritt/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Building theone Keyboard Firmware\nDESCRIPTION: This command is used to build the default firmware for the theone keyboard.  It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/theone/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake theone:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Uthol Firmware\nDESCRIPTION: This command flashes the compiled firmware to the Uthol keyboard (rev2) using the default keymap. Requires a connected keyboard in flash mode and a correctly configured QMK build environment with appropriate drivers installed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/uthol/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake handwired/uthol/rev2:default:flash\n```\n\n----------------------------------------\n\nTITLE: Compiling FnRow v1 Firmware (QMK)\nDESCRIPTION: This command compiles the firmware for the FnRow v1 keyboard with the default keymap. It utilizes the `make` command within the QMK Firmware build environment to generate the firmware binary.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/dinofizz/fnrow/v1/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake dinofizz/fnrow/v1:default\n```\n\n----------------------------------------\n\nTITLE: Building MW65_RGB Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the MW65_RGB keyboard using the QMK build environment. It assumes that the QMK build environment has already been set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mwstudio/mw65_rgb/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake mwstudio/mw65_rgb:default\n```\n\n----------------------------------------\n\nTITLE: Building Keeb68 Firmware (Makefile)\nDESCRIPTION: This command builds the default firmware for the Keeb68 keyboard using the QMK build environment. It specifies the keyboard layout as 'sandwich/keeb68' and the keymap as 'default'.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/sandwich/keeb68/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake sandwich/keeb68:default\n```\n\n----------------------------------------\n\nTITLE: Building Andean Condor Keyboard Firmware (QMK)\nDESCRIPTION: This command compiles the QMK firmware for the Andean Condor keyboard with the default keymap. It requires a properly set up QMK build environment. The output will be a .hex file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/andean_condor/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake andean_condor:default\n```\n\n----------------------------------------\n\nTITLE: Building BSTK100 Default Keymap\nDESCRIPTION: This command builds the default keymap for the BSTK100 keyboard. It assumes that the QMK build environment is already set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/bstk100/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake handwired/bstk100:default\n```\n\n----------------------------------------\n\nTITLE: Defining Combo Mod Term\nDESCRIPTION: Allows for extending COMBO_TERM for mod keys while mid-combo, giving more time to register combo keys involving modifier keys.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/config_options.md#_snippet_60\n\nLANGUAGE: C\nCODE:\n```\n#define COMBO_MOD_TERM 200\n```\n\n----------------------------------------\n\nTITLE: Building Ergodicity Firmware with QMK\nDESCRIPTION: This command builds the default keymap for the Ergodicity keyboard using the QMK firmware. It uses the dfu bootloader for flashing. Make sure you have set up the QMK build environment before executing this command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keebio/ergodicity/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake keebio/ergodicity:default:dfu\n```\n\n----------------------------------------\n\nTITLE: Building default firmware for RAMA WORKS U80-A - QMK\nDESCRIPTION: This command builds the default firmware for the RAMA WORKS U80-A keyboard using the QMK build environment. It requires the QMK build environment to be set up correctly and uses the `make` command with the keyboard and keymap specified as arguments.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wilba_tech/rama_works_u80_a/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake wilba_tech/rama_works_u80_a:default\n```\n\n----------------------------------------\n\nTITLE: Building B87 Firmware with QMK\nDESCRIPTION: This command compiles the default keymap for the B87 keyboard using the QMK build environment.  It requires a properly configured QMK build environment. The output is a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/winkeyless/b87/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake winkeyless/b87:default\n```\n\n----------------------------------------\n\nTITLE: Flashing think65v3 with QMK\nDESCRIPTION: This command flashes the compiled firmware onto the Gray Studio think65v3 keyboard using the QMK Firmware. It requires the build step to be completed first.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/gray_studio/think65v3/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake gray_studio/think65v3:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Gust Rev1 Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Gust Rev1 macro board using the QMK build environment. It assumes that the QMK build environment has already been set up according to the QMK documentation. The output will be a .hex or .bin file that can be flashed to the Gust board.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/afternoonlabs/gust/rev1/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake afternoonlabs/gust/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Defining PIO Peripheral for Serial Communication (config.h)\nDESCRIPTION: This code snippet shows how to optionally force the usage of a specific PIO peripheral when using the `PIO` driver for serial communication on RP2040 MCUs. By default the Serial implementation uses the PIO0 peripheral, using this allows you to force PIO1. Add this define to your `config.h`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/serial.md#_snippet_16\n\nLANGUAGE: C\nCODE:\n```\n#define SERIAL_PIO_USE_PIO1 // Force the usage of PIO1 peripheral, by default the Serial implementation uses the PIO0 peripheral\n```\n\n----------------------------------------\n\nTITLE: Setting PWM Frequency in config.h (C)\nDESCRIPTION: This snippet demonstrates how to define the PWM frequency for the LEDs in your `config.h` file. It shows how to set the `IS31FL3746A_PWM_FREQUENCY` macro to a specific frequency, such as `IS31FL3746A_PWM_FREQUENCY_29K_HZ`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/is31fl3746a.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n#define IS31FL3746A_PWM_FREQUENCY IS31FL3746A_PWM_FREQUENCY_29K_HZ\n```\n\n----------------------------------------\n\nTITLE: Building Keychron Q7 Firmware (QMK)\nDESCRIPTION: This command builds the QMK firmware for the Keychron Q7 keyboard with the ANSI layout. It requires a properly set up QMK build environment. The output will be a firmware file ready to be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keychron/q7/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake keychron/q7/ansi:default\n```\n\n----------------------------------------\n\nTITLE: Building 0-Sixty Firmware with QMK Make\nDESCRIPTION: This command builds the default firmware for the 0-Sixty keyboard. It requires a properly configured QMK build environment. The resulting firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/0_sixty/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake 0_sixty:default\n```\n\n----------------------------------------\n\nTITLE: Compiling a Keymap using QMK\nDESCRIPTION: This snippet shows how to compile a specific keymap for a given keyboard using the `qmk compile` command.  The `user.overlay_dir` must be configured to point to the external userspace directory for this to work correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/newbs_external_userspace.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nqmk compile -kb <keyboard> -km <keymap>\n```\n\n----------------------------------------\n\nTITLE: Flashing miniDivide Keyboard Firmware\nDESCRIPTION: This command flashes the compiled firmware to the miniDivide keyboard. It requires the QMK build environment to be set up, and the keyboard to be connected in a flashable state. This command uploads the firmware onto the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/takashicompany/minidivide/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake takashicompany/minidivide:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for 67mk_E\nDESCRIPTION: This command builds the default firmware for the kb_elmo/67mk_e keyboard. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kb_elmo/67mk_e/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake kb_elmo/67mk_e:default\n```\n\n----------------------------------------\n\nTITLE: Building VIA compatible firmware for BMEK rev3 using QMK\nDESCRIPTION: This command builds a VIA-compatible firmware for the BMEK keyboard, specifically for revision 3.  It uses the `make` utility to compile the firmware with VIA support enabled, allowing for real-time keymap customization via the VIA software. It depends on the QMK build environment being properly configured.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/bemeier/bmek/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake bemeier/bmek/rev3:via\n```\n\n----------------------------------------\n\nTITLE: Building the BM40hsrgb Firmware\nDESCRIPTION: This command builds the default firmware for the BM40hsrgb keyboard, specifically the rev2 version.  It utilizes the QMK make system to compile the firmware. Ensure the QMK build environment is set up correctly before executing this command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kprepublic/bm40hsrgb/rev2/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake kprepublic/bm40hsrgb/rev2:default\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for Swift65 (Makefile)\nDESCRIPTION: This command builds the default firmware for the Swift65 solder version using the QMK build environment. It requires a properly configured QMK build environment as a prerequisite.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/alfredslab/swift65/solder/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake alfredslab/swift65/solder:default\n```\n\n----------------------------------------\n\nTITLE: Building the Halcyon Kyria Keyboard Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the Halcyon Kyria rev4 keyboard using the QMK build environment. It requires the QMK build environment to be set up beforehand. The resulting `.uf2` file can be used to flash the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/splitkb/halcyon/kyria/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake splitkb/halcyon/kyria/rev4:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Acperience12 Firmware with QMK\nDESCRIPTION: This command builds and flashes the default firmware for the Acperience12 macropad to the device using the QMK build environment. It requires the QMK environment and the device to be in bootloader mode. The 'yynmt/acperience12' argument specifies the keyboard, the 'default' argument specifies the keymap, and the 'flash' argument initiates the flashing process.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/yynmt/acperience12/rev1/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake yynmt/acperience12:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building BAMFK-1 Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the keebio/bamfk1 keyboard using the QMK build environment. It requires the QMK build environment to be set up correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keebio/bamfk1/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake keebio/bamfk1:default\n```\n\n----------------------------------------\n\nTITLE: Enabling RGB Underglow\nDESCRIPTION: This snippet shows how to enable RGB underglow for the Helix keyboard.  Changing `LED_UNDERGLOW_ENABLE` to `yes` in the `rules.mk` file activates the WS2812 RGB underlight feature.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/helix/rev2/keymaps/default/readme_jp.md#_snippet_2\n\nLANGUAGE: makefile\nCODE:\n```\nLED_UNDERGLOW_ENABLE = yes   # LED underglow (Enable WS2812 RGB underlight.)\n```\n\n----------------------------------------\n\nTITLE: Building Keychron Q3 Firmware\nDESCRIPTION: These `make` commands are used to build the QMK firmware for different layouts of the Keychron Q3 keyboard.  Each command specifies the keyboard, layout (ansi, iso, jis), and configuration (default, encoder). The `make` utility compiles the firmware based on the specified configuration files. No external dependencies are explicitly listed, but a properly set up QMK build environment is required.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keychron/q3/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake keychron/q3/ansi:default\nmake keychron/q3/ansi_encoder:default\nmake keychron/q3/iso:default\nmake keychron/q3/iso_encoder:default\nmake keychron/q3/jis:default\nmake keychron/q3/jis_encoder:default\n```\n\n----------------------------------------\n\nTITLE: Building Keyboard Firmware with Make\nDESCRIPTION: This command builds the default firmware for the Scarlet Bandana keyboard. It uses the QMK make system to compile the keyboard's keymap and firmware based on the `woodkeys/scarletbandana` configuration and `default` keymap. This process generates a firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/woodkeys/scarletbandana/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake woodkeys/scarletbandana:default\n```\n\n----------------------------------------\n\nTITLE: Compiling ANAVI Macro Pad 12 Firmware with QMK\nDESCRIPTION: This code snippet shows how to compile the firmware for the ANAVI Macro Pad 12 keyboard using the QMK command-line tool. It assumes that the QMK build environment has already been set up.  The command compiles the 'default' keymap for the 'anavi/macropad12' keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/anavi/macropad12/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nqmk compile -kb anavi/macropad12 -km default\n```\n\n----------------------------------------\n\nTITLE: Flashing the GMMK PRO ISO Firmware\nDESCRIPTION: This command flashes the default firmware onto the GMMK PRO ISO keyboard using the QMK build environment. It requires that the board is in bootloader mode. The command combines the build and flash steps into a single operation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/gmmk/pro/rev1/iso/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake gmmk/pro/rev1/iso:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building BigBoy Firmware\nDESCRIPTION: This command builds the default firmware for the BigBoy macropad using the QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/tominabox1/bigboy/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake bigboy:default\n```\n\n----------------------------------------\n\nTITLE: Flashing BB Steno Firmware (QMK)\nDESCRIPTION: This command flashes the compiled firmware onto the BB Steno keyboard using the QMK build environment. It assumes the keyboard is connected and in a state ready to receive the firmware. Requires a working QMK build environment and correctly configured keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechwild/bbs/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake mechwild/bbs:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing the keyboard firmware using QMK\nDESCRIPTION: This command builds and flashes the firmware for the ThumbsUp! v9 keyboard with a ProMicro controller and a 4x12 layout, using the default keymap. It requires the QMK build environment and a connected keyboard in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/thumbsup/rev9_promicro_4x12/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake thumbsup/rev9_promicro_4x12:default:flash\n```\n\n----------------------------------------\n\nTITLE: Compiling and Flashing Firmware for Soldered PCB\nDESCRIPTION: This command compiles and flashes the default layout for the soldered version of the Mode Eighty V1 keyboard automatically using `dfu-util`. It requires a functional QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mode/m80v1/readme.md#_snippet_3\n\nLANGUAGE: make\nCODE:\n```\nmake mode/m80v1/m80s:default:flash # Soldered\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware to 67mk_E\nDESCRIPTION: This command flashes the compiled firmware to the kb_elmo/67mk_e keyboard. It assumes the board is in DFU mode or a compatible bootloader is active.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kb_elmo/67mk_e/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake kb_elmo/67mk_e:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware to Jane v2 CE Keyboard\nDESCRIPTION: This command flashes the built QMK firmware to the TGR Jane v2 CE keyboard using the default keymap. It requires the build environment to be correctly set up and the keyboard to be in a flashable state (e.g., via reset key).\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/tgr/jane/v2ce/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake tgr/jane/v2ce:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware to FreebirdTKL - QMK\nDESCRIPTION: This command flashes the built firmware to the KeebsForAll FreebirdTKL keyboard. It requires the QMK build environment and a configured flashing tool. This combines building and flashing in one step.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keebsforall/freebirdtkl/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake keebsforall/freebirdtkl:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building BM80V2_ISO keyboard firmware\nDESCRIPTION: This command builds the default firmware for the BM80V2_ISO keyboard. It uses the `make` command with the target specified as `kprepublic/bm80v2_iso:default`.  This assumes that the QMK build environment has been set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kprepublic/bm80v2_iso/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake kprepublic/bm80v2_iso:default\n```\n\n----------------------------------------\n\nTITLE: Compiling TBK Mini Firmware with v2 Shield, STeMCell, and VIA Keymap\nDESCRIPTION: This command compiles the QMK firmware for the TBK Mini keyboard with the v2 shield, STeMCell controller, and the VIA keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/bastardkb/tbkmini/readme.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nqmk compile -kb bastardkb/tbkmini/v2/stemcell -km via\n```\n\n----------------------------------------\n\nTITLE: Compiling KBD67 MKII RGB V1 Firmware with QMK\nDESCRIPTION: This command compiles the default firmware for the KBD67 MKII RGB V1 keyboard using the QMK build system. It requires the QMK build environment to be properly set up. The compiled firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kbdfans/kbd67/readme.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nmake kbdfans/kbd67/mkiirgb/v1:default\n```\n\n----------------------------------------\n\nTITLE: Build Lily58 R2G Firmware\nDESCRIPTION: This command builds the QMK firmware for the Lily58 R2G keyboard with the mb_via keymap. It requires a properly configured QMK build environment. The resulting firmware can then be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/lily58/r2g/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake lily58/r2g:mb_via\n```\n\n----------------------------------------\n\nTITLE: Building Onyx Keyboard Firmware (QMK)\nDESCRIPTION: This command compiles the default firmware for the Onyx keyboard using the QMK build environment. It requires a properly configured QMK build environment and will generate the firmware file for flashing onto the keyboard.  The 'cannonkeys/onyx' specifies the keyboard's directory within the QMK firmware repository, and 'default' refers to the default keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cannonkeys/onyx/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake cannonkeys/onyx:default\n```\n\n----------------------------------------\n\nTITLE: Building Ferris 0.2 Mini firmware using make\nDESCRIPTION: This command builds the default firmware for the Ferris 0.2 - Mini keyboard using the `make` command-line tool. It assumes that the QMK build environment has been set up correctly. It will generate a .hex file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ferris/0_2/mini/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake ferris/0_2/mini:default\n```\n\n----------------------------------------\n\nTITLE: Flashing void65h Firmware\nDESCRIPTION: This command flashes the compiled QMK firmware onto the void65h keyboard. It uses the appropriate flashing tool based on the keyboard's bootloader.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/eason/void65h/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake eason/void65h:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing QMK Firmware to mammoth75x\nDESCRIPTION: This command flashes the compiled firmware to the mammoth75x keyboard. It uses the `make` command with the target specified as `wuque/mammoth75x:default:flash`. This assumes that the build environment and dfu-programmer or similar tools are correctly configured.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wuque/mammoth75x/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake wuque/mammoth75x:default:flash\n```\n\n----------------------------------------\n\nTITLE: Enabling Invert on Shift in config.h (C)\nDESCRIPTION: This code snippet shows how to enable the `CAPS_WORD_INVERT_ON_SHIFT` option in the `config.h` file. When enabled, pressing the Shift key inverts the shift state while Caps Word is active, allowing for uncapitalizing individual letters.  This is useful for typing abbreviations or specific capitalization patterns.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/caps_word.md#_snippet_3\n\nLANGUAGE: c\nCODE:\n```\n#define CAPS_WORD_INVERT_ON_SHIFT\n```\n\n----------------------------------------\n\nTITLE: Building the QMK Firmware for Sabre PCB\nDESCRIPTION: This command is used to build the QMK Firmware for the Sabre PCB with the default keymap. It assumes that the QMK build environment has already been set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wolf/sabre/readme.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmake wolf/sabre:default\n```\n\n----------------------------------------\n\nTITLE: Flashing QMK Firmware to Magnum Ergo 1\nDESCRIPTION: This command compiles and flashes the QMK firmware with the default keymap for the Magnum Ergo 1 keyboard. It assumes the device is already in DFU mode and uses the `make` command-line tool provided by QMK to build and flash the firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/dark/magnum_ergo_1/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake magnum_ergo_1:default:flash\n```\n\n----------------------------------------\n\nTITLE: Making Pila87 with QMK\nDESCRIPTION: This command compiles the default keymap for the Pila87 keyboard using the QMK build environment.  It requires a properly configured QMK build environment.  The output will be a firmware file ready to be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/phage_studio/pila87/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake phage_studio/pila87:default\n```\n\n----------------------------------------\n\nTITLE: Building EXT65 Firmware - QMK\nDESCRIPTION: This command builds the QMK firmware for the EXT65 keyboard. It specifies the keyboard (aeboards/ext65), the revision (rev1 or rev2), and the keymap (default). The `make` command compiles the source code into a firmware image that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/aeboards/ext65/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake aeboards/ext65/rev1:default\n```\n\nLANGUAGE: Shell\nCODE:\n```\nmake aeboards/ext65/rev2:default\n```\n\n----------------------------------------\n\nTITLE: Building YMD96 Firmware\nDESCRIPTION: This command builds the default firmware for the YMD96 keyboard. It compiles the source code and generates a firmware file that can be flashed onto the keyboard's microcontroller. Requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ymdk/ymd96/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake ymdk/ymd96:default\n```\n\n----------------------------------------\n\nTITLE: Building Pinky4 Keyboard Firmware - QMK\nDESCRIPTION: This command builds the QMK Firmware for the Pinky4 keyboard with the default keymap. It uses the `make` command with the target `pinky/4:default`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/pinky/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake pinky/4:default\n```\n\n----------------------------------------\n\nTITLE: Building and Flashing KapCave Arya Firmware\nDESCRIPTION: This command builds the default keymap for the KapCave Arya keyboard and then flashes the compiled firmware onto the keyboard. This requires the QMK build environment and a configured flashing tool.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kapcave/arya/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake kapcave/arya:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building TONE QMK Firmware\nDESCRIPTION: This command builds the default firmware for the TONE keyboard. It assumes that the QMK build environment is already set up correctly. This command compiles the source code and creates a firmware image that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/peranekofactory/tone/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake peranekofactory/tone:default\n```\n\n----------------------------------------\n\nTITLE: Flashing keyboard firmware\nDESCRIPTION: This command builds and flashes the firmware for the space_space/rev1 keyboard with the default keymap. It requires the QMK build environment to be set up and a compatible flashing tool.  The keyboard needs to be in bootloader mode for the flash to be successful.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/qpockets/space_space/rev1/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake space_space/rev1:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Quefrency Firmware\nDESCRIPTION: This command flashes the default firmware onto the Quefrency keyboard (Rev. 3). It requires a configured QMK build environment and the appropriate flashing tools to be installed. The command assumes the keyboard is connected and in the correct bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keebio/quefrency/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake keebio/quefrency/rev3:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing daskeyboard4 Firmware - QMK\nDESCRIPTION: This command flashes the default QMK firmware onto the handwired daskeyboard4. This requires the QMK build environment and a compatible flashing tool.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/daskeyboard/daskeyboard4/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake handwired/daskeyboard/daskeyboard4:default:flash\n```\n\n----------------------------------------\n\nTITLE: Include Quantum Painter Header in C\nDESCRIPTION: To use any of the Quantum Painter APIs, the `qp.h` header file must be included in the C code. This provides access to all the drawing functions and data structures required for interacting with the display.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/quantum_painter.md#_snippet_42\n\nLANGUAGE: c\nCODE:\n```\n#include <qp.h>\n```\n\n----------------------------------------\n\nTITLE: Getting Current LED Matrix Effect Mode (C)\nDESCRIPTION: This function retrieves the index of the currently running LED matrix effect.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/led_matrix.md#_snippet_24\n\nLANGUAGE: C\nCODE:\n```\nuint8_t led_matrix_get_mode(void)\n```\n\n----------------------------------------\n\nTITLE: Building Gentleman65 Firmware\nDESCRIPTION: This command builds the default firmware for the Gentleman65 SE Solderd PCB. It uses the `make` command within the QMK environment to compile the specified keyboard layout.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/jkeys_design/gentleman65_se_s/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake jkeys_design/gentleman65_se_s:default\n```\n\n----------------------------------------\n\nTITLE: Conditional Key Ignoring in QMK (C)\nDESCRIPTION: This code snippet demonstrates how to ignore certain keys based on layer state and modifier keys using the `remember_last_key_user` callback. It ignores keys pressed on layer 2 or in combination with the GUI modifier, preventing them from being repeated.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/repeat_key.md#_snippet_8\n\nLANGUAGE: c\nCODE:\n```\nbool remember_last_key_user(uint16_t keycode, keyrecord_t* record,\n                            uint8_t* remembered_mods) {\n    if (IS_LAYER_ON(2) || (get_mods() & MOD_MASK_GUI)) {\n        return false;  // Ignore layer 2 keys and GUI chords.\n    }\n\n    return true;  // Other keys can be repeated.\n}\n```\n\n----------------------------------------\n\nTITLE: Building and Flashing Acheron Themis\nDESCRIPTION: This command builds and flashes the default layout for the Acheron Themis keyboard in one step. It requires the QMK build environment to be configured and assumes the necessary flashing tools are installed. Replace <revision> with the appropriate revision number.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/acheron/themis/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake acheron/themis/<revision>:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building SMK65 Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the SMK65 keyboard using the QMK build environment.  It requires a properly set up build environment as described in the QMK documentation. The output is the compiled firmware ready for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/lfkeyboards/smk65/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake lfkeyboards/smk65:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware to Atmel Controller (Pro Micro)\nDESCRIPTION: This command builds and flashes the QMK firmware to the Sweet 16 v2 macropad using a Pro Micro controller. It builds upon the previous command by adding the flash target. This requires a configured QMK build environment and a connected Pro Micro.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/1upkeyboards/sweet16v2/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake 1upkeyboards/sweet16v2/promicro:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Hannah65 Rev1 Firmware with QMK\nDESCRIPTION: This command flashes the compiled firmware to the Hannah65 Rev1 keyboard. It requires a properly configured QMK build environment and a connected keyboard in flashing mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechlovin/hannah65/rev1/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake mechlovin/hannah65/rev1:flash\n```\n\n----------------------------------------\n\nTITLE: Encoder Update Function with Multiple Encoders (C)\nDESCRIPTION: This C code defines the `encoder_update_user` function for scenarios with multiple encoders on the Terrazzo keyboard. The `index` parameter distinguishes between encoders. Encoder 0 controls Page Up/Down, while encoder 1 adjusts volume, enabling differentiated functions for each encoder.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/terrazzo/readme.md#_snippet_5\n\nLANGUAGE: C\nCODE:\n```\nbool encoder_update_user(uint8_t index, bool clockwise) {\n    terrazzo_scroll_pixel(clockwise);\n    switch(index) {\n      case 0:\n        clockwise ? tap_code(KC_PGDN) : tap_code(KC_PGUP);\n        break;\n      case 1:\n        clockwise ? tap_code(KC_AUDIO_VOL_UP) : tap_code(KC_AUDIO_VOL_DOWN);\n        break;        \n    }\n    return true;\n}\n```\n\n----------------------------------------\n\nTITLE: Building NK87B Firmware with QMK\nDESCRIPTION: This command builds the QMK firmware for the NK87B keyboard with the default keymap. It assumes that the QMK build environment has been set up. The output of the command is a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/novelkeys/nk87b/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake novelkeys/nk87b:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Keychron Q11 Firmware (ISO Encoder)\nDESCRIPTION: This command builds and flashes the QMK firmware to the Keychron Q11 keyboard with the ISO encoder layout and the default keymap. It requires the QMK build environment to be properly set up and a flashing tool to be available. This command assumes the keyboard is already in DFU mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keychron/q11/readme.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nmake keychron/q11/iso_encoder:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Sinanju WK Firmware - Make Command\nDESCRIPTION: This command builds the default keymap for the Sinanju WK keyboard using the QMK build environment. It requires the QMK build environment to be set up correctly.  The output will be a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/fjlabs/sinanjuwk/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake fjlabs/sinanjuwk:default\n```\n\n----------------------------------------\n\nTITLE: Flashing DJam Firmware (QMK)\nDESCRIPTION: This command flashes the default firmware to the DJam keyboard using the QMK build environment.  It requires the QMK build environment to be set up, and a compatible flashing tool to be installed. The controller must be connected to the computer in a way that allows flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/deng/djam/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake deng/djam:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for Magnavox Videowriter Keyboard (QMK)\nDESCRIPTION: This command is used to compile the QMK firmware for the Magnavox Videowriter keyboard using the default keymap. It assumes that the QMK build environment has already been set up correctly according to the official QMK documentation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/videowriter/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake handwired/videowriter:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware with QMK CLI (DFU)\nDESCRIPTION: This command flashes the QMK firmware to the System76 Launch keyboard using the QMK CLI and DFU (Device Firmware Update). It flashes the keymap 'default' to the keyboard. The keyboard needs to be in DFU mode. The output is the keyboard running the new firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/system76/launch_1/readme.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nqmk flash -kb system76/launch_1 -km default\n```\n\n----------------------------------------\n\nTITLE: Enabling PWM Driver in halconf.h for STM32\nDESCRIPTION: This snippet shows how to enable the PWM driver within the `halconf.h` file for STM32 microcontrollers. It sets the `HAL_USE_PWM` macro to `TRUE`, enabling PWM functionality. This is a prerequisite for using PWM to control backlighting.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/backlight.md#_snippet_8\n\nLANGUAGE: c\nCODE:\n```\n#pragma once\n\n#define HAL_USE_PWM TRUE // [!code focus]\n\n#include_next <halconf.h>\n```\n\n----------------------------------------\n\nTITLE: Flashing Gray Studio HB85 Firmware\nDESCRIPTION: This command flashes the default firmware onto the Gray Studio HB85 keyboard. It requires the QMK build environment and a compatible flashing tool installed on the system.  The keyboard must be in flashing mode for this command to succeed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/gray_studio/hb85/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake gray_studio/hb85:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Durgod K320 Firmware with QMK\nDESCRIPTION: This command flashes the built QMK firmware onto the Durgod K320 keyboard.  It uses the `make` command with the `flash` target. This assumes that the keyboard is in the correct mode for flashing and that the necessary tools are installed and configured within the QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/durgod/k320/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake durgod/k320/base:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Hub20 Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Hub20 keyboard using the QMK build environment. It requires QMK to be properly set up and configured for keyboard builds. The output will be a firmware file ready to be flashed to the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/joshajohnson/hub20/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake joshajohnson/hub20:default\n```\n\n----------------------------------------\n\nTITLE: Building CONSTELLATION REV2 Firmware with Make\nDESCRIPTION: This command builds the default firmware for the CONSTELLATION REV2 keyboard.  It requires a properly set up QMK build environment.  The command outputs a firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/aeboards/constellation/rev2/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake aeboards/constellation/rev2:default\n```\n\n----------------------------------------\n\nTITLE: Building NK Classic TKL Firmware\nDESCRIPTION: Builds the default firmware for the NK Classic TKL ISO keyboard using the QMK build environment. This command compiles the keymap and creates a firmware file that can be flashed onto the keyboard. Requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/novelkeys/nk_classic_tkl_iso/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake novelkeys/nk_classic_tkl_iso:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Stream15 Firmware with QMK\nDESCRIPTION: This command builds and flashes the default firmware for the Stream15 macro pad using the QMK build environment.  It relies on the QMK environment being correctly configured for flashing the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/nibiria/stream15/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake nibiria/stream15:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building GMMK V2 96% (ISO) Firmware\nDESCRIPTION: This command compiles the default keymap for the GMMK V2 96% (ISO) keyboard using the QMK build environment.  It requires QMK to be properly set up and configured. The compiled firmware will be generated for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/gmmk/gmmk2/p96/iso/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake gmmk/gmmk2/p96/iso:default\n```\n\n----------------------------------------\n\nTITLE: Flashing XD004 Keyboard Firmware\nDESCRIPTION: This command flashes the built firmware onto the XD004 keyboard. It uses the QMK build environment and assumes the keyboard is in DFU mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/xiudi/xd004/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake xiudi/xd004/v1:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing ATSET AT16 Firmware\nDESCRIPTION: This command flashes the compiled firmware onto the ATSET AT16 keyboard.  It requires a properly configured QMK build environment and a connected keyboard in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/atset/at16/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake atset/at3:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Canoe Gen2 Firmware (Make)\nDESCRIPTION: This command flashes the compiled firmware onto the Canoe Gen2 keyboard. It requires a properly configured QMK build environment and a connected keyboard in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/percent/canoe_gen2/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake percent/canoe_gen2:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing QMK Firmware to Zeno Keyboard\nDESCRIPTION: This command flashes the compiled QMK firmware to the Zeno Ergo 60% keyboard. It utilizes the appropriate flashing tool based on the keyboard's microcontroller and bootloader. A successful flash updates the keyboard's firmware with the newly built image.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/skme/zeno/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake skme/zeno:default:flash\n```\n\n----------------------------------------\n\nTITLE: Configuring Maximum ILI9488 Devices (C)\nDESCRIPTION: This snippet shows how to configure the maximum number of ILI9488 displays that can be used by setting the `ILI9488_NUM_DEVICES` macro in `config.h`. The default value is 1. This is a preprocessor definition. Requires Quantum Painter to be enabled.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/quantum_painter.md#_snippet_19\n\nLANGUAGE: c\nCODE:\n```\n// 3 displays:\n#define ILI9488_NUM_DEVICES 3\n```\n\n----------------------------------------\n\nTITLE: Building KBD67 MKII Soldered Firmware - Make\nDESCRIPTION: This command builds the default firmware for the KBD67 MKII soldered variant keyboard using the QMK build environment. It requires the QMK build environment to be set up correctly, as detailed in the linked documentation.  The output is a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kbdfans/kbd67/mkii_soldered/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake kbdfans/kbd67/mkii_soldered:default\n```\n\n----------------------------------------\n\nTITLE: Building Default Keymap - QMK\nDESCRIPTION: This command builds the default keymap for the Atom47 rev2 keyboard using the QMK Firmware build system. It assumes that the QMK build environment is properly set up and configured.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/evyd13/atom47/rev2/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake atom47/rev2:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Mini1800 RevC Firmware (Makefile)\nDESCRIPTION: This command builds and flashes the default firmware to the Mini1800 RevC keyboard. It requires the QMK build environment to be set up correctly and uses the appropriate flashing tools.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/lfkeyboards/mini1800/revc/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake lfkeyboards/mini1800/revc:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Degenpad Firmware - Makefile\nDESCRIPTION: This command builds the firmware for the Degenpad keyboard with the default keymap. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/thepanduuh/degenpad/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake thepanduuh/degenpad:default\n```\n\n----------------------------------------\n\nTITLE: Building ibm_wheelwriter Firmware with QMK\nDESCRIPTION: This command is used to compile the default keymap for the handwired ibm_wheelwriter keyboard using the QMK firmware. It assumes that the QMK build environment has been properly set up.  The output is a firmware file that can be flashed to the keyboard's microcontroller, such as a Teensy 2.0.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/ibm_wheelwriter/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake handwired/ibm_wheelwriter:default\n```\n\n----------------------------------------\n\nTITLE: Flashing the dztech/mellow keyboard firmware\nDESCRIPTION: This command builds and flashes the default firmware for the dztech/mellow keyboard. It requires a properly configured QMK build environment and a connected keyboard in flashing mode. This command will overwrite the existing firmware on the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/dztech/mellow/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake dztech/mellow:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Sparrow62 Firmware (QMK)\nDESCRIPTION: This command builds and flashes the default firmware for the Sparrow62 keyboard. It requires a properly set up QMK build environment and a connected keyboard in flashing mode. The command combines the build and flash steps into a single operation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/sparrow62/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake sparrow62:default:flash\n```\n\n----------------------------------------\n\nTITLE: Draw Ellipse with `qp_ellipse` in C\nDESCRIPTION: The `qp_ellipse` function draws an ellipse on the display. It takes the `painter_device_t`, the x and y coordinates of the center of the ellipse, the x and y sizes, the hue, saturation, and value (HSV) color components, and a boolean indicating whether the ellipse should be filled.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/quantum_painter.md#_snippet_58\n\nLANGUAGE: c\nCODE:\n```\nbool qp_ellipse(painter_device_t device, uint16_t x, uint16_t y, uint16_t sizex, uint16_t sizey, uint8_t hue, uint8_t sat, uint8_t val, bool filled);\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware for Corne Keyboard (v1-v3) - Shell\nDESCRIPTION: This command flashes the QMK firmware to a Corne keyboard (CRKBD) revision 1 to 3 using the default keymap.  It utilizes the `qmk flash` command with the keyboard and keymap specified.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/crkbd/readme.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nqmk flash -kb crkbd/rev1 -km default\n```\n\n----------------------------------------\n\nTITLE: Building Firmware with Make: QMK\nDESCRIPTION: This snippet demonstrates how to build the firmware for the consolekeyboard/18key keyboard with the default keymap using the QMK build environment. It assumes that the build environment has already been set up according to the QMK documentation. The command invokes the `make` utility with the target specified as the keyboard, layout, and keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/consolekeyboard/18key/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/consolekeyboard/18key:default\n```\n\n----------------------------------------\n\nTITLE: Updating qmk-develop branch\nDESCRIPTION: Updates the `qmk-develop` branch to point to the `develop_YYYY_qN` tag. This involves checking out the `qmk-develop` branch, resetting it hard to the specified tag, and force-pushing the changes to the origin remote. Use with caution.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/chibios_upgrade_instructions.md#_snippet_15\n\nLANGUAGE: Shell\nCODE:\n```\ngit checkout qmk-develop\n```\n\nLANGUAGE: Shell\nCODE:\n```\ngit reset --hard develop_YYYY_qN\n```\n\nLANGUAGE: Shell\nCODE:\n```\ngit push origin qmk-develop --force-with-lease\n```\n\n----------------------------------------\n\nTITLE: Enabling Audio on Pin B6 in QMK config.h\nDESCRIPTION: This code snippet enables audio output on pin B6 in QMK firmware. Duophony is enabled if one of the B pins is enabled along with one of the C pins. Deprecated. Use `#define AUDIO_PIN B6`, or use `#define AUDIO_PIN_ALT B6` if a `C` pin is enabled with `AUDIO_PIN`. This setting is configured in the `config.h` file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/config_options.md#_snippet_19\n\nLANGUAGE: c\nCODE:\n```\n#define B6_AUDIO\n```\n\n----------------------------------------\n\nTITLE: Flashing heliotrope firmware\nDESCRIPTION: This command flashes the default firmware to the heliotrope keyboard. It requires the QMK build environment to be properly set up and a flashing tool compatible with the keyboard's bootloader.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/heliotrope/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake heliotrope:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building QMK Firmware for Mode Eighty M80H\nDESCRIPTION: This command compiles the default keymap for the Mode Eighty M80H keyboard. It requires a correctly configured QMK build environment.  The command generates a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mode/m80v1/m80h/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake mode/eighty/m80h:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware for LvL Type-01/80 using QMK\nDESCRIPTION: This command flashes the compiled firmware to the LvL Type-01/80 keyboard using QMK. It needs the board to be in DFU mode.  Replace `<keymap>` with the keymap name, e.g., `default`. Requires QMK Toolbox or command line tools to be configured.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/artifact/lvl/rev_hs01/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake artifact/lvl/rev_hs01:<keymap>:flash\n```\n\n----------------------------------------\n\nTITLE: Excluding Arguments From Configuration - Python\nDESCRIPTION: Example of excluding command line arguments from being saved to the QMK CLI's configuration file. It uses `arg_only=True` in the `@cli.argument` decorator, which means these arguments will only be available in `cli.args`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/cli_development.md#_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\n@cli.argument('-o', '--output', arg_only=True, help='File to write to')\n@cli.argument('filename', arg_only=True, help='Configurator JSON file')\n@cli.subcommand('Create a keymap.c from a QMK Configurator export.')\ndef json_keymap(cli):\n    pass\n```\n\nLANGUAGE: Python\nCODE:\n```\ncli.log.info('Reading from %s and writing to %s', cli.args.filename, cli.args.output)\n```\n\n----------------------------------------\n\nTITLE: Fetching Upstream and Counting Commits - Bash\nDESCRIPTION: This snippet fetches the latest changes from the upstream repository and then counts the number of commits that differ between the current branch and the upstream master branch. The `git fetch` command updates the local copy of the upstream repository, and `git rev-list` command returns the number of commits ahead/behind from a specific branch.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/newbs_git_resolving_merge_conflicts.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit fetch upstream\ngit rev-list --left-right --count HEAD...upstream/master\n```\n\n----------------------------------------\n\nTITLE: Building Durgod K320 Firmware with QMK\nDESCRIPTION: This command builds the QMK firmware for the Durgod K320 keyboard with the base configuration and default keymap. It utilizes the `make` command within the QMK build environment. Ensure the QMK build environment is properly set up before executing this command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/durgod/k320/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake durgod/k320/base:default\n```\n\n----------------------------------------\n\nTITLE: Building Default Firmware - QMK Makefile\nDESCRIPTION: This command compiles the default keymap for the Concrete Flowers Cor TKL keyboard. It uses the QMK make system to build the firmware binary, which can then be flashed onto the keyboard's microcontroller. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/concreteflowers/cor_tkl/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake concreteflowers/cor_tkl:default\n```\n\n----------------------------------------\n\nTITLE: Building Keygem KG65 RGB V2 Firmware\nDESCRIPTION: This snippet shows the command to compile the default firmware for the Keygem KG65 RGB V2 keyboard using QMK. It requires the QMK build environment to be set up correctly. The compiled firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keygem/kg65rgbv2/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake keygem/kg65rgbv2:default\n```\n\n----------------------------------------\n\nTITLE: Flashing TKL-FF Keyboard Firmware - QMK\nDESCRIPTION: This command builds and flashes the default keymap for the TKL-FF keyboard to the device. It depends on a correctly configured QMK build environment and a connected keyboard in bootloader mode. The output will be the firmware flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/rmi_kb/tkl_ff/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake rmi_kb/tkl_ff:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Freebird60 Firmware\nDESCRIPTION: This command builds and flashes the default firmware to the Freebird60 keyboard. It requires the QMK build environment to be set up and a compatible flashing tool configured.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keebsforall/freebird60/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake keebsforall/freebird60:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing EC Type-B Firmware with QMK (Makefile)\nDESCRIPTION: This command builds and flashes the default firmware for the EC Type-B keyboard onto the device using the QMK build environment. It requires the keyboard to be in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cipulot/ec_typeb/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake cipulot/ec_typeb:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building plum47 with QMK\nDESCRIPTION: This command compiles the default keymap for the plum47 keyboard using the QMK build environment. It assumes that the QMK build environment is already set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/plum47/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake plum47:default\n```\n\n----------------------------------------\n\nTITLE: Building Angel Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the Angel keyboard using the QMK build environment. It compiles the source code and creates a firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/angel/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/angel:default\n```\n\n----------------------------------------\n\nTITLE: Flashing the Keyboard Firmware (Makefile)\nDESCRIPTION: This command flashes the built firmware to the Mona v1.1 keyboard using the QMK build environment. It builds the firmware and then flashes it to the connected keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/rmi_kb/mona/v32a/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake rmi_kb/mona/v32a:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Phantom Hotswap Firmware\nDESCRIPTION: This snippet shows how to build the default firmware for the Phantom Hotswap keyboard using the QMK build environment.  It assumes the QMK build environment is already set up according to the QMK documentation. The command `make lucid/phantom_hs:default` compiles the firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/lucid/phantom_hs/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake lucid/phantom_hs:default\n```\n\n----------------------------------------\n\nTITLE: Flashing MutePad Firmware\nDESCRIPTION: This command flashes the built firmware to the MutePad keyboard. It utilizes the QMK build environment and assumes the necessary tools for flashing are installed and configured.  This command typically requires the keyboard to be in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/mutepad/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/mutepad:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building DC01 Left Keyboard Firmware (QMK)\nDESCRIPTION: This command builds the default keymap for the DC01 Left keyboard half using the QMK firmware build system. It assumes that the QMK build environment has been properly set up. The output is a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/dc01/left/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake dc01/left:default\n```\n\n----------------------------------------\n\nTITLE: Building nordic60 Firmware with QMK Make\nDESCRIPTION: This code snippet demonstrates how to build the default firmware for the nordic60 keyboard using the QMK Make command.  It assumes that the QMK build environment has already been set up. The command compiles the firmware for the nordic60 keyboard, specifically the 'rev_a' revision, with the 'default' keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kbnordic/nordic60/rev_a/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake kbnordic/nordic60/rev_a:default\n```\n\n----------------------------------------\n\nTITLE: Extending Deferred Execution with extend_deferred_exec in C\nDESCRIPTION: This code snippet demonstrates how to use `extend_deferred_exec()` to re-delay a future execution. It takes a `deferred_token` and a delay in milliseconds as input. The execution associated with `my_token` will be invoked 800ms after the current time.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/custom_quantum_functions.md#_snippet_10\n\nLANGUAGE: C\nCODE:\n```\n// This will re-delay my_token's future execution such that it is invoked 800ms after the current time\nextend_deferred_exec(my_token, 800);\n```\n\n----------------------------------------\n\nTITLE: Flashing QMK Firmware to Keychron C1 Pro\nDESCRIPTION: This command flashes the built QMK firmware onto the Keychron C1 Pro keyboard with specified layout (ANSI) and backlight configuration (RGB or White). The `:flash` target utilizes the appropriate flashing tool for the keyboard's microcontroller. Requires a correctly configured QMK build environment and connected keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keychron/c1_pro/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake keychron/c1/ansi/rgb:default:flash\n```\n\nLANGUAGE: bash\nCODE:\n```\nmake keychron/c1/ansi/white:default:flash\n```\n\n----------------------------------------\n\nTITLE: Implementing Advanced LED Matrix Indicators Callback (C)\nDESCRIPTION: This code snippet shows how to implement an advanced LED matrix indicator callback for heavily customized displays in QMK Firmware.  It takes led_min and led_max as parameters and uses the macro `LED_MATRIX_INDICATOR_SET_VALUE(i, v)` for ease of use.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/led_matrix.md#_snippet_8\n\nLANGUAGE: c\nCODE:\n```\nvoid led_matrix_indicators_advanced_user(uint8_t led_min, uint8_t led_max) {\n    LED_MATRIX_INDICATOR_SET_VALUE(index, value);\n    return false;\n}\n```\n\n----------------------------------------\n\nTITLE: Keycode Injection Example (C)\nDESCRIPTION: This example demonstrates how to inject specific keycodes using the `SS_TAP` macro to type opening and closing curly braces, then move the cursor back between them. The `X_LEFT` keycode represents the left arrow key with the `X_` prefix.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/send_string.md#_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nSEND_STRING(\"{}\" SS_TAP(X_LEFT));\n```\n\n----------------------------------------\n\nTITLE: DRV2605L Startup Greeting Configuration (C)\nDESCRIPTION: This C code snippet demonstrates how to define the DRV2605L_GREETING macro to specify a waveform sequence to play upon keyboard startup. Replace `*sequence name or number*` with the desired sequence from the DRV2605L's preloaded library. This macro is defined in the config.h file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/haptic_feedback.md#_snippet_3\n\nLANGUAGE: c\nCODE:\n```\n#define DRV2605L_GREETING *sequence name or number*\n```\n\n----------------------------------------\n\nTITLE: Flashing Magnus M75S with Default Keymap\nDESCRIPTION: This command compiles and flashes the default keymap for the Smith and Rune Magnus keyboard (M75S PCB) directly to the board if it is in DFU mode. It extends the standard `make` command with the `:flash` target. It requires `dfu-util` and a correctly setup QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/smithrune/magnus/readme.md#_snippet_2\n\nLANGUAGE: Makefile\nCODE:\n```\nmake smithrune/magnus/m75s:default:flash\n```\n\n----------------------------------------\n\nTITLE: Draw Rectangle with `qp_rect` in C\nDESCRIPTION: The `qp_rect` function draws a rectangle on the display. It takes the `painter_device_t`, the coordinates of the top-left and bottom-right corners of the rectangle, the hue, saturation, and value (HSV) color components, and a boolean indicating whether the rectangle should be filled.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/quantum_painter.md#_snippet_54\n\nLANGUAGE: c\nCODE:\n```\nbool qp_rect(painter_device_t device, uint16_t left, uint16_t top, uint16_t right, uint16_t bottom, uint8_t hue, uint8_t sat, uint8_t val, bool filled);\n```\n\n----------------------------------------\n\nTITLE: Combining mouse reports for pointing devices - C\nDESCRIPTION: This code snippet demonstrates how to combine mouse reports from the left and right pointing devices in QMK. The left report is modified to represent horizontal and vertical scrolling, while the x and y coordinates are set to zero.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/pointing_device.md#_snippet_22\n\nLANGUAGE: c\nCODE:\n```\nreport_mouse_t pointing_device_task_combined_user(report_mouse_t left_report, report_mouse_t right_report) {\n    left_report.h = left_report.x;\n    left_report.v = left_report.y;\n    left_report.x = 0;\n    left_report.y = 0;\n    return pointing_device_combine_reports(left_report, right_report);\n}\n```\n\n----------------------------------------\n\nTITLE: Compile Default Firmware for Elongate Delta - Make\nDESCRIPTION: This command compiles the default firmware layout for the Acheron Elongate Delta keyboard PCB. It uses the `make` command within the QMK Firmware build environment. The command needs the QMK build environment to be correctly setup and will generate the binary (.bin or .hex) file ready to be flashed to the board.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/acheron/elongate/delta/readme.md#_snippet_0\n\nLANGUAGE: makefile\nCODE:\n```\nmake acheron/elongate/delta:default\n```\n\n----------------------------------------\n\nTITLE: Including IS31FL3729 Driver in rules.mk (Make)\nDESCRIPTION: This snippet demonstrates how to include the IS31FL3729 driver source files in your `rules.mk` file. This is necessary when using the driver standalone. It also sets the I2C_DRIVER_REQUIRED flag. The single-color and RGB driver files are included conditionally.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/is31fl3729.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nCOMMON_VPATH += $(DRIVER_PATH)/led/issi\nSRC += is31fl3729-mono.c # For single-color\nSRC += is31fl3729.c # For RGB\nI2C_DRIVER_REQUIRED = yes\n```\n\n----------------------------------------\n\nTITLE: Building the aanzee keyboard firmware with QMK\nDESCRIPTION: This command builds the default keymap for the aanzee keyboard using the QMK Firmware build environment. It requires a properly configured build environment and the necessary files for the aanzee keyboard to be present in the QMK Firmware repository. The output will be a .hex or .bin file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/westfoxtrot/aanzee/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake westfoxtrot/aanzee:default\n```\n\n----------------------------------------\n\nTITLE: DRV2605L Default Haptic Mode Configuration (C)\nDESCRIPTION: This C code snippet shows how to define the DRV2605L_DEFAULT_MODE macro to set the active waveform sequence when the `HF_RST` keycode is pressed. Replace `*sequence name or number*` with the desired sequence ID. If this macro isn't defined, the mode defaults to 1 when `HF_RST` is triggered.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/haptic_feedback.md#_snippet_4\n\nLANGUAGE: c\nCODE:\n```\n#define DRV2605L_DEFAULT_MODE *sequence name or number*\n```\n\n----------------------------------------\n\nTITLE: Flashing the iNETT Studio SQUARE 80% Keyboard (QMK)\nDESCRIPTION: This command flashes the default keymap onto the iNETT Studio SQUARE 80% keyboard using the QMK firmware. It requires a correctly configured QMK build environment and a connected keyboard in a flashable state. Successful execution results in the new firmware being active on the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/inett_studio/sq80/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake inett_studio/sq80:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Bootloader using dfu-util\nDESCRIPTION: This command uses dfu-util to flash a new bootloader to the keyboard's flash memory.  It requires the keyboard to be in DFU mode and the correct bootloader binary to be present. It's crucial for enabling QMK firmware flashing. Requires dfu-util to be installed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/xiaomi/mk02/readme.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndfu-util -d 0483:df11 -a 0 -s 0x08000000:leave -D jumploader-xiaomi_mk02-padded.bin\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware to ATMega32U4 using avrdude\nDESCRIPTION: These commands flash the compiled firmware to the ATMega32U4 microcontroller using avrdude. The first command sets the fuse bits, and the second command writes the .hex file to the flash memory. It uses the usbasp programmer and specifies the m32u4 microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/specskeys/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\navrdude -c usbasp -p m32u4 -B10 -U lfuse:w:0xD2:m -U hfuse:w:0x98:m -U efuse:w:0xFF:m\n```\n\nLANGUAGE: shell\nCODE:\n```\navrdude -c usbasp -pm32u4 -B10 -Uflash:w:.build/specskeys_default.hex\n```\n\n----------------------------------------\n\nTITLE: Building Pan Keyboard Firmware (Proton-C)\nDESCRIPTION: This command builds the default firmware for the Pan keyboard with the Proton-C microcontroller using the QMK build environment. It requires the QMK build environment to be set up correctly. No specific input files are needed as it is using the default configuration.  The output will be the compiled firmware to be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/rgbkb/pan/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake rgbkb/pan/rev1/proton_c:default\n```\n\n----------------------------------------\n\nTITLE: Building MariOrion v2.5 with QMK Make\nDESCRIPTION: These commands are used to build the MariOrion v2.5 firmware using the QMK build environment. The `make` command compiles the firmware for either the `prod` (production) or `proto` (prototype) version with the default keymap.  Ensure QMK build environment is correctly setup before running.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mariorion_v25/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake mariorion_v25/prod:default\n```\n\nLANGUAGE: shell\nCODE:\n```\nmake mariorion_v25/proto:default\n```\n\n----------------------------------------\n\nTITLE: Disabling Command Feature in rules.mk\nDESCRIPTION: This code snippet demonstrates how to disable the Command feature in the `rules.mk` file. This is useful to avoid conflicts with the Space Cadet functionality, particularly when both Shift keys are held simultaneously.  Disabling Command prevents the Command feature from interfering with Space Cadet's expected behavior.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/space_cadet.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nCOMMAND_ENABLE = no\n```\n\n----------------------------------------\n\nTITLE: Setting Cursor Position\nDESCRIPTION: Moves the cursor to a specific character position on the display. Takes column (`col`) and line (`line`) numbers as input (uint8_t).  The cursor wraps if the specified position is out of bounds, based on `st7565_max_chars()` and `st7565_max_lines()`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/st7565.md#_snippet_10\n\nLANGUAGE: C\nCODE:\n```\n// Moves cursor to character position indicated by column and line, wraps if out of bounds\n// Max column denoted by 'st7565_max_chars()' and max lines by 'st7565_max_lines()' functions\nvoid st7565_set_cursor(uint8_t col, uint8_t line);\n```\n\n----------------------------------------\n\nTITLE: Entering Bootloader Mode\nDESCRIPTION: These instructions describe how to reset the keyboard and enter bootloader mode for flashing new firmware. It involves pressing the reset button on the PCB, possibly twice if the ProMicro is new. This allows the user to flash the keyboard with tools like QMK Toolbox.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/sendyyeah/75pixels/readme.md#_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\n- Press reset button on the PCB (twice if the ProMicro is fresh)\n- Flash with QMK Toolbox or any command line you like\n```\n\n----------------------------------------\n\nTITLE: Flashing Neopad Firmware (QMK)\nDESCRIPTION: This command flashes the pre-built firmware onto the Neopad macropad.  It builds the firmware if it doesn't exist, then attempts to flash it to the device. The command requires the QMK build environment and a connected Neopad in bootloader mode.  Press the RESET button on the Neopad when prompted to enter bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/rookiebwoy/neopad/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake rookiebwoy/neopad/rev1:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Split65 with ProMicro using QMK\nDESCRIPTION: This command builds and flashes the QMK firmware for the Split65 keyboard using a ProMicro controller with the default configuration. It uses the `make` command with the target specified as `handwired/split65/promicro:default:flash`. It assumes that the QMK build environment is properly configured for flashing to a ProMicro. The keyboard must be in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/split65/readme.md#_snippet_2\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/split65/promicro:default:flash\n```\n\n----------------------------------------\n\nTITLE: LED mapping for single-color driver (C)\nDESCRIPTION: This code snippet demonstrates how to map LED indices to the IS31FL3731 driver outputs for a single-color LED configuration.  It defines a `g_is31fl3731_leds` array of `is31fl3731_led_t` structs, specifying the driver index and PWM register address for each LED.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/is31fl3731.md#_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nconst is31fl3731_led_t PROGMEM g_is31fl3731_leds[IS31FL3731_LED_COUNT] = {\n/* Driver\n *   |  V */\n    {0, C1_1},\n    // etc...\n};\n```\n\n----------------------------------------\n\nTITLE: Adding a Community Module via git submodule (Shell)\nDESCRIPTION: These commands add a community module to your external userspace using git submodules.  Replace `{user}` and `{repo}` with the actual author's GitHub username and repository name.  It updates the submodule after adding it.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/community_modules.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncd /path/to/your/external/userspace\nmkdir -p modules\n# Replace the following {user} and {repo} with the author's community module repository\ngit submodule add https://github.com/{user}/{repo}.git modules/{user}\ngit submodule update --init --recursive\n```\n\n----------------------------------------\n\nTITLE: Including Engine Header in keymap.c\nDESCRIPTION: This snippet shows how to include the `g/keymap_engine.h` header file in your `keymap.c` file when using the chording engine. This includes the engine's definitions and configurations, allowing you to use the chording functionality. Make sure the path is correct relative to your project structure.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/gboards/readme.md#_snippet_4\n\nLANGUAGE: C\nCODE:\n```\n#include \"g/keymap_engine.h\"\n```\n\n----------------------------------------\n\nTITLE: Defining Layer Switching Logic (QMK)\nDESCRIPTION: This code snippet shows how to define the layer switching logic in the `PROGMEM fn_actions[]` function within the QMK firmware. It maps a specific keycode (e.g., `KC_FN0`) to a layer selection action.  `ACTION_LAYER_SET` activates the specified layer (`HDN`) when the key is pressed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/gamenum/readme.md#_snippet_2\n\nLANGUAGE: c\nCODE:\n```\n[0] = ACTION_LAYER_SET(HDN, ON_PRESS),\n```\n\n----------------------------------------\n\nTITLE: Making default keymap for Unicorne keyboard (QMK)\nDESCRIPTION: This command builds the default keymap for the Unicorne keyboard using QMK firmware. It assumes the QMK build environment has already been set up. The 'yanghu/unicorne' specifies the keyboard and 'default' specifies the keymap to build. After successful compilation, the firmware can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/yanghu/unicorne/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake yanghu/unicorne:default\n```\n\n----------------------------------------\n\nTITLE: Building Red Herring Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the Red Herring keyboard. It uses the QMK build environment to compile the keyboard's firmware based on the specified keymap (default). The build environment must be set up before running this command. The output is a .hex or .bin file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/dcpedit/redherring/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake dcpedit/redherring:default\n```\n\n----------------------------------------\n\nTITLE: Define Keyboard Layout: tkl_f13_ansi_wkl\nDESCRIPTION: This code snippet defines the keyboard layout named `LAYOUT_tkl_f13_ansi_wkl`. This layout is likely used within the QMK firmware to map keycodes to physical keys on a specific keyboard configuration (TKL, F13, ANSI, WKL). The specific key mappings would be defined elsewhere, using this layout as a base.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/layouts/default/tkl_f13_ansi_wkl/readme.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nLAYOUT_tkl_f13_ansi_wkl\n```\n\n----------------------------------------\n\nTITLE: Building Firmware with Make\nDESCRIPTION: This snippet shows how to build the Nebula68B keyboard firmware using the `make` command. It targets the `hs` (hotswap) and `solder` versions with VIA enabled. You need to have a QMK build environment set up before running these commands.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/spaceholdings/nebula68b/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake spaceholdings/nebula68b/hs:via\nmake spaceholdings/nebula68b/solder:via\n```\n\n----------------------------------------\n\nTITLE: Building ATSET AT9 Firmware with Make\nDESCRIPTION: This command builds the default firmware for the ATSET AT9 keyboard using the `make` command. It assumes that the QMK build environment has already been set up. The command compiles the source code and creates a firmware image that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/atset/at9/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake atset/at9:default\n```\n\n----------------------------------------\n\nTITLE: Using sudo with make command on Linux\nDESCRIPTION: This snippet shows an alternative approach to flashing QMK firmware using `make` and `sudo`.  It takes keyboard, keymap, and flash as arguments.  While simpler, using `sudo make` is generally discouraged. Requires the QMK build environment to be set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/faq_build.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo make <keyboard>:<keymap>:flash\n```\n\n----------------------------------------\n\nTITLE: Building the Aella keyboard firmware with QMK\nDESCRIPTION: This command builds the default keymap for the Aella keyboard using the QMK build environment. It assumes that the QMK build environment has already been set up as described in the linked documentation. The command produces a .hex or .bin file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cannonkeys/aella/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake cannonkeys/aella:default\n```\n\n----------------------------------------\n\nTITLE: Pin definitions in d48.h & config.h\nDESCRIPTION: The `d48.h` and `config.h` files contain pin definitions for the keyboard matrix and rotary encoders.  These files are crucial for configuring the microcontroller to correctly read input from the keyboard and encoders. Check these files for the specific pins used for rows, columns, and encoder buttons.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/d48/readme.md#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nCheck out the `d48.h` & `config.h` for pins used & keymap macro definition.\n```\n\n----------------------------------------\n\nTITLE: Building MNK50 Firmware with Make\nDESCRIPTION: This command builds the firmware for the `monokei/mnk50` keyboard using the `default` keymap within the QMK Firmware environment.  It assumes the user has already set up their build environment according to the QMK documentation. The resulting firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/monokei/mnk50/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake monokei/mnk50:default\n```\n\n----------------------------------------\n\nTITLE: Setting Tempo in QMK Audio\nDESCRIPTION: These C functions allow you to modify the audio tempo, which is the speed at which songs are played.  `audio_set_tempo` sets the tempo directly, while `audio_increase_tempo` and `audio_decrease_tempo` adjust the tempo by a specified amount. The tempo is measured in beats per minute (BPM).\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/audio.md#_snippet_16\n\nLANGUAGE: c\nCODE:\n```\nvoid audio_set_tempo(uint8_t tempo);\nvoid audio_increase_tempo(uint8_t tempo_change);\nvoid audio_decrease_tempo(uint8_t tempo_change);\n```\n\n----------------------------------------\n\nTITLE: Building VIA-Enabled Firmware - QMK\nDESCRIPTION: This command builds the VIA-enabled firmware for the hannah910/rev2 keyboard. It uses the `make` command with the target `mechlovin/hannah910/rev2:via`. This configuration includes support for VIA, allowing users to customize the keyboard layout through the VIA software. The QMK build environment must be configured beforehand.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechlovin/hannah910/rev2/readme.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nmake mechlovin/hannah910/rev2:via\n```\n\n----------------------------------------\n\nTITLE: Flashing G4M3R Alpha Firmware with QMK\nDESCRIPTION: This command compiles and flashes the default keymap for the G4M3R Alpha keyboard onto the Pro Micro controller using the QMK Firmware. It requires a correctly configured QMK build environment and a connected keyboard. It compiles the firmware and then uses a flashing tool to upload it to the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wsk/g4m3ralpha/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake wsk/g4m3ralpha:default:flash\n```\n\n----------------------------------------\n\nTITLE: Initialize Display with `qp_init` in C\nDESCRIPTION: The `qp_init` function initializes the display device after it has been created. It accepts the `painter_device_t` object and a `painter_rotation_t` parameter to set the correct orientation of the display. The rotation parameter can be `QP_ROTATION_0`, `QP_ROTATION_90`, `QP_ROTATION_180`, or `QP_ROTATION_270`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/quantum_painter.md#_snippet_43\n\nLANGUAGE: c\nCODE:\n```\nbool qp_init(painter_device_t device, painter_rotation_t rotation);\n```\n\n----------------------------------------\n\nTITLE: Flashing kk980 Firmware with Make\nDESCRIPTION: This command flashes the default keymap for the kk980 keyboard onto the device using the `make` command within the QMK firmware environment. It relies on the `dfu-programmer` or similar flashing tool being installed and configured. The keyboard will be put into bootloader mode before flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/sets3n/kk980/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake sets3n/kk980:default:flash\n```\n\n----------------------------------------\n\nTITLE: Setting Split Connection Check Timeout\nDESCRIPTION: This definition sets the amount of time (in milliseconds) the master will wait before retrying a connection to the slave after a disconnection is flagged. Setting this to 0 disables this throttling of communications which can save some firmware size. It is defined in `config.h`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/split_keyboard.md#_snippet_14\n\nLANGUAGE: c\nCODE:\n```\n#define SPLIT_CONNECTION_CHECK_TIMEOUT 500\n```\n\n----------------------------------------\n\nTITLE: Compile Dactyl Manuform Firmware for Black Pill\nDESCRIPTION: This command compiles the firmware for a Dactyl Manuform 6x6 keyboard using an STM32F4 Black Pill controller. It specifies the keyboard and keymap to use during compilation. This will create a .bin or .uf2 file, suitable for flashing via the tinyuf2 bootloader.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/dactyl_manuform/6x6/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nqmk compile -kb keyboards/handwired/dactyl_manuform/6x6/blackpill_f411 -km default\n```\n\n----------------------------------------\n\nTITLE: Building BM60HSRGB_Poker Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the BM60HSRGB_Poker/rev1 keyboard using the QMK build environment. It assumes that the QMK build environment has already been set up according to the QMK documentation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kprepublic/bm60hsrgb_poker/rev1/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake kprepublic/bm60hsrgb_poker/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Specifying Layout with FORCE_LAYOUT argument\nDESCRIPTION: This snippet demonstrates how to use the `FORCE_LAYOUT` argument with the `make` command to specify a specific layout when a keyboard supports multiple conflicting layouts.  `FORCE_LAYOUT` ensures that the build process uses the intended layout.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/feature_layouts.md#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nmake <keyboard>:<layout> FORCE_LAYOUT=ortho_4x4\nmake <keyboard>:<layout> FORCE_LAYOUT=ortho_4x12\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware to EC Menhir\nDESCRIPTION: This command compiles and flashes the QMK firmware for the EC Menhir keyboard with the default keymap.  It requires a correctly configured QMK build environment and a connected keyboard in DFU mode or similar.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cipulot/ec_menhir/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake cipulot/ec_menhir:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building EC Pro2 Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the EC Pro2 keyboard using the QMK build environment.  It requires a properly configured QMK build environment. The output is a firmware file suitable for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cipulot/ec_pro2/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake cipulot/ec_pro2:default\n```\n\n----------------------------------------\n\nTITLE: Building Waka60 Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Waka60 keyboard using the QMK build environment. It compiles the necessary source code and generates a firmware image that can be flashed onto the keyboard's microcontroller.  The command assumes that the QMK build environment has been correctly set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechwild/waka60/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake mechwild/waka60:default\n```\n\n----------------------------------------\n\nTITLE: Draw Circle with `qp_circle` in C\nDESCRIPTION: The `qp_circle` function draws a circle on the display. It takes the `painter_device_t`, the x and y coordinates of the center of the circle, the radius, the hue, saturation, and value (HSV) color components, and a boolean indicating whether the circle should be filled.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/quantum_painter.md#_snippet_56\n\nLANGUAGE: c\nCODE:\n```\nbool qp_circle(painter_device_t device, uint16_t x, uint16_t y, uint16_t radius, uint8_t hue, uint8_t sat, uint8_t val, bool filled);\n```\n\n----------------------------------------\n\nTITLE: Defining Per-Key Auto Shift Timeout (QMK, C)\nDESCRIPTION: This snippet demonstrates how to define custom timeout values for specific keys using the `AUTO_SHIFT_TIMEOUT_PER_KEY` define and the `get_autoshift_timeout` function. This allows for more granular control over Auto Shift behavior. You need to define `AUTO_SHIFT_TIMEOUT_PER_KEY` in `config.h` and then implement this function.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/auto_shift.md#_snippet_3\n\nLANGUAGE: c\nCODE:\n```\n#define AUTO_SHIFT_TIMEOUT_PER_KEY\n```\n\nLANGUAGE: c\nCODE:\n```\nuint16_t get_autoshift_timeout(uint16_t keycode, keyrecord_t *record) {\n    switch(keycode) {\n        case AUTO_SHIFT_NUMERIC:\n            return 2 * get_generic_autoshift_timeout();\n        case AUTO_SHIFT_SPECIAL:\n            return get_generic_autoshift_timeout() + 50;\n        case AUTO_SHIFT_ALPHA:\n        default:\n            return get_generic_autoshift_timeout();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Building PH ARISU Keyboard Firmware - QMK\nDESCRIPTION: This command is used to build the default firmware for the PH ARISU keyboard using the QMK firmware build environment. It specifies the keyboard layout (nightly_boards/ph_arisu) and the keymap (default).  It requires the QMK build environment to be properly set up. The output will be a firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/nightly_boards/ph_arisu/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake nightly_boards/ph_arisu:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Turkishish Keymap for Heisenberg via QMK Make\nDESCRIPTION: This command is used to compile and flash the 'turkishish' keymap onto a handwired Heisenberg keyboard using the QMK firmware. It relies on the QMK build environment and assumes that the handwired/heisenberg keyboard definition and the turkishish keymap are correctly configured within the QMK firmware structure.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/heisenberg/keymaps/turkishish/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/heisenberg:turkishish\n```\n\n----------------------------------------\n\nTITLE: Define External Flash Size (C)\nDESCRIPTION: This configuration option defines the total size of the external FLASH chip in bytes. This parameter is crucial for addressing calculations and ensuring that read/write operations stay within the bounds of the FLASH memory.  The value must accurately reflect the total capacity of the connected FLASH chip.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/flash.md#_snippet_5\n\nLANGUAGE: C\nCODE:\n```\n#define EXTERNAL_FLASH_SIZE                  (512 * 1024)\n```\n\n----------------------------------------\n\nTITLE: Including IS31FL3741 Driver in rules.mk\nDESCRIPTION: Adds the necessary source files and I2C dependency to your `rules.mk` file for using the IS31FL3741 driver. The appropriate file (mono or RGB) must be included depending on your LED setup. `I2C_DRIVER_REQUIRED = yes` enables the I2C driver.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/is31fl3741.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nCOMMON_VPATH += $(DRIVER_PATH)/led/issi\nSRC += is31fl3741-mono.c # For single-color\nSRC += is31fl3741.c # For RGB\nI2C_DRIVER_REQUIRED = yes\n```\n\n----------------------------------------\n\nTITLE: Including IS31FL3737 Driver in rules.mk\nDESCRIPTION: This snippet shows how to include the IS31FL3737 driver in the `rules.mk` file for the QMK firmware. It adds the driver path to `COMMON_VPATH`, specifies the source files for single-color and RGB versions, and sets the `I2C_DRIVER_REQUIRED` flag.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/is31fl3737.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nCOMMON_VPATH += $(DRIVER_PATH)/led/issi\nSRC += is31fl3737-mono.c # For single-color\nSRC += is31fl3737.c # For RGB\nI2C_DRIVER_REQUIRED = yes\n```\n\n----------------------------------------\n\nTITLE: Building a Keymap with Docker\nDESCRIPTION: Uses the `util/docker_build.sh` script to build a specified keymap for a given keyboard.  The script compiles the firmware and places the resulting `.hex` or `.bin` file in the QMK directory. Keymap parameter is optional and if ommited all keymaps are used.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/getting_started_docker.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nutil/docker_build.sh <keyboard>:<keymap>\n# For example: util/docker_build.sh planck/rev6:default\n```\n\n----------------------------------------\n\nTITLE: Building Conone 65 Keyboard Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the Conone 65 keyboard using the QMK build environment. It assumes the build environment has already been properly set up according to the QMK documentation.  The command compiles the keyboard layout and core firmware components into a hex file ready for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kindakeyboards/conone65/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake kindakeyboards/conone65:default\n```\n\n----------------------------------------\n\nTITLE: Building QMK Firmware for Dygma Raise\nDESCRIPTION: This command builds the QMK firmware for the Dygma Raise keyboard with the ANSI layout using the default configuration.  It assumes that the QMK build environment is already set up and configured. No specific dependencies are listed beyond the standard QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/dygma/raise/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake handwired/dygma/raise/ansi:default\n```\n\n----------------------------------------\n\nTITLE: Enabling SPI Driver in QMK Firmware\nDESCRIPTION: This snippet demonstrates the new way to enable the SPI driver in QMK Firmware. Instead of adding `spi_master.c` to `SRC` or `QUANTUM_LIB_SRC`, you now use `SPI_DRIVER_REQUIRED = yes`. This allows the build system to manage peripheral dependencies automatically.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/ChangeLog/20231126.md#_snippet_4\n\nLANGUAGE: Makefile\nCODE:\n```\nSPI_DRIVER_REQUIRED = yes\n```\n\n----------------------------------------\n\nTITLE: Including SNLED27351 driver in rules.mk\nDESCRIPTION: This code snippet demonstrates how to include the SNLED27351 driver source files in your `rules.mk` file for standalone usage. It specifies the necessary source files for both single-color and RGB configurations and ensures the I2C driver is required.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/snled27351.md#_snippet_0\n\nLANGUAGE: Make\nCODE:\n```\nCOMMON_VPATH += $(DRIVER_PATH)/led\nSRC += snled27351-mono.c # For single-color\nSRC += snled27351.c # For RGB\nI2C_DRIVER_REQUIRED = yes\n```\n\n----------------------------------------\n\nTITLE: Flashing XD84 Pro Keyboard Firmware with QMK\nDESCRIPTION: This command flashes the built firmware onto the XD84 Pro keyboard using the QMK build environment. It requires the keyboard to be in a flashable state (e.g., bootloader mode) and assumes the QMK build environment is properly configured. It takes no input and programs the keyboard's flash memory.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/xiudi/xd84pro/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake xiudi/xd84pro:default:flash\n```\n\n----------------------------------------\n\nTITLE: Draw Line with `qp_line` in C\nDESCRIPTION: The `qp_line` function draws a line on the display between two specified points. It takes the `painter_device_t`, the x and y coordinates of the start and end points, and the hue, saturation, and value (HSV) color components as parameters.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/quantum_painter.md#_snippet_52\n\nLANGUAGE: c\nCODE:\n```\nbool qp_line(painter_device_t device, uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint8_t hue, uint8_t sat, uint8_t val);\n```\n\n----------------------------------------\n\nTITLE: Momentary Layer Activation and Keycode on Tap using LT\nDESCRIPTION: This function momentarily activates a layer when held down, and sends a specified keycode when tapped. It only supports layers 0-15 and requires the keycode to be within the Basic Keycode set. `LT` can be used to assign a key to a layer when held, and another action when tapped.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/feature_layers.md#_snippet_4\n\nLANGUAGE: c\nCODE:\n```\nLT(layer, kc)\n```\n\n----------------------------------------\n\nTITLE: Compiling Custom Redox Media Keyboard Layout\nDESCRIPTION: This command compiles a custom keymap for the Redox Media keyboard.  The user should replace `<your-layout>` with their desired keymap name. This command assumes the user has already created a custom keymap folder by copying and adapting the `keymaps/media_ch` folder.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/redox_media/readme.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nqmk compile -kb redox/media -km media_<your-layout>\n```\n\n----------------------------------------\n\nTITLE: Building BM60HSRGB_Poker Firmware with QMK\nDESCRIPTION: This snippet provides the `make` commands to build the firmware for the BM60HSRGB_Poker keyboard using the QMK Firmware build environment. It distinguishes between rev1 and rev2 hardware versions. Ensure the QMK build environment is set up before executing these commands.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kprepublic/bm60hsrgb_poker/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nfor rev1: make kprepublic/bm60hsrgb_poker/rev1:default\nfor rev2: make kprepublic/bm60hsrgb_poker/rev2:default\n```\n\n----------------------------------------\n\nTITLE: Building Keychron V10 Firmware with Make\nDESCRIPTION: These `make` commands are used to compile the QMK firmware for the Keychron V10 keyboard.  The first command builds the firmware for the ANSI layout with an encoder, while the second builds for the ISO layout with an encoder. These commands require a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keychron/v10/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake keychron/v10/ansi_encoder:default\nmake keychron/v10/iso_encoder:default\n```\n\n----------------------------------------\n\nTITLE: Compiling TBK Mini Firmware\nDESCRIPTION: This command compiles the QMK firmware for the TBK Mini keyboard. It requires specifying the keyboard layout, shield version (v1, v2 with elitec, splinky, or stemcell), and keymap.  The `VERSION` placeholder needs to be replaced with the specific hardware version.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/bastardkb/tbkmini/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nqmk compile -kb bastardkb/tbkmini/{VERSION}/elitec -km {KEYMAP}\n```\n\n----------------------------------------\n\nTITLE: Flashing Vanana Firmware (QMK)\nDESCRIPTION: This command builds and flashes the default firmware to the Vanana keyboard (revision 2) using the QMK build environment. It extends the build command by adding the `:flash` target, which triggers the flashing process after a successful build. The command also assumes the QMK build environment is already set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/delikeeb/vanana/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake delikeeb/vanana/rev2:default:flash\n```\n\n----------------------------------------\n\nTITLE: Enabling RGB Matrix in rules.mk - Make\nDESCRIPTION: This snippet disables RGBLIGHT and enables RGB_MATRIX in the `rules.mk` file. This configuration is essential for using the RGB Matrix features on the Corne keyboard instead of the standard RGB Light. Disabling RGBLIGHT prevents conflicts and ensures that only RGB Matrix effects are active.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/crkbd/readme.md#_snippet_2\n\nLANGUAGE: make\nCODE:\n```\nRGBLIGHT_ENABLE = no\nRGB_MATRIX_ENABLE = yes\n```\n\n----------------------------------------\n\nTITLE: Writing Character to OLED (C)\nDESCRIPTION: This function writes a single character to the OLED display at the current cursor position.  The `invert` parameter controls whether the pixels are inverted. This is the main handler for writing character data to the display buffer, and it also advances the cursor.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/oled_driver.md#_snippet_19\n\nLANGUAGE: c\nCODE:\n```\n// Writes a single character to the buffer at current cursor position\n// Advances the cursor while writing, inverts the pixels if true\n// Main handler that writes character data to the display buffer\nvoid oled_write_char(const char data, bool invert);\n```\n\n----------------------------------------\n\nTITLE: Flashing QMK Firmware\nDESCRIPTION: This command builds and flashes the QMK firmware for the specified keyboard and keymap.  It utilizes the QMK command-line interface to compile and upload the firmware to the keyboard's microcontroller.  The keyboard needs to be put into bootloader mode during the flash process.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/dactyl_manuform/6x7/keymaps/iso-de/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nqmk flash -kb handwired/dactyl_manuform/6x7 -km iso-de\n```\n\n----------------------------------------\n\nTITLE: Building the Sun to USB Converter Firmware with Make\nDESCRIPTION: This command demonstrates how to build the firmware for the Sun to USB keyboard converter using the `make` command within the QMK firmware environment.  It assumes the QMK build environment is correctly set up. The `converter/sun_usb/type5:default` argument specifies the keyboard type and the default keymap to be used.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/converter/sun_usb/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake converter/sun_usb/type5:default\n```\n\n----------------------------------------\n\nTITLE: Compiling QMK Firmware for Adafruit MacroPad (Shell)\nDESCRIPTION: This command compiles the QMK firmware for the Adafruit MacroPad RP2040 keyboard with the default keymap. It uses the `qmk compile` command, specifying the keyboard (`-kb adafruit/macropad`) and keymap (`-km default`). The command requires the QMK build environment to be properly set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/adafruit/macropad/readme.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nqmk compile -kb adafruit/macropad -km default\n```\n\n----------------------------------------\n\nTITLE: Flashing Tragicforce 68 Firmware with QMK and avrdude\nDESCRIPTION: This command flashes the compiled firmware onto the Tragicforce 68 keyboard using QMK and the avrdude tool. It requires that the QMK build environment is set up correctly and that the `keebio/tragicforce68:default` target has been built. Avrdude is used to upload the firmware to the Pro Micro controller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keebio/tragicforce68/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake keebio/tragicforce68:default:avrdude\n```\n\n----------------------------------------\n\nTITLE: Building WT80-A Firmware with Make\nDESCRIPTION: This snippet shows how to build the default firmware for the wilba.tech WT80-A keyboard using the `make` command in the QMK Firmware environment.  It assumes that the QMK build environment has been properly set up. The resulting firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wilba_tech/wt80_a/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake wilba_tech/wt80_a:default\n```\n\n----------------------------------------\n\nTITLE: Building Red Scarf II+ Ver.C Firmware with Make\nDESCRIPTION: This command builds the default firmware for the Red Scarf II+ Ver.C keyboard using the 'make' command within the QMK Firmware environment. It requires the QMK build environment to be set up correctly. The output is a firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/redscarf_iiplus/verc/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake redscarf_iiplus/verc:default\n```\n\n----------------------------------------\n\nTITLE: Disable RGB Light Animations in `config.h`\nDESCRIPTION: Disables specific RGB Light animations in the keymap's `config.h` to reduce firmware size. By undefining these animations, the code associated with them is removed from the compiled firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/squeezing_avr.md#_snippet_12\n\nLANGUAGE: c\nCODE:\n```\n#undef RGBLIGHT_ANIMATIONS\n#undef RGBLIGHT_EFFECT_BREATHING\n#undef RGBLIGHT_EFFECT_RAINBOW_MOOD\n#undef RGBLIGHT_EFFECT_RAINBOW_SWIRL\n#undef RGBLIGHT_EFFECT_SNAKE\n#undef RGBLIGHT_EFFECT_KNIGHT\n#undef RGBLIGHT_EFFECT_CHRISTMAS\n#undef RGBLIGHT_EFFECT_STATIC_GRADIENT\n#undef RGBLIGHT_EFFECT_RGB_TEST\n#undef RGBLIGHT_EFFECT_ALTERNATING\n#undef RGBLIGHT_EFFECT_TWINKLE\n```\n\n----------------------------------------\n\nTITLE: Flashing The Stick Firmware\nDESCRIPTION: This command flashes the built firmware onto the Keebio The Stick keyboard. It uses the `make` command with the keyboard name, default keymap, and flash target specified. Ensure that the QMK build environment is properly set up and the keyboard is in the correct flashing mode before running this command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keebio/stick/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake keebio/stick:default:flash\n```\n\n----------------------------------------\n\nTITLE: Commit Message Example\nDESCRIPTION: This example demonstrates the recommended format for commit messages in QMK, including a short description on the first line, an empty second line, and a detailed explanation on subsequent lines.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/contributing.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nAdjust the fronzlebop for the kerpleplork\n\nThe kerpleplork was intermittently failing with error code 23. The root cause was the fronzlebop setting, which causes the kerpleplork to activate every N iterations.\n\nLimited experimentation on the devices I have available shows that 7 is high enough to avoid confusing the kerpleplork, but I'd like to get some feedback from people with ARM devices to be sure.\n```\n\n----------------------------------------\n\nTITLE: Building Z70 Ultra Firmware with QMK\nDESCRIPTION: This snippet shows the command to build the default firmware for the Z70 Ultra keyboard's rev1 version using the QMK build environment. It assumes that the QMK build environment has already been set up. The command invokes the `make` utility with the target `melgeek/z70ultra/rev1:default`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/melgeek/z70ultra/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake melgeek/z70ultra/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Defining MK_3_SPEED for Constant Speed Mode in QMK (C)\nDESCRIPTION: This code snippet demonstrates how to enable constant speed mode for mouse keys in QMK firmware by defining `MK_3_SPEED` in the `config.h` file.  This allows the user to define multiple, constant speeds for the cursor and mouse wheel.  No dependencies other than the QMK firmware environment are required.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/mouse_keys.md#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n#define MK_3_SPEED\n```\n\n----------------------------------------\n\nTITLE: PWM Frequency Configuration (C)\nDESCRIPTION: This C code snippet shows how to configure the PWM frequency for the IS31FL3742A driver in your `config.h` file.  It defines the `IS31FL3742A_PWM_FREQUENCY` macro to one of the predefined frequency options.  Selecting the appropriate frequency impacts the LED refresh rate and visual effects.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/is31fl3742a.md#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n#define IS31FL3742A_PWM_FREQUENCY IS31FL3742A_PWM_FREQUENCY_29K_HZ\n```\n\n----------------------------------------\n\nTITLE: Building j73gl Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the j73gl keyboard using the QMK build environment. It assumes that the build environment has been properly set up according to the QMK documentation. It takes no specific input parameters and outputs a compiled firmware ready to be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/gl516/j73gl/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake gl516/j73gl:default\n```\n\n----------------------------------------\n\nTITLE: Building Launchpad Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Launchpad rev1 using the QMK build environment. It requires a properly set up QMK build environment and invokes the make command with the keyboard and keymap specified. This compiles the firmware which can then be flashed to the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/maple_computing/launchpad/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake maple_computing/launchpad/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Configuring Sea-Picro RGB (QMK)\nDESCRIPTION: This configuration in `rules.mk` enables the dedicated 5V RGB pin on the Sea-Picro microcontroller for the xdboards/recon keyboard. `CONVERT_TO = rp2040_ce` specifies the converter and `USE_SEA_PICRO_RGB_PIN = yes` activates the RGB pin. This configuration is necessary to use the dedicated RGB features of the Sea-Picro.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/xdboards/recon/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nCONVERT_TO = rp2040_ce\nUSE_SEA_PICRO_RGB_PIN = yes\n```\n\n----------------------------------------\n\nTITLE: Enable Minimal Printf in `rules.mk`\nDESCRIPTION: Enables a minimal version of `printf` and `snprintf` in `rules.mk` to reduce the firmware size. This smaller implementation saves approximately 400 bytes. However, it has limited functionality and does not support zero padding or field width specifiers.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/squeezing_avr.md#_snippet_3\n\nLANGUAGE: make\nCODE:\n```\nAVR_USE_MINIMAL_PRINTF = yes\n```\n\n----------------------------------------\n\nTITLE: Iterating Configuration Values - Python\nDESCRIPTION: Demonstrates how to iterate through the QMK CLI configuration using nested loops. This snippet retrieves each section and key-value pair within the configuration and logs them using `cli.log.info`. It provides a way to access all configuration settings.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/cli_development.md#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfor section in cli.config:\n    for key in cli.config[section]:\n        cli.log.info('%s.%s: %s', section, key, cli.config[section][key])\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for Proton C\nDESCRIPTION: This command builds the QMK firmware for the ckeys/handwire_101 keyboard with Proton C as the target microcontroller. It specifies the keyboard layout as 'default' and uses 'proton_c' for the conversion. This process generates the necessary firmware files for flashing onto the Proton C board.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ckeys/handwire_101/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake ckeys/handwire_101:default CONVERT_TO=proton_c\n```\n\n----------------------------------------\n\nTITLE: Flashing Bootloader with Block Device Path\nDESCRIPTION: This snippet provides an example of using the `dd` command with the identified virtual block device path (e.g., `/dev/sdx`) to flash the bootloader.  It's essential to replace `FLASH.bin` with the actual bootloader file name.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/hhkb/yang/memo.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndd if=FLASH.bin of=/dev/sdx seek=4\n```\n\n----------------------------------------\n\nTITLE: Custom Auto Shift Key Definition - C\nDESCRIPTION: Defines a function to customize which keys are subject to Auto Shift.  This example specifies that the `KC_DOT` key should use Auto Shift. The function returns `true` if the keycode should be handled by the custom Auto Shift logic, and `false` otherwise.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/auto_shift.md#_snippet_6\n\nLANGUAGE: c\nCODE:\n```\nbool get_custom_auto_shifted_key(uint16_t keycode, keyrecord_t *record) {\n    switch(keycode) {\n        case KC_DOT:\n            return true;\n        default:\n            return false;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Include Print Header - C\nDESCRIPTION: This code snippet includes the `print.h` header file, which is necessary for using the `print` and `uprintf` functions for sending debug messages. This header is part of the QMK firmware library and should be included at the top of the file where you want to use the print functions.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/faq_debug.md#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n#include \"print.h\"\n```\n\n----------------------------------------\n\nTITLE: Building Ellora65 Firmware with QMK\nDESCRIPTION: This snippet demonstrates how to compile the default firmware for the Ellora65 keyboard using the QMK build environment. It assumes the QMK build environment has been properly set up. This command will generate a .hex or .bin file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kikoslab/ellora65/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake kikoslab/ellora65:default\n```\n\n----------------------------------------\n\nTITLE: Enabling QMK Command Feature in rules.mk\nDESCRIPTION: This snippet demonstrates how to enable the Command feature within the `rules.mk` file of a QMK keyboard firmware. By default, the Command feature may be disabled, so adding this line to the `rules.mk` file explicitly enables it. This makes the Command functionality, such as debugging and layer switching, available for use.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/command.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nCOMMAND_ENABLE = yes\n```\n\n----------------------------------------\n\nTITLE: Building Polyandry Firmware with QMK Compile and Pro Micro Controller\nDESCRIPTION: This command compiles the default firmware for the Polyandry keyboard specifically targeting a Pro Micro controller using the `qmk compile` command. It offers an alternative compilation method specifying the controller type. This assumes the QMK Firmware build environment is configured correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/40percentclub/polyandry/readme.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nqmk compile -kb 40percentclub/polyandry/promicro -km default\n```\n\n----------------------------------------\n\nTITLE: Flashing ELISE keyboard firmware with Make\nDESCRIPTION: This command flashes the compiled firmware to the ELISE keyboard using the QMK Make build system. It targets the 'draytronics/elise' keyboard and the 'default' keymap. The target device must be in DFU mode prior to running this command. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/draytronics/elise/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake draytronics/elise:default:flash\n```\n\n----------------------------------------\n\nTITLE: Adjusting De-Ghosting Resistor Values in config.h\nDESCRIPTION: This snippet shows how to adjust the pull-up and pull-down resistor values for de-ghosting purposes by defining `IS31FL3737_SW_PULLUP` and `IS31FL3737_CS_PULLDOWN` in `config.h`. Valid values and their corresponding resistances are detailed in the documentation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/is31fl3737.md#_snippet_2\n\nLANGUAGE: c\nCODE:\n```\n#define IS31FL3737_SW_PULLUP IS31FL3737_PUR_0_OHM\n#define IS31FL3737_CS_PULLDOWN IS31FL3737_PDR_0_OHM\n```\n\n----------------------------------------\n\nTITLE: Building the Makrosu Keypad Firmware\nDESCRIPTION: This code snippet shows how to build the default firmware for the Makrosu keypad using the QMK build system. It assumes that the QMK build environment is already set up.  The 'make' command compiles the firmware and creates a .hex file that can be flashed to the Pro Micro controller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/makrosu/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake makrosu:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Macropad Firmware with QMK Makefile\nDESCRIPTION: This command builds and flashes the QMK firmware for the AlhenKB Macropad 5x4 with the default keymap. It requires the QMK build environment and a compatible flashing tool to be installed. It assumes the device is in a state ready to be flashed (e.g. bootloader mode).\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/alhenkb/macropad5x4/readme.md#_snippet_2\n\nLANGUAGE: Makefile\nCODE:\n```\nmake alhenkb/macropad5x4:default:flash\n```\n\n----------------------------------------\n\nTITLE: Adding Source File in rules.mk\nDESCRIPTION: This snippet shows how to add the `engine.c` source file to the `SRC` variable in your `rules.mk` file when using the chording engine. This includes the chording engine's source code in the firmware build. Make sure the path to `engine.c` is correct relative to your project structure.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/gboards/readme.md#_snippet_2\n\nLANGUAGE: Makefile\nCODE:\n```\nSRC                 +=  g/engine.c \n```\n\n----------------------------------------\n\nTITLE: Building QMK Firmware with Docker\nDESCRIPTION: This command builds the QMK firmware using a Docker container. It mounts the local QMK repository into the container and sets environment variables for the keymap and keyboard configurations. The built firmware can then be accessed in the mounted directory.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/frenchdev/keymaps/default/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ndocker run --rm -e keymap=default -e keyboard=frenchdev --rm -v D:/Repositories/qmk:/qmk:rw edasque/qmk_firmware\n```\n\n----------------------------------------\n\nTITLE: Building ArrowPad Firmware with Keymap\nDESCRIPTION: This command builds the ArrowPad keyboard firmware using the specified keymap.  The available keymaps include 'default', 'pad_21', 'pad_24', and custom keymaps defined in the 'keymaps' folder. The resulting .hex file can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/arrow_pad/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ make handwired/arrow_pad:[default|pad_21|pad_24|<name>]\n```\n\n----------------------------------------\n\nTITLE: Enabling APA102 Driver in QMK Firmware\nDESCRIPTION: This snippet shows how to enable the APA102 driver in QMK Firmware. Previously, you would add `apa102.c` to `SRC`. Now, you specify `APA102_DRIVER_REQUIRED = yes` to enable the driver. This simplifies dependency management within the build system.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/ChangeLog/20231126.md#_snippet_2\n\nLANGUAGE: Makefile\nCODE:\n```\nAPA102_DRIVER_REQUIRED = yes\n```\n\n----------------------------------------\n\nTITLE: Flashing the BM40hsrgb Firmware\nDESCRIPTION: This command builds and flashes the default firmware for the BM40hsrgb keyboard (rev2 version) onto the keyboard. It combines the build and flash steps into a single command using the QMK make system. Requires a properly configured build environment and a connected keyboard in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kprepublic/bm40hsrgb/rev2/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake kprepublic/bm40hsrgb/rev2:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for BM60HSRGB Keyboard (rev1)\nDESCRIPTION: This command builds the default firmware for the BM60HSRGB keyboard (revision 1) using the QMK build environment. It assumes that the QMK build environment has already been set up correctly. The output will be the compiled firmware ready to be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kprepublic/bm60hsrgb/rev1/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake kprepublic/bm60hsrgb/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Wyvern HS Firmware with QMK\nDESCRIPTION: This command compiles and flashes the QMK firmware to the Bredworks Wyvern HS keyboard with the default keymap. It requires a properly configured QMK build environment and a connected keyboard in bootloader mode.  The command uses the dfu-programmer or similar tools to write the compiled firmware to the keyboard's flash memory.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/bredworks/wyvern_hs/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake bredworks/wyvern_hs:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building LFK87 Firmware with Make\nDESCRIPTION: This code snippet shows how to build the default firmware for the LFK87 keyboard using the `make` command. It assumes that the build environment has already been set up according to the QMK documentation. This will compile the firmware, which can then be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/lfkeyboards/lfk87/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake lfkeyboards/lfk87:default\n```\n\n----------------------------------------\n\nTITLE: Example: Neutralizing Left Alt and Left GUI (C)\nDESCRIPTION: This example demonstrates how to neutralize left Alt and left GUI keys by defining the `MODS_TO_NEUTRALIZE` macro. This configuration prevents applications from falsely triggering actions when those modifiers are suppressed by key overrides.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/key_overrides.md#_snippet_6\n\nLANGUAGE: c\nCODE:\n```\n// Neutralize left alt and left GUI (Default value)\n#define MODS_TO_NEUTRALIZE { MOD_BIT(KC_LEFT_ALT), MOD_BIT(KC_LEFT_GUI) }\n```\n\n----------------------------------------\n\nTITLE: Building Clueboard 66% Firmware\nDESCRIPTION: This snippet provides the command to build the default firmware for the Clueboard 66% keyboard, specifically for revision 3 (rev3). It assumes that the QMK build environment has already been set up. The command utilizes the `make` utility with the target `clueboard/66/rev3:default`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/clueboard/66/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake clueboard/66/rev3:default\n```\n\n----------------------------------------\n\nTITLE: Compiling QMK Firmware\nDESCRIPTION: This command compiles the QMK firmware for the `ez_maker/directpins/teensy2` keyboard with the `default` keymap. It utilizes the `qmk compile` command, which is part of the QMK build environment. The compilation process generates the firmware file that can be flashed onto the microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ez_maker/directpins/teensy_2/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nqmk compile -kb ez_maker/directpins/teensy2 -km default\n```\n\n----------------------------------------\n\nTITLE: Building the E6-V2 LE BMC Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the exclusive/e6v2/le_bmc keyboard. It uses the QMK make system to compile the source code and generate a firmware file ready for flashing. This requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/exclusive/e6v2/le_bmc/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake exclusive/e6v2/le_bmc:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware for Keymaps - qmk flash\nDESCRIPTION: This command flashes firmware for a specified keyboard and keymap. It requires the `-kb` and `-km` flags to specify the keyboard and keymap names, respectively.  A bootloader can optionally be provided with the `-bl` flag.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/cli_commands.md#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nqmk flash -kb <keyboard_name> -km <keymap_name> [-bl <bootloader>] [-c] [-e <var>=<value>] [-j <num_jobs>]\n```\n\n----------------------------------------\n\nTITLE: Flashing Red Herring Firmware (QMK)\nDESCRIPTION: This command flashes the default firmware onto the Red Herring keyboard. It requires the QMK build environment to be set up. The command builds the firmware if it hasn't been built already and then uses a flashing tool (determined by the keyboard's bootloader) to program the firmware onto the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/dcpedit/redherring/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake dcpedit/redherring:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing QEZ Keyboard Firmware (QMK)\nDESCRIPTION: This command builds and flashes the QMK firmware for the QEZ keyboard with the default keymap. It assumes the QMK build environment is correctly configured and that the keyboard is connected and in a flashable state.  The flash target will vary depending on the bootloader used on the QEZ.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kb_elmo/qez/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake kb_elmo/qez:default:flash\n```\n\n----------------------------------------\n\nTITLE: Updating Your Fork's Master Branch\nDESCRIPTION: These Git commands update your fork's master branch with the latest changes from the upstream QMK Firmware repository. It checks out the master branch, fetches updates from upstream, merges them into your local master, and then pushes the updated master branch to your origin repository.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/newbs_git_using_your_master_branch.md#_snippet_2\n\nLANGUAGE: Git\nCODE:\n```\ngit checkout master\ngit fetch upstream\ngit pull upstream master\ngit push origin master\n```\n\n----------------------------------------\n\nTITLE: Setting Global Current Control (C)\nDESCRIPTION: This snippet demonstrates how to configure the global current control value for the IS31FL3736. It allows adjusting the overall brightness of the LEDs by limiting the current sunk by the `CSx` pins. The value ranges from 0 to 255. Dependencies: `IS31FL3736_GLOBAL_CURRENT` macro.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/is31fl3736.md#_snippet_3\n\nLANGUAGE: C\nCODE:\n```\n#define IS31FL3736_GLOBAL_CURRENT 0xFF\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware (No EEPROM Update)\nDESCRIPTION: This command builds and flashes the QMK firmware to both sides of the alt34 without updating the EEPROM. This is sufficient for keymap changes and other firmware updates. It is recommended to flash both halves. Replace `alt34/rev1` with the correct revision if needed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/alt34/readme.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nmake alt34/rev1:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Wakizashi40 Firmware with Make\nDESCRIPTION: This snippet shows how to build the default firmware for the Wakizashi40 keyboard using the `make` command.  It assumes that the QMK build environment has already been set up. The resulting firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/wakizashi40/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake handwired/wakizashi40:default\n```\n\n----------------------------------------\n\nTITLE: Flashing ChickPad Firmware with Make\nDESCRIPTION: This command builds and flashes the default firmware for the ChickPad keyboard. It uses the `make` command with specific arguments to specify the keyboard, keymap, and `flash` target within the QMK Firmware environment. This assumes the bootloader is ready and a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/era/sirind/chickpad/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake era/sirind/chickpad:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Firmware with Make for MTB60 (Solder)\nDESCRIPTION: This command builds the default firmware for the MTB60 (Solder Edition) keyboard. It utilizes the `make` command with the target specified as `mtbkeys/mtb60/solder:default`. This assumes that the QMK build environment has already been set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mtbkeys/mtb60/solder/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake mtbkeys/mtb60/solder:default\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Userspace Name (Make)\nDESCRIPTION: This snippet shows how to override the default userspace name using the `USER_NAME` variable in the layout's `rules.mk`.  This is helpful when different keymaps (e.g., ANSI and ISO layouts) share a common userspace but have different names.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/feature_userspace.md#_snippet_3\n\nLANGUAGE: make\nCODE:\n```\nUSER_NAME := mylayout\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Songs (config.h)\nDESCRIPTION: Shows how to override the default songs by defining a new song based on existing sounds. This allows customization of the startup, goodbye, and other event sounds.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/audio.md#_snippet_12\n\nLANGUAGE: c\nCODE:\n```\n#ifdef AUDIO_ENABLE\n# define STARTUP_SONG SONG(STARTUP_SOUND)\n#endif\n```\n\n----------------------------------------\n\nTITLE: Flashing 60XT Keyboard Firmware (QMK)\nDESCRIPTION: This command builds and flashes the default firmware for the 60XT keyboard. It assumes the QMK build environment is set up and the connected device is ready to receive the firmware. The device must be in bootloader mode to flash.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cipulot/60xt/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake cipulot/60xt:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building BareDev rev1 with QMK Make\nDESCRIPTION: This command builds the default keymap for the BareDev rev1 keyboard using the QMK build environment. It requires a properly configured QMK environment. The output is a firmware file ready for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/baredev/rev1/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake handwired/baredev/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Building Jiran Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the Jiran keyboard using the QMK build environment. It requires a properly configured QMK build environment. The resulting firmware can then be flashed onto the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/jiran/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake jiran:default\n```\n\n----------------------------------------\n\nTITLE: Building OM60 Keyboard Firmware\nDESCRIPTION: This command builds the default keymap for the OM60 keyboard using the QMK build environment.  It requires the QMK build environment to be set up beforehand. The output will be a .hex or .bin file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/om60/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake om60:default\n```\n\n----------------------------------------\n\nTITLE: Building Seigaiha Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the Seigaiha keyboard. It compiles the keymap and firmware code, creating a .hex file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/yiancardesigns/seigaiha/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake yiancardesigns/seigaiha:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Choconum Firmware using Make\nDESCRIPTION: This command builds and flashes the default keymap for the Choconum numpad to the device. It builds the firmware and then attempts to flash it to the connected keyboard.  It depends on the QMK build environment and a properly configured flashing tool.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keebio/choconum/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake keebio/choconum:default:flash\n```\n\n----------------------------------------\n\nTITLE: Compiling Scylla v2 Firmware with Default Keymap (STeMCell)\nDESCRIPTION: This command compiles the Scylla v2 keyboard firmware with the default keymap using a STeMCell controller. It utilizes `qmk compile` with the `-kb` flag set to `bastardkb/scylla/v2/stemcell` and the `-km` flag set to `default`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/bastardkb/scylla/readme.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nqmk compile -kb bastardkb/scylla/v2/stemcell -km default\n```\n\n----------------------------------------\n\nTITLE: Compiling TBK Mini Firmware with v2 Shield, Splinky v3, and Default Keymap\nDESCRIPTION: This command compiles the QMK firmware for the TBK Mini keyboard with the v2 shield, Splinky v3 controller, and the default keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/bastardkb/tbkmini/readme.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nqmk compile -kb bastardkb/tbkmini/v2/splinky/v3 -km default\n```\n\n----------------------------------------\n\nTITLE: Building Oddball with PMW Sensor\nDESCRIPTION: This command builds the Oddball keyboard firmware with the PMW3360 sensor. It requires a properly configured QMK build environment and the pmw3360 keymap. The output will be the compiled firmware ready to be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/oddball/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake oddball/v2:pmw3360\n```\n\n----------------------------------------\n\nTITLE: Building Diverge TM2 Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the Diverge TM2 keyboard using QMK. It assumes that the QMK build environment has already been set up according to the QMK documentation.  The command will compile the keymap and generate a .hex file suitable for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/unikeyboard/divergetm2/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake unikeyboard/divergetm2:default\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for Moondrop Dash75 (QMK)\nDESCRIPTION: This command builds the default firmware for the Moondrop Dash75 R1 keyboard using the QMK build environment. It compiles the keymap and other configurations into a firmware image ready for flashing. Requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/moondrop/dash75/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake moondrop/dash75/r1:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Keyboard Firmware with Make\nDESCRIPTION: This command flashes the compiled firmware to the handwired/battleship_gamepad keyboard using the `make` command. It requires a configured build environment and the appropriate bootloader on the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/battleship_gamepad/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake handwired/battleship_gamepad:flash\n```\n\n----------------------------------------\n\nTITLE: Building Keycult TKL Firmware with QMK\nDESCRIPTION: This command builds the default keymap for the Keycult TKL keyboard using the QMK build environment. It requires QMK to be set up correctly, as described in the QMK documentation. The output is a firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keycult/keycult_tkl/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake keycult/keycult_tkl:default\n```\n\n----------------------------------------\n\nTITLE: Building ecila Keyboard Firmware with QMK\nDESCRIPTION: This command builds the default keymap for the ecila keyboard using the QMK firmware build environment. It compiles the necessary code to create a firmware image ready for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mincedshon/ecila/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake mincedshon/ecila:default\n```\n\n----------------------------------------\n\nTITLE: Building El Cantor HS Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the El Cantor HS keyboard using the QMK build environment.  It assumes the QMK build environment has already been set up according to the QMK documentation. The resulting firmware can then be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/elcantorhs/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake elcantorhs:default\n```\n\n----------------------------------------\n\nTITLE: Building Keyboard Firmware - Make Command\nDESCRIPTION: This command builds the firmware for the Owlab Jelly Evolv Hotswap 6.25U keyboard with the default keymap.  It leverages the QMK make system to compile the firmware for the specified keyboard, layout and keymap. Requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/owlab/jelly_evolv/hotswap/625u/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake owlab/jelly_evolv/hotswap/625u:default\n```\n\n----------------------------------------\n\nTITLE: Clearing All Pressed Keys Except Mods in QMK\nDESCRIPTION: This code snippet demonstrates how to clear all currently pressed keys, while leaving modifiers active, using the `clear_keyboard_but_mods()` function in QMK Firmware. This can be useful when you want to release all regular keys while keeping shift or control held.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/feature_macros.md#_snippet_20\n\nLANGUAGE: c\nCODE:\n```\nclear_keyboard_but_mods();\n```\n\n----------------------------------------\n\nTITLE: Building the CannonKeys Malicious Ergo Firmware\nDESCRIPTION: This code snippet shows how to build the default firmware for the CannonKeys Malicious Ergo keyboard using the QMK build environment. It assumes that the QMK build environment is already set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cannonkeys/malicious_ergo/readme.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmake cannonkeys/malicious_ergo:default\n```\n\n----------------------------------------\n\nTITLE: Building DogTag Firmware\nDESCRIPTION: Builds the default firmware for the DogTag keyboard. This command compiles the source code into a firmware image that can be flashed onto the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/takashicompany/dogtag/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake takashicompany/dogtag:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Keyboard Firmware with QMK\nDESCRIPTION: This command builds and flashes the default firmware to the Mechlovin Olly BB keyboard.  It assumes the QMK build environment is properly configured and the necessary tools for flashing (e.g., dfu-util) are installed. The keyboard needs to be in bootloader mode for this command to work.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechlovin/olly/bb/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake mechlovin/olly/bb:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building h65 Firmware with QMK\nDESCRIPTION: This command compiles the default keymap for the h65 keyboard using the QMK build environment. It relies on the QMK toolchain being properly configured and accessible in the system's PATH.  The compiled firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/hineybush/h65/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake h65:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Pluto12 Firmware (QMK)\nDESCRIPTION: This command flashes the built firmware to the psuieee/pluto12 keyboard using the QMK build environment. It requires the QMK build environment to be set up and the keyboard to be in bootloader mode. No explicit input parameters are taken.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/psuieee/pluto12/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake psuieee/pluto12:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Efreet Keyboard Firmware with QMK\nDESCRIPTION: This command builds and flashes the default firmware for the Efreet keyboard using the QMK Firmware build environment and a compatible flashing tool. It compiles the keyboard's keymap and configurations, then uploads the resulting image to the keyboard's microcontroller. Requires QMK build environment setup and a compatible flashing tool.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/efreet/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake efreet:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Clueboard 2x1800 Firmware\nDESCRIPTION: This command builds the default firmware for the Clueboard 2x1800 keyboard. It utilizes the `make` command within the QMK Firmware environment.  This requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/clueboard/2x1800/2021/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake clueboard/2x1800/2021:default\n```\n\n----------------------------------------\n\nTITLE: Building Atreus Firmware with PCB Down Orientation (AVRDUDE)\nDESCRIPTION: This command builds the Atreus keyboard firmware for older A-Star powered Atreus keyboards where the PCB labels are facing down.  It adds the `PCBDOWN=yes` flag to correct the keymap. It then flashes it using AVRDUDE.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/atreus/readme.md#_snippet_5\n\nLANGUAGE: makefile\nCODE:\n```\nmake PCBDOWN=yes atreus:default:avrdude\n```\n\n----------------------------------------\n\nTITLE: Flashing WT65-F Keyboard Firmware (QMK)\nDESCRIPTION: This command builds and flashes the default firmware for the wilba.tech WT65-F keyboard onto the device using QMK Firmware.  This assumes the QMK build environment is set up correctly and the keyboard is in a flashable state. The output is the keyboard being flashed with the newly built firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wilba_tech/wt65_f/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake wilba_tech/wt65_f:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building mk60 firmware with make command in QMK\nDESCRIPTION: This snippet demonstrates how to build the default firmware for the mk60 keyboard using the 'make' command within the QMK Firmware environment. Ensure the QMK build environment is properly set up before running this command. The resulting firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechkeys/mk60/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake mk60:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware with Make\nDESCRIPTION: This command flashes the default firmware for the mechlovin/olly/octagon keyboard to the device using the make command. It requires a properly configured QMK build environment and a connected keyboard in a flashable state.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechlovin/olly/octagon/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake mechlovin/olly/octagon:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building jopr keyboard with default keymap, QMK\nDESCRIPTION: This command compiles the QMK firmware for the 'jopr' keyboard using the 'default' keymap. It assumes that the QMK build environment has already been set up. The compiled firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/jopr/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake jopr:default\n```\n\n----------------------------------------\n\nTITLE: Building Corgi Keyboard Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the Corgi keyboard within the QMK build environment.  It compiles the keyboard's keymap and firmware based on the configuration files located in the keyprez/corgi directory.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keyprez/corgi/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake keyprez/corgi:default\n```\n\n----------------------------------------\n\nTITLE: Building the Sunsetter R2 Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the Sunsetter R2 keyboard. It assumes that the QMK build environment has been properly set up. The output is a .hex or .bin file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/charue/sunsetter_r2/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake charue/sunsetter_r2:default\n```\n\n----------------------------------------\n\nTITLE: Building Cor65 Firmware with QMK\nDESCRIPTION: This command builds the QMK firmware for the Cor65 keyboard with the 'default' keymap. It assumes the QMK build environment is already set up.  It specifies the keyboard, revision (no_backlight), and keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechlovin/zed65/no_backlight/cor65/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake mechlovin/zed65/no_backlight/cor65:default\n```\n\n----------------------------------------\n\nTITLE: Compiling QMK Firmware\nDESCRIPTION: This command compiles the QMK firmware based on the configured keyboard and keymap. It utilizes the QMK build system to generate a firmware file that can be flashed onto the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/redox/rev1/readme.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nqmk compile\n```\n\n----------------------------------------\n\nTITLE: Building TF Longeboye Firmware with QMK\nDESCRIPTION: This command is used to compile the default keymap for the TF Longeboye keyboard using the QMK firmware build environment. It assumes that the QMK build environment is already set up. It will generate a .hex or .bin file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ep/comsn/tf_longeboye/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake ep/comsn/tf_longeboye:default\n```\n\n----------------------------------------\n\nTITLE: Building YMDK/MT84 Firmware (QMK)\nDESCRIPTION: This command builds the default keymap for the YMDK/MT84 keyboard's revision 1 using the QMK build environment. It assumes the QMK build environment is properly set up. The output will be a firmware file ready to be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ymdk/ymd75/rev1/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake ymdk/ymd75/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Flashing IBE60 Keyboard Firmware\nDESCRIPTION: This command flashes the compiled firmware to the IBE60 keyboard. It requires the QMK build environment to be set up and the firmware to be already built. The command sends the compiled firmware to the keyboard's bootloader for installation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/4pplet/ibe60/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake 4pplet/ibe60:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building nordic60 firmware with make\nDESCRIPTION: This command builds the default firmware for the nordic60 keyboard (revision A) using the make tool.  It requires a correctly configured QMK build environment.  The resulting firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kbnordic/nordic60/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake kbnordic/nordic60/rev_a:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware for X-BOWS Ranger\nDESCRIPTION: These commands are used to flash the compiled QMK firmware onto the X-BOWS Ranger keyboard with the default and VIA keymaps. The ':flash' target uploads the firmware to the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/xbows/ranger/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake xbows/ranger:default:flash\n```\n\nLANGUAGE: make\nCODE:\n```\nmake xbows/ranger:via:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing CSTM65 Keyboard Firmware\nDESCRIPTION: This command flashes the compiled firmware to the CSTM65 keyboard. It requires the keyboard to be connected and in a state where it can accept the firmware, such as in bootloader mode. It depends on the QMK build environment being correctly set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/drop/cstm65/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake drop/cstm65:default:flash\n```\n\n----------------------------------------\n\nTITLE: Fuse Settings for Bootloader\nDESCRIPTION: These fuse settings are used when flashing the bootloader to the ATMega32u4 microcontroller on the Ploopy Mini.  Incorrect fuse settings can prevent the device from operating correctly. These settings must be configured using a compatible flashing tool such as AVRDUDE.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ploopyco/trackball_mini/readme.md#_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\n| Fuse     | Setting     |\n|----------|-------------|\n| Low      | `0x5E`      |\n| High     | `0x99`      |\n| Extended | `0xC3`      |\n```\n\n----------------------------------------\n\nTITLE: Flashing Keyboard Firmware with Make\nDESCRIPTION: This command builds and flashes the default firmware to the handwired/cans12erv2 keyboard.  It requires the QMK build environment to be configured and the target device to be in a flashable state (e.g., bootloader mode). The command attempts to directly flash the compiled firmware onto the connected device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/cans12erv2/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/cans12erv2:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Cornelius Keyboard Firmware - QMK Makefile\nDESCRIPTION: This command flashes the compiled firmware to the Cornelius keyboard using the QMK build environment. It requires the keyboard to be in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/foostan/cornelius/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake foostan/cornelius:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Wampus Keyboard Firmware (QMK)\nDESCRIPTION: This command builds and flashes the default firmware to the Wampus keyboard. It requires the QMK build environment to be set up and a compatible flashing tool. The command assumes the keyboard is connected and in a state ready to receive the firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/zoo/wampus/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake zoo/wampus:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Pierce Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the Pierce keyboard using the QMK build environment. It compiles the source code and generates a firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/pierce/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake pierce:default\n```\n\n----------------------------------------\n\nTITLE: Flashing KB16-01 Firmware using Make\nDESCRIPTION: This command flashes the default firmware to the KB16-01 macropad using the `make` command.  It requires a properly set up QMK build environment and a connected device in bootloader mode. It assumes the bootloader is already active on the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/doio/kb16/rev1/readme.md#_snippet_2\n\nLANGUAGE: Makefile\nCODE:\n```\n`make doio/kb16/rev1:default:flash`\n```\n\n----------------------------------------\n\nTITLE: Flashing pi40 Firmware\nDESCRIPTION: This command flashes the built firmware to the pi40 keyboard. It uses the QMK build environment and specifies the keyboard layout (1upkeyboards/pi40), the keymap (default) and the flash target.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/1upkeyboards/pi40/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake 1upkeyboards/pi40:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building np12 Keypad Firmware\nDESCRIPTION: This command builds the default firmware for the np12 keypad. It requires a properly configured QMK build environment. The output is a firmware file that can be flashed to the keypad.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/np12/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake np12:default\n```\n\n----------------------------------------\n\nTITLE: Flashing the Mini Ashen 40 Firmware with Make\nDESCRIPTION: This command flashes the default firmware onto the Mini Ashen 40 keyboard using the QMK build environment and a suitable flashing tool.  It requires a properly configured QMK build environment and a connected keyboard in flashing mode. The command depends on the `make` utility and potentially other flashing tools configured in the QMK environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechanickeys/miniashen40/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake mechanickeys/miniashen40:default:flash\n```\n\n----------------------------------------\n\nTITLE: Compile Image into Firmware with Make\nDESCRIPTION: To make an image available for use in Quantum Painter, it must be compiled into the firmware. This involves adding the image's C file to the `SRC` variable in the `rules.mk` file.  Assuming `my_image.qgf.c` and `my_image.qgf.h` have been created.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/quantum_painter.md#_snippet_60\n\nLANGUAGE: make\nCODE:\n```\nSRC += my_image.qgf.c\n```\n\n----------------------------------------\n\nTITLE: Configuring I2C EEPROM Settings in QMK\nDESCRIPTION: Defines the various parameters for configuring an I2C EEPROM module in QMK Firmware. These definitions, placed in `config.h`, control the I2C address, EEPROM size, page size, address size, and write time of the external EEPROM.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/eeprom.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n#define EXTERNAL_EEPROM_I2C_BASE_ADDRESS\n#define EXTERNAL_EEPROM_I2C_ADDRESS(addr)\n#define EXTERNAL_EEPROM_BYTE_COUNT\n#define EXTERNAL_EEPROM_PAGE_SIZE\n#define EXTERNAL_EEPROM_ADDRESS_SIZE\n#define EXTERNAL_EEPROM_WRITE_TIME\n#define EXTERNAL_EEPROM_WP_PIN\n```\n\n----------------------------------------\n\nTITLE: Flashing Black Hellebore Firmware with Make\nDESCRIPTION: This command builds and flashes the default firmware for the Black Hellebore keyboard using the QMK build system and a compatible flashing tool. It requires a correctly configured QMK build environment and a connected keyboard in a flashable state.  The command attempts to automatically detect the correct flashing method.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/black_hellebore/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake black_hellebore:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building 3W6 rev2 default firmware with Pimoroni support with QMK\nDESCRIPTION: This command compiles the default firmware for the 3W6 rev2 keyboard with Pimoroni Trackball support using the QMK build environment. It requires the QMK build environment to be set up. The resulting firmware can then be flashed onto the keyboard. This configuration enables the trackball functionality.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/3w6/readme.md#_snippet_2\n\nLANGUAGE: make\nCODE:\n```\nmake 3w6/rev2:default_pimoroni\n```\n\n----------------------------------------\n\nTITLE: Building AKI-S Keyboard Firmware with Make\nDESCRIPTION: This snippet shows how to build the default firmware for the AKI-S keyboard using the `make` command within the QMK Firmware environment. It assumes that the build environment has been set up properly. This command compiles the keyboard firmware and produces a .hex or .bin file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/xelus/akis/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake xelus/akis:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Keychron Q60 Firmware\nDESCRIPTION: This command flashes the compiled firmware onto the Keychron Q60 keyboard. It builds the firmware if necessary and then uses a suitable flashing tool to write the firmware to the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keychron/q60/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake keychron/q60/ansi:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing YMD75 Firmware with QMK\nDESCRIPTION: This command is used to compile and flash the default firmware for the YMD75 rev3 keyboard. It requires a configured QMK environment and a connected keyboard in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ymdk/ymd75/rev3/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake ymdk/ymd75/rev3:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Gas75 Firmware with QMK (make)\nDESCRIPTION: This command flashes the compiled firmware to the Gas75 keyboard. The keyboard should be connected and in a state where it can accept the firmware. It assumes the QMK build environment is correctly configured.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ml/gas75/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake ml/gas75:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing the Hnah108 Keyboard Firmware\nDESCRIPTION: This command flashes the compiled firmware onto the Hnah108 keyboard. It requires a properly set up QMK build environment and the necessary tools for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/hnah108/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/hnah108:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building EC 60X Firmware - QMK\nDESCRIPTION: This command builds the default firmware for the EC 60X keyboard using the QMK build environment. It compiles the keyboard layout and generates a firmware file that can be flashed onto the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cipulot/ec_60x/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake cipulot/ec_60x:default\n```\n\n----------------------------------------\n\nTITLE: Building Quadrant Keyboard Firmware\nDESCRIPTION: This command is used to build the default firmware for the Quadrant keyboard using the QMK build environment. It compiles the keyboard layout and generates the firmware file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ealdin/quadrant/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake ealdin/quadrant:default\n```\n\n----------------------------------------\n\nTITLE: Flashing SMK65 Keyboard Firmware\nDESCRIPTION: This command flashes the default firmware onto the SMK65 keyboard.  It requires a correctly configured build environment and a connected keyboard that is ready for flashing. The keyboard will be updated with the compiled firmware after successful execution.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/lfkeyboards/smk65/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake lfkeyboards/smk65:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building the DecenTKL Numpad Firmware\nDESCRIPTION: This command builds the default firmware for the DecenTKL Numpad.  It assumes that the QMK build environment has been properly set up.  It compiles the keyboard layout and keymap to create the firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/decent/numpad/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake decent/numpad:default\n```\n\n----------------------------------------\n\nTITLE: Building Xenon keyboard with default keymap - QMK\nDESCRIPTION: This command builds the QMK firmware for the Xenon keyboard using the default keymap. It assumes that the QMK build environment has been set up correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/xenon/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake xenon:default\n```\n\n----------------------------------------\n\nTITLE: Building Helix rev3 5rows Firmware\nDESCRIPTION: This command builds and flashes the default firmware for the Helix rev3 5rows keyboard using QMK firmware. It assumes that the QMK build environment is already set up. The command compiles the firmware and then flashes it to the connected Pro Micro controller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/helix/rev3_5rows/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake helix/rev3_5rows:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Helen 80 Firmware\nDESCRIPTION: This command builds the default firmware for the Helen 80 keyboard using the QMK build environment. It requires a properly configured QMK build environment and will output a firmware file suitable for flashing to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/playkbtw/helen80/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake playkbtw/helen80:default\n```\n\n----------------------------------------\n\nTITLE: Building KagaMidget Keyboard Firmware (QMK)\nDESCRIPTION: This snippet shows how to build the default firmware for the KagaMidget keyboard using the QMK build system. It assumes that the build environment has been set up correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/yynmt/kagamidget/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake yynmt/kagamidget:default\n```\n\n----------------------------------------\n\nTITLE: Building Aves65 Firmware with Make\nDESCRIPTION: This command builds the default firmware for the Aves65 keyboard using the QMK build environment. It assumes that the QMK build environment has been set up correctly. The output is the firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/aves65/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake aves65:default\n```\n\n----------------------------------------\n\nTITLE: Building Southpaw75 Keyboard Firmware (QMK)\nDESCRIPTION: This snippet demonstrates how to build the default firmware for the Southpaw75 keyboard using the `make` command within the QMK Firmware environment. It assumes that the user has already set up their build environment according to the QMK documentation. Executing this command compiles the firmware and prepares it for flashing onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/fr4/southpaw75/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake southpaw75:default\n```\n\n----------------------------------------\n\nTITLE: Building WT75-B Keyboard Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the wilba.tech WT75-B keyboard using the QMK build environment. It requires QMK to be properly set up and configured. The resulting firmware can then be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wilba_tech/wt75_b/readme.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmake wilba_tech/wt75_b:default\n```\n\n----------------------------------------\n\nTITLE: Flashing QMK Firmware\nDESCRIPTION: This command flashes the compiled QMK firmware onto the `ez_maker/directpins/teensy2` keyboard with the `default` keymap. It relies on the `qmk flash` command, which is part of the QMK build environment. The flashing process uploads the compiled firmware to the microcontroller, enabling the keyboard's functionality.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ez_maker/directpins/teensy_2/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nqmk flash -kb ez_maker/directpins/teensy2 -km default\n```\n\n----------------------------------------\n\nTITLE: Building Default Keymap for V60 Type R (Makefile)\nDESCRIPTION: This command builds the QMK firmware for the KBParadise V60 Type R keyboard using the default keymap. It assumes that the QMK build environment has been properly set up. The output is a .hex file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/v60_type_r/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake v60_type_r:default\n```\n\n----------------------------------------\n\nTITLE: Building kk980 Firmware with Make\nDESCRIPTION: This command compiles the default keymap for the kk980 keyboard using the `make` command within the QMK firmware environment.  It assumes that the QMK build environment has already been set up.  The output is a `.hex` file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/sets3n/kk980/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake sets3n/kk980:default\n```\n\n----------------------------------------\n\nTITLE: Defining Bootmagic Key Row and Column (C)\nDESCRIPTION: This snippet demonstrates how to define the row and column of the key used to trigger Bootmagic in your `config.h` file.  This is particularly useful for keyboards with unusual matrices. The default values are typically set to the \"ESC\" key.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/bootmagic.md#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n#define BOOTMAGIC_ROW 0\n#define BOOTMAGIC_COLUMN 1\n```\n\n----------------------------------------\n\nTITLE: Building QMK Firmware for GMMK V2\nDESCRIPTION: This command builds the default QMK firmware for the GMMK V2 96% ANSI keyboard. Ensure your build environment is properly set up before executing this command. The output will be a .hex or .bin file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/gmmk/gmmk2/p96/ansi/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake gmmk/gmmk2/p96/ansi:default\n```\n\n----------------------------------------\n\nTITLE: Installing Pillow Dependency on Windows for QMK CLI\nDESCRIPTION: This command installs the Pillow dependency for the QMK CLI in a Windows environment using QMK MSYS or msys2. It uses the pacman package manager to install the mingw-w64-x86_64-python-pillow package and upgrades the qmk package using pip.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/ChangeLog/20220528.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npacman --needed --noconfirm --disable-download-timeout -S mingw-w64-x86_64-python-pillow\npython3 -m pip install --upgrade qmk\n```\n\n----------------------------------------\n\nTITLE: Building NK20 Firmware\nDESCRIPTION: Builds the default firmware for the novelkeys/nk20 keyboard using the QMK build environment. This command assumes the user has already set up their build environment according to the QMK documentation. The output will be a .hex or .bin file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/novelkeys/nk20/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake novelkeys/nk20:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Keychron Q11 Firmware (ANSI Encoder)\nDESCRIPTION: This command builds and flashes the QMK firmware to the Keychron Q11 keyboard with the ANSI encoder layout and the default keymap. It requires the QMK build environment to be properly set up and a flashing tool to be available. This command assumes the keyboard is already in DFU mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keychron/q11/readme.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nmake keychron/q11/ansi_encoder:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building QMK Firmware with Make\nDESCRIPTION: This snippet shows how to build the QMK firmware for the fjlabs/kyuu keyboard using the make command.  It assumes that the QMK build environment has already been set up. This command compiles the firmware with the default configuration for the specified keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/fjlabs/kyuu/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake fjlabs/kyuu:default\n```\n\n----------------------------------------\n\nTITLE: Defining Quick Tap Term\nDESCRIPTION: This snippet overrides the default `QUICK_TAP_TERM` value. It defines the timing window (in milliseconds) for distinguishing between auto-repeat and hold functions on dual-role keys after tapping them. This setting influences the auto-repeat behavior of tap functions.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/tap_hold.md#_snippet_11\n\nLANGUAGE: c\nCODE:\n```\n#define QUICK_TAP_TERM 120\n```\n\n----------------------------------------\n\nTITLE: Flashing Genesis Firmware (QMK)\nDESCRIPTION: This command builds and flashes the default firmware for the Genesis Rev1 macro pad. It relies on the qmk-dfu bootloader. It requires a properly configured QMK build environment. After running the command, the user needs to manually enter bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/custommk/genesis/rev1/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake custommk/genesis/rev1:default:flash\n```\n\n----------------------------------------\n\nTITLE: Conditional Code Compilation for Converters in C\nDESCRIPTION: This code snippet demonstrates how to use conditional compilation with `#ifdef` preprocessor directives to write code specific to a particular converter target. The `CONVERT_TO_<target_uppercase>` flag is exposed when the converter is enabled.  It requires a C compiler and QMK environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/feature_converters.md#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n#ifdef CONVERT_TO_PROTON_C\n    // Proton C code\n#else\n    // Pro Micro code\n#endif\n```\n\n----------------------------------------\n\nTITLE: Building hecomi/alpha Keyboard with Make\nDESCRIPTION: This command builds the default keymap for the hecomi/alpha keyboard using the QMK firmware's `make` command. It assumes that the QMK build environment has already been set up. The resulting firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/takashiski/hecomi/alpha/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake hecomi/alpha:default\n```\n\n----------------------------------------\n\nTITLE: Flashing QMK Firmware to GMMK V2\nDESCRIPTION: This command builds and flashes the default QMK firmware for the GMMK V2 96% ANSI keyboard. This requires the build environment to be set up correctly and the appropriate flashing tools to be installed. The command will compile the firmware and then attempt to flash it to the connected keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/gmmk/gmmk2/p96/ansi/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake gmmk/gmmk2/p96/ansi:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Keyboard Firmware with Make\nDESCRIPTION: This command flashes the pre-built or newly built firmware onto the wilba_tech WT65-D keyboard. It requires a configured QMK build environment and a connected keyboard in a flashable state. The command assumes the necessary flashing tools are available in your environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wilba_tech/wt65_d/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake wilba_tech/wt65_d:default:flash\n```\n\n----------------------------------------\n\nTITLE: Defining Keyboard Layout\nDESCRIPTION: This line defines the keyboard layout for a 60% HHKB-style keyboard. It utilizes the predefined `LAYOUT_60_hhkb` macro, which encapsulates the specific key arrangement for this type of keyboard. No dependencies are explicitly stated, but the QMK firmware environment and the definition of `LAYOUT_60_hhkb` are required.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/layouts/default/60_hhkb/readme.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nLAYOUT_60_hhkb\n```\n\n----------------------------------------\n\nTITLE: Defining Per-Key Quick Tap Term Function\nDESCRIPTION: This function allows you to customize the quick tap term for individual keycodes. It returns the quick tap term in milliseconds for the given keycode, allowing for specific adjustments to the auto-repeat behavior of each dual-role key.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/tap_hold.md#_snippet_13\n\nLANGUAGE: c\nCODE:\n```\nuint16_t get_quick_tap_term(uint16_t keycode, keyrecord_t *record) {\n    switch (keycode) {\n        case SFT_T(KC_SPC):\n            return QUICK_TAP_TERM - 20;\n        default:\n            return QUICK_TAP_TERM;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Keyboard Layout\nDESCRIPTION: This line defines the keyboard layout to be used. It uses the predefined `LAYOUT_60_ansi_tsangan_split_bs_rshift` which presumably maps to a specific arrangement of keys for a 60% ANSI keyboard with a Tsangan bottom row, split backspace and split right shift keys. No dependencies are listed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/layouts/default/60_ansi_tsangan_split_bs_rshift/readme.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nLAYOUT_60_ansi_tsangan_split_bs_rshift\n```\n\n----------------------------------------\n\nTITLE: Flashing HS60 V2 Firmware with dfu-util\nDESCRIPTION: This command flashes the HS60 V2 firmware using `dfu-util`. The keyboard must be in DFU mode. The `<layout>` and `<keymap>` placeholders should be replaced with the desired layout and keymap respectively. Requires dfu-util to be installed and accessible in the system's PATH.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/hs60/v2/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake hs60/v2/<layout>:<keymap>:dfu-util\n```\n\n----------------------------------------\n\nTITLE: Compile Firmware for Beta Release (SharkPCB QMK)\nDESCRIPTION: This command compiles the default layout for the Beta release of the SharkPCB firmware using the QMK build environment. It requires QMK to be properly set up and assumes the user is in the QMK firmware directory. The output is a `.bin` file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/acheron/shark/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake acheron/shark/beta:default\n```\n\n----------------------------------------\n\nTITLE: Flashing the 5x5 Macropad Firmware with QMK\nDESCRIPTION: This command flashes the built firmware to the 5x5 macropad. It leverages the QMK make system to flash the compiled firmware to the handwired m40 5x5_macropad keyboard with the default keymap.  The keyboard should be in bootloader mode before running this command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/m40/5x5_macropad/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake handwired/m40/5x5_macropad:default:flash\n```\n\n----------------------------------------\n\nTITLE: Disable RGB Matrix Effect in C\nDESCRIPTION: This code snippet shows how to disable the RGB matrix effect while still using RGB indicators. It initializes the RGB matrix to solid color mode with all colors turned off, effectively disabling the animations but allowing indicators to function.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/rgb_matrix.md#_snippet_11\n\nLANGUAGE: c\nCODE:\n```\nvoid keyboard_post_init_user(void) {\n    rgb_matrix_mode_noeeprom(RGB_MATRIX_SOLID_COLOR);\n    rgb_matrix_sethsv_noeeprom(HSV_OFF);\n}\n```\n\n----------------------------------------\n\nTITLE: Building Keyboard Firmware with Make\nDESCRIPTION: This command builds the firmware for the handwired Space Oddity keyboard with the default layout using the `make` command.  It assumes that the QMK build environment is properly set up. It creates a .hex file that can be flashed onto the microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/space_oddity/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/space_oddity:default\n```\n\n----------------------------------------\n\nTITLE: Building Knops Mini with QMK\nDESCRIPTION: This command builds the default keymap for the Knops Mini macropad using the QMK firmware build environment. It assumes that the QMK build environment has been properly set up. The command will compile the keymap and generate a firmware file that can be flashed to the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/knops/mini/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake knops/mini:default\n```\n\n----------------------------------------\n\nTITLE: Building keyten kt3700 Firmware\nDESCRIPTION: This command builds the default firmware for the keyten kt3700 keyboard. It assumes that the build environment has already been set up according to the QMK documentation. It compiles the necessary source code and generates a firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keyten/kt3700/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake keyten/kt3700:default\n```\n\n----------------------------------------\n\nTITLE: Enabling WS2812 Driver in QMK Firmware\nDESCRIPTION: This snippet shows how to enable the WS2812 driver in QMK Firmware. Instead of adding `ws2812.c` to the `SRC` variable, you now specify `WS2812_DRIVER_REQUIRED = yes`. This allows the build system to manage the dependency automatically.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/ChangeLog/20231126.md#_snippet_6\n\nLANGUAGE: Makefile\nCODE:\n```\nWS2812_DRIVER_REQUIRED = yes\n```\n\n----------------------------------------\n\nTITLE: Building and Flashing Dactyl Firmware with Make and Teensy\nDESCRIPTION: This command combines the firmware building and flashing steps into a single `make` command utilizing the `teensy` target.  It implicitly calls the `teensy_loader_cli` after the firmware has been built. It requires QMK environment and `teensy_loader_cli` to be installed and accessible.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/dactyl/readme.md#_snippet_2\n\nLANGUAGE: make\nCODE:\n```\nmake handwired/dactyl:<keymapname>:teensy\n```\n\n----------------------------------------\n\nTITLE: Building IBM Terminal Converter with QMK\nDESCRIPTION: This snippet outlines the steps to build the IBM terminal keyboard converter using the QMK Firmware. It involves cloning the QMK repository, navigating to the directory, and using the 'make' command to build the converter for the specified keyboard layout. Dependencies include Git and QMK Firmware build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/converter/ibm_terminal/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/qmk/qmk_firmware.git\ncd qmk_firmware\nmake converter/ibm_terminal:default\n```\n\n----------------------------------------\n\nTITLE: Adding a QMK Community Module to keymap.json (JSON)\nDESCRIPTION: This code snippet demonstrates how to add a community module to your keymap.json file. It shows the basic structure for including the `qmk/hello_world` module.  You need to manually merge the `modules` section if a `keymap.json` already exists.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/community_modules.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"modules\": [\n        \"qmk/hello_world\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Encoder Map Key Delay in config.h (QMK)\nDESCRIPTION: This snippet shows how to define the delay between encoder keydown and keyup events when using encoder mapping.  The `ENCODER_MAP_KEY_DELAY` macro sets the delay in milliseconds. This allows you to fine-tune the behavior of encoder-mapped keycodes.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/encoders.md#_snippet_11\n\nLANGUAGE: c\nCODE:\n```\n#define ENCODER_MAP_KEY_DELAY 10\n```\n\n----------------------------------------\n\nTITLE: Flashing ScottoDeck Firmware with QMK\nDESCRIPTION: This command compiles the default keymap for the ScottoDeck and flashes it to the device using the QMK build environment. It requires the QMK build environment and appropriate flashing tools to be installed. It programs the generated .hex or .bin file to the device's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/scottokeebs/scottodeck/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/scottokeebs/scottodeck:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing NK65B Firmware - Makefile\nDESCRIPTION: This command flashes the firmware onto the NK65B keyboard. It uses the 'make' command with the 'nk65b' target and a specified keymap (replaced by `<keymap>`). This assumes 'dfu-util' is available in your system's PATH. The keyboard needs to be in DFU mode for this to work.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/novelkeys/nk65b/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake nk65b:<keymap>:flash\n```\n\n----------------------------------------\n\nTITLE: Building Firmware with Make\nDESCRIPTION: This command builds the QMK firmware for the System76 Launch keyboard using the `make` command.  It compiles the keymap 'default'. The build environment needs to be properly set up before running this command. No input is required, and the output is a compiled firmware binary.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/system76/launch_1/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake -r system76/launch_1:default\n```\n\n----------------------------------------\n\nTITLE: Advancing Cursor One Character\nDESCRIPTION: Moves the cursor forward by the width of one character. If there is not enough space on the current page for the next character, it advances to the next page. The cursor wraps to the beginning of the display when it reaches the end.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/st7565.md#_snippet_12\n\nLANGUAGE: C\nCODE:\n```\n// Moves the cursor forward 1 character length\n// Advance page if there is not enough room for the next character\n// Wraps to the begining when out of bounds\nvoid st7565_advance_char(void);\n```\n\n----------------------------------------\n\nTITLE: Building the Nomu30 Firmware with QMK\nDESCRIPTION: This snippet demonstrates how to build the default firmware for the Nomu30 keyboard using the QMK build environment.  It assumes that the QMK build environment has already been set up. It utilizes the `make` command with the target specified as `recompile_keys/nomu30:default`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/recompile_keys/nomu30/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake recompile_keys/nomu30:default\n```\n\n----------------------------------------\n\nTITLE: Flashing YMDK Melody96 Hotswap Firmware\nDESCRIPTION: This command builds and flashes the default firmware for the YMDK Melody96 Hotswap keyboard. It requires the QMK build environment to be set up and the dfu-programmer or similar flashing tool to be installed. This command will flash the compiled .hex file to the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ymdk/melody96/hotswap/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake ymdk/melody96/hotswap:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building VIA Firmware\nDESCRIPTION: This command builds the VIA-enabled firmware for the ilumkb/volcano660 keyboard.  It requires a properly configured QMK build environment and the 'via' keymap. The output is a .hex or .bin file that can be flashed to the keyboard, enabling VIA configuration.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ilumkb/volcano660/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake ilumkb/volcano660:via\n```\n\n----------------------------------------\n\nTITLE: Building Numeros Keyboard Firmware (QMK)\nDESCRIPTION: This snippet demonstrates how to build the default keymap for the Numeros keyboard using the QMK build environment. It assumes that the QMK build environment has already been set up. The command will compile the firmware for the 'clawlsome/numeros' keyboard with the 'default' keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/clawsome/numeros/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake clawsome/numeros:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Viterbi Keyboard Firmware with AVRDUDE\nDESCRIPTION: This command is used to build and flash the default firmware for the Viterbi keyboard (revision 1) using the QMK build environment and the AVRDUDE flashing tool. It first compiles the firmware, and then uses AVRDUDE to upload it to the keyboard's Pro Micro controller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keebio/viterbi/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake keebio/viterbi/rev1:default:avrdude\n```\n\n----------------------------------------\n\nTITLE: Configuring scaling registers - RGB LED - C\nDESCRIPTION: Configures the scaling registers for a single RGB LED using the IS31FL3746A driver. The function requires the LED index and individual scaling values for red, green, and blue channels. The scaling register values are not applied until `is31fl3746a_update_scaling_registers()` is called.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/is31fl3746a.md#_snippet_7\n\nLANGUAGE: C\nCODE:\n```\nvoid is31fl3746a_set_scaling_register(uint8_t index, uint8_t red, uint8_t green, uint8_t blue)\n```\n\n----------------------------------------\n\nTITLE: Flashing Keyboard Firmware\nDESCRIPTION: This command builds and flashes the firmware for the Parallel 65% Hotswap keyboard with the default keymap. It requires a properly configured QMK build environment and a connected keyboard in bootloader mode. The keyboard needs to be in DFU mode to accept the flash command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/parallel/parallel_65/hotswap/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake parallel/parallel_65/hotswap:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for Sneakbox Disarray (Staggered)\nDESCRIPTION: This command builds the default firmware for the Sneakbox Disarray keyboard with a staggered layout using the QMK build environment. It assumes that the QMK build environment is already set up. It produces a .hex or .bin file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/sneakbox/disarray/staggered/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake sneakbox/disarray/staggered:default\n```\n\n----------------------------------------\n\nTITLE: Configuring SPI EEPROM Settings in QMK\nDESCRIPTION: Defines the parameters for configuring an SPI EEPROM module in QMK Firmware, specified within `config.h`. These settings control the SPI slave select pin, clock divisor, EEPROM size, page size, and address size for external SPI EEPROM.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/eeprom.md#_snippet_2\n\nLANGUAGE: C\nCODE:\n```\n#define EXTERNAL_EEPROM_SPI_SLAVE_SELECT_PIN\n#define EXTERNAL_EEPROM_SPI_CLOCK_DIVISOR\n#define EXTERNAL_EEPROM_BYTE_COUNT\n#define EXTERNAL_EEPROM_PAGE_SIZE\n#define EXTERNAL_EEPROM_ADDRESS_SIZE\n```\n\n----------------------------------------\n\nTITLE: Initializing Pointing Device User Settings in C\nDESCRIPTION: This C code defines a function `pointing_device_init_user` that initializes user-specific pointing device settings. In this case, it sets the auto mouse layer to `_MOUSE`. This initialization is part of the QMK framework and provides a hook for user customization.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/spleeb/readme.md#_snippet_2\n\nLANGUAGE: C\nCODE:\n```\nvoid pointing_device_init_user(void) {\n    set_auto_mouse_layer(_MOUSE);\n}\n```\n\n----------------------------------------\n\nTITLE: Building bootleg Rev A keyboard firmware with QMK\nDESCRIPTION: This command builds the default firmware for the bootleg Rev A keyboard using the QMK build environment.  It assumes that the QMK build environment has been properly set up. It will generate a .hex or .bin file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/4pplet/bootleg/rev_a/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake 4pplet/bootleg/rev_a:default\n```\n\n----------------------------------------\n\nTITLE: Enabling Haptic Feedback in rules.mk (Make)\nDESCRIPTION: These settings in `rules.mk` enable haptic feedback and select the haptic driver. `HAPTIC_ENABLE = yes` activates the feature, while `HAPTIC_DRIVER` specifies either `drv2605l` for the DRV2605L chip or `solenoid` for solenoid-based feedback.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/haptic_feedback.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nHAPTIC_ENABLE = yes\n\nHAPTIC_DRIVER = drv2605l\n# or\nHAPTIC_DRIVER = solenoid\n```\n\n----------------------------------------\n\nTITLE: Building Plume65 Firmware\nDESCRIPTION: This command builds the default keymap for the Plume65 keyboard within the QMK Firmware environment. It assumes that the QMK build environment has been properly set up according to the QMK documentation. The output will be a .hex or .bin file suitable for flashing to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/plume/plume65/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake plume/plume65:default\n```\n\n----------------------------------------\n\nTITLE: Enabling GC9A01 Driver in rules.mk (Make)\nDESCRIPTION: This snippet demonstrates how to enable the GC9A01 display driver for Quantum Painter by adding the driver to the `QUANTUM_PAINTER_DRIVERS` variable in the `rules.mk` file.  This step is necessary to include the driver in the build process. Dependencies include Quantum Painter being enabled.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/quantum_painter.md#_snippet_4\n\nLANGUAGE: make\nCODE:\n```\nQUANTUM_PAINTER_ENABLE = yes\nQUANTUM_PAINTER_DRIVERS += gc9a01_spi\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware to DP3000 Macropad (QMK)\nDESCRIPTION: These commands build and flash the QMK firmware onto the DP3000 macropad. They specify the keyboard (dp3000), the revision (rev1 or rev2), the keymap (default), and the flash target.  This requires a properly configured QMK build environment and a compatible flashing tool.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/dp3000/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake dp3000/rev1:default:flash\n```\n\nLANGUAGE: shell\nCODE:\n```\nmake dp3000/rev2:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing ProjectKeyboard Alice (DFU-Util)\nDESCRIPTION: This command flashes the ProjectKeyboard Alice keyboard with the default firmware using DFU-Util. It's typically used when flashing the keyboard for the first time and requires setting the DIP switch to 1, hitting the reset button, and then executing the command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/projectkb/alice/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake projectkb/alice:default:dfu-util\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware to Elongate Beta (QMK)\nDESCRIPTION: This command compiles and flashes the default layout firmware directly to the Acheron Elongate Beta keyboard after it is in DFU state. Requires a configured QMK build environment and `dfu-util` installed. The keyboard must be in DFU mode prior to running this command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/acheron/elongate/beta/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake acheron/elongate/beta:default:flash\n```\n\n----------------------------------------\n\nTITLE: Global Current Control (C)\nDESCRIPTION: This snippet demonstrates how to set the global current control value for the IS31FL3743A driver. This controls the current sunk by the CSy pins, ranging from 0 to 255. By default, it is set to the maximum value (0xFF). Add this definition to `config.h` if a lower current is required.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/is31fl3743a.md#_snippet_2\n\nLANGUAGE: c\nCODE:\n```\n#define IS31FL3743A_GLOBAL_CURRENT 0xFF\n```\n\n----------------------------------------\n\nTITLE: Building GM-862 Firmware - QMK\nDESCRIPTION: This code snippet demonstrates how to build the firmware for the MILLER GM-862 keyboard using the QMK build environment. It utilizes the `make` command with the `miller/gm862:default` target. The command assumes that the QMK build environment has been properly set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/miller/gm862/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake miller/gm862:default\n```\n\n----------------------------------------\n\nTITLE: Defining WS2812 Byte Order in config.h (C)\nDESCRIPTION: This snippet shows how to define the byte order for the WS2812 LEDs in the `config.h` file. This is important because different WS2812 variants may have different color component orders. Defining `WS2812_BYTE_ORDER` ensures that the colors are displayed correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/ws2812.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n#define WS2812_BYTE_ORDER WS2812_BYTE_ORDER_GRB\n```\n\n----------------------------------------\n\nTITLE: Building Dactyl Firmware with Make\nDESCRIPTION: This command builds the firmware for a Dactyl keyboard using the `make` command.  It requires the QMK firmware environment to be set up. The `<keymapname>` should be replaced with the desired keymap.  It outputs a `.hex` file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/dactyl/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake handwired/dactyl:<keymapname>\n```\n\n----------------------------------------\n\nTITLE: Building ek65 Firmware with QMK\nDESCRIPTION: This command demonstrates how to build the default firmware for the Eniigma Keyboards ek65 using the QMK build environment. It requires the QMK build environment to be set up and assumes the user is in the QMK firmware directory. The output is the compiled firmware ready to be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/eniigmakeyboards/ek65/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake eniigmakeyboards/ek65:default\n```\n\n----------------------------------------\n\nTITLE: Enabling Key Lock in QMK Firmware\nDESCRIPTION: To enable the Key Lock feature in QMK Firmware, you need to set `KEY_LOCK_ENABLE = yes` in your `rules.mk` file. This configuration step is essential for the feature to be available in your custom keyboard firmware build. Without this, the `QK_LOCK` keycode will have no effect.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/key_lock.md#_snippet_0\n\nLANGUAGE: makefile\nCODE:\n```\nKEY_LOCK_ENABLE = yes\n```\n\n----------------------------------------\n\nTITLE: Enabling SH1106 Driver in rules.mk (Make)\nDESCRIPTION: This snippet demonstrates how to enable the SH1106 display driver for Quantum Painter by adding the driver to the `QUANTUM_PAINTER_DRIVERS` variable in the `rules.mk` file. This step is necessary to include the driver in the build process. Dependencies include Quantum Painter being enabled.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/quantum_painter.md#_snippet_29\n\nLANGUAGE: make\nCODE:\n```\nQUANTUM_PAINTER_ENABLE = yes\n# For SPI:\nQUANTUM_PAINTER_DRIVERS += sh1106_spi\n```\n\n----------------------------------------\n\nTITLE: Flashing ZED1800 Keyboard Firmware (Makefile)\nDESCRIPTION: This command flashes the compiled firmware to the Mechlovin' ZED1800 keyboard. It requires a properly configured QMK build environment and a compatible flashing toolchain.  It builds the firmware if necessary, then attempts to flash it using the appropriate method for the target.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechlovin/zed1800/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake mechlovin/zed1800:default:flash\n```\n\n----------------------------------------\n\nTITLE: Disabling Command Feature in rules.mk (Make)\nDESCRIPTION: This code snippet demonstrates how to disable the Command feature in the `rules.mk` file. This is required when `BOTH_SHIFTS_TURNS_ON_CAPS_WORD` is enabled to avoid conflicts since Command also uses the Left Shift + Right Shift key combination by default. Disabling Command resolves the conflict.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/caps_word.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nCOMMAND_ENABLE = no\n```\n\n----------------------------------------\n\nTITLE: Building Clueboard 66% Firmware with Make\nDESCRIPTION: This command builds the default firmware for the Clueboard 66% rev2 keyboard using the QMK Make system. It assumes that the build environment has already been set up according to the QMK documentation. The output is a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/clueboard/66/rev2/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake clueboard/66/rev2:default\n```\n\n----------------------------------------\n\nTITLE: Building .hex file with custom keymap - Shell\nDESCRIPTION: This command builds a .hex file for the XeaL60 keyboard firmware using a custom keymap. The user should replace `YOUR_KEYMAP_NAME` with the name of their keymap. This requires the QMK build environment to be properly set up and the custom keymap to exist.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/xealous/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ make handwired/xeal60/rev1:YOUR_KEYMAP_NAME\n```\n\n----------------------------------------\n\nTITLE: Enabling ILI9488 Driver in rules.mk (Make)\nDESCRIPTION: This snippet demonstrates how to enable the ILI9488 display driver for Quantum Painter by adding the driver to the `QUANTUM_PAINTER_DRIVERS` variable in the `rules.mk` file.  This step is necessary to include the driver in the build process. Dependencies include Quantum Painter being enabled.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/quantum_painter.md#_snippet_17\n\nLANGUAGE: make\nCODE:\n```\nQUANTUM_PAINTER_ENABLE = yes\nQUANTUM_PAINTER_DRIVERS += ili9488_spi\n```\n\n----------------------------------------\n\nTITLE: Building e88 keyboard firmware with QMK\nDESCRIPTION: This command builds the default firmware for the e88 keyboard using the QMK build environment. It compiles the source code and prepares the firmware for flashing onto the keyboard's microcontroller. The user needs to have set up their build environment first, as described in the QMK documentation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/e88/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake e88:default\n```\n\n----------------------------------------\n\nTITLE: Enabling ST7735 Driver in rules.mk (Make)\nDESCRIPTION: This snippet demonstrates how to enable the ST7735 display driver for Quantum Painter by adding the driver to the `QUANTUM_PAINTER_DRIVERS` variable in the `rules.mk` file. This step is necessary to include the driver in the build process. Dependencies include Quantum Painter being enabled.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/quantum_painter.md#_snippet_20\n\nLANGUAGE: make\nCODE:\n```\nQUANTUM_PAINTER_ENABLE = yes\nQUANTUM_PAINTER_DRIVERS += st7735_spi\n```\n\n----------------------------------------\n\nTITLE: Building alix40 Firmware with QMK\nDESCRIPTION: This command builds the default keymap for the alix40 keyboard using the QMK firmware build environment.  It assumes that the QMK build environment has been properly set up. The output will be a .hex file which can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/tokyokeyboard/alix40/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake tokyokeyboard/alix40:default\n```\n\n----------------------------------------\n\nTITLE: Building Squiggle Keyboard Firmware with Make\nDESCRIPTION: This command builds the default keymap for the Squiggle keyboard using the QMK Firmware's `make` command. It assumes that the QMK build environment has already been set up. The resulting firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ibnuda/squiggle/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake ibnuda/squiggle:default\n```\n\n----------------------------------------\n\nTITLE: Flashing DracuLad using DFU\nDESCRIPTION: This command builds and flashes the firmware for the DracuLad keyboard using the DFU bootloader. Replace `default` with the keymap name.  It requires a properly configured QMK build environment and a DFU-compatible bootloader on the keyboard. It assumes the keyboard is connected and in DFU mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/draculad/readme.md#_snippet_2\n\nLANGUAGE: Makefile\nCODE:\n```\nmake draculad:default:dfu\n```\n\n----------------------------------------\n\nTITLE: Flashing Swift65 Firmware (QMK)\nDESCRIPTION: This command builds and flashes the default firmware for the Swift65 keyboard with hotswap support using the QMK build system. It requires a properly configured QMK build environment and a connected keyboard in bootloader mode. The output is the keyboard running the newly flashed firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/alfredslab/swift65/hotswap/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake alfredslab/swift65/hotswap:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Axon40 Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Axon40 keyboard using the QMK build environment. It assumes that the QMK build environment has been properly set up according to the QMK documentation. The command compiles the firmware and generates a .hex file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/checkerboards/axon40/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake checkerboards/axon40:default\n```\n\n----------------------------------------\n\nTITLE: Building XD60 rev3 firmware with QMK\nDESCRIPTION: This command builds the default firmware for the XD60 keyboard revision 3 using the QMK build environment. It requires the QMK build environment to be set up and uses the `make` command. The output is a compiled firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/xiudi/xd60/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake xiudi/xd60/rev3:default\n```\n\n----------------------------------------\n\nTITLE: Building Macropad Firmware with QMK Makefile\nDESCRIPTION: This command builds the QMK firmware for the AlhenKB Macropad 5x4 with the default keymap.  It requires the QMK build environment to be properly set up. The output is a .hex or .bin file which can be flashed to the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/alhenkb/macropad5x4/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake alhenkb/macropad5x4:default\n```\n\n----------------------------------------\n\nTITLE: Building QMK Firmware for QVEX Lynepad\nDESCRIPTION: This command builds the default keymap for the QVEX Lynepad keyboard using the QMK Firmware build environment.  It assumes that the QMK build environment has already been properly set up.  The output will be a .hex file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/qvex/lynepad2/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake qvex/lynepad:default\n```\n\n----------------------------------------\n\nTITLE: Flashing firmware for 1up pi60 RGB v2 (QMK)\nDESCRIPTION: This command builds and flashes the default firmware for the 1upkeyboards pi60_rgb_v2 keyboard using the QMK build environment.  It requires the QMK build environment to be set up correctly and assumes the device is in a state ready to accept the flash.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/1upkeyboards/pi60_rgb_v2/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake 1upkeyboards/pi60_rgb_v2:default:flash\n```\n\n----------------------------------------\n\nTITLE: Compiling Andean Condor Keyboard Firmware (QMK CLI)\nDESCRIPTION: This command compiles the QMK firmware for the Andean Condor keyboard with the default keymap using the QMK CLI. It requires the QMK CLI to be installed and configured. The output will be a .hex file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/andean_condor/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nqmk compile -kb andean_condor -km default\n```\n\n----------------------------------------\n\nTITLE: Building Keyboard Firmware with Make\nDESCRIPTION: This command builds the default firmware for the 3dortho14u keyboard, revision 1, using the `make` command. It compiles the keyboard layout and keymap defined in the QMK firmware for the specified keyboard and revision. The build environment needs to be setup before running this command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/3dortho14u/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake 3dortho14u/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Install ST-Link and OpenOCD on Windows (MSYS2)\nDESCRIPTION: Installs the mingw-w64-x86_64-stlink and mingw-w64-x86_64-openocd packages using the pacman package manager in MSYS2 on Windows. These are the required tools to use ST-Link with the STM32 Bluepill.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/isp_flashing_guide.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npacman -S mingw-w64-x86_64-stlink mingw-w64-x86_64-openocd\n```\n\n----------------------------------------\n\nTITLE: Resolved Conflict Example - HTML\nDESCRIPTION: This snippet shows an example of the state of the conflicted file, after it has been manually resolved.  The merge conflict markers have been removed and the desired changes have been applied.  This ensures only the chosen change is kept.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/newbs_git_resolving_merge_conflicts.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<p>Need help? Email support@webhost.us.</p>\n```\n\n----------------------------------------\n\nTITLE: Building Wang Ergo Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the Wang Ergo keyboard. It uses the `make` command with the keyboard's name (`ocean/wang_ergo`) and the keymap (`default`) as arguments. The command assumes that the QMK build environment has already been set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ocean/wang_ergo/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake ocean/wang_ergo:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Genesis Firmware with QMK\nDESCRIPTION: This command flashes the built firmware to the Genesis macro pad. It uses the QMK DFU bootloader, which is preinstalled on the device. The user needs to trigger the bootloader either by holding the top-left key during USB connection or by pressing the reset button.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/custommk/genesis/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake custommk/genesis:default:flash\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Backlight Pins (C)\nDESCRIPTION: This snippet demonstrates how to configure multiple backlight pins in `config.h`. This is useful for controlling additional LEDs, such as a Caps Lock indicator, alongside the main backlight. It replaces the `BACKLIGHT_PIN` definition. The example shows pins F5 and B2.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/backlight.md#_snippet_2\n\nLANGUAGE: c\nCODE:\n```\n#define BACKLIGHT_PINS { F5, B2 }\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for MIIIW BlackIO83 (QMK)\nDESCRIPTION: This command builds the default firmware for the MIIIW BlackIO83 keyboard (rev_0100) using the QMK Firmware build system. It compiles the keymap and creates a firmware file that can be flashed onto the keyboard.  Requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/miiiw/blackio83/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake miiiw/blackio83/rev_0100:default\n```\n\n----------------------------------------\n\nTITLE: Flashing the dnlnm/cloak keyboard with QMK\nDESCRIPTION: This command builds and flashes the default keymap to the dnlnm/cloak keyboard using the QMK build environment. It depends on the QMK build environment and a compatible flashing tool. The command assumes that the keyboard is in a state where it can accept a firmware update, typically bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/dnlnm/cloak/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake dnlnm/cloak:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building xox70hot Firmware\nDESCRIPTION: This command builds the default firmware for the xox70hot keyboard using the QMK build environment. It compiles the source code and generates a firmware image that can be flashed to the keyboard's microcontroller. Ensure that the QMK build environment is properly set up before running this command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mokey/xox70hot/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake mokey/xox70hot:default\n```\n\n----------------------------------------\n\nTITLE: Compiling and Flashing Zinc Firmware (Shell)\nDESCRIPTION: This command compiles the Zinc keyboard firmware with the default keymap and then flashes it to the keyboard. The `:flash` option is appended to the `make` target to trigger the flashing process after compilation. Requires the QMK environment to be correctly set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/25keys/zinc/keymaps/default/readme_en.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ make zinc:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware to Device /dev/sdx\nDESCRIPTION: This command showcases how to flash the firmware `FLASH.bin` onto the device path `/dev/sdx`. It makes use of the `dd` command to write the file and uses the `seek` parameter to skip the first 4 sectors of the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/hhkb/yang/readme.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndd if=FLASH.bin of=/dev/sdx seek=4\n```\n\n----------------------------------------\n\nTITLE: Enabling Protocol Switching\nDESCRIPTION: To enable on-the-fly switching between steno protocols using `QK_STENO_BOLT` and `QK_STENO_GEMINI` keycodes, add `STENO_ENABLE = yes` and `STENO_PROTOCOL = all` to your `rules.mk`. This includes the code for all available stenography protocols.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/stenography.md#_snippet_4\n\nLANGUAGE: makefile\nCODE:\n```\nSTENO_ENABLE = yes\nSTENO_PROTOCOL = all\n```\n\n----------------------------------------\n\nTITLE: Building Polaris QMK Firmware\nDESCRIPTION: This snippet demonstrates how to build the QMK firmware for the fjlabs/polaris keyboard using the `make` command.  It assumes that the QMK build environment has already been set up according to the QMK documentation. The command builds the default keymap for the Polaris keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/fjlabs/polaris/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake fjlabs/polaris:default\n```\n\n----------------------------------------\n\nTITLE: Building Firmware with Make for Ortho Slayer\nDESCRIPTION: This command builds the default firmware for the keyten/ortho_slayer keyboard.  It utilizes the QMK make system to compile the firmware and create a .hex file suitable for flashing. Requires QMK build environment to be set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keyten/ortho_slayer/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake keyten/ortho_slayer:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Jelly Evolv Solder Firmware (QMK)\nDESCRIPTION: This command flashes the default QMK firmware to the Owlab Jelly Evolv soldered PCB keyboard. It requires the QMK build environment to be set up and appropriate flashing tools to be installed (e.g., dfu-util). The keyboard must be in bootloader mode to be flashed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/owlab/jelly_evolv/solder/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake owlab/jelly_evolv/solder:default:flash\n```\n\n----------------------------------------\n\nTITLE: Making Kousa TKL Firmware\nDESCRIPTION: This command builds the default firmware for the Kousa TKL keyboard using the QMK build environment. It compiles the keyboard's keymap and firmware, creating a .hex file that can be flashed onto the keyboard. This is a necessary step before flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kradoindustries/kousa/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake kradoindustries/kousa:default\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for atxkb/1894 with QMK\nDESCRIPTION: This snippet shows how to build the default firmware for the atxkb/1894 keyboard using the QMK build environment. It assumes that the QMK build environment has been properly set up. The command `make atxkb/1894:default` compiles the firmware with the default configuration.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/atxkb/1894/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake atxkb/1894:default\n```\n\n----------------------------------------\n\nTITLE: Adding VPATH in rules.mk\nDESCRIPTION: This snippet demonstrates how to add a path to the `VPATH` variable in your `rules.mk` file. This is necessary to include the gBoards keyboard definitions in your build process. Replace `keyboards/gboards/` with the correct path to your keyboard's directory if it's different.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/gboards/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nVPATH               +=  keyboards/gboards/\n```\n\n----------------------------------------\n\nTITLE: Building M48 Keyboard Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the M48 keyboard (rev1) using the QMK build environment.  It compiles the keyboard layout and configuration into a firmware file that can be flashed onto the keyboard's microcontroller. Requires QMK build environment to be properly configured.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mlego/m48/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake mlego/m48/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Adding matrix.c compilation rule to rules.mk\nDESCRIPTION: This code snippet demonstrates how to add the `matrix.c` file to the compilation process by adding the `SRC += matrix.c` line to your keyboard's `rules.mk` file. This ensures that the custom matrix implementation is included when building the firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/custom_matrix.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nSRC += matrix.c\n```\n\n----------------------------------------\n\nTITLE: Flashing CB1800 Firmware\nDESCRIPTION: This command flashes the default firmware onto the CherryB Studio CB1800 keyboard. It builds the firmware first, and then attempts to flash it. It requires the QMK build environment to be configured and the keyboard to be in a flashable state, typically DFU mode or similar.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cherrybstudio/cb1800/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake cherrybstudio/cb1800:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building QMK Firmware\nDESCRIPTION: This command compiles the QMK firmware for the handwired Preonic keyboard with the riblee_f401 configuration and the default keymap. It requires a properly configured QMK build environment. The command will generate a .hex or .bin file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/riblee_f401/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/riblee_f401:default\n```\n\n----------------------------------------\n\nTITLE: Building the keyboard firmware\nDESCRIPTION: This command builds the default firmware for the ning/tiny_board/tb16_rgb keyboard. It uses the QMK make system to compile the necessary files and create a firmware image.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ning/tiny_board/tb16_rgb/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake ning/tiny_board/tb16_rgb:default\n```\n\n----------------------------------------\n\nTITLE: Defining Matrix Row Pins in QMK config.h\nDESCRIPTION: This code snippet defines the pins connected to the rows of the keyboard matrix in QMK firmware. The pins should be listed from top to bottom. It is defined in `config.h` file. It may be omitted if matrix reads are handled in an alternate manner.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/config_options.md#_snippet_7\n\nLANGUAGE: c\nCODE:\n```\n#define MATRIX_ROW_PINS { D0, D5, B5, B6 }\n```\n\n----------------------------------------\n\nTITLE: Building MelGeek MoJo75 Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the MelGeek MoJo75 keyboard (revision 1) using the QMK build system. It assumes that the QMK build environment has been correctly set up. The generated firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/melgeek/mojo75/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake melgeek/mojo75/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Ergodox Keyboard Layout Definition\nDESCRIPTION: Defines the layout for an Ergodox keyboard, likely used within QMK firmware to map keycodes to physical positions.  This snippet is a placeholder and needs to be used within a C or keymap file for proper functionality. It needs to be associated with a keymap definition to assign specific functions to each key.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/layouts/community/ergodox/readme.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n# ergodox\n\n    LAYOUT_ergodox\n```\n\n----------------------------------------\n\nTITLE: Building Megalodon DOIO 30% default firmware - QMK\nDESCRIPTION: This command compiles the default keymap for the Megalodon DOIO 30% keyboard using QMK's `make` command. It requires a properly configured QMK build environment.  The output is a .hex or .bin file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/doio/kb30/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake doio/kb30:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware to Quarkeys Z67 (Solder Version)\nDESCRIPTION: This command flashes the compiled QMK firmware to the Quarkeys Z67 keyboard, solder version with the default keymap.  It assumes that the QMK build environment is already set up and the firmware has been compiled.  It outputs messages related to the flashing process.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/quarkeys/z67/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake quarkeys/z67/solder:default:flash\n```\n\n----------------------------------------\n\nTITLE: Switching Default Layer with DF\nDESCRIPTION: This function switches the default layer, which is the base layer that other layers stack on top of. This is a temporary switch that only lasts until the keyboard loses power. It is used to change the base layout, such as from QWERTY to Dvorak.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/feature_layers.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nDF(layer)\n```\n\n----------------------------------------\n\nTITLE: Compiling VoidHHKB-Hotswap Firmware (Makefile)\nDESCRIPTION: This command compiles the default keymap for the VoidHHKB-Hotswap keyboard using the QMK build environment. It requires a properly configured QMK build environment. The output will be the compiled firmware ready to be flashed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/void/voidhhkb_hotswap/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake void/voidhhkb_hotswap:default\n```\n\n----------------------------------------\n\nTITLE: Building Piggy60 Firmware - Make Command\nDESCRIPTION: This command compiles the QMK firmware for the Piggy60 keyboard. It specifies the keyboard layout, revision (rev1 or rev2), and the desired keymap (default).  The user needs to setup their QMK build environment beforehand.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/jacky_studio/piggy60/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake jacky_studio/piggy60/rev1:default\nmake jacky_studio/piggy60/rev2:default\n```\n\n----------------------------------------\n\nTITLE: Define ORYX_CONFIGURATOR in config.h\nDESCRIPTION: This preprocessor definition enables features from the Oryx Configurator (ZSA's configurator) for the Planck EZ keyboard.  It needs to be added to the `config.h` file of your keymap. It unlocks indicator LEDs and keycodes like `TOGGLE_LAYER_COLOR` and `LED_LEVEL`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/zsa/planck_ez/readme.md#_snippet_2\n\nLANGUAGE: c\nCODE:\n```\n#define ORYX_CONFIGURATOR\n```\n\n----------------------------------------\n\nTITLE: Building Boardwalk Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Boardwalk keyboard using the QMK build environment. It assumes that the QMK build environment has been set up correctly. The command will compile the necessary source files and create a firmware image that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/boardwalk/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake boardwalk:default\n```\n\n----------------------------------------\n\nTITLE: Configuring Maximum Number of SH1106 Displays\nDESCRIPTION: These C code snippets show how to configure the maximum number of supported SH1106 displays for SPI and I2C interfaces within the `config.h` file. The `SH1106_NUM_SPI_DEVICES` and `SH1106_NUM_I2C_DEVICES` macros control the number of displays.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/quantum_painter.md#_snippet_32\n\nLANGUAGE: c\nCODE:\n```\n// 3 SPI displays:\n#define SH1106_NUM_SPI_DEVICES 3\n// 3 I2C displays:\n#define SH1106_NUM_I2C_DEVICES 3\n```\n\n----------------------------------------\n\nTITLE: Building Cans12er Firmware with Make\nDESCRIPTION: This command builds the default firmware for the Cans12er keypad using the QMK build environment. It requires QMK to be set up and configured correctly. The output is a .hex or .bin file that can be flashed onto the Pro Micro controller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/cans12er/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/cans12er:default\n```\n\n----------------------------------------\n\nTITLE: Example QMK Keycodes Constants JSON\nDESCRIPTION: This JSON payload represents an example of the data that will be returned for a keycodes constant query. It includes range information to help map the ranges of values that keycodes can have.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/api_docs.md#_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"ranges\": {\n        \"0x0000/0x00FF\": {\n            \"define\": \"QK_BASIC\"\n        },\n        \"0x0100/0x1EFF\": {\n            \"define\": \"QK_MODS\"\n        },\n        \"0x2000/0x1FFF\": {\n            \"define\": \"QK_MOD_TAP\"\n<snip>\n```\n\n----------------------------------------\n\nTITLE: Flush Drawing Operations with `qp_flush` in C\nDESCRIPTION: The `qp_flush` function ensures that all pending drawing operations are pushed to the display. It is essential to call this function after a sequence of drawing commands to guarantee that all changes are visible on the screen. It takes a `painter_device_t` object as input.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/quantum_painter.md#_snippet_48\n\nLANGUAGE: c\nCODE:\n```\nbool qp_flush(painter_device_t device);\n```\n\n----------------------------------------\n\nTITLE: Flashing Junco Keyboard (Right Half)\nDESCRIPTION: These commands flash the right half of the Junco keyboard with the default keymap using the UF2 bootloader. It requires a QMK build environment and the QMK CLI tool, or the make command can be used directly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/junco/readme.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# For flashing the right half...\nmake junco:default:uf2-split-right\n# or the qmk cli equivalent:\nqmk flash -kb junco --keymap default -bl uf2-split-right\n```\n\n----------------------------------------\n\nTITLE: Flashing KBDPad MKI Firmware\nDESCRIPTION: This command flashes the built firmware onto the KBDPad MKI keyboard. It requires a properly configured QMK build environment, the make command, and a connected keyboard in flashing mode. The flash target is used to upload the compiled firmware to the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kbdfans/kbdpad/mk1/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake kbdfans/kbdpad/mk1:default:flash\n```\n\n----------------------------------------\n\nTITLE: Compiling CHORD ZERO Firmware with Make\nDESCRIPTION: This command compiles the default keymap for the CHORD ZERO keyboard using the `make` command. It requires a properly configured QMK build environment. The command generates a `.uf2` file which can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/chord/zero/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake chord/zero:default\n```\n\n----------------------------------------\n\nTITLE: Building suika83opti with QMK\nDESCRIPTION: This command builds the default keymap for the suika83opti keyboard using the QMK build environment.  It assumes that the QMK build environment has been properly set up according to the QMK documentation. The output will be a firmware file suitable for flashing to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/suikagiken/suika83opti/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake suikagiken/suika83opti:default\n```\n\n----------------------------------------\n\nTITLE: Keyboard-Specific Code with Conditional Compilation\nDESCRIPTION: This code snippet demonstrates how to use `#ifdef` statements with keyboard-specific variables to include keyboard-specific code. This approach allows you to write keymaps that work across multiple keyboards while still supporting keyboard-specific features.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/feature_layouts.md#_snippet_7\n\nLANGUAGE: c\nCODE:\n```\n#ifdef KEYBOARD_planck\n    #ifdef KEYBOARD_planck_rev4\n        planck_rev4_function();\n    #endif\n#endif\n```\n\n----------------------------------------\n\nTITLE: Building CU80 Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the CU80 keyboard (v1) using the QMK build environment.  It assumes the QMK build environment is already set up and configured.  The output is a .hex or .bin file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/capsunlocked/cu80/v1/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake capsunlocked/cu80/v1:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Eclipse60 Firmware with Make\nDESCRIPTION: This command compiles and flashes the QMK firmware for the Eclipse60 keyboard with the default keymap. It depends on the QMK build environment and requires the keyboard to be in a flashable state (e.g., bootloader mode). The command attempts to automatically flash the compiled firmware to the connected keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/sawnsprojects/eclipse/eclipse60/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake eclipse/eclipse60:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Keyboard Firmware with QMK Make\nDESCRIPTION: This command builds the default firmware for the Caticorn Hotswap Rev1 keyboard. It uses the QMK build environment to compile the keymap and create a firmware file ready for flashing. The command needs a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/horrortroll/caticorn/rev1/hotswap/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake horrortroll/caticorn/rev1/hotswap:default\n```\n\n----------------------------------------\n\nTITLE: Key Press Event Chain\nDESCRIPTION: Illustrates the flow of information from a user pressing a key to the operating system receiving the input. It shows the progression from user interaction to key press registration, firmware processing, USB transmission, and OS interpretation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/how_keyboards_work.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n+------+         +-----+       +----------+      +----------+     +----+\n| User |-------->| Key |------>| Firmware |----->| USB wire |---->| OS |\n+------+         +-----+       +----------+      +----------+     +----+\n```\n\n----------------------------------------\n\nTITLE: Flashing ScottoMacrodeck Firmware\nDESCRIPTION: This command flashes the compiled firmware to the ScottoMacrodeck. It builds upon the compilation step and uses the QMK build environment's flashing tools.  The device must be in a state where it is ready to receive the firmware, often requiring bootloader activation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/scottokeebs/scottomacrodeck/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake handwired/scottokeebs/scottomacrodeck:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building the Aranck Firmware\nDESCRIPTION: This command is used to compile the firmware for the Aranck keyboard with the default keymap. It assumes that the QMK build environment is already set up. Executing this command generates the firmware file, which can then be flashed onto the Pro Micro controller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/aranck/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake handwired/aranck:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Keychron Q1v1 Firmware (Make)\nDESCRIPTION: These make commands flash the compiled QMK firmware to the Keychron Q1v1 keyboard. The commands build upon the previous building commands. The `:flash` target is used to trigger the flashing process after the compilation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keychron/q1v1/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake keychron/q1v1/ansi:default:flash\nmake keychron/q1v1/ansi_encoder:default:flash\nmake keychron/q1v1/iso:default:flash\nmake keychron/q1v1/iso_encoder:default:flash\n```\n\n----------------------------------------\n\nTITLE: Define Keyboard Layout: fullsize_extended_iso\nDESCRIPTION: This snippet defines a keyboard layout named `LAYOUT_fullsize_extended_iso`. It specifies the arrangement of keys for a fullsize extended ISO keyboard. The actual key arrangement is not present in the provided snippet, implying it's defined elsewhere or implicitly understood by the QMK framework.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/layouts/community/fullsize_extended_iso/readme.md#_snippet_0\n\nLANGUAGE: QMK Layout Definition\nCODE:\n```\nLAYOUT_fullsize_extended_iso\n```\n\n----------------------------------------\n\nTITLE: Building Planck Firmware (Makefile)\nDESCRIPTION: This command builds the default firmware for the Planck keyboard revision 6 (drop version) using the QMK build environment. It assumes that the QMK build environment is properly set up according to the QMK documentation. The output will be a firmware file that can be flashed to the Planck keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/planck/rev6_drop/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake planck/rev6_drop:default\n```\n\n----------------------------------------\n\nTITLE: Tracing variables in QMK code\nDESCRIPTION: This C code snippet demonstrates how to add a traced variable within QMK firmware to monitor its changes during runtime. The `ADD_TRACED_VARIABLE` macro is used to register the variable for tracing, specifying its name, address, and size.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/unit_testing.md#_snippet_4\n\nLANGUAGE: C\nCODE:\n```\nvoid matrix_init_user(void) {\n  ADD_TRACED_VARIABLE(\"layer\", &layer_state, sizeof(layer_state));\n}\n```\n\n----------------------------------------\n\nTITLE: Flashing BastionTKL Firmware with Make\nDESCRIPTION: This command flashes the built firmware onto the BastionTKL keyboard. It uses the `make` command with the target specified as `cannonkeys/bastiontkl:default:flash`. This depends on a correctly configured QMK build environment and a connected keyboard in flashable mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cannonkeys/bastiontkl/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake cannonkeys/bastiontkl:default:flash\n```\n\n----------------------------------------\n\nTITLE: Defining 65% ISO Blocker Keyboard Layout\nDESCRIPTION: This snippet defines a keyboard layout using a pre-defined macro in the QMK firmware.  It creates a 65% layout with an ISO blocker, Tsangan bottom row, and a split backspace key. The actual implementation of the layout is hidden within the `LAYOUT_65_iso_blocker_tsangan_split_bs` macro.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/layouts/community/65_iso_blocker_tsangan_split_bs/readme.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nLAYOUT_65_iso_blocker_tsangan_split_bs\n```\n\n----------------------------------------\n\nTITLE: Building DevastatingTKL Firmware with Make\nDESCRIPTION: This command builds the default keymap for the CannonKeys DevastatingTKL keyboard using the QMK make system. It assumes that the QMK build environment has been properly set up. The resulting firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cannonkeys/devastatingtkl/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake cannonkeys/devastatingtkl:default\n```\n\n----------------------------------------\n\nTITLE: Building the Foxlab Key 65 Universal Keyboard with QMK\nDESCRIPTION: This command builds the default keymap for the Foxlab Key 65 Universal keyboard using the QMK build environment. It assumes that the QMK build environment has already been set up. This example creates the firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/foxlab/key65/universal/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake foxlab/key65/universal:default\n```\n\n----------------------------------------\n\nTITLE: Column Pin Configuration for H87a\nDESCRIPTION: Defines the column pin configuration for the H87a keyboard PCB using the Atmega32u4 controller. This shows the mapping between column numbers and the corresponding pins on the microcontroller, which is critical for scanning the keyboard matrix.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/hineybush/h87a/readme.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n/* Column pin configuration\n * col: 0   1   2   3   4   5   6   7   8   \n * pin: F0  F1  F4  F5  F6  F7  C7  C6  D2\n */\n```\n\n----------------------------------------\n\nTITLE: Building Gherkin Firmware with Make\nDESCRIPTION: This snippet shows how to build the default firmware for the Gherkin keyboard using the `make` command within the QMK environment. It assumes that the QMK build environment has already been set up. This command compiles the firmware and prepares it for flashing to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/40percentclub/gherkin/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake 40percentclub/gherkin:default\n```\n\n----------------------------------------\n\nTITLE: Making Keychron C2 Pro V2 Firmware\nDESCRIPTION: These commands are used to build the firmware for the Keychron C2 Pro V2 keyboard with different configurations (RGB and white backlight) using the QMK build environment.  The `make` command compiles the specified keymap. It relies on a properly set up QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keychron/c2_pro_v2/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake keychron/c2_pro_v2/ansi/rgb:default\n```\n\nLANGUAGE: Shell\nCODE:\n```\nmake keychron/c2_pro_v2/ansi/white:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware to Thinkpad T6x Converter\nDESCRIPTION: This command flashes the default firmware to the Thinkpad T6x keyboard converter using the QMK build environment.  It depends on the QMK build environment and a connected Raspberry Pi Pico in flashing mode.  The process assumes the necessary tools for flashing are installed and configured.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/converter/thinkpad_t6x/rpi_pico/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake converter/thinkpad_t6x/rpi_pico:default:flash\n```\n\n----------------------------------------\n\nTITLE: Including Combo Header in keymap.c\nDESCRIPTION: This snippet demonstrates how to include the `g/keymap_combos.h` header file in your `keymap.c` file. This includes the definitions for your combos, as defined in `combos.def`, into your keymap. Make sure the path is correct relative to your project structure.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/gboards/readme.md#_snippet_3\n\nLANGUAGE: C\nCODE:\n```\n#include \"g/keymap_combos.h\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Line RGBs - C\nDESCRIPTION: This code snippet shows how to enable the \"Line RGBs\" option by uncommenting the `#define LINES_RGBS` line in the `config.h` file. This limits the RGB lighting to only the LEDs on the two alpha cluster rows.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/smithrune/iron165r2/readme.md#_snippet_3\n\nLANGUAGE: C\nCODE:\n```\n#define LINES_RGBS\n```\n\n----------------------------------------\n\nTITLE: Flashing the Palmetto Keyboard Firmware\nDESCRIPTION: This command flashes the default firmware to the Palmetto keyboard using the QMK build environment. It requires the QMK build environment to be set up beforehand, and the keyboard needs to be in a state where it can receive the firmware. This typically involves putting the keyboard into bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/montsinger/palmetto/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake montsinger/palmetto:default:flash\n```\n\n----------------------------------------\n\nTITLE: Enabling Luke RGBs - C\nDESCRIPTION: This code snippet shows how to enable the \"Luke RGBs\" option by uncommenting the `#define LUKE_RGBS` line in the `config.h` file. This turns on the Line RGBs and D25-D23 LEDs to avoid hotspotting on the rune backplate.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/smithrune/iron165r2/readme.md#_snippet_4\n\nLANGUAGE: C\nCODE:\n```\n#define LUKE_RGBS\n```\n\n----------------------------------------\n\nTITLE: Making Pachi RGB Rev2 with QMK\nDESCRIPTION: This command builds the firmware for the Pachi RGB Rev2 keyboard using the QMK build environment.  It compiles the keyboard layout defined as 'default' for the 'xelus/pachi/rgb/rev2' keyboard. Ensure the QMK build environment is correctly set up before running this command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/xelus/pachi/rgb/rev2/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake xelus/pachi/rgb/rev2:default\n```\n\n----------------------------------------\n\nTITLE: Building WT75-A Keyboard Firmware with QMK\nDESCRIPTION: This snippet demonstrates how to build the default firmware for the wilba.tech WT75-A keyboard using the QMK build environment.  It requires a properly configured QMK build environment. The command will compile the firmware and generate a .hex file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wilba_tech/wt75_a/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake wilba_tech/wt75_a:default\n```\n\n----------------------------------------\n\nTITLE: Flashing QMK Firmware to RAMA WORKS M10-C\nDESCRIPTION: This command builds and flashes the QMK firmware to the RAMA WORKS M10-C keyboard with the default keymap. It requires a properly configured QMK build environment and a compatible flashing tool.  Ensure the keyboard is in the correct bootloader mode before executing this command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wilba_tech/rama_works_m10_c/readme.md#_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nmake wilba_tech/rama_works_m10_c:default:flash\n```\n\n----------------------------------------\n\nTITLE: Compile and Flash Firmware for Soldered PCB - QMK\nDESCRIPTION: This command compiles and flashes the QMK firmware for the Mode Eighty V2 keyboard with a soldered PCB using the default layout and `dfu-util`. It assumes the keyboard is in DFU mode. The QMK build environment and `dfu-util` must be installed and configured.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mode/m80v2/readme.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nmake mode/m80v2/m80v2s:default:flash # Soldered\n```\n\n----------------------------------------\n\nTITLE: Defining Keyboard Layout Macro\nDESCRIPTION: This snippet defines a keyboard layout using a macro.  The macro name `LAYOUT_tkl_f13_iso_wkl_split_bs_rshift` is likely used to specify the key positions and functionality within the keyboard firmware. The exact implementation of the macro would be found in the QMK firmware source code.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/layouts/community/tkl_f13_iso_wkl_split_bs_rshift/readme.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nLAYOUT_tkl_f13_iso_wkl_split_bs_rshift\n```\n\n----------------------------------------\n\nTITLE: Building Planck Firmware (QMK)\nDESCRIPTION: This command is used to build the default firmware for the Planck keyboard revision 3 using the QMK build environment.  It requires the QMK build environment to be set up.  The output will be a compiled firmware file that can be flashed onto the Planck keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/planck/rev3/readme.md#_snippet_0\n\nLANGUAGE: makefile\nCODE:\n```\nmake planck/rev3:default\n```\n\n----------------------------------------\n\nTITLE: Building Viterbi Keyboard Firmware\nDESCRIPTION: This command is used to build the default firmware for the Viterbi keyboard (revision 1) using the QMK build environment. It compiles the keyboard layout and necessary files to create a firmware image that can be flashed onto the keyboard's Pro Micro controller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keebio/viterbi/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake keebio/viterbi/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Building the Aswagata Keymap (QMK)\nDESCRIPTION: This command builds the default keymap for the SyenaKeyboards Aswagata macropad using the QMK Firmware build environment. It assumes that the QMK build environment has already been set up. The output is a firmware file that can be flashed to the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/syenakeyboards/aswagata/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake syenakeyboards/aswagata:default\n```\n\n----------------------------------------\n\nTITLE: Flashing keyten kt3700 Firmware\nDESCRIPTION: This command builds and flashes the default firmware for the keyten kt3700 keyboard.  It requires a configured build environment and a connected keyboard in a flashable state. The command compiles the firmware, identifies the correct flashing tool for the keyboard, and uploads the firmware to the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keyten/kt3700/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake keyten/kt3700:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Keyboard Firmware (Make)\nDESCRIPTION: This command builds the firmware for the handwired/tractyl_manuform/5x6_right/f411 keyboard with the default configuration. It compiles the keyboard's source code into a firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/tractyl_manuform/5x6_right/f303/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/tractyl_manuform/5x6_right/f411:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Keyboard Firmware (Make)\nDESCRIPTION: This command flashes the default firmware onto the Mechlovin Olly JF Rev. 1 keyboard.  It assumes the QMK build environment is set up and that the board is in a flashable state (e.g., bootloader mode).  The output is the flashed firmware on the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechlovin/olly/jf/rev1/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake mechlovin/olly/jf/rev1:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building TMO V2 Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the TMO V2 keyboard using the QMK build environment. It assumes that the QMK build environment has already been set up according to the QMK documentation. The output will be a .hex or .bin file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cannonkeys/tmov2/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake cannonkeys/tmov2:default\n```\n\n----------------------------------------\n\nTITLE: Flashing WT65-H3 Keyboard Firmware\nDESCRIPTION: This command flashes the default firmware to the wilba_tech WT65-H3 keyboard. It uses the `make` command with the target `wilba_tech/wt65_h3:default:flash`. Ensure the QMK build environment is properly set up and the keyboard is in bootloader mode before running this command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wilba_tech/wt65_h3/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake wilba_tech/wt65_h3:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Firmware with QMK CLI\nDESCRIPTION: This command builds the QMK firmware for the System76 Launch keyboard using the QMK CLI. It compiles the keymap 'default'. The QMK CLI needs to be installed and configured before running this command. No input is required, and the output is a compiled firmware binary.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/system76/launch_1/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nqmk compile -kb system76/launch_1 -km default\n```\n\n----------------------------------------\n\nTITLE: Building Lily58 Lite Rev3 with QMK\nDESCRIPTION: This command builds the default keymap for the Lily58 Lite Rev3 keyboard using the QMK firmware build environment.  It requires the QMK build environment to be set up correctly. The output will be a .hex or .bin file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/lily58/lite_rev3/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake lily58/lite_rev3:default\n```\n\n----------------------------------------\n\nTITLE: Compiling Default Keymap for Acheron Lasgweloth in QMK\nDESCRIPTION: This command compiles the default keymap for the Acheron Lasgweloth keyboard using the QMK firmware build environment. It requires a correctly set up build environment as described in the QMK documentation.  The output will be a firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/acheron/lasgweloth/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake acheron/lasgweloth:default\n```\n\n----------------------------------------\n\nTITLE: Flashing ErgoDox EZ Firmware with Make\nDESCRIPTION: These commands demonstrate how to build and flash the default firmware to the ErgoDox EZ keyboard, as well as the ErgoDox EZ Shine and Glow versions. The user needs to have the QMK build environment set up correctly. This assumes the `default` keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ergodox_ez/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake ergodox_ez:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Noxary 280 with QMK (Makefile)\nDESCRIPTION: This command builds the default keymap for the Noxary 280 keyboard using the QMK firmware build environment. It requires QMK to be set up correctly and the keyboard definition to be present. The output is a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/noxary/280/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake noxary/280:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware to Kbd0 Curve0 60 ANSI\nDESCRIPTION: This command builds and flashes the default firmware to the kbd0/curve0/60_ansi keyboard. It requires a properly configured QMK build environment and a connected keyboard in bootloader mode. The command assumes that the flashing tool is correctly configured within the QMK environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kbd0/curve0/60_ansi/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake kbd0/curve0/60_ansi:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Steezy60 Firmware (Make)\nDESCRIPTION: These make commands build the default firmware for the Steezy60 Rev A and Rev B keyboards. They utilize the QMK build environment and require the keyboard name and layout to be specified. The output is a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/4pplet/steezy60/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake 4pplet/steezy60/rev_a:default\nmake 4pplet/steezy60/rev_b:default\n```\n\n----------------------------------------\n\nTITLE: Flashing ACR60 Firmware with Make\nDESCRIPTION: This command flashes the default firmware to the ACR60 keyboard using the make command. It requires the QMK build environment to be set up and assumes the necessary flashing tools are installed and configured.  The keyboard must be in a flashable state, such as bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechkeys/acr60/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake mechkeys/acr60:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing REVIUNG5 Firmware with QMK\nDESCRIPTION: This command compiles and flashes the QMK firmware to the REVIUNG5 macropad using the default keymap.  It assumes the QMK build environment is set up correctly and that the device is connected and in a flashable state. This will overwrite the existing firmware on the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/reviung/reviung5/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake reviung5:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building hannah60rgb Keyboard Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the hannah60rgb keyboard rev1 using the QMK build environment. It assumes that the build environment has been set up according to the QMK documentation. The output will be a firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechlovin/hannah60rgb/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake mechlovin/hannah60rgb/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Building Prime_EXL Plus Firmware with QMK\nDESCRIPTION: These commands demonstrate how to build the firmware for the Prime_EXL Plus keyboard using the QMK build environment. The first command builds the default keymap, and the second command builds the VIA keymap. Ensure the QMK build environment is set up before running these commands.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/prime_exl_plus/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/prime_exl_plus:default\n```\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/prime_exl_plus:via\n```\n\n----------------------------------------\n\nTITLE: Flashing FAve 65S Firmware with QMK\nDESCRIPTION: This command flashes the compiled QMK firmware to the FAve 65S keyboard using the default keymap.  It depends on the QMK build environment being configured correctly and requires the keyboard to be in bootloader mode. This action overwrites the existing firmware on the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/era/linx3/fave65s/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake era/linx3/fave65s:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Firmware with DFU Bootloader\nDESCRIPTION: This snippet shows how to build the default firmware for the takashicompany/tightwriter keyboard using the make command, specifically targeting the DFU bootloader, which is common on Pro Micro alternatives. It builds the firmware ready to be flashed via DFU.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/takashicompany/tightwriter/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake takashicompany/tightwriter:default:dfu\n```\n\n----------------------------------------\n\nTITLE: Flashing gos65 Firmware (Makefile)\nDESCRIPTION: This command flashes the compiled firmware to the gos65 keyboard.  It uses the QMK make system to compile and flash the code for the senselessclay/gos65 keyboard with the default configuration. A QMK build environment and appropriate flashing tools are required.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/senselessclay/gos65/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake senselessclay/gos65:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Adelais rgb_led Firmware\nDESCRIPTION: This command compiles the QMK firmware for the Adelais keyboard with per-key RGB LEDs (Adelais En Ciel). It uses the default keymap and assumes the QMK build environment is already set up. The output is a firmware file ready for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechlovin/adelais/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake mechlovin/adelais/rgb_led:default\n```\n\n----------------------------------------\n\nTITLE: Building .hex with custom keymap for Let's Split Rev2\nDESCRIPTION: This command builds a .hex file for the Let's Split Rev2 keyboard using a custom keymap. Replace `YOUR_KEYMAP_NAME` with the name of your keymap directory located within the `keymaps/` directory. The command compiles the firmware with the specified keymap for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/lets_split/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ make lets_split/rev2:YOUR_KEYMAP_NAME\n```\n\n----------------------------------------\n\nTITLE: Flashing Keyboard Firmware (Make)\nDESCRIPTION: This command builds and flashes the firmware to the handwired/tractyl_manuform/5x6_right/f411 keyboard with the default configuration. It combines the build process with the flashing process, which writes the compiled firmware to the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/tractyl_manuform/5x6_right/f303/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/tractyl_manuform/5x6_right/f411:default:flash\n```\n\n----------------------------------------\n\nTITLE: Compiling Paddino02 Firmware\nDESCRIPTION: Compiles the QMK firmware for the Paddino02 macropad using the `make` command. Different targets specify the PCB revision (rev1, rev2) and handedness (right, left). This creates the firmware file that can be flashed onto the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/pimentoso/paddino02/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake pimentoso/paddino02/rev2/right:default\n```\n\nLANGUAGE: Shell\nCODE:\n```\nmake pimentoso/paddino02/rev2/left:default\n```\n\nLANGUAGE: Shell\nCODE:\n```\nmake pimentoso/paddino02/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Building Black E6.5 Firmware - QMK\nDESCRIPTION: This command builds the default keymap for the Black E6.5 keyboard. It uses the `make` command within the QMK firmware environment.  Ensure the build environment is set up correctly before executing this command. The resulting firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/horrortroll/chinese_pcb/black_e65/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake horrortroll/chinese_pcb/black_e65:default\n```\n\n----------------------------------------\n\nTITLE: Building DDG-56 Firmware with Make\nDESCRIPTION: This command builds the default firmware for the handwired/ddg_56 keyboard using the QMK make system. It requires the QMK build environment to be set up correctly.  The output will be a .hex or .bin file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/ddg_56/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/ddg_56:default\n```\n\n----------------------------------------\n\nTITLE: Flashing dumbpad v3.x default firmware using make\nDESCRIPTION: This command flashes the default firmware onto the dumbpad v3.x keyboard. It depends on the QMK build environment and the 'make' utility. It assumes that the keyboard is connected and in a state ready to receive the flashed firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/dumbpad/v3x/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake dumbpad/v3x:default:flash\n```\n\n----------------------------------------\n\nTITLE: Board Initialization Function Definition\nDESCRIPTION: This snippet shows the standard `__early_init()` function definition required in `board.c` for new board definitions, along with the empty `boardInit()` function. It is part of ChibiOS board definitions and is intended to be migrated to `early_hardware_init_pre()`/`early_hardware_init_post()` and `board_init()` respectively.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/pr_checklist.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Staging and Committing Changes\nDESCRIPTION: These Git commands stage changes made to a specific file and commit them with a descriptive message. `git add` prepares the changes for commit, and `git commit` saves them to the local repository with a message explaining the changes.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/newbs_git_using_your_master_branch.md#_snippet_5\n\nLANGUAGE: Git\nCODE:\n```\ngit add path/to/updated_file\ngit commit -m \"My commit message.\"\n```\n\n----------------------------------------\n\nTITLE: Flashing Wavelet Keyboard Firmware with avrdude\nDESCRIPTION: This command builds and flashes the QMK firmware for the Keebio Wavelet keyboard with the default keymap using avrdude. Avrdude is a command-line utility for programming the flash memory of AVR microcontrollers. This command requires avrdude to be installed and configured correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keebio/wavelet/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake keebio/wavelet:default:avrdude\n```\n\n----------------------------------------\n\nTITLE: Building and Flashing Firmware\nDESCRIPTION: These commands are used to build the firmware for the Hillside 46 keyboard with the default_dot_c keymap and then flash it to the keyboard. The `make` command compiles the keymap, and the `flash` target uploads it to the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/hillside/46/keymaps/default_dot_c/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake hillside/46:default_dot_c\nmake hillside/46:default_doc_c:flash\n```\n\n----------------------------------------\n\nTITLE: Define ortho_5x14 layout\nDESCRIPTION: This code snippet defines a keyboard layout named `LAYOUT_ortho_5x14`. This layout is likely used in QMK Firmware to describe the physical arrangement of keys on an ortholinear 5x14 keyboard. This macro would likely expand into a detailed structure representing each key's position.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/layouts/community/ortho_5x14/readme.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nLAYOUT_ortho_5x14\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware to Axolstudio Yeti\nDESCRIPTION: This command builds and flashes the default firmware for the soldered version of the Axolstudio Yeti keyboard. It assumes the QMK build environment is properly configured and the necessary flashing tools are installed. The keyboard must be connected to the computer via USB.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/axolstudio/yeti/soldered/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake axolstudio/yeti/soldered:default:flash\n```\n\n----------------------------------------\n\nTITLE: Compiling Austin Default Keymap with QMK\nDESCRIPTION: This command compiles the default keymap for the Acheron Austin keyboard using the QMK firmware. It assumes that the QMK build environment has already been set up. The command uses the `make` utility to build the firmware with the specified keyboard and keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/acheron/austin/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake acheron/austin:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Dactyl Maximus Firmware\nDESCRIPTION: This command compiles and flashes the firmware for the Dactyl Maximus keyboard with the default keymap. It requires a configured QMK build environment and a connected microcontroller in bootloader mode. It uses the dfu-programmer or similar tool to upload the firmware to the microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/dactyl_maximus/readme.md#_snippet_1\n\nLANGUAGE: makefile\nCODE:\n```\nmake handwired/dactyl_maximus:default:flash\n```\n\n----------------------------------------\n\nTITLE: Supporting a Layout in Keyboard Header\nDESCRIPTION: This code snippet demonstrates how to define a layout in a keyboard's header file (`<keyboard>.h`). The `LAYOUT_60_ansi` macro is defined to match the `KEYMAP_ANSI` keymap, establishing the keyboard's support for the specified layout.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/feature_layouts.md#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n#define LAYOUT_60_ansi KEYMAP_ANSI\n```\n\n----------------------------------------\n\nTITLE: Flash Firmware to 3dfoxc using DFU\nDESCRIPTION: This command flashes the compiled firmware to the 3dfoxc keyboard using the DFU bootloader. It's specifically intended for the Elite-C microcontroller used in this build.  It requires a correctly configured QMK build environment and the `dfu-programmer` tool.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/3dfoxc/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake handwired/3dfoxc:default:dfu\n```\n\n----------------------------------------\n\nTITLE: Multiple Keymap JSON Files in Workflow\nDESCRIPTION: This YAML code snippet shows how to configure the GitHub Actions workflow to build multiple keymap JSON files. By listing them under the `matrix.file:` section, the workflow iterates through each file and builds the corresponding firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/newbs_building_firmware_workflow.md#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\nfile:\n        - planck.json\n        - crkbd.json\n```\n\n----------------------------------------\n\nTITLE: Building HS60 V2 Firmware with Make\nDESCRIPTION: This command builds the HS60 V2 firmware for a specified layout using the `make` command. It requires a properly configured QMK build environment.  The `<layout>` placeholder should be replaced with the desired layout (e.g., `iso`, `ansi`).\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/hs60/v2/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake hs60/v2/<layout>:default\n```\n\n----------------------------------------\n\nTITLE: Compiling Dozen0 Firmware with QMK\nDESCRIPTION: This command compiles the default firmware for the Dozen0 keyboard using the QMK build environment. It assumes that the QMK build environment has been properly set up. The output is a .hex or .bin file that can be flashed onto the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/yynmt/dozen0/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake yynmt/dozen0:default\n```\n\n----------------------------------------\n\nTITLE: Building Raine-m³ Firmware with QMK\nDESCRIPTION: This code snippet shows the command to build the default firmware for the Raine-m³ keyboard using the QMK build environment. It assumes that the QMK build environment is already set up. The command compiles the firmware and generates a .hex file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/akb/raine/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake akb/raine:default\n```\n\n----------------------------------------\n\nTITLE: Flashing RK G68 with Default Keymap (QMK)\nDESCRIPTION: This command compiles and flashes the default keymap to the Royal Kludge RK G68 keyboard using the QMK build system. It requires a correctly configured QMK build environment and a connected keyboard in bootloader mode. The command combines the compilation and flashing steps for convenience.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/rkg68/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake rkg68:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Keyboard Firmware with Make\nDESCRIPTION: This command builds and flashes the firmware for the handwired/symmetric70_proto keyboard with the proton_c controller, using the 'normal' keymap configuration and the 'default' keymap layout. The ':flash' option instructs the 'make' command to flash the compiled firmware to the keyboard controller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/symmetric70_proto/proton_c/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/symmetric70_proto/proton_c/normal:default:flash\n```\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/symmetric70_proto/proton_c/fast:default:flash\n```\n\n----------------------------------------\n\nTITLE: Compiling Apollo80 Firmware with QMK Compile\nDESCRIPTION: This command compiles the QMK firmware for the Apollo80 keyboard using the `qmk compile` command. It specifies the keyboard layout to use and outputs a firmware file that can be flashed to the keyboard. Requires QMK MSYS environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/gray_studio/apollo80/readme.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nqmk compile -kb gray_studio/apollo80 -km default\n```\n\n----------------------------------------\n\nTITLE: Setting Compile Configuration Values with QMK CLI\nDESCRIPTION: This snippet shows how to set `compile.keyboard` and `compile.keymap` configurations using the qmk config command. This eliminates the need to specify the keyboard and keymap each time the `qmk compile` command is run.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/cli_configuration.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ qmk config compile.keyboard=clueboard/66/rev4 compile.keymap=default\n```\n\n----------------------------------------\n\nTITLE: Enabling Auto Shift Modifiers in config.h (QMK, C)\nDESCRIPTION: This snippet shows how to enable Auto Shift when modifier keys are pressed by adding a define to your `config.h` file. By default, Auto Shift is disabled when modifiers are used. Enabling this will cause Ctrl+A (held) to become Ctrl+Shift+A.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/auto_shift.md#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n#define AUTO_SHIFT_MODIFIERS\n```\n\n----------------------------------------\n\nTITLE: Flashing Exent Keyboard Firmware\nDESCRIPTION: This command flashes the default keymap onto the Exent keyboard using the QMK build environment. It requires the QMK build environment to be configured correctly and the necessary tools for flashing to be installed. The command assumes that the board is in the correct mode to receive the flash.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/exent/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake exent:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building UA62 Firmware with QMK\nDESCRIPTION: This snippet demonstrates how to build the default firmware for the UA62 keyboard using the QMK build environment. It utilizes the `make` command with the specific keyboard and keymap identifiers. Ensure that the QMK build environment is properly set up before executing this command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/nacly/ua62/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake nacly/ua62:default\n```\n\n----------------------------------------\n\nTITLE: Defining Diode Direction in QMK config.h\nDESCRIPTION: This code snippet defines the diode direction in the keyboard matrix in QMK firmware, either COL2ROW or ROW2COL. COL2ROW means the black mark on the diode is facing to the rows, and between the switch and the rows. This setting is configured in the `config.h` file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/config_options.md#_snippet_12\n\nLANGUAGE: c\nCODE:\n```\n#define DIODE_DIRECTION COL2ROW\n```\n\n----------------------------------------\n\nTITLE: Making the keyboard with QMK\nDESCRIPTION: This command builds the default keymap for the Prototypist J-01 keyboard using the QMK firmware. It assumes that the QMK build environment has been properly set up. The output is a firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/prototypist/j01/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake prototypist/j01:default\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Pointing Device Task with Auto Mouse - C\nDESCRIPTION: This code snippet demonstrates how to implement a custom pointing device task while integrating the automatic mouse layer activation. It includes calling `pointing_device_task_auto_mouse` with the mouse report to handle target layer activation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/pointing_device.md#_snippet_29\n\nLANGUAGE: c\nCODE:\n```\nbool pointing_device_task(void) {\n    //...Custom pointing device task code\n    \n    // handle automatic mouse layer (needs report_mouse_t as input)\n    pointing_device_task_auto_mouse(local_mouse_report);\n    \n    //...More custom pointing device task code\n    \n    return pointing_device_send();\n}\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for TKC TKL A/B87 using Make\nDESCRIPTION: This command builds the default firmware for the TKC TKL A/B87 keyboard using the QMK build environment.  It utilizes the `make` command with the target specified as `tkc/tkl_ab87:default`.  Ensure the QMK build environment is properly configured before execution.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/tkc/tkl_ab87/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake tkc/tkl_ab87:default\n```\n\n----------------------------------------\n\nTITLE: Building NormiePad Firmware (QMK)\nDESCRIPTION: This command compiles the QMK firmware for the NormiePad keyboard with the default keymap.  It assumes that the QMK build environment has already been set up according to the QMK documentation. The compiled firmware file can then be flashed onto the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/matchstickworks/normiepad/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake matchstickworks/normiepad:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Canoe Firmware with Make\nDESCRIPTION: This command builds and flashes the default keymap to the Canoe keyboard. It depends on the QMK build environment being set up correctly and the necessary flashing tools being installed. The keyboard needs to be in a flashable state (e.g., DFU mode).\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/percent/canoe/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake percent/canoe:default:flash\n```\n\n----------------------------------------\n\nTITLE: Setting the Bootloader in rules.mk for Caterina\nDESCRIPTION: This snippet sets the `BOOTLOADER` variable in the `rules.mk` file to `caterina`. This configuration is necessary for keyboards using the Caterina bootloader, typically found on Arduino-based boards like Pro Micros.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/flashing.md#_snippet_4\n\nLANGUAGE: Make\nCODE:\n```\n# Bootloader selection\nBOOTLOADER = caterina\n```\n\n----------------------------------------\n\nTITLE: Building TH1800 Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the mechlovin/th1800 keyboard using the QMK build environment. It compiles the source code and generates a firmware file that can be flashed onto the keyboard's microcontroller.  This assumes the build environment is already set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechlovin/th1800/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake mechlovin/th1800:default\n```\n\n----------------------------------------\n\nTITLE: Building Chimera Ortho+ Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the Chimera Ortho+ keyboard using the QMK firmware build environment. It assumes that the QMK build environment is already set up. The command compiles the keymap and generates a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/glenpickle/chimera_ortho_plus/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake glenpickle/chimera_ortho_plus:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Flatbread60 Firmware with Make\nDESCRIPTION: This command compiles and flashes the QMK Firmware for the Flatbread60 keyboard with the default keymap. It requires the `make` command and specifies the keyboard, keymap, and the `flash` target. The build environment and necessary flashing tools must be configured beforehand.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/delikeeb/flatbread60/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake delikeeb/flatbread60:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building the Tegic Keyboard Firmware - Make Command\nDESCRIPTION: This command builds the firmware for the MelGeek Tegic keyboard, specifically the 'rev1' version, using the default keymap.  It requires a properly configured QMK build environment.  The output is a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/melgeek/tegic/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake melgeek/tegic/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Building GMMK V2 65% (ANSI) Firmware - Make\nDESCRIPTION: This command compiles the default keymap for the GMMK V2 65% ANSI keyboard using the QMK build environment. It uses the `make` command with the target specified as `gmmk/gmmk2/p65/ansi:default`. This command must be executed in the QMK firmware directory.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/gmmk/gmmk2/p65/ansi/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake gmmk/gmmk2/p65/ansi:default\n```\n\n----------------------------------------\n\nTITLE: Building Noxary 220 Firmware with Make\nDESCRIPTION: This command builds the default keymap for the Noxary 220 keyboard using the `make` command. It requires a properly configured QMK build environment, including the necessary dependencies and toolchain. The resulting firmware can then be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/noxary/220/readme.md#_snippet_0\n\nLANGUAGE: Make\nCODE:\n```\nmake noxary/220:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Kyria Firmware (rev1)\nDESCRIPTION: This command flashes the built QMK firmware to the Kyria keyboard with revision 1 using the default configuration. It assumes the QMK build environment is correctly configured and the keyboard is connected in a flashable state. Requires `dfu-util` or similar flashing tool.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/splitkb/kyria/readme.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nmake splitkb/kyria/rev1:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Chimera65 Hotswap Firmware with QMK\nDESCRIPTION: This command flashes the built firmware to the Chimera65 Hotswap keyboard using the QMK build environment. It requires the QMK build environment to be properly set up, and the keyboard must be in a state where it can accept a flash (e.g., bootloader mode).\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cannonkeys/chimera65_hs/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake cannonkeys/chimera65_hs:default:flash\n```\n\n----------------------------------------\n\nTITLE: Compile and Flash Iron180 Firmware\nDESCRIPTION: This command compiles the QMK firmware for the Iron180 keyboard with the default keymap and then immediately flashes it to the keyboard's PCB, assuming the board is in DFU mode. Requires a properly configured QMK build environment and a DFU flashing tool.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/iron180/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake iron180:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building QMK Firmware for IBM Model M Keyboard\nDESCRIPTION: This command builds the QMK firmware for the IBM Model M keyboard with the `led_ws2812` configuration. It specifies the keyboard layout and the target environment. Before executing this, ensure that the QMK build environment has been set up properly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ibm/model_m/mschwingen/led_ws2812/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake ibm/model_m/mschwingen/led_ws2812:default\n```\n\n----------------------------------------\n\nTITLE: Building the Big Series 4-Key Keyboard Firmware\nDESCRIPTION: This command builds the firmware for the Big Series 4-key keyboard with the default keymap. It assumes that the QMK Firmware build environment has been properly set up.  The output of this command will be the firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/woodkeys/bigseries/4key/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake woodkeys/bigseries/4key:default\n```\n\n----------------------------------------\n\nTITLE: Defining Keyboard-Level Transaction IDs\nDESCRIPTION: This definition specifies a comma-separated list of transaction IDs for keyboard-level data synchronization between the halves of the split keyboard. These IDs are used to register slave-side handler functions with the split transport. It is defined in `config.h`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/split_keyboard.md#_snippet_25\n\nLANGUAGE: c\nCODE:\n```\n// for keyboard-level data sync:\n#define SPLIT_TRANSACTION_IDS_KB KEYBOARD_SYNC_A, KEYBOARD_SYNC_B\n```\n\n----------------------------------------\n\nTITLE: Defining Keyboard Layout: tkl_ansi_wkl_split_bs_rshift\nDESCRIPTION: This code snippet defines a keyboard layout called `LAYOUT_tkl_ansi_wkl_split_bs_rshift`.  It's part of the QMK Firmware project, which is used for customizing keyboard firmware.  The actual key mappings would be defined elsewhere, referencing this layout name.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/layouts/community/tkl_ansi_wkl_split_bs_rshift/readme.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nLAYOUT_tkl_ansi_wkl_split_bs_rshift\n```\n\n----------------------------------------\n\nTITLE: Building QVEX Lynepad with QMK\nDESCRIPTION: This command builds the default keymap for the QVEX Lynepad macro pad using the QMK firmware. It requires a properly configured QMK build environment.  The command will compile the firmware and create a .hex file ready for flashing to the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/qvex/lynepad/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake qvex/lynepad:default\n```\n\n----------------------------------------\n\nTITLE: Building KBD67 Mk.II RGB V1 Firmware - Makefile\nDESCRIPTION: This command builds the default firmware for the KBD67 Mk.II RGB V1 keyboard. It uses the `make` command along with the specific keyboard and keymap identifiers. The command needs to be executed within the QMK firmware environment after setup.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kbdfans/kbd67/mkiirgb/v1/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake kbdfans/kbd67/mkiirgb/v1:default\n```\n\n----------------------------------------\n\nTITLE: Building Rosa Keyboard Firmware\nDESCRIPTION: This command builds the default keymap for the Rosa keyboard using the QMK Firmware build environment. It requires the QMK build environment to be set up correctly, as described in the linked documentation. The output is a .hex or .bin file that can be flashed onto the Rosa keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/illusion/rosa/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake illusion/rosa:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Periboard-512 Firmware\nDESCRIPTION: This command flashes the compiled QMK firmware to the Periboard-512 keyboard using the Teensy++ 2.0. It depends on the QMK build environment and requires the Teensy Loader application to be installed and running.  The keyboard must be in bootloader mode for the flashing to succeed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/converter/periboard_512/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake converter/periboard_512:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Nyx Keyboard Firmware with Make\nDESCRIPTION: This command flashes the compiled firmware onto the Nyx keyboard (rev1) using the QMK make system.  It requires the QMK build environment to be set up and the appropriate flashing tools to be installed. The command combines building and flashing into a single step.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/horrortroll/nyx/rev1/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake horrortroll/nyx/rev1:default:flash\n```\n\n----------------------------------------\n\nTITLE: Listing Python Dependencies for QMK Firmware\nDESCRIPTION: This snippet enumerates the Python packages required to build and utilize QMK Firmware. These dependencies facilitate flashing, keyboard customization, and keymap generation. Installing these packages ensures the proper functioning of QMK-related Python scripts.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/requirements.txt#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nargcomplete\ncolorama\ndotty-dict\nhid\nhjson\njsonschema>=4\nmilc>=1.4.2\npygments\npyserial\npyusb\npillow\n```\n\n----------------------------------------\n\nTITLE: Building KBD67 rev1 Firmware with Make\nDESCRIPTION: This command builds the default firmware for the KBD67 rev1 keyboard using the QMK Make tool.  It compiles the keyboard layout and firmware based on the `kbdfans/kbd67/rev1:default` configuration. The build environment must be set up prior to running this command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kbdfans/kbd67/rev1/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake kbdfans/kbd67/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Building Gray Studio Space65 R3 Firmware\nDESCRIPTION: This command builds the default firmware for the Gray Studio Space65 R3 keyboard. It utilizes the QMK build environment to compile the keyboard's firmware based on the configuration defined in the `gray_studio space65r3:default` directory. The resulting firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/gray_studio/space65r3/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake gray_studio space65r3:default\n```\n\n----------------------------------------\n\nTITLE: Building QMK Firmware for BINEPAD BNK9\nDESCRIPTION: This command builds the default QMK firmware for the BINEPAD BNK9 macropad. It assumes that the build environment has been set up correctly according to the QMK documentation. The output will be a .hex or .bin file that can be flashed to the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/binepad/bnk9/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake binepad/bnk9:default\n```\n\n----------------------------------------\n\nTITLE: Building custom layout for Drop The Key V2 in QMK\nDESCRIPTION: This command builds a customized firmware for the Drop The Key V2 macropad where the keys are configured for URL copy and paste using CTRL+C and CTRL+V. It compiles the custom keymap and generates a firmware image ready for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/drop/thekey/v2/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake drop/thekey/v2:url-copy-paste\n```\n\n----------------------------------------\n\nTITLE: Flashing Alish40 Firmware with DFU (make)\nDESCRIPTION: This command flashes the compiled firmware to the Alish40 keyboard using the DFU bootloader. It uses the `make` command with the `:dfu` target. This is necessary if the default caterina bootloader is not compatible and the Pro Micro alternative requires atmel-dfu.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/reedskeebs/alish40/readme.md#_snippet_2\n\nLANGUAGE: make\nCODE:\n```\nmake reedskeebs/alish40:default:dfu\n```\n\n----------------------------------------\n\nTITLE: Building KBD67 Mk.II RGB V2 Firmware\nDESCRIPTION: This command builds the default firmware for the KBD67 Mk.II RGB V2 keyboard using the QMK build environment. It assumes that the QMK build environment has already been set up. The resulting firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kbdfans/kbd67/mkiirgb/v2/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake kbdfans/kbd67/mkiirgb/v2:default\n```\n\n----------------------------------------\n\nTITLE: Building the Mini Ashen 40 Firmware with Make\nDESCRIPTION: This command builds the default firmware for the Mini Ashen 40 keyboard using the QMK build environment. It compiles the source code and generates the firmware file that can be flashed onto the keyboard.  Requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechanickeys/miniashen40/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake mechanickeys/miniashen40:default\n```\n\n----------------------------------------\n\nTITLE: Setting right hand as master\nDESCRIPTION: This C preprocessor directive defines `MASTER_RIGHT` in the `config.h` file. This configuration makes the right-hand side of the Let's Split keyboard the master when the USB cable is plugged into it. It is useful when the user prefers to have the USB connection on the right side.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/lets_split/readme.md#_snippet_4\n\nLANGUAGE: c\nCODE:\n```\n#define MASTER_RIGHT\n```\n\n----------------------------------------\n\nTITLE: Flashing Elrgo S Keyboard Firmware\nDESCRIPTION: This command flashes the compiled firmware to the Elrgo S keyboard using the default flashing method. It assumes the build environment is correctly set up and that the target microcontroller is accessible. Successful execution will update the keyboard's firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/elrgo_s/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake handwired/elrgo_s:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing EEK! Keyboard Firmware with Silk Up Configuration (Makefile)\nDESCRIPTION: This command builds and flashes the firmware for the EEK! keyboard with the 'silk up' configuration. It requires the QMK build environment and a configured flashing tool. The target device needs to be in bootloader mode to receive the firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/eek/readme.md#_snippet_3\n\nLANGUAGE: Makefile\nCODE:\n```\nmake eek/silk_up:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Speedo v2 Firmware with QMK\nDESCRIPTION: This command compiles and flashes the default keymap for the Speedo v2 keyboard using the QMK build environment. It uses the 'make' command with the specified keyboard, keymap target, and the 'flash' target. This assumes the QMK environment is correctly configured for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cozykeys/speedo/readme.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nmake cozykeys/speedo/v2:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for CannonKeys Petrichor\nDESCRIPTION: This command builds the default firmware for the CannonKeys Petrichor keyboard. It utilizes the QMK make system and targets the `cannonkeys/petrichor` keyboard with the `default` keymap. Ensure the QMK build environment is properly set up before running this command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cannonkeys/petrichor/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake cannonkeys/petrichor:default\n```\n\n----------------------------------------\n\nTITLE: Defining User-Level Transaction IDs\nDESCRIPTION: This definition specifies a comma-separated list of transaction IDs for user-level data synchronization between the halves of the split keyboard. These IDs are used to register slave-side handler functions with the split transport. It is defined in `config.h`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/split_keyboard.md#_snippet_26\n\nLANGUAGE: c\nCODE:\n```\n// or, for user:\n#define SPLIT_TRANSACTION_IDS_USER USER_SYNC_A, USER_SYNC_B, USER_SYNC_C\n```\n\n----------------------------------------\n\nTITLE: Building SUS Board Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the SUS Board using the QMK build environment. It requires the QMK build environment to be properly set up and configured. The output will be a .hex or .bin file that can be flashed to the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ocean/sus/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake ocean/sus:default\n```\n\n----------------------------------------\n\nTITLE: Building Launch Pad Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Launch Pad keyboard using the QMK build environment. It compiles the keymap and firmware and prepares it for flashing onto the keyboard's microcontroller. Ensure the build environment is properly set up before running this command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ungodly/launch_pad/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake ungodly/launch_pad:default\n```\n\n----------------------------------------\n\nTITLE: Building Matrix 8XV2.0 Additional keyboard firmware\nDESCRIPTION: This command builds the default keymap for the Matrix 8XV2.0 Additional keyboard using the QMK firmware build system. It requires a properly configured QMK build environment. The output will be a .hex or .bin file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/matrix/m20add/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake matrix/m20add:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Kudox Full Firmware (QMK)\nDESCRIPTION: This command builds and flashes the QMK firmware to the Kudox Full keyboard (rev1) using the default keymap.  A configured QMK build environment and the appropriate flashing tools are necessary. It combines the build and flash steps into one command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kumaokobo/kudox_full/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake kumaokobo/kudox_full/rev1:default:flash\n```\n\n----------------------------------------\n\nTITLE: Enabling Per-Key Hold On Other Key Press\nDESCRIPTION: This snippet enables per-key configuration for the \"hold on other key press\" feature. By defining `HOLD_ON_OTHER_KEY_PRESS_PER_KEY` and `get_hold_on_other_key_press`, the hold action can be selectively enabled or disabled for individual keycodes based on specific conditions.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/tap_hold.md#_snippet_9\n\nLANGUAGE: c\nCODE:\n```\n#define HOLD_ON_OTHER_KEY_PRESS_PER_KEY\n```\n\n----------------------------------------\n\nTITLE: Enabling UART Driver in QMK\nDESCRIPTION: This snippet shows how to enable the UART driver in QMK by adding a line to the `rules.mk` file. This ensures that the UART driver code is included in the build process. It's required if you're using the driver standalone and not through another feature that depends on it.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/uart.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nUART_DRIVER_REQUIRED = yes\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for MiniTKL\nDESCRIPTION: This command builds the default firmware for the MiniTKL keyboard. It requires a properly configured QMK build environment.  The output will be a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/rastersoft/minitkl/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake rastersoft/minitkl:default\n```\n\n----------------------------------------\n\nTITLE: Flashing XO87 RGB with Default Keymap\nDESCRIPTION: This command compiles and flashes the default keymap to the XO87 RGB keyboard.  It extends the build command by appending `:flash` to the target, triggering the flashing process after compilation. Requires a correctly configured QMK build environment and appropriate flashing tools.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/monstargear/xo87/rgb/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake monstargear/xo87/rgb:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building XT60_SINGA firmware with VIA\nDESCRIPTION: This command compiles the QMK firmware for the XT60_SINGA keyboard with VIA support. It requires the QMK build environment to be set up beforehand.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kopibeng/xt60_singa/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake kopibeng/xt60_singa:via\n```\n\n----------------------------------------\n\nTITLE: Building QMK Firmware for RAMA WORKS M50-A\nDESCRIPTION: This command builds the QMK firmware for the RAMA WORKS M50-A keyboard with the default keymap. It requires a properly configured QMK build environment. The output is a firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wilba_tech/rama_works_m50_a/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake wilba_tech/rama_works_m50_a:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Bastion60 Firmware using Make\nDESCRIPTION: This command compiles and flashes the QMK firmware to the Bastion60 keyboard. It requires a properly configured QMK build environment and a connected keyboard in a flashable state.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cannonkeys/bastion60/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake cannonkeys/bastion60:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Dactyl Kinesis Firmware\nDESCRIPTION: This command builds the default keymap for the Dactyl Kinesis keyboard using the QMK build environment. It compiles the firmware for the handwired/dactyl_kinesis keyboard with the default keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/dactyl_kinesis/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake handwired/dactyl_kinesis:default\n```\n\n----------------------------------------\n\nTITLE: Flashing DOIO KB09 Firmware\nDESCRIPTION: This command flashes the built firmware onto the DOIO KB09 keypad. It utilizes the `make` command with the target specified as `doio/kb09:default:flash`.  This requires a properly configured QMK build environment and the necessary flashing tools installed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/doio/kb09/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake doio/kb09:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Bison Keyboard Firmware - Makefile\nDESCRIPTION: This command builds the default keymap for the Bison keyboard within the QMK Firmware environment. It utilizes the 'make' command with the 'bison' target and 'default' keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keyprez/bison/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake bison:default\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation Directive in keymap.c (C)\nDESCRIPTION: This snippet shows how to conditionally disable the \"revive dead keys\" feature by uncommenting a preprocessor directive.  If `DONT_REVIVE_DEADKEYS` is defined, the dead keys will not be revived by automatically inserting a space.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/sentraq/s60_x/keymaps/ansi_qwertz/readme.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n//#define DONT_REVIVE_DEADKEYS 1\n```\n\n----------------------------------------\n\nTITLE: Building Singa Keyboard Firmware (Make)\nDESCRIPTION: This command builds the default firmware for the Singa keyboard using the `make` command. It assumes that the QMK build environment has been set up correctly as described in the linked documentation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/singa/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake singa:default\n```\n\n----------------------------------------\n\nTITLE: Enabling ST7789 Driver in rules.mk (Make)\nDESCRIPTION: This snippet demonstrates how to enable the ST7789 display driver for Quantum Painter by adding the driver to the `QUANTUM_PAINTER_DRIVERS` variable in the `rules.mk` file. This step is necessary to include the driver in the build process. Dependencies include Quantum Painter being enabled.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/quantum_painter.md#_snippet_23\n\nLANGUAGE: make\nCODE:\n```\nQUANTUM_PAINTER_ENABLE = yes\nQUANTUM_PAINTER_DRIVERS += st7789_spi\n```\n\n----------------------------------------\n\nTITLE: Building Keychron Q1v1 Firmware (Make)\nDESCRIPTION: These make commands compile the QMK firmware for the Keychron Q1v1 keyboard with different layouts (ANSI, ISO) and encoder configurations.  The commands use the `make` utility. The resulting firmware can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keychron/q1v1/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake keychron/q1v1/ansi:default\nmake keychron/q1v1/ansi_encoder:default\nmake keychron/q1v1/iso:default\nmake keychron/q1v1/iso_encoder:default\n```\n\n----------------------------------------\n\nTITLE: Compiling QMK Firmware\nDESCRIPTION: This command compiles the QMK firmware for the handwired/protype keyboard with the default keymap. It requires the QMK build environment to be set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/protype/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nqmk compile -kb handwired/protype -km default\n```\n\n----------------------------------------\n\nTITLE: Building QMK Firmware for Mars 8.0 Keyboard\nDESCRIPTION: This command builds the QMK firmware for the Mars 8.0 keyboard with the default keymap.  It requires the QMK build environment to be set up correctly. The output will be a .hex or .bin file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ft/mars80/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake ft/mars80:default\n```\n\n----------------------------------------\n\nTITLE: Building ASH-1800 Firmware\nDESCRIPTION: This snippet shows how to build the default firmware for the ASH-1800 keyboard using the QMK build environment. It assumes that the QMK build environment is already set up. The output will be the compiled firmware that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ash1800/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake ash1800:default\n```\n\n----------------------------------------\n\nTITLE: Building the Sneakbox Alice Clone RGB Firmware\nDESCRIPTION: This command builds the default firmware for the Sneakbox Alice Clone RGB keyboard using the QMK build environment.  It requires the QMK build environment to be set up beforehand. The output will be a firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/sneakbox/aliceclonergb/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake sneakbox/aliceclonergb:default\n```\n\n----------------------------------------\n\nTITLE: Flashing is0GR Keyboard Firmware (QMK)\nDESCRIPTION: This command flashes the compiled firmware to the is0GR keyboard using the QMK build environment and a compatible flashing tool. It uploads the firmware to the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cannonkeys/is0gr/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake cannonkeys/is0gr:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Barleycorn SMD Firmware with Make\nDESCRIPTION: This command builds the default firmware for the Barleycorn SMD keyboard using the QMK build environment. It compiles the source code and creates a firmware image ready for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/barleycorn_smd/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake barleycorn_smd:default\n```\n\n----------------------------------------\n\nTITLE: Building Trackpoint Keyboard Firmware (QMK)\nDESCRIPTION: This command builds the QMK firmware for a handwired keyboard with Trackpoint functionality using the default configuration. It assumes the QMK build environment is already set up.  The resulting firmware can then be flashed to the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/trackpoint/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake handwired/trackpoint:default\n```\n\n----------------------------------------\n\nTITLE: Building Trainpad Keyboard Firmware (Makefile)\nDESCRIPTION: This command builds the default firmware for the trainpad keyboard using the QMK build environment. It compiles the source code and generates a firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/trainpad/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake trainpad:default\n```\n\n----------------------------------------\n\nTITLE: Building Krush60 Solder Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the Krush60 Solder version using the QMK build environment.  It requires the QMK build environment to be set up correctly. The output will be a .hex or .bin file suitable for flashing to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/sawnsprojects/krush/krush60/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake sawnsprojects/krush/krush60/solder:default\n```\n\n----------------------------------------\n\nTITLE: Flashing SHU98 Firmware (QMK)\nDESCRIPTION: This command builds and flashes the default firmware to the SHU98 keyboard using the QMK build system. It compiles the source code, generates the firmware image, and then flashes it onto the keyboard's microcontroller. Requires the QMK build environment and necessary flashing tools to be configured.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/shuguet/shu89/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake shuguet/shu89:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Matrix 8XV1.2 OG Firmware\nDESCRIPTION: This command builds the default firmware for the Matrix 8XV1.2 OG keyboard (rev1). It assumes that the QMK build environment has been set up properly. The output will be a .bin file which can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/matrix/m12og/rev1/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake matrix/m12og/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Mode SixtyFive HI rev. Alpha Firmware (Makefile)\nDESCRIPTION: This command flashes the default firmware to the Mode SixtyFive HI rev. Alpha keyboard. It uses the `make` command with the keyboard's designated target. Requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mode/m65hi_alpha/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake mode/m65hi_alpha:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Clueboard 66% HotSwap Firmware\nDESCRIPTION: This command compiles the QMK firmware for the Clueboard 66% HotSwap keyboard, specifically for the gen1 hardware revision, using the default keymap. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/clueboard/66_hotswap/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake clueboard/66_hotswap/gen1:default\n```\n\n----------------------------------------\n\nTITLE: Building the ortho5by12 Firmware\nDESCRIPTION: This command builds the default firmware for the ortho5by12 keyboard. It assumes that the QMK build environment has been properly set up. It compiles the keyboard's keymap and firmware using the QMK build system.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ortho5by12/readme.md#_snippet_0\n\nLANGUAGE: makefile\nCODE:\n```\nmake ortho5by12:default\n```\n\n----------------------------------------\n\nTITLE: Flashing MS Sculpt Keyboard Firmware\nDESCRIPTION: This command builds and flashes the default keymap for the MS Sculpt keyboard to the connected STM32F401 microcontroller. It requires the QMK build environment to be properly set up and the necessary flashing tools to be installed.  The command assumes the keyboard is already in the correct bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ms_sculpt/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake ms_sculpt:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing 3x3macropad with QMK\nDESCRIPTION: This command flashes the compiled firmware onto the 3x3macropad keyboard using the QMK build environment. It requires the QMK build environment to be properly set up and the keyboard to be in bootloader mode. The command uploads the .hex or .bin file to the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/rarepotato8de/3x3macropad/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake rarepotato8de/3x3macropad:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building ENDLESS80 Firmware with Make\nDESCRIPTION: This command builds the default firmware for the ENDLESS80 keyboard using the QMK build environment. It assumes that the QMK build environment has already been set up according to the QMK documentation. The command compiles the keyboard layout defined in the `dztech/endless80:default` directory.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/dztech/endless80/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake dztech/endless80:default\n```\n\n----------------------------------------\n\nTITLE: Building Planck Firmware with Make\nDESCRIPTION: This command builds the default firmware for the Planck rev4 keyboard using the QMK build environment.  It assumes the build environment has already been set up according to the QMK documentation. The command produces a .hex file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/planck/rev4/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake planck/rev4:default\n```\n\n----------------------------------------\n\nTITLE: Flashing MNT Reform Firmware - QMK\nDESCRIPTION: This command flashes the default keymap to the MNT Reform keyboard. It requires the QMK build environment and appropriate flashing tools to be configured. It assumes the keyboard is in a state where it can accept a firmware update (e.g., bootloader mode).\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mntre/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake mntre:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Default Firmware for 7sPlus Keyboard (QMK)\nDESCRIPTION: This command compiles the default keymap for the 7sPlus keyboard using the QMK firmware build environment. It requires QMK to be properly installed and configured. The resulting firmware can then be flashed onto the keyboard's Pro Micro controller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/salicylic_acid3/7splus/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake salicylic_acid3/7splus:default\n```\n\n----------------------------------------\n\nTITLE: Defining Keyboard Layout: LAYOUT_tkl_f13_jis\nDESCRIPTION: This code snippet defines the 'LAYOUT_tkl_f13_jis' keyboard layout. It's part of the QMK Firmware project and represents a Tenkeyless (TKL) layout with an F13 key and a Japanese Industrial Standard (JIS) key arrangement.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/layouts/default/tkl_f13_jis/readme.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nLAYOUT_tkl_f13_jis\n```\n\n----------------------------------------\n\nTITLE: Flashing Whale 75 Firmware\nDESCRIPTION: This command flashes the compiled firmware to the Linworks Whale 75 keyboard. It requires the QMK build environment to be set up and the firmware to be built first. The ':flash' target utilizes the configured flashing tool.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/linworks/whale75/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake linworks/whale75:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building serneity65 Firmware (QMK)\nDESCRIPTION: This command builds the QMK firmware for the serneity65 keyboard with the default keymap.  It compiles the source code and generates a firmware file that can be flashed onto the keyboard.  The command requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wuque/serneity65/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake wuque/serneity65:default\n```\n\n----------------------------------------\n\nTITLE: Building GameBuddy Firmware with QMK\nDESCRIPTION: This command demonstrates how to build the default firmware for the GameBuddy macropad (version 1_m) using QMK's make system. It requires the QMK build environment to be properly set up. The command compiles the keyboard's firmware based on the default keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/clawsome/gamebuddy/v1_m/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake clawsome/gamebuddy/v1_m:default\n```\n\n----------------------------------------\n\nTITLE: Custom Keycode TAP_00 Behavior Definition\nDESCRIPTION: This snippet defines the behavior for the custom keycode TAP_00. When TAP_00 is activated, it simulates pressing the KC_P0 key twice, effectively inputting \"00\". This is achieved via `tap_code(KC_P0) twice`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/yushakobo/navpad/10/keymaps/default/readme.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n|TAP_00|\"00\"|tap_code(KC_P0) twice|\n```\n\n----------------------------------------\n\nTITLE: Global Current Control Configuration in config.h\nDESCRIPTION: This snippet shows how to configure the global current control value for the IS31FL3745 driver. It uses a `#define` directive to set the `IS31FL3745_GLOBAL_CURRENT` macro. This value controls the current sunk by the CSy pins and ranges from 0 to 255.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/is31fl3745.md#_snippet_2\n\nLANGUAGE: c\nCODE:\n```\n#define IS31FL3745_GLOBAL_CURRENT 0xFF\n```\n\n----------------------------------------\n\nTITLE: Building Kira 75 Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Kira 75 keyboard using the QMK firmware framework. It assumes that the QMK build environment has been set up correctly. Refer to the QMK documentation for details on setting up the build environment and using the `make` command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kira/kira75/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake kira/kira75:default\n```\n\n----------------------------------------\n\nTITLE: Current Dance State Function Declaration in QMK\nDESCRIPTION: This code declares the `cur_dance` function, which determines the current state of the tap dance based on the `tap_dance_state_t`. This function determines if the key press is interpreted as a tap or a hold, and whether or not it was interrupted by another key press.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/tap_dance.md#_snippet_14\n\nLANGUAGE: c\nCODE:\n```\ntd_state_t cur_dance(tap_dance_state_t *state);\n```\n\n----------------------------------------\n\nTITLE: Building NK87 Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the NK87 keyboard using the QMK build environment. It compiles the code and prepares it for flashing onto the keyboard's microcontroller.  Ensure that the QMK build environment is properly configured before executing this command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/novelkeys/nk87/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake novelkeys/nk87:default\n```\n\n----------------------------------------\n\nTITLE: Building CowFish Firmware with Make\nDESCRIPTION: This command builds the default keymap for the CowFish keyboard using the QMK Firmware build environment. It requires the QMK build environment to be set up and uses the `make` command with the specified target: `handwired/swiftrax/cowfish:default`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/swiftrax/cowfish/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/swiftrax/cowfish:default\n```\n\n----------------------------------------\n\nTITLE: Flashing ScottoGame Keyboard Firmware\nDESCRIPTION: This command flashes the default firmware onto the ScottoGame keyboard using the QMK build environment. It assumes that the QMK build environment has been set up, and the keyboard is connected to the computer in a flashable state.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/scottokeebs/scottogame/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/scottokeebs/scottogame:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building CB1800 Firmware\nDESCRIPTION: This command builds the default firmware for the CherryB Studio CB1800 keyboard. It assumes the QMK build environment is already set up. The output will be a firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cherrybstudio/cb1800/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake cherrybstudio/cb1800:default\n```\n\n----------------------------------------\n\nTITLE: Building Dynamis Keyboard Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Dynamis keyboard using the QMK build system. It requires a properly configured QMK build environment. The output is a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/bbrfkr/dynamis/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake bbrfkr/dynamis:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Keyboardio Atreus Firmware using Make\nDESCRIPTION: This command builds and flashes the default firmware for the Keyboardio Atreus keyboard using the QMK make system. It requires a properly configured QMK build environment. The command is executed from the root of the QMK firmware repository and requires the keyboard to be in bootloader mode to be successful.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keyboardio/atreus/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake keyboardio/atreus:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware to YMDK Melody96\nDESCRIPTION: This command builds and flashes the default firmware to the YMDK Melody96 Soldered keyboard. It assumes the QMK build environment is set up and the necessary flashing tools are installed and configured.  The keyboard must be in bootloader mode for flashing to succeed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ymdk/melody96/soldered/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake ymdk/melody96/soldered:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building P40 Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Pabile P40 keyboard using the QMK build environment. It assumes that the QMK build environment is already set up and configured. The command compiles the source code, links the necessary libraries, and generates a firmware image that can be flashed onto the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/pabile/p40/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake pabile/p40:default\n```\n\n----------------------------------------\n\nTITLE: Building Chidori Keyboard Firmware\nDESCRIPTION: This command is used to build the firmware for the Chidori keyboard with the default keymap using the usbasp programmer. It relies on the QMK build environment being properly set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kagizaraya/chidori/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake kagizaraya/chidori:default:usbasp\n```\n\n----------------------------------------\n\nTITLE: Building Uni660 Rev2 Firmware\nDESCRIPTION: These commands build the QMK firmware for the Uni660 Rev2 keyboard. The first command builds for the ANSI layout, while the second builds for the ISO layout.  These commands assume a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/sirius/uni660/rev2/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake sirius/uni660/rev2/ansi:default  # for ANSI version\n```\n\nLANGUAGE: Shell\nCODE:\n```\nmake sirius/uni660/rev2/iso:default   # for ISO version\n```\n\n----------------------------------------\n\nTITLE: Building Quarkeys Z67 Hotswap Firmware (Makefile)\nDESCRIPTION: This command builds the default firmware for the Quarkeys Z67 Hotswap keyboard using the QMK build environment. It compiles the keyboard's keymap and firmware, ready for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/quarkeys/z67/hotswap/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake quarkeys/z67/hotswap:default\n```\n\n----------------------------------------\n\nTITLE: Building Firmware - Makefile\nDESCRIPTION: This command builds the default firmware for the SHARKOON SKILLER SGK50 S3 keyboard. It uses the QMK make system to compile the keyboard layout and generate the firmware binary.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/sharkoon/skiller_sgk50_s3/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake sharkoon/skiller_sgk50_s3:default\n```\n\n----------------------------------------\n\nTITLE: Building DZ60RGB V1 Firmware\nDESCRIPTION: This command builds the default firmware for the DZ60RGB V1 keyboard, which uses an STM32F303 (Arm) microcontroller.  It requires a correctly configured QMK build environment.  The output will be a .bin file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/dztech/dz60rgb/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake dztech/dz60rgb/v1:default # Arm (STM32F303)\n```\n\n----------------------------------------\n\nTITLE: Building Clueboard California Firmware\nDESCRIPTION: This command builds the default firmware for the Clueboard California macropad using the QMK build environment. It assumes the QMK build environment has been set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/clueboard/california/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake clueboard/california:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Promise87 Keyboard Firmware (QMK)\nDESCRIPTION: This command flashes the compiled firmware onto the Promise87 WKL keyboard using the QMK build environment. It requires the keyboard to be in bootloader mode to successfully flash the firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wuque/promise87/wkl/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake wuque/promise87/wkl:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing WE27 Firmware with QMK\nDESCRIPTION: This snippet shows how to flash the compiled firmware to the WE27 keyboard. The command `make wekey/we27:default:flash` builds and then flashes the firmware to the keyboard. A compatible flashing tool and the keyboard in flashing mode are required. Consult the QMK documentation for specific flashing instructions.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wekey/we27/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake wekey/we27:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building TKC Candybar Firmware - make command\nDESCRIPTION: This command builds the QMK firmware for the TKC Candybar keyboard with a right-hand numpad layout using the default keymap and the dfu-util bootloader. It requires a configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/tkc/candybar/righty/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake tkc/candybar/righty:default:dfu-util\n```\n\n----------------------------------------\n\nTITLE: Building Boardsource 3x4 with QMK\nDESCRIPTION: This command builds the default keymap for the Boardsource 3x4 keyboard using the QMK firmware. It assumes that the QMK build environment has already been set up according to the QMK documentation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/boardsource/3x4/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake boardsource/3x4:default\n```\n\n----------------------------------------\n\nTITLE: Building Chocopad Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Chocopad Rev1 keyboard using the QMK build environment. It requires QMK Firmware to be set up correctly and the necessary build tools to be installed as outlined in the QMK documentation. The output is a firmware file that can be flashed onto the Chocopad.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keebio/chocopad/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake keebio/chocopad/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Building 3W6 rev2 default firmware with QMK\nDESCRIPTION: This command compiles the default firmware for the 3W6 rev2 keyboard using the QMK build environment.  It assumes that the QMK build environment is already set up.  The resulting firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/3w6/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake 3w6/rev2:default\n```\n\n----------------------------------------\n\nTITLE: Building bajjak Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the bajjak keyboard.  It requires a properly configured QMK build environment and uses the `make` command to compile the firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/bajjak/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake bajjak:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Zed65 QMK Firmware\nDESCRIPTION: This command builds and flashes the QMK firmware for the mechlovin/zed65/rev1 keyboard. It requires a properly configured QMK build environment and a connected keyboard in bootloader mode. It uses the dfu-programmer or similar tool to flash the compiled firmware to the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechlovin/zed65/rev1/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake mechlovin/zed65/rev1:flash\n```\n\n----------------------------------------\n\nTITLE: Building the CB87v2 keyboard firmware with QMK\nDESCRIPTION: This command builds the default firmware for the CherryB Studio CB87v2 keyboard using the QMK build environment. It assumes that the QMK build environment has already been set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cherrybstudio/cb87v2/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake cherrybstudio/cb87v2:default\n```\n\n----------------------------------------\n\nTITLE: Building Hand 88 Keyboard Firmware with QMK\nDESCRIPTION: This command builds the Hand 88 keyboard firmware with the default keymap using the QMK build environment. It requires the QMK build environment to be set up properly. The output is the compiled firmware file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/hand88/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake hand88:default\n```\n\n----------------------------------------\n\nTITLE: Building AEKISO60 Firmware using Make\nDESCRIPTION: This command builds the firmware for the AEKISO60 keyboard using the QMK build environment. It requires the QMK build environment to be set up. The `make` command is used with the keyboard identifier and keymap name to compile the firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/4pplet/aekiso60/rev_b/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake 4pplet/aekiso60/rev_a:default\n```\n\nLANGUAGE: Shell\nCODE:\n```\nmake 4pplet/aekiso60/rev_b:default\n```\n\n----------------------------------------\n\nTITLE: Making BM65HSRGB_ISO Firmware\nDESCRIPTION: This command compiles the default firmware for the BM65HSRGB_ISO keyboard. It requires the QMK build environment to be properly set up. The compiled firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kprepublic/bm65hsrgb_iso/rev1/readme.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nmake kprepublic/bm65hsrgb_iso:default\n```\n\n----------------------------------------\n\nTITLE: Building SHK9 Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the SHK9 macropad using the QMK build environment. It requires QMK to be set up correctly with all necessary dependencies installed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/shk9/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake shk9:default\n```\n\n----------------------------------------\n\nTITLE: Building BBPad Firmware (f401)\nDESCRIPTION: This command builds the QMK Firmware for the BBPad using the STM32F401 BlackPill. The `default` keymap is used. Requires a properly set up QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechwild/bbpad/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake mechwild/bbpad/f401:default\n```\n\n----------------------------------------\n\nTITLE: Building Keychron V5 Firmware\nDESCRIPTION: This command builds the QMK firmware for the Keychron V5 keyboard with the ANSI layout and default keymap.  It assumes that the QMK build environment has already been set up according to the QMK documentation. The command compiles the necessary source files to create a firmware image.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keychron/v5/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake keychron/v5/ansi:default\n```\n\n----------------------------------------\n\nTITLE: Building Gothic70 Firmware\nDESCRIPTION: This command builds the default keymap for the Gothic70 keyboard using the QMK build environment. It assumes that the QMK build environment is already set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wsk/gothic70/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake wsk/gothic70:default\n```\n\n----------------------------------------\n\nTITLE: Building the Neuron Keyboard Firmware with QMK\nDESCRIPTION: This command builds the default keymap for the Neuron keyboard using the QMK firmware. It requires a properly configured QMK build environment. The command compiles the keymap and generates a firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/walletburner/neuron/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake walletburner/neuron:default\n```\n\n----------------------------------------\n\nTITLE: Compiling QMK Firmware for Acheron Apollo 88H-T-SC\nDESCRIPTION: This command compiles the default QMK firmware for the Acheron Apollo 88H-T-SC keyboard. The output is a `.bin` file used for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/acheron/apollo/readme.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmake acheron/apollo/88htsc:default # For 88H-T-SC (only a single revision as of may 2022)\n```\n\n----------------------------------------\n\nTITLE: Building downbubble Keyboard Firmware\nDESCRIPTION: This command builds the firmware for the downbubble keyboard using the default keymap. It requires a properly set up QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/flehrad/downbubble/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake flehrad/downbubble:default\n```\n\n----------------------------------------\n\nTITLE: Building Shorty Zero Firmware - Make Command\nDESCRIPTION: This command builds the default firmware for the Shorty Zero macropad using the QMK build environment. It assumes that the build environment has been properly set up. The output is a .hex or .bin file that can be flashed onto the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/shorty/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake shorty:default\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for PT60 Keyboard\nDESCRIPTION: These commands are used to compile the QMK firmware for the Prototypist PT60 keyboard with different layouts (default, via, and default_ansi). The `make` command utilizes the QMK build environment to generate the firmware file.  The build environment must be properly set up before running these commands.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/prototypist/pt60/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake prototypist/pt60:default\n```\n\nLANGUAGE: make\nCODE:\n```\nmake prototypist/pt60:via\n```\n\nLANGUAGE: make\nCODE:\n```\nmake prototypist/pt60:default_ansi\n```\n\n----------------------------------------\n\nTITLE: Flashing bandominedoni Firmware\nDESCRIPTION: This command flashes the default firmware onto the bandominedoni keyboard.  It depends on the QMK build environment and assumes the keyboard is connected and in flashable mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/bandominedoni/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake bandominedoni:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware to Scotto108 Keyboard\nDESCRIPTION: This command compiles and flashes the default firmware for the Scotto108 keyboard to the connected device. It requires a configured QMK build environment and a connected, flashable keyboard. This directly flashes the compiled firmware to the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/scottokeebs/scotto108/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake handwired/scottokeebs/scotto108:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building MechLlama G35 Firmware\nDESCRIPTION: This command builds the QMK firmware for the MechLlama G35 version 2 with the default keymap. It assumes that the QMK build environment is already set up. The resulting firmware can then be flashed onto the macropad.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechllama/g35/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake mechllama/g35/v2:default\n```\n\n----------------------------------------\n\nTITLE: Flashing FS Streampad Firmware with QMK\nDESCRIPTION: This command flashes the built firmware onto the FS streampad keyboard using the default keymap. This requires a properly configured QMK build environment and a connected keyboard in a flashable state.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/fs_streampad/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake fs_streampad:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building QK65 Solder PCB Firmware (Makefile)\nDESCRIPTION: Compiles the default keymap for the QK65 solder PCB keyboard. Requires a properly configured QMK build environment. The resulting firmware can then be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/qwertykeys/qk65/solder/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake qwertykeys/qk65/solder:default\n```\n\n----------------------------------------\n\nTITLE: Compiling KBD67 MKII RGB V3 Firmware with QMK\nDESCRIPTION: This command compiles the default firmware for the KBD67 MKII RGB V3 keyboard using the QMK build system. It requires the QMK build environment to be properly set up. The compiled firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kbdfans/kbd67/readme.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nmake kbdfans/kbd67/mkiirgb/v3:default\n```\n\n----------------------------------------\n\nTITLE: Flashing WT20-H1 Firmware with QMK\nDESCRIPTION: This command flashes the compiled firmware to the wilba_tech WT20-H1 keyboard using QMK. It utilizes the appropriate flashing tools and configurations specified for the keyboard's hardware. Ensure the keyboard is in the correct bootloader mode before running this command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wilba_tech/wt20_h1/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake wilba_tech/wt20_h1:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building NCR-80 with QMK Firmware\nDESCRIPTION: These commands demonstrate how to build the QMK firmware for the NCR-80 keyboard.  The commands specify the keyboard (mt/ncr80/r2), the variant (hotswap or solder), and the keymap (default).  The build environment must be set up prior to executing these commands.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mt/ncr80/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake mt/ncr80/r2/hotswap:default\n```\n\nLANGUAGE: bash\nCODE:\n```\nmake mt/ncr80/r2/solder:default\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for Viktus Styrka (QMK)\nDESCRIPTION: This command builds the default firmware for the Viktus Styrka Atmel Edition keyboard using the QMK build environment. It compiles the keymap and firmware for the specified target. Prerequisites include setting up the QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/nopunin10did/styrkatmel/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake nopunin10did/styrkatmel:default\n```\n\n----------------------------------------\n\nTITLE: Building UC-1 Firmware with QMK\nDESCRIPTION: This snippet provides the command to build the default firmware for the UC-1 macro pad using the QMK build environment. It assumes that the QMK build environment is already set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/merge/uc1/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake merge/uc1:default\n```\n\n----------------------------------------\n\nTITLE: Building The Mark: 65 Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the Boardsource The Mark: 65 keyboard.  It compiles the source code and creates a firmware file that can be flashed onto the keyboard. Requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/boardsource/the_mark/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake boardsource/the_mark:default\n```\n\n----------------------------------------\n\nTITLE: Building KD87A_BFG_Edition Keyboard Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the KD87A_BFG_Edition keyboard using the QMK build environment.  It assumes the QMK build environment is properly set up. The output will be a firmware file suitable for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/darkproject/kd87a_bfg_edition/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake darkproject/kd87a_bfg_edition:default\n```\n\n----------------------------------------\n\nTITLE: Enabling Caps Lock Backlight\nDESCRIPTION: This code snippet shows how to enable the caps lock backlight feature in the Iron180 QMK firmware.  By uncommenting the `#define` statement in the `config.h` file, the backlight LEDs will toggle based on the caps lock key state.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/iron180/readme.md#_snippet_2\n\nLANGUAGE: C\nCODE:\n```\n// Turn backlight on-off according to capslock\n#define CAPSLOCK_BACKLIGHT\n```\n\n----------------------------------------\n\nTITLE: Enabling Analog Joystick Driver (Make)\nDESCRIPTION: This code snippet shows how to enable the Analog Joystick driver for the Pointing Device feature in QMK Firmware by adding the `POINTING_DEVICE_DRIVER = analog_joystick` line to the `rules.mk` file.  This requires defining the X and Y axis pins in `config.h`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/pointing_device.md#_snippet_3\n\nLANGUAGE: make\nCODE:\n```\nPOINTING_DEVICE_DRIVER = analog_joystick\n```\n\n----------------------------------------\n\nTITLE: Building Friedrich Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the Friedrich keyboard. It requires a correctly set up QMK build environment. The output is a firmware file ready to be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/friedrich/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake friedrich:default\n```\n\n----------------------------------------\n\nTITLE: Building superuser/tkl firmware with QMK\nDESCRIPTION: This snippet demonstrates how to build the default firmware for the superuser/tkl keyboard using the QMK build environment. It assumes that the QMK build environment is already set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/superuser/tkl/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake superuser/tkl:default\n```\n\n----------------------------------------\n\nTITLE: Building the Let's Split Eh? Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the Let's Split Eh? keyboard using the QMK build environment. It compiles the keymap located in the default folder.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/maple_computing/lets_split_eh/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake maple_computing/lets_split_eh:default\n```\n\n----------------------------------------\n\nTITLE: Building flxlb/zplit Firmware - QMK\nDESCRIPTION: This command builds the default keymap for the flxlb/zplit keyboard using the QMK build environment.  It assumes that the QMK build environment is already set up. The resulting firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/flxlb/zplit/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake flxlb/zplit:default\n```\n\n----------------------------------------\n\nTITLE: Flashing WT65-XT Firmware with QMK\nDESCRIPTION: This command flashes the compiled firmware onto the wilba.tech WT65-XT keyboard using the QMK build environment. It requires the keyboard to be in a flashable state (e.g., bootloader mode).\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wilba_tech/wt65_xt/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake wilba_tech/wt65_xt:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing QMK Firmware to DOIO KB04\nDESCRIPTION: This command flashes the compiled QMK firmware to the DOIO KB04 keyboard using the default keymap. It requires a correctly set up QMK build environment and a connected DOIO KB04 in a flashable state.  The command takes the keyboard name (doio/kb04) and keymap name (default) as arguments.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/doio/kb04/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nqmk flash -kb doio/kb04 -km default\n```\n\n----------------------------------------\n\nTITLE: Building The Q Keyboard Firmware - QMK\nDESCRIPTION: This command builds the QMK firmware for The Q keyboard with the default keymap. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/boardsource/the_q/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake boardsource/the_q:default\n```\n\n----------------------------------------\n\nTITLE: Flashing SP Mini Firmware\nDESCRIPTION: This command builds and flashes the default firmware to the SP Mini keyboard.  It assumes the QMK build environment is set up correctly and the keyboard is connected. It requires a configured QMK environment and appropriate flashing tools.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/viktus/sp_mini/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake viktus/sp_mini:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building VCL65 Solder Firmware - Make Command\nDESCRIPTION: This command is used to build the default firmware for the VCL65 solder keyboard. It requires a properly set up QMK build environment. The resulting firmware can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/sawnsprojects/vcl65/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake sawnsprojects/vcl65/solder:default\n```\n\n----------------------------------------\n\nTITLE: Building mechlovin9 Firmware with QMK\nDESCRIPTION: This command compiles the QMK firmware for the mechlovin9 keyboard with the rev3 and default configuration. It requires a properly set up QMK build environment. The output is a firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechlovin/mechlovin9/rev3/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake mechlovin/mechlovin9/rev3:default\n```\n\n----------------------------------------\n\nTITLE: Generating Compilation Database for QMK\nDESCRIPTION: This snippet demonstrates the command to generate a `compile_commands.json` file for QMK firmware, which aids development environments like Visual Studio Code in correctly detecting source file locations and type information.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/ChangeLog/20211127.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nqmk generate-compilation-database -kb <yourkb> -km <yourkeymap>\n```\n\n----------------------------------------\n\nTITLE: Building Desire65 Firmware\nDESCRIPTION: This command builds the default firmware for the Desire65 keyboard.  It uses the QMK build environment and specifies the keyboard and keymap to build.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/archerkeyboard/desire65/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake archerkeyboard/desire65:default\n```\n\n----------------------------------------\n\nTITLE: Flashing the Styrka Topre Keyboard\nDESCRIPTION: This command flashes the compiled firmware to the Styrka Topre keyboard. It requires a working QMK build environment and a configured flashing tool. The `:flash` target depends on the default keymap build.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/viktus/styrka_topre/readme.md#_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nmake viktus/styrka_topre:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Swoop Keyboard Firmware with QMK\nDESCRIPTION: This command flashes the compiled firmware to the Swoop keyboard using avrdude. It specifies the keyboard layout, configuration, and the avrdude-split-right target for split keyboards.  Requires avrdude and a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/bluebell/swoop/readme.md#_snippet_1\n\nLANGUAGE: makefile\nCODE:\n```\nmake bluebell/swoop:default:avrdude-split-right\n```\n\n----------------------------------------\n\nTITLE: Building Sneakbox Alice Clone Firmware (QMK)\nDESCRIPTION: This snippet demonstrates how to build the default firmware for the Sneakbox Alice Clone keyboard using the `make` command within the QMK Firmware environment. It assumes that the QMK build environment has been properly set up. The command compiles the firmware specified by `sneakbox/aliceclone:default`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/sneakbox/aliceclone/readme.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmake sneakbox/aliceclone:default\n```\n\n----------------------------------------\n\nTITLE: Building setta21 Firmware with QMK (Make)\nDESCRIPTION: This command builds the default firmware for the setta21 keyboard (revision 1) using the QMK build environment. It requires QMK to be properly installed and configured. The resulting firmware can then be flashed onto the Pro Micro controller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/salicylic_acid3/setta21/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake salicylic_acid3/setta21/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Building waffling60 firmware using make\nDESCRIPTION: This command builds the default firmware for the waffling60 keyboard, revision A, using the QMK build environment. Ensure the build environment is properly set up before running this command. The command assumes you are in the root directory of the QMK firmware repository.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/4pplet/waffling60/rev_a/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake 4pplet/waffling60/rev_a:default\n```\n\n----------------------------------------\n\nTITLE: Flashing QMK Firmware to Acheron Athena\nDESCRIPTION: This command builds and flashes the QMK firmware for the Acheron Athena keyboard with the default layout. Replace `<revision>` with either `Alpha` or `Beta` depending on your PCB revision. This command requires the QMK build environment to be properly configured.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/acheron/athena/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake acheron/athena/<revision>:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Tradestation Firmware (QMK)\nDESCRIPTION: This command compiles the default keymap for the Tradestation macropad using the QMK firmware. It requires a properly configured build environment and utilizes the 'make' command. The resulting firmware can then be flashed to the Pro Micro controller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/flehrad/tradestation/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake flehrad/tradestation:default\n```\n\n----------------------------------------\n\nTITLE: Building Jones v.03 Keyboard Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Jones v.03 keyboard using the QMK build environment.  It compiles the keymap and firmware based on the configuration files for the specified keyboard and keymap. The resulting firmware can then be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/jones/v03/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake jones/v03:default\n```\n\n----------------------------------------\n\nTITLE: Building the Frenchdev Keyboard with Docker\nDESCRIPTION: This command uses Docker to build the firmware for the Frenchdev keyboard. It mounts the QMK firmware repository and specifies the keyboard and keymap to use during the build process. The resulting firmware can be flashed to the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/frenchdev/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm -e keymap=default -e keyboard=frenchdev --rm -v D:/Repositories/qmk:/qmk:rw edasque/qmk_firmware\n```\n\n----------------------------------------\n\nTITLE: Flashing Nyquistpad Firmware\nDESCRIPTION: This command flashes the default firmware to the Nyquistpad keyboard. It assumes the keyboard is connected and in a flashable state.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keebio/nyquistpad/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake keebio/nyquistpad:default:flash\n```\n\n----------------------------------------\n\nTITLE: Start Local Docs Server (qmk docs)\nDESCRIPTION: This command starts a local HTTP server for browsing or improving QMK documentation, with live reload. Requires `node` and `yarn`. Use `-b` to open in browser and `-p` to specify a port.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/cli_commands.md#_snippet_42\n\nLANGUAGE: text\nCODE:\n```\nusage: qmk docs [-h] [-b] [-p PORT]\n```\n\n----------------------------------------\n\nTITLE: Building TAC-K1 Keyboard Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the TAC-K1 keyboard. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/tacworks/tac_k1/readme.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmake tacworks/tac_k1:default\n```\n\n----------------------------------------\n\nTITLE: Compiling KBD67 MKII Soldered Firmware with QMK\nDESCRIPTION: This command compiles the default firmware for the KBD67 MKII (soldered) keyboard using the QMK build system. It requires the QMK build environment to be properly set up. The compiled firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kbdfans/kbd67/readme.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nmake kbdfans/kbd67/mkii_soldered:default\n```\n\n----------------------------------------\n\nTITLE: Flashing GergoPlex Firmware (QMK)\nDESCRIPTION: This command flashes the compiled firmware to the GergoPlex keyboard.  It assumes the keyboard is in DFU mode, which is activated by pressing the SMD button on the right side of the board. Requires a properly configured QMK build environment and a connected GergoPlex keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/gboards/gergoplex/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake gboards/gergoplex:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Steal This Keyboard Firmware - QMK\nDESCRIPTION: This command compiles the default keymap for the 'Steal This Keyboard' using the QMK build environment. It assumes that the QMK build environment has been properly set up. The resulting firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/obosob/steal_this_keyboard/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake obosob/steal_this_keyboard:default\n```\n\n----------------------------------------\n\nTITLE: Building Ferris 0.2 Compact firmware - make command\nDESCRIPTION: This command builds the default keymap for the Ferris 0.2 Compact keyboard. It uses the QMK make command, which requires the QMK build environment to be set up beforehand.  The built firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ferris/0_2/compact/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake ferris/0_2/compact:default\n```\n\n----------------------------------------\n\nTITLE: Compiling Firmware for Ducky One 2 SF\nDESCRIPTION: This command compiles the QMK firmware for the Ducky One 2 SF keyboard, specifically the 1967ST version, using the default keymap.  It uses the `make` command, which is part of the QMK build environment. The compiled firmware can then be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ducky/one2sf/1967st/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake ducky/one2sf/1967st:default\n```\n\n----------------------------------------\n\nTITLE: Building Hannah910 Firmware - VIA Keymap\nDESCRIPTION: This command builds the QMK firmware for the Hannah910 keyboard with VIA enabled, allowing for real-time keymap customization. It requires the QMK build environment to be set up. The output is a firmware file that can be flashed onto the keyboard to support VIA.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechlovin/hannah910/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake mechlovin/hannah910/rev1:via\n```\n\nLANGUAGE: Makefile\nCODE:\n```\nmake mechlovin/hannah910/rev2:via\n```\n\nLANGUAGE: Makefile\nCODE:\n```\nmake mechlovin/hannah910/rev3:via\n```\n\n----------------------------------------\n\nTITLE: Flashing FRLTKL Firmware with Make\nDESCRIPTION: This command builds and flashes the default firmware for the dnworks/frltkl keyboard. It requires the QMK build environment to be correctly configured, including the necessary tools for flashing the specific microcontroller used by the keyboard. This command will automatically build the firmware if needed and then flash it to the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/dnworks/frltkl/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake dnworks/frltkl:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Traveller Firmware (Makefile)\nDESCRIPTION: This command flashes the built firmware onto the Traveller keyboard. It uses the 'make' command with the 'flash' target, specifically targeting the 'handwired/traveller' keyboard with the 'default' keymap. This requires a properly configured QMK build environment and a connected Traveller keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/traveller/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/traveller:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Edda Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Edda keyboard using the QMK build environment. It requires the QMK build environment to be set up correctly. The output will be a firmware file suitable for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/edda/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake edda:default\n```\n\n----------------------------------------\n\nTITLE: Building Meson Keyboard Firmware\nDESCRIPTION: This command is used to build the default firmware for the Meson keyboard. It assumes that the QMK build environment has already been set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/meson/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake meson:default\n```\n\n----------------------------------------\n\nTITLE: Building wings42 firmware\nDESCRIPTION: This command builds the default firmware for the wings42 keyboard using the QMK build environment. It specifies the keyboard, revision, and keymap to build.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/dailycraft/wings42/rev1_extkeys/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake dailycraft/wings42/rev1_extkeys:default\n```\n\n----------------------------------------\n\nTITLE: Building Altair Firmware (QMK)\nDESCRIPTION: This command builds the QMK firmware for the Altair keyboard using the default keymap. It requires the QMK build environment to be set up correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ai03/altair/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake ai03/altair:default\n```\n\n----------------------------------------\n\nTITLE: Flashing B.face Firmware with Make\nDESCRIPTION: This command flashes the built firmware onto the B.face keyboard using the `make` command. It specifies the keyboard layout (`winkeyless/bface`), the keymap (`default`), and the flash target (`flash`). This requires a connected B.face keyboard in bootloader mode and a configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/winkeyless/bface/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake winkeyless/bface:default:flash\n```\n\n----------------------------------------\n\nTITLE: Compiling Firmware with ADNS Sensor (QMK)\nDESCRIPTION: This command compiles the QMK firmware for the Oddball v2 keyboard with the default configuration, which includes the ADNS sensor.  It assumes that the QMK build environment has already been set up. The output will be a .hex file suitable for flashing onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/oddball/v2/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake oddball/v2:default\n```\n\n----------------------------------------\n\nTITLE: Building Techkeys SixKeyBoard Firmware\nDESCRIPTION: This command builds the default firmware for the Techkeys SixKeyBoard.  It requires a properly configured QMK build environment as a prerequisite.  The output is a firmware file that can be flashed onto the SixKeyBoard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/sixkeyboard/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake sixkeyboard:default\n```\n\n----------------------------------------\n\nTITLE: Building BM40hsrgb Firmware (rev1)\nDESCRIPTION: This command builds the default firmware for revision 1 of the kprepublic/bm40hsrgb keyboard using the QMK build environment. It compiles the source code and creates a firmware image ready to be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kprepublic/bm40hsrgb/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake kprepublic/bm40hsrgb/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Building ROTR firmware with Make\nDESCRIPTION: This snippet shows how to build the default firmware for the ROTR keyboard using the `make` command. It assumes that the QMK build environment has been set up correctly. The command `make rotr:default` compiles the firmware for the ROTR keyboard with the default keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/rotr/readme.md#_snippet_0\n\nLANGUAGE: Make\nCODE:\n```\nmake rotr:default\n```\n\n----------------------------------------\n\nTITLE: Making Ergoslab with default keymap using QMK\nDESCRIPTION: This command compiles the Ergoslab keyboard firmware with the default keymap using the QMK build environment. It assumes that the QMK build environment is properly set up and configured.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ergoslab/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake ergoslab:default\n```\n\n----------------------------------------\n\nTITLE: Building Neely65 QMK Firmware\nDESCRIPTION: This command builds the default keymap for the Neely65 keyboard using the QMK firmware. It assumes that the QMK build environment has already been set up correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wolf/neely65/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake wolf/neely65:default\n```\n\n----------------------------------------\n\nTITLE: Build Orange75 Firmware\nDESCRIPTION: This command builds the default keymap for the Orange75 keyboard using the QMK build environment.  It requires a correctly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/orange75/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake orange75:default\n```\n\n----------------------------------------\n\nTITLE: Flashing White Backlight Firmware for Keychron S1 (ANSI)\nDESCRIPTION: This command builds and flashes the QMK firmware for the Keychron S1 keyboard with White backlight and ANSI layout, using the default configuration. It requires a correctly set up QMK build environment. This command performs both the build and flash processes.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keychron/s1/readme.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmake keychron/s1/ansi/white:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware - QMK\nDESCRIPTION: This command builds and flashes the QMK firmware for the adpenrose/mine keyboard with the default keymap. It requires the QMK build environment to be set up correctly and the keyboard to be connected and recognized by the system. It combines the build and flash steps into a single command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/adpenrose/mine/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake adpenrose/mine:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Kangaroo Rev 2 Firmware with QMK\nDESCRIPTION: This command builds the firmware for the Kangaroo Rev 2 keyboard using the QMK build environment. It specifies the keyboard (xelus/kangaroo/rev2) and the keymap (default or via).  Ensure the QMK build environment is set up before executing this command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/xelus/kangaroo/rev2/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake xelus/kangaroo/rev2:default\nmake xelus/kangaroo/rev2:via\n```\n\n----------------------------------------\n\nTITLE: Configure Scaling Registers (RGB)\nDESCRIPTION: Configures the scaling registers for a single LED using the IS31FL3745 driver (RGB). Requires the LED index and scaling values for red, green, and blue channels as input. The register update is deferred until `is31fl3745_update_scaling_registers()` is called.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/is31fl3745.md#_snippet_7\n\nLANGUAGE: c\nCODE:\n```\nvoid is31fl3745_set_scaling_register(uint8_t index, uint8_t red, uint8_t green, uint8_t blue)\n```\n\n----------------------------------------\n\nTITLE: Flashing firmware for Southpaw75\nDESCRIPTION: This command builds and flashes the default firmware onto the HolySwitch Co Southpaw75 keyboard. It requires a properly configured QMK build environment and a connected keyboard in bootloader mode. The specific flashing method may vary depending on the bootloader.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/holyswitch/southpaw75/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake holyswitch/southpaw75:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Liminal Keyboard Firmware with Make\nDESCRIPTION: This snippet shows how to build the default firmware for the Liminal keyboard using the `make` command within the QMK environment. It assumes the QMK build environment is already set up. The command compiles the firmware for the `the_royal/liminal` keyboard with the `default` keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/the_royal/liminal/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake the_royal/liminal:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Zwag75 Firmware with QMK\nDESCRIPTION: This command builds and flashes the default firmware for the Zwag75 keyboard using the QMK build environment. It assumes that the QMK build environment is set up correctly and that the necessary flashing tools are installed. The keyboard must be in bootloader mode for this command to work.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/zwag/zwag75/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake zwag75:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Skjöldr Keyboard Firmware (QMK)\nDESCRIPTION: This command is used to build the default firmware for the Skjöldr keyboard. It assumes that the QMK build environment has already been set up. It compiles the source code and creates a firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/runes/skjoldr/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake runes/skjoldr:default\n```\n\n----------------------------------------\n\nTITLE: Building Basketweave Keyboard Firmware in QMK\nDESCRIPTION: This command demonstrates how to build the default keymap for the Basketweave keyboard using the QMK build environment. It requires the QMK build environment to be set up beforehand. The command compiles the firmware and generates a .hex file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/basketweave/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake basketweave:default\n```\n\n----------------------------------------\n\nTITLE: Building the Ixora Macropad Firmware\nDESCRIPTION: This command builds the default firmware for the Ixora macropad using QMK. Before executing this command, ensure your build environment is properly set up according to the QMK documentation. The compiled firmware can then be flashed onto the macropad.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/coarse/ixora/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake coarse/ixora:default\n```\n\n----------------------------------------\n\nTITLE: Building SouthPad Firmware with QMK\nDESCRIPTION: This command is used to compile the default firmware for the SouthPad keyboard revision 2 using the QMK build environment.  It requires a properly configured QMK build environment.  The output is a compiled firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/matchstickworks/southpad/rev2/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake matchstickworks/southpad/rev2:default\n```\n\n----------------------------------------\n\nTITLE: Building Kyria Firmware (rev1)\nDESCRIPTION: This command builds the QMK firmware for the Kyria keyboard with revision 1 using the default configuration. It requires a properly set up QMK build environment. The output will be a .hex or .bin file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/splitkb/kyria/readme.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nmake splitkb/kyria/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Building MK61-RGB-ANSI Firmware with Make\nDESCRIPTION: This command is used to build the default firmware for the Mechanical Keyboards, LLC MK61-RGB-ANSI keyboard using the QMK build environment. It compiles the source code and generates the firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/fjlabs/mk61rgbansi/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake fjlabs/mk61-rgb-ansi:default\n```\n\n----------------------------------------\n\nTITLE: Flashing mini36 Firmware\nDESCRIPTION: This command compiles and flashes the default firmware for the mini36 keyboard to the device. It specifies the keyboard (controllerworks/mini36), the keymap (default) and the flash target. This command requires a properly configured QMK build environment and a connected keyboard in bootloader mode, or auto-flash enabled.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/controllerworks/mini36/readme.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nmake controllerworks/mini36:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Atreus Firmware for Teensy 2 Controller\nDESCRIPTION: This command builds the Atreus keyboard firmware specifically for a variant powered by a Teensy 2 microcontroller and flashes it.  It compiles the code optimized for the Teensy 2 architecture and then uploads it to the device using the `flash` target.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/atreus/readme.md#_snippet_2\n\nLANGUAGE: makefile\nCODE:\n```\nmake atreus/teensy2:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building ScottoDeck Firmware with QMK\nDESCRIPTION: This command compiles the default keymap for the ScottoDeck using the QMK build environment.  It requires the QMK build environment to be properly set up. The output is a .hex or .bin file that can be flashed to the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/scottokeebs/scottodeck/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/scottokeebs/scottodeck:default\n```\n\n----------------------------------------\n\nTITLE: Building firmware for Play Keyboard 64RGB with QMK\nDESCRIPTION: This command builds the default firmware for the Play Keyboard 64RGB using the QMK build environment. It assumes that the QMK build environment has been properly set up as described in the QMK documentation. The compiled firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/playkbtw/pk64rgb/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake playkbtw/pk64rgb:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Macropod Firmware\nDESCRIPTION: This command flashes the compiled firmware to the Geistmaschine Macropod. It assumes that the QMK build environment is properly set up and that the board is connected and recognized by the system.  It depends on the QMK command-line interface being correctly installed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/geistmaschine/macropod/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nqmk flash -kb geistmaschine/macropod -km default\n```\n\n----------------------------------------\n\nTITLE: Flashing E6 RGB Keyboard Firmware\nDESCRIPTION: This command flashes the compiled firmware onto the exclusive/e6_rgb keyboard. It utilizes the QMK build environment and assumes that the necessary tools for flashing (e.g., dfu-util) are installed and configured.  It requires the keyboard to be in the appropriate flashing mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/exclusive/e6_rgb/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake exclusive/e6_rgb:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building QMK Firmware for wolf/ts60\nDESCRIPTION: This command builds the QMK firmware for the `wolf/ts60` keyboard with the default keymap. It assumes that the QMK build environment has already been set up. The output will be a firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wolf/ts60/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake wolf/ts60:default\n```\n\n----------------------------------------\n\nTITLE: Building the HP 46010A Converter Firmware\nDESCRIPTION: This command builds the QMK firmware for the HP 46010A keyboard converter with the default keymap. It requires the QMK build environment to be set up correctly. The output is a firmware file that can be flashed onto a compatible microcontroller such as a Teensy 2.0.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/converter/hp_46010a/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake converter/HP_46010A:default\n```\n\n----------------------------------------\n\nTITLE: Enabling I2C in ChibiOS halconf.h\nDESCRIPTION: This snippet demonstrates how to enable I2C functionality within the ChibiOS HAL configuration file (`halconf.h`).  Setting `HAL_USE_I2C` to `TRUE` enables the I2C driver within ChibiOS.  This is a prerequisite for using the I2C peripheral.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/i2c.md#_snippet_2\n\nLANGUAGE: c\nCODE:\n```\n#pragma once\n\n#define HAL_USE_I2C TRUE // [!code focus]\n\n#include_next <halconf.h>\n```\n\n----------------------------------------\n\nTITLE: Flashing Soyuz Keyboard Firmware (QMK)\nDESCRIPTION: This command flashes the compiled QMK firmware to the Soyuz keyboard. It depends on the `make` command and the QMK build environment, along with a configured flashing tool. It writes the compiled firmware image to the keyboard's microcontroller, updating its functionality.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/wwa/soyuz/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/wwa/soyuz:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building the Firmware\nDESCRIPTION: Provides instructions on building the firmware.  It refers to the QMK documentation for setting up the build environment and using the make command.  The command builds the firmware for either a Pro Micro-based converter or a Hasu 32U2 PCB.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/converter/adb_usb/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ make converter/adb_usb/rev1:default # Pro Micro-based\n$ make converter/adb_usb/rev2:default # Hasu 32U2 PCB\n```\n\n----------------------------------------\n\nTITLE: Building Program Yoink! Staggered Firmware\nDESCRIPTION: This command builds the default keymap for the Program Yoink! Staggered keyboard. It assumes that the QMK build environment has been set up correctly.  The output will be a .hex or .bin file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/program_yoink/staggered/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake program_yoink/staggered:default\n```\n\n----------------------------------------\n\nTITLE: Building Beegboy Firmware with QMK Make\nDESCRIPTION: This snippet provides the command to build the default firmware for the Beegboy keyboard within the QMK Firmware environment. It assumes that the QMK build environment has already been set up.  The command uses the `make` utility to compile the firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/swiftrax/beegboy/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake handwired/swiftrax/beegboy:default\n```\n\n----------------------------------------\n\nTITLE: Building Rocketboard 16 Firmware\nDESCRIPTION: This command builds the default firmware for the Rocketboard 16 using the QMK build environment. Ensure the build environment is properly configured before running this command. This command compiles the firmware and generates a .hex file that can be flashed onto the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/rocketboard_16/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake rocketboard_16:default\n```\n\n----------------------------------------\n\nTITLE: Building QMK Firmware for RAMA WORKS M10-C\nDESCRIPTION: This command builds the QMK firmware for the RAMA WORKS M10-C keyboard with the default keymap. It requires a properly configured QMK build environment. The output will be a .hex or .bin file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wilba_tech/rama_works_m10_c/readme.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmake wilba_tech/rama_works_m10_c:default\n```\n\n----------------------------------------\n\nTITLE: Deferred Execution Registration Example\nDESCRIPTION: Example of registering a deferred execution callback using `defer_exec()`. It shows how to schedule `my_callback` to be executed after 1500 milliseconds, passing NULL as the callback argument. The return value is a `deferred_token` used to cancel the callback.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/custom_quantum_functions.md#_snippet_9\n\nLANGUAGE: c\nCODE:\n```\ndeferred_token my_token = defer_exec(1500, my_callback, NULL);\n```\n\n----------------------------------------\n\nTITLE: Flashing AKIRA Firmware with Make\nDESCRIPTION: This snippet shows how to compile and flash the AKIRA keyboard firmware with the default keymap using the `make` command.  It requires a QMK build environment and a configured flashing tool. The target microcontroller must be accessible for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ekow/akira/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake ekow/akira:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building KBDPAD MKII firmware\nDESCRIPTION: This command builds the default firmware for the KBDPAD MKII keyboard using the QMK build environment. It requires QMK to be set up correctly before execution. It compiles the firmware and creates a .hex file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kbdfans/kbdpad/mk2/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake kbdfans/kbdpad_mk2:default\n```\n\n----------------------------------------\n\nTITLE: Defining Encoder Resolution in config.h (QMK)\nDESCRIPTION: This snippet shows how to define the resolution of an encoder in the `config.h` file of a QMK Firmware project. The `ENCODER_RESOLUTION` macro defines the number of pulses the encoder registers between each detent. A higher resolution results in finer-grained control.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/encoders.md#_snippet_4\n\nLANGUAGE: c\nCODE:\n```\n#define ENCODER_RESOLUTION 4\n```\n\n----------------------------------------\n\nTITLE: Building Cypher Rev6 Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Cypher Rev6 keyboard using the QMK build environment.  It compiles the source code and generates the firmware file that can be flashed onto the keyboard. The command requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cablecardesigns/cypher/rev6/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake cablecardesigns/cypher/rev6:default\n```\n\n----------------------------------------\n\nTITLE: Flashing IDOBAO ID80v3 ANSI Default Keymap\nDESCRIPTION: This command compiles and flashes the default ANSI keymap for the IDOBAO ID80v3 keyboard to the device using the QMK build environment. It assumes the keyboard is connected and in a state ready for flashing. This command requires a properly set up QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/idobao/id80/v3/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake idobao/id80/v3/ansi:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Staryu default keymap in QMK\nDESCRIPTION: This snippet provides the command to build the default keymap for the Staryu macropad using the QMK build environment. It assumes that the user has already set up their QMK build environment.  The output will be a firmware file that can be flashed to the Staryu.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ktec/staryu/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake ktec/staryu:default\n```\n\n----------------------------------------\n\nTITLE: Building Iron165 Keyboard Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the CannonKeys Iron165 keyboard using the QMK Firmware build system. It assumes that the QMK build environment has already been set up. Executing this command compiles the keyboard firmware based on the specified configuration.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cannonkeys/iron165/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake cannonkeys/iron165:default\n```\n\n----------------------------------------\n\nTITLE: Setting PWM Frequency in config.h (IS31FL3733B)\nDESCRIPTION: This code snippet demonstrates how to set the PWM frequency for the IS31FL3733B LED driver in your `config.h` file.  It defines `IS31FL3733_PWM_FREQUENCY` to one of the available frequency options.  This configuration is specific to the IS31FL3733B variant.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/is31fl3733.md#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n#define IS31FL3733_PWM_FREQUENCY IS31FL3733_PWM_FREQUENCY_8K4_HZ\n```\n\n----------------------------------------\n\nTITLE: Compiling Scylla v2 Firmware with VIA Keymap (Splinky v2)\nDESCRIPTION: This command compiles the Scylla v2 keyboard firmware with the VIA keymap using a Splinky v2 controller. It utilizes `qmk compile` with the `-kb` flag set to `bastardkb/scylla/v2/splinky/v2` and the `-km` flag set to `via`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/bastardkb/scylla/readme.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nqmk compile -kb bastardkb/scylla/v2/splinky/v2 -km via\n```\n\n----------------------------------------\n\nTITLE: Building the GMMK PRO ISO Firmware\nDESCRIPTION: This command builds the default firmware for the GMMK PRO ISO keyboard using the QMK build environment. It compiles the keymap and necessary components into a flashable firmware file. This assumes the QMK build environment is properly set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/gmmk/pro/rev1/iso/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake gmmk/pro/rev1/iso:default\n```\n\n----------------------------------------\n\nTITLE: Flashing v4n4g0rth0n Firmware (QMK)\nDESCRIPTION: This command builds and flashes the default firmware for the v4n4g0rth0n/v1 keyboard to the device. It depends on a correctly configured QMK build environment and a connected v4n4g0rth0n keyboard. The process overwrites the existing firmware on the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/v4n4g0rth0n/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake v4n4g0rth0n/v1:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Ghoul Firmware (RP2040)\nDESCRIPTION: This command builds the default firmware for the Ghoul keyboard using the RP2040 MicroMod. It leverages the `make` command with the specified target for the tzarc/ghoul/rev1 board with the rp2040 MCU. The resulting output is the firmware binary ready to be flashed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/tzarc/ghoul/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake tzarc/ghoul/rev1/rp2040:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware with nuvoisp\nDESCRIPTION: This command flashes the compiled firmware (`ducky_one2sf_ansi.bin`) to the Ducky One 2 SF keyboard using the `nuvoisp` tool.  `nuvoisp` interacts with the keyboard's bootloader to write the new firmware. Requires the prior installation of the `nuvoton-isp` package.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ducky/one2sf/1967st/readme.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnuvoisp -f ducky_one2sf_ansi.bin\n```\n\n----------------------------------------\n\nTITLE: Building Aplx6 rev2 Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Aplx6 rev2 keyboard using the QMK build environment.  It requires a correctly configured QMK build environment. The output will be a .hex file that can be flashed onto the Pro Micro controller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/aplyard/aplx6/rev2/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake aplyard/aplx6/rev2:default\n```\n\n----------------------------------------\n\nTITLE: Flashing the FC660C Firmware with DFU\nDESCRIPTION: This command flashes the compiled QMK firmware to the FC660C controller using the DFU (Device Firmware Upgrade) protocol. Before executing the command, the reset button on the controller must be pressed to put it into DFU mode. Requires sudo privileges.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/fc660c/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nsudo make fc660c:default:dfu\n```\n\n----------------------------------------\n\nTITLE: Compiling JISplit89 Keyboard Firmware\nDESCRIPTION: This command compiles the default keymap for the JISplit89 keyboard using the QMK firmware build environment. It assumes that the build environment has already been set up. The command targets the 'salicylic_acid3/jisplit89/rev1' keyboard with the 'default' keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/salicylic_acid3/jisplit89/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake salicylic_acid3/jisplit89/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Building QMK Firmware for Alexa Hotswap PCB\nDESCRIPTION: This command builds the QMK firmware for the Alexa Hotswap PCB with the default keymap.  It assumes that the QMK build environment has been properly set up. The output is a .hex file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/lucid/alexa/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake lucid/alexa:default\n```\n\n----------------------------------------\n\nTITLE: Building Duck Jetfire Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Duck Jetfire keyboard using the QMK build environment. It assumes that the QMK build environment has already been set up correctly. Refer to the QMK documentation for instructions on setting up the build environment and using the `make` command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/duck/jetfire/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake duck/jetfire:default\n```\n\n----------------------------------------\n\nTITLE: Flashing El Cantor HS Firmware (QMK)\nDESCRIPTION: This command builds and flashes the default firmware for the El Cantor HS keyboard to the device. It requires a properly configured QMK build environment and the necessary tools for flashing the keyboard's microcontroller. It typically involves using dfu-util or a similar flashing utility.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/elcantorhs/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake elcantorhs:default:flash\n```\n\n----------------------------------------\n\nTITLE: Set Brightness of a Single LED - IS31FL3733 (Mono)\nDESCRIPTION: This function sets the brightness value for a specific LED connected to an IS31FL3733 single-color driver. The index parameter specifies the LED to modify, and the value parameter sets the brightness. It requires a subsequent call to `is31fl3733_update_pwm_buffers()` to apply the changes.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/is31fl3733.md#_snippet_7\n\nLANGUAGE: C\nCODE:\n```\nvoid is31fl3733_set_value(int index, uint8_t value)\n```\n\n----------------------------------------\n\nTITLE: Compiling Lilith Keyboard Firmware - QMK\nDESCRIPTION: Compiles the QMK firmware for the Lilith keyboard using the specified keymap. This command utilizes the QMK command-line interface (CLI) to build the firmware. Requires a configured QMK build environment. The output will be a .hex or .bin file, ready for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/nix_studio/lilith/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nqmk compile nix_studio/lilith -km default\n```\n\n----------------------------------------\n\nTITLE: Building Flowerpad Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Flowerpad macropad using the QMK build environment.  It compiles the source code and generates a firmware file that can be flashed onto the device. It requires the QMK build environment to be set up correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/marshkeys/flowerpad/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake marshkeys/flowerpad:default\n```\n\n----------------------------------------\n\nTITLE: Configuring Maximum SSD1351 Devices (C)\nDESCRIPTION: This snippet shows how to configure the maximum number of SSD1351 displays that can be used by setting the `SSD1351_NUM_DEVICES` macro in `config.h`. The default value is 1. This is a preprocessor definition. Requires Quantum Painter to be enabled.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/quantum_painter.md#_snippet_28\n\nLANGUAGE: c\nCODE:\n```\n// 3 displays:\n#define SSD1351_NUM_DEVICES 3\n```\n\n----------------------------------------\n\nTITLE: Compiling FM-H Firmware\nDESCRIPTION: This command compiles the default layout for the GeonWorks Frog Mini FM-H (hotswap) PCB. It requires the QMK build environment to be properly configured. The resulting binary file (*.bin) can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/geonworks/frogmini/readme.md#_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nmake geonworks/frogmini/fmh:default\n```\n\n----------------------------------------\n\nTITLE: Building frobiac/redtilt QMK Firmware\nDESCRIPTION: This command builds the QMK Firmware for the frobiac/redtilt keyboard.  It compiles the keyboard layout and firmware code into a .hex file that can be flashed onto the device. The command must be run within a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/frobiac/redtilt/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake frobiac/redtilt\n```\n\n----------------------------------------\n\nTITLE: Flashing QMK Firmware\nDESCRIPTION: This command builds and flashes the default firmware to the itstleo/itstleo40 keyboard.  It requires a configured QMK build environment and the necessary tools for flashing to the RP2040 microcontroller.  It assumes the board is in a state ready to receive the new firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/itstleo/itstleo40/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake itstleo/itstleo40:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building The Railroad Keyboard Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the rev0 version of The Railroad keyboard. It assumes that the QMK build environment has already been set up and configured correctly. The output is a firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/nopunin10did/railroad/rev0/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake nopunin10did/railroad/rev0:default\n```\n\n----------------------------------------\n\nTITLE: Making Floorboard Keyboard with Default Keymap\nDESCRIPTION: This command builds the QMK firmware for the Floorboard keyboard with the default keymap. It assumes that the QMK build environment has already been set up. The resulting firmware can then be flashed onto the keyboard's Proton C controller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/floorboard/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake handwired/floorboard:default\n```\n\n----------------------------------------\n\nTITLE: Setting the Bootloader in rules.mk for USBasploader\nDESCRIPTION: This snippet sets the `BOOTLOADER` variable in the `rules.mk` file to `usbasploader`. This configuration is necessary for keyboards using the USBasploader bootloader, typically found on some non-USB AVR chips.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/flashing.md#_snippet_8\n\nLANGUAGE: Make\nCODE:\n```\n# Bootloader selection\nBOOTLOADER = usbasploader\n```\n\n----------------------------------------\n\nTITLE: Panning Display Buffer\nDESCRIPTION: Pans the contents of the display buffer horizontally.  If `left` is true, pans to the left; otherwise, pans to the right.  This is useful for creating scrolling effects or preparing the screen for new drawing operations.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/st7565.md#_snippet_16\n\nLANGUAGE: C\nCODE:\n```\n// Pans the buffer to the right (or left by passing true) by moving contents of the buffer\n// Useful for moving the screen in preparation for new drawing\nvoid st7565_pan(bool left);\n```\n\n----------------------------------------\n\nTITLE: Building Clueboard 66% rev4 Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Clueboard 66% rev4 keyboard using the QMK build environment.  It assumes that the QMK build environment has been set up correctly. No parameters are passed directly to the make command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/clueboard/66/rev4/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake clueboard/66/rev4:default\n```\n\n----------------------------------------\n\nTITLE: Building hannah910 Firmware with VIA (QMK)\nDESCRIPTION: This command compiles the hannah910 keyboard firmware with VIA support using the QMK build environment. It uses the `mechlovin/hannah910/rev3` target with the `via` keymap. This allows for real-time keymap customization using the VIA configurator. Requires a configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechlovin/hannah910/rev3/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake mechlovin/hannah910/rev3:via\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware for duckboard/duckboard:default in QMK\nDESCRIPTION: This command builds and flashes the QMK firmware for the duckboard/duckboard keyboard with the 'default' keymap to the keyboard. It requires a properly configured QMK build environment and a connected keyboard. The target device needs to be in flashing mode for this command to be successful.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/doodboard/duckboard/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake doodboard/duckboard:default:flash\n```\n\n----------------------------------------\n\nTITLE: Enabling Debugging in USB Host Shield Library (C++)\nDESCRIPTION: This code snippet shows how to enable serial debugging in the USB Host Shield Library. By changing the value of ENABLE_UHS_DEBUGGING to 1 in settings.h, debug messages will be printed to the serial monitor, aiding in troubleshooting and development.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/lib/usbhost/USB_Host_Shield_2.0/README.md#_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n#define ENABLE_UHS_DEBUGGING 1\n```\n\n----------------------------------------\n\nTITLE: Building The Uni v3 Firmware with QMK\nDESCRIPTION: This command builds the default keymap for The Uni v3 keyboard (usb_c version) using the QMK firmware build environment. It requires QMK to be set up properly and will generate the firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/stenokeyboards/the_uni/usb_c/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake stenokeyboards/the_uni/usb_c:default\n```\n\n----------------------------------------\n\nTITLE: Building the Bakeneko 80 Keyboard Firmware\nDESCRIPTION: This command is used to build the default firmware for the Bakeneko 80 keyboard. It assumes that the QMK build environment has already been set up. The command targets the `kkatano/bakeneko80` keyboard layout with the `default` keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kkatano/bakeneko80/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake kkatano/bakeneko80:default\n```\n\n----------------------------------------\n\nTITLE: Building Ristretto keyboard firmware\nDESCRIPTION: This command builds the default keymap for the Ristretto keyboard using the QMK Firmware build environment. It assumes the environment has been properly set up as described in the linked documentation.  The output is a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ristretto/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake ristretto:default\n```\n\n----------------------------------------\n\nTITLE: Flashing M10-A Firmware\nDESCRIPTION: This command flashes the default firmware onto the Rama Works M10-A macropad. It requires a configured QMK build environment and the appropriate flashing tools. The device needs to be in bootloader mode for the flash to succeed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/m10a/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake m10a:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing YMDK Wings Firmware\nDESCRIPTION: This command flashes the compiled firmware onto the YMDK Wings keyboard using the QMK build environment. This requires the keyboard to be in bootloader mode. The keyboard can be put into bootloader mode by holding the key at the top left while connecting the USB cable.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ymdk/wings/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake ymdk/wings:default:flash\n```\n\n----------------------------------------\n\nTITLE: Compiling cool836A Firmware\nDESCRIPTION: This command compiles the cool836A firmware for the verB_RED variant using the default keymap. It's used to verify that the firmware is compilable within the QMK environment. The command assumes that QMK Firmware is properly set up and that the current directory is within the QMK Firmware repository.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cool836a/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake cool836A/verB_RED\n```\n\n----------------------------------------\n\nTITLE: Building Polyandry Firmware with Pro Micro Controller\nDESCRIPTION: This command builds the default firmware for the Polyandry keyboard specifically for the Pro Micro controller using the `make` command. It requires that the build environment be configured according to QMK Firmware's documentation. The controller is explicitly specified in this example.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/40percentclub/polyandry/readme.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmake 40percentclub/polyandry/promicro:default\n```\n\n----------------------------------------\n\nTITLE: Building Keyboard Firmware with QMK\nDESCRIPTION: This command builds the firmware for the handwired Tractyl Manuform 5x6 right-hand version with the default keymap using the QMK build environment. It prepares the firmware for flashing onto the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/tractyl_manuform/5x6_right/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/tractyl_manuform/5x6_right:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Smart68 Firmware\nDESCRIPTION: This command builds and flashes the default firmware to the Smart 68 keyboard. It assumes that the QMK build environment is properly configured and that the necessary flashing tools are installed. The board should be in bootloader mode prior to running this command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/smart68/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake smart68:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing X-BOWS Numpad with QMK\nDESCRIPTION: These commands flash the compiled firmware onto the X-BOWS Numpad. The 'flash' target is used to upload the firmware to the device.  This requires a compatible bootloader on the numpad and a properly configured QMK build environment with flashing tools.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/xbows/numpad/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake xbows/numpad:default:flash\n```\n\nLANGUAGE: bash\nCODE:\n```\nmake xbows/numpad:via:flash\n```\n\n----------------------------------------\n\nTITLE: Building For Science Keyboard with QMK\nDESCRIPTION: This command builds the default keymap for the For Science keyboard using the QMK firmware.  It assumes that the QMK build environment is already set up.  The output will be a firmware file that can be flashed onto the Pro Micro controller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/for_science/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake for_science:default\n```\n\n----------------------------------------\n\nTITLE: Building ANO Keyboard Firmware\nDESCRIPTION: This snippet shows how to build the default QMK firmware for the ANO keyboard. First ensure that you have set up your build environment according to the QMK documentation.  Then run the `make` command with the target `ano:default`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ano/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake ano:default\n```\n\n----------------------------------------\n\nTITLE: Building KB16-01 Firmware with Make\nDESCRIPTION: This command compiles the QMK firmware for the KB16-01 macropad (revision 2) with the default keymap using the 'make' command. It requires a properly configured QMK build environment. The resulting firmware is ready to be flashed onto the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/doio/kb16/rev2/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\n`make doio/kb16/rev2:default`\n```\n\n----------------------------------------\n\nTITLE: Building Dolice Keyboard Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Dolice keyboard using the QMK build system. It uses the 'make' command with the target specified as 'linworks/dolice:default'. This assumes that the QMK build environment has already been set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/linworks/dolice/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake linworks/dolice:default\n```\n\n----------------------------------------\n\nTITLE: Compiling Kin80 firmware - STM32F411 version\nDESCRIPTION: This command compiles the QMK firmware for the Kin80 keyboard specifically for the STM32F411 microcontroller. It uses the 'blackpill411' target. The command assumes a properly configured QMK build environment. The resulting firmware is intended for use with Kin80 PCBs using STM32F411 MCU.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kin80/readme.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n`qmk compile -kb kin80:blackpill411 -km default`\n```\n\n----------------------------------------\n\nTITLE: Migrate Keyboard to info.json Format (qmk migrate)\nDESCRIPTION: This command searches for legacy code that can be converted to the new `info.json` format and adds it to the specified keyboard's `info.json`. It requires the `-kb` option to specify the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/cli_commands.md#_snippet_26\n\nLANGUAGE: text\nCODE:\n```\nqmk migrate [-h] -kb KEYBOARD [-f FILTER]\n```\n\n----------------------------------------\n\nTITLE: Building kaishi65 with QMK\nDESCRIPTION: This snippet provides the command to build the default keymap for the kaishi65 keyboard using the QMK firmware.  It assumes the QMK build environment has already been set up according to the QMK documentation. The command compiles the firmware for the kbdclack/kaishi65 keyboard with the default keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kbdclack/kaishi65/readme.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmake kbdclack/kaishi65:default\n```\n\n----------------------------------------\n\nTITLE: Running C Unit Tests (QMK)\nDESCRIPTION: This command executes the C unit test suite. It supports options for specifying tests, listing available tests, cleaning object files, setting environment variables, and setting the number of parallel make jobs.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/cli_commands.md#_snippet_53\n\nLANGUAGE: qmk\nCODE:\n```\nqmk test-c [-h] [-t TEST] [-l] [-c] [-e ENV] [-j PARALLEL]\n```\n\n----------------------------------------\n\nTITLE: Backing up Firmware on Linux\nDESCRIPTION: This command moves the original firmware file (`FLASH.BIN`) from the mounted TADA68 volume to the user's home directory (~), backing it up before flashing new firmware. This backup can be used to revert the keyboard to its original state if needed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/tada68/readme.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nmv /mnt/tada68/FLASH.BIN ~\n```\n\n----------------------------------------\n\nTITLE: Building the Ramlord WITF Firmware\nDESCRIPTION: This command builds the default firmware for the Ramlord WITF keyboard using the QMK build environment. It compiles the source code and generates the necessary files for flashing. This command should be executed within the QMK firmware directory after setting up the build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ramlord/witf/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake ramlord/witf:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Nimrod Keyboard Firmware (QMK)\nDESCRIPTION: This command builds and flashes the default keymap for the Nimrod keyboard using the QMK firmware build environment. It requires a properly configured QMK build environment and a connected Nimrod keyboard. The keyboard will be reset and updated with the new firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/nimrod/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake nimrod:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing TONE_rev2 Firmware\nDESCRIPTION: This command flashes the compiled firmware to the TONE_rev2 keyboard.  It assumes the QMK build environment is properly configured and the keyboard is connected and in the correct mode for flashing. This action requires dfu-programmer or similar flashing utilities to be available in the system.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/peranekofactory/tone/rev2/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake peranekofactory/tone:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Forever65 default keymap\nDESCRIPTION: This code snippet provides the command to build the default keymap for the Forever65 keyboard using the QMK firmware. It assumes that the build environment is already set up. The command `make forever65:default` compiles the keymap and prepares it for flashing onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/forever65/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake forever65:default\n```\n\n----------------------------------------\n\nTITLE: Building Keyboard Firmware with Make\nDESCRIPTION: This command builds the firmware for the handwired/consolekeyboard/27key keyboard with the default keymap using the QMK build environment. It requires the QMK build environment to be set up correctly.  The output is the compiled firmware ready to be flashed onto the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/consolekeyboard/27key/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/consolekeyboard/27key:default\n```\n\n----------------------------------------\n\nTITLE: Setting Color for All LEDs (RGB) - C\nDESCRIPTION: This function `is31fl3743a_set_color_all` sets the color of all LEDs when using an RGB driver. It takes red, green, and blue values as input and applies them to all LEDs managed by the IS31FL3743A driver.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/is31fl3743a.md#_snippet_5\n\nLANGUAGE: C\nCODE:\n```\nvoid is31fl3743a_set_color_all(uint8_t red, uint8_t green, uint8_t blue)\n```\n\n----------------------------------------\n\nTITLE: Flashing Janky No.9 Firmware (QMK)\nDESCRIPTION: This command builds and flashes the default firmware onto the Janky No.9 macropad using the QMK build environment.  It requires a properly configured QMK build environment and a connected macropad in a flashable state. The output is the flashed firmware on the macropad.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/jankycaps/janky9/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake jankycaps/janky9:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Pistachio Rev1 Keyboard Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Pistachio Rev1 keyboard using the QMK build environment. It assumes that the QMK build environment has been properly set up. Refer to the QMK documentation for detailed setup and usage instructions.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/rate/pistachio/rev1/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake pistachio/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Building Prime_E Keyboard Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the Prime_E keyboard using the QMK build environment. It requires the QMK build environment to be properly set up and uses the `make` command with specific arguments to target the `primekb/prime_e/std` keyboard and the `default` keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/primekb/prime_e/std/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake primekb/prime_e/std:default\n```\n\n----------------------------------------\n\nTITLE: Flashing QMK Firmware to Axolstudio Yeti\nDESCRIPTION: This command builds and flashes the default QMK firmware to the Axolstudio Yeti Hotswap RGB keyboard. It requires a properly configured QMK build environment and a connected keyboard in bootloader mode.  The command combines the build and flash steps into one.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/axolstudio/yeti/hotswap/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake axolstudio/yeti/hotswap:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building the default keymap for Momokai Tap Trio\nDESCRIPTION: This command builds the default keymap for the Momokai Tap Trio keyboard using the QMK build environment. It requires the QMK build environment to be set up correctly as a prerequisite.  The output will be a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/momokai/tap_trio/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake momokai/tap_trio:default\n```\n\n----------------------------------------\n\nTITLE: Building Ein_60 Firmware\nDESCRIPTION: This command builds the default firmware for the Ein_60 keyboard.  It uses the QMK make system.  No specific dependencies are required other than a properly configured QMK build environment. The output is a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ein_60/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake ein_60:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Adellein Keyboard Firmware\nDESCRIPTION: This command builds and flashes the default firmware for the Adellein keyboard to the device.  It requires the QMK build environment and a connected Adellein keyboard in a flashable state (e.g., bootloader mode). It combines the build and flash steps into a single command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/nightly_boards/adellein/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake nightly_boards/adellein:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Keyboard Firmware\nDESCRIPTION: This command compiles and flashes the studiokestra/fairholme keyboard firmware with the default keymap to the keyboard.  It depends on a configured QMK build environment and a connected keyboard in a flashable state. The command will typically use a bootloader to write the firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/studiokestra/fairholme/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake studiokestra/fairholme:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing QMK Firmware to Rogue87\nDESCRIPTION: This command builds and flashes the QMK Firmware for the Rogue87 PCB. It specifies the keyboard layout (mechlovin/infinity87/rev1/rogue87), the keymap (default), and the flash target. This will compile the firmware and then attempt to flash it onto the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechlovin/infinity87/rev1/rogue87/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake mechlovin/infinity87/rev1/rogue87:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for Axolstudio Foundation Gamma\nDESCRIPTION: This command builds the default firmware for the Axolstudio Foundation Gamma keyboard using the QMK build system. It assumes that the QMK build environment has been properly set up. The output is a firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/axolstudio/foundation_gamma/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake axolstudio/foundation_gamma:default\n```\n\n----------------------------------------\n\nTITLE: Flashing QMK Firmware to Qwertyqop QQ60 Hotswap\nDESCRIPTION: This command flashes the compiled QMK firmware to the Qwertyqop QQ60 Hotswap keyboard. It requires a properly set up QMK build environment and the necessary tools for flashing. The keyboard needs to be in bootloader mode for this command to succeed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/zeix/qwertyqop60hs/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake zeix/qwertyqop60hs:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Retropad Firmware with Make\nDESCRIPTION: This snippet demonstrates how to build the default firmware for the Retropad using the `make` command within the QMK Firmware environment. It requires a properly configured QMK build environment and assumes the keyboard definition is located at `swiftrax/retropad`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/swiftrax/retropad/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake swiftrax/retropad:default\n```\n\n----------------------------------------\n\nTITLE: Compile Firmware for Soldered PCB - QMK\nDESCRIPTION: This command compiles the QMK firmware for the Mode Eighty V2 keyboard with a soldered PCB using the default layout. It requires the QMK build environment to be set up. The resulting binary file (*.bin) can be found in the QMK firmware directory.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mode/m80v2/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake mode/m80v2/m80v2s:default # Soldered\n```\n\n----------------------------------------\n\nTITLE: Enabling WS2812 Driver in rules.mk\nDESCRIPTION: This snippet demonstrates how to enable the WS2812 driver in the `rules.mk` file.  This is necessary when using the driver standalone, rather than through RGBLight or RGB Matrix features. It sets the `WS2812_DRIVER_REQUIRED` variable to `yes` to include the driver in the build.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/ws2812.md#_snippet_0\n\nLANGUAGE: Make\nCODE:\n```\nWS2812_DRIVER_REQUIRED = yes\n```\n\n----------------------------------------\n\nTITLE: Building Keyboard Firmware with Make\nDESCRIPTION: This command builds the firmware for the wilba_tech WT65-D keyboard with the default keymap using the QMK build environment. It requires the QMK build environment to be set up correctly. The output is a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wilba_tech/wt65_d/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake wilba_tech/wt65_d:default\n```\n\n----------------------------------------\n\nTITLE: Assigning LED Matrix Driver in rules.mk\nDESCRIPTION: This snippet shows how to assign an LED matrix driver by setting the `LED_MATRIX_DRIVER` variable in the `rules.mk` file.  The value should correspond to one of the supported drivers. This is a required step before further configuration.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/led_matrix.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nLED_MATRIX_DRIVER = is31fl3218\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware to BN006 with Make\nDESCRIPTION: This command builds and flashes the default firmware for the Binepad BN006 macropad using the `make` command with the `:flash` target.  It requires a correctly configured QMK build environment and a connected BN006 macropad in a flashable state.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/binepad/bn006/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake binepad/bn006:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building RoMac+ Firmware with QMK\nDESCRIPTION: This snippet shows how to compile the firmware for the RoMac+ macropad using the QMK build environment.  It assumes the QMK build environment is already set up and uses the `make` command to build the `kingly_keys/romac_plus` keyboard with the `default` keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kingly_keys/romac_plus/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake kingly_keys/romac_plus:default\n```\n\n----------------------------------------\n\nTITLE: Compiling Kimiko Rev1 Firmware with QMK\nDESCRIPTION: This command compiles the firmware for the Kimiko Rev1 keyboard using the QMK build environment. It specifies the keyboard layout (keycapsss/kimiko/rev1) and keymap (default). The resulting .hex file can then be flashed to the keyboard controller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keycapsss/kimiko/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nqmk compile -kb keycapsss/kimiko/rev1 -km default\n```\n\n----------------------------------------\n\nTITLE: Building Slash Keyboard Firmware with Make\nDESCRIPTION: This command builds the default firmware for the handwired Slash keyboard. It assumes that the QMK build environment has already been set up. The resulting firmware can then be flashed onto the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/slash/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/slash:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Kapl Keyboard Firmware\nDESCRIPTION: This command builds and flashes the QMK firmware for the Kapl keyboard (rev1) with the default keymap to the keyboard's microcontroller. It requires the QMK build environment and a connected keyboard in bootloader mode. The `flash` target uploads the compiled firmware to the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kapl/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake kapl/rev1:default:flash\n```\n\n----------------------------------------\n\nTITLE: Setting Pitch Standard in QMK Music Mode\nDESCRIPTION: This C macro definition allows you to change the pitch standard used in Music Mode. By default, `PITCH_STANDARD_A` is set to 440.0f, which is the standard concert pitch.  Changing this value will alter the tuning of the music played in Music Mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/audio.md#_snippet_18\n\nLANGUAGE: c\nCODE:\n```\n#define PITCH_STANDARD_A 432.0f\n```\n\n----------------------------------------\n\nTITLE: Building Astro65 Firmware with Make\nDESCRIPTION: This command builds the default firmware for the Astro65 keyboard. It assumes the QMK build environment is already set up. The 'handwired/swiftrax/astro65' part specifies the keyboard layout, and 'default' indicates the default keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/swiftrax/astro65/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/swiftrax/astro65:default\n```\n\n----------------------------------------\n\nTITLE: Flashing QMK Firmware\nDESCRIPTION: This command builds and flashes the QMK firmware to the handwired Preonic keyboard with the riblee_f401 configuration and the default keymap. It builds upon the previous command, adding the flashing functionality. It assumes the QMK environment is configured to communicate with the keyboard's bootloader.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/riblee_f401/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/riblee_f401:default:flash\n```\n\n----------------------------------------\n\nTITLE: Defining QMK Keymap Layout\nDESCRIPTION: Defines a keyboard layout macro `LAYOUT_60_iso_wkl_split_bs_rshift` for QMK Firmware.  This macro is used to specify the key positions and arrangements on the keyboard. The specific arrangement includes ISO layout, WKL, split backspace and reduced right shift.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/layouts/default/60_iso_wkl_split_bs_rshift/readme.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nLAYOUT_60_iso_wkl_split_bs_rshift\n```\n\n----------------------------------------\n\nTITLE: Selecting Soft Serial Communication Speed\nDESCRIPTION: This definition controls the communication speed for serial communication between the split keyboard halves. A lower number implies a higher speed. It should be defined in `config.h`. Possible values range from 0 to 5, with 1 being the default.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/split_keyboard.md#_snippet_11\n\nLANGUAGE: c\nCODE:\n```\n#define SELECT_SOFT_SERIAL_SPEED {#}\n```\n\n----------------------------------------\n\nTITLE: Flashing ErgoTravel Firmware (QMK)\nDESCRIPTION: This command builds and flashes the default firmware for the ErgoTravel keyboard (revision 1) using the QMK build environment and the avrdude flashing tool. It compiles the firmware and then uploads it to the keyboard's Pro Micro controller via USB.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ergotravel/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake ergotravel/rev1:default:avrdude\n```\n\n----------------------------------------\n\nTITLE: Defining QMK Keyboard Layout\nDESCRIPTION: This snippet defines the `LAYOUT_ortho_5x15` layout in the QMK firmware.  It signifies that a layout with the name `LAYOUT_ortho_5x15` exists and will likely have a corresponding keymap definition elsewhere within the QMK project. No direct code implementation is provided.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/layouts/community/ortho_5x15/readme.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n# ortho_5x15\n\n    LAYOUT_ortho_5x15\n```\n\n----------------------------------------\n\nTITLE: Flashing Stront Keyboard Firmware\nDESCRIPTION: This command flashes the default keymap for the Stront keyboard onto the device. It depends on the QMK build environment being configured correctly and the necessary tools being installed. The command assumes the keyboard is connected and in a state ready to receive the firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/stront/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake stront:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing VRYNBOARD Firmware (QMK)\nDESCRIPTION: This command builds and flashes the default firmware for the VRYNBOARD macropad. This requires a correctly configured QMK environment and the necessary tools for flashing the device. It assumes the device is connected and in a state ready to receive the firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/zlabkeeb/vrynboard/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake zlabkeeb/vrynboard:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Dolice Keyboard Firmware with QMK\nDESCRIPTION: This command flashes the built firmware onto the Dolice keyboard using the QMK build system. It uses the 'make' command with the target specified as 'linworks/dolice:default:flash'. This requires a configured QMK build environment and a connected Dolice keyboard in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/linworks/dolice/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake linworks/dolice:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Keychron Q12 Firmware (Makefile)\nDESCRIPTION: This command flashes the compiled firmware onto the Keychron Q12 keyboard. It assumes that the keyboard is connected to the computer and that the QMK flashing tools are properly configured. It depends on the QMK build environment and the compiled firmware from the build command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keychron/q12/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake keychron/q12/q12_ansi_stm32l432:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing QMK Firmware for xMK\nDESCRIPTION: This command flashes the default firmware for the xMK keyboard to the connected device. It builds the firmware (if not already built) and uses the appropriate flashing tool based on the keyboard's configuration.  Requires QMK build environment to be set up and a connected device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/converter/xmk/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake converter/xmk:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Mode SixtyFive HA rev. Alpha with QMK\nDESCRIPTION: This command is used to flash the Mode SixtyFive HA rev. Alpha keyboard with the default keymap using QMK firmware.  It requires a properly configured QMK build environment.  The target is mode/m65hi_alpha, the keymap is default, and the action is flash.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mode/m65ha_alpha/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake mode/m65hi_alpha:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for Thinkpad T6x Converter\nDESCRIPTION: This command builds the default firmware for the Thinkpad T6x keyboard converter using the QMK build environment.  It requires the QMK build environment to be properly set up.  The resulting firmware can then be flashed to the Raspberry Pi Pico.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/converter/thinkpad_t6x/rpi_pico/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake converter/thinkpad_t6x/rpi_pico:default\n```\n\n----------------------------------------\n\nTITLE: ST7565 Off User Override\nDESCRIPTION: A weak function that can be overridden by the user to customize the behavior when the ST7565 display is turned off via `st7565_off()`. This is *not* called if the screen is already off.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/st7565.md#_snippet_27\n\nLANGUAGE: C\nCODE:\n```\n// Called when st7565_off() turns off the screen, weak function overridable by the user\n// Not called if the screen is already off\nvoid st7565_off_user(void);\n```\n\n----------------------------------------\n\nTITLE: Enabling Joystick Feature in QMK\nDESCRIPTION: This snippet demonstrates how to enable the joystick feature in QMK by adding `JOYSTICK_ENABLE = yes` to the `rules.mk` file. It also includes the required definitions for the number of joystick buttons and axes in the `config.h` file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/ChangeLog/20200829.md#_snippet_2\n\nLANGUAGE: c\nCODE:\n```\n#define JOYSTICK_BUTTON_COUNT 8\n#define JOYSTICK_AXES_COUNT 2\n```\n\n----------------------------------------\n\nTITLE: Flashing Tripel Keyboard Firmware (QMK)\nDESCRIPTION: This command flashes the previously built QMK firmware onto the Tripel keyboard's Pro-Micro, using the default keymap and the left-mounted Pro-Micro configuration. It requires the QMK build environment to be properly set up and the keyboard to be connected in flashing mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/peej/tripel/left/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake peej/tripel/left:default:flash\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Keycode Names in QMK - C\nDESCRIPTION: This snippet demonstrates how to define custom names for complex keycodes in QMK firmware using the `#define` preprocessor directive. This enhances keymap readability and maintainability. It requires a basic understanding of C preprocessor directives and QMK keycode conventions.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/faq_keymap.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#define FN_CAPS LT(_FL, KC_CAPS)\n#define ALT_TAB LALT(KC_TAB)\n```\n\n----------------------------------------\n\nTITLE: Enabling APA102 Driver in rules.mk (Makefile)\nDESCRIPTION: This snippet demonstrates how to enable the APA102 driver by adding `APA102_DRIVER_REQUIRED = yes` to the `rules.mk` file. This includes the necessary driver code when compiling the firmware. This allows direct usage of the APA102 API within your code.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/apa102.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nAPA102_DRIVER_REQUIRED = yes\n```\n\n----------------------------------------\n\nTITLE: Flashing Keyboard Firmware with QMK\nDESCRIPTION: This command flashes the compiled firmware to the kbdfans/bella/rgb_iso keyboard. It uses the default keymap and assumes the QMK build environment is correctly configured. This command typically requires the keyboard to be in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kbdfans/bella/rgb_iso/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake kbdfans/bella/rgb_iso:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Emi20 Firmware\nDESCRIPTION: This snippet shows how to build the default firmware for the Emi20 keyboard using the `make` command. It assumes that the QMK build environment has already been set up. The output is the compiled firmware ready to be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/emi20/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake emi20:default\n```\n\n----------------------------------------\n\nTITLE: Enabling Bootmagic in rules.mk (Make)\nDESCRIPTION: This snippet shows how to enable the Bootmagic feature in your `rules.mk` file.  Enabling Bootmagic allows the keyboard to enter the bootloader by holding down a designated key during startup. This setting is required if Bootmagic is disabled by default.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/bootmagic.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nBOOTMAGIC_ENABLE = yes\n```\n\n----------------------------------------\n\nTITLE: Override Magic Keycode Placeholder Functions\nDESCRIPTION: Overrides the placeholder functions for magic keycodes in `keymap.c` or user space code when the magic keycode feature is not used. This replaces the weak functions with simple return statements to reduce firmware size.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/squeezing_avr.md#_snippet_10\n\nLANGUAGE: c\nCODE:\n```\n#ifndef MAGIC_ENABLE\nuint16_t keycode_config(uint16_t keycode) {\n    return keycode;\n}\n#endif\n```\n\nLANGUAGE: c\nCODE:\n```\n#ifndef MAGIC_ENABLE\nuint8_t mod_config(uint8_t mod) {\n    return mod;\n}\n#endif\n```\n\n----------------------------------------\n\nTITLE: Building pdxkbc Firmware with QMK\nDESCRIPTION: This snippet demonstrates how to build the default keymap for the pdxkbc keyboard using the QMK build environment. It assumes that the QMK build environment has been properly set up. The command compiles the keyboard firmware and prepares it for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/pdxkbc/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake pdxkbc:default\n```\n\n----------------------------------------\n\nTITLE: Building Frusta Fundamental Firmware with QMK\nDESCRIPTION: This command builds the default keymap for the Frusta Fundamental keyboard using the QMK firmware build environment. It assumes that the QMK build environment has already been set up. The resulting firmware can then be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/picolab/frusta_fundamental/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake picolab/frusta_fundamental:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware to CannonKeys Petrichor\nDESCRIPTION: This command builds and flashes the default firmware for the CannonKeys Petrichor keyboard to the device. It combines the build step with the flashing process, using the `flash` target. The QMK build environment and necessary flashing tools must be configured beforehand.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cannonkeys/petrichor/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake cannonkeys/petrichor:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Swiss Keyboard Firmware - QMK\nDESCRIPTION: This command flashes the default firmware onto the Swiss keyboard using the QMK build system. It builds and flashes the firmware to the keyboard. It assumes that the build environment has already been set up according to the QMK documentation and the keyboard is connected and in a flashable state.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/swiss/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake swiss:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building BENTO Firmware with QMK\nDESCRIPTION: This command compiles the default firmware for the BENTO macropad (revision 1) using the QMK build environment. It requires QMK to be set up correctly and will generate a .hex file that can be flashed onto the microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/bento/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake handwired/bento/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Registering Slave-Side Handler Function\nDESCRIPTION: This code registers a slave-side handler function (`user_sync_a_slave_handler`) with the split transport, associating it with a specific transaction ID (`USER_SYNC_A`). This enables the master side to invoke the handler. This registration is often done in `keyboard_post_init_user`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/split_keyboard.md#_snippet_30\n\nLANGUAGE: c\nCODE:\n```\nvoid keyboard_post_init_user(void) {\n    transaction_register_rpc(USER_SYNC_A, user_sync_a_slave_handler);\n}\n```\n\n----------------------------------------\n\nTITLE: Flashing underscore33 Keyboard Firmware\nDESCRIPTION: This command flashes the compiled firmware onto the underscore33 keyboard (rev2 version with the default keymap).  It builds the firmware and then attempts to flash it to the connected keyboard. Requires a configured QMK build environment and a connected, flashable keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/tominabox1/underscore33/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake tominabox1/underscore33/rev2:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building the Aurora65 Keyboard Firmware\nDESCRIPTION: This command builds the default keymap for the Aurora65 keyboard using the QMK build environment.  It assumes that the build environment has already been set up according to the QMK documentation. The output will be a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/aurora65/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake aurora65:default\n```\n\n----------------------------------------\n\nTITLE: Building FJLabs TF60 RGB V2 Firmware (Makefile)\nDESCRIPTION: This command builds the default firmware for the FJLabs TF60 RGB V2 keyboard using the QMK build environment. It requires QMK build tools to be set up.  The output is a .hex or .bin file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/fjlabs/tf60v2/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake fjlabs/tf60v2:default\n```\n\n----------------------------------------\n\nTITLE: Compiling KBD67 MKII RGB V2 Firmware with QMK\nDESCRIPTION: This command compiles the default firmware for the KBD67 MKII RGB V2 keyboard using the QMK build system. It requires the QMK build environment to be properly set up. The compiled firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kbdfans/kbd67/readme.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nmake kbdfans/kbd67/mkiirgb/v2:default\n```\n\n----------------------------------------\n\nTITLE: Modifying SS pin for MAX3421E (Example)\nDESCRIPTION: This example snippet shows how to redefine the SS pin to pin 7 while keeping the INT pin at 9 for the MAX3421E USB host controller. This modification requires changing the `UsbCore.h` file after rerouting the SS pin.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/lib/usbhost/USB_Host_Shield_2.0/README.md#_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\ntypedef MAX3421e<P7, P9> MAX3421E;\n```\n\n----------------------------------------\n\nTITLE: Flashing EXT65 Firmware - QMK\nDESCRIPTION: This command flashes the built QMK firmware onto the EXT65 keyboard. It utilizes the `make` command with the `:flash` target, which triggers the flashing process. It requires a correctly configured QMK build environment and a compatible flashing tool.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/aeboards/ext65/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake aeboards/ext65/rev1:default:flash\n```\n\nLANGUAGE: Shell\nCODE:\n```\nmake aeboards/ext65/rev2:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Daisy Keyboard Firmware with QMK\nDESCRIPTION: This snippet shows how to build the default firmware for the Daisy keyboard using the QMK build environment. It assumes that the QMK build environment has already been set up correctly.  The command `make ktec/daisy:default` compiles the firmware for the Daisy keyboard using the default keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ktec/daisy/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake ktec/daisy:default\n```\n\n----------------------------------------\n\nTITLE: Building DZ60v2 Firmware\nDESCRIPTION: This command builds the default firmware for the DZ60v2 keyboard using the QMK build environment. It requires a properly configured QMK environment and will generate a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/dztech/dz60v2/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake dztech/dz60v2:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Keyboard Firmware (QMK)\nDESCRIPTION: This command builds and flashes the default firmware to the Viktus Styrka v2 keyboard.  It requires a properly configured QMK build environment and a connected keyboard in flashable mode. The command assumes the default flashing tool for the keyboard is available in the environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/viktus/sp111_v2/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake viktus/sp111_v2:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Espectro Keyboard Firmware using Make\nDESCRIPTION: This command builds the default keymap for the Espectro keyboard using the QMK Firmware build environment. It assumes the QMK environment is set up correctly. The command compiles the keymap and generates the firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechkeys/espectro/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake mechkeys/espectro:default\n```\n\n----------------------------------------\n\nTITLE: Defining a 65% ANSI Keyboard Layout\nDESCRIPTION: This code snippet defines a keyboard layout named `LAYOUT_65_ansi`.  It suggests a pre-defined macro or function within the QMK firmware used for specifying ANSI 65% keyboard layouts. It's likely used to map physical keys to their corresponding functions.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/layouts/community/65_ansi/readme.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nLAYOUT_65_ansi\n```\n\n----------------------------------------\n\nTITLE: Making default Aurora Corne firmware - QMK\nDESCRIPTION: This command builds the default firmware for the Aurora Corne keyboard (rev1) within the QMK environment. It assumes the build environment has already been set up according to the QMK documentation. This produces a .hex file used for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/splitkb/aurora/corne/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake splitkb/aurora/corne/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Enabling HD44780 LCD Driver in rules.mk (Make)\nDESCRIPTION: This snippet shows how to enable the HD44780 LCD driver by adding `HD44780_ENABLE = yes` to the `rules.mk` file.  This is a necessary step to include the driver in the firmware build. It tells the build system to compile and link the driver code.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/hd44780.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nHD44780_ENABLE = yes\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware with nu-isp-cli\nDESCRIPTION: This command installs and utilizes elfmimi's nu-isp-cli tool to flash the keyboard with a .bin file.  It requires cargo. The specified firmware file (ducky_one2mini_default.bin) must be present or accessible via a path.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ducky/one2mini/1861st/readme.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ncargo install nu-isp-cli\nnu-isp-cli flash ducky_one2mini_default.bin\n```\n\n----------------------------------------\n\nTITLE: Enabling RGB Underglow in QMK\nDESCRIPTION: This line enables RGB underglow support in the `rules.mk` file.  It's necessary to activate the RGB lighting features for the Unikorn 60 PCB within the QMK firmware build process. RGB LEDs and controller must be physically installed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/unikorn/readme.md#_snippet_2\n\nLANGUAGE: makefile\nCODE:\n```\nRGBLIGHT_ENABLE = yes\n```\n\n----------------------------------------\n\nTITLE: Building USB-USB Converter with Arduino Leonardo & USB Host Shield\nDESCRIPTION: This command builds the USB-USB converter firmware specifically for Arduino Leonardo with a USB Host Shield.  It utilizes the `make` command and assumes a properly configured QMK build environment.  It selects the `leonardo` subproject.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/converter/usb_usb/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake converter/usb_usb/leonardo:default\n```\n\n----------------------------------------\n\nTITLE: Flash Argyle Keyboard Firmware\nDESCRIPTION: This command flashes the default firmware onto the Argyle keyboard using the QMK build environment. It assumes that the keyboard is connected and in a state ready to receive the firmware. Requires a properly configured QMK environment and a compatible flashing tool.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/argyle/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake argyle:default:flash\n```\n\n----------------------------------------\n\nTITLE: Setting Global Current Control in config.h (C)\nDESCRIPTION: This snippet shows how to set the global current control value for the IS31FL3729 driver in your `config.h` file. This allows you to adjust the overall brightness of the LEDs by controlling the current sunk by the CSx pins.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/is31fl3729.md#_snippet_3\n\nLANGUAGE: c\nCODE:\n```\n#define IS31FL3729_GLOBAL_CURRENT 0x40\n```\n\n----------------------------------------\n\nTITLE: Building Valor FRL TKL Firmware\nDESCRIPTION: These commands build the QMK firmware for the Valor FRL TKL Rev2.0 keyboard with default and VIA keymaps. The `make` command compiles the firmware based on the specified keyboard, keymap, and revision.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/xelus/valor_frl_tkl/rev2_0/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake xelus/valor_frl_tkl/rev2_0:default\nmake xelus/valor_frl_tkl/rev2_0:via\n```\n\n----------------------------------------\n\nTITLE: Building Six Shooter Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Six Shooter keyboard using the QMK build environment. It assumes that the QMK build environment is already set up. The resulting firmware can then be flashed onto the Teensy 2.0 microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/bpiphany/sixshooter/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake bpiphany/sixshooter:default\n```\n\n----------------------------------------\n\nTITLE: Building Varanidae Keyboard Firmware\nDESCRIPTION: These commands are used to build the firmware for the Varanidae keyboard using the QMK build environment.  The first command builds the default keymap, and the second builds the VIA-enabled keymap. You need to have QMK set up to use the commands.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/varanidae/readme.md#_snippet_0\n\nLANGUAGE: QMK Make\nCODE:\n```\nmake varanidae:default\n```\n\nLANGUAGE: QMK Make\nCODE:\n```\nmake varanidae:via\n```\n\n----------------------------------------\n\nTITLE: Flashing QMK Firmware to Durgod Galaxy\nDESCRIPTION: This command flashes the built QMK firmware to the Durgod Galaxy keyboard using the default keymap. It requires the QMK build environment and appropriate flashing tools. The keyboard must be in a flashable state, potentially requiring specific bootloader activation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/durgod/dgk6x/galaxy/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake durgod/galaxy:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building keyboard firmware\nDESCRIPTION: This command builds the default firmware for the posey_split_v5 keyboard. It utilizes the `make` command with specific arguments for the keyboard, version, and default keymap. This assumes that the QMK build environment has been set up properly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/pmk/posey_split/v5/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake pmk/posey_split/v5:default\n```\n\n----------------------------------------\n\nTITLE: Making N8X Firmware\nDESCRIPTION: This command builds the default firmware for the N8X keyboard using the specified hardware (era/linx3). It assumes that the QMK build environment has already been set up. The generated firmware file will be located in the QMK firmware directory.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/era/linx3/n8x/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake era/linx3/n8x:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Uni660 Rev2 Firmware\nDESCRIPTION: These commands flash the built QMK firmware onto the Uni660 Rev2 keyboard. The first command flashes the ANSI version, and the second flashes the ISO version. Requires a configured QMK build environment and the keyboard to be in DFU mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/sirius/uni660/rev2/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake sirius/uni660/rev2/ansi:default:flash  # for ANSI version\n```\n\nLANGUAGE: Shell\nCODE:\n```\nmake sirius/uni660/rev2/iso:default:flash   # for ISO version\n```\n\n----------------------------------------\n\nTITLE: Enable PWM and PAL in halconf.h - C\nDESCRIPTION: This code snippet enables the PWM and PAL (Platform Abstraction Layer) features in the ChibiOS `halconf.h` configuration file. Enabling these features is a prerequisite for using PWM functionality in the QMK firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/audio.md#_snippet_6\n\nLANGUAGE: C\nCODE:\n```\n#pragma once\n\n#define HAL_USE_PWM TRUE // [!code focus]\n#define HAL_USE_PAL TRUE // [!code focus]\n\n#include_next <halconf.h>\n```\n\n----------------------------------------\n\nTITLE: Start Unicode Input Sequence - C\nDESCRIPTION: This function begins the Unicode input sequence.  The exact behavior depends on the currently selected input mode, as described in the function documentation. This function is weakly defined and can be overridden in user code.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/unicode.md#_snippet_15\n\nLANGUAGE: C\nCODE:\n```\nvoid unicode_input_start(void)\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware to YMD75 V4\nDESCRIPTION: This command builds and flashes the default firmware for the ISO layout of the YMD75 V4 keyboard.  It requires a properly configured QMK build environment and a connected keyboard in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ymdk/ymd75/rev4/iso/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake ymdk/ymd75/rev4/iso:default:flash\n```\n\n----------------------------------------\n\nTITLE: HHKB Professional2 Bottom Row Keymap\nDESCRIPTION: Specifies the bottom row keymap layout for the HHKB Professional2 model. Three configurations are provided, each varying in the positions of Fn, Alt, and Meta keys around the Space key.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kc60se/keymaps/default/readme.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n        |Alt |Fn  |        Space          |Meta|Alt |\n        |Meta|Alt |        Space          |Alt |Meta|\n        |Fn  |Alt |        Space          |Alt |Meta|\n```\n\n----------------------------------------\n\nTITLE: Flashing Keychron V5 Firmware\nDESCRIPTION: This command flashes the compiled QMK firmware onto the Keychron V5 keyboard. It extends the build command by including the 'flash' target, which utilizes the appropriate flashing tool based on the keyboard's bootloader.  The board should be in the correct mode to accept a flashed image.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keychron/v5/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake keychron/v5/ansi:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building firmware for SteelSeries Prime+ (QMK)\nDESCRIPTION: This command builds the default firmware for the SteelSeries Prime+ mouse using the QMK build environment. It requires the QMK build environment to be set up beforehand. The output will be a .hex or .bin file that can be flashed to the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/steelseries/prime_plus/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake steelseries/prime_plus:default\n```\n\n----------------------------------------\n\nTITLE: Flashing firmware for hineybush/ibis keyboard\nDESCRIPTION: This command flashes the built firmware onto the hineybush/ibis keyboard. It assumes that the QMK build environment is set up correctly and the necessary flashing tools are available. It combines the build and flash steps into one command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/hineybush/ibis/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake hineybush/ibis:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing firmware to Drop The Key V2 in QMK\nDESCRIPTION: This command flashes the compiled default firmware onto the Drop The Key V2 macropad. It assumes the device is in the correct bootloader mode and uses the appropriate flashing tool configured within the QMK environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/drop/thekey/v2/readme.md#_snippet_2\n\nLANGUAGE: make\nCODE:\n```\nmake drop/thekey/v2:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing the default keymap for AI macropad\nDESCRIPTION: This command flashes the default keymap onto the AI macropad using the QMK build environment. It compiles the keymap and then transfers it to the device via the appropriate flashing tool. Ensure your QMK build environment is set up and the correct bootloader is active before running this command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ai/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake ai:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware for Alpaca whitefox-eclipse\nDESCRIPTION: This command flashes the default firmware to the Alpaca Keyboards whitefox-eclipse keyboard. It uses the `make` command with the target `alpaca/wfeclipse:default:flash`. This requires a properly set up QMK build environment and a connected keyboard in flashing mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/alpaca/wfeclipse/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake alpaca/wfeclipse:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Clueboard 66% rev3 Firmware - Make Command\nDESCRIPTION: This command is used to build the default firmware for the Clueboard 66% rev3 keyboard. It requires the QMK build environment to be set up. The resulting firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/clueboard/66/rev3/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake clueboard/66/rev3:default\n```\n\n----------------------------------------\n\nTITLE: Flashing NK1 Firmware\nDESCRIPTION: This command flashes the NK1 keypad with a specified keymap using dfu-util through the QMK build environment. The device must be in DFU mode (achieved through a hardware reset procedure).  Replace `<keymap>` with the desired keymap name.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/novelkeys/nk1/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake nk1:<keymap>:flash\n```\n\n----------------------------------------\n\nTITLE: Testing Keyboard Matrix with Make\nDESCRIPTION: This command builds and flashes the firmware with matrix testing enabled using the 'MTEST' variable set to 'mdelay0'. This configuration is used for debugging the keyboard matrix. The ':flash' option flashes the compiled firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/symmetric70_proto/proton_c/readme.md#_snippet_2\n\nLANGUAGE: Makefile\nCODE:\n```\nmake MTEST=mdelay0 handwired/symmetric70_proto/proton_c/normal:default:flash\n```\n\nLANGUAGE: Makefile\nCODE:\n```\nmake MTEST=mdelay0 handwired/symmetric70_proto/proton_c/fast:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for TKC Portico68 v2 (QMK)\nDESCRIPTION: This command builds the default firmware for the TKC Portico68 v2 keyboard using the QMK build environment. It compiles the keyboard layout and firmware code into a .hex file, which can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/tkc/portico68v2/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake tkc/portico68v2:default\n```\n\n----------------------------------------\n\nTITLE: Building Doppelganger Firmware\nDESCRIPTION: This snippet provides the command to build the default firmware for the Doppelganger keyboard using the QMK build environment. It assumes that the QMK build environment is already set up. The output will be the compiled firmware ready to be flashed onto the keyboard's microcontrollers.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/doppelganger/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake doppelganger:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Keyboard Firmware (QMK)\nDESCRIPTION: This command flashes the compiled QMK firmware to the ctrl-M keyboard. It uses the `make` command with the `flash` target to program the keyboard's microcontroller. The QMK build environment and necessary flashing tools must be configured correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ibm/model_m/ctrl_m/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake ibm/model_m/ctrl_m:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing fukuro Firmware with QMK\nDESCRIPTION: This command flashes the compiled firmware to the fukuro keyboard.  It assumes that the keyboard is in a state where it can accept a firmware flash, typically bootloader mode. It requires QMK to be set up correctly with all necessary dependencies installed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kibou/fukuro/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake kibou/fukuro:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Ginkgo65 Firmware with QMK\nDESCRIPTION: This command builds and flashes the default firmware for the Ginkgo65 keyboard. It requires the QMK build environment to be set up correctly and the keyboard to be in bootloader mode. It uses the `make` command with the `flash` target.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mokey/ginkgo65/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake mokey/ginkgo65:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing PLUTO Keyboard Firmware with Make\nDESCRIPTION: This command flashes the built firmware onto the dztech/pluto keyboard using the default keymap. It requires a properly configured QMK build environment and a connected keyboard in bootloader mode. The command relies on the `dfu-programmer` or `avrdude` tools.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/dztech/pluto/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake dztech/pluto:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for WestM WM9 using QMK\nDESCRIPTION: This command builds the default firmware for the WestM WM9 Rev1 macropad using the QMK build environment.  It requires a properly configured QMK build environment. The output will be a .hex or .bin file that can be flashed to the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/westm/westm9/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake westm/westm9/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Building the G-Boy Keyboard with QMK\nDESCRIPTION: This command builds the default keymap for the Kegen G-Boy keyboard using the QMK build environment.  It requires the QMK build environment to be properly set up.  The output will be a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kegen/gboy/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake kegen/gboy:default\n```\n\n----------------------------------------\n\nTITLE: Building Keyboard Firmware with Make\nDESCRIPTION: This command builds the default firmware for the handwired/cans12erv2 keyboard. It relies on the QMK build environment being properly set up. The command generates a .hex or .bin file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/cans12erv2/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/cans12erv2:default\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for DZ65RGB V3\nDESCRIPTION: This command builds the default firmware for the DZ65RGB V3 keyboard. It requires a properly configured QMK build environment. The output is a .hex or .bin file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/dztech/dz65rgb/v3/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake dztech/dz65rgb/v3:default\n```\n\n----------------------------------------\n\nTITLE: Building the iNETT Studio SQUARE 80% Keyboard (QMK)\nDESCRIPTION: This command builds the default keymap for the iNETT Studio SQUARE 80% keyboard using the QMK firmware. It relies on a correctly configured QMK build environment. The output will be a firmware file ready for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/inett_studio/sq80/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake inett_studio/sq80:default\n```\n\n----------------------------------------\n\nTITLE: Flashing QMK Firmware\nDESCRIPTION: This snippet shows how to flash the compiled QMK Firmware to the Helix keyboard with the 'led_test' keymap. It builds upon the compilation step. You need to press the reset switch on the keyboard while executing this command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/helix/rev2/keymaps/led_test/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ make helix:led_test:flash\n```\n\n----------------------------------------\n\nTITLE: Building ÆLITH Firmware with QMK\nDESCRIPTION: This snippet demonstrates how to build the firmware for the ÆLITH keyboard using the QMK build environment. It assumes that the QMK build environment has been properly set up. The `make` command compiles the keyboard's firmware using the default keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/rmi_kb/aelith/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake rmi_kb/aelith:default\n```\n\n----------------------------------------\n\nTITLE: Building Heisenberg Keyboard Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the handwired Heisenberg keyboard using the QMK firmware build environment. It requires a properly configured QMK build environment. The output is a .hex or .bin file that can be flashed to the Pro Micro controller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/heisenberg/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/heisenberg:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware to FC980C\nDESCRIPTION: This command flashes the default firmware to the fc980c keyboard using DFU.  It requires the keyboard to be in DFU mode, which is typically entered by pressing the reset button on the controller.  Sudo privileges are usually required.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/fc980c/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo make fc980c:default:dfu\n```\n\n----------------------------------------\n\nTITLE: Building EU ISOlation Firmware\nDESCRIPTION: This command builds the default firmware for the EU ISOlation keyboard using the QMK build environment.  It assumes the QMK build environment has been set up correctly. The output will be a .hex or .bin file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/p3d/eu_isolation/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake p3d/eu_isolation:default\n```\n\n----------------------------------------\n\nTITLE: Building Atlas_Alps Firmware with QMK\nDESCRIPTION: This snippet shows how to build the firmware for the Cannon Keys Atlas_Alps keyboard using the QMK build environment. It requires a properly set up QMK build environment and uses the `make` command with the specified keyboard and keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cannonkeys/atlas_alps/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake cannonkeys/atlas_alps:default\n```\n\n----------------------------------------\n\nTITLE: Building NK65B Firmware with VIA - Makefile\nDESCRIPTION: This command builds the firmware for the NK65B keyboard with VIA support. It uses the 'make' command, specifying the 'novelkeys/nk65b' keyboard and the 'via' keymap. Ensure the build environment is properly set up before running this command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/novelkeys/nk65b/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake novelkeys/nk65b:via\n```\n\n----------------------------------------\n\nTITLE: Making Mechmini 2.0 default keymap\nDESCRIPTION: This command builds the default keymap (split space) for the Mechmini 2.0 keyboard using the QMK build environment. Requires setting up the build environment and refers to the v1 readme for v1 instructions.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechkeys/mechmini/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake mechkeys/mechmini:default\n```\n\n----------------------------------------\n\nTITLE: Flashing ETERNAL Keypad Firmware with QMK\nDESCRIPTION: This command flashes the compiled firmware image onto the ETERNAL Keypad. It requires the QMK build environment and a compatible flashing tool.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/eternal_keypad/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake eternal_keypad:default:flash\n```\n\n----------------------------------------\n\nTITLE: Compiling Pill60 Keyboard Firmware with STM32F411\nDESCRIPTION: Compiles the default keymap for the Pill60 keyboard using QMK, specifying the STM32F411 microcontroller as the target.  This builds the firmware for the Pill60 targeting the Blackpill_F411 MCU.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/pill60/readme.md#_snippet_2\n\nLANGUAGE: qmk\nCODE:\n```\nqmk compile -kb handwired/pill60/blackpill_f411 -km default\n```\n\n----------------------------------------\n\nTITLE: Building default layout for Drop The Key V2 in QMK\nDESCRIPTION: This command builds the default firmware for the Drop The Key V2 macropad using the QMK build environment. It compiles the necessary source code and generates a firmware image that can be flashed onto the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/drop/thekey/v2/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake drop/thekey/v2:default\n```\n\n----------------------------------------\n\nTITLE: Building QMK Firmware for CannonKeys Meetup Pad 2023\nDESCRIPTION: This command builds the QMK firmware for the CannonKeys Meetup Pad 2023 keyboard with the default keymap.  It requires a properly configured QMK build environment. The output is a .hex or .bin file suitable for flashing to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cannonkeys/meetuppad2023/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake cannonkeys/meetuppad2023:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Keyboard Firmware (QMK)\nDESCRIPTION: This command builds and flashes the QMK firmware to the Parallel 65% keyboard with a soldered layout using the default keymap. It relies on a working QMK build environment and a connected keyboard in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/parallel/parallel_65/soldered/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake parallel/parallel_65/soldered:default:flash\n```\n\n----------------------------------------\n\nTITLE: Compiling Apollo80 Firmware with Make\nDESCRIPTION: This command compiles the QMK firmware for the Apollo80 keyboard using the `make` command. This command creates a firmware file ready to be flashed to the keyboard. Make requires the QMK build environment to be set up beforehand.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/gray_studio/apollo80/readme.md#_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nmake gray_studio/apollo80:default\n```\n\n----------------------------------------\n\nTITLE: Building Piantor Pro Firmware with Make\nDESCRIPTION: This command builds the default firmware for the Piantor Pro keyboard using the QMK build environment. It compiles the keymap and firmware, preparing it for flashing to the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/beekeeb/piantor_pro/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake beekeeb/piantor_pro:default\n```\n\n----------------------------------------\n\nTITLE: Building Morizon Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the Morizon keyboard. It uses the QMK build environment to compile the keyboard's keymap and other configurations into a firmware image that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/morizon/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake morizon:default\n```\n\n----------------------------------------\n\nTITLE: Flashing YMDK YMD62 Firmware\nDESCRIPTION: This command builds and flashes the default firmware to the YMDK YMD62 keyboard.  It depends on the QMK build environment and the `dfu-util` or similar flashing tool being installed.  The command combines the build and flash steps for convenience.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ymdk/ymd62/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake ymdk/ymd62:default:flash\n```\n\n----------------------------------------\n\nTITLE: Setting Color for All LEDs in C\nDESCRIPTION: The `apa102_set_color_all` function sets the same color for all LEDs in the chain. It takes RGB values as input. This function does not immediately update the LEDs; `apa102_flush()` must be called to apply the changes.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/apa102.md#_snippet_3\n\nLANGUAGE: C\nCODE:\n```\nvoid apa102_set_color_all(uint8_t red, uint8_t green, uint8_t blue)\n```\n\n----------------------------------------\n\nTITLE: Flashing VoidHHKB-Hotswap Firmware (Makefile)\nDESCRIPTION: This command compiles and flashes the default keymap for the VoidHHKB-Hotswap keyboard using the QMK build environment. It requires a properly configured QMK build environment and a connected keyboard in flashing mode. The output will be the firmware flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/void/voidhhkb_hotswap/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake void/voidhhkb_hotswap:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Quefrency Rev. 5 Firmware\nDESCRIPTION: This command flashes the default firmware onto the Quefrency Rev. 5 keyboard. It builds the firmware (if necessary) and then uses the appropriate flashing tool to upload it to the keyboard's microcontroller. This requires a configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keebio/quefrency/rev5/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake keebio/quefrency/rev5:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building QMK Firmware for HID Liberation Device using Make\nDESCRIPTION: This command builds the default keymap for the HID Liberation Device using the QMK firmware build environment. It assumes the build environment is already set up. It creates a firmware file that can be flashed to the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/bpiphany/hid_liber/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake bpiphany/hid_liber:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Keyboard Firmware with Make\nDESCRIPTION: This command flashes the built firmware onto the dnworks TKL87 keyboard using the `make` command with the `:flash` target. It requires a properly configured QMK build environment and the necessary tools for flashing (e.g., dfu-util).\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/dnworks/tkl87/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake dnworks/tkl87:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing BLANK.01 keyboard firmware - Makefile\nDESCRIPTION: This command flashes the default firmware onto the BLANK.01 keyboard using the QMK build system. It assumes the QMK build environment is set up and the keyboard is connected in a flashable state. This command depends on the `make blank/blank01:default` command and a compatible flashing tool.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/blank/blank01/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake blank/blank01:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Polyandry Firmware with Teensy 2.0 Controller\nDESCRIPTION: This command builds the default firmware for the Polyandry keyboard specifically for the PJRC Teensy 2.0 controller, using the make command. A correctly configured QMK Firmware build environment is required. The targeted controller is clearly specified.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/40percentclub/polyandry/readme.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nmake 40percentclub/polyandry/teensy2:default\n```\n\n----------------------------------------\n\nTITLE: Split Keyboard Bootmagic Right Hand Key (C)\nDESCRIPTION: This snippet shows how to define the row and column of the Bootmagic key for the right half of a split keyboard.  This is necessary when handedness is predetermined. The snippet demonstrates setting the row and column in the `config.h` file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/bootmagic.md#_snippet_2\n\nLANGUAGE: c\nCODE:\n```\n#define BOOTMAGIC_ROW_RIGHT 4\n#define BOOTMAGIC_COLUMN_RIGHT 4\n```\n\n----------------------------------------\n\nTITLE: Building Keyboardio Atreus Firmware using Make\nDESCRIPTION: This command builds the default firmware for the Keyboardio Atreus keyboard using the QMK make system. It assumes that the QMK build environment has been properly set up. The command should be executed from the root of the QMK firmware repository.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keyboardio/atreus/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake keyboardio/atreus:default\n```\n\n----------------------------------------\n\nTITLE: Flashing QMK Firmware to Swagkeys Integral\nDESCRIPTION: This command builds and flashes the QMK Firmware to the Swagkeys Integral keyboard with the default keymap. It requires a properly configured QMK build environment and a connected keyboard in bootloader mode. The command attempts to automatically flash the generated firmware to the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/swagkeys/integral/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake swagkeys/integral:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Zoom75 Firmware with QMK\nDESCRIPTION: This command flashes the QMK firmware onto the Zoom75 keyboard using the default keymap. It depends on the QMK build environment being set up and the appropriate flashing tools being installed. The command typically uses dfu-programmer or similar utilities to write the compiled firmware to the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/meletrix/zoom75/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake meletrix/zoom75:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building DOIO KB19 QMK Firmware\nDESCRIPTION: This command builds the default keymap for the DOIO KB19 using the QMK build environment. It assumes the QMK build environment has been set up correctly.  It produces a .hex or .bin file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/doio/kb19/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake doio/kb19:default\n```\n\n----------------------------------------\n\nTITLE: Defining Audio State Timer - C\nDESCRIPTION: This snippet shows how to define the timer used for overall audio state updates. This is typically done by defining `AUDIO_STATE_TIMER` to a specific GPTD (General Purpose Timer Driver) value, such as GPTD9. This allows customization of the timer used for audio state updates.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/audio.md#_snippet_3\n\nLANGUAGE: c\nCODE:\n```\n#define AUDIO_STATE_TIMER GPTD9\n```\n\n----------------------------------------\n\nTITLE: Flashing GMMK PRO Firmware\nDESCRIPTION: This command builds and flashes the default firmware to the GMMK PRO ANSI keyboard.  It requires a properly configured QMK build environment and a connected keyboard in bootloader mode.  The keyboard must be in bootloader mode for flashing to be successful.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/gmmk/pro/rev1/ansi/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake gmmk/pro/rev1/ansi:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building ChickPad Firmware with Make\nDESCRIPTION: This command builds the default firmware for the ChickPad keyboard. It uses the `make` command with specific arguments to specify the keyboard, keymap, and build target within the QMK Firmware environment. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/era/sirind/chickpad/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake era/sirind/chickpad:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Reclined Keyboard Firmware (QMK)\nDESCRIPTION: This command flashes the compiled firmware to the reclined keyboard.  It extends the build command to include the 'flash' target, which uses a programmer to upload the firmware to the keyboard's microcontroller. This assumes that the build environment is set up correctly and the programmer is connected.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/reclined/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/reclined:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building PLX Keyboard Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the PLX keyboard using the QMK build environment. It requires QMK to be properly set up and configured. The output will be a .hex or .bin file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/plx/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake plx:default\n```\n\n----------------------------------------\n\nTITLE: Making CONSTELLATION REV1 with QMK\nDESCRIPTION: This command builds the default keymap for the CONSTELLATION REV1 keyboard using QMK Firmware. It assumes the QMK build environment is already set up. The output will be a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/aeboards/constellation/rev1/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake aeboards/constellation/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware to Atlantis PS17 (QMK)\nDESCRIPTION: This command builds and flashes the default firmware to the Atlantis PS17 keyboard. It requires a properly configured QMK build environment and a connected keyboard in bootloader mode. The command typically uses dfu-programmer or similar tools.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/atlantis/ps17/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake atlantis/ps17:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building BB65 Firmware with QMK Make\nDESCRIPTION: This command builds the QMK firmware for the BB65 keyboard with the specified target and keymap. It compiles the source code and generates a firmware file that can be flashed to the keyboard. Requires QMK build environment to be set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechwild/bb65/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake mechwild/bb65/f401:default\n```\n\nLANGUAGE: make\nCODE:\n```\nmake mechwild/bb65/f411:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Oreum Keyboard Firmware with Make\nDESCRIPTION: This command flashes the built firmware onto the Oreum keyboard using the QMK make system. It requires a properly configured QMK build environment and assumes the keyboard is in bootloader mode. The flash target may vary depending on the bootloader.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechlovin/zed1800/oreum/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake mechlovin/zed1800/oreum:default:flash\n```\n\n----------------------------------------\n\nTITLE: Compiling Scylla v2 Firmware with VIA Keymap (STeMCell)\nDESCRIPTION: This command compiles the Scylla v2 keyboard firmware with the VIA keymap using a STeMCell controller. It utilizes `qmk compile` with the `-kb` flag set to `bastardkb/scylla/v2/stemcell` and the `-km` flag set to `via`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/bastardkb/scylla/readme.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nqmk compile -kb bastardkb/scylla/v2/stemcell -km via\n```\n\n----------------------------------------\n\nTITLE: Compiling Scylla v1 Firmware with VIA Keymap (Elite-C)\nDESCRIPTION: This command compiles the Scylla v1 keyboard firmware with the VIA keymap using an Elite-C controller. It utilizes `qmk compile` with the `-kb` flag set to `bastardkb/scylla/v1/elitec` and the `-km` flag set to `via`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/bastardkb/scylla/readme.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nqmk compile -kb bastardkb/scylla/v1/elitec -km via\n```\n\n----------------------------------------\n\nTITLE: Building Firmware with Make\nDESCRIPTION: This command compiles the QMK firmware for the `primekb/meridian_rgb` keyboard with the `default` keymap.  It assumes the QMK build environment is already set up.  No specific input is required, the output is the compiled firmware ready for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/primekb/meridian_rgb/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake primekb/meridian_rgb:default\n```\n\n----------------------------------------\n\nTITLE: Building default firmware for S60-x keyboard\nDESCRIPTION: This command builds the default firmware for the non-RGB version of the S60-x keyboard using the QMK build environment. It assumes that the build environment has been set up correctly. This produces a firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/sentraq/s60_x/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake sentraq/s60_x/default:default\n```\n\n----------------------------------------\n\nTITLE: Building EVO70 R2 Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the EVO70 R2 keyboard using the QMK build environment. It compiles the keyboard layout and firmware code into a flashable binary. The `custommk/evo70_r2:default` argument specifies the keyboard and keymap to be built.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/custommk/evo70_r2/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake custommk/evo70_r2:default\n```\n\n----------------------------------------\n\nTITLE: Building Prime_M with Default Keymap - Makefile\nDESCRIPTION: This command compiles the QMK firmware for the Prime_M keyboard using the default keymap. It assumes that the QMK build environment has been properly set up. The resulting firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/primekb/prime_m/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake primekb/prime_m:default\n```\n\n----------------------------------------\n\nTITLE: Building CU75 Firmware (QMK)\nDESCRIPTION: This command builds the default keymap for the CU75 keyboard within the QMK Firmware environment. It assumes that the QMK build environment has been properly set up. The resulting firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/capsunlocked/cu75/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake capsunlocked/cu75:default\n```\n\n----------------------------------------\n\nTITLE: Building 3W6HS Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the 3W6HS keyboard using the QMK build environment.  It compiles the keymap and other configurations into a firmware image ready to be flashed onto the keyboard.  The command requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/beekeeb/3w6hs/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake beekeeb/3w6hs:default\n```\n\n----------------------------------------\n\nTITLE: Building Sunsetter Keyboard Firmware with QMK\nDESCRIPTION: This command is used to compile the default keymap for the Sunsetter keyboard within the QMK Firmware environment.  It requires a correctly set up build environment as described in the QMK documentation. The compiled firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/charue/sunsetter/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake charue/sunsetter:default\n```\n\n----------------------------------------\n\nTITLE: Complex Docstring Example - Python\nDESCRIPTION: Illustrates a complex docstring example adhering to the QMK's Python docstring conventions. It shows the use of triple-dquote docstrings with a short description on the first line and a more detailed explanation afterwards.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/coding_conventions_python.md#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\ndef my_awesome_function():\n    \"\"\"Return the number of seconds since 1970 Jan 1 00:00 UTC.\n\n    This function always returns an integer number of seconds.\n    \"\"\"\n    return int(time.time())\n```\n\n----------------------------------------\n\nTITLE: Flashing QMK Firmware to RAMA WORKS M50-A\nDESCRIPTION: This command builds and flashes the QMK firmware for the RAMA WORKS M50-A keyboard with the default keymap.  It requires a properly configured QMK build environment and a connected keyboard in bootloader mode. The output is the flashed firmware on the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wilba_tech/rama_works_m50_a/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake wilba_tech/rama_works_m50_a:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building G-IDB60 Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the G-IDB60 keyboard using the QMK build environment. It assumes that the QMK build environment has already been set up according to the QMK documentation. The resulting firmware can then be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/checkerboards/g_idb60/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake checkerboards/g_idb60:default\n```\n\n----------------------------------------\n\nTITLE: Compiling Scylla v2 Firmware with Default Keymap (Elite-C)\nDESCRIPTION: This command compiles the Scylla v2 keyboard firmware with the default keymap using an Elite-C controller. It utilizes `qmk compile` with the `-kb` flag set to `bastardkb/scylla/v2/elitec` and the `-km` flag set to `default`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/bastardkb/scylla/readme.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nqmk compile -kb bastardkb/scylla/v2/elitec -km default\n```\n\n----------------------------------------\n\nTITLE: Building REVIUNG34 firmware using make\nDESCRIPTION: This command builds the default keymap for the REVIUNG34 keyboard using the QMK build environment.  It assumes the QMK build environment is properly set up.  The output is a firmware file that can be flashed onto the ProMicro controller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/reviung/reviung34/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake reviung34:default\n```\n\n----------------------------------------\n\nTITLE: Defining Keyboard Layout: LAYOUT_60_ansi_wkl\nDESCRIPTION: This snippet defines the keyboard layout as LAYOUT_60_ansi_wkl. This is likely used within a keyboard firmware configuration to specify a 60% ANSI keyboard layout without Windows keys (Winkeyless). It is a symbolic representation of a specific arrangement of keys.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/layouts/default/60_ansi_wkl/readme.md#_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\nLAYOUT_60_ansi_wkl\n```\n\n----------------------------------------\n\nTITLE: Building Elrgo S Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the Elrgo S keyboard within the QMK Firmware environment. It requires a properly configured build environment, as detailed in the QMK documentation. The output is a .hex file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/elrgo_s/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake handwired/elrgo_s:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Fave60 Firmware (QMK)\nDESCRIPTION: This command builds and flashes the default keymap for the Linworks Fave60 keyboard. It requires a properly configured QMK build environment and a connected keyboard in bootloader mode. The command attempts to automatically flash the compiled firmware to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/linworks/fave60/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake linworks/fave60:default:flash\n```\n\n----------------------------------------\n\nTITLE: Including C files in C++ tests\nDESCRIPTION: When including C files within C++ unit tests in QMK, it's necessary to wrap the include statement with `extern \"C\"` to ensure proper linking and avoid name mangling issues.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/unit_testing.md#_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nextern \"C\" { \n  // Include your C header files here\n  #include \"your_c_file.h\"\n}\n```\n\n----------------------------------------\n\nTITLE: Building RAMA WORKS M6-A Keyboard Firmware (Makefile)\nDESCRIPTION: This command builds the default firmware for the RAMA WORKS M6-A keyboard using the QMK build environment. It requires a properly configured QMK build environment. The output will be a compiled firmware file suitable for flashing onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wilba_tech/rama_works_m6_a/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake wilba_tech/rama_works_m6_a:default\n```\n\n----------------------------------------\n\nTITLE: Building SpaccBoard Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the Gvalchca x Jugizafupe SpaccBoard using the QMK build environment.  It requires the QMK build environment to be set up. After the build is complete, the resulting firmware can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/gvalchca/spaccboard/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake gvalchca/spaccboard:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Left Side Firmware\nDESCRIPTION: This command flashes the QMK firmware to the left side of the Split_5x7 keyboard using the avrdude-split-left target. This command assumes that the QMK build environment and avrdude are correctly configured. The left side must be connected to the computer.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/stef9998/split_5x7/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake handwired/stef9998/split_5x7/rev1:default:avrdude-split-left\n```\n\n----------------------------------------\n\nTITLE: Flashing Bastion65 Firmware with QMK\nDESCRIPTION: This command flashes the compiled QMK firmware to the Bastion65 keyboard using the default keymap. It depends on having the QMK build environment set up and the keyboard in a flashable state. The command assumes the default flashing method for the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cannonkeys/bastion65/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake cannonkeys/bastion65:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building the half_n_half Keyboard Firmware with QMK\nDESCRIPTION: This snippet shows the command to build the default firmware for the half_n_half keyboard using the QMK build environment. It assumes that the QMK build environment has already been set up. The command compiles the keyboard layout and generates the firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/40percentclub/half_n_half/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake 40percentclub/half_n_half:default\n```\n\n----------------------------------------\n\nTITLE: Compiling Scylla v1 Firmware with Default Keymap (Elite-C)\nDESCRIPTION: This command compiles the Scylla v1 keyboard firmware with the default keymap using an Elite-C controller. It utilizes `qmk compile` with the `-kb` flag set to `bastardkb/scylla/v1/elitec` and the `-km` flag set to `default`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/bastardkb/scylla/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nqmk compile -kb bastardkb/scylla/v1/elitec -km default\n```\n\n----------------------------------------\n\nTITLE: Flashing Frosty Flake Firmware (87-key TKL) via DFU\nDESCRIPTION: This command compiles and flashes the Frosty Flake firmware with the TKL (87-key) layout using the DFU bootloader. It requires a properly configured QMK build environment and a DFU-compatible bootloader on the controller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/bpiphany/frosty_flake/readme.md#_snippet_2\n\nLANGUAGE: make\nCODE:\n```\nmake bpiphany/frosty_flake:tkl:dfu\n```\n\n----------------------------------------\n\nTITLE: Building Latin64ble Firmware (QMK)\nDESCRIPTION: This command builds the default keymap for the latincompass/latin64ble keyboard using the QMK firmware. It assumes that the QMK build environment is already set up correctly.  The output will be a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/latincompass/latin64ble/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake latincompass/latin64ble:default\n```\n\n----------------------------------------\n\nTITLE: Setting Split USB Detection Poll Frequency - C\nDESCRIPTION: This code snippet sets the polling frequency (in milliseconds) for detecting master/slave when using `SPLIT_USB_DETECT`. Lower values increase responsiveness but may consume more resources.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/split_keyboard.md#_snippet_41\n\nLANGUAGE: c\nCODE:\n```\n#define SPLIT_USB_TIMEOUT_POLL 10\n```\n\n----------------------------------------\n\nTITLE: Converting KLE to JSON (QMK)\nDESCRIPTION: This command converts raw KLE data to QMK Configurator JSON. It takes a file path as input and writes the output to `info.json`. The `-f` or `--force` flag overwrites existing `info.json` files.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/cli_commands.md#_snippet_45\n\nLANGUAGE: qmk\nCODE:\n```\nqmk kle2json [-f] <filename>\n```\n\n----------------------------------------\n\nTITLE: Compiling Skeletyl Firmware with v2 (Splinky v2) and default keymap\nDESCRIPTION: This command compiles the QMK firmware for the Skeletyl keyboard with v2 shield (Splinky v2) and default keymap. It uses the `qmk compile` command with specific parameters for the keyboard, version, and keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/bastardkb/skeletyl/readme.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nqmk compile -kb bastardkb/skeletyl/v2/splinky_2 -km default\n```\n\n----------------------------------------\n\nTITLE: Compiling Scylla v2 Firmware with VIA Keymap (Elite-C)\nDESCRIPTION: This command compiles the Scylla v2 keyboard firmware with the VIA keymap using an Elite-C controller. It utilizes `qmk compile` with the `-kb` flag set to `bastardkb/scylla/v2/elitec` and the `-km` flag set to `via`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/bastardkb/scylla/readme.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nqmk compile -kb bastardkb/scylla/v2/elitec -km via\n```\n\n----------------------------------------\n\nTITLE: Building Ferris 0.1 with QMK\nDESCRIPTION: This command builds the default keymap for the Ferris 0.1 keyboard using the QMK firmware build environment.  It requires the QMK build environment to be set up correctly. The output will be a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ferris/0_1/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake ferris/0_1:default\n```\n\n----------------------------------------\n\nTITLE: Building HS60 ISO Firmware with QMK\nDESCRIPTION: This command compiles the QMK firmware for the HS60 keyboard with an ISO layout. It utilizes the 'make' command within the QMK build environment, targeting the 'hs60/v1/iso' configuration with the 'default' keymap. The resulting firmware is specifically tailored for the HS60 ISO variant.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/hs60/v1/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake hs60/v1/iso:default\n```\n\n----------------------------------------\n\nTITLE: Compiling Keyboard Firmware (QMK)\nDESCRIPTION: This command compiles the QMK firmware for the ctrl-M keyboard with the default keymap. It uses the `make` command with specific arguments to target the keyboard and keymap. Ensure the QMK build environment is properly set up before running this command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ibm/model_m/ctrl_m/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake ibm/model_m/ctrl_m:default\n```\n\n----------------------------------------\n\nTITLE: Building rev41lp Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the rev41lp keyboard using the QMK build environment. It assumes that the build environment has already been set up according to the QMK documentation. The resulting firmware can then be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/b_sides/rev41lp/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake b_sides/rev41lp:default\n```\n\n----------------------------------------\n\nTITLE: Building Keyboard Firmware - make command\nDESCRIPTION: This command is used to build the firmware for the mechlovin/olly/jf/rev2 keyboard with the default keymap. It compiles the source code and creates a firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechlovin/olly/jf/rev2/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake mechlovin/olly/jf/rev2:default\n```\n\n----------------------------------------\n\nTITLE: Building the NQG Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the NQG keyboard using the QMK build environment.  It assumes that the QMK build environment has already been set up according to the QMK documentation. The compiled firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/emptystring/nqg/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake emptystring/nqg:default\n```\n\n----------------------------------------\n\nTITLE: Flashing MNK75 Firmware via CLI\nDESCRIPTION: This command flashes the specified keymap to the MNK75 keyboard using the QMK command-line interface. It requires the QMK build environment and QMK Toolbox or CLI to be installed.  The <keymap> placeholder should be replaced with the desired keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/monokei/mnk75/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake monokei/mnk75:<keymap>:flash\n```\n\n----------------------------------------\n\nTITLE: Compiling Magnus M75S Default Keymap\nDESCRIPTION: This command compiles the default keymap for the Smith and Rune Magnus keyboard with the M75S PCB. It uses the `make` command with the specified target: `smithrune/magnus/m75s:default`. This assumes a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/smithrune/magnus/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake smithrune/magnus/m75s:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware\nDESCRIPTION: This command builds and flashes the default firmware for the BM68HSRGB keyboard (revision 2). It depends on a configured QMK build environment and a connected keyboard in bootloader mode. It assumes the necessary flashing tools are installed and configured.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kprepublic/bm68hsrgb/rev2/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake kprepublic/bm68hsrgb/rev2:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building QMK Firmware\nDESCRIPTION: This command builds the default firmware for the itstleo/itstleo40 keyboard using the QMK build environment.  It compiles the source code and creates a firmware file that can be flashed to the keyboard.  Requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/itstleo/itstleo40/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake itstleo/itstleo40:default\n```\n\n----------------------------------------\n\nTITLE: Flashing KM113 Default Firmware\nDESCRIPTION: This command compiles and flashes the default firmware for the KM113 keyboard. It requires a properly configured QMK build environment and a connected KM113 keyboard in bootloader mode.  This command assumes the `dfu-util` or similar flashing tool is installed and configured correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/jidohun/km113/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake jidohun/km113:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building M63 RGB Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the M63 RGB keyboard using the QMK build environment.  It compiles the source code for the specified keyboard and layout. Ensure that the QMK build environment is properly set up before running this command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mss_studio/m63_rgb/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake mss_studio/m63_rgb:default\n```\n\n----------------------------------------\n\nTITLE: Defining QMK Keyboard Layout\nDESCRIPTION: This snippet defines a keyboard layout within the QMK firmware. It specifies the arrangement of keys, likely for a tenkeyless keyboard variant that adheres to the ANSI standard and lacks a dedicated function row. The actual layout definition would follow the identifier.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/layouts/community/tkl_nofrow_ansi/readme.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nLAYOUT_tkl_nofrow_ansi\n```\n\n----------------------------------------\n\nTITLE: Building P18 Firmware with QMK\nDESCRIPTION: This command builds the firmware for the Pabile P18 keyboard with the default keymap using the QMK build environment.  It assumes that the QMK build environment is already set up. The resulting firmware can then be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/pabile/p18/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake pabile/p18:default\n```\n\n----------------------------------------\n\nTITLE: Building Kabe Don 980 Firmware (QMK)\nDESCRIPTION: This command builds the default keymap for the Kabe Don 980 keyboard using the QMK Firmware.  It requires a properly set up QMK build environment. It produces a firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kabedon/kabedon980/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake kabedon/kabedon980:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Voice65 Firmware - QMK\nDESCRIPTION: This command builds and flashes the default firmware for the Voice65 soldered PCB using the QMK build environment. It requires the QMK build environment and appropriate flashing tools to be installed. It programs the generated firmware onto the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/owlab/voice65/soldered/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake owlab/voice65/soldered:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Mint60 Default Keymap with QMK\nDESCRIPTION: This command builds the default keymap for the Mint60 keyboard using the QMK firmware build environment. It assumes that the QMK build environment has already been set up. The resulting firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mint60/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake mint60:default\n```\n\n----------------------------------------\n\nTITLE: Flashing QMK Firmware\nDESCRIPTION: This command builds and flashes the QMK firmware to the Skyloong QK21 V1 keyboard with the default keymap.  It requires the QMK build environment and appropriate drivers for the keyboard's bootloader. This command uploads the compiled firmware to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/skyloong/qk21/v1/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake skyloong/qk21/v1:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Ratio65 Firmware - Make Command\nDESCRIPTION: This command compiles the default firmware for the Ratio65 solder version, revision A. It assumes that the QMK build environment has been properly set up. The compiled firmware can then be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/rationalist/ratio65_solder/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake rationalist/ratio65_solder/rev_a:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Hub16 Firmware with QMK\nDESCRIPTION: This command flashes the default firmware to the Hub16 keyboard. It requires the QMK build environment to be set up and the keyboard to be in a state where it can accept a firmware flash. It assumes the keyboard is connected and the necessary drivers are installed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/joshajohnson/hub16/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake joshajohnson/hub16:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building CX60 Keyboard Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the CX60 keyboard using the QMK build environment. It assumes that the QMK build environment has already been set up. It outputs a firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cx60/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake cx60:default\n```\n\n----------------------------------------\n\nTITLE: Defining Split Hand Pin\nDESCRIPTION: For using a high/low pin to determine handedness, low = right hand, high = left hand. Replace `B7` with the pin being used. Optional; leave undefined to use EE_HANDS or MASTER_LEFT/MASTER_RIGHT.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/config_options.md#_snippet_87\n\nLANGUAGE: C\nCODE:\n```\n#define SPLIT_HAND_PIN B7\n```\n\n----------------------------------------\n\nTITLE: Building WT45-H1 Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the wilba_tech WT45-H1 keyboard using the QMK build environment.  It assumes that the QMK build environment is already set up. No specific dependencies are listed beyond the QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wilba_tech/wt45_h1/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake wilba_tech/wt45_h1:default\n```\n\n----------------------------------------\n\nTITLE: Compiling Ploopyco Madromys Firmware (QMK)\nDESCRIPTION: This command compiles the QMK firmware for the Ploopyco Madromys trackball with the default keymap. It assumes that the QMK build environment is already set up. The compiled firmware can then be flashed onto the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ploopyco/madromys/readme.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nqmk compile -kb ploopyco/madromys -km default\n```\n\n----------------------------------------\n\nTITLE: Building the NortonTechPad Firmware\nDESCRIPTION: This command builds the QMK firmware for the NortonTechPad keyboard with the default keymap. It uses the `make` command with the target specified as `handwired/nortontechpad:default`. This assumes that the QMK build environment has been set up correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/nortontechpad/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake handwired/nortontechpad:default\n```\n\n----------------------------------------\n\nTITLE: Building Fox Lab Leaf60 Firmware\nDESCRIPTION: This command builds the default keymap for the Fox Lab Leaf60 keyboard using the QMK firmware. It assumes the QMK build environment is already set up. The output is the compiled firmware that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/foxlab/leaf60/universal/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake foxlab/leaf60/universal:default\n```\n\n----------------------------------------\n\nTITLE: Building Duet Firmware\nDESCRIPTION: Builds the default firmware for the ai03/duet keyboard. This command compiles the keyboard's keymap and firmware using the QMK build environment. The `make` command is a standard utility used for building software projects from a Makefile.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ai03/duet/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake ai03/duet:default\n```\n\n----------------------------------------\n\nTITLE: Compiling Firmware with PMW Sensor (QMK)\nDESCRIPTION: This command compiles the QMK firmware for the Oddball v2 keyboard specifically configured to use the PMW3360 sensor. This build targets the PMW3360 sensor and generates a .hex file. A correctly configured QMK build environment is a prerequisite.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/oddball/v2/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake oddball/v2:pmw3360\n```\n\n----------------------------------------\n\nTITLE: Flashing Sebelas Keyboard Firmware with QMK\nDESCRIPTION: This command builds and flashes the default keymap to the Sebelas keyboard using the QMK firmware. Requires a correctly setup QMK build environment and a connected keyboard in a flashable state.  This command combines the build and flash steps.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/jaykeeb/sebelas/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake jaykeeb/sebelas:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Jerkin Keyboard Firmware (QMK)\nDESCRIPTION: This command is used to build the default firmware for the Jerkin keyboard using the QMK firmware build environment. It assumes that the QMK build environment has already been set up. This compiles the firmware for the 'wsk/jerkin' keyboard with the 'default' keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wsk/jerkin/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake wsk/jerkin:default\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for duckboard/duckboard:default in QMK\nDESCRIPTION: This command builds the QMK firmware for the duckboard/duckboard keyboard with the 'default' keymap. It requires a properly configured QMK build environment, as detailed in the QMK documentation. The output is a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/doodboard/duckboard/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake doodboard/duckboard:default\n```\n\n----------------------------------------\n\nTITLE: Flashing QMK Firmware manually with dfu-util\nDESCRIPTION: This command flashes the QMK firmware manually, making sure to specify the offset to avoid overwriting the bootloader.  The command uses dfu-util and requires the keyboard to be in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/xiaomi/mk02/readme.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n-d 0483:df11 -a 0 -s 0x08002000:leave\n```\n\n----------------------------------------\n\nTITLE: Flashing BM40hsrgb Firmware (QMK)\nDESCRIPTION: This command builds and flashes the default firmware for the BM40hsrgb keyboard (revision 1) using the QMK Firmware environment. It utilizes the `make` command with the `:flash` target to compile the firmware and then upload it to the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kprepublic/bm40hsrgb/rev1/readme.md#_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nmake kprepublic/bm40hsrgb/rev1:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Ghoul Firmware (STM32)\nDESCRIPTION: This command builds the default firmware for the Ghoul keyboard using the STM32 MicroMod. It uses the `make` command with the specified target for the tzarc/ghoul/rev1 board with the stm32 MCU. The output is the firmware file ready for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/tzarc/ghoul/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake tzarc/ghoul/rev1/stm32:default\n```\n\n----------------------------------------\n\nTITLE: Building the default keymap for the SUV keyboard\nDESCRIPTION: This command builds the default keymap for the clawsome/suv keyboard using the QMK build environment.  It assumes that the QMK build environment has already been set up.  The compiled firmware can then be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/clawsome/suv/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake clawsome/suv:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Jay60 Keyboard Firmware (Make)\nDESCRIPTION: This command flashes the default firmware onto the Jay60 keyboard. It uses the `make` command with the `flash` target in the QMK Firmware environment for the `mechlovin/jay60` keyboard with the `default` keymap. A connected and bootloader-ready Jay60 keyboard is required.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechlovin/jay60/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake mechlovin/jay60:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building 412-64 Keyboard Firmware\nDESCRIPTION: This command builds the firmware for the handwired 412-64 keyboard with the default keymap using the QMK build environment. It assumes that the QMK build environment is set up correctly. The output is a firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/412_64/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/412_64:default\n```\n\n----------------------------------------\n\nTITLE: Compiling QMK Firmware for CHERISH-75 with VIA Keymap\nDESCRIPTION: This command compiles the QMK firmware for the CHERISH-75 keyboard using the VIA keymap.  It depends on the QMK MSYS environment and VIA support to be enabled in the keyboard's configuration. The firmware is then ready to be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/soda/cherish/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nqmk compile -kb soda/cherish -km via\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for Fujitsu T111 Keyboard\nDESCRIPTION: This command builds the QMK firmware for the Fujitsu N860-2500-T111 keyboard with the default keymap. It assumes that the QMK build environment is set up correctly. The command produces a .hex or .bin file that can be flashed to the microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/t111/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/t111:default\n```\n\n----------------------------------------\n\nTITLE: Building 9key default keymap\nDESCRIPTION: This command builds the default keymap for the 9key keyboard using the QMK build environment. It assumes that the QMK build environment has been set up correctly. The command compiles the keymap and generates the firmware that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/9key/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake 9key:default\n```\n\n----------------------------------------\n\nTITLE: Flashing SKErgo Keyboard Firmware\nDESCRIPTION: This command flashes the compiled firmware to the SKErgo keyboard. It uses the `make` command with the keyboard name, keymap, and `flash` target as arguments.  This assumes the QMK build environment is set up and the appropriate flashing tools are installed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/skergo/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake skergo:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware to Freebird 75 with VIA Keymap\nDESCRIPTION: This command flashes the QMK firmware to the Freebird 75 keyboard using the VIA keymap. It assumes that the keyboard is connected and in a flashable state (e.g., bootloader mode). A properly configured QMK build environment is required.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keebsforall/freebird75/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nqmk flash -kb keebsforall/freebird75 -km via\n```\n\n----------------------------------------\n\nTITLE: Building Plaque80 Firmware with Make\nDESCRIPTION: This command builds the default firmware for the Plaque80 keyboard using the `make` command. It requires the QMK build environment to be properly set up. The `sawnsprojects/plaque80` specifies the keyboard and `default` selects the default keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/sawnsprojects/plaque80/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake sawnsprojects/plaque80:default\n```\n\n----------------------------------------\n\nTITLE: Create New Keyboard (qmk new-keyboard)\nDESCRIPTION: This command creates a new keyboard based on available templates. It prompts for missing arguments unless provided via flags. Requires specifying a username `-u USERNAME`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/cli_commands.md#_snippet_27\n\nLANGUAGE: text\nCODE:\n```\nqmk new-keyboard [-kb KEYBOARD] [-t {atmega32u4,STM32F303,etc}] [-l {60_ansi,75_iso,etc}] -u USERNAME\n```\n\n----------------------------------------\n\nTITLE: Building Butterstick Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Butter Stick keyboard using the QMK build environment. It requires a properly configured QMK build environment. The output is the compiled firmware for the keyboard, which can then be flashed onto the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/gboards/butterstick/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake gboards/butterstick:default\n```\n\n----------------------------------------\n\nTITLE: Building the WT60-C Keyboard Firmware (QMK)\nDESCRIPTION: This command is used to build the default firmware for the wilba_tech WT60-C keyboard. It requires a properly set up QMK build environment. The output will be a .hex or .bin file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wilba_tech/wt60_c/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake wilba_tech/wt60_c:default\n```\n\n----------------------------------------\n\nTITLE: Building CSTC40 Firmware (Make)\nDESCRIPTION: These make commands are used to compile the QMK firmware for the CSTC40 keyboard.  Specify the target keyboard and keymap. Different commands are used for the daughterboard and single_pcb versions. Requires a QMK build environment to be set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kprepublic/cstc40/readme.md#_snippet_0\n\nLANGUAGE: Make\nCODE:\n```\nfor daughterboard version: make kprepublic/cstc40/daughterboard:default\n```\n\nLANGUAGE: Make\nCODE:\n```\nfor single pcb version: make kprepublic/cstc40/single_pcb:default\n```\n\n----------------------------------------\n\nTITLE: Building GON NerD TKL Firmware\nDESCRIPTION: This command builds the QMK firmware for the GON NerD TKL keyboard with the default keymap.  It requires a properly configured QMK build environment.  The resulting firmware can then be flashed to the keyboard after entering DFU mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/gon/nerdtkl/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake gon/nerdtkl:default\n```\n\n----------------------------------------\n\nTITLE: Building Bantam-44 Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the Bantam-44 keyboard using the QMK build environment. It assumes that the QMK build environment has already been set up.  The resulting firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/bantam44/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake bantam44:default\n```\n\n----------------------------------------\n\nTITLE: Flashing waffling60 Rev. E ANSI Firmware\nDESCRIPTION: This command builds and flashes the default firmware for the waffling60 Rev. E ANSI keyboard.  It requires the QMK build environment to be set up and a flashing tool to be available. The keyboard must be in DFU mode for the flashing to succeed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/4pplet/waffling60/rev_e_ansi/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake 4pplet/waffling60/rev_e_ansi:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing JK60 Firmware with QMK\nDESCRIPTION: This command flashes the default firmware onto the JK60 keyboard using the QMK build environment. It builds the firmware and then attempts to flash it to the connected keyboard. Requires a properly configured QMK environment and a connected JK60 keyboard in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/jaykeeb/jk60/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake jaykeeb/jk60:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing QMK Firmware to Mode Eighty M80H\nDESCRIPTION: This command compiles and flashes the default keymap for the Mode Eighty M80H keyboard. It requires a correctly configured QMK build environment and a connected keyboard. The command first compiles the firmware, then attempts to flash it to the connected keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mode/m80v1/m80h/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake mode/eighty/m80h:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building DC60 Firmware with QMK\nDESCRIPTION: This command builds the default keymap for the alf/dc60 keyboard using the QMK firmware build environment. It requires the QMK build environment to be set up correctly. The output is the compiled firmware ready to be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/alf/dc60/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake alf/dc60:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Aeroboard Firmware with QMK\nDESCRIPTION: This command flashes the default firmware to the Aeroboard keyboard using the QMK build environment. It requires the QMK build environment to be set up correctly and a compatible flashing tool. The keyboard must be in a state where it can accept the flashed firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/eason/aeroboard/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake eason/aeroboard:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building AMJ66 Keyboard Firmware (QMK)\nDESCRIPTION: This command builds the default keymap for the AMJ66 keyboard using the QMK build environment. It assumes the QMK build environment is already set up as described in the QMK documentation. The resulting firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/amjkeyboard/amj66/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake amjkeyboard/amj66:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware via DFU\nDESCRIPTION: This snippet shows how to flash the Nebula68B keyboard firmware using the `make` command with the `flash` target.  `<keymap>` needs to be replaced by the desired keymap. Requires dfu-util to be installed and configured.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/spaceholdings/nebula68b/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake nebula68b:<keymap>:flash\n```\n\n----------------------------------------\n\nTITLE: Building DZ60RGB V2.1 Firmware\nDESCRIPTION: This command builds the default firmware for the DZ60RGB V2.1 keyboard, which uses an ATmega32U4 (AVR) microcontroller.  It requires a correctly configured QMK build environment. The output will be a .bin file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/dztech/dz60rgb/readme.md#_snippet_2\n\nLANGUAGE: Makefile\nCODE:\n```\nmake dztech/dz60rgb/v2_1:default # AVR (ATmega32U4)\n```\n\n----------------------------------------\n\nTITLE: Building Ferris 0.2 High with QMK\nDESCRIPTION: This command builds the default keymap for the Ferris 0.2 - High keyboard using the QMK firmware. It requires a properly configured build environment. The output is a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ferris/0_2/high/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake ferris/0_2/high:default\n```\n\n----------------------------------------\n\nTITLE: Building DecadePad Firmware with QMK\nDESCRIPTION: This snippet shows how to build the default firmware for the DecadePad keyboard using the QMK build environment. It assumes the user has already set up their QMK build environment. The command compiles the firmware and prepares it for flashing to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/reversestudio/decadepad/readme.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmake reversestudio/decadepad:default\n```\n\n----------------------------------------\n\nTITLE: Compiling Firmware for PloopyCo Trackball with QMK-DFU\nDESCRIPTION: This command compiles the firmware for the PloopyCo Trackball with the 'default' keymap for production use. The resulting hex file will be used to flash the microcontroller with the QMK-DFU bootloader using an ISP programmer.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ploopyco/trackball/rev1_004/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake ploopyco/trackball:default:production\n```\n\n----------------------------------------\n\nTITLE: Defining Right-Side Encoder Pins - C\nDESCRIPTION: This code snippet shows how to define encoder pins specifically for the right side of a split keyboard.  This is used when encoders are connected differently on each half.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/split_keyboard.md#_snippet_36\n\nLANGUAGE: c\nCODE:\n```\n#define ENCODER_A_PINS_RIGHT { encoder1a, encoder2a }\n#define ENCODER_B_PINS_RIGHT { encoder1b, encoder2b }\n```\n\n----------------------------------------\n\nTITLE: Building YMDK SP64 default keymap\nDESCRIPTION: This command builds the default keymap for the YMDK SP64 keyboard using the QMK build environment. It assumes that the build environment has already been set up. The command compiles the keyboard's firmware based on the default configuration.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ymdk/sp64/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake ymdk/sp64:default\n```\n\n----------------------------------------\n\nTITLE: Loading bashcompinit - Zsh\nDESCRIPTION: This snippet loads the `bashcompinit` function in Zsh, enabling compatibility with Bash completion scripts. This is necessary for using the QMK tab completion script in Zsh. It should be added to the `~/.zshrc` file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/cli_tab_complete.md#_snippet_1\n\nLANGUAGE: Shell Script\nCODE:\n```\nautoload -Uz bashcompinit && bashcompinit\n```\n\n----------------------------------------\n\nTITLE: Compile Noxary Valhalla Firmware (Default)\nDESCRIPTION: This command compiles the default firmware for the Noxary Valhalla keyboard using the QMK build environment. It generates the firmware file that can be flashed onto the keyboard's PCB. Requires the QMK build environment to be set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/noxary/valhalla/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake noxary/valhalla:default\n```\n\n----------------------------------------\n\nTITLE: Building Dimple Keyboard Firmware\nDESCRIPTION: These commands are used to build the firmware for different Dimple keyboard layouts and revisions.  Each command specifies the keyboard, layout, and keymap to build. The `make` command is a standard command-line utility used for building software projects.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/lazydesigners/dimple/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake lazydesigners/dimple/staggered/rev1:default\n```\n\nLANGUAGE: Makefile\nCODE:\n```\nmake lazydesigners/dimple/staggered/rev2:default\n```\n\nLANGUAGE: Makefile\nCODE:\n```\nmake lazydesigners/dimple/ortho:default\n```\n\n----------------------------------------\n\nTITLE: Compiling QMK Firmware\nDESCRIPTION: This snippet shows how to compile the QMK Firmware for the Helix keyboard with the 'led_test' keymap. It assumes you are in the 'qmk_firmware' directory. The command compiles the firmware, preparing it for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/helix/rev2/keymaps/led_test/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cd qmk_firmware\n$ make helix:led_test\n```\n\n----------------------------------------\n\nTITLE: Building iNETT Studio SQUARE.X universal Firmware\nDESCRIPTION: This command builds the default firmware for the iNETT Studio SQUARE.X universal keyboard using the QMK build environment.  It requires the QMK build environment to be set up beforehand. No specific input files are mentioned, it utilizes default configuration.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/inett_studio/sqx/universal/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake inett_studio/sqx/universal:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Wang V2 Firmware (QMK)\nDESCRIPTION: This command flashes the built firmware onto the Wang V2 keyboard using the QMK build environment.  It extends the `make` command to include the `flash` target.  A configured QMK build environment and a connected keyboard in bootloader mode are required.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ocean/wang_v2/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake ocean/wang_v2:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing SMALLKEYBOARD Firmware (QMK)\nDESCRIPTION: This command flashes the SMALLKEYBOARD firmware with the default keymap.  It builds the firmware if necessary and then uses the configured flashing tool to upload the firmware to the keyboard.  Ensure the keyboard is connected and in a state ready to receive the firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/smallkeyboard/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake smallkeyboard:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Toad Keyboard Firmware - QMK\nDESCRIPTION: This snippet shows how to build the default firmware for the Toad keyboard using the `make` command within the QMK firmware environment. It assumes that the QMK build environment is already set up. Execute this command in the QMK firmware directory to compile the firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/toad/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake toad:default\n```\n\n----------------------------------------\n\nTITLE: Flashing mechlovin9 Firmware with QMK\nDESCRIPTION: This command flashes the compiled QMK firmware to the mechlovin9 keyboard with the rev3 and default configuration. It requires a connected keyboard in a flashable state, as well as a properly set up QMK build environment. The command automatically handles the flashing process.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechlovin/mechlovin9/rev3/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake mechlovin/mechlovin9/rev3:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Dactyl Maximus Firmware\nDESCRIPTION: This command compiles the firmware for the Dactyl Maximus keyboard with the default keymap.  It requires a properly configured QMK build environment. The output is a .hex or .bin file that can be flashed onto the microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/dactyl_maximus/readme.md#_snippet_0\n\nLANGUAGE: makefile\nCODE:\n```\nmake handwired/dactyl_maximus:default\n```\n\n----------------------------------------\n\nTITLE: Building QMK Firmware for Keychron Q65\nDESCRIPTION: This command compiles the default QMK firmware for the Keychron Q65 keyboard with ANSI encoder layout.  It uses the 'make' command with the target specified as 'keychron/q65/ansi_encoder:default'. The output is a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keychron/q65/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake keychron/q65/ansi_encoder:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Keychron Q7 Firmware (QMK)\nDESCRIPTION: This command flashes the built QMK firmware onto the Keychron Q7 keyboard with the ISO layout. It requires a properly configured QMK build environment and a flashing tool. The keyboard needs to be in the correct bootloader mode for flashing to succeed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keychron/q7/readme.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmake keychron/q7/iso:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing MonsGeek M3 Firmware (QMK)\nDESCRIPTION: This command builds and flashes the default firmware for the MonsGeek M3 keyboard. It assumes that the QMK build environment is set up and that the necessary flashing tools are installed. The keyboard must be in bootloader mode for this command to work.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/monsgeek/m3/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake monsgeek/m3:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for Foxlab Leaf60 Hotswap Keyboard\nDESCRIPTION: This command builds the default firmware for the Foxlab Leaf60 hotswap keyboard using the QMK build environment.  It requires QMK to be set up correctly.  The output is a .hex file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/foxlab/leaf60/hotswap/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake foxlab/leaf60/hotswap:default\n```\n\n----------------------------------------\n\nTITLE: Flashing firmware to Uni660 Rev2 ANSI\nDESCRIPTION: This command flashes the compiled firmware to the Sirius Uni660 Rev2 ANSI keyboard. It builds the firmware if necessary and then attempts to flash it. This requires a properly configured QMK build environment and a connected keyboard in flashing mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/sirius/uni660/rev2/ansi/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake sirius/uni660/rev2/ansi:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Ahgase VIA Firmware\nDESCRIPTION: This command compiles and flashes the QMK firmware for the Ahgase keyboard with VIA support to the keyboard. It requires the QMK build environment to be properly set up and the keyboard to be in bootloader mode. The reset button on the PCB is used to enter bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/plywrks/ahgase/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake plywrks/ahgase:via:flash\n```\n\n----------------------------------------\n\nTITLE: Enabling Hat Switch Support\nDESCRIPTION: This snippet shows how to enable hat switch support for the joystick in QMK by defining `JOYSTICK_HAS_HAT` in `config.h`.  Enabling the hat switch allows for 8-way directional input, useful for navigating menus or controlling camera angles in games.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/joystick.md#_snippet_3\n\nLANGUAGE: c\nCODE:\n```\n#define JOYSTICK_HAS_HAT\n```\n\n----------------------------------------\n\nTITLE: Building RS60 Firmware with Make\nDESCRIPTION: This snippet shows how to compile the RS60 keyboard firmware using the `make` command. It specifies the keyboard layout and revision. The command assumes that the QMK build environment is already set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/xelus/rs60/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake xelus/rs60/rev1:default\nmake xelus/rs60/rev2:default\n```\n\n----------------------------------------\n\nTITLE: Building L+M 60N Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the L+M 60N keyboard. It assumes that the QMK build environment is properly set up. The output will be a .hex or .bin file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/lm_keyboard/lm60n/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake lm_keyboard/lm60n:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Eden Keyboard Firmware - Make Flash Command\nDESCRIPTION: This command builds and flashes the default keymap for the Eden keyboard. It requires a properly configured QMK build environment and a connected keyboard in bootloader mode.  It combines the build and flash steps into a single command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/zeix/eden/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake zeix/eden:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for Churrosoft Deck-8 (RGB)\nDESCRIPTION: This command builds the default firmware for the Churrosoft Deck-8 RGB macropad using the QMK build environment.  It compiles the keymap and other configurations into a firmware file ready for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/churrosoft/deck8/rgb/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake churrosoft/deck8/rgb:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware to EnvKB 60F\nDESCRIPTION: This command builds and flashes the default firmware for the EnvKB 60F keyboard to the connected device.  It uses the QMK build environment and assumes the bootloader is ready to receive the firmware. The target device should be in flashing mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/enviousdesign/60f/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake enviousdesign/60f:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building QMK Firmware for Axolstudio Yeti\nDESCRIPTION: This command builds the default QMK firmware for the Axolstudio Yeti Hotswap RGB keyboard. It requires a properly configured QMK build environment. The output will be a .hex or .bin file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/axolstudio/yeti/hotswap/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake axolstudio/yeti/hotswap:default\n```\n\n----------------------------------------\n\nTITLE: Flashing default Pteron36 firmware (make)\nDESCRIPTION: This command compiles and flashes the default firmware for the Pteron36 keyboard.  It assumes a correctly configured QMK build environment and a connected Pteron36 keyboard in flashing mode. Success results in the firmware being written to the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/pteron36/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake pteron36:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building and Flashing SX60 Firmware\nDESCRIPTION: This snippet demonstrates how to compile and flash the default firmware for the SX60 keyboard using the QMK build environment and DFU. It assumes the user has already set up their build environment and has a DFU-compatible bootloader on their keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/sx60/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake sx60:default:dfu\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for Kamigakushi Keyboard (QMK)\nDESCRIPTION: This command builds the firmware for the kamigakushi keyboard with the default keymap. It requires a properly configured QMK build environment.  The output will be a .hex or .bin file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/jaykeeb/kamigakushi/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake jaykeeb/kamigakushi:default\n```\n\n----------------------------------------\n\nTITLE: Compiling Firmware for Lunakey Pico (QMK)\nDESCRIPTION: Compiles the default firmware for the Lunakey Pico keyboard using the QMK build environment. This command uses the `qmk compile` command with the keyboard and keymap specified as arguments.  It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/yoichiro/lunakey_pico/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nqmk compile -kb yoichiro/lunakey_pico -km default\n```\n\n----------------------------------------\n\nTITLE: Flash QMK Firmware using dfu-util\nDESCRIPTION: This snippet shows how to flash the QMK firmware image using `dfu-util`. It downloads the new firmware to the specified address. Requires dfu-util to be installed and the keyboard to be in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/durgod/dgk6x/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndfu-util --alt 0 --dfuse-address 0x08000000 --download ${NEW_QMK_BIN}\n```\n\n----------------------------------------\n\nTITLE: Building Latinpadble keyboard firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Latinpadble keyboard using the QMK build environment. It assumes the QMK build environment has already been set up. The output will be a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/latincompass/latinpadble/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake latincompass/latinpadble:default\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for AT101 BH Keyboard (QMK)\nDESCRIPTION: This command builds the default firmware for the AT101 BH keyboard using the QMK build environment. It assumes that the QMK build environment is already set up. The resulting firmware can then be flashed onto the keyboard's PCB.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/viktus/at101_bh/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake viktus/at101_bh:default\n```\n\n----------------------------------------\n\nTITLE: Building Default Keymap for a65i Keyboard\nDESCRIPTION: This command builds the default keymap for the AnomalyKB a65i keyboard using the QMK build environment. It requires the QMK build environment to be set up. It compiles the firmware and generates a .hex file for flashing onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/anomalykb/a65i/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake anomalykb/a65i:default\n```\n\n----------------------------------------\n\nTITLE: Column Pin Configuration (GH60 Rev C)\nDESCRIPTION: This C-style comment describes the column pin configuration for the GH60 Rev C keyboard. It maps column numbers to specific GPIO pins on the microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/gh60/revc/readme.md#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n/* Column pin configuration\n * col: 0   1   2   3   4   5   6   7   8   9   10  11  12  13\n * pin: F0  F1  E6  C7  C6  B6  D4  B1  B7  B5  B4  D7  D6  B3  (Rev.C)\n */\n```\n\n----------------------------------------\n\nTITLE: Flash Firmware to IDOBAO MONTEX RGB - Make\nDESCRIPTION: This command flashes the default firmware to the IDOBAO MONTEX RGB numpad using the QMK build environment. It requires the QMK build environment to be set up and the device to be in bootloader mode. The target is 'idobao/montex/v1rgb:default:flash'.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/idobao/montex/v1rgb/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake idobao/montex/v1rgb:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building AKIRA Firmware with Make\nDESCRIPTION: This snippet shows how to compile the AKIRA keyboard firmware with the default keymap using the `make` command. It assumes the QMK build environment is already set up.  No specific dependencies beyond a functional QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ekow/akira/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake ekow/akira:default\n```\n\n----------------------------------------\n\nTITLE: Flashing JC65 Firmware (QMK)\nDESCRIPTION: This command flashes the compiled QMK firmware to the JC65/v32a keyboard with the default keymap. It uses the 'make' command with the 'flash' target.  Dependencies include a properly configured QMK build environment and a connected keyboard in flashing mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/jc65/v32a/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake jc65/v32a:default:flash\n```\n\n----------------------------------------\n\nTITLE: Load Image from Memory with `qp_load_image_mem` in C\nDESCRIPTION: The `qp_load_image_mem` function loads a QGF image from memory or flash. It takes a pointer to the image data as input and returns a handle to the loaded image. This handle is used for drawing the image to the screen.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/quantum_painter.md#_snippet_62\n\nLANGUAGE: c\nCODE:\n```\npainter_image_handle_t qp_load_image_mem(const void *buffer);\n```\n\n----------------------------------------\n\nTITLE: Building Blackplum Keyboard Firmware\nDESCRIPTION: This command builds the default keymap for the Blackplum keyboard using the QMK firmware. It assumes that the QMK build environment has been properly set up. The output is a firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/blackplum/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake blackplum:default\n```\n\n----------------------------------------\n\nTITLE: Building Index Tab Firmware with Make\nDESCRIPTION: This command builds the firmware for the Index Tab keyboard using the QMK build environment. It targets the 'default' keymap within the 'minimon/index_tab' keyboard directory. The resulting hex file can be used to flash the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/minimon/index_tab/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake minimon/index_tab:default\n```\n\n----------------------------------------\n\nTITLE: Compiling firmware with custom RGB - Makefile\nDESCRIPTION: This command compiles the firmware for the tetromino keyboard with the custom RGB LED behavior.  It uses the 'make' command with the keyboard and 'indicators' keymap specified, which includes the custom RGB function. Requires QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/an_achronism/tetromino/README.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake tetromino:indicators\n```\n\n----------------------------------------\n\nTITLE: Flashing WT45-H1 Firmware (QMK)\nDESCRIPTION: This command flashes the default firmware for the wilba_tech WT45-H1 keyboard to the device using the QMK build environment. It requires the QMK build environment and necessary flashing tools. Assumes the keyboard is in a state ready for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wilba_tech/wt45_h1/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake wilba_tech/wt45_h1:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware to Uni660 Rev1\nDESCRIPTION: This command builds and flashes the default firmware for the Sirius Uni660 Rev1 keyboard. It requires a correctly configured QMK build environment and a connected keyboard in flashing mode. The command combines the build and flash steps into one.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/sirius/uni660/rev1/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake sirius/uni660/rev1:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Earth Rover Firmware with QMK\nDESCRIPTION: This command builds the default keymap for the Earth Rover keyboard using the QMK build environment. It compiles the firmware, creating a .hex file ready for flashing onto the device. Requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/earth_rover/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake earth_rover:default\n```\n\n----------------------------------------\n\nTITLE: Building Microdox Firmware with Make\nDESCRIPTION: This command uses the `make` command to build the default firmware for the Microdox keyboard.  It targets either the v1 or v2 version based on the PCB revision.  The QMK build environment must be properly configured beforehand.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/boardsource/microdox/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake boardsource/microdox/v1:default\nmake boardsource/microdox/v2:default\n```\n\n----------------------------------------\n\nTITLE: Flashing the Sofle Choc Pro Firmware\nDESCRIPTION: This command flashes the default firmware to the keebart/sofle_choc_pro keyboard. It uses the `make` command with the `:flash` target within the QMK Firmware environment. The keyboard must be connected and the build environment configured.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keebart/sofle_choc_pro/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake keebart/sofle_choc_pro:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building TOFU_II Firmware with QMK\nDESCRIPTION: This command compiles the default firmware for the TOFU_II keyboard using the QMK build environment. It specifies the keyboard, layout (default), and version (v1). The resulting firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/dztech/tofu/ii/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake dztech/tofu/ii/v1:default\n```\n\n----------------------------------------\n\nTITLE: Flashing the Coban Pad 9A Firmware\nDESCRIPTION: This command builds and flashes the default firmware to the Coban Pad 9A keyboard. It requires that the QMK build environment and necessary flashing tools are installed and configured correctly. This command will overwrite the existing firmware on the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/coban/pad9a/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake coban/pad9a:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware for soyuzxl Keyboard (Makefile)\nDESCRIPTION: This command flashes the default firmware onto the soyuzxl keyboard. It requires a properly configured QMK build environment and a connected keyboard in bootloader mode. The flashing process uploads the compiled firmware to the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/wwa/soyuzxl/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/wwa/soyuzxl:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building KeyBee 65 Firmware with Make\nDESCRIPTION: This command builds the default firmware for the KeyBee 65 keyboard using the QMK build environment.  It leverages the 'make' command with the target 'keybee/keybee65:default'. The command assumes that the QMK build environment has been properly configured.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keybee/keybee65/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake keybee/keybee65:default\n```\n\n----------------------------------------\n\nTITLE: Compile QMK Firmware (Shell)\nDESCRIPTION: This command compiles the QMK Firmware for the Sol keyboard with the default keymap. It assumes that the user is in the `qmk_firmware` directory. This generates a `.hex` or `.bin` file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/rgbkb/sol/keymaps/default/readme.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ make rgbkb/sol:default\n```\n\n----------------------------------------\n\nTITLE: Defining OLED Rotation Enum (C)\nDESCRIPTION: This enum defines the possible rotation values for the OLED display. These values are used to orient the rendered output to the correct direction. The enum values are used as flags.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/oled_driver.md#_snippet_10\n\nLANGUAGE: c\nCODE:\n```\n// OLED Rotation enum values are flags\ntypedef enum {\n    OLED_ROTATION_0   = 0,\n    OLED_ROTATION_90  = 1,\n    OLED_ROTATION_180 = 2,\n    OLED_ROTATION_270 = 3, // OLED_ROTATION_90 | OLED_ROTATION_180\n} oled_rotation_t;\n```\n\n----------------------------------------\n\nTITLE: Compiling KBD67 Rev2 Firmware with QMK\nDESCRIPTION: This command compiles the default firmware for the KBD67 Rev2 keyboard using the QMK build system. It requires the QMK build environment to be properly set up. The compiled firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kbdfans/kbd67/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake kbdfans/kbd67/rev2:default\n```\n\n----------------------------------------\n\nTITLE: Flashing M63 RGB Keyboard Firmware\nDESCRIPTION: This command flashes the compiled firmware to the M63 RGB keyboard. It requires that the keyboard is connected to the computer and in a state ready to receive the firmware.  The QMK build environment must be configured correctly for flashing to work.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mss_studio/m63_rgb/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake mss_studio/m63_rgb:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building craftWalk Firmware with QMK\nDESCRIPTION: This command builds the default keymap for the craftWalk keyboard using the QMK build environment. It assumes that the QMK build environment is already set up. The output firmware can then be flashed to the craftWalk Pro Micro.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/craftwalk/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake craftwalk:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Chavdai40 Firmware (rev1)\nDESCRIPTION: This command flashes the default firmware onto the Chavdai40 keyboard, revision 1. It uses the QMK make system with the 'flash' target. Requires a properly configured QMK build environment and appropriate flashing tools.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/chavdai40/readme.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nmake chavdai40/rev1:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building orba Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the orba keyboard using the QMK build system.  It utilizes the 'make' command with the target specified as 'jaykeeb/orba:default'.  Ensure the QMK build environment is properly set up before executing this command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/jaykeeb/orba/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake jaykeeb/orba:default\n```\n\n----------------------------------------\n\nTITLE: Flashing IVY Keyboard Firmware - Makefile\nDESCRIPTION: This command flashes the built firmware to the IVY keyboard (rev1) using the DFU (Device Firmware Upgrade) bootloader.  It assumes the keyboard is in DFU mode and that the necessary DFU tools are installed and configured correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/maple_computing/ivy/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake maple_computing/ivy/rev1:default:dfu\n```\n\n----------------------------------------\n\nTITLE: Building KB16-01 Firmware using Make\nDESCRIPTION: This command builds the default firmware for the KB16-01 macropad using the `make` command. It requires a properly set up QMK build environment. The output is a .hex file that can be flashed to the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/doio/kb16/rev1/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\n`make doio/kb16/rev1:default`\n```\n\n----------------------------------------\n\nTITLE: Enabling Right-hand Rhymestone in config.h\nDESCRIPTION: This snippet shows how to enable the right-hand side usage of the Rhymestone keyboard by uncommenting a specific line in the config.h file. This is necessary if you intend to use the right-hand side of the Rhymestone keyboard instead of the default left-hand side.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/marksard/treadstone48/rev1/keymaps/like_jis_rs/readme_jp.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#define RHYMESTONE_RIGHTHAND\n```\n\n----------------------------------------\n\nTITLE: Build Firmware for DUO-S Keyboard - QMK\nDESCRIPTION: This command builds the default firmware for the dztech/duo_s keyboard using the QMK build environment.  It assumes that the QMK build environment has already been set up. The output will be a firmware file suitable for flashing to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/dztech/duo_s/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake dztech/duo_s:default\n```\n\n----------------------------------------\n\nTITLE: Building Navi10 Firmware\nDESCRIPTION: This command builds the default firmware for the Navi10 macropad. It assumes that the QMK build environment is already set up. The `make` command triggers the compilation process, creating a firmware that can be flashed onto the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keyhive/navi10/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake keyhive/navi10:default\n```\n\n----------------------------------------\n\nTITLE: Building KF87 Firmware with Make\nDESCRIPTION: This snippet provides the command to build the QMK firmware for the KF87 keyboard. It assumes that the QMK build environment is already set up according to the QMK documentation. The target is fjlabs/kf87 with the default keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/fjlabs/kf87/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake fjlabs/kf87:default\n```\n\n----------------------------------------\n\nTITLE: Flashing TOKKI Firmware with Make\nDESCRIPTION: This snippet demonstrates how to flash the built firmware to the TOKKI keyboard using the QMK `make` command with the `:flash` target. It assumes a correctly configured QMK build environment and a connected keyboard in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/jaykeeb/tokki/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake jaykeeb/tokki:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Haven60 Firmware with QMK\nDESCRIPTION: This command builds and flashes the default firmware for the Haven60 keyboard. It depends on the QMK build environment and a connected Haven60 keyboard in bootloader mode. It uses the QMK flash target to upload the compiled firmware to the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ah/haven60/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake ah/haven60:default:flash\n```\n\n----------------------------------------\n\nTITLE: Tapping a Keycode in QMK\nDESCRIPTION: This snippet shows how to tap a keycode, which is equivalent to pressing and immediately releasing the key, using the `tap_code()` function in QMK Firmware. This function calls both `register_code()` and `unregister_code()`. It takes a keycode constant as an argument.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/feature_macros.md#_snippet_12\n\nLANGUAGE: c\nCODE:\n```\ntap_code(<kc>);\n```\n\n----------------------------------------\n\nTITLE: Build Planck EZ glow keymap\nDESCRIPTION: This command builds the \"glow\" keymap, which is specifically intended for keyboards with per-key RGB backlighting. It's a variant of the Planck EZ keymap designed to showcase the RGB capabilities.  Requires QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/zsa/planck_ez/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake zsa/planck_ez/glow:default\n```\n\n----------------------------------------\n\nTITLE: Building dumbpad/v1x with default keymap (QMK)\nDESCRIPTION: This command compiles the QMK firmware for the dumbpad/v1x keyboard using the default keymap. It requires a properly configured QMK build environment. The resulting firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/dumbpad/v1x/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake dumbpad/v1x:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Keyboard Firmware (QMK)\nDESCRIPTION: This command flashes the default firmware onto the BINPAD PIXIE keyboard. It requires a configured QMK build environment and a connected keyboard in a flashable state.  The command uses the `make` utility with the `flash` target.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/binepad/pixie/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake binepad/pixie:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Infinity87 RGB Rev.1 Firmware\nDESCRIPTION: This command builds and flashes the default firmware for the Infinity87 RGB Rev.1 keyboard. It requires a properly set up QMK build environment and a connected keyboard in bootloader mode. The keyboard must be connected and detectable by the flashing tool.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechlovin/infinity87/rgb_rev1/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake mechlovin/infinity87/rgb_rev1:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building JP60 Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the ai03/jp60 keyboard. It requires the QMK build environment to be set up correctly, as described in the QMK documentation.  The output will be a .hex file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ai03/jp60/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake ai03/jp60:default\n```\n\n----------------------------------------\n\nTITLE: Building Keycult Zero Firmware with Make\nDESCRIPTION: This command builds the default firmware for the Keycult Zero keyboard using the `make` command. It requires a properly configured QMK build environment. The output is a firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keycult/keycult_zero/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake keycult/keycult_zero:default\n```\n\n----------------------------------------\n\nTITLE: Building Utopia88 Firmware with Make\nDESCRIPTION: This command builds the default keymap for the Utopia88 keyboard using the QMK build environment. It compiles the firmware for the specified keyboard and keymap, creating a .hex file that can be flashed onto the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kelwin/utopia88/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake kelwin/utopia88:default\n```\n\n----------------------------------------\n\nTITLE: Flashing YDKB Grape Firmware with Make\nDESCRIPTION: This command builds and flashes the default firmware to the YDKB Grape keyboard. It requires a properly configured QMK build environment and a connected keyboard in bootloader mode. It combines the build and flash steps into one.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ydkb/grape/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake ydkb/grape:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware to Churrosoft Deck-8 (RGB)\nDESCRIPTION: This command flashes the compiled firmware to the Churrosoft Deck-8 RGB macropad. It requires the QMK build environment and a configured flashing tool.  The command combines the build and flash steps into a single operation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/churrosoft/deck8/rgb/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake churrosoft/deck8/rgb:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building W1-AT Firmware with QMK (Shell)\nDESCRIPTION: This command builds the default keymap for the geonworks/w1_at keyboard using the QMK build environment. It compiles the firmware and prepares it for flashing. The QMK build environment must be set up prior to running this command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/geonworks/w1_at/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake geonworks/w1_at:default\n```\n\n----------------------------------------\n\nTITLE: Creating a Development Branch Based on an Existing Branch\nDESCRIPTION: This Git command creates a new development branch named 'dev_branch' based on an existing branch (in this case 'master'). This allows starting a new feature or bug fix from a specific point in the project's history.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/newbs_git_using_your_master_branch.md#_snippet_4\n\nLANGUAGE: Git\nCODE:\n```\ngit checkout -b dev_branch master\n```\n\n----------------------------------------\n\nTITLE: Flashing firmware to YMDK ID75 (f103)\nDESCRIPTION: This command builds and flashes the default firmware to the YMDK ID75 keyboard with the f103 PCB using the QMK build environment and a suitable flashing tool. It requires the QMK build environment and the correct flashing tool to be installed and configured.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ymdk/id75/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake ymdk/id75/f103:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Sweeq Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the Sweeq keyboard. It assumes that the QMK build environment has been set up correctly. The command will compile the keyboard layout and generate a firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/idank/sweeq/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake idank/sweeq:default\n```\n\n----------------------------------------\n\nTITLE: Building acr87 Firmware\nDESCRIPTION: This command builds the default firmware for the akko/acr87 keyboard using the QMK build environment. It requires the QMK build environment to be properly set up. The output is a .hex or .bin file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/akko/acr87/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake akko/acr87:default\n```\n\n----------------------------------------\n\nTITLE: Building BastionTKL Firmware with Make\nDESCRIPTION: This command builds the default firmware for the BastionTKL keyboard.  It uses the `make` command with the target specified as `cannonkeys/bastiontkl:default`. This assumes that the QMK build environment has been set up correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cannonkeys/bastiontkl/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake cannonkeys/bastiontkl:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Conone 65 Keyboard Firmware (QMK)\nDESCRIPTION: This command flashes the built firmware onto the Conone 65 keyboard using the QMK build environment. It requires the keyboard to be in bootloader mode before executing the command. The command utilizes the appropriate flashing tools for the ATMega32u4 microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kindakeyboards/conone65/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake kindakeyboards/conone65:default:flash\n```\n\n----------------------------------------\n\nTITLE: Set Brightness of All LEDs - IS31FL3733 (Mono)\nDESCRIPTION: This function sets the brightness of all LEDs connected to an IS31FL3733 single-color driver. It takes a single brightness value as input, applying it to all LEDs. A subsequent call to `is31fl3733_update_pwm_buffers()` is likely needed to update the LEDs.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/is31fl3733.md#_snippet_8\n\nLANGUAGE: C\nCODE:\n```\nvoid is31fl3733_set_value_all(uint8_t value)\n```\n\n----------------------------------------\n\nTITLE: Flashing EEK! Keyboard Firmware (Makefile)\nDESCRIPTION: This command builds and flashes the firmware for the EEK! keyboard using the default configuration. It requires the QMK build environment and a configured flashing tool. The target device needs to be in bootloader mode to receive the firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/eek/readme.md#_snippet_2\n\nLANGUAGE: Makefile\nCODE:\n```\nmake eek:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building ProjectD 65% ANSI Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the ProjectD 65% ANSI keyboard. It utilizes the QMK make system and requires a correctly configured build environment. The resulting firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/projectd/65/projectd_65_ansi/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake projectd/65/projectd_65_ansi:default\n```\n\n----------------------------------------\n\nTITLE: RGBLight Animations Configuration JSON\nDESCRIPTION: This JSON snippet demonstrates how to configure RGBLight animations by enabling or disabling specific effects. Effects not explicitly defined default to `false`. This snippet is used to customize the visual effects of the RGB lighting.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/reference_info_json.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n            \"breathing\": true,\n            \"rainbow_mood\": true,\n            \"snake\": false\n        }\n```\n\n----------------------------------------\n\nTITLE: Flashing Hnah40 Keyboard Firmware with Make\nDESCRIPTION: This command builds and flashes the default firmware for the Hnah40 keyboard using the QMK make system. It depends on a correctly configured QMK build environment and a connected programmer. The target MCU is likely an Atmega328p.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/hnah40/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/hnah40:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Vicious40 Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the CannonKeys Vicious40 keyboard using the QMK build environment.  It assumes the QMK build environment is already set up. The command invokes the `make` utility with the target `cannonkeys/vicious40:default`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cannonkeys/vicious40/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake cannonkeys/vicious40:default\n```\n\n----------------------------------------\n\nTITLE: Compiling Magnus M75H Default Keymap\nDESCRIPTION: This command compiles the default keymap for the Smith and Rune Magnus keyboard with the M75H PCB. It uses the `make` command with the specified target: `smithrune/magnus/m75h:default`. A configured QMK build environment is required.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/smithrune/magnus/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake smithrune/magnus/m75h:default\n```\n\n----------------------------------------\n\nTITLE: Flashing GMMK PRO (ANSI) Firmware\nDESCRIPTION: This command flashes the default keymap onto the GMMK PRO (ANSI) keyboard. It requires the QMK build environment to be set up and the firmware to be built first. This action overwrites the existing firmware on the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/gmmk/pro/rev2/ansi/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake gmmk/pro/rev2/ansi:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Wang Ergo Keyboard Firmware\nDESCRIPTION: This command flashes the compiled firmware onto the Wang Ergo keyboard. It extends the build command by adding `:flash` to the target. This command requires a configured QMK build environment and a connected Wang Ergo keyboard in a state ready to receive a firmware flash.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ocean/wang_ergo/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake ocean/wang_ergo:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building la_nc keyboard firmware with QMK\nDESCRIPTION: This command builds the default firmware for the la_nc keyboard using the QMK build environment. It requires the QMK build environment to be set up correctly and will generate the firmware file that can then be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/subrezon/la_nc/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake subrezon/la_nc:default\n```\n\n----------------------------------------\n\nTITLE: Building MT40 Keyboard Firmware with QMK\nDESCRIPTION: This command builds the default keymap for the MT40 keyboard. It uses the 'make' command with the target specified as 'mt/mt40:default'.  The command compiles the firmware, which can then be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mt/mt40/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake mt/mt40:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Soldered Mino Plus Firmware\nDESCRIPTION: This command builds and flashes the firmware for the Mino Plus keyboard with the soldered layout using the default keymap. It requires a properly configured QMK build environment. The board needs to be in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/shandoncodes/mino_plus/readme.md#_snippet_2\n\nLANGUAGE: Makefile\nCODE:\n```\nmake shandoncodes/mino_plus/soldered:default:flash\n```\n\n----------------------------------------\n\nTITLE: Configuring LED Matrix using led_config_t (C)\nDESCRIPTION: This C code snippet demonstrates the structure used to configure the RGB Matrix. It includes mapping key matrix positions to LED indices, LED indices to physical positions (x, y coordinates), and LED indices to flags that represent LED types. Understanding this configuration is essential for correctly setting up RGB Matrix.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/rgb_matrix.md#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nled_config_t g_led_config = { {\n  // Key Matrix to LED Index\n  {   5, NO_LED, NO_LED,   0 },\n  { NO_LED, NO_LED, NO_LED, NO_LED },\n  {   4, NO_LED, NO_LED,   1 },\n  {   3, NO_LED, NO_LED,   2 }\n}, {\n  // LED Index to Physical Position\n  { 188,  16 }, { 187,  48 }, { 149,  64 }, { 112,  64 }, {  37,  48 }, {  38,  16 }\n}, {\n  // LED Index to Flag\n  1, 4, 4, 4, 4, 1\n} };\n```\n\n----------------------------------------\n\nTITLE: Building babyV Keyboard Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the babyV keyboard using the QMK build environment. It compiles the keymap and necessary files to create a firmware ready to be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/eyeohdesigns/babyv/readme.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmake eyeohdesigns/babyv:default\n```\n\n----------------------------------------\n\nTITLE: Building Lulu Keyboard Firmware (RP2040/AVR) - Makefile\nDESCRIPTION: This command builds the default firmware for the Lulu keyboard using either the RP2040 or AVR microcontroller within the QMK environment. You must first set up your build environment as per the QMK documentation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/boardsource/lulu/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake boardsource/lulu/rp2040:default\n```\n\nLANGUAGE: Makefile\nCODE:\n```\nmake boardsource/lulu/avr:default\n```\n\n----------------------------------------\n\nTITLE: Mapping Single-Color LEDs (C)\nDESCRIPTION: This snippet shows how to map single-color LEDs to the IS31FL3218 outputs in your `<keyboardname>.c` file. Each element in the `g_is31fl3218_leds` array represents an LED, and the `OUTx` macros define the PWM register address for the LED's channel. `IS31FL3218_LED_COUNT` defines the number of LEDs.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/is31fl3218.md#_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nconst is31fl3218_led_t PROGMEM g_is31fl3218_leds[IS31FL3218_LED_COUNT] = {\n/*   V */\n    {OUT1},\n    // etc...\n};\n```\n\n----------------------------------------\n\nTITLE: Building 60XT Keyboard Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the 60XT keyboard. It requires the QMK build environment to be set up.  The output will be a .hex or .bin file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cipulot/60xt/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake cipulot/60xt:default\n```\n\n----------------------------------------\n\nTITLE: Building Atreus Firmware for A-Star Controller\nDESCRIPTION: This command builds the Atreus keyboard firmware specifically for a variant powered by an A-Star microcontroller and flashes it. It's intended for keyboards that use the A-Star as their main processing unit. The `flash` target uploads the compiled firmware to the board.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/atreus/readme.md#_snippet_1\n\nLANGUAGE: makefile\nCODE:\n```\nmake atreus/astar:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Hotswap Mino Plus Firmware\nDESCRIPTION: This command builds and flashes the firmware for the Mino Plus keyboard with the hotswap layout using the default keymap. It requires a properly configured QMK build environment. The board needs to be in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/shandoncodes/mino_plus/readme.md#_snippet_3\n\nLANGUAGE: Makefile\nCODE:\n```\nmake shandoncodes/mino_plus/hotswap:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware to balloondogcaps/tr90\nDESCRIPTION: This command builds and flashes the default firmware to the balloondogcaps/tr90 keyboard. It requires a configured QMK build environment and a connected keyboard in bootloader mode.  The command uploads the built firmware directly to the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/balloondogcaps/tr90/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake balloondogcaps/tr90:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Altair-X Firmware\nDESCRIPTION: This command flashes the compiled firmware onto the Altair-X keyboard. It utilizes the QMK build environment and appropriate flashing tools to program the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ai03/altair_x/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake ai03/altair_x:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flash Dactyl ManuForm Firmware\nDESCRIPTION: This command flashes the compiled firmware to the Dactyl ManuForm keyboard in the 5x6 variant using the default keymap.  It requires a properly configured QMK build environment and a connected keyboard in flashing mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/dactyl_manuform/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake handwired/dactyl_manuform/5x6:default:flash\n```\n\n----------------------------------------\n\nTITLE: Tapping Force Hold (Old)\nDESCRIPTION: This code snippet shows the old method for granularly controlling tapping force hold using `get_tapping_force_hold`. The function returns a boolean value determining whether to force hold based on the keycode. Here, it forces hold for `LT(1, KC_BSPC)` and disables it for all other keys.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/ChangeLog/20230226.md#_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nbool get_tapping_force_hold(uint16_t keycode, keyrecord_t *record) {\n    switch (keycode) {\n        case LT(1, KC_BSPC):\n            return true;\n        default:\n            return false;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Building DB60 Firmware - QMK Make Command\nDESCRIPTION: This command compiles the default firmware for the CannonKeys DB60 keyboard, specifically the 'j02' revision, within the QMK firmware environment. It requires a correctly configured QMK build environment, including necessary tools and dependencies. The command generates a .hex or .bin file that can be flashed onto the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cannonkeys/db60/j02/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake cannonkeys/db60/j02:default\n```\n\n----------------------------------------\n\nTITLE: Building E80-1800 Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the E80-1800 keyboard using the QMK build environment. It compiles the source code into a firmware image that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ebastler/e80_1800/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake ebastler/e80_1800:default\n```\n\n----------------------------------------\n\nTITLE: Building GMMK PRO (ANSI) Firmware\nDESCRIPTION: This command builds the default keymap for the GMMK PRO (ANSI) keyboard using the QMK firmware.  It assumes that the QMK build environment has been properly set up according to the QMK documentation. It generates the firmware file that can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/gmmk/pro/rev2/ansi/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake gmmk/pro/rev2/ansi:default\n```\n\n----------------------------------------\n\nTITLE: Building Jabberwocky v2 default layout\nDESCRIPTION: This command builds the default layout for the Jabberwocky v2 keyboard using the QMK build environment. It requires a properly configured QMK build environment and the `make` command.  The output is a firmware file ready to be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/nopunin10did/jabberwocky/v2/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake nopunin10did/jabberwocky/v2:default\n```\n\n----------------------------------------\n\nTITLE: Making Zygomorph Firmware - QMK\nDESCRIPTION: This command builds the default firmware for the Zygomorph keyboard using the QMK build environment. It requires QMK to be set up and assumes the 'rgbkb/zygomorph' keyboard and 'default' keymap are available. The output is a .hex file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/rgbkb/zygomorph/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake rgbkb/zygomorph:default\n```\n\n----------------------------------------\n\nTITLE: Flashing slider8 Keyboard Firmware\nDESCRIPTION: This command builds and flashes the default firmware for the 1upkeyboards slider8. It depends on a properly configured QMK build environment and the appropriate flashing tools.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/1upkeyboards/1upslider8/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake 1upkeyboards/1upslider8:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Lagom Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the Lagom keyboard using the QMK build environment. It requires QMK to be set up and configured properly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/sthlmkb/lagom/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake sthlmkb/lagom:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Cassette8 Firmware\nDESCRIPTION: This command builds and flashes the default firmware for the Cassette8 macropad. It requires the QMK build environment to be correctly configured and the necessary flashing tools to be installed. The board must be connected and in a state ready to receive the flash.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/lazydesigners/cassette8/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake lazydesigners/cassette8:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Roadster Firmware with Make\nDESCRIPTION: This command compiles the QMK firmware for the Roadster keyboard with the default keymap. It assumes that the QMK build environment has been properly set up. The output will be the firmware file ready to be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/clawsome/roadster/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake clawsome/roadster:default\n```\n\n----------------------------------------\n\nTITLE: Building SNOP60 Keyboard Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the SNOP60 keyboard using the QMK build environment.  It compiles the source code and creates a firmware file ready to be flashed onto the keyboard. Requires the QMK build environment to be set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/checkerboards/snop60/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake checkerboards/snop60:default\n```\n\n----------------------------------------\n\nTITLE: Building the AMAG23 Default Keymap\nDESCRIPTION: This snippet shows the command used to build the default keymap for the AMAG23 keyboard within the QMK Firmware environment. This command compiles the keymap definition and creates the firmware file ready to flash onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/amag23/keymaps/default/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake amag23:default\n```\n\n----------------------------------------\n\nTITLE: Building Arabica3/7 Firmware with QMK\nDESCRIPTION: This command builds the default keymap for the Arabica3/7 keyboard, revision 1, using the QMK firmware build environment. It requires QMK to be set up correctly and accessible in the system's PATH.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/arabica37/readme.md#_snippet_0\n\nLANGUAGE: QMK Make\nCODE:\n```\nmake arabica37/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Building eau_r2 Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the eau_r2 keyboard using the QMK build environment. Ensure the QMK build environment is properly set up before executing this command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/yandrstudio/eau_r2/readme.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmake yandrstudio/eau_r2:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware to Unicomp Keyboard\nDESCRIPTION: This command flashes the built firmware to the unicomp/classic_ultracl_post_2013/overnumpad_1xb keyboard.  It requires the QMK build environment to be set up correctly and the keyboard to be in bootloader mode (usually by holding ESC while plugging it in or pressing the RST&PROG button).\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/unicomp/classic_ultracl_post_2013/overnumpad_1xb/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake unicomp/classic_ultracl_post_2013/overnumpad_1xb:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building 3W6 rev1 default firmware with QMK\nDESCRIPTION: This command compiles the default firmware for the 3W6 rev1 keyboard using the QMK build environment. It assumes that the QMK build environment is already set up. The resulting firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/3w6/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake 3w6/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Compiling Omega4 Firmware with QMK\nDESCRIPTION: This command compiles the QMK firmware for the Omega4 keyboard with the default keymap.  It requires the QMK build environment to be set up. The command uses the `qmk compile` command with the keyboard and keymap specified as arguments.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/makenova/omega/omega4/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nqmk compile -kb makenova/omega/omega4 -km default\n```\n\n----------------------------------------\n\nTITLE: Flashing Palmslave Keyboard Firmware\nDESCRIPTION: This command flashes the built firmware to the Palmslave keyboard.  It requires a properly set up QMK build environment and a connected keyboard in bootloader mode. `takashicompany/palmslave` specifies the keyboard, `default` the keymap, and `flash` the flashing target.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/takashicompany/palmslave/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake takashicompany/palmslave:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building default Pteron36 firmware (make)\nDESCRIPTION: This command compiles the default firmware for the Pteron36 keyboard using the QMK build environment. It requires a properly configured QMK build environment. The output is a compiled firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/pteron36/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake pteron36:default\n```\n\n----------------------------------------\n\nTITLE: Building CMM.Studio Saka68 Firmware (QMK)\nDESCRIPTION: This command builds the default hotswap firmware for the CMM.Studio Saka68 keyboard. It assumes that the QMK build environment is already set up. The resulting firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cmm_studio/saka68/hotswap/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake cmm_studio/saka68/hotswap:default\n```\n\n----------------------------------------\n\nTITLE: Compiling Jotanck Firmware\nDESCRIPTION: This command compiles the default firmware for the handwired Jotanck keyboard within the QMK environment. It assumes the QMK build environment has already been set up. The resulting firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/jotanck/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake handwired/jotanck:default\n```\n\n----------------------------------------\n\nTITLE: Enabling Modifier State Synchronization\nDESCRIPTION: This definition enables transmitting modifier state (normal, weak, oneshot and oneshot locked) to the non-primary side of the split keyboard for features such as displaying modifier status on an OLED screen.  It is defined in `config.h`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/split_keyboard.md#_snippet_18\n\nLANGUAGE: c\nCODE:\n```\n#define SPLIT_MODS_ENABLE\n```\n\n----------------------------------------\n\nTITLE: Building AEKISO60 Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the AEKISO60 Rev A keyboard using the QMK build environment. It requires the QMK build environment to be set up correctly. The output will be a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/4pplet/aekiso60/rev_a/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake 4pplet/aekiso60/rev_a:default\n```\n\n----------------------------------------\n\nTITLE: Building P40 Ortho Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the P40 Ortho keyboard using the QMK build environment.  It requires QMK to be properly set up. It outputs the compiled firmware to be flashed onto the keyboard's Pro Micro controller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/pabile/p40_ortho/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake pabile/p40_ortho:default\n```\n\n----------------------------------------\n\nTITLE: QMK Flash Commands - Helix Keyboard\nDESCRIPTION: These commands demonstrate how to flash QMK firmware to the Helix keyboard. They build the firmware and then flash it to the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/helix/rev2/keymaps/default/readme.md#_snippet_9\n\nLANGUAGE: Makefile\nCODE:\n```\n$ make helix:default:flash                         # with oled\n$ make helix/rev2/back:default:flash               # with oled and backlight\n$ make HELIX=no-ani helix/rev2/back:default:flash  # with oled and backlight without animation\n$ make helix/rev2/under:default:flash              # with oled and underglow\n$ make HELIX=no-oled helix:default:flash           # without oled\n```\n\n----------------------------------------\n\nTITLE: Flashing QMK Firmware to Manyboard Macro\nDESCRIPTION: This command is used to flash the compiled QMK firmware onto the Manyboard Macro keyboard. It requires the QMK build environment to be set up, and the keyboard to be in a flashable state (e.g., bootloader mode). The command combines the build and flash steps.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/manyboard/macro/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake manyboard/macro:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building dumbpad v0.x dualencoder QMK Firmware\nDESCRIPTION: This snippet provides the command to build the default firmware for the dumbpad/v0x_dualencoder keyboard within the QMK environment.  It requires a properly configured QMK build environment. It outputs a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/dumbpad/v0x_dualencoder/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake dumbpad/v0x_dualencoder:default\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for Atlantis PS17 (QMK)\nDESCRIPTION: This command builds the default firmware for the Atlantis PS17 keyboard. It requires a properly configured QMK build environment.  The output will be a .hex or .bin file that can be flashed to the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/atlantis/ps17/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake atlantis/ps17:default\n```\n\n----------------------------------------\n\nTITLE: Building Polyandry Firmware with Make\nDESCRIPTION: This command builds the default firmware for the Polyandry keyboard using the make command. It assumes the build environment has been set up according to QMK Firmware's documentation. This is a basic example to compile the firmware for the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/40percentclub/polyandry/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake 40percentclub/polyandry:default\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for Viper/Eagle REP Rev A\nDESCRIPTION: This command builds the default firmware for the Viper/Eagle REP Rev A keyboard using the QMK build environment. It requires the QMK build environment to be set up correctly. The output will be a .hex or .bin file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/4pplet/eagle_viper_rep/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake 4pplet/eagle_viper_rep/rev_a:default\n```\n\n----------------------------------------\n\nTITLE: Building Monarch Keyboard Firmware - QMK\nDESCRIPTION: This command builds the default keymap for the Monarch keyboard using the QMK Firmware build environment. It assumes that the QMK build environment has already been set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/monarch/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake monarch:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Keyboard Firmware with QMK\nDESCRIPTION: This command flashes the compiled firmware to the Wete R2 keyboard using the QMK build environment.  It builds the firmware and then uploads it to the keyboard's microcontroller. Requires a properly configured QMK build environment and a connected keyboard in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/rmi_kb/wete/v2/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake rmi_kb/wete/v2:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Mini M firmware with default keymap - QMK\nDESCRIPTION: This command flashes the compiled QMK firmware to the Teensy2.0++ controller on the Unicomp Mini M keyboard using the default keymap.  It requires the keyboard to be in bootloader mode (achieved by pressing the reset button on the Teensy).\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/unicomp_mini_m/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ qmk flash -kb unicomp/mini_m -km default\n```\n\n----------------------------------------\n\nTITLE: Building Winry315 Firmware with Make\nDESCRIPTION: This command compiles the default firmware for the Winry315 macropad using the `make` command.  It requires a properly configured QMK build environment. The resulting firmware can then be flashed to the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/winry/winry315/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake winry/winry315:default\n```\n\n----------------------------------------\n\nTITLE: Building Kapl Keyboard Firmware\nDESCRIPTION: This command builds the QMK firmware for the Kapl keyboard (rev1) with the default keymap.  It compiles the source code and generates a firmware file that can be flashed to the keyboard. Dependencies include the QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kapl/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake kapl/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Compiling TBK Mini Firmware with v1 Shield and Default Keymap\nDESCRIPTION: This command compiles the QMK firmware for the TBK Mini keyboard with the v1 shield and the default keymap. It utilizes the elite-C controller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/bastardkb/tbkmini/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nqmk compile -kb bastardkb/tbkmini/v1/elitec -km default\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware with nu-isp-cli\nDESCRIPTION: This command flashes the compiled firmware (`ducky_one2sf_ansi.bin`) to the Ducky One 2 SF keyboard using the `nu-isp-cli` tool. This tool provides a more complete flashing solution compared to `nuvoisp`. Requires the prior installation of the `nu-isp-cli` using Cargo.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ducky/one2sf/1967st/readme.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnu-isp-cli flash ducky_one2sf_ansi.bin\n```\n\n----------------------------------------\n\nTITLE: Building BM80V2 Firmware\nDESCRIPTION: This command builds the default firmware for the BM80V2 keyboard using the QMK build environment. It requires QMK to be set up correctly. The output will be the compiled firmware file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kprepublic/bm80v2/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake kprepublic bm80v2:default\n```\n\n----------------------------------------\n\nTITLE: Defining 75% ANSI Keyboard Layout\nDESCRIPTION: This snippet defines a 75% ANSI keyboard layout using ASCII art, visualizing the key arrangement. It provides a clear representation for configuring the layout in QMK. No specific dependencies are outlined, relying on familiarity with standard keyboard layouts.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/layouts/default/readme.md#_snippet_13\n\nLANGUAGE: text\nCODE:\n```\n┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┐\n│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │\n├───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┴───┼───┤\n│   │   │   │   │   │   │   │   │   │   │   │   │   │       │   │\n├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─────┼───┤\n│     │   │   │   │   │   │   │   │   │   │   │   │   │     │   │\n├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴─────┼───┤\n│      │   │   │   │   │   │   │   │   │   │   │   │        │   │\n├──────┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴────┬───┼───┤\n│        │   │   │   │   │   │   │   │   │   │   │      │   │   │\n├────┬───┴┬──┴─┬─┴───┴───┴───┴───┴───┴──┬┴──┬┴──┬┴──┬───┼───┼───┤\n│    │    │    │                        │   │   │   │   │   │   │\n└────┴────┴────┴────────────────────────┴───┴───┴───┴───┴───┴───┘\n```\n\n----------------------------------------\n\nTITLE: Building Keyboard Firmware with Make\nDESCRIPTION: This command builds the default firmware for the Skeletn87 hotswap keyboard. It uses the QMK build environment to compile the source code and create a firmware image.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/skeletn87/hotswap/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake skeletn87/hotswap:default\n```\n\n----------------------------------------\n\nTITLE: Building SiCK-68 Keyboard Firmware with QMK\nDESCRIPTION: This command compiles the QMK firmware for the SiCK-68 keyboard using the default keymap. It requires a properly configured QMK build environment. The output is a firmware file that can be flashed onto the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/sick68/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake handwired/sick68:default\n```\n\n----------------------------------------\n\nTITLE: Python Code Block Example\nDESCRIPTION: This Python code snippet demonstrates how to use the `pathlib` module to create a Path object pointing to a directory.  It's an example for including Python code blocks in the QMK documentation. The `pathlib` module is a standard Python library.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/__capabilities.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n```python\nfrom pathlib import Path\n\np = Path('/path/to/qmk_firmware')\n```\n```\n\n----------------------------------------\n\nTITLE: Building AEKISO60 Firmware using QMK\nDESCRIPTION: This command builds the default firmware for the AEKISO60 Rev B keyboard using the QMK build environment. It assumes that the QMK build environment has been set up correctly.  The output is a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/4pplet/aekiso60/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake 4pplet/aekiso60/rev_b:default\n```\n\n----------------------------------------\n\nTITLE: Building Alter Keyboard Firmware in QMK\nDESCRIPTION: This command compiles the QMK Firmware for the Alter keyboard (rev1) with the default keymap. It requires a properly configured QMK build environment. The resulting firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/nightly_boards/alter/rev1/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake nightly_boards/alter/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Building QMK Firmware for Keychron C2 Pro\nDESCRIPTION: This command builds the QMK firmware for the Keychron C2 Pro keyboard with the specified configuration (ansi/rgb or ansi/white) and default keymap. It compiles the source code into a firmware image that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keychron/c2_pro/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake keychron/c2/ansi/rgb:default\n```\n\nLANGUAGE: shell\nCODE:\n```\nmake keychron/c2/ansi/white:default\n```\n\n----------------------------------------\n\nTITLE: Building Choco60 Rev2 Firmware\nDESCRIPTION: This command compiles the default QMK firmware for the Choco60 Rev2 keyboard. It requires the QMK build environment to be set up. The generated firmware is intended for the Atmega32u2 controller and is suitable for the USB-C version of the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/recompile_keys/choco60/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake recompile_keys/choco60/rev2:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Sol 3 Keyboard Firmware (QMK)\nDESCRIPTION: This command flashes the default firmware to the RGBKB Sol 3 rev1 keyboard. It requires the QMK build environment to be set up and a compatible flashing tool. It assumes the keyboard is connected and in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/rgbkb/sol3/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake rgbkb/sol3/rev1:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for Meira (Pro Micro)\nDESCRIPTION: This command builds the QMK firmware for the Meira keyboard using the Pro Micro controller and the default keymap.  A QMK build environment is required. The generated firmware is compatible with the Pro Micro.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/woodkeys/meira/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake woodkeys/meira/promicro:default\n```\n\n----------------------------------------\n\nTITLE: Building city42 Keyboard Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the city42 keyboard. It utilizes the QMK build environment to compile the keyboard's firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/controllerworks/city42/readme.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmake controllerworks/city42:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Zed65 Firmware with Make\nDESCRIPTION: This command builds and flashes the QMK firmware to the Zed65 keyboard. It builds the firmware for the Zed65 910 variant with the default keymap and then attempts to flash it to the keyboard. Requires a correctly configured QMK build environment and appropriate flashing tools.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechlovin/zed65/910/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake mechlovin/zed65/910:default:flash\n```\n\n----------------------------------------\n\nTITLE: Update Develop Branch Post-Merge\nDESCRIPTION: This snippet provides the git commands to update the develop branch after merging into master, including merging master back into develop, updating the readme, creating a breakpoint tag, and pushing the updated develop branch. It includes editing the readme to add a testing branch notice.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/breaking_changes.md#_snippet_2\n\nLANGUAGE: git\nCODE:\n```\ngit checkout master\n```\n\nLANGUAGE: git\nCODE:\n```\ngit pull --ff-only\n```\n\nLANGUAGE: git\nCODE:\n```\ngit checkout develop\n```\n\nLANGUAGE: git\nCODE:\n```\ngit pull --ff-only\n```\n\nLANGUAGE: git\nCODE:\n```\ngit merge --no-ff master\n```\n\nLANGUAGE: git\nCODE:\n```\nEdit `readme.md`\nAdd a big notice at the top that this is a testing branch. See previous revisions of the `develop` branch.\nInclude a link to this document\n```\n\nLANGUAGE: git\nCODE:\n```\ngit commit -m 'Branch point for <DATE> Breaking Change'\n```\n\nLANGUAGE: git\nCODE:\n```\ngit tag breakpoint_<YYYY>_<MM>_<DD>\n```\n\nLANGUAGE: git\nCODE:\n```\ngit push upstream breakpoint_<YYYY>_<MM>_<DD>\n```\n\nLANGUAGE: git\nCODE:\n```\ngit push upstream develop\n```\n\n----------------------------------------\n\nTITLE: Flashing Phantom Keyboard Firmware\nDESCRIPTION: This command builds and flashes the default firmware to the Phantom keyboard. It requires a properly configured QMK build environment and a compatible flashing tool (e.g., dfu-programmer, avrdude). Ensure the keyboard is in the correct bootloader mode before executing the command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/phantom/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake phantom:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building E6.5 QMK Firmware\nDESCRIPTION: This command builds the QMK firmware for the Exclusive E6.5 keyboard with the default keymap. It requires a correctly configured QMK build environment. The output is a firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/exclusive/e65/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake exclusive/e65:default\n```\n\n----------------------------------------\n\nTITLE: Building Tragicforce 68 Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Tragicforce 68 keyboard using the QMK build environment. It compiles the keyboard's keymap and firmware based on the configuration specified in the `keebio/tragicforce68:default` target.  The resulting firmware can then be flashed onto the keyboard's Pro Micro controller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keebio/tragicforce68/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake keebio/tragicforce68:default\n```\n\n----------------------------------------\n\nTITLE: Building Naked64 Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Naked64 rev1 keyboard using the QMK build environment. It requires QMK to be set up correctly. The output is the compiled firmware ready to be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/salicylic_acid3/naked64/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake salicylic_acid3/naked64/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Building Leeku Finger65 Firmware\nDESCRIPTION: This command builds the default firmware for the Leeku Finger65 keyboard. It assumes that the QMK build environment has been properly set up.  It generates the firmware file that can then be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/leeku/finger65/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake leeku/finger65:default\n```\n\n----------------------------------------\n\nTITLE: Flashing WT65-H1 Keyboard Firmware\nDESCRIPTION: This command flashes the default firmware onto the wilba.tech WT65-H1 keyboard. It requires the QMK build environment and appropriate flashing tools to be set up correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wilba_tech/wt65_h1/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake wilba_tech/wt65_h1:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing CK65 Firmware with QMK\nDESCRIPTION: This command builds and flashes the default firmware for the CK65 keyboard using the QMK build environment and a compatible flashing tool. It assumes that the QMK environment is correctly set up and that the flashing tool is configured for the ATMEGA32u4 microcontroller. The keyboard should be in DFU mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/senselessclay/ck65/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake senselessclay/ck65:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building QMK Firmware for SpiderIsland Split 78-key\nDESCRIPTION: This command builds the default keymap for the SpiderIsland Split 78-key keyboard using the QMK build environment. It prepares the firmware for flashing onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/spiderisland/split78/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake spiderisland/split78:default\n```\n\n----------------------------------------\n\nTITLE: Flashing elephant42 Keyboard Firmware\nDESCRIPTION: This command flashes the default keymap firmware to the elephant42 keyboard.  It assumes that the QMK build environment is configured and that the keyboard is connected and in a state ready to receive a firmware update. It typically uses a bootloader to write the firmware to the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/elephant42/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake elephant42:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing QMK Firmware to Tomak79H Keyboard\nDESCRIPTION: This command flashes the compiled QMK firmware to the Tomak79H keyboard using the default keymap. It requires the keyboard to be in bootloader mode. The QMK build environment must be properly configured.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/era/sirind/tomak79h/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake era/sirind/tomak79h:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Latin60RGB Firmware - make command\nDESCRIPTION: This command is used to build the firmware for the Latin60RGB keyboard with the default keymap. It assumes that the QMK build environment has already been set up. The output will be a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/latincompass/latin60rgb/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake latincompass/latin60rgb:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Steezy60 Firmware (Make)\nDESCRIPTION: These make commands flash the default firmware to the Steezy60 Rev A and Rev B keyboards. They rely on the QMK build environment and require the keyboard name, layout, and flash target. Successful execution will update the keyboard's firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/4pplet/steezy60/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake 4pplet/steezy60/rev_a:default:flash\nmake 4pplet/steezy60/rev_b:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building h88 Firmware - QMK\nDESCRIPTION: This command builds the default firmware for the h88 keyboard using the QMK build environment. It assumes that the QMK build environment is already set up and configured. The resulting firmware can then be flashed onto the h88 PCB.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/hineybush/h88/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake hineybush/h88:default\n```\n\n----------------------------------------\n\nTITLE: Flashing eggman keyboard firmware - make command\nDESCRIPTION: This command flashes the compiled firmware to the eggman keyboard. It requires the QMK build environment to be set up and the keyboard to be connected to the computer in bootloader mode. The command uses a flashing tool to upload the firmware to the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/qpockets/eggman/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake qpockets/eggman:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building mollydooker firmware - QMK\nDESCRIPTION: This command is used to build the default firmware for the mollydooker keyboard within the QMK firmware environment.  It leverages the `make` command with specific arguments to compile the firmware.  The resulting firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ep/comsn/mollydooker/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake ep/comsn/mollydooker:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Dude09 Firmware with QMK\nDESCRIPTION: This command flashes the compiled firmware onto the Dude09 macropad. It uses the `make` command with the `:flash` target. This requires the QMK build environment and a configured flashing tool.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/starrykeebs/dude09/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake handwired/starrykeebs/dude09:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building BM43A Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the BM43A keyboard using the QMK build environment. It assumes that the QMK build environment has been properly set up. The resulting firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kprepublic/bm43a/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake kprepublic/bm43a:default\n```\n\n----------------------------------------\n\nTITLE: Drawing Image with Quantum Painter (C)\nDESCRIPTION: This snippet shows how to draw an image on the display using the `qp_drawimage` function from the Quantum Painter library. It assumes `display` and `my_image` are properly initialized.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/quantum_painter.md#_snippet_66\n\nLANGUAGE: c\nCODE:\n```\nqp_drawimage(display, (240 - my_image->width), (320 - my_image->height), my_image);\n```\n\n----------------------------------------\n\nTITLE: Flashing Spacey Keyboard Firmware\nDESCRIPTION: This command flashes the default firmware onto the Spacey keyboard. It requires the QMK build environment to be set up, and the necessary flashing tools installed and configured. The command combines the build and flash steps into one.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/p3d/spacey/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake p3d/spacey:default:flash\n```\n\n----------------------------------------\n\nTITLE: Inverting Handedness by Matrix Pin Logic in config.h (C)\nDESCRIPTION: This code snippet allows inverting the handedness logic when using the matrix grid method. Defining `SPLIT_HAND_MATRIX_GRID_LOW_IS_LEFT` in `config.h` designates an intersection with a diode as the left hand.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/split_keyboard.md#_snippet_5\n\nLANGUAGE: c\nCODE:\n```\n#define SPLIT_HAND_MATRIX_GRID_LOW_IS_LEFT\n```\n\n----------------------------------------\n\nTITLE: Building Dactyl Manuform 5x6 Firmware\nDESCRIPTION: This command builds the default firmware for the Dactyl Manuform 5x6 keyboard with 6 thumb keys.  It compiles the keymap and firmware code into a hex file that can be flashed onto the keyboard's microcontroller. The QMK build environment must be set up beforehand.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/dactyl_manuform/5x6_6/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake handwired/dactyl_manuform/5x6_6:default\n```\n\n----------------------------------------\n\nTITLE: Building UM-70 Keyboard Firmware with QMK\nDESCRIPTION: This snippet demonstrates how to build the default firmware for the UM-70 keyboard using the `make` command within the QMK firmware environment. It requires a properly configured QMK build environment. The expected output is the compiled firmware ready to be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/merge/um70/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake merge/um70:default\n```\n\n----------------------------------------\n\nTITLE: Building KBMG68 Firmware - Make Command\nDESCRIPTION: This command compiles the QMK firmware for the Keebmonkey KBMG68 keyboard using the default keymap. It requires a properly configured QMK build environment.  The output is a .hex or .bin file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keebmonkey/kbmg68/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake keebmonkey/kbmg68:default\n```\n\n----------------------------------------\n\nTITLE: Building QMK Firmware for Kobold\nDESCRIPTION: This command builds the default QMK firmware for the Kobold r1 keyboard. It requires a correctly configured QMK build environment.  The resulting firmware can then be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/tzarc/kobold/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake tzarc/kobold/r1:default\n```\n\n----------------------------------------\n\nTITLE: Flashing QMK Firmware to Bakeneko 60\nDESCRIPTION: This command builds and flashes the default keymap to the Bakeneko 60 keyboard. It requires the QMK build environment to be set up and uses the 'make' command with the 'flash' target.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kkatano/bakeneko60/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake kkatano/bakeneko60:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Kudox rev3 Firmware (QMK)\nDESCRIPTION: This command builds the default keymap for the Kudox keyboard, specifically the rev3 version. It utilizes the QMK make system to compile the firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kumaokobo/kudox/readme.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmake kumaokobo/kudox/rev3:default\n```\n\n----------------------------------------\n\nTITLE: Checking Display Status\nDESCRIPTION: Returns `true` if the ST7565 display is currently on and `false` if it is off.  Provides a way to query the current power state of the display.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/st7565.md#_snippet_28\n\nLANGUAGE: C\nCODE:\n```\n// Returns true if the screen is currently on, false if it is\n// not\nbool st7565_is_on(void);\n```\n\n----------------------------------------\n\nTITLE: Building ElmoPad Firmware (Makefile)\nDESCRIPTION: This snippet demonstrates how to build the default firmware for the ElmoPad using the QMK build environment. It assumes that the QMK build environment has been properly set up. The command compiles the firmware and generates a .hex file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kb_elmo/elmopad/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake kb_elmo/elmopad:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Solheim68 Firmware (QMK)\nDESCRIPTION: This command flashes the built firmware to the Solheim68 keyboard. It uses the QMK build environment, specifies the keyboard layout (evyd13/solheim68), the keymap (default), and the flash target.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/evyd13/solheim68/readme.md#_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nmake evyd13/solheim68:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Pierce Keyboard Firmware\nDESCRIPTION: This command flashes the compiled firmware onto the Pierce keyboard. It uses the QMK flashing tools to upload the firmware to the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/pierce/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake pierce:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing the Firmware\nDESCRIPTION: This command flashes the compiled firmware to the Rama Works x Machine Industries M4-A keyboard. It utilizes the `make` command with the `flash` target in the QMK Firmware environment, indicating the keyboard, keymap, and the action to perform.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/machine_industries/m4_a/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake machine_industries/m4_a:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Lunakey Mini Firmware (Makefile)\nDESCRIPTION: This command compiles and flashes the QMK firmware onto the Lunakey Mini keyboard. It extends the build command by adding the `:flash` target, which initiates the flashing process after successful compilation. Requires a configured flashing environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/yoichiro/lunakey_mini/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake yoichiro/lunakey_mini:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building OrthoCode Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the OrthoCode keyboard using the QMK build environment. It requires the QMK build environment to be set up correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/orthocode/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake orthocode:default\n```\n\n----------------------------------------\n\nTITLE: Building the Printed Pad Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the Printed Pad keyboard.  It utilizes the QMK build environment to compile the keyboard's configuration.  The output is a .hex file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/printedpad/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake printedpad:default\n```\n\n----------------------------------------\n\nTITLE: Building Split65 with Proton C using QMK\nDESCRIPTION: This command builds the QMK firmware for the Split65 keyboard using a Proton C controller with the default configuration. It uses the `make` command with the target specified as `handwired/split65/stm32:default`. No dependencies outside of the QMK build environment are required. The output is a compiled firmware ready for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/split65/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/split65/stm32:default\n```\n\n----------------------------------------\n\nTITLE: Building KBD8X MKII Firmware\nDESCRIPTION: This command builds the default firmware for the KBD8X MKII keyboard using the QMK build environment. It requires the QMK build environment to be properly set up. The resulting firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kbdfans/kbd8x_mk2/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake kbdfans/kbd8x_mk2:default\n```\n\n----------------------------------------\n\nTITLE: Building Hnah40rgb Firmware with Make\nDESCRIPTION: This snippet demonstrates how to build the default firmware for the Hnah40rgb keyboard using the `make` command. It assumes that the QMK build environment has already been set up according to the QMK documentation. The command compiles the keyboard's keymap and firmware into a flashable binary.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/hnah40rgb/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/hnah40rgb:default\n```\n\n----------------------------------------\n\nTITLE: Flashing DOIO KB19 QMK Firmware\nDESCRIPTION: This command builds and flashes the default keymap to the DOIO KB19. It assumes the QMK build environment has been set up and the necessary flashing tools are installed.  It requires the keyboard to be in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/doio/kb19/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake doio/kb19:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building C39 Keyboard Firmware - QMK\nDESCRIPTION: This command is used to build the default firmware for the C39 keyboard using the QMK build environment. It requires the QMK build environment to be set up correctly as per the QMK documentation. It outputs the firmware binary that can be flashed onto the C39 keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/maple_computing/c39/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake maple_computing/c39:default\n```\n\n----------------------------------------\n\nTITLE: Flashing M65 rev1 firmware with make\nDESCRIPTION: This command builds and flashes the default firmware for the M65 keyboard revision 1 using the QMK make system. It compiles the source code, generates a firmware image, and then flashes it to the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mlego/m65/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake mlego/m65/rev1:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building TKC OSA v2 Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the TKC OSA v2 keyboard using the QMK build environment. It compiles the keymap and firmware, producing a .hex file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/tkc/osav2/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake tkc/osav2:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Tata80 Firmware\nDESCRIPTION: This command flashes the compiled firmware onto the Tata80 keyboard. It uses the wuque/tata80/wk configuration and the default keymap. It also requires the bootloader to be active on the keyboard, typically triggered by pressing the reset button.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wuque/tata80/wk/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake wuque/tata80/wk:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building ZLANT XL Firmware with Make\nDESCRIPTION: This command builds the default firmware for the ZLANT XL keyboard using the QMK make system.  It compiles the source code and prepares the firmware for flashing. Ensure the QMK build environment is set up beforehand as detailed in the QMK documentation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/zlant_xl/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake zlant_xl:default\n```\n\n----------------------------------------\n\nTITLE: Defining Soft Serial Pin in QMK\nDESCRIPTION: When using serial communication, this defines the pin to use for soft serial. The pin must be specified, for example: `D0`, `D1`, `D2`, `D3`, or `E6`. This is important for configuring the serial communication channel.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/config_options.md#_snippet_93\n\nLANGUAGE: c\nCODE:\n```\n#define SOFT_SERIAL_PIN D0\n```\n\n----------------------------------------\n\nTITLE: Building Shisaku Firmware\nDESCRIPTION: This command compiles the QMK firmware for the Shisaku keyboard with the default keymap.  It requires the QMK build environment to be set up.  The output will be a .hex or .bin file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/adpenrose/shisaku/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake adpenrose/shisaku:default\n```\n\n----------------------------------------\n\nTITLE: Building the Ishi 80 Mk 0 Firmware\nDESCRIPTION: This command builds the default keymap for the Ishi 80 Mk 0 keyboard using the argo_works/ishi/80/mk0_avr_extra configuration. It requires a properly set up QMK build environment. The resulting firmware can then be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/argo_works/ishi/80/mk0_avr_extra/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake argo_works/ishi/80/mk0_avr_extra:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Kepler-33 Keyboard Firmware\nDESCRIPTION: Flashes the compiled firmware onto the Kepler-33 keyboard proto. This command requires the QMK build environment to be set up correctly and uses the appropriate flashing tools for the STM32F401 microcontroller. The command combines the build and flash steps.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kepler_33/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake kepler_33/proto:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Keyboard Firmware with Make\nDESCRIPTION: This command flashes the compiled firmware onto the Gray Studio Aero 75 keyboard using the QMK build environment. It requires the QMK build environment to be set up and the keyboard to be in a flashable state, typically via the bootloader.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/gray_studio/aero75/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake gray_studio/aero75:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Frooastboard Nano Firmware (QMK)\nDESCRIPTION: This command flashes the default firmware onto the Frooastboard Nano keyboard. It requires the QMK build environment and a compatible flashing tool. The command compiles the firmware (if necessary) and then programs it onto the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/frooastboard/nano/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake frooastboard/nano:default:flash\n```\n\n----------------------------------------\n\nTITLE: Compiling QMK Firmware for IDOBAO ID61\nDESCRIPTION: This command compiles the QMK firmware for the IDOBAO ID61 keyboard with the default keymap. It assumes that the QMK build environment is already set up. The compiled firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/idobao/id61/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nqmk compile -kb idobao/id61 -km default\n```\n\n----------------------------------------\n\nTITLE: Building BNR1 V2 Keyboard Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the BNR1 V2 keyboard using the QMK build environment.  It compiles the keymap and other necessary files to create a firmware image that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/binepad/bnr1/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake binepad/bnr1/v2:default\n```\n\n----------------------------------------\n\nTITLE: Building WT65-F Keyboard Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the wilba.tech WT65-F keyboard using the QMK Firmware build system. It requires a properly configured QMK build environment. The output will be a firmware file ready to be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wilba_tech/wt65_f/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake wilba_tech/wt65_f:default\n```\n\n----------------------------------------\n\nTITLE: Building Neito Keyboard Firmware\nDESCRIPTION: This command compiles the default keymap for the Neito keyboard using the QMK build environment.  It assumes the QMK build environment has been properly set up. The output is a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/neito/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake neito:default\n```\n\n----------------------------------------\n\nTITLE: Building Technik-S Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Technik-S keyboard using the QMK build environment. It assumes that the QMK build environment has been properly set up. The command compiles the keyboard layout and generates a firmware file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/boardsource/technik_s/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake boardsource/technik_s:default\n```\n\n----------------------------------------\n\nTITLE: Setting Brightness for Single LED (Mono) - C\nDESCRIPTION: The `is31fl3743a_set_value` function sets the brightness of a single LED when using a single-color driver. It takes an LED index and a brightness value as input. Remember to call `is31fl3743a_update_pwm_buffers()` to apply the changes.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/is31fl3743a.md#_snippet_6\n\nLANGUAGE: C\nCODE:\n```\nvoid is31fl3743a_set_value(int index, uint8_t value)\n```\n\n----------------------------------------\n\nTITLE: Building Cerberus Firmware (QMK)\nDESCRIPTION: These commands build the firmware for the Cerberus keyboard using QMK. The first command builds for the hotswap version and the second for the solderable version using the default keymap. Requires QMK build environment to be set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cannonkeys/cerberus/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake cannonkeys/cerberus/hotswap:default\n```\n\nLANGUAGE: Makefile\nCODE:\n```\nmake cannonkeys/cerberus/solderable:default\n```\n\n----------------------------------------\n\nTITLE: Building Epoch 80 Keyboard Firmware\nDESCRIPTION: This command builds the default keymap for the Epoch 80 keyboard using the QMK firmware build environment.  It requires the QMK build environment to be set up. It outputs a .hex file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kbdfans/epoch80/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake kbdfans/epoch80:default\n```\n\n----------------------------------------\n\nTITLE: Building QMK Firmware for h65 keyboard\nDESCRIPTION: This command builds the QMK Firmware for the hineybush/h65 keyboard with the default keymap. It requires the QMK build environment to be set up. The output is a firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/hineybush/h65_hotswap/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake hineybush/h65:default\n```\n\n----------------------------------------\n\nTITLE: Enabling Repeat Key in rules.mk (Make)\nDESCRIPTION: This snippet shows how to enable the Repeat Key feature by setting the `REPEAT_KEY_ENABLE` variable to `yes` in your `rules.mk` file. This is a prerequisite for using the `QK_REPEAT_KEY` and `QK_ALT_REPEAT_KEY` keycodes.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/repeat_key.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nREPEAT_KEY_ENABLE = yes\n```\n\n----------------------------------------\n\nTITLE: Flashing QMK Firmware to CannonKeys Link\nDESCRIPTION: This command compiles and flashes the default keymap to the CannonKeys Link keyboard.  It requires a properly configured QMK build environment and a connected keyboard in bootloader mode. It builds upon the previous build step.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cannonkeys/link/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake cannonkeys/link:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building G4M3R Alpha Firmware with QMK\nDESCRIPTION: This command is used to compile the default keymap for the G4M3R Alpha keyboard within the QMK Firmware environment. It requires a correctly configured QMK build environment. The output is a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wsk/g4m3ralpha/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake wsk/g4m3ralpha:default\n```\n\n----------------------------------------\n\nTITLE: Turn on LEDs\nDESCRIPTION: This code demonstrates how to turn on the individual LEDs on the XD75 keyboard using the `capslock_led_on()`, `gp100_led_on()`, and `gp103_led_on()` functions. These functions control the state of specific GPIO pins connected to the LEDs.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/xiudi/xd75/readme.md#_snippet_2\n\nLANGUAGE: c\nCODE:\n```\ncapslock_led_on();\ngp100_led_on();\ngp103_led_on();\n```\n\n----------------------------------------\n\nTITLE: Building DZ60RGB Firmware (Arm)\nDESCRIPTION: This command compiles the QMK firmware for the DZ60RGB-WKL V1 keyboard, which uses an STM32F303 Arm microcontroller. It requires a properly configured QMK build environment and the 'make' utility.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/dztech/dz60rgb_wkl/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake dztech/dz60rgb_wkl/v1:default # Arm (STM32F303)\n```\n\n----------------------------------------\n\nTITLE: Building Comet46 Keyboard Firmware\nDESCRIPTION: This command builds the default keymap for the Comet46 keyboard using the QMK Firmware build environment. It requires QMK to be properly set up with the necessary build tools installed. The resulting firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/satt/comet46/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake satt/comet46:default\n```\n\n----------------------------------------\n\nTITLE: Writing String to Display\nDESCRIPTION: Writes a string (`data`) to the display buffer at the current cursor position. If `invert` is true, the pixels of the string are inverted. Advances the cursor while writing each character in the string.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/st7565.md#_snippet_14\n\nLANGUAGE: C\nCODE:\n```\n// Writes a string to the buffer at current cursor position\n// Advances the cursor while writing, inverts the pixels if true\nvoid st7565_write(const char *data, bool invert);\n```\n\n----------------------------------------\n\nTITLE: Flashing Kepler Firmware - QMK\nDESCRIPTION: This command flashes the built QMK firmware onto the Kepler keyboard. It relies on a properly configured QMK build environment and a connected keyboard in bootloader mode. The command compiles and then flashes the firmware using the specified keyboard and keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/wwa/kepler/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake handwired/wwa/kepler:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing VE.A Keyboard with bootloadHID\nDESCRIPTION: This command uses the bootloadHID tool to flash a pre-compiled .hex file to the VE.A keyboard. It requires bootloadHID to be installed and accessible in the system's PATH. The board should be in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/oddforge/vea/readme.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nbootloadHID -r oddforge_vea_default.hex\n```\n\n----------------------------------------\n\nTITLE: Building Ploopyco Mouse Firmware with Make\nDESCRIPTION: This command builds and flashes the default keymap for the Ploopyco Mouse using the QMK build environment. It assumes that the build environment has been properly configured as per the QMK documentation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ploopyco/mouse/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake ploopyco/mouse:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing M65 rev2 firmware with make\nDESCRIPTION: This command builds and flashes the default firmware for the M65 keyboard revision 2 using the QMK make system. It compiles the source code, generates a firmware image, and then flashes it to the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mlego/m65/readme.md#_snippet_3\n\nLANGUAGE: Makefile\nCODE:\n```\nmake mlego/m65/rev2:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building YMD75 Firmware\nDESCRIPTION: This command builds the default firmware for the YMD75 rev2 keyboard using the QMK build environment.  It assumes the build environment has been properly set up according to the QMK documentation. No specific parameters are needed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ymdk/ymd75/rev2/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake ymdk/ymd75/rev2:default\n```\n\n----------------------------------------\n\nTITLE: Building eggman keyboard firmware - make command\nDESCRIPTION: This command builds the default firmware for the eggman keyboard. It assumes that the QMK build environment is already set up. The command compiles the source code and generates a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/qpockets/eggman/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake qpockets/eggman:default\n```\n\n----------------------------------------\n\nTITLE: Building QMK Firmware for Fine!40\nDESCRIPTION: This command builds the QMK firmware for the Fine!40 keyboard with the default keymap. It requires the QMK build environment to be set up correctly. The output will be a .hex file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/aidansmithdotdev/fine40/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake aidansmithdotdev/fine40:default\n```\n\n----------------------------------------\n\nTITLE: Layout Aliases Configuration JSON\nDESCRIPTION: Defines layout aliases, mapping them to specific layout definitions.  This allows for simplified referencing of complex layout structures.  It is expected to be a JSON object with string keys and string values.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/reference_info_json.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n        \"LAYOUT_ansi\": \"LAYOUT_60_ansi\",\n        \"LAYOUT_iso\": \"LAYOUT_60_iso\"\n    }\n```\n\n----------------------------------------\n\nTITLE: Compiling QMK Firmware for IDOBAO ID61 (Make)\nDESCRIPTION: This command uses the `make` command to compile the QMK firmware for the IDOBAO ID61 keyboard with the default keymap. It is an alternative to the `qmk compile` command and also assumes a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/idobao/id61/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake idobao/id61:default\n```\n\n----------------------------------------\n\nTITLE: Compiling QMK Firmware for ANAVI MacroPad8\nDESCRIPTION: This command compiles the QMK firmware for the ANAVI MacroPad8 keyboard with the default keymap. It requires a properly configured QMK build environment. The compiled firmware is then ready to be flashed onto the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/anavi/macropad8/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nqmk compile -kb anavi/macropad8 -km default\n```\n\n----------------------------------------\n\nTITLE: Building QMK Firmware for Iris LM-G Keyboard\nDESCRIPTION: This command builds the QMK firmware for the Iris LM-G keyboard with the default keymap. It requires the QMK build environment to be set up. The output will be a .hex file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keebio/iris_lm/g1/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake keebio/iris_lm/g1:default\n```\n\n----------------------------------------\n\nTITLE: Compiling Skeletyl Firmware with v2 and via keymap\nDESCRIPTION: This command compiles the QMK firmware for the Skeletyl keyboard with v2 shield (Elite-C) and via keymap. It uses the `qmk compile` command with specific parameters for the keyboard, version, and keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/bastardkb/skeletyl/readme.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nqmk compile -kb bastardkb/skeletyl/v2/elitec -km via\n```\n\n----------------------------------------\n\nTITLE: Building XD84 Pro Keyboard Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the XD84 Pro keyboard using the QMK build environment. It assumes that the QMK build environment is properly configured. It takes no input and generates a firmware binary as output.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/xiudi/xd84pro/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake xiudi/xd84pro:default\n```\n\n----------------------------------------\n\nTITLE: Building Jones v.0.3.1 Keyboard Firmware (QMK)\nDESCRIPTION: This command builds the firmware for the Jones v.0.3.1 keyboard with the default keymap. It requires a properly set up QMK build environment. The output will be a firmware file ready to be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/jones/v03_1/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake jones/v03_1:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware for Stello65 Keyboard\nDESCRIPTION: This command builds and flashes the default firmware for the Stello65 keyboard with the hs_rev1 revision. It assumes that the QMK build environment has already been set up and the necessary tools for flashing are installed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/stello65/hs_rev1/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake stello65/hs_rev1:default:flash\n```\n\n----------------------------------------\n\nTITLE: Setting Individual LED Brightness in QMK (C)\nDESCRIPTION: This function sets the brightness of a specific LED in the matrix. It takes the LED index and the desired brightness value as input and must be called from within an effect or indicator callback function.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/led_matrix.md#_snippet_16\n\nLANGUAGE: C\nCODE:\n```\nvoid led_matrix_set_value(uint8_t index, uint8_t v)\n```\n\n----------------------------------------\n\nTITLE: Flashing EU ISOlation Firmware\nDESCRIPTION: This command flashes the default firmware to the EU ISOlation keyboard. It requires the QMK build environment to be set up and the necessary flashing tools installed (e.g., dfu-util). It combines the build and flash steps into a single command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/p3d/eu_isolation/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake p3d/eu_isolation:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building JK01 Firmware (Makefile)\nDESCRIPTION: This command builds the default keymap for the JK01 keyboard. It requires the QMK build environment to be properly set up. The output will be a .hex or .bin file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/jukaie/jk01/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake jukaie/jk01:default\n```\n\n----------------------------------------\n\nTITLE: Building Exclusive E8.5 Soldered Firmware with Make\nDESCRIPTION: This command builds the default firmware for the Exclusive E8.5 soldered keyboard using the QMK build environment. It requires the QMK build environment to be set up. The output is the compiled firmware ready to be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/exclusive/e85/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake exclusive/e85/soldered:default\n```\n\n----------------------------------------\n\nTITLE: Building WT20-H1 Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the wilba_tech WT20-H1 keyboard using QMK. It compiles the keyboard's keymap and necessary configurations to create a firmware image ready for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wilba_tech/wt20_h1/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake wilba_tech/wt20_h1:default\n```\n\n----------------------------------------\n\nTITLE: Enabling RGB Backlight in rules.mk\nDESCRIPTION: This snippet shows how to enable RGB backlight by changing the `LED_BACK_ENABLE` option in the `rules.mk` file. It's necessary to change `no` to `yes` to activate the feature.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/helix/pico/keymaps/default/readme_jp.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nLED_BACK_ENABLE = yes        # LED backlight (Enable WS2812 RGB underlight.)\n```\n\n----------------------------------------\n\nTITLE: Building EP40 Firmware\nDESCRIPTION: This snippet demonstrates how to build the default firmware for the EP40 keyboard using the QMK build system. It assumes that the QMK build environment has already been set up. The command `make ep/40:default` compiles the firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ep/40/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake ep/40:default\n```\n\n----------------------------------------\n\nTITLE: Building H87 G2 Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the H87 G2 keyboard using the QMK build environment. It compiles the keymap and other necessary components into a firmware image that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/hineybush/h87_g2/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake hineybush/h87_g2:default\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for Ocean Breeze Keyboard\nDESCRIPTION: This command is used to build the default firmware for the Ocean Breeze Rev1 keyboard using the QMK build environment. It compiles the keyboard layout and keymap defined in the `afternoonlabs/oceanbreeze/rev1` directory with the `default` keymap configuration.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/afternoonlabs/oceanbreeze/rev1/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake afternoonlabs/oceanbreeze/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Flashing RE65 Firmware\nDESCRIPTION: This command flashes the default firmware onto the RE65 keyboard using the QMK build environment. It builds the firmware (if necessary) and then flashes it to the keyboard.  It requires a properly configured QMK build environment and a connected keyboard in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/sawnsprojects/re65/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake sawnsprojects/re65:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing the Firmware\nDESCRIPTION: This command flashes the built QMK firmware to the S6xty5Neo Rev.2 keyboard. It depends on the QMK build environment and the dfu-util tool (or similar) being correctly configured for flashing STM32 devices.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/trnthsn/s6xty5neor2/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake trnthsn/s6xty5neor2:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware to Calice Keyboard\nDESCRIPTION: This command builds and flashes the default firmware to the Calice keyboard.  It depends on a correctly configured QMK build environment and a connected keyboard in bootloader mode. The board should be ready to use after successful flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/qwertlekeys/calice/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake qwertlekeys/calice:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing the fire keymap for Cornia keyboard\nDESCRIPTION: This command flashes the fire keymap onto the Cornia keyboard. This keymap enables OLED and Cirque trackpad. QMK build environment and connection to the keyboard are required. It flashes the keyboard's microcontroller with the built firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cornia/readme.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nmake cornia/v1:fire:flash\n```\n\n----------------------------------------\n\nTITLE: Setting OLED Cursor Position (C)\nDESCRIPTION: This function moves the cursor to a specific character position on the OLED display. It takes the column and line number as input. The cursor wraps if the specified position is out of bounds.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/oled_driver.md#_snippet_16\n\nLANGUAGE: c\nCODE:\n```\n// Moves cursor to character position indicated by column and line, wraps if out of bounds\n// Max column denoted by 'oled_max_chars()' and max lines by 'oled_max_lines()' functions\nvoid oled_set_cursor(uint8_t col, uint8_t line);\n```\n\n----------------------------------------\n\nTITLE: Making Smolka Keyboard Firmware\nDESCRIPTION: This command compiles the default firmware for the Smolka keyboard using the QMK build environment. It utilizes the `make` command with the target specified as `viktus/smolka:default`, which indicates the keyboard's directory and the default keymap configuration.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/viktus/smolka/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake viktus/smolka:default\n```\n\n----------------------------------------\n\nTITLE: Initializing ChibiOS with git-svn\nDESCRIPTION: Initializes a git-svn repository for ChibiOS. This is a one-time setup requiring the `git-svn` package.  It defines the standard layout and sets the prefix for the SVN repository.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/chibios_upgrade_instructions.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngit svn init --stdlayout --prefix='svn/' http://svn.osdn.net/svnroot/chibios/\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for Nayeon Keyboard\nDESCRIPTION: This command builds the firmware for the Nayeon keyboard with VIA enabled. It requires a properly configured QMK build environment. The output will be a .hex or .bin file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/abatskeyboardclub/nayeon/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake abatskeyboardclub/nayeon:via\n```\n\n----------------------------------------\n\nTITLE: Building the Sleepy Keeb Split Keyboard\nDESCRIPTION: This command is used to build the QMK firmware for the Sleepy Keeb Split keyboard with the default keymap. It compiles the necessary code and creates a firmware file that can be flashed onto the microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/sleepy_craft_studios/sleepy_keeb_split/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake sleepy_craft_studios/sleepy_keeb_split:default\n```\n\n----------------------------------------\n\nTITLE: Flashing the HHKB Lite 2 firmware with QMK\nDESCRIPTION: This command flashes the default firmware onto the HHKB Lite 2 keyboard using the QMK build environment. It builds the firmware first and then programs it onto the keyboard.  It requires a properly configured QMK environment and a connected keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/hhkb_lite_2/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake hhkb_lite_2:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Absinthe Firmware\nDESCRIPTION: This command builds the default keymap for the Absinthe keyboard using the QMK build environment. It assumes that the QMK build environment has been set up correctly. This command should be run from the root directory of the QMK firmware repository.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keyhive/absinthe/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake keyhive/absinthe:default\n```\n\n----------------------------------------\n\nTITLE: Flashing punk75 keyboard with default keymap in QMK\nDESCRIPTION: This command builds and flashes the QMK firmware onto the punk75 keyboard using the default keymap. It programs the firmware onto the keyboard's microcontroller. Requires a properly configured QMK build environment and a connected keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/punk75/readme.md#_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nmake punk75:default:flash\n```\n\n----------------------------------------\n\nTITLE: Makefile Command Examples\nDESCRIPTION: These are example `make` commands showing how to build, clean, and flash firmware with specific keyboard, keymap, and target parameters. They demonstrate the flexibility of the `make` command in QMK Firmware for various tasks.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/getting_started_make_guide.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake all:all\n```\n\nLANGUAGE: Makefile\nCODE:\n```\nmake ergodox_infinity:algernon:clean\n```\n\nLANGUAGE: Makefile\nCODE:\n```\nmake planck/rev4:default:flash COLOR=false\n```\n\n----------------------------------------\n\nTITLE: Flashing Scotto69 Keyboard Firmware\nDESCRIPTION: This command flashes the compiled firmware onto the Scotto69 keyboard. It requires a correctly configured QMK build environment and a connected keyboard in bootloader mode. This updates the keyboard's firmware with the compiled code.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/scottokeebs/scotto69/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake handwired/scottokeebs/scotto69:default:flash\n```\n\n----------------------------------------\n\nTITLE: Enabling RGB Underglow\nDESCRIPTION: This code snippet from `rules.mk` shows the setting to enable RGB underglow on the Zinc keyboard. Changing `LED_UNDERGLOW_ENABLE` to `yes` will activate the WS2812 RGB underlight LEDs.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/25keys/zinc/keymaps/default/readme_jp.md#_snippet_7\n\nLANGUAGE: Makefile\nCODE:\n```\nLED_UNDERGLOW_ENABLE = yes   # LED underglow (Enable WS2812 RGB underlight.)\n```\n\n----------------------------------------\n\nTITLE: Flashing the Mode SeventyFive M75S Firmware\nDESCRIPTION: This command flashes the built firmware to the Mode SeventyFive M75S keyboard. It uses the `make` command with the target specified as `mode/m75s:default:flash`. This requires a correctly configured QMK build environment and a connected keyboard in flashing mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mode/m75s/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake mode/m75s:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building QMK Firmware\nDESCRIPTION: This command builds the QMK firmware for the Skyloong QK21 V1 keyboard with the default keymap. Ensure that the QMK build environment is set up correctly before running this command.  This command compiles the keyboard firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/skyloong/qk21/v1/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake skyloong/qk21/v1:default\n```\n\n----------------------------------------\n\nTITLE: Building mt64rgb with QMK\nDESCRIPTION: This command builds the default keymap for the mt64rgb keyboard using the QMK firmware build environment. It assumes that the QMK build environment is already set up. The resulting firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mt/mt64rgb/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake mt/mt64rgb:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Splitty Firmware (make)\nDESCRIPTION: This command builds and flashes the default firmware for the Splitty keyboard. It assumes that the necessary flashing tools are installed and configured correctly. This action programs the keyboard's microcontroller with the compiled firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/splitty/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake splitty:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Clueboard 66% HotSwap Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the Clueboard 66% HotSwap keyboard (gen1) using the QMK build environment. It requires the QMK build environment to be set up correctly. The resulting firmware can then be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/clueboard/66_hotswap/gen1/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake clueboard/66_hotswap/gen1:default\n```\n\n----------------------------------------\n\nTITLE: Building Acacia Keyboard Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the Acacia keyboard in the QMK Firmware environment. It requires a correctly set up build environment as detailed in the QMK documentation. The output will be a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/acacia/readme.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmake handwired/acacia:default\n```\n\n----------------------------------------\n\nTITLE: Running QMK Lint - Successful Check\nDESCRIPTION: This example shows how to run the `qmk lint` tool on a specific keyboard and demonstrates a successful check. The tool analyzes the keyboard's configuration and files for potential issues.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/hardware_keyboard_guidelines.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ qmk lint -kb rominronin/katana60/rev2\nΨ Lint check passed!\n```\n\n----------------------------------------\n\nTITLE: Flashing TKC California Firmware\nDESCRIPTION: This command builds and flashes the default keymap for the TKC California keyboard to the device. It requires a correctly configured QMK build environment and the keyboard to be in bootloader mode. The command will compile the firmware and then flash it to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/tkc/california/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake tkc/california:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing QMK Firmware to LSJ Ares\nDESCRIPTION: This command flashes the QMK firmware onto the LSJ Ares keyboard.  It builds the firmware if necessary and then uses a flashing tool to upload the firmware to the keyboard's microcontroller. The QMK build environment and appropriate flashing tools must be installed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ares/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake ares:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware for Bakeneko60 ISO Hotswap (QMK)\nDESCRIPTION: This command flashes the built firmware to the CannonKeys Bakeneko60 ISO Hotswap keyboard. It extends the `make` command by adding the `:flash` target, which utilizes a flashing tool defined in the QMK environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cannonkeys/bakeneko60_iso_hs/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake cannonkeys/bakeneko60_iso_hs:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Dilemma Keyboard Firmware with QMK\nDESCRIPTION: These `make` commands build the firmware for the Dilemma keyboard with specific layouts using the QMK Firmware build environment. The first command builds the 3x5_3 layout with the default keymap. The second command builds the 4x6_4 layout with the default keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/bastardkb/dilemma/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake bastardkb/dilemma/3x5_3:default\n```\n\nLANGUAGE: Makefile\nCODE:\n```\nmake bastardkb/dilemma/4x6_4:default\n```\n\n----------------------------------------\n\nTITLE: Adding Tags to info.json\nDESCRIPTION: This JSON snippet shows how to add tags to the `info.json` file for a keyboard. Tags categorize the keyboard and will be used for browsing and sorting in the future.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/ChangeLog/20210828.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n    \"tags\": [\"tkl\", \"backlight\", \"encoder\"]\n```\n\n----------------------------------------\n\nTITLE: Flashing BM65HSRGB_ISO Firmware\nDESCRIPTION: This command flashes the compiled firmware onto the BM65HSRGB_ISO keyboard.  It assumes that the QMK build environment is set up and that the keyboard is in a state where it can accept a flash. The 'default' specifies the keymap to flash.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kprepublic/bm65hsrgb_iso/rev1/readme.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nmake kprepublic/bm65hsrgb_iso:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing RYLOO STUDIO M0110 Firmware (QMK)\nDESCRIPTION: This command compiles and flashes the default firmware to the RYLOO STUDIO M0110 keyboard using the QMK build environment. It requires a properly configured QMK environment and a connected keyboard in a flashable state.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ryloo_studio/m0110/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake ryloo_studio/m0110:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Suit80 ANSI Default Firmware - make command\nDESCRIPTION: This command flashes the default firmware to the Suit80 ANSI keyboard. It assumes the QMK build environment is set up and that the keyboard is in bootloader mode. This writes the compiled firmware to the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/owlab/suit80/ansi/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake owlab/suit80/ansi:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for MAJA_SOLDERED\nDESCRIPTION: This command builds the default firmware for the MAJA_SOLDERED keyboard.  It assumes that the QMK build environment is properly set up. The command uses the `make` utility with the target specified as `kbdfans/maja_soldered:default`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kbdfans/maja_soldered/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake kbdfans/maja_soldered:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Free Willy Firmware\nDESCRIPTION: This command flashes the default firmware to the Free Willy keyboard. It requires a properly set up QMK build environment and a connected keyboard. The keyboard must be in bootloader mode (reset via jumping reset and ground pins).\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/free_willy/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake free_willy:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware: Ploopyco Thumb Trackball\nDESCRIPTION: This command compiles and flashes the default firmware for the Ploopyco Thumb Trackball revision 1_001. It assumes that the QMK build environment is already set up. This command directly flashes the firmware to the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ploopyco/trackball_thumb/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake ploopyco/trackball_thumb/rev1_001:default:flash\n```\n\n----------------------------------------\n\nTITLE: Compiling QMK Firmware\nDESCRIPTION: This command compiles the QMK firmware for the specified keyboard and keymap. It uses the `qmk compile` command with the `-kb` option to specify the keyboard (ez_maker/directpins/teensy_32) and the `-km` option to specify the keymap (default).\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ez_maker/directpins/teensy_32/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nqmk compile -kb ez_maker/directpins/teensy_32 -km default\n```\n\n----------------------------------------\n\nTITLE: Flashing chocV Keyboard Firmware\nDESCRIPTION: This command builds and flashes the default firmware onto the chocV keyboard. It requires a properly configured QMK build environment and a connected keyboard in bootloader mode. The command combines the build and flash steps into a single operation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/chocv/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake chocv:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware to RP2040 Controller (KB2040)\nDESCRIPTION: This command builds and flashes the QMK firmware to the Sweet 16 v2 macropad using the KB2040 controller. It assumes a configured QMK build environment and a KB2040 controller connected and ready to be flashed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/1upkeyboards/sweet16v2/readme.md#_snippet_3\n\nLANGUAGE: Makefile\nCODE:\n```\nmake 1upkeyboards/sweet16v2/kb2040:default:flash\n```\n\n----------------------------------------\n\nTITLE: QMK Make Command for MiSTress-1200\nDESCRIPTION: This command builds the QMK firmware for the Amiga 1200 keyboard converter using a MiSTress-1200 conversion kit. It compiles the code with the default configuration and generates the firmware file to be flashed onto the microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/converter/a1200/readme.md#_snippet_4\n\nLANGUAGE: makefile\nCODE:\n```\nmake converter/a1200/mistress1200:default\n```\n\n----------------------------------------\n\nTITLE: Flashing ydkb/ydpm40 Firmware with Make\nDESCRIPTION: This command uses the `make` command to build and flash the default firmware for the ydkb/ydpm40 keyboard. It assumes the QMK build environment has been set up and the necessary flashing tools are installed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ydkb/ydpm40/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake ydkb/ydpm40:default:flash\n```\n\n----------------------------------------\n\nTITLE: Initializing Wii controller with pairing\nDESCRIPTION: This code snippet demonstrates how to initialize the Wii controller library with Bluetooth pairing enabled. The `PAIR` parameter initiates the pairing process, requiring the user to press the sync buttons on the controller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/lib/usbhost/USB_Host_Shield_2.0/README.md#_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nWII Wii(&Btd, PAIR);\n```\n\n----------------------------------------\n\nTITLE: Making RS60 Rev2 VIA Firmware\nDESCRIPTION: This command builds the firmware for the RS60 Rev2 keyboard using the QMK build environment and enabling VIA support. It compiles the keymap located in the `xelus/rs60/rev2_1` directory with the `via` keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/xelus/rs60/rev2_1/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake xelus/rs60/rev2_1:via\n```\n\n----------------------------------------\n\nTITLE: Flashing Sweeq Keyboard Firmware\nDESCRIPTION: This command flashes the compiled firmware onto the Sweeq keyboard. It requires the QMK build environment to be set up and the keyboard to be connected to the computer. The `flash` target uses the appropriate flashing tool based on the keyboard's bootloader.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/idank/sweeq/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake idank/sweeq:default:flash\n```\n\n----------------------------------------\n\nTITLE: Unload Font (C)\nDESCRIPTION: This snippet defines the `qp_close_font` function, which releases the resources related to a previously loaded font. It is important to call this function when a font is no longer needed to free up memory.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/quantum_painter.md#_snippet_74\n\nLANGUAGE: c\nCODE:\n```\nbool qp_close_font(painter_font_handle_t font);\n```\n\n----------------------------------------\n\nTITLE: Building Kudox Full Firmware (QMK)\nDESCRIPTION: This command builds the QMK firmware for the Kudox Full keyboard (rev1) with the default keymap. It requires a properly configured QMK build environment. The resulting firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kumaokobo/kudox_full/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake kumaokobo/kudox_full/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Defining Bootloader in QMK rules.mk\nDESCRIPTION: Specifies the bootloader to use.  Options include `atmel-dfu`, `lufa-dfu`, `qmk-dfu`, `qmk-hid`, `halfkay`, `caterina`, `bootloadhid`, and `usbasploader`. This determines how the firmware is flashed to the microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/config_options.md#_snippet_117\n\nLANGUAGE: makefile\nCODE:\n```\nBOOTLOADER = atmel-dfu\n```\n\n----------------------------------------\n\nTITLE: Building Hotdog Pad Firmware (QMK)\nDESCRIPTION: This command builds the default keymap for the Hotdog Pad keyboard using the QMK firmware build environment.  It relies on the QMK build environment being properly configured.  The output is a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/onnenon/hotdog_pad/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake onnenon/hotdog_pad:default\n```\n\n----------------------------------------\n\nTITLE: Define PLANCK_EZ_USER_LEDS in config.h\nDESCRIPTION: This preprocessor definition disables the default behavior of changing the indicator LEDs based on layer indication.  This allows users to manually control the LEDs. It needs to be added to the `config.h` file of your keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/zsa/planck_ez/readme.md#_snippet_4\n\nLANGUAGE: c\nCODE:\n```\n#define PLANCK_EZ_USER_LEDS\n```\n\n----------------------------------------\n\nTITLE: Flashing DirectPins Keyboard with QMK\nDESCRIPTION: This command flashes the compiled DirectPins keyboard firmware to an RP2040-based board using the QMK command-line tool. It specifies the keyboard and keymap to use for flashing. Assumes the board is connected and QMK is configured correctly for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ez_maker/directpins/rp2040/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nqmk flash -kb ez_maker/directpins/rp2040 -km default\n```\n\n----------------------------------------\n\nTITLE: Flashing Trailmix Keyboard Firmware\nDESCRIPTION: This command flashes the default firmware to the Trailmix keyboard. It utilizes the QMK build environment and assumes the keyboard is connected and in a flashable state (e.g., bootloader mode). Flash one side of the split keyboard at a time.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/rainkeebs/trailmix/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake rainkeebs/rainkeeb:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing VKR 94 Firmware (QMK)\nDESCRIPTION: This command builds and flashes the default firmware for the Viktus VKR 94 keyboard. It requires the QMK build environment to be configured and the necessary flashing tools to be installed. The process will overwrite the existing firmware on the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/viktus/vkr94/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake viktus/vkr94:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building QMK Firmware for Lin EM.8\nDESCRIPTION: This command builds the default QMK firmware for the Lin EM.8 keyboard. It requires the QMK build environment to be properly set up. The output will be a .hex or .bin file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/linworks/em8/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake linworks/em8:default\n```\n\n----------------------------------------\n\nTITLE: RGB Matrix Layout Configuration JSON\nDESCRIPTION: This JSON snippet provides an example of configuring an LED in the RGB Matrix layout. It defines the LED's matrix position, x and y coordinates, and associated flags which describe the type of LED.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/reference_info_json.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\"matrix\": [2, 1], \"x\": 20, \"y\": 48, \"flags\": 2}\n```\n\n----------------------------------------\n\nTITLE: Building Firmware - QMK\nDESCRIPTION: This command builds the QMK firmware for the adpenrose/mine keyboard with the default keymap.  It assumes that the QMK build environment has already been set up. The resulting firmware can then be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/adpenrose/mine/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake adpenrose/mine:default\n```\n\n----------------------------------------\n\nTITLE: Selecting Bitbang Driver in rules.mk\nDESCRIPTION: This snippet demonstrates how to select the bitbang driver for WS2812 LEDs in the `rules.mk` file.  The bitbang driver directly toggles the GPIO to control the LEDs. This is the default driver and is often the only option for AVR devices.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/ws2812.md#_snippet_3\n\nLANGUAGE: Make\nCODE:\n```\nWS2812_DRIVER = bitbang\n```\n\n----------------------------------------\n\nTITLE: Building Compensator Firmware (QMK)\nDESCRIPTION: This command builds the default keymap for the Compensator keyboard using the QMK build environment. It assumes the QMK build environment is already set up. The output will be a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/compensator/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake compensator:default\n```\n\n----------------------------------------\n\nTITLE: Building and Flashing QMK Firmware for E6-V2 LE\nDESCRIPTION: This command builds and flashes the default QMK firmware for the E6-V2 LE keyboard using DFU. It requires a properly configured QMK build environment and a DFU bootloader on the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/exclusive/e6v2/le/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake exclusive/e6v2/le:default:dfu\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for Shapeshifter 4060 with Proton C\nDESCRIPTION: Builds the default firmware for the Shapeshifter 4060 keyboard, configured for use with a Proton C controller. This command compiles the keyboard's firmware with settings optimized for the Proton C. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/shapeshifter4060/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake shapeshifter4060:default CONVERT_TO=proton_c\n```\n\n----------------------------------------\n\nTITLE: Building Diverge3 Keyboard with Workman Layout (QMK)\nDESCRIPTION: This command builds the firmware for the Diverge3 keyboard using the Workman layout. It assumes that the QMK build environment is already set up. The output firmware can then be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/unikeyboard/diverge3/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake unikeyboard/diverge3:workman\n```\n\n----------------------------------------\n\nTITLE: Building ScottoErgo Keyboard Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the ScottoErgo keyboard using the QMK build environment. It requires QMK firmware to be set up correctly. The output is a .hex or .bin file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/scottokeebs/scottoergo/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/scottokeebs/scottoergo:default\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for Posey Split V4\nDESCRIPTION: This command builds the default firmware for the posey_split/v4 keyboard.  It assumes that the QMK build environment has already been set up. The built firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/pmk/posey_split/v4/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake pmk/posey_split/v4:default\n```\n\n----------------------------------------\n\nTITLE: Including Font Header File (C)\nDESCRIPTION: This snippet shows how to include the header file for a QFF font in your `keymap.c` file, making the font accessible in your code.  Replace `noto11.qff.h` with the actual header file name.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/quantum_painter.md#_snippet_72\n\nLANGUAGE: c\nCODE:\n```\n#include \"noto11.qff.h\"\n```\n\n----------------------------------------\n\nTITLE: Building RoPro Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the RoPro keyboard using QMK.  It requires QMK build environment to be set up. The output will be a .hex or .bin file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kingly_keys/ropro/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake kingly_keys/ropro:default\n```\n\n----------------------------------------\n\nTITLE: Building Pteron44 Firmware with Make\nDESCRIPTION: This command builds the QMK firmware for the Pteron44 keyboard with the default keymap. It assumes that the QMK build environment has been set up correctly. The output is a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/pteron44/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/pteron44:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware to Pizza Pad PCB\nDESCRIPTION: This command is used to flash the built firmware to the idyllic/pizzapad keyboard. It assumes that the QMK build environment has already been set up and the keyboard is in a state ready to be flashed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/idyllic/pizzapad/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake idyllic/pizzapad:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building DB60 (J-02) Firmware with QMK\nDESCRIPTION: This command builds the firmware for the original CannonKeys DB60 (J-02) keyboard using the QMK build environment.  It assumes that the QMK build environment is properly configured. The `default` keyword specifies the default keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cannonkeys/db60/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake cannonkeys/db60/j02:default\n```\n\n----------------------------------------\n\nTITLE: Building EllipseRev1 Firmware with QMK\nDESCRIPTION: This command builds the QMK firmware for the EllipseRev1 keyboard with the default keymap and uses the DFU bootloader for flashing. It assumes that the QMK build environment has already been set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/abstract/ellipse/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake abstract/ellipse/rev1:default:dfu\n```\n\n----------------------------------------\n\nTITLE: Building Matrix ABELX Keyboard Firmware\nDESCRIPTION: This command builds the QMK firmware for the Matrix ABELX keyboard with the default keymap.  It requires a properly configured QMK build environment. Ensure that the QMK repository is set up correctly before executing this command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/matrix/abelx/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake matrix/abelx:default\n```\n\n----------------------------------------\n\nTITLE: Flashing KBD19x Firmware\nDESCRIPTION: This command flashes the built firmware to the KBD19x keyboard. It uses the `make` command with the target `kbdfans/kbd19x:default:flash`.  It depends on a functional QMK build environment and a connected KBD19x keyboard in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kbdfans/kbd19x/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake kbdfans/kbd19x:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Sango Firmware with QMK\nDESCRIPTION: This command is used to build the default firmware for the Sango keyboard.  It compiles the source code into a firmware image that can be flashed onto the keyboard.  It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/aidansmithdotdev/sango/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake aidansmithdotdev/sango:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Keyboard Firmware with QMK\nDESCRIPTION: This command builds and flashes the firmware to a specific keyboard with the default keymap. It requires the QMK build environment to be set up correctly and a configured flashing tool. The keyboard name must be substituted for '%KEYBOARD%'.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/data/templates/keyboard/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake %KEYBOARD%:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Mulletpad Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Mulletpad numpad using the QMK build environment. It assumes that the QMK build environment has already been set up. The command targets the atmega32u4 microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/coseyfannitutti/mulletpad/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake coseyfannitutti/mulletpad:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Pro Micro Left Side\nDESCRIPTION: This command flashes the left side of the Keyhive Sofle keyboard with the default keymap using the avrdude-split-left target, suitable for Pro Micro-based builds. Ensure the correct bootloader is selected for the Pro Micro.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/sofle/keyhive/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake sofle/keyhive:default:avrdude-split-left\n```\n\n----------------------------------------\n\nTITLE: Flashing Flowerpad Firmware with QMK\nDESCRIPTION: This command flashes the compiled firmware onto the Flowerpad macropad. It utilizes the QMK build environment and a compatible flashing tool. The command assumes the device is in a flashable state, typically requiring the bootloader to be active.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/marshkeys/flowerpad/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake marshkeys/flowerpad:default:flash\n```\n\n----------------------------------------\n\nTITLE: Enabling iOS Device Support in rules.mk\nDESCRIPTION: This snippet shows how to enable support for iOS devices (iPad/iPhone) by modifying the `IOS_DEVICE_ENABLE` option in `rules.mk`. Setting it to `yes` enables iOS connectivity.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/helix/pico/keymaps/default/readme_jp.md#_snippet_2\n\nLANGUAGE: Makefile\nCODE:\n```\nIOS_DEVICE_ENABLE = no      # connect to IOS device (iPad,iPhone)\n```\n\n----------------------------------------\n\nTITLE: Building Snagpad Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the Snagpad keyboard using the QMK build environment.  It requires the QMK build environment to be set up. The output is the compiled firmware ready to be flashed onto the Pro Micro controller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/flehrad/snagpad/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake flehrad/snagpad:default\n```\n\n----------------------------------------\n\nTITLE: Compiling for All Keyboards Supporting a Keymap - qmk compile\nDESCRIPTION: This command compiles firmware for all keyboards that support a specific keymap. It utilizes the `-kb all` flag in conjunction with the `-km` flag to specify the desired keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/cli_commands.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nqmk compile -kb all -km <keymap_name>\n```\n\n----------------------------------------\n\nTITLE: Flashing the phantagom/varan Keyboard\nDESCRIPTION: This snippet provides the command to flash the default keymap for the phantagom/varan keyboard using the QMK build environment. This command builds the keymap and then flashes it to the keyboard. It assumes the build environment has been setup.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/phantagom/varan/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake phantagom/varan:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Zwag75 Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Zwag75 keyboard using the QMK build environment. It requires the QMK build environment to be set up correctly. The output is a .hex or .bin file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/zwag/zwag75/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake zwag75:default\n```\n\n----------------------------------------\n\nTITLE: Building Allison Keyboard Firmware\nDESCRIPTION: This command builds the QMK firmware for the Allison keyboard with the default keymap.  It assumes that the QMK build environment is properly set up. The `make` command compiles the firmware and prepares it for flashing to the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/prototypist/allison/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake prototypist/allison:default\n```\n\n----------------------------------------\n\nTITLE: Building EDC40 Firmware (QMK)\nDESCRIPTION: This command builds the default keymap for the EDC40 keyboard using the QMK Firmware build environment.  It requires a properly configured QMK build environment. The output will be the firmware file that can be flashed onto the EDC40 keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/edc40/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake edc40:default\n```\n\n----------------------------------------\n\nTITLE: Building the default firmware for null/st110r2 keyboard\nDESCRIPTION: This command builds the default firmware for the null/st110r2 keyboard. It relies on the QMK build environment being properly configured. The command compiles the keymap and core firmware to generate a .hex or .bin file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/null/st110r2/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake null/st110r2:default\n```\n\n----------------------------------------\n\nTITLE: Compiling and Flashing Firmware\nDESCRIPTION: This command compiles the default firmware for the Noxary Valhalla V2 keyboard and then directly flashes it to the PCB after the keyboard is put into DFU mode.  It assumes the QMK build environment is configured.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/noxary/valhalla_v2/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake noxary/valhalla_v2:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Planck Light Firmware with Make\nDESCRIPTION: This command builds the default firmware for the Planck Light keyboard using the QMK build environment.  It utilizes the `make` command with the target specified as `planck/light:default`. This assumes the QMK build environment is properly set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/planck/light/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake planck/light:default\n```\n\n----------------------------------------\n\nTITLE: Flashing the null/st110r2 keyboard with default firmware\nDESCRIPTION: This command builds and flashes the default firmware to the null/st110r2 keyboard. It depends on the QMK build environment and requires that the bootloader is accessible. It combines the build and flash steps into one.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/null/st110r2/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake null/st110r2:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Alternative Keymap - QMK\nDESCRIPTION: This command builds an alternative, heavily modified keymap (LEdiodes) for the Atom47 rev2 keyboard using the QMK Firmware build system. It assumes that the QMK build environment is properly set up and configured.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/evyd13/atom47/rev2/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake atom47/rev2:LEdiodes\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for LBS4 Keyboard\nDESCRIPTION: This command builds the default firmware for the tweetydabird/lbs4 keyboard. It requires a properly configured QMK build environment. This command compiles the keyboard firmware and prepares it for flashing onto the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/tweetydabird/lbs4/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake tweetydabird/lbs4:default\n```\n\n----------------------------------------\n\nTITLE: Building Type-B Keyboard Firmware with Make\nDESCRIPTION: This command builds the default firmware for the Type-B keyboard using the QMK build environment. It requires the QMK build environment to be set up correctly. The output will be a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cannonkeys/typeb/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake cannonkeys/typeb:default\n```\n\n----------------------------------------\n\nTITLE: Flashing the split75 Firmware with bootloadHID\nDESCRIPTION: This command uses the `bootloadHID` utility to flash a pre-compiled `.hex` file to the split75 keyboard. It requires that the keyboard be in bootloader mode and that the `bootloadHID` utility be installed and accessible in the system's PATH.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mt/split75/readme.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nbootloadHID -r split75_default.hex\n```\n\n----------------------------------------\n\nTITLE: Building 1up60rgb Keyboard Firmware\nDESCRIPTION: This snippet shows the `make` command used to build the default firmware for the 1up60rgb keyboard. This command should be executed after setting up the QMK build environment. It generates the firmware that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/1upkeyboards/1up60rgb/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake 1upkeyboards/1up60rgb:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Ergomirage Firmware\nDESCRIPTION: This command builds and flashes the default firmware for the Ergomirage keyboard. It requires the QMK build environment to be set up correctly and the keyboard to be in bootloader mode. The firmware will be built and then flashed to the connected keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/takashicompany/ergomirage/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake takashicompany/ergomirage:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing EC Pro2 Firmware with QMK\nDESCRIPTION: This command flashes the default firmware to the EC Pro2 keyboard using the QMK build environment. It requires a properly configured QMK build environment and a connected EC Pro2 keyboard in a flashable state. The command programs the firmware onto the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cipulot/ec_pro2/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake cipulot/ec_pro2:default:flash\n```\n\n----------------------------------------\n\nTITLE: Clear Display Screen with `qp_clear` in C\nDESCRIPTION: The `qp_clear` function clears the entire display screen. It accepts a `painter_device_t` object as its parameter and resets all pixels to a default state (usually black or transparent).\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/quantum_painter.md#_snippet_47\n\nLANGUAGE: c\nCODE:\n```\nbool qp_clear(painter_device_t device);\n```\n\n----------------------------------------\n\nTITLE: Building Miryoku keymap for Pteron36 (make)\nDESCRIPTION: This command builds the firmware with the manna-harbour_miryoku keymap for the Pteron36 keyboard. It depends on the QMK build environment and the existence of the specified keymap. The resulting firmware incorporates the Miryoku layout.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/pteron36/readme.md#_snippet_2\n\nLANGUAGE: make\nCODE:\n```\nmake pteron36:manna-harbour_miryoku\n```\n\n----------------------------------------\n\nTITLE: Building B.face Firmware with Make\nDESCRIPTION: This command builds the default firmware for the B.face keyboard using the `make` command. It specifies the keyboard layout (`winkeyless/bface`) and the keymap (`default`).  This assumes a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/winkeyless/bface/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake winkeyless/bface:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Pro Micro Right Side\nDESCRIPTION: This command flashes the right side of the Keyhive Sofle keyboard with the default keymap using the avrdude-split-right target, suitable for Pro Micro-based builds. Ensure the correct bootloader is selected for the Pro Micro.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/sofle/keyhive/readme.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmake sofle/keyhive:default:avrdude-split-right\n```\n\n----------------------------------------\n\nTITLE: Configuring scaling registers - Single-Color LED - C\nDESCRIPTION: Configures the scaling register for a single LED on a single-color IS31FL3746A driver. This function takes the LED index and a single scaling value as input. The scaling register value is not applied until `is31fl3746a_update_scaling_registers()` is called.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/is31fl3746a.md#_snippet_8\n\nLANGUAGE: C\nCODE:\n```\nvoid is31fl3746a_set_scaling_register(uint8_t index, uint8_t value)\n```\n\n----------------------------------------\n\nTITLE: Building LFK78/68 Firmware\nDESCRIPTION: This command builds the default firmware for the LFK78/68 keyboard. It requires a properly configured QMK build environment.  It compiles the keyboard layout defined under the `lfkeyboards/lfk78` directory with the `default` keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/lfkeyboards/lfk78/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake lfkeyboards/lfk78:default\n```\n\n----------------------------------------\n\nTITLE: Building DZ60RGB V2 Firmware\nDESCRIPTION: This command builds the default firmware for the DZ60RGB V2 keyboard, which uses an ATmega32U4 (AVR) microcontroller. It requires a correctly configured QMK build environment.  The output will be a .hex file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/dztech/dz60rgb/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake dztech/dz60rgb/v2:default # AVR (ATmega32U4)\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware with AVRDUDE via QMK\nDESCRIPTION: This command flashes the compiled firmware to the Arduino Micro using AVRDUDE. It assumes AVRDUDE is configured correctly in the QMK environment. Press the reset button on the Micro after running the command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/magicforce68/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake handwired/magicforce68:default:avrdude\n```\n\n----------------------------------------\n\nTITLE: Building Diverge3 Keyboard with Default Keymap (QMK)\nDESCRIPTION: This command builds the firmware for the Diverge3 keyboard using the default keymap. It assumes that the QMK build environment is already set up. The output firmware can then be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/unikeyboard/diverge3/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake unikeyboard/diverge3:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware to Posey Split V4\nDESCRIPTION: This command builds and flashes the default firmware for the posey_split/v4 keyboard. It requires a properly configured QMK build environment and a connected keyboard in a flashable state (e.g., bootloader mode).\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/pmk/posey_split/v4/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake pmk/posey_split/v4:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Twig50 Keyboard Firmware (QMK)\nDESCRIPTION: This command builds the default keymap for the Twig50 keyboard using the QMK build environment.  It compiles the firmware, creating a .hex file ready for flashing. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/twig/twig50/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake handwired/twig/twig50:default\n```\n\n----------------------------------------\n\nTITLE: Building XT87 Firmware\nDESCRIPTION: This command builds the default firmware for the XT87 keyboard. It utilizes the `make` command within the QMK Firmware environment, targeting the `kopibeng/xt87` keyboard and the `default` keymap. It assumes the QMK build environment is already set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kopibeng/xt87/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake kopibeng/xt87:default\n```\n\n----------------------------------------\n\nTITLE: Flashing QMK Firmware for Lemonpad\nDESCRIPTION: This command flashes the compiled QMK firmware to the handwired/lemonpad keyboard using the default keymap. It requires the QMK build environment and a connected microcontroller with a suitable bootloader.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/lemonpad/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake handwired/lemonpad:default:flash\n```\n\n----------------------------------------\n\nTITLE: Setting Brightness for All LEDs in QMK (C)\nDESCRIPTION: This function sets the brightness of all LEDs in the matrix to the same value. It requires a single brightness value as input and must be called within an effect or indicator callback function.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/led_matrix.md#_snippet_17\n\nLANGUAGE: C\nCODE:\n```\nvoid led_matrix_set_value_all(uint8_t v)\n```\n\n----------------------------------------\n\nTITLE: Building suihankey/rev1 Firmware\nDESCRIPTION: This command builds the default firmware for the suihankey/rev1 keyboard using the QMK build environment. It assumes that the QMK build environment is already set up. The resulting firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kakunpc/suihankey/rev1/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake suihankey/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Unregistering a Keycode in QMK\nDESCRIPTION: This code snippet demonstrates how to unregister a keycode, effectively releasing a key press, using the `unregister_code()` function in QMK Firmware. The function takes a keycode constant as an argument. Failing to unregister will cause the key to be held down.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/feature_macros.md#_snippet_11\n\nLANGUAGE: c\nCODE:\n```\nunregister_code(<kc>);\n```\n\n----------------------------------------\n\nTITLE: Flashing the M60 Keyboard Firmware (QMK)\nDESCRIPTION: This command flashes the QMK firmware onto the M60 keyboard with the rev1 PCB and default keymap. It uploads the compiled firmware to the keyboard's microcontroller, allowing it to function according to the defined keymap and settings.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mlego/m60/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake mlego/m60/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Building QMK Firmware for xMK\nDESCRIPTION: This command builds the default firmware for the xMK keyboard using the QMK build environment.  It compiles the keyboard definition and generates a .hex file that can be flashed to the keyboard.  Requires QMK build environment to be set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/converter/xmk/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake converter/xmk:default\n```\n\n----------------------------------------\n\nTITLE: Defining Enums for Tap Dance Examples\nDESCRIPTION: This defines an enum containing values used for tap dance examples, this include TD_ESC_CAPS from the previous example as well as some other example values.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/tap_dance.md#_snippet_3\n\nLANGUAGE: c\nCODE:\n```\n// Enums defined for all examples:\nenum {\n    TD_ESC_CAPS,\n    CT_EGG,\n    CT_FLSH,\n    CT_CLN,\n    X_CTL,\n};\n```\n\n----------------------------------------\n\nTITLE: Building NCR80 ALPS SKFL Firmware\nDESCRIPTION: This command builds the default firmware for the NCR80 ALPS SKFL keyboard. It requires a properly configured QMK build environment.  The output will be a .hex or .bin file suitable for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/salane/ncr80alpsskfl/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake salane/ncr80alpsskfl:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Mikeneko 65 Keyboard Firmware\nDESCRIPTION: This command flashes the default firmware to the Mikeneko 65 keyboard. It requires a properly configured QMK build environment and a connected keyboard in bootloader mode. The target device will be overwritten with the compiled firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mikeneko65/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake mikeneko65:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building fungo/rev1 keyboard\nDESCRIPTION: This command builds the default keymap for the fungo/rev1 keyboard using the QMK firmware build environment.  It requires the QMK build environment to be set up beforehand. The resulting firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/fungo/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake fungo/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Building QK100 Firmware - Make Command\nDESCRIPTION: This command builds the QMK firmware for the QK100 solder PCB keyboard with the default keymap. It compiles the source code and creates a firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/qwertykeys/qk100/solder/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake qwertykeys/qk100/solder:default\n```\n\n----------------------------------------\n\nTITLE: Building BM60HSRGB_ISO/rev1 Firmware\nDESCRIPTION: This command builds the default firmware for the BM60HSRGB_ISO/rev1 keyboard using the QMK build environment. It compiles the source code and generates a firmware image that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kprepublic/bm60hsrgb_iso/rev1/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake kprepublic/bm60hsrgb_iso/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Building pistachio/rev2 with default keymap\nDESCRIPTION: This command compiles the QMK firmware for the pistachio/rev2 keyboard using the default keymap. It requires a properly configured QMK build environment. The resulting firmware can then be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/rate/pistachio/rev2/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake pistachio/rev2:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Haven65 Firmware (QMK)\nDESCRIPTION: This command builds and flashes the default keymap to the Haven65 keyboard. It requires QMK build environment to be set up and the correct flashing tools to be installed. The board needs to be in bootloader mode to receive the flash.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ah/haven65/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake ah/haven65:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building the Sodium50 Keyboard Firmware - QMK\nDESCRIPTION: This command builds the default keymap for the sodium50 keyboard using the QMK firmware. It requires the QMK build environment to be set up. The output will be a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/nacly/sodium50/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake nacly/sodium50:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware to CXT Studio 12E3 with QMK\nDESCRIPTION: This command builds and flashes the default firmware for the CXT Studio 12E3 keyboard using the QMK build environment. It requires the QMK environment to be properly set up and the necessary flashing tools to be installed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cxt_studio/12e3/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake cxt_studio/12e3:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Mino Plus Hotswap Firmware\nDESCRIPTION: This command builds the firmware for the Mino Plus keyboard with the hotswap layout using the default keymap. It requires a properly configured QMK build environment. The resulting firmware can then be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/shandoncodes/mino_plus/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake shandoncodes/mino_plus/hotswap:default\n```\n\n----------------------------------------\n\nTITLE: Building the ergoarrows keyboard firmware\nDESCRIPTION: This command builds the default firmware for the ergoarrows keyboard.  It requires QMK build environment to be set up. The command assumes the keyboard name is `salicylic_acid3/ergoarrows` and uses the `default` keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/salicylic_acid3/ergoarrows/readme.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmake salicylic_acid3/ergoarrows:default\n```\n\n----------------------------------------\n\nTITLE: Defining MK_COMBINED for Combined Speed Mode in QMK (C)\nDESCRIPTION: This code snippet demonstrates how to enable combined speed mode for mouse keys in QMK firmware by defining `MK_COMBINED` in the `config.h` file.  This mode combines accelerated and constant speed functionalities. Requires the QMK firmware environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/mouse_keys.md#_snippet_3\n\nLANGUAGE: c\nCODE:\n```\n#define MK_COMBINED\n```\n\n----------------------------------------\n\nTITLE: Building Firmware - Makefile\nDESCRIPTION: This command builds the default firmware for the BAGUETTE66_SOLDERED keyboard using the `make` command. It specifies the keyboard, layout (soldered), and default keymap. Requires QMK build environment to be set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kbdfans/baguette66/soldered/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake kbdfans/baguette66/soldered:default\n```\n\n----------------------------------------\n\nTITLE: Selecting GeminiPR Protocol\nDESCRIPTION: To select the GeminiPR stenography protocol, add the following lines to your `rules.mk`: `STENO_ENABLE = yes` and `STENO_PROTOCOL = geminipr`. This configures QMK to communicate with Plover using the GeminiPR protocol.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/stenography.md#_snippet_3\n\nLANGUAGE: makefile\nCODE:\n```\nSTENO_ENABLE = yes\nSTENO_PROTOCOL = geminipr\n```\n\n----------------------------------------\n\nTITLE: Building QMK Firmware for nordic65\nDESCRIPTION: This snippet shows how to build the default QMK firmware for the nordic65 keyboard. It assumes the QMK build environment has been set up. The command uses the `make` command followed by the keyboard and keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kbnordic/nordic65/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake kbnordic/nordic65/rev_a:default\n```\n\n----------------------------------------\n\nTITLE: Compile and Flash QMK Firmware with dfu-util\nDESCRIPTION: This command compiles the default QMK firmware for the specified Acheron Apollo variant and then automatically flashes it to the keyboard using `dfu-util`. Ensure the board is in DFU mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/acheron/apollo/readme.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmake acheron/apollo/<variant>:default:flash\n```\n\n----------------------------------------\n\nTITLE: Setting Keyboard Configuration (Proton C)\nDESCRIPTION: This command sets the keyboard configuration for the QMK build environment to the Redox keyboard revision 1 using the Proton C microcontroller. This step is crucial for the QMK build system to correctly identify and build the firmware for the specific keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/redox/rev1/readme.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nqmk config user.keyboard=redox/rev1/proton_c\n```\n\n----------------------------------------\n\nTITLE: Building the Bakeneko 65 V2 keyboard firmware\nDESCRIPTION: This command builds the default firmware for the Bakeneko 65 V2 keyboard using the QMK build environment. It compiles the keyboard's keymap and firmware into a hex file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kkatano/bakeneko65/rev2/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake kkatano/bakeneko65/rev2:default\n```\n\n----------------------------------------\n\nTITLE: Building GRS-70EC Keyboard Firmware (QMK)\nDESCRIPTION: This command builds the firmware for the GRS-70EC keyboard with the default keymap using the QMK build environment. It compiles the source code and generates the firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/sekigon/grs_70ec/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake sekigon/grs_70ec:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Cycle8 Firmware (QMK)\nDESCRIPTION: This command flashes the default firmware onto the Cycle8 keyboard using the QMK build environment. It builds the firmware and then attempts to flash it to the keyboard.  Requires the QMK build environment to be set up and the keyboard to be in a flashable state.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/vertex/cycle8/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake vertex/cycle8:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building YD68 Default Keymap\nDESCRIPTION: This snippet shows how to build the default keymap for the YD68 keyboard using the QMK build system. It uses the `make` command with the target `ydkb/yd68:default`. Requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ydkb/yd68/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake ydkb/yd68:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Gergo Firmware (dfu-programmer)\nDESCRIPTION: This command compiles and flashes the default keymap for the ErgoTaco keyboard using dfu-programmer. It requires QMK firmware to be set up and dfu-programmer installed. After flashing, the keyboard needs to be reset.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/gboards/ergotaco/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake gboards/ergotaco:default:dfu\n```\n\n----------------------------------------\n\nTITLE: Install ST-Link and OpenOCD on macOS\nDESCRIPTION: Installs the stlink and openocd packages using the Homebrew package manager on macOS. These tools are required for communicating with the ST-Link programmer and flashing the STM32 Bluepill.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/isp_flashing_guide.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbrew install stlink openocd\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for Bruce le Clavier\nDESCRIPTION: This command builds the default firmware for the Bruce le Clavier keyboard using the QMK build environment.  It compiles the keyboard layout and features into a firmware image ready for flashing. The command must be executed within the QMK Firmware environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/jlw/bruce_le_clavier/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake jlw/bruce_le_clavier:default\n```\n\n----------------------------------------\n\nTITLE: Flashing KBIC65 Firmware (QMK)\nDESCRIPTION: This command flashes the compiled firmware onto the KBIC65 keyboard using the QMK environment. It specifies the `karlb/kbic65` keyboard and the `default` keymap. Ensure the QMK environment is properly configured before running this command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/karlb/kbic65/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nqmk flash -kb karlb/kbic65 -km default\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware - QMK Makefile\nDESCRIPTION: This command builds and flashes the default firmware to the Teahouse Ayleen keyboard. It requires a configured QMK build environment and a connected keyboard in bootloader mode.  The process uploads the compiled firmware to the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/teahouse/ayleen/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake teahouse/ayleen:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Keybow 2040 Firmware\nDESCRIPTION: This command flashes the built firmware onto the Keybow 2040 using the QMK build environment. This requires the device to be in bootloader mode. After flashing, the device will run the new firmware. Requires a correctly setup QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/pimoroni/keybow2040/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake pimoroni/keybow2040:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Keycult 1800 Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the Keycult 1800 keyboard using the QMK build environment.  It requires the QMK build environment to be properly set up. The resulting firmware can be flashed onto the keyboard using QMK Toolbox or dfu-util.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keycult/keycult1800/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake keycult/keycult1800:default\n```\n\n----------------------------------------\n\nTITLE: Building ID75 Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the ID75 keyboard (v1) using the QMK build environment. It requires QMK to be properly set up according to the linked documentation. The resulting firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/idobao/id75/v1/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake idobao/id75/v1:default\n```\n\n----------------------------------------\n\nTITLE: Compiling with OLED Disabled and RGB Backlight Enabled\nDESCRIPTION: This snippet demonstrates how to compile the firmware with OLED disabled and RGB backlighting enabled.  It combines the `HELIX=no-oled` option with the `helix/rev2/back` keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/helix/rev2/keymaps/default/readme_jp.md#_snippet_12\n\nLANGUAGE: makefile\nCODE:\n```\n$ make HELIX=no-oled helix/rev2/back:default:flash\n```\n\n----------------------------------------\n\nTITLE: Compiling and flashing Zinc firmware\nDESCRIPTION: This command compiles the Zinc keyboard firmware with the 'default' keymap and simultaneously flashes (writes) it to the keyboard's microcontroller using `avrdude`. This combines the compilation and flashing steps for convenience.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/25keys/zinc/keymaps/default/readme_jp.md#_snippet_2\n\nLANGUAGE: Makefile\nCODE:\n```\n$ make zinc:default:avrdude\n```\n\n----------------------------------------\n\nTITLE: Building QMK Firmware for Ziyoulang K3\nDESCRIPTION: This command builds the QMK firmware for the Ziyoulang K3 keyboard with the default keymap.  It uses the `make` command with the target `handwired/ziyoulang_k3_mod:default`. This assumes the QMK build environment has been set up correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/ziyoulang_k3_mod/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake handwired/ziyoulang_k3_mod:default\n```\n\n----------------------------------------\n\nTITLE: Flashing TKC Candybar Firmware\nDESCRIPTION: This command compiles and flashes the default firmware for the TKC Candybar keyboard (lefty_r3 variant) using the `make` command within the QMK Firmware environment. It assumes the QMK build environment is already set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/tkc/candybar/lefty_r3/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake tkc/candybar/lefty_r3:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building M10-A Firmware\nDESCRIPTION: This command builds the default firmware for the Rama Works M10-A macropad using the `make` command.  It requires a properly configured QMK build environment and will generate the firmware binary.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/m10a/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake m10a:default\n```\n\n----------------------------------------\n\nTITLE: Building QMK Firmware for A-JAZZ AKC084\nDESCRIPTION: This command compiles the QMK firmware for the A-JAZZ AKC084 keyboard with the default keymap.  It requires a properly configured QMK build environment. The output will be a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/a_jazz/akc084/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake a_jazz/akc084:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Kintsugi Firmware\nDESCRIPTION: This command flashes the default firmware to the Kintsugi keyboard using the QMK build environment. It requires the QMK build environment to be set up correctly, and the keyboard to be in bootloader mode. It depends on dfu-programmer or similar tools being available.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/adpenrose/kintsugi/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake kintsugi:default:flash\n```\n\n----------------------------------------\n\nTITLE: Setting LED brightness value - Single LED - C\nDESCRIPTION: Sets the brightness value of a single LED for single-color drivers using the IS31FL3746A. It requires the LED index and the desired brightness value as input. The brightness value is not immediately updated until `is31fl3746a_update_pwm_buffers()` is called.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/is31fl3746a.md#_snippet_5\n\nLANGUAGE: C\nCODE:\n```\nvoid is31fl3746a_set_value(int index, uint8_t value)\n```\n\n----------------------------------------\n\nTITLE: Flashing Keyboard Firmware with Make\nDESCRIPTION: This command builds and flashes the firmware to the ScottoLong keyboard with the default keymap. It requires a properly configured QMK build environment and a connected keyboard in bootloader mode.  This command uploads the compiled firmware to the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/scottokeebs/scottolong/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/scottokeebs/scottolong:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Keyboard Firmware (QMK)\nDESCRIPTION: This command builds the firmware for the DeskDaily Conde60 keyboard with the default keymap. It requires a properly configured QMK build environment. The output is a .hex file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/nightly_boards/conde60/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake nightly_boards/conde60:default\n```\n\n----------------------------------------\n\nTITLE: Building Neson Design 700E Firmware\nDESCRIPTION: This command builds the default firmware for the Neson Design 700E keyboard using the QMK build environment. It requires the QMK build environment to be set up correctly.  The output is the compiled firmware ready to be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/neson_design/700e/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake neson_design/700e:default\n```\n\n----------------------------------------\n\nTITLE: Building XD96 Keyboard Firmware (QMK)\nDESCRIPTION: This command builds the default keymap for the XD96 keyboard using the QMK firmware.  It assumes that the QMK build environment is already set up. It compiles the firmware based on the `xiudi/xd96:default` configuration.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/xiudi/xd96/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake xiudi/xd96:default\n```\n\n----------------------------------------\n\nTITLE: Building Ergocheap Keyboard Firmware\nDESCRIPTION: This command builds the firmware for the Ergocheap handwired keyboard with the default keymap. It requires a properly set up QMK build environment. The output is a firmware file that can be flashed to the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/ergocheap/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/ergocheap:default\n```\n\n----------------------------------------\n\nTITLE: Flashing the QMK Firmware\nDESCRIPTION: This command builds and flashes the QMK firmware for the kisakeyluxury/qtz keyboard with the default keymap. It assumes the QMK build environment has been set up correctly, and that the keyboard is in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kisakeyluxury/qtz/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake kisakeyluxury/qtz:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing RART75M Keyboard Firmware\nDESCRIPTION: This command flashes the compiled firmware onto the RART75M keyboard. It uses the QMK build environment's flashing tools to upload the firmware to the keyboard's microcontroller.  Ensure the keyboard is connected and in a state ready to receive the firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/rart/rart75m/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake rart/rart75m:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing dymium65 firmware\nDESCRIPTION: This command flashes the built firmware onto the dymium65 keyboard. It requires the QMK build environment to be set up and the keyboard to be in bootloader mode. This uses the dfu-programmer or similar tool configured within QMK.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/dotmod/dymium65/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake dotmod/dymium65:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Function96v2 Firmware - QMK\nDESCRIPTION: This command builds the default keymap for the Function96v2 keyboard using the QMK firmware build environment.  It assumes that the QMK build environment is already set up. The resulting firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/function96/v2/readme.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmake function96/v2:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Kudox Game Keyboard Firmware\nDESCRIPTION: This command builds and flashes the firmware for the Kudox Game keyboard, using the avrdude flasher. It targets revision 2 with the default keymap. Requires the QMK build environment and a connected keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kumaokobo/kudox_game/readme.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nmake kumaokobo/kudox_game/rev2:default:avrdude\n```\n\n----------------------------------------\n\nTITLE: Defining USB Suspend Wakeup Delay in QMK config.h\nDESCRIPTION: This code snippet sets the number of milliseconds to pause after sending a wakeup packet. If the keyboard doesn't wake up properly after suspending, set this to 200 (or higher).\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/config_options.md#_snippet_31\n\nLANGUAGE: c\nCODE:\n```\n#define USB_SUSPEND_WAKEUP_DELAY 0\n```\n\n----------------------------------------\n\nTITLE: Making DracuLad with default keymap\nDESCRIPTION: This command builds the firmware for the DracuLad keyboard using the default keymap.  It requires a properly configured QMK build environment. The output will be a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/draculad/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake draculad:default\n```\n\n----------------------------------------\n\nTITLE: Stopping Animation Based on Condition (C)\nDESCRIPTION: This code snippet shows how to conditionally stop an animation using `qp_stop_animation` within the `housekeeping_task_user` function.  It stops the animation if `some_random_stop_reason` is true.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/quantum_painter.md#_snippet_70\n\nLANGUAGE: c\nCODE:\n```\nvoid housekeeping_task_user(void) {\n    if (some_random_stop_reason) {\n        qp_stop_animation(my_anim);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Pointing Device in rules.mk (Make)\nDESCRIPTION: This code snippet shows how to enable the Pointing Device feature in QMK Firmware by adding the `POINTING_DEVICE_ENABLE = yes` line to the `rules.mk` file. This is a prerequisite for using any of the sensor drivers.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/pointing_device.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nPOINTING_DEVICE_ENABLE = yes\n```\n\n----------------------------------------\n\nTITLE: Flashing Keyboard Firmware with Make\nDESCRIPTION: This command builds and flashes the default firmware to the Vanguard65 keyboard. It utilizes the `make` command with the flash target. This assumes a configured QMK build environment and the required tools for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keebfront/vanguard65/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake keebfront/vanguard65:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Atom47 Firmware with Make\nDESCRIPTION: This code snippet demonstrates how to build the QMK firmware for the Atom47 keyboard using the `make` command.  It specifies the keyboard layout (evyd13/atom47), the revision (rev5), and the keymap (default).\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/evyd13/atom47/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake evyd13/atom47/rev5:default\n```\n\n----------------------------------------\n\nTITLE: Enabling Audio in QMK Firmware (rules.mk)\nDESCRIPTION: To enable audio functionality, add `AUDIO_ENABLE = yes` to your `rules.mk` file. This activates the audio features within your QMK keyboard firmware, allowing you to configure and use sound functionalities.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/audio.md#_snippet_0\n\nLANGUAGE: makefile\nCODE:\n```\nAUDIO_ENABLE = yes\n```\n\n----------------------------------------\n\nTITLE: Building Luddite Keyboard Firmware with Make\nDESCRIPTION: This command builds the default firmware for the Luddite keyboard using the QMK build environment. It requires the QMK build environment to be set up correctly. The output will be a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/40percentclub/luddite/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake 40percentclub/luddite:default\n```\n\n----------------------------------------\n\nTITLE: Defining Leader Timeout\nDESCRIPTION: Defines the timeout duration (in milliseconds) for the leader key sequence. If the sequence is not completed within this time, it will be cancelled. Use `LEADER_PER_KEY_TIMING` to reset the timeout after each key press.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/config_options.md#_snippet_52\n\nLANGUAGE: C\nCODE:\n```\n#define LEADER_TIMEOUT 300\n```\n\n----------------------------------------\n\nTITLE: Flashing NavPad 1.0 Firmware (QMK)\nDESCRIPTION: This command flashes the default firmware for the NavPad 1.0 keyboard using the QMK build environment. It requires the build environment to be set up and the keyboard to be connected to the computer. This command compiles and flashes the firmware in one step.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/yushakobo/navpad/10/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake yushakobo/navpad/10:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Slamz Keyboard Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the Slamz keyboard using the QMK build environment. It assumes the build environment has been properly set up. The compiled firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ocean/slamz/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake ocean/slamz:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Frooastboard Walnut Firmware\nDESCRIPTION: This command builds and flashes the default firmware to the Frooastboard Walnut keyboard. It assumes a correctly set up QMK build environment and a connected keyboard in a flashable state. It will build and directly flash the firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/frooastboard/walnut/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake frooastboard/walnut:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building space_space Keyboard Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the space_space keyboard, revision 2, using the QMK build environment. It compiles the keyboard layout and generates a firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/qpockets/space_space/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake qpockets/space_space/rev2:default\n```\n\n----------------------------------------\n\nTITLE: Enabling RGB backlight\nDESCRIPTION: This code snippet from `rules.mk` shows the setting to enable RGB backlighting on the Zinc keyboard. Changing `LED_BACK_ENABLE` to `yes` will activate the SK6812mini backlight LEDs.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/25keys/zinc/keymaps/default/readme_jp.md#_snippet_6\n\nLANGUAGE: Makefile\nCODE:\n```\nLED_BACK_ENABLE = yes   # LED backlight (Enable SK6812mini backlight)\n```\n\n----------------------------------------\n\nTITLE: Building RARTPAD with QMK\nDESCRIPTION: This command builds the default keymap for the RARTPAD keyboard using the QMK firmware. It assumes that the QMK build environment is already set up. The output is a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/rart/rartpad/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake rart/rartpad:default\n```\n\n----------------------------------------\n\nTITLE: Building CMM.Studio Saka68 Firmware - QMK\nDESCRIPTION: This command builds the firmware for the CMM.Studio Saka68 keyboard using the QMK build system.  It specifies the keyboard, the layout (solder), and the keymap (default).  Requires QMK build environment to be properly set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cmm_studio/saka68/solder/readme.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nmake cmm_studio/saka68/solder:default\n```\n\n----------------------------------------\n\nTITLE: Building DAISY Firmware\nDESCRIPTION: This command compiles the firmware for the DAISY keyboard with the default configuration. It uses the `make` command within the QMK Firmware environment. Ensure the build environment is properly configured before running this command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/draytronics/daisy/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake draytronics/daisy:default\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for Galatea rev1\nDESCRIPTION: This command builds the default firmware for the studiokestra/galatea keyboard revision 1.  It uses the QMK build environment to compile the firmware.  Make sure the QMK build environment is properly set up before running this command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/studiokestra/galatea/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake studiokestra/galatea/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Environment Check and Fix - qmk doctor\nDESCRIPTION: This command examines your environment and alerts you to potential build or flash problems. Can automatically fix problems with the `-y` flag, or just report them with `-n`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/cli_commands.md#_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\nqmk doctor\n```\n\nLANGUAGE: shell\nCODE:\n```\nqmk doctor -y\n```\n\nLANGUAGE: shell\nCODE:\n```\nqmk doctor -n\n```\n\nLANGUAGE: shell\nCODE:\n```\nqmk doctor [-y] [-n]\n```\n\n----------------------------------------\n\nTITLE: Flashing Woodpad Firmware with QMK\nDESCRIPTION: This command builds and flashes the default keymap for the Woodpad keyboard using the QMK build environment. It assumes that the QMK build environment is already set up and the necessary flashing tools are installed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/woodpad/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake handwired/woodpad:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building KBD67 Hotswap Firmware\nDESCRIPTION: This command builds the default firmware for the KBD67 hotswap keyboard using the QMK build environment.  It assumes that the QMK build environment is already set up. The resulting firmware can then be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kbdfans/kbd67/hotswap/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake kbdfans/kbd67/hotswap:default\n```\n\n----------------------------------------\n\nTITLE: Building Clueboard 2x1800 Firmware\nDESCRIPTION: This snippet shows the command to build the default firmware for the Clueboard 2x1800 keyboard using the QMK build system. It utilizes the `make` command with the target specified as `clueboard/2x1800/2018:default`. Ensure that the QMK build environment is properly set up before running this command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/clueboard/2x1800/2018/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake clueboard/2x1800/2018:default\n```\n\n----------------------------------------\n\nTITLE: Building QK100 ANSI default keymap - Make\nDESCRIPTION: This command builds the default keymap for the QK100 ANSI keyboard using the QMK build environment. It compiles the keymap and generates the firmware file, using the `qwertykeys/qk100/ansi` keyboard definition and the `default` keymap configuration.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/qwertykeys/qk100/ansi/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake qwertykeys/qk100/ansi:default\n```\n\n----------------------------------------\n\nTITLE: Flashing JJ40 rev1 Firmware (QMK)\nDESCRIPTION: This command flashes the compiled firmware to the JJ40 rev1 keyboard. It requires the keyboard to be in bootloader mode, which can be triggered by holding down the top right key (Backspace) while plugging in the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kprepublic/jj40/rev1/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake kprepublic/jj40/rev1:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building KY01 Firmware with QMK\nDESCRIPTION: This snippet shows how to build the default firmware for the KY01 keyboard using the `make` command within the QMK Firmware environment. This command compiles the keyboard's keymap and firmware, creating a flashable file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ky01/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake ky01:default\n```\n\n----------------------------------------\n\nTITLE: Building Firmware with Make\nDESCRIPTION: This command builds the default firmware for the Large Lad keyboard using the QMK build environment. It requires a properly configured QMK build environment. The output is a .hex or .bin file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/large_lad/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake large_lad:default\n```\n\n----------------------------------------\n\nTITLE: Building angel64 Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the angel64/rev1 keyboard using the QMK build environment. It requires the QMK build environment to be set up properly. The output is the compiled firmware that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kakunpc/angel64/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake kakunpc/angel64/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Retrieving QMK Constants\nDESCRIPTION: This cURL command retrieves the actual QMK constants associated with a specific subsystem and version.  It uses the format `/v1/constants/{subsystem}_{version}.json`. For example, it retrieves the `keycodes` constants with version `0.0.1`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/api_docs.md#_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\n$ curl https://keyboards.qmk.fm/v1/constants/keycodes_0.0.1.json\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for Tractyl Manuform (QMK Make)\nDESCRIPTION: This command builds the firmware for the Tractyl Manuform keyboard using the QMK build environment. It specifies the keyboard layout (5x6_right), the microcontroller (f411), and the keymap (drashna:default).\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/tractyl_manuform/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake handwired/tractyl_manuform/5x6_right/f411/drashna:default\n```\n\n----------------------------------------\n\nTITLE: Building OK60 Keyboard with QMK\nDESCRIPTION: This snippet shows the command to build the default keymap for the OK60 keyboard using the QMK firmware build environment. It requires QMK to be properly set up. The output is a firmware file ready to be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ok60/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake ok60:default\n```\n\n----------------------------------------\n\nTITLE: Building Unison Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Unison keyboard using the QMK build environment. It compiles the keyboard's keymap and configuration files into a firmware image that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/unison/v04/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake unison:default\n```\n\n----------------------------------------\n\nTITLE: Building Hadron Firmware\nDESCRIPTION: This command compiles the QMK firmware for the Hadron keyboard using the default keymap. It assumes that the QMK build environment has been properly set up. The output is the firmware binary that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/hadron/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake hadron:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Cor65 Firmware with QMK\nDESCRIPTION: This command flashes the built QMK firmware onto the Cor65 keyboard. It requires a configured QMK build environment and a connected keyboard in a flashable state. The command targets the 'default' keymap after building.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechlovin/zed65/no_backlight/cor65/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake mechlovin/zed65/no_backlight/cor65:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for Wheatfield Blocked65% with QMK\nDESCRIPTION: This command builds the default firmware for the Wheatfield Blocked65% keyboard using the QMK build environment. It assumes that the build environment is properly set up. The resulting firmware can then be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mt/blocked65/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake mt/blocked65:default\n```\n\n----------------------------------------\n\nTITLE: Flashing IKKI68 Aurora Firmware\nDESCRIPTION: This command flashes the compiled QMK firmware onto the IKKI68 Aurora keyboard. It requires the QMK build environment and a compatible flashing tool. The keyboard needs to be in bootloader mode before executing this command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wuque/ikki68_aurora/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake wuque/ikki68_aurora:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing PW88 Firmware\nDESCRIPTION: This command builds and flashes the default firmware to the PW88 keyboard.  It depends on a properly configured QMK build environment and a connected keyboard in bootloader mode.  It combines the build and flash steps into a single command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/smoll/pw88/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake pw88:default:flash\n```\n\n----------------------------------------\n\nTITLE: Installing Planck Firmware (rev5/earlier, Planck Light)\nDESCRIPTION: This command flashes the built firmware to a Planck keyboard, specifically for revision 5 or earlier, or the Planck Light version.  It uses the dfu bootloader.  A successful build with the 'make' command is a prerequisite.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/planck/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake planck/rev5:default:dfu\n```\n\n----------------------------------------\n\nTITLE: Making the Brutal v2 1800 firmware - QMK\nDESCRIPTION: This command compiles the QMK firmware for the Brutal v2 1800 keyboard with the default keymap. It requires a properly set up QMK build environment. The command outputs a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cannonkeys/brutalv2_1800/readme.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmake cannonkeys/brutalv2_1800:default\n```\n\n----------------------------------------\n\nTITLE: Flashing WT60-G Firmware with QMK\nDESCRIPTION: This command compiles and flashes the QMK firmware onto the wilba_tech/wt60_g keyboard with the default configuration. It requires the QMK build environment to be properly set up and the keyboard to be in a flashable state.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wilba_tech/wt60_g/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake wilba_tech/wt60_g:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware - Mokey 64 QMK\nDESCRIPTION: This command flashes the built firmware to the Mokey 64 keyboard. The keyboard needs to be in bootloader mode (via reset button) for this command to work. QMK environment and dfu-programmer (or similar) must be installed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mokey/mokey64/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake mokey/mokey64:default:flash\n```\n\n----------------------------------------\n\nTITLE: Enabling De-Ghosting feature in config.h (C)\nDESCRIPTION: This code snippet demonstrates how to enable the de-ghosting feature for the IS31FL3731 driver by defining `IS31FL3731_DEGHOST` in the `config.h` file.  This setting helps to prevent ghost images on the LED matrix.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/is31fl3731.md#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n#define IS31FL3731_DEGHOST\n```\n\n----------------------------------------\n\nTITLE: LED Control Functions (GH60)\nDESCRIPTION: These are function names that control the various LED clusters on the GH60 keyboard. They allow the firmware to turn the LEDs on and off.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/gh60/revc/readme.md#_snippet_4\n\nLANGUAGE: c\nCODE:\n```\ngh60_caps_led_on()\n gh60_poker_leds_on()\n gh60_fn_led_on()\n gh60_esc_led_on()\n gh60_wasd_leds_on()\n \n gh60_caps_led_off()\n gh60_poker_leds_off()\n gh60_fn_led_off()\n gh60_esc_led_off()\n gh60_wasd_leds_off()\n```\n\n----------------------------------------\n\nTITLE: Flashing Ghost Squid firmware with default layout\nDESCRIPTION: This command builds and flashes the firmware for the Ghost Squid keyboard using the default keymap.  It requires a properly configured QMK build environment and a connected keyboard in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/bpiphany/ghost_squid/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake bpiphany/ghost_squid:default:flash\n```\n\n----------------------------------------\n\nTITLE: Initial Flashing Cheshire Curiosity Keyboard\nDESCRIPTION: These steps detail the initial flashing procedure for the Cheshire Curiosity keyboard PCB. It involves setting the dip switch to 1, hitting the reset button, then building the firmware, and finally resetting the dip switch.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cheshire/curiosity/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake cheshire/curiosity:default\n```\n\n----------------------------------------\n\nTITLE: Building QMK Firmware for LSJ Ares\nDESCRIPTION: This command builds the QMK firmware for the LSJ Ares keyboard with the default keymap.  It uses the `make` command, which is part of the QMK build environment.  The command needs the QMK build environment to be properly set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ares/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake ares:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Boston Firmware\nDESCRIPTION: This command compiles and flashes the default keymap to the Boston keyboard using the QMK build environment. Ensure the board is in a flashable state. You may need to reset the board using the reset button mentioned in the documentation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/boston/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake boston:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building EPOMAKER TIDE 65 Firmware (Makefile)\nDESCRIPTION: This command builds the default QMK firmware for the EPOMAKER TIDE 65 keyboard. It leverages the make command within the QMK build environment to compile the necessary source code and generate the firmware image.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/epomaker/tide65/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake epomaker/tide_65:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Splitography Firmware (QMK)\nDESCRIPTION: This command flashes the default firmware to the Splitography keyboard. It builds the firmware and then uses a tool to upload it to the keyboard's microcontroller. Requires a configured QMK build environment and a connected keyboard in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/splitography/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake splitography:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Boaty Firmware\nDESCRIPTION: This command flashes the compiled firmware to the Boaty keyboard. It uses the QMK make system along with appropriate flashing tools. Requires a properly configured QMK build environment and a connected keyboard in a flashable state.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/jels/boaty/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake jels/boaty:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Geminate60 Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the Geminate60 keyboard using the QMK build environment. It requires the QMK build environment to be set up beforehand.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/weirdo/geminate60/readme.md#_snippet_0\n\nLANGUAGE: makefile\nCODE:\n```\nmake weirdo/geminate60:default\n```\n\n----------------------------------------\n\nTITLE: Building Gud70 Default Layout with QMK\nDESCRIPTION: This command builds the default layout for the Gud70 keyboard using the QMK firmware. It requires a properly configured QMK build environment. The output is a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/evyd13/gud70/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake evyd13/gud70:default\n```\n\n----------------------------------------\n\nTITLE: Building BM60HSRGB Firmware with Make\nDESCRIPTION: These `make` commands compile the QMK firmware for the BM60HSRGB keyboard.  The specific target depends on the PCB revision (rev1 or rev2). The `default` target specifies the default keymap.  A QMK build environment is required.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kprepublic/bm60hsrgb/readme.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nfor rev1: make kprepublic/bm60hsrgb/rev1:default\nfor rev2: make kprepublic/bm60hsrgb/rev2:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Space_Space Keyboard Firmware\nDESCRIPTION: This command compiles and flashes the QMK firmware onto the Space_Space keyboard, specifically for the rev2 version with the default keymap. It requires a properly configured build environment and a connected keyboard in flashing mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/qpockets/space_space/rev2/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake space_space/rev2:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Cassette8 Firmware\nDESCRIPTION: This command builds the default firmware for the Cassette8 macropad. It assumes that the QMK build environment has been set up correctly. No specific dependencies are outlined other than the QMK firmware itself.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/lazydesigners/cassette8/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake lazydesigners/cassette8:default\n```\n\n----------------------------------------\n\nTITLE: Building Voice65 Firmware - QMK\nDESCRIPTION: This command builds the default firmware for the Voice65 soldered PCB using the QMK build environment.  It requires the QMK build environment to be set up properly. It generates the firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/owlab/voice65/soldered/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake owlab/voice65/soldered:default\n```\n\n----------------------------------------\n\nTITLE: Building RART75M Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the RART75M keyboard. It utilizes the QMK build environment to compile the keyboard's firmware based on the configuration specified in the `rart/rart75m:default` target. It requires the QMK build environment to be set up correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/rart/rart75m/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake rart/rart75m:default\n```\n\n----------------------------------------\n\nTITLE: Setting MAX_DEFERRED_EXECUTORS in config.h in C\nDESCRIPTION: This code snippet shows how to increase the maximum number of deferred callbacks by defining `MAX_DEFERRED_EXECUTORS` in the keyboard or keymap's `config.h` file.  This allows more deferred executions to be scheduled.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/custom_quantum_functions.md#_snippet_12\n\nLANGUAGE: C\nCODE:\n```\n#define MAX_DEFERRED_EXECUTORS 16\n```\n\n----------------------------------------\n\nTITLE: Enabling Split Keyboard Feature in rules.mk (Make)\nDESCRIPTION: This code snippet shows how to enable the split keyboard feature by setting the `SPLIT_KEYBOARD` variable to `yes` in the `rules.mk` file. This is a required step for using split keyboard functionality in QMK Firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/split_keyboard.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nSPLIT_KEYBOARD = yes\n```\n\n----------------------------------------\n\nTITLE: Building Blueberry Keyboard Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Blueberry keyboard using the QMK build environment.  It requires the QMK build environment to be set up. The output is a .hex or .bin file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/toffee_studio/blueberry/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake toffee_studio/blueberry:default\n```\n\n----------------------------------------\n\nTITLE: Enable TIM1 for PWM in mcuconf.h - C\nDESCRIPTION: This code snippet enables the TIM1 timer for PWM in the ChibiOS `mcuconf.h` configuration file for STM32 microcontrollers.  This is necessary to use timer 1 to generate the PWM signal.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/audio.md#_snippet_7\n\nLANGUAGE: C\nCODE:\n```\n#pragma once\n\n#include_next <mcuconf.h>\n\n#undef STM32_PWM_USE_TIM1 // [!code focus]\n#define STM32_PWM_USE_TIM1 TRUE // [!code focus]\n```\n\n----------------------------------------\n\nTITLE: Building Cupar19 Giant Macro Pad Firmware\nDESCRIPTION: This command is used to compile the firmware for the Cupar19 Giant Macro Pad using the QMK build environment. It specifies the keyboard (cutie_club/giant_macro_pad) and the keymap (default).  Requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cutie_club/giant_macro_pad/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake cutie_club/giant_macro_pad:default\n```\n\n----------------------------------------\n\nTITLE: Flashing QMK Firmware to QVEX Lynepad\nDESCRIPTION: This command flashes the compiled firmware to the QVEX Lynepad keyboard. It relies on the QMK Firmware build environment and assumes that the keyboard is connected and detectable. It typically requires appropriate drivers and flashing tools to be installed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/qvex/lynepad2/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake qvex/lynepad:default:flash\n```\n\n----------------------------------------\n\nTITLE: Compiling VIA firmware for idb_60\nDESCRIPTION: This command compiles the VIA-enabled firmware for the idb/idb_60 keyboard.  VIA allows for real-time keyboard configuration changes. The QMK build environment must be correctly configured to use this command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/idb/idb_60/readme.md#_snippet_2\n\nLANGUAGE: Makefile\nCODE:\n```\nmake idb/idb_60:via\n```\n\n----------------------------------------\n\nTITLE: Setting Backlight On State (C)\nDESCRIPTION: This snippet configures the \"on\" state of the backlight circuit by defining `BACKLIGHT_ON_STATE` in the `config.h` file.  This setting determines whether a high or low signal turns the backlight on.  The value `0` indicates a low signal turns the backlight on.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/backlight.md#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n#define BACKLIGHT_ON_STATE 0\n```\n\n----------------------------------------\n\nTITLE: Flashing Keyboard Firmware with Make\nDESCRIPTION: This command builds and flashes the default firmware for the Skeletn87 hotswap keyboard to the device. It assumes the QMK build environment is set up correctly and the keyboard is connected in a flashable state.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/skeletn87/hotswap/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake skeletn87/hotswap:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building IBM Model M 122 Keymap\nDESCRIPTION: This command builds the default keymap for the IBM Model M 122 keyboard within the QMK Firmware environment. It assumes that the build environment has been properly set up according to the QMK documentation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ibm/model_m_122/ibm122m/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake ibm/model_m_122/ibm122m:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Retro66 Firmware\nDESCRIPTION: This command flashes the compiled QMK firmware to the Retro66 keyboard. It builds the firmware if necessary and then uses the appropriate flashing tool for the target hardware. A properly configured QMK build environment is required.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechlovin/zed65/no_backlight/retro66/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake mechlovin/zed65/no_backlight/retro66:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building keyboard firmware with QMK\nDESCRIPTION: This command builds the keyboard firmware for the IBM Model M with Teensy 2.0 using the default keymap and the Teensy bootloader.  It requires the QMK build environment to be properly set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ibm/model_m/teensy2/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake ibm/model_m/teensy2:default:teensy\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware to DN Numpad Rev1 with QMK\nDESCRIPTION: This command flashes the default firmware to the DN Numpad Rev1 keyboard using the QMK build environment. It assumes the keyboard is connected and the bootloader is active. It requires a properly configured QMK build environment and necessary flashing tools.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/dnworks/numpad/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake dnworks/numpad:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building QMK Firmware for Rogue87\nDESCRIPTION: This command builds the QMK Firmware for the Rogue87 PCB. It specifies the keyboard layout (mechlovin/infinity87/rev1/rogue87) and the keymap (default).  The resulting firmware can then be flashed onto the board.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechlovin/infinity87/rev1/rogue87/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake mechlovin/infinity87/rev1/rogue87:default\n```\n\n----------------------------------------\n\nTITLE: Building IDOBAO ID87 QMK Firmware\nDESCRIPTION: This command builds the default QMK firmware for the IDOBAO ID87 keyboard (version 1). It requires a properly configured QMK build environment. The output will be the firmware file ready to be flashed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/idobao/id87/v1/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake idobao/id87/v1:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Blueberry Keyboard Firmware with QMK\nDESCRIPTION: This command builds and flashes the default firmware for the Blueberry keyboard using the QMK build environment.  It requires the QMK build environment to be set up and a flashing tool to be configured.  It assumes the keyboard is connected and ready to be flashed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/toffee_studio/blueberry/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake toffee_studio/blueberry:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware to Valor Rev 3\nDESCRIPTION: This command flashes the compiled firmware to the Valor Rev 3 keyboard using the QMK build environment. It programs the microcontroller with the generated firmware. Requires a properly configured QMK build environment and a compatible flashing tool.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/xelus/valor/rev3/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake xelus/valor/rev3:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building ScottoFly Firmware with Make\nDESCRIPTION: This command builds the default firmware for the ScottoFly keyboard using the QMK build environment.  It requires a properly configured QMK build environment. The output is a .hex file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/scottokeebs/scottofly/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/scottokeebs/scottofly:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Iskar Keyboard Firmware\nDESCRIPTION: This command flashes the compiled firmware to the Iskar keyboard. It requires the QMK build environment to be set up and the keyboard to be in a flashable state (bootloader mode). The output is the keyboard being updated with the new firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/drewkeys/iskar/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake drewkeys/iskar:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Borderland Keyboard Firmware\nDESCRIPTION: This command builds and flashes the default firmware to the Borderland keyboard. It requires a configured QMK build environment and a connected keyboard in a flashable state. It uses the `make` command with the `kiwikey/borderland:default:flash` target.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kiwikey/borderland/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake kiwikey/borderland:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing ID75 v2 Firmware\nDESCRIPTION: This command flashes the default firmware onto the ID75 v2 keyboard. It requires a correctly configured QMK build environment and a connected keyboard in a state ready for flashing. The command builds and flashes the firmware in one step.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/idobao/id75/v2/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake idobao/id75/v2:default:flash\n```\n\n----------------------------------------\n\nTITLE: Configuring Audio Pin for STM32 DAC (config.h)\nDESCRIPTION: Defines the audio output pin for STM32 devices using the DAC. Select either A4 or A5 for the primary speaker and optionally another one for the secondary speaker using `AUDIO_PIN` and `AUDIO_PIN_ALT` respectively.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/audio.md#_snippet_3\n\nLANGUAGE: c\nCODE:\n```\n#define AUDIO_PIN A4\n#define AUDIO_PIN A5\n```\n\nLANGUAGE: c\nCODE:\n```\n#define AUDIO_PIN_ALT A4\n#define AUDIO_PIN_ALT A5\n```\n\n----------------------------------------\n\nTITLE: Building Orbit-X firmware with VIA - QMK\nDESCRIPTION: This snippet shows how to build the Orbit-X keyboard firmware with VIA support using the QMK build environment. It requires a properly configured QMK build environment and assumes the `ai03/orbit_x:via` configuration is available.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ai03/orbit_x/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake ai03/orbit_x:via\n```\n\n----------------------------------------\n\nTITLE: Building DigiCarpice Keyboard Firmware with QMK\nDESCRIPTION: This command builds the QMK firmware for the DigiCarpice keyboard using the default keymap. It requires the QMK build environment to be set up. The resulting firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/swiftrax/digicarpice/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake handwired/swiftrax/digicarpice:default\n```\n\n----------------------------------------\n\nTITLE: Flashing the RPK-001 Keyboard Firmware\nDESCRIPTION: This command flashes the compiled firmware onto the RPK-001 keyboard.  It requires the QMK build environment and a configured flashing tool.  The `:flash` target uses the appropriate tool for the keyboard's bootloader.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/phentech/rpk_001/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake phentech/rpk_001:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing the Rubi Keyboard Firmware\nDESCRIPTION: This command builds and flashes the default firmware to the Rubi keyboard. It requires the QMK build environment to be set up correctly and a connected Rubi keyboard. The keyboard needs to be in a flashable state (e.g., bootloader mode).\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/rubi/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake rubi:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building firmware for Drink Me macropad using QMK\nDESCRIPTION: This command builds the default firmware for the Drink Me macropad using QMK. It assumes that the QMK build environment has already been set up. The output firmware will be located in the QMK firmware directory.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/yatara/drink_me/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake yatara/drink_me:default\n```\n\n----------------------------------------\n\nTITLE: Reading Whole Section Configuration with QMK CLI\nDESCRIPTION: This snippet shows how to read the configuration values for an entire section, in this case, the `compile` section. This allows the user to view all settings related to the compile subcommand.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/cli_configuration.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nqmk config compile\n```\n\n----------------------------------------\n\nTITLE: Building Keyboard Firmware with Make\nDESCRIPTION: This command builds the default firmware for the Brutal v2 60 keyboard using the QMK build environment. It compiles the source code and generates a firmware image that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cannonkeys/brutalv2_60/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake cannonkeys/brutalv2_60:default\n```\n\n----------------------------------------\n\nTITLE: Building Frooastboard Nano Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the Frooastboard Nano keyboard using the QMK build environment. It compiles the source code and creates a firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/frooastboard/nano/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake frooastboard/nano:default\n```\n\n----------------------------------------\n\nTITLE: Tagging ChibiOS version\nDESCRIPTION: Tags a specific ChibiOS version.  `ver20.3.4` should be replaced with the actual version number. The tag is created locally and then pushed to the `qmk` remote.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/chibios_upgrade_instructions.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ngit tag -a ver20.3.4 -m ver20.3.4 svn/tags/ver20.3.4\n```\n\nLANGUAGE: Shell\nCODE:\n```\ngit push qmk ver20.3.4\n```\n\n----------------------------------------\n\nTITLE: Flashing QMK Firmware\nDESCRIPTION: This command flashes the compiled firmware to the DactylMacropad keyboard. It uses the default keymap. The keyboard must be connected to the computer and in a state ready to receive the firmware, often requiring bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/dactylmacropad/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake default:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing CF81 Firmware (QMK)\nDESCRIPTION: This command flashes the default firmware onto the CHOSFOX CF81 keyboard using the QMK build environment. This requires the QMK build environment to be configured and the keyboard to be in a flashable state. The command assumes the default bootloader is used.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/chosfox/cf81/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake chosfox/cf81:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building DP60 Firmware with Make\nDESCRIPTION: This command builds the default keymap for the DP60 keyboard using the QMK build environment. It relies on the QMK make system being properly configured. The compiled firmware can then be flashed onto the DP60 keyboard PCB.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/dp60/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake dp60:default\n```\n\n----------------------------------------\n\nTITLE: Defining USB Polling Interval in QMK config.h\nDESCRIPTION: This code snippet sets the USB polling rate in milliseconds for the keyboard, mouse, and shared (NKRO/media keys) interfaces in QMK firmware. This setting is configured in the `config.h` file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/config_options.md#_snippet_30\n\nLANGUAGE: c\nCODE:\n```\n#define USB_POLLING_INTERVAL_MS 10\n```\n\n----------------------------------------\n\nTITLE: Building keyboard firmware for MNK 65 EC\nDESCRIPTION: This command builds the default firmware for the Monokei MNK 65 EC keyboard using the QMK build environment. It compiles the keyboard's keymap and firmware based on the configuration specified in the `cipulot/mnk_65_ec:default` directory.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cipulot/mnk_65_ec/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake cipulot/mnk_65_ec:default\n```\n\n----------------------------------------\n\nTITLE: Building AMJ60 Firmware - Make Command\nDESCRIPTION: This command compiles the default keymap for the AMJ60 keyboard within the QMK Firmware environment. It requires the QMK build environment to be properly set up. The resulting firmware can then be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/amjkeyboard/amj60/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake amjkeyboard/amj60:default\n```\n\n----------------------------------------\n\nTITLE: Flashing TRK1 Firmware (QMK)\nDESCRIPTION: This command flashes the default firmware to the TRK1 keyboard using the QMK build environment and the appropriate flasher tool. It assumes the keyboard is in bootloader mode. It programs the compiled firmware onto the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/trkeyboards/trk1/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake trkeyboards/trk1:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building QMK Firmware for Voice65 Hotswap\nDESCRIPTION: This command compiles the default keymap for the Voice65 hotswap keyboard using the QMK firmware build environment. It requires the QMK build environment to be set up correctly, including the necessary dependencies and configurations.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/owlab/voice65/hotswap/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake owlab/voice65/hotswap:default\n```\n\n----------------------------------------\n\nTITLE: Flashing the Keyboard Firmware\nDESCRIPTION: This command flashes the built firmware onto the Unicomp Spacesaver M Post 2013 Overnumpad 1xb keyboard. It requires the QMK build environment and the keyboard to be in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/unicomp/spacesaver_m_post_2013/overnumpad_1xb/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake unicomp/spacesaver_m_post_2013/overnumpad_1xb:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing nt980 Firmware with QMK\nDESCRIPTION: This command builds and flashes the QMK firmware for the nt980 keyboard with the default keymap. It requires the QMK build environment to be configured and the keyboard to be in a flashable state. The command compiles the firmware and then uploads it to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/evyd13/nt980/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake evyd13/nt980:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building TouhouPad Firmware with QMK\nDESCRIPTION: This command compiles the default firmware for the TouhouPad using the QMK build environment. It requires the QMK build environment to be set up correctly.  The compiled firmware can then be flashed to the Arduino Pro Micro.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/pimentoso/touhoupad/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake pimentoso/touhoupad:default\n```\n\n----------------------------------------\n\nTITLE: Building Equator Keyboard Firmware with Make\nDESCRIPTION: This command is used to build the default firmware for the Equator keyboard. It utilizes the QMK Firmware's `make` command, specifying the keyboard and keymap. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/swiftrax/equator/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/swiftrax/equator:default\n```\n\n----------------------------------------\n\nTITLE: Flashing ANAVI Knobs 3 Firmware with QMK\nDESCRIPTION: This command builds and flashes the default firmware for the ANAVI Knobs 3 keyboard using the QMK build environment. It requires a properly configured QMK environment and a connected ANAVI Knobs 3 keyboard in flashable mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/anavi/knobs3/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake anavi/knobs3:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing EPOMAKER TIDE 65 Firmware (Makefile)\nDESCRIPTION: This command flashes the compiled QMK firmware to the EPOMAKER TIDE 65 keyboard. It builds the firmware (if necessary) and then uses a flasher tool to write the firmware image to the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/epomaker/tide65/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake epomaker/tide65:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Hex.4B Keyboard Firmware with Make\nDESCRIPTION: This command builds the default firmware for the Hex.4B keyboard using the QMK build environment. It compiles the source code and generates a firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechlovin/hex4b/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake mechlovin/hex4b:default\n```\n\n----------------------------------------\n\nTITLE: Building Ginkgo65 Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Ginkgo65 keyboard. It requires the QMK build environment to be set up correctly. The output will be a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mokey/ginkgo65/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake mokey/ginkgo65:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Hand 88 Firmware via QMK CLI\nDESCRIPTION: This command flashes the Hand 88 keyboard with the specified keymap using the QMK command-line interface. It requires QMK Toolbox or the QMK CLI to be installed and configured. Replace `<keymap>` with the desired keymap name.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/hand88/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake hand88:<keymap>:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing s6xty Keyboard Firmware (QMK)\nDESCRIPTION: This command builds and flashes the QMK firmware onto the s6xty keyboard. It requires a properly configured build environment and a connected keyboard in bootloader mode. The 'default' keymap is used in this example.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/trnthsn/s6xty/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake trnthsn/s6xty:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Moment Keyboard Firmware (QMK)\nDESCRIPTION: This command builds the QMK firmware for the Moment keyboard with the default keymap. It requires a properly set up QMK build environment. The output will be a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cannonkeys/moment/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake cannonkeys/moment:default\n```\n\n----------------------------------------\n\nTITLE: Building Hannah910 Firmware - Default Keymap\nDESCRIPTION: This command builds the QMK firmware for the Hannah910 keyboard with the default keymap.  It requires the QMK build environment to be set up. The output is a firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechlovin/hannah910/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake mechlovin/hannah910/rev1:default\n```\n\nLANGUAGE: Makefile\nCODE:\n```\nmake mechlovin/hannah910/rev2:default\n```\n\nLANGUAGE: Makefile\nCODE:\n```\nmake mechlovin/hannah910/rev3:default\n```\n\n----------------------------------------\n\nTITLE: Building Prime_L V2 Firmware - QMK\nDESCRIPTION: This command compiles the default keymap for the Prime_L V2 keyboard using the QMK firmware build environment.  It requires QMK to be set up and configured correctly. The resulting firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/primekb/prime_l/v2/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake primekb/prime_l/v2:default\n```\n\n----------------------------------------\n\nTITLE: Building ScottoGame Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the ScottoGame keyboard using the QMK build environment. It assumes that the QMK build environment has already been set up. The output is the compiled firmware ready for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/scottokeebs/scottogame/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/scottokeebs/scottogame:default\n```\n\n----------------------------------------\n\nTITLE: Building suihankey split keyboard firmware using QMK\nDESCRIPTION: This command builds the default keymap for the suihankey split keyboard using the QMK firmware.  It requires the QMK build environment to be set up correctly. The resulting firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kakunpc/suihankey/split/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake kakunpc/suihankey/split:default\n```\n\n----------------------------------------\n\nTITLE: Building Eclipse_65 Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the GEN ONE Eclipse_65 keyboard using the QMK build environment.  It compiles the source code into a firmware image that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/genone/eclipse_65/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake genone/eclipse_65:default\n```\n\n----------------------------------------\n\nTITLE: Building ASH-XIIX Firmware\nDESCRIPTION: This command builds the default firmware for the ASH-XIIX keyboard using the QMK build environment. It requires QMK to be properly set up and configured. The output will be a firmware file suitable for flashing onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ash_xiix/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake ash_xiix:default\n```\n\n----------------------------------------\n\nTITLE: Building Georgi Firmware with DFU\nDESCRIPTION: This command builds and flashes the Georgi keyboard firmware using the default keymap and DFU programmer. It requires the QMK repository to be cloned and dfu-programmer to be installed. Ensure the keyboard is reset before flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/gboards/georgi/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake gboards/georgi:default:dfu\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware to YMDK Wings Hotswap\nDESCRIPTION: This command builds and flashes the default firmware to the YMDK Wings Hotswap keyboard. It requires a properly configured QMK build environment and a connected keyboard. This command combines the build and flash steps into one.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ymdk/wingshs/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake ymdk/wingshs:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building WT65-XT Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the wilba.tech WT65-XT keyboard using the QMK build environment. It compiles the keyboard layout and keymap into a firmware image ready to be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wilba_tech/wt65_xt/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake wilba_tech/wt65_xt:default\n```\n\n----------------------------------------\n\nTITLE: Building ODIN MINI Default Firmware - Make Command\nDESCRIPTION: This command builds the default firmware for the ODIN MINI keyboard. It requires a properly configured QMK build environment to function correctly. The output will be a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kbdfans/odinmini/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake kbdfans/odinmini:default\n```\n\n----------------------------------------\n\nTITLE: Building the Tokyo60 Default Keymap with QMK\nDESCRIPTION: This command builds the default keymap for the Tokyo60 keyboard using the QMK firmware build environment. It requires the QMK build environment to be set up correctly. The command targets the tokyokeyboard/tokyo60 keyboard with the default keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/tokyokeyboard/tokyo60/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake tokyokeyboard/tokyo60:default\n```\n\n----------------------------------------\n\nTITLE: Remove Keyboard/Keymap from Userspace (qmk userspace-remove)\nDESCRIPTION: This command removes a keyboard/keymap from the External Userspace build targets.  The keyboard and keymap are specified using the `-kb` and `-km` options respectively.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/cli_commands.md#_snippet_35\n\nLANGUAGE: text\nCODE:\n```\nqmk userspace-remove [-h] [-km KEYMAP] [-kb KEYBOARD] [builds ...]\n```\n\nLANGUAGE: text\nCODE:\n```\n$ qmk userspace-remove -kb planck/rev6 -km default\n```\n\n----------------------------------------\n\nTITLE: Building the M60 Keyboard Firmware (QMK)\nDESCRIPTION: This command builds the QMK firmware for the M60 keyboard with the rev1 PCB and default keymap. It compiles the source code and generates a firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mlego/m60/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake mlego/m60/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Flashing the Keyboard Firmware\nDESCRIPTION: This command flashes the pre-built or recently built firmware to the phdesign/ph60/multi keyboard with the default keymap. It depends on the QMK build environment and appropriate flashing tools being installed and configured.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/phdesign/ph60/multi/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake phdesign/ph60/multi:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building giabalanai Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the giabalanai keyboard using the QMK build environment. It compiles the necessary source code and generates the firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/giabalanai/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake giabalanai:default\n```\n\n----------------------------------------\n\nTITLE: Building Horizon Z QMK Firmware\nDESCRIPTION: This snippet provides the command to build the default firmware for the Horizon Z QMK Edition keyboard using the QMK build environment. It requires a properly set up build environment. The command compiles the firmware and prepares it for flashing onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/flashquark/horizon_z/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake flashquark/horizon_z:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Ishi 80 Mk 0 Firmware (QMK)\nDESCRIPTION: This command flashes the built firmware onto the Ishi 80 Mk 0 keyboard using the QMK build system.  It requires the QMK build environment and a compatible flashing tool. This command assumes the default configuration is desired.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/argo_works/ishi/80/mk0_avr/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake argo_works/ishi/80/mk0_avr:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building KBD75 rev2 Default Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the KBD75 keyboard revision 2 using the QMK build environment. It requires a properly configured QMK environment. The resulting firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kbdfans/kbd75/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake kbdfans/kbd75/rev2:default\n```\n\n----------------------------------------\n\nTITLE: Defining Split USB Timeout in QMK\nDESCRIPTION: This sets the maximum timeout (in milliseconds) for detecting master/slave roles when using `SPLIT_USB_DETECT`. This configuration affects how long the keyboard waits before determining the master/slave relationship.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/config_options.md#_snippet_99\n\nLANGUAGE: c\nCODE:\n```\n#define SPLIT_USB_TIMEOUT 2000\n```\n\n----------------------------------------\n\nTITLE: Building BM40hsrgb Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the BM40hsrgb keyboard (revision 1) within the QMK Firmware environment. It utilizes the `make` command to compile the source code and generate a firmware image suitable for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kprepublic/bm40hsrgb/rev1/readme.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmake kprepublic/bm40hsrgb/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Bestway Keyboard Firmware with QMK\nDESCRIPTION: This command flashes the default firmware onto the Bestway keyboard using the QMK build system. It builds the firmware (if necessary) and then uses the appropriate tool to upload it to the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/bestway/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake bestway:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Hard Light Mark 2 Firmware (Makefile)\nDESCRIPTION: This command flashes the default firmware to the Hard Light Mark 2 keyboard. It requires the QMK build environment to be set up and the keyboard to be connected to the computer. It assumes the keyboard is in the correct bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/edi/hardlight/mk2/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake edi/hardlight/mk2:default:flash\n```\n\n----------------------------------------\n\nTITLE: Assigning RGB Matrix Driver in rules.mk (Make)\nDESCRIPTION: This code snippet shows how to assign an RGB Matrix driver by adding a line to the `rules.mk` file. This specifies which LED driver API to use for controlling the RGB matrix.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/rgb_matrix.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nRGB_MATRIX_DRIVER = is31fl3218\n```\n\n----------------------------------------\n\nTITLE: Building ibis80 firmware with QMK\nDESCRIPTION: This command builds the default firmware for the mokey/ibis80 keyboard using the QMK build environment. It compiles the keyboard layout and firmware into a .hex file that can be flashed to the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mokey/ibis80/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake mokey/ibis80:default\n```\n\n----------------------------------------\n\nTITLE: Building wulkan keyboard firmware with make\nDESCRIPTION: This snippet shows the make command used to build the default keymap for the wulkan keyboard and flash it using dfu-util.  It assumes the QMK build environment is already set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/wulkan/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/wulkan:default:dfu-util\n```\n\n----------------------------------------\n\nTITLE: Building Trailmix Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the Trailmix keyboard using the QMK build environment. It requires a properly configured QMK environment. The output will be a .hex or .bin file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/rainkeebs/trailmix/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake rainkeebs/trailmix:default\n```\n\n----------------------------------------\n\nTITLE: Flashing la_nc keyboard firmware with QMK\nDESCRIPTION: This command flashes the default firmware to the la_nc keyboard using the QMK build environment. It requires a properly configured QMK build environment and a connected keyboard in a flashable state (usually bootloader mode).\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/subrezon/la_nc/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake subrezon/la_nc:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building the Keyboard Firmware (Makefile)\nDESCRIPTION: This command builds the firmware for the Mona v1.1 keyboard with the ATmega32A microcontroller using the QMK build environment. It specifies the keyboard, keymap, and target microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/rmi_kb/mona/v32a/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake rmi_kb/mona/v32a:default\n```\n\n----------------------------------------\n\nTITLE: One-Shot Layer Activation using OSL\nDESCRIPTION: This function momentarily activates a layer until the next key is pressed. The layer remains active for a single key press and then deactivates automatically. Useful for single-action layer activation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/feature_layers.md#_snippet_5\n\nLANGUAGE: c\nCODE:\n```\nOSL(layer)\n```\n\n----------------------------------------\n\nTITLE: Building Kalice Keyboard Firmware - QMK\nDESCRIPTION: This command builds the firmware for the Kalice keyboard with the default keymap using the QMK build environment. It requires the QMK build environment to be set up correctly. The output is a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/meetlab/kalice/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake meetlab/kalice:default\n```\n\n----------------------------------------\n\nTITLE: Enable ADNS9800 Firmware Upload\nDESCRIPTION: This code snippet shows how to re-enable firmware upload for ADNS9800 sensors by defining `ADNS9800_UPLOAD_SROM` in the keymap's `config.h`.  This is an opt-in feature due to licensing concerns.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/ChangeLog/20240825.md#_snippet_2\n\nLANGUAGE: C\nCODE:\n```\n#define ADNS9800_UPLOAD_SROM\n```\n\n----------------------------------------\n\nTITLE: Making the MadJax Macropad Firmware\nDESCRIPTION: This command builds the default firmware for the MadJax Macropad using the QMK build system. It compiles the keymap and any custom features into a firmware file that can be flashed to the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/madjax_macropad/readme.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nmake madjax_macropad:default\n```\n\n----------------------------------------\n\nTITLE: Define External Flash Page Size (C)\nDESCRIPTION: This configuration option defines the page size of the external FLASH chip in bytes. The page size is a fundamental parameter for FLASH operations like programming. This value must match the page size specified in the FLASH chip's datasheet.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/flash.md#_snippet_2\n\nLANGUAGE: C\nCODE:\n```\n#define EXTERNAL_FLASH_PAGE_SIZE             256\n```\n\n----------------------------------------\n\nTITLE: Flashing Grandiceps Firmware\nDESCRIPTION: These commands flash the built firmware to the Grandiceps keyboard. The first command flashes the original revision, while the second flashes revision 2. Assumes the keyboard is connected and the flashing tool is configured within the QMK environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/tkw/grandiceps/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake tkw/grandiceps:default:flash\n```\n\nLANGUAGE: Makefile\nCODE:\n```\nmake tkw/grandiceps/rev2:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Nack Keyboard Firmware (QMK)\nDESCRIPTION: Builds the default firmware for the Nack keyboard using the QMK build system. This command compiles the keyboard's keymap and firmware, creating a hex file that can be flashed onto the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/nack/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake nack:default\n```\n\n----------------------------------------\n\nTITLE: Flashing QMK Firmware\nDESCRIPTION: This command flashes the built QMK firmware to the handwired Preonic keyboard with the riblee_f411 configuration and the default keymap.  It requires a properly configured QMK build environment and a connected keyboard in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/riblee_f411/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake handwired/riblee_f411:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Keyboard Firmware (QMK)\nDESCRIPTION: This command builds and flashes the default firmware for the Keebio Cepstrum revision 1 keyboard using the QMK build environment. It requires the QMK environment to be correctly set up and configured for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keebio/cepstrum/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake keebio/cepstrum/rev1:default:flash\n```\n\n----------------------------------------\n\nTITLE: Enable Per-Key Tapping Term (C)\nDESCRIPTION: This code snippet enables per-key tapping term configuration, allowing for individual control over the tap/hold threshold for each key.  This setting needs to be added to the `config.h` file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/tap_hold.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n#define TAPPING_TERM_PER_KEY\n```\n\n----------------------------------------\n\nTITLE: Enabling MIDI in QMK rules.mk\nDESCRIPTION: This snippet shows how to enable MIDI functionality within the QMK firmware build process. Adding `MIDI_ENABLE = yes` to the `rules.mk` file tells the build system to include the necessary MIDI modules.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/midi.md#_snippet_0\n\nLANGUAGE: Make\nCODE:\n```\nMIDI_ENABLE = yes\n```\n\n----------------------------------------\n\nTITLE: Enabling Extended Mouse Reports\nDESCRIPTION: Enables support for extended mouse reports (-32767 to 32767, instead of -127 to 127).  This allows for smoother mouse reporting and can prevent maxing out the reports for pointing devices and Mousekeys.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/config_options.md#_snippet_55\n\nLANGUAGE: C\nCODE:\n```\n#define MOUSE_EXTENDED_REPORT\n```\n\n----------------------------------------\n\nTITLE: Building Quackfire Firmware with QMK\nDESCRIPTION: This command builds the QMK firmware for the evyd13/quackfire keyboard with the default keymap. It requires a properly configured QMK build environment. The output is a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/evyd13/quackfire/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake evyd13/quackfire:default\n```\n\n----------------------------------------\n\nTITLE: Styled Hint Block (Tip) in Markdown\nDESCRIPTION: This snippet shows how to create a helpful tip hint block in QMK documentation using markdown. This is achieved by using the `::: tip` syntax. This block is used to offer guidance or helpful suggestions to the user.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/documentation_best_practices.md#_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n::: tip\nThis is a helpful tip.\n:::\n```\n\n----------------------------------------\n\nTITLE: Flashing the mkh_studio/bully Firmware (Makefile)\nDESCRIPTION: This command builds and flashes the default firmware to the mkh_studio/bully keyboard using the QMK build environment.  It requires a properly configured QMK environment and the necessary tools for flashing the APM32F072 microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mkh_studio/bully/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake mkh_studio/bully:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Lefty Firmware with QMK\nDESCRIPTION: This command compiles and flashes the default keymap for the Lefty keyboard to the device using the QMK build environment. This assumes the bootloader is ready and QMK flash tools are correctly configured.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/smoll/lefty/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake lefty:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware to GHS.JEM (QMK)\nDESCRIPTION: This command builds the default keymap and flashes it onto the GHS.JEM keyboard. It requires the QMK build environment to be configured and the keyboard to be in bootloader mode (accessed via the reset button).\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ghs/jem/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake ghs/jem:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Bubble75 Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the Bubble75 Hotswap keyboard using the QMK build environment. It compiles the source code and generates a firmware image that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/bubble75/hotswap/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake bubble75/hotswap:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware for Work Louder Work Keyboard\nDESCRIPTION: This command flashes the compiled firmware to the Work Louder Work keyboard. It depends on the QMK build environment and requires the keyboard to be in bootloader mode. It uses the `default` keymap in the `work_louder/work` directory.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/work_louder/work_board/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake work_louder/work:default:flash\n```\n\n----------------------------------------\n\nTITLE: Compiling Firmware for jotlily60 with QMK\nDESCRIPTION: This command compiles the QMK firmware for the jotlily60 keyboard with the default keymap. It requires a properly configured QMK build environment.  The compiled firmware can then be flashed onto the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/jotlily60/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nqmk compile -kb handwired/jotlily60 -km default\n```\n\n----------------------------------------\n\nTITLE: Flashing Shisaku Firmware\nDESCRIPTION: This command compiles and flashes the QMK firmware to the Shisaku keyboard with the default keymap.  It requires the QMK build environment to be set up and the appropriate flashing tools to be installed. This assumes the keyboard is already in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/adpenrose/shisaku/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake adpenrose/shisaku:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for BN006 with Make\nDESCRIPTION: This command builds the default firmware for the Binepad BN006 macropad using the `make` command. It assumes that the QMK build environment has been properly set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/binepad/bn006/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake binepad/bn006:default\n```\n\n----------------------------------------\n\nTITLE: Building TG67 Firmware with QMK Make\nDESCRIPTION: This command builds the default firmware for the TG67 keyboard using the QMK build environment. It requires a properly set up QMK build environment. The output is the compiled firmware ready to be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/yandrstudio/tg67/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake yandrstudio/tg67:default\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for RP2040 Controller (KB2040)\nDESCRIPTION: This command builds the QMK firmware for the Sweet 16 v2 macropad using a KB2040 controller.  It requires a configured QMK build environment. The output is the firmware binary ready to be flashed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/1upkeyboards/sweet16v2/readme.md#_snippet_2\n\nLANGUAGE: Makefile\nCODE:\n```\nmake 1upkeyboards/sweet16v2/kb2040:default\n```\n\n----------------------------------------\n\nTITLE: Building Gherkin firmware\nDESCRIPTION: This command builds the default firmware for the Gherkin keyboard using the KB2040 microcontroller. It requires a properly configured QMK build environment. The output is a firmware file that can be flashed onto the KB2040.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/40percentclub/gherkin/kb2040/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake 40percentclub/gherkin/kb2040:default\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for Gray COD67 with QMK\nDESCRIPTION: This command builds the default firmware for the Gray COD67 keyboard using the QMK build environment.  It requires a properly set up QMK build environment.  The command compiles the keyboard layout defined under `gray_studio/cod67` with the default configuration.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/gray_studio/cod67/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake gray_studio/cod67:default\n```\n\n----------------------------------------\n\nTITLE: Building waffling80 Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the waffling80 keyboard (rev_b_ansi layout).  It requires the QMK build environment to be properly set up. The resulting firmware can then be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/4pplet/waffling80/rev_b_ansi/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake 4pplet/waffling80/rev_b_ansi:default\n```\n\n----------------------------------------\n\nTITLE: Building Sofle Keyboard Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the Sofle keyboard.  It uses the QMK make system to compile the firmware based on the sofle keyboard configuration and the default keymap. This requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/sofle/rev1/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake sofle:default\n```\n\n----------------------------------------\n\nTITLE: Building Swoop Keyboard Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Swoop keyboard using the QMK build environment. It specifies the keyboard layout (bluebell/swoop) and the default configuration. This requires the QMK build environment to be properly set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/bluebell/swoop/readme.md#_snippet_0\n\nLANGUAGE: makefile\nCODE:\n```\nmake bluebell/swoop:default\n```\n\n----------------------------------------\n\nTITLE: Flashing the keyboard firmware\nDESCRIPTION: This command builds and flashes the firmware for the Equanimity keyboard with the default keymap.  It requires the QMK build environment to be set up and the bootloader to be active. The output is the keyboard running the new firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/tyraelwastaken/equanimity/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake tyraelwastaken/equanimity:default:flash\n```\n\n----------------------------------------\n\nTITLE: Defining Master-to-Slave Data Structure\nDESCRIPTION: This code defines a structure for data sent from the master side to the slave side during custom data synchronization. It contains an integer `m2s_data`. It is used for custom data sync.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/split_keyboard.md#_snippet_27\n\nLANGUAGE: c\nCODE:\n```\ntypedef struct _master_to_slave_t {\n    int m2s_data;\n} master_to_slave_t;\n```\n\n----------------------------------------\n\nTITLE: Flashing Lilith Keyboard Firmware - QMK\nDESCRIPTION: Flashes the compiled QMK firmware to the Lilith keyboard.  This command uses the QMK CLI to program the keyboard's microcontroller. It requires the keyboard to be in bootloader mode and the QMK build environment to be properly set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/nix_studio/lilith/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nqmk flash nix_studio/lilith -km default\n```\n\n----------------------------------------\n\nTITLE: Flashing oem_ansi_fullsize Keyboard Firmware (QMK)\nDESCRIPTION: This command flashes the pre-built firmware to the oem_ansi_fullsize keyboard. This requires the QMK build environment and appropriate flashing tools to be set up beforehand. It assumes the keyboard is connected and ready to receive the firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/oem_ansi_fullsize/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake handwired/oem_ansi_fullsize:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing GRS-70EC Keyboard Firmware (QMK)\nDESCRIPTION: This command flashes the pre-built or newly built firmware to the GRS-70EC keyboard using the default keymap and the QMK flash tool.  It requires the QMK build environment and a connected keyboard in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/sekigon/grs_70ec/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake sekigon/grs_70ec:default:flash\n```\n\n----------------------------------------\n\nTITLE: Making Build Check Keymap for Shiro Keyboard (QMK)\nDESCRIPTION: This command checks the build keymap for the Shiro keyboard using the QMK Firmware.  It validates the keymap configuration and reports any errors or warnings.  It requires the QMK build environment to be properly configured.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/shiro/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake shiro:check\n```\n\n----------------------------------------\n\nTITLE: Flashing JKB65 RGB Firmware with QMK\nDESCRIPTION: This command builds and flashes the default firmware for the JKB65 RGB keyboard. It requires the QMK environment to be set up correctly to identify the keyboard and flash the firmware. Requires the `qmk flash` command to be configured.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/jadookb/jkb65/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake jadookb/jkb65:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Hnah40 Keyboard Firmware with Make\nDESCRIPTION: This command builds the default firmware for the Hnah40 keyboard using the QMK make system.  It assumes a correctly configured QMK build environment. The output will be a .hex file ready for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/hnah40/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/hnah40:default\n```\n\n----------------------------------------\n\nTITLE: Flashing DT40 Firmware (QMK)\nDESCRIPTION: This command flashes the default QMK firmware to the Skyloong DT40 keyboard. It requires a configured QMK build environment and a connected DT40 keyboard in bootloader mode. The command uploads the compiled firmware to the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/skyloong/dt40/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake skyloong/dt40:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building AddOn Keyboard Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the AddOn keyboard using the QMK build environment. It compiles the keyboard layout and necessary drivers into a flashable firmware image. Requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ocean/addon/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake ocean/addon:default\n```\n\n----------------------------------------\n\nTITLE: Flashing the Drop CTRL v2 Firmware\nDESCRIPTION: This command builds and flashes the default firmware onto the Drop CTRL v2 keyboard. It requires the QMK environment to be properly set up and the keyboard to be in a flashable state (e.g., bootloader mode).\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/drop/ctrl/v2/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake drop/ctrl/v2:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Zlant Keyboard Firmware\nDESCRIPTION: This command builds the default keymap for the Zlant keyboard using the `make` command. It assumes that the QMK build environment is already set up. The resulting firmware can then be flashed to the Zlant keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/zlant/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake zlant:default\n```\n\n----------------------------------------\n\nTITLE: Panning OLED Display (C)\nDESCRIPTION: This function pans the OLED display buffer to the right (or left if `left` is true). This is useful for creating animations or preparing the screen for new drawing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/oled_driver.md#_snippet_22\n\nLANGUAGE: c\nCODE:\n```\n// Pans the buffer to the right (or left by passing true) by moving contents of the buffer\n// Useful for moving the screen in preparation for new drawing\nvoid oled_pan(bool left);\n```\n\n----------------------------------------\n\nTITLE: Matrix State Example (No Key Pressed)\nDESCRIPTION: This example shows the state of the keyboard matrix before any key is pressed. All positions in the matrix are `0`, indicating no active key presses.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/understanding_qmk.md#_snippet_3\n\nLANGUAGE: null\nCODE:\n```\n{\n    {0,0,0,0},\n    {0,0,0,0},\n    {0,0,0,0},\n    {0,0,0,0},\n    {0,0,0,0}\n}\n```\n\n----------------------------------------\n\nTITLE: Flashing Synth Labs 065 Firmware (QMK)\nDESCRIPTION: This command flashes the compiled firmware onto the Synth Labs 065 keyboard. It uses the QMK build environment and assumes the keyboard is in a state ready to accept a firmware update (e.g., bootloader mode).\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/synthlabs/065/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake synthlabs/065:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Littlefoot LX Firmware\nDESCRIPTION: This command builds the default keymap for the Littlefoot LX keyboard using the QMK build environment. It compiles the necessary source code and generates a firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/tominabox1/littlefoot_lx/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake tominabox1/littlefoot_lx:default\n```\n\n----------------------------------------\n\nTITLE: Building Sessanta Keyboard Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the Sessanta keyboard using the QMK build environment. It assumes that the QMK build environment is properly set up. It generates a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/boardsource/sessanta/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake boardsource/sessanta:default\n```\n\n----------------------------------------\n\nTITLE: Building AMAG23 Default Firmware\nDESCRIPTION: This command builds the default firmware for the AMAG23 keyboard using the QMK build environment. It compiles the necessary source code to generate a firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/amag23/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake amag23:default\n```\n\n----------------------------------------\n\nTITLE: Building the M60 Split Keyboard - Make Command\nDESCRIPTION: This command is used to build the firmware for the M60 split keyboard. It specifies the keyboard, layout, and revision to build. Ensure the QMK build environment is properly configured before running this command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mlego/m60_split/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake mlego/m60_split/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Building QMK Firmware for Let's Split v3\nDESCRIPTION: This command builds the QMK firmware for the Let's Split v3 keyboard using the default keymap.  It requires a properly configured QMK build environment. The output is a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ziptyze/lets_split_v3/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake ziptyze/lets_split_v3:default\n```\n\n----------------------------------------\n\nTITLE: Building BIOI G60 Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the BIOI G60 keyboard using the QMK build environment. It requires the QMK build environment to be set up correctly. The resulting firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/bioi/g60/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake bioi/g60:default\n```\n\n----------------------------------------\n\nTITLE: Building ScottoFrog Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the ScottoFrog macropad. It requires the QMK build environment to be set up correctly. The output will be a firmware file that can be flashed to the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/scottokeebs/scottofrog/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake handwired/scottokeebs/scottofrog:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Z150 QMK Firmware\nDESCRIPTION: This command compiles and flashes the default keymap for the Zenith Z-150 keyboard using the handwired configuration.  It assumes the build environment and Black Pill are properly configured.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/z150/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/z150:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Phoebe Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the Phoebe keyboard using the QMK build environment. It requires a properly configured QMK build environment and uses the `maxr1998/phoebe` keyboard definition with the `default` keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/maxr1998/phoebe/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake maxr1998/phoebe:default\n```\n\n----------------------------------------\n\nTITLE: Compiling Udon:13 Firmware with QMK\nDESCRIPTION: This command compiles the QMK firmware for the Udon:13 keyboard using the default keymap.  It requires a properly configured QMK build environment. The compiled firmware can then be flashed onto the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/themadnoodle/udon13/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nqmk compile -kb themadnoodle/udon13 -km default\n```\n\n----------------------------------------\n\nTITLE: Enabling Joystick Support in QMK\nDESCRIPTION: This snippet shows how to enable joystick support within the QMK firmware by adding `JOYSTICK_ENABLE = yes` to the `rules.mk` file. This activates the joystick driver, allowing the keyboard to be recognized as a game controller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/joystick.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nJOYSTICK_ENABLE = yes\n```\n\n----------------------------------------\n\nTITLE: Building KBDFANS d45 firmware with make\nDESCRIPTION: This command builds the default keymap for the KBDFANS d45 keyboard. It requires a properly set up QMK build environment. The output is a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kbdfans/d45/v2/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake kbdfans/d45:default\n```\n\n----------------------------------------\n\nTITLE: Flashing The Teleport TKL Firmware\nDESCRIPTION: This command builds and flashes the default QMK firmware for The Teleport TKL keyboard. It requires the QMK environment to be set up correctly. It combines the build and flash steps into a single command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/teleport/tkl/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake teleport/tkl:default:flash\n```\n\n----------------------------------------\n\nTITLE: Setting OLED Brightness (C)\nDESCRIPTION: These functions control the brightness of the OLED display. `oled_set_brightness` sets the brightness level, while `oled_get_brightness` returns the current brightness level.  `oled_set_brightness` returns the set brightness level as a `uint8_t`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/oled_driver.md#_snippet_29\n\nLANGUAGE: c\nCODE:\n```\n// Sets the brightness level of the display\nuint8_t oled_set_brightness(uint8_t level);\n\n// Gets the current brightness level of the display\nuint8_t oled_get_brightness(void);\n```\n\n----------------------------------------\n\nTITLE: Define External Flash Address Size (C)\nDESCRIPTION: This configuration option specifies the Flash address size in bytes, as specified in datasheet. This helps determine how addresses are represented and used when interacting with the Flash memory.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/flash.md#_snippet_6\n\nLANGUAGE: C\nCODE:\n```\n#define EXTERNAL_FLASH_ADDRESS_SIZE          3\n```\n\n----------------------------------------\n\nTITLE: Flashing Ziggurat Firmware (QMK)\nDESCRIPTION: This command flashes the compiled firmware to the Ziggurat keyboard. It assumes the keyboard is in a flashable state (e.g., bootloader mode) and requires a configured QMK build environment with appropriate flashing tools.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ziggurat/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake ziggurat:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Minne Keyboard Firmware - QMK\nDESCRIPTION: This command flashes the compiled firmware to the Viktus Minne keyboard. It assumes that the keyboard is connected and in a state ready to receive the firmware. Requires a configured QMK build environment and appropriate flashing tools.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/viktus/minne/readme.md#_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nmake viktus/minne:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building s6xty Keyboard Firmware (QMK)\nDESCRIPTION: This command builds the QMK firmware for the s6xty keyboard with the default keymap. It compiles the necessary source code and generates a firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/trnthsn/s6xty/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake trnthsn/s6xty:default\n```\n\n----------------------------------------\n\nTITLE: Define 60% ISO WKL Keyboard Layout\nDESCRIPTION: This snippet defines the layout for a 60% ISO WKL keyboard within the QMK firmware. It uses the LAYOUT_60_iso_wkl identifier. This layout macro is essential for mapping keycodes to specific physical positions on the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/layouts/default/60_iso_wkl/readme.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nLAYOUT_60_iso_wkl\n```\n\n----------------------------------------\n\nTITLE: Building rb87 Keyboard Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the rb87 keyboard. It assumes that the QMK build environment has been set up correctly.  The output will be a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ryanbaekr/rb87/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake ryanbaekr/rb87:default\n```\n\n----------------------------------------\n\nTITLE: Building Lunar Keyboard Firmware\nDESCRIPTION: This snippet shows how to build the default firmware for the ai03/lunar keyboard using the QMK build environment. It assumes the QMK build environment is already set up. The command compiles the firmware and generates a .hex file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ai03/lunar/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake ai03/lunar:default\n```\n\n----------------------------------------\n\nTITLE: Building Jelly Epoch Firmware with QMK - Makefile\nDESCRIPTION: This snippet demonstrates how to build the default firmware for the Jelly Epoch soldered PCB using the QMK build environment. It leverages the `make` command with specific arguments to compile the firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/owlab/jelly_epoch/soldered/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake owlab/jelly_epoch/soldered:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Redox Wireless Firmware (QMK)\nDESCRIPTION: This command flashes the compiled firmware onto the Redox Wireless keyboard using AVRDUDE. It requires the AVRDUDE tool to be configured in the QMK build environment and assumes a Pro Micro controller is used.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/redox/wireless/readme.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nmake redox/wireless:default:avrdude\n```\n\n----------------------------------------\n\nTITLE: Detecting Split/Gaming Mode\nDESCRIPTION: This C code snippet demonstrates how to detect if the right half of the Voyager keyboard is disconnected and then enable a specific layer. The `is_transport_connected()` function checks for the connection status.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/zsa/voyager/readme.md#_snippet_2\n\nLANGUAGE: C\nCODE:\n```\nvoid housekeeping_task_user(void) {\n    if (!is_transport_connected()) {\n        // set layer\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Building Walter Keyboard Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the Walter keyboard. It requires a correctly set up QMK build environment.  The output will be a .hex or .bin file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/swiftrax/walter/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake handwired/swiftrax/walter:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Duet Firmware\nDESCRIPTION: Flashes the built firmware onto the ai03/duet keyboard.  This command programs the compiled firmware onto the keyboard's microcontroller (RP2040) using the QMK flashing tools.  It requires the keyboard to be in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ai03/duet/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake ai03/duet:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware to Nayeon Keyboard\nDESCRIPTION: This command flashes the pre-built or newly built firmware to the Nayeon keyboard using the VIA keymap. This command assumes the keyboard is already in bootloader mode. The QMK environment needs to be configured for the flashing utility to work.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/abatskeyboardclub/nayeon/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake abatskeyboardclub/nayeon:via:flash\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for Albacore Macropad (QMK)\nDESCRIPTION: This command builds the default firmware for the Albacore macropad using the QMK build environment. It requires the QMK build environment to be set up correctly. The resulting firmware can then be flashed onto the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/paprikman/albacore/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake paprikman/albacore:default\n```\n\n----------------------------------------\n\nTITLE: Building the FC660C QMK Firmware\nDESCRIPTION: This command builds the default QMK firmware for the FC660C keyboard. It assumes that the build environment has been properly set up.  See the QMK documentation for details on setting up the build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/fc660c/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake fc660c:default\n```\n\n----------------------------------------\n\nTITLE: Defining Master Side Handedness (Left) in QMK\nDESCRIPTION: This definition specifies that the left side of the split keyboard is considered the master. It is defined in the `config.h` file. If neither `MASTER_RIGHT` nor `MASTER_LEFT` is defined, the default is `MASTER_LEFT`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/split_keyboard.md#_snippet_8\n\nLANGUAGE: c\nCODE:\n```\n#define MASTER_LEFT\n```\n\n----------------------------------------\n\nTITLE: ISP Header Pinout\nDESCRIPTION: This describes the pinout of the ISP header on the KC60SE keyboard PCB.  It shows which pad corresponds to which signal or function, such as MISO, VCC, SCLK, MOSI, Reset, and Ground.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kc60se/readme.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n  2 4 6\n  : : :\n  1 3 5\n```\n\n----------------------------------------\n\nTITLE: Create a new QMK keymap\nDESCRIPTION: This command creates a new keymap based on the `default` keymap.  If defaults are configured, it will create a keymap in the default keyboard's directory. Otherwise, the `-kb` flag must be used.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/newbs_building_firmware.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nqmk new-keymap\n```\n\n----------------------------------------\n\nTITLE: Configuring Handedness by Pin in config.h (C)\nDESCRIPTION: This code configures the firmware to determine handedness by reading a specified pin on the controller. `SPLIT_HAND_PIN` defines the pin to read. By default, a high signal indicates the left hand.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/split_keyboard.md#_snippet_2\n\nLANGUAGE: c\nCODE:\n```\n#define SPLIT_HAND_PIN B7\n```\n\n----------------------------------------\n\nTITLE: Compiling ScottoMouse Firmware\nDESCRIPTION: This command compiles the default firmware for the ScottoMouse keyboard using the QMK build environment. It requires the QMK build environment to be set up beforehand. The compiled firmware can then be flashed onto the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/scottokeebs/scottomouse/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake handwired/scottokeebs/scottomouse:default\n```\n\n----------------------------------------\n\nTITLE: Flashing OM60 Keyboard Firmware\nDESCRIPTION: This command flashes the default keymap to the OM60 keyboard using the QMK build environment. It builds the firmware and then attempts to flash it to the keyboard. Requires a configured QMK build environment and a connected keyboard in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/om60/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake om60:default:flash\n```\n\n----------------------------------------\n\nTITLE: Enabling SH1106 I2C Driver in rules.mk\nDESCRIPTION: This code snippet demonstrates how to enable the SH1106 I2C driver in the `rules.mk` file for the Quantum Painter library. This step is required to use SH1106 displays with I2C interface.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/quantum_painter.md#_snippet_30\n\nLANGUAGE: make\nCODE:\n```\nQUANTUM_PAINTER_DRIVERS += sh1106_i2c\n```\n\n----------------------------------------\n\nTITLE: Building ANAVI Knobs 3 Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the ANAVI Knobs 3 keyboard using the QMK build environment. It assumes that the QMK build environment has been properly set up according to the QMK documentation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/anavi/knobs3/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake anavi/knobs3:default\n```\n\n----------------------------------------\n\nTITLE: Building Moon Keyboard Firmware\nDESCRIPTION: This snippet shows how to build the default keymap for the Moon keyboard using the QMK build environment.  It assumes that the build environment is already set up according to the QMK documentation. This command will compile the firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/moon/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake moon:default\n```\n\n----------------------------------------\n\nTITLE: Building Symmetry60 Firmware with QMK\nDESCRIPTION: This snippet provides the command to build the default firmware for the Symmetry60 keyboard using the QMK build environment. It assumes the QMK build environment is already set up.  The command targets the handwired/symmetry60 keyboard with the default keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/symmetry60/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/symmetry60:default\n```\n\n----------------------------------------\n\nTITLE: Building PW88 Firmware\nDESCRIPTION: This command builds the default firmware for the PW88 keyboard. It assumes that the QMK build environment is already set up. The output will be a .hex or .bin file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/smoll/pw88/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake pw88:default\n```\n\n----------------------------------------\n\nTITLE: Flashing GPAD8-2R Firmware (QMK)\nDESCRIPTION: This command flashes the compiled firmware to the GPAD8-2R keyboard using the QMK build environment. It requires the QMK build environment to be configured and the keyboard to be in a flashable state, typically via bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/gkeyboard/gpad8_2r/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake gkeyboard/gpad8_2r:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building HoodrowG Firmware\nDESCRIPTION: This command builds the default firmware for the CannonKeys HoodrowG keyboard. It requires the QMK build environment to be set up. The command compiles the keyboard layout and generates a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cannonkeys/hoodrowg/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake cannonkeys/hoodrowg:default\n```\n\n----------------------------------------\n\nTITLE: Configuring 'lite' custom matrix in rules.mk\nDESCRIPTION: This snippet configures the 'lite' custom matrix implementation by setting `CUSTOM_MATRIX = lite` in the `rules.mk` file. This enables the simplified custom matrix handling, requiring implementation of `matrix_init_custom` and `matrix_scan_custom` functions.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/custom_matrix.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nCUSTOM_MATRIX = lite\n```\n\n----------------------------------------\n\nTITLE: Building Zepsody Keyboard Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the Zepsody keyboard. It utilizes the QMK make system, targeting the specified keyboard and keymap. The output is a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechlovin/zed1800/zepsody/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake mechlovin/zed1800/zepsody:default\n```\n\n----------------------------------------\n\nTITLE: Building REVIUNG61 Firmware\nDESCRIPTION: This snippet shows how to build the default firmware for the REVIUNG61 keyboard using the QMK build environment. It requires the QMK build environment to be set up correctly. The output is a compiled firmware ready to be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/reviung/reviung61/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake reviung61:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Pinky3 Keyboard Firmware\nDESCRIPTION: This command compiles and flashes the default firmware to the Pinky3 keyboard. It requires a correctly configured QMK build environment and a connected keyboard in flashing mode.  The `flash` target is appended to the `make` command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/pinky/3/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake pinky/3:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Dumbpad Firmware\nDESCRIPTION: This snippet demonstrates how to build the default firmware for the dumbpad keyboard using the `make` command.  It requires a properly configured QMK build environment. It specifies the keyboard (dumbpad/v0x) and keymap (default).\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/dumbpad/v0x/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake dumbpad/v0x:default\n```\n\n----------------------------------------\n\nTITLE: Building Fleuron Firmware with QMK Make\nDESCRIPTION: These commands are used to build and flash the Fleuron keyboard firmware using the QMK build environment. The first command builds the firmware, and the second command builds and flashes it using DFU.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/fleuron/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake fleuron:default to build firmware\nmake fleuron:default:dfu to make and flash with dfu\n```\n\n----------------------------------------\n\nTITLE: Flashing KiwiKeebs MacroBoard V2.0 Firmware\nDESCRIPTION: This command flashes the default firmware onto the KiwiKeebs MacroBoard V2.0.  It requires the QMK build environment and a connected MacroBoard. It assumes the required flashing tools are configured.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kiwikeebs/macro_v2/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake kiwikeebs/macro_v2:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing the EC 66x keyboard firmware\nDESCRIPTION: This command flashes the default firmware onto the cipulot/ec_66x keyboard. It requires a compatible flashing tool and that the keyboard be in bootloader mode. Check QMK documentation for specific flashing instructions.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cipulot/ec_65x/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake cipulot/ec_66x:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Preonic Rev3 Firmware (dfu-util)\nDESCRIPTION: This command flashes the compiled QMK firmware onto a Preonic rev3 keyboard using the dfu-util tool.  It requires dfu-util to be installed and accessible. The command assumes the keyboard is in DFU mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/preonic/readme.md#_snippet_2\n\nLANGUAGE: make\nCODE:\n```\nmake preonic/rev3:default:dfu-util\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for DN Numpad Rev1 with QMK\nDESCRIPTION: This command builds the default firmware for the DN Numpad Rev1 keyboard using the QMK build environment.  It requires a properly configured QMK build environment. The output is a firmware file ready to be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/dnworks/numpad/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake dnworks/numpad:default\n```\n\n----------------------------------------\n\nTITLE: Writing Raw String to OLED (C)\nDESCRIPTION: This function writes a string directly to the OLED display buffer at the current cursor position. It takes a pointer to the data and the size of the data as input. No cursor advancement is performed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/oled_driver.md#_snippet_24\n\nLANGUAGE: c\nCODE:\n```\n// Writes a string to the buffer at current cursor position\nvoid oled_write_raw(const char *data, uint16_t size);\n```\n\n----------------------------------------\n\nTITLE: Building the Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the handwired/3dp660_oled keyboard. It assumes that the QMK build environment is set up correctly.  It utilizes the `make` command with the keyboard and keymap specified.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/3dp660_oled/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake handwired/3dp660_oled:default\n```\n\n----------------------------------------\n\nTITLE: Flashing bajjak Keyboard Firmware\nDESCRIPTION: This command flashes the built firmware onto the bajjak keyboard. It depends on the `dfu-programmer` or similar tool being installed and configured correctly.  The keyboard should be in bootloader mode before running this command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/bajjak/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake bajjak:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing QMK Firmware to Keychron C2 Pro\nDESCRIPTION: This command flashes the built QMK firmware onto the Keychron C2 Pro keyboard. It requires the QMK flashing tools to be installed and configured correctly. The command specifies the keyboard configuration and the 'flash' target to initiate the flashing process.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keychron/c2_pro/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake keychron/c2/ansi/rgb:default:flash\n```\n\nLANGUAGE: shell\nCODE:\n```\nmake keychron/c2/ansi/white:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Class60 Firmware (Make Flash Command)\nDESCRIPTION: This command flashes the compiled QMK firmware onto the Class60 keyboard.  It depends on the `make` command and a correctly set up QMK build environment with necessary flashing tools.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mmkeyboard/class60/soldered/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake mmkeyboard/class60/soldered:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building UnSplit Keyboard Firmware using QMK\nDESCRIPTION: This command is used to build the default keymap for the UnSplit keyboard using the QMK firmware. It requires a properly configured QMK build environment. The output will be a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/swiftrax/unsplit/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake handwired/swiftrax/unpslit:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Trainpad Keyboard Firmware (Makefile)\nDESCRIPTION: This command flashes the compiled firmware onto the trainpad keyboard using the QMK build environment. It requires the keyboard to be in bootloader mode. Verify your setup before attempting this command to prevent errors.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/trainpad/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake trainpad:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for Wm1 Hotswap Keyboard\nDESCRIPTION: This command is used to build the firmware for the heliar/wm1_hotswap keyboard with the default keymap using the QMK build environment. It assumes that the QMK build environment is already set up correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/heliar/wm1_hotswap/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake heliar/wm1_hotswap:default\n```\n\n----------------------------------------\n\nTITLE: Defining Split USB Timeout Poll Frequency in QMK\nDESCRIPTION: This sets the polling frequency (in milliseconds) when detecting master/slave roles when using `SPLIT_USB_DETECT`. This determines how often the keyboard checks for a USB connection.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/config_options.md#_snippet_100\n\nLANGUAGE: c\nCODE:\n```\n#define SPLIT_USB_TIMEOUT_POLL 10\n```\n\n----------------------------------------\n\nTITLE: Flashing QMK Firmware to EC980C\nDESCRIPTION: This command builds and flashes the default QMK firmware for the EC980C keyboard. It requires the QMK build environment and a connected keyboard in bootloader mode. The flash target depends on the bootloader being used.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cipulot/ec_980c/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake cipulot/ec_980c:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building GH80-3700 Firmware\nDESCRIPTION: This command builds the default firmware for the GH80-3700 keyboard using the QMK build environment. It assumes the QMK build environment is already set up. The resulting firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/evyd13/gh80_3700/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake evyd13/gh80_3700:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware to Mont Cervin Klein - QMK\nDESCRIPTION: This command builds and flashes the default firmware to the Mont Cervin Klein keyboard. It depends on a configured QMK build environment and a connected keyboard in a flashable state. It outputs the flashed firmware onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/era/sirind/klein_sd/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake era/sirind/klein_sd:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing the piche60 Keyboard\nDESCRIPTION: This command flashes the compiled firmware to the piche60 keyboard. It relies on the QMK build environment and a connected keyboard in bootloader mode. It programs the keyboard with the compiled firmware, allowing it to function with the defined keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/chlx/piche60/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake chlx/piche60:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing BBPad Firmware (f401)\nDESCRIPTION: This command flashes the QMK Firmware to the BBPad using the STM32F401 BlackPill. The `default` keymap is used. Requires a properly set up QMK build environment and a connected programmer.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechwild/bbpad/readme.md#_snippet_2\n\nLANGUAGE: make\nCODE:\n```\nmake mechwild/bbpad/f401:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Pteropus Keyboard Firmware\nDESCRIPTION: These commands build the firmware for the Pteropus keyboard using the QMK build environment.  The `make` command compiles the firmware for specific keymaps, such as `default` and `manna-harbour_miryoku`. Requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/pteropus/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake pteropus:default\n```\n\nLANGUAGE: Makefile\nCODE:\n```\nmake pteropus:manna-harbour_miryoku\n```\n\n----------------------------------------\n\nTITLE: Building Lily Keyboard Firmware - QMK\nDESCRIPTION: This command is used to build the default firmware for the Lily keyboard using the QMK build environment. It compiles the keymap and other configurations into a firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ai03/lily/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake ai03/lily:default\n```\n\n----------------------------------------\n\nTITLE: Flashing QMK Firmware to skmt/15k\nDESCRIPTION: This command builds and flashes the default keymap for the skmt/15k macropad to the connected device. It assumes the QMK build environment is set up correctly and the device is connected.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/skmt/15k/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake skmt/15k:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building RS40 Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the RS40 keyboard using the QMK build environment. It requires the QMK build environment to be properly set up. The output is a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kj_modify/rs40/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake kj_modify/rs40:default\n```\n\n----------------------------------------\n\nTITLE: Define Layer Names Enum\nDESCRIPTION: Defines an enumeration of layer names for readability within the keymap.  This allows the keymap to be more easily maintained.  The enum values are used as indices into the `keymaps` array.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/keymap.md#_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nenum layer_names {\n    _BL,\n    _FL,\n    _CL,\n};\n```\n\n----------------------------------------\n\nTITLE: Flashing Foundation Keyboard Firmware\nDESCRIPTION: This command builds and flashes the default firmware for the mechlovin/foundation keyboard. It requires the QMK build environment to be set up and a flashing tool to be configured. The keyboard needs to be in bootloader mode for flashing to succeed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechlovin/foundation/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake mechlovin/foundation:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Uno Firmware (QMK)\nDESCRIPTION: Compiles the default firmware for the Keyhive Uno rev2 keyboard using the QMK build system. Ensure the build environment is properly set up beforehand.  Adjust the revision (`rev2`) if using the `rev1` version.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keyhive/uno/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake keyhive/uno/rev2:default\n```\n\n----------------------------------------\n\nTITLE: Flashing N86 Keyboard Firmware with QMK\nDESCRIPTION: This command builds and flashes the default firmware for the N86 keyboard (Linx3 variant) using the QMK build environment.  It requires a properly configured QMK environment and a connected keyboard in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/era/linx3/n86/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake era/linx3/n86:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building MB-44 Firmware\nDESCRIPTION: This command builds the default firmware for the MB-44 keyboard within the QMK firmware environment. It requires a properly configured build environment as specified in the QMK documentation. This assumes the `mb44` keyboard and the `default` keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mb44/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake mb44:default\n```\n\n----------------------------------------\n\nTITLE: Building str.merro60 Firmware\nDESCRIPTION: This command builds the default firmware for the str.merro60 keyboard using the QMK build environment. It assumes the QMK build environment is already set up. The command utilizes the 'make' utility to compile the firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/chlx/str_merro60/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake chlx/str_merro60:default\n```\n\n----------------------------------------\n\nTITLE: Setting Serial Driver to Bitbang in rules.mk (Make)\nDESCRIPTION: This snippet configures the QMK firmware to use the bitbang serial driver for split keyboard communication. It involves setting the SERIAL_DRIVER variable in the rules.mk file. This driver is the default and uses GPIO pins for communication.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/serial.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nSERIAL_DRIVER = bitbang\n```\n\n----------------------------------------\n\nTITLE: Flashing the Vida Keyboard Firmware (Hotswap)\nDESCRIPTION: This command compiles and flashes the QMK firmware to the CannonKeys Vida keyboard with the hotswap layout and default keymap. This requires the QMK build environment to be set up and the keyboard to be in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cannonkeys/vida/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake cannonkeys/vida:hotswap:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Leviatan Keyboard Firmware\nDESCRIPTION: This command builds and flashes the default firmware for the CannonKeys Leviatan keyboard.  It requires the QMK build environment to be set up and the necessary flashing tools to be installed. The keyboard needs to be connected to the computer.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cannonkeys/leviatan/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake cannonkeys/leviatan:default:flash\n```\n\n----------------------------------------\n\nTITLE: Compiling Firmware for Freebird 75 with VIA Keymap\nDESCRIPTION: This command compiles the QMK firmware for the Freebird 75 keyboard using the VIA keymap.  It requires a properly configured QMK build environment. The resulting firmware can then be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keebsforall/freebird75/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nqmk compile -kb keebsforall/freebird75 -km via\n```\n\n----------------------------------------\n\nTITLE: Building XD87 Firmware (ANSI Layout)\nDESCRIPTION: This command builds the QMK firmware for the XD87 keyboard with the ANSI TKL layout. It requires a properly configured QMK build environment. The output will be a firmware file specific to the ANSI layout.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/xiudi/xd87/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake xiudi/xd87:default_tkl_ansi\n```\n\n----------------------------------------\n\nTITLE: Building Meishi2 Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the Meishi2 keyboard. It requires a properly set up QMK build environment. The command compiles the keyboard's keymap and firmware based on the specified target (biacco42/meishi2:default).\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/biacco42/meishi2/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake biacco42/meishi2:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Elite C Right Side\nDESCRIPTION: This command flashes the right side of the Keyhive Sofle keyboard with the default keymap using the dfu-split-right target, suitable for Elite C or DFU bootloader builds. The correct bootloader has to be selected.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/sofle/keyhive/readme.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nmake sofle/keyhive:default:dfu-split-right\n```\n\n----------------------------------------\n\nTITLE: Flashing Lyra Keyboard Firmware with QMK\nDESCRIPTION: This command flashes the built firmware onto the Lyra keyboard using QMK. This process will require the user to press the reset button on the keyboard when requested. The command targets the default keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/malevolti/lyra/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake malevolti/lyra:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building MelGeek MJ64 Firmware\nDESCRIPTION: This command builds the default firmware for the MelGeek MJ64 keyboard revision 1 using the QMK build environment. It assumes that the QMK build environment has already been set up according to the QMK documentation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/melgeek/mj64/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake melgeek/mj64/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Convolution Keyboard Firmware\nDESCRIPTION: This command builds and flashes the default firmware for the Keebio Convolution Rev1 keyboard. It relies on the QMK build environment and the `dfu-programmer` or equivalent flashing tool being properly configured.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keebio/convolution/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake keebio/convolution/rev1:default:flash\n```\n\n----------------------------------------\n\nTITLE: Compiling Firmware from Configurator Export - qmk compile\nDESCRIPTION: This command compiles firmware from a JSON export obtained from the QMK Configurator. It requires the JSON file as input. The `-c` flag may be included to clean before compiling.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/cli_commands.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nqmk compile [-c] <configuratorExport.json>\n```\n\n----------------------------------------\n\nTITLE: Building nt980 Firmware with QMK\nDESCRIPTION: This command builds the QMK firmware for the nt980 keyboard with the default keymap.  It requires the QMK build environment to be set up correctly. The command compiles the firmware, which can then be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/evyd13/nt980/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake evyd13/nt980:default\n```\n\n----------------------------------------\n\nTITLE: Building Eclipse60 Firmware with Make\nDESCRIPTION: This command compiles the QMK firmware for the Eclipse60 keyboard with the default keymap. It requires a properly configured QMK build environment. The output is a firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/sawnsprojects/eclipse/eclipse60/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake eclipse/eclipse60:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Baragon Firmware (UF2)\nDESCRIPTION: This instruction describes how to flash the Baragon macropad by copying the UF2 file to the RP2040. The RP2040 will recognize the UF2 file when the board is in bootloader mode and automatically flash the firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/phantagom/baragon/readme.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nCopy the uf2 file to the rp2040\n```\n\n----------------------------------------\n\nTITLE: Flashing FistBNMP Firmware (QMK)\nDESCRIPTION: This command flashes the compiled firmware to the FistBNMP keyboard. It relies on the QMK build environment and assumes the keyboard is in a state ready to receive the firmware, typically DFU mode or similar.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/rpiguy9907/fistbnmp/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake rpiguy9907/fistbnmp:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Leviatan Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the CannonKeys Leviatan keyboard using the QMK build environment.  It requires the QMK build environment to be properly set up.  The output will be a firmware file suitable for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cannonkeys/leviatan/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake cannonkeys/leviatan:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware to Moondrop Dash75 (QMK)\nDESCRIPTION: This command flashes the compiled firmware to the Moondrop Dash75 R1 keyboard using the QMK build environment. It requires the keyboard to be in bootloader mode. Requires a properly configured QMK build environment and a connection to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/moondrop/dash75/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake moondrop/dash75/r1:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Lily58L Firmware with QMK\nDESCRIPTION: This command flashes the pre-built firmware onto the Lily58L keyboard using QMK. It uses the 'lily58/light' keyboard and 'lily58l' keymap, with the 'flash' target. A connected and recognized keyboard is necessary.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/lily58/keymaps/lily58l/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake lily58/light:lily58l:flash\n```\n\n----------------------------------------\n\nTITLE: Building Roadkit Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Roadkit using the QMK build environment. It assumes the QMK build environment has already been set up according to the QMK documentation. Execute this command in the qmk_firmware directory.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/thevankeyboards/roadkit/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake thevankeyboards/roadkit:default\n```\n\n----------------------------------------\n\nTITLE: Building QMK Firmware for h08 Macropad\nDESCRIPTION: This command builds the default QMK firmware for the h08 macropad designed for the Singa Ocelot.  It requires a properly set up QMK build environment. The resulting firmware can then be flashed to the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/hineybush/h08_ocelot/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake hineybush/h08_ocelot:default\n```\n\n----------------------------------------\n\nTITLE: Deferred Execution Callback Example\nDESCRIPTION: This example demonstrates a deferred execution callback function `my_callback` in QMK. It takes the trigger time and a callback argument as input, performs some action, and optionally reschedules itself based on the return value of `my_deferred_functionality()`. The return value indicates the delay in milliseconds for the next execution or 0 to unregister the callback.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/custom_quantum_functions.md#_snippet_8\n\nLANGUAGE: c\nCODE:\n```\nuint32_t my_callback(uint32_t trigger_time, void *cb_arg) {\n    /* do something */\n    bool repeat = my_deferred_functionality();\n    return repeat ? 500 : 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Building the nein firmware with make\nDESCRIPTION: This command compiles the QMK firmware for the 'nein' keyboard using the default keymap.  It requires a properly configured QMK build environment and invokes the make command with the target specified as '40percentclub/nein:default'.  The output is the compiled firmware ready to be flashed onto the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/40percentclub/nein/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake 40percentclub/nein:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Vaguette Lite Firmware (QMK)\nDESCRIPTION: This command flashes the default firmware to the Vaguette Lite keyboard using the QMK build system. It requires a properly configured QMK build environment and a compatible flashing tool. The keyboard needs to be in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/delikeeb/vaguettelite/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake delikee/vaguettelite:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Waffling60 Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the Waffling60 rev_d keyboard using the QMK build environment. It requires the QMK build environment to be properly set up. The output is a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/4pplet/waffling60/rev_d/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake 4pplet/waffling60/rev_d:default\n```\n\n----------------------------------------\n\nTITLE: Building TKC Portico Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the TKC Portico keyboard using the QMK build environment. It assumes that the QMK build environment has already been set up correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/tkc/portico/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake tkc/portico:default\n```\n\n----------------------------------------\n\nTITLE: Building LATE-9 Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the LATE-9 keyboard (rev1).  It assumes that the QMK build environment is already set up.  The output is a .hex file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/rookiebwoy/late9/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake rookiebwoy/late9/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Vault35 Keyboard Firmware (QMK)\nDESCRIPTION: This command flashes the default firmware to the Vault35 keyboard using the QMK build environment. It requires the QMK build environment to be set up and a flashing tool to be installed. The command combines the build and flash steps into one.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/projectcain/vault35/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake projectcain/vault35:default:flash\n```\n\n----------------------------------------\n\nTITLE: Compiling the Enclave-1 Firmware (QMK)\nDESCRIPTION: This command compiles the default keymap for the Enclave-1 macropad using the QMK Firmware build environment.  It requires the QMK build environment to be set up correctly. The command creates a firmware file that can be flashed to the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keyquest/enclave/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake keyquest/enclave:default\n```\n\n----------------------------------------\n\nTITLE: Building the firmware for Unicomp PC122 OverNumpad 1xb\nDESCRIPTION: This command builds the default firmware for the Unicomp PC122 OverNumpad 1xb keyboard. It uses the 'make' command within the QMK Firmware environment to compile the keyboard's firmware with the default configuration.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/unicomp/pc122/overnumpad_1xb/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake unicomp/pc122/overnumpad_1xb:default\n```\n\n----------------------------------------\n\nTITLE: Building Matrix NOAH Firmware with Make\nDESCRIPTION: This command builds the default firmware for the Matrix NOAH keyboard using the QMK build environment. It compiles the keyboard's keymap and other configuration files into a firmware image that can be flashed onto the keyboard.  It requires a properly set up QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/matrix/noah/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake matrix/noah:default\n```\n\n----------------------------------------\n\nTITLE: Building the winter keyboard firmware\nDESCRIPTION: This command builds the default keymap for the winter keyboard. It assumes that the QMK build environment is already set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kibou/winter/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake kibou/winter:default\n```\n\n----------------------------------------\n\nTITLE: Compiling Keyboard Firmware with QMK\nDESCRIPTION: This command compiles the keyboard firmware for the IDOBAO ID63 keyboard with the default keymap using the QMK build environment. It utilizes the `qmk compile` command and specifies the keyboard and keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/idobao/id63/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nqmk compile -kb idobao/id63 -km default\n```\n\n----------------------------------------\n\nTITLE: Building H88 G2 Firmware\nDESCRIPTION: This command builds the default firmware for the H88 G2 keyboard. It requires a properly configured QMK build environment. The output will be a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/hineybush/h88_g2/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake hineybush/h88_g2:default\n```\n\n----------------------------------------\n\nTITLE: Building White Backlight Firmware for Keychron S1 (ANSI)\nDESCRIPTION: This command builds the QMK firmware for the Keychron S1 keyboard with White backlight and ANSI layout, using the default configuration. A properly configured QMK build environment is required. The resulting firmware is intended to be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keychron/s1/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake keychron/s1/ansi/white:default\n```\n\n----------------------------------------\n\nTITLE: Building Four Banger Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Four Banger macro pad using the QMK build environment. It assumes the QMK build environment has already been set up according to the QMK documentation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/bpiphany/four_banger/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake bpiphany/four_banger:default\n```\n\n----------------------------------------\n\nTITLE: Extra Key Placeholder Definition - C\nDESCRIPTION: This snippet shows the placeholder in the keymap code where an extra key can be defined. This key will function as the key to the right of the P key.  The `XXXXXXX` should be replaced with a valid keycode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/marksard/treadstone48/keymaps/default/readme_jp.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n      XXXXXXX \\n  // ExtraKey: This key is an extra key. REV1 is a split back space. REV2 is to the right of the arrow-up key.\n```\n\n----------------------------------------\n\nTITLE: Building zoom65_lite Firmware\nDESCRIPTION: This command builds the default firmware for the Meletrix zoom65_lite keyboard. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/meletrix/zoom65_lite/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake meletrix/zoom65_lite:default\n```\n\n----------------------------------------\n\nTITLE: Building firmware for handwired Redragon Vara with QMK\nDESCRIPTION: This command builds the default firmware for the handwired Redragon Vara keyboard using the QMK build environment.  It assumes that the QMK build environment is properly set up. The output will be a firmware file that can be flashed to the Teensy 2.0.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/boss566y/redragon_vara/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/boss566y/redragon_vara:default\n```\n\n----------------------------------------\n\nTITLE: Build Vængr keyboard with default keymap\nDESCRIPTION: This command builds the firmware for the Vængr keyboard using the default keymap. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/runes/vaengr/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake vaengr:default\n```\n\n----------------------------------------\n\nTITLE: Building Chiron Keyboard Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Chiron keyboard using the QMK build environment. It requires QMK to be properly set up.  The resulting firmware can then be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/chiron/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake handwired/chiron:default\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for EC Alveus\nDESCRIPTION: This command builds the default firmware for the EC Alveus 1.2.0 keyboard. It assumes the QMK build environment is already set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cipulot/ec_alveus/1_2_0/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake cipulot/ec_alveus/1_2_0:default\n```\n\n----------------------------------------\n\nTITLE: Building the Feker IK75 Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the Feker IK75 keyboard. It leverages the QMK build environment to compile the necessary files.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/feker/ik75/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake feker/ik75:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Fuji75 Hotswap Firmware\nDESCRIPTION: This command builds and flashes the default firmware to the Fuji75 hotswap keyboard.  It relies on the QMK build environment and assumes a compatible flashing tool is available.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/sakura_workshop/fuji75/hotswap/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake sakura_workshop/fuji75/hotswap:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building AMJ84 Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the AMJ84 keyboard using QMK.  It requires a properly configured QMK build environment.  The output is a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/amjkeyboard/amj84/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake amjkeyboard/amj84:default\n```\n\n----------------------------------------\n\nTITLE: Flashing ScottoHazard Firmware (QMK)\nDESCRIPTION: This command flashes the default firmware to the ScottoHazard keyboard using the QMK build environment and the appropriate flashing tool. It requires the QMK build environment to be set up correctly, and the keyboard to be in bootloader mode.  It builds the firmware and then flashes it to the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/scottokeebs/scottohazard/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake handwired/scottokeebs/scottohazard:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing suisei Keyboard Firmware\nDESCRIPTION: This command builds and flashes the default firmware for the suisei keyboard. It depends on the QMK build environment being correctly configured and connected to a compatible flashing tool. This flashes the keyboard's firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kibou/suisei/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake kibou/suisei:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Canoe Firmware with Make\nDESCRIPTION: This command builds the default keymap for the Canoe keyboard using the QMK build environment. It requires a properly configured QMK build environment. The output will be a .hex or .bin file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/percent/canoe/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake percent/canoe:default\n```\n\n----------------------------------------\n\nTITLE: Building Bloop65 QMK Firmware\nDESCRIPTION: This command compiles the QMK firmware for the Bloop65 keyboard with the default keymap.  It assumes that the QMK build environment has already been set up. It takes no direct input parameters and outputs the compiled firmware ready to be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kwub/bloop/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake kwub/bloop:default\n```\n\n----------------------------------------\n\nTITLE: Building Alish40 Firmware (make)\nDESCRIPTION: This command builds the default firmware for the Alish40 keyboard. It assumes that the QMK build environment has been set up correctly and uses the `make` command to compile the firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/reedskeebs/alish40/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake reedskeebs/alish40:default\n```\n\n----------------------------------------\n\nTITLE: Building IDOBAO ID80 Firmware (QMK)\nDESCRIPTION: This command builds the firmware for the IDOBAO ID80 keyboard with backlight disabled. It assumes the QMK build environment is set up. The resulting firmware can then be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/idobao/id80/v1/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake idobao/id80/v2:default BACKLIGHT_ENABLE=no\n```\n\n----------------------------------------\n\nTITLE: Building JM60 QMK Firmware\nDESCRIPTION: This command builds the default firmware for the JM60 keyboard using the QMK build environment. It requires the QMK build environment to be set up beforehand. The output will be a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kbdfans/jm60/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake kbdfans/jm60:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Keyboard Firmware with QMK\nDESCRIPTION: This command builds and flashes the default firmware to the Brick65S keyboard. It uses the QMK build environment and requires a connected and bootloader-enabled keyboard. This command attempts to automatically flash the built firmware to the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/era/sirind/brick65s/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake era/sirind/brick65s:default:flash\n```\n\n----------------------------------------\n\nTITLE: Compiling JD40 firmware\nDESCRIPTION: This command compiles the default keymap for the JD40 keyboard using the QMK build environment. It assumes that the QMK build environment is already set up. The compiled firmware can then be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/jd40/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake jd40:default\n```\n\n----------------------------------------\n\nTITLE: Building Southern Breeze Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Southern Breeze Rev1 keyboard using the QMK build environment.  It assumes that the QMK build environment has already been set up according to the QMK documentation. The output is a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/afternoonlabs/southern_breeze/rev1/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake afternoonlabs/southern_breeze/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Building DOIO KB38 Firmware\nDESCRIPTION: This command builds the default keymap for the DOIO KB38 keyboard using the QMK build environment. It compiles the source code and generates a firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/doio/kb38/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake doio/kb38:default\n```\n\n----------------------------------------\n\nTITLE: Building Kitten Paw Firmware\nDESCRIPTION: This command builds the default keymap for the Kitten Paw keyboard within the QMK Firmware environment.  It requires a properly configured QMK build environment. The output is a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/bpiphany/kitten_paw/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake bpiphany/kitten_paw:default\n```\n\n----------------------------------------\n\nTITLE: Building Fortitude60 Firmware (QMK)\nDESCRIPTION: This command builds the QMK Firmware for the Fortitude60 keyboard with the rev1 PCB and default keymap.  It also flashes the firmware to the keyboard's microcontroller. Requires a configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/fortitude60/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake fortitude60/rev1:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building angle65 Firmware with QMK (Make)\nDESCRIPTION: This command builds the default firmware for the angle65 keyboard using the QMK build environment. It compiles the source code and generates a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/vertex/angle65/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake vertex/angle65:default\n```\n\n----------------------------------------\n\nTITLE: Building Waffling60 Firmware QMK\nDESCRIPTION: This command builds the default firmware for the Waffling60 keyboard (rev_d_iso variant) within the QMK Firmware environment. It requires a properly configured QMK build environment. The resulting firmware can then be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/4pplet/waffling60/rev_d_iso/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake 4pplet/waffling60/rev_d_iso:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware to HEX.4B Keyboard\nDESCRIPTION: This command builds and flashes the default firmware to the HEX.4B keyboard's revision 1 using QMK. This assumes that the QMK environment is set up correctly, and the connected keyboard is in a flashable state.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechlovin/hex4b/rev1/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake mechlovin/hex4b/rev1:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Keyboard Firmware with Make\nDESCRIPTION: This command builds the default firmware for the handwired/battleship_gamepad keyboard using the `make` command. It compiles the keyboard's keymap and firmware based on the QMK framework's configuration.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/battleship_gamepad/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake handwired/battleship_gamepad:default\n```\n\n----------------------------------------\n\nTITLE: Building Oreum Keyboard Firmware with Make\nDESCRIPTION: This command builds the default firmware for the Oreum keyboard using the QMK make system. It requires a properly configured QMK build environment. The output will be a .hex or .bin file suitable for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechlovin/zed1800/oreum/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake mechlovin/zed1800/oreum:default\n```\n\n----------------------------------------\n\nTITLE: Flashing MNK60 Firmware with QMK\nDESCRIPTION: This command builds and flashes the default firmware to the MNK60 keyboard using the QMK build environment. It requires the QMK build environment to be properly configured and the necessary flashing tools to be installed. The keyboard needs to be in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kopibeng/mnk60/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake kopibeng/mnk60:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Pumpkinpad Firmware with QMK\nDESCRIPTION: This command flashes the compiled firmware onto the Pumpkinpad keyboard.  It requires the QMK build environment and a compatible flashing tool (e.g., dfu-util). The command assumes the default keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/laser_ninja/pumpkinpad/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake laser_ninja/pumpkinpad:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building gos65 Firmware (Makefile)\nDESCRIPTION: This command builds the default firmware for the gos65 keyboard. It uses the QMK make system to compile the code for the senselessclay/gos65 keyboard with the default configuration. The build process relies on a properly set up QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/senselessclay/gos65/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake senselessclay/gos65:default\n```\n\n----------------------------------------\n\nTITLE: Flashing suika15tone Firmware\nDESCRIPTION: This command flashes the default firmware to the suika15tone keyboard. It uses the `make` command with the keyboard's identifier and the `flash` target. The keyboard should be connected and in a state ready to receive the firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/suikagiken/suika15tone/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake suikagiken/suika15tone:default:flash\n```\n\n----------------------------------------\n\nTITLE: Clearing the OLED Display (C)\nDESCRIPTION: This function clears the OLED display buffer, resets the cursor position to 0, and marks the buffer as dirty for rendering. This ensures a clean slate for new output.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/oled_driver.md#_snippet_14\n\nLANGUAGE: c\nCODE:\n```\n// Clears the display buffer, resets cursor position to 0, and sets the buffer to dirty for rendering\nvoid oled_clear(void);\n```\n\n----------------------------------------\n\nTITLE: Flashing Stello65 Firmware\nDESCRIPTION: This command builds and flashes the default firmware for the Stello65 keyboard (sl_rev1 revision). It assumes that the QMK build environment is set up correctly and that the connected keyboard is in a state ready to receive firmware. The 'flash' target triggers the flashing process after building the firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/stello65/sl_rev1/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake stello65/sl_rev1:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing H87 G2 Firmware with QMK\nDESCRIPTION: This command flashes the compiled firmware onto the H87 G2 keyboard. It assumes that the keyboard is in a state where it can accept a firmware update, such as bootloader mode. The command relies on the QMK build environment and its flashing tools.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/hineybush/h87_g2/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake hineybush/h87_g2:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing KD87A_BFG_Edition Keyboard Firmware (QMK)\nDESCRIPTION: This command flashes the default firmware to the KD87A_BFG_Edition keyboard using the QMK build environment. It requires a properly configured QMK build environment and the necessary tools for flashing to the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/darkproject/kd87a_bfg_edition/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake darkproject/kd87a_bfg_edition:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Waaffle Firmware with Pro Micro\nDESCRIPTION: This command builds and flashes the QMK firmware for the Waaffle keyboard using the Pro Micro controller. It combines the build and flash steps into a single command to program the microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/delikeeb/waaffle/readme.md#_snippet_2\n\nLANGUAGE: make\nCODE:\n```\nmake delikeeb/waaffle/rev3/pro_micro:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing AMJ40 Firmware\nDESCRIPTION: This command flashes the default firmware onto the AMJ40 keyboard.  It assumes the keyboard is connected and QMK flashing tools are properly configured. This command builds the firmware if necessary before flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/amjkeyboard/amj40/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake amjkeyboard/amj40:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building FAve 84H Firmware with Make\nDESCRIPTION: This command builds the default keymap for the FAve 84H keyboard using the QMK Make system. It assumes the QMK build environment is already set up as described in the QMK documentation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/linworks/fave84h/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake linworks/fave84h:default\n```\n\n----------------------------------------\n\nTITLE: Building Franky36 Firmware with Make\nDESCRIPTION: This command builds the firmware for the Franky36 keyboard with the default keymap. It utilizes the `make` command within the QMK Firmware environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/franky36/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake franky36:default\n```\n\n----------------------------------------\n\nTITLE: Building J80 Firmware with Make\nDESCRIPTION: This command builds the default firmware for the J80 keyboard using the make command.  It assumes that the QMK build environment has already been set up. The resulting firmware can then be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/j80/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake j80:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Bloomer v3 Firmware using QMK\nDESCRIPTION: This command builds and flashes the QMK firmware for the Bloomer v3 keyboard with the default keymap. It requires a properly configured QMK build environment and a connected Bloomer v3 keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cozykeys/bloomer/readme.md#_snippet_3\n\nLANGUAGE: Makefile\nCODE:\n```\nmake cozykeys/bloomer/v3:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Stella Keyboard Firmware\nDESCRIPTION: This command builds and flashes the default firmware for the Stella keyboard. It requires the QMK build environment to be set up correctly and the appropriate flashing tools to be installed. This is a combined build and flash operation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/hnahkb/stella/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake hnahkb/stella:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Zima Firmware with Make\nDESCRIPTION: This command compiles and flashes the default firmware for the Zima keyboard using the QMK build environment. It assumes the environment is already set up. It uses the 'make' command with the target 'splitkb/zima:default'.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/splitkb/zima/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake splitkb/zima:default\n```\n\n----------------------------------------\n\nTITLE: Flashing CB65 Firmware\nDESCRIPTION: This command builds and flashes the default firmware for the CherryB Studio CB65 keyboard to the keyboard's microcontroller. It combines the build and flash steps into a single command using the `make` command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cherrybstudio/cb65/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake cherrybstudio/cb65:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for Ellipse Hotswap Keyboard (QMK)\nDESCRIPTION: This command builds the default firmware for the Ellipse Hotswap keyboard. It requires the QMK build environment to be set up correctly. The command compiles the keymap and keyboard definitions into a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cannonkeys/ellipse_hs/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake cannonkeys/ellipse_hs:default\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for Laneware Macro-1 (QMK)\nDESCRIPTION: This command builds the default firmware for the Laneware Macro-1 keyboard using the QMK build environment. It assumes that the QMK build environment is already set up. The output is a .hex or .bin file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/laneware/macro1/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake laneware/macro1:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Blaster 75 Firmware\nDESCRIPTION: This command flashes the built firmware onto the Blaster 75 keyboard. It requires the QMK build environment to be properly configured and the keyboard to be in bootloader mode. It assumes the \"default\" keymap is being used.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/blaster75/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake blaster75:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Program Yoink! Ortho Firmware\nDESCRIPTION: This command builds the default firmware for the Program Yoink! Ortho keyboard using the QMK build environment. It assumes that the QMK build environment is already set up. The output is a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/program_yoink/ortho/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake program_yoink/ortho:default\n```\n\n----------------------------------------\n\nTITLE: Flashing BBPad Firmware (f411)\nDESCRIPTION: This command flashes the QMK Firmware to the BBPad using the STM32F411 BlackPill. The `default` keymap is used. Requires a properly set up QMK build environment and a connected programmer.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechwild/bbpad/readme.md#_snippet_3\n\nLANGUAGE: make\nCODE:\n```\nmake mechwild/bbpad/f411:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building CU24 Keypad Firmware - Makefile\nDESCRIPTION: This command builds the default firmware for the CU24 keypad within the QMK Firmware environment. It assumes that the QMK build environment has been properly set up. The command compiles the firmware and generates a .hex file which can then be flashed to the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/capsunlocked/cu24/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake capsunlocked/cu24:default\n```\n\n----------------------------------------\n\nTITLE: Compiling QMK Firmware for Acheron Apollo 87H Gamma\nDESCRIPTION: This command compiles the default QMK firmware for the Acheron Apollo 87H keyboard with Gamma revision. This process will generate a `.bin` file, which is required for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/acheron/apollo/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake acheron/apollo/87h/gamma:default # For 87H revision Gamma\n```\n\n----------------------------------------\n\nTITLE: Building KNIGHT keyboard firmware\nDESCRIPTION: This command builds the QMK firmware for the X-BOWS KNIGHT keyboard with the default keymap. It compiles the source code and generates the firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/xbows/knight/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake xbows/knight:default\n```\n\nLANGUAGE: Shell\nCODE:\n```\nmake xbows/knight:via\n```\n\n----------------------------------------\n\nTITLE: Building Firmware with Make - QMK\nDESCRIPTION: This snippet provides instructions on how to build the firmware for the waffling80 keyboard using the `make` command. It specifies the keyboard, revision, and layout to build. The user needs a configured QMK build environment to execute this command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/4pplet/waffling80/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake 4pplet/waffling80/rev_a:default\nmake 4pplet/waffling80/rev_b:default\nmake 4pplet/waffling80/rev_b_ansi:default\n```\n\n----------------------------------------\n\nTITLE: Building Daily60 Firmware\nDESCRIPTION: This command builds the default firmware for the Daily60 keyboard. It uses the make command with the target specified as nightly_boards/daily60:default.  This command assumes the QMK build environment has already been set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/nightly_boards/daily60/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake nightly_boards/daily60:default\n```\n\n----------------------------------------\n\nTITLE: Enabling OS Detection in rules.mk (QMK)\nDESCRIPTION: This snippet shows how to enable OS detection in your `rules.mk` file.  Setting `OS_DETECTION_ENABLE` to `yes` includes the necessary header files and enables the OS detection feature during compilation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/os_detection.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nOS_DETECTION_ENABLE = yes\n```\n\n----------------------------------------\n\nTITLE: Building Beiwagon Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Beiwagon keyboard using the QMK build environment. It compiles the source code and creates a firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/boardsource/beiwagon/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake boardsource/beiwagon:default\n```\n\n----------------------------------------\n\nTITLE: Building Coarse60 Firmware - QMK Make\nDESCRIPTION: This command builds the default firmware for the Coarse60 keyboard using the QMK build environment. It requires the QMK build environment to be set up correctly. The output is a firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keebsforall/coarse60/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake keebsforall/coarse60:default\n```\n\n----------------------------------------\n\nTITLE: Compiling Lily58 Pro Firmware with QMK\nDESCRIPTION: This command compiles the QMK firmware for the Lily58 Pro keyboard using the specified keyboard and keymap. It utilizes the `qmk compile` command with the `-kb` and `-km` flags to define the keyboard and keymap respectively.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechboards/lily58/pro/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nqmk compile -kb mechboards/lily58/pro -km default\n```\n\n----------------------------------------\n\nTITLE: Building Rartlice Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Rartlice keyboard using the QMK build system. It requires the QMK build environment to be set up correctly. The resulting firmware can then be flashed onto the Rartlice keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/rart/rartlice/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake rart/rartlice:default\n```\n\n----------------------------------------\n\nTITLE: Building Nimrod Keyboard Firmware (QMK)\nDESCRIPTION: This command builds the default keymap for the Nimrod keyboard using the QMK firmware build environment.  It requires a properly configured QMK build environment.  The output is a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/nimrod/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake nimrod:default\n```\n\n----------------------------------------\n\nTITLE: Updating QMK CLI on macOS\nDESCRIPTION: These commands update the QMK CLI on macOS using the Homebrew package manager. It first updates the Homebrew package list and then upgrades the qmk/qmk/qmk package.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/ChangeLog/20220528.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nbrew update\nbrew upgrade qmk/qmk/qmk\n```\n\n----------------------------------------\n\nTITLE: Flashing Instructions for WASD Code\nDESCRIPTION: Instructions on how to put the WASD Code controller into flashing mode. This involves unplugging the USB cable and plugging it back in while holding the ESC key.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/evyd13/wasdat_code/readme.md#_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\nThe WASD has no reset button, so to put the controller in flashing mode, simply unplug the USB cable and plug it back in while holding the ESC key on the keyboard.\n```\n\n----------------------------------------\n\nTITLE: Building CG108 Keyboard Firmware (QMK)\nDESCRIPTION: This command compiles the QMK firmware for the dtisaac/cg108 keyboard with the default keymap. It requires the QMK build environment to be set up correctly. The output is a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/dtisaac/cg108/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake dtisaac/cg108:default\n```\n\n----------------------------------------\n\nTITLE: Building v4n4g0rth0n Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the v4n4g0rth0n/v1 keyboard using the QMK build environment. It requires a properly configured QMK build environment. The output is a compiled firmware file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/v4n4g0rth0n/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake v4n4g0rth0n/v1:default\n```\n\n----------------------------------------\n\nTITLE: Building Keyboard Firmware - QMK\nDESCRIPTION: This command builds the default firmware for the RAMA WORKS M65-BX keyboard using the QMK build environment. It compiles the keyboard layout and firmware based on the configuration files in the specified directory.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wilba_tech/rama_works_m65_bx/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake wilba_tech/rama_works_m65_bx:default\n```\n\n----------------------------------------\n\nTITLE: Building Keyboard Firmware with Make\nDESCRIPTION: This command builds the default firmware for the dnworks TKL87 keyboard using the `make` command. It requires a properly configured QMK build environment and generates the firmware ready for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/dnworks/tkl87/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake dnworks/tkl87:default\n```\n\n----------------------------------------\n\nTITLE: Building Pursuit40 Firmware using Make - QMK\nDESCRIPTION: This command builds the default keymap for the Pursuit40 keyboard using the QMK build environment. It assumes that the QMK build environment is already set up. The output is the compiled firmware for the Pursuit40.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/checkerboards/pursuit40/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake checkerboards/pursuit40:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Fidelity Keyboard Firmware\nDESCRIPTION: This command flashes the compiled firmware to the Fidelity keyboard.  It depends on a working QMK build environment and a connected Fidelity keyboard in a state ready for flashing (e.g., bootloader mode).\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cutie_club/fidelity/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake cutie_club/fidelity:default:flash\n```\n\n----------------------------------------\n\nTITLE: Rendering ST7565 Display\nDESCRIPTION: Renders the 'dirty' chunks of the internal display buffer to the actual ST7565 display hardware.  This function updates the physical display with the contents of the buffer.  No parameters or return value.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/st7565.md#_snippet_9\n\nLANGUAGE: C\nCODE:\n```\n// Renders the dirty chunks of the buffer to display\nvoid st7565_render(void);\n```\n\n----------------------------------------\n\nTITLE: Building Palette G67 Hotswap Firmware\nDESCRIPTION: This command builds the default firmware for the Palette G67 Hotswap keyboard. It requires the QMK build environment to be set up correctly. It generates the firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/neokeys/g67/hotswap/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake neokeys/palette_g67/hotswap:default\n```\n\n----------------------------------------\n\nTITLE: Enabling Mouse Keys in QMK - rules.mk\nDESCRIPTION: This code snippet shows how to enable mouse keys in QMK firmware by adding a line to the `rules.mk` file in your keymap. This enables the functionality, allowing you to map keyboard presses to mouse actions.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/mouse_keys.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nMOUSEKEY_ENABLE = yes\n```\n\n----------------------------------------\n\nTITLE: Building the itstleo9 Firmware\nDESCRIPTION: These commands are used to build the firmware for the itstleo9 macropad with either a Pro Micro or RP2040 controller.  The `make` command compiles the firmware based on the specified target and configuration.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/itstleo9/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/itstleo9/promicro:default\n```\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/itstleo9/rp2040:default\n```\n\n----------------------------------------\n\nTITLE: Building default .hex for Let's Split Rev2\nDESCRIPTION: This command generates the default .hex file for the Let's Split Rev2 keyboard. It assumes the QMK firmware build environment is set up. The generated hex file is used to flash the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/lets_split/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ make lets_split/rev2:default\n```\n\n----------------------------------------\n\nTITLE: Building Haus QMK Firmware\nDESCRIPTION: This command builds the default firmware for the Haus keyboard (rev1) using the QMK build environment. It compiles the necessary source code and generates a firmware file ready for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechlovin/hannah65/rev1/haus/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake mechlovin/hannah65/rev1/haus:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Akko 5108 Keyboard Firmware\nDESCRIPTION: This command flashes the compiled firmware onto the Akko 5108 keyboard. It uses the QMK flash tool to upload the firmware to the keyboard's microcontroller. The keyboard needs to be in bootloader mode for this command to work.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/akko/5108/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake akko/5108:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building keyboard firmware (make)\nDESCRIPTION: This command builds the default firmware for the mechlovin/olly/jf keyboard using the QMK build system. It compiles the keyboard layout and firmware based on the configuration files. The resulting firmware can then be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechlovin/olly/jf/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake mechlovin/olly/jf:default\n```\n\n----------------------------------------\n\nTITLE: Building Quefrency Rev. 4 Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Quefrency Rev. 4 keyboard. It assumes that the QMK build environment is already set up. The output will be the compiled firmware ready for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keebio/quefrency/rev4/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake keebio/quefrency/rev4:default\n```\n\n----------------------------------------\n\nTITLE: Building Raindrop Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the Raindrop keyboard using the QMK build environment. It compiles the keymap defined as 'default' for the 'laneware/raindrop' keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/laneware/raindrop/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake laneware/raindrop:default\n```\n\n----------------------------------------\n\nTITLE: Compiling FM-S Firmware\nDESCRIPTION: This command compiles the default layout for the GeonWorks Frog Mini FM-S (solderable) PCB. It requires the QMK build environment to be set up correctly.  The output is a `*bin` file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/geonworks/frogmini/readme.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmake geonworks/frogmini/fms:default\n```\n\n----------------------------------------\n\nTITLE: Flashing N87 Keyboard Firmware with Make\nDESCRIPTION: This command builds and flashes the QMK firmware for the era/linx3/n87 keyboard with the default keymap. It utilizes the QMK make system to compile and then flash the firmware to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/era/linx3/n87/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake era/linx3/n87:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing DB63 Keyboard Firmware\nDESCRIPTION: This command builds and flashes the default keymap to the DB63 keyboard.  It depends on a properly configured QMK build environment and a connected keyboard in flashable mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/db/db63/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake db/db63:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for EC Menhir\nDESCRIPTION: This command compiles the QMK firmware for the EC Menhir keyboard with the default keymap. It requires a correctly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cipulot/ec_menhir/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake cipulot/ec_menhir:default\n```\n\n----------------------------------------\n\nTITLE: Building split89 Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the handwired/split89 keyboard. It requires a properly configured QMK build environment. The resulting firmware can then be flashed onto the Pro Micro controllers.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/split89/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake handwired/split89:default\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for Ploopy Trackball Nano - QMK\nDESCRIPTION: These `make` commands are used to compile and flash the QMK firmware onto the Ploopy Trackball Nano. The first command uses the default keymap, while the second uses the VIA keymap. Ensure the build environment is set up correctly before executing these commands.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ploopyco/trackball_nano/readme.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmake ploopyco/trackball_nano/rev1_001:default:flash\nmake ploopyco/trackball_nano/rev1_001:via:flash\n```\n\n----------------------------------------\n\nTITLE: Building poker87d Firmware with Make\nDESCRIPTION: This command is used to compile the default keymap for the poker87d keyboard using the QMK Firmware build environment. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/poker87d/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake poker87d:default\n```\n\n----------------------------------------\n\nTITLE: Compiling cool836A Firmware with Default Keymap\nDESCRIPTION: This command compiles the cool836A firmware for the verB_RED variant with the default keymap. It's a crucial step to prepare the firmware for flashing onto the keyboard's microcontroller using QMK. The command assumes that the QMK Firmware environment is correctly configured and accessible.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cool836a/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake cool836A/verB_RED:default\n```\n\n----------------------------------------\n\nTITLE: Building Nafuda Firmware with QMK\nDESCRIPTION: This command is used to build the default firmware for the Nafuda keyboard using the QMK build environment. It assumes that the QMK build environment has been set up correctly. The command compiles the firmware for the 'salicylic_acid3/nafuda' keyboard with the 'default' keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/salicylic_acid3/nafuda/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake salicylic_acid3/nafuda:default\n```\n\n----------------------------------------\n\nTITLE: Reading Raw OLED Buffer (C)\nDESCRIPTION: This function returns a pointer to the requested start index in the OLED display buffer, along with the remaining buffer length as a struct. It takes the start index as input.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/oled_driver.md#_snippet_23\n\nLANGUAGE: c\nCODE:\n```\n// Returns a pointer to the requested start index in the buffer plus remaining\n// buffer length as struct\noled_buffer_reader_t oled_read_raw(uint16_t start_index);\n```\n\n----------------------------------------\n\nTITLE: Flashing dyz60 Keyboard Firmware (QMK)\nDESCRIPTION: This command flashes the built firmware to the dyz60 keyboard using the QMK firmware environment.  It assumes that the QMK build environment is properly set up and configured, and the necessary flashing tools are installed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/dyz/dyz60/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake dyz/dyz60:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building KM113 Default Firmware\nDESCRIPTION: This command compiles the default firmware for the KM113 keyboard. It requires a properly configured QMK build environment. The output will be a .hex or .bin file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/jidohun/km113/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake jidohun/km113:default\n```\n\n----------------------------------------\n\nTITLE: Building BOUNCE PAD Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the kbdfans/bounce/pad keyboard. It requires a properly set up QMK build environment. The output is a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kbdfans/bounce/pad/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake kbdfans/bounce/pad:default\n```\n\n----------------------------------------\n\nTITLE: Building Latin47ble Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the Latin47ble keyboard. It requires a properly set up QMK build environment. The output will be a .hex or .bin file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/latincompass/latin47ble/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake latincompass/latin47ble:default\n```\n\n----------------------------------------\n\nTITLE: Compiling Cascade Keyboard Firmware\nDESCRIPTION: This command compiles the default firmware for the Cascade keyboard using the QMK build environment. It requires a properly configured QMK build environment. The output is the compiled firmware ready to be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/studiokestra/cascade/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake studiokestra/cascade:default\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for DZ60RGB-ANSI V2.1\nDESCRIPTION: This command builds the firmware for the DZ60RGB-ANSI V2.1 keyboard, which uses an ATmega32U4 (AVR) microcontroller and requires a .bin file. The default keymap is used.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/dztech/dz60rgb_ansi/readme.md#_snippet_2\n\nLANGUAGE: Makefile\nCODE:\n```\nmake dztech/dz60rgb_ansi/v2_1:default\n```\n\n----------------------------------------\n\nTITLE: Building QMK Firmware for Madeline\nDESCRIPTION: This command builds the QMK firmware for the Madeline keyboard with the default keymap. It requires a properly set up QMK build environment. The output is the firmware binary file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kiserdesigns/madeline/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake kiserdesigns/madeline:default\n```\n\n----------------------------------------\n\nTITLE: Flashing split67 Keyboard Firmware\nDESCRIPTION: This command flashes the default firmware onto the split67 keyboard using the QMK build environment. It requires the QMK build environment and a connected keyboard in bootloader mode. The expected result is the updated firmware running on the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/split67/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake split67:default:flash\n```\n\n----------------------------------------\n\nTITLE: List Userspace Build Targets (qmk userspace-list)\nDESCRIPTION: This command lists the External Userspace build targets. The `-e` or `--expand` option expands any use of `all` for either keyboard or keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/cli_commands.md#_snippet_36\n\nLANGUAGE: text\nCODE:\n```\nqmk userspace-list [-h] [-e]\n```\n\nLANGUAGE: text\nCODE:\n```\n$ qmk userspace-list\n```\n\n----------------------------------------\n\nTITLE: Building ks63 Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the ks63 keyboard using the QMK build environment.  It requires a properly configured QMK build environment. The output is a firmware file that can be flashed to the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/ks63/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake handwired/ks63:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Kalice Keyboard Firmware - QMK\nDESCRIPTION: This command flashes the built firmware to the Kalice keyboard. It requires the QMK build environment to be set up correctly and a flashing tool to be available. It programs the keyboard's microcontroller with the compiled firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/meetlab/kalice/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake meetlab/kalice:default:flash\n```\n\n----------------------------------------\n\nTITLE: Compiling Nue Keyboard Firmware - Makefile\nDESCRIPTION: This command compiles the default firmware for the Nue keyboard using the QMK build environment. It requires QMK to be set up and configured. The output is a firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/studiokestra/nue/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake studiokestra/nue:default\n```\n\n----------------------------------------\n\nTITLE: Building XW60 Firmware\nDESCRIPTION: This command builds the default firmware for the XW60 keyboard. It assumes that the QMK build environment has been properly set up. The resulting firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/xw60/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake xw60:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Keyboard Firmware - make command\nDESCRIPTION: This command is used to flash the compiled firmware onto the mechlovin/olly/jf/rev2 keyboard. It requires the necessary flashing tools to be installed and configured in the build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechlovin/olly/jf/rev2/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake mechlovin/olly/jf/rev2:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building eau87 Firmware (QMK)\nDESCRIPTION: This snippet shows how to build the default firmware for the eau87 keyboard using the QMK build environment. It requires the QMK build environment to be set up. It assumes the keyboard is located in the `yandrstudio` directory.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/yandrstudio/eau87/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake yandrstudio/eau87:default\n```\n\n----------------------------------------\n\nTITLE: Building Ashwing66 Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Ashwing66 keyboard using the QMK build environment. It compiles the source code and generates a firmware image that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ashwing66/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake ashwing66:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware for IO-Mini 1800\nDESCRIPTION: This command builds and flashes the default firmware to the IO-Mini 1800 keyboard. It depends on a properly configured QMK build environment and a connected keyboard in a state ready to accept firmware updates.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/io_mini1800/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake io_mini1800:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building the Rabbit Capture Plan Keyboard\nDESCRIPTION: This command builds the default keymap for the Rabbit Capture Plan keyboard using the QMK build environment. It compiles the keyboard firmware based on the configuration files found in the specified keyboard and keymap directory.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kakunpc/rabbit_capture_plan/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake kakunpc/rabbit_capture_plan:default\n```\n\n----------------------------------------\n\nTITLE: Clearing All Pressed Keys and Mods in QMK\nDESCRIPTION: This code snippet demonstrates how to clear all currently pressed keys and modifiers using the `clear_keyboard()` function in QMK Firmware. This is useful for resetting the keyboard state within a macro.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/feature_macros.md#_snippet_18\n\nLANGUAGE: c\nCODE:\n```\nclear_keyboard();\n```\n\n----------------------------------------\n\nTITLE: Building Caerdroia Keyboard Firmware - make command\nDESCRIPTION: This command is used to build the default firmware for the Caerdroia keyboard using the QMK build environment. It compiles the keyboard layout and generates the firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cannonkeys/caerdroia/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake cannonkeys/caerdroia:default\n```\n\n----------------------------------------\n\nTITLE: Flashing DK Saver Redux Firmware (Makefile)\nDESCRIPTION: This command builds the default keymap for the DK Saver Redux keyboard and flashes it to the keyboard's microcontroller. It assumes the QMK build environment is properly set up and the keyboard is in the bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/druah/dk_saver_redux/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake druah/dk_saver_redux:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing waffling60 Rev. E ISO Firmware\nDESCRIPTION: This command flashes the default firmware to the waffling60 Rev. E ISO keyboard. It requires a properly configured QMK build environment and a connected keyboard in flashing mode. The output is the flashed firmware on the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/4pplet/waffling60/rev_e_iso/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake 4pplet/waffling60/rev_e_iso:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Six Pack Firmware\nDESCRIPTION: This command builds the default firmware for the Six Pack macropad.  It requires a properly configured QMK build environment. The output is a .hex file that can be flashed to the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/40percentclub/sixpack/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake 40percentclub/sixpack:default\n```\n\n----------------------------------------\n\nTITLE: Defining the ortho_5x5 Layout in QMK\nDESCRIPTION: This snippet defines a keyboard layout named `LAYOUT_ortho_5x5`.  It is intended to be used as a base layout configuration within the QMK firmware. It does not provide specific key mappings, only the layout name.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/layouts/default/ortho_5x5/readme.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nLAYOUT_ortho_5x5\n```\n\n----------------------------------------\n\nTITLE: Building Bolsalice Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the Bolsalice keyboard.  It requires the QMK build environment to be set up correctly. The output will be a .hex or .bin file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/bolsa/bolsalice/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake bolsa/bolsalice:default\n```\n\n----------------------------------------\n\nTITLE: Building FAve104 with QMK: Makefile\nDESCRIPTION: This command compiles and flashes the default keymap for the FAve104 keyboard using the QMK firmware. It assumes that the QMK build environment is correctly set up and configured.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/linworks/fave104/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake linworks/fave104:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Plexus75 Firmware using Make\nDESCRIPTION: This code snippet provides the command to build the default firmware for the Plexus75 keyboard using the QMK build environment's `make` command. It assumes that the QMK build environment is already set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/checkerboards/plexus75/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake checkerboards/plexus75:default\n```\n\n----------------------------------------\n\nTITLE: Building the 25 Key Keyboard Firmware - Make Command\nDESCRIPTION: This command compiles the QMK firmware for the 25 key keyboard with the default configuration. It requires a properly set up QMK build environment. The compiled firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/40percentclub/25/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake 40percentclub/25:default\n```\n\n----------------------------------------\n\nTITLE: Flashing the X-BOWS Nature Firmware (QMK)\nDESCRIPTION: This command compiles and flashes the default keymap to the X-BOWS Nature keyboard. It requires a configured QMK build environment and the necessary tools for flashing (e.g., dfu-util).\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/xbows/nature/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake xbows/nature:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building the Vero EC Keyboard\nDESCRIPTION: This command builds the default keymap for the Vero EC keyboard.  It requires a properly configured QMK build environment. The output will be a .hex or .bin file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cipulot/ec_vero/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake cipulot/ec_vero:default\n```\n\n----------------------------------------\n\nTITLE: Building Washington Macropad Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Washington Macropad using the QMK build environment. It assumes the QMK build environment is already set up. It uses the 'make' command with the target 'ckeys/washington:default'.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ckeys/washington/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake ckeys/washington:default\n```\n\n----------------------------------------\n\nTITLE: Building Default hannah910 Firmware (QMK)\nDESCRIPTION: This command compiles the default firmware for the hannah910 keyboard using the QMK build environment.  It uses the `mechlovin/hannah910/rev3` target with the `default` keymap.  It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechlovin/hannah910/rev3/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake mechlovin/hannah910/rev3:default\n```\n\n----------------------------------------\n\nTITLE: Building VKR 94 Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the Viktus VKR 94 keyboard. It assumes that the QMK build environment is already set up. The output is a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/viktus/vkr94/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake viktus/vkr94:default\n```\n\n----------------------------------------\n\nTITLE: Building HotDox Firmware with Make\nDESCRIPTION: This command builds the QMK firmware for the HotDox keyboard with the default layout. It requires QMK build tools to be installed and configured correctly. The command should be executed in the root directory of the QMK firmware repository.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/hotdox/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake hotdox:default\n```\n\n----------------------------------------\n\nTITLE: Flashing MIO keyboard firmware with QMK\nDESCRIPTION: This command flashes the built firmware to the MIO keyboard using the QMK build environment. It assumes that the keyboard is in bootloader mode and the QMK build environment has been set up correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/recompile_keys/mio/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake recompile_keys/mio:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Ludmila Firmware QMK\nDESCRIPTION: This command builds the default firmware for the Ludmila macropad using the QMK build environment.  It requires the QMK build environment to be set up. The output is a firmware file ready to be flashed onto the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mexsistor/ludmila/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake mexsistor/ludmila:default\n```\n\n----------------------------------------\n\nTITLE: Building maJIStic Firmware with QMK\nDESCRIPTION: This command builds the default keymap for the maJIStic keyboard using the QMK firmware build environment. It requires QMK to be set up correctly. The output is a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/majistic/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake majistic:default\n```\n\n----------------------------------------\n\nTITLE: Changing LVGL Task Period (C)\nDESCRIPTION: This code snippet shows how to configure the LVGL task period by defining `QP_LVGL_TASK_PERIOD` in `config.h`. This can be used to adjust the responsiveness of the keyboard and display update rate.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/quantum_painter_lvgl.md#_snippet_4\n\nLANGUAGE: C\nCODE:\n```\n#define QP_LVGL_TASK_PERIOD 40\n```\n\n----------------------------------------\n\nTITLE: Flashing the keyboard firmware\nDESCRIPTION: This command flashes the compiled QMK firmware to the werk_technica/one keyboard with the default keymap. It requires a properly set up QMK build environment and assumes the keyboard is in a flashable state.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/werk_technica/one/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nqmk flash -kb werk_technica/one -km default\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware to Akko 5087 (QMK)\nDESCRIPTION: This command builds and flashes the default firmware to the Akko 5087 keyboard using the QMK build environment.  It requires the QMK environment to be properly configured and the keyboard to be in a flashable state.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/akko/5087/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake akko/5087:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building wilba_tech/wt65_a with QMK\nDESCRIPTION: This command builds the default keymap for the wilba_tech/wt65_a keyboard using the QMK build environment. It assumes that the QMK build environment has already been set up correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wilba_tech/wt65_a/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake wilba_tech/wt65_a:default\n```\n\n----------------------------------------\n\nTITLE: Building BKF keyboard firmware\nDESCRIPTION: This command builds the default keymap for the BKF keyboard using the QMK build environment. It compiles the source code and generates a firmware image that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/drhigsby/bkf/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake drhigsby/bkf:default\n```\n\n----------------------------------------\n\nTITLE: Building Keychron Q9 Plus Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the Keychron Q9 Plus keyboard with ANSI encoder layout using the QMK build environment. It assumes the QMK build environment is properly set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keychron/q9_plus/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake keychron/q9_plus/ansi_encoder:default\n```\n\n----------------------------------------\n\nTITLE: Flashing NT750 Firmware\nDESCRIPTION: This command builds and flashes the default firmware to the NT750 keyboard.  The keyboard needs to be in bootloader mode (activated by pressing the button on the PCB). Requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/evyd13/nt750/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake evyd13/nt750:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building nt660 Firmware\nDESCRIPTION: This command builds the default firmware for the nt660 keyboard using the QMK build environment. It requires QMK to be set up and configured correctly. The output is a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/evyd13/nt660/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake evyd13/nt660:default\n```\n\n----------------------------------------\n\nTITLE: Building Nightmare Keyboard Firmware - QMK\nDESCRIPTION: This command builds the default firmware for the Nightmare keyboard using the QMK build environment. It requires a properly configured QMK environment. The output is a compiled firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/nightmare/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake nightmare:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Lancer Keyboard Firmware\nDESCRIPTION: Flashes the compiled firmware to the subrezon/lancer keyboard. This command uploads the firmware to the keyboard's microcontroller. It requires a correctly configured QMK build environment and the necessary tools for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/subrezon/lancer/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake subrezon/lancer:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing OBE Firmware\nDESCRIPTION: This command flashes the compiled firmware to the OrangeBoyErgo (OBE) keyboard. It extends the build command to include the 'flash' target, assuming the QMK environment is properly configured for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechwild/obe/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake mechwild/obe:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing QMK Firmware to Mode M65S\nDESCRIPTION: This command is used to flash the built QMK firmware to the Mode SixtyFive M65S keyboard with the default keymap. It requires a properly configured QMK build environment and a connected keyboard in flashing mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mode/m65s/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake mode/m65s:default:flash\n```\n\n----------------------------------------\n\nTITLE: Update PWM Buffers - IS31FL3733\nDESCRIPTION: This function flushes the PWM values to the IS31FL3733 LED driver. The index parameter specifies the driver index. This function should be called after setting brightness or color values to make the changes visible.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/is31fl3733.md#_snippet_11\n\nLANGUAGE: C\nCODE:\n```\nvoid is31fl3733_update_pwm_buffers(uint8_t index)\n```\n\n----------------------------------------\n\nTITLE: Flashing Han60 Firmware\nDESCRIPTION: This command builds and flashes the default firmware to the Han60 keyboard. It requires a properly configured QMK build environment and a connected Han60 keyboard in bootloader mode. This will overwrite any existing firmware on the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/han60/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake han60:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building BrutalV2 65 Firmware with Make\nDESCRIPTION: This command builds the default firmware for the CannonKeys BrutalV2 65 keyboard. It requires a properly configured QMK build environment. The resulting firmware can then be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cannonkeys/brutalv2_65/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake cannonkeys/brutalv2_65:default\n```\n\n----------------------------------------\n\nTITLE: Enabling RGB Lighting in rules.mk (WS2812)\nDESCRIPTION: This snippet enables RGB lighting for WS2812 LEDs in the `rules.mk` file. It sets the `RGBLIGHT_ENABLE` variable to `yes`, which tells QMK to include the RGB lighting drivers in the firmware build.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/rgblight.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nRGBLIGHT_ENABLE = yes\n```\n\n----------------------------------------\n\nTITLE: Flashing GK61 PRO 48 Firmware with QMK\nDESCRIPTION: This command builds and flashes the default QMK firmware for the skyloong/gk61/pro_48 keyboard. It depends on a configured QMK build environment and the presence of a compatible flashing tool.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/skyloong/gk61/pro_48/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake skyloong/gk61/pro_48:default:flash\n```\n\n----------------------------------------\n\nTITLE: Enabling Serial Debug Messages (config.h)\nDESCRIPTION: This code snippet enables debug messages for serial communication, providing insights into communication failures. Debug messages are printed to the `CONSOLE` output. Add this to your `config.h` file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/serial.md#_snippet_19\n\nLANGUAGE: C\nCODE:\n```\n#define SERIAL_DEBUG\n```\n\n----------------------------------------\n\nTITLE: Building the Binary_Monkey firmware\nDESCRIPTION: This command compiles the QMK firmware for the Binary_Monkey keyboard with the default keymap. It requires a properly configured QMK build environment. The output is a firmware file ready to be flashed onto the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/jkdlab/binary_monkey/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake jkdlab/binary_monkey:default\n```\n\n----------------------------------------\n\nTITLE: Flashing WT60-H1 Keyboard Firmware (QMK)\nDESCRIPTION: This command builds and flashes the default firmware for the wilba.tech WT60-H1 keyboard to the device using QMK. Requires a configured QMK build environment and a connected keyboard in flashing mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wilba_tech/wt60_h1/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake wilba_tech/wt60_h1:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building QMK Firmware for Qwertyqop QQ60 Hotswap\nDESCRIPTION: This command compiles the QMK firmware for the Qwertyqop QQ60 Hotswap keyboard with the default keymap. It requires a properly set up QMK build environment as detailed in the QMK documentation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/zeix/qwertyqop60hs/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake zeix/qwertyqop60hs:default\n```\n\n----------------------------------------\n\nTITLE: Building Ampersand Keyboard Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the Ampersand keyboard using the QMK build environment.  It assumes the QMK build environment is properly set up. The command compiles the firmware for the `whitefacemountain/ampersand` keyboard layout.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/whitefacemountain/ampersand/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake whitefacemountain/ampersand:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Mechmini V1 Firmware with QMK\nDESCRIPTION: This command flashes the built firmware onto the Mechmini V1 keyboard.  It requires the QMK build environment to be set up and configured.  The keyboard needs to be in flashing mode to accept the new firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechkeys/mechmini/v1/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake mechkeys/mechmini/v1:default:flash\n```\n\n----------------------------------------\n\nTITLE: Defining Default DPI Configuration\nDESCRIPTION: These defines customize the default DPI scaling behavior for the Charybdis trackball. `CHARYBDIS_MINIMUM_DEFAULT_DPI` sets the minimum DPI value, and `CHARYBDIS_DEFAULT_DPI_CONFIG_STEP` defines the DPI increment step.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/bastardkb/charybdis/readme.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n#define CHARYBDIS_MINIMUM_DEFAULT_DPI 400\n#define CHARYBDIS_DEFAULT_DPI_CONFIG_STEP 200\n```\n\n----------------------------------------\n\nTITLE: Building Slime88 Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the Slime88 keyboard.  It uses the `make` command with the target specified as `zykrah/slime88:default`.  This assumes the QMK build environment is already set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/zykrah/slime88/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake zykrah/slime88:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Jane v2 Firmware\nDESCRIPTION: This command flashes the compiled firmware onto the Jane v2 keyboard. It uses the QMK flashing tools to upload the firmware to the keyboard's microcontroller. This assumes that the QMK environment is properly configured for flashing the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/tgr/jane/v2/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake tgr/jane:default:flash\n```\n\n----------------------------------------\n\nTITLE: Switching to a Layer and Deactivating Others using TO\nDESCRIPTION: This function activates a specified layer and deactivates all other layers except the default layer. This effectively replaces the current layer stack with the specified layer and the default layer. It is activated on keydown.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/feature_layers.md#_snippet_7\n\nLANGUAGE: c\nCODE:\n```\nTO(layer)\n```\n\n----------------------------------------\n\nTITLE: Building Delta Keyboard Firmware (Makefile)\nDESCRIPTION: This command builds the default firmware for the Delta keyboard using the QMK build system. It compiles the source code and generates a firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/quadrum/delta/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake quadrum/delta:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware to Rart45 Keyboard\nDESCRIPTION: This command flashes the default firmware to the Rart45 keyboard. It requires the QMK build environment and assumes the keyboard is connected and recognized by the flashing tool. The command uploads the compiled firmware binary to the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/rart/rart45/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake rart/rart45:default:flash\n```\n\n----------------------------------------\n\nTITLE: Disable Tapping Keys in `config.h`\nDESCRIPTION: Disables support for tapping keys (mod tap, layer tap, etc.) in `config.h` if the feature is not used. This reduces the firmware size by removing the code responsible for handling tapping actions.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/squeezing_avr.md#_snippet_7\n\nLANGUAGE: c\nCODE:\n```\n#define NO_ACTION_TAPPING\n```\n\n----------------------------------------\n\nTITLE: Flashing ENTER67 Firmware (QMK)\nDESCRIPTION: This command flashes the compiled firmware onto the ENTER67 keyboard using the QMK build environment. It targets the `kezewa/enter67` keyboard definition, the `default` keymap, and specifies the `flash` target.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kezewa/enter67/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake kezewa/enter67:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing THE40 Firmware (QMK)\nDESCRIPTION: This command flashes the compiled firmware to the THE40 keyboard. It requires that the keyboard is in bootloader mode. The QMK build environment must be set up correctly before running this command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/lazydesigners/the40/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake lazydesigners/the40:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building REVIUNG39 Firmware\nDESCRIPTION: This command builds the default firmware for the REVIUNG39 keyboard using the QMK build environment. It requires the QMK build environment to be set up correctly.  The output is the firmware that can be flashed onto the REVIUNG39.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/reviung/reviung39/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake reviung39:default\n```\n\n----------------------------------------\n\nTITLE: Building JC65 Firmware (QMK)\nDESCRIPTION: This command compiles the QMK firmware for the JC65/v32a keyboard with the default keymap.  It leverages the 'make' command within the QMK build environment.  Dependencies include a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/jc65/v32a/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake jc65/v32a:default\n```\n\n----------------------------------------\n\nTITLE: Making RS60 Rev2 Default Firmware\nDESCRIPTION: This command builds the default firmware for the RS60 Rev2 keyboard using the QMK build environment. It compiles the keymap located in the `xelus/rs60/rev2_1` directory with the `default` keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/xelus/rs60/rev2_1/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake xelus/rs60/rev2_1:default\n```\n\n----------------------------------------\n\nTITLE: Building BM60HSRGB_ISO Firmware (rev1)\nDESCRIPTION: This command builds the default firmware for the rev1 version of the BM60HSRGB_ISO keyboard using the QMK build environment. It compiles the keymap and necessary drivers into a firmware image.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kprepublic/bm60hsrgb_iso/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake kprepublic/bm60hsrgb_iso/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Building Stream15 Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Stream15 macro pad using the QMK build environment. It assumes that the QMK build environment has been properly set up according to the QMK documentation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/nibiria/stream15/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake nibiria/stream15:default\n```\n\n----------------------------------------\n\nTITLE: Building h4ckb0ard Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the h4ckb0ard keyboard using the QMK firmware build environment. It compiles the source code and generates a flashable image for the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/rot13labs/h4ckb0ard/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake rot13labs/h4ckb0ard:default\n```\n\n----------------------------------------\n\nTITLE: Initializing Wii controller after pairing\nDESCRIPTION: This code snippet demonstrates how to initialize the Wii controller library after the initial pairing has been completed. It assumes the controller is already paired with the Bluetooth dongle.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/lib/usbhost/USB_Host_Shield_2.0/README.md#_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nWII Wii(&Btd);\n```\n\n----------------------------------------\n\nTITLE: Building Dawn Keyboard Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Dawn keyboard using QMK. It requires a properly configured build environment. The output is a firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechstudio/dawn/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake mechstudio/dawn:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Skyline Firmware (QMK)\nDESCRIPTION: This command builds and flashes the default firmware for the Skyline keyboard to the device using the QMK build environment. It requires the QMK environment to be set up and the keyboard to be in a flashable state.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/jaykeeb/skyline/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake jaykeeb/skyline:default:flash\n```\n\n----------------------------------------\n\nTITLE: Enabling Secure Feature in QMK\nDESCRIPTION: To enable the secure feature in your QMK firmware, you need to add `SECURE_ENABLE = yes` to your `rules.mk` file. This enables the secure feature and makes its functionalities available for configuration and use.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/secure.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nSECURE_ENABLE = yes\n```\n\n----------------------------------------\n\nTITLE: Building miniDivide MAX Firmware\nDESCRIPTION: This command builds the default firmware for the miniDivide MAX keyboard using the QMK build environment. It requires a properly set up QMK build environment. The output is a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/takashicompany/minidivide_max/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake takashicompany/minidivide_max:default\n```\n\n----------------------------------------\n\nTITLE: Building the Spreadwriter Keyboard\nDESCRIPTION: This command builds the default keymap for the Spreadwriter keyboard. It assumes that the QMK build environment is already set up. The output will be a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/takashicompany/spreadwriter/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake takashicompany/spreadwriter:default\n```\n\n----------------------------------------\n\nTITLE: Set Viewport Offsets (C)\nDESCRIPTION: This snippet defines the `qp_set_viewport_offsets` function, which sets the X and Y offsets of the display viewport, affecting all subsequent drawing operations.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/quantum_painter.md#_snippet_84\n\nLANGUAGE: c\nCODE:\n```\nvoid qp_set_viewport_offsets(painter_device_t device, uint16_t offset_x, uint16_t offset_y);\n```\n\n----------------------------------------\n\nTITLE: Flashing Rorschach Firmware with QMK\nDESCRIPTION: This command builds and flashes the default firmware for the Rorschach keyboard revision 1 using the QMK build environment and the avrdude programmer. It requires that avrdude is configured and accessible.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keebio/rorschach/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake keebio/rorschach/rev1:default:avrdude\n```\n\n----------------------------------------\n\nTITLE: Building Amigopunk Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the Amigopunk keyboard. It assumes that the QMK build environment has been set up correctly. The resulting firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/amigopunk/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake handwired/amigopunk:default\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for CMM.Studio Fuji65 in QMK\nDESCRIPTION: This snippet provides the command to build the default firmware for the CMM.Studio Fuji65 keyboard using the QMK build environment. It assumes that the QMK build environment has been properly set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cmm_studio/fuji65/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake cmm_studio/fuji65:default\n```\n\n----------------------------------------\n\nTITLE: Building naKey Firmware with Custom Keymap - Make Command\nDESCRIPTION: This command builds the naKey keyboard firmware with a specified keymap.  Replace `[default|jack|<name>]` with the desired keymap name. It requires a valid keymap folder within the `keymaps` directory.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ckeys/nakey/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ make naKey-[default|jack|<name>]\n```\n\n----------------------------------------\n\nTITLE: Building Pinky3 Keyboard Firmware\nDESCRIPTION: This command compiles the default firmware for the Pinky3 keyboard with 3 rows.  It assumes the QMK build environment is already set up.  It uses the `make` command with the target specified as `pinky/3:default`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/pinky/3/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake pinky/3:default\n```\n\n----------------------------------------\n\nTITLE: Command Line Code Block Example\nDESCRIPTION: This code block provides an example of using the `teensy_loader_cli` command to flash a firmware to a Teensy device. The example demonstrates how to include command-line examples within the QMK documentation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/__capabilities.md#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n```\nteensy_loader_cli -v -mmcu=<mcu> <filename>\n```\n```\n\n----------------------------------------\n\nTITLE: Building Stealth Macropad Firmware (QMK)\nDESCRIPTION: This command builds the default keymap for the Stealth Macropad keyboard using the QMK build system. It compiles the firmware into a .hex file that can be flashed to the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ocean/stealth/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake ocean/stealth:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware for BINEPAD BN009 (R1)\nDESCRIPTION: This command builds and flashes the default firmware for the BINEPAD BN009 R1 variant using the QMK build environment. It compiles the keymap and programs the firmware onto the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/binepad/bn009/readme.md#_snippet_2\n\nLANGUAGE: make\nCODE:\n```\nmake binepad/bn009/r1:default:flash\n```\n\n----------------------------------------\n\nTITLE: Disable Oneshots in `config.h`\nDESCRIPTION: Disables the oneshot feature in `config.h` if it's not being used, such as for Shift or Ctrl. This removes the code associated with handling oneshot keys.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/squeezing_avr.md#_snippet_6\n\nLANGUAGE: c\nCODE:\n```\n#define NO_ACTION_ONESHOT\n```\n\n----------------------------------------\n\nTITLE: Setting LED brightness value - All LEDs - C\nDESCRIPTION: Sets the brightness value for all LEDs on a single-color IS31FL3746A driver. This function accepts a single brightness value which will be applied to all LEDs controlled by the driver. This operation applies globally.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/is31fl3746a.md#_snippet_6\n\nLANGUAGE: C\nCODE:\n```\nvoid is31fl3746a_set_value_all(uint8_t value)\n```\n\n----------------------------------------\n\nTITLE: Building WT60-H2 Firmware with Make\nDESCRIPTION: This command builds the default firmware for the wilba.tech WT60-H2 keyboard. It requires a properly configured QMK build environment.  The resulting firmware can then be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wilba_tech/wt60_h2/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake wilba_tech/wt60_h2:default\n```\n\n----------------------------------------\n\nTITLE: Building TORN Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the TORN keyboard using the QMK build environment. It compiles the necessary code and generates a firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/torn/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake torn:default\n```\n\n----------------------------------------\n\nTITLE: Building the fatotesa keyboard firmware using make\nDESCRIPTION: This command builds the default keymap for the fatotesa keyboard.  It requires a properly set up QMK build environment. The resulting firmware can then be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/fatotesa/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake fatotesa:default\n```\n\n----------------------------------------\n\nTITLE: Keyboard-Level LED Matrix Indicator Callback (C)\nDESCRIPTION: This keyboard-level callback function is invoked after the current animation frame is rendered but before it's flushed to the LEDs. The return value is currently unused.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/led_matrix.md#_snippet_39\n\nLANGUAGE: C\nCODE:\n```\nbool led_matrix_indicators_kb(void)\n```\n\n----------------------------------------\n\nTITLE: Flashing keyboard using QMK CLI\nDESCRIPTION: This command allows flashing the keyboard using the QMK command-line interface. It takes the keyboard and keymap as arguments. Refer to the QMK flash documentation for more information.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/flashing.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ qmk flash -kb <keyboard> -km <keymap>\n```\n\n----------------------------------------\n\nTITLE: Flashing BM60HSRGB_ISO/rev1 Firmware\nDESCRIPTION: This command flashes the compiled firmware onto the BM60HSRGB_ISO/rev1 keyboard. It uses the QMK build environment and appropriate flashing tools to upload the firmware image to the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kprepublic/bm60hsrgb_iso/rev1/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake kprepublic/bm60hsrgb_iso/rev1:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing K-Type Firmware (QMK)\nDESCRIPTION: This command builds and flashes the default firmware for the Input Club K-Type keyboard using the QMK build system. It requires a properly configured QMK build environment and appropriate flashing tools.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/input_club/k_type/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake input_club/k_type:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building kafka60 Firmware\nDESCRIPTION: This command builds the default firmware for the kafka60 keyboard using the QMK build environment. It assumes the environment is properly configured. The output will be a .hex or .bin file suitable for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/meetlab/kafka60/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake meetlab/kafka60:default\n```\n\n----------------------------------------\n\nTITLE: Flash NK65 V1.4 Firmware with dfu-util - make\nDESCRIPTION: This command flashes the NK65 V1.4 keyboard firmware using dfu-util. Replace `<keymap>` with the desired keymap. This requires dfu-util to be installed and accessible in the system's PATH.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/novelkeys/nk65/v1_4/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake nk65/v1_4:<keymap>:dfu-util\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware to Handwired Split Keyboard\nDESCRIPTION: This command flashes the compiled firmware to the handwired/riblee_split keyboard with the default keymap.  It requires a properly configured QMK build environment and a connected keyboard in a flashable state.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/riblee_split/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake handwired/riblee_split:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building EC 60 Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the EC 60 keyboard using the QMK build environment. It compiles the necessary source code and creates a firmware file ready for flashing onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cipulot/ec_60/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake cipulot/ec_60:default\n```\n\n----------------------------------------\n\nTITLE: Building Tata80 Firmware\nDESCRIPTION: This command builds the default firmware for the Tata80 keyboard using the wuque/tata80/wk configuration within the QMK Firmware environment. It compiles the source code and generates the firmware image ready for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wuque/tata80/wk/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake wuque/tata80/wk:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Eclipse_65 Firmware (QMK)\nDESCRIPTION: This command builds and flashes the default firmware for the GEN ONE Eclipse_65 keyboard.  It requires a properly configured QMK build environment and a connected keyboard in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/genone/eclipse_65/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake genone/eclipse_65:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Dactyl-CC Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the Dactyl-CC keyboard. It requires a properly configured QMK build environment. The output is a .hex or .bin file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/dactyl_cc/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake handwired/dactyl_cc:default\n```\n\n----------------------------------------\n\nTITLE: Building punk75 keyboard with default keymap in QMK\nDESCRIPTION: This command builds the QMK firmware for the punk75 keyboard using the default keymap.  It prepares the firmware for flashing onto the keyboard's microcontroller. Requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/punk75/readme.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmake punk75:default\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for Perk60 ISO Rev A using QMK\nDESCRIPTION: This command builds the default firmware for the Perk60 ISO Rev A keyboard. It requires a properly configured QMK build environment. The resulting firmware can then be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/4pplet/perk60_iso/rev_a/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake 4pplet/perk60_iso/rev_a:default\n```\n\n----------------------------------------\n\nTITLE: Toggling LED Matrix State without EEPROM Persistence (C)\nDESCRIPTION: This function toggles the LED matrix on or off without writing the new state to EEPROM. The change is temporary and will not persist across resets.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/led_matrix.md#_snippet_10\n\nLANGUAGE: C\nCODE:\n```\nvoid led_matrix_toggle_noeeprom(void)\n```\n\n----------------------------------------\n\nTITLE: Building Titan 65 Firmware\nDESCRIPTION: This command builds the default firmware for the Titan 65 keyboard using the QMK build environment. It compiles the source code and generates the firmware image that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/phase_studio/titan65/soldered/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake phase_studio/titan65:default\n```\n\n----------------------------------------\n\nTITLE: Setting Effect Speed without EEPROM (C)\nDESCRIPTION: This function sets the speed of the LED matrix effect. The speed, from 0 to 255, is not written to EEPROM and won't persist across resets.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/led_matrix.md#_snippet_35\n\nLANGUAGE: C\nCODE:\n```\nvoid led_matrix_set_speed_noeeprom(uint8_t speed)\n```\n\n----------------------------------------\n\nTITLE: Flashing Zed65 Firmware with QMK\nDESCRIPTION: This command builds and flashes the default keymap for the Mechlovin Zed65 keyboard to the keyboard's microcontroller. It requires the QMK build environment and a connected keyboard in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechlovin/zed65/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake mechlovin/zed65:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Osborne1 Keyboard Firmware (QMK)\nDESCRIPTION: This command flashes the built firmware onto the Osborne1 keyboard using the QMK build environment and the specified flash target. It requires a properly configured QMK build environment and a connected, flashable device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/osborne1/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake osborne1:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building DMOTE QMK Firmware\nDESCRIPTION: This command builds the default firmware for the DMOTE keyboard. It requires the QMK build environment to be set up. The command compiles the firmware and generates a .hex file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/dmote/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake handwired/dmote:default\n```\n\n----------------------------------------\n\nTITLE: Flashing ScottoFrog Firmware (QMK)\nDESCRIPTION: This command flashes the default firmware to the ScottoFrog macropad. It requires the QMK build environment and a flashing tool to be set up correctly.  It builds the firmware if it is not already built.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/scottokeebs/scottofrog/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake handwired/scottokeebs/scottofrog:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Hex6C Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the Hex6C keyboard using the QMK build environment. It compiles the source code and generates a firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechlovin/hex6c/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake mechlovin/hex6c:default\n```\n\n----------------------------------------\n\nTITLE: Flashing QMK Firmware\nDESCRIPTION: This command flashes the default firmware onto the DeskDaily Alter Lite keyboard.  It builds the firmware and then attempts to flash it to the keyboard.  This requires the QMK build environment and a configured flashing tool.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/nightly_boards/alter_lite/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake nightly_boards/alter_lite:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Keyboard Firmware (QMK)\nDESCRIPTION: This command flashes the compiled QMK firmware onto the ID67 keyboard with the default keymap. It requires a properly set up QMK build environment and a connected keyboard in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/idobao/id67/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake id67:default:flash\n```\n\n----------------------------------------\n\nTITLE: C Code Block Example\nDESCRIPTION: This C code snippet demonstrates a simple function that returns -1. It's used as an example of how to include C code blocks within the QMK documentation.  No dependencies are required.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/__capabilities.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n```c\nint c_code(void) {\n    return -1;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Flashing Thirty Keyboard Firmware\nDESCRIPTION: This command flashes the compiled firmware onto the Thirty keyboard. It requires the QMK build environment and a configured flashing tool. It programs the keyboard's microcontroller with the new firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/deng/thirty/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake deng/thirty:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Keyboard Firmware\nDESCRIPTION: This command flashes the built firmware onto the EC TKL keyboard. It uses the `make` command-line tool with the target specified as `cipulot/ec_tkl:default:flash`. This assumes the keyboard is already in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cipulot/ec_tkl/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake cipulot/ec_tkl:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Piantor Firmware with Make\nDESCRIPTION: This command builds and flashes the default keymap for the Piantor keyboard to the device. It assumes the QMK build environment has been set up correctly and the device is connected.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/beekeeb/piantor/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake beekeeb/piantor:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the BM60HSRGB_ISO/rev2 keyboard using the QMK build environment.  It compiles the source code and creates a firmware image ready to be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kprepublic/bm60hsrgb_iso/rev2/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake kprepublic/bm60hsrgb_iso/rev2:default\n```\n\n----------------------------------------\n\nTITLE: Making firmware for TOFU_II\nDESCRIPTION: This command compiles the default firmware for the TOFU_II keyboard using the QMK build environment. It requires the QMK build environment to be set up correctly. The resulting firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/dztech/tofu/ii/v1/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake dztech/tofu/ii:default\n```\n\n----------------------------------------\n\nTITLE: Building Bevi Keyboard Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Bevi keyboard using the QMK build environment. It requires the QMK build environment to be set up correctly. The resulting firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/sendyyeah/bevi/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake sendyyeah/bevi:default\n```\n\n----------------------------------------\n\nTITLE: Building JC65 v32u4 Firmware with QMK\nDESCRIPTION: This command builds the firmware for the JC65 keyboard with the v32u4 PCB revision using the default keymap. It assumes that the QMK build environment has already been set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/jc65/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake jc65/v32u4:default\n```\n\n----------------------------------------\n\nTITLE: Building Demiurge Keyboard Firmware - QMK\nDESCRIPTION: This command builds the default firmware for the Demiurge keyboard using the QMK build environment.  It assumes the QMK build environment is already set up.  The output is the compiled firmware ready to be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/demiurge/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake demiurge:default\n```\n\n----------------------------------------\n\nTITLE: Building Smart68 Firmware\nDESCRIPTION: This command builds the default firmware for the Smart 68 keyboard.  It requires a properly configured QMK build environment.  The output is a .hex or .bin file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/smart68/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake smart68:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Keyboard Firmware\nDESCRIPTION: This command is used to flash the built firmware onto the Chameleon keyboard. It requires the QMK build environment to be set up and the keyboard to be in a flashable state, often requiring the bootloader to be active.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/tweetydabird/chameleon/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake tweetydabird/chameleon:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Lunakey Macro Firmware\nDESCRIPTION: This command builds the default firmware for the Lunakey Macro keyboard using the QMK build environment. It assumes that the QMK build environment has been set up correctly. It outputs the compiled firmware binary.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/yoichiro/lunakey_macro/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake lunakey_macro:default\n```\n\n----------------------------------------\n\nTITLE: Adding Font Source File to rules.mk (Make)\nDESCRIPTION: This snippet demonstrates how to include a QFF font source file in your `rules.mk` file, which is necessary to compile the font into your firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/quantum_painter.md#_snippet_71\n\nLANGUAGE: make\nCODE:\n```\nSRC += noto11.qff.c\n```\n\n----------------------------------------\n\nTITLE: Building NK+ Keyboard Firmware\nDESCRIPTION: This command builds the QMK firmware for the novelkeys/nk_plus keyboard with the default keymap. It requires a properly set up QMK build environment. The output is the firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/novelkeys/nk_plus/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake novelkeys/nk_plus:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware to Bruce le Clavier\nDESCRIPTION: This command flashes the compiled firmware to the Bruce le Clavier keyboard using the QMK build environment. It requires the keyboard to be in bootloader mode for the flashing process to succeed.  The command must be executed within the QMK Firmware environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/jlw/bruce_le_clavier/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake jlw/bruce_le_clavier:flash\n```\n\n----------------------------------------\n\nTITLE: Building Atlas 65 Keyboard Firmware (QMK)\nDESCRIPTION: This command builds the default keymap for the Atlas 65 keyboard using the QMK build environment. It assumes that the QMK build environment has already been set up according to the QMK documentation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/atlas_65/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake atlas_65:default\n```\n\n----------------------------------------\n\nTITLE: Building OR87 Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the OR87 keyboard using the QMK build environment. It compiles the keyboard layout and creates a firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/relapsekb/or87/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake relapsekb/or87:default\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for BINEPAD BNK8 with QMK\nDESCRIPTION: This command builds the default firmware for the BINEPAD BNK8 macropad using the QMK build environment. It assumes that the QMK build environment has been properly set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/binepad/bnk8/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake binepad/bnk8:default\n```\n\n----------------------------------------\n\nTITLE: Enabling SPI Driver in rules.mk - Make\nDESCRIPTION: This snippet shows how to enable the SPI Master driver in QMK by setting the `SPI_DRIVER_REQUIRED` variable to `yes` in the `rules.mk` file. This ensures that the necessary SPI driver code is included during compilation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/spi.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nSPI_DRIVER_REQUIRED = yes\n```\n\n----------------------------------------\n\nTITLE: Setting EEPROM Handedness (Left)\nDESCRIPTION: This command sets the EEPROM handedness for the left side of the Architeuthis Dux split keyboard. It assumes the keyboard is connected in DFU mode. This command configures the keyboard to be recognized as the left half.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/a_dux/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake a_dux:default:dfu-split-left\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for YMDK Wings Hotswap\nDESCRIPTION: This command builds the default firmware for the YMDK Wings Hotswap keyboard. It requires a properly configured QMK build environment. The output is a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ymdk/wingshs/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake ymdk/wingshs:default\n```\n\n----------------------------------------\n\nTITLE: Building M60-B Firmware\nDESCRIPTION: This command builds the default firmware for the M60-B keyboard. It requires a properly set up QMK build environment. The output will be a .hex or .bin file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wolf/m60_b/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake wolf/m60_b:default\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for Stello65 Keyboard\nDESCRIPTION: This command builds the default firmware for the Stello65 keyboard with the hs_rev1 revision.  It assumes that the QMK build environment has already been set up as described in the QMK documentation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/stello65/hs_rev1/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake stello65/hs_rev1:default\n```\n\n----------------------------------------\n\nTITLE: Flashing the m5 Keyboard Firmware\nDESCRIPTION: This command flashes the default firmware for the Monsgeek m5 keyboard.  It requires a correctly configured QMK build environment and a connected keyboard in a flashable state.  This command builds and then flashes the firmware to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/monsgeek/m5/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake monsgeek/m5:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Southpole Keyboard Firmware\nDESCRIPTION: This command builds the default keymap for the Southpole keyboard using the QMK Firmware build environment. It requires a correctly configured QMK build environment. The output is a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keyhive/southpole/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake keyhive/southpole:default\n```\n\n----------------------------------------\n\nTITLE: Install QMK CLI on Arch Linux (pacman)\nDESCRIPTION: This command installs the QMK CLI from the official Arch Linux repositories using pacman. It is noted that some dependencies may be marked as optional when they shouldn't be.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/newbs_getting_started.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nsudo pacman -S qmk\n```\n\n----------------------------------------\n\nTITLE: Printf-style Format Strings Example - Python\nDESCRIPTION: Shows the preferred printf-style format string usage in QMK Python code.  This style is used by the logging module for consistency and is more familiar to C programmers.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/coding_conventions_python.md#_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nname = 'World'\nprint('Hello, %s!' % (name,))\n```\n\n----------------------------------------\n\nTITLE: Flashing Piantor UV 44 Firmware\nDESCRIPTION: This command flashes the default firmware onto the Piantor UV 44 keyboard. It builds the firmware if necessary and then uses a flashing tool to upload it to the keyboard. The keyboard must be in bootloader mode for this command to work.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/piantoruv44/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake piantoruv44:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Ginkgo65hot Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the Ginkgo65hot keyboard. It utilizes the QMK build environment and compiles the necessary files to create a flashable firmware image.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mokey/ginkgo65hot/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake mokey/ginkgo65hot:default\n```\n\n----------------------------------------\n\nTITLE: Building MJ61 Firmware (Makefile)\nDESCRIPTION: This snippet shows how to build the default firmware for the MelGeek MJ61 keyboard using the QMK build environment. It requires a properly configured QMK environment and the 'make' command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/melgeek/mj61/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake melgeek/mj61/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Building Noon Keyboard Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Noon keyboard using the QMK build environment. It assumes the QMK build environment is already set up correctly. This command should be executed from the QMK firmware directory.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ztboards/noon/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake ztboards/noon:default\n```\n\n----------------------------------------\n\nTITLE: Writing Raw Data to Display\nDESCRIPTION: Writes raw character data (`data`) of a specified size (`size`) to the display buffer, starting at the current cursor position. The size is passed as `uint16_t`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/st7565.md#_snippet_18\n\nLANGUAGE: C\nCODE:\n```\n// Writes a string to the buffer at current cursor position\nvoid st7565_write_raw(const char *data, uint16_t size);\n```\n\n----------------------------------------\n\nTITLE: Flashing the Crazy Keyboard 68 Firmware\nDESCRIPTION: This command flashes the compiled firmware to the Crazy Keyboard 68. It requires the QMK build environment to be set up correctly and utilizes the appropriate flashing tool for the keyboard's microcontroller (ATM32U4).\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/crazy_keyboard_68/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake crazy_keyboard_68:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Lily58L Firmware with QMK\nDESCRIPTION: This command builds the firmware for the Lily58L keyboard using the QMK build environment. It targets the 'lily58/light' keyboard layout with the 'lily58l' keymap. The command needs the QMK build environment properly configured.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/lily58/keymaps/lily58l/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake lily58/light:lily58l\n```\n\n----------------------------------------\n\nTITLE: Building AkemiPad Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the AkemiPad keyboard using the QMK build environment. It assumes that the QMK build environment has already been set up according to the QMK documentation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/adpenrose/akemipad/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake adpenrose/akemipad:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Aurora Lily58 with default configuration\nDESCRIPTION: This command builds and flashes the firmware to the Aurora Lily58 keyboard with the default configuration. It depends on the QMK build environment being set up correctly and the flashing tools being available.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/splitkb/aurora/lily58/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake splitkb/aurora/lily58/rev1:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flash Vængr keyboard with default keymap\nDESCRIPTION: This command builds and flashes the firmware for the Vængr keyboard using the default keymap. It requires a properly configured QMK build environment and a connected keyboard in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/runes/vaengr/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake vaengr:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building CannonKeys Atlas Firmware - QMK\nDESCRIPTION: This command builds the default QMK firmware for the CannonKeys Atlas keyboard. It requires a properly configured QMK build environment. The output will be the firmware file ready to be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cannonkeys/atlas/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake cannonkeys/atlas:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Alicia Cook Keyboard Firmware (QMK)\nDESCRIPTION: This command flashes the built firmware to the Alicia Cook keyboard. It uses the QMK build environment and requires a connected keyboard in flashing mode. Assumes the keyboard is connected and recognized by the system.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ibnuda/alicia_cook/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake ibnuda/alicia_cook:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Keyboard Firmware (QMK)\nDESCRIPTION: This command compiles and flashes the firmware for the SkeletonNumPad keyboard with the default keymap. It requires a correctly configured QMK build environment and a connected keyboard in a flashable state.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/skeletonkbd/skeletonnumpad/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake skeletonkbd/skeletonnumpad:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Jourkey Firmware - QMK\nDESCRIPTION: This snippet provides the command to flash the default firmware onto the Jourkey keyboard using the QMK build environment.  It requires the build environment to be set up and the keyboard to be in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/takashicompany/jourkey/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake takashicompany/jourkey:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building MNK65 Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the MNK65 keyboard using the QMK build environment. It requires a properly configured QMK build environment. The output is a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kopibeng/mnk65/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake kopibeng/mnk65:default\n```\n\n----------------------------------------\n\nTITLE: Setting the Bootloader in rules.mk for BootloadHID\nDESCRIPTION: This snippet sets the `BOOTLOADER` variable in the `rules.mk` file to `bootloadhid`. This configuration is necessary for keyboards using the BootloadHID bootloader.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/flashing.md#_snippet_10\n\nLANGUAGE: Make\nCODE:\n```\n# Bootloader selection\nBOOTLOADER = bootloadhid\n```\n\n----------------------------------------\n\nTITLE: Defining Tap Code Delay\nDESCRIPTION: Sets the delay (in milliseconds) between `register_code` and `unregister_code`. Use this if encountering issues registering properly, especially on VUSB boards. Defaults to `0`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/config_options.md#_snippet_65\n\nLANGUAGE: C\nCODE:\n```\n#define TAP_CODE_DELAY 100\n```\n\n----------------------------------------\n\nTITLE: Building Vision Keyboard Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Vision keyboard using the QMK build environment. It requires the QMK build environment to be set up. The resulting firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/satt/vision/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake satt/vision:default\n```\n\n----------------------------------------\n\nTITLE: Building firmware for Denis keyboard\nDESCRIPTION: This command builds the default firmware for the Denis keyboard using the QMK build environment. It requires the QMK build environment to be set up. The output is a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cutie_club/keebcats/denis/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake cutie_club/keebcats/denis:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Hex.4B Keyboard Firmware with Make\nDESCRIPTION: This command flashes the default firmware onto the Hex.4B keyboard using the QMK build environment. It requires the keyboard to be in bootloader mode and uses a flashing tool to upload the firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechlovin/hex4b/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake mechlovin/hex4b:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Aeroboard Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Aeroboard keyboard using the QMK build environment. It requires the QMK build environment to be set up correctly. The resulting firmware can then be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/eason/aeroboard/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake eason/aeroboard:default\n```\n\n----------------------------------------\n\nTITLE: Building CannonKeys Balance Firmware\nDESCRIPTION: This command demonstrates how to build the default firmware for the CannonKeys Balance keyboard using the `make` command. It requires a properly configured QMK build environment. The command compiles the firmware for the specified keyboard and keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cannonkeys/balance/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake cannonkeys/balance:default\n```\n\n----------------------------------------\n\nTITLE: Build NK65 V1.4 Firmware with VIA Support - make\nDESCRIPTION: This command builds the NK65 V1.4 keyboard firmware with VIA support. It assumes the QMK build environment is already set up. The resulting firmware can then be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/novelkeys/nk65/v1_4/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake nk65/v1_4:via\n```\n\n----------------------------------------\n\nTITLE: Building Freebird Numpad Lite Firmware\nDESCRIPTION: This command builds the default firmware for the Freebird Numpad Lite keyboard. It requires the QMK build environment to be set up beforehand. The output is the compiled firmware ready to be flashed onto the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keebsforall/freebirdnp/lite/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake keebsforall/freebirdnp/lite:default\n```\n\n----------------------------------------\n\nTITLE: Flashing BAMFK-1 Firmware (QMK)\nDESCRIPTION: This command flashes the built firmware to the keebio/bamfk1 keyboard.  It requires the QMK build environment and a configured flashing tool. Assumes the default configuration is being used.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keebio/bamfk1/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake keebio/bamfk1:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing QMK Firmware to BELLA RGB ANSI\nDESCRIPTION: This command builds and flashes the default firmware to the BELLA RGB ANSI keyboard. It requires the QMK build environment to be set up, and a compatible flashing tool to be available and configured.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kbdfans/bella/rgb/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake kbdfans/bella/rgb:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building WT70-JB Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the wilba.tech WT70-JB keyboard using the QMK build environment. It compiles the source code and creates a firmware file ready for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wilba_tech/wt70_jb/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake wilba_tech/wt70_jb:default\n```\n\n----------------------------------------\n\nTITLE: Building Program Yoink Firmware\nDESCRIPTION: This command builds the firmware for the Program Yoink keyboard using the QMK build environment. It supports both the staggered and ortho layouts. Requires QMK build environment to be properly configured.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/program_yoink/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake program_yoink/staggered:default\n```\n\nLANGUAGE: Makefile\nCODE:\n```\nmake program_yoink/ortho:default\n```\n\n----------------------------------------\n\nTITLE: Displaying Keyboard and Keymap Information - qmk info\nDESCRIPTION: Displays information about keyboards and keymaps in QMK, including basic info, layouts, key matrix, and pretty-printing JSON keymaps. It is directory aware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/cli_commands.md#_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\nqmk info -kb planck/rev5\n```\n\nLANGUAGE: shell\nCODE:\n```\nqmk info -kb ergodox_ez -m\n```\n\nLANGUAGE: shell\nCODE:\n```\nqmk info -kb clueboard/california -km default\n```\n\nLANGUAGE: shell\nCODE:\n```\nqmk info [-f FORMAT] [-m] [-l] [-km KEYMAP] [-kb KEYBOARD]\n```\n\n----------------------------------------\n\nTITLE: Import Specific Function Examples - Python\nDESCRIPTION: Demonstrates the preferred way to import specific functions from a module in QMK's Python code. It emphasizes clarity and avoiding ambiguity by explicitly specifying the source of functions.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/coding_conventions_python.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom qmk import effects\n\neffects.echo()\n```\n\nLANGUAGE: Python\nCODE:\n```\nfrom qmk.effects import echo\n\necho()  # It's unclear where echo comes from\n```\n\nLANGUAGE: Python\nCODE:\n```\nfrom qmk.keymap import compile_firmware\n\ncompile_firmware()\n```\n\nLANGUAGE: Python\nCODE:\n```\nimport qmk.keymap\n\nqmk.keymap.compile_firmware()\n```\n\n----------------------------------------\n\nTITLE: Flashing dyz40 Firmware with QMK\nDESCRIPTION: This command flashes the compiled firmware to the dyz40 keyboard using the QMK build environment.  It requires the keyboard to be in bootloader mode. It also depends on the availability of a suitable flashing tool configured within the QMK environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/dyz/dyz40/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake dyz/dyz40:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building the m5 Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the Monsgeek m5 keyboard using the QMK build environment.  It requires a properly configured QMK build environment.  The output is a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/monsgeek/m5/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake monsgeek/m5:default\n```\n\n----------------------------------------\n\nTITLE: Flashing QMK Firmware (K310) using QMK CLI\nDESCRIPTION: This command flashes the QMK firmware onto the Durgod K310 keyboard using the QMK command-line interface. It specifies the keyboard and keymap to be used during the flashing process.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/durgod/k3x0/readme.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# k310\nqmk flash -kb durgod/k310 -km default\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware to keyten kt60HS-T\nDESCRIPTION: This command compiles and flashes the QMK firmware to the keyten kt60HS-T keyboard with the default keymap. It requires a properly configured QMK build environment and a connected keyboard in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keyten/kt60hs_t/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake keyten/kt60hs_t:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building the Drop CTRL v2 Firmware\nDESCRIPTION: This command builds the default firmware for the Drop CTRL v2 keyboard. It compiles the keymap and necessary QMK files into a firmware image that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/drop/ctrl/v2/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake drop/ctrl/v2:default\n```\n\n----------------------------------------\n\nTITLE: Building Tripel Keyboard Firmware (QMK)\nDESCRIPTION: This command builds the QMK firmware for the Tripel keyboard with the Pro-Micro mounted on the left PCB, using the default keymap. It prepares the firmware for flashing onto the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/peej/tripel/left/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake peej/tripel/left:default\n```\n\n----------------------------------------\n\nTITLE: Flashing the Sleepy Keeb Split Keyboard\nDESCRIPTION: This command is used to flash the compiled QMK firmware onto the Sleepy Keeb Split keyboard. It combines the building process with the flashing process, uploading the firmware to the connected microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/sleepy_craft_studios/sleepy_keeb_split/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake sleepy_craft_studios/sleepy_keeb_split:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Titan60 Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Titan60 keyboard using QMK. It compiles the keyboard layout and keymap into a firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/acekeyboard/titan60/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake acekeyboard/titan60:default\n```\n\n----------------------------------------\n\nTITLE: Building Fruity60 Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the Fruity60 keyboard using the QMK build environment.  It assumes that the QMK build environment has already been set up. The output is a firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/fruity60/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake fruity60:default\n```\n\n----------------------------------------\n\nTITLE: Building firmware for hineybush/ibis keyboard\nDESCRIPTION: This command builds the default firmware for the hineybush/ibis keyboard using the QMK build environment.  It leverages the QMK make system to compile the necessary files and generate the firmware binary.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/hineybush/ibis/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake hineybush/ibis:default\n```\n\n----------------------------------------\n\nTITLE: Building Falcon Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the Matrix Falcon keyboard. It requires a properly configured QMK build environment. The output is a .hex file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/matrix/falcon/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake matrix/falcon:default\n```\n\n----------------------------------------\n\nTITLE: Defining RGB LED Split in QMK\nDESCRIPTION: This macro defines the number of RGB LEDs per half in a split keyboard configuration. It is crucial for correctly configuring RGB lighting across both halves of the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/config_options.md#_snippet_96\n\nLANGUAGE: c\nCODE:\n```\n#define RGBLED_SPLIT { 6, 6 }\n```\n\n----------------------------------------\n\nTITLE: Building keyboard firmware\nDESCRIPTION: This command builds the firmware for the Caticorn Solder (Rev 1) keyboard with the default keymap. It assumes that the QMK build environment has been set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/horrortroll/caticorn/rev1/solder/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake horrortroll/caticorn/rev1/solder:default\n```\n\n----------------------------------------\n\nTITLE: Making mini36 Firmware\nDESCRIPTION: This command compiles the default firmware for the mini36 keyboard using the QMK build environment. It specifies the keyboard (controllerworks/mini36) and the keymap (default). This command must be run within a correctly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/controllerworks/mini36/readme.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmake controllerworks/mini36:default\n```\n\n----------------------------------------\n\nTITLE: Building REVIUNG5 Firmware with QMK\nDESCRIPTION: This command compiles the QMK firmware for the REVIUNG5 macropad with the default keymap. It requires a properly configured QMK build environment. The output will be a firmware file ready for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/reviung/reviung5/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake reviung5:default\n```\n\n----------------------------------------\n\nTITLE: Building the Firmware\nDESCRIPTION: This command builds the default firmware for the Rama Works x Machine Industries M4-A keyboard. It uses the `make` command within the QMK Firmware environment, specifying the keyboard and keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/machine_industries/m4_a/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake machine_industries/m4_a:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Neely65 QMK Firmware\nDESCRIPTION: This command flashes the compiled QMK firmware to the Neely65 keyboard. It requires a correctly configured QMK build environment and a compatible flashing toolchain. This command assumes dfu-util, or similar flashing tools, are installed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wolf/neely65/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake wolf/neely65:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building mx5160 keyboard firmware using QMK\nDESCRIPTION: This command is used to build the firmware for the mx5160 keyboard with the default keymap using the QMK build environment. It assumes that the QMK build environment has already been set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/evyd13/mx5160/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake evyd13/mx5160:default\n```\n\n----------------------------------------\n\nTITLE: Building BM60HSRGB_EC/rev2 Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the BM60HSRGB_EC/rev2 keyboard using the QMK build environment. It assumes that the QMK build environment has already been set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kprepublic/bm60hsrgb_ec/rev2/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake kprepublic/bm60hsrgb_ec/rev2:default\n```\n\n----------------------------------------\n\nTITLE: Flashing JJ50 rev1 Firmware with QMK\nDESCRIPTION: This command flashes the compiled firmware onto the JJ50 rev1 keyboard using the QMK build environment. It utilizes the appropriate flashing tool and protocol to program the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kprepublic/jj50/rev1/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake kprepublic/jj50/rev1:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing SHK9 Firmware with QMK\nDESCRIPTION: This command flashes the compiled firmware onto the SHK9 macropad using the QMK build environment. The board needs to be connected and in a state ready to receive the firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/shk9/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake shk9:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building ydkb/ydpm40 Firmware with Make\nDESCRIPTION: This command uses the `make` command to build the default firmware for the ydkb/ydpm40 keyboard. It assumes that the QMK build environment has been properly set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ydkb/ydpm40/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake ydkb/ydpm40:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware to Ellipse Hotswap Keyboard (QMK)\nDESCRIPTION: This command flashes the compiled firmware to the Ellipse Hotswap keyboard. It builds the firmware if necessary and then uses the appropriate flashing tool to upload the firmware to the keyboard's microcontroller. This assumes the keyboard is in the correct bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cannonkeys/ellipse_hs/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake cannonkeys/ellipse_hs:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Krush60 Solder Keyboard\nDESCRIPTION: This command builds the default keymap for the Krush60 solder keyboard. It requires a properly set up QMK build environment.  The output will be a .hex or .bin file suitable for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/sawnsprojects/krush/krush60/solder/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake sawnsprojects/krush/krush60/solder:default\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for FJLabs TF65 RGB V2 (Makefile)\nDESCRIPTION: This command builds the QMK firmware for the FJLabs TF65 RGB V2 keyboard with the default keymap. It assumes that the QMK build environment has been set up correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/fjlabs/tf65rgbv2/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake fjlabs/tf65rgbv2:default\n```\n\n----------------------------------------\n\nTITLE: Making Firmware for Calice Keyboard\nDESCRIPTION: This command builds the default firmware for the Calice keyboard.  It requires a correctly configured QMK build environment.  The output is a .hex or .bin file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/qwertlekeys/calice/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake qwertlekeys/calice:default\n```\n\n----------------------------------------\n\nTITLE: Building MechBrewery MB65H Firmware\nDESCRIPTION: This command compiles the default firmware for the MechBrewery MB65H keyboard using the QMK build environment. It requires a properly configured QMK environment and assumes the user is in the QMK firmware directory.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechbrewery/mb65h/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake mechbrewery/mb65h:default\n```\n\n----------------------------------------\n\nTITLE: Flashing the YMDK Bface firmware with QMK\nDESCRIPTION: This command flashes the default firmware onto the YMDK Bface keyboard using the QMK build environment.  It depends on the QMK build environment and a compatible flashing tool. It requires the keyboard to be in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ymdk/bface/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake ymdk/bface:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Karina Keyboard Firmware - QMK\nDESCRIPTION: This command flashes the built QMK firmware onto the Karina keyboard using the default keymap. It requires a properly configured QMK build environment and a connected keyboard in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/misonoworks/karina/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake misonoworks/karina:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware to Super 16 V2 with QMK\nDESCRIPTION: This command flashes the compiled firmware to the Super 16 V2 macropad. It assumes that the device is in bootloader mode and the QMK build environment is properly configured.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/1upkeyboards/super16v2/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake 1upkeyboards/super16v2:default:flash\n```\n\n----------------------------------------\n\nTITLE: Delay Update for Pro Micro 3.3V - C code\nDESCRIPTION: This C code snippet updates the delay in `matrix.c` to 300 microseconds.  This is required for the slave board to work correctly on Pro Micro 3.3V.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/orthodox/readme.md#_snippet_6\n\nLANGUAGE: c\nCODE:\n```\n// _delay_us(30);  // without this wait read unstable value.\n_delay_us(300);  // without this wait read unstable value.\n```\n\n----------------------------------------\n\nTITLE: Setting Brightness for All LEDs (Mono) - C\nDESCRIPTION: This function `is31fl3743a_set_value_all` sets the brightness for all LEDs when using a single-color driver. It takes a single brightness value and applies it to all LEDs.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/is31fl3743a.md#_snippet_7\n\nLANGUAGE: C\nCODE:\n```\nvoid is31fl3743a_set_value_all(uint8_t value)\n```\n\n----------------------------------------\n\nTITLE: Building poker87c keyboard firmware\nDESCRIPTION: This command builds the default firmware for the poker87c keyboard using the QMK build environment.  It assumes the QMK build environment is already set up. The resulting firmware can then be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/poker87c/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake poker87c:default\n```\n\n----------------------------------------\n\nTITLE: Flashing QMK Firmware (K320) using QMK CLI\nDESCRIPTION: This command flashes the QMK firmware onto the Durgod K320 keyboard using the QMK command-line interface. It specifies the keyboard and keymap to be used during the flashing process.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/durgod/k3x0/readme.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# k320\nqmk flash -kb durgod/k320 -km default\n```\n\n----------------------------------------\n\nTITLE: Building the Sneakbox AVA Firmware\nDESCRIPTION: This command builds the default firmware for the Sneakbox AVA keyboard using the QMK build environment. It compiles the keymap defined in the default folder for the sneakbox/ava keyboard. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/sneakbox/ava/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake sneakbox/ava:default\n```\n\n----------------------------------------\n\nTITLE: Flashing erGhost Firmware with Make\nDESCRIPTION: This command flashes the built firmware to the erGhost keyboard using the QMK build environment and dfu-programmer.  The keyboard must be in bootloader mode for this to work.  QMK and dfu-programmer must be installed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/lz/erghost/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake lz/erghost:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for Valor Rev 3\nDESCRIPTION: This command builds the default firmware for the Valor Rev 3 keyboard using the QMK build environment. It compiles the keymap and firmware for the specified keyboard and revision. Requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/xelus/valor/rev3/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake xelus/valor/rev3:default\n```\n\n----------------------------------------\n\nTITLE: Building EC Type-B Firmware with QMK (Makefile)\nDESCRIPTION: This command builds the default firmware for the EC Type-B keyboard using the QMK build environment. It compiles the keyboard's keymap and firmware into a flashable binary file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cipulot/ec_typeb/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake cipulot/ec_typeb:default\n```\n\n----------------------------------------\n\nTITLE: Building Resume1800 Firmware\nDESCRIPTION: This command builds the default firmware for the Resume1800 keyboard using the QMK build environment. It compiles the keyboard's keymap and firmware, creating a hex file ready for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/crimsonkeyboards/resume1800/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake crimsonkeyboards/resume1800:default\n```\n\n----------------------------------------\n\nTITLE: Building fivethirteen keyboard firmware - Makefile\nDESCRIPTION: This command builds the default firmware for the fivethirteen handwired keyboard. It requires the QMK build environment to be set up correctly. The output is a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/fivethirteen/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/fivethirteen:default\n```\n\n----------------------------------------\n\nTITLE: Building WT65-H1 Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the wilba.tech WT65-H1 keyboard using the QMK build environment. It compiles the necessary files and creates a firmware file ready for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wilba_tech/wt65_h1/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake wilba_tech/wt65_h1:default\n```\n\n----------------------------------------\n\nTITLE: Making Default Firmware - QMK\nDESCRIPTION: This command compiles the default firmware for the humble40 keyboard. It requires a correctly configured QMK build environment.  The output will be a .hex or .uf2 file ready for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/eyeohdesigns/humble40/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake eyeohdesigns/humble40:default\n```\n\n----------------------------------------\n\nTITLE: Building Wallaby Firmware\nDESCRIPTION: This code snippet provides the command to build the default firmware for the Wallaby keyboard using the QMK build environment. It assumes that the QMK build environment has been properly set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kkatano/wallaby/readme.md#_snippet_0\n\nLANGUAGE: QMK Make\nCODE:\n```\nmake kkatano/wallaby:default\n```\n\n----------------------------------------\n\nTITLE: Setting IS31FL3742A RGB LED Scaling Registers (C)\nDESCRIPTION: This defines the arguments required for setting the scaling register for an RGB LED controlled by an IS31FL3742A LED driver. It specifies the LED index, and scaling values for red, green, and blue channels.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/is31fl3742a.md#_snippet_6\n\n\n\n----------------------------------------\n\nTITLE: Flushing LED Updates in C\nDESCRIPTION: The `apa102_flush` function sends the buffered color data to the APA102 LED chain. This function must be called after setting the LED colors with `apa102_set_color` or `apa102_set_color_all` to display the changes.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/apa102.md#_snippet_4\n\nLANGUAGE: C\nCODE:\n```\nvoid apa102_flush(void)\n```\n\n----------------------------------------\n\nTITLE: Building Function96 Firmware with Make\nDESCRIPTION: This command is used to build the default firmware for the Function96 keyboard version 1 using the QMK build environment. It assumes that the build environment has already been set up according to the QMK documentation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/function96/v1/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake function96/v1:default\n```\n\n----------------------------------------\n\nTITLE: Building panc60 Keyboard Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the panc60 keyboard. It leverages the QMK build environment to compile the keyboard's firmware based on the `panc60` keyboard definition and the `default` keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/panc60/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake panc60:default\n```\n\n----------------------------------------\n\nTITLE: PS/2 Mouse Scroll Button Settings (C)\nDESCRIPTION: These defines configure the scroll button functionality for a trackpoint. This enables using a button for scrolling instead of movement. These settings are placed in `config.h`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/ps2_mouse.md#_snippet_13\n\nLANGUAGE: c\nCODE:\n```\n#define PS2_MOUSE_SCROLL_BTN_MASK (1<<PS2_MOUSE_BTN_MIDDLE) /* Default */\n```\n\nLANGUAGE: c\nCODE:\n```\n#define PS2_MOUSE_SCROLL_BTN_MASK 0\n```\n\nLANGUAGE: c\nCODE:\n```\n#define PS2_MOUSE_BTN_LEFT      0\n#define PS2_MOUSE_BTN_RIGHT     1\n#define PS2_MOUSE_BTN_MIDDLE    2\n```\n\nLANGUAGE: c\nCODE:\n```\n#define PS2_MOUSE_SCROLL_BTN_SEND 300 /* Default */\n```\n\nLANGUAGE: c\nCODE:\n```\n#define PS2_MOUSE_SCROLL_BTN_SEND 0\n```\n\nLANGUAGE: c\nCODE:\n```\n#define PS2_MOUSE_SCROLL_DIVISOR_H 2\n#define PS2_MOUSE_SCROLL_DIVISOR_V 2\n```\n\n----------------------------------------\n\nTITLE: Flashing ScottoWing Keyboard Firmware\nDESCRIPTION: This command flashes the compiled firmware to the ScottoWing keyboard. It requires the keyboard to be connected and the QMK build environment to be configured.  It flashes the compiled firmware with the default keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/scottokeebs/scottowing/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake scottokeebs/scottowing:default:flash\n```\n\n----------------------------------------\n\nTITLE: Compiling VIA-Compatible Murciélago Firmware with QMK\nDESCRIPTION: This command compiles a VIA-compatible keymap for the Murciélago keyboard (revision 1) using the QMK build environment. This allows the keymap to be configured using the VIA configurator after flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/murcielago/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake murcielago/rev1:via\n```\n\n----------------------------------------\n\nTITLE: Build Left Firmware for Giabalanai Keyboard\nDESCRIPTION: This command builds and flashes the QMK firmware for the left side of the giabalanai keyboard using the \"2firmware\" configuration. It utilizes avrdude to upload the firmware to the microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/giabalanai/keymaps/2firmware/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake giabalanai:2firmware:avrdude-split-left\n```\n\n----------------------------------------\n\nTITLE: Building egg58 Firmware\nDESCRIPTION: This command builds the default firmware for the egg58 keyboard.  It assumes that the QMK build environment is already set up. The output will be a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/eggsworks/egg58/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake eggsworks/egg58:default\n```\n\n----------------------------------------\n\nTITLE: Building the Hackpad Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the Hackpad using the QMK build environment.  It compiles the keymap and necessary drivers to create a firmware image ready for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/hackpad/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake hackpad:default\n```\n\n----------------------------------------\n\nTITLE: Building Copenhagen Click Pad V1 with QMK\nDESCRIPTION: This snippet shows how to build the Copenhagen Click Pad V1 firmware using the QMK build environment. It requires the QMK build environment to be set up.  The 'default' configuration is specified in the command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/copenhagen_click/click_pad_v1/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake copenhagen_click/click_pad_v1:default\n```\n\n----------------------------------------\n\nTITLE: Flashing KafkaSplit Firmware\nDESCRIPTION: This command flashes the default firmware to the KafkaSplit keyboard. It extends the build command by adding `:flash` to the target, resulting in `meetlab/kafkasplit:default:flash`.  The keyboard must be connected and in a flashable state.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/meetlab/kafkasplit/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake meetlab/kafkasplit:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for Chouchou Keyboard (QMK)\nDESCRIPTION: This command builds the default firmware for the Chouchou keyboard using the QMK build environment. It compiles the keyboard layout and generates the firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/chouchou/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake chouchou:default\n```\n\n----------------------------------------\n\nTITLE: Flashing DISCIPLINE Keyboard Firmware\nDESCRIPTION: This command flashes the compiled QMK Firmware to the DISCIPLINE keyboard. It assumes the keyboard is connected and in a state ready to accept the flash. Requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/coseyfannitutti/discipline/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake coseyfannitutti/discipline:default:flash\n```\n\n----------------------------------------\n\nTITLE: Making Palmslave Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the Palmslave keyboard.  It requires a properly set up QMK build environment. The `takashicompany/palmslave` specifies the keyboard and `default` specifies the keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/takashicompany/palmslave/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake takashicompany/palmslave:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware to Rati(o)60\nDESCRIPTION: This command builds and flashes the default firmware for the Rati(o)60 Rev A keyboard. Requires QMK build environment to be set up. It depends on the `make` command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/rationalist/ratio60_hotswap/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake rationalist/ratio60_hotswap/rev_a:default:flash\n```\n\n----------------------------------------\n\nTITLE: QMK Flash Command Example\nDESCRIPTION: This snippet demonstrates how to flash the QMK firmware for the Planck keyboard, specifically the rev4 version with the default keymap. This command builds and flashes the firmware to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/documentation_templates.md#_snippet_3\n\nLANGUAGE: Makefile\nCODE:\n```\nmake planck/rev4:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building PocketType Firmware\nDESCRIPTION: This command builds the default firmware for the PocketType keyboard under the 'evyd13' directory. It requires a properly configured QMK build environment. The resulting firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/evyd13/pockettype/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake evyd13/pockettype:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Tripel Keyboard Firmware (QMK)\nDESCRIPTION: This command flashes the compiled firmware onto the Tripel keyboard's Pro-Micro, using the default keymap. It requires a QMK build environment and a connected, flashable Pro-Micro.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/peej/tripel/middle/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake peej/tripel/middle:default:flash\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Split Transport\nDESCRIPTION: Allows replacing the standard split communication routines with a custom one. ARM based split keyboards must use this at present. Requires 'SPLIT_KEYBOARD = yes' in rules.mk.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/config_options.md#_snippet_86\n\nLANGUAGE: C\nCODE:\n```\nSPLIT_TRANSPORT = custom\n```\n\n----------------------------------------\n\nTITLE: Flashing the OSAv2 Numpad Firmware\nDESCRIPTION: This command builds and flashes the default firmware onto the OSAv2 Numpad keyboard. It requires a properly configured QMK build environment and a connected keyboard in a flashable state.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/viktus/osav2_numpad/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake viktus/osav2_numpad:default:flash\n```\n\n----------------------------------------\n\nTITLE: Toggling LED Matrix State in QMK Firmware (C)\nDESCRIPTION: This function toggles the LED matrix on or off, switching between the enabled and disabled states. The new state is stored in EEPROM for persistence across resets.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/led_matrix.md#_snippet_9\n\nLANGUAGE: C\nCODE:\n```\nvoid led_matrix_toggle(void)\n```\n\n----------------------------------------\n\nTITLE: Build Right Firmware for Giabalanai Keyboard\nDESCRIPTION: This command builds and flashes the QMK firmware for the right side of the giabalanai keyboard using the \"2firmware\" configuration. It employs avrdude to upload the firmware to the microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/giabalanai/keymaps/2firmware/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake giabalanai:2firmware:avrdude-split-right\n```\n\n----------------------------------------\n\nTITLE: Building Evil80 Firmware with QMK\nDESCRIPTION: This snippet provides the command to build the default firmware for the Evil80 keyboard using the QMK build environment. Ensure that the build environment is properly set up before executing this command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/evil80/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake evil80:default\n```\n\n----------------------------------------\n\nTITLE: Flashing QMK Firmware to OSAv2 Topre\nDESCRIPTION: This command builds and flashes the default QMK firmware for the viktus/osav2_topre keyboard. It requires a properly configured QMK build environment and a connected keyboard in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/viktus/osav2_topre/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake viktus/osav2_topre:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building miniMACRO5 Firmware (QMK)\nDESCRIPTION: This command builds the default keymap for the miniMACRO5 macropad using the QMK firmware build environment. Ensure that the QMK build environment is properly configured before executing this command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/minimacro5/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake minimacro5:default\n```\n\n----------------------------------------\n\nTITLE: Flashing the Hackpad Firmware (QMK)\nDESCRIPTION: This command flashes the compiled firmware onto the Hackpad using the QMK build environment. This requires the device to be in bootloader mode, typically accessed by the reset button or keycode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/hackpad/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake hackpad:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing willoucom/keypad Firmware (QMK)\nDESCRIPTION: This command flashes the compiled QMK firmware to the willoucom/keypad keyboard with the default keymap. It requires the QMK build environment to be set up and the keyboard to be connected in a flashable state.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/willoucom/keypad/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nqmk flash -kb willoucom/keypad -km default\n```\n\n----------------------------------------\n\nTITLE: Building Nebula65 Firmware with VIA - Shell\nDESCRIPTION: This command builds the Nebula65 keyboard firmware with VIA support. It requires a properly configured QMK build environment. The output is a firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/spaceholdings/nebula12/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake spaceholdings/nebula12:via\n```\n\n----------------------------------------\n\nTITLE: Building Mini Winni Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Mini Winni macropad using the QMK build environment. It compiles the keymap and other necessary components into a firmware image.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/winkeys/mini_winni/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake winkeys/mini_winni:default\n```\n\n----------------------------------------\n\nTITLE: Install QMK CLI on Linux/WSL (pip)\nDESCRIPTION: This command installs the QMK CLI using pip, the Python package installer. The `--user` flag installs the package in the user's home directory, avoiding the need for root privileges.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/newbs_getting_started.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npython3 -m pip install --user qmk\n```\n\n----------------------------------------\n\nTITLE: Building 6macro Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the 6macro keyboard using the QMK build environment. It assumes that the QMK build environment has already been set up according to the QMK documentation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/6macro/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/6macro:default\n```\n\n----------------------------------------\n\nTITLE: Update Scaling Registers - IS31FL3729 (C)\nDESCRIPTION: Flushes the scaling register values to the IS31FL3729 LED driver. This function updates the LED driver with the current scaling register values for the specified driver index. The `index` argument refers to the driver index.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/is31fl3729.md#_snippet_9\n\nLANGUAGE: C\nCODE:\n```\nvoid is31fl3729_update_scaling_registers(uint8_t index)\n```\n\n----------------------------------------\n\nTITLE: Building Unikorn 60 Keyboard Firmware\nDESCRIPTION: This command is used to build the default firmware for the Unikorn 60 keyboard. It compiles the source code and generates a firmware image that can be flashed onto the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/unikorn/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake unikorn:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Mona Keyboard Firmware (QMK)\nDESCRIPTION: This command builds and flashes the default firmware for the Mona keyboard to the device. It requires a properly configured QMK environment and a connected keyboard in DFU mode or a similar flashing mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/rmi_kb/mona/v1/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake rmi_kb/mona/v1:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building the Firmware: Mode Tempo M60S\nDESCRIPTION: This command builds the default firmware for the Mode Tempo M60S keyboard using the QMK build environment. It compiles the source code into a firmware image ready for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mode/m60s/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake mode/m60s:default\n```\n\n----------------------------------------\n\nTITLE: Building Default Keymap for XD60 rev3 - Makefile\nDESCRIPTION: This command builds the default keymap for the XD60 rev3 PCB using the make command. It requires QMK firmware to be properly set up and configured to execute.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/xiudi/xd60/keymaps/default/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake xiudi/xd60/rev3:default\n```\n\n----------------------------------------\n\nTITLE: Building Whale 75 Firmware\nDESCRIPTION: This command builds the default firmware for the Linworks Whale 75 keyboard. It assumes that the QMK build environment is already set up. The compiled firmware can then be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/linworks/whale75/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake linworks/whale75:default\n```\n\n----------------------------------------\n\nTITLE: Building EC Type-K Firmware with Make\nDESCRIPTION: This command builds the default firmware for the EC Type-K keyboard using the QMK build environment. It compiles the keymap and other necessary files to create a flashable firmware image.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cipulot/ec_typek/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake cipulot/ec_typek:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Portal 66 keyboard firmware\nDESCRIPTION: This command builds and flashes the default firmware for the soldered version of the Portal 66 keyboard. It requires a properly set up QMK build environment and a connected keyboard in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/portal_66/soldered/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake portal_66/soldered:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Default Keymap for XD60 rev2 - Makefile\nDESCRIPTION: This command builds the default keymap for the XD60 rev2 PCB using the make command. It requires QMK firmware to be properly set up and configured to execute.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/xiudi/xd60/keymaps/default/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake xiudi/xd60/rev2:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Ninjin Keyboard Firmware\nDESCRIPTION: This command flashes the compiled firmware to the Ninjin keyboard using the QMK build environment. It programs the microcontroller with the keyboard layout and functionality. It requires a configured QMK build environment and a compatible flashing tool.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/xelus/ninjin/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake xelus/ninjin:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Keyboard Firmware\nDESCRIPTION: This command builds and flashes the default keymap for the Constellation EC keyboard. It assumes the QMK build environment has been set up and a suitable flashing tool is available.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cipulot/ec_constellation/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake cipulot/ec_constellation:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building THE40 Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the THE40 keyboard.  It uses the QMK build environment. You must have QMK set up correctly before using this command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/lazydesigners/the40/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake lazydesigners/the40:default\n```\n\n----------------------------------------\n\nTITLE: Building Krush65 Solder Firmware\nDESCRIPTION: This command builds the default firmware for the Krush65 solder variant. It assumes that the QMK build environment is properly configured. The resulting firmware can be flashed to the keyboard using a bootloader.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/sawnsprojects/krush/krush65/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake sawnsprojects/krush/krush65/solder:default\n```\n\n----------------------------------------\n\nTITLE: Building Nozbe Macropad Firmware\nDESCRIPTION: This command builds the default firmware for the handwired Nozbe Macropad. It utilizes the QMK build environment to compile the firmware, generating a hex file suitable for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/nozbe_macro/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake handwired/nozbe_macro:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Harbour Firmware with Make\nDESCRIPTION: This command flashes the compiled firmware to the Harbour keyboard. It extends the build command with the `:flash` target, which uses a suitable flashing tool to upload the firmware to the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kibou/harbour/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake kibou/harbour:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building top40 Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the Akko top40 keyboard. It requires a properly configured QMK build environment. The output is a firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/akko/top40/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake akko/top40:default\n```\n\n----------------------------------------\n\nTITLE: Building FS Streampad Firmware with QMK\nDESCRIPTION: This command builds the firmware for the FS streampad keyboard using the default keymap. Ensure that the QMK build environment is properly set up before executing this command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/fs_streampad/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake fs_streampad:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Keycult 65 Firmware via CLI\nDESCRIPTION: This command flashes the Keycult 65 firmware to the keyboard using the QMK command-line interface. Replace `<keymap>` with the desired keymap. Requires the QMK build environment to be set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keycult/keycult65/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake keycult/keycult65:<keymap>:flash\n```\n\n----------------------------------------\n\nTITLE: Making BumbleBee Firmware\nDESCRIPTION: This command compiles the default BumbleBee keyboard firmware using the QMK build environment. It requires a properly configured QMK environment. The output is a firmware file that can be flashed to the BumbleBee keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/swiftrax/bumblebee/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake handwired/swiftrax/bumblebee:default\n```\n\n----------------------------------------\n\nTITLE: Building N9 Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the Nightly Boards N9 keyboard using the QMK build environment.  It requires a properly configured QMK build environment. The output will be the compiled firmware ready for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/nightly_boards/n9/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake nightly_boards/n9:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Polly40 Keyboard Firmware\nDESCRIPTION: This command flashes the built firmware onto the Polly40 keyboard. It requires the QMK build environment to be set up and the keyboard to be in a state ready to receive the firmware (e.g., bootloader mode).\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/polly40/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake handwired/polly40:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Bolsalice Keyboard Firmware\nDESCRIPTION: This command flashes the built firmware to the Bolsalice keyboard. It requires the QMK build environment to be set up correctly and the keyboard to be in the correct bootloader mode.  It assumes the `default` keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/bolsa/bolsalice/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake bolsa/bolsalice:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building and Flashing Yakiimo Rev A with VIA\nDESCRIPTION: This command builds and flashes the Yakiimo Rev A keyboard firmware with VIA support using the QMK build environment. It requires the QMK build environment to be set up beforehand.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/4pplet/yakiimo/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake 4pplet/yakiimo/rev_a:via:flash\n```\n\n----------------------------------------\n\nTITLE: Building LXXT keyboard firmware\nDESCRIPTION: This command builds the default firmware for the LXXT keyboard using the QMK build environment. It compiles the source code and generates a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/lxxt/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake lxxt:default\n```\n\n----------------------------------------\n\nTITLE: Flashing BM80HSRGB Firmware - Make Command\nDESCRIPTION: This command flashes the compiled firmware to the BM80HSRGB keyboard. It assumes the keyboard is in a flashable state and that the build environment is correctly set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kprepublic/bm80hsrgb/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake kprepublic/bm80hsrgb:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing ProjectD 75% ISO Firmware\nDESCRIPTION: This command flashes the compiled firmware onto the ProjectD 75% ISO keyboard. It uses the QMK make system to build and then flash the firmware to the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/projectd/75/iso/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake projectd/75/iso:default:flash\n```\n\n----------------------------------------\n\nTITLE: Defining Manufacturer in QMK config.h\nDESCRIPTION: This code snippet defines the manufacturer string for a QMK firmware project, generally indicating who or what brand produced the board. This setting is configured in the `config.h` file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/config_options.md#_snippet_3\n\nLANGUAGE: c\nCODE:\n```\n#define MANUFACTURER \"Me\"\n```\n\n----------------------------------------\n\nTITLE: Configure PS/2 Pins (ARM ChibiOS)\nDESCRIPTION: This code defines the clock and data pins for PS/2 mouse on ARM ChibiOS. This should go into your keyboard's `config.h` file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/ps2_mouse.md#_snippet_5\n\nLANGUAGE: c\nCODE:\n```\n#define PS2_CLOCK_PIN A8\n#define PS2_DATA_PIN  A9\n```\n\n----------------------------------------\n\nTITLE: Flashing Drop SHIFT v2 Keyboard Firmware (Makefile)\nDESCRIPTION: This command flashes the compiled firmware onto the Drop SHIFT v2 keyboard.  It assumes the keyboard is in bootloader mode and utilizes the appropriate flashing tools configured in the QMK environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/drop/shift/v2/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake drop/shift/v2:default:flash\n```\n\n----------------------------------------\n\nTITLE: Setting Leader Key Timeout (QMK)\nDESCRIPTION: This snippet configures the global timeout for leader key sequences in `config.h`. The `LEADER_TIMEOUT` macro defines the maximum time (in milliseconds) allowed to complete the entire leader sequence.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/leader_key.md#_snippet_2\n\nLANGUAGE: C\nCODE:\n```\n#define LEADER_TIMEOUT 350\n```\n\n----------------------------------------\n\nTITLE: Building BBPad Firmware (f411)\nDESCRIPTION: This command builds the QMK Firmware for the BBPad using the STM32F411 BlackPill. The `default` keymap is used. Requires a properly set up QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechwild/bbpad/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake mechwild/bbpad/f411:default\n```\n\n----------------------------------------\n\nTITLE: Building NumDiscipline firmware\nDESCRIPTION: This command builds the default firmware for the NumDiscipline keyboard (revision 1) using the QMK build environment. It assumes that the QMK build environment has been properly set up beforehand.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ericrlau/numdiscipline/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake ericrlau/numdiscipline/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Compiling Keyboard Firmware with QMK\nDESCRIPTION: Compiles the keyboard firmware for the specified keyboard and keymap using the QMK command-line interface. This command builds the firmware based on the configuration files located in the specified directories.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ez_maker/directpins/proton_c/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nqmk compile -kb ez_maker/directpins/proton_c -km default\n```\n\n----------------------------------------\n\nTITLE: Enabling Surface Driver in rules.mk\nDESCRIPTION: This code snippet demonstrates how to enable the surface driver in the `rules.mk` file for the Quantum Painter library. This allows rendering to a buffer in RAM.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/quantum_painter.md#_snippet_36\n\nLANGUAGE: make\nCODE:\n```\nQUANTUM_PAINTER_ENABLE = yes\nQUANTUM_PAINTER_DRIVERS += surface\n```\n\n----------------------------------------\n\nTITLE: Flashing Meow48 Firmware with QMK\nDESCRIPTION: This command builds and flashes the default firmware for the Meow48 keyboard using the QMK build environment. It compiles the source code and then uploads the resulting firmware to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/meow48/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake meow48:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Skog Lite Firmware (QMK)\nDESCRIPTION: This command flashes the compiled firmware onto the Skog Lite keyboard. It requires the QMK build environment to be set up and the keyboard to be connected to the computer. The output is the flashed firmware on the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/percent/skog_lite/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake percent/skog_lite:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Tripel Keyboard Firmware (QMK)\nDESCRIPTION: This command builds the firmware for the Tripel keyboard with the Pro-Micro mounted on the middle PCB, using the default keymap. It requires a properly set up QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/peej/tripel/middle/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake peej/tripel/middle:default\n```\n\n----------------------------------------\n\nTITLE: Adding a Git Remote\nDESCRIPTION: This command adds a new remote repository named `upstream` to the Git configuration. The URL points to the QMK repository. This allows the local repository to fetch updates from the QMK repository.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/newbs_git_resynchronize_a_branch.md#_snippet_2\n\nLANGUAGE: git\nCODE:\n```\ngit remote add upstream https://github.com/qmk/qmk_firmware.git\n```\n\n----------------------------------------\n\nTITLE: Building suihankey_alpha firmware\nDESCRIPTION: This command is used to compile the default firmware for the suihankey_alpha keyboard. It requires QMK build environment to be set up. The resulting firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kakunpc/suihankey/split/alpha/readme.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmake kakunpc/suihankey/alpha:default\n```\n\n----------------------------------------\n\nTITLE: Building the lfn.merro60 Firmware\nDESCRIPTION: This command builds the default firmware for the lfn.merro60 keyboard. It requires the QMK build environment to be set up. The output is a .hex file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/chlx/lfn_merro60/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake chlx/lfn_merro60:default\n```\n\n----------------------------------------\n\nTITLE: Building the default keymap for Cornia keyboard\nDESCRIPTION: This command builds the default keymap for the Cornia keyboard. It requires the QMK build environment to be set up. The output will be a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cornia/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake cornia/v1:default\n```\n\n----------------------------------------\n\nTITLE: Building Adelais AVR firmware with QMK\nDESCRIPTION: This command builds the Adelais AVR keyboard firmware using the QMK build environment. It specifies the keyboard, layout, and keymap to use. Requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechlovin/adelais/standard_led/avr/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake mechlovin/adelais/standard_led/avr:default\n```\n\n----------------------------------------\n\nTITLE: Building Jourkey Firmware - QMK\nDESCRIPTION: This snippet provides the command to build the default firmware for the Jourkey keyboard using the QMK build environment. It assumes that the QMK build environment is already set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/takashicompany/jourkey/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake takashicompany/jourkey:default\n```\n\n----------------------------------------\n\nTITLE: Install QMK CLI on Arch Linux (yay)\nDESCRIPTION: This command installs the QMK CLI using the `yay` AUR helper. It specifically installs the `qmk-git` package, which likely builds the QMK CLI from the latest Git commit.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/newbs_getting_started.md#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nyay -S qmk-git\n```\n\n----------------------------------------\n\nTITLE: Building Synth Labs 065 Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the Synth Labs 065 keyboard using the QMK build environment. It compiles the source code and generates a firmware file suitable for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/synthlabs/065/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake synthlabs/065:default\n```\n\n----------------------------------------\n\nTITLE: Flashing QMK Firmware to Day Off Keyboard\nDESCRIPTION: This command builds and flashes the QMK firmware to the Day Off keyboard with the default keymap. It requires a properly configured QMK build environment and a connected keyboard in a flashable state.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/nixkeyboards/day_off/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake nixkeyboards/day_off:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Mars 6.5 keyboard firmware (QMK)\nDESCRIPTION: This command flashes the default firmware to the Mars 6.5 keyboard using the QMK build environment. It requires the QMK build environment to be set up and a flashing tool configured for the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ft/mars65/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake ft/mars65:default:flash\n```\n\n----------------------------------------\n\nTITLE: Disable Lock Key Support in `config.h`\nDESCRIPTION: Disables lock key support in `config.h` if a Cherry MX Lock switch is not used. This removes the code related to locking and resynchronization, reducing the firmware size.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/squeezing_avr.md#_snippet_5\n\nLANGUAGE: c\nCODE:\n```\n#undef LOCKING_SUPPORT_ENABLE\n#undef LOCKING_RESYNC_ENABLE\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for soyuzxl Keyboard (Makefile)\nDESCRIPTION: This command builds the default firmware for the soyuzxl keyboard. It requires a properly configured QMK build environment. The output is a firmware file ready to be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/wwa/soyuzxl/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/wwa/soyuzxl:default\n```\n\n----------------------------------------\n\nTITLE: Enabling Send String Feature in QMK (Make)\nDESCRIPTION: To enable the Send String feature in QMK, add the following line to your `rules.mk` file. This is necessary if the feature is disabled by default or has been explicitly disabled previously.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/send_string.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nSEND_STRING_ENABLE = yes\n```\n\n----------------------------------------\n\nTITLE: Define Ortholinear 5x5 Layout\nDESCRIPTION: This snippet defines a keyboard layout named `LAYOUT_ortho_5x5`. This layout can be used to map keycodes to specific physical locations on a 5x5 ortholinear keyboard matrix when configuring the QMK firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/layouts/community/ortho_5x5/readme.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nLAYOUT_ortho_5x5\n```\n\n----------------------------------------\n\nTITLE: Building waffling60 Firmware with Make\nDESCRIPTION: This command is used to build the default firmware for the waffling60 keyboard's rev_d_ansi configuration. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/4pplet/waffling60/rev_d_ansi/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake 4pplet/waffling60/rev_d_ansi:default\n```\n\n----------------------------------------\n\nTITLE: Compiling HHKB JP Firmware\nDESCRIPTION: This command compiles the QMK firmware for Japanese layout (JP) HHKB keyboards. It assumes that the QMK build environment is correctly configured.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/ChangeLog/20200530.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake hhkb/jp\n```\n\n----------------------------------------\n\nTITLE: Building the BIG DILL EXTENDED keyboard firmware\nDESCRIPTION: This command builds the default keymap for the BIG DILL EXTENDED keyboard using the QMK build environment. It compiles the necessary source code and generates the firmware file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechwild/bde/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake mechwild/bde:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Frankie Macropad Firmware\nDESCRIPTION: This command flashes the compiled firmware to the Frankie Macropad keyboard. It relies on the QMK build environment and appropriate drivers for the atmega16u2 microcontroller to upload the firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/frankie_macropad/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake handwired/frankie_macropad:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Irispad Firmware\nDESCRIPTION: This command builds and flashes the default firmware for the Irispad Rev. 8 onto the keyboard using the QMK build environment. It requires a configured build environment and a connected keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keebio/irispad/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake keebio/irispad/rev8:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Zen Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the Zen rev2 keyboard using the QMK build environment. It assumes the user has already set up their build environment according to the QMK documentation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/rgbkb/zen/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake rgbkb/zen/rev2:default\n```\n\n----------------------------------------\n\nTITLE: Adding ChibiOS-Contrib upstream remote\nDESCRIPTION: Adds a remote repository named `upstream` pointing to the official ChibiOS-Contrib repository on GitHub. This allows for fetching updates from the official repository.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/chibios_upgrade_instructions.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\ngit remote add upstream https://github.com/ChibiOS/ChibiOS-Contrib\n```\n\n----------------------------------------\n\nTITLE: Disabling OLED\nDESCRIPTION: This snippet describes how to disable the OLED display on the Helix keyboard.  Setting `OLED_ENABLE` to `no` in the `rules.mk` file will deactivate the OLED display.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/helix/rev2/keymaps/default/readme_jp.md#_snippet_3\n\nLANGUAGE: makefile\nCODE:\n```\nOLED_ENABLE = no            # OLED_ENABLE\n```\n\n----------------------------------------\n\nTITLE: Flashing the Star75 Keyboard Firmware\nDESCRIPTION: This command is used to flash the built firmware to the Star75 keyboard using the default keymap. It requires the QMK build environment and a connected keyboard in a flashable state.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/star75/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake star75:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Dolice EC Firmware\nDESCRIPTION: This command flashes the default firmware to the Dolice EC keyboard. It builds the firmware if necessary and then flashes it to the keyboard. Requires a properly configured QMK environment and a connected keyboard in a flashable state.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cipulot/ec_dolice/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake cipulot/ec_dolice:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Bella Soldered Firmware\nDESCRIPTION: This command flashes the built firmware to the Bella Soldered keyboard. It requires the QMK Firmware build environment to be set up.  It uses the `make` command with the `:flash` target.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kbdfans/bella/soldered/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake kbdfans/bella/soldered:default:flash\n```\n\n----------------------------------------\n\nTITLE: Compiling Teton 78 Default Keymap\nDESCRIPTION: This command compiles the default keymap for the Teton 78 keyboard. It requires a properly set up QMK build environment.  The output is a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mountainmechdesigns/teton_78/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake mountainmechdesigns/teton_78:default\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for Coban Pad 3A\nDESCRIPTION: This command builds the default firmware for the Coban Pad 3A keyboard using the QMK build environment. It compiles the source code and generates a firmware file ready for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/coban/pad3a/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake coban/pad3a:default\n```\n\n----------------------------------------\n\nTITLE: Building QMK Firmware for GMMK V2 65% (ISO)\nDESCRIPTION: This command builds the default QMK firmware for the GMMK V2 65% (ISO) keyboard. It uses the `make` command with the target specified as `gmmk/gmmk2/p65/iso:default`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/gmmk/gmmk2/p65/iso/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake gmmk/gmmk2/p65/iso:default\n```\n\n----------------------------------------\n\nTITLE: Include QMK Keyboard Header\nDESCRIPTION: Includes the necessary QMK keyboard header file. This header file contains definitions and declarations required for working with the QMK firmware, such as keycodes, layers, and keyboard matrix configurations.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/signum/3_0/keymaps/default/km_template.txt#_snippet_3\n\nLANGUAGE: C\nCODE:\n```\n#include QMK_KEYBOARD_H\n```\n\n----------------------------------------\n\nTITLE: Building t75 Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the t75 keyboard using the QMK build environment. It compiles the source code and generates a firmware image that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/vertex/t75/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake vertex/t75:default\n```\n\n----------------------------------------\n\nTITLE: Flashing the Bakeneko 65 V2 keyboard firmware\nDESCRIPTION: This command builds and flashes the default firmware for the Bakeneko 65 V2 keyboard onto the device. It requires a properly configured QMK build environment and a compatible flashing tool.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kkatano/bakeneko65/rev2/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake kkatano/bakeneko65/rev2:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Bolt Keyboard Firmware - QMK\nDESCRIPTION: This command flashes the compiled firmware to the Bolt keyboard. It relies on the QMK build environment and the default keymap configuration. The keyboard needs to be in bootloader mode for flashing to succeed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/lazydesigners/bolt/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake lazydesigners/bolt:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building ASK55 Firmware with Make\nDESCRIPTION: This command builds the default firmware for the ASK55 keyboard. It requires a properly configured QMK build environment. The output is a firmware file ready to be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ask55/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake ask55:default\n```\n\n----------------------------------------\n\nTITLE: Building Waterfowl Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the Waterfowl keyboard using the QMK build environment. It compiles the keyboard layout and generates the firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/waterfowl/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake waterfowl:default\n```\n\n----------------------------------------\n\nTITLE: Building Stront Keyboard Firmware\nDESCRIPTION: This command builds the default keymap for the Stront keyboard. It requires a properly set up QMK build environment. The output is the firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/stront/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake stront:default\n```\n\n----------------------------------------\n\nTITLE: Building ZED1800 Keyboard Firmware (Makefile)\nDESCRIPTION: This command builds the default firmware for the Mechlovin' ZED1800 keyboard. It utilizes the QMK build environment to compile the keyboard's firmware based on the specified configuration.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechlovin/zed1800/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake mechlovin/zed1800:default\n```\n\n----------------------------------------\n\nTITLE: Defining I2C Clock Rate Speed in QMK config.h\nDESCRIPTION: This code snippet sets the I2C clock rate speed for keyboards using I2C. The default is `400000L`, except for keyboards using `split_common`, where the default is `100000L`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/config_options.md#_snippet_32\n\nLANGUAGE: c\nCODE:\n```\n#define F_SCL 100000L\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for Nightly Boards [n]40-o (QMK)\nDESCRIPTION: This command builds the default firmware for the Nightly Boards [n]40-o keyboard using the QMK build environment. It assumes that the QMK build environment is already set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/nightly_boards/n40_o/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake nightly_boards/n40_o:default\n```\n\n----------------------------------------\n\nTITLE: Building RE65 Firmware\nDESCRIPTION: This command builds the default firmware for the RE65 keyboard using the QMK build environment. It specifies the keyboard (sawnsprojects/re65) and the keymap (default).  It requires a properly set up QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/sawnsprojects/re65/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake sawnsprojects/re65:default\n```\n\n----------------------------------------\n\nTITLE: Building Splitography Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the Splitography keyboard using the QMK build environment. It assumes that the build environment has already been set up as described in the QMK documentation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/splitography/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake splitography:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Lily58 Pro Firmware with QMK\nDESCRIPTION: This command flashes the compiled QMK firmware to the Lily58 Pro keyboard. It employs the `qmk flash` command with the `-kb` and `-km` flags to identify the keyboard and keymap to be flashed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechboards/lily58/pro/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nqmk flash -kb mechboards/lily58/pro -km default\n```\n\n----------------------------------------\n\nTITLE: Building Clueboard 17% Firmware\nDESCRIPTION: This snippet shows how to build the default firmware for the Clueboard 17% numpad using the QMK build environment. It requires the QMK build environment to be set up beforehand.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/clueboard/17/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake clueboard/17:default\n```\n\n----------------------------------------\n\nTITLE: Flashing QMK Firmware\nDESCRIPTION: This command flashes the compiled QMK firmware to the handwired/protype keyboard with the default keymap. It requires the QMK build environment and a configured flashing tool.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/protype/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nqmk flash -kb handwired/protype -km default\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for Pizza Pad PCB\nDESCRIPTION: This command is used to build the default firmware for the idyllic/pizzapad keyboard. It assumes that the QMK build environment has already been set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/idyllic/pizzapad/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake idyllic/pizzapad:default\n```\n\n----------------------------------------\n\nTITLE: Register Unicode Character - C\nDESCRIPTION: This function inputs a single Unicode character. It takes a `uint32_t` representing the code point of the character to send.  A surrogate pair will be sent if required by the current input mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/unicode.md#_snippet_18\n\nLANGUAGE: C\nCODE:\n```\nvoid register_unicode(uint32_t code_point)\n```\n\n----------------------------------------\n\nTITLE: Flashing Artemis/Paragon Firmware\nDESCRIPTION: This command builds and flashes the default hotswap version of the Artemis/Paragon keyboard firmware to the keyboard's microcontroller. It requires the QMK build environment and a connected keyboard in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/artemis/paragon/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake artemis/paragon/hotswap:default:flash\n```\n\n----------------------------------------\n\nTITLE: Compiling Macropod Firmware\nDESCRIPTION: This command compiles the default keymap for the Geistmaschine Macropod using the QMK build environment.  It requires QMK to be properly set up and configured on the system.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/geistmaschine/macropod/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nqmk compile -kb geistmaschine/macropod -km default\n```\n\n----------------------------------------\n\nTITLE: Building QMK Firmware for Hydrogen Deskpad\nDESCRIPTION: This command builds the QMK firmware for the Hydrogen Deskpad with the default keymap. It assumes that the QMK build environment has already been set up according to the QMK documentation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/h0oni/deskpad/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake h0oni/deskpad:default\n```\n\n----------------------------------------\n\nTITLE: Example Leader Sequence with Per-Key Timing (QMK)\nDESCRIPTION: This C code shows an example of defining a leader sequence that benefits from per-key timing. The sequence involves pressing the 'C' key three times.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/leader_key.md#_snippet_5\n\nLANGUAGE: C\nCODE:\n```\nif (leader_sequence_three_keys(KC_C, KC_C, KC_C)) {\n    SEND_STRING(\"Per key timing is great!!!\");\n}\n```\n\n----------------------------------------\n\nTITLE: Keyboard Layout Definition\nDESCRIPTION: This snippet defines a keyboard layout macro in QMK firmware. It specifies the arrangement of keys for a 60% ANSI WKL keyboard with a split backspace and a split right shift key layout.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/layouts/default/60_ansi_wkl_split_bs_rshift/readme.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nLAYOUT_60_ansi_wkl_split_bs_rshift\n```\n\n----------------------------------------\n\nTITLE: Building the keyboard firmware\nDESCRIPTION: This command builds the default firmware for the CONSTELLATION REV3 keyboard using the QMK build environment. It assumes the build environment is already set up and ready to compile QMK firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/aeboards/constellation/rev3/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake aeboards/constellation/rev3:default\n```\n\n----------------------------------------\n\nTITLE: Building SLZ40 Firmware with QMK\nDESCRIPTION: This command builds the default keymap for the SLZ40 keyboard using the QMK firmware build system. It assumes that the QMK build environment has already been set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/slz40/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake slz40:default\n```\n\n----------------------------------------\n\nTITLE: Building XD60 rev2 ISO Keymap\nDESCRIPTION: This command builds the ISO keymap for the revision 2 of the XIUDI XD60 keyboard using the QMK firmware build system.  It requires the QMK firmware environment to be set up correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/xiudi/xd60/keymaps/iso/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake xiudi/xd60/rev2:iso\n```\n\n----------------------------------------\n\nTITLE: Unicode Name Enum Definition in QMK\nDESCRIPTION: Defines an enum called `unicode_name`. This enum is intended to be populated with names corresponding to unicode characters, providing a human-readable way to refer to specific unicode values in the keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/signum/3_0/keymaps/default/km_template.txt#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nenum unicode_name {\n//<enum/>\n};\n```\n\n----------------------------------------\n\nTITLE: Flashing giabalanai Firmware (QMK)\nDESCRIPTION: This command flashes the default firmware onto the giabalanai keyboard. It uses the QMK build environment and appropriate flashing tools to upload the compiled firmware to the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/giabalanai/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake giabalanai:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing scatter42 Firmware (QMK)\nDESCRIPTION: This command flashes the built firmware onto the scatter42 keyboard using the QMK build environment. It assumes that the keyboard is connected and the build environment is correctly configured for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/scatter42/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake scatter42:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Ingrained Firmware (Makefile)\nDESCRIPTION: This command flashes the compiled firmware to the Ingrained keyboard. It uses the QMK make system with the `flash` target to upload the firmware to the board, requiring a configured flashing environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ingrained/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake ingrained:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building pi60_hse Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the pi60_hse keyboard using the QMK build environment. It assumes that the QMK build environment has already been set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/1upkeyboards/pi60_hse/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake 1upkeyboards/pi60_hse:default\n```\n\n----------------------------------------\n\nTITLE: Compiling and Flashing Firmware\nDESCRIPTION: This snippet provides the command to compile and flash the firmware for the Helix keyboard with the default keymap. The `:flash` option is appended to the `make` command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/helix/rev2/keymaps/default/readme_jp.md#_snippet_7\n\nLANGUAGE: makefile\nCODE:\n```\n$ make helix:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing 0-Sixty Firmware with QMK Make\nDESCRIPTION: This command builds and flashes the default firmware for the 0-Sixty keyboard to the ProMicro controller. It requires a configured QMK build environment and the keyboard to be in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/0_sixty/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake 0_sixty:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware to MiniTKL\nDESCRIPTION: This command flashes the built firmware to the MiniTKL keyboard. It requires a properly configured QMK build environment and a connected keyboard in bootloader mode. The command uses the default layout.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/rastersoft/minitkl/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake rastersoft/minitkl:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing QMK Firmware to GMMK V2 65% (ISO)\nDESCRIPTION: This command flashes the compiled QMK firmware to the GMMK V2 65% (ISO) keyboard.  It uses the `make` command with the target specified as `gmmk/gmmk2/p65/iso:default:flash`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/gmmk/gmmk2/p65/iso/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake gmmk/gmmk2/p65/iso:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing QMK Firmware to Mehkee96 Keyboard\nDESCRIPTION: This command flashes the compiled QMK firmware onto the Mehkee96 keyboard. It requires the keyboard to be in bootloader mode and a properly configured build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mehkee96/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake mehkee96:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Tau4 Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the Tau4 keyboard. It compiles the keymap and other necessary files into a firmware image that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/tau4/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake tau4:default\n```\n\n----------------------------------------\n\nTITLE: Building the vn keyboard firmware - make\nDESCRIPTION: This command builds the default firmware for the vn keyboard. It requires the QMK build environment to be set up. The output is a .hex or .bin file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ubest/vn/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake ubest/vn:default\n```\n\n----------------------------------------\n\nTITLE: Building Glacier Firmware\nDESCRIPTION: This command builds the default firmware for the glacier keyboard using the QMK build environment. It requires a properly configured QMK build environment. The output is the compiled firmware that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/creatkeebs/glacier/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake creatkeebs/glacier:default\n```\n\n----------------------------------------\n\nTITLE: Compiling Iron180 default keymap - Make\nDESCRIPTION: This command compiles the default keymap for the Iron180 keyboard using the QMK build environment. It requires a correctly configured QMK build environment and the `make` command-line tool.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/smithrune/iron180/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake smithrune/iron180:default\n```\n\n----------------------------------------\n\nTITLE: Building firmware for mecxlabs/mp1 with QMK\nDESCRIPTION: This command builds the default firmware for the mecxlabs mp1 macropad. It assumes that the QMK build environment has already been set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mecxlabs/mp1/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake mecxlabs/mp1:default\n```\n\n----------------------------------------\n\nTITLE: Flashing the Debit Card Keyboard with Make\nDESCRIPTION: This command flashes the compiled firmware onto the Debit Card keyboard. It uses the QMK build environment and requires the keyboard to be in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/synthandkeys/the_debit_card/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake synthandkeys/the_debit_card:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Summer Breeze Rev1 Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Summer Breeze Rev1 keyboard using the QMK build environment. It assumes that the QMK build environment is already set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/afternoonlabs/summer_breeze/rev1/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake afternoonlabs/summer_breeze/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Building EVO70 Firmware\nDESCRIPTION: This command builds the default firmware for the EVO70 keyboard using the QMK build environment. It compiles the keyboard layout and generates a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/custommk/evo70/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake custommk/evo70:default\n```\n\n----------------------------------------\n\nTITLE: Flashing QMK Firmware to Frog Pad\nDESCRIPTION: This command flashes the built QMK firmware to the Frog Pad keyboard. It extends the build command with the `:flash` target, which triggers the flashing process using the appropriate bootloader.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wolf/frogpad/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake wolf/frogpad:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware to Orbweaver\nDESCRIPTION: This command builds and flashes the firmware to the handwired Orbweaver keyboard with the default keymap. It assumes the keyboard is connected and in a state ready to receive the firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/orbweaver/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake handwired/orbweaver:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building the Bacca70 Default Keymap\nDESCRIPTION: This snippet provides the command to build the default keymap for the Bacca70 keyboard within the QMK Firmware environment. It assumes the build environment has been set up according to the QMK documentation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/bacca70/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake bacca70:default\n```\n\n----------------------------------------\n\nTITLE: Compiling default tetromino firmware - Makefile\nDESCRIPTION: This command compiles the default firmware for the tetromino keyboard.  It uses the 'make' command with the keyboard and keymap specified. This is the standard method for building QMK firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/an_achronism/tetromino/README.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake tetromino:default\n```\n\n----------------------------------------\n\nTITLE: Software Backlight Driver Configuration (Make)\nDESCRIPTION: This snippet shows how to select the Software backlight driver in `rules.mk`. This driver emulates PWM in software, providing maximum hardware compatibility. It does not support breathing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/backlight.md#_snippet_5\n\nLANGUAGE: make\nCODE:\n```\nBACKLIGHT_DRIVER = software\n```\n\n----------------------------------------\n\nTITLE: Flashing Molecule Keyboard Firmware\nDESCRIPTION: Flashes the compiled firmware onto the Molecule keyboard using the `make` command with the 'flash' target. This requires the QMK build environment to be properly set up and the keyboard to be connected.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/molecule/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake molecule:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing moky67 Firmware\nDESCRIPTION: This command flashes the default firmware to the moky67 keyboard. It requires a QMK build environment and a connected keyboard. It outputs the flash process results, indicating success or failure.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/moky/moky67/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake moky/moky67:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for miniZone Keyboard (QMK)\nDESCRIPTION: This command is used to compile the QMK firmware for the miniZone keyboard with the default keymap. It assumes that the QMK build environment has been set up correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/takashicompany/minizone/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake takashicompany/minizone:default\n```\n\n----------------------------------------\n\nTITLE: Flashing H660s firmware with QMK\nDESCRIPTION: This command flashes the default firmware onto the H660s keyboard using the QMK build environment. It assumes that the keyboard is connected and in the correct bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/hineybush/h660s/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake hineybush/h660s:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building TKL30 Firmware with QMK\nDESCRIPTION: This snippet provides the command to build the default firmware for the TKL30 keyboard using the QMK build environment. It requires QMK build environment to be set up and uses the `make` command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wsk/tkl30/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake wsk/tkl30:default\n```\n\n----------------------------------------\n\nTITLE: Making the default PhysiX keymap\nDESCRIPTION: This command builds the default keymap for the PhysiX keyboard. It requires a properly configured QMK build environment. This will compile the firmware and prepare it for flashing to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/hineybush/physix/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake hineybush/physix:default\n```\n\n----------------------------------------\n\nTITLE: Compiling Default Firmware for Elongate Beta (QMK)\nDESCRIPTION: This command compiles the default layout firmware for the Acheron Elongate Beta keyboard using the QMK build environment. It requires the QMK build environment to be set up correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/acheron/elongate/beta/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake acheron/elongate/beta:default\n```\n\n----------------------------------------\n\nTITLE: Building WT65-G2 QMK Firmware\nDESCRIPTION: This command builds the default firmware for the wilba_tech WT65-G2 keyboard using the QMK build environment. It compiles the keyboard layout and keymap defined in the default configuration.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wilba_tech/wt65_g2/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake wilba_tech/wt65_g2:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Adam64 Firmware with QMK\nDESCRIPTION: This command builds and flashes the default firmware to the KBDCraft Adam64 keyboard. It requires a properly configured QMK build environment and a connected keyboard in a flashable state.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kbdcraft/adam64/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake kbdcraft/adam64:default:flash\n```\n\n----------------------------------------\n\nTITLE: Compiling the Default Keymap\nDESCRIPTION: This command compiles the default keymap for the KC60SE keyboard using the QMK build environment. It relies on the QMK firmware toolchain being properly set up as described in the linked documentation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kc60se/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake kc60se:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Planck THK keymap\nDESCRIPTION: This command flashes the 'thk' keymap onto the Planck THK keyboard. It requires the QMK build environment to be set up and a connected keyboard in flashing mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/planck/thk/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake planck/thk:thk:flash\n```\n\n----------------------------------------\n\nTITLE: Building Onekey Keyboard Firmware\nDESCRIPTION: This command builds the QMK firmware for the Onekey keyboard with the default keymap. It compiles the source code and generates a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/onekey/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake handwired/onekey:default\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for Proton C with QMK\nDESCRIPTION: This command builds the default firmware for theDora keyboard for the Proton C microcontroller using the QMK build environment. It assumes that the QMK build environment is already set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ckeys/thedora/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake ckeys/thedora:default\n```\n\n----------------------------------------\n\nTITLE: Flashing stickey4 Firmware with QMK\nDESCRIPTION: This command flashes the compiled firmware to the stickey4 keyboard using the QMK build environment. It assumes that the keyboard is in bootloader mode and ready to receive the new firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/dailycraft/stickey4/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake dailycraft/stickey4:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building zhou65 Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the zhou65 keyboard. It assumes the QMK build environment is properly set up. The output is the compiled firmware that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/yandrstudio/zhou65/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake yandrstudio/zhou65:default\n```\n\n----------------------------------------\n\nTITLE: Building split67 Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the split67 keyboard using the QMK build environment.  It requires the QMK build environment to be properly set up.  The expected output is a compiled firmware file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/split67/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake split67:default\n```\n\n----------------------------------------\n\nTITLE: Building Vector Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the Vector keyboard using the QMK build system. It compiles the keyboard layout and generates a firmware file that can be flashed onto the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cannonkeys/vector/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake cannonkeys/vector:default\n```\n\n----------------------------------------\n\nTITLE: Building M0116 USB Firmware with QMK\nDESCRIPTION: This code snippet provides the command to build the firmware for the M0116 USB keyboard using the QMK build environment. It assumes that the QMK build environment is already set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kb_elmo/m0116_usb/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake kb_elmo/m0116_usb:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Nyquist Firmware\nDESCRIPTION: This command builds and flashes the default firmware for the Nyquist Rev3 keyboard. It requires a properly configured QMK build environment and a connected keyboard in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keebio/nyquist/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake keebio/nyquist/rev3:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Southpaw Full Size Keyboard Firmware\nDESCRIPTION: This command is used to compile the firmware for the Southpaw Full Size keyboard using the QMK build environment. It specifies the keyboard layout (default). It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/switchplate/southpaw_fullsize/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake switchplate/southpaw_fullsize:default\n```\n\n----------------------------------------\n\nTITLE: Testing Gergo Firmware Build\nDESCRIPTION: This command builds the Gergo keyboard firmware with the 'germ' keymap. This allows you to test the build without flashing the firmware to the keyboard. It requires QMK to be installed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/gboards/gergo/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake gboards/gergo:germ\n```\n\n----------------------------------------\n\nTITLE: Fetching ChibiOS updates with git-svn\nDESCRIPTION: Fetches updates from the git-svn repository for ChibiOS.  The first fetch can take a long time, but subsequent updates are incremental.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/chibios_upgrade_instructions.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ngit svn fetch\n```\n\n----------------------------------------\n\nTITLE: Building THE60 Rev1 Firmware - QMK\nDESCRIPTION: This command builds the default firmware for the THE60 Rev1 keyboard using the QMK build environment. It assumes that the QMK build environment has been properly set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/lazydesigners/the60/readme.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmake lazydesigners/the60/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Flashing TMKL Keyboard Firmware\nDESCRIPTION: This command builds and flashes the default firmware for the TMKL keyboard. It requires the QMK build environment to be set up and a flashing tool to be configured. It uploads the compiled firmware to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechlovin/tmkl/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake mechlovin/tmkl:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Titan 65 Firmware\nDESCRIPTION: This command builds the default firmware for the Titan 65 keyboard. It assumes the QMK build environment is set up correctly. The output will be a firmware file ready to be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/phase_studio/titan65/hotswap/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake phase_studio/titan65:default\n```\n\n----------------------------------------\n\nTITLE: Making JJ4x4 Firmware - QMK\nDESCRIPTION: This command compiles the default firmware for the JJ4x4 keyboard using the QMK build environment. It requires a properly configured QMK build environment. It produces a .hex file suitable for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kprepublic/jj4x4/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake kprepublic/jj4x4:default\n```\n\n----------------------------------------\n\nTITLE: Enabling Audio on Pin C4 in QMK config.h\nDESCRIPTION: This code snippet enables audio output on pin C4 in QMK firmware. Deprecated. Use `#define AUDIO_PIN C4` instead. This setting is configured in the `config.h` file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/config_options.md#_snippet_15\n\nLANGUAGE: c\nCODE:\n```\n#define C4_AUDIO\n```\n\n----------------------------------------\n\nTITLE: Building MTB60 Hotswap Firmware\nDESCRIPTION: This command builds the default firmware for the MTB60 Hotswap Edition keyboard. It assumes that the QMK build environment has already been set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mtbkeys/mtb60/hotswap/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake mtbkeys/mtb60/hotswap:default\n```\n\n----------------------------------------\n\nTITLE: Flashing QMK Firmware to Ziyoulang K3\nDESCRIPTION: This command flashes the built QMK firmware to the Ziyoulang K3 keyboard. It uses the `make` command with the target `handwired/ziyoulang_k3_mod:default:flash`.  It requires the keyboard to be in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/ziyoulang_k3_mod/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake handwired/ziyoulang_k3_mod:default:flash\n```\n\n----------------------------------------\n\nTITLE: Defining Additional Alternate Keys in QMK (C)\nDESCRIPTION: This code snippet shows how to define additional \"Alternate Repeat\"-like keys in QMK by leveraging `get_last_keycode()` in macros. It defines two keys, `ALTREP2` and `ALTREP3`, and implements shortcuts for common English 5-gram letter patterns inspired by Stenography. It also shows how to ignore these keys in the `remember_last_key_user` function.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/repeat_key.md#_snippet_11\n\nLANGUAGE: c\nCODE:\n```\nenum custom_keycodes {\n    ALTREP2 = SAFE_RANGE,\n    ALTREP3,\n};\n\n// Use ALTREP2 and ALTREP3 in your layout...\n\nbool remember_last_key_user(uint16_t keycode, keyrecord_t* record,\n                            uint8_t* remembered_mods) {\n    switch (keycode) {\n        case ALTREP2:\n        case ALTREP3:\n            return false;  // Ignore ALTREP keys.\n    }\n\n    return true;  // Other keys can be repeated.\n}\n\nstatic void process_altrep2(uint16_t keycode, uint8_t mods) {\n    switch (keycode) {\n        case KC_A: SEND_STRING(/*a*/\"tion\"); break;\n        case KC_I: SEND_STRING(/*i*/\"tion\"); break;\n        case KC_S: SEND_STRING(/*s*/\"sion\"); break;\n        case KC_T: SEND_STRING(/*t*/\"heir\"); break;\n        case KC_W: SEND_STRING(/*w*/\"hich\"); break;\n    }\n}\n\nstatic void process_altrep3(uint16_t keycode, uint8_t mods) {\n    switch (keycode) {\n        case KC_A: SEND_STRING(/*a*/\"bout\"); break;\n        case KC_I: SEND_STRING(/*i*/\"nter\"); break;\n        case KC_S: SEND_STRING(/*s*/\"tate\"); break;\n        case KC_T: SEND_STRING(/*t*/\"here\"); break;\n        case KC_W: SEND_STRING(/*w*/\"ould\"); break;\n    }\n}\n\nbool process_record_user(uint16_t keycode, keyrecord_t* record) {\n    switch (keycode) {\n        case ALTREP2: \n            if (record->event.pressed) {\n                process_altrep2(get_last_keycode(), get_last_mods());\n            }\n            return false;\n\n        case ALTREP3:\n            if (record->event.pressed) {\n                process_altrep3(get_last_keycode(), get_last_mods());\n            }\n            return false;\n    }\n\n    return true;\n}\n```\n\n----------------------------------------\n\nTITLE: Layout Macro Configuration in `keyboard.json`\nDESCRIPTION: This JSON snippet demonstrates how to configure layout macros in the `keyboard.json` file. The `layouts` object defines the physical arrangement of keys and their position within the matrix. Each key is associated with a matrix row and column using the `matrix` property, and its physical location is specified using the `x` and `y` properties.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/porting_your_keyboard_to_qmk.md#_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n    \"layouts\": {\n        \"LAYOUT_ortho_4x4\": {\n            \"layout\": [\n                {\"matrix\": [0, 0], \"x\": 0, \"y\": 0},\n                {\"matrix\": [0, 1], \"x\": 1, \"y\": 0},\n                {\"matrix\": [0, 2], \"x\": 2, \"y\": 0},\n                {\"matrix\": [0, 3], \"x\": 3, \"y\": 0},\n                {\"matrix\": [1, 0], \"x\": 0, \"y\": 1},\n                {\"matrix\": [1, 1], \"x\": 1, \"y\": 1},\n                {\"matrix\": [1, 2], \"x\": 2, \"y\": 1},\n                {\"matrix\": [1, 3], \"x\": 3, \"y\": 1},\n                {\"matrix\": [2, 0], \"x\": 0, \"y\": 2},\n                {\"matrix\": [2, 1], \"x\": 1, \"y\": 2},\n                {\"matrix\": [2, 2], \"x\": 2, \"y\": 2},\n                {\"matrix\": [2, 3], \"x\": 3, \"y\": 2},\n                {\"matrix\": [3, 0], \"x\": 0, \"y\": 3},\n                {\"matrix\": [3, 1], \"x\": 1, \"y\": 3},\n                {\"matrix\": [3, 2], \"x\": 2, \"y\": 3},\n                {\"matrix\": [3, 3], \"x\": 3, \"y\": 3}\n            ]\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Building Skog TKL Firmware with QMK\nDESCRIPTION: This command builds the default keymap for the Skog TKL keyboard using the QMK build system.  It assumes that the QMK build environment is already set up. The resulting firmware can then be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/percent/skog/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake percent/skog:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware to TKC Portico68 v2 (QMK)\nDESCRIPTION: This command builds and flashes the default firmware to the TKC Portico68 v2 keyboard using QMK.  It requires a properly configured QMK build environment and a connected keyboard in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/tkc/portico68v2/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake tkc/portico68v2:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing SNOP60 Keyboard Firmware (QMK)\nDESCRIPTION: This command flashes the default firmware onto the SNOP60 keyboard using the QMK build environment. It requires the keyboard to be in bootloader mode, which is entered by pressing the reset button. Requires the QMK build environment to be set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/checkerboards/snop60/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake checkerboards/snop60:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Black E6.5 Firmware - QMK\nDESCRIPTION: This command flashes the built firmware onto the Black E6.5 keyboard.  It extends the `make` command with the `:flash` target. It assumes the keyboard is in a state where it can accept a firmware update (e.g., bootloader mode).\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/horrortroll/chinese_pcb/black_e65/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake horrortroll/chinese_pcb/black_e65:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Helios Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Helios keyboard using the QMK build environment. It requires the QMK build environment to be properly set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/wwa/helios/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake handwired/wwa/helios:default\n```\n\n----------------------------------------\n\nTITLE: Configuring Adjust Layer in QMK\nDESCRIPTION: This snippet demonstrates how to change the default 'adjust' layer for the Tri-Layer feature by defining `TRI_LAYER_ADJUST_LAYER` in the `config.h` file.  This allows the user to map the adjust layer to a different layer number. The default layer is 3.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/tri_layer.md#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n#define TRI_LAYER_ADJUST_LAYER 5\n```\n\n----------------------------------------\n\nTITLE: Flashing The Key with Default Firmware\nDESCRIPTION: This command flashes the Drop \"The Key\" macropad with the default firmware after it has been compiled. This command utilizes the QMK build environment. It assumes the device is in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/drop/thekey/v1/readme.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmake drop/thekey/v1:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Herringbone Keyboard Firmware with QMK\nDESCRIPTION: This command builds the firmware for the standard Herringbone keyboard using the default keymap in the QMK firmware environment.  It requires a correctly configured QMK build environment. The command will generate a .hex file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/rmi_kb/herringbone/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake ramonimbao/herringbone/v1:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Minerva LX Firmware - QMK\nDESCRIPTION: This command flashes the default firmware onto the Minerva LX keyboard. It requires the QMK build environment to be set up and a flashing tool compatible with the RP2040.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/archetype/minervalx/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake archetype/minervalx:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building IVY Keyboard Firmware - Makefile\nDESCRIPTION: This command builds the default firmware for the IVY keyboard (rev1) using the QMK build environment. It compiles the necessary source files and generates a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/maple_computing/ivy/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake maple_computing/ivy/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Building JK60 RGB Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the jaykeeb/jk60rgb keyboard. It requires QMK build environment to be set up. It outputs the firmware file which can then be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/jaykeeb/jk60rgb/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake jaykeeb/jk60rgb:default\n```\n\n----------------------------------------\n\nTITLE: Flashing MOTHWING Keyboard Firmware\nDESCRIPTION: This command builds and flashes the default firmware for the MOTHWING keyboard. It requires a configured QMK build environment and a connected MOTHWING keyboard in a flashable state.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mothwing/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake mothwing:default:flash\n```\n\n----------------------------------------\n\nTITLE: Making SMD Milk Keyboard with QMK\nDESCRIPTION: This command builds the default keymap for the smd_milk keyboard using the QMK firmware. It requires the QMK build environment to be set up beforehand. The resulting firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kingly_keys/smd_milk/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake kingly_keys/smd_milk:default\n```\n\n----------------------------------------\n\nTITLE: Updating QMK submodules\nDESCRIPTION: Updates the ChibiOS and ChibiOS-Contrib submodules within the QMK Firmware.  It assumes `$QMK_FIRMWARE` is set to the QMK Firmware directory. It checks out the develop branch, pulls changes, and then creates a new branch for the ChibiOS version bump.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/chibios_upgrade_instructions.md#_snippet_10\n\nLANGUAGE: Shell\nCODE:\n```\ncd $QMK_FIRMWARE\n```\n\nLANGUAGE: Shell\nCODE:\n```\ngit checkout develop\n```\n\nLANGUAGE: Shell\nCODE:\n```\ngit pull --ff-only\n```\n\nLANGUAGE: Shell\nCODE:\n```\ngit checkout -b chibios-version-bump\n```\n\nLANGUAGE: Shell\nCODE:\n```\ncd lib/chibios\n```\n\nLANGUAGE: Shell\nCODE:\n```\ngit fetch --all --tags --prune\n```\n\nLANGUAGE: Shell\nCODE:\n```\ngit checkout develop_YYYY_qN\n```\n\nLANGUAGE: Shell\nCODE:\n```\ncd ../chibios-contrib\n```\n\nLANGUAGE: Shell\nCODE:\n```\ngit fetch --all --tags --prune\n```\n\nLANGUAGE: Shell\nCODE:\n```\ngit checkout develop_YYYY_qN\n```\n\n----------------------------------------\n\nTITLE: Building PT-80 Firmware with Make\nDESCRIPTION: These commands demonstrate how to build the QMK firmware for the Prototypist PT-80 keyboard with different configurations using the `make` command. The configurations include default, VIA, and ANSI layouts.  Ensure that the QMK build environment is properly set up before executing these commands. The output will be a firmware file suitable for flashing to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/prototypist/pt80/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake prototypist/pt80:default\n```\n\nLANGUAGE: make\nCODE:\n```\nmake prototypist/pt80:via\n```\n\nLANGUAGE: make\nCODE:\n```\nmake prototypist/pt80:default_ansi\n```\n\n----------------------------------------\n\nTITLE: Building Gentleman65 Firmware - Make Command\nDESCRIPTION: This command builds the default firmware for the Gentleman65 keyboard. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/jkeys_design/gentleman65/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake jkeys_design/gentleman65:default\n```\n\n----------------------------------------\n\nTITLE: Building Firmware: Mode Tempo M60H_F (Makefile)\nDESCRIPTION: This command builds the default firmware for the Mode Tempo M60H_F keyboard using the QMK build environment. It compiles the source code and generates a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mode/m60h_f/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake mode/m60h_f:default\n```\n\n----------------------------------------\n\nTITLE: Making Default Keymap for Shiro Keyboard (QMK)\nDESCRIPTION: This command builds the default keymap for the Shiro keyboard within the QMK Firmware environment. It assumes that the build environment has already been set up. The command compiles the necessary files and generates the firmware that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/shiro/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake shiro:default\n```\n\n----------------------------------------\n\nTITLE: Flashing AMAG23 Default Firmware\nDESCRIPTION: This command builds and flashes the default firmware for the AMAG23 keyboard using the QMK build environment. It first compiles the firmware and then uploads it to the keyboard's microcontroller using a flashing tool. Requires a correctly configured QMK environment and a connected keyboard in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/amag23/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake amag23:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing QMK Firmware to Durgod Hades ANSI\nDESCRIPTION: This command builds and flashes the QMK firmware for the Durgod Hades 65% ANSI keyboard with the default keymap. It builds the firmware first and then attempts to flash it to the keyboard using the appropriate flashing tool, assuming the keyboard is in the correct flashing mode. It requires a properly configured QMK build environment and the necessary flashing tools.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/durgod/dgk6x/hades_ansi/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake durgod/dgk6x/hades_ansi:default:flash\n```\n\n----------------------------------------\n\nTITLE: Enabling Audio on Pin C5 in QMK config.h\nDESCRIPTION: This code snippet enables audio output on pin C5 in QMK firmware. Deprecated. Use `#define AUDIO_PIN C5` instead. This setting is configured in the `config.h` file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/config_options.md#_snippet_16\n\nLANGUAGE: c\nCODE:\n```\n#define C5_AUDIO\n```\n\n----------------------------------------\n\nTITLE: Building Keychron Q10 Firmware\nDESCRIPTION: This command builds the firmware for the Keychron Q10 keyboard using the default configuration. It utilizes the QMK build environment and assumes that the environment is properly set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keychron/q10/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake keychron/q10/ansi_encoder:default\n```\n\n----------------------------------------\n\nTITLE: Building Sinanju Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Sinanju keyboard using QMK.  It assumes that the QMK build environment has already been set up.  The output is the compiled firmware ready to be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/fjlabs/sinanju/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake fjlabs/sinanju:default\n```\n\n----------------------------------------\n\nTITLE: Building pi40 Firmware\nDESCRIPTION: This command builds the default firmware for the pi40 keyboard using the QMK build environment. The command specifies the keyboard layout (1upkeyboards/pi40) and the keymap (default).\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/1upkeyboards/pi40/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake 1upkeyboards/pi40:default\n```\n\n----------------------------------------\n\nTITLE: Flashing ErgoDox EZ Shine Firmware with Make\nDESCRIPTION: This command builds and flashes the default firmware to the ErgoDox EZ Shine keyboard.  The QMK build environment must be correctly configured.  This assumes the `default` keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ergodox_ez/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake ergodox_ez/shine:default:flash\n```\n\n----------------------------------------\n\nTITLE: Compile Firmware for Alpha Release (SharkPCB QMK)\nDESCRIPTION: This command compiles the default layout for the Alpha release of the SharkPCB firmware using the QMK build environment. It requires QMK to be properly set up and assumes the user is in the QMK firmware directory. The output is a `.bin` file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/acheron/shark/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake acheron/shark/alpha:default\n```\n\n----------------------------------------\n\nTITLE: Building the TG4x default keymap with QMK\nDESCRIPTION: This command builds the default keymap for the TG4x keyboard using the QMK firmware build environment. It assumes that the QMK build environment has already been set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/tg4x/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake tg4x:default\n```\n\n----------------------------------------\n\nTITLE: Building Saber1800 Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the Saber1800 keyboard. It compiles the necessary code and creates a firmware image that can be flashed onto the device. Requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechlovin/zed1800/saber/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake mechlovin/zed1800/saber:default\n```\n\n----------------------------------------\n\nTITLE: Building HS68 Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the HS68 keyboard using the QMK build environment. It assumes that the QMK build environment has already been set up according to the QMK documentation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ep/comsn/hs68/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake ep/comsn/hs68:default\n```\n\n----------------------------------------\n\nTITLE: Building Periboard-512 Firmware\nDESCRIPTION: This command compiles the QMK firmware for the Periboard-512 keyboard with the default keymap.  It requires the QMK build environment to be set up correctly. The output is a .hex file that can be flashed onto the Teensy++ 2.0.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/converter/periboard_512/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake converter/periboard_512:default\n```\n\n----------------------------------------\n\nTITLE: Building Jelly Evolv Solder Firmware (QMK)\nDESCRIPTION: This command builds the default QMK firmware for the Owlab Jelly Evolv soldered PCB keyboard. It assumes that the QMK build environment is already set up. The output will be a .hex or .bin file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/owlab/jelly_evolv/solder/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake owlab/jelly_evolv/solder:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Uni660 Rev2 ISO Firmware with QMK\nDESCRIPTION: This command builds and flashes the default firmware for the Uni660 Rev2 ISO keyboard using the QMK build environment and the appropriate flashing tool. It compiles the source code and uploads the generated firmware file to the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/sirius/uni660/rev2/iso/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake sirius/uni660/rev2/iso:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing the DeskDaily Jisoo Keyboard Firmware\nDESCRIPTION: This command builds and flashes the default firmware to the DeskDaily Jisoo keyboard. It requires QMK build environment setup and a connected keyboard in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/nightly_boards/jisoo/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake nightly_boards/jisoo:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing the RART 75 Keyboard Firmware\nDESCRIPTION: This command flashes the compiled firmware to the RART 75 hotswap keyboard. It requires the QMK build environment to be set up and the keyboard to be in a flashable state. Successful execution results in the firmware being loaded onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/rart/rart75hs/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake rart/rart75hs:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Kastenwagen 48 Firmware\nDESCRIPTION: This command compiles the default keymap for the Kastenwagen 48 keyboard using the QMK build environment. It requires a properly configured QMK build environment. The output is the firmware file ready to be flashed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/nopunin10did/kastenwagen48/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake nopunin10did/kastenwagen48:default\n```\n\n----------------------------------------\n\nTITLE: Building Keyboard Firmware - QMK\nDESCRIPTION: This command compiles the QMK firmware for the Boardrun Bizarre keyboard with the default keymap. It prepares the firmware for flashing onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/boardrun/bizarre/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake boardrun/bizarre:default\n```\n\n----------------------------------------\n\nTITLE: Flashing CK60 Keyboard Firmware\nDESCRIPTION: This command flashes the built firmware onto the CK60 keyboard using the QMK build environment. It assumes the keyboard is connected and in a state ready to receive the firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/senselessclay/ck60/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake senselessclay/ck60:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware to NoodlePad v.1 with QMK\nDESCRIPTION: This command flashes the compiled QMK firmware to the NoodlePad v.1 keyboard using the default keymap. It requires a correctly configured QMK build environment and the keyboard to be in the correct flashing mode. It programs the microcontroller on the NoodlePad.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/themadnoodle/noodlepad/v1/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nqmk flash -kb themadnoodle/noodlepad/v1 -km default\n```\n\n----------------------------------------\n\nTITLE: Building TKC California Firmware\nDESCRIPTION: This command builds the default keymap for the TKC California keyboard using the QMK build environment.  It compiles the firmware and prepares it for flashing. Requires a correctly set up QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/tkc/california/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake tkc/california:default\n```\n\n----------------------------------------\n\nTITLE: Building Prime_L Firmware with QMK (Make)\nDESCRIPTION: These commands are used to compile the QMK firmware for different versions and configurations of the Prime_L keyboard. The `make` command initiates the build process using the specified keyboard, version, and keymap. These commands require a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/primekb/prime_l/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake primekb/prime_l/v1:default\n```\n\nLANGUAGE: make\nCODE:\n```\nmake primekb/prime_l/v2:default\n```\n\nLANGUAGE: make\nCODE:\n```\nmake primekb/prime_l/v1:via\n```\n\nLANGUAGE: make\nCODE:\n```\nmake primekb/prime_l/v2:via\n```\n\n----------------------------------------\n\nTITLE: Building YMDK Melody96 Hotswap Firmware\nDESCRIPTION: This command builds the default firmware for the YMDK Melody96 Hotswap keyboard. It requires the QMK build environment to be set up. The output is a .hex file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ymdk/melody96/hotswap/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake ymdk/melody96/hotswap:default\n```\n\n----------------------------------------\n\nTITLE: Building Keebwerk Mega Firmware (ANSI) - Make\nDESCRIPTION: This command builds the Keebwerk Mega keyboard firmware with the ANSI layout using the VIA keymap.  It requires a properly configured QMK build environment. The resulting firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keebwerk/mega/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake keebwerk/mega/ansi:via\n```\n\n----------------------------------------\n\nTITLE: Flashing the MadJax Macropad Firmware\nDESCRIPTION: This command builds and flashes the default firmware for the MadJax Macropad to the connected device.  It requires the QMK build environment and appropriate flashing tools to be set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/madjax_macropad/readme.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nmake madjax_macropad:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building MiniAxe Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the MiniAxe keyboard using the QMK build environment. It requires QMK to be set up correctly. The output will be a .hex file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kagizaraya/miniaxe/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake kagizaraya/miniaxe:default\n```\n\n----------------------------------------\n\nTITLE: Building Little Foot Keyboard Firmware (QMK)\nDESCRIPTION: This command builds the QMK firmware for the Little Foot keyboard with the default keymap. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kingly_keys/little_foot/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake kingly_keys/little_foot:default\n```\n\n----------------------------------------\n\nTITLE: Making default firmware for Pizza Slice65\nDESCRIPTION: This command builds the default firmware for the Pizza Keyboards Slice65 keyboard using the QMK build environment. It assumes the build environment has been set up correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/pizzakeyboards/slice65/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake pizzakeyboards/slice65:default\n```\n\n----------------------------------------\n\nTITLE: Building QC60 Firmware\nDESCRIPTION: This command builds the default firmware for the QC60 keyboard using the QMK build environment. It compiles the source code and generates a firmware image ready to be flashed onto the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/qc60/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/qc60/proto:default\n```\n\n----------------------------------------\n\nTITLE: Flashing CMK11 Firmware\nDESCRIPTION: This command flashes the default firmware onto the CMK11 keyboard using the QMK build environment. It programs the compiled firmware image onto the keyboard's microcontroller.  It requires a properly configured QMK build environment and the necessary flashing tools.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/custommk/cmk11/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake custommk/cmk11:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing JK01 Firmware (Makefile)\nDESCRIPTION: This command builds and flashes the default keymap for the JK01 keyboard. It requires the QMK build environment to be properly set up and the necessary flashing tools to be installed. The command combines the build and flash steps into a single command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/jukaie/jk01/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake jukaie/jk01:default:flash\n```\n\n----------------------------------------\n\nTITLE: Compiling Yasui Keyboard Firmware with QMK\nDESCRIPTION: This command compiles the QMK firmware for the Yasui keyboard with the default keymap.  It utilizes the `qmk compile` command, specifying the keyboard and keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/rainkeebs/yasui/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nqmk compile -kb rainkeebs/yasui -km default\n```\n\n----------------------------------------\n\nTITLE: Building QMK Firmware for Z-150 BH PCB\nDESCRIPTION: This command builds the QMK firmware for the Z-150 BH PCB using the default keymap. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/viktus/z150_bh/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake viktus/z150_bh:default\n```\n\n----------------------------------------\n\nTITLE: Flashing RM Numpad default keymap\nDESCRIPTION: This command flashes the built firmware onto the RM Keebs RM Numpad. It requires the QMK build environment to be set up and the keyboard to be in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/rmkeebs/rm_numpad/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake rmkeebs/rm_numpad:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Brick Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the Brick keyboard. It uses the QMK build environment to compile the keymap located in the `pauperboards/brick` directory with the `default` configuration.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/pauperboards/brick/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake pauperboards/brick:default\n```\n\n----------------------------------------\n\nTITLE: Building ERA65 Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the ERA65 keyboard using the QMK build environment.  It requires the QMK build environment to be set up correctly.  The output will be a .hex or .bin file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/era/era65/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake era/era65:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Alisaie Firmware with QMK\nDESCRIPTION: This command builds and flashes the default firmware to the Alisaie keyboard using QMK. It requires the QMK build environment and a connected Alisaie keyboard in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/automata02/alisaie/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake automata02/alisaie:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Unix60 Firmware with QMK\nDESCRIPTION: This command demonstrates how to build the default firmware for the Unix60 keyboard using the QMK build environment. It assumes that the QMK build environment has already been set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/fr4/unix60/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake unix60:default\n```\n\n----------------------------------------\n\nTITLE: Building SquishyFRL Firmware with QMK\nDESCRIPTION: This command compiles the SquishyFRL keyboard firmware using the QMK build environment. It specifies the keyboard layout as 'via'.  This command needs to be run within the QMK firmware directory.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/rmi_kb/squishyfrl/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake rmi_kb/squishyfrl:via\n```\n\n----------------------------------------\n\nTITLE: Flashing Yuri Keyboard Firmware with QMK\nDESCRIPTION: This command builds and flashes the default keymap for the Yuri keyboard using the QMK firmware. It assumes the QMK build environment is set up and the keyboard is connected in a flashable state. The command combines the build and flash steps into one.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ocean/yuri/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake ocean/yuri:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Mesa TKL Firmware\nDESCRIPTION: This command builds the default firmware for the Mesa TKL keyboard. It uses the `make` command with the target `mesa/mesa_tkl:default`.  The build environment must be set up correctly before running this command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mesa/mesa_tkl/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake mesa/mesa_tkl:default\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for Uni660 Rev1\nDESCRIPTION: This command builds the default firmware for the Sirius Uni660 Rev1 keyboard. It requires a correctly configured QMK build environment.  The resulting firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/sirius/uni660/rev1/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake sirius/uni660/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Building SteamVan Firmware with QMK\nDESCRIPTION: This command builds the QMK firmware for the SteamVan rev1 keyboard with the default keymap. It requires a properly configured QMK build environment. Ensure that QMK is set up according to the official documentation before running this command. The resulting firmware can then be flashed to the SteamVan keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/steamvan/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/steamvan/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Keyboard Firmware\nDESCRIPTION: This command is used to flash the built firmware to the Unextended Standard PCB. It utilizes the `make` command with the keyboard name, keymap, and the `flash` target specified.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/4pplet/unextended_std/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake 4pplet/unextended_std/rev_a:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building GH60 Rev C Firmware\nDESCRIPTION: This command is used to build the default firmware for the GH60 Rev C keyboard. It assumes that the QMK build environment has been set up correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/gh60/revc/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake gh60/revc:default\n```\n\n----------------------------------------\n\nTITLE: Building Pico Keyboard Firmware with Make\nDESCRIPTION: This command is used to build the default firmware for the Pico keyboard with 65 keys. It leverages the QMK build environment and requires the environment to be set up beforehand. The command specifies the keyboard layout and keymap to build.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kumaokobo/pico/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake kumaokobo/pico/65keys:default\n```\n\n----------------------------------------\n\nTITLE: Flashing firmware to keyten/kt60_mu with QMK\nDESCRIPTION: This command flashes the default firmware to the keyten/kt60_mu keyboard using the QMK build environment. It requires the keyboard to be in bootloader mode. The command depends on the `dfu-util` or other flashing tools being correctly configured within the QMK environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keyten/kt60_mu/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake keyten/kt60_mu:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building QMK Firmware for WT60-B\nDESCRIPTION: This command builds the QMK firmware for the wilba_tech WT60-B keyboard with the default keymap. It assumes that the QMK build environment has already been set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wilba_tech/wt60_b/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake wilba_tech/wt60_b:default\n```\n\n----------------------------------------\n\nTITLE: Make command for Stowaway keyboard\nDESCRIPTION: This command compiles the firmware for the Stowaway keyboard using the QMK build environment. It targets the palm_usb converter with the stowaway keyboard definition and the default keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/converter/palm_usb/stowaway/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake converter/palm_usb/stowaway:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Nascent Keyboard Firmware - QMK\nDESCRIPTION: This command compiles and flashes the QMK firmware for the Nascent keyboard with the default keymap.  It requires a configured QMK build environment and a connected keyboard in a flashable state.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/studiokestra/nascent/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake studiokestra/nascent:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Puck Firmware with QMK Make\nDESCRIPTION: This snippet shows how to build the default firmware for the Puck macropad using the QMK build environment. It assumes that the QMK build environment is already set up and configured.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/puck/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake puck:default\n```\n\n----------------------------------------\n\nTITLE: Flashing QMK Firmware to GMMK PRO (ISO)\nDESCRIPTION: This command builds and flashes the default QMK firmware for the GMMK PRO (ISO) keyboard.  It requires the QMK build environment and a configured flashing tool.  The keyboard must be in bootloader mode before running this command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/gmmk/pro/rev2/iso/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake gmmk/pro/rev2/iso:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Ogre Ergo Firmware (QMK)\nDESCRIPTION: This snippet shows the command to build the default firmware for the single-piece Ogre Ergo keyboard using the QMK build environment. It assumes that the QMK build environment has already been set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ogre/ergo_single/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake ogre/ergo_single:default\n```\n\n----------------------------------------\n\nTITLE: Flashing stoutgat v2 keyboard with QMK\nDESCRIPTION: This command is used to flash the stoutgat v2 keyboard with the default keymap using QMK Firmware. It assumes that the QMK build environment is already set up. The `-kb` flag specifies the keyboard and the `-km` flag specifies the keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/tkw/stoutgat/v2/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nqmk flash -kb tkw/stoutgat/v2 -km default\n```\n\n----------------------------------------\n\nTITLE: Flashing AkemiPad Firmware (QMK)\nDESCRIPTION: This command builds and flashes the default firmware for the AkemiPad keyboard using the QMK build environment. It requires the QMK build environment to be properly configured and the necessary tools for flashing to be installed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/adpenrose/akemipad/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake adpenrose/akemipad:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Unicorn Keyboard Firmware\nDESCRIPTION: This command flashes the default firmware to the Unicorn keyboard. It assumes the keyboard is in bootloader mode and the QMK build environment is set up correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keyprez/unicorn/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake keyprez/unicorns:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Satisfaction75 Rev2 Firmware\nDESCRIPTION: This command flashes the compiled firmware onto the Satisfaction75 Revision 2 keyboard. It relies on the QMK make system and the connected keyboard being in bootloader mode to upload the firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cannonkeys/satisfaction75/rev2/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake cannonkeys/satisfaction75/rev2:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Baion 808 Firmware with QMK (CLI)\nDESCRIPTION: This command provides an alternative method for flashing the firmware to the Baion 808 keyboard using the QMK command-line interface. It requires specifying the keymap and assumes the keyboard is in a flashable state.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/baion_808/readme.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmake baion_808:<keymap>:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Right Hand Firmware with EE_HANDS\nDESCRIPTION: This command builds and flashes the QMK firmware to the right-hand side of the alt34 keyboard using the DFU bootloader and enables EE_HANDS mode. It updates the EEPROM storage. Ensure the board is in bootloader mode. Replace `alt34/rev1` with the correct revision if needed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/alt34/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake alt34/rev1:default:dfu-split-right\n```\n\n----------------------------------------\n\nTITLE: Building DOKSIN Firmware\nDESCRIPTION: This command builds the default firmware for the DOKSIN keyboard using the QMK build environment. It utilizes the `make` command with specific target `millet/doksin:default` to compile the keyboard firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/millet/doksin/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake millet/doksin:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Meow65 Keyboard Firmware\nDESCRIPTION: This command flashes the compiled firmware to the Meow65 keyboard. It uses the QMK build environment and requires the keyboard to be in a flashable state. The `default` keymap is used in this example.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/eason/meow65/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake eason/meow65:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building KBD67MKIIRGBV4 Firmware - Make Command\nDESCRIPTION: This command is used to build the default firmware for the KBD67MKIIRGBV4 keyboard using the QMK build environment. It requires a properly configured QMK build environment to be set up beforehand.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kbdfans/kbd67/mkiirgb/v4/readme.md#_snippet_0\n\nLANGUAGE: Make\nCODE:\n```\nmake kbdfans/kbd67/mkiirgb/v4:default\n```\n\n----------------------------------------\n\nTITLE: Setting Global Current Control in config.h\nDESCRIPTION: This snippet demonstrates how to set the global current control value for the IS31FL3737 driver by defining `IS31FL3737_GLOBAL_CURRENT` in `config.h`. The default value is 0xFF (maximum).\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/is31fl3737.md#_snippet_3\n\nLANGUAGE: c\nCODE:\n```\n#define IS31FL3737_GLOBAL_CURRENT 0xFF\n```\n\n----------------------------------------\n\nTITLE: Flashing the M60 Split Keyboard - Make Command\nDESCRIPTION: This command is used to flash the built firmware to the M60 split keyboard. It specifies the keyboard, layout, and revision to flash. The keyboard needs to be in flashing mode to execute this command successfully.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mlego/m60_split/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake mlego/m60_split/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Building BAHRNOB65 Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the BAHRNOB65 keyboard.  It uses the `make` command within the QMK Firmware environment to compile the keyboard's configuration.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kalakos/bahrnob/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake kalakos/bahrnob65:default\n```\n\n----------------------------------------\n\nTITLE: Building Thirty Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the Thirty keyboard using the QMK build environment. It compiles the keyboard's keymap and other configurations into a flashable firmware image.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/deng/thirty/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake deng/thirty:default\n```\n\n----------------------------------------\n\nTITLE: Building Silakka54 Firmware with Make\nDESCRIPTION: This command builds the default firmware for the Silakka54 keyboard using the QMK build environment.  It compiles the keyboard's layout and configuration files into a firmware image that can be flashed onto the device.  The command requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/silakka54/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake silakka54:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Yee-Haw Firmware with QMK\nDESCRIPTION: This command flashes the compiled firmware to the Yee-Haw keyboard using the QMK command-line interface. It requires the QMK build environment to be set up and the keyboard to be connected.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/yeehaw/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nqmk flash -kb yeehaw -km default\n```\n\n----------------------------------------\n\nTITLE: Compiling Mini M firmware with default keymap - QMK\nDESCRIPTION: This command compiles the QMK firmware for the Unicomp Mini M keyboard using the default keymap. It assumes that the QMK build environment is already set up and that the necessary keyboard and keymap files exist within the QMK firmware directory structure.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/unicomp_mini_m/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ qmk compile -kb unicomp/mini_m -km default\n```\n\n----------------------------------------\n\nTITLE: Building fm2u Keyboard Firmware with Make\nDESCRIPTION: This command compiles the firmware for the fm2u macropad with the default keymap. It assumes that the QMK build environment is correctly set up and configured.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/botanicalkeyboards/fm2u/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake botanicalkeyboards/fm2u:default\n```\n\n----------------------------------------\n\nTITLE: Building ODIN V2 Firmware\nDESCRIPTION: This command builds the default firmware for the ODIN V2 keyboard. It requires the QMK build environment to be set up correctly. The output is the compiled firmware ready to be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kbdfans/odin/v2/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake kbdfans/odin/v2:default\n```\n\n----------------------------------------\n\nTITLE: Building kuku65 QMK Firmware\nDESCRIPTION: This command is used to build the default firmware for the kuku65 keyboard. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wolf/kuku65/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake wolf/kuku65:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Angel Keyboard Firmware\nDESCRIPTION: This command flashes the compiled firmware onto the Angel keyboard.  It uses the QMK build environment and assumes that the keyboard is connected and in the correct bootloader mode for flashing. Requires the build step to be completed first.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/angel/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/angel:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Scotto36 Firmware with Make\nDESCRIPTION: This command flashes the default firmware to the Scotto36 keyboard using the QMK build environment. It requires a compatible bootloader on the keyboard and assumes the user has already set up their build environment according to the QMK documentation. The target `flash` is dependent on the specific bootloader and microcontroller used.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/scottokeebs/scotto36/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/scottokeebs/scotto36:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Helpo Firmware\nDESCRIPTION: This command compiles and flashes the QMK firmware for the Helpo macropad with the default keymap. It requires the QMK build environment to be configured correctly and the appropriate flashing tools to be installed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/axolstudio/helpo/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake axolstudio/helpo:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for Shapeshifter 4060\nDESCRIPTION: Builds the default firmware for the Shapeshifter 4060 keyboard. This command compiles the keyboard's firmware based on the default configuration.  It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/shapeshifter4060/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake shapeshifter4060:default\n```\n\n----------------------------------------\n\nTITLE: Building Footy Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the Footy keyboard. It requires the QMK build environment to be set up correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/footy/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake handwired/footy:default\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for GKB-M16 in QMK\nDESCRIPTION: This command builds the default firmware for the GKB-M16 macro pad within the QMK Firmware environment. It requires a properly configured QMK build environment and uses the gkeyboard/gkb_m16:default configuration.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/gkeyboard/gkb_m16/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake gkeyboard/gkb_m16:default\n```\n\n----------------------------------------\n\nTITLE: Building BM16S Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the kprepublic/bm16s keyboard within the QMK firmware environment. It assumes that the build environment has already been set up according to the QMK documentation. It outputs a firmware file that can be flashed to the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kprepublic/bm16s/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake kprepublic/bm16s:default\n```\n\n----------------------------------------\n\nTITLE: Building CMD60 keyboard firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the CMD60 handwired keyboard using the QMK firmware build environment.  It assumes that the QMK build environment has already been set up, as described in the linked documentation. The output is a firmware file that can be flashed onto the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/cmd60/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake handwired/cmd60:default\n```\n\n----------------------------------------\n\nTITLE: Building QMK Firmware for Singa Kohaku R2\nDESCRIPTION: This command builds the default QMK firmware for the Singa Kohaku R2 keyboard. It assumes that the QMK build environment has been set up. The output will be a .hex or .bin file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/zeix/singa/kohaku/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake zeix/singa/kohaku:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Recore v3 Firmware with Make\nDESCRIPTION: This command flashes the built firmware onto the Recore v3 keyboard. It requires the QMK build environment and a connected keyboard in a flashable state.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/pmk/recore/v3/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake pmk/recore/v3:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing KB16-01 Firmware using QMK CLI\nDESCRIPTION: This command flashes the default firmware to the KB16-01 macropad using the `qmk flash` command. It requires the QMK CLI to be installed and configured and a connected device in bootloader mode.  It assumes the bootloader is already active on the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/doio/kb16/rev1/readme.md#_snippet_3\n\nLANGUAGE: QMK CLI\nCODE:\n```\n`qmk flash -kb doio/kb16/rev1 -km default`\n```\n\n----------------------------------------\n\nTITLE: Flashing the BIG DILL EXTENDED keyboard firmware\nDESCRIPTION: This command flashes the compiled firmware onto the BIG DILL EXTENDED keyboard. It requires a compatible flashing tool configured in the QMK environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechwild/bde/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake mechwild/bde:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Prime_E Firmware (QMK)\nDESCRIPTION: This command compiles the default keymap for the Prime_E RGB keyboard using the QMK build environment. It assumes that the QMK build environment has already been set up according to the QMK documentation. The output is a firmware file ready to be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/primekb/prime_e/rgb/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake primekb/prime_e/rgb:default\n```\n\n----------------------------------------\n\nTITLE: Building BM80HSRGB Firmware - Make Command\nDESCRIPTION: This command compiles the default firmware for the BM80HSRGB keyboard. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kprepublic/bm80hsrgb/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake kprepublic/bm80hsrgb:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Scotto61 Firmware (QMK)\nDESCRIPTION: This command compiles and flashes the default firmware for the Scotto61 keyboard to the connected device. It depends on the QMK build environment being configured and the keyboard being in a state where it can accept the flashed firmware. It combines the compilation and flashing steps into one.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/scottokeebs/scotto61/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/scottokeebs/scotto61:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for 108key_trackpoint with QMK\nDESCRIPTION: This command builds the default firmware for the handwired/108key_trackpoint keyboard using the QMK build environment. It assumes that the QMK build environment has been properly set up. It produces a .hex or .bin file that can be flashed to the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/108key_trackpoint/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake handwired/108key_trackpoint:default\n```\n\n----------------------------------------\n\nTITLE: Building KapCave Arya Firmware with Make\nDESCRIPTION: This command builds the default keymap for the KapCave Arya keyboard using the QMK build environment. It compiles the firmware, ready to be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kapcave/arya/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake kapcave/arya:default\n```\n\n----------------------------------------\n\nTITLE: Building BunnyGirl65 Firmware\nDESCRIPTION: This command builds the default firmware for the BunnyGirl65 keyboard.  It assumes that the build environment has already been set up according to the QMK documentation. The output will be a .hex file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/sawnsprojects/bunnygirl65/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake sawnsprojects/bunnygirl65:default\n```\n\n----------------------------------------\n\nTITLE: Enabling RGB Backlight\nDESCRIPTION: This snippet demonstrates how to enable RGB backlighting for the Helix keyboard.  By setting `LED_BACK_ENABLE` to `yes` in the `rules.mk` file, the WS2812 RGB underlight feature is activated.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/helix/rev2/keymaps/default/readme_jp.md#_snippet_1\n\nLANGUAGE: makefile\nCODE:\n```\nLED_BACK_ENABLE = yes        # LED backlight (Enable WS2812 RGB underlight.)\n```\n\n----------------------------------------\n\nTITLE: Building Zoom75 Firmware with QMK\nDESCRIPTION: This command builds the QMK firmware for the Zoom75 keyboard with the default keymap. It requires QMK build environment to be properly set up. The command compiles the firmware and generates a .hex or .bin file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/meletrix/zoom75/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake meletrix/zoom75:default\n```\n\n----------------------------------------\n\nTITLE: Building angel17 Keyboard Firmware\nDESCRIPTION: This snippet shows how to build the default firmware for the angel17 keyboard using the QMK build environment. It assumes that the QMK build environment is already set up and configured correctly. The command compiles the firmware and prepares it for flashing onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kakunpc/angel17/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake kakunpc/angel17/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Building KBD67 Mk.II RGB Firmware (Arm)\nDESCRIPTION: This command builds the QMK firmware for the KBD67 Mk.II RGB keyboard, version 1, which utilizes an Arm-based STM32F303 microcontroller and an IS31FL3731 RGB LED driver. Ensure that the QMK build environment is properly set up before executing this command. The compiled firmware will be placed in the QMK firmware directory.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kbdfans/kbd67/mkiirgb/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake kbdfans/kbd67/mkiirgb/v1:default # Arm (STM32F303+IS31FL3731)\n```\n\n----------------------------------------\n\nTITLE: Flashing Undead 60M Keyboard Firmware\nDESCRIPTION: This command flashes the QMK firmware onto the Undead 60M keyboard using the default keymap. It builds the firmware first and then initiates the flashing process. Ensure the keyboard is in flashing mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechanickeys/undead60m/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake mechanickeys/undead60m:default:flash\n```\n\n----------------------------------------\n\nTITLE: Enabling Rune RGBs - C\nDESCRIPTION: This code snippet shows how to enable the \"Rune RGBs\" option by uncommenting the `#define RUNE_RGBS` line in the `config.h` file. This limits the RGB lighting to only the LEDs under the SnR rune logo on the 165R2 case.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/smithrune/iron165r2/readme.md#_snippet_2\n\nLANGUAGE: C\nCODE:\n```\n#define RUNE_RGBS\n```\n\n----------------------------------------\n\nTITLE: Building rb1 Keyboard Firmware\nDESCRIPTION: This command builds the default keymap for the rb1 keyboard. It uses the QMK build environment to compile the firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ryanbaekr/rb1/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake ryanbaekr/rb1:default\n```\n\n----------------------------------------\n\nTITLE: Flashing the DecenTKL Numpad Firmware\nDESCRIPTION: This command flashes the built firmware onto the DecenTKL Numpad.  It requires that the keyboard is in bootloader mode or is otherwise accessible for flashing. The 'default' specifies the keymap to use.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/decent/numpad/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake decent/numpad:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Keychron Q11 Firmware (ANSI Encoder)\nDESCRIPTION: This command builds the QMK firmware for the Keychron Q11 keyboard with the ANSI encoder layout and the default keymap.  It requires the QMK build environment to be properly set up.  The output will be a .hex or .bin file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keychron/q11/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake keychron/q11/ansi_encoder:default\n```\n\n----------------------------------------\n\nTITLE: Building IBE60 Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the IBE60 keyboard using the QMK build environment. It assumes that the QMK build environment is properly set up. The command compiles the firmware for the specified keyboard and keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/4pplet/ibe60/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake 4pplet/ibe60:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Kousa TKL Firmware\nDESCRIPTION: This command flashes the default firmware onto the Kousa TKL keyboard.  It assumes the keyboard is in bootloader mode and uses the appropriate QMK tools to upload the compiled .hex file.  Successful flashing updates the keyboard's functionality based on the defined keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kradoindustries/kousa/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake kradoindustries/kousa:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Stella Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the Stella keyboard. It assumes that the QMK build environment has already been set up. The resulting firmware can then be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/hnahkb/stella/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake hnahkb/stella:default\n```\n\n----------------------------------------\n\nTITLE: Flashing firmware for dosa40rgb keyboard\nDESCRIPTION: This command is used to flash the compiled firmware onto the dosa40rgb keyboard. It requires a correctly set up QMK build environment and a connected keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/dtisaac/dosa40rgb/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake dtisaac/dosa40rgb:default:flash\n```\n\n----------------------------------------\n\nTITLE: Compiling Keyboard Firmware with QMK\nDESCRIPTION: This command compiles the keyboard firmware for the specified keyboard (ez_maker/directpins/teensy_lc) and keymap (default) using the QMK build environment. It requires a properly configured build environment as detailed in the QMK documentation. The output is a firmware file ready to be flashed to the microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ez_maker/directpins/teensy_lc/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nqmk compile -kb ez_maker/directpins/teensy_lc -km default\n```\n\n----------------------------------------\n\nTITLE: Building keyboard firmware with make\nDESCRIPTION: This command builds the firmware for the frobiac/hypernano keyboard. It requires a properly configured QMK build environment. The command compiles the keyboard's keymap and core QMK code into a firmware image.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/frobiac/hypernano/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake frobiac/hypernano\n```\n\n----------------------------------------\n\nTITLE: Building Halberd Firmware (Makefile)\nDESCRIPTION: This command builds the default firmware for the Halberd keyboard using the QMK build environment. It specifies the keyboard layout (kagizaraya/halberd), the keymap (default), and the flashing method (dfu).\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kagizaraya/halberd/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake kagizaraya/halberd:default:dfu\n```\n\n----------------------------------------\n\nTITLE: Building Zed65 QMK Firmware\nDESCRIPTION: This command builds the QMK firmware for the mechlovin/zed65/rev1 keyboard.  It requires a properly configured QMK build environment.  The output will be a .hex or .bin file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechlovin/zed65/rev1/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake mechlovin/zed65/rev1\n```\n\n----------------------------------------\n\nTITLE: Building the keymap\nDESCRIPTION: This command builds the default keymap for the ogurec/left_pm keyboard.  It uses the `make` command and specifies the keyboard and keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/drhigsby/ogurec/left_pm/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake ogurec/left_pm:default\n```\n\n----------------------------------------\n\nTITLE: Building RM Numpad default keymap\nDESCRIPTION: This command builds the default keymap for the RM Keebs RM Numpad using the QMK build environment. It compiles the firmware for the specified keyboard and keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/rmkeebs/rm_numpad/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake rmkeebs/rm_numpad:default\n```\n\n----------------------------------------\n\nTITLE: Building waffling60 Rev. E ANSI Firmware\nDESCRIPTION: This command builds the default firmware for the waffling60 Rev. E ANSI keyboard using the QMK build environment.  It requires the QMK build environment to be properly set up. The output is a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/4pplet/waffling60/rev_e_ansi/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake 4pplet/waffling60/rev_e_ansi:default\n```\n\n----------------------------------------\n\nTITLE: Flashing GummyKey Firmware\nDESCRIPTION: Flashes the default firmware onto the GummyKey keyboard. Requires a properly configured QMK build environment and a connected keyboard in bootloader mode. This command compiles and then flashes the firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/gummykey/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake gummykey:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Piantor Pro Firmware with Make\nDESCRIPTION: This command flashes the compiled firmware to the Piantor Pro keyboard using the QMK build environment. It assumes the keyboard is in bootloader mode. Alternatively, the compiled .uf2 file can be manually copied to the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/beekeeb/piantor_pro/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake beekeeb/piantor_pro:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Tanuki Keyboard Firmware with Make\nDESCRIPTION: This snippet provides the make command for compiling the default keymap for the Tanuki keyboard using QMK firmware. It assumes a correctly configured QMK build environment. This command generates the firmware file which can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/tanuki/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake tanuki:default\n```\n\n----------------------------------------\n\nTITLE: Install QMK CLI on FreeBSD (pkg)\nDESCRIPTION: This command installs the QMK CLI package on FreeBSD using the `pkg` package manager. The `-g` flag automatically confirms any prompts.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/newbs_getting_started.md#_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\npkg install -g \"py*-qmk\"\n```\n\n----------------------------------------\n\nTITLE: Flashing Titan60 Firmware with QMK\nDESCRIPTION: This command flashes the compiled firmware onto the Titan60 keyboard using QMK. It requires the QMK environment and appropriate flashing tools to be set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/acekeyboard/titan60/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake acekeyboard/titan60:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Tritium Numpad with QMK\nDESCRIPTION: This command builds the default keymap for the Tritium Numpad using the QMK build environment.  It requires the QMK build environment to be properly set up according to the QMK documentation. It outputs a firmware file that can be flashed to the Pro Micro controller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/tritium_numpad/readme.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmake tritium_numpad:default\n```\n\n----------------------------------------\n\nTITLE: Building BM65RGB Firmware with Make\nDESCRIPTION: This command builds the default firmware for the BM65RGB keyboard. It requires a configured QMK build environment. This command compiles the source code and prepares it for flashing onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kprepublic/bm65hsrgb/rev1/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake kprepublic/bm65rgb/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Writing Single Character\nDESCRIPTION: Writes a single character (`data`) to the display buffer at the current cursor position. If `invert` is true, the pixels of the character are inverted. This function handles the actual writing of character data to the display buffer and also advances the cursor.  The character data is a `char`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/st7565.md#_snippet_13\n\nLANGUAGE: C\nCODE:\n```\n// Writes a single character to the buffer at current cursor position\n// Advances the cursor while writing, inverts the pixels if true\n// Main handler that writes character data to the display buffer\nvoid st7565_write_char(const char data, bool invert);\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware - Makefile\nDESCRIPTION: This command flashes the compiled firmware to the SHARKOON SKILLER SGK50 S3 keyboard.  It requires the keyboard to be in bootloader mode.  The QMK make system handles the flashing process.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/sharkoon/skiller_sgk50_s3/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake sharkoon/skiller_sgk50_s3:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Alas Keyboard Firmware\nDESCRIPTION: This command flashes the built firmware onto the Alas keyboard using the QMK build environment. It requires the build environment to be correctly set up. The keyboard needs to be in bootloader mode before executing this command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/alas/readme.md#_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nmake alas:default:flash\n```\n\n----------------------------------------\n\nTITLE: Compiling Scylla v2 Firmware with VIA Keymap (Splinky v3)\nDESCRIPTION: This command compiles the Scylla v2 keyboard firmware with the VIA keymap using a Splinky v3 controller. It utilizes `qmk compile` with the `-kb` flag set to `bastardkb/scylla/v2/splinky/v3` and the `-km` flag set to `via`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/bastardkb/scylla/readme.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nqmk compile -kb bastardkb/scylla/v2/splinky/v3 -km via\n```\n\n----------------------------------------\n\nTITLE: Building QMK Firmware for Darmoshark K3\nDESCRIPTION: This command builds the default QMK firmware for the Darmoshark K3 keyboard. It requires a properly configured QMK build environment. The output is a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/darmoshark/k3/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake darmoshark/k3:default\n```\n\n----------------------------------------\n\nTITLE: Building Sriwedari70 Firmware\nDESCRIPTION: This command builds the default firmware for the Sriwedari70 keyboard using the QMK build environment. It compiles the keyboard layout and keymap into a firmware image that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/jaykeeb/sriwedari70/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake jaykeeb/sriwedari70:default\n```\n\n----------------------------------------\n\nTITLE: Building QMK Firmware for Viktus Minne Topre\nDESCRIPTION: This command builds the QMK firmware for the Viktus Minne Topre keyboard with the default keymap. It requires a properly set up QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/viktus/minne_topre/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake viktus/minne_topre:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Keychron Q7 Firmware (QMK)\nDESCRIPTION: This command flashes the built QMK firmware onto the Keychron Q7 keyboard with the ANSI layout. It requires a properly configured QMK build environment and a flashing tool. The keyboard needs to be in the correct bootloader mode for flashing to succeed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keychron/q7/readme.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmake keychron/q7/ansi:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building QMK Firmware for Durgod Venus\nDESCRIPTION: This command builds the default QMK firmware for the Durgod Venus keyboard. It uses the `make` command with the target specified as `durgod/venus:default`. This command should be executed in the QMK firmware directory.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/durgod/dgk6x/venus/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake durgod/venus:default\n```\n\n----------------------------------------\n\nTITLE: Building Runner3680 Firmware with QMK\nDESCRIPTION: This command builds the firmware for the Runner3680 keyboard with a 5x8 layout using the default keymap.  It requires a properly configured QMK build environment. The resulting firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/omkbd/runner3680/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake omkbd/runner3680/5x8:default\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for Viper/Eagle REP Rev A\nDESCRIPTION: This command builds the default firmware for the Viper/Eagle REP Rev A keyboard using the QMK build environment. It assumes that the QMK build environment is already set up. The resulting firmware can then be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/4pplet/eagle_viper_rep/rev_a/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake 4pplet/eagle_viper_rep/rev_a:default\n```\n\n----------------------------------------\n\nTITLE: Flashing QMK Firmware to Madeline\nDESCRIPTION: This command builds and flashes the QMK firmware to the Madeline keyboard with the default keymap. It requires a properly set up QMK build environment and a connected keyboard in bootloader mode. The output is the flashed firmware on the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kiserdesigns/madeline/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake kiserdesigns/madeline:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for FreebirdTKL - QMK\nDESCRIPTION: This command builds the default firmware for the KeebsForAll FreebirdTKL keyboard using the QMK build environment. It compiles the keyboard layout and creates a firmware file ready for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keebsforall/freebirdtkl/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake keebsforall/freebirdtkl:default\n```\n\n----------------------------------------\n\nTITLE: Building ScottoCMD Firmware\nDESCRIPTION: This command builds the default firmware for the ScottoCMD keyboard using the QMK build environment. It compiles the keymap and firmware code into a hex file ready for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/scottokeebs/scottocmd/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/scottokeebs/scottocmd:default\n```\n\n----------------------------------------\n\nTITLE: Building URL Copy Paste Firmware for The Key\nDESCRIPTION: This command builds a custom firmware for the Drop \"The Key\" macropad using the QMK build environment. This particular keymap defines C = CTRL+C, V = CTRL+V.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/drop/thekey/v1/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake drop/thekey/v1:url-copy-paste\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware to Big Knob\nDESCRIPTION: This command flashes the compiled QMK firmware to the Big Knob keyboard. It requires the QMK build environment and the keyboard to be in a flashable state, typically via bootloader mode. The command uploads the firmware to the connected device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/jpe230/big_knob/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nqmk flash -kb jpe230/big_knob -km default\n```\n\n----------------------------------------\n\nTITLE: Building QMK Firmware for EnvKB Delirium\nDESCRIPTION: This command builds the QMK firmware for the EnvKB Delirium RGB keyboard with the default keymap. It requires the QMK build environment to be set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/enviousdesign/delirium/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake enviousdesign/tkl/rgb:default\n```\n\n----------------------------------------\n\nTITLE: Compiling Anne Pro 2 C18 Keymap\nDESCRIPTION: This command compiles the default keymap for the Anne Pro 2 C18 keyboard using the QMK build environment. It requires a correctly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/annepro2/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake annepro2/c18:default\n```\n\n----------------------------------------\n\nTITLE: Building the Crazy Keyboard 68 Firmware\nDESCRIPTION: This command builds the default firmware for the Crazy Keyboard 68 using the QMK build environment. It compiles the necessary source code and generates the firmware file for the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/crazy_keyboard_68/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake crazy_keyboard_68:default\n```\n\n----------------------------------------\n\nTITLE: Building MechBrewery MB65S Firmware\nDESCRIPTION: This command builds the default keymap for the MechBrewery MB65S keyboard using the QMK build environment. It assumes that the QMK build environment has been set up correctly according to the QMK documentation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechbrewery/mb65s/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake mechbrewery/mb65s:default\n```\n\n----------------------------------------\n\nTITLE: Building QK65 Hotswap Firmware\nDESCRIPTION: This command builds the default firmware for the QK65 hotswap keyboard. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/qwertykeys/qk65/hotswap/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake qwertykeys/qk65/hotswap:default\n```\n\n----------------------------------------\n\nTITLE: Flashing CRKBD Pro Keyboard Firmware\nDESCRIPTION: This command flashes the compiled firmware to the CRKBD Pro keyboard. It requires the QMK command-line interface to be properly installed and configured and the keyboard to be in a flashable state (e.g., bootloader mode).\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechboards/crkbd/pro/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nqmk flash -kb mechboards/crkbd/pro -km default\n```\n\n----------------------------------------\n\nTITLE: Flashing the G-Boy Keyboard with QMK\nDESCRIPTION: This command builds and flashes the default keymap to the Kegen G-Boy keyboard using the QMK build environment and flashing tools. It requires a properly configured QMK build environment and a connected keyboard in bootloader mode. It flashes the compiled firmware to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kegen/gboy/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake kegen/gboy:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Yacobo Firmware\nDESCRIPTION: This command builds the default keymap for the Yacobo keyboard using the QMK build environment. It compiles the firmware, making it ready for flashing onto the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ibm/model_m/yacobo/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake yacobo:default\n```\n\n----------------------------------------\n\nTITLE: Building dyz60_hs Default Keymap\nDESCRIPTION: This command builds the default keymap for the dyz60_hs keyboard using the QMK build environment. It compiles the firmware with the specified keymap configuration. Requires a properly set up QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/dyz/dyz60_hs/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake dyz/dyz60_hs:default\n```\n\n----------------------------------------\n\nTITLE: Example Compile Usage 2 - qmk compile\nDESCRIPTION: This example demonstrates compiling the 66_iso keymap for the clueboard/66/rev4 keyboard after navigating to the appropriate directory.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/cli_commands.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ cd ~/qmk_firmware/keyboards/clueboard/66/rev4\n$ qmk compile -km 66_iso\nΨ Compiling keymap with make clueboard/66/rev4:66_iso\n...\n```\n\n----------------------------------------\n\nTITLE: Building Z40 keyboard firmware with default keymap\nDESCRIPTION: This command builds the firmware for the Quarkeys Z40 keyboard using the default keymap. It compiles the QMK firmware based on the keyboard definition and keymap configuration.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/quarkeys/z40/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake quarkeys/z40:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Protozoa P01 Keyboard Firmware\nDESCRIPTION: This command flashes the specified keymap for the Protozoa P01 keyboard onto the device. Requires a configured QMK build environment and QMK Toolbox or CLI.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/protozoa/p01/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake protozoa/p01:<keymap>:flash\n```\n\n----------------------------------------\n\nTITLE: Compiling Alpine65 Default Keymap\nDESCRIPTION: This command compiles the default keymap for the Alpine65 keyboard using the `make` command. It requires a properly configured QMK build environment and access to the QMK firmware repository.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/alpine65/readme.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmake alpine65:default\n```\n\n----------------------------------------\n\nTITLE: Building the mkh_studio/bully Firmware (Makefile)\nDESCRIPTION: This command builds the default firmware for the mkh_studio/bully keyboard using the QMK build environment. It compiles the keymap and firmware based on the keyboard's configuration files.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mkh_studio/bully/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake mkh_studio/bully:default\n```\n\n----------------------------------------\n\nTITLE: Building Elaruus Keyboard Firmware\nDESCRIPTION: This command builds the default keymap for the SyenaKeyboards Elaruus keyboard using QMK Firmware's `make` command. It requires a correctly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/syenakeyboards/elaruus/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake syenakeyboards/elaruus:default\n```\n\n----------------------------------------\n\nTITLE: Flashing WT65-G3 Firmware\nDESCRIPTION: This command builds and flashes the default firmware to the wilba_tech WT65-G3 keyboard. It requires a properly configured QMK build environment and a compatible flashing tool.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wilba_tech/wt65_g3/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake wilba_tech/wt65_g3:default:flash\n```\n\n----------------------------------------\n\nTITLE: Running all QMK tests\nDESCRIPTION: This command executes all unit tests available within the QMK Firmware project. It compiles and runs each test executable defined in the project's test configuration.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/unit_testing.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake test:all\n```\n\n----------------------------------------\n\nTITLE: Flashing Purin Keyboard Firmware (QMK)\nDESCRIPTION: This command builds and flashes the default keymap for the Purin keyboard to the connected device using QMK. It automates the build process followed by flashing the compiled firmware to the keyboard. Requires a QMK build environment and a connected, flashable device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/purin/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake purin:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Potato65 Solderable Keyboard Firmware\nDESCRIPTION: This command flashes the default keymap for the Potato65 Solderable keyboard to the device using the QMK build system. It depends on a successful build and assumes the bootloader is accessible.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/buildakb/potato65s/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake buildakb/potato65s:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Jones Keyboard Firmware - QMK\nDESCRIPTION: This command builds the default firmware for the Jones keyboard (version 1) using the QMK build environment. It compiles the source code and creates the firmware file ready for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/jones/v1/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake jones/v1:default\n```\n\n----------------------------------------\n\nTITLE: Flashing QMK Firmware to nt210\nDESCRIPTION: This command flashes the built QMK firmware to the nt210 keyboard. It requires a properly configured QMK build environment and a connected keyboard in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/evyd13/nt210/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake evyd13/nt210:default:flash\n```\n\n----------------------------------------\n\nTITLE: Compiling Skeletyl Firmware with v1 and default keymap\nDESCRIPTION: This command compiles the QMK firmware for the Skeletyl keyboard with v1 shield (Elite-C) and default keymap. It uses the `qmk compile` command with specific parameters for the keyboard, version, and keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/bastardkb/skeletyl/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nqmk compile -kb bastardkb/skeletyl/v1/elitec -km default\n```\n\n----------------------------------------\n\nTITLE: Building Borderland Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the Borderland keyboard. It assumes that the QMK build environment is already set up. It uses the `make` command with the `kiwikey/borderland:default` target.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kiwikey/borderland/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake kiwikey/borderland:default\n```\n\n----------------------------------------\n\nTITLE: Building Baumkuchen with QMK\nDESCRIPTION: This command builds the default keymap for the Baumkuchen macropad using the QMK firmware. It compiles the firmware with the defined keymap and necessary configurations for the specified keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/takashicompany/baumkuchen/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake takashicompany/baumkuchen:default\n```\n\n----------------------------------------\n\nTITLE: Building Practice 60 Firmware with QMK\nDESCRIPTION: This command is used to build the default firmware for the Practice 60 keyboard using the QMK build environment. It compiles the source code and generates the firmware file ready for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cannonkeys/practice60/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake cannonkeys/practice60:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Barleycorn SMD Firmware with Make\nDESCRIPTION: This command flashes the compiled firmware onto the Barleycorn SMD keyboard using the QMK build environment.  It requires the keyboard to be in a flashable state. It uses the default keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/barleycorn_smd/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake barleycorn_smd:default:flash\n```\n\n----------------------------------------\n\nTITLE: Define Alice Keyboard Layout\nDESCRIPTION: This snippet defines a keyboard layout named `LAYOUT_alice`. It is intended for use within QMK firmware to describe the physical arrangement of keys on an Alice-style keyboard.  No specific code implementation is present, only a name is defined.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/layouts/default/alice/readme.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nLAYOUT_alice\n```\n\n----------------------------------------\n\nTITLE: Setting Global Current Control in config.h\nDESCRIPTION: This code demonstrates how to set the global current control value for the IS31FL3733 LED driver by defining `IS31FL3733_GLOBAL_CURRENT` in your `config.h` file.  This value controls the current sunk by the `CSx` pins, ranging from 0 to 255. The default value is 0xFF (maximum current).\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/is31fl3733.md#_snippet_3\n\nLANGUAGE: c\nCODE:\n```\n#define IS31FL3733_GLOBAL_CURRENT 0xFF\n```\n\n----------------------------------------\n\nTITLE: Make Default Firmware for 3dfoxc\nDESCRIPTION: This command compiles the default firmware for the 3dfoxc handwired keyboard.  It requires a correctly configured QMK build environment.  The output is a .hex or .bin file that can be flashed to the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/3dfoxc/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake handwired/3dfoxc:default\n```\n\n----------------------------------------\n\nTITLE: Building Prime_L V1 Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the Prime_L V1 keyboard using the QMK build environment.  It requires that the QMK build environment is set up correctly. The resulting firmware can then be flashed onto the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/primekb/prime_l/v1/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake primekb/prime_l/v1:default\n```\n\n----------------------------------------\n\nTITLE: Building KBD8X HS Firmware\nDESCRIPTION: This snippet shows the command to build the default firmware for the KBD8X Replacement Hotswap PCB using QMK. It requires a properly set up QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/lucid/kbd8x_hs/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake lucid/kbd8x_hs:default\n```\n\n----------------------------------------\n\nTITLE: Writing Raw Byte to Display\nDESCRIPTION: Writes a single byte (`data`) into the display buffer at the specified index (`index`). The index is passed as `uint16_t`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/st7565.md#_snippet_19\n\nLANGUAGE: C\nCODE:\n```\n// Writes a single byte into the buffer at the specified index\nvoid st7565_write_raw_byte(const char data, uint16_t index);\n```\n\n----------------------------------------\n\nTITLE: Updating ChibiOS configs in QMK\nDESCRIPTION: Updates the ChibiOS configuration files within the QMK Firmware using the `chibios_conf_updater.sh` script.  Assumes `$QMK_FIRMWARE` is set.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/chibios_upgrade_instructions.md#_snippet_11\n\nLANGUAGE: Shell\nCODE:\n```\ncd $QMK_FIRMWARE\n```\n\nLANGUAGE: Shell\nCODE:\n```\n./util/chibios_conf_updater.sh\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware - make command\nDESCRIPTION: This command flashes the built firmware to the keyboard using `avrdude`.  It automatically resolves the serial port. You will need to install `avrdude` for it to work.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/orthodox/readme.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmake PROJECT:KEYMAP:avrdude\n```\n\n----------------------------------------\n\nTITLE: Compiling Default Murciélago Firmware with QMK\nDESCRIPTION: This command compiles the default firmware for the Murciélago keyboard (revision 1) using the QMK build environment.  It creates a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/murcielago/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake murcielago/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware to Proteus67 Keyboard (QMK)\nDESCRIPTION: This command flashes the compiled default firmware to the Proteus67 keyboard. It assumes that the QMK build environment is set up and the keyboard is connected and in a flashable state.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/proteus67/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake proteus67:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Woodpad Firmware with QMK\nDESCRIPTION: This command builds the default keymap for the Woodpad keyboard using the QMK build environment. It assumes that the QMK build environment is already set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/woodpad/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake handwired/woodpad:default\n```\n\n----------------------------------------\n\nTITLE: Compiling Evolv75 default keymap with QMK\nDESCRIPTION: This command compiles the default keymap for the Evolv75 keyboard using the QMK firmware build environment. It requires a properly configured QMK environment as a prerequisite. The output will be a firmware file suitable for flashing onto the Evolv75 PCB.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/evolv/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake evolv:default\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for SHARKOON SKILLER SGK50 S2 (Makefile)\nDESCRIPTION: This command builds the QMK firmware for the SHARKOON SKILLER SGK50 S2 keyboard with the default keymap. It requires a properly set up QMK build environment as described in the QMK documentation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/sharkoon/skiller_sgk50_s2/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake sharkoon/skiller_sgk50_s2:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Sono1 Firmware to Black Pill\nDESCRIPTION: This command compiles and flashes the QMK firmware for the handwired/sono1 keyboard using a Black Pill STM32F103 microcontroller and the default keymap.  The `:flash` argument initiates the flashing process.  A bootloader is required on the microcontroller before flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/sono1/readme.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nqmk compile -kb handwired/sono1/stm32f103:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building firmware for Uni660 Rev2 ANSI\nDESCRIPTION: This command builds the default firmware for the Sirius Uni660 Rev2 ANSI keyboard. It requires a properly set up QMK build environment. This is a make command that compiles the QMK firmware based on the configuration specified in the sirius/uni660/rev2/ansi/default directory.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/sirius/uni660/rev2/ansi/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake sirius/uni660/rev2/ansi:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware with Make for Ortho Slayer\nDESCRIPTION: This command flashes the default firmware to the keyten/ortho_slayer keyboard. This command builds the firmware if necessary, and then uses the appropriate flashing tool to upload the compiled firmware to the keyboard's microcontroller. Requires QMK build environment to be set up and a suitable flashing tool installed and configured.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keyten/ortho_slayer/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake keyten/ortho_slayer:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building the Work Louder Numpad Firmware\nDESCRIPTION: This command builds the default firmware for the Work Louder Numpad keyboard. It uses the `make` command with the target `work_louder/numpad:default`. Ensure the QMK build environment is set up correctly before running this command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/work_louder/numpad/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake work_louder/numpad:default\n```\n\n----------------------------------------\n\nTITLE: Building ISO85K Firmware with QMK\nDESCRIPTION: This command builds the firmware for the ISO85K keyboard with VIA support using the QMK build environment. It compiles the keymap and necessary drivers to create a flashable firmware image.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/iso85k/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/iso85k:via\n```\n\n----------------------------------------\n\nTITLE: Building Keyboard Firmware with Make\nDESCRIPTION: This command builds the firmware for the ScottoLong keyboard with the default keymap. It requires a properly configured QMK build environment. The output is a .hex or .bin file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/scottokeebs/scottolong/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/scottokeebs/scottolong:default\n```\n\n----------------------------------------\n\nTITLE: Building Keyboard Firmware with Make - QMK\nDESCRIPTION: Builds the QMK firmware for the Little Alby keyboard. This command allows you to create specific builds for different applications like Zoom, MS Teams and Google Meet. Requires QMK build environment to be properly set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/littlealby/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake littlealby/mute:default\n```\n\nLANGUAGE: bash\nCODE:\n```\nmake littlealby/mute:zoom\n```\n\nLANGUAGE: bash\nCODE:\n```\nmake littlealby/mute:ms_teams\n```\n\nLANGUAGE: bash\nCODE:\n```\nmake littlealby/mute:g_meet\n```\n\n----------------------------------------\n\nTITLE: Building MutePad Firmware\nDESCRIPTION: This command builds the default firmware for the MutePad keyboard using the QMK build environment. It assumes the QMK build environment has been properly set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/mutepad/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/mutepad:default\n```\n\n----------------------------------------\n\nTITLE: Building 7V Hotswap Firmware QMK\nDESCRIPTION: This command builds the default QMK firmware for the 7V Hotswap PCB. It requires a properly set up QMK build environment. The resulting firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/fjlabs/swordfish/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake fjlabs/7vhotswap:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Grooveboard Firmware (Makefile)\nDESCRIPTION: This command flashes the compiled firmware onto the Grooveboard keyboard. It uses the `make` command with the target specified as `ianklug/grooveboard:default:flash`. This requires the keyboard to be in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ianklug/grooveboard/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake ianklug/grooveboard:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Cassini Firmware\nDESCRIPTION: This command builds the firmware for the Cassini keyboard with the default keymap using the QMK build environment. It assumes that the QMK build environment has been properly configured.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/protozoa/cassini/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake protozoa/cassini:default\n```\n\n----------------------------------------\n\nTITLE: Building POS78 Default Keymap - QMK\nDESCRIPTION: This command builds the default keymap for the POS78 keyboard using the QMK build environment. It requires a correctly configured QMK environment and will generate the firmware file for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/pos78/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake pos78:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Fruitbar R2 Firmware - QMK\nDESCRIPTION: This command flashes the default firmware to the Fruitbar R2 keyboard. It uses the QMK build environment and the `flash` target to program the compiled firmware onto the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/fruitykeeb/fruitbar/readme.md#_snippet_3\n\nLANGUAGE: make\nCODE:\n```\nmake fruitykeeb/fruitbar/r2:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Fruitbar R1 Firmware - QMK\nDESCRIPTION: This command flashes the default firmware to the Fruitbar R1 keyboard. It utilizes the QMK build environment and the `flash` target to program the compiled firmware onto the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/fruitykeeb/fruitbar/readme.md#_snippet_2\n\nLANGUAGE: make\nCODE:\n```\nmake fruitykeeb/fruitbar/r1:default:flash\n```\n\n----------------------------------------\n\nTITLE: Compile Dactyl ManuForm Firmware\nDESCRIPTION: This command compiles the firmware for the Dactyl ManuForm keyboard in the 5x6 variant using the default keymap. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/dactyl_manuform/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake handwired/dactyl_manuform/5x6:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware\nDESCRIPTION: This command flashes the compiled firmware to the cxt_studio/12e4 keyboard. It uses the default keymap and the flash target to upload the firmware image to the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cxt_studio/12e4/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake cxt_studio/12e4:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Tartan Firmware\nDESCRIPTION: This command flashes the compiled firmware to the Tartan keyboard. The keyboard needs to be in bootloader mode. It uses the default target and expects a working flashing setup.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/dm9records/tartan/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n// In bootloader mode\nmake dm9records/tartan:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Contender Firmware - QMK\nDESCRIPTION: This command builds the default keymap for the Contender keyboard using the QMK build environment. It assumes that the QMK build environment has been properly set up according to the QMK documentation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/contender/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake contender:default\n```\n\n----------------------------------------\n\nTITLE: Enabling Stenography Protocols\nDESCRIPTION: To enable stenography protocols in QMK, add `STENO_ENABLE = yes` to your `rules.mk`. This allows QMK to present itself as a virtual serial port for communication with Plover.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/stenography.md#_snippet_1\n\nLANGUAGE: makefile\nCODE:\n```\nSTENO_ENABLE = yes\n```\n\n----------------------------------------\n\nTITLE: Flashing the heavy_left keyboard\nDESCRIPTION: This command flashes the compiled firmware to the takashicompany/heavy_left keyboard using the default keymap.  It requires a configured QMK build environment and a connected keyboard in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/takashicompany/heavy_left/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake takashicompany/heavy_left:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Skeletn87 Firmware (QMK)\nDESCRIPTION: This command builds and flashes the default firmware to the Skeletn87 keyboard.  It requires a properly configured QMK build environment and a connected keyboard in flashing mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/skeletn87/soldered/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake skeletn87/soldered:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Keyboard Firmware with Make\nDESCRIPTION: This command flashes the compiled firmware to the Brutal v2 60 keyboard using the QMK build environment and a compatible flashing tool.  It requires the keyboard to be in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cannonkeys/brutalv2_60/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake cannonkeys/brutalv2_60:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Rartland Firmware (QMK)\nDESCRIPTION: This command builds and flashes the default firmware for the Rartland keyboard using the QMK build environment. It compiles the keyboard layout, generates the firmware image, and flashes it to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/rart/rartland/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake rart/rartland:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Katana60 rev2 with Make\nDESCRIPTION: This command builds the default keymap for the Katana60 rev2 keyboard. It uses the QMK build environment and the 'make' command to compile the firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/rominronin/katana60/rev2/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake rominronin/katana60/rev2:default\n```\n\n----------------------------------------\n\nTITLE: Flashing UT47 without LEDs using QMK\nDESCRIPTION: This command compiles and flashes the UT47 keyboard firmware without LED support. It uses the default keymap. This requires QMK build environment to be set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/40percentclub/ut47/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake 40percentclub/ut47:default\n```\n\n----------------------------------------\n\nTITLE: Building Squishy65 Firmware with QMK\nDESCRIPTION: This snippet shows the command to build the default firmware for the Squishy65 keyboard using the QMK build environment. It assumes that the user has already set up the QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/rmi_kb/squishy65/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake rmi_kb/squishy65:default\n```\n\n----------------------------------------\n\nTITLE: Committing ChibiOS update in QMK\nDESCRIPTION: Commits the changes related to the ChibiOS update to the QMK Firmware repository. The commit message indicates the updated version.  Finally, the branch is pushed to the origin remote.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/chibios_upgrade_instructions.md#_snippet_13\n\nLANGUAGE: Shell\nCODE:\n```\ngit commit -am 'Update ChibiOS to 99.9.9'\n```\n\nLANGUAGE: Shell\nCODE:\n```\ngit push --set-upstream origin chibios-version-bump\n```\n\n----------------------------------------\n\nTITLE: Flashing rb1 Keyboard Firmware\nDESCRIPTION: This command flashes the compiled firmware to the rb1 keyboard. It assumes the keyboard is connected and in a state ready to accept the firmware update. Requires a configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ryanbaekr/rb1/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake ryanbaekr/rb1:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building N86 Keyboard Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the N86 keyboard (Linx3 variant) using the QMK build environment. It compiles the keymap and firmware for flashing onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/era/linx3/n86/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake era/linx3/n86:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware to Coban Pad 3A\nDESCRIPTION: This command flashes the compiled firmware to the Coban Pad 3A keyboard using the QMK build environment. It requires the keyboard to be in bootloader mode. The command uploads the generated firmware file to the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/coban/pad3a/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake coban/pad3a:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Pandamic Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the Pandamic keyboard. It requires a properly configured QMK build environment.  The output is a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/swiftrax/pandamic/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/swiftrax/pandamic:default\n```\n\n----------------------------------------\n\nTITLE: Building Default Firmware with QMK\nDESCRIPTION: This snippet shows how to build the default firmware for the Infinity CE keyboard using the QMK build environment. It assumes that the QMK build environment has been set up correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechlovin/infinityce/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake mechlovin/infinityce:default\n```\n\n----------------------------------------\n\nTITLE: Building Swiss Keyboard Firmware - QMK\nDESCRIPTION: This command builds the default firmware for the Swiss keyboard using the QMK build system. It assumes that the build environment has already been set up according to the QMK documentation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/swiss/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake swiss:default\n```\n\n----------------------------------------\n\nTITLE: Defining Oneshot Tap Toggle Count\nDESCRIPTION: Defines how many taps before the oneshot toggle is triggered. Sets the number of times a oneshot key needs to be tapped to activate its toggle function.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/config_options.md#_snippet_57\n\nLANGUAGE: C\nCODE:\n```\n#define ONESHOT_TAP_TOGGLE 2\n```\n\n----------------------------------------\n\nTITLE: Tapping a Modded Keycode in QMK\nDESCRIPTION: This code snippet shows how to tap a modified keycode using the `tap_code16()` function. This is the equivalent of pressing and releasing a key combination (e.g. Shift+5).\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/feature_macros.md#_snippet_16\n\nLANGUAGE: c\nCODE:\n```\ntap_code16(<kc>);\n```\n\n----------------------------------------\n\nTITLE: Flashing skeletonkbd/skeleton68 Keyboard Firmware\nDESCRIPTION: This command builds and flashes the default keymap to the skeletonkbd/skeleton68 keyboard.  It requires a properly configured QMK build environment and assumes the keyboard is in a flashable state.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/skeletonkbd/frost68/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake skeletonkbd/skeleton68:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Xenon keyboard with default keymap - QMK\nDESCRIPTION: This command builds and flashes the QMK firmware for the Xenon keyboard with the default keymap onto the connected device. Ensure the bootloader is active before executing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/xenon/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake xenon:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building ScottoInvader Firmware with Make\nDESCRIPTION: This command compiles the default keymap for the ScottoInvader keyboard using the QMK build environment. It assumes the QMK build environment is already set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/scottokeebs/scottoinvader/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/scottokeebs/scottoinvader:default\n```\n\n----------------------------------------\n\nTITLE: Flashing DecenTKL Firmware\nDESCRIPTION: This command flashes the compiled firmware onto the DecenTKL keyboard. It combines the build and flash steps into a single command, simplifying the process for users.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/decent/tkl/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake decent/tkl:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building The Uni v4 Firmware (RP2040)\nDESCRIPTION: This command compiles the firmware for The Uni v4 keyboard, which uses the RP2040 microcontroller. It uses the `qmk compile` command with the specified keyboard and keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/stenokeyboards/the_uni/readme.md#_snippet_2\n\nLANGUAGE: Makefile\nCODE:\n```\nqmk compile -kb stenokeyboards/the_uni/rp_2040 -km default\n```\n\n----------------------------------------\n\nTITLE: Building Denial75 Firmware (Makefile)\nDESCRIPTION: This command builds the default firmware for the Denial75 keyboard. It uses the QMK build environment and compiles the necessary files for the jolofsor/denial75 keyboard layout.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/jolofsor/denial75/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake jolofsor/denial75:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Rect44 Firmware\nDESCRIPTION: This command flashes the default keymap onto the Rect44 keyboard.  It requires the QMK build environment to be set up and uses the appropriate flashing tool for the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/rect44/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake rect44:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Creek70 Keyboard Firmware\nDESCRIPTION: This command compiles the QMK firmware for the Creek70 keyboard with the default keymap. It utilizes the `make` command within the QMK build environment to generate the firmware binary.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wuque/creek70/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake wuque/creek70:default\n```\n\n----------------------------------------\n\nTITLE: Flashing gregandcin/teaqueen Keyboard Firmware\nDESCRIPTION: This command builds and flashes the default keymap to the gregandcin/teaqueen keyboard. It requires a properly configured QMK build environment and a connected keyboard in flashing mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/gregandcin/teaqueen/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake gregandcin/teaqueen:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building QMK Firmware for Xiaomi MK02\nDESCRIPTION: This command builds the default keymap for the Xiaomi Yuemi Pro MK02 keyboard using the QMK build environment. It requires the QMK build environment to be set up correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/xiaomi/mk02/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake xiaomi/mk02:default\n```\n\n----------------------------------------\n\nTITLE: Flashing MisteRdeck Firmware\nDESCRIPTION: This command flashes the built firmware to the MisteRdeck keyboard.  It assumes that the build environment is properly configured, and the keyboard is in a state ready to receive the flashed firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/misterdeck/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/misterdeck:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for BINEPAD BN009 (R1)\nDESCRIPTION: This command builds the default firmware for the BINEPAD BN009 R1 variant using the QMK build environment. It compiles the keymap and prepares the firmware for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/binepad/bn009/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake binepad/bn009/r1:default\n```\n\n----------------------------------------\n\nTITLE: Building Firmware - QMK Makefile\nDESCRIPTION: This command builds the default firmware for the Teahouse Ayleen keyboard. It requires a correctly configured QMK build environment. The output is a firmware file suitable for flashing to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/teahouse/ayleen/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake teahouse/ayleen:default\n```\n\n----------------------------------------\n\nTITLE: Flashing K667 Firmware\nDESCRIPTION: This command flashes the built firmware to the K667 keyboard. It depends on the successful completion of the build step and requires a compatible flashing tool configured within the QMK environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/redragon/k667/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake redragon/k667:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building VT-40 Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the VT-40 keyboard using the QMK build environment.  It compiles the keyboard layout and firmware code into a .hex file ready for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/vt40/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake vt40:default\n```\n\n----------------------------------------\n\nTITLE: Building the RART 75 Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the RART 75 hotswap keyboard.  It requires the QMK build environment to be set up. The output is the compiled firmware ready for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/rart/rart75hs/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake rart/rart75hs:default\n```\n\n----------------------------------------\n\nTITLE: Compiling QMK Firmware for Acheron Apollo 87H Delta\nDESCRIPTION: This command compiles the default QMK firmware for the Acheron Apollo 87H keyboard with Delta revision. The resulting `.bin` file is used for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/acheron/apollo/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake acheron/apollo/87h/delta:default # For 87H revision Delta\n```\n\n----------------------------------------\n\nTITLE: Flashing Koalafications Keyboard Firmware\nDESCRIPTION: This command builds and flashes the default firmware for the Koalafications keyboard. It requires the QMK build environment to be configured and the necessary flashing tools to be installed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/swiftrax/koalafications/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/swiftrax/koalafications:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building the frobiac/blackflat keyboard firmware\nDESCRIPTION: This command builds the QMK firmware for the frobiac/blackflat keyboard. It requires a properly set up QMK build environment. The output is a firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/frobiac/blackflat/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake frobiac/blackflat\n```\n\n----------------------------------------\n\nTITLE: Compiling TBK Mini Firmware with v2 Shield, Splinky v2, and Default Keymap\nDESCRIPTION: This command compiles the QMK firmware for the TBK Mini keyboard with the v2 shield, Splinky v2 controller, and the default keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/bastardkb/tbkmini/readme.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nqmk compile -kb bastardkb/tbkmini/v2/splinky/v2 -km default\n```\n\n----------------------------------------\n\nTITLE: Flashing AK84BT Firmware with QMK\nDESCRIPTION: This command flashes the compiled firmware to the AK84BT keyboard using the QMK build environment. It requires a configured flashing tool and a connected keyboard in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/abko/ak84bt/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake abko/ak84bt:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Eros Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the Eros keyboard. It requires a properly configured QMK build environment. The output is a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/pjb/eros/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake pjb/eros/default\n```\n\n----------------------------------------\n\nTITLE: Flashing Reverb Firmware\nDESCRIPTION: This command builds and flashes the default firmware for the Reverb keyboard to the device. It requires the QMK build environment to be set up and the necessary flashing tools to be installed and configured.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/dasky/reverb/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake dasky/reverb:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Zeuspad Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Zeuspad keyboard using the QMK build environment.  It requires a properly configured QMK build environment and the pearlboards/zeuspad keyboard definition.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/pearlboards/zeuspad/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake pearlboards/zeuspad:default\n```\n\n----------------------------------------\n\nTITLE: Building Fourier Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the keebio/fourier keyboard using the QMK build environment.  It assumes that the QMK build environment is already set up according to the QMK documentation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keebio/fourier/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake keebio/fourier:default\n```\n\n----------------------------------------\n\nTITLE: Cleaning Compiled Firmware Files\nDESCRIPTION: This snippet shows how to clean the compiled firmware files and intermediate objects using the `make` command with the `:clean` option.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/helix/pico/keymaps/default/readme_jp.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\n$ make helix/pico:default:clean\n```\n\n----------------------------------------\n\nTITLE: Flashing OrthoCode Firmware (QMK)\nDESCRIPTION: This command flashes the default firmware onto the OrthoCode keyboard using the QMK build environment. It requires a correctly configured build environment and a connected keyboard in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/orthocode/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake orthocode:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Phoenix Firmware with Make\nDESCRIPTION: This code snippet shows how to build the default keymap for the Phoenix keyboard using the `make` command. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/phoenix/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake phoenix:default\n```\n\n----------------------------------------\n\nTITLE: Building Octopad Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Nightly Boards Octopad keyboard using the QMK build environment. It requires the QMK build environment to be set up correctly beforehand.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/nightly_boards/octopad/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake nightly_boards/octopad:default\n```\n\n----------------------------------------\n\nTITLE: Flashing WT70-JB Firmware with QMK\nDESCRIPTION: This command builds and flashes the default firmware to the wilba.tech WT70-JB keyboard using the QMK build environment. It requires the keyboard to be in the appropriate bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wilba_tech/wt70_jb/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake wilba_tech/wt70_jb:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Quark Squared Firmware with QMK\nDESCRIPTION: This command builds the Quark Squared keyboard firmware with the default keymap using the QMK build environment. It requires setting up the build environment beforehand as described in the QMK documentation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/checkerboards/quark_squared/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake checkerboards:quark_squared:default\n```\n\n----------------------------------------\n\nTITLE: Enable PAL Callbacks (ChibiOS halconf.h)\nDESCRIPTION: This defines `PAL_USE_CALLBACKS` to `TRUE` in `halconf.h`. This is required for the ChibiOS interrupt implementation of the PS/2 driver.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/ps2_mouse.md#_snippet_6\n\nLANGUAGE: c\nCODE:\n```\n#pragma once\n\n#define PAL_USE_CALLBACKS TRUE // [!code focus]\n\n#include_next <halconf.h>\n```\n\n----------------------------------------\n\nTITLE: Compiling TBK Mini Firmware with v2 Shield, Splinky v2, and VIA Keymap\nDESCRIPTION: This command compiles the QMK firmware for the TBK Mini keyboard with the v2 shield, Splinky v2 controller, and the VIA keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/bastardkb/tbkmini/readme.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nqmk compile -kb bastardkb/tbkmini/v2/splinky/v2 -km via\n```\n\n----------------------------------------\n\nTITLE: Flashing GOAT51 firmware with QMK\nDESCRIPTION: This command flashes the built firmware to the GOAT51 keyboard using the QMK build environment. It assumes that the keyboard is connected and in a state ready to receive the firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/takashicompany/goat51/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake takashicompany/goat51:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing zoom65_lite Firmware\nDESCRIPTION: This command builds and flashes the default firmware to the Meletrix zoom65_lite keyboard. It also requires a configured QMK build environment and a connected keyboard in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/meletrix/zoom65_lite/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake meletrix/zoom65_lite:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing TKC Candybar Firmware\nDESCRIPTION: This command builds and flashes the default firmware for the right-handed R3 version of the TKC Candybar keyboard. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/tkc/candybar/righty_r3/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake tkc/candybar/righty_r3:default:flash\n```\n\n----------------------------------------\n\nTITLE: Get Unicode Code Point from Index - C\nDESCRIPTION: This function gets the Unicode code point for a given index in the `unicode_map` array. It takes a `uint8_t` index as input and returns a `uint32_t` code point.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/unicode.md#_snippet_21\n\nLANGUAGE: C\nCODE:\n```\nuint32_t unicodemap_get_code_point(uint8_t index)\n```\n\n----------------------------------------\n\nTITLE: Flashing Contender Firmware - QMK\nDESCRIPTION: This command flashes the compiled firmware to the Contender keyboard using the QMK build environment. It relies on the QMK build environment and a configured flashing tool to be available. The board must be in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/contender/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake contender:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building SquishyTKL Firmware\nDESCRIPTION: This command is used to build the firmware for the SquishyTKL keyboard with VIA support. It assumes that the QMK build environment has already been set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/rmi_kb/squishytkl/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake rmi_kb/squishytkl:via\n```\n\n----------------------------------------\n\nTITLE: Building Budget96 Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the Budget96 keyboard. It utilizes the QMK build environment to compile the keyboard's firmware from source.  Requires the QMK build environment to be set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/donutcables/budget96/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake donutcables/budget96:default\n```\n\n----------------------------------------\n\nTITLE: Building Keychron Q0 Firmware\nDESCRIPTION: This command builds the QMK firmware for the Keychron Q0 number pad with the base or plus layout and the default keymap. It requires the QMK build environment to be set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keychron/q0/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake keychron/q0/base:default\n```\n\nLANGUAGE: make\nCODE:\n```\nmake keychron/q0/plus:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Makey Makey Firmware (QMK)\nDESCRIPTION: This command flashes the default firmware to the Makey Makey keyboard using the QMK build environment. It assumes that the keyboard is connected and the QMK build environment is configured for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/makeymakey/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake makeymakey:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Sparrow62 Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the Sparrow62 keyboard. It requires a properly set up QMK build environment. The resulting firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/sparrow62/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake sparrow62:default\n```\n\n----------------------------------------\n\nTITLE: Building Prime_EXL Firmware\nDESCRIPTION: This snippet shows the make command to build the default firmware for the handwired/prime_exl keyboard using QMK. It assumes that the QMK build environment is already set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/prime_exl/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/prime_exl:default\n```\n\n----------------------------------------\n\nTITLE: Flashing K34 Firmware with QMK\nDESCRIPTION: This command builds and flashes the default firmware for the K34 keyboard onto the device. It requires the QMK build environment to be set up and the keyboard to be in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/k34/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake k34:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building the Styrka Topre Keyboard\nDESCRIPTION: This command builds the default keymap for the Styrka Topre keyboard using the QMK build system. It assumes that the QMK build environment has been set up correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/viktus/styrka_topre/readme.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmake viktus/styrka_topre:default\n```\n\n----------------------------------------\n\nTITLE: Building the Nines firmware using QMK\nDESCRIPTION: This command builds the default firmware for the Nines macropad using the QMK build environment. It assumes that the QMK build environment has already been set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ungodly/nines/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake ungodly/nines:default\n```\n\n----------------------------------------\n\nTITLE: Flashing the ScottoSlant Keyboard\nDESCRIPTION: This command flashes the built firmware to the ScottoSlant keyboard. It uses the QMK build environment and includes the keyboard, keymap (default), and flash target.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/scottokeebs/scottoslant/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake handwired/scottokeebs/scottoslant:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing the Default EEK! Keymap\nDESCRIPTION: This command flashes the default keymap onto the EEK! keyboard.  It requires a correctly configured QMK Firmware build environment and the keyboard to be in a flashable state.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/eek/silk_down/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake eek:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing mammoth20x Firmware\nDESCRIPTION: This command flashes the built QMK Firmware onto the mammoth20x keyboard. It depends on the keyboard being in a flashable state and the QMK build environment being set up correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wuque/mammoth20x/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake wuque/mammoth20x:default:flash\n```\n\n----------------------------------------\n\nTITLE: Stepping to Next LED Matrix Effect without EEPROM (C)\nDESCRIPTION: This function advances to the next enabled LED matrix effect without storing the change in EEPROM. The effect will not persist across resets.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/led_matrix.md#_snippet_21\n\nLANGUAGE: C\nCODE:\n```\nvoid led_matrix_step_noeeprom(void)\n```\n\n----------------------------------------\n\nTITLE: Building Shambles Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Shambles keyboard using the QMK build environment. It assumes that the QMK build environment has already been set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/shambles/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake shambles:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware with Make\nDESCRIPTION: This command builds and flashes the default firmware to the mokey/mokey12x2 keyboard. It assumes the keyboard is connected and in a state ready to receive the flash.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mokey/mokey12x2/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake mokey/mokey12x2:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware to Tinny50 RGB\nDESCRIPTION: This command builds and flashes the default firmware to the idyllic/tinny50_rgb keyboard. It assumes the keyboard is connected and in a state ready to receive the firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/idyllic/tinny50_rgb/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake idyllic/tinny50_rgb:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware to infinity81 with QMK\nDESCRIPTION: This command flashes the default firmware to the infinity81 keyboard using the QMK build environment and a compatible flashing tool. The QMK build environment and the necessary flashing tools must be correctly configured.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ada/infinity81/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake ada/infinity81:default:flash\n```\n\n----------------------------------------\n\nTITLE: Compiling QMK Firmware for Magnum Ergo 1\nDESCRIPTION: This command compiles the QMK firmware with the default keymap for the Magnum Ergo 1 keyboard. It uses the `make` command-line tool provided by QMK to build the firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/dark/magnum_ergo_1/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake magnum_ergo_1:default\n```\n\n----------------------------------------\n\nTITLE: Flashing wings42 Firmware\nDESCRIPTION: This command flashes the compiled QMK Firmware onto the wings42 keyboard. It extends the build command with the `:flash` target, triggering the flashing process after the firmware is built.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/dailycraft/wings42/rev1/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake dailycraft/wings42/rev1:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Saber1800 Firmware (QMK)\nDESCRIPTION: This command flashes the compiled firmware onto the Saber1800 keyboard. It requires the keyboard to be in bootloader mode.  A properly configured QMK build environment is also required.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechlovin/zed1800/saber/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake mechlovin/zed1800/saber:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building BM16A V2 Firmware\nDESCRIPTION: Builds the default firmware for the BM16A V2 macropad. This command compiles the QMK firmware for the specified keyboard layout. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kprepublic/bm16a/v2/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake kprepublic/bm16v2:default\n```\n\n----------------------------------------\n\nTITLE: Flashing arc60h Firmware (QMK)\nDESCRIPTION: This command flashes the built firmware onto the arc60h keyboard using the QMK build environment. It requires the keyboard to be in bootloader mode and a properly configured flashing tool.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/vertex/arc60h/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake vertex/arc60h:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing the Firmware for IBM Model M Keyboard\nDESCRIPTION: This command flashes the built QMK firmware onto the IBM Model M keyboard.  It uses the 'default' keymap of the 'led_wired' configuration under 'mschwingen'.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ibm/model_m/mschwingen/led_wired/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake ibm/model_m/mschwingen/led_wired:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware to 15PAD with QMK\nDESCRIPTION: This command flashes the built firmware to the 15PAD macropad. It utilizes the QMK build environment to build and flash the firmware using the default configuration.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/zlabkeeb/15pad/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake zlabkeeb/15pad:default:flash\n```\n\n----------------------------------------\n\nTITLE: Making JK60 Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the JK60 keyboard using the QMK build environment. It assumes that the environment has been properly set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/jaykeeb/jk60/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake jaykeeb/jk60:default\n```\n\n----------------------------------------\n\nTITLE: Building Oddball v1 Firmware with ADNS Sensor\nDESCRIPTION: This command compiles the Oddball v1 keyboard firmware with the default configuration, which assumes an ADNS sensor. It utilizes the QMK build system to generate the firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/oddball/v1/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake oddball/v1:default\n```\n\n----------------------------------------\n\nTITLE: Flashing eiri Keyboard Firmware (QMK)\nDESCRIPTION: This command flashes the default firmware onto the eiri keyboard using the QMK build environment. It requires a configured build environment and a connected keyboard in flashing mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/emajesty/eiri/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake emajesty/eiri:default:flash\n```\n\n----------------------------------------\n\nTITLE: Build Planck EZ base keymap\nDESCRIPTION: This command builds the default keymap for the Planck EZ keyboard.  It requires setting up the build environment first, as described in the QMK documentation. This is a basic build for the Planck EZ.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/zsa/planck_ez/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake zsa/planck_ez/base:default\n```\n\n----------------------------------------\n\nTITLE: Compiling Firmware for quick7 with QMK\nDESCRIPTION: This command compiles the default firmware for the quick7 keyboard using the QMK build environment. It requires a properly configured QMK build environment and the quick7 keyboard definition files.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/yushakobo/quick7/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake yushakobo/quick7:default\n```\n\n----------------------------------------\n\nTITLE: Flashing the mini1800 Firmware\nDESCRIPTION: This command flashes the QMK firmware to the mini1800 keyboard with the default keymap. It requires QMK build environment setup and a connected keyboard in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/enviousdesign/commissions/mini1800/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake enviousdesign/commissions/mini1800:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing the keyboard - QMK\nDESCRIPTION: This command flashes the compiled firmware onto the cipulot/ec_tkl_x keyboard. It requires the QMK build environment to be properly configured and the keyboard to be in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cipulot/ec_tkl_x/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake cipulot/ec_tkl_x:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Infinity 60% Firmware\nDESCRIPTION: This command builds the default firmware for the Infinity 60% keyboard (rev1). It utilizes the QMK make system and requires a properly configured build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/input_club/infinity60/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake input_club/infinity60/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Building the Debit Card Keyboard with Make\nDESCRIPTION: This command builds the default keymap for the Debit Card keyboard using the QMK build environment. It compiles the keyboard firmware for the specified target.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/synthandkeys/the_debit_card/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake synthandkeys/the_debit_card:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Rartand Firmware with QMK\nDESCRIPTION: This command flashes the built firmware to the Rartand keyboard using the QMK build environment. It assumes that the QMK build environment and flashing tools are properly configured.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/rart/rartand/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake rart/rartand:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building WT65-XTX with QMK\nDESCRIPTION: This command builds the default keymap for the wilba_tech/wt65_xtx keyboard using the QMK build system. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wilba_tech/wt65_xtx/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake wilba_tech/wt65_xtx:default\n```\n\n----------------------------------------\n\nTITLE: Building underscore33 Keyboard Firmware\nDESCRIPTION: This command builds the firmware for the underscore33 keyboard, specifically the rev2 version with the default keymap. It requires a properly set up QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/tominabox1/underscore33/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake tominabox1/underscore33/rev2:default\n```\n\n----------------------------------------\n\nTITLE: Building KC60 Firmware\nDESCRIPTION: This command builds the default keymap for the KC60 keyboard using the QMK build environment. It compiles the necessary source files and generates the firmware ready for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kc60/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake kc60:default\n```\n\n----------------------------------------\n\nTITLE: Flashing the Spreadwriter Keyboard\nDESCRIPTION: This command flashes the default keymap to the Spreadwriter keyboard. It requires the QMK build environment to be set up and the keyboard to be in bootloader mode. This command combines the build and flash steps.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/takashicompany/spreadwriter/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake takashicompany/spreadwriter:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Iris CE Firmware\nDESCRIPTION: This command compiles and flashes the default firmware for the Iris CE rev1 keyboard using the QMK build environment. It builds upon the previous `make` command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keebio/iris_ce/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake keebio/iris_ce/rev1:default:flash\n```\n\n----------------------------------------\n\nTITLE: Compiling TBK Mini Firmware with v2 Shield and Default Keymap\nDESCRIPTION: This command compiles the QMK firmware for the TBK Mini keyboard with the v2 shield and the default keymap. It utilizes the elite-C controller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/bastardkb/tbkmini/readme.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nqmk compile -kb bastardkb/tbkmini/v2/elitec -km default\n```\n\n----------------------------------------\n\nTITLE: Flashing Altair Firmware (QMK)\nDESCRIPTION: This command flashes the built QMK firmware to the Altair keyboard. It requires the QMK build environment and a configured flashing tool. Assumes the default keymap is used.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ai03/altair/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake ai03/altair:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Beiwagon Firmware with QMK\nDESCRIPTION: This command flashes the compiled firmware onto the Beiwagon keyboard using the QMK build environment. It assumes the keyboard is connected and in a state ready to receive the firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/boardsource/beiwagon/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake boardsource/beiwagon:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing TinyNeko Firmware\nDESCRIPTION: This command flashes the default firmware to the TinyNeko keyboard with the Eclipse60 layout. It requires a properly configured QMK build environment and a connected keyboard in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/sawnsprojects/eclipse/tinyneko/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake tinyneko/eclipse60:default:flash\n```\n\n----------------------------------------\n\nTITLE: QMK Layout Definition\nDESCRIPTION: This snippet defines a keyboard layout for QMK firmware. It specifies the physical arrangement of keys in a 65% ANSI layout with a blocker and Tsangan bottom row.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/layouts/community/65_ansi_blocker_tsangan/readme.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# 65_ansi_blocker_tsangan\n\n    LAYOUT_65_ansi_blocker_tsangan\n```\n\n----------------------------------------\n\nTITLE: Compiling TBK Mini Firmware with v2 Shield and VIA Keymap\nDESCRIPTION: This command compiles the QMK firmware for the TBK Mini keyboard with the v2 shield and the VIA keymap. It utilizes the elite-C controller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/bastardkb/tbkmini/readme.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nqmk compile -kb bastardkb/tbkmini/v2/elitec -km via\n```\n\n----------------------------------------\n\nTITLE: Building DTIsaac01 Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the dtisaac01 keyboard. It uses the 'make' command within the QMK firmware environment. The target is 'dtisaac01' and the keymap is 'default'.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/dtisaac/dtisaac01/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake dtisaac01:default\n```\n\n----------------------------------------\n\nTITLE: Building FJLabs TF60 ANSI Firmware\nDESCRIPTION: This command builds the default keymap for the FJLabs TF60 ANSI keyboard using the QMK build environment.  It requires the QMK build environment to be set up correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/fjlabs/tf60ansi/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake fjlabs/tf60ansi:default\n```\n\n----------------------------------------\n\nTITLE: Compiling TBK Mini Firmware with v1 Shield and VIA Keymap\nDESCRIPTION: This command compiles the QMK firmware for the TBK Mini keyboard with the v1 shield and the VIA keymap. It utilizes the elite-C controller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/bastardkb/tbkmini/readme.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nqmk compile -kb bastardkb/tbkmini/v1/elitec -km via\n```\n\n----------------------------------------\n\nTITLE: Flashing WT65-G2 QMK Firmware\nDESCRIPTION: This command flashes the compiled firmware onto the wilba_tech WT65-G2 keyboard. It requires the QMK build environment and a connected keyboard in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wilba_tech/wt65_g2/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake wilba_tech/wt65_g2:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building De60fs Keyboard Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the De60fs keyboard using the QMK build environment. It compiles the source code and generates the firmware binary file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/deemen17/de60fs/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake deemen17/de60fs:default\n```\n\n----------------------------------------\n\nTITLE: Building Zinc Keyboard Firmware\nDESCRIPTION: This command builds the firmware for the Zinc keyboard using the QMK build environment. It specifies the keyboard (25keys/zinc/rev1) and keymap (default). Requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/25keys/zinc/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake 25keys/zinc/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Building duckboard R2 Firmware (QMK)\nDESCRIPTION: This command builds the default keymap for the duckboard R2 keyboard using the QMK build environment. It compiles the source code and generates the firmware file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/doodboard/duckboard_r2/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake doodboard/duckboard_r2:default\n```\n\n----------------------------------------\n\nTITLE: Building QMK Firmware for Frog Pad\nDESCRIPTION: This command builds the QMK firmware for the Frog Pad keyboard with the default keymap. It utilizes the `make` command and specifies the keyboard and keymap in the format `keyboard:keymap`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wolf/frogpad/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake wolf/frogpad:default\n```\n\n----------------------------------------\n\nTITLE: Building the Rubi Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the Rubi keyboard. It requires the QMK build environment to be set up correctly. The resulting firmware can then be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/rubi/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake rubi:default\n```\n\n----------------------------------------\n\nTITLE: Building DecenTKL Firmware\nDESCRIPTION: This command is used to build the default firmware for the DecenTKL keyboard. It compiles the source code and generates a firmware image that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/decent/tkl/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake decent/tkl:default\n```\n\n----------------------------------------\n\nTITLE: Flashing not_so_minidox Firmware with avrdude\nDESCRIPTION: This command flashes the firmware to the keyboard using avrdude, automatically detecting the serial port.  It requires the QMK build environment to be configured.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/not_so_minidox/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake not_so_minidox/rev1:default:avrdude\n```\n\n----------------------------------------\n\nTITLE: Building the Firmware\nDESCRIPTION: This command builds the QMK firmware for the S6xty5Neo Rev.2 keyboard with the default keymap. It assumes that the QMK build environment is set up correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/trnthsn/s6xty5neor2/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake trnthsn/s6xty5neor2:default\n```\n\n----------------------------------------\n\nTITLE: Building TOKKI Firmware with Make\nDESCRIPTION: This snippet demonstrates how to build the default firmware for the TOKKI keyboard using the QMK `make` command. It assumes a correctly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/jaykeeb/tokki/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake jaykeeb/tokki:default\n```\n\n----------------------------------------\n\nTITLE: Enabling Split Layer State in QMK\nDESCRIPTION: This ensures the current layer state is available on the slave when using the QMK-provided split transport. This configuration makes layer information accessible on both sides of the split keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/config_options.md#_snippet_105\n\nLANGUAGE: c\nCODE:\n```\n#define SPLIT_LAYER_STATE_ENABLE\n```\n\n----------------------------------------\n\nTITLE: Flashing Delta Keyboard Firmware (Makefile)\nDESCRIPTION: This command flashes the compiled firmware onto the Delta keyboard. It uses the QMK build system and the appropriate flashing tool to transfer the firmware to the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/quadrum/delta/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake quadrum/delta:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Recore v3 Firmware with Make\nDESCRIPTION: This command builds the default firmware for the Recore v3 keyboard using the QMK build environment. It assumes the QMK build environment has been properly set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/pmk/recore/v3/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake pmk/recore/v3:default\n```\n\n----------------------------------------\n\nTITLE: Building ODIN RGB Firmware with Make\nDESCRIPTION: This command builds the default firmware for the ODIN RGB keyboard. It utilizes the `make` command, specifying the keyboard, layout, and variant.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kbdfans/odin/rgb/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake kbdfans/odin/rgb:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware to TKLFRLNRLMLAO\nDESCRIPTION: This command builds and flashes the default firmware to the TKLFRLNRLMLAO keyboard. It requires the QMK build environment to be properly set up and the keyboard to be in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/zicodia/tklfrlnrlmlao/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake zicodia/tklfrlnrlmlao:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building the Firmware for IBM Model M Keyboard\nDESCRIPTION: This command is used to build the QMK firmware for the specified IBM Model M keyboard configuration. It targets the 'led_wired' keymap under the 'mschwingen' user.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ibm/model_m/mschwingen/led_wired/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake ibm/model_m/mschwingen/led_wired:default\n```\n\n----------------------------------------\n\nTITLE: Making Keyboard Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the Keebio Cepstrum revision 1 keyboard using the QMK build environment. It assumes the environment is set up correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keebio/cepstrum/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake keebio/cepstrum/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Hex6C Keyboard Firmware\nDESCRIPTION: This command flashes the compiled firmware onto the Hex6C keyboard using the QMK build environment.  It requires the keyboard to be in bootloader mode. See documentation for instructions on entering bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechlovin/hex6c/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake mechlovin/hex6c:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Pearl 40% Keyboard Firmware\nDESCRIPTION: This command flashes the built firmware to the Pearl 40% keyboard.  It assumes the QMK build environment is set up and that the keyboard is connected and accessible for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/pearl/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake pearl:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building YMDK NP21 Firmware\nDESCRIPTION: This command builds the default firmware for the YMDK NP21 keyboard using the QMK build environment.  It compiles the necessary code for the specified keyboard and keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ymdk/np21/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake ymdk/np21:default\n```\n\n----------------------------------------\n\nTITLE: Making Firmware for Proteus67 Keyboard (QMK)\nDESCRIPTION: This command builds the default firmware for the Proteus67 keyboard using the QMK build environment. It requires the QMK build environment to be properly set up beforehand.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/proteus67/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake proteus67:default\n```\n\n----------------------------------------\n\nTITLE: Building Keyboard Firmware (QMK)\nDESCRIPTION: This command builds the firmware for the Majestouch Redux keyboard with the default keymap. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/druah/majestouch_redux/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake druah/majestouch_redux:default\n```\n\n----------------------------------------\n\nTITLE: Building ETERNAL Keypad Firmware with QMK\nDESCRIPTION: This command builds the default keymap for the ETERNAL Keypad using the QMK build environment. It compiles the necessary code to create a firmware image for the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/eternal_keypad/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake eternal_keypad:default\n```\n\n----------------------------------------\n\nTITLE: Making Clunker Firmware\nDESCRIPTION: This command compiles the default firmware for the Clunker keyboard.  It assumes the QMK build environment is already set up. The output is a firmware file suitable for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechwild/clunker/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake mechwild/clunker:default\n```\n\n----------------------------------------\n\nTITLE: Building Skeletn87 Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the Skeletn87 keyboard with the soldered PCB layout. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/skeletn87/soldered/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake skeletn87/soldered:default\n```\n\n----------------------------------------\n\nTITLE: Building Keyboard Firmware\nDESCRIPTION: This command is used to build the firmware for the Unextended Standard PCB with the default keymap.  It uses the `make` command with the keyboard name and keymap specified.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/4pplet/unextended_std/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake 4pplet/unextended_std/rev_a:default\n```\n\n----------------------------------------\n\nTITLE: Building pi60_rgb Firmware\nDESCRIPTION: This command builds the default firmware for the pi60_rgb keyboard. It requires QMK build environment to be set up beforehand. The output is the compiled firmware ready to be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/1upkeyboards/pi60_rgb/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake 1upkeyboards/pi60_rgb:default\n```\n\n----------------------------------------\n\nTITLE: Building Skyline Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the Skyline keyboard using the QMK build environment. It assumes that the QMK firmware environment is already set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/jaykeeb/skyline/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake jaykeeb/skyline:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Titan 65 Firmware\nDESCRIPTION: This command builds and flashes the default firmware for the Titan 65 keyboard. It relies on the QMK build environment and the appropriate flashing tools being configured correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/phase_studio/titan65/soldered/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake phase_studio/titan65:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building K8split Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the K8split keyboard. It assumes that the QMK build environment has already been set up according to the QMK documentation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/k8split/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake handwired/k8split:default\n```\n\n----------------------------------------\n\nTITLE: Building Wasdat Firmware with Make\nDESCRIPTION: This command builds the default firmware for the Wasdat controller using the QMK build environment. It requires the QMK build environment to be properly set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/evyd13/wasdat/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake evyd13/wasdat:default\n```\n\n----------------------------------------\n\nTITLE: Building REVIUNG46 Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the REVIUNG46 keyboard using the QMK build environment. It assumes the QMK build environment is already set up and ready for use.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/reviung/reviung46/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake reviung46:default\n```\n\n----------------------------------------\n\nTITLE: Getting Maximum Characters Per Line\nDESCRIPTION: Returns the maximum number of characters that can fit on a single line of the ST7565 display. The return type is `uint8_t`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/st7565.md#_snippet_32\n\nLANGUAGE: C\nCODE:\n```\n// Returns the maximum number of characters that will fit on a line\nuint8_t st7565_max_chars(void);\n```\n\n----------------------------------------\n\nTITLE: Building Firmware with Make\nDESCRIPTION: This command builds the default firmware for the mechlovin/olly/octagon keyboard using the make command. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechlovin/olly/octagon/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake mechlovin/olly/octagon:default\n```\n\n----------------------------------------\n\nTITLE: Flashing BM68HSRGB Firmware with QMK\nDESCRIPTION: This command builds and flashes the default firmware to the BM68HSRGB keyboard. Requires a properly configured QMK build environment and a connected keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kprepublic/bm68hsrgb/rev1/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake kprepublic/bm68hsrgb/rev1:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Reverie PCB Firmware\nDESCRIPTION: This command builds the QMK firmware for the solderable version of the Reverie PCB with the default keymap. It requires the QMK build environment to be set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cannonkeys/reverie/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake cannonkeys/reverie/solderable:default\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for Keeb For Mom\nDESCRIPTION: This command builds the default firmware for the Keeb For Mom keyboard. It leverages the QMK build environment to compile the necessary code for the specified keyboard and keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keebformom/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake keebformom:default\n```\n\n----------------------------------------\n\nTITLE: Building Soyuz Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Soyuz keyboard using the QMK build environment. It assumes the QMK build environment is already set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ai03/soyuz/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake ai03/soyuz:default\n```\n\n----------------------------------------\n\nTITLE: Building KBDMINI Firmware\nDESCRIPTION: This command builds the default firmware for the KBDMINI keyboard using the QMK build environment. It assumes that the build environment has already been set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kbdfans/kbdmini/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake kbdfans/kbdmini:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Brick Keyboard Firmware\nDESCRIPTION: This command flashes the compiled firmware to the Brick keyboard. It uses the QMK build environment and assumes the keyboard is in bootloader mode, ready to receive the new firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/pauperboards/brick/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake pauperboards/brick:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building and Flashing PaladinPad Firmware\nDESCRIPTION: This command compiles and flashes the default firmware for the PaladinPad keyboard.  It requires a configured QMK build environment and necessary tools for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kapcave/paladinpad/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake kapcave/paladinpad:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building IDOBAO ID80 v2 ISO default keymap\nDESCRIPTION: This command compiles the default keymap for the ISO version of the IDOBAO ID80 v2 keyboard. It is necessary to have the QMK build environment correctly installed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/idobao/id80/v2/readme.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nmake idobao/id80/v2/iso:default\n```\n\n----------------------------------------\n\nTITLE: Building Chimera65 Hotswap Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Chimera65 Hotswap keyboard using the QMK build environment. It requires the QMK build environment to be properly set up as a prerequisite.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cannonkeys/chimera65_hs/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake cannonkeys/chimera65_hs:default\n```\n\n----------------------------------------\n\nTITLE: Unregistering a Modded Keycode in QMK\nDESCRIPTION: This code snippet shows how to unregister a keycode with modifiers using the `unregister_code16()` function. This is the counterpart to `register_code16()` and releases the modified key.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/feature_macros.md#_snippet_15\n\nLANGUAGE: c\nCODE:\n```\nunregister_code16(<kc>);\n```\n\n----------------------------------------\n\nTITLE: Building Paladin64 Firmware (Make)\nDESCRIPTION: This command builds the default firmware for the Paladin64 keyboard. It requires QMK build environment setup as a prerequisite. The output is the firmware ready for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kapcave/paladin64/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake kapcave/paladin64:default\n```\n\n----------------------------------------\n\nTITLE: Building Mini1800 RevC with QMK\nDESCRIPTION: This command compiles the QMK firmware for the Mini1800 RevC keyboard with the default keymap.  It requires a properly set up QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/lfkeyboards/mini1800/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake lfkeyboards/mini1800/revc:default\n```\n\n----------------------------------------\n\nTITLE: Building XD84 Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the XD84 keyboard. It utilizes the QMK build environment. Ensure the build environment is properly set up before executing this command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/xiudi/xd84/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake xiudi/xd84:default\n```\n\n----------------------------------------\n\nTITLE: Flashing AT101(-ish) Keyboard Firmware\nDESCRIPTION: This command flashes the compiled firmware to the handwired/at101ish keyboard. It requires a configured QMK build environment and a connected keyboard in a flashable state.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/at101ish/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake handwired/at101ish:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing the p01_ultra keyboard (QMK)\nDESCRIPTION: This command builds and flashes the firmware for the p01_ultra keyboard with the default keymap. It requires the QMK build environment to be configured and the keyboard to be connected.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wavtype/p01_ultra/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake wavtype/p01_ultra:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Spring Keyboard Firmware (QMK)\nDESCRIPTION: This command flashes the compiled QMK firmware to the OwLab Spring keyboard. It requires a properly configured QMK build environment and a connected keyboard in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/owlab/spring/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake owlab/spring:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building not_so_minidox Firmware\nDESCRIPTION: This command builds the default firmware for the rev1 version of the not_so_minidox keyboard. It assumes that the QMK build environment is already set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/not_so_minidox/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake not_so_minidox/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Flashing keyboard firmware\nDESCRIPTION: This command flashes the compiled firmware to the frobiac/blackbowl keyboard. It requires a correctly configured build environment and assumes the keyboard is in a state ready to receive the firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/frobiac/blackbowl/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake frobiac/blackbowl:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing TAC-K1 Keyboard Firmware (QMK)\nDESCRIPTION: This command flashes the built firmware to the TAC-K1 keyboard.  It requires a properly configured QMK build environment and a connected keyboard in a flashable state.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/tacworks/tac_k1/readme.md#_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nmake tacworks/tac_k1:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing the keyboard firmware\nDESCRIPTION: This command flashes the built firmware onto the EC Pro X JIS keyboard. It also requires a properly set up QMK build environment and a connected keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cipulot/ec_prox/jis/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake cipulot/ec_prox/jis:default:flash\n```\n\n----------------------------------------\n\nTITLE: Setting Right Hand as Master - C definition\nDESCRIPTION: This C preprocessor definition sets the right hand as the master when plugging the USB cable into the right board.  This needs to be added to your `config.h` file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/orthodox/readme.md#_snippet_3\n\nLANGUAGE: c\nCODE:\n```\n #define MASTER_RIGHT\n```\n\n----------------------------------------\n\nTITLE: Building Adelais Firmware (QMK)\nDESCRIPTION: This command builds the default keymap for the Adelais keyboard with standard LEDs and AVR architecture, revision 1 within the QMK Firmware environment. It requires a properly configured QMK build environment. The output is a firmware file ready to be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechlovin/adelais/standard_led/avr/rev1/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake mechlovin/adelais/standard_led/avr/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Building MiniDox firmware\nDESCRIPTION: This command builds the default firmware for the MiniDox rev1 keyboard. It uses the make command with the target specifying the keyboard layout and revision.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/maple_computing/minidox/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake maple_computing/minidox/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Flashing the alcor_dactyl keyboard with QMK\nDESCRIPTION: This command flashes the compiled firmware onto the alcor_dactyl keyboard. It requires the QMK build environment and a connected keyboard in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/alcor_dactyl/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake handwired/alcor_dactyl:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Splaytoraid Keyboard Firmware\nDESCRIPTION: These `make` commands compile the firmware for the Splaytoraid keyboard. The first command builds the default firmware. The second command specifically targets the 32u4 variant.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/0xcb/splaytoraid/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake 0xcb/splaytoraid:default\n```\n\nLANGUAGE: Makefile\nCODE:\n```\nmake 0xcb/splaytoraid/32u4:default\n```\n\n----------------------------------------\n\nTITLE: Flashing TGR Alice Firmware\nDESCRIPTION: This command builds and flashes the default firmware for the TGR Alice keyboard. It requires a properly configured QMK build environment and a connected keyboard in flashing mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/tgr/alice/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake tgr/alice:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building MANTA60 Firmware\nDESCRIPTION: This command builds the default keymap for the MANTA60 keyboard using the QMK build environment. It assumes that the QMK build environment has been set up correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/manta60/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake manta60:default\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for MS Sculpt Mobile Keyboard\nDESCRIPTION: This command builds the QMK firmware for the handwired MS Sculpt Mobile keyboard with the default keymap. It requires a correctly set up QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/ms_sculpt_mobile/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake handwired/ms_sculpt_mobile:default\n```\n\n----------------------------------------\n\nTITLE: Flashing YMD40 v2 Firmware\nDESCRIPTION: This command flashes the built firmware to the YMD40 v2 keyboard. It relies on the QMK build environment and a configured flashing tool. The keyboard needs to be in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ymdk/ymd40/v2/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake ymdk/ymd40/v2:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building B.mini EX Keyboard Firmware\nDESCRIPTION: This command builds the default keymap for the B.mini EX keyboard. It requires a correctly configured QMK build environment.  The compiled firmware is output to the QMK firmware directory.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/winkeyless/bminiex/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake winkeyless/bminiex:default\n```\n\n----------------------------------------\n\nTITLE: Defining CPU Frequency in QMK rules.mk\nDESCRIPTION: Specifies the CPU frequency in Hz.  An example is `16000000` for 16 MHz. This value is used for timing-sensitive operations and USB configuration.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/config_options.md#_snippet_114\n\nLANGUAGE: makefile\nCODE:\n```\nF_CPU = 16000000\n```\n\n----------------------------------------\n\nTITLE: Flashing EVE Meteor Firmware with QMK\nDESCRIPTION: This command builds and flashes the default firmware for the EVE Meteor keyboard to the device. It assumes a connected and recognized keyboard, and a properly configured QMK environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/eve/meteor/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake eve/meteor:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Keyboard Firmware\nDESCRIPTION: This command builds the firmware for the Bakeneko65 ISO Hotswap keyboard with the default keymap. It assumes the QMK build environment is already set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cannonkeys/bakeneko65_iso_hs/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake cannonkeys/bakeneko65_iso_hs:default\n```\n\n----------------------------------------\n\nTITLE: Flashing the Unicorne Keyboard Firmware (QMK)\nDESCRIPTION: This command flashes the compiled firmware onto the Unicorne keyboard using the QMK firmware build system.  It requires the keyboard to be in bootloader mode and a properly configured QMK build environment with necessary flashing tools installed. Successful execution results in the new firmware running on the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/boardsource/unicorne/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake boardsource/unicorne:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building nt650 firmware with make\nDESCRIPTION: This command builds the default firmware for the nt650 keyboard using the QMK build environment. It compiles the source code and generates the firmware image.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/evyd13/nt650/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake evyd13/nt650:default\n```\n\n----------------------------------------\n\nTITLE: Building Keyboard Firmware with Make\nDESCRIPTION: This command builds the default firmware for the Mont Cervin Klein keyboard using the QMK build environment. It requires the QMK build environment to be properly set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/era/sirind/klein_hs/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake era/sirind/klein_hs:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Scotto40 Firmware - Make Command\nDESCRIPTION: This command flashes the default firmware onto the Scotto40 keyboard using the QMK build environment. It assumes the build environment has been set up and the keyboard is connected.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/scottokeebs/scotto40/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake handwired/scottokeebs/scotto40:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Primus75 Firmware\nDESCRIPTION: This command builds the default firmware for the Primus75 keyboard. It requires the QMK build environment to be set up correctly. The resulting firmware file can then be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ilumkb/primus75/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake ilumkb/primus75:default\n```\n\n----------------------------------------\n\nTITLE: Enabling Audio Click Feature in QMK config.h\nDESCRIPTION: This code snippet shows how to enable the audio click feature in the QMK firmware by defining `AUDIO_CLICKY` in the `config.h` file.  This is a prerequisite for using the audio click functionality.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/audio.md#_snippet_23\n\nLANGUAGE: c\nCODE:\n```\n#define AUDIO_CLICKY\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware to E8ghtyNeo (QMK)\nDESCRIPTION: This command builds and flashes the default firmware to the E8ghtyNeo keyboard using the QMK build environment.  It builds upon the build command by adding the flash target.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/trnthsn/e8ghtyneo/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake trnthsn/e8ghtyneo/stm32f072:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Moonlander Firmware\nDESCRIPTION: This command flashes the compiled firmware onto the Moonlander keyboard. It uses the specified keyboard and keymap configurations, along with the flash target.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/zsa/moonlander/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake zsa/moonlander:default:flash\n```\n\n----------------------------------------\n\nTITLE: Compiling a52gl Keyboard Firmware\nDESCRIPTION: This command compiles the default firmware for the a52gl keyboard. It requires a properly set up QMK build environment. The output is the compiled firmware ready to be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/gl516/a52gl/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake gl516/a52gl:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Wabi Keyboard Firmware - QMK\nDESCRIPTION: This command flashes the compiled QMK firmware onto the Wabi keyboard. It requires the QMK build environment to be set up and the firmware to be built successfully before flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/wabi/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake handwired/wabi:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Jocker 1800 Firmware (QMK)\nDESCRIPTION: Builds the default firmware for the Jocker 1800 keyboard using the QMK build environment. Requires QMK firmware environment setup. The output is the compiled firmware ready for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mazestudio/jocker/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake mazestd/jocker:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Dactyl Kinesis Firmware\nDESCRIPTION: This command flashes the compiled firmware to the Dactyl Kinesis keyboard. It requires a correctly configured QMK build environment and a connected keyboard in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/dactyl_kinesis/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake handwired/dactyl_kinesis:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building QMK Firmware for E6-V2 OE\nDESCRIPTION: This command builds the QMK firmware for the E6-V2 OE keyboard with the default keymap. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/exclusive/e6v2/oe/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake e6v2/oe:default\n```\n\n----------------------------------------\n\nTITLE: Building Southpaw Extended 65% Keyboard Firmware\nDESCRIPTION: This command builds the firmware for the Southpaw Extended 65% keyboard with the default ANSI layout. It uses the `make` command with the keyboard's identifier and layout.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/switchplate/southpaw_65/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake switchplate/southpaw_65:default_ansi\n```\n\n----------------------------------------\n\nTITLE: Building M75H Firmware\nDESCRIPTION: This command builds the default firmware for the Mode SixtyFive M75H keyboard. It utilizes the QMK build environment to compile the source code into a firmware image.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mode/m75h/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake mode/m75h:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Nozbe Macropad Firmware\nDESCRIPTION: This command flashes the compiled firmware to the handwired Nozbe Macropad. It requires a configured QMK build environment and a connected macropad in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/nozbe_macro/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake handwired/nozbe_macro:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for Stellaron TKL\nDESCRIPTION: This command builds the default firmware for the Stellaron TKL keyboard. It utilizes the `make` command within the QMK Firmware environment, targeting the `zeix/acidandco/stellaron:default` configuration.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/zeix/acidandco/stellaron/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake zeix/acidandco/stellaron:default\n```\n\n----------------------------------------\n\nTITLE: Building Puca Pad Firmware with QMK\nDESCRIPTION: This command compiles the QMK firmware for the Puca Pad keyboard using the default keymap. It uses the `make` command with the target specified as `ffkeebs/puca:default`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ffkeebs/puca/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake ffkeebs/puca:default\n```\n\n----------------------------------------\n\nTITLE: Building DZ65RGB V3 Firmware\nDESCRIPTION: This command builds the default firmware for the DZ65RGB V3 keyboard using the ATmega32U4 (AVR) microcontroller. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/dztech/dz65rgb/readme.md#_snippet_2\n\nLANGUAGE: Makefile\nCODE:\n```\nmake dztech/dz65rgb/v3:default # AVR (ATmega32U4)\n```\n\n----------------------------------------\n\nTITLE: Building Cycle7 Firmware\nDESCRIPTION: This command builds the default firmware for the Cycle7 keyboard using the QMK build environment. It assumes that the QMK build environment has been properly set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/vertex/cycle7/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake vertex/cycle7:default\n```\n\n----------------------------------------\n\nTITLE: Defining Keyboard Layout\nDESCRIPTION: This code snippet defines a keyboard layout named `LAYOUT_60_ansi_arrow_split_bs`. The exact structure and behavior depend on the QMK framework, which isn't explicitly shown here.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/layouts/community/60_ansi_arrow_split_bs/readme.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nLAYOUT_60_ansi_arrow_split_bs\n```\n\n----------------------------------------\n\nTITLE: Building Lefty Firmware with QMK\nDESCRIPTION: This command compiles the default keymap for the Lefty keyboard using the QMK build environment. It requires a properly configured QMK build environment to be set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/smoll/lefty/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake lefty:default\n```\n\n----------------------------------------\n\nTITLE: Building pianoforte QMK Firmware\nDESCRIPTION: This command is used to build the QMK firmware for the aliceh66/pianoforte keyboard with the default keymap. It requires a properly set up QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/aliceh66/pianoforte/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake aliceh66/pianoforte:default\n```\n\n----------------------------------------\n\nTITLE: Building Rose75 Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Rose75 keyboard using the QMK build environment.  It requires the QMK build environment to be set up beforehand, as described in the QMK documentation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/rose75/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake rose75:default\n```\n\n----------------------------------------\n\nTITLE: Flashing the keyboard firmware\nDESCRIPTION: This command flashes the compiled firmware to the ning/tiny_board/tb16_rgb keyboard. It utilizes the QMK make system with the flash target to upload the firmware using the appropriate bootloader.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ning/tiny_board/tb16_rgb/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake ning/tiny_board/tb16_rgb:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building AliceH Pianoforte Hotswap Firmware\nDESCRIPTION: This command builds the QMK firmware for the AliceH pianoforte hotswap keyboard with the default keymap. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/aliceh66/pianoforte_hs/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake aliceh66/pianoforte_hs:default\n```\n\n----------------------------------------\n\nTITLE: Building Jian Keyboard Firmware\nDESCRIPTION: This command builds the firmware for the Jian keyboard, specifically the rev2 version, using the default keymap. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/jian/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake jian/rev2:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Lily Keyboard Firmware - QMK\nDESCRIPTION: This command flashes the compiled firmware onto the Lily keyboard. It requires a properly configured QMK build environment and a connected keyboard in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ai03/lily/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake ai03/liily:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building CannonKeys DB60 Firmware\nDESCRIPTION: This command builds the default firmware for the CannonKeys DB60 rev2 keyboard using the QMK build environment.  It requires that the QMK build environment is properly configured.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cannonkeys/db60/rev2/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake cannonkeys/db60/rev2:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware to Keyboard with Make\nDESCRIPTION: This command flashes the compiled QMK Firmware to the Radialex keyboard.  It extends the `make` command with the `:flash` target, triggering the flashing process after compilation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/takashicompany/radialex/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake takashicompany/radialex:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing the Fin Pad Keyboard\nDESCRIPTION: This command flashes the compiled firmware onto the Fin Pad keyboard. It utilizes the QMK build environment to flash the evyd13/fin_pad keyboard with the default keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/evyd13/fin_pad/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake evyd13/fin_pad:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building KBO-5000 Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the KBO-5000 keyboard revision 1 using the QMK build environment. It requires the QMK build environment to be set up correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keebio/kbo5000/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake keebio/kbo5000/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Building Obelus Firmware with QMK\nDESCRIPTION: This command compiles the QMK firmware for the Obelus keyboard using the default keymap. It assumes that the QMK build environment is already set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ckeys/obelus/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake ckeys/obelus:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware to Swift65 (Makefile)\nDESCRIPTION: This command builds and flashes the default firmware to the Swift65 solder version. It uses the QMK build environment and requires the keyboard to be in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/alfredslab/swift65/solder/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake alfredslab/swift65/solder:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing the Fuyu Keyboard\nDESCRIPTION: This command flashes the default keymap to the Fuyu keyboard using the QMK firmware. It requires a properly configured build environment and a connected keyboard in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/zykrah/fuyu/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake zykrah/fuyu:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing WT60-H3 Keyboard Firmware (QMK)\nDESCRIPTION: This command flashes the compiled firmware to the wilba_tech WT60_H3 keyboard using the QMK build environment. It requires the keyboard to be in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wilba_tech/wt60_h3/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake wilba_tech/wt60_h3:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building H660s firmware with QMK\nDESCRIPTION: This command builds the default firmware for the H660s keyboard using the QMK build environment. It compiles the source code and generates the firmware file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/hineybush/h660s/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake hineybush/h660s:default\n```\n\n----------------------------------------\n\nTITLE: Navigating to QMK Firmware Directory\nDESCRIPTION: This snippet shows the command to navigate to the top directory of the qmk_firmware project. This is a prerequisite for compiling the firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/helix/pico/keymaps/default/readme_jp.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n$ cd qmk_firmware\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for E8ghtyNeo (QMK)\nDESCRIPTION: This command builds the default firmware for the E8ghtyNeo keyboard using the QMK build environment.  It specifies the keyboard maintainer, keyboard name, and microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/trnthsn/e8ghtyneo/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake trnthsn/e8ghtyneo/stm32f072:default\n```\n\n----------------------------------------\n\nTITLE: Enabling Split OLED Sync in QMK\nDESCRIPTION: This syncs the on/off state of the OLED display between the two halves of a split keyboard. This ensures that the OLED screens on both halves are synchronized.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/config_options.md#_snippet_109\n\nLANGUAGE: c\nCODE:\n```\n#define SPLIT_OLED_ENABLE\n```\n\n----------------------------------------\n\nTITLE: Flashing SPRH Firmware with QMK\nDESCRIPTION: This command flashes the compiled firmware to the SPRH keyboard using the QMK build environment. It requires a properly configured QMK environment and the keyboard to be in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/eyeohdesigns/sprh/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake eyeohdesigns/sprh:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing BAHRNOB65 Firmware (QMK)\nDESCRIPTION: This command flashes the compiled firmware onto the BAHRNOB65 keyboard. It relies on the `make` command and the QMK Firmware environment to transfer the firmware to the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kalakos/bahrnob/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake kalakos/bahrnob65:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Pinky4 Keyboard Firmware - QMK\nDESCRIPTION: This command builds and flashes the QMK Firmware for the Pinky4 keyboard with the default keymap. It uses the `make` command with the target `pinky/4:default:flash`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/pinky/readme.md#_snippet_3\n\nLANGUAGE: Makefile\nCODE:\n```\nmake pinky/4:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building DZ65RGB V2 Firmware\nDESCRIPTION: This command builds the default firmware for the DZ65RGB V2 keyboard using the ATmega32U4 (AVR) microcontroller. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/dztech/dz65rgb/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake dztech/dz65rgb/v2:default # AVR (ATmega32U4)\n```\n\n----------------------------------------\n\nTITLE: Building waffling80 Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the waffling80 keyboard.  It requires a configured QMK build environment.  The resulting firmware can then be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/4pplet/waffling80/rev_a/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake 4pplet/waffling80/rev_a:default\n```\n\n----------------------------------------\n\nTITLE: Adding QMK remote for ChibiOS\nDESCRIPTION: Adds a remote repository named `qmk` pointing to the QMK's ChibiOS repository on GitHub. This allows for pushing tags to the QMK repository.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/chibios_upgrade_instructions.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ngit remote add qmk git@github.com:qmk/ChibiOS.git\n```\n\n----------------------------------------\n\nTITLE: Building Footy Keyboard Firmware for Handy\nDESCRIPTION: This command builds the firmware for the Footy keyboard specifically configured for the 'handy' speech-to-text application. Requires the QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/footy/readme.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmake handwired/footy:handy\n```\n\n----------------------------------------\n\nTITLE: Flashing Pterodactyl Keyboard Firmware\nDESCRIPTION: This command flashes the compiled firmware to the Pterodactyl keyboard. It requires the QMK build environment and assumes that the keyboard is connected and ready to be flashed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/pterodactyl/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/pterodactyl:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building FightPad Firmware\nDESCRIPTION: This snippet provides the command to build the default firmware for the FightPad keyboard using the QMK build environment. It assumes that the QMK build environment is already set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/clawsome/fightpad/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake clawsome/fightpad:default\n```\n\n----------------------------------------\n\nTITLE: Building QMK Firmware for BELLA RGB ANSI\nDESCRIPTION: This command builds the default firmware for the BELLA RGB ANSI keyboard using the QMK build environment. It requires QMK to be properly set up and configured.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kbdfans/bella/rgb/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake kbdfans/bella/rgb:default\n```\n\n----------------------------------------\n\nTITLE: PWM Backlight Driver Configuration (Make)\nDESCRIPTION: This snippet shows how to select the PWM backlight driver in `rules.mk`. The PWM driver leverages the hardware PWM output capability of the microcontroller. It's the default driver.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/backlight.md#_snippet_3\n\nLANGUAGE: make\nCODE:\n```\nBACKLIGHT_DRIVER = pwm\n```\n\n----------------------------------------\n\nTITLE: Building Serratus Firmware\nDESCRIPTION: This command builds the default firmware for the Serratus keyboard. It requires a properly configured QMK build environment. The output is the compiled firmware ready for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechlovin/serratus/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake mechlovin/serratus:default\n```\n\n----------------------------------------\n\nTITLE: Building Mars 6.5 keyboard firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the Mars 6.5 keyboard using the QMK build environment. It requires the QMK build environment to be properly set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ft/mars65/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake ft/mars65:default\n```\n\n----------------------------------------\n\nTITLE: Building Footy Keyboard Firmware for Superwhisper\nDESCRIPTION: This command builds the firmware for the Footy keyboard specifically configured for the 'superwhisper' speech-to-text application. Requires the QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/footy/readme.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmake handwired/footy:superwhisper\n```\n\n----------------------------------------\n\nTITLE: Building CannonKeys Ripple Firmware\nDESCRIPTION: This command builds the default firmware for the CannonKeys Ripple keyboard. It requires a configured QMK build environment.  The output is the firmware ready to be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cannonkeys/ripple/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake cannonkeys/ripple:default\n```\n\n----------------------------------------\n\nTITLE: Building rb69 Keyboard Firmware with QMK\nDESCRIPTION: This command is used to build the default firmware for the rb69 keyboard using the QMK build environment. It specifies the keyboard layout (ryanbaekr/rb69) and the default configuration.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ryanbaekr/rb69/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake ryanbaekr/rb69:default\n```\n\n----------------------------------------\n\nTITLE: Building KK65 Firmware with Make\nDESCRIPTION: This command builds the default firmware for the KK65 keyboard using the QMK build environment. It compiles the source code and generates the firmware image.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kk/65/readme.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmake kk/65:default\n```\n\n----------------------------------------\n\nTITLE: Building the keyboard firmware\nDESCRIPTION: This command compiles the QMK firmware for the atset/at3 keyboard using the default keymap. It requires the QMK build environment to be properly set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/atset/at12/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake atset/at3:default\n```\n\n----------------------------------------\n\nTITLE: Flashing the ScottoKatana Keyboard\nDESCRIPTION: This command flashes the compiled firmware to the ScottoKatana keyboard. It uses the QMK build environment and assumes the board is connected and ready to be flashed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/scottokeebs/scottokatana/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake handwired/scottokeebs/scottokatana:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Splaytoraid Keyboard Firmware\nDESCRIPTION: These `make` commands flash the compiled firmware to the Splaytoraid keyboard. The first command flashes the default firmware. The second command specifically flashes the 32u4 variant.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/0xcb/splaytoraid/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake 0xcb/splaytoraid:default:flash\n```\n\nLANGUAGE: Makefile\nCODE:\n```\nmake 0xcb/splaytoraid/32u4:default:flash\n```\n\n----------------------------------------\n\nTITLE: Compiling the keyboard firmware\nDESCRIPTION: This command compiles the QMK firmware for the werk_technica/one keyboard with the default keymap. It requires a properly set up QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/werk_technica/one/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nqmk compile -kb werk_technica/one -km default\n```\n\n----------------------------------------\n\nTITLE: Building KMAC PAD Firmware\nDESCRIPTION: This command builds the default firmware for the KMAC PAD keyboard using the QMK build environment. It requires a properly set up build environment as described in the QMK documentation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kbdmania/kmac_pad/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake kbdmania/kmac_pad:default\n```\n\n----------------------------------------\n\nTITLE: Building Hacked Motospeed Keyboard\nDESCRIPTION: This command builds the firmware for the hacked_motospeed keyboard with the default keymap. It assumes the QMK build environment is already set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/hacked_motospeed/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake handwired/hacked_motospeed:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Ghoul TKL Firmware\nDESCRIPTION: This command flashes the default firmware to the Ghoul TKL keyboard. It requires a properly configured QMK build environment and a connected keyboard in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/chill/ghoul/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake chill/ghoul:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Amber80 Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the Amber80 solder keyboard using the QMK build environment. It requires the QMK build environment to be properly set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/sawnsprojects/amber80/solder/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake sawnsprojects/amber80/solder:default\n```\n\n----------------------------------------\n\nTITLE: Building Reclined Keyboard Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the reclined keyboard. It utilizes the QMK make system to compile the firmware based on the configuration files in the specified directory.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/reclined/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/reclined:default\n```\n\n----------------------------------------\n\nTITLE: Building waffling60 Firmware\nDESCRIPTION: This command demonstrates how to build the firmware for the waffling60 keyboard using the QMK build environment. It specifies the keyboard, revision, and keymap to compile.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/4pplet/waffling60/rev_b/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake 4pplet/waffling60/rev_b:default\n```\n\n----------------------------------------\n\nTITLE: Flashing QMK Firmware via Make\nDESCRIPTION: This command flashes the compiled QMK firmware to the keyboard using the QMK build system. It requires the keyboard to be in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/xiaomi/mk02/readme.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nmake xiaomi/mk02:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Scotto9 Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Scotto9 macropad using the QMK build environment. It specifies the keyboard and keymap to compile.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/scottokeebs/scotto9/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake handwired/scottokeebs/scotto9:default\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for Super 16 V2 with QMK\nDESCRIPTION: This command builds the default firmware for the Super 16 V2 macropad using the QMK build environment. It requires the QMK build environment to be set up correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/1upkeyboards/super16v2/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake 1upkeyboards/super16v2:default\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files in QMK rules.mk\nDESCRIPTION: This defines which C files are compiled and linked into the final firmware. Used to add keyboard-specific or custom functionality.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/config_options.md#_snippet_112\n\nLANGUAGE: makefile\nCODE:\n```\nSRC += a.c\n```\n\nLANGUAGE: makefile\nCODE:\n```\nLIB_SRC += lib_b.c\n```\n\nLANGUAGE: makefile\nCODE:\n```\nSRC += c.c\n```\n\nLANGUAGE: makefile\nCODE:\n```\nLIB_SRC += lib_d.c\n```\n\n----------------------------------------\n\nTITLE: Building the Avalon QMK Firmware\nDESCRIPTION: This snippet demonstrates how to build the default QMK firmware for the Avalon keyboard. It uses the `make` command with the specified keyboard and keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/fjlabs/avalon/readme.md#_snippet_0\n\nLANGUAGE: QMK\nCODE:\n```\nmake fjlabs/avalon:default\n```\n\n----------------------------------------\n\nTITLE: Building MW75 Keyboard Firmware - Make Command\nDESCRIPTION: This command builds the default firmware for the MW75 keyboard using the QMK build environment. It assumes that the QMK build environment is properly set up and configured.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mwstudio/mw75/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake mwstudio/mw75:default\n```\n\n----------------------------------------\n\nTITLE: Building Iris CE Firmware\nDESCRIPTION: This command compiles the default firmware for the Iris CE rev1 keyboard using the QMK build environment. It assumes the QMK build environment has been set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keebio/iris_ce/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake keebio/iris_ce/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Building Ellipse Keyboard Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the Ellipse keyboard using the QMK build environment. It targets the cannonkeys/ellipse keyboard layout with the 'default' keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cannonkeys/ellipse/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake cannonkeys/ellipse:default\n```\n\n----------------------------------------\n\nTITLE: Building bat43 Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the bat43 keyboard using the QMK build environment. It utilizes the 'make' command with the target specified as 'dailycraft/bat43:default'.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/dailycraft/bat43/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake dailycraft/bat43:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Technik-O Keyboard Firmware\nDESCRIPTION: This command compiles and flashes the QMK firmware to the Technik-O keyboard using the default keymap. It depends on the QMK build environment and a connected keyboard in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/boardsource/technik_o/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake boardsource/technik_o:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Rartand Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Rartand keyboard using the QMK build environment. It assumes that the QMK build environment is properly set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/rart/rartand/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake rart/rartand:default\n```\n\n----------------------------------------\n\nTITLE: Building BOUNCE75 HOTSWAP Firmware (QMK)\nDESCRIPTION: This command compiles the QMK firmware for the BOUNCE75 HOTSWAP keyboard with the default keymap. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kbdfans/bounce/75/hotswap/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake kbdfans/bounce/75/hotswap:default\n```\n\n----------------------------------------\n\nTITLE: Building Waffling60 Firmware with Make\nDESCRIPTION: This command builds the default firmware for the Waffling60 revision E keyboard using the QMK make system. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/4pplet/waffling60/rev_e/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake 4pplet/waffling60/rev_e:default\n```\n\n----------------------------------------\n\nTITLE: Flash firmware using QMK CLI\nDESCRIPTION: This command initiates the flashing process using the QMK command-line interface. It automatically detects the keyboard's bootloader and flashes the firmware accordingly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/newbs_flashing.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nqmk flash\n```\n\n----------------------------------------\n\nTITLE: Building Mokulua Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the Mokulua keyboard. It assumes that the QMK build environment has already been set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechwild/mokulua/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake mechwild/mokulua:default\n```\n\n----------------------------------------\n\nTITLE: Building Pistachio Rev2 Firmware\nDESCRIPTION: This command builds the default firmware for the Pistachio keyboard revision 2. It assumes that the QMK build environment has been set up correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/rate/pistachio/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake rate/pistachio/rev2:default\n```\n\n----------------------------------------\n\nTITLE: Building the Portal 66 Firmware\nDESCRIPTION: This command builds the default firmware for the Portal 66 keyboard with hotswap support. It assumes that the QMK build environment is already set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/portal_66/hotswap/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake portal_66/hotswap:default\n```\n\n----------------------------------------\n\nTITLE: Flashing KC60 Firmware\nDESCRIPTION: This command flashes the compiled firmware onto the KC60 keyboard. It uses the QMK build environment and appropriate tools to upload the firmware to the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kc60/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake kc60:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Just60 Keyboard Firmware\nDESCRIPTION: This command is used to build the default firmware for the Just60 keyboard using the QMK build environment. It specifies the keyboard layout (ydkb/just60) and the keymap (default).\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ydkb/just60/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake ydkb/just60:default\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for Big Switch PCB\nDESCRIPTION: This command builds the firmware for the Big Switch PCB using the QMK firmware framework. It specifies the keyboard (flehrad/bigswitch) and keymap (default) to compile.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/flehrad/bigswitch/readme.md#_snippet_0\n\nLANGUAGE: makefile\nCODE:\n```\nmake: flehrad/bigswitch:default\n```\n\n----------------------------------------\n\nTITLE: Building Quark Firmware\nDESCRIPTION: This command builds the default keymap for the Quark keyboard using the QMK firmware build environment. It assumes that the QMK firmware environment is already set up and configured.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/checkerboards/quark/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake checkerboards/quark:default\n```\n\n----------------------------------------\n\nTITLE: Building Pachi Keyboard Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the Pachi mini_32u4 keyboard using the QMK build environment. It requires a properly set up QMK environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/xelus/pachi/mini_32u4/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake xelus/pachi/mini_32u4:default\n```\n\n----------------------------------------\n\nTITLE: Building RURA66 Firmware\nDESCRIPTION: This command builds the default firmware for the RURA66 keyboard using the QMK build environment. It compiles the keymap and generates the firmware file ready for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/rura66/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake rura66:default\n```\n\n----------------------------------------\n\nTITLE: Making the H50 keyboard with default configuration\nDESCRIPTION: This command compiles the firmware for the H50 keyboard with the default configuration. It requires the QMK build environment to be set up correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/huytbt/h50/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake huytbt/h50:default\n```\n\n----------------------------------------\n\nTITLE: Building Vector Macropad Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the Vector macropad using the QMK build environment. It compiles the keymap and necessary drivers for the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/arrayperipherals/vector/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake arrayperipherals/vector:default\n```\n\n----------------------------------------\n\nTITLE: Building v83p Firmware with Make\nDESCRIPTION: This command builds the default firmware for the inland/v83p keyboard using the QMK make system. It compiles the keyboard layout and generates the firmware file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/inland/v83p/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake inland/v83p:default\n```\n\n----------------------------------------\n\nTITLE: Flashing NK65 with DFU Util - make\nDESCRIPTION: This command is used to flash the NK65 keyboard using dfu-util. It requires the keyboard to be in DFU mode. Replace <keymap> with the desired keymap to flash.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/novelkeys/nk65/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake nk65:<keymap>:dfu-util\n```\n\n----------------------------------------\n\nTITLE: Building YMD75 Firmware with QMK\nDESCRIPTION: This command is used to compile the default firmware for the YMD75 rev3 keyboard using the QMK build environment.  It requires a properly configured QMK environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ymdk/ymd75/rev3/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake ymdk/ymd75/rev3:default\n```\n\n----------------------------------------\n\nTITLE: Building the Fin Pad Keyboard\nDESCRIPTION: This command builds the default keymap for the Fin Pad keyboard using the QMK build environment. It compiles the firmware for the evyd13/fin_pad keyboard with the default keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/evyd13/fin_pad/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake evyd13/fin_pad:default\n```\n\n----------------------------------------\n\nTITLE: Building Aves60 Firmware\nDESCRIPTION: This command builds the default firmware for the Aves60 keyboard. It requires a properly configured QMK build environment. The resulting firmware can then be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/aves60/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake aves60:default\n```\n\n----------------------------------------\n\nTITLE: Building Z60 Solder Keymap (QMK)\nDESCRIPTION: This command builds the default keymap for the solder version of the Quarkeys Z60 keyboard. It uses the QMK build environment to compile the firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/quarkeys/z60/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake quarkeys/z60/solder:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Fuji75 Solder Firmware with QMK\nDESCRIPTION: This command flashes the built firmware to the Fuji75 Solder keyboard.  It depends on the QMK build environment and a connected keyboard in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/sakura_workshop/fuji75/solder/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake sakura_workshop/fuji75/solder:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Z150 QMK Firmware\nDESCRIPTION: This command builds the default keymap for the Zenith Z-150 keyboard using the handwired configuration. It compiles the QMK firmware for the specified keyboard and keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/z150/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/z150:default\n```\n\n----------------------------------------\n\nTITLE: Compiling the Firmware for JotPad16\nDESCRIPTION: This command compiles the QMK Firmware for the handwired JotPad16 keyboard with the default keymap. It requires the QMK build environment to be properly set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/jotpad16/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake handwired/jotpad16:default\n```\n\n----------------------------------------\n\nTITLE: Building Pistachio Rev1 Firmware\nDESCRIPTION: This command builds the default firmware for the Pistachio keyboard revision 1. It assumes that the QMK build environment has been set up correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/rate/pistachio/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake rate/pistachio/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware with Make\nDESCRIPTION: This command flashes the built firmware to the EQUATOR keyboard. It requires the QMK build environment to be set up and the keyboard to be in a flashable state.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/rmi_kb/equator/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake rmi_kb/equator:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing kafka68 Keyboard Firmware\nDESCRIPTION: This command flashes the compiled QMK firmware to the kafka68 keyboard using the default keymap.  It extends the build command by adding the `:flash` target to initiate the flashing process.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/meetlab/kafka68/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake meetlab/kafka68:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building the TW40 Firmware - Bash\nDESCRIPTION: This command builds the default firmware for the Training Wheel 40 keyboard. It assumes that the QMK build environment is properly set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/p3d/tw40/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake p3d/tw40:default\n```\n\n----------------------------------------\n\nTITLE: Building BM68HSRGB Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the BM68HSRGB keyboard. It assumes that the QMK build environment is already set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kprepublic/bm68hsrgb/rev1/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake kprepublic/bm68hsrgb/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Enabling Combo Must Hold Per Combo\nDESCRIPTION: Enables per-combo `COMBO_TERM` extension and `get_combo_must_hold()` function, allowing specific combos to have modified timeouts and conditions.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/config_options.md#_snippet_61\n\nLANGUAGE: C\nCODE:\n```\n#define COMBO_MUST_HOLD_PER_COMBO\n```\n\n----------------------------------------\n\nTITLE: Flashing Span Keyboard Firmware\nDESCRIPTION: This command flashes the compiled firmware onto the Span keyboard. It requires a properly configured QMK build environment and a connected keyboard in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/idank/spankbd/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake idank/spankbd:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Prime_O Keyboard Firmware\nDESCRIPTION: This command builds the QMK firmware for the Prime_O keyboard with the default keymap. It assumes that the QMK build environment has been set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/primekb/prime_o/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake primekb/prime_o:default\n```\n\n----------------------------------------\n\nTITLE: Building Time80 Firmware (QMK)\nDESCRIPTION: This command builds the default keymap for the Time80 keyboard within the QMK firmware environment. It requires a properly configured build environment as per the QMK documentation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/foxlab/time80/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake foxlab/time80:default\n```\n\n----------------------------------------\n\nTITLE: Building AnnePro2-Tools\nDESCRIPTION: This command compiles the AnnePro2-Tools project using the `cargo` build tool. It requires the Rust toolchain to be installed and configured correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/annepro2/readme.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncargo build --release\n```\n\n----------------------------------------\n\nTITLE: Enabling Activity Timestamp Synchronization\nDESCRIPTION: This definition synchronizes the activity timestamps between sides of the split keyboard, allowing for activity timeouts to occur. It is defined in `config.h`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/split_keyboard.md#_snippet_24\n\nLANGUAGE: c\nCODE:\n```\n#define SPLIT_ACTIVITY_ENABLE\n```\n\n----------------------------------------\n\nTITLE: Building skeletonkbd/skeleton68 Keyboard Firmware\nDESCRIPTION: This command builds the default keymap for the skeletonkbd/skeleton68 keyboard. It assumes that the QMK build environment has been set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/skeletonkbd/frost68/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake skeletonkbd/skeleton68:default\n```\n\n----------------------------------------\n\nTITLE: Flashing LPAD Firmware with Make\nDESCRIPTION: This command flashes the built firmware to the LPAD keyboard. It requires a configured QMK build environment and a connected keyboard in a flashable state.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/laneware/lpad/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake laneware/lpad:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing De60fs Keyboard Firmware (QMK)\nDESCRIPTION: This command flashes the built firmware to the De60fs keyboard using the QMK build environment. It programs the firmware binary onto the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/deemen17/de60fs/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake deemen17/de60fs:default:flash\n```\n\n----------------------------------------\n\nTITLE: Increasing Effect Speed without EEPROM (C)\nDESCRIPTION: This function increases the effect speed without writing the changes to EEPROM. The speed will revert to the EEPROM setting on restart.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/led_matrix.md#_snippet_31\n\nLANGUAGE: C\nCODE:\n```\nvoid led_matrix_increase_speed_noeeprom(void)\n```\n\n----------------------------------------\n\nTITLE: Flashing Virgo EC Keyboard Firmware\nDESCRIPTION: This command flashes the default firmware onto the Virgo EC keyboard using the QMK build environment. It assumes that the keyboard is connected and in a flashable state.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cipulot/ec_virgo/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake cipulot/ec_virgo:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building GetawayVan Keyboard Firmware with QMK\nDESCRIPTION: This command builds the default keymap for the GetawayVan keyboard. It assumes that the QMK build environment is already set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/esca/getawayvan/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake esca/getawayvan:default\n```\n\n----------------------------------------\n\nTITLE: Compiling QMK Firmware for Acheron Apollo 87H-T-SC\nDESCRIPTION: This command compiles the default QMK firmware for the Acheron Apollo 87H-T-SC keyboard. The compiled firmware file is necessary for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/acheron/apollo/readme.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmake acheron/apollo/87htsc:default # For 87H-T-SC (only a single revision as of may 2022)\n```\n\n----------------------------------------\n\nTITLE: Flashing Barleycorn Firmware\nDESCRIPTION: This command flashes the compiled firmware to the Barleycorn keyboard. It assumes that the keyboard is connected and the QMK build environment is properly configured for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/yiancardesigns/barleycorn/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake yiancardesigns/barleycorn:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing DOIO KB38 Firmware\nDESCRIPTION: This command flashes the compiled firmware onto the DOIO KB38 keyboard. It requires the QMK flashing tools to be properly installed and configured and puts the keyboard in flashing mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/doio/kb38/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake doio/kb38:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing ScottoNum Firmware\nDESCRIPTION: This command flashes the default firmware to the ScottoNum keyboard. It requires the QMK build environment and assumes the keyboard is connected and ready for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/scottokeebs/scottonum/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake handwired/scottokeebs/scottonum:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Franky36 Firmware with Make\nDESCRIPTION: This command builds and flashes the firmware to the Franky36 keyboard with the default keymap. It extends the build command with the `:flash` target, requiring a configured flashing environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/franky36/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake franky36:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Otaku Split Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Otaku Split rev.1 keyboard using the QMK build environment. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/takashiski/otaku_split/rev1/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake takashiski/otaku_split/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Flashing M75H Firmware\nDESCRIPTION: This command flashes the built firmware onto the Mode SixtyFive M75H keyboard. It requires the QMK build environment to be set up and configured correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mode/m75h/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake mode/m75h:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building the Macroflow Original Keyboard\nDESCRIPTION: This command builds the default keymap for the macroflow_original keyboard using the QMK build environment. It compiles the firmware for the specified keyboard and keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/macroflow_original/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake macroflow_original:default\n```\n\n----------------------------------------\n\nTITLE: Flashing the Macroflow Original Keyboard\nDESCRIPTION: This command flashes the compiled firmware onto the macroflow_original keyboard.  It requires the keyboard to be in bootloader mode and uses the QMK flash tool.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/macroflow_original/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake macroflow_original:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building hotDuck TKL Firmware\nDESCRIPTION: This command builds the default firmware for the hotDuck TKL keyboard. It utilizes the QMK make system to compile the keyboard's firmware with the specified keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/h0oni/hotduck/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake h0oni/hotduck:default\n```\n\n----------------------------------------\n\nTITLE: Flashing QMK Firmware\nDESCRIPTION: This command initiates the flashing process to upload the compiled QMK firmware to the keyboard's microcontroller.  The user will be prompted to enter the bootloader mode on the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/redox/rev1/readme.md#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nqmk flash\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for Mercury Macropad (QMK)\nDESCRIPTION: This command compiles the default firmware for the Mercury macropad using the QMK build environment. It requires QMK to be set up and configured correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/wwa/mercury/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake handwired/wwa/mercury:default\n```\n\n----------------------------------------\n\nTITLE: Building QMK Firmware\nDESCRIPTION: This command builds the QMK firmware for the Scorpio Rev2 keyboard with the default keymap. It uses the `make` command with the keyboard name and keymap name as arguments.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kwstudio/scorpio_rev2/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake kwstudio/scorpio_rev2:default\n```\n\n----------------------------------------\n\nTITLE: Building default idb_60 firmware\nDESCRIPTION: This command builds the default firmware for the idb/idb_60 keyboard using the QMK build environment. It prepares the firmware for flashing to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/idb/idb_60/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake idb/idb_60:default\n```\n\n----------------------------------------\n\nTITLE: Building keyten Lisa Firmware\nDESCRIPTION: Builds the default firmware for the keyten Lisa keyboard using the QMK build environment. Requires a configured QMK build environment. The resulting firmware can then be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keyten/lisa/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake keyten/lisa:default\n```\n\n----------------------------------------\n\nTITLE: Configure PS/2 Pins and Interrupts (AVR/ATMega32u4)\nDESCRIPTION: This code configures the clock and data pins, and sets up the interrupt service routine for PS/2 mouse on AVR microcontrollers.  It requires the `PS2_DRIVER_INTERRUPT` to be defined.  This code should be placed in your keyboard's `config.h` file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/ps2_mouse.md#_snippet_3\n\nLANGUAGE: c\nCODE:\n```\n#ifdef PS2_DRIVER_INTERRUPT\n#define PS2_CLOCK_PIN   D2\n#define PS2_DATA_PIN    D5\n\n#define PS2_INT_INIT()  do {    \\\n    EICRA |= ((1<<ISC21) |      \\\n              (0<<ISC20));      \\\n} while (0)\n#define PS2_INT_ON()  do {      \\\n    EIMSK |= (1<<INT2);         \\\n} while (0)\n#define PS2_INT_OFF() do {      \\\n    EIMSK &= ~(1<<INT2);        \\\n} while (0)\n#define PS2_INT_VECT   INT2_vect\n#endif\n```\n\n----------------------------------------\n\nTITLE: Building Quefrency Firmware\nDESCRIPTION: This command builds the default firmware for the Quefrency keyboard (Rev. 3) using the QMK build environment. It compiles the necessary source code and generates a firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keebio/quefrency/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake keebio/quefrency/rev3:default\n```\n\n----------------------------------------\n\nTITLE: Building TOFU60 Firmware\nDESCRIPTION: This command is used to build the default firmware for the TOFU60 keyboard using the QMK build environment. It assumes that the QMK build environment is already set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/dztech/tofu60/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake dztech/tofu60:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Keyboard Firmware - QMK\nDESCRIPTION: This command flashes the compiled firmware onto the RAMA WORKS M65-BX keyboard using the QMK flash tool. It uploads the firmware to the keyboard's microcontroller, enabling the custom keymap and functionality.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wilba_tech/rama_works_m65_bx/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake wilba_tech/rama_works_m65_bx:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware to TAN67 PCB\nDESCRIPTION: This command flashes the built firmware onto the TAN67 keyboard.  It requires the QMK build environment and a compatible flashing tool. Ensure the keyboard is in the correct bootloader mode for flashing to succeed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/pangorin/tan67/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake pangorin/tan67:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Pteron56 Firmware\nDESCRIPTION: This command flashes the compiled firmware onto the Pteron56 keyboard. It requires the keyboard to be in bootloader mode and uses the QMK flashing tools to upload the firmware to the microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kraken_jones/pteron56/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake pteron56:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building TONE_rev2 Firmware\nDESCRIPTION: This command builds the default firmware for the TONE_rev2 keyboard. It requires the QMK build environment to be set up beforehand.  The output is a .hex file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/peranekofactory/tone/rev2/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake peranekofactory/tone:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware for IDOBAO Montex V2 (QMK)\nDESCRIPTION: This command compiles and flashes the default QMK firmware to the IDOBAO Montex V2 keyboard. It requires a properly configured QMK build environment and a connected keyboard in flashable mode. This assumes the `dfu-util` tool is available and configured.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/idobao/montex/v2/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake idobao/montex/v2:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware to Stellaron TKL\nDESCRIPTION: This command flashes the built firmware to the Stellaron TKL keyboard. It extends the build command with the `:flash` target, triggering the flashing process after the build. The target is `zeix/acidandco/stellaron:default:flash`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/zeix/acidandco/stellaron/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake zeix/acidandco/stellaron:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing ATSET AT6 Firmware\nDESCRIPTION: This command flashes the default firmware onto the ATSET AT6 keyboard using the QMK build environment. It requires the keyboard to be in bootloader mode. This command combines the build and flash steps.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/atset/at1/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake atset/at6:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building the 5keys Keyboard (QMK)\nDESCRIPTION: This command builds the default keymap for the 5keys keyboard. It assumes that the QMK build environment has already been set up.  The build process compiles the keymap and firmware for the specified keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/5keys/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake 5keys:default\n```\n\n----------------------------------------\n\nTITLE: Flashing XO87 Firmware\nDESCRIPTION: This command flashes the compiled firmware onto the XO87 solderable keyboard. It combines the build and flash steps using the QMK build system. It assumes the QMK build environment is set up and the keyboard is connected and in a flashable state.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/monstargear/xo87/solderable/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake monstargear/xo87/solderable:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing the labyrinth75 keyboard\nDESCRIPTION: This command compiles and flashes the default keymap to the labyrinth75 keyboard. It requires the QMK build environment to be set up and a compatible flashing tool to be configured.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/labyrinth75/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake labyrinth75:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Keyboard Firmware with QMK\nDESCRIPTION: This command builds and flashes the default firmware for the latincompass/latin17rgb keyboard.  It builds the firmware using the QMK make system, and then flashes it onto the keyboard using the appropriate flashing tool.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/latincompass/latin17rgb/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake latincompass/latin17rgb:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building ScottoAlp Firmware with QMK Make\nDESCRIPTION: This command builds the default keymap for the ScottoAlp keyboard. It requires the QMK build environment to be set up correctly, including the necessary dependencies and tools. The output will be a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/scottokeebs/scottoalp/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/jscotto/scottoalp:default\n```\n\n----------------------------------------\n\nTITLE: Building TKL-FF Keyboard Firmware - QMK\nDESCRIPTION: This command builds the default keymap for the TKL-FF keyboard.  It requires a correctly configured QMK build environment. The output will be a .hex or .bin file ready to be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/rmi_kb/tkl_ff/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake rmi_kb/tkl_ff:default\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for gl516/xr63gl Keyboard\nDESCRIPTION: This command compiles the default keymap for the gl516/xr63gl keyboard using the QMK build environment. It assumes that the QMK build environment is already set up. The command generates a firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/gl516/xr63gl/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake gl516/xr63gl:default\n```\n\n----------------------------------------\n\nTITLE: Flashing suika83opti with QMK\nDESCRIPTION: This command builds the default keymap for the suika83opti keyboard and then flashes the resulting firmware to the keyboard. It assumes the QMK build environment is set up and the necessary flashing tools are installed. The keyboard must be in bootloader mode for the flashing to succeed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/suikagiken/suika83opti/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake suikagiken/suika83opti:default:flash\n```\n\n----------------------------------------\n\nTITLE: Making default firmware for Valor FRL TKL in QMK\nDESCRIPTION: This command is used to build the default firmware for the Valor FRL TKL keyboard. It requires the QMK build environment to be set up beforehand.  The command compiles the keyboard layout and keymap specified in the `xelus/valor_frl_tkl/rev1:default` directory.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/xelus/valor_frl_tkl/rev1/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake xelus/valor_frl_tkl/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Building Firmware with Make\nDESCRIPTION: This command builds the default firmware for the EQUATOR keyboard. It requires the QMK build environment to be set up correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/rmi_kb/equator/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake rmi_kb/equator:default\n```\n\n----------------------------------------\n\nTITLE: Building WT75-C Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the wilba_tech/wt75_c keyboard using the QMK build environment. It assumes that the QMK build environment has already been set up. This command will generate a .hex or .bin file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wilba_tech/wt75_c/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake wilba_tech/wt75_c:default\n```\n\n----------------------------------------\n\nTITLE: Building N-E-ISO with QMK\nDESCRIPTION: This command builds the default keymap for the N-E-ISO macropad using the QMK firmware build environment. It assumes that the QMK build environment is already set up and configured.  The resulting firmware can then be flashed onto the macropad's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/sck/neiso/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake sck/neiso:default\n```\n\n----------------------------------------\n\nTITLE: Compiling Snampad Firmware with QMK\nDESCRIPTION: This command compiles the Snampad firmware with the default keymap using the QMK build environment. It requires the QMK build environment to be properly set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/snampad/readme.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmake snampad:default\n```\n\n----------------------------------------\n\nTITLE: Compiling BOX75 Default Keymap - Makefile\nDESCRIPTION: This command compiles the default keymap for the BOX75 keyboard using the QMK build environment. It leverages the `make` command with the `box75:default` target. Ensure the QMK build environment is properly set up before executing this command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/box75/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake box75:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Unison Firmware with QMK\nDESCRIPTION: This command flashes the built firmware onto the Unison keyboard using the QMK build environment. It requires the keyboard to be in bootloader mode.  The reset switch on the underside of the keyboard can be used to enter bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/unison/v04/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake unison:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing QMK Firmware to Keychron Q65\nDESCRIPTION: This command compiles and flashes the default QMK firmware for the Keychron Q65 keyboard with ANSI encoder layout. It uses the 'make' command with the target specified as 'keychron/q65/ansi_encoder:default:flash'. This command requires the QMK environment and appropriate flashing tools to be set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keychron/q65/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake keychron/q65/ansi_encoder:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Protozoa P01 Keyboard Firmware\nDESCRIPTION: This command builds the default keymap for the Protozoa P01 keyboard. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/protozoa/p01/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake protozoa/p01:default\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for RF R1 8-9Xu with QMK\nDESCRIPTION: This command builds the QMK firmware for the RF R1 8-9Xu keyboard with the default keymap. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cipulot/rf_r1_8_9xu/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake cipulot/rf_r1_8_9xu:default\n```\n\n----------------------------------------\n\nTITLE: Building Nearfield Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the Nearfield keyboard using the QMK build environment. It assumes that the QMK build environment has been set up correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cannonkeys/nearfield/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake nearfield:default\n```\n\n----------------------------------------\n\nTITLE: Defining Mousekey Wheel Delay\nDESCRIPTION: Defines the delay for mouse wheel scrolling, influencing how quickly the wheel scrolls after a mouse key is pressed. Adjusts scroll sensitivity.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/config_options.md#_snippet_85\n\nLANGUAGE: C\nCODE:\n```\n#define MOUSEKEY_WHEEL_DELAY 0\n```\n\n----------------------------------------\n\nTITLE: Building the Star75 Keyboard Firmware\nDESCRIPTION: This command is used to build the firmware for the Star75 keyboard with the default keymap. It requires the QMK build environment to be set up correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/star75/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake star75:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Practice 60 Firmware with QMK\nDESCRIPTION: This command flashes the compiled firmware onto the Practice 60 keyboard. It relies on the QMK build environment and requires the keyboard to be in a flashable state.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cannonkeys/practice60/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake cannonkeys/practice60:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Firmware with Make\nDESCRIPTION: This command builds the default firmware for the mokey/mokey12x2 keyboard. It requires a properly set up QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mokey/mokey12x2/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake mokey/mokey12x2:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Rena Keyboard Firmware\nDESCRIPTION: This command flashes the compiled QMK firmware onto the Rena keyboard. It uses the 'make' command with the 'flash' target to upload the firmware to the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/meetlab/rena/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake meetlab/rena:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Default Firmware - Makefile\nDESCRIPTION: This command builds the default firmware for the Polilla keyboard's revision 1 using the QMK build environment. It assumes the build environment has been set up according to QMK documentation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/polilla/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake polilla/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Compiling willoucom/keypad Firmware (QMK)\nDESCRIPTION: This command compiles the QMK firmware for the willoucom/keypad keyboard with the default keymap. It requires the QMK build environment to be set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/willoucom/keypad/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nqmk compile -kb willoucom/keypad -km default\n```\n\n----------------------------------------\n\nTITLE: Building MT84RGB Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the MT84RGB keyboard. It assumes that the QMK build environment has already been set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mt/mt84/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake mt/mt84:default\n```\n\n----------------------------------------\n\nTITLE: Building MMKZOO65 Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the MMKZOO65 keyboard using the QMK build environment. It assumes the QMK build environment is already set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mmkzoo65/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake mmkzoo65:default\n```\n\n----------------------------------------\n\nTITLE: Building M80S Firmware\nDESCRIPTION: This command builds the QMK firmware for the Mode Eighty M80S keyboard with the default keymap. It requires a correctly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mode/m80v1/m80s/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake mode/eighty/m80s:default # Soldered\n```\n\n----------------------------------------\n\nTITLE: Flashing QMK Firmware to sandbox keyboard\nDESCRIPTION: This command flashes the pre-built or newly built QMK Firmware onto the sandbox keyboard. It programs the firmware image onto the keyboard's microcontroller, updating its functionality.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/dailycraft/sandbox/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake dailycraft/sandbox:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Chocofly Keyboard Firmware\nDESCRIPTION: This command builds and flashes the default firmware to the Chocofly keyboard (v1).  It depends on the QMK build environment being set up correctly and requires a compatible flashing tool. It builds the firmware, then uses the configured tool to upload it to the microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/chocofly/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake chocofly/v1:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Keyboard Firmware (QMK)\nDESCRIPTION: This command builds and flashes the firmware for the DeskDaily Conde60 keyboard with the default keymap. It requires a properly configured QMK build environment and a connected keyboard in a flashable state. This will overwrite the existing firmware on the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/nightly_boards/conde60/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake nightly_boards/conde60:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware to Keeb For Mom\nDESCRIPTION: This command flashes the compiled firmware to the Keeb For Mom keyboard. It assumes that the build environment is set up correctly and that the keyboard is in a state where it can receive the new firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keebformom/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake keebformom:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware to Shapeshifter 4060\nDESCRIPTION: Flashes the compiled firmware to the Shapeshifter 4060 keyboard. This command uploads the firmware to the keyboard's microcontroller. It requires a properly configured QMK build environment and a connected keyboard in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/shapeshifter4060/readme.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmake shapeshifter4060:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing ScottoSplit Firmware\nDESCRIPTION: Flashes the built firmware to the ScottoSplit keyboard. Requires a properly configured QMK build environment and a connected keyboard in a flashable state. This command combines the build and flash steps.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/scottokeebs/scottosplit/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/jscotto/scottosplit:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing BKF keyboard firmware\nDESCRIPTION: This command builds and flashes the default keymap to the BKF keyboard using the QMK build environment and a suitable flashing tool. The `flash` target combines the build process with the flashing operation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/drhigsby/bkf/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake drhigsby/bkf:default:flash\n```\n\n----------------------------------------\n\nTITLE: Making Aurora Lily58 with default configuration\nDESCRIPTION: This command builds the firmware for the Aurora Lily58 keyboard with the default configuration. It requires a properly set up QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/splitkb/aurora/lily58/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake splitkb/aurora/lily58/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Flashing the Element G67 Hotswap Keyboard Firmware\nDESCRIPTION: This command flashes the built firmware to the Element G67 Hotswap keyboard using the QMK build environment. It depends on the keyboard being connected and in a flashable state.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/neokeys/g67/element_hs/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake neokeys/g67/element_hs:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Plaid Keyboard Firmware\nDESCRIPTION: This command flashes the compiled firmware onto the Plaid keyboard. It uses the appropriate tools and configurations to upload the firmware to the ATMEGA328p microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/dm9records/plaid/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake dm9records/plaid:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building the keyboard firmware using QMK\nDESCRIPTION: This command builds the firmware for the ThumbsUp! v9 keyboard with a ProMicro controller and a 4x12 layout, using the default keymap. It requires the QMK build environment to be set up correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/thumbsup/rev9_promicro_4x12/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake thumbsup/rev9_promicro_4x12:default\n```\n\n----------------------------------------\n\nTITLE: Building the EC 66x keyboard firmware\nDESCRIPTION: This command builds the default firmware for the cipulot/ec_66x keyboard using the QMK build environment. It compiles the keyboard layout and creates a firmware file that can be flashed onto the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cipulot/ec_65x/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake cipulot/ec_66x:default\n```\n\n----------------------------------------\n\nTITLE: Flashing ecila Keyboard Firmware with QMK\nDESCRIPTION: This command builds and flashes the default keymap for the ecila keyboard using the QMK firmware build environment. It requires a properly configured QMK environment and a connected keyboard in a flashable state.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mincedshon/ecila/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake mincedshon/ecila:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Synth Labs Solo Firmware (QMK)\nDESCRIPTION: This command builds and flashes the default firmware to the Synth Labs Solo macropad using QMK. It requires the QMK build environment to be configured and the necessary flashing tools to be installed and accessible.  The target device must be connected and in a state ready to receive the firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/synthlabs/solo/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake synthlabs/solo:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing QMK Firmware to KLEC-02\nDESCRIPTION: This command builds and flashes the QMK firmware to the KLEC-02 keyboard with the default keymap. It requires a properly configured QMK build environment and a connected keyboard in bootloader mode. The command uses dfu-programmer or similar tools to upload the firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/takashicompany/klec_02/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake takashicompany/klec_02:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building QMK Firmware for Valor FRL TKL Rev2.1\nDESCRIPTION: This snippet shows how to build the default and VIA-enabled firmware for the Valor FRL TKL Rev2.1 keyboard using the QMK build environment. It assumes that the QMK build environment has already been set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/xelus/valor_frl_tkl/rev2_1/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake xelus/valor_frl_tkl/rev2_1:default\nmake xelus/valor_frl_tkl/rev2_1:via\n```\n\n----------------------------------------\n\nTITLE: Flashing Zepsody Keyboard Firmware (QMK)\nDESCRIPTION: This command builds and flashes the default firmware for the Zepsody keyboard to the device. It uses the QMK make system to both compile the firmware and then flash it using a compatible flashing tool.  The flashing tool used depends on the bootloader and hardware configuration.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechlovin/zed1800/zepsody/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake mechlovin/zed1800/zepsody:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing the YMDK YMD21 v2 Firmware\nDESCRIPTION: This command flashes the default firmware to the YMDK YMD21 v2 keyboard. It assumes that the build environment is configured correctly and that the keyboard is connected.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ymdk/ymd21/v2/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake ymdk/ymd21/v2:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Firmware: QMK Make Command\nDESCRIPTION: This command builds the default firmware for the EnvKB MCRO keyboard using the QMK build environment. It compiles the source code into a firmware image ready to be flashed onto the device. Requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/enviousdesign/mcro/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake enviousdesign/mcro:default\n```\n\n----------------------------------------\n\nTITLE: Flashing firmware to Synth Labs 060\nDESCRIPTION: This command builds and flashes the default firmware to the Synth Labs 060 keyboard using QMK Firmware. It requires the QMK build environment to be configured and a compatible flashing tool to be installed and accessible. The keyboard must be connected to the computer and potentially in bootloader mode depending on the flashing tool used.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/synthlabs/060/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake synthlabs/060:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing rb86 Keyboard Firmware\nDESCRIPTION: This command flashes the compiled QMK firmware onto the rb86 keyboard. It requires the QMK build environment to be properly set up and the keyboard to be connected in bootloader mode. The command uses the dfu-programmer or similar tool to upload the .hex file to the keyboard's Elite-C controller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ryanbaekr/rb86/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake ryanbaekr/rb86:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Andean Condor Keyboard Firmware (QMK)\nDESCRIPTION: This command compiles and flashes the QMK firmware for the Andean Condor keyboard with the default keymap. It requires a properly set up QMK build environment and a connected keyboard in bootloader mode. The command attempts to automatically flash the compiled firmware to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/andean_condor/readme.md#_snippet_2\n\nLANGUAGE: make\nCODE:\n```\nmake andean_condor:default:flash\n```\n\n----------------------------------------\n\nTITLE: PS/2 Mouse Movement Hook (C)\nDESCRIPTION: Example user-defined function that processes mouse movement before sending to the host.  This example should be defined in your keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/ps2_mouse.md#_snippet_18\n\nLANGUAGE: c\nCODE:\n```\nvoid ps2_mouse_moved_user(report_mouse_t *mouse_report);\n```\n\n----------------------------------------\n\nTITLE: Flashing Gin V2 Firmware (Makefile)\nDESCRIPTION: This command flashes the built firmware onto the Gin V2 keyboard. It requires the QMK build environment and a compatible bootloader on the keyboard.  The keyboard must be connected to the computer.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ocean/gin_v2/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake ocean/gin_v2:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for banime40 Keyboard\nDESCRIPTION: This command builds the default firmware for the banime40 keyboard using the QMK build environment.  It specifies the keyboard layout and generates the firmware file for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/sporewoh/banime40/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake sporewoh/banime40:default\n```\n\n----------------------------------------\n\nTITLE: Building the Joypad Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the Joypad keyboard using the QMK build environment. It assumes the QMK build environment has been set up correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/swiftrax/joypad/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake handwired/swiftrax/joypad:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Right Half of K8split Keyboard\nDESCRIPTION: This command flashes the right half of the K8split keyboard with the 'right' keymap. This assumes that the QMK build environment has already been set up and the keyboard is connected correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/k8split/readme.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmake handwired/k8split:right:flash\n```\n\n----------------------------------------\n\nTITLE: Building Boston Firmware\nDESCRIPTION: This command compiles the default keymap for the Boston keyboard using the QMK build environment. It requires that the QMK build environment is properly set up before execution.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/boston/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake boston:default\n```\n\n----------------------------------------\n\nTITLE: Building Tripel Keyboard Firmware\nDESCRIPTION: This command builds the firmware for the Tripel keyboard with the Pro-Micro mounted on the right PCB using the default keymap. It uses the `make` command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/peej/tripel/right/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake peej/tripel/right:default\n```\n\n----------------------------------------\n\nTITLE: Flashing QMK Firmware to Let's Split v3\nDESCRIPTION: This command builds and flashes the QMK firmware to the Let's Split v3 keyboard using the default keymap.  It requires a properly configured QMK build environment and a connected keyboard in bootloader mode. The output is a flashed keyboard with the new firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ziptyze/lets_split_v3/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake ziptyze/lets_split_v3:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Solheim68 Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the Solheim68 keyboard using the QMK build environment. It specifies the keyboard layout (evyd13/solheim68) and the keymap (default).\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/evyd13/solheim68/readme.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmake evyd13/solheim68:default\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for Tinny50 RGB\nDESCRIPTION: This command builds the default firmware for the idyllic/tinny50_rgb keyboard. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/idyllic/tinny50_rgb/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake idyllic/tinny50_rgb:default\n```\n\n----------------------------------------\n\nTITLE: Building keyten kt60-M Firmware\nDESCRIPTION: This command builds the default firmware for the keyten kt60-M keyboard. It assumes the QMK build environment is already set up according to the QMK documentation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keyten/kt60_m/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake keyten/kt60_m:default\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for Kbd0 Curve0 60 ANSI\nDESCRIPTION: This command builds the default firmware for the kbd0/curve0/60_ansi keyboard.  It requires a properly configured QMK build environment. The resulting firmware can then be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kbd0/curve0/60_ansi/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake kbd0/curve0/60_ansi:default\n```\n\n----------------------------------------\n\nTITLE: Building CONSTELLATION firmware\nDESCRIPTION: This command builds the default firmware for the CONSTELLATION keyboard using the QMK build environment. It assumes that the QMK build environment has already been set up. The command compiles the necessary source files and generates the firmware binary that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/aeboards/constellation/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake aeboards/constellation:default\n```\n\n----------------------------------------\n\nTITLE: Building the Firmware\nDESCRIPTION: This command builds the default firmware for the evancookaudio/sleepingdinosaur keyboard. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/evancookaudio/sleepingdinosaur/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake evancookaudio/sleepingdinosaur:default\n```\n\n----------------------------------------\n\nTITLE: Flashing FaceW Firmware\nDESCRIPTION: This command flashes the built firmware to the FaceW keyboard using the QMK build environment. It requires that the keyboard is connected to the computer and in a flashable state.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/facew/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake facew:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Tripel Keyboard Firmware\nDESCRIPTION: This command flashes the compiled firmware to the Tripel keyboard with the Pro-Micro mounted on the right PCB using the default keymap.  It uses the `make` command with the `flash` target.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/peej/tripel/right/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake peej/tripel/right:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building QMK Firmware\nDESCRIPTION: This command builds the QMK firmware for the handwired Preonic keyboard with the riblee_f411 configuration using the default keymap. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/riblee_f411/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake handwired/riblee_f411:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Example for Redragon K617 - Shell\nDESCRIPTION: This command is used to flash the built QMK firmware onto the Redragon K617 keyboard. It requires the keyboard to be in bootloader mode. The command programs the firmware to the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/rd_61_qmk/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake handwired/rd_61_qmk:default:flash\n```\n\n----------------------------------------\n\nTITLE: Compiling and Flashing Firmware\nDESCRIPTION: This command compiles the specified keymap for the Lets Split Vitamins rev1 keyboard and then flashes it to the connected half using `avrdude`. It depends on the QMK build environment and `avrdude` being correctly configured.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/vitamins_included/rev1/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake lets_split_vitamins/rev1:default:avrdude\n```\n\n----------------------------------------\n\nTITLE: Building Oddball with ADNS Sensor\nDESCRIPTION: This command builds the Oddball keyboard firmware with the default ADNS9800 sensor. It requires a properly configured QMK build environment. The output will be the compiled firmware ready to be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/oddball/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake oddball/v2:default\n```\n\n----------------------------------------\n\nTITLE: Building the Work Louder Nano Firmware\nDESCRIPTION: This command builds the default firmware for the Work Louder Nano keyboard. It compiles the keyboard's keymap and other configurations into a firmware file that can be flashed onto the device.  A working QMK build environment is required.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/work_louder/nano/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake work_louder/nano:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware to SBL Keyboard\nDESCRIPTION: This command builds and flashes the default firmware to the SBL keyboard. It uses the `make` command with the target specified as `dnworks/sbl:default:flash`. This assumes the QMK build environment is already set up and the necessary flashing tools are installed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/dnworks/sbl/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake dnworks/sbl:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing MF-17 Keyboard Firmware with QMK\nDESCRIPTION: This command flashes the QMK firmware onto the MF-17 keyboard with the default keymap. It extends the build command by adding `:flash` to the target.  Requires a correctly set up QMK build environment and a connected keyboard in a flashable state.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/magic_force/mf17/readme.md#_snippet_1\n\nLANGUAGE: makefile\nCODE:\n```\nmake magic_force/mf17:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Ergo68 Keyboard Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the yushakobo/ergo68 keyboard using the QMK build environment. It compiles the keymap and generates the firmware file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/yushakobo/ergo68/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake yushakobo/ergo68:default\n```\n\n----------------------------------------\n\nTITLE: Building Wraith Keyboard Firmware (QMK)\nDESCRIPTION: This command builds the QMK firmware for the Wraith keyboard with the default keymap. It assumes that the QMK build environment has already been set up according to the official QMK documentation. The command compiles the necessary source code and generates a firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cutie_club/wraith/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake cutie_club/wraith:default\n```\n\n----------------------------------------\n\nTITLE: Building Ergo33 keyboard with QMK Firmware using make\nDESCRIPTION: This command builds the Ergo33 keyboard firmware using the QMK build environment. It compiles the `tunks/ergo33` keyboard with the `default` keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/tunks/ergo33/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake tunks/ergo33:default\n```\n\n----------------------------------------\n\nTITLE: Building Signature65 Firmware\nDESCRIPTION: This snippet shows how to build the default firmware for the Signature65 keyboard using the QMK build environment. It assumes the QMK build environment is already set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/projectkb/signature65/readme.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmake projectkb/signature65:default\n```\n\n----------------------------------------\n\nTITLE: Flashing arc60 firmware with make\nDESCRIPTION: This command flashes the built firmware to the arc60 keyboard using the QMK build environment. It builds the default firmware and then flashes it to the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/vertex/arc60/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake vertex/arc60:default:flash\n```\n\n----------------------------------------\n\nTITLE: Compile QMK Firmware\nDESCRIPTION: This command compiles the QMK firmware for a specified keyboard and keymap. The `-kb` flag specifies the keyboard layout and the `-km` flag specifies the keymap to use.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/newbs_getting_started.md#_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nqmk compile -kb <keyboard> -km default\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for keyten kt60HS-T\nDESCRIPTION: This command compiles the QMK firmware for the keyten kt60HS-T keyboard with the default keymap. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keyten/kt60hs_t/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake keyten/kt60hs_t:default\n```\n\n----------------------------------------\n\nTITLE: Building Kudox Game Keyboard Firmware\nDESCRIPTION: This command builds the firmware for the Kudox Game keyboard, specifically for revision 2 with the default keymap. It uses the QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kumaokobo/kudox_game/readme.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmake kumaokobo/kudox_game/rev2:default\n```\n\n----------------------------------------\n\nTITLE: Building the keyboard firmware\nDESCRIPTION: This command compiles the default keymap for the handwired/aim65 keyboard. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/aim65/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake handwired/aim65:default\n```\n\n----------------------------------------\n\nTITLE: Flashing QMK Firmware\nDESCRIPTION: This command flashes the compiled QMK firmware to the keyboard. It requires the QMK build environment and appropriate drivers to be installed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/rabijl/rotary_numpad/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nqmk flash -kb handwired/rabijl/rotary_numpad -km default\n```\n\n----------------------------------------\n\nTITLE: Get Programmable Button Report in QMK\nDESCRIPTION: This C function retrieves the current state of all programmable buttons as a bitmask. Each bit in the returned value corresponds to a button's state.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/programmable_button.md#_snippet_8\n\nLANGUAGE: c\nCODE:\n```\nuint32_t programmable_button_get_report(void)\n```\n\n----------------------------------------\n\nTITLE: Flashing Right Side of Split Keyboard\nDESCRIPTION: This command flashes the right side firmware to the split keyboard. It requires `qmk` command line tool. It sets the EE_HANDS to right.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/stront/readme.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nqmk flash -kb stront -km default -bl uf2-split-right\n```\n\n----------------------------------------\n\nTITLE: Custom Backlight Driver Configuration (Make)\nDESCRIPTION: This snippet shows how to select the Custom backlight driver in `rules.mk`. This option allows users to implement their own backlight control logic.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/backlight.md#_snippet_6\n\nLANGUAGE: make\nCODE:\n```\nBACKLIGHT_DRIVER = custom\n```\n\n----------------------------------------\n\nTITLE: Enabling LEDs in rules.mk\nDESCRIPTION: This line adds LED support to the UT47 firmware by defining the LED_ENABLE variable in the rules.mk file. This method is an alternative to passing LED_ENABLE on the command line.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/40percentclub/ut47/readme.md#_snippet_2\n\nLANGUAGE: makefile\nCODE:\n```\nLED_ENABLE = yes\n```\n\n----------------------------------------\n\nTITLE: Building Sinc Keyboard Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Keebio Sinc Rev1 keyboard. It uses the QMK build environment to compile the firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keebio/sinc/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake keebio/sinc/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Flashing ALU84 Keyboard Firmware\nDESCRIPTION: This command flashes the built firmware to the ALU84 keyboard. It depends on the QMK build environment and appropriate flashing tools being set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechkeys/alu84/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake mechkeys/alu84:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building JRIS65 Firmware - Makefile\nDESCRIPTION: This command builds the default firmware for the JRIS65 hotswap keyboard using the QMK build environment. It compiles the keymap and firmware for the specified target.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mykeyclub/jris65/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake mykeyclub/jris65/hotswap:default\n```\n\n----------------------------------------\n\nTITLE: Building Rartland Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the Rartland keyboard using the QMK build environment. It compiles the keyboard layout and generates the firmware image.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/rart/rartland/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake rart/rartland:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Gentleman65 Firmware - Make Flash Command\nDESCRIPTION: This command flashes the compiled firmware onto the Gentleman65 keyboard. The board must be in bootloader mode before running this command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/jkeys_design/gentleman65/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake jkeys_design/gentleman65:default:flash\n```\n\n----------------------------------------\n\nTITLE: Unregister Programmable Button in QMK\nDESCRIPTION: This C function unsets the state of a button and immediately sends the updated report. The `index` argument (0-31) specifies the button to release.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/programmable_button.md#_snippet_5\n\nLANGUAGE: c\nCODE:\n```\nvoid programmable_button_unregister(uint8_t index)\n```\n\n----------------------------------------\n\nTITLE: Making the default keymap - QMK\nDESCRIPTION: This command builds the default keymap for the cipulot/ec_tkl_x keyboard using the QMK firmware. It prepares the firmware for flashing onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cipulot/ec_tkl_x/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake cipulot/ec_tkl_x:default\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for infinity81 with QMK\nDESCRIPTION: This command builds the default firmware for the infinity81 keyboard using the QMK build environment. It requires the QMK build environment to be properly set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ada/infinity81/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake ada/infinity81:default\n```\n\n----------------------------------------\n\nTITLE: Building Ziggurat Firmware (QMK)\nDESCRIPTION: This command builds the default keymap for the Ziggurat keyboard using the QMK firmware build system. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ziggurat/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake ziggurat:default\n```\n\n----------------------------------------\n\nTITLE: Building the keyboard firmware\nDESCRIPTION: This command builds the firmware for the EC Pro X JIS keyboard with the default keymap. It requires a properly set up QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cipulot/ec_prox/jis/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake cipulot/ec_prox/jis:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Karn 2 Keyboard Firmware\nDESCRIPTION: This command flashes the compiled QMK Firmware onto the Karn keyboard.  It requires a configured QMK build environment and a connected keyboard in a flashable state.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/karn/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake karn:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Kay65 Firmware with Make\nDESCRIPTION: This command flashes the default firmware to the Kay65 keyboard. It requires a properly configured QMK build environment and a connected keyboard in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechlovin/kay65/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake mechlovin/kay65:default:flash\n```\n\n----------------------------------------\n\nTITLE: Defining Oneshot Timeout\nDESCRIPTION: Defines the timeout duration (in milliseconds) for oneshot keys. If the key is not used within this time, it will be deactivated.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/config_options.md#_snippet_56\n\nLANGUAGE: C\nCODE:\n```\n#define ONESHOT_TIMEOUT 300\n```\n\n----------------------------------------\n\nTITLE: Building the Firmware\nDESCRIPTION: This snippet demonstrates how to build the firmware for the nordic65 keyboard using the QMK build system. It specifies the keyboard, revision, and keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kbnordic/nordic65/rev_a/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake kbnordic/nordic65/rev_a:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Waterfowl Keyboard Firmware\nDESCRIPTION: This command flashes the default firmware onto the Waterfowl keyboard. It requires a configured QMK build environment and a connected keyboard in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/waterfowl/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake waterfowl:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Budgy Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the Budgy keyboard. It utilizes the QMK make system and assumes a properly configured build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/budgy/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake budgy:default\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for Monsgeek M6\nDESCRIPTION: This command builds the default firmware for the Monsgeek M6 keyboard using the QMK build environment. It requires the QMK build environment to be properly set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/monsgeek/m6/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake monsgeek/m6:default\n```\n\n----------------------------------------\n\nTITLE: Building the Firmware\nDESCRIPTION: This command builds the default firmware for the 3keyecosystem/2key2 keyboard. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/3keyecosystem/2key2/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake 3keyecosystem/2key2:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Keyboard Firmware - QMK\nDESCRIPTION: Flashes the compiled firmware onto the IDOBAO Abacus ID42 keyboard. Requires the QMK build environment and a connected keyboard in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/idobao/id42/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake idobao/id42:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Meow65 Firmware with QMK\nDESCRIPTION: This command flashes the default firmware onto the Meow65 keyboard.  It requires the QMK build environment and a connected keyboard in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/meow65/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake meow65:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Instant60 Keyboard Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the Instant60 keyboard using the QMK build environment. It relies on the QMK build tools being properly configured.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cannonkeys/instant60/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake cannonkeys/instant60:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Rhino Keyboard Firmware with Make\nDESCRIPTION: This command flashes the compiled firmware onto the Rhino keyboard using the QMK make system. It requires a connected and configured flashing environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keyprez/rhino/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake keyprez/rhino:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware\nDESCRIPTION: This command flashes the built firmware onto the Bad Wings keyboard. It depends on the QMK build environment and appropriate flashing tools being configured.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/hazel/bad_wings/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake hazel/bad_wings:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building the Paws 60 keyboard\nDESCRIPTION: This command builds the default keymap for the Paws 60 keyboard using the QMK build environment. It compiles the keymap and firmware for the specified keyboard and layout.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/horrortroll/paws60/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake horrortroll/paws60:default\n```\n\n----------------------------------------\n\nTITLE: Building Aplx2 Keyboard Firmware using QMK\nDESCRIPTION: This command builds the default keymap for the Aplx2 keyboard using the QMK firmware build environment. It requires the QMK build environment to be set up correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/aplx2/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/aplx2:default\n```\n\n----------------------------------------\n\nTITLE: Making Planck THK keymap\nDESCRIPTION: This command builds the 'thk' keymap for the Planck THK keyboard. It requires the QMK build environment to be set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/planck/thk/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake planck/thk:thk\n```\n\n----------------------------------------\n\nTITLE: Flashing The Q Keyboard Firmware - QMK\nDESCRIPTION: This command flashes the QMK firmware to The Q keyboard with the default keymap. It requires a properly configured QMK build environment and a connected keyboard in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/boardsource/the_q/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmke boardsource/the_q:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing the chromatonemini keyboard\nDESCRIPTION: This command flashes the compiled firmware onto the chromatonemini keyboard. It requires the QMK build environment to be set up and the board to be connected.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/chromatonemini/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake chromatonemini:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Big Switch Seat Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the keebio/bigswitchseat keyboard. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keebio/bigswitchseat/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake keebio/bigswitchseat:default\n```\n\n----------------------------------------\n\nTITLE: Building THE60Rev2 Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the THE60Rev2 keyboard using QMK. It compiles the keyboard layout and firmware into a flashable image.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/lazydesigners/the60/rev2/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake lazydesigners/the60/rev2:default\n```\n\n----------------------------------------\n\nTITLE: Setting LED Matrix Effect Mode in QMK (C)\nDESCRIPTION: This function sets the currently running LED matrix effect. It accepts the effect mode as input and saves it to EEPROM.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/led_matrix.md#_snippet_18\n\nLANGUAGE: C\nCODE:\n```\nvoid led_matrix_mode(uint8_t mode)\n```\n\n----------------------------------------\n\nTITLE: Building Ortho 60 Firmware\nDESCRIPTION: This command builds the default firmware for the Ortho 60 keyboard using the QMK build environment. It requires the QMK build environment to be set up properly beforehand.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cannonkeys/ortho60/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake cannonkeys/ortho60:default\n```\n\n----------------------------------------\n\nTITLE: Register Programmable Button in QMK\nDESCRIPTION: This C function sets the state of a button and immediately sends the updated report. The `index` argument (0-31) specifies the button to press.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/programmable_button.md#_snippet_4\n\nLANGUAGE: c\nCODE:\n```\nvoid programmable_button_register(uint8_t index)\n```\n\n----------------------------------------\n\nTITLE: Building AT101(-ish) Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the handwired/at101ish keyboard using the QMK build environment. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/at101ish/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake handwired/at101ish:default\n```\n\n----------------------------------------\n\nTITLE: Building firmware for NovelPad using QMK\nDESCRIPTION: This snippet shows how to build the default firmware for the NovelPad keyboard using the QMK build environment. It requires a properly configured QMK environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/novelkeys/novelpad/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake novelkeys/novelpad:default\n```\n\n----------------------------------------\n\nTITLE: Building Skakunm Dactyl Firmware using QMK\nDESCRIPTION: This command builds the default firmware for the Skakunm Dactyl keyboard using the QMK build environment. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/skakunm_dactyl/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake handwired/skakunm_dactyl:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Mokulua Keyboard Firmware\nDESCRIPTION: This command builds and flashes the default firmware for the Mokulua keyboard. It requires the QMK build environment and a compatible flashing tool.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechwild/mokulua/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake mechwild/mokulua:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Console Keyboard Firmware with QMK\nDESCRIPTION: This command compiles the QMK firmware for the handwired/consolekeyboard/30key keyboard with the default keymap. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/consolekeyboard/30key/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake handwired/consolekeyboard/30key:default\n```\n\n----------------------------------------\n\nTITLE: Flashing the Chiri CE Keyboard Firmware\nDESCRIPTION: This command flashes the built firmware onto the Chiri CE keyboard. It depends on the QMK build environment and a connected keyboard in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keebio/chiri_ce/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake keebio/chiri_ce/rev1:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building nano.slider firmware\nDESCRIPTION: This command builds the default firmware for the nano.slider keyboard. It uses the QMK build system and requires a properly configured build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keebwerk/nano_slider/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake keebwerk/nano_slider:default\n```\n\n----------------------------------------\n\nTITLE: Building ScottoNum Firmware\nDESCRIPTION: This command builds the default firmware for the ScottoNum keyboard using the QMK build environment. It assumes the build environment is already set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/scottokeebs/scottonum/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake handwired/scottokeebs/scottonum:default\n```\n\n----------------------------------------\n\nTITLE: Set Programmable Button Report in QMK\nDESCRIPTION: This C function sets the programmable button report directly using a 32-bit integer as a bitmask. Each bit corresponds to the state of a button.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/programmable_button.md#_snippet_9\n\nLANGUAGE: c\nCODE:\n```\nvoid programmable_button_set_report(uint32_t report)\n```\n\n----------------------------------------\n\nTITLE: Docker build command\nDESCRIPTION: This command builds a Docker image for the keymap beautifier. The Dockerfile is expected to be in the current directory.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ergodox_ez/util/keymap_beautifier/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncd QMK_GIT_REPO_dir/keyboards/ergodox_ez/util/keymap_beautifier\ndocker build -t keymapbeautifier:1.0 .\n```\n\n----------------------------------------\n\nTITLE: Register Unicode Code Point from Map Index - C\nDESCRIPTION: This function sends the Unicode code point for the given index in the `unicode_map` array. It takes a `uint8_t` index as input.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/unicode.md#_snippet_22\n\nLANGUAGE: C\nCODE:\n```\nvoid register_unicodemap(uint8_t index)\n```\n\n----------------------------------------\n\nTITLE: Decreasing Effect Speed without EEPROM (C)\nDESCRIPTION: This function decreases the LED matrix effect speed. The new speed is not written to EEPROM and is not persistent.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/led_matrix.md#_snippet_33\n\nLANGUAGE: C\nCODE:\n```\nvoid led_matrix_decrease_speed_noeeprom(void)\n```\n\n----------------------------------------\n\nTITLE: Building OSAv2 Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the OSAv2 keyboard using the QMK build environment. It requires the QMK build environment to be set up correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/viktus/osav2/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake viktus/osav2:default\n```\n\n----------------------------------------\n\nTITLE: Building QMK Firmware for CannonKeys Ripple HS\nDESCRIPTION: This command builds the default keymap for the CannonKeys Ripple HS keyboard using the QMK build environment. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cannonkeys/ripple_hs/readme.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmake cannonkeys/ripple_hs:default\n```\n\n----------------------------------------\n\nTITLE: Building Launchpad Firmware\nDESCRIPTION: This command compiles the default firmware for the Launchpad keyboard rev1. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/maple_computing/launchpad/keymaps/default_rgb/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake launchpad/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Building Rart60 Firmware (Makefile)\nDESCRIPTION: This command builds the default firmware for the Rart60 keyboard using the QMK build system.  It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/rart/rart60/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake rart/rart60:default\n```\n\n----------------------------------------\n\nTITLE: Flashing QMK Firmware\nDESCRIPTION: Flashes the compiled firmware to the Vagrant 10 keyboard using the QMK make command. This assumes the build environment is set up and the keyboard is connected.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/vagrant_10/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake vagrant_10:default:flash\n```\n\n----------------------------------------\n\nTITLE: Compile Clueboard 66 Firmware\nDESCRIPTION: This command compiles the QMK firmware for a Clueboard 66% keyboard with the default keymap.  It demonstrates how to specify the keyboard and keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/newbs_getting_started.md#_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nqmk compile -kb clueboard/66/rev3 -km default\n```\n\n----------------------------------------\n\nTITLE: Building Jane v2 Firmware\nDESCRIPTION: This command builds the default keymap for the Jane v2 keyboard using the QMK build environment. It compiles the firmware and prepares it for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/tgr/jane/v2/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake tgr/jane:default\n```\n\n----------------------------------------\n\nTITLE: Building the GTM Pad Firmware\nDESCRIPTION: This command builds the default firmware for the Grand Theft Macro Pad (GTM). It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/sck/gtm/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake sck/gtm:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Cassini Firmware\nDESCRIPTION: This command flashes the firmware to the Cassini keyboard.  It requires the QMK CLI and the keyboard to be in DFU mode. The keymap needs to be specified.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/protozoa/cassini/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake protozoa/cassini:<keymap>:flash\n```\n\n----------------------------------------\n\nTITLE: Building QMK Firmware for Day Off Keyboard\nDESCRIPTION: This command builds the QMK firmware for the Day Off keyboard with the default keymap. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/nixkeyboards/day_off/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake nixkeyboards/day_off:default\n```\n\n----------------------------------------\n\nTITLE: Building Planck Firmware\nDESCRIPTION: This command builds the default firmware for the Planck rev7 keyboard. It assumes that the build environment has been set up correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/planck/rev7/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake planck/rev7:default\n```\n\n----------------------------------------\n\nTITLE: Building Duck TC-V3 Firmware\nDESCRIPTION: This command builds the default firmware for the Duck TC-V3 keyboard. It requires setting up the QMK build environment beforehand as described in the QMK documentation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/duck/tcv3/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake duck/tcv3:default\n```\n\n----------------------------------------\n\nTITLE: Building MW80 Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the MW80 keyboard using the QMK build environment. It requires the build environment to be properly set up beforehand.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mwstudio/mw80/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake mwstudio/mw80:default\n```\n\n----------------------------------------\n\nTITLE: Defining Architecture in QMK rules.mk\nDESCRIPTION: Specifies the architecture of the MCU.  An example is `AVR8`. This influences the compiler flags and libraries used during compilation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/config_options.md#_snippet_115\n\nLANGUAGE: makefile\nCODE:\n```\nARCH = AVR8\n```\n\n----------------------------------------\n\nTITLE: Building F-Me Macropad Firmware\nDESCRIPTION: This command builds the default firmware for the F-Me Macropad using the QMK build environment. It requires the QMK build environment to be set up correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keebzdotnet/fme/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake keebzdotnet/fme:default\n```\n\n----------------------------------------\n\nTITLE: Building the PHAC Keyboard\nDESCRIPTION: This command builds the default keymap for the PHAC keyboard. It requires a properly set up QMK build environment. The command compiles the keyboard firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/phdesign/phac/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake phdesign/phac:default\n```\n\n----------------------------------------\n\nTITLE: Flashing PistachioMacroPad Firmware\nDESCRIPTION: This command flashes the default firmware onto the PistachioMacroPad keyboard using the QMK build environment. It requires a connected keyboard and the QMK flashing tools.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/rate/pistachio_mp/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake rate/pistachio_mp:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for TKLFRLNRLMLAO\nDESCRIPTION: This command builds the default firmware for the TKLFRLNRLMLAO keyboard. It requires QMK build environment to be properly set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/zicodia/tklfrlnrlmlao/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake zicodia/tklfrlnrlmlao:default\n```\n\n----------------------------------------\n\nTITLE: Building NP_minila Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the NP_minila keyboard using QMK. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/weirdo/naiping/npminila/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake weirdo/naiping/npminila:default\n```\n\n----------------------------------------\n\nTITLE: Building arc60 firmware with make\nDESCRIPTION: This command builds the default firmware for the arc60 keyboard using the QMK build environment. It targets the vertex/arc60 keyboard with the default keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/vertex/arc60/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake vertex/arc60:default\n```\n\n----------------------------------------\n\nTITLE: Defining Mousekey Time to Max\nDESCRIPTION: Defines the time it takes for mouse key speed to reach maximum speed. This governs acceleration of the cursor.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/config_options.md#_snippet_83\n\nLANGUAGE: C\nCODE:\n```\n#define MOUSEKEY_TIME_TO_MAX 60\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware with Make\nDESCRIPTION: This command builds and flashes the default firmware for the lain keyboard. It requires a configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/dm9records/lain/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake dm9records/lain:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building treadstone48 Keyboard Firmware with QMK\nDESCRIPTION: These commands are used to build the firmware for the treadstone48 keyboard using the QMK build environment. The first command builds the default configuration for the original revision, and the second command builds the default configuration for revision 2.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/marksard/treadstone48/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake marksard/treadstone48:default\n```\n\nLANGUAGE: Makefile\nCODE:\n```\nmake marksard/treadstone48/rev2:default\n```\n\n----------------------------------------\n\nTITLE: Building FRLTKL Firmware with Make\nDESCRIPTION: This command builds the default firmware for the dnworks/frltkl keyboard. It assumes that the QMK build environment has already been set up according to the QMK documentation. The output will be a .hex or .bin file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/dnworks/frltkl/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake dnworks/frltkl:default\n```\n\n----------------------------------------\n\nTITLE: Building Dharma Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the Dharma keyboard using the QMK build environment. It requires QMK Firmware to be set up and configured correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/xelus/dharma/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake xelus/dharma:default\n```\n\n----------------------------------------\n\nTITLE: Building Portal 66 keyboard firmware\nDESCRIPTION: This command builds the default firmware for the soldered version of the Portal 66 keyboard. It requires a properly set up QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/portal_66/soldered/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake portal_66/soldered:default\n```\n\n----------------------------------------\n\nTITLE: Building WestM68 QMK Firmware\nDESCRIPTION: This command builds the QMK firmware for the WestM68 keyboard with the default keymap. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/westm/westm68/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake westm/westm68:default\n```\n\n----------------------------------------\n\nTITLE: Building Felix Firmware\nDESCRIPTION: This command builds the default firmware for the Felix keyboard using the QMK build environment. It requires the QMK build environment to be set up correctly before execution.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/unikeyboard/felix/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake unikeyboard/felix:default\n```\n\n----------------------------------------\n\nTITLE: Checking LED Matrix Enabled State in QMK Firmware (C)\nDESCRIPTION: This function retrieves the current enabled state of the LED matrix. It returns `true` if the LED matrix is enabled and `false` otherwise.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/led_matrix.md#_snippet_15\n\nLANGUAGE: C\nCODE:\n```\nbool led_matrix_is_enabled(void)\n```\n\n----------------------------------------\n\nTITLE: Building SENSE75 Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the SENSE75 keyboard using the QMK build environment. It requires QMK to be properly set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/drop/sense75/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake drop/sense75:default\n```\n\n----------------------------------------\n\nTITLE: Building ARC Keyboard Firmware with QMK\nDESCRIPTION: This command compiles the QMK firmware for the ARC keyboard using the default keymap.  It requires a correctly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/shostudio/arc/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake shostudio/arc:default\n```\n\n----------------------------------------\n\nTITLE: Getting Current Effect Speed in QMK (C)\nDESCRIPTION: This function retrieves the current speed of the LED matrix effect, which is a value between 0 and 255.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/led_matrix.md#_snippet_36\n\nLANGUAGE: C\nCODE:\n```\nuint8_t led_matrix_get_speed(void)\n```\n\n----------------------------------------\n\nTITLE: Flashing Voyager Firmware\nDESCRIPTION: This command flashes the default firmware onto the Voyager keyboard. It requires the QMK build environment and a connected keyboard in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/zsa/voyager/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake zsa/voyager:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Rabbit 68 Keyboard Firmware (QMK)\nDESCRIPTION: This command builds the QMK firmware for the Rabbit 68 keyboard with the default keymap. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/rabbit/rabbit68/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake rabbit/rabbit68:default\n```\n\n----------------------------------------\n\nTITLE: Building the OSAv2 Numpad Firmware\nDESCRIPTION: This command builds the default firmware for the OSAv2 Numpad keyboard. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/viktus/osav2_numpad/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake viktus/osav2_numpad:default\n```\n\n----------------------------------------\n\nTITLE: Building Minerva LX Firmware - QMK\nDESCRIPTION: This command builds the default firmware for the Minerva LX keyboard using the QMK build environment. It requires the QMK build environment to be set up correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/archetype/minervalx/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake archetype/minervalx:default\n```\n\n----------------------------------------\n\nTITLE: Building Sofle Keyboard with Default Keymap\nDESCRIPTION: This command builds the Sofle keyboard firmware with the default keymap. It prepares the firmware for flashing onto the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/sofle/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake sofle:default\n```\n\n----------------------------------------\n\nTITLE: Building M6-C Keyboard Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the M6-C keyboard using the QMK build environment. It requires the QMK build environment to be set up correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wolf/m6_c/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake wolf/m6_c:default\n```\n\n----------------------------------------\n\nTITLE: Building 3dortho14u Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the 3dortho14u/rev2 keyboard. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/3dortho14u/rev2/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake 3dortho14u/rev2:default\n```\n\n----------------------------------------\n\nTITLE: Building Freebird60 Firmware\nDESCRIPTION: This command builds the default firmware for the Freebird60 keyboard using the QMK build environment. It requires the QMK build environment to be set up correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keebsforall/freebird60/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake keebsforall/freebird60:default\n```\n\n----------------------------------------\n\nTITLE: Building QMK Firmware for OSAv2 Topre\nDESCRIPTION: This command builds the default QMK firmware for the viktus/osav2_topre keyboard. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/viktus/osav2_topre/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake viktus/osav2_topre:default\n```\n\n----------------------------------------\n\nTITLE: Flashing EC1-AT Firmware with QMK\nDESCRIPTION: This command flashes the compiled firmware onto the EC1-AT keyboard using the QMK build environment. It requires the keyboard to be in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cipulot/ec1_at/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake cipulot/ec1_at:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building BFO-9000 Keyboard Firmware\nDESCRIPTION: This command compiles the default keymap for the BFO-9000 keyboard using the QMK build environment. It requires a properly configured QMK environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keebio/bfo9000/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake keebio/bfo9000:default\n```\n\n----------------------------------------\n\nTITLE: Building firmware for dosa40rgb keyboard\nDESCRIPTION: This command is used to build the firmware for the dosa40rgb keyboard with the default configuration. It requires a correctly set up QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/dtisaac/dosa40rgb/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake dtisaac/dosa40rgb:default\n```\n\n----------------------------------------\n\nTITLE: Defining WS2812 Data In Pin\nDESCRIPTION: Defines the pin that the Data In (DI) of the WS2812 LED strip is connected to. Used for controlling RGB lighting.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/config_options.md#_snippet_69\n\nLANGUAGE: C\nCODE:\n```\n#define WS2812_DI_PIN D7\n```\n\n----------------------------------------\n\nTITLE: Building Fave60a Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the linworks/fave60a keyboard. It compiles the keyboard layout and necessary QMK firmware components.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/linworks/fave60a/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake linworks/fave60a:default\n```\n\n----------------------------------------\n\nTITLE: Setting Unicode Selected Modes\nDESCRIPTION: This shows how to define the enabled unicode modes. Multiple modes can be specified, separated by commas.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/unicode.md#_snippet_7\n\nLANGUAGE: c\nCODE:\n```\n#define UNICODE_SELECTED_MODES UNICODE_MODE_LINUX\n// or\n#define UNICODE_SELECTED_MODES UNICODE_MODE_MACOS, UNICODE_MODE_WINCOMPOSE\n```\n\n----------------------------------------\n\nTITLE: Flashing Seigaiha Keyboard Firmware\nDESCRIPTION: This command flashes the default firmware to the Seigaiha keyboard. It requires the dfu-programmer or a similar flashing tool to be installed and configured.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/yiancardesigns/seigaiha/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake yiancardesigns/seigaiha:default:flash\n```\n\n----------------------------------------\n\nTITLE: Getting Current Global Effect Brightness (C)\nDESCRIPTION: This function retrieves the current global brightness value of the LED matrix effect, ranging from 0 to 255.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/led_matrix.md#_snippet_29\n\nLANGUAGE: C\nCODE:\n```\nuint8_t led_matrix_get_val(void)\n```\n\n----------------------------------------\n\nTITLE: Building Karina Keyboard Firmware - QMK\nDESCRIPTION: This command builds the QMK firmware for the Karina keyboard using the default keymap. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/misonoworks/karina/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake misonoworks/karina:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Carpolly Firmware\nDESCRIPTION: This command builds and flashes the default keymap to the Carpolly keyboard.  It assumes the keyboard is connected and the build environment is set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/carpolly/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake handwired/carpolly:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Nascent Keyboard Firmware - QMK\nDESCRIPTION: This command compiles the QMK firmware for the Nascent keyboard with the default keymap. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/studiokestra/nascent/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake studiokestra/nascent:default\n```\n\n----------------------------------------\n\nTITLE: Disabling Debugging in QMK config.h\nDESCRIPTION: This code snippet disables debugging features in QMK firmware, potentially reducing code size. This setting is configured in the `config.h` file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/config_options.md#_snippet_33\n\nLANGUAGE: c\nCODE:\n```\n#define NO_DEBUG\n```\n\n----------------------------------------\n\nTITLE: Building Suit80 ISO Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the Suit80 ISO keyboard. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/owlab/suit80/iso/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake owlab/suit80/iso:default\n```\n\n----------------------------------------\n\nTITLE: Define Keyboard Layout\nDESCRIPTION: This code defines a keyboard layout constant named LAYOUT_60_iso_tsangan_split_bs_rshift. This constant can be used within QMK firmware to apply the defined layout to a keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/layouts/default/60_iso_tsangan_split_bs_rshift/readme.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nLAYOUT_60_iso_tsangan_split_bs_rshift\n```\n\n----------------------------------------\n\nTITLE: Flashing MW80 Keyboard Firmware\nDESCRIPTION: This command flashes the default firmware onto the MW80 keyboard.  It depends on the QMK build environment and a configured flashing tool.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mwstudio/mw80/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake mwstudio/mw80:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Midway60 QMK Firmware\nDESCRIPTION: This command builds the QMK firmware for the Midway60 keyboard with the default keymap. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/fjlabs/midway60/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake fjlabs/midway60:default\n```\n\n----------------------------------------\n\nTITLE: Building the heavy_left keyboard\nDESCRIPTION: This command compiles the default keymap for the takashicompany/heavy_left keyboard.  It requires a properly set up QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/takashicompany/heavy_left/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake takashicompany/heavy_left:default\n```\n\n----------------------------------------\n\nTITLE: Building Moonlander Firmware\nDESCRIPTION: This command builds the default keymap for the Moonlander keyboard. It compiles the QMK firmware with the specified keyboard and keymap configurations.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/zsa/moonlander/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake zsa/moonlander:default\n```\n\n----------------------------------------\n\nTITLE: Building Maypad Firmware\nDESCRIPTION: This command builds the default firmware for the KeyHive Maypad keyboard. It requires the QMK build environment to be set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keyhive/maypad/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake keyhive/maypad:default\n```\n\n----------------------------------------\n\nTITLE: Building Gerald65 Firmware\nDESCRIPTION: This command builds the default firmware for the Paper Crane Keyboards Gerald65. It requires a configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/papercranekeyboards/gerald65/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake papercranekeyboards/gerald65:default\n```\n\n----------------------------------------\n\nTITLE: Making SPRH Firmware with QMK\nDESCRIPTION: This command compiles the default firmware for the SPRH keyboard using the QMK build environment. It requires a properly configured QMK environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/eyeohdesigns/sprh/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake eyeohdesigns/sprh:default\n```\n\n----------------------------------------\n\nTITLE: Building slider8 Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the 1upkeyboards slider8.  It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/1upkeyboards/1upslider8/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake 1upkeyboards/1upslider8:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Footy Keyboard Firmware\nDESCRIPTION: This command flashes the default firmware to the Footy keyboard. The keyboard must be in bootloader mode before running this command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/footy/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake handwired/footy:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Sofle Pro Keyboard Firmware - QMK\nDESCRIPTION: This command flashes the compiled QMK firmware to the Sofle Pro keyboard with the default keymap. This requires the keyboard to be in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechboards/sofle/pro/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nqmk flash -kb mechboards/sofle/pro -km default\n```\n\n----------------------------------------\n\nTITLE: Reloading LED Matrix Configuration from EEPROM (C)\nDESCRIPTION: This function reloads the effect configuration (enabled state, mode, and brightness) from EEPROM.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/led_matrix.md#_snippet_37\n\nLANGUAGE: C\nCODE:\n```\nvoid led_matrix_reload_from_eeprom(void)\n```\n\n----------------------------------------\n\nTITLE: Building Fuji75 Hotswap Firmware\nDESCRIPTION: This command builds the default firmware for the Fuji75 hotswap keyboard. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/sakura_workshop/fuji75/hotswap/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake sakura_workshop/fuji75/hotswap:default\n```\n\n----------------------------------------\n\nTITLE: Building the Keyspensory KP60 Keyboard\nDESCRIPTION: This command builds the default firmware for the Keyspensory KP60 keyboard. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keyspensory/kp60/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake keyspensory/kp60:default\n```\n\n----------------------------------------\n\nTITLE: Building the Plywrks ply8x Firmware\nDESCRIPTION: This command builds the default firmware for the Plywrks ply8x keyboard. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/plywrks/ply8x/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake plywrks/ply8x:default\n```\n\n----------------------------------------\n\nTITLE: Building the keyboard firmware - Makefile\nDESCRIPTION: This command builds the default firmware for the studiokestra/line_friends_tkl keyboard. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/studiokestra/line_friends_tkl/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake studiokestra/line_friends_tkl:default\n```\n\n----------------------------------------\n\nTITLE: Examine Userspace Environment (qmk userspace-doctor)\nDESCRIPTION: This command examines your environment and alerts you to potential problems related to External Userspace.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/cli_commands.md#_snippet_38\n\nLANGUAGE: text\nCODE:\n```\n% qmk userspace-doctor\n```\n\n----------------------------------------\n\nTITLE: Building the chromatonemini keyboard\nDESCRIPTION: This command builds the default keymap for the chromatonemini keyboard using the QMK build environment. It compiles the firmware ready for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/chromatonemini/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake chromatonemini:default\n```\n\n----------------------------------------\n\nTITLE: Building TR60W with Custom Settings\nDESCRIPTION: This snippet demonstrates building the TR60W keyboard firmware with custom settings (joule-flow). This requires a user-defined keymap named 'joule-flow'.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/tr60w/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake tr60w:joule-flow\n```\n\n----------------------------------------\n\nTITLE: Building Mona Keyboard Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the Mona keyboard using the QMK build environment. It requires a properly configured QMK environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/rmi_kb/mona/v1/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake rmi_kb/mona/v1:default\n```\n\n----------------------------------------\n\nTITLE: Building FancyAlice66 Firmware\nDESCRIPTION: This command builds the default firmware for the FancyAlice66 keyboard. It utilizes the QMK make system to compile the necessary files.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/fancytech/fancyalice66/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake fancytech/fancyalice66:default\n```\n\n----------------------------------------\n\nTITLE: Building Pica40 Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the Pica40 keyboard. It utilizes the QMK build environment and targets the default configuration.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/pica40/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake pica40:default\n```\n\nLANGUAGE: make\nCODE:\n```\nmake pica40/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Building Karn 2 Keyboard Firmware\nDESCRIPTION: This command compiles the QMK Firmware for the Karn keyboard with the default keymap. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/karn/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake karn:default\n```\n\n----------------------------------------\n\nTITLE: Building the BM65HSRGB Firmware\nDESCRIPTION: This command builds the default firmware for the BM65HSRGB keyboard. It requires a properly set up QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kprepublic/bm65hsrgb/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake kprepublic/bm65hsrgb/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Building Irene Keyboard Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the Irene keyboard within the QMK Firmware environment. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/irene/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake irene:default\n```\n\n----------------------------------------\n\nTITLE: Enabling Per-Key Hold on Other Key Press\nDESCRIPTION: Enables handling for per key `HOLD_ON_OTHER_KEY_PRESS` settings. Allows you to specify which keys use the feature.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/config_options.md#_snippet_51\n\nLANGUAGE: C\nCODE:\n```\n#define HOLD_ON_OTHER_KEY_PRESS_PER_KEY\n```\n\n----------------------------------------\n\nTITLE: Building dymium65 firmware\nDESCRIPTION: This command builds the default firmware for the dymium65 keyboard. It requires the QMK build environment to be set up. The output will be a .hex file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/dotmod/dymium65/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake dotmod/dymium65:default\n```\n\n----------------------------------------\n\nTITLE: Building Lattice60 Firmware with Make\nDESCRIPTION: This command builds the default firmware for the Lattice60 keyboard. It requires QMK build environment to be set up properly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keyhive/lattice60/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake keyhive/lattice60:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Keyboard Firmware with QMK Make\nDESCRIPTION: This command builds and flashes the default firmware for the Caticorn Hotswap Rev1 keyboard. It requires a connected keyboard in bootloader mode and a correctly set up QMK build environment. The 'flash' target triggers the flashing process after the firmware is built.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/horrortroll/caticorn/rev1/hotswap/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake horrortroll/caticorn/rev1/hotswap:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Vaneela Ex Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Vaneela Ex keyboard using the QMK build environment. It assumes that the QMK build environment is already set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/delikeeb/vaneelaex/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake delikeeb/vaneelaex:default\n```\n\n----------------------------------------\n\nTITLE: Flashing the keyboard firmware\nDESCRIPTION: This command flashes the built firmware to the dactyl_manuform_pi_pico keyboard.  It requires the keyboard to be in bootloader mode and a correctly configured QMK build environment with flashing tools.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/dactyl_manuform_pi_pico/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/dactyl_manuform_pi_pico:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing BareDev rev1 with QMK Make\nDESCRIPTION: This command builds and flashes the default keymap to the BareDev rev1 keyboard using the QMK build environment. It requires a configured QMK environment and a connected keyboard in bootloader mode. The output is a flashed keyboard with the default keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/baredev/rev1/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake handwired/baredev/rev1:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building firmware for Vault 35 WKL Universal\nDESCRIPTION: This command builds the default firmware for the Vault 35 WKL Universal keyboard using the QMK build environment. It compiles the keymap and keyboard definitions into a firmware file that can be flashed onto the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/jlw/vault35_wkl_universal/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake jlw/vault35_wkl_universal:default\n```\n\n----------------------------------------\n\nTITLE: Building KBDPad MKI Firmware\nDESCRIPTION: This command builds the default firmware for the KBDPad MKI keyboard. It requires a properly configured QMK build environment and utilizes the make command to compile the firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kbdfans/kbdpad/mk1/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake kbdfans/kbdpad/mk1:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Kallos Keyboard Firmware (QMK)\nDESCRIPTION: This command builds and flashes the default firmware for the Kallos keyboard. It requires a properly configured QMK build environment and a compatible flashing tool. The keyboard must be in bootloader mode for flashing to succeed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cipulot/kallos/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake cipulot/kallos:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building GergoPlex Firmware (QMK)\nDESCRIPTION: This command builds the firmware for the GergoPlex keyboard with the default keymap.  It requires a properly configured QMK build environment.  The output will be a .hex file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/gboards/gergoplex/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake gboards/gergoplex:default\n```\n\n----------------------------------------\n\nTITLE: Flashing the RART 80 keyboard - QMK\nDESCRIPTION: This command is used to flash the compiled firmware to the RART 80 keyboard using the QMK firmware. It requires a properly configured build environment and the necessary tools for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/rart/rart80/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake rart/rart80:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building ISOlation Firmware\nDESCRIPTION: This command builds the default firmware for the ISOlation keyboard. It requires a properly set up QMK build environment. The output is a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kb_elmo/isolation/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake kb_elmo/isolation:default\n```\n\n----------------------------------------\n\nTITLE: Building Hotdox76v2 Firmware with Make\nDESCRIPTION: This command compiles the QMK firmware for the Hotdox76v2 keyboard using the default keymap.  It leverages the QMK build environment and make system to generate the firmware file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/hotdox76v2/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake hotdox76v2:default\n```\n\n----------------------------------------\n\nTITLE: Building Omnikey BH Firmware with QMK\nDESCRIPTION: This snippet shows how to build the default firmware for the viktus/omnikey_bh keyboard using the QMK build system.  It assumes that the QMK build environment has already been set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/viktus/omnikey_bh/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake viktus/omnikey_bh:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Keyboard Firmware with Make\nDESCRIPTION: This command flashes the compiled firmware to the 3dortho14u keyboard, revision 1, using the `make` command. It uploads the firmware to the microcontroller (ATmega32u4) on the keyboard. The keyboard must be in bootloader mode for flashing to succeed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/3dortho14u/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake 3dortho14u/rev1:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Quark_Plus Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Quark Plus keyboard using the QMK build environment. It assumes that the QMK build environment has already been set up according to the QMK documentation. The command is executed from the QMK firmware directory.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/checkerboards/quark_plus/readme.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmake checkerboards/quark_plus:default\n```\n\n----------------------------------------\n\nTITLE: Building M65 rev4 firmware with make\nDESCRIPTION: This command builds the default firmware for the M65 keyboard revision 4 using the QMK make system. It compiles the necessary source code and generates a firmware image suitable for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mlego/m65/readme.md#_snippet_6\n\nLANGUAGE: Makefile\nCODE:\n```\nmake mlego/m65/rev4:default\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for Paraluman Keyboard\nDESCRIPTION: This command builds the firmware for the Paraluman keyboard with the default keymap. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/nightly_boards/paraluman/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake nightly_boards/paraluman:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Yasui Keyboard Firmware with QMK\nDESCRIPTION: This command flashes the compiled QMK firmware onto the Yasui keyboard with the default keymap. It uses the `qmk flash` command, requiring the keyboard to be in a state where it can accept a firmware update (usually reset mode).\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/rainkeebs/yasui/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nqmk flash -kb rainkeebs/yasui -km default\n```\n\n----------------------------------------\n\nTITLE: Building QMK Firmware for Durgod Hades ISO\nDESCRIPTION: This command builds the default keymap for the Durgod Hades ISO keyboard using the QMK firmware. It compiles the source code and generates a firmware image that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/durgod/dgk6x/hades_iso/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake durgod/dgk6x/hades_iso:default\n```\n\n----------------------------------------\n\nTITLE: Building Dubba175 Firmware with QMK\nDESCRIPTION: This command compiles the default keymap for the Dubba175 keyboard using the QMK Firmware build environment. It assumes that the QMK build environment has already been set up. The command invokes the `make` utility with the target `drhigsby/dubba175:default`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/drhigsby/dubba175/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake drhigsby/dubba175:default\n```\n\n----------------------------------------\n\nTITLE: Building WT60-BX Firmware with QMK\nDESCRIPTION: This snippet demonstrates how to build the default firmware for the wilba.tech WT60-BX keyboard using the QMK build environment. It assumes that the QMK build environment is already set up. This command compiles the firmware and generates a .hex file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wilba_tech/wt60_bx/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake wilba_tech/wt60_bx:default\n```\n\n----------------------------------------\n\nTITLE: Building QMK Firmware\nDESCRIPTION: This command builds the QMK firmware for the Model-B rev0 keyboard with the default keymap. It requires a properly set up QMK build environment as a prerequisite.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/trojan_pinata/model_b/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake trojan_pinata/model-b/rev0:default\n```\n\n----------------------------------------\n\nTITLE: Building Kawii9 Keyboard Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the KiwiKey Kawii9 keyboard using the QMK build environment. It assumes the QMK build environment has been properly set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kiwikey/kawii9/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake kiwikey/kawii9:default\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for Pisces Keyboard (QMK)\nDESCRIPTION: This command builds the default firmware for the Pisces keyboard using the QMK build environment. It specifies the keyboard layout to be used during compilation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kwstudio/pisces/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake kwstudio/pisces:default\n```\n\n----------------------------------------\n\nTITLE: Building ErgoTravel Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the ErgoTravel keyboard (revision 1) using the QMK build environment. It compiles the keymap and other necessary code into a firmware image that can be flashed onto the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ergotravel/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake ergotravel/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Flashing ATSET AT2 Firmware\nDESCRIPTION: This command builds and flashes the default firmware to the ATSET AT2 keyboard.  It requires the QMK build environment and a connected keyboard in a flashable state. It uses the `make` command with the `flash` target.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/atset/at2/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake atset/at2:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Pachi Keyboard Firmware\nDESCRIPTION: This command builds the firmware for the Pachi keyboard with the default keymap.  It requires the QMK build environment to be properly configured. The output is a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/xelus/pachi/rev1/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake xelus/pachi/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Running Python Tests (QMK)\nDESCRIPTION: This command runs the Python test suite.  Use the `-t` flag to specify a test or test group to run.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/cli_commands.md#_snippet_49\n\nLANGUAGE: qmk\nCODE:\n```\nqmk pytest [-t TEST]\n```\n\n----------------------------------------\n\nTITLE: Building Keyboard Firmware\nDESCRIPTION: This command builds the firmware for the Parallel 65% Hotswap keyboard with the default keymap. It requires a properly configured QMK build environment. The output will be a firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/parallel/parallel_65/hotswap/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake parallel/parallel_65/hotswap:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Titan 65 Firmware\nDESCRIPTION: This command builds and flashes the default firmware to the Titan 65 keyboard. It depends on the QMK build environment and a suitable flashing tool being configured.  The command assumes that the keyboard is in bootloader mode or is automatically put into bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/phase_studio/titan65/hotswap/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake phase_studio/titan65:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building ek60 default keymap with QMK\nDESCRIPTION: This snippet shows the command to build the default keymap for the Eniigma Keyboards ek60 using the QMK build environment. This assumes that the QMK build environment is already set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/eniigmakeyboards/ek60/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake eniigmakeyboards/ek60:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Yampad Firmware\nDESCRIPTION: This command flashes the default firmware to the Yampad using the QMK build environment. It depends on the QMK build environment being set up and the necessary flashing tools being installed. It assumes the user has already built the firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/yampad/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake yampad:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware with Make\nDESCRIPTION: This command flashes the compiled QMK firmware to the `primekb/meridian_rgb` keyboard with the `default` keymap. It depends on the QMK build environment and a connected keyboard in a flashable state.  No input is required, the output is the flashed firmware running on the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/primekb/meridian_rgb/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake primekb/meridian_rgb:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building SKErgo Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the SKErgo keyboard.  It uses the `make` command with the keyboard name and keymap as arguments. This assumes the QMK build environment is already set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/skergo/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake skergo:default\n```\n\n----------------------------------------\n\nTITLE: Building Doro67 RGB Firmware\nDESCRIPTION: This command builds the default keymap for the Doro67 RGB keyboard using the QMK build environment.  It assumes the user has already set up their QMK build environment. The output is a firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/doro67/rgb/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake doro67/rgb:default\n```\n\n----------------------------------------\n\nTITLE: Making the default keymap for AI macropad\nDESCRIPTION: This command builds the default keymap for the AI macropad using the QMK build environment. It compiles the keymap and prepares it for flashing onto the device. Ensure your QMK build environment is set up before running this command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ai/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake ai:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware with Make\nDESCRIPTION: This command flashes the default firmware to the Large Lad keyboard using the QMK build environment. It requires a properly configured QMK build environment and a connected keyboard in bootloader mode. The command assumes the default flashing method for the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/large_lad/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake large_lad:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building GK61 PRO 48 Firmware with QMK\nDESCRIPTION: This command builds the default QMK firmware for the skyloong/gk61/pro_48 keyboard. It requires a configured QMK build environment and will produce a firmware file that can be flashed to the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/skyloong/gk61/pro_48/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake skyloong/gk61/pro_48:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Hotdox76v2 Firmware with Make\nDESCRIPTION: This command flashes the compiled QMK firmware onto the Hotdox76v2 keyboard. It assumes the keyboard is in a flashable state (e.g., bootloader mode) and uses the QMK build environment and make system to perform the flash operation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/hotdox76v2/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake hotdox76v2:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Lunar II Firmware with Make\nDESCRIPTION: This command builds the QMK firmware for the Lunar II keyboard with the default keymap. It requires the QMK build environment to be properly set up. The command should be executed from the QMK firmware root directory.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ai03/lunar_ii/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake ai03/lunar_ii:default\n```\n\n----------------------------------------\n\nTITLE: Cloning TMK Keyboard Repository with ChibiOS Branch\nDESCRIPTION: Clones the TMK keyboard repository from GitHub using the `chibios` branch. This is the first step in setting up the environment for building the keyboard firmware with ChibiOS.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/input_club/ergodox_infinity/MEMO.txt#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\n$ git clone -b chibios https://github.com/flabbergast/tmk_keyboard.git\n```\n\n----------------------------------------\n\nTITLE: Building Default Firmware - QMK\nDESCRIPTION: This command builds the default firmware for the hannah910/rev2 keyboard. It utilizes the `make` command with the specified target `mechlovin/hannah910/rev2:default`.  Ensure the QMK build environment is properly set up before execution. The output is a firmware file ready to be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechlovin/hannah910/rev2/readme.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nmake mechlovin/hannah910/rev2:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Dactyl Manuform 5x6 Firmware\nDESCRIPTION: This command flashes the compiled firmware onto the Dactyl Manuform 5x6 keyboard.  It requires the QMK build environment to be set up and the keyboard to be connected to the computer. The command uses the default flashing method configured for the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/dactyl_manuform/5x6_6/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake handwired/dactyl_manuform/5x6_6:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building the alcor_dactyl keyboard with QMK\nDESCRIPTION: This command builds the default keymap for the alcor_dactyl keyboard using the QMK build environment. It compiles the keyboard firmware, preparing it for flashing onto the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/alcor_dactyl/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake handwired/alcor_dactyl:default\n```\n\n----------------------------------------\n\nTITLE: Building Eliza Keyboard Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Eliza keyboard. It uses the QMK build environment.  Ensure the QMK build environment is set up correctly before running this command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kb_elmo/eliza/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake kb_elmo/eliza:default\n```\n\n----------------------------------------\n\nTITLE: Flashing MiniDox firmware\nDESCRIPTION: This command flashes the default firmware to the MiniDox rev1 keyboard. It uses the make command with the target specifying the keyboard layout, revision, and the 'flash' action.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/maple_computing/minidox/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake maple_computing/minidox/rev1:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing DracuLad using Caterina\nDESCRIPTION: This command builds and flashes the firmware for the DracuLad keyboard using the Caterina bootloader. Replace `default` with the keymap name.  It requires a properly configured QMK build environment and a Caterina-compatible bootloader on the keyboard. It assumes the keyboard is connected and recognized by the system.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/draculad/readme.md#_snippet_3\n\nLANGUAGE: Makefile\nCODE:\n```\nmake draculad:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Keyboard Firmware with QMK\nDESCRIPTION: Flashes the compiled keyboard firmware to the Proton C microcontroller using the QMK command-line interface. This command programs the microcontroller with the generated firmware image.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ez_maker/directpins/proton_c/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nqmk flash -kb ez_maker/directpins/proton_c -km default\n```\n\n----------------------------------------\n\nTITLE: Flashing Resume1800 Firmware\nDESCRIPTION: This command flashes the compiled firmware onto the Resume1800 keyboard using the QMK build environment. It uses the dfu-programmer or similar tool to upload the hex file to the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/crimsonkeyboards/resume1800/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake crimsonkeyboards/resume1800:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware for Corne Keyboard (v4) - Shell\nDESCRIPTION: This command flashes the QMK firmware to a Corne keyboard (CRKBD) revision 4 using the default keymap.  It utilizes the `qmk flash` command with the keyboard and keymap specified.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/crkbd/readme.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nqmk flash -kb crkbd/rev4 -km default\n```\n\n----------------------------------------\n\nTITLE: Building Sticc14 Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Sticc14 macropad using the QMK build environment. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/sticc14/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/sticc14:default\n```\n\n----------------------------------------\n\nTITLE: Compiling Firmware for Scotto108 Keyboard\nDESCRIPTION: This command compiles the default firmware for the Scotto108 keyboard using the QMK build environment. It assumes that the QMK build environment has already been set up. The output will be a .hex or .bin file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/scottokeebs/scotto108/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake handwired/scottokeebs/scotto108:default\n```\n\n----------------------------------------\n\nTITLE: Building default layout for Tenkey++ in QMK\nDESCRIPTION: This command builds the default layout for the Tenkey++ keyboard using the QMK build environment. It requires the QMK build environment to be set up beforehand. The output is a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/lizard_trick/tenkey_plusplus/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake lizard_trick/tenkey_plusplus:default\n```\n\n----------------------------------------\n\nTITLE: Building J-01 Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the J-01 keyboard using the QMK build environment. It requires the QMK build environment to be set up correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/jae/j01/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake jae/j01:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware for GKB-M16 in QMK\nDESCRIPTION: This command builds and flashes the default firmware for the GKB-M16 macro pad using the QMK Firmware. It depends on the QMK build environment being set up and a compatible flashing tool. This command assumes the default keymap and utilizes the gkeyboard/gkb_m16:default:flash configuration.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/gkeyboard/gkb_m16/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake gkeyboard/gkb_m16:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building the Lemon40 Firmware\nDESCRIPTION: This command builds the default keymap for the Lemon40 keyboard. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/horrortroll/lemon40/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake horrortroll/lemon40:default\n```\n\n----------------------------------------\n\nTITLE: Building AEGIS Keyboard Firmware - QMK\nDESCRIPTION: This command compiles the QMK firmware for the AEGIS keyboard with the default keymap. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/aeboards/aegis/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake aeboards/aegis:default\n```\n\n----------------------------------------\n\nTITLE: Building SMK60 Firmware with Make\nDESCRIPTION: This command is used to build the default firmware for the smk60 keyboard. It requires a properly configured QMK build environment. The output will be the firmware binary that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/smk60/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake smk60:default\n```\n\n----------------------------------------\n\nTITLE: Building Scarlet Firmware\nDESCRIPTION: This command builds the default firmware for the Scarlet keyboard using the QMK build environment. It assumes the QMK build environment is already set up and configured.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/lucid/scarlet/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake lucid/scarlet:default\n```\n\n----------------------------------------\n\nTITLE: Get Display Rotation (C)\nDESCRIPTION: This snippet defines the `qp_get_rotation` function, which returns the current rotation of the display.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/quantum_painter.md#_snippet_80\n\nLANGUAGE: c\nCODE:\n```\npainter_rotation_t qp_get_rotation(painter_device_t device);\n```\n\n----------------------------------------\n\nTITLE: Building Ghoul TKL Firmware\nDESCRIPTION: This command builds the default firmware for the Ghoul TKL keyboard. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/chill/ghoul/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake chill/ghoul:default\n```\n\n----------------------------------------\n\nTITLE: Building Keyboard Firmware with Make\nDESCRIPTION: This command builds the default firmware for the 0xc7/61key keyboard. It requires the QMK build environment to be set up correctly. The command compiles the keyboard's keymap and configuration files into a firmware image.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/0xc7/61key/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake 0xc7/61key:default\n```\n\n----------------------------------------\n\nTITLE: Compiling Keyboard Firmware - QMK\nDESCRIPTION: Compiles the default firmware for the IDOBAO Abacus ID42 keyboard. This command uses the QMK build environment to generate the firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/idobao/id42/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake idobao/id42:default\n```\n\n----------------------------------------\n\nTITLE: Building WT60-G Firmware with QMK\nDESCRIPTION: This command compiles the QMK firmware for the wilba_tech/wt60_g keyboard with the default configuration. It utilizes the 'make' command within the QMK build environment to generate the firmware binary.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wilba_tech/wt60_g/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake wilba_tech/wt60_g:default\n```\n\n----------------------------------------\n\nTITLE: Building Crowboard Firmware\nDESCRIPTION: This command builds the default firmware for the Crowboard keyboard. It assumes that the QMK build environment has already been set up according to the QMK documentation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/crowboard/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake crowboard:default\n```\n\n----------------------------------------\n\nTITLE: Flash 0xCB Static Firmware - QMK\nDESCRIPTION: This command flashes the generated firmware onto the 0xCB Static keyboard using the QMK build environment. This assumes the keyboard is already in DFU mode (bootloader).\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/0xcb/static/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake 0xcb/static:flash\n```\n\n----------------------------------------\n\nTITLE: Enabling ChibiOS PAL callbacks in halconf.h (C)\nDESCRIPTION: This snippet enables the PAL (Platform Abstraction Layer) callbacks in ChibiOS, which is required when using the bitbang serial driver on ARM platforms. This setting is located in the halconf.h file and is necessary for handling GPIO events. This snippet also includes the inclusion of the halconf.h file itself. The pragma once ensures the file is only included once.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/serial.md#_snippet_2\n\nLANGUAGE: c\nCODE:\n```\n#pragma once\n\n#define PAL_USE_CALLBACKS TRUE // [!code focus]\n\n#include_next <halconf.h>\n```\n\n----------------------------------------\n\nTITLE: Flashing the vn keyboard firmware - make\nDESCRIPTION: This command flashes the default firmware to the vn keyboard. It requires the QMK build environment to be set up and a flashing tool compatible with the keyboard's microcontroller. The keyboard needs to be in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ubest/vn/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake ubest/vn:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Equals Firmware\nDESCRIPTION: This command builds and flashes the QMK firmware to the Equals keyboard. It requires the QMK build environment and a configured flashing tool. The command combines building and flashing into a single step.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/boardsource/equals/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake boardsource/equals/48:default:flash\nmake boardsource/equals/60:default:flash\nmake boardsource/equals/avr:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing the Tomak Keyboard Firmware (QMK)\nDESCRIPTION: This command builds and flashes the default firmware for the Tomak keyboard using the QMK build environment.  It assumes the QMK build environment has been set up and the keyboard is connected and ready to be flashed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/era/sirind/tomak/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake era/sirind/tomak:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building p65rgb Keyboard Firmware\nDESCRIPTION: This command builds the default keymap for the handwired/p65rgb keyboard within the QMK firmware environment. It requires a properly configured QMK build environment. The resulting firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/p65rgb/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake handwired/p65rgb:default\n```\n\n----------------------------------------\n\nTITLE: Building Eon87 Keyboard Firmware\nDESCRIPTION: This command builds the default keymap for the Eon87 keyboard using the QMK Firmware build environment. It utilizes the 'make' command with the target 'evyd13/eon87:default'. Ensure the QMK build environment is properly set up before executing this command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/evyd13/eon87/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake evyd13/eon87:default\n```\n\n----------------------------------------\n\nTITLE: Building Meow65 Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Meow65 keyboard. It uses the `make` command within the QMK build environment to compile the firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/meow65/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake meow65:default\n```\n\n----------------------------------------\n\nTITLE: Building E7-V1 Firmware with QMK\nDESCRIPTION: This snippet provides the command to build the default firmware for the E7-V1 keyboard using the QMK build environment. It requires a properly configured QMK environment. This command will compile the firmware and generate a .hex file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/exclusive/e7v1/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake exclusive/e7v1:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Palette G67 Hotswap Firmware\nDESCRIPTION: This command builds and flashes the default firmware to the Palette G67 Hotswap keyboard. It depends on the QMK build environment and a connected keyboard in a flashable state. The command uploads the compiled firmware to the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/neokeys/g67/hotswap/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake neokeys/palette_g67/hotswap:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building E6 RGB Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the exclusive/e6_rgb keyboard.  It utilizes the QMK build environment to compile the firmware based on the configuration specified in the default keymap.  Requires the QMK build environment to be set up correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/exclusive/e6_rgb/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake exclusive/e6_rgb:default\n```\n\n----------------------------------------\n\nTITLE: Building MF-17 Keyboard Firmware with QMK\nDESCRIPTION: This command builds the QMK firmware for the MF-17 keyboard with the default keymap. It uses the `make` command with the target specified as `magic_force/mf17:default`. Requires a correctly set up QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/magic_force/mf17/readme.md#_snippet_0\n\nLANGUAGE: makefile\nCODE:\n```\nmake magic_force/mf17:default\n```\n\n----------------------------------------\n\nTITLE: Building Hillside Firmware\nDESCRIPTION: This command builds the default firmware for the Hillside 48 keyboard. It requires the QMK build environment to be set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/hillside/48/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake hillside/48/0_1:default\n```\n\n----------------------------------------\n\nTITLE: Building UniGo66 Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the UniGo66 keyboard. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/sirius/unigo66/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake sirius/unigo66:default\n```\n\n----------------------------------------\n\nTITLE: Compiling Firmware\nDESCRIPTION: Compiles the default firmware for the Scotto34 keyboard. This command requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/scottokeebs/scotto34/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/scottokeebs/scotto34:default\n```\n\n----------------------------------------\n\nTITLE: Building YMD09 Firmware\nDESCRIPTION: This command builds the default firmware for the YMD09 macropad. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ymdk/ymd09/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake ymdk/ymd09:default\n```\n\n----------------------------------------\n\nTITLE: Building Iris Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the Iris Rev. 6 keyboard. It uses the `make` command within the QMK Firmware environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keebio/iris/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake keebio/iris/rev6:default\n```\n\n----------------------------------------\n\nTITLE: Building wave75 Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the wave75 keyboard using the QMK build environment. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/yandrstudio/wave75/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake yandrstudio/wave75:default\n```\n\n----------------------------------------\n\nTITLE: Get Display Offset X (C)\nDESCRIPTION: This snippet defines the `qp_get_offset_x` function, which returns the X offset of the display viewport.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/quantum_painter.md#_snippet_81\n\nLANGUAGE: c\nCODE:\n```\nuint16_t qp_get_offset_x(painter_device_t device);\n```\n\n----------------------------------------\n\nTITLE: Building bootleg Rev A Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the bootleg Rev A keyboard. It requires a configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/4pplet/bootleg/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake 4pplet/bootleg/rev_a:default\n```\n\n----------------------------------------\n\nTITLE: Check UCIS Activity - C\nDESCRIPTION: This function checks whether UCIS (Unicode Composing Input Sequence) is currently active and returns a boolean value.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/unicode.md#_snippet_24\n\nLANGUAGE: C\nCODE:\n```\nbool ucis_active(void)\n```\n\n----------------------------------------\n\nTITLE: Building ISO Macro Firmware\nDESCRIPTION: This command builds the default firmware for the ISO Macro keyboard. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/merge/iso_macro/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake merge/isomacro:default\n```\n\n----------------------------------------\n\nTITLE: Building SP Mini Firmware\nDESCRIPTION: This command builds the default firmware for the SP Mini keyboard using the QMK build environment. It requires a properly configured QMK environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/viktus/sp_mini/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake viktus/sp_mini:default\n```\n\n----------------------------------------\n\nTITLE: Disabling Charybdis Keycodes\nDESCRIPTION: This define disables the custom keycodes defined for Charybdis-specific features, reducing the binary size of the firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/bastardkb/charybdis/readme.md#_snippet_5\n\nLANGUAGE: C\nCODE:\n```\n#define NO_CHARYBDIS_KEYCODES\n```\n\n----------------------------------------\n\nTITLE: Enabling RGB Light Layer Blink\nDESCRIPTION: Adds the ability to blink a lighting layer for a specified number of milliseconds, useful for acknowledging actions.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/config_options.md#_snippet_72\n\nLANGUAGE: C\nCODE:\n```\n#define RGBLIGHT_LAYER_BLINK\n```\n\n----------------------------------------\n\nTITLE: Building Nyquistpad Firmware\nDESCRIPTION: This command builds the default firmware for the Nyquistpad keyboard. It requires a properly set up QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keebio/nyquistpad/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake keebio/nyquistpad:default\n```\n\n----------------------------------------\n\nTITLE: Building SNAP firmware\nDESCRIPTION: This command builds the default firmware for the SNAP keyboard. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/nullbitsco/snap/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake nullbitsco/snap:default\n```\n\n----------------------------------------\n\nTITLE: Building K667 Firmware\nDESCRIPTION: This command builds the default firmware for the K667 keyboard using the QMK build environment. It requires a properly configured QMK environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/redragon/k667/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake redragon/k667:default\n```\n\n----------------------------------------\n\nTITLE: Building SNES Macropad Firmware\nDESCRIPTION: This command builds the default firmware for the SNES Macropad. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/snes_macropad/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake snes_macropad:default\n```\n\n----------------------------------------\n\nTITLE: Enabling Backlight Breathing in QMK config.h\nDESCRIPTION: This code snippet enables the backlight breathing effect in QMK firmware. This setting is configured in the `config.h` file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/config_options.md#_snippet_23\n\nLANGUAGE: c\nCODE:\n```\n#define BACKLIGHT_BREATHING\n```\n\n----------------------------------------\n\nTITLE: True/False Evaluations Example (Good) - Python\nDESCRIPTION: Shows the preferred style of implicitly checking True or False in an if statement in QMK Python code.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/coding_conventions_python.md#_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\nif foo:\n    pass\n\nif not bar:\n    pass\n```\n\n----------------------------------------\n\nTITLE: Building QMK Firmware for Voyager60-Alps\nDESCRIPTION: This command builds the default QMK firmware for the Voyager60-Alps keyboard. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ai03/voyager60_alps/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake ai03/voyager60_alps:default\n```\n\n----------------------------------------\n\nTITLE: Building the Unison Keyboard Firmware\nDESCRIPTION: This command builds the default keymap for the Unison keyboard using the QMK build environment. It compiles the keyboard firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/unison/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake unison:default\n```\n\n----------------------------------------\n\nTITLE: Building WhiteFox Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the WhiteFox keyboard. It requires a correctly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/input_club/whitefox/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake input_club/whitefox:default\n```\n\n----------------------------------------\n\nTITLE: Building the Obi Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the Obi keyboard. It requires a properly set up QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/adpenrose/obi/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake adpenrose/obi:default\n```\n\n----------------------------------------\n\nTITLE: Sprintf example needing full implementation\nDESCRIPTION: Example of using sprintf/snprintf that necessitates a standard implementation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/squeezing_avr.md#_snippet_4\n\nLANGUAGE: c\nCODE:\n```\nsprintf(wpm_str, \"%03d\", get_current_wpm());\nsnprintf(keylog_str, sizeof(keylog_str), \"%dx%d, k%2d : %c\");\n```\n\n----------------------------------------\n\nTITLE: Building ADM42 Firmware\nDESCRIPTION: This command builds the default firmware for the ADM42 keyboard. It requires a properly set up QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/adm42/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake adm42:default\n```\n\n----------------------------------------\n\nTITLE: Hardware Configuration in `keyboard.json`\nDESCRIPTION: This JSON snippet shows the basic hardware configuration in the `keyboard.json` file, including the keyboard name, maintainer, and USB-related settings (VID, PID, device version). The VID should generally remain `0xFEED`, while the PID should be a unique identifier. The `manufacturer` and `keyboard_name` are displayed by the operating system.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/porting_your_keyboard_to_qmk.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n    \"keyboard_name\": \"my_awesome_keyboard\",\n    \"maintainer\": \"You\",\n    \"usb\": {\n        \"vid\": \"0xFEED\",\n        \"pid\": \"0x0000\",\n        \"device_version\": \"1.0.0\"\n    },\n```\n\n----------------------------------------\n\nTITLE: Flashing THE60Rev2 Firmware (QMK)\nDESCRIPTION: This command flashes the built firmware onto the THE60Rev2 keyboard. It requires the keyboard to be in bootloader mode and a compatible flashing tool configured in the QMK environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/lazydesigners/the60/rev2/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake lazydesigners/the60/rev2:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for DZ60RGB-ANSI V2\nDESCRIPTION: This command builds the firmware for the DZ60RGB-ANSI V2 keyboard, which uses an ATmega32U4 (AVR) microcontroller and requires a .hex file. It utilizes the default keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/dztech/dz60rgb_ansi/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake dztech/dz60rgb_ansi/v2:default\n```\n\n----------------------------------------\n\nTITLE: Building S65-X Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the S65-X keyboard. It assumes that the QMK build environment is already set up.  The compiled firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/sentraq/s65_x/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake sentraq/s65_x:default\n```\n\n----------------------------------------\n\nTITLE: Building naKey Keyboard Firmware - Make Command\nDESCRIPTION: This command builds the naKey keyboard firmware with the default keymap. It assumes that the QMK build environment has been set up correctly. The command generates a .hex file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ckeys/nakey/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake ckeys/nakey:default\n```\n\n----------------------------------------\n\nTITLE: Building the firmware\nDESCRIPTION: This command is used to build the firmware for the mechlovin/infinity87/rev1/rouge87 keyboard with the default keymap. It compiles the QMK firmware and generates a .hex or .bin file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechlovin/infinity87/rev1/rouge87/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake mechlovin/infinity87/rev1/rouge87:default\n```\n\n----------------------------------------\n\nTITLE: Increasing Effect Speed in QMK (C)\nDESCRIPTION: This function increases the speed of the LED matrix effect, and the change is saved to EEPROM.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/led_matrix.md#_snippet_30\n\nLANGUAGE: C\nCODE:\n```\nvoid led_matrix_increase_speed(void)\n```\n\n----------------------------------------\n\nTITLE: Flashing ATSET AT9 Firmware with Make\nDESCRIPTION: This command flashes the compiled firmware onto the ATSET AT9 keyboard using the `make` command. It requires a compatible flashing tool to be installed and configured. The command builds the firmware and then uses the flashing tool to write the firmware image to the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/atset/at9/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake atset/at9:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building PocketPad Firmware\nDESCRIPTION: This command builds the default firmware for the PocketPad keyboard using the QMK build environment. It compiles the keymap and firmware for the specified keyboard and keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/butterkeebs/pocketpad/readme.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmake butterkeebs/pocketpad:default\n```\n\n----------------------------------------\n\nTITLE: Building Geekboards Tester Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Geekboards tester keyboard using the QMK build environment. It assumes that the QMK build environment has been properly set up. It produces a .hex file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/geekboards/tester/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake geekboards/tester:default\n```\n\n----------------------------------------\n\nTITLE: Building Orbit Firmware with QMK\nDESCRIPTION: This snippet demonstrates how to build the default firmware for the Orbit keyboard using the QMK build environment. It requires a properly configured QMK environment and assumes the user has access to the QMK command-line tools. The command `make ai03/orbit:default` compiles the firmware for the Orbit keyboard with the default keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ai03/orbit/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake ai03/orbit:default\n```\n\n----------------------------------------\n\nTITLE: Building Keychron C1 Pro V2 Firmware with Make\nDESCRIPTION: These `make` commands compile the QMK firmware for the Keychron C1 Pro V2 keyboard with different configurations (rgb, white, non_light). Each command specifies the keyboard, layout (ansi), and keymap (default).\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keychron/c1_pro_v2/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake keychron/c1_pro_v2/ansi/rgb:default\n```\n\nLANGUAGE: Makefile\nCODE:\n```\nmake keychron/c1_pro_v2/ansi/white:default\n```\n\nLANGUAGE: Makefile\nCODE:\n```\nmake keychron/c1_pro_v2/ansi/non_light:default\n```\n\n----------------------------------------\n\nTITLE: Building Keychron Q2 Firmware with Make\nDESCRIPTION: These commands use the 'make' command-line tool to build the QMK firmware for different layouts of the Keychron Q2 keyboard. The layouts include ANSI, ISO, and JIS, with variations for encoder support. The 'default' target compiles the firmware with the default keymap for each layout.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keychron/q2/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake keychron/q2/ansi:default\nmake keychron/q2/ansi_encoder:default\nmake keychron/q2/iso:default\nmake keychron/q2/iso_encoder:default\nmake keychron/q2/jis:default\nmake keychron/q2/jis_encoder:default\n```\n\n----------------------------------------\n\nTITLE: Building QMK Firmware for Keychron Q1V2\nDESCRIPTION: These `make` commands are used to build the QMK firmware for different layouts of the Keychron Q1 Version 2 keyboard.  The `keychron/q1v2/<layout>:<keymap>` syntax specifies the target keyboard and keymap.  The resulting firmware can then be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keychron/q1v2/readme.md#_snippet_0\n\nLANGUAGE: makefile\nCODE:\n```\nmake keychron/q1v2/ansi:default\nmake keychron/q1v2/ansi_encoder:default\nmake keychron/q1v2/iso:default\nmake keychron/q1v2/iso_encoder:default\nmake keychron/q1v2/jis:default\nmake keychron/q1v2/jis_encoder:default\n```\n\n----------------------------------------\n\nTITLE: Building Bolsa65 QMK Firmware\nDESCRIPTION: This command builds the default QMK firmware for the Bolsa65 keyboard.  It assumes that the QMK build environment has already been set up. The output will be a .hex or .bin file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/fjlabs/bolsa65/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake fjlabs/bolsa65:default\n```\n\n----------------------------------------\n\nTITLE: Flashing the Drop ALT v2 Firmware\nDESCRIPTION: This command flashes the built firmware to the Drop ALT v2 keyboard. It builds the firmware if necessary and then flashes it.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/drop/alt/v2/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake drop/alt/v2:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing SquishyTKL Firmware\nDESCRIPTION: This command is used to flash the built firmware onto the SquishyTKL keyboard using dfu-util.  It requires dfu-util to be installed and the path to the firmware binary file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/rmi_kb/squishytkl/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ndfu-util -d 1eaf:0003 -a 2 -D path/to/rmi_kb_squishytkl_via.bin\n```\n\n----------------------------------------\n\nTITLE: Flashing the Vero EC Keyboard\nDESCRIPTION: This command builds the default keymap and flashes it to the Vero EC keyboard. It requires a properly configured QMK build environment and a connected keyboard in bootloader mode. Ensure the necessary flashing tools are installed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cipulot/ec_vero/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake cipulot/ec_vero:default:flash\n```\n\n----------------------------------------\n\nTITLE: Listing Keymaps - qmk list-keymaps\nDESCRIPTION: Lists all the keymaps for a specified keyboard (and revision). It is directory aware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/cli_commands.md#_snippet_25\n\nLANGUAGE: shell\nCODE:\n```\nqmk list-keymaps -kb planck/ez\n```\n\n----------------------------------------\n\nTITLE: Defining RGB Light Hue Step\nDESCRIPTION: Defines the units to step when increasing/decreasing hue.  Determines the granularity of hue adjustments.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/config_options.md#_snippet_77\n\nLANGUAGE: C\nCODE:\n```\n#define RGBLIGHT_HUE_STEP 12\n```\n\n----------------------------------------\n\nTITLE: Disabling Initial Leader Key Timeout (QMK)\nDESCRIPTION: This snippet disables the initial timeout for the leader key in `config.h` using `LEADER_NO_TIMEOUT`. This allows users unlimited time to press the first key after pressing the leader key itself.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/leader_key.md#_snippet_6\n\nLANGUAGE: C\nCODE:\n```\n#define LEADER_NO_TIMEOUT\n```\n\n----------------------------------------\n\nTITLE: Building ph100 Firmware with Make\nDESCRIPTION: This command builds the default firmware for the phrygian/ph100 keyboard using the QMK build environment. It leverages the 'make' command, which requires QMK's build tools to be properly configured as described in the QMK documentation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/phrygian/ph100/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake phrygian/ph100:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Quick17 Firmware (QMK)\nDESCRIPTION: This command flashes the compiled firmware onto the Quick17 macropad using the QMK build environment. It requires the appropriate flashing tools and drivers to be installed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/yushakobo/quick17/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake quick17:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Drakon keyboard firmware\nDESCRIPTION: This command is used to build the default firmware for the Drakon keyboard using the QMK build environment.  It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/jagdpietr/drakon/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake drakon:default\n```\n\n----------------------------------------\n\nTITLE: Building Hard Light Mark 2 Firmware (Makefile)\nDESCRIPTION: This command builds the default firmware for the Hard Light Mark 2 keyboard. It assumes that the QMK build environment has already been set up. The output is a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/edi/hardlight/mk2/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake edi/hardlight/mk2:default\n```\n\n----------------------------------------\n\nTITLE: Flashing EnvKB 65M QMK Firmware\nDESCRIPTION: This command flashes the default firmware to the EnvKB 65M keyboard using the QMK build environment and dfu-util. It requires the keyboard to be in bootloader mode. The keyboard will be reset after flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/enviousdesign/65m/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake enviousdesign/65m:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Knife66 Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Knife66 keyboard using the QMK build environment. It compiles the source code and generates the firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/misterknife/knife66/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake misterknife/knife66:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Splitty EEPROM (make)\nDESCRIPTION: These commands flash the firmware and the EEPROM to set the handedness for the left and right sides of the Splitty keyboard.  This configures the keyboard for its respective side. Ensure DFU is available.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/splitty/readme.md#_snippet_2\n\nLANGUAGE: make\nCODE:\n```\nmake splitty:default:dfu-split-left\n```\n\nLANGUAGE: make\nCODE:\n```\nmake splitty:default:dfu-split-right\n```\n\n----------------------------------------\n\nTITLE: Flashing the suika27melo keyboard with default settings\nDESCRIPTION: This command builds and flashes the firmware for the suika27melo keyboard using the default configuration. It requires a configured build environment and a connected keyboard in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/suikagiken/suika27melo/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake suikagiken/suika27melo:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for balloondogcaps/tr90\nDESCRIPTION: This command builds the default firmware for the balloondogcaps/tr90 keyboard.  It requires a configured QMK build environment.  The resulting firmware can then be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/balloondogcaps/tr90/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake balloondogcaps/tr90:default\n```\n\n----------------------------------------\n\nTITLE: Building wanten Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the wanten keyboard using the QMK build environment. It requires the QMK build environment to be set up properly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/qpockets/wanten/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake qpockets/wanten:default\n```\n\n----------------------------------------\n\nTITLE: Building QMK Firmware for Dumbpad\nDESCRIPTION: This command builds the QMK firmware for the dumbpad/v1x_dualencoder keyboard with the default keymap. It requires the QMK build environment to be set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/dumbpad/v1x_dualencoder/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake dumbpad/v1x_dualencoder:default\n```\n\n----------------------------------------\n\nTITLE: Building Millipad Firmware with QMK\nDESCRIPTION: This command builds the default keymap for the Millipad using the QMK build environment.  It compiles the firmware and prepares it for flashing.  It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/millipad/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake millipad:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware to ATSET AT3 Keyboard (Makefile)\nDESCRIPTION: This command builds and flashes the default firmware to the ATSET AT3 keyboard. It requires the QMK build environment to be properly configured and connected to the keyboard via USB.  This command relies on the `dfu-programmer` or similar flashing tools.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/atset/at3/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake atset/at3:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building the Promenade RP24S Keyboard Firmware (Makefile)\nDESCRIPTION: This command builds the default firmware for the Promenade RP24S keyboard using the QMK build environment. It compiles the keyboard's keymap and other configurations into a firmware image.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kradoindustries/promenade_rp24s/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake kradoindustries/promenade_rp24s:default\n```\n\n----------------------------------------\n\nTITLE: Building Allison Numpad Firmware (QMK)\nDESCRIPTION: This command builds the QMK firmware for the Allison Numpad keyboard with the default keymap.  It requires a properly configured QMK build environment.  The resulting firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/prototypist/allison_numpad/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake prototypist/allison_numpad:default\n```\n\n----------------------------------------\n\nTITLE: Tap Dance Enum Definition in QMK\nDESCRIPTION: This code defines an enum to assign names to different tap dances, such as `X_CTL` and `SOME_OTHER_DANCE`. This is used to index the tap_dance_actions array.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/tap_dance.md#_snippet_13\n\nLANGUAGE: c\nCODE:\n```\n// Tap dance enums\nenum {\n    X_CTL,\n    SOME_OTHER_DANCE\n};\n```\n\n----------------------------------------\n\nTITLE: Building Leeloo Keyboard Firmware with QMK\nDESCRIPTION: These make commands are used to build the QMK firmware for different revisions of the Clickety Split Leeloo keyboard (rev1, rev2, rev3). They specify the keyboard layout and default keymap to be compiled. Users must have a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/clickety_split/leeloo/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake clickety_split/leeloo/rev1:default\nmake clickety_split/leeloo/rev2:default\nmake clickety_split/leeloo/rev3:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Potato65 Firmware\nDESCRIPTION: This command compiles the default keymap and flashes the resulting firmware to the Potato65 keyboard. It requires a properly configured QMK build environment and a compatible flashing tool. The keyboard must be in bootloader mode for flashing to succeed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/buildakb/potato65/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake buildakb/potato65:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building BananaSplit60 Keyboard Firmware (QMK)\nDESCRIPTION: This snippet demonstrates how to build the default firmware for the BananaSplit60 keyboard using the QMK build environment. It assumes that the QMK build environment has already been set up. Execute this command in the QMK firmware directory.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/thevankeyboards/bananasplit/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake thevankeyboards/bananasplit:default\n```\n\n----------------------------------------\n\nTITLE: Building wendy Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the wendy keyboard using the QMK build environment. It leverages the `make` command with specific target parameters for the keyboard and keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kibou/wendy/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake kibou/wendy:default\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for Pro Micro\nDESCRIPTION: This command builds the QMK firmware for the ckeys/handwire_101 keyboard with Pro Micro as the target microcontroller. It specifies the keyboard layout as 'default'. This creates the firmware files compatible with the Pro Micro.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ckeys/handwire_101/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake ckeys/handwire_101:default\n```\n\n----------------------------------------\n\nTITLE: Building Sha Keyboard Firmware (QMK)\nDESCRIPTION: This command builds the default keymap for the Sha keyboard using the QMK build environment.  It compiles the firmware for the specified keyboard and keymap. Requires the QMK build environment to be set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/sha/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake sha:default\n```\n\n----------------------------------------\n\nTITLE: Building bradpad Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the bradpad using the QMK build environment. It assumes that the QMK build environment has already been set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/tempo_turtle/bradpad/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake tempo_turtle/bradpad:default\n```\n\n----------------------------------------\n\nTITLE: Building Nemui65 Firmware with QMK\nDESCRIPTION: This command compiles the QMK firmware for the Nemui65 keyboard using the default keymap.  It requires a correctly set up QMK build environment.  The command outputs a .hex or .bin file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wuque/nemui65/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake wuque/nemui65:default\n```\n\n----------------------------------------\n\nTITLE: Building Isometria 75 Firmware\nDESCRIPTION: This command compiles and flashes the default keymap for the Isometria 75 keyboard's rev1 PCB. It assumes the QMK build environment is set up correctly. Refer to the QMK documentation for environment setup and make instructions.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ebastler/isometria_75/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake ebastler/isometria_75/rev1:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Right Half (EE_HANDS initialization)\nDESCRIPTION: This command flashes the right half of the ErgoDox Infinity keyboard with a specific firmware version for EEPROM initialization. This command helps to uniquely identify the right keyboard half for the `EE_HANDS` feature.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/input_club/ergodox_infinity/readme.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nmake input_club/ergodox_infinity:default:dfu-util-split-right\n```\n\n----------------------------------------\n\nTITLE: Building Tiger Lily Firmware with Make\nDESCRIPTION: This snippet provides the command to build the default firmware for the Tiger Lily keyboard using the make command. It assumes the user has already set up their build environment for QMK Firmware. Refer to the linked QMK documentation for environment setup and make instructions.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/bpiphany/tiger_lily/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake bpiphany/tiger_lily:default\n```\n\n----------------------------------------\n\nTITLE: Flashing SP-111 Keyboard Firmware\nDESCRIPTION: This command flashes the default firmware onto the SP-111 keyboard.  It depends on the QMK build environment and a configured flashing tool.  The command assumes the keyboard is connected and in a state ready to receive the firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/viktus/sp111/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake viktus/sp111:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware: QMK Make Flash Command\nDESCRIPTION: This command flashes the compiled firmware onto the EnvKB MCRO keyboard. It utilizes the QMK build environment and the appropriate flashing tools to write the firmware image to the device's memory. Requires a properly configured QMK build environment and a connected keyboard in a flashable state.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/enviousdesign/mcro/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake enviousdesign/mcro:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Fave 87 Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the linworks/fave87 keyboard using the QMK build environment.  It requires a properly configured QMK build environment. The resulting firmware can then be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/linworks/fave87/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake linworks/fave87:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Okayu Firmware QMK\nDESCRIPTION: This command flashes the default firmware onto the Okayu keyboard. It builds the `sawnsprojects/okayu` keyboard with the `default` keymap and then flashes it to the keyboard.  Requires the QMK build environment and appropriate flashing tools.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/sawnsprojects/okayu/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake sawnsprojects/okayu:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing the Firmware - concreteflowers/cor:default:flash\nDESCRIPTION: This command flashes the default firmware to the concreteflowers/cor keyboard. It requires a properly configured QMK build environment and a connected keyboard in bootloader mode. The output will be the firmware being written to the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/concreteflowers/cor/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake concrete flowers/cor:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing MANTA60 Firmware\nDESCRIPTION: This command flashes the default keymap onto the MANTA60 keyboard using the QMK build environment. This assumes that the QMK build environment has been set up correctly and a suitable flashing tool is available.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/manta60/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake manta60:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building RARTLITE Firmware (Makefile)\nDESCRIPTION: This command builds the default firmware for the RARTLITE keyboard using the QMK build environment. It relies on the `make` utility and the QMK firmware framework.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/rart/rartlite/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake rart/rartlite:default\n```\n\n----------------------------------------\n\nTITLE: Building Firmware - QMK\nDESCRIPTION: This snippet shows how to build the default firmware for the Duck Octagon V1 keyboard using the QMK build environment. It requires a configured build environment as described in the QMK documentation. The output is a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/duck/octagon/v1/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake duck/octagon/v1:default\n```\n\n----------------------------------------\n\nTITLE: Flashing JK65 Firmware with QMK\nDESCRIPTION: This command builds and flashes the default firmware for the JK65 keyboard using the QMK build environment. It requires a properly configured QMK build environment and a connected keyboard in a flashable state.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/jaykeeb/jk65/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake jaykeeb/jk65:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Concertina Firmware via CLI\nDESCRIPTION: This command builds the firmware for the Concertina 64-key keyboard with the default keymap using the `make` command.  It compiles the keyboard layout and generates the firmware file ready for flashing.  Ensure the QMK build environment is properly set up before executing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/concertina/64key/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake handwired/concertina/64key:default\n```\n\n----------------------------------------\n\nTITLE: Flashing ScottoStarter Keyboard Firmware\nDESCRIPTION: This command flashes the compiled firmware to the ScottoStarter keyboard. It programs the keyboard's microcontroller with the new firmware, enabling the defined keyboard layout and functionality. This command requires the keyboard to be in a flashable state, often achieved through bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/scottokeebs/scottostarter/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake handwired/scottokeebs/scottostarter:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Keyboard Firmware with Make\nDESCRIPTION: This command flashes the compiled firmware onto the 0xc7/61key keyboard. It requires the QMK build environment and a connected keyboard in a state ready to accept firmware updates. It depends on the dfu-programmer tool or similar flashing utilities.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/0xc7/61key/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake 0xc7/61key:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Cassette42 Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Cassette42 keyboard using the QMK build environment. It requires QMK to be set up and configured properly according to the QMK documentation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/25keys/cassette42/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake 25keys/cassette42:default\n```\n\n----------------------------------------\n\nTITLE: Flashing WT60-H2 Firmware with Make\nDESCRIPTION: This command builds and flashes the default firmware for the wilba.tech WT60-H2 keyboard. It requires a properly configured QMK build environment and a connected keyboard in bootloader mode.  It assumes the `default` keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wilba_tech/wt60_h2/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake wilba_tech/wt60_h2:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building REVIUNG53 Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the REVIUNG53 keyboard using the QMK build environment. It assumes that the QMK build environment is already set up and configured correctly, and outputs the firmware ready for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/reviung/reviung53/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake reviung53:default\n```\n\n----------------------------------------\n\nTITLE: Flashing PistachioPro Firmware (Makefile)\nDESCRIPTION: This command builds and flashes the default firmware to the PistachioPro keyboard. It combines the build and flash steps into a single command. Requires a configured QMK build environment and a connected keyboard in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/rate/pistachio_pro/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake rate/pistachio_pro:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building NFR-70 Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the NFR-70 keyboard using the QMK build environment. It requires the build environment to be set up beforehand.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/nyhxis/nfr_70/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake nyhxis/nfr_70:default\n```\n\n----------------------------------------\n\nTITLE: Flashing theone Keyboard Firmware\nDESCRIPTION: This command flashes the compiled firmware to the theone keyboard using the default configuration. It requires a correctly set up QMK build environment and a connected keyboard in flashing mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/theone/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake theone:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Keyboard Firmware with Make\nDESCRIPTION: This command compiles and flashes the firmware to the Gopolar GG86 keyboard using the default keymap. This assumes the keyboard is already in bootloader mode or can be automatically reset. Requires a properly configured QMK build environment and necessary flashing tools.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/gopolar/gg86/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake gopolar/gg86:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building MNK1800s Firmware (QMK)\nDESCRIPTION: This command builds the default keymap for the MNK1800s keyboard using the QMK build environment. It requires a properly configured QMK environment and assumes the user is in the QMK firmware directory. The output is a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/monokei/mnk1800s/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake monokei/mnk1800s:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Keychron Q3 Firmware\nDESCRIPTION: These `make` commands are used to flash the compiled QMK firmware to the Keychron Q3 keyboard.  The `:flash` target is appended to the build command to initiate the flashing process.  This assumes the QMK build environment is configured to communicate with the keyboard's bootloader. The device must be in a flashable state for this command to succeed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keychron/q3/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake keychron/q3/ansi:default:flash\nmake keychron/q3/ansi_encoder:default:flash\nmake keychron/q3/iso:default:flash\nmake keychron/q3/iso_encoder:default:flash\nmake keychron/q3/jis:default:flash\nmake keychron/q3/jis_encoder:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Majbritt Rev2 Firmware with QMK\nDESCRIPTION: This command is used to compile the QMK firmware for the Majbritt Rev2 keyboard. It specifies the keyboard (sidderskb/majbritt/rev2) and the keymap (default). Make sure that the QMK build environment is properly set up before running this command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/sidderskb/majbritt/rev2/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake sidderskb/majbritt/rev2:default\n```\n\n----------------------------------------\n\nTITLE: Building YMDK Wings Firmware\nDESCRIPTION: This command builds the default firmware for the YMDK Wings keyboard using the QMK build environment. It compiles the keyboard layout and generates the firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ymdk/wings/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake ymdk/wings:default\n```\n\n----------------------------------------\n\nTITLE: Compiling KeebsPCB Default Keymap (Makefile)\nDESCRIPTION: This command compiles the default keymap for the KeebsPCB using the QMK build environment. It assumes that the QMK build environment has been properly set up. Refer to the QMK documentation for setup instructions.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/acheron/keebspcb/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake acheron/keebspcb:default\n```\n\n----------------------------------------\n\nTITLE: Flashing YMDK NP21 Firmware\nDESCRIPTION: This command builds and flashes the default firmware for the YMDK NP21 keyboard to the device. It requires the QMK build environment and a connected keyboard in flashing mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ymdk/np21/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake ymdk/np21:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Equals Firmware\nDESCRIPTION: This command builds the QMK firmware for the Equals keyboard with a specific layout. It requires QMK build environment setup. The output is a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/boardsource/equals/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake boardsource/equals/48:default\nmake boardsource/equals/60:default\nmake boardsource/equals/avr:default\n```\n\n----------------------------------------\n\nTITLE: Flashing QMK Firmware to GEN ONE G1_65\nDESCRIPTION: This command flashes the compiled QMK firmware to the GEN ONE G1_65 keyboard. It requires a properly set up QMK build environment and a connected keyboard in bootloader mode. The output will be the keyboard running the new firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/genone/g1_65/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake genone/g1_65:default:flash\n```\n\n----------------------------------------\n\nTITLE: Listing Bootloaders - qmk flash\nDESCRIPTION: This command lists the available bootloaders. This is done via the `-b` flag.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/cli_commands.md#_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nqmk flash -b\n```\n\n----------------------------------------\n\nTITLE: Building fukuro Firmware with QMK\nDESCRIPTION: This command builds the default keymap for the fukuro keyboard using the QMK build environment. It requires QMK to be set up correctly with all necessary dependencies installed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kibou/fukuro/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake kibou/fukuro:default\n```\n\n----------------------------------------\n\nTITLE: Flashing mini_ten_key_plus Firmware (QMK)\nDESCRIPTION: This command flashes the built firmware to the mini_ten_key_plus keyboard. It assumes the QMK build environment is set up and the keyboard is connected.  The target is `default` and the action is `flash`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mini_ten_key_plus/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake mini_ten_key_plus:default:flash\n```\n\n----------------------------------------\n\nTITLE: Update PWM Buffers - IS31FL3736\nDESCRIPTION: Flushes the PWM values to the LED driver for a specific driver index, updating the LED brightness.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/is31fl3736.md#_snippet_7\n\nLANGUAGE: c\nCODE:\n```\nvoid is31fl3736_update_pwm_buffers(uint8_t index)\n```\n\n----------------------------------------\n\nTITLE: Building TSUBASA Firmware\nDESCRIPTION: This command builds the default firmware for the TSUBASA keyboard. It uses the QMK make system.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/tsubasa/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/tsubasa:default\n```\n\n----------------------------------------\n\nTITLE: Building QMK Firmware for Velvet Hotswap\nDESCRIPTION: This command is used to build the QMK firmware for the Velvet Hotswap keyboard with the default keymap.  It requires the QMK build environment to be set up. The command compiles the firmware, which can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/lucid/velvet_hotswap/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake lucid/velvet_hotswap:default\n```\n\n----------------------------------------\n\nTITLE: Building jels88 Firmware with Make\nDESCRIPTION: This snippet shows how to build the default firmware for the jels88 keyboard using the `make` command. It assumes that the QMK build environment has already been set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/jels/jels88/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake jels/jels88:default\n```\n\n----------------------------------------\n\nTITLE: Build Firmware for IDOBAO MONTEX RGB - Make\nDESCRIPTION: This command builds the default firmware for the IDOBAO MONTEX RGB numpad using the QMK build environment. It requires the QMK build environment to be set up correctly. The output is a .hex file that can be flashed to the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/idobao/montex/v1rgb/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake idobao/montex/v1rgb:default\n```\n\n----------------------------------------\n\nTITLE: Building Tukey Keyboard Firmware with QMK\nDESCRIPTION: This command is used to build the default firmware for the Tukey keyboard using the QMK Firmware build environment. It assumes that the QMK build environment has been properly set up. The output will be a .hex or .bin file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keebio/tukey/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake keebio/tukey:default\n```\n\n----------------------------------------\n\nTITLE: Building Klor firmware using Make\nDESCRIPTION: This command is used to build the default firmware for the Klor keyboard using the QMK build environment. It leverages the `make` command with the keyboard's identifier (`geigeigeist/klor`) and the default keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/geigeigeist/klor/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake geigeigeist/klor:default\n```\n\n----------------------------------------\n\nTITLE: Building Kuro 65 Firmware\nDESCRIPTION: This command builds the default firmware for the Kuro 65 keyboard. It requires a properly configured QMK build environment. The output will be a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kuro/kuro65/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake kuro/kuro65:default\n```\n\n----------------------------------------\n\nTITLE: Building Navi60 Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the Navi60 keyboard. It assumes that the QMK build environment has already been set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/navi60/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake navi60:default\n```\n\n----------------------------------------\n\nTITLE: Building QMK Firmware for Emu Hotswap\nDESCRIPTION: This command builds the QMK firmware for the Emu Hotswap keyboard with the default keymap. It assumes that the QMK build environment has been set up properly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kineticlabs/emu/soldered/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake kineticlabs/emu_hotswap:default\n```\n\n----------------------------------------\n\nTITLE: Building the Mün Keyboard Firmware with QMK\nDESCRIPTION: This command builds the default keymap for the Mün keyboard using the QMK firmware. It requires a properly configured QMK build environment.  The command compiles the firmware and generates a .hex file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/rgbkb/mun/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake rgbkb/mun:default\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for Novus Keyboard\nDESCRIPTION: This command builds the default QMK firmware for the Novus keyboard.  It requires a properly set up QMK build environment.  The output will be a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cutie_club/novus/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake cutie_club/novus:default\n```\n\n----------------------------------------\n\nTITLE: Building VIA-Compatible Firmware - Makefile\nDESCRIPTION: This command builds a VIA-compatible firmware for the Polilla keyboard's revision 1 using the QMK build environment. This allows the keyboard to be configured using the VIA configurator after flashing. It assumes the build environment has been set up according to QMK documentation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/polilla/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake polilla/rev1:via\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for Big Smooth Knob (QMK)\nDESCRIPTION: This command builds the default firmware for the Big Smooth Knob keyboard using the QMK build environment.  It requires QMK to be set up correctly. The output is a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/nacly/bigsmoothknob/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake nacly/bigsmoothknob:default\n```\n\n----------------------------------------\n\nTITLE: Building hineyg80 firmware using make\nDESCRIPTION: This command builds the default firmware for the hineybush/hineyg80 keyboard using the QMK build environment. Ensure the QMK build environment is set up before running this command. The output will be the firmware ready to be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/hineybush/hineyg80/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake hineybush/hineyg80:default\n```\n\n----------------------------------------\n\nTITLE: Building the Fuyu Keyboard\nDESCRIPTION: This command builds the default keymap for the Fuyu keyboard using the QMK firmware. It assumes the build environment is already set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/zykrah/fuyu/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake zykrah/fuyu:default\n```\n\n----------------------------------------\n\nTITLE: Enabling WS2812 RGBW Support\nDESCRIPTION: Enables support for RGBW LEDs. Allows for controlling RGBW LEDs instead of standard RGB LEDs.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/config_options.md#_snippet_80\n\nLANGUAGE: C\nCODE:\n```\n#define WS2812_RGBW\n```\n\n----------------------------------------\n\nTITLE: PS/2 Mouse Invert Axes (C)\nDESCRIPTION: Defines to invert the mouse and scroll axes.  Add to `config.h`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/ps2_mouse.md#_snippet_15\n\nLANGUAGE: c\nCODE:\n```\n#define PS2_MOUSE_INVERT_X\n#define PS2_MOUSE_INVERT_Y\n```\n\nLANGUAGE: c\nCODE:\n```\n#define PS2_MOUSE_INVERT_H\n#define PS2_MOUSE_INVERT_V\n```\n\n----------------------------------------\n\nTITLE: Flashing keyboard firmware with make\nDESCRIPTION: This command flashes the compiled firmware onto the frobiac/hypernano keyboard. It requires a properly configured QMK build environment and a connected keyboard in flashing mode. The command uploads the compiled firmware image to the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/frobiac/hypernano/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake frobiac/hypernano:flash\n```\n\n----------------------------------------\n\nTITLE: Building FistBNMP Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the FistBNMP keyboard. It uses the QMK build environment to compile the source code for the rpiguy9907/fistbnmp keyboard with the default keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/rpiguy9907/fistbnmp/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake rpiguy9907/fistbnmp:default\n```\n\n----------------------------------------\n\nTITLE: Running Matching C Test (QMK)\nDESCRIPTION: This command runs C tests matching the specified wildcard pattern.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/cli_commands.md#_snippet_56\n\nLANGUAGE: qmk\nCODE:\n```\nqmk test-c --test unicode*\n```\n\n----------------------------------------\n\nTITLE: Enabling Unicode Map\nDESCRIPTION: This code snippet enables the Unicode Map feature, allowing input of all possible code points using a mapping table. This is achieved by adding `UNICODEMAP_ENABLE = yes` to the `rules.mk` file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/unicode.md#_snippet_2\n\nLANGUAGE: makefile\nCODE:\n```\nUNICODEMAP_ENABLE = yes\n```\n\n----------------------------------------\n\nTITLE: Make Example for Redragon K617 - Shell\nDESCRIPTION: This command is used to build the QMK firmware for the Redragon K617 keyboard using the default keymap. It assumes that the QMK build environment has already been set up. The command compiles the firmware based on the specified keyboard and keymap configurations.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/rd_61_qmk/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake handwired/rd_61_qmk:default\n```\n\n----------------------------------------\n\nTITLE: Compiling Firmware for ANAVI Macro Pad 10 with QMK\nDESCRIPTION: Compiles the firmware for the ANAVI Macro Pad 10 keyboard using the QMK build environment. This command utilizes the `qmk compile` tool, specifying the keyboard layout (anavi/macropad10) and keymap (default). It assumes the QMK build environment is already set up. The compilation process generates firmware that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/anavi/macropad10/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nqmk compile -kb anavi/macropad10 -km default\n```\n\n----------------------------------------\n\nTITLE: Building akb/ogrn keyboard firmware\nDESCRIPTION: This command builds the default firmware for the akb/ogrn keyboard using the QMK build environment. It requires the QMK build environment to be set up correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/akb/ogrn/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake akb/ogrn:default\n```\n\n----------------------------------------\n\nTITLE: Building Ready100 Firmware with QMK\nDESCRIPTION: This command is used to build the QMK firmware for the Ready100 keyboard with the default keymap. It requires a properly configured QMK build environment. The output is a firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/fjlabs/ready100/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake fjlabs/ready100:default\n```\n\n----------------------------------------\n\nTITLE: Compiling Scotto69 Keyboard Firmware\nDESCRIPTION: This command compiles the default firmware for the Scotto69 keyboard. It requires a correctly configured QMK build environment. The output is a .hex or .bin file ready to be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/scottokeebs/scotto69/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake handwired/scottokeebs/scotto69:default\n```\n\n----------------------------------------\n\nTITLE: Building QMK Firmware for Cypher Keyboard\nDESCRIPTION: This snippet shows how to build the QMK firmware for the Cypher keyboard, specifically for the `rev1` version with the default keymap.  It assumes the QMK build environment has already been set up according to the QMK documentation. The `make` command compiles the firmware, which can then be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/westfoxtrot/cypher/rev1/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake westfoxtrot/cypher/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Building Acperience12 Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Acperience12 macropad using the QMK build environment. It compiles the keymap and other necessary components to create a firmware image ready for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/yynmt/acperience12/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake yynmt/acperience12:default\n```\n\n----------------------------------------\n\nTITLE: Flashing acr87 Firmware\nDESCRIPTION: This command flashes the default firmware to the akko/acr87 keyboard using the QMK build environment. It requires the QMK build environment and a flashing tool to be properly configured. This command assumes the keyboard is in a flashable state.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/akko/acr87/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake akko/acr87:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Fallacy Keyboard Firmware - Makefile\nDESCRIPTION: This command compiles the default keymap for the Fallacy keyboard using the QMK build environment. It requires the QMK build environment to be properly set up. This command will output the firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/fallacy/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake fallacy:default\n```\n\n----------------------------------------\n\nTITLE: Building QMK Firmware for clawsome/hatchback keyboard\nDESCRIPTION: This command builds the QMK firmware for the 'clawsome/hatchback' keyboard with the default configuration. It requires a properly set up QMK build environment. The generated firmware file (.hex) can then be flashed to the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/clawsome/hatchback/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake clawsome/hatchback:default\n```\n\n----------------------------------------\n\nTITLE: Building Pluto12 Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the psuieee/pluto12 keyboard using the QMK build environment.  It requires the QMK build environment to be set up. No specific input parameters are needed, the command directly compiles the firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/psuieee/pluto12/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake psuieee/pluto12:default\n```\n\n----------------------------------------\n\nTITLE: Making n51gl Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the n51gl keyboard using the QMK build environment. It requires the QMK build environment to be set up beforehand. The output is a firmware file that can be flashed onto the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/gl516/n51gl/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake gl516/n51gl:default\n```\n\n----------------------------------------\n\nTITLE: Building buff67v3 Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the buff67v3 keyboard using the QMK build environment. It assumes that the QMK build environment has been properly set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/yandrstudio/buff67v3/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake yandrstudio/buff67v3:default\n```\n\n----------------------------------------\n\nTITLE: Building DZ60 Firmware with Make\nDESCRIPTION: This command builds the default firmware for the DZ60 keyboard using the QMK make system. It assumes that the QMK build environment has been set up correctly. The resulting firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/dz60/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake dz60:default\n```\n\n----------------------------------------\n\nTITLE: Building DB60 firmware with QMK\nDESCRIPTION: This code snippet demonstrates how to build the firmware for the CannonKeys DB60 keyboard using the QMK build system. It specifies the keyboard, layout (j02), and keymap (default).\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cannonkeys/db60/hotswap/readme.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmake cannonkeys/db60/j02:default\n```\n\n----------------------------------------\n\nTITLE: Building Krush65 Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Krush65 hotswap keyboard using the QMK build environment. It assumes the QMK build environment has already been set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/sawnsprojects/krush/krush65/hotswap/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake sawnsprojects/krush/krush65/hotswap:default\n```\n\n----------------------------------------\n\nTITLE: Building QMK Firmware for KiwiKeebs MacroBoard\nDESCRIPTION: This command builds the QMK firmware for the KiwiKeebs MacroBoard V1.0 with the default keymap. It assumes that the QMK build environment is already set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kiwikeebs/macro/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake kiwikeebs/macro:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Clueboard 2x1800 Firmware\nDESCRIPTION: This command flashes the built firmware to the Clueboard 2x1800 keyboard. It uses the `make` command with the `:flash` target. This requires the QMK build environment and a configured flashing tool.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/clueboard/2x1800/2021/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake clueboard/2x1800/2021:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building SX60 Firmware\nDESCRIPTION: This snippet demonstrates how to compile the default firmware for the SX60 keyboard using the QMK build environment. It assumes the user has already set up their build environment according to the QMK documentation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/sx60/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake sx60:default\n```\n\n----------------------------------------\n\nTITLE: Building Kyria Firmware (rev2)\nDESCRIPTION: This command builds the QMK firmware for the Kyria keyboard with revision 2 using the default configuration. It requires a properly set up QMK build environment. The output will be a .hex or .bin file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/splitkb/kyria/readme.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmake splitkb/kyria/rev2:default\n```\n\n----------------------------------------\n\nTITLE: Building Kudox Columner Firmware with QMK\nDESCRIPTION: This command builds the default keymap for the Kudox Columner keyboard using the QMK build environment. It compiles the firmware and generates a .hex file suitable for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kumaokobo/kudox/columner/readme.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmake kumaokobo/kudox/columner:default\n```\n\n----------------------------------------\n\nTITLE: Building Dude09 Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Dude09 macropad. It uses the `make` command within the QMK Firmware environment to compile the firmware. Ensure your build environment is set up correctly before running this command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/starrykeebs/dude09/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake handwired/starrykeebs/dude09:default\n```\n\n----------------------------------------\n\nTITLE: Building Alisaie Firmware with QMK\nDESCRIPTION: This command is used to build the default firmware for the Alisaie keyboard using the QMK build environment. It compiles the source code for the `automata02/alisaie` keyboard with the `default` keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/automata02/alisaie/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake automata02/alisaie:default\n```\n\n----------------------------------------\n\nTITLE: Flashing the E8ghty Keyboard Firmware\nDESCRIPTION: This command flashes the default firmware to the E8ghty keyboard using the QMK build environment. It requires the QMK build environment and assumes that the keyboard is connected and in a flashable state.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/trnthsn/e8ghty/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake trnthsn/e8ghty:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing VT-40 Keyboard Firmware\nDESCRIPTION: This command flashes the compiled firmware to the VT-40 keyboard. It assumes the keyboard is connected and in a state ready to receive the firmware (e.g., bootloader mode).\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/vt40/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake vt40:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Left Half (EE_HANDS initialization)\nDESCRIPTION: This command flashes the left half of the ErgoDox Infinity keyboard with a specific firmware version for EEPROM initialization. This is part of the `EE_HANDS` setup process and helps to uniquely identify the left keyboard half.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/input_club/ergodox_infinity/readme.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmake input_club/ergodox_infinity:default:dfu-util-split-left\n```\n\n----------------------------------------\n\nTITLE: Building Convolution Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the Keebio Convolution Rev1 keyboard. It assumes that the QMK build environment has been set up correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keebio/convolution/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake keebio/convolution/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Compiling specskeys Keyboard Firmware with QMK\nDESCRIPTION: This command compiles the keyboard firmware using the QMK build environment.  It specifies the keyboard (specskeys) and keymap (default). The resulting firmware is placed in the .build directory.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/specskeys/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nqmk compile -kb specskeys -km default\n```\n\n----------------------------------------\n\nTITLE: Flashing Gerald65 Firmware\nDESCRIPTION: This command builds and flashes the default firmware to the Paper Crane Keyboards Gerald65. It depends on the QMK build environment and a connected keyboard in flash mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/papercranekeyboards/gerald65/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake papercranekeyboards/gerald65:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building MNK60 Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the MNK60 keyboard using the QMK build environment. It assumes the build environment is already set up according to QMK's documentation. The output will be a .hex or .bin file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kopibeng/mnk60/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake kopibeng/mnk60:default\n```\n\n----------------------------------------\n\nTITLE: Flashing MNK1800s Firmware (QMK)\nDESCRIPTION: This command flashes a specific keymap to the MNK1800s keyboard using the QMK CLI. It requires a configured QMK environment and assumes the keyboard is in DFU mode (achieved by holding Escape while plugging it in). Replace `<keymap>` with the desired keymap name.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/monokei/mnk1800s/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake monokei/mnk1800s:<keymap>:flash\n```\n\n----------------------------------------\n\nTITLE: Building superuser/frl keyboard firmware using make\nDESCRIPTION: This snippet shows how to build the default firmware for the superuser/frl keyboard using the make command. This command needs to be executed after setting up the build environment for QMK.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/superuser/frl/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake superuser/frl:default\n```\n\n----------------------------------------\n\nTITLE: Flashing DOIO KB3x Firmware with QMK\nDESCRIPTION: This command builds and flashes the default firmware for the DOIO KB3x keyboard using QMK. It requires a properly configured QMK build environment and a connected keyboard in flashable mode. It programs the generated firmware onto the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/doio/kb3x/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake doio/kb3x:default:flash\n```\n\n----------------------------------------\n\nTITLE: Compiling CO60 Keyboard Firmware\nDESCRIPTION: This command compiles the QMK firmware for the CO60 keyboard, specifically the rev7 version with the default keymap. It requires a properly set up QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/co60/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake handwired/co60/rev7:default\n```\n\n----------------------------------------\n\nTITLE: Navigating to Keymap Directory\nDESCRIPTION: This command navigates to the specified keymap directory within the QMK firmware repository. It assumes the current working directory is the root of the QMK repository. This step is crucial before converting the keymap from JSON to C format.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/splitkb/aurora/corne/keymaps/default/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd ./keymaps/splitkb/aurora/corne/my_personal_keymap\n```\n\n----------------------------------------\n\nTITLE: Compiling Iron 165R2 Firmware - Makefile\nDESCRIPTION: These commands compile the QMK firmware for the Iron 165R2 keyboard with the default keymap for either the STM32F072 or STM32F411 microcontroller. The `make` command invokes the QMK build system to generate the firmware binary.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/smithrune/iron165r2/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake smithrune/iron165r2/f072:default\n```\n\nLANGUAGE: Makefile\nCODE:\n```\nmake smithrune/iron165r2/f411:default\n```\n\n----------------------------------------\n\nTITLE: Building Pachi RGB Firmware with Make\nDESCRIPTION: This command builds the default firmware for the Pachi RGB keyboard using the QMK make system. It assumes that the build environment has already been set up according to the QMK documentation. The resulting firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/xelus/pachi/rgb/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake xelus/pachi/rgb:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Zodiark Keyboard Firmware - QMK\nDESCRIPTION: This command flashes the built firmware onto the Zodiark keyboard. It assumes that the build environment is set up and the keyboard is connected to the computer. It requires pressing the reset button on each half of the keyboard during the flashing process.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/aleblazer/zodiark/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake aleblazer/zodiark:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building XD75 Firmware\nDESCRIPTION: This snippet shows how to compile the QMK firmware for the XD75 keyboard using the `make` command. It specifies the target keyboard layout and triggers the build process. The command should be executed in a QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/xiudi/xd75/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake xiudi/xd75:default\n```\n\n----------------------------------------\n\nTITLE: Flashing panc60 Keyboard Firmware (QMK)\nDESCRIPTION: This command builds and flashes the default firmware for the panc60 keyboard to the device. It depends on the QMK build environment and requires that the keyboard is in a flashable state. It uses the `panc60` keyboard definition with the `default` keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/panc60/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake panc60:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing KMAC PAD Firmware\nDESCRIPTION: This command flashes the built firmware to the KMAC PAD keyboard. It builds the firmware if necessary, then uses the appropriate flashing tool. It requires a properly configured QMK build environment and a connected keyboard in flashing mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kbdmania/kmac_pad/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake kbdmania/kmac_pad:default:flash\n```\n\n----------------------------------------\n\nTITLE: Compiling QMK Firmware for XD60 Layout\nDESCRIPTION: This command compiles the QMK firmware for the XD60 keyboard with a specific split backspace and arrow keys layout.  It uses the 'make' command, which relies on the QMK build environment being properly set up. The compiled firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/xiudi/xd60/keymaps/split_bksp_arrows/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake xd60:split_bksp_arrows\n```\n\n----------------------------------------\n\nTITLE: Building Cyberstar Keyboard Firmware with Make\nDESCRIPTION: This command compiles the Cyberstar keyboard firmware with the default keymap using the QMK build environment. It requires the QMK build environment to be set up beforehand. The output is a firmware file ready to be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/cyberstar/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/cyberstar:default\n```\n\n----------------------------------------\n\nTITLE: Building thedogkeyboard with QMK\nDESCRIPTION: This command builds the default keymap for thedogkeyboard using the QMK build environment. It requires a properly configured QMK build environment. The resulting firmware can then be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kakunpc/thedogkeyboard/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake kakunpc/thedogkeyboard:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Devil68 Pro Firmware\nDESCRIPTION: This command flashes the default firmware onto the Devil68 Pro keyboard. It relies on the QMK make system and requires a configured build environment and a connected keyboard in a flashable state.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/horrortroll/chinese_pcb/devil68_pro/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake horrortroll/chinese_pcb/devil68_pro:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Keychron Q9 Plus Firmware (QMK)\nDESCRIPTION: This command flashes the default firmware for the Keychron Q9 Plus keyboard with ANSI layout using the QMK build environment.  It requires a configured flashing tool and assumes the keyboard is in a state where it can receive the flash command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keychron/q9_plus/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake keychron/q9_plus/ansi:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing SCARLET Firmware (QMK)\nDESCRIPTION: This command flashes the default firmware onto the SCARLET keyboard using QMK.  It requires a properly configured QMK build environment and a connected SCARLET keyboard in bootloader mode.  It uses the `make` command with the `flash` target.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/draytronics/scarlet/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake draytronics/scarlet:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Clueboard 66% Firmware (QMK)\nDESCRIPTION: This snippet shows how to build the default firmware for the Clueboard 66% rev1 using the QMK build environment. Ensure the build environment is set up before running the command. This assumes the user is in the QMK firmware directory.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/clueboard/66/rev1/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake clueboard/66/rev1:default\n```\n\n----------------------------------------\n\nTITLE: h88 Column Pin Configuration - C\nDESCRIPTION: This code defines the column pin configuration for the h88 keyboard matrix. Each column is assigned to a specific pin on the microcontroller. This configuration is essential for the keyboard to correctly identify which key has been pressed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/hineybush/h88/readme.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n/* Column pin configuration\n * col: 0   1   2   3   4   5   6   7   8   \n * pin: F0  F1  F4  F5  F6  F7  C7  C6  D2\n */\n```\n\n----------------------------------------\n\nTITLE: Flashing n2 Keyboard Firmware with QMK\nDESCRIPTION: This command compiles and flashes the QMK Firmware to the n2 keyboard with the default keymap. It requires a properly configured QMK build environment and a compatible bootloader on the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/nightly_boards/n2/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake nightly_boards/n2:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building the suika27melo keyboard with default settings\nDESCRIPTION: This command builds the firmware for the suika27melo keyboard using the default configuration. It compiles the source code and creates a firmware image that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/suikagiken/suika27melo/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake suikagiken/suika27melo:default\n```\n\n----------------------------------------\n\nTITLE: Building Keyboard Firmware\nDESCRIPTION: This command is used to build the default firmware for the Chameleon keyboard using the QMK build environment. It compiles the keymap and generates a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/tweetydabird/chameleon/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake tweetydabird/chameleon:default\n```\n\n----------------------------------------\n\nTITLE: Building DB63 Keyboard Firmware\nDESCRIPTION: This command builds the default keymap for the DB63 keyboard. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/db/db63/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake db/db63:default\n```\n\n----------------------------------------\n\nTITLE: Building Wete V1 Firmware\nDESCRIPTION: This command builds the default firmware for the Wete V1 keyboard using the QMK build environment. It compiles the keyboard layout and generates the firmware file ready to be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/rmi_kb/wete/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake rmi_kb/wete/v1:default\n```\n\n----------------------------------------\n\nTITLE: Compile Firmware for Hotswap PCB - QMK\nDESCRIPTION: This command compiles the QMK firmware for the Mode Eighty V2 keyboard with a hotswap PCB using the default layout. It requires the QMK build environment to be set up. The resulting binary file (*.bin) can be found in the QMK firmware directory.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mode/m80v2/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake mode/m80v2/m80v2h:default # Hotswap\n```\n\n----------------------------------------\n\nTITLE: Building ek87 default keymap with QMK Make\nDESCRIPTION: This command builds the default keymap for the Eniigma Keyboards ek87 using the QMK build environment. It assumes that the QMK build environment is already set up.  The command invokes the `make` utility with the target `eniigmakeyboards/ek87:default`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/eniigmakeyboards/ek87/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake eniigmakeyboards/ek87:default\n```\n\n----------------------------------------\n\nTITLE: Building RadPad Firmware (QMK)\nDESCRIPTION: This command builds the default keymap for the RadPad keyboard using the QMK firmware build environment. It assumes that the QMK build environment has been set up correctly. It produces a .hex or .bin file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keybage/radpad/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake keybage/radpad:default\n```\n\n----------------------------------------\n\nTITLE: Building NEWGAME40 Firmware with QMK\nDESCRIPTION: This snippet shows how to build the default firmware for the NEWGAME40 keyboard using the QMK build environment.  It requires QMK to be set up and assumes the user is in the QMK firmware directory. The output will be a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/newgame40/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake newgame40:default\n```\n\n----------------------------------------\n\nTITLE: Building Gray Studio HB85 Firmware\nDESCRIPTION: This command builds the default firmware for the Gray Studio HB85 keyboard using the QMK build environment.  It compiles the keyboard's keymap and firmware into a .hex file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/gray_studio/hb85/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake gray_studio/hb85:default\n```\n\n----------------------------------------\n\nTITLE: Building XD87 Firmware (Default Layout)\nDESCRIPTION: This command builds the QMK firmware for the XD87 keyboard with the default layout. It requires the QMK build environment to be properly set up. The command compiles the keyboard configuration and generates the firmware file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/xiudi/xd87/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake xiudi/xd87:default\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for LW-75 with Make\nDESCRIPTION: This command builds the default firmware for the LW-75 keyboard using the QMK build environment. It compiles the source code and creates the firmware file that can be flashed onto the keyboard. Requires QMK build environment setup.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/laneware/lw75/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake laneware/lw75:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Keyboard Firmware with QMK\nDESCRIPTION: This command flashes the compiled keyboard firmware to the specified keyboard (ez_maker/directpins/teensy_lc) using the QMK flash tool. It requires the QMK build environment to be set up and the target microcontroller to be properly connected and in a flashable state. The command assumes the firmware has already been compiled.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ez_maker/directpins/teensy_lc/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nqmk flash -kb ez_maker/directpins/teensy_lc -km default\n```\n\n----------------------------------------\n\nTITLE: Flashing xox70 keyboard firmware\nDESCRIPTION: This command flashes the pre-built QMK firmware onto the xox70 keyboard with the default keymap.  It requires the QMK build environment to be configured, the keyboard to be in bootloader mode (typically via a physical reset button), and the `dfu-programmer` or similar flashing tool to be available. This will overwrite the existing firmware on the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mokey/xox70/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake mokey/xox70:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing duckboard R2 Firmware (QMK)\nDESCRIPTION: This command builds and flashes the default keymap for the duckboard R2 keyboard to the device using the QMK build environment. This assumes that the QMK environment is set up correctly and the keyboard is in flashing mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/doodboard/duckboard_r2/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake doodboard/duckboard_r2:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building tenpad Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the tenpad macropad using the QMK build environment.  It requires the QMK build environment to be set up. The command compiles the keyboard firmware and prepares it for flashing onto the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/evancookaudio/tenpad/readme.md#_snippet_0\n\nLANGUAGE: Make\nCODE:\n```\nmake evancookaudio/tenpad:default\n```\n\n----------------------------------------\n\nTITLE: Building Ploopy Trackball Firmware\nDESCRIPTION: This snippet shows how to build and flash the QMK firmware for different revisions of the Ploopy Classic Trackball. It uses the `make` command with specific target identifiers for each revision. The command assumes that the QMK build environment is already set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ploopyco/trackball/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake ploopyco/trackball/rev1_004:default:flash\nmake ploopyco/trackball/rev1_005:default:flash\nmake ploopyco/trackball/rev1_007:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware with Make for MTB60 (Solder)\nDESCRIPTION: This command builds and flashes the default firmware for the MTB60 (Solder Edition) keyboard. It uses the `make` command with the target `mtbkeys/mtb60/solder:default:flash`. This assumes that the QMK build environment has already been set up and the keyboard is in a state to accept the flashed firmware, such as bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mtbkeys/mtb60/solder/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake mtbkeys/mtb60/solder:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Marauder Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the Marauder keyboard using QMK.  It requires a properly configured QMK build environment. The output will be a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/marauder/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake handwired/marauder:default\n```\n\n----------------------------------------\n\nTITLE: Building Grooveboard Firmware (Makefile)\nDESCRIPTION: This command builds the default firmware for the Grooveboard keyboard. It uses the `make` command with the target specified as `ianklug/grooveboard:default`. This process compiles the source code and creates the firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ianklug/grooveboard/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake ianklug/grooveboard:default\n```\n\n----------------------------------------\n\nTITLE: Building Velvet Solder QMK Firmware\nDESCRIPTION: This command builds the default QMK firmware for the Velvet Solder PCB. It requires a correctly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/lucid/velvet_solder/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake lucid/velvet_solder:default\n```\n\n----------------------------------------\n\nTITLE: Creating keymap.c from QMK Configurator Export - qmk json2c\nDESCRIPTION: Creates a keymap.c file from a QMK Configurator export.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/cli_commands.md#_snippet_21\n\nLANGUAGE: shell\nCODE:\n```\nqmk json2c [-o OUTPUT] filename\n```\n\n----------------------------------------\n\nTITLE: Building the capsule65 Firmware - QMK\nDESCRIPTION: This command builds the default firmware for the capsule65 keyboard using the QMK build environment. It requires a properly set up QMK build environment. The output is the compiled firmware ready to be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/eason/capsule65/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake eason/capsule65:default\n```\n\n----------------------------------------\n\nTITLE: Building Kaly42 Keyboard Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Kaly42 keyboard using the QMK build environment. It compiles the keyboard's keymap and firmware, producing a .hex or .bin file ready for flashing. Ensure the QMK build environment is correctly set up before executing this command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kaly/kaly42/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake kaly/kaly42:default\n```\n\n----------------------------------------\n\nTITLE: Defining RGBLED Option Type in rules.mk\nDESCRIPTION: This example shows how to define the `RGBLED_OPTION_TYPE` variable in a keymap's `rules.mk` file. This variable is used to specify the type of RGB LED implementation (none, backlight, or underglow).\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/hardware_keyboard_guidelines.md#_snippet_4\n\nLANGUAGE: makefile\nCODE:\n```\n# Please set the following according to the selection of the hardware implementation option.\nRGBLED_OPTION_TYPE = backlight   ## none, backlight or underglow\n```\n\n----------------------------------------\n\nTITLE: Enabling RGB Light Layer Override\nDESCRIPTION: If defined, lighting layers will be shown even if RGB Light is off, allowing for consistent lighting even when the main RGB lighting is disabled.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/config_options.md#_snippet_73\n\nLANGUAGE: C\nCODE:\n```\n#define RGBLIGHT_LAYERS_OVERRIDE_RGB_OFF\n```\n\n----------------------------------------\n\nTITLE: Building Soup10 Firmware\nDESCRIPTION: This command builds the default firmware for the Soup10 keyboard.  It uses the QMK make system to compile the firmware.  Requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/soup10/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake soup10:default\n```\n\n----------------------------------------\n\nTITLE: Building KabeDon 98e Keyboard Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the KabeDon 98e keyboard using the QMK build environment. It assumes that the QMK build environment has already been set up. The resulting firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kabedon/kabedon98e/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake kabedon/kabedon98e:default\n```\n\n----------------------------------------\n\nTITLE: Creating a ILI9163 Device Instance (C)\nDESCRIPTION: This code snippet shows how to create an instance of the ILI9163 display device in firmware using the `qp_ili9163_make_spi_device` function. The function takes parameters for panel dimensions, SPI pins (chip select, data/command, reset), SPI divisor, and SPI mode. The returned device handle is required for subsequent drawing operations. Requires the `ili9163_spi` driver to be enabled.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/quantum_painter.md#_snippet_8\n\nLANGUAGE: c\nCODE:\n```\npainter_device_t qp_ili9163_make_spi_device(uint16_t panel_width, uint16_t panel_height, pin_t chip_select_pin, pin_t dc_pin, pin_t reset_pin, uint16_t spi_divisor, int spi_mode);\n```\n\n----------------------------------------\n\nTITLE: Compiling Pill60 Keyboard Firmware with STM32F401\nDESCRIPTION: Compiles the default keymap for the Pill60 keyboard using QMK, specifying the STM32F401 microcontroller as the target. This command allows building firmware for the Pill60 using a Blackpill_F401 MCU.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/pill60/readme.md#_snippet_1\n\nLANGUAGE: qmk\nCODE:\n```\nqmk compile -kb handwired/pill60/blackpill_f401 -km default\n```\n\n----------------------------------------\n\nTITLE: Converting TTF Font to Image\nDESCRIPTION: This snippet illustrates how to use the `qmk painter-make-font-image` command to convert a TTF font file (NotoSans-ExtraCondensedBold.ttf) into an image file (noto11.png).  It specifies the font size (11) and includes additional unicode glyphs (ĄȽɂɻɣɈʣ) in the output image. Requires a TTF font file as input.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/quantum_painter.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ qmk painter-make-font-image --font NotoSans-ExtraCondensedBold.ttf --size 11 -o noto11.png --unicode-glyphs \"ĄȽɂɻɣɈʣ\"\n```\n\n----------------------------------------\n\nTITLE: Building Zeus Keyboard Firmware\nDESCRIPTION: This snippet shows how to build the default firmware for the Zeus keyboard using the QMK build environment.  It assumes that the QMK build environment has already been set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/pearlboards/zeus/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake pearlboards/zeus:default\n```\n\n----------------------------------------\n\nTITLE: Building Chocolate Bar Firmware with Make\nDESCRIPTION: This command builds the default firmware for the Chocolate Bar keyboard using the QMK build environment. It utilizes the 'make' command followed by the keyboard and keymap specification.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/misonoworks/chocolatebar/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake misonoworks/chocolatebar:default\n```\n\n----------------------------------------\n\nTITLE: Building the thera Keyboard Firmware (QMK)\nDESCRIPTION: This snippet demonstrates how to build the default firmware for the thera keyboard using the QMK build environment.  It requires the QMK build environment to be set up correctly. The command generates the firmware that can be flashed onto the thera keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/creatkeebs/thera/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake creatkeebs/thera:default\n```\n\n----------------------------------------\n\nTITLE: Building RAMA WORKS M65-B Firmware\nDESCRIPTION: This command compiles the QMK Firmware for the RAMA WORKS M65-B keyboard with the default keymap. It requires a properly configured QMK build environment to execute successfully.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wilba_tech/rama_works_m65_b/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake wilba_tech/rama_works_m65_b:default\n```\n\n----------------------------------------\n\nTITLE: Building linworks/favepada Firmware\nDESCRIPTION: This command builds the default firmware for the linworks/favepada keyboard. It requires a properly set up QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/linworks/favepada/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake linworks/favepada:default\n```\n\n----------------------------------------\n\nTITLE: Building Bebol Keyboard Firmware with QMK\nDESCRIPTION: This command is used to build the default firmware for the Bebol keyboard using QMK.  It assumes that the QMK build environment has been set up correctly. The 'handwired/swiftrax/bebol' specifies the keyboard layout, and ':default' selects the default keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/swiftrax/bebol/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake handwired/swiftrax/bebol:default\n```\n\n----------------------------------------\n\nTITLE: Building Avalanche Firmware with Make\nDESCRIPTION: These commands use the `make` command to build the QMK firmware for different versions of the Avalanche keyboard PCB. Each command specifies the keyboard layout (avalanche/v1, avalanche/v2, avalanche/v3) and the keymap (default). Requires a configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/avalanche/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake avalanche/v1:default  # for v1 PCBs\n```\n\nLANGUAGE: shell\nCODE:\n```\nmake avalanche/v2:default  # for v2 PCBs\n```\n\nLANGUAGE: shell\nCODE:\n```\nmake avalanche/v3:default  # for v3 PCBs\n```\n\n----------------------------------------\n\nTITLE: Compiling and Flashing Firmware for KTR1010 LEDs - QMK\nDESCRIPTION: This command compiles the QMK firmware for the PrimeKB Meridian keyboard (KTR1010 LEDs) and then flashes it to the keyboard directly, assuming the device is in DFU mode. The command streamlines the firmware update process. The target device must be in DFU state before execution.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/primekb/meridian/readme.md#_snippet_3\n\nLANGUAGE: make\nCODE:\n```\nmake primekb/meridian/ktr1010:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing EC Type-K Firmware with Make\nDESCRIPTION: This command builds and flashes the default firmware for the EC Type-K keyboard using the QMK build environment. It requires a properly configured QMK environment and the necessary tools for flashing the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cipulot/ec_typek/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake cipulot/ec_typek:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Acheron Themis Default Layout\nDESCRIPTION: This command builds the default layout for the Acheron Themis keyboard.  It assumes the QMK build environment is already set up. Replace <revision> with the appropriate revision number.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/acheron/themis/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake acheron/themis/<revision>:default\n```\n\n----------------------------------------\n\nTITLE: Flashing the split75 Firmware with QMK\nDESCRIPTION: This command builds and flashes the default keymap for the split75 keyboard to the keyboard's microcontroller. It requires a properly configured QMK build environment and a connected keyboard in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mt/split75/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake mt/split75:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing the lfn.merro60 Firmware\nDESCRIPTION: This command flashes the default firmware to the lfn.merro60 keyboard. It requires the QMK build environment to be set up and the keyboard to be in bootloader mode. It will use the default flashing tool configured in your QMK environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/chlx/lfn_merro60/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake chlx/lfn_merro60:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing rb87 Keyboard Firmware with QMK\nDESCRIPTION: This command flashes the default firmware to the rb87 keyboard.  It requires that the keyboard is in bootloader mode.  The specific method to enter bootloader mode is to hold the reset button on the Elite-C while plugging it in.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ryanbaekr/rb87/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake ryanbaekr/rb87:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Foxlab Time 80 Reforged Hotswap Firmware\nDESCRIPTION: This command builds the default keymap for the Foxlab Time 80 Reforged Hotswap keyboard using the QMK build environment. It assumes that the QMK build environment is properly set up. It outputs the compiled firmware file, which can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/foxlab/time_re/hotswap/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake foxlab/time_re/hotswap:default\n```\n\n----------------------------------------\n\nTITLE: Disabling LED Matrix without EEPROM Persistence (C)\nDESCRIPTION: This function disables the LED matrix without writing the state to EEPROM. This change will not be persistent across resets.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/led_matrix.md#_snippet_14\n\nLANGUAGE: C\nCODE:\n```\nvoid led_matrix_disable_noeeprom(void)\n```\n\n----------------------------------------\n\nTITLE: Setting OLED Scroll Speed (C)\nDESCRIPTION: This function sets the scroll speed of the OLED display. It takes a speed value from 0-7, with 0 being the fastest and 7 being the slowest. The change doesn't take effect until scrolling is started or restarted.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/oled_driver.md#_snippet_32\n\nLANGUAGE: c\nCODE:\n```\n// Sets scroll speed, 0-7, fastest to slowest. Default is three.\n// Does not take effect until scrolling is either started or restarted\n// the ssd1306 supports 8 speeds with the delay\n// listed below between each frame of the scrolling effect\n// 0=2, 1=3, 2=4, 3=5, 4=25, 5=64, 6=128, 7=256\nvoid oled_scroll_set_speed(uint8_t speed);\n```\n\n----------------------------------------\n\nTITLE: Setting CPI for combined pointing devices - C\nDESCRIPTION: This code snippet demonstrates how to set the CPI (counts per inch) for the left and right pointing devices when using combined pointing devices in QMK. It initializes the CPI values in the `keyboard_post_init_user` function.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/pointing_device.md#_snippet_21\n\nLANGUAGE: c\nCODE:\n```\nvoid keyboard_post_init_user(void) {\n    pointing_device_set_cpi_on_side(true, 1000); //Set cpi on left side to a low value for slower scrolling.\n    pointing_device_set_cpi_on_side(false, 8000); //Set cpi on right side to a reasonable value for mousing.\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Encoder on One Side of Split Keyboard (QMK)\nDESCRIPTION: This snippet shows how to disable the encoder on one side of a split keyboard by setting the pin and resolution definitions to empty braces `{}` in the `config.h` file.  This is useful when one side of the split keyboard does not have an encoder. The `_RIGHT` definitions are then used to configure the encoder on the other side.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/encoders.md#_snippet_8\n\nLANGUAGE: c\nCODE:\n```\n#define ENCODER_A_PINS { }\n#define ENCODER_B_PINS { }\n#define ENCODER_RESOLUTIONS { }\n#define ENCODER_A_PINS_RIGHT { B12 }\n#define ENCODER_B_PINS_RIGHT { B13 }\n#define ENCODER_RESOLUTIONS_RIGHT { 4 }\n```\n\n----------------------------------------\n\nTITLE: Building and Flashing Helix rev2 with QMK\nDESCRIPTION: This command builds the default keymap for the Helix rev2 keyboard and flashes it to the Pro Micro controller using QMK firmware. Ensure that the QMK build environment is set up correctly before running this command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/helix/rev2/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake helix/rev2:default:flash\n```\n\n----------------------------------------\n\nTITLE: Planck EZ LED Level Control\nDESCRIPTION: These functions allow you to control the brightness level of the right and left indicator LEDs on the Planck EZ keyboard.  The brightness level is on a scale of 0-255.  These settings are not persistent across restarts.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/zsa/planck_ez/readme.md#_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nvoid planck_ez_right_led_level(uint8_t level);\nvoid planck_ez_left_led_level(uint8_t level);\n```\n\n----------------------------------------\n\nTITLE: Building Lumberjack Keyboard Firmware (Makefile)\nDESCRIPTION: This command builds the default firmware for the Lumberjack keyboard using the QMK build environment. It targets the 'pcej/lumberjack' keyboard with the 'default' keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/peej/lumberjack/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake peej/lumberjack:default\n```\n\n----------------------------------------\n\nTITLE: Building Latinpad Firmware\nDESCRIPTION: This command builds the default firmware for the Latinpad keyboard. It requires the QMK build environment to be set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/latincompass/latinpad/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake latincompass/latinpad:default\n```\n\n----------------------------------------\n\nTITLE: Building Mullet Keyboard Firmware with QMK\nDESCRIPTION: This snippet shows how to build the default keymap for the Mullet keyboard using the QMK firmware. It assumes that the QMK build environment has already been set up according to the QMK documentation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/coseyfannitutti/mullet/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake coseyfannitutti/mullet:default\n```\n\n----------------------------------------\n\nTITLE: Building KBD75 rev1 Default Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the KBD75 keyboard revision 1 using the QMK build environment. It requires a properly configured QMK environment. The resulting firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kbdfans/kbd75/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake kbdfans/kbd75/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Building KB58 Firmware\nDESCRIPTION: This command builds the default firmware for the KB58 keyboard using the QMK build environment. It assumes that the QMK build environment has been set up correctly and that the necessary files are present in the QMK firmware repository.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kb58/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake kb58:default\n```\n\n----------------------------------------\n\nTITLE: Building the CRKBD R2G with VIA keymap\nDESCRIPTION: This command builds the firmware for the CRKBD R2G keyboard with the 'mb_via' keymap. It utilizes the QMK make system to compile the keyboard firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/crkbd/r2g/readme.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmake crkbd/r2g:mb_via\n```\n\n----------------------------------------\n\nTITLE: Building Sidekick Firmware - Make Command\nDESCRIPTION: This command compiles the firmware for the Sidekick keyboard using the QMK build environment. It specifies the keyboard (clawsome/sidekick) and keymap (default). Ensure the QMK build environment is set up correctly before running this command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/clawsome/sidekick/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake clawsome/sidekick:default\n```\n\n----------------------------------------\n\nTITLE: Building WT60-A Keyboard Firmware with QMK\nDESCRIPTION: This command is used to build the default firmware for the wilba_tech WT60-A keyboard using the QMK build environment. It requires the QMK build environment to be set up correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wilba_tech/wt60_a/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake wilba_tech/wt60_a:default\n```\n\n----------------------------------------\n\nTITLE: Compiling 3W6 rev1 Default Firmware using QMK\nDESCRIPTION: This command compiles the default firmware for the 3W6 rev1 keyboard using the QMK build environment.  It assumes the QMK build environment has already been set up. The output will be a .hex file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/3w6/rev1/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake 3w6/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Building MoJo68 Firmware with QMK\nDESCRIPTION: This snippet provides the command to build the default firmware for the MelGeek MoJo68 rev1 keyboard using the QMK build environment. It requires the QMK build environment to be set up correctly.  The output is the firmware binary that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/melgeek/mojo68/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake melgeek/mojo68/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Keyboard Firmware (Makefile)\nDESCRIPTION: This command flashes the default firmware to the hardwareabstraction/handwire keyboard. It uploads the compiled .hex file to the keyboard's microcontroller. Requires a QMK build environment and a connected keyboard in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/hardwareabstraction/handwire/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake hardwareabstraction/handwire:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building dyz_tkl Keyboard Firmware\nDESCRIPTION: This command builds the default keymap for the dyz_tkl keyboard.  It uses the `make` command within the QMK Firmware environment.  It assumes the QMK build environment is already set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/dyz/dyz_tkl/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake dyz/dyz_tkl:default\n```\n\n----------------------------------------\n\nTITLE: Building Roses Lite Firmware with QMK\nDESCRIPTION: This command builds the Roses Lite keyboard firmware with the default keymap using the QMK build environment. It assumes the QMK build environment is properly set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/roseslite/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake roseslite:default\n```\n\n----------------------------------------\n\nTITLE: Building THE60 Rev2 Firmware - QMK\nDESCRIPTION: This command builds the default firmware for the THE60 Rev2 keyboard using the QMK build environment. It assumes that the QMK build environment has been properly set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/lazydesigners/the60/readme.md#_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nmake lazydesigners/the60/rev2:default\n```\n\n----------------------------------------\n\nTITLE: Building keyboard firmware\nDESCRIPTION: This command builds the firmware for the space_space/rev1 keyboard with the default keymap.  It requires the QMK build environment to be set up. The resulting firmware can then be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/qpockets/space_space/rev1/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake space_space/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Building KBD67 Mk.II RGB ISO Firmware - Makefile\nDESCRIPTION: This command builds the default firmware for the KBD67 Mk.II RGB ISO keyboard using the QMK build environment. It assumes that the QMK build environment has already been set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kbdfans/kbd67/mkiirgb_iso/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake kbdfans/kbd67/mkiirgb_iso:default\n```\n\n----------------------------------------\n\nTITLE: Building Stello65 Firmware\nDESCRIPTION: This command builds the default firmware for the Stello65 keyboard (sl_rev1 revision). It requires the QMK build environment to be properly set up. The command compiles the firmware into a .hex or .bin file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/stello65/sl_rev1/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake stello65/sl_rev1:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware to Proton C with QMK\nDESCRIPTION: This command attempts to flash the built firmware to the Proton C microcontroller. It also searches for the bootloader device. If the bootloader is not found, it retries every 5 seconds. The user must manually enter DFU-Bootloader mode by resetting the controller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ckeys/thedora/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake ckeys/thedora:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Tris Default Keymap - QMK\nDESCRIPTION: This command builds and flashes the default keymap to the Tris keyboard using QMK. It combines the build and flash steps using the `make` command. This requires the QMK environment to be properly configured and the keyboard to be in a flashable state.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/tgr/tris/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake tris:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Silakka54 Firmware with Make\nDESCRIPTION: This command flashes the compiled firmware onto the Silakka54 keyboard.  It requires the keyboard to be in bootloader mode.  It utilizes the QMK build environment and associated flashing tools to transfer the firmware image to the device's memory. It depends on the `make` command and a functional QMK environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/silakka54/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake silakka54:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing the CRKBD R2G with VIA keymap\nDESCRIPTION: This command flashes the compiled firmware to the CRKBD R2G keyboard using the 'mb_via' keymap. It utilizes the QMK command-line interface (qmk) to perform the flashing process.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/crkbd/r2g/readme.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nqmk flash -kb crkbd/r2g -km mb_via\n```\n\n----------------------------------------\n\nTITLE: Flashing BM80V2 Firmware\nDESCRIPTION: This command flashes the default firmware onto the BM80V2 keyboard. It requires the QMK build environment and a connected BM80V2 keyboard in bootloader mode. The output is the successful flashing of the firmware or an error message.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kprepublic/bm80v2/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake kprepublic bm80v2:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building TA-65 Firmware with QMK\nDESCRIPTION: This snippet demonstrates how to build the default firmware for the TA-65 keyboard using the `make` command within the QMK firmware environment. It assumes that the QMK build environment has already been set up. It will generate the firmware file that can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/evyd13/ta65/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake ta65:default\n```\n\n----------------------------------------\n\nTITLE: Flashing QMK Firmware to KiwiKeebs MacroBoard\nDESCRIPTION: This command builds and flashes the QMK firmware to the KiwiKeebs MacroBoard V1.0 with the default keymap.  It assumes that the QMK build environment is already set up and the necessary flashing tools are installed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kiwikeebs/macro/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake kiwikeebs/macro:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing UniGo66 Firmware with QMK\nDESCRIPTION: This command builds and flashes the default firmware for the UniGo66 keyboard. It requires a properly configured QMK build environment and the keyboard to be in DFU mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/sirius/unigo66/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake sirius/unigo66:default:flash\n```\n\n----------------------------------------\n\nTITLE: Enabling Repeat Key Feature in QMK\nDESCRIPTION: This snippet shows how to enable the repeat key feature in a QMK keymap by adding `REPEAT_KEY_ENABLE = yes` to the keymap's `rules.mk` file. This allows the use of `QK_REPEAT_KEY` and `QK_ALT_REPEAT_KEY` in the keymap. The snippet configures the build system to include the necessary code for the repeat key functionality.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/ChangeLog/20230528.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nREPEAT_KEY_ENABLE = yes\n```\n\n----------------------------------------\n\nTITLE: Flashing Keyboard Firmware: QMK Make Command\nDESCRIPTION: This command flashes the compiled QMK firmware onto the handwired/jankrp2040dactyl keyboard. It requires the keyboard to be in bootloader mode. The specific flashing method depends on the bootloader and hardware configuration.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/jankrp2040dactyl/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake handwired/jankrp2040dactyl:default:flash\n```\n\n----------------------------------------\n\nTITLE: Enabling LED Matrix in QMK Firmware (C)\nDESCRIPTION: This function turns the LED matrix on. The enabled state is stored in EEPROM for persistence.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/led_matrix.md#_snippet_11\n\nLANGUAGE: C\nCODE:\n```\nvoid led_matrix_enable(void)\n```\n\n----------------------------------------\n\nTITLE: Flashing QMK Firmware\nDESCRIPTION: This command flashes the QMK firmware to the Aster Ergo keyboard using the default keymap. It requires the QMK build environment to be set up and the necessary flashing tools to be installed.  The command assumes the keyboard is connected and in a flashable state.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/bahm/aster_ergo/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake bahm/aster_ergo:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing pi50 Keyboard Firmware with Make\nDESCRIPTION: This command flashes the compiled firmware to the pi50 keyboard.  It uses the QMK make system to build and flash the firmware onto the Raspberry Pi Pico. The device needs to be in bootloader mode prior to running this command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/1upkeyboards/pi50/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake 1upkeyboards/pi50:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing DTIsaac01 Keyboard Firmware\nDESCRIPTION: This command flashes the compiled firmware onto the dtisaac01 keyboard.  It extends the build command with the ':flash' target. Requires a properly configured QMK build environment and a connected keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/dtisaac/dtisaac01/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake dtisaac01:default:flash\n```\n\n----------------------------------------\n\nTITLE: Including IS31FL3746A Driver in rules.mk (Make)\nDESCRIPTION: This snippet demonstrates how to include the IS31FL3746A driver source files in your `rules.mk` file for standalone usage. It specifies the paths to the driver files for both single-color and RGB configurations and indicates that an I²C driver is required.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/is31fl3746a.md#_snippet_0\n\nLANGUAGE: Make\nCODE:\n```\nCOMMON_VPATH += $(DRIVER_PATH)/led/issi\nSRC += is31fl3746a-mono.c # For single-color\nSRC += is31fl3746a.c # For RGB\nI2C_DRIVER_REQUIRED = yes\n```\n\n----------------------------------------\n\nTITLE: Flashing Unikorn 60 Keyboard Firmware\nDESCRIPTION: This command is used to flash the compiled firmware onto the Unikorn 60 keyboard. It requires the QMK flashing tool to be properly installed and configured. The keyboard needs to be in DFU mode for flashing to succeed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/unikorn/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake unikorn:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Promise87 ANSI Keymap\nDESCRIPTION: This command flashes the built ANSI keymap onto the Promise87 keyboard. It requires the QMK firmware build environment to be properly set up and the keyboard to be in a flashable state (e.g., bootloader mode).\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wuque/promise87/ansi/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake wuque/promise87/ansi:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flash Barracuda Keyboard Firmware\nDESCRIPTION: This command flashes the default firmware to the barracuda keyboard. It requires QMK build environment to be set up and the board to be in bootloader mode. The flash process will write the compiled firmware to the microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/barracuda/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake barracuda:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building N60_A Default Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the N60_A keyboard using the QMK build environment. It assumes that the QMK build environment has been properly set up. The output is a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/nix_studio/n60_a/readme.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmake n60_a:default\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for TAN67 PCB\nDESCRIPTION: This command builds the default firmware for the TAN67 keyboard using the QMK build environment. It compiles the source code and generates the firmware binary.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/pangorin/tan67/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake pangorin/tan67:default\n```\n\n----------------------------------------\n\nTITLE: Building and Flashing QMK Firmware\nDESCRIPTION: This command builds the QMK firmware for the atreus/feather keyboard with the clash keymap and flashes it to the device. It uses the make command with the target specified as `atreus/feather:clash:flash`. The QMK environment must be set up beforehand.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/atreus/feather/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake atreus/feather:clash:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Leeku Finger65 Firmware\nDESCRIPTION: This command builds and flashes the default firmware to the Leeku Finger65 keyboard. It depends on the QMK build environment being set up and a suitable flashing tool being available.  It combines the build and flash steps into a single command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/leeku/finger65/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake leeku/finger65:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing the Game Roy ADVANCE Keyboard\nDESCRIPTION: This command flashes the default firmware onto the Game Roy ADVANCE keyboard.  It requires a properly configured QMK build environment and a connected keyboard in bootloader mode. The output will be the firmware being uploaded to the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keystonecaps/gameroyadvance/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake keystonecaps/gameroyadvance:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware with Make\nDESCRIPTION: This command flashes the built firmware onto the prototypist/oceanographer keyboard.  It uses the `make` command with the target specified as `prototypist/oceanographer:default:flash`.  The keyboard must be in a flashable state (e.g., bootloader mode).\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/prototypist/oceanographer/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake prototypist/oceanographer:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Kawayo Keyboard Firmware\nDESCRIPTION: These commands flash the compiled firmware onto the Kawayo keyboard. The `make` command, combined with the `:flash` target, programs the microcontroller with the new firmware. The first command flashes the default keymap, and the second flashes the VIA-enabled keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cipulot/kawayo/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake cipulot/kawayo:default:flash\n```\n\nLANGUAGE: Makefile\nCODE:\n```\nmake cipulot/kawayo:via:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing babyV Keyboard Firmware with QMK\nDESCRIPTION: This command builds and flashes the default firmware for the babyV keyboard using the QMK build environment. It compiles the keymap, flashes the generated firmware onto the keyboard via a connected USB device, and requires the QMK environment to be set up properly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/eyeohdesigns/babyv/readme.md#_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nmake eyeohdesigns/babyv:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Krado66 Firmware with Make\nDESCRIPTION: This command compiles the Krado66 keyboard firmware with the default configuration.  It uses the QMK make system. Ensure the build environment is properly set up beforehand.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kradoindustries/krado66/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake kradoindustries/krado66:default\n```\n\n----------------------------------------\n\nTITLE: Compiling IDOBAO ID80v3 ANSI Default Keymap\nDESCRIPTION: This command compiles the default ANSI keymap for the IDOBAO ID80v3 keyboard using the QMK build environment. It requires a properly set up QMK build environment. The compiled firmware can then be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/idobao/id80/v3/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake idobao/id80/v3/ansi:default\n```\n\n----------------------------------------\n\nTITLE: Building Jorne Firmware with Make\nDESCRIPTION: This command builds the default firmware for the Jorne Rev1 keyboard. It requires the QMK build environment to be set up correctly.  The command will compile the firmware and prepare it for flashing to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/jorne/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake jorne/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Compiling Skeletyl Firmware with v2 (STeMCell) and default keymap\nDESCRIPTION: This command compiles the QMK firmware for the Skeletyl keyboard with v2 shield (STeMCell) and default keymap. It uses the `qmk compile` command with specific parameters for the keyboard, version, and keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/bastardkb/skeletyl/readme.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nqmk compile -kb bastardkb/skeletyl/v2/stemcell -km default\n```\n\n----------------------------------------\n\nTITLE: Flashing Helios Firmware with QMK\nDESCRIPTION: This command flashes the built firmware onto the Helios keyboard. It utilizes the QMK build environment and assumes the keyboard is in a flashable state. Requires the QMK build environment to be set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/wwa/helios/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake handwired/wwa/helios:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Infinity 60% Firmware\nDESCRIPTION: This command builds and flashes the default firmware for the Infinity 60% keyboard (rev1). It depends on the QMK make system and requires the build environment to be set up, along with the necessary tools for flashing the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/input_club/infinity60/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake input_club/infinity60/rev1:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware for Infinity87 Rev.2 (QMK)\nDESCRIPTION: This command flashes the firmware onto the Infinity87 Rev.2 keyboard. This command assumes that the QMK build environment is set up, the firmware is built and the keyboard is in bootloader mode (accessed via the reset switch on the PCB).\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechlovin/infinity87/rev2/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake mechlovin/infinity87/rev2:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Compensator Firmware (QMK)\nDESCRIPTION: This command flashes the specified keymap firmware to the Compensator keyboard using the QMK build environment. It requires the keyboard to be in bootloader mode, accessible via the physical reset button.  Replace `<keymap>` with the desired keymap name.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/compensator/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake compensator:<keymap>:flash\n```\n\n----------------------------------------\n\nTITLE: Building Contra Keyboard Firmware - Makefile\nDESCRIPTION: This command builds the default keymap for the Contra keyboard using the QMK build environment. It requires the QMK build environment to be set up correctly. The output is a firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/contra/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake contra:default\n```\n\n----------------------------------------\n\nTITLE: Building Mokey 63 Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Mokey 63 keyboard using the QMK build system. It compiles the keyboard's keymap and other configurations into a firmware image that can be flashed onto the device. This command needs the QMK build environment to be properly set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mokey/mokey63/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake mokey/mokey63:default\n```\n\n----------------------------------------\n\nTITLE: Building Boardsource 4x12 Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Boardsource 4x12 keyboard using the QMK build environment.  It assumes that the QMK build environment is already set up. The resulting firmware can then be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/boardsource/4x12/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake boardsource/4x12:default\n```\n\n----------------------------------------\n\nTITLE: Building Choco60 Rev1 Firmware\nDESCRIPTION: This command compiles the default QMK firmware for the Choco60 Rev1 keyboard. It utilizes the QMK build environment, which needs to be set up beforehand. The resulting firmware can then be flashed onto the Pro Micro controller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/recompile_keys/choco60/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake recompile_keys/choco60/rev1:default\n```\n\n----------------------------------------\n\nTITLE: MC-76K Keyboard Matrix Visualization\nDESCRIPTION: This snippet visualizes the MC-76K keyboard matrix.  Each element represents a key, and its position reflects its row and column within the matrix. The labels (00, 01, etc.) represent the keycodes.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mc_76k/matrix_diagram.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n┌───┐┌───┬───┬───┬───┐┌───┬───┬───┬───┐┌───┬───┬───┬───┐┌───┐\n│00 ││01 │02 │03 │04 ││05 │06 │07 │08 ││09 │0A │0B │0C ││0D │\n└───┘└───┴───┴───┴───┘└───┴───┴───┴───┘└───┴───┴───┴───┘└───┘\n┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┐\n│10 │11 │12 │13 │14 │15 │16 │17 │18 │19 │1A │1B │1C │1D │3C │\n├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴───┤\n│20   │21 │22 │23 │24 │25 │26 │27 │28 │29 │2A │2B │2C │2D   │\n├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴─────┤\n│30    │31 │32 │33 │34 │35 │36 │37 │38 │39 │3A │3B │3D      │\n├──────┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴────┬───┤\n│40      │42 │43 │44 │45 │46 │47 │48 │49 │4A │4B │4C    │4D │\n├─────┬──┴┬──┴──┬┴───┴───┴───┴───┴───┴───┴──┬┴───┴┬───┬─┴───┤\n│50   │52 │53   │57                         │5B   │5C │5D   │\n└─────┴───┴─────┴───────────────────────────┴─────┴───┴─────┘\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for DC01 Numpad\nDESCRIPTION: This command compiles the firmware for the DC01 Numpad keyboard with the default keymap. It requires a properly configured QMK build environment. The resulting firmware can then be flashed onto the keyboard's atmega32u4 microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/dc01/numpad/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake dc01/numpad:default\n```\n\n----------------------------------------\n\nTITLE: Keyboard Pre Initialization (C)\nDESCRIPTION: This snippet shows how to use the `keyboard_pre_init_user()` function to perform hardware-oriented initialization tasks very early in the startup process, before USB initialization.  It sets specific GPIO pins (B0-B4) as output for controlling LEDs.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/custom_quantum_functions.md#_snippet_2\n\nLANGUAGE: C\nCODE:\n```\nvoid keyboard_pre_init_user(void) {\n  // Call the keyboard pre init code.\n\n  // Set our LED pins as output\n  gpio_set_pin_output(B0);\n  gpio_set_pin_output(B1);\n  gpio_set_pin_output(B2);\n  gpio_set_pin_output(B3);\n  gpio_set_pin_output(B4);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining LED mapping array for RGB LEDs in .c file\nDESCRIPTION: This code snippet demonstrates how to define the LED mapping array `g_snled27351_leds` in your `<keyboardname>.c` file for RGB LEDs. Each entry in the array maps an LED index to the corresponding driver index and PWM register addresses for the red, green, and blue channels.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/snled27351.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nconst snled27351_led_t PROGMEM g_snled27351_leds[SNLED27351_LED_COUNT] = {\n/* Driver\n *   |  R         G         B */\n    {0, CB1_CA1,  CB1_CA2,  CB1_CA3},\n    // etc...\n};\n```\n\n----------------------------------------\n\nTITLE: Building guide68 Keyboard Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the guide68 keyboard using the QMK build environment. It requires the QMK build environment to be properly set up.  The output will be a .hex file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/salicylic_acid3/guide68/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake salicylic_acid3/guide68:default\n```\n\n----------------------------------------\n\nTITLE: Making Default Firmware for Rart45 Keyboard\nDESCRIPTION: This command builds the default firmware for the Rart45 keyboard. It assumes that the QMK build environment has already been set up. The command compiles the keyboard's keymap and generates the firmware binary.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/rart/rart45/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake rart/rart45:default\n```\n\n----------------------------------------\n\nTITLE: Flashing QMK Firmware to SpiderIsland Split 78-key\nDESCRIPTION: This command flashes the built firmware onto the SpiderIsland Split 78-key keyboard. It requires a configured QMK build environment and a connected keyboard in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/spiderisland/split78/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake spiderisland/split78:default:flash\n```\n\n----------------------------------------\n\nTITLE: Compiling Acheron Arctic default keymap\nDESCRIPTION: This command compiles the default keymap for the Acheron Arctic keyboard using the QMK firmware build environment. It assumes that the QMK build environment has already been set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/acheron/arctic/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake acheron/arctic:default\n```\n\n----------------------------------------\n\nTITLE: Updating scaling registers - C\nDESCRIPTION: Flushes the scaling register values to the IS31FL3746A LED driver. This function updates the scaling registers for the specified driver, identified by its index.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/is31fl3746a.md#_snippet_10\n\nLANGUAGE: C\nCODE:\n```\nvoid is31fl3746a_update_scaling_registers(uint8_t index)\n```\n\n----------------------------------------\n\nTITLE: Building Choconum Firmware using Make\nDESCRIPTION: This command builds the default keymap for the Choconum numpad using the QMK build environment.  It requires the QMK build environment to be set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keebio/choconum/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake keebio/choconum:default\n```\n\n----------------------------------------\n\nTITLE: Building Jay60 Keyboard Firmware (Make)\nDESCRIPTION: This command builds the default firmware for the Jay60 keyboard. It utilizes the `make` command within the QMK Firmware environment, targeting the `mechlovin/jay60` keyboard with the `default` keymap. The command assumes the QMK build environment has been correctly set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechlovin/jay60/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake mechlovin/jay60:default\n```\n\n----------------------------------------\n\nTITLE: Building Nyx Keyboard Firmware with Make\nDESCRIPTION: This command builds the default firmware for the Nyx keyboard (rev1) using the QMK make system. It compiles the source code and generates the firmware file that can be flashed onto the device. It assumes the QMK build environment is already set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/horrortroll/nyx/rev1/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake horrortroll/nyx/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Sugar Glider Keyboard Firmware\nDESCRIPTION: This command builds and flashes the default firmware to the mechwild/sugarglider keyboard. It requires a properly configured QMK build environment and a connected keyboard in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechwild/sugarglider/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake mechwild/sugarglider:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building default keymap for Framework keyboard with QMK\nDESCRIPTION: This command builds the default keymap for the Framework keyboard using the QMK firmware build environment. It compiles the keymap and generates the firmware file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/7c8/framework/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake 7c8/framework:default # default keymap\n```\n\n----------------------------------------\n\nTITLE: Flashing HP69 Firmware\nDESCRIPTION: This command builds and flashes the default firmware for the HP69 keyboard to the connected device. It requires a properly configured QMK build environment and a connected keyboard in flashing mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/hp69/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake hp69:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building the Selka40 Firmware\nDESCRIPTION: This command builds the default firmware for the Selka40 keyboard. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/dyz/selka40/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake dyz/selka40:default\n```\n\n----------------------------------------\n\nTITLE: Building Buff75 Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Buff75 keyboard using the QMK build environment. It specifies the keyboard and keymap to use for the build process. Requires a correctly set up QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/herevoland/buff75/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake herevoland/buff75:default\n```\n\n----------------------------------------\n\nTITLE: Verifying Flash Dump Content\nDESCRIPTION: This command uses `strings` and `grep` to verify that the flash memory backup contains expected data.  It searches for the string \"USB KB\" within the dumped flash data. This confirms a successful read of keyboard-related information.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/xiaomi/mk02/readme.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nstrings flash.bin | grep KB\n```\n\n----------------------------------------\n\nTITLE: Flashing the Lagrange Keyboard Firmware\nDESCRIPTION: This command builds and flashes the default firmware for the Lagrange keyboard. It requires a properly configured QMK build environment and a connected keyboard in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/lagrange/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake handwired/lagrange:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Palette G67 Soldered Firmware\nDESCRIPTION: This command compiles and flashes the QMK Firmware to the Palette G67 Soldered keyboard with the default keymap. It requires a correctly configured QMK build environment and a connected keyboard in a state ready to receive the flash. This command also implicitly builds the firmware if it hasn't been already.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/neokeys/g67/soldered/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake neokeys/palette_g67/soldered:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building spaget Firmware using Make\nDESCRIPTION: This command is used to build the default firmware for the spaget macropad. It requires QMK build environment to be set up.  It outputs the compiled firmware file that can be flashed onto the Arduino Pro Micro.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/obuwunkunubi/spaget/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake handwired/obuwunkunubi/spaget:default\n```\n\n----------------------------------------\n\nTITLE: Building Omnikeyish Keyboard Firmware with QMK\nDESCRIPTION: This snippet demonstrates how to build the default firmware for the Omnikeyish keyboard using the QMK build environment.  It assumes the user has already set up their QMK build environment according to the QMK documentation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/omnikeyish/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake omnikeyish:default\n```\n\n----------------------------------------\n\nTITLE: Building mammoth20x Firmware\nDESCRIPTION: This command builds the QMK Firmware for the mammoth20x keyboard with the default keymap. It requires a properly set up QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wuque/mammoth20x/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake wuque/mammoth20x:default\n```\n\n----------------------------------------\n\nTITLE: Building Bloomer v2 Firmware using QMK\nDESCRIPTION: This command builds the QMK firmware for the Bloomer v2 keyboard with the default keymap. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cozykeys/bloomer/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake cozykeys/bloomer/v2:default\n```\n\n----------------------------------------\n\nTITLE: Enabling pointing device debug messages - C\nDESCRIPTION: This code snippet shows how to enable debug messages for pointing device drivers in QMK. By defining `POINTING_DEVICE_DEBUG` in the keyboard's `config.h` file, debug information will be printed to the console output.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/pointing_device.md#_snippet_23\n\nLANGUAGE: c\nCODE:\n```\n#define POINTING_DEVICE_DEBUG\n```\n\n----------------------------------------\n\nTITLE: Building Fruitbar R1 Firmware - QMK\nDESCRIPTION: This command builds the default firmware for the Fruitbar R1 keyboard. It leverages the QMK build environment to compile the firmware using the default keymap configuration.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/fruitykeeb/fruitbar/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake fruitykeeb/fruitbar/r1:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Keychron V1 Firmware with QMK\nDESCRIPTION: This command builds and flashes the default ANSI layout firmware to the Keychron V1 keyboard. This requires a properly configured QMK build environment and a connected keyboard in flashing mode. It programs the keyboard's microcontroller with the compiled firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keychron/v1/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake keychron/v1/ansi:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing MarcoPad Firmware (QMK)\nDESCRIPTION: This command builds and flashes the default firmware for the MarcoPad using the QMK build environment. It compiles the source code, generates a firmware file, and then flashes it onto the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/marcopad/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake marcopad:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building QMK Firmware for 60 ANSI Arrow\nDESCRIPTION: This command demonstrates how to build the QMK firmware for a 60 ANSI arrow keyboard using the default keymap. It assumes that the QMK build environment has been set up correctly. Replace `<keyboard_folder>` with the appropriate directory name for the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/layouts/default/60_ansi_arrow/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake <keyboard_folder>:default_60_ansi_arrow\n```\n\n----------------------------------------\n\nTITLE: Building supersplit keyboard firmware\nDESCRIPTION: This command builds the default keymap for the supersplit keyboard using the QMK build environment.  It compiles the firmware, readying it for flashing. The build environment must be properly set up before running this command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/supersplit/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake supersplit:default\n```\n\n----------------------------------------\n\nTITLE: Building Canoe Gen2 Firmware (Make)\nDESCRIPTION: This command builds the default firmware for the Canoe Gen2 keyboard using the QMK build environment. It compiles the keymap and other necessary files into a firmware image.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/percent/canoe_gen2/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake percent/canoe_gen2:default\n```\n\n----------------------------------------\n\nTITLE: Building Clueboard 2x1800 Firmware\nDESCRIPTION: This command builds the default firmware for the Clueboard 2x1800 keyboard. It uses the QMK build environment and requires the QMK firmware repository to be set up correctly. The command compiles the keyboard's keymap and other configurations to generate a firmware image.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/clueboard/2x1800/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake 2x1800:default\n```\n\n----------------------------------------\n\nTITLE: Building Telophase Firmware\nDESCRIPTION: This command is used to compile the default keymap for the Telophase keyboard using the QMK build environment. It requires a properly set up build environment as described in the QMK documentation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/telophase/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake telophase:default\n```\n\n----------------------------------------\n\nTITLE: Building Mikeneko 65 Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the Mikeneko 65 keyboard.  It requires a properly configured QMK build environment.  The output is a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mikeneko65/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake mikeneko65:default\n```\n\n----------------------------------------\n\nTITLE: Building Fuji75 Solder Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Fuji75 Solder keyboard. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/sakura_workshop/fuji75/solder/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake sakura_workshop/fuji75/solder:default\n```\n\n----------------------------------------\n\nTITLE: Building NP_64 Firmware\nDESCRIPTION: This command builds the default firmware for the NP_64 keyboard. It requires the QMK build environment to be set up correctly.  The output is a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/weirdo/naiping/np64/readme.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmake weirdo/naiping/np64:default\n```\n\n----------------------------------------\n\nTITLE: Building Sedan Keyboard Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the Sedan keyboard. It requires a correctly configured QMK build environment. The output will be a firmware file that can be flashed onto the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/clawsome/sedan/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake clawsome/sedan:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Vaneela Ex Firmware with QMK\nDESCRIPTION: This command builds and flashes the default firmware for the Vaneela Ex keyboard using the QMK build environment. It requires a properly configured QMK build environment and a connected keyboard in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/delikeeb/vaneelaex/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake delikeeb/vaneelaex:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing M65 rev4 firmware with make\nDESCRIPTION: This command builds and flashes the default firmware for the M65 keyboard revision 4 using the QMK make system. It compiles the source code, generates a firmware image, and then flashes it to the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mlego/m65/readme.md#_snippet_7\n\nLANGUAGE: Makefile\nCODE:\n```\nmake mlego/m65/rev4:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building XD87 Firmware (ISO Layout)\nDESCRIPTION: This command builds the QMK firmware for the XD87 keyboard with the ISO TKL layout. The QMK build environment needs to be configured beforehand. The generated firmware file will be specific to the ISO layout.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/xiudi/xd87/readme.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmake xiudi/xd87:default_tkl_iso\n```\n\n----------------------------------------\n\nTITLE: Enabling Normally Closed Pedal\nDESCRIPTION: This instruction refers to a configuration option within the bandominedoni.h file. Uncommenting \"PEDAL_NORMALLY_CLOSED\" activates the use of a normally-on pedal for switching between Open/Close states. This requires modifying the source code and recompiling the firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/bandominedoni/readme.md#_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nUncomment \"PEDAL_NORMALLY_CLOSED\" in bandominedoni.h when normally-on pedal is used for switching Open/Close state.\n```\n\n----------------------------------------\n\nTITLE: Building Satxri6key with QMK\nDESCRIPTION: This command builds the default keymap for the Satxri6key keyboard using the QMK firmware build environment.  It requires a properly configured QMK build environment. The output is a firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/sawnsprojects/satxri6key/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake sawnsprojects/satxri6key:default\n```\n\n----------------------------------------\n\nTITLE: Flashing the H50 keyboard with default configuration\nDESCRIPTION: This command compiles and flashes the firmware to the H50 keyboard with the default configuration. It requires the QMK build environment to be set up and the keyboard to be connected and accessible for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/huytbt/h50/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake huytbt/h50:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building TGR 910 CE Firmware (Makefile)\nDESCRIPTION: This command builds the default firmware for the TGR 910 CE keyboard.  It uses the `make` command within the QMK Firmware environment.  Requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/tgr/910ce/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake tgr/910ce:default\n```\n\n----------------------------------------\n\nTITLE: Building the Default EEK! Keymap\nDESCRIPTION: This command builds the default keymap for the EEK! keyboard. It requires a correctly configured QMK Firmware build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/eek/silk_down/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake eek:default\n```\n\n----------------------------------------\n\nTITLE: Building Freyr Keyboard Firmware (QMK)\nDESCRIPTION: This command builds the default keymap for the Freyr keyboard using the QMK build environment. It utilizes the `make` command with the specified target `hnahkb/freyr:default`. The target specifies the keyboard manufacturer and keyboard name along with the default keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/hnahkb/freyr/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake hnahkb/freyr:default\n```\n\n----------------------------------------\n\nTITLE: Building void65h Firmware\nDESCRIPTION: This command builds the QMK firmware for the void65h keyboard with the default keymap. It compiles the necessary source files and generates the firmware binary.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/eason/void65h/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake eason/void65h:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware to ZOS65S\nDESCRIPTION: This command flashes the built firmware to the ZOS65S keyboard.  It requires the QMK build environment to be set up and the keyboard to be in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/zos/65s/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake zos/65s:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Utopia88 Firmware with Make\nDESCRIPTION: This command builds and flashes the default keymap for the Utopia88 keyboard using the QMK build environment. It compiles the firmware and then uses a flashing tool (determined by the keyboard's bootloader) to upload the compiled firmware to the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kelwin/utopia88/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake kelwin/utopia88:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing CB87 Firmware (QMK)\nDESCRIPTION: This command builds and flashes the default firmware to the CherryB Studio CB87 keyboard using the QMK build environment. It requires the QMK build environment and a connected keyboard in flashing mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cherrybstudio/cb87/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake cherrybstudio/cb87:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building WE27 Firmware with QMK\nDESCRIPTION: This snippet demonstrates how to build the default firmware for the WE27 keyboard using the QMK build environment. The command `make wekey/we27:default` compiles the keyboard's firmware. Ensure the QMK build environment is correctly set up before running this command, as described in the QMK documentation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wekey/we27/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake wekey/we27:default\n```\n\n----------------------------------------\n\nTITLE: Building Gvalchca GA15.0 Keyboard Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the Gvalchca GA15.0 keyboard using the QMK build environment. It requires the QMK build environment to be properly set up. The resulting firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/gvalchca/ga150/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake gvalchca/ga150:default\n```\n\n----------------------------------------\n\nTITLE: Activating a layer\nDESCRIPTION: Activates the specified layer.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/feature_layers.md#_snippet_9\n\nLANGUAGE: c\nCODE:\n```\nlayer_on\n```\n\n----------------------------------------\n\nTITLE: Deactivating a layer\nDESCRIPTION: Deactivates the specified layer.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/feature_layers.md#_snippet_10\n\nLANGUAGE: c\nCODE:\n```\nlayer_off\n```\n\n----------------------------------------\n\nTITLE: Flashing Clunker Firmware\nDESCRIPTION: This command flashes the compiled firmware to the Clunker keyboard. It requires that the keyboard be in bootloader mode and that the QMK build environment is properly configured with the necessary flashing tools. The process will overwrite the existing firmware on the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechwild/clunker/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake mechwild/clunker:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Signature87 Firmware\nDESCRIPTION: This command builds the default firmware for the Signature87 keyboard using the QMK build environment. It assumes that the QMK build environment has already been set up. The resulting firmware can then be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/projectkb/signature87/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake projectkb/signature87:default\n```\n\n----------------------------------------\n\nTITLE: Flashing the Printed Pad Keyboard Firmware\nDESCRIPTION: This command flashes the compiled firmware to the Printed Pad keyboard. It requires the QMK build environment and the necessary tools for flashing (e.g., dfu-util). It builds the firmware first and then flashes it onto the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/printedpad/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake printedpad:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing NIU Mini Firmware\nDESCRIPTION: This command flashes the compiled firmware onto the NIU Mini keyboard. It utilizes the QMK command-line tools to upload the firmware image to the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kbdfans/niu_mini/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake kbdfans/niu_mini:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Freebird Numpad Pro Firmware - Makefile\nDESCRIPTION: This command builds the default firmware for the Freebird Numpad Pro keyboard using the QMK build environment. It utilizes the `make` command and specifies the keyboard, layout (pro), and keymap (default). Ensure the QMK build environment is properly set up before running this command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keebsforall/freebirdnp/pro/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake keebsforall/freebirdnp/pro:default\n```\n\n----------------------------------------\n\nTITLE: Flashing AKB Vero Firmware with QMK\nDESCRIPTION: This command flashes the built firmware to the AKB Vero keyboard using the QMK build environment. Requires a correctly configured QMK build environment and a connected keyboard in a flashable state.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/akb/vero/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake antipode/vero:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Ratio65 Firmware with Make\nDESCRIPTION: This command builds the default firmware for the Ratio65 hotswap revision A keyboard using the QMK make system. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/rationalist/ratio65_hotswap/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake rationalist/ratio65_hotswap/rev_a:default\n```\n\n----------------------------------------\n\nTITLE: Building Valor Firmware with QMK\nDESCRIPTION: This snippet shows how to build the firmware for the Valor keyboard using the QMK build environment.  It uses the `make` command with the target specified as `xelus/valor/rev1:default`. Ensure the QMK build environment is properly set up beforehand.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/xelus/valor/rev1/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake xelus/valor/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Flashing KinTwin Firmware\nDESCRIPTION: This command flashes the default firmware to the KinTwin keyboard. It requires a configured QMK build environment and a flashing tool appropriate for the Blackpill STM32F401. Assumes the keyboard is in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kinesis/kintwin/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake kinesis/kintwin:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Rad Keyboard Firmware (Makefile)\nDESCRIPTION: This command builds the default firmware for the Rad Macro Pad using the `make` command. It assumes that the QMK build environment is properly set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/rad/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake rad:default\n```\n\n----------------------------------------\n\nTITLE: Flashing the Paws 60 keyboard\nDESCRIPTION: This command flashes the compiled firmware onto the Paws 60 keyboard. It requires a properly configured QMK build environment and a compatible flashing tool.  The default layout is used.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/horrortroll/paws60/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake horrortroll/paws60:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building SP-111 Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the SP-111 keyboard. It utilizes the QMK build environment. Ensure the build environment is set up correctly before running this command.  It compiles the source code into a firmware file ready to be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/viktus/sp111/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake viktus/sp111:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Arrow Mechanics WINGS with QMK\nDESCRIPTION: This command flashes the Arrow Mechanics WINGS keyboard with the default keymap using the QMK firmware. It requires QMK command-line interface to be installed and configured. The command compiles and uploads the firmware to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/arrowmechanics/wings/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nqmk flash -kb arrowmechanics/wings -km default\n```\n\n----------------------------------------\n\nTITLE: Listing DFU Devices with dfu-util\nDESCRIPTION: This command uses dfu-util to list connected devices in DFU mode. It helps verify if the keyboard is in bootloader mode before proceeding with firmware backup or flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/durgod/k3x0/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndfu-util --list\n```\n\n----------------------------------------\n\nTITLE: Flashing Desire65 Firmware\nDESCRIPTION: This command flashes the compiled firmware to the Desire65 keyboard. It uses the QMK build environment and specifies the keyboard, keymap, and flash target.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/archerkeyboard/desire65/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake archerkeyboard/desire65:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for Alpaca whitefox-eclipse\nDESCRIPTION: This command builds the default firmware for the Alpaca Keyboards whitefox-eclipse keyboard. It uses the `make` command with the target `alpaca/wfeclipse:default`. This command requires a properly set up QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/alpaca/wfeclipse/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake alpaca/wfeclipse:default\n```\n\n----------------------------------------\n\nTITLE: Flashing bt66tech60 Firmware\nDESCRIPTION: This command flashes the compiled firmware onto the bt66tech60 keyboard. It uses the QMK flashing tools to upload the firmware to the keyboard's STM32 microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/bt66tech/bt66tech60/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake bt66tech:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Atlas 65 Keyboard Firmware (QMK)\nDESCRIPTION: This command flashes the built firmware onto the Atlas 65 keyboard. It requires a properly configured QMK build environment and assumes the keyboard is connected and in a state ready to accept the flash.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/atlas_65/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake atlas_65:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing QMK Firmware to VE.A Keyboard\nDESCRIPTION: This command builds and flashes the QMK firmware with the default keymap to the VE.A keyboard. It assumes the bootloader is already active or automatically entered. It relies on the QMK build environment and flashing tools.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/oddforge/vea/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake oddforge/vea:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing EEPROM for Left Hand\nDESCRIPTION: This command flashes the EEPROM of the left-hand side of the keyboard with the appropriate configuration.  It allows the keyboard to determine its hand based on the EEPROM content. `$(COM_PORT)` needs to be replaced with the actual serial port.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/not_so_minidox/readme.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\navrdude -p atmega32u4 -P $(COM_PORT) -c avr109 -U eeprom:w:\\\"./quantum/split_common/eeprom-lefthand.eep\\\"\n```\n\nLANGUAGE: Shell\nCODE:\n```\n// or the equivalent in dfu-programmer\n```\n\n----------------------------------------\n\nTITLE: Building Iris Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the Iris keyboard using the QMK build environment.  It compiles the source code and prepares the firmware for flashing. Requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/iriskeyboards/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake iriskeyboards:default\n```\n\n----------------------------------------\n\nTITLE: Building IKKI68 Aurora Firmware\nDESCRIPTION: This command builds the QMK firmware for the IKKI68 Aurora keyboard with the default keymap. It requires the QMK build environment to be set up correctly. The output will be a firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wuque/ikki68_aurora/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake wuque/ikki68_aurora:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Slime88 Keyboard Firmware\nDESCRIPTION: This command flashes the default firmware to the Slime88 keyboard.  It uses the `make` command with the target specified as `zykrah/slime88:default:flash`. This command assumes that the build environment is properly configured.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/zykrah/slime88/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake zykrah/slime88:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building NZ67v2 Firmware with QMK\nDESCRIPTION: This command builds the default keymap for the NZ67v2 keyboard using the QMK build environment.  It compiles the source code and generates the firmware file that can be flashed onto the keyboard. Ensure the QMK build environment is properly set up before running this command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/yandrstudio/nz67v2/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake yandrstudio/nz67v2:default\n```\n\n----------------------------------------\n\nTITLE: Flashing JP60 Firmware with QMK\nDESCRIPTION: This command builds and flashes the default firmware for the ai03/jp60 keyboard. It requires the QMK build environment to be set up correctly and the keyboard to be connected. The process will build the .hex file and then use the appropriate flashing tool to upload it to the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ai03/jp60/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake ai03/jp60:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building RiotPad Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the RiotPad using the QMK build environment. It compiles the necessary source code and generates a firmware file that can be flashed onto the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/shandoncodes/riot_pad/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake shandoncodes/riot_pad:default\n```\n\n----------------------------------------\n\nTITLE: Building EP96 Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the EP96 keyboard using the QMK build environment.  It requires the QMK build environment to be set up and accessible in the command line.  The output is a firmware file that can be flashed to the EP96 keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ep/96/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake ep/96:default\n```\n\n----------------------------------------\n\nTITLE: Building Event Horizon Keyboard Firmware - QMK\nDESCRIPTION: This command builds the default firmware for the Event Horizon keyboard using QMK. It assumes the QMK build environment is already set up.  It compiles the firmware to be flashed onto the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/protozoa/event_horizon/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake protozoa/event_horizon:default\n```\n\n----------------------------------------\n\nTITLE: Flashing the keymap\nDESCRIPTION: This command builds and flashes the default keymap for the ogurec/left_pm keyboard. It uses the `make` command and specifies the keyboard, keymap, and the flash target.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/drhigsby/ogurec/left_pm/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake ogurec/left_pm:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Mino Plus Firmware\nDESCRIPTION: This command builds the firmware for the Mino Plus keyboard with the soldered layout using the default keymap. It requires a properly configured QMK build environment. The resulting firmware can then be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/shandoncodes/mino_plus/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake shandoncodes/mino_plus/soldered:default\n```\n\n----------------------------------------\n\nTITLE: Building QMK Firmware for USB C Model M\nDESCRIPTION: This command builds the QMK firmware for the USB C Model M keyboard with the ashpil_usbc configuration and the default keymap.  It assumes that the QMK build environment is already set up. The resulting firmware can then be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ibm/model_m/ashpil_usbc/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake ibm/model_m/ashpil_usbc:default\n```\n\n----------------------------------------\n\nTITLE: Building Minitomic Keyboard Firmware with QMK\nDESCRIPTION: This command builds the default keymap for the Minitomic keyboard using the QMK Firmware build environment. It requires QMK to be set up correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/evyd13/minitomic/readme.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmake evyd13/minitomic:default\n```\n\n----------------------------------------\n\nTITLE: Building Sneakbox Disarray Ortho Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the Sneakbox Disarray keyboard with an ortholinear layout using the QMK build environment.  It assumes the QMK build environment is set up correctly. The resulting firmware can then be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/sneakbox/disarray/ortho/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake sneakbox/disarray/ortho:default\n```\n\n----------------------------------------\n\nTITLE: Building the keyboard firmware\nDESCRIPTION: This command builds the default firmware for the dactyl_manuform_pi_pico keyboard using the QMK build environment.  It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/dactyl_manuform_pi_pico/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/dactyl_manuform_pi_pico:default\n```\n\n----------------------------------------\n\nTITLE: Building default firmware for Southpaw75\nDESCRIPTION: This command builds the default firmware for the HolySwitch Co Southpaw75 keyboard. It requires a properly configured QMK build environment. The output will be a .hex file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/holyswitch/southpaw75/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake holyswitch/southpaw75:default\n```\n\n----------------------------------------\n\nTITLE: Flashing the BIG DILL EXTENDED keyboard with DFU bootloader\nDESCRIPTION: This command flashes the firmware onto the BIG DILL EXTENDED keyboard using the DFU bootloader. This is useful for Pro Micro alternatives that require the `atmel-dfu` bootloader.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechwild/bde/readme.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmake mechwild/bde:default:dfu\n```\n\n----------------------------------------\n\nTITLE: Building Sebelas Keyboard Firmware with QMK\nDESCRIPTION: This command builds the default keymap for the Sebelas keyboard using the QMK firmware.  It requires a properly configured QMK build environment. The output will be a firmware file ready for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/jaykeeb/sebelas/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake jaykeeb/sebelas:default\n```\n\n----------------------------------------\n\nTITLE: Compiling and Flashing Firmware for Hotswap PCB\nDESCRIPTION: This command compiles and flashes the default layout for the hotswap version of the Mode Eighty V1 keyboard automatically. It utilizes `dfu-util` for flashing. The QMK build environment must be properly configured.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mode/m80v1/readme.md#_snippet_2\n\nLANGUAGE: make\nCODE:\n```\nmake mode/m80v1/m80h:default:flash # Hotswap\n```\n\n----------------------------------------\n\nTITLE: Building Eon65 Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Eon65 keyboard using the QMK build environment. It assumes that the QMK build environment is correctly set up. The resulting firmware can then be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/evyd13/eon65/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake evyd13/eon65:default\n```\n\n----------------------------------------\n\nTITLE: Making firmware for TOFU_JR_V2 keyboard\nDESCRIPTION: This command builds the default firmware for the TOFU_JR_V2 keyboard using the QMK build environment. It requires QMK to be properly set up. The command generates a .hex file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/dztech/tofu/jr/v2/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake dztech/tofu/jr/v2:default\n```\n\n----------------------------------------\n\nTITLE: Building Getta25 Firmware with QMK\nDESCRIPTION: This command compiles the QMK firmware for the Getta25 keyboard with the default keymap. It assumes that the QMK build environment has already been set up according to the QMK documentation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/salicylic_acid3/getta25/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake salicylic_acid3/getta25/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Slash Keyboard Firmware with Make\nDESCRIPTION: This command builds and flashes the default firmware for the handwired Slash keyboard. It requires a properly configured QMK build environment and a connected microcontroller accessible via avrdude. This will overwrite any existing firmware on the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/slash/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/slash:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing AliceKK Keyboard Firmware (QMK)\nDESCRIPTION: This command flashes the compiled firmware onto the AliceKK keyboard. It uses the QMK build environment and assumes the keyboard is connected and in a state where it can receive the firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mwstudio/alicekk/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake mwstudio/alicekk:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Genesis Rev2 Firmware with Make\nDESCRIPTION: This command builds and flashes the default firmware for the Genesis Rev2 macro pad using the make command. It assumes the device is in DFU mode, or can be put into DFU mode by holding the top-left key while plugging in the USB or by pressing the reset button.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/custommk/genesis/rev2/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake custommk/genesis/rev2:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building erGhost Firmware with Make\nDESCRIPTION: This command builds the default firmware for the erGhost keyboard using the QMK build environment. It requires QMK to be set up correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/lz/erghost/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake lz/erghost:default\n```\n\n----------------------------------------\n\nTITLE: Flashing 3dortho14u Keyboard Firmware\nDESCRIPTION: This command flashes the default firmware to the 3dortho14u/rev2 keyboard. It assumes the keyboard is connected and the build environment is properly configured. The keyboard must be in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/3dortho14u/rev2/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake 3dortho14u/rev2:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Keyboard Firmware\nDESCRIPTION: This command is used to compile the default keymap for the YMDK NP24 U4 RGB6 keyboard. It leverages the QMK build environment to generate the firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ymdk/np24/u4rgb6/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake ymdk/np24/u4rgb6:default\n```\n\n----------------------------------------\n\nTITLE: Copying QMK Tab Completion Script System-Wide\nDESCRIPTION: This command copies the `qmk_tab_complete.sh` script to the `/etc/profile.d` directory, making tab completion available to all users on the system. Updates to the completion script will not be reflected unless the file is recopied. Requires appropriate permissions (e.g., root).\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/cli_tab_complete.md#_snippet_3\n\nLANGUAGE: Shell Script\nCODE:\n```\ncp util/qmk_tab_complete.sh /etc/profile.d\n```\n\n----------------------------------------\n\nTITLE: Building firmware for 1up pi60 RGB v2 (QMK)\nDESCRIPTION: This command builds the default firmware for the 1upkeyboards pi60_rgb_v2 keyboard using the QMK build environment. It requires the QMK build environment to be set up correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/1upkeyboards/pi60_rgb_v2/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake 1upkeyboards/pi60_rgb_v2:default\n```\n\n----------------------------------------\n\nTITLE: Flashing QMK Firmware to Foundation Keyboard\nDESCRIPTION: This command builds and flashes the QMK firmware to the wavtype/foundation keyboard with the default keymap.  It requires a configured QMK build environment and a connected keyboard in bootloader mode. This directly programs the firmware onto the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wavtype/foundation/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake wavtype/foundation:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Keyboard Firmware - QMK - Bash\nDESCRIPTION: This command flashes the default firmware for the Kastenwagen 1840 keyboard onto the device. It uses the QMK build environment along with the appropriate flashing tools. It requires the keyboard to be in bootloader mode for the flashing process to succeed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/nopunin10did/kastenwagen1840/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake nopunin10did/kastenwagen1840:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing QMK Firmware to CannonKeys Ripple HS\nDESCRIPTION: This command flashes the compiled firmware to the CannonKeys Ripple HS keyboard using the QMK build environment. It requires a properly configured QMK build environment and a connected keyboard in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cannonkeys/ripple_hs/readme.md#_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nmake cannonkeys/ripple_hs:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building NZ64 Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the NZ64 keyboard using the QMK build environment. It assumes that the user has already set up the build environment according to the QMK documentation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/yandrstudio/nz64/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake yandrstudio/nz64:default\n```\n\n----------------------------------------\n\nTITLE: Building imi60 Keyboard Firmware\nDESCRIPTION: This command builds the default keymap for the keyten imi60 keyboard. It requires the QMK build environment to be set up correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keyten/imi60/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake keyten/imi60:default\n```\n\n----------------------------------------\n\nTITLE: Building TMKL Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the TMKL keyboard. It assumes that the QMK build environment is already set up. The output will be a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechlovin/tmkl/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake mechlovin/tmkl:default\n```\n\n----------------------------------------\n\nTITLE: Building Tightwriter Firmware with Make\nDESCRIPTION: This snippet shows how to build the default firmware for the takashicompany/tightwriter keyboard using the make command. It assumes that the QMK build environment has been properly set up. This builds the firmware for a Caterina based board.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/takashicompany/tightwriter/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake takashicompany/tightwriter:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Dimpleplus Firmware - Makefile\nDESCRIPTION: This command flashes the compiled Dimpleplus keyboard firmware to the keyboard. It requires the QMK build environment and a connected Dimpleplus keyboard in a flashable state.  The 'default' layout is used.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/lazydesigners/dimpleplus/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake lazydesigners/dimpleplus:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building MK-65 Keyboard Firmware (QMK)\nDESCRIPTION: This command compiles the firmware for the MK-65 keyboard with the default keymap using the QMK build environment.  It requires the QMK build environment to be set up correctly. The output is a firmware file ready to be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mk65/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake mk65:default\n```\n\n----------------------------------------\n\nTITLE: Building OSA Keyboard Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the OSA keyboard using the QMK build environment. It assumes the QMK build environment has been set up correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/sck/osa/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake sck/osa:default\n```\n\n----------------------------------------\n\nTITLE: Building pisces Keyboard Firmware\nDESCRIPTION: This command builds the default keymap for the mechlovin/pisces keyboard using the QMK Firmware build environment. Ensure the build environment is properly set up before running this command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechlovin/pisces/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake mechlovin/pisces:default\n```\n\n----------------------------------------\n\nTITLE: Building Erkbd Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the Erkbd keyboard within the QMK Firmware environment. It requires a properly configured QMK build environment. It produces a .hex or .bin file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/erikpeyronson/erkbd/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake handwired/erikpeyronson/erkbd:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware to Nightly Boards [n]40-o (QMK)\nDESCRIPTION: This command builds and flashes the default firmware for the Nightly Boards [n]40-o keyboard using the QMK build environment. It assumes the QMK build environment is correctly configured and that the flashing tools are available.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/nightly_boards/n40_o/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake nightly_boards/n40_o:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building QMK Firmware for GEN ONE G1_65\nDESCRIPTION: This command builds the default QMK firmware for the GEN ONE G1_65 keyboard. It requires a properly set up QMK build environment. The output will be a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/genone/g1_65/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake genone/g1_65:default\n```\n\n----------------------------------------\n\nTITLE: Building Keyboard Firmware with Make\nDESCRIPTION: This command compiles the QMK Firmware for the Radialex keyboard with the default keymap. It uses the `make` command, specifying the keyboard and keymap as arguments.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/takashicompany/radialex/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake takashicompany/radialex:default\n```\n\n----------------------------------------\n\nTITLE: Building GREATSWORD80 Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the GREATSWORD80 keyboard using the QMK build environment. It compiles the source code and generates a firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/eason/greatsword80/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake eason/greatsword80:default\n```\n\n----------------------------------------\n\nTITLE: Building iNETT Studio SQUARE.X Hotswap Firmware with Make\nDESCRIPTION: This command builds the default keymap for the iNETT Studio SQUARE.X hotswap keyboard using the QMK build environment. It assumes the QMK build environment is already set up. The resulting firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/inett_studio/sqx/hotswap/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake inett_studio/sqx/hotswap:default\n```\n\n----------------------------------------\n\nTITLE: Building Zed65 Firmware with Make\nDESCRIPTION: This command builds the QMK firmware for the Zed65 keyboard, specifically the 910 variant, using the default keymap. It requires a correctly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechlovin/zed65/910/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake mechlovin/zed65/910:default\n```\n\n----------------------------------------\n\nTITLE: Building Noxary 260 Firmware with Make\nDESCRIPTION: This command builds the default keymap for the Noxary 260 keyboard using the QMK make system. It assumes that the QMK build environment has been properly set up. The output will be a firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/noxary/260/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake noxary/260:default\n```\n\n----------------------------------------\n\nTITLE: Building K-Type Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the Input Club K-Type keyboard using the QMK build system. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/input_club/k_type/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake input_club/k_type:default\n```\n\n----------------------------------------\n\nTITLE: Building S20 Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the S20 keyboard. It utilizes the make command within the QMK firmware environment. It requires a properly configured QMK build environment. The output is a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/polycarbdiet/s20/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake polycarbdiet/s20:default\n```\n\n----------------------------------------\n\nTITLE: Flashing ARC Keyboard Firmware with QMK\nDESCRIPTION: This command compiles and flashes the QMK firmware onto the ARC keyboard using the default keymap.  It requires a correctly configured QMK build environment and a connected keyboard in a flashable state.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/shostudio/arc/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake shostudio/arc:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building DigiCarp65 Firmware with Make\nDESCRIPTION: This command builds the default firmware for the DigiCarp65 keyboard using the QMK make system. It requires a properly configured QMK build environment. The output will be a firmware file ready to be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/swiftrax/digicarp65/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake handwired/swiftrax/digicarp65:default\n```\n\n----------------------------------------\n\nTITLE: Compiling Keyboard Firmware (QMK)\nDESCRIPTION: This command compiles the QMK firmware for the ID67 keyboard with the default keymap. It requires a properly set up QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/idobao/id67/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake id67:default\n```\n\n----------------------------------------\n\nTITLE: Building the Momoka Ergo Firmware\nDESCRIPTION: This command builds the QMK firmware for the Momoka Ergo keyboard with the default keymap.  It compiles the necessary source files to create a firmware image that can be flashed onto the keyboard.  Prerequisites include a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/momoka_ergo/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake momoka_ergo:default\n```\n\n----------------------------------------\n\nTITLE: Flashing TGR-910 Firmware\nDESCRIPTION: This command flashes the compiled firmware onto the TGR-910 keyboard.  It requires the QMK build environment and appropriate flashing tools to be set up. The target is `tgr/910:default:flash`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/tgr/910/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake tgr/910:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing the ogurec/right_pm keymap\nDESCRIPTION: This command compiles and flashes the default keymap for the ogurec/right_pm keyboard to the connected device. It depends on the QMK build environment being correctly set up and the necessary flashing tools being installed. The process will erase the existing firmware and replace it with the newly built keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/drhigsby/ogurec/right_pm/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake ogurec/right_pm:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Kyuu Keyboard Firmware\nDESCRIPTION: This command compiles the default firmware for the Kyuu keyboard using the QMK build environment. It assumes the QMK build environment is already set up and configured. The output is the compiled firmware ready to be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/quantrik/kyuu/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake quantrik/kyuu:default\n```\n\n----------------------------------------\n\nTITLE: Flashing MW65_BLACK keyboard firmware with QMK\nDESCRIPTION: This command builds and flashes the default keymap to the MW65_BLACK keyboard. It requires the QMK build environment to be set up and the appropriate flashing tools to be installed and configured. This assumes the keyboard is in a flashable state.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mwstudio/mw65_black/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake mwstudio/mw65_black:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Dactyl Pro Micro Firmware\nDESCRIPTION: This command flashes the compiled firmware to the Dactyl Pro Micro keyboard. It requires a connected and configured keyboard in a state ready to accept the firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/dactyl_promicro/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake handwired/dactyl_promicro:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Rhymestone Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Rhymestone keyboard using the QMK build environment. It assumes the build environment has already been set up according to the QMK documentation. This command will compile the keyboard firmware and create a .hex file that can be flashed to the Pro Micro controller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/marksard/rhymestone/readme.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmake marksard/rhymestone:default\n```\n\n----------------------------------------\n\nTITLE: Building Kabe Don 78S Keyboard Firmware with QMK\nDESCRIPTION: This snippet demonstrates how to build the default firmware for the Kabe Don 78S keyboard using the QMK build environment. It uses the `make` command with the specific target for the keyboard and default keymap. The command assumes that the QMK build environment is already set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kabedon/kabedon78s/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake kabedon/kabedon78s:default\n```\n\n----------------------------------------\n\nTITLE: Building a .hex file\nDESCRIPTION: This command compiles the default .hex file for the Lets Split Vitamins rev1 keyboard. It assumes that the QMK build environment is already set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/vitamins_included/rev1/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nlets_split_vitamins_rev1_YOUR_KEYMAP_NAME.hex\n```\n\n----------------------------------------\n\nTITLE: Building angel64 rev1 Firmware with QMK\nDESCRIPTION: This snippet demonstrates how to build the default firmware for the angel64 rev1 keyboard using the QMK build environment. It assumes that the QMK build environment has already been set up according to the QMK documentation. No specific dependencies beyond the QMK build environment are necessary. The expected output is a compiled firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kakunpc/angel64/rev1/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake kakunpc/angel64/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Building RAMA WORKS KOYU firmware with QMK\nDESCRIPTION: This snippet shows how to build the default firmware for the RAMA WORKS KOYU keyboard using the QMK build environment. It assumes that the QMK build environment is already set up. The command invokes the 'make' utility with the target specified as the keyboard and keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wilba_tech/rama_works_koyu/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake wilba_tech/rama_works_koyu:default\n```\n\n----------------------------------------\n\nTITLE: Flashing the Work Louder Nano Firmware\nDESCRIPTION: This command builds and flashes the default firmware for the Work Louder Nano keyboard. This command requires the QMK build environment and a method to put the keyboard into DFU bootloader mode. It compiles the firmware, then attempts to flash it to the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/work_louder/nano/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake work_louder/nano:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Undead 60M Keyboard Firmware\nDESCRIPTION: This command builds the QMK firmware for the Undead 60M keyboard with the default keymap. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechanickeys/undead60m/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake mechanickeys/undead60m:default\n```\n\n----------------------------------------\n\nTITLE: QMK Flash Command\nDESCRIPTION: This command flashes the built QMK firmware onto the IBM Model M keyboard.  It requires the QMK build environment to be set up beforehand, and the target device needs to be in a flashable state. The command depends on the specific hardware configuration.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ibm/model_m/mschwingen/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake ibm/model_m/mschwingen/led_wired:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building DOIO KB09 Firmware\nDESCRIPTION: This command builds the default firmware for the DOIO KB09 keypad.  It uses the `make` command with the target specified as `doio/kb09:default`. This command assumes that the QMK build environment has already been set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/doio/kb09/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake doio/kb09:default\n```\n\n----------------------------------------\n\nTITLE: Building QMK Firmware for Manyboard Macro\nDESCRIPTION: This command is used to build the QMK firmware for the Manyboard Macro keyboard with the default keymap. It requires the QMK build environment to be set up correctly. The output will be a firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/manyboard/macro/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake manyboard/macro:default\n```\n\n----------------------------------------\n\nTITLE: Building the Console Keyboard Firmware - QMK\nDESCRIPTION: This command builds the firmware for the Console Keyboard with 20 keys, using the default keymap within the QMK Firmware environment.  It requires a properly configured build environment for QMK. The output will be a .hex or .bin file that can be flashed to the Arduino Pro Micro.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/consolekeyboard/20key/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake handwired/consolekeyboard/20key:default\n```\n\n----------------------------------------\n\nTITLE: Flashing the Soulstone Firmware\nDESCRIPTION: This command flashes the compiled firmware to the Soulstone keyboard.  It uses the `make` command with the target specified as `strech/soulstone:default:flash`. This requires a properly configured QMK build environment and a connected Soulstone keyboard in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/strech/soulstone/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake strech/soulstone:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building firmware for Choc Taro Keyboard\nDESCRIPTION: This command builds the default firmware for the Choc Taro keyboard using the QMK build environment. It assumes that the QMK build environment is properly set up. The output will be a firmware file ready to be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kakunpc/choc_taro/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake kakunpc/choc_taro:default\n```\n\n----------------------------------------\n\nTITLE: Flashing the Promenade RP24S Keyboard Firmware (Makefile)\nDESCRIPTION: This command flashes the compiled firmware onto the Promenade RP24S keyboard. It requires the keyboard to be in bootloader mode to accept the new firmware image.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kradoindustries/promenade_rp24s/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake kradoindustries/promenade_rp24s:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building FAve 65S Firmware with QMK\nDESCRIPTION: This command builds the QMK firmware for the FAve 65S keyboard with the default keymap.  It assumes the QMK build environment is already set up. The output is a .hex or .bin file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/era/linx3/fave65s/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake era/linx3/fave65s:default\n```\n\n----------------------------------------\n\nTITLE: Flashing DogTag Firmware\nDESCRIPTION: Flashes the default firmware onto the DogTag keyboard. This command builds the firmware (if necessary) and then uses a flashing tool to upload the firmware to the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/takashicompany/dogtag/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake takashicompany/dogtag:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing QMK Firmware to h08 Macropad\nDESCRIPTION: This command builds and flashes the default QMK firmware for the h08 macropad designed for the Singa Ocelot.  It requires a properly set up QMK build environment and a connected h08 device in bootloader mode. This will overwrite the existing firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/hineybush/h08_ocelot/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake hineybush/h08_ocelot:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing ScottoFly Firmware with Make\nDESCRIPTION: This command flashes the default firmware to the ScottoFly keyboard using the QMK build environment. It requires a properly configured QMK build environment and a connected keyboard in bootloader mode. It relies on dfu-programmer or similar flashing tools.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/scottokeebs/scottofly/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/scottokeebs/scottofly:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Keyboardio Model 01 Firmware\nDESCRIPTION: This command flashes the default keymap onto the Keyboardio Model 01. It requires a configured QMK build environment with avrdude installed. The keyboard needs to be reset by pressing the prog key or holding it while plugging in the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keyboardio/model01/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake keyboardio/model01:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building the QMK Firmware\nDESCRIPTION: This command builds the QMK firmware for the kisakeyluxury/qtz keyboard with the default keymap. It assumes the QMK build environment has been set up correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kisakeyluxury/qtz/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake kisakeyluxury/qtz:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Rart60 Firmware (Makefile)\nDESCRIPTION: This command builds and flashes the default firmware for the Rart60 keyboard using the QMK build system. It depends on a configured QMK build environment and a connected Rart60 keyboard in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/rart/rart60/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake rart/rart60:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building QMK Firmware for IBM Model M\nDESCRIPTION: This command builds the QMK firmware for the IBM Model M keyboard with the specified configuration (mschwingen/led_ffc) and keymap (default). It compiles the source code and generates a firmware image that can be flashed onto the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ibm/model_m/mschwingen/led_ffc/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake ibm/model_m/mschwingen/led_ffc:default\n```\n\n----------------------------------------\n\nTITLE: Building miniDivide Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the miniDivide keyboard. It requires the QMK build environment to be set up correctly. The command compiles the keyboard layout and prepares it for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/takashicompany/minidivide/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake takashicompany/minidivide:default\n```\n\n----------------------------------------\n\nTITLE: Building DISCIPLINE Keyboard Firmware\nDESCRIPTION: This command compiles the QMK Firmware for the DISCIPLINE keyboard with the default keymap. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/coseyfannitutti/discipline/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake coseyfannitutti/discipline:default\n```\n\n----------------------------------------\n\nTITLE: Building Choco60 Rev.2 Firmware with Make\nDESCRIPTION: This command builds the default firmware for the Choco60 Rev.2 keyboard. It assumes that the QMK build environment has already been set up. It uses the `make` command with the keyboard and keymap specified as arguments.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/recompile_keys/choco60/rev2/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake choco60/rev2:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Compacx Firmware with QMK\nDESCRIPTION: This command flashes the default firmware to the Compacx keyboard using the QMK build environment. It assumes that the keyboard is connected and the QMK build environment is properly configured for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/takashicompany/compacx/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake takashicompany/compacx:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building default keymap for Houndstooth keyboard\nDESCRIPTION: This command compiles the default keymap for the Houndstooth keyboard using the QMK build environment. It requires the QMK build environment to be set up correctly. The output is a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wsk/houndstooth/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake wsk/houndstooth:default\n```\n\n----------------------------------------\n\nTITLE: Building CMK11 Firmware\nDESCRIPTION: This command builds the default firmware for the CMK11 keyboard using the QMK build environment.  It compiles the keymap and necessary drivers to create a flashable firmware image.  It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/custommk/cmk11/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake custommk/cmk11:default\n```\n\n----------------------------------------\n\nTITLE: Building WT80-G Firmware\nDESCRIPTION: This command builds the default firmware for the wilba.tech WT80-G keyboard.  It requires the QMK build environment to be properly set up. The output will be a .hex or .bin file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wilba_tech/wt80_g/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake wilba_tech/wt80_g:default\n```\n\n----------------------------------------\n\nTITLE: Building Acheron Apollo87H Firmware - Makefile\nDESCRIPTION: This command builds the default layout for the Acheron Apollo87H keyboard firmware using the QMK build environment. The `<revision>` parameter specifies the PCB revision (Gamma or Delta).  It requires the QMK build environment to be set up correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/acheron/apollo/87h/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake acheron/apollo/87h/<revision>:default\n```\n\n----------------------------------------\n\nTITLE: Building ODIN75 Default Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the ODIN75 keyboard. It assumes the QMK build environment is already set up. The command compiles the keymap located in the `kbdfans/odin75` directory with the `default` keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kbdfans/odin75/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake kbdfans/odin75:default\n```\n\n----------------------------------------\n\nTITLE: Compiling TBK Mini Firmware with v2 Shield, Splinky v3, and VIA Keymap\nDESCRIPTION: This command compiles the QMK firmware for the TBK Mini keyboard with the v2 shield, Splinky v3 controller, and the VIA keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/bastardkb/tbkmini/readme.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nqmk compile -kb bastardkb/tbkmini/v2/splinky/v3 -km via\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware for Flame60 Keyboard\nDESCRIPTION: This command builds and flashes the default firmware to the Flame60 keyboard. It requires a properly configured QMK build environment and a connected keyboard in bootloader mode. The command combines the build and flash steps into one.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/clap_studio/flame60/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake clap_studio/flame60:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing QMK Firmware to BINEPAD BNK9\nDESCRIPTION: This command builds and flashes the default QMK firmware to the BINEPAD BNK9 macropad. It requires a properly configured build environment and a flashing tool (e.g., dfu-util). It compiles the firmware and then attempts to flash it to the device using the appropriate flashing method.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/binepad/bnk9/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake binepad/bnk9:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building LGBTKL Keyboard Firmware (QMK)\nDESCRIPTION: This command builds the default keymap for the LGBTKL keyboard using QMK. It requires a properly configured QMK build environment. The output will be a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/lgbtkl/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake lgbtkl:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Keyboard Firmware with Make\nDESCRIPTION: This command flashes the compiled firmware to the Scarlet Bandana keyboard. It builds upon the previous step by including the `:flash` target, which initiates the flashing process. This assumes the keyboard is in a state where it can accept a firmware update (e.g., bootloader mode).\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/woodkeys/scarletbandana/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake woodkeys/scarletbandana:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building splitreus62 Firmware\nDESCRIPTION: This command builds the default keymap for the splitreus62 keyboard. It requires the QMK build environment to be set up and uses the `make` command to compile the firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/nacly/splitreus62/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake nacly/splitreus62:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Ergosplit44 Firmware\nDESCRIPTION: This command builds and flashes the default firmware to the Ergosplit44 keyboard. It requires a correctly set up QMK build environment and a connected keyboard in bootloader mode. This command combines the build and flash steps.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/marek128b/ergosplit44/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake handwired/marek128b/ergosplit44:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building SuperLyra Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the SuperLyra keyboard using the QMK build environment. It compiles the source code and generates a firmware image that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/malevolti/superlyra/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake malevolti/superlyra:default\n```\n\n----------------------------------------\n\nTITLE: Log Keypress Matrix Position - C\nDESCRIPTION: This code snippet logs the matrix position and status of each key pressed. It uses the `uprintf` function to print the keycode, column, row, pressed state, time, interrupt status, and tap count to the console. This code relies on `CONSOLE_ENABLE` being defined and enabled in `rules.mk`. This should be added to the `process_record_user` function in keymap.c.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/faq_debug.md#_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nbool process_record_user(uint16_t keycode, keyrecord_t *record) {\n  // If console is enabled, it will print the matrix position and status of each key pressed\n#ifdef CONSOLE_ENABLE\n    uprintf(\"KL: kc: 0x%04X, col: %2u, row: %2u, pressed: %u, time: %5u, int: %u, count: %u\\n\", keycode, record->event.key.col, record->event.key.row, record->event.pressed, record->event.time, record->tap.interrupted, record->tap.count);\n#endif \n  return true;\n}\n```\n\n----------------------------------------\n\nTITLE: Building Keychron Q60 Firmware\nDESCRIPTION: This command builds the default ANSI layout firmware for the Keychron Q60 keyboard. It leverages the QMK build environment to compile the keyboard's firmware based on the specified configuration.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keychron/q60/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake keychron/q60/ansi:default\n```\n\n----------------------------------------\n\nTITLE: Building Pizza65 Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the Pizza65 keyboard using the QMK build environment. It requires the QMK build environment to be set up correctly. The output will be a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/pizzakeyboards/pizza65/readme.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmake pizzakeyboards/pizza65:default\n```\n\n----------------------------------------\n\nTITLE: Making the Palmetto Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the Palmetto keyboard using the QMK build environment. It requires the QMK build environment to be set up beforehand. The output is a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/montsinger/palmetto/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake montsinger/palmetto:default\n```\n\n----------------------------------------\n\nTITLE: Building Swift65 Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the Swift65 keyboard with hotswap support using the QMK build system. It requires a properly configured QMK build environment. The output is a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/alfredslab/swift65/hotswap/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake alfredslab/swift65/hotswap:default\n```\n\n----------------------------------------\n\nTITLE: Building Firmware: QMK Make Command\nDESCRIPTION: This command builds the default firmware for the Infinity875 keyboard using the QMK build environment.  It requires a properly configured QMK environment. The output is a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechlovin/infinity875/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake mechlovin/infinity875:default\n```\n\n----------------------------------------\n\nTITLE: Building ODIN SOLDERED Firmware\nDESCRIPTION: This command builds the default firmware for the ODIN SOLDERED keyboard using the QMK build environment. It assumes that the QMK build environment has already been set up as described in the QMK documentation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kbdfans/odin/soldered/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake kbdfans/odin/soldered:default\n```\n\n----------------------------------------\n\nTITLE: Building Arisu Keyboard Firmware with QMK\nDESCRIPTION: This code snippet demonstrates how to build the default firmware for the Arisu keyboard using the QMK build environment. It assumes that the QMK build environment has already been set up correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/arisu/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake arisu:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Corgi Keyboard Firmware (QMK)\nDESCRIPTION: This command flashes the compiled firmware to the Corgi keyboard's microcontroller. It uses the QMK build environment and requires the keyboard to be in bootloader mode, which usually involves shorting the reset and ground pins on the microcontroller after running the command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keyprez/corgi/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake keyprez/corgi:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Wyvern Firmware with QMK\nDESCRIPTION: This command builds and flashes the default firmware for the Wyvern keyboard using the QMK build environment. It compiles the source code, creates the firmware, and then programs it onto the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mysticworks/wyvern/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake mysticworks/wyvern:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Keyboard Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the latincompass/latin17rgb keyboard. It uses the QMK make system to compile the firmware and create a .hex or .bin file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/latincompass/latin17rgb/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake latincompass/latin17rgb:default\n```\n\n----------------------------------------\n\nTITLE: Building duckyPad Firmware\nDESCRIPTION: This command compiles the default keymap for the duckyPad macropad. It requires a properly configured QMK build environment.  The output is a firmware file that can be flashed to the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/dekunukem/duckypad/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake dekunukem/duckypad:default\n```\n\n----------------------------------------\n\nTITLE: Building Sol 3 Keyboard Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the RGBKB Sol 3 rev1 keyboard. It requires the QMK build environment to be set up. The output is a .hex or .bin file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/rgbkb/sol3/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake rgbkb/sol3/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Writing Line to OLED (C)\nDESCRIPTION: This function writes a string to the OLED display at the current cursor position, and then advances to the next page, wiring ' ' to the remainder of the current page. The `invert` parameter controls whether the pixels are inverted. The cursor is advanced while writing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/oled_driver.md#_snippet_21\n\nLANGUAGE: c\nCODE:\n```\n// Writes a string to the buffer at current cursor position\n// Advances the cursor while writing, inverts the pixels if true\n// Advances the cursor to the next page, wiring ' ' to the remainder of the current page\nvoid oled_write_ln(const char *data, bool invert);\n```\n\n----------------------------------------\n\nTITLE: Building txuu keyboard firmware with QMK\nDESCRIPTION: This command builds the default firmware for the txuu keyboard using the QMK build environment. It requires a correctly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/matthewdias/txuu/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake matthewdias/txuu:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Aurora Sweep Firmware\nDESCRIPTION: This command flashes the built firmware to the Aurora Sweep keyboard. It requires the QMK build environment and a configured flashing tool.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/splitkb/aurora/sweep/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake splitkb/aurora/sweep/rev1:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Joker Firmware with Make\nDESCRIPTION: This command flashes the built firmware to the Joker keyboard. It uses the `make` command with the target `jaykeeb/joker:default:flash`. This requires the QMK build environment and a connected keyboard in a flashable state.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/jaykeeb/joker/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake jaykeeb/joker:default:flash\n```\n\n----------------------------------------\n\nTITLE: Configuring Per-Key Retro Tapping in QMK Firmware (C)\nDESCRIPTION: This code snippet demonstrates how to enable Retro Tapping on a per-key basis by defining `RETRO_TAPPING_PER_KEY` in `config.h` and implementing the `get_retro_tapping()` function in the keymap. It allows specific keys to have retro tapping enabled, providing finer-grained control. Dependencies include a functional QMK firmware setup and per-key retro tapping enabled.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/tap_hold.md#_snippet_20\n\nLANGUAGE: c\nCODE:\n```\n#define RETRO_TAPPING_PER_KEY\n```\n\nLANGUAGE: c\nCODE:\n```\nbool get_retro_tapping(uint16_t keycode, keyrecord_t *record) {\n    switch (keycode) {\n        case LT(2, KC_SPC):\n            return true;\n        default:\n            return false;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Building XD60 rev2 firmware with QMK\nDESCRIPTION: This command builds the default firmware for the XD60 keyboard revision 2 using the QMK build environment. It requires the QMK build environment to be set up and uses the `make` command. The output is a compiled firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/xiudi/xd60/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake xiudi/xd60/rev2:default\n```\n\n----------------------------------------\n\nTITLE: Building the Big Series Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the 3-key version of the Big Series keyboard using the QMK build environment. It assumes that the QMK build environment has already been set up according to the QMK documentation. The output will be the compiled firmware ready to be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/woodkeys/bigseries/3key/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake woodkeys/bigseries/3key:default\n```\n\n----------------------------------------\n\nTITLE: Building Retro66 Firmware\nDESCRIPTION: This command compiles the QMK firmware for the Retro66 keyboard with a specific configuration (no backlight) using the Zed65 base.  It requires a correctly configured QMK build environment. The output is a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechlovin/zed65/no_backlight/retro66/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake mechlovin/zed65/no_backlight/retro66:default\n```\n\n----------------------------------------\n\nTITLE: Building Lunakey Mini Firmware (Makefile)\nDESCRIPTION: This command compiles the QMK firmware for the Lunakey Mini keyboard using the default keymap. It uses the `make` command with specific arguments for the keyboard layout and keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/yoichiro/lunakey_mini/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake yoichiro/lunakey_mini:default\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for SHARKOON SKILLER SGK50 S4 (QMK)\nDESCRIPTION: This command builds the default firmware for the SHARKOON SKILLER SGK50 S4 keyboard using the QMK build environment.  It requires a properly configured QMK build environment. The output is a .hex file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/sharkoon/skiller_sgk50_s4/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake sharkoon/skiller_sgk50_s4:default\n```\n\n----------------------------------------\n\nTITLE: Building Aperture Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the Aperture keyboard. It uses the `make` command with the `aperture:default` target, compiling the necessary code for the keyboard's functionality. This requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keyten/aperture/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake aperture:default\n```\n\n----------------------------------------\n\nTITLE: Building TP69 Keyboard with QMK\nDESCRIPTION: This command builds the default keymap for the Twadlee TP69 keyboard using the QMK firmware. It assumes the QMK build environment is already set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/twadlee/tp69/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/twadlee/tp69:default\n```\n\n----------------------------------------\n\nTITLE: Building Carpolly Firmware\nDESCRIPTION: This command builds the default keymap for the Carpolly keyboard. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/carpolly/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake handwired/carpolly:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Keyboard Firmware with Make\nDESCRIPTION: This command flashes the compiled keyboard firmware onto the IDOBAO ID63 keyboard. It extends the `make` command by adding the `flash` target, which programs the firmware onto the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/idobao/id63/readme.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmake idobao/id63:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing MurphPad Firmware with QMK\nDESCRIPTION: This command flashes the compiled firmware onto the MurphPad using the QMK build environment. It programs the microcontroller with the keyboard's configuration.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechwild/murphpad/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake mechwild/murphpad:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Ploopy Trackball Mini Firmware\nDESCRIPTION: These `make` commands are used to build and flash the firmware for the Ploopy Trackball Mini. The first command builds and flashes the default firmware, while the second builds and flashes the firmware with VIA support.  The user must have a QMK build environment set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ploopyco/trackball_mini/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake ploopyco/trackball_mini/rev1_002:default:flash\nmake ploopyco/trackball_mini/rev1_002:via:flash\n```\n\n----------------------------------------\n\nTITLE: Building Bestway Keyboard Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Bestway keyboard using the QMK build system. It compiles the source code and generates a firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/bestway/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake bestway:default\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for BINEPAD BN009 (R2)\nDESCRIPTION: This command builds the default firmware for the BINEPAD BN009 R2 variant using the QMK build environment. It compiles the keymap and prepares the firmware for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/binepad/bn009/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake binepad/bn009/r2:default\n```\n\n----------------------------------------\n\nTITLE: Building EEK! Keyboard Firmware (Makefile)\nDESCRIPTION: This command builds the firmware for the EEK! keyboard using the default configuration.  It relies on the QMK build environment being properly set up.  The output is a firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/eek/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake eek:default\n```\n\n----------------------------------------\n\nTITLE: Building BINEPAD BN003 Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the BINEPAD BN003 using the QMK build environment. It assumes that the QMK build environment is already set up and configured correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/binepad/bn003/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake binepad/bn003:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Keyboard Firmware (Make Flash)\nDESCRIPTION: This command compiles and flashes the QMK firmware for the handwired/hwpm87 keyboard with the default keymap. It requires the QMK build environment and a configured flashing tool.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/hwpm87/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake handwired/hwpm87:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Frooastboard Walnut Firmware\nDESCRIPTION: This command builds the default firmware for the Frooastboard Walnut keyboard. It requires a properly configured QMK build environment. The resulting firmware can then be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/frooastboard/walnut/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake frooastboard/walnut:default\n```\n\n----------------------------------------\n\nTITLE: Compiling Zinc keyboard firmware\nDESCRIPTION: This command compiles the firmware for the Zinc keyboard with the 'default' keymap.  It uses the `make` command with the target specified as `<keyboard>:<keymap>`.  This step converts the keyboard layout and settings into a firmware image.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/25keys/zinc/keymaps/default/readme_jp.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\n$ make zinc:default\n```\n\n----------------------------------------\n\nTITLE: Flashing angle65 Firmware with QMK (Make)\nDESCRIPTION: This command flashes the compiled firmware to the angle65 keyboard using the QMK build environment. It requires the keyboard to be in bootloader mode and utilizes the appropriate flashing tool.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/vertex/angle65/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake vertex/angle65:default:flash\n```\n\n----------------------------------------\n\nTITLE: Making DracuLad with Pimoroni Trackball support\nDESCRIPTION: This command builds the firmware for the DracuLad keyboard using the keymap configured for Pimoroni trackball support.  It requires a properly configured QMK build environment and the appropriate keymap configuration. The output will be a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/draculad/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake draculad:pimoroni\n```\n\n----------------------------------------\n\nTITLE: Building 6lit default keymap\nDESCRIPTION: This command builds the default keymap for the 6lit macropad using the QMK build environment.  It assumes the QMK build environment has already been set up.  The output will be a firmware file that can be flashed to the 6lit device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/40percentclub/6lit/readme.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmake 40percentclub/6lit:default\n```\n\n----------------------------------------\n\nTITLE: Building 4by3 Keypad Firmware (QMK)\nDESCRIPTION: This code snippet demonstrates how to build the default firmware for the 4by3 keypad using the QMK build environment.  It assumes the build environment is already set up.  The command `make 4by3:default` compiles the firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/4by3/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake 4by3:default\n```\n\n----------------------------------------\n\nTITLE: Building Cradio Firmware for KB2040\nDESCRIPTION: This command builds the firmware for the Cradio keyboard specifically for the Adafruit KB2040 controller using QMK Converters. Requires a configured QMK build environment and the QMK Converters feature.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cradio/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake CONVERT_TO=kb2040 cradio:default\n```\n\n----------------------------------------\n\nTITLE: Building the Mün Keyboard with QMK\nDESCRIPTION: This snippet provides the command to build the default keymap for the Mün keyboard using the QMK build environment. It assumes the QMK build environment is already set up. It compiles the firmware for the rgbkb/mun keyboard with the default keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/rgbkb/mun/rev1/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake rgbkb/mun:default\n```\n\n----------------------------------------\n\nTITLE: Flashing SdraKb00 Firmware with QMK\nDESCRIPTION: This command flashes the compiled firmware onto the SdraKb00 macropad. It requires the QMK build environment to be set up, and the device must be in bootloader mode. After executing this command, the reset button on the PCB should be pressed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/sdrakbs/sdrakb00/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake sdrakbs/sdrakb00:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing the 5keys Keyboard (QMK)\nDESCRIPTION: This command flashes the compiled firmware to the 5keys keyboard.  It requires that the keyboard is in bootloader mode and that the QMK build environment is properly configured for flashing. The specific flashing tool depends on the microcontroller used.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/5keys/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake 5keys:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Speedo v2 Firmware with QMK\nDESCRIPTION: This command compiles the default keymap for the Speedo v2 keyboard using the QMK build environment. It uses the 'make' command with the specified keyboard and keymap target. The resulting firmware can then be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cozykeys/speedo/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake cozykeys/speedo/v2:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Dactyl-CC Keyboard Firmware\nDESCRIPTION: This command flashes the default firmware to the Dactyl-CC keyboard. It requires a properly configured QMK build environment and a connected keyboard in bootloader mode. This command uses the dfu-programmer or similar tool to write the firmware to the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/dactyl_cc/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake handwired/dactyl_cc:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building DK60 Firmware with Make\nDESCRIPTION: This command builds the DK60 keyboard firmware with the default keymap using the `make` command. It compiles the necessary files and creates the firmware image ready for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/dk60/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake dk60:default\n```\n\n----------------------------------------\n\nTITLE: Flashing AMJ60 Firmware - Make Command\nDESCRIPTION: This command compiles and flashes the default keymap to the AMJ60 keyboard using QMK Firmware. This process assumes that the QMK build environment is set up correctly and that the necessary tools for flashing are installed and configured. This command is used to update the firmware on the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/amjkeyboard/amj60/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake amjkeyboard/amj60:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building BongoPad Firmware with QMK Make\nDESCRIPTION: This command builds the default firmware for the BongoPad keyboard using the QMK build environment. It assumes the user has already set up their environment according to the QMK documentation. This generates a .hex file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ll3macorn/bongopad/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake ll3macorn/bongopad:default\n```\n\n----------------------------------------\n\nTITLE: Flashing BunnyGirl65 Firmware\nDESCRIPTION: This command builds and flashes the default firmware to the BunnyGirl65 keyboard. It depends on the QMK build environment and a configured flashing tool. This command directly flashes the generated firmware onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/sawnsprojects/bunnygirl65/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake sawnsprojects/bunnygirl65:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing N9 Keyboard Firmware\nDESCRIPTION: This command builds and flashes the default firmware for the Nightly Boards N9 keyboard.  It requires a properly configured QMK build environment and a connected N9 keyboard. This combines the build and flash steps into one.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/nightly_boards/n9/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake nightly_boards/n9:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Eros Firmware (QMK)\nDESCRIPTION: This command flashes the default firmware to the Eros keyboard. It requires a properly configured QMK build environment and a connected keyboard in bootloader mode. This will overwrite the existing firmware on the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/pjb/eros/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake pjb/eros/default:flash\n```\n\n----------------------------------------\n\nTITLE: Flash QMK Firmware via DFU (Shell)\nDESCRIPTION: This command flashes the compiled QMK Firmware to the Sol keyboard using the DFU (Device Firmware Upgrade) bootloader.  It is typically used after the initial flash with AVRdudess. It requires the keyboard to be in DFU mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/rgbkb/sol/keymaps/default/readme.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ make rgbkb/sol:default:dfu\n```\n\n----------------------------------------\n\nTITLE: Flashing DOKSIN Firmware\nDESCRIPTION: This command flashes the compiled firmware onto the DOKSIN keyboard. It uses the `make` command with the `flash` target, building the firmware if necessary before flashing it to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/millet/doksin/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake millet/doksin:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Janus Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the Janus keyboard. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/janus/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake janus:default\n```\n\n----------------------------------------\n\nTITLE: Building Tata80 Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Tata80 WKL layout keyboard using the QMK build system. It relies on a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wuque/tata80/wkl/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake wuque/tata80/wkl:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Vector Macropad Firmware (QMK)\nDESCRIPTION: This command flashes the compiled firmware onto the Vector macropad. It requires the QMK build environment to be properly set up and the device to be in a flashable state (e.g., bootloader mode).\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/arrayperipherals/vector/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake arrayperipherals/vector:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building CF81 Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the CHOSFOX CF81 keyboard using the QMK build environment. Ensure the QMK build environment is set up correctly before executing this command. The compiled firmware will be located in the QMK build directory.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/chosfox/cf81/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake chosfox/cf81:default\n```\n\n----------------------------------------\n\nTITLE: Building The Galleon Keyboard Firmware\nDESCRIPTION: This command builds the default keymap for The Galleon keyboard using the QMK firmware. It assumes the QMK build environment is already set up and uses the `make` command to compile the firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/swiftrax/the_galleon/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/swiftrax/the_galleon:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Keyboard Firmware (QMK)\nDESCRIPTION: This command builds and flashes the default firmware to the Center x Enter keyboard. It uses the QMK build environment to compile the firmware and then programs it onto the keyboard's microcontroller. This action requires a connected keyboard in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/takashicompany/center_enter/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake takashicompany/center_enter:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Schwann Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the Schwann keyboard. It assumes that the QMK build environment has been set up correctly. The command uses the `make` utility to compile the firmware for the `the_royal/schwann` keyboard with the `default` keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/the_royal/schwann/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake the_royal/schwann:default\n```\n\n----------------------------------------\n\nTITLE: Building Axon Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Axon keyboard using the QMK build environment. It assumes that the QMK build environment has been properly set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/axon/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake handwired/axon:default\n```\n\n----------------------------------------\n\nTITLE: Building EVK v1_3 Firmware with QMK\nDESCRIPTION: This snippet demonstrates how to build the default firmware for the EVK v1.3 keyboard using the QMK build environment. It assumes that the QMK build environment is already set up. The command utilizes the make utility with specific arguments to compile and create the firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/evk/v1_3/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake handwired/evk/v1_3:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Scotto9 Firmware with QMK\nDESCRIPTION: This command flashes the compiled firmware to the Scotto9 macropad. It requires the QMK build environment and a connected device in a flashable state.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/scottokeebs/scotto9/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake handwired/scottokeebs/scotto9:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building heliotrope firmware\nDESCRIPTION: This command builds the default firmware for the heliotrope keyboard using the QMK build environment. It requires the QMK build environment to be properly set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/heliotrope/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake heliotrope:default\n```\n\n----------------------------------------\n\nTITLE: Building M64 RGB Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the M64 RGB keyboard using the QMK build environment. It compiles the keyboard layout and generates a firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mss_studio/m64_rgb/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake mss_studio/m64_rgb:default\n```\n\n----------------------------------------\n\nTITLE: Building Promise87 ANSI Keymap\nDESCRIPTION: This command builds the default ANSI keymap for the Promise87 keyboard using the QMK firmware build environment. It compiles the keymap and prepares it for flashing to the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wuque/promise87/ansi/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake wuque/promise87/ansi:default\n```\n\n----------------------------------------\n\nTITLE: Building XO87 Firmware\nDESCRIPTION: This command builds the default firmware for the XO87 solderable keyboard using the QMK build system.  It compiles the keyboard layout and core firmware components. The command requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/monstargear/xo87/solderable/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake monstargear/xo87/solderable:default\n```\n\n----------------------------------------\n\nTITLE: Building Noxary 268.2 Firmware\nDESCRIPTION: This command builds the default firmware for the Noxary 268.2 keyboard using the QMK build environment. It requires a properly configured QMK environment. The output is a compiled firmware file ready to be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/noxary/268_2/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake noxary/268_2:default\n```\n\n----------------------------------------\n\nTITLE: Building MC-76K Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the MC-76K keyboard using the QMK build environment. It assumes that the QMK build environment has been properly set up. The resulting firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mc_76k/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake mc_76k:default\n```\n\n----------------------------------------\n\nTITLE: Building namecard2x4 default keymap with QMK\nDESCRIPTION: This command builds the default keymap for the namecard2x4 keyboard within the QMK Firmware environment. It assumes the QMK build environment is already set up.  The command compiles the keymap and generates the firmware file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/takashiski/namecard2x4/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake takashiski/namecard2x4:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Rabbit 68 Keyboard Firmware (QMK)\nDESCRIPTION: This command flashes the QMK firmware onto the Rabbit 68 keyboard with the default keymap. It requires a properly configured QMK build environment and a connected keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/rabbit/rabbit68/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake rabbit/rabbit68:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Fidelity Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the Fidelity keyboard. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cutie_club/fidelity/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake cutie_club/fidelity:default\n```\n\n----------------------------------------\n\nTITLE: Building Ferris 0.2 with Make\nDESCRIPTION: This command builds the default keymap for the Ferris 0.2 keyboard using the `make` command. It requires a properly configured QMK build environment and utilizes the `ferris/0_2:default` target.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ferris/0_2/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake ferris/0_2:default\n```\n\n----------------------------------------\n\nTITLE: Building Rorschach Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Rorschach keyboard revision 1 using the QMK build environment. It assumes that the QMK build environment has been properly set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keebio/rorschach/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake keebio/rorschach/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Building Zygomorph Firmware\nDESCRIPTION: This `make` command compiles the QMK firmware for the Zygomorph keyboard with the default keymap.  It generates the firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/rgbkb/zygomorph/keymaps/default/readme.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n$ make rgbkb/zygomorph:default\n```\n\n----------------------------------------\n\nTITLE: Restoring Original Firmware via dfu-util\nDESCRIPTION: This command restores the original firmware from the backup file created earlier using dfu-util.  The keyboard must be in bootloader mode, and `flash-backup.bin` must exist. Requires dfu-util to be installed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/xiaomi/mk02/readme.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ndfu-util -d 0483:df11 -a 0 -s 0x08000000:leave -D flash-backup.bin\n```\n\n----------------------------------------\n\nTITLE: Building Yurei Firmware\nDESCRIPTION: This command builds the default keymap for the Yurei keyboard using the QMK build environment. It requires the QMK build environment to be set up beforehand.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kkatano/yurei/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake kkatano/yurei:default\n```\n\n----------------------------------------\n\nTITLE: Building the keyboard firmware\nDESCRIPTION: This command builds the firmware for the Hillside 52 keyboard using the default keymap. It compiles the keyboard layout and generates the firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/hillside/52/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake hillside/52/0_1:default\n```\n\n----------------------------------------\n\nTITLE: Building the Tomak79S Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the SIRIND Tomak79S keyboard. It requires a correctly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/era/sirind/tomak79s/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake era/sirind/tomak79s:default\n```\n\n----------------------------------------\n\nTITLE: Building Firmware\nDESCRIPTION: This command builds the default firmware for the Bad Wings keyboard. It assumes the QMK build environment is already set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/hazel/bad_wings/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake hazel/bad_wings:default\n```\n\n----------------------------------------\n\nTITLE: Building Keyboard Firmware (QMK)\nDESCRIPTION: This command builds the firmware for the handwired/macro3 keyboard with the default keymap. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/macro3/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake handwired/macro3:default\n```\n\n----------------------------------------\n\nTITLE: Building MW75R2 Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the MW75R2 keyboard. It uses the QMK build system to compile the keyboard layout and generate the firmware file.  The resulting firmware can then be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mwstudio/mw75r2/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake mwstudio/mw75r2:default\n```\n\n----------------------------------------\n\nTITLE: Flashing dyz_tkl Keyboard Firmware\nDESCRIPTION: This command builds and flashes the default keymap to the dyz_tkl keyboard.  It uses the `make` command with the `:flash` target within the QMK Firmware environment. It assumes the QMK build environment is already set up and the keyboard is connected.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/dyz/dyz_tkl/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake dyz/dyz_tkl:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware\nDESCRIPTION: This command builds and flashes the default firmware for the Alveus keyboard.  It combines the build and flash steps into a single command, streamlining the process.  This requires the QMK build environment to be properly configured with flashing tools.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/densus/alveus/mx/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake densus/alveus/mx:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing QMK Firmware\nDESCRIPTION: Flashes the compiled QMK firmware onto the NCC-1701-KB v.2 keyboard with the default keymap. This command requires a properly configured QMK build environment and the keyboard to be in the correct bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/themadnoodle/ncc1701kb/v2/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nqmk flash -kb themadnoodle/ncc1701kb/v2 -km default\n```\n\n----------------------------------------\n\nTITLE: Building TGR-910 Firmware\nDESCRIPTION: This command is used to build the default firmware for the TGR-910 keyboard. It compiles the necessary source files and generates the firmware image that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/tgr/910/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake tgr/910:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Six Pack Firmware\nDESCRIPTION: This command flashes the default firmware to the Six Pack macropad. It assumes that the build environment is properly set up and that the required flashing tools are installed. The device needs to be in DFU mode or a similar bootloader.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/40percentclub/sixpack/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake 40percentclub/sixpack:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Helix rev3 4rows Firmware (QMK)\nDESCRIPTION: This command builds and flashes the default firmware for the Helix rev3 4rows keyboard. It requires a properly configured QMK build environment. The `make` command invokes the QMK build system to compile and flash the firmware to the connected Pro Micro controller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/helix/rev3_4rows/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake helix/rev3_4rows:default:flash\n```\n\n----------------------------------------\n\nTITLE: Compiling TBK Mini Firmware with v2 Shield, STeMCell, and Default Keymap\nDESCRIPTION: This command compiles the QMK firmware for the TBK Mini keyboard with the v2 shield, STeMCell controller, and the default keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/bastardkb/tbkmini/readme.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nqmk compile -kb bastardkb/tbkmini/v2/stemcell -km default\n```\n\n----------------------------------------\n\nTITLE: Flashing Roses Lite Firmware with QMK\nDESCRIPTION: This command flashes the Roses Lite keyboard firmware with the default keymap using the QMK build environment. It requires the QMK build environment to be set up and a compatible flashing tool to be configured.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/roseslite/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake roseslite:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Rose75 Firmware with QMK\nDESCRIPTION: This command flashes the default firmware to the Rose75 keyboard.  It assumes that the QMK build environment is correctly set up and the keyboard is connected to the computer. Requires a compatible bootloader on the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/rose75/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake rose75:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing QMK Firmware to IBM Model M\nDESCRIPTION: This command flashes the compiled QMK firmware onto the IBM Model M keyboard. It requires a flashing tool compatible with the microcontroller used on the Model M USB PCB. The specific flashing process depends on the bootloader used (not the QMK bootloader, but one from a linked repository).\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ibm/model_m/mschwingen/led_ffc/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake ibm/model_m/mschwingen/led_ffc:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Keyboard Firmware - QMK\nDESCRIPTION: This command builds the default firmware for the WindX R1 keyboard using the QMK build environment. It compiles the source code and generates a firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/windstudio/wind_x/r1/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake windstudio/wind_x/r1:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Morizon Keyboard Firmware\nDESCRIPTION: This command flashes the compiled firmware onto the Morizon keyboard. It requires a connected and properly configured keyboard to receive the firmware image. The command combines the build and flash steps into a single operation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/morizon/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake morizon:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building bm16a Firmware with QMK\nDESCRIPTION: This command builds the default keymap for the bm16a keyboard using the QMK build environment. It requires QMK firmware to be set up correctly. The resulting firmware can be flashed to the keyboard to customize its functionality.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kprepublic/bm16a/v1/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake kprepublic/bm16a/v1:default\n```\n\n----------------------------------------\n\nTITLE: Building Default Keymap - QMK Firmware\nDESCRIPTION: This snippet demonstrates how to build the default keymap for the ChocV keyboard using the QMK firmware build system. This command is intended for testing and provides a base for custom keymap configurations.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/chocv/keymaps/default/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake chocv:default\n```\n\n----------------------------------------\n\nTITLE: Building Mechlovin9 Firmware - QMK\nDESCRIPTION: This command builds the default firmware for the Mechlovin9 rev1 keyboard using the QMK build environment. It assumes that the QMK build environment has already been set up. The output is the compiled firmware ready to be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechlovin/mechlovin9/rev2/readme.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmake mechlovin/mechlovin9/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Building MW65_BLACK keyboard firmware with QMK\nDESCRIPTION: This command builds the default keymap for the MW65_BLACK keyboard using the QMK firmware build system. It assumes that the QMK build environment is already set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mwstudio/mw65_black/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake mwstudio/mw65_black:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Yacobo Firmware\nDESCRIPTION: This command flashes the compiled firmware onto the Yacobo keyboard. It uses the QMK build environment along with a specified flashing tool to upload the firmware to the keyboard's microcontroller. Requires the QMK build environment to be set up correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ibm/model_m/yacobo/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake yacobo:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Glitch Keyboard Firmware\nDESCRIPTION: This command builds and flashes the default firmware for the Glitch keyboard using the QMK build environment. It requires that the QMK environment is set up correctly and that the user has appropriate permissions to flash the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/p3d/glitch/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake p3d/glitch:default:flash\n```\n\n----------------------------------------\n\nTITLE: Compiling Scylla v2 Firmware with Default Keymap (Splinky v3)\nDESCRIPTION: This command compiles the Scylla v2 keyboard firmware with the default keymap using a Splinky v3 controller. It utilizes `qmk compile` with the `-kb` flag set to `bastardkb/scylla/v2/splinky/v3` and the `-km` flag set to `default`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/bastardkb/scylla/readme.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nqmk compile -kb bastardkb/scylla/v2/splinky/v3 -km default\n```\n\n----------------------------------------\n\nTITLE: Building RM Fullsize Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the RM Fullsize keyboard using the QMK build environment.  It uses the `make` command with the keyboard and keymap specified as arguments. It assumes that the QMK build environment is properly set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/rmkeebs/rm_fullsize/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake rmkeebs/rm_fullsize:default\n```\n\n----------------------------------------\n\nTITLE: Flashing duckyPad Firmware\nDESCRIPTION: This command compiles and flashes the default keymap for the duckyPad macropad. It requires a properly configured QMK build environment and a connected duckyPad device.  It combines the compilation and flashing steps.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/dekunukem/duckypad/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake dekunukem/duckypad:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Kastenwagen 48 Firmware\nDESCRIPTION: This command compiles and flashes the default keymap for the Kastenwagen 48 keyboard using the QMK build environment.  It requires a configured QMK build environment and a connected keyboard in bootloader mode. This command will overwrite the existing firmware on the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/nopunin10did/kastenwagen48/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake nopunin10did/kastenwagen48:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Dolice EC Firmware\nDESCRIPTION: This command builds the default firmware for the Dolice EC keyboard using the QMK build environment. It requires a properly set up QMK environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cipulot/ec_dolice/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake cipulot/ec_dolice:default\n```\n\n----------------------------------------\n\nTITLE: Building CSTM65 Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the CSTM65 keyboard using the QMK build environment. It requires QMK to be set up and configured correctly, using the `drop/cstm65` keyboard definition and the `default` keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/drop/cstm65/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake drop/cstm65:default\n```\n\n----------------------------------------\n\nTITLE: Building MJ65 REV3 Firmware with Make\nDESCRIPTION: This command builds the default firmware for the MelGeek MJ65 REV3 keyboard. It requires a properly configured QMK build environment. The 'make' command compiles the keyboard firmware, which can then be flashed onto the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/melgeek/mj65/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake melgeek/mj65/rev3:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Skog TKL Firmware with QMK\nDESCRIPTION: This command builds and flashes the default keymap to the Skog TKL keyboard using the QMK build system and connected flashing tools.  It relies on a correctly configured QMK build environment and a connected, flashable Skog TKL device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/percent/skog/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake percent/skog:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware with QMK CLI\nDESCRIPTION: This command flashes the compiled QMK firmware to the Anvil Native keyboard. It specifies the keyboard layout (ISO or ANSI) and the keymap that was used to compile the firmware. The command requires QMK CLI to be installed and configured, and the keyboard must be in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/teleport/native/readme.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nqmk flash -kb teleport/native/iso -km default\n```\n\nLANGUAGE: shell\nCODE:\n```\nqmk flash -kb teleport/native/ansi -km default\n```\n\n----------------------------------------\n\nTITLE: Flashing EEPROM (Left Hand) - avrdude command\nDESCRIPTION: This command flashes the EEPROM for the left half of the keyboard. It uses `avrdude` to write the `eeprom-lefthand.eep` file to the EEPROM.  `$(COM_PORT)` must be replaced with the actual port name.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/orthodox/readme.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\navrdude -p atmega32u4 -P $(COM_PORT) -c avr109 -U eeprom:w:eeprom-lefthand.eep\n// or the equivalent in dfu-programmer\n```\n\n----------------------------------------\n\nTITLE: Building Keychron V7 Firmware - Make Command\nDESCRIPTION: This command builds the default ANSI layout firmware for the Keychron V7 keyboard. It compiles the QMK firmware with the specified keyboard and keymap configuration, preparing it for flashing to the device. Ensure the build environment is properly set up before executing this command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keychron/v7/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake keychron/v7/ansi:default\n```\n\n----------------------------------------\n\nTITLE: Building Firmware\nDESCRIPTION: This command builds the default firmware for the waffling80 rev_b keyboard. It assumes that the QMK build environment is already set up. The resulting firmware can then be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/4pplet/waffling80/rev_b/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake 4pplet/waffling80/rev_b:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Crowboard Firmware\nDESCRIPTION: This command builds and flashes the default firmware for the Crowboard keyboard to the device. It requires a configured QMK build environment and a connected Crowboard in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/crowboard/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake crowboard:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Fractal Keyboard Firmware (QMK)\nDESCRIPTION: This snippet shows how to build the default firmware for the Fractal keyboard using the QMK build environment. Ensure that the QMK build environment is correctly set up before executing this command. The command will compile and generate the firmware for the Fractal keyboard with the default configuration.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/fractal/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake fractal:default\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for tszaboo/ortho4exent\nDESCRIPTION: This command compiles the default keymap for the tszaboo/ortho4exent keyboard. It requires a properly configured QMK build environment. The output is a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/tszaboo/ortho4exent/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake tszaboo/ortho4exent:default\n```\n\n----------------------------------------\n\nTITLE: Building the Navpad Firmware\nDESCRIPTION: This command builds the default firmware for the Navpad 1.0 connected to the Helix keyboard (right side) using the QMK build environment. It compiles the keymap and necessary firmware components into a flashable file. This command assumes that the QMK build environment has been properly set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/yushakobo/navpad/10_helix_r/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake yushakobo/navpad/10_helix_r:default\n```\n\n----------------------------------------\n\nTITLE: Building UD_40 Ortho Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the UD_40 Ortho keyboard using the QMK firmware build environment. It assumes that the QMK build environment has been properly set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechstudio/ud_40_ortho/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake mechstudio/ud_40_ortho:default\n```\n\n----------------------------------------\n\nTITLE: Building Potato65 Firmware\nDESCRIPTION: This command compiles the default keymap for the Potato65 keyboard using the QMK build system.  It assumes that the QMK build environment is properly configured. The output will be a firmware file suitable for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/buildakb/potato65/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake buildakb/potato65:default\n```\n\n----------------------------------------\n\nTITLE: Building Keyboard Firmware with QMK\nDESCRIPTION: This command is used to build the default firmware for the Mechlovin Olly BB keyboard. It requires QMK build environment to be set up correctly. It generates a .hex or .bin file that can then be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechlovin/olly/bb/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake mechlovin/olly/bb:default\n```\n\n----------------------------------------\n\nTITLE: Flashing YMD75 Firmware\nDESCRIPTION: This command builds and flashes the default firmware for the YMD75 rev2 keyboard to the device.  It requires the QMK build environment to be set up and the necessary flashing tools installed.  The command assumes the keyboard is connected and ready to be flashed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ymdk/ymd75/rev2/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake ymdk/ymd75/rev2:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Kay65 Firmware with Make\nDESCRIPTION: This command builds the default firmware for the Kay65 keyboard. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechlovin/kay65/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake mechlovin/kay65:default\n```\n\n----------------------------------------\n\nTITLE: Building Keyboard Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the kbdfans/bella/rgb_iso keyboard. It assumes that the QMK build environment has been set up correctly. The command compiles the keymap and other necessary files to generate the firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kbdfans/bella/rgb_iso/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake kbdfans/bella/rgb_iso:default\n```\n\n----------------------------------------\n\nTITLE: Flashing UT47 with LEDs using QMK\nDESCRIPTION: This command compiles and flashes the UT47 keyboard firmware with LED support enabled. It uses the default keymap. The LED_ENABLE=yes flag enables the LED functionality in the firmware. Requires QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/40percentclub/ut47/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake 40percentclub/ut47:default LED_ENABLE=yes\n```\n\n----------------------------------------\n\nTITLE: Flashing Stealth Macropad Firmware (QMK)\nDESCRIPTION: This command builds and flashes the default keymap to the Stealth Macropad keyboard using the QMK build system. It requires a configured QMK build environment and a connected keyboard in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ocean/stealth/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake ocean/stealth:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing JJ4x4 Firmware - QMK\nDESCRIPTION: This command flashes the compiled firmware to the JJ4x4 keyboard. It requires a properly configured QMK build environment and a connected JJ4x4 keyboard. The keyboard must be in flashing mode, achievable through reset.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kprepublic/jj4x4/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake kprepublic/jj4x4:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Atreyu Keyboard Firmware\nDESCRIPTION: This command flashes the compiled firmware onto the Atreyu keyboard using the QMK build environment. It requires the keyboard to be in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/atreyu/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake atreyu:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Spacey Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the Spacey keyboard using the QMK build environment.  It requires the QMK build environment to be properly set up.  The output is the firmware binary, ready for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/p3d/spacey/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake p3d/spacey:default\n```\n\n----------------------------------------\n\nTITLE: Building the DO60 Keyboard Firmware\nDESCRIPTION: This snippet shows how to build the firmware for the DO60 keyboard using the QMK Firmware build environment. It uses the `make` command with the `do60` target and the `default` keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/do60/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake do60:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Mokey 63 Firmware with QMK\nDESCRIPTION: This command builds and flashes the default firmware for the Mokey 63 keyboard using the QMK build system. It requires the QMK build environment to be configured and a compatible bootloader on the keyboard. The command builds the firmware and then attempts to flash it onto the connected keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mokey/mokey63/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake mokey/mokey63:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building KafkaSplit Firmware\nDESCRIPTION: This command builds the default firmware for the KafkaSplit keyboard. It uses the `make` command with the target specified as `meetlab/kafkasplit:default`.  The build environment must be set up before running this command as described in the QMK documentation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/meetlab/kafkasplit/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake meetlab/kafkasplit:default\n```\n\n----------------------------------------\n\nTITLE: Building Sofle Choc Firmware with QMK\nDESCRIPTION: This command compiles the QMK firmware for the Sofle Choc keyboard with the default keymap.  It requires a properly set up QMK build environment as a prerequisite. The output will be a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/sofle_choc/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake sofle_choc:default\n```\n\n----------------------------------------\n\nTITLE: Building REVIUNG41 Firmware\nDESCRIPTION: This snippet demonstrates how to build the default firmware for the REVIUNG41 keyboard using the QMK build environment. It assumes that the QMK build environment has already been set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/reviung/reviung41/readme.md#_snippet_0\n\nLANGUAGE: QMK Make\nCODE:\n```\nmake reviung41:default\n```\n\n----------------------------------------\n\nTITLE: Building mechlovin9 Firmware with QMK\nDESCRIPTION: This snippet demonstrates how to build the default firmware for the mechlovin9 keyboard using the QMK build environment. It requires a properly configured QMK build environment and utilizes the 'make' command with the specified target.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechlovin/mechlovin9/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake mechlovin/mechlovin9/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Flashing AMJ96 Firmware with Make\nDESCRIPTION: This command builds and flashes the QMK firmware for the AMJ96 keyboard using the default keymap. It extends the build command by adding the `:flash` target to the `make` command. Requires a properly configured flashing environment and the keyboard to be in a flashable state.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/amjkeyboard/amj96/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake amjkeyboard/amj96:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing akb/ogrn keyboard firmware\nDESCRIPTION: This command flashes the built firmware to the akb/ogrn keyboard. It requires the QMK build environment to be set up and the keyboard to be connected in a flashable state.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/akb/ogrn/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake akb/ogrn:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing XD75 Firmware\nDESCRIPTION: This snippet shows how to flash the compiled QMK firmware onto the XD75 keyboard using the `make` command. It extends the build command by adding the `:flash` target. The command assumes the keyboard is in a flashable state (e.g., DFU mode).\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/xiudi/xd75/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake xiudi/xd75:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Ace of Spades TKL keyboard firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Ace of Spades TKL keyboard using the QMK firmware build environment.  It assumes the build environment has already been set up according to the QMK documentation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/aos/tkl/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake aos/tkl:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware to Axolstudio Foundation Gamma\nDESCRIPTION: This command builds and flashes the default firmware to the Axolstudio Foundation Gamma keyboard using the QMK build system. It requires a properly configured QMK build environment and the necessary flashing tools. The command combines the build and flash steps into one operation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/axolstudio/foundation_gamma/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake axolstudio/foundation_gamma:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building EAVE Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the Swagkeys EAVE keyboard. It utilizes the QMK build environment to compile the firmware based on the specified keyboard and keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/swagkeys/eave/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake swagkeys/eave:default\n```\n\n----------------------------------------\n\nTITLE: Building QMK Firmware for FC200RT\nDESCRIPTION: This command builds the QMK firmware for the handwired FC200RT keyboard with the default keymap. It assumes that the QMK build environment is set up correctly. The output will be a .hex file that can be flashed to the Teensy 2.0.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/fc200rt_qmk/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake handwired/fc200rt_qmk:default\n```\n\n----------------------------------------\n\nTITLE: Building the AL1 keyboard firmware with QMK\nDESCRIPTION: This command is used to build the QMK firmware for the TriangleLabs AL1 keyboard using the default configuration. It assumes that the QMK build environment has already been set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/al1/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake al1:default\n```\n\n----------------------------------------\n\nTITLE: Building GH80-1800 Keyboard Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the GH80-1800 keyboard using the QMK firmware. It requires the QMK build environment to be properly set up, including the necessary tools and dependencies. The command assumes the keyboard and keymap are located in the specified directory structure within the QMK repository.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/evyd13/gh80_1800/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake evyd13/gh80_1800:default\n```\n\n----------------------------------------\n\nTITLE: Making Mercutio with default keymap\nDESCRIPTION: This command compiles the Mercutio keyboard firmware with the default keymap. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechwild/mercutio/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake mechwild/mercutio:default\n```\n\n----------------------------------------\n\nTITLE: Compiling Scylla v2 Firmware with Default Keymap (Splinky v2)\nDESCRIPTION: This command compiles the Scylla v2 keyboard firmware with the default keymap using a Splinky v2 controller. It utilizes `qmk compile` with the `-kb` flag set to `bastardkb/scylla/v2/splinky/v2` and the `-km` flag set to `default`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/bastardkb/scylla/readme.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nqmk compile -kb bastardkb/scylla/v2/splinky/v2 -km default\n```\n\n----------------------------------------\n\nTITLE: Building Vaneela Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the Vaneela keyboard within the QMK Firmware environment.  It uses the `make` command with specific arguments indicating the keyboard and keymap.  The command assumes that the QMK build environment has been correctly set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/delikeeb/vaneela/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake delikeeb/vaneela:default\n```\n\n----------------------------------------\n\nTITLE: Building AJisai74 firmware with QMK\nDESCRIPTION: This command compiles the firmware for the AJisai74 keyboard using the default keymap within the QMK Firmware environment. It assumes the QMK build environment is already set up. The compiled firmware can then be flashed onto the keyboard's Pro Micro controller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/salicylic_acid3/ajisai74/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake salicylic_acid3/ajisai74:default\n```\n\n----------------------------------------\n\nTITLE: Building QMK Firmware for E6-V2 LE\nDESCRIPTION: This command builds the default QMK firmware for the E6-V2 LE keyboard. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/exclusive/e6v2/le/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake exclusive/e6v2/le:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Keychron Q10 Firmware\nDESCRIPTION: This command flashes the built firmware onto the Keychron Q10 keyboard. It requires the QMK build environment and assumes that the flashing tools are correctly configured. The 'default' configuration is used.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keychron/q10/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake keychron/q10/ansi_encoder:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building the Quokka Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the Quokka keyboard.  It requires QMK build environment to be set up. The output is a .hex or .bin file which can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/quokka/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake quokka:default\n```\n\n----------------------------------------\n\nTITLE: Building Kona Classic Firmware\nDESCRIPTION: This command is used to build the default firmware for the Kona Classic keyboard using the QMK build environment. It requires setting up the build environment beforehand, as described in the linked QMK documentation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kona_classic/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake kona_classic:default\n```\n\n----------------------------------------\n\nTITLE: Building scatter42 Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the scatter42 keyboard using the QMK build environment. It compiles the keyboard layout and necessary firmware components into a flashable file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/scatter42/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake scatter42:default\n```\n\n----------------------------------------\n\nTITLE: Building TinyNeko Firmware\nDESCRIPTION: This command builds the default firmware for the TinyNeko keyboard with the Eclipse60 layout.  It uses the QMK make system.  Requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/sawnsprojects/eclipse/tinyneko/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake tinyneko/eclipse60:default\n```\n\n----------------------------------------\n\nTITLE: Building Sauce Mild Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the Sauce Mild keyboard using the QMK build environment. It compiles the necessary code and generates a firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/sauce/mild/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake sauce/mild:default\n```\n\n----------------------------------------\n\nTITLE: Building CK65 Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the CK65 keyboard using the QMK build environment.  It requires a properly configured QMK environment and the 'make' command. The output is a .hex or .bin file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/senselessclay/ck65/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake senselessclay/ck65:default\n```\n\n----------------------------------------\n\nTITLE: Building Exclusive E8.5 Hotswap Keyboard Firmware (Makefile)\nDESCRIPTION: This command builds the default firmware for the Exclusive E8.5 Hotswap keyboard. It requires a properly set up QMK build environment. The output is a compiled firmware ready to be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/exclusive/e85/hotswap/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake exclusive/e85/hotswap:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware to Geistmaschine/Geist - QMK\nDESCRIPTION: This command flashes the compiled firmware to the Geistmaschine/Geist keyboard using QMK. It specifies the 'default' keymap. This command requires the keyboard to be in bootloader mode. Make sure that QMK is properly installed and configured.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/geistmaschine/geist/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nqmk flash geistmaschine/geist -km default\n```\n\n----------------------------------------\n\nTITLE: Flashing Fourier Keyboard Firmware\nDESCRIPTION: This command flashes the default firmware to the keebio/fourier keyboard using avrdude. It builds the firmware if necessary, and then uses avrdude to flash the compiled .hex file to the keyboard's microcontroller. This requires avrdude to be configured correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keebio/fourier/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake keebio/fourier:default:avrdude\n```\n\n----------------------------------------\n\nTITLE: Building Mach3 Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Mach 3 macropad using the QMK build environment.  It assumes the QMK build environment has been properly set up. The resulting firmware can then be flashed onto the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/machkeyboards/mach3/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake machkeyboards/mach3:default\n```\n\n----------------------------------------\n\nTITLE: Enabling ILI9486 Driver in rules.mk (Make)\nDESCRIPTION: This snippet demonstrates how to enable the ILI9486 display driver for Quantum Painter by adding the driver to the `QUANTUM_PAINTER_DRIVERS` variable in the `rules.mk` file.  This step is necessary to include the driver in the build process. Dependencies include Quantum Painter being enabled.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/quantum_painter.md#_snippet_13\n\nLANGUAGE: make\nCODE:\n```\nQUANTUM_PAINTER_ENABLE = yes\nQUANTUM_PAINTER_DRIVERS += ili9486_spi\n```\n\n----------------------------------------\n\nTITLE: Enabling PWM Timer in mcuconf.h (ChibiOS/STM32)\nDESCRIPTION: This code snippet configures the microcontroller configuration file (mcuconf.h) to enable a specific timer (TIM2 in this case) for PWM usage. This step is necessary to specify which timer the PWM driver should utilize. This needs to be correctly configured for the PWM driver to drive the WS2812 LEDs.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/ws2812.md#_snippet_14\n\nLANGUAGE: c\nCODE:\n```\n#pragma once\n\n#include_next <mcuconf.h>\n\n#undef STM32_PWM_USE_TIM2 // [!code focus]\n#define STM32_PWM_USE_TIM2 TRUE // [!code focus]\n```\n\n----------------------------------------\n\nTITLE: Building LBS6 Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the tweetydabird/lbs6 keyboard using the QMK build environment.  It compiles the source code and creates a firmware file that can be flashed to the device. Requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/tweetydabird/lbs6/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake tweetydabird/lbs6:default\n```\n\n----------------------------------------\n\nTITLE: Compiling Buzzard Firmware with QMK\nDESCRIPTION: This command compiles the default keymap for the Buzzard keyboard using the QMK firmware. It requires a properly configured QMK build environment. The output is a firmware file ready to be flashed onto the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/buzzard/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nqmk compile -kb buzzard -km  default\n```\n\n----------------------------------------\n\nTITLE: Keyboard-Level RGB Matrix Routine - C\nDESCRIPTION: This snippet demonstrates how keyboard designers should structure their RGB Matrix routines to allow keymap overrides in QMK Firmware. It calls the `rgb_matrix_indicators_user()` function and proceeds with the keyboard-level LED code only if the user function returns `false` indicating that it hasn't handled the LED behavior.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/ChangeLog/20221126.md#_snippet_4\n\nLANGUAGE: c\nCODE:\n```\nbool rgb_matrix_indicators_kb(void) {\n    // Defer to the keymap if they want to override\n    if (!rgb_matrix_indicators_user()) { return false; }\n\n    // keyboard LED code\n    return true;\n}\n```\n\n----------------------------------------\n\nTITLE: Flashing kafka60 Firmware\nDESCRIPTION: This command flashes the default firmware onto the kafka60 keyboard. It relies on the QMK build environment and assumes a flashing tool compatible with the keyboard's bootloader is configured. The command combines building and flashing steps.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/meetlab/kafka60/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake meetlab/kafka60:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing FRL84 Keyboard Firmware (QMK)\nDESCRIPTION: This command flashes the default firmware to the studiokestra/frl84 keyboard using the QMK build environment and a compatible flashing tool. It requires the keyboard to be in bootloader mode and a properly configured QMK environment. The 'flash' target initiates the flashing process after building.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/studiokestra/frl84/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake studiokestra/frl84:default:flash\n```\n\n----------------------------------------\n\nTITLE: Setting PWM Frequency in config.h (IS31FL3737B)\nDESCRIPTION: This snippet demonstrates how to set the PWM frequency for the IS31FL3737B driver by defining `IS31FL3737_PWM_FREQUENCY` in `config.h`. The default value is `IS31FL3737_PWM_FREQUENCY_8K4_HZ` (8.4 kHz). Other valid values are available as well.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/is31fl3737.md#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n#define IS31FL3737_PWM_FREQUENCY IS31FL3737_PWM_FREQUENCY_8K4_HZ\n```\n\n----------------------------------------\n\nTITLE: Flashing CSTM80 Firmware\nDESCRIPTION: This command flashes the default firmware to the Drop CSTM80 keyboard. It requires a properly set up QMK build environment and a connected keyboard in a flashable state.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/drop/cstm80/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake drop/cstm80:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Macrocat Firmware\nDESCRIPTION: This command flashes the default firmware to the Macrocat keyboard. It uses the QMK build system and requires the keyboard to be in bootloader mode. The QMK build environment must be set up correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/macrocat/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake macrocat:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Ludmila Firmware QMK\nDESCRIPTION: This command flashes the built firmware onto the Ludmila macropad. It assumes the QMK build environment is set up and the firmware has already been built.  It requires the dfu-programmer or similar flashing tool.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mexsistor/ludmila/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake mexsistor/ludmila:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for Infinity87 Rev.2 (QMK)\nDESCRIPTION: This command builds the default firmware for the Infinity87 Rev.2 keyboard. It assumes that the QMK build environment has already been set up. The resulting firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechlovin/infinity87/rev2/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake mechlovin/infinity87/rev2:default\n```\n\n----------------------------------------\n\nTITLE: Building RGB Backlight Firmware for Keychron S1 (ANSI)\nDESCRIPTION: This command builds the QMK firmware for the Keychron S1 keyboard with RGB backlight and ANSI layout, using the default configuration. It requires a properly configured QMK build environment. The resulting firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keychron/s1/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake keychron/s1/ansi/rgb:default\n```\n\n----------------------------------------\n\nTITLE: Building Daji Seis Cinco Firmware\nDESCRIPTION: This command builds the default firmware for the Daji Seis Cinco keyboard using the QMK build environment. It requires a properly configured QMK build environment. The output is a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/daji/seis_cinco/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake daji/seis_cinco:default\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for Akko 5087 (QMK)\nDESCRIPTION: This command builds the default firmware for the Akko 5087 keyboard using the QMK build environment. It compiles the keyboard layout and firmware to create a flashable image.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/akko/5087/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake akko/5087:default\n```\n\n----------------------------------------\n\nTITLE: Building Keychron Q12 Firmware (Makefile)\nDESCRIPTION: This command builds the default firmware for the Keychron Q12 keyboard with the ANSI layout and STM32L432 microcontroller using the QMK build environment.  It compiles the source code and generates the firmware file that can be flashed onto the keyboard.  Dependencies include the QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keychron/q12/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake keychron/q12/q12_ansi_stm32l432:default\n```\n\n----------------------------------------\n\nTITLE: Building the Yugo-M Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the Yugo-M keyboard.  It requires a properly set up QMK build environment. After successful execution, the firmware can be flashed onto the Yugo-M controller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ibm/model_m/yugo_m/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake ibm/model_m/yugo_m:default\n```\n\n----------------------------------------\n\nTITLE: Building the Ciel65 Keyboard\nDESCRIPTION: This command builds the default keymap for the Ciel65 keyboard. It requires the QMK build environment to be set up correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/chickenman/ciel65/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake chickenman/ciel65:default\n```\n\n----------------------------------------\n\nTITLE: Building and Flashing NumAtreus Firmware\nDESCRIPTION: This command builds the QMK firmware for the NumAtreus keyboard with the default keymap and flashes it to the keyboard. It assumes that the QMK build environment is already set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/numatreus/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake numatreus:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building LEFTOVER30 Firmware with QMK\nDESCRIPTION: This command demonstrates how to compile the default keymap for the LEFTOVER30 keyboard using the QMK build environment.  It utilizes the `make` command with the keyboard and keymap specified as arguments.  Ensure the QMK build environment is properly set up before running this command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/marksard/leftover30/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake marksard/leftover30:default\n```\n\n----------------------------------------\n\nTITLE: Flashing MK47 Keyboard Firmware\nDESCRIPTION: This command flashes the built firmware onto the MK47 keyboard. It assumes the QMK build environment is set up and the keyboard is connected.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/inland/mk47/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake inland/mk47:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Maxipad Firmware for Teensy 2.0 Controller\nDESCRIPTION: This command builds the Maxipad keyboard firmware specifically for the PJRC Teensy 2.0 controller. Ensure the QMK build environment is correctly configured before execution. The firmware will be optimized for the Teensy 2.0.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/maxipad/readme.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmake maxipad/teensy2:default\n```\n\n----------------------------------------\n\nTITLE: Set Mono LED Scaling Register - IS31FL3729 (C)\nDESCRIPTION: Configures the scaling register for a single monochrome LED on the IS31FL3729 driver. This function sets the scaling value for the specified LED. The changes are not immediately applied; `is31fl3729_update_scaling_registers()` must be called to flush the changes to the driver. The `index` refers to the LED index in the `g_is31fl3729_leds` array.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/is31fl3729.md#_snippet_7\n\nLANGUAGE: C\nCODE:\n```\nvoid is31fl3729_set_scaling_register(uint8_t index, uint8_t value)\n```\n\n----------------------------------------\n\nTITLE: Enabling Audio on Pin B7 in QMK config.h\nDESCRIPTION: This code snippet enables audio output on pin B7 in QMK firmware. Duophony is enabled if one of the B pins is enabled along with one of the C pins. Deprecated. Use `#define AUDIO_PIN B7`, or use `#define AUDIO_PIN_ALT B7` if a `C` pin is enabled with `AUDIO_PIN`. This setting is configured in the `config.h` file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/config_options.md#_snippet_20\n\nLANGUAGE: c\nCODE:\n```\n#define B7_AUDIO\n```\n\n----------------------------------------\n\nTITLE: Building Isometria 75 Firmware with QMK\nDESCRIPTION: This command builds and flashes the default firmware for the Isometria 75 Rev1 keyboard using the QMK build environment. It requires QMK to be set up correctly and will flash the generated firmware to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ebastler/isometria_75/rev1/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake ebastler/isometria_75/rev1:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing JKB2 Firmware with QMK\nDESCRIPTION: This command flashes the default firmware onto the JKB2 osu! Macropad. It requires a properly configured QMK build environment and a connected device in a flashable state. This uploads the generated firmware to the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/jadookb/jkb2/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake jadookb/jkb2:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Novem Keyboard Firmware (QMK)\nDESCRIPTION: This command builds the default keymap for the handwired Novem keyboard using the QMK firmware build environment. Ensure the QMK build environment is set up before executing this command.  The resulting firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/novem/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/novem:default\n```\n\n----------------------------------------\n\nTITLE: Building NK Classic TKL Firmware\nDESCRIPTION: This command builds the default keymap for the NK Classic TKL keyboard using the QMK build environment. It assumes that the QMK build environment has already been set up. The resulting firmware can then be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/novelkeys/nk_classic_tkl/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake novelkeys/nk_classic_tkl:default\n```\n\n----------------------------------------\n\nTITLE: Building GH60 v1.3 Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the GH60 v1.3 keyboard using the QMK build environment. It compiles the keymap and necessary code to create a firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/gh60/v1p3/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake gh60/v1p3:default\n```\n\n----------------------------------------\n\nTITLE: Building Gowla Keyboard Firmware with Make\nDESCRIPTION: This snippet provides the command to compile the default keymap for the Gowla keyboard using the QMK build environment. It assumes that the QMK build environment has been set up correctly. The command builds the firmware which can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/gowla/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake gowla:default\n```\n\n----------------------------------------\n\nTITLE: Building Nyquist Firmware\nDESCRIPTION: This command builds the default firmware for the Nyquist Rev3 keyboard using the QMK build environment. It compiles the source code into a firmware image that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keebio/nyquist/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake keebio/nyquist/rev3:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Elaruus Keyboard Firmware\nDESCRIPTION: This command flashes the compiled firmware to the SyenaKeyboards Elaruus keyboard. It requires a correctly configured QMK build environment and assumes the keyboard is connected and in a state ready to receive the firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/syenakeyboards/elaruus/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake syenakeyboards/elaruss:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building The Uni v3 Firmware (USB-C)\nDESCRIPTION: This command compiles the firmware for The Uni v3 keyboard, which uses a USB-C connection. It uses the `make` command with the `usb_c` variant to specify the correct hardware configuration.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/stenokeyboards/the_uni/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake stenokeyboards/the_uni/usb_c:default\n```\n\n----------------------------------------\n\nTITLE: Flashing MNK50 Firmware with Make\nDESCRIPTION: This command flashes the firmware for the `monokei/mnk50` keyboard with a specified `<keymap>` using the QMK Firmware command-line interface. It assumes the keyboard is in DFU mode, typically entered by holding the Escape key while plugging in the keyboard.  Replace `<keymap>` with the desired keymap name.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/monokei/mnk50/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake monokei/mnk50:<keymap>:flash\n```\n\n----------------------------------------\n\nTITLE: Building angel64 Firmware (QMK)\nDESCRIPTION: This snippet shows how to build the firmware for the angel64 keyboard with the alpha variant and default keymap, using the QMK build environment. It assumes the QMK build environment is already set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kakunpc/angel64/alpha/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake kakunpc/angel64/alpha:default\n```\n\n----------------------------------------\n\nTITLE: Backing Up Flash Memory using dfu-util\nDESCRIPTION: This command uses dfu-util to create a backup of the keyboard's internal flash memory.  This backup can be used to restore the original firmware later. Requires dfu-util to be installed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/xiaomi/mk02/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndfu-util -d 0483:df11 -a 0 -s 0x08000000 -U flash-backup.bin\n```\n\n----------------------------------------\n\nTITLE: Building Quasar Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the Quasar keyboard using the QMK build environment. It assumes that the QMK build environment has already been set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ai03/quasar/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake ai03/quasar:default\n```\n\n----------------------------------------\n\nTITLE: Building MNK75 Firmware\nDESCRIPTION: This command builds the default keymap for the MNK75 keyboard using the QMK build environment.  It requires the QMK build environment to be set up.  The output is a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/monokei/mnk75/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake monokei/mnk75:default\n```\n\n----------------------------------------\n\nTITLE: Building Maxipad Firmware for Pro Micro Controller\nDESCRIPTION: This command builds the Maxipad keyboard firmware specifically for the Pro Micro controller. It requires the QMK build environment to be configured.  The resulting firmware is tailored to the Pro Micro's specifications.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/maxipad/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake maxipad/promicro:default\n```\n\n----------------------------------------\n\nTITLE: Building the Coban Pad 9A Firmware\nDESCRIPTION: This command builds the default firmware for the Coban Pad 9A keyboard. It assumes that the QMK build environment has been set up correctly. The output will be a .hex file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/coban/pad9a/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake coban/pad9a:default\n```\n\n----------------------------------------\n\nTITLE: Building 3w6 Firmware\nDESCRIPTION: These `make` commands are used to build the firmware for the 3w6 keyboard using the QMK build environment. The first command builds the default firmware, while the second builds a version with Pimoroni Trackball support. Ensure your QMK build environment is set up correctly before running these commands.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/3w6/rev2/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake 3w6/rev2:default\n```\n\nLANGUAGE: make\nCODE:\n```\nmake 3w6/rev2:default_pimoroni\n```\n\n----------------------------------------\n\nTITLE: Compiling TKM-2021 keyboard with QMK\nDESCRIPTION: This command compiles the QMK firmware for the TKM-2021 keyboard using the default keymap. It assumes that the QMK build environment is already set up. The resulting firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cest73/tkm/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nqmk compile -kb cest73/tkm -km default\n```\n\n----------------------------------------\n\nTITLE: Flashing Aranck Keyboard with QMK Firmware\nDESCRIPTION: This command flashes the \"turkishish\" keymap onto the Aranck keyboard using the QMK Firmware. It assumes that the QMK Firmware environment is set up correctly and that the keyboard is connected.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/aranck/keymaps/turkishish/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake handwired/aranck:turkishish:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing QMK Firmware to Viktus Minne Topre\nDESCRIPTION: This command builds and flashes the QMK firmware to the Viktus Minne Topre keyboard with the default keymap.  It requires a properly set up QMK build environment and a connected keyboard in a flashable state.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/viktus/minne_topre/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake viktus/minne_topre:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building zv48 Firmware with QMK\nDESCRIPTION: These commands are used to build the firmware for the zv48 keyboard using the QMK build environment.  The `make` command compiles the firmware for specific hardware targets (f401 and f411). It requires the QMK build environment to be set up correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/zvecr/zv48/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake zvecr/zv48/f401:default\n```\n\nLANGUAGE: Shell\nCODE:\n```\nmake zvecr/zv48/f411:default\n```\n\n----------------------------------------\n\nTITLE: Building QMK Firmware\nDESCRIPTION: This command compiles the QMK firmware for the lostdotfish/rp2040_orbweaver keyboard with the default keymap. It assumes a correctly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/lostdotfish/rp2040_orbweaver/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake lostdotfish/rp2040_orbweaver:default\n```\n\n----------------------------------------\n\nTITLE: Building Kira 80 Firmware\nDESCRIPTION: This command builds the default firmware for the Kira 80 keyboard using the QMK build environment. It compiles the source code and creates a firmware image that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kira/kira80/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake kira/kira80:default\n```\n\n----------------------------------------\n\nTITLE: Building LFKPad Firmware with Make\nDESCRIPTION: This snippet demonstrates how to build the default firmware for the LFKPad keyboard using the `make` command. It assumes that the QMK build environment has already been set up. The command compiles the firmware and generates a .hex file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/lfkeyboards/lfkpad/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake lfkeyboards/lfkpad:default\n```\n\n----------------------------------------\n\nTITLE: Updating PWM buffers - C\nDESCRIPTION: Flushes the PWM values to the IS31FL3746A LED driver to update the LED brightness. This function requires the driver index to identify which driver's PWM buffers should be updated.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/is31fl3746a.md#_snippet_9\n\nLANGUAGE: C\nCODE:\n```\nvoid is31fl3746a_update_pwm_buffers(uint8_t index)\n```\n\n----------------------------------------\n\nTITLE: Building Katana60 rev1 with QMK\nDESCRIPTION: This command builds the default keymap for the Katana60 rev1 keyboard using the QMK firmware build environment. It assumes that the QMK build environment is already set up. The resulting firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/rominronin/katana60/rev1/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake rominronin/katana60/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Building Planck Firmware\nDESCRIPTION: This command builds the default firmware for the Planck keyboard, specifically for revision 4.  It requires a properly configured QMK build environment. The output will be a .hex file ready for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/planck/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake planck/rev4:default\n```\n\n----------------------------------------\n\nTITLE: Set Brightness of Single LED\nDESCRIPTION: Sets the brightness of a single LED using the IS31FL3745 driver (single-color). Requires the LED index and brightness value as input. The LED update is deferred until `is31fl3745_update_pwm_buffers()` is called.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/is31fl3745.md#_snippet_5\n\nLANGUAGE: c\nCODE:\n```\nvoid is31fl3745_set_value(int index, uint8_t value)\n```\n\n----------------------------------------\n\nTITLE: Building AC001 Firmware\nDESCRIPTION: This command builds the default firmware for the AC001 keyboard. It uses the QMK make system. This requires a correctly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/hfdkb/ac001/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake hfdkb/ac001:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Igloo Keyboard Firmware\nDESCRIPTION: This command builds and flashes the default firmware for the Igloo keyboard to the connected device. It requires a correctly configured QMK build environment and a compatible bootloader.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/igloo/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake igloo:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing serneity65 Firmware (QMK)\nDESCRIPTION: This command builds and flashes the QMK firmware to the serneity65 keyboard. It depends on the QMK build environment and a connected serneity65 keyboard in flashable mode. This will overwrite the existing firmware on the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wuque/serneity65/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake wuque/serneity65:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Bear 65 Firmware\nDESCRIPTION: This command flashes the default firmware onto the Bear 65 keyboard using the QMK Firmware.  It assumes the keyboard is connected and in a state ready to receive the flash. Requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/jacky_studio/bear_65/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake jacky_studio/bear_65:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Tenstad Keyboard Firmware\nDESCRIPTION: This command flashes the compiled firmware to the Tenstad keyboard.  It requires the QMK build environment and appropriate flashing tools to be configured.  The `flash` target automatically identifies the connected keyboard and flashes the firmware binary.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/tenstad/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/tenstad:default:flash\n```\n\n----------------------------------------\n\nTITLE: Build 0xCB Static Default Keymap - QMK\nDESCRIPTION: This command builds the default keymap for the 0xCB Static keyboard using the QMK build environment. It compiles the keymap and generates the firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/0xcb/static/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake 0xcb/static:default\n```\n\n----------------------------------------\n\nTITLE: Building Gentoo65 Hotswap Firmware with QMK\nDESCRIPTION: This command demonstrates how to build the default firmware for the Gentoo65 Hotswap keyboard using the QMK build system. It requires a properly configured QMK build environment. The command compiles the firmware and prepares it for flashing onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cannonkeys/gentoo_hs/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake cannonkeys/gentoo_hs:default\n```\n\n----------------------------------------\n\nTITLE: Building TRK1 Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the TRK1 keyboard using the QMK build environment.  It assumes the QMK build environment is properly set up. It compiles the firmware from source.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/trkeyboards/trk1/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake trkeyboards/trk1:default\n```\n\n----------------------------------------\n\nTITLE: Making THE50 Firmware\nDESCRIPTION: This command compiles the QMK firmware for the THE50 keyboard with the default keymap and uses the DFU bootloader. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/lazydesigners/the50/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake lazydesigners/the50:default:dfu\n```\n\n----------------------------------------\n\nTITLE: Building rskeys100 Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the rskeys100 keyboard using the QMK build environment.  It assumes the user has already set up their QMK build environment. The output is a .hex or .bin file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ryanskidmore/rskeys100/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake ryanskidmore/rskeys100:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Chaos65 Firmware\nDESCRIPTION: This command builds and flashes the default firmware to the Chaos65 keyboard. It requires a properly configured QMK build environment and a compatible flashing tool.  It assumes the bootloader is active and ready to receive the firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/chaos65/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake chaos65:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building VIA Firmware with QMK\nDESCRIPTION: This snippet shows how to build the VIA-enabled firmware for the Infinity CE keyboard using the QMK build environment. This allows the keyboard to be configured using the VIA configurator.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechlovin/infinityce/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake mechlovin/infinityce:via\n```\n\n----------------------------------------\n\nTITLE: Building ATSET AT6 Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the ATSET AT6 keyboard using the QMK build environment. It requires the QMK build environment to be properly set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/atset/at6/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake atset/at6:default\n```\n\n----------------------------------------\n\nTITLE: Flashing ScottoErgo Keyboard Firmware (QMK)\nDESCRIPTION: This command flashes the default firmware to the ScottoErgo keyboard using the QMK build environment. It requires QMK firmware to be set up correctly and the appropriate flashing tools installed.  It assumes the keyboard is in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/scottokeebs/scottoergo/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/scottokeebs/scottoergo:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing M80S Firmware\nDESCRIPTION: This command builds and flashes the QMK firmware for the Mode Eighty M80S keyboard with the default keymap. It requires a correctly configured QMK build environment and a connected keyboard in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mode/m80v1/m80s/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake mode/eighty/m80s:default:flash # Soldered\n```\n\n----------------------------------------\n\nTITLE: Flashing Waka60 Firmware with QMK\nDESCRIPTION: This command flashes the default firmware onto the Waka60 keyboard using the QMK build environment. It requires that the keyboard be in a flashable state, typically achieved by pressing the reset button.  The QMK build environment and dfu-util (or similar flashing tool) must be correctly configured.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechwild/waka60/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake mechwild/waka60:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Micropad 4x4 Default Keymap\nDESCRIPTION: This command flashes the default keymap to the Micropad 4x4. It utilizes the QMK build environment to upload the compiled firmware to the device. Ensure the QMK build environment is properly set up, and the device is in bootloader mode prior to execution.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/nibell/micropad4x4/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake nibell/macropad4x4:default\n```\n\n----------------------------------------\n\nTITLE: Making 5x5 Firmware\nDESCRIPTION: This command builds the default firmware for the 5x5 keyboard using the QMK build environment. It requires the QMK build environment to be set up correctly. This is the entry point for compiling the firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/40percentclub/5x5/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake 40percentclub/5x5:default\n```\n\n----------------------------------------\n\nTITLE: Building Starry FRL Firmware\nDESCRIPTION: This command compiles the default firmware for the Starry FRL keyboard. It requires a properly configured QMK build environment. The command should be executed from the QMK firmware directory.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/salane/starryfrl/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake salane/starryfrl:default\n```\n\n----------------------------------------\n\nTITLE: Building wilba.tech WT65-B Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the wilba.tech WT65-B keyboard using the QMK build environment. It requires a properly configured QMK environment and will produce a firmware file ready to be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wilba_tech/wt65_b/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake wilba_tech/wt65_b:default\n```\n\n----------------------------------------\n\nTITLE: Building RAMA WORKS M6-B Firmware\nDESCRIPTION: This command is used to compile the firmware for the RAMA WORKS M6-B keyboard with the default keymap using the QMK build environment. It assumes that the QMK build environment has been set up correctly, which involves installing necessary dependencies and configuring the build tools. The resulting firmware can then be flashed onto the keyboard's PCB.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wilba_tech/rama_works_m6_b/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake wilba_tech/rama_works_m6_b:default\n```\n\n----------------------------------------\n\nTITLE: Compiling CRKBD Pro Keyboard Firmware\nDESCRIPTION: This command compiles the firmware for the CRKBD Pro keyboard using the QMK build environment. It specifies the keyboard and keymap to be used for the compilation process.  Requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechboards/crkbd/pro/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nqmk compile -kb mechboards/crkbd/pro -km default\n```\n\n----------------------------------------\n\nTITLE: Building hecomi keyboard firmware with QMK\nDESCRIPTION: This command is used to build the default firmware for the hecomi keyboard (alpha variant) using the QMK build environment. It assumes that the QMK build environment has already been set up. The command compiles the firmware and generates a .hex file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/takashiski/hecomi/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake takashiski/hecomi/alpha:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Equinox XL with QMK\nDESCRIPTION: This command builds and flashes the default keymap to the Equinox XL keyboard.  It requires a configured QMK build environment and a connected keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ai03/equinox_xl/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake ai03/equinox_xl:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Wonderland Keyboard Firmware\nDESCRIPTION: This command is used to compile the default keymap for the Wonderland keyboard using the QMK firmware build environment. It requires the QMK build environment to be set up correctly. The command assumes the keyboard definition is located in the `evyd13/wonderland` directory.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/evyd13/wonderland/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake evyd13/wonderland:default\n```\n\n----------------------------------------\n\nTITLE: Building Keyboard Firmware with Make\nDESCRIPTION: This command builds the default firmware for the Vanguard65 keyboard using the `make` command.  It utilizes the `keebfront/vanguard65:default` target. This assumes the QMK build environment is already set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keebfront/vanguard65/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake keebfront/vanguard65:default\n```\n\n----------------------------------------\n\nTITLE: Building default firmware for S60-x RGB keyboard\nDESCRIPTION: This command builds the default firmware for the RGB version of the S60-x keyboard using the QMK build environment. It assumes that the build environment has been set up correctly. This produces a firmware file specifically designed for the RGB variant.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/sentraq/s60_x/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake sentraq/s60_x/rgb:default\n```\n\n----------------------------------------\n\nTITLE: Building YDKB Grape Firmware with Make\nDESCRIPTION: This command builds the default firmware for the YDKB Grape keyboard. It uses the QMK build environment to compile the keyboard's keymap and other configurations into a firmware image.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ydkb/grape/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake ydkb/grape:default\n```\n\n----------------------------------------\n\nTITLE: Building YMD40 AIR40 Firmware with Make\nDESCRIPTION: This command builds the default firmware for the YMD40 AIR40 keyboard using the QMK make system. It compiles the keyboard layout and related settings into a firmware image.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ymdk/ymd40/air40/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake ymdk/ymd40/air40:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware for Elite C Controller\nDESCRIPTION: This command flashes the QMK firmware for the Lotus 58 Glow keyboard using the Elite C controller with the default keymap.  It requires the build environment to be properly configured and the controller to be in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/tweetydabird/lotus58/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake tweetydabird/lotus58/elite_c:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Olly Orion Firmware\nDESCRIPTION: This command compiles the default firmware for the Olly Orion keyboard using the QMK build environment. It utilizes the `make` command with specific arguments for the keyboard, layout, and target.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechlovin/olly/orion/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake mechlovin/olly/orion:default\n```\n\n----------------------------------------\n\nTITLE: Building Crawlpad Firmware with Make\nDESCRIPTION: This command builds the default firmware for the Crawlpad keyboard using the QMK build environment. It assumes that the QMK build environment is already set up.  The resulting firmware can then be flashed onto the Crawlpad.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/crawlpad/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake crawlpad:default\n```\n\n----------------------------------------\n\nTITLE: Viktus SP_Mini Key Matrix Diagram\nDESCRIPTION: This diagram visually represents the key matrix of the Viktus SP_Mini keyboard. Each cell represents a key or encoder, with numbers indicating their row and column mapping. This information is essential for configuring the keyboard's keymap in the firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/viktus/sp_mini/matrix_diagram.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n  ┌─ Switch or Encoder                       Switch or Encoder ─┐\n┌───┐┌───┬───┬───┬───┬───┬───┐   ┌───┬───┬───┬───┬───┬───┬───┐┌───┐\n│00 ││01 │02 │03 │04 │05 │06 │   │50 │51 │52 │53 │54 │55 │56 ││57 │\n└───┘└───┴───┴───┴───┴───┴───┘   └───┴───┴───┴───┴───┴───┴───┘└───┘\n┌───┐┌───┬───┬───┬───┬───┬───┐   ┌───┬───┬───┬───┬───┬───┬───┐┌───┐   ┌───────┐\n│10 ││11 │12 │13 │14 │15 │16 │   │60 │61 │62 │63 │64 │65 │66 ││67 │   │66     │ 2u Backspace\n├───┤├───┴┬──┴┬──┴┬──┴┬──┴┬──┴┐  └┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴───┤├───┤   └───────┘\n│20 ││21  │22 │23 │24 │25 │26 │   │70 │71 │72 │73 │74 │76    ││77 │\n├───┤├────┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┐ └─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴──┬───┘└───┘\n│30 ││31    │32 │33 │34 │35 │36 │   │81 │82 │83 │84 │85  │┌───┐\n├───┤├────┬─┴─┬─┴─┬─┴──┬┴───┴──┬┘  ┌┴───┴───┼───┴┬──┴┬───┘│86 │\n│40 ││41  │42 │43 │44  │45     │   │92      │93  │94 │┌───┼───┼───┐\n└───┘└────┴───┴───┴────┴───────┘   └────────┴────┴───┘│95 │96 │97 │\n                                                      └───┴───┴───┘\n     [4L] ──────────────────────   [2R] ──────────────\n     ┌─────┬────┬─────┬────────┐   ┌───────────┬─────┐\n     │41   │42  │43   │45      │   │92         │94   │\n     └─────┴────┴─────┴────────┘   └───────────┴─────┘\n      1.5u/1.25u/1.5u/2.25u         3u/1.5u\n     ┌────┬───┬────┬───────────┐   ┌──────────┬──────┐\n     │41  │42 │43  │45         │   │92        │94    │\n     └────┴───┴────┴───────────┘   └──────────┴──────┘\n      1.25u/1u/1.25u/3u             2.75u/1.75u\n     ┌────┬────┬────┬──────────┐\n     │41  │42  │43  │45        │\n     └────┴────┴────┴──────────┘\n      1.25u/1.25u/1.25u/2.75u\n```\n\n----------------------------------------\n\nTITLE: Building the litl keyboard firmware (QMK)\nDESCRIPTION: This command builds the QMK firmware for the litl keyboard with the default keymap. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/sthlmkb/litl/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake sthlmkb/litl:default\n```\n\n----------------------------------------\n\nTITLE: Adjust Layer Keymap Definition\nDESCRIPTION: Defines the adjust layer key assignments for the Dozen0 keyboard. This layer includes RGB control functions like Toggle, Mode+, Hue+, Sat+, Val+, Reset, Mode-, Hue-, Sat-, and Val-.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/yynmt/dozen0/keymaps/default/readme.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n,-----------------------------------------.\n| RGB  | RGB  | RGB  | RGB  | RGB  |      |\n|Toggle|Mode+ | Hue+ | Sat+ | Val+ |      |\n|------+------+------+------+------+------|\n| RGB  | RGB  | RGB  | RGB  | RGB  |      |\n|Reset |Mode- | Hue- | Sat- | Val- |      |\n`-----------------------------------------'\n```\n\n----------------------------------------\n\nTITLE: Compiling ScottoWing firmware\nDESCRIPTION: This command compiles the default firmware for the ScottoWing keyboard using the QMK build environment. It requires the QMK build environment to be set up correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/scottokeebs/scottowing/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake scottokeebs/handwired/scottowing:default\n```\n\n----------------------------------------\n\nTITLE: Building smAllice Firmware\nDESCRIPTION: This command is used to build the default keymap for the smAllice keyboard. It compiles the firmware and prepares it for flashing to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keyhive/smallice/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake keyhive/smallice:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Lattice60 Firmware with Make\nDESCRIPTION: This command flashes the built firmware to the Lattice60 keyboard. It requires the QMK build environment to be set up, and the keyboard to be in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keyhive/lattice60/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake keyhive/lattice60:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Quick17 Firmware (QMK)\nDESCRIPTION: This command builds the default keymap for the Quick17 macropad using the QMK build environment. It compiles the firmware based on the configuration files.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/yushakobo/quick17/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake quick17:default\n```\n\n----------------------------------------\n\nTITLE: Flashing ErgoStrafer RGB firmware\nDESCRIPTION: This command flashes the compiled firmware onto the ErgoStrafer RGB keyboard. It depends on a correctly built firmware (using the `make` command) and a configured flashing environment. The keyboard needs to be in bootloader mode for flashing to succeed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/custommk/ergostrafer_rgb/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake custommk/ergostrafer_rgb:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building ScottoHazard Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the ScottoHazard keyboard using the QMK build environment.  It requires the QMK build environment to be set up correctly. The output will be a .hex or .bin file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/scottokeebs/scottohazard/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake handwired/scottokeebs/scottohazard:default\n```\n\n----------------------------------------\n\nTITLE: Building QMK Firmware for KLEC-02\nDESCRIPTION: This command builds the QMK firmware for the KLEC-02 keyboard with the default keymap. It requires a properly configured QMK build environment. The output will be a .hex or .bin file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/takashicompany/klec_02/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake takashicompany/klec_02:default\n```\n\n----------------------------------------\n\nTITLE: Finding Virtual Block Device Path using dmesg\nDESCRIPTION: This command uses `sudo dmesg` to check the kernel logs for the identification of the virtual device. The command relies on `dmesg` to output kernel messages and `sudo` to get root privileges. The `sdx` is the name of the block device and `/dev/sdx` represents the path.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/hhkb/yang/readme.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nsudo dmesg\n```\n\n----------------------------------------\n\nTITLE: Building KBD66 Firmware with QMK\nDESCRIPTION: This snippet provides the command to compile the default firmware for the KBD66 keyboard using the QMK build environment. It assumes that the QMK build environment has been properly configured. This command will create the firmware file that can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kbdfans/kbd66/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake kbdfans/kbd66:default\n```\n\n----------------------------------------\n\nTITLE: Building the YMDK YMD21 v2 Firmware\nDESCRIPTION: This command builds the default firmware for the YMDK YMD21 v2 keyboard. It requires a properly set up QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ymdk/ymd21/v2/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake ymdk/ymd21/v2:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Big Switch Seat Keyboard Firmware\nDESCRIPTION: This command builds and flashes the default firmware for the keebio/bigswitchseat keyboard to the device. It requires a properly configured QMK build environment and a connected keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keebio/bigswitchseat/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake keebio/bigswitchseat:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Eon95 Firmware with QMK\nDESCRIPTION: This snippet demonstrates how to build the default keymap for the Eon95 keyboard using the QMK Firmware build system. It requires the QMK build environment to be properly set up, as described in the linked documentation. The command assumes the user is in the QMK Firmware directory.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/evyd13/eon95/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake evyd13/eon95:default\n```\n\n----------------------------------------\n\nTITLE: Flashing DMOTE QMK Firmware\nDESCRIPTION: This command flashes the compiled firmware to the DMOTE keyboard. It requires the QMK build environment to be set up and the keyboard to be in bootloader mode. This will overwrite the current firmware on the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/dmote/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake handwired/dmote:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Knight_Plus Firmware - Makefile\nDESCRIPTION: This snippet shows how to build the default and VIA versions of the QMK firmware for the X-BOWS Knight_Plus keyboard. It uses the `make` command with specific targets to compile the firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/xbows/knight_plus/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake xbows/knight_plus:default\n```\n\nLANGUAGE: Makefile\nCODE:\n```\nmake xbows/knight_plus:via\n```\n\n----------------------------------------\n\nTITLE: Flashing XD96 Keyboard Firmware (QMK)\nDESCRIPTION: This command flashes the compiled firmware to the XD96 keyboard. It requires the QMK build environment to be set up and the firmware to be built first. It utilizes the `xiudi/xd96:default` configuration for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/xiudi/xd96/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake xiudi/xd96:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Haven80 Solder Keyboard Firmware\nDESCRIPTION: This command flashes the compiled firmware onto the Haven80 Solder keyboard. It extends the `make` command to include the `flash` target, which utilizes the appropriate flashing tools for the Atmega32u4 microcontroller. It requires a configured QMK build environment and the necessary flashing tools installed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ah/haven80/solder/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake ah/haven80/solder:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing supersplit keyboard firmware\nDESCRIPTION: This command builds and flashes the default keymap to the supersplit keyboard.  It requires a properly configured QMK build environment and a connected keyboard in a flashable state (e.g., bootloader mode).\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/supersplit/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake supersplit:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Bastyl Firmware with Make\nDESCRIPTION: This command builds the default keymap for the Bastyl keyboard using the QMK build environment. It assumes that the build environment has been set up correctly. Refer to the QMK documentation for details on setting up the build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/hidtech/bastyl/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake hidtech/bastyl:default\n```\n\n----------------------------------------\n\nTITLE: Flashing plum47 with QMK\nDESCRIPTION: This command compiles and flashes the default keymap to the plum47 keyboard using the QMK build environment. This requires a properly configured build environment and a connected keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/plum47/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake plum47:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for Noah AVR\nDESCRIPTION: This command builds the default firmware for the Noah AVR keyboard using the QMK build environment. Ensure the build environment is properly set up before executing this command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kb_elmo/noah_avr/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake kb_elmo/noah_avr:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Jones v.0.3.1 Keyboard Firmware (QMK)\nDESCRIPTION: This command builds and flashes the firmware for the Jones v.0.3.1 keyboard with the default keymap.  It requires a properly configured QMK build environment and a connected keyboard in a flashable state.  The command assumes the bootloader is already configured.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/jones/v03_1/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake jones/v03_1:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Doro67 Multi Keyboard Firmware with QMK\nDESCRIPTION: This command builds the default keymap for the Doro67 multi keyboard using the QMK build environment. It assumes that the QMK build environment has already been set up according to the QMK documentation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/doro67/multi/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake doro67/multi:default\n```\n\n----------------------------------------\n\nTITLE: Building Igloo Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the Igloo keyboard using the QMK build system. It requires a correctly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/igloo/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake igloo:default\n```\n\n----------------------------------------\n\nTITLE: Making 3x3macropad with QMK\nDESCRIPTION: This command compiles the default keymap for the 3x3macropad keyboard using the QMK build environment. It requires the QMK build environment to be properly set up. The command outputs a .hex or .bin file, which is the firmware that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/rarepotato8de/3x3macropad/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake rarepotato8de/3x3macropad:default\n```\n\n----------------------------------------\n\nTITLE: Building TKC Portico75 Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the TKC Portico75 keyboard using the QMK build environment. It assumes that the QMK build environment has been properly set up according to the QMK documentation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/tkc/portico75/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake tkc/portico75:default\n```\n\n----------------------------------------\n\nTITLE: Building Exclusive E8.5 Soldered with QMK\nDESCRIPTION: This command builds the default keymap for the Exclusive E8.5 Soldered keyboard using the QMK firmware. It requires a properly configured build environment as described in the QMK documentation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/exclusive/e85/soldered/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake exclusive/e85/soldered:default\n```\n\n----------------------------------------\n\nTITLE: Building mini_ten_key_plus Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the mini_ten_key_plus keyboard using the QMK build environment.  It assumes the QMK build environment has been set up.  No specific parameters are required.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mini_ten_key_plus/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake mini_ten_key_plus:default\n```\n\n----------------------------------------\n\nTITLE: Building rb18 Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the rb18 numpad using the QMK build system.  It compiles the keyboard layout and keymap specified under `ryanbaekr/rb18` and generates the firmware ready for flashing. This assumes the QMK build environment is already set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ryanbaekr/rb18/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake ryanbaekr/rb18:default\n```\n\n----------------------------------------\n\nTITLE: Building OXALYS80 Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the OXALYS80 keyboard. It requires a correctly set up QMK build environment. The output will be a .hex or .bin file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/nix_studio/oxalys80/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake nix_studio/oxalys80:default\n```\n\n----------------------------------------\n\nTITLE: Building the X-BOWS Nature Keymap (QMK)\nDESCRIPTION: This command compiles the default keymap for the X-BOWS Nature keyboard. It assumes the QMK build environment is already set up. This is a necessary step before flashing the firmware to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/xbows/nature/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake xbows/nature:default\n```\n\n----------------------------------------\n\nTITLE: Building Pearl 40% Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the Pearl 40% keyboard. It requires a correctly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/pearl/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake pearl:default\n```\n\n----------------------------------------\n\nTITLE: Building the handwired_k552 keyboard\nDESCRIPTION: This command builds the default keymap for the handwired K552 Kumara keyboard using the QMK build environment. It assumes the build environment has already been set up according to the QMK documentation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/horrortroll/handwired_k552/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake horrortroll/handwired_k552:default\n```\n\n----------------------------------------\n\nTITLE: Building the ScottoSlant Keyboard\nDESCRIPTION: This command builds the firmware for the ScottoSlant keyboard using the QMK build environment. It specifies the keyboard, keymap (default), and target.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/scottokeebs/scottoslant/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake handwired/scottokeebs/scottoslant:default\n```\n\n----------------------------------------\n\nTITLE: Compiling Helix Pico Firmware\nDESCRIPTION: This snippet demonstrates how to compile the Helix Pico firmware with the default keymap using the `make` command in QMK. The syntax is `<keyboard_name>:<keymap_name>`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/helix/pico/keymaps/default/readme_jp.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\n$ make helix/pico:default\n```\n\n----------------------------------------\n\nTITLE: Building Canary60RGB firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Canary60RGB keyboard using the QMK build environment.  It targets the AVR (ATmega32U4) microcontroller. Requires QMK build environment to be properly set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/canary/canary60rgb/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake canary/canary60rgb/v1:default # AVR (ATmega32U4)\n```\n\n----------------------------------------\n\nTITLE: Building IDOBAO ID80 v1 default keymap\nDESCRIPTION: This command compiles the default keymap for the v1 version of the IDOBAO ID80 keyboard. It disables backlight support. A QMK build environment must be configured before executing this command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/idobao/id80/v2/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake idobao/id80/v2:default BACKLIGHT_ENABLE=no\n```\n\n----------------------------------------\n\nTITLE: Compiling Default Keymap for RK G68 (QMK)\nDESCRIPTION: This command compiles the default keymap for the Royal Kludge RK G68 keyboard using the QMK build system.  It requires a properly set up QMK build environment. The resulting firmware can then be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/rkg68/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake rkg68:default\n```\n\n----------------------------------------\n\nTITLE: Running QMK Lint - Failed Check\nDESCRIPTION: This example demonstrates a failing check from `qmk lint`.  It shows the type of errors that are reported when the tool identifies issues with the keyboard definition, such as missing files.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/hardware_keyboard_guidelines.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ qmk lint -kb clueboard/66/rev3\n☒ Missing keyboards/clueboard/66/rev3/readme.md\n☒ Lint check failed!\n```\n\n----------------------------------------\n\nTITLE: Flashing Waaffle Firmware with Elite-C\nDESCRIPTION: This command builds and flashes the QMK firmware for the Waaffle keyboard using the Elite-C controller. It combines the build and flash steps into a single command to program the microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/delikeeb/waaffle/readme.md#_snippet_3\n\nLANGUAGE: make\nCODE:\n```\nmake delikeeb/waaffle/rev3/elite_c:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building waffling60 Firmware with Make\nDESCRIPTION: This command builds the default firmware for the waffling60 revision C keyboard using the `make` command-line tool within the QMK Firmware environment.  It assumes that the build environment is properly configured. The resulting firmware can then be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/4pplet/waffling60/rev_c/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake 4pplet/waffling60/rev_c:default\n```\n\n----------------------------------------\n\nTITLE: Building Synth Labs Solo Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the Synth Labs Solo macropad using the QMK build environment. It assumes the QMK build environment is already set up. The output is a firmware file that can be flashed to the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/synthlabs/solo/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake synthlabs/solo:default\n```\n\n----------------------------------------\n\nTITLE: Building Aurora Helix Firmware\nDESCRIPTION: This command compiles the firmware for the Aurora Helix keyboard rev1 with the default configuration. It assumes that the QMK build environment is set up correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/splitkb/aurora/helix/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake splitkb/aurora/helix/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Building ROMEO Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the ROMEO keyboard using the QMK build environment. It requires a properly configured QMK build environment and specifies the keyboard and keymap to build.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/coseyfannitutti/romeo/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake coseyfannitutti/romeo:default\n```\n\n----------------------------------------\n\nTITLE: Compiling NoodlePad [Micro] Firmware with QMK\nDESCRIPTION: This command compiles the firmware for the NoodlePad [Micro] keyboard using the QMK command-line interface. It specifies the keyboard and keymap to be used for the compilation process.  It requires QMK to be properly set up and configured.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/themadnoodle/noodlepad_micro/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nqmk compile -kb themadnoodle/noodlepad_micro -km default\n```\n\n----------------------------------------\n\nTITLE: Building Clueboard 2x1800 Firmware\nDESCRIPTION: This command builds the default firmware for the Clueboard 2x1800 2019 PCB. It requires a properly configured QMK build environment.  The output will be the firmware file, which can then be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/clueboard/2x1800/2019/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake clueboard/2x1800/2019:default\n```\n\n----------------------------------------\n\nTITLE: Building Pancake Keyboard Firmware\nDESCRIPTION: This snippet demonstrates how to build the firmware for the Pancake keyboard using the `make` command. It shows examples for both the feather and promicro microcontroller options. The user needs to have the QMK build environment set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/spaceman/pancake/rev1/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake spaceman/pancake/rev1/feather:default\nmake spaceman/pancake/rev1/promicro:default\n```\n\n----------------------------------------\n\nTITLE: Building rainkeeb Firmware\nDESCRIPTION: This command builds the default firmware for the rainkeeb keyboard using the QMK build environment. It compiles the source code into a firmware image that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/rainkeebs/rainkeeb/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake rainkeebs/rainkeeb:default\n```\n\n----------------------------------------\n\nTITLE: Building TNLN95 Default Firmware - Makefile\nDESCRIPTION: This command builds the default firmware for the TNLN95 keyboard. It requires a correctly configured QMK build environment. The compiled firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/pom_keyboards/tnln95/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake pom_keyboards/tnln95:default\n```\n\n----------------------------------------\n\nTITLE: Building AMJ96 Firmware with Make\nDESCRIPTION: This command builds the QMK firmware for the AMJ96 keyboard using the default keymap. It utilizes the `make` command with the specified target `amjkeyboard/amj96:default`. The command should be executed from the QMK firmware root directory after the build environment has been set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/amjkeyboard/amj96/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake amjkeyboard/amj96:default\n```\n\n----------------------------------------\n\nTITLE: Flashing the E6-V2 LE BMC Keyboard Firmware\nDESCRIPTION: This command flashes the built firmware onto the exclusive/e6v2/le_bmc keyboard. It utilizes the QMK make system with the `:flash` target to upload the generated firmware file to the keyboard's microcontroller.  This requires a properly configured QMK build environment and a connected keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/exclusive/e6v2/le_bmc/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake exclusive/e6v2/le_bmc:default:flash\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Current Control in config.h\nDESCRIPTION: This snippet demonstrates how to configure the global current control for the AW20216S driver by defining `AW20216S_GLOBAL_CURRENT_MAX` in the `config.h` file.  This setting adjusts the current sunk by the CSx pins. This value should be between 0 and 255.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/aw20216s.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n#define AW20216S_GLOBAL_CURRENT_MAX 150\n```\n\n----------------------------------------\n\nTITLE: Configure LED Control Register - IS31FL3733 (RGB)\nDESCRIPTION: This function configures the LED control register for a specific LED, enabling or disabling the red, green, and blue channels for an IS31FL3733 RGB driver. The index specifies the LED to configure, and the red, green, and blue parameters enable/disable each channel. `is31fl3733_update_led_control_registers()` must be called afterwards.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/is31fl3733.md#_snippet_9\n\nLANGUAGE: C\nCODE:\n```\nvoid is31fl3733_set_led_control_register(uint8_t index, bool red, bool green, bool blue)\n```\n\n----------------------------------------\n\nTITLE: Symbol and Media Layer Keymap\nDESCRIPTION: This code defines the symbol and media layer accessed by holding the SYM key. It maps symbols, media controls, and modifier keys to specific positions on the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/hillside/48/keymaps/default/readme.md#_snippet_3\n\nLANGUAGE: None\nCODE:\n```\n| HOME  |  !  |  @  |  #  |  $  |  %  |---------------------------|  ^  |  &  |  *  |  (  |  )  | DEL   |\n| END   | GUI | ALT |CTRL |SHIFT| INS |---------------------------|  [  |  ]  |  -  |  =  |  \\  | ENTER |\n| SHIFT |     |VOL- |MUTE |VOL+ |PLAY |OSM ALT |------------|MENU |  {  |  }  |  _  |  +  |  |  | SHIFT |\n--------------|CTRL |-----| GUI | ALT | *** |SHIFT|---| Adj |SPACE| ALT | GUI |-----|CTRL |--------------\n```\n\n----------------------------------------\n\nTITLE: Writing Pixel to Display\nDESCRIPTION: Sets a specific pixel at coordinates (x, y) on or off. Coordinates start at the top-left corner, with positive x going right and positive y going down. The `on` parameter (bool) determines whether the pixel is turned on (true) or off (false).\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/st7565.md#_snippet_20\n\nLANGUAGE: C\nCODE:\n```\n// Sets a specific pixel on or off\n// Coordinates start at top-left and go right and down for positive x and y\nvoid st7565_write_pixel(uint8_t x, uint8_t y, bool on);\n```\n\n----------------------------------------\n\nTITLE: Building the RPK-001 Keyboard Firmware\nDESCRIPTION: This command builds the default keymap for the RPK-001 keyboard using the QMK build environment. It compiles the firmware, creating a .hex file ready for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/phentech/rpk_001/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake phentech/rpk_001:default\n```\n\n----------------------------------------\n\nTITLE: Building the p01_ultra keyboard (QMK)\nDESCRIPTION: This command builds the firmware for the p01_ultra keyboard with the default keymap. It assumes that the QMK build environment is properly set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wavtype/p01_ultra/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake wavtype/p01_ultra:default\n```\n\n----------------------------------------\n\nTITLE: Building Miryoku Keymap - QMK Firmware\nDESCRIPTION: This snippet illustrates how to build the QMK firmware for the ChocV keyboard using the Miryoku keymap layout. This provides a full-featured keymap experience without needing additional configuration.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/chocv/keymaps/default/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake chocv:manna-habour_miryoku\n```\n\n----------------------------------------\n\nTITLE: Compiling Skeletyl Firmware with v2 (STeMCell) and via keymap\nDESCRIPTION: This command compiles the QMK firmware for the Skeletyl keyboard with v2 shield (STeMCell) and via keymap. It uses the `qmk compile` command with specific parameters for the keyboard, version, and keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/bastardkb/skeletyl/readme.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nqmk compile -kb bastardkb/skeletyl/v2/stemcell -km via\n```\n\n----------------------------------------\n\nTITLE: Obliterated75 Key Matrix Diagram\nDESCRIPTION: This diagram visually represents the key matrix layout of the CannonKeys Obliterated75 keyboard. Each key is labeled with its corresponding matrix coordinate (row and column). The diagram shows the physical arrangement of the keys and their connections within the matrix.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cannonkeys/obliterated75/matrix_diagram.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n┌───┐ ┌───┬───┬───┬───┐ ┌───┬───┬───┬───┐ ┌───┬───┬───┬───┐ ┌───┐\n│00 │ │01 │02 │03 │04 │ │06 │07 │08 │09 │ │0A │0B │0C │0D │ │0F │\n└───┘ └───┴───┴───┴───┘ └───┴───┴───┴───┘ └───┴───┴───┴───┘ └───┘\n┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┐    ┌───────┐\n│10 │11 │12 │13 │14 │15 │16 │17 │18 │19 │1A │1B │1C │1D │1E │1F │    │1D     │ 2u Backspace\n├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴───┼───┤    └─┬─────┤\n│20   │21 │22 │23 │24 │25 │26 │27 │28 │29 │2A │2B │2C │2D   │2F │      │     │\n├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴─────┼───┤   ┌──┴┐3D  │ ISO Enter\n│30    │31 │32 │33 │34 │35 │36 │37 │38 │39 │3A │3B │3D      │3F │   │3C │    │\n├────┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴────┬───┼───┤   └───┴────┘\n│40  │41 │42 │43 │44 │45 │46 │47 │48 │49 │4A │4B │4C    │4D │4F │\n├────┼───┴┬──┴─┬─┴───┴───┴───┴───┴───┴──┬┴───┼───┴┬─┬───┼───┼───┤\n│50  │51  │52  │56                      │5A  │5B  │ │5C │5D │5F │\n└────┴────┴────┴────────────────────────┴────┴────┘ └───┴───┴───┘\n┌────────┐\n│40      │ 2.25u LShift\n└────────┘\n┌─────┬───┬─────┬───────────────────────────┬─────┐\n│50   │51 │52   │56                         │5B   │ Blocker Tsangan\n└─────┴───┴─────┴───────────────────────────┴─────┘\n```\n\n----------------------------------------\n\nTITLE: Flashing Denial75 Firmware (Makefile)\nDESCRIPTION: This command flashes the compiled firmware to the Denial75 keyboard. It requires the QMK build environment to be set up and uses the dfu-programmer or similar tool to upload the firmware to the ATmega32u4 microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/jolofsor/denial75/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake jolofsor/denial75:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing TORN Keyboard Firmware\nDESCRIPTION: This command flashes the compiled firmware onto the TORN keyboard. It requires the QMK build environment and appropriate flashing tools to be set up.  The target is the `default` keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/torn/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake torn:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Epoch 80 Keyboard Firmware\nDESCRIPTION: This command flashes the default keymap onto the Epoch 80 keyboard using the QMK firmware. It requires the QMK build environment to be set up and a compatible flashing tool. The command attempts to automatically detect the appropriate flashing method.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kbdfans/epoch80/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake kbdfans/epoch80:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building WTF60 Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the keebio/wtf60 keyboard. It requires QMK build environment to be set up correctly. The resulting firmware can then be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keebio/wtf60/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake keebio/wtf60:default\n```\n\n----------------------------------------\n\nTITLE: Building Manibus Keyboard Firmware\nDESCRIPTION: This command builds the default keymap for the Manibus keyboard. It requires a properly configured QMK build environment. This command compiles the firmware for the specified keyboard and keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/blank_tehnologii/manibus/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake blank_tehnologii/manibus:default\n```\n\n----------------------------------------\n\nTITLE: Building Plain60 Firmware with Make\nDESCRIPTION: This command builds the default firmware for the Plain60 keyboard using the QMK build environment. It assumes that the QMK build environment has been properly set up according to the QMK documentation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/evyd13/plain60/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake plain60:default\n```\n\n----------------------------------------\n\nTITLE: Building Ziggurat Firmware (QMK)\nDESCRIPTION: This command builds the default keymap for the Ziggurat keyboard using the QMK firmware. It assumes that the QMK build environment has been set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wolf/ziggurat/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake wolf/ziggurat:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Slamz Keyboard Firmware (QMK)\nDESCRIPTION: This command builds and flashes the default firmware for the Slamz keyboard using the QMK build environment. It requires the build environment to be set up and a compatible flashing tool to be configured. Double clicking the reset button on the board is required to enter the bootloader.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ocean/slamz/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake ocean/slamz:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing ErgoDox EZ Glow Firmware with Make\nDESCRIPTION: This command builds and flashes the default firmware to the ErgoDox EZ Glow keyboard.  The QMK build environment must be correctly configured. This assumes the `default` keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ergodox_ez/readme.md#_snippet_2\n\nLANGUAGE: Makefile\nCODE:\n```\nmake ergodox_ez/glow:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building oem_ansi_fullsize Keyboard Firmware (QMK)\nDESCRIPTION: This command builds the default keymap for the oem_ansi_fullsize keyboard layout in the QMK Firmware environment. It compiles the source code and generates the firmware binary ready for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/oem_ansi_fullsize/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake handwired/oem_ansi_fullsize:default\n```\n\n----------------------------------------\n\nTITLE: Flashing smAllice Firmware\nDESCRIPTION: This command is used to flash the compiled firmware onto the smAllice keyboard.  It requires the keyboard to be in DFU mode, typically entered by pressing the reset button.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keyhive/smallice/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake smallice:<keymap>:flash\n```\n\n----------------------------------------\n\nTITLE: Building Exclusive E8.5 Hotswap Firmware with Make\nDESCRIPTION: This command builds the default firmware for the Exclusive E8.5 hotswap keyboard using the QMK build environment. It requires the QMK build environment to be set up. The output is the compiled firmware ready to be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/exclusive/e85/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake exclusive/e85/hotswap:default\n```\n\n----------------------------------------\n\nTITLE: Flashing MNK60_STM32 Firmware\nDESCRIPTION: This command flashes the built firmware to the MNK60_STM32 keyboard. It utilizes the QMK make system along with the appropriate flashing tools. It requires a properly configured build environment and a connected keyboard in flashing mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kopibeng/mnk60_stm32/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake kopibeng/mnk60_stm32:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Mona Keyboard Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the Mona keyboard using the QMK build environment. It requires QMK to be set up and configured correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/rmi_kb/mona/v1_1/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake rmi_kb/mona:default\n```\n\n----------------------------------------\n\nTITLE: Creating a ST7735 Device Instance (C)\nDESCRIPTION: This code snippet shows how to create an instance of the ST7735 display device in firmware using the `qp_st7735_make_spi_device` function. The function takes parameters for panel dimensions, SPI pins (chip select, data/command, reset), SPI divisor, and SPI mode. The returned device handle is required for subsequent drawing operations. Requires the `st7735_spi` driver to be enabled.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/quantum_painter.md#_snippet_21\n\nLANGUAGE: c\nCODE:\n```\npainter_device_t qp_st7735_make_spi_device(uint16_t panel_width, uint16_t panel_height, pin_t chip_select_pin, pin_t dc_pin, pin_t reset_pin, uint16_t spi_divisor, int spi_mode);\n```\n\n----------------------------------------\n\nTITLE: Building Classy TKL Firmware with Make\nDESCRIPTION: This command builds the default firmware for the Classy TKL keyboard using the QMK make system. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/masterworks/classy_tkl/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake masterworks/classy_tkl:default\n```\n\n----------------------------------------\n\nTITLE: Building Zoom65 Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Meletrix Zoom65 keyboard using the QMK build environment. It compiles the keymap and other configurations into a firmware image that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/meletrix/zoom65/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake meletrix/zoom65:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Lulu Keyboard Firmware (RP2040/AVR) - Makefile\nDESCRIPTION: This command flashes the built firmware to the Lulu keyboard using either the RP2040 or AVR microcontroller. Ensure the keyboard is in bootloader mode, accessible by holding the upper outer key while plugging in the USB cable or pressing the reset switch.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/boardsource/lulu/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake boardsource/lulu/rp2040:default:flash\n```\n\nLANGUAGE: Makefile\nCODE:\n```\nmake boardsource/lulu/avr:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Voyager Firmware\nDESCRIPTION: This command builds the default firmware for the Voyager keyboard using the QMK build environment. It compiles the source code and generates the firmware file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/zsa/voyager/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake zsa/voyager:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Acperience12 Firmware with QMK\nDESCRIPTION: This command builds and flashes the default firmware onto the Acperience12 macropad using the QMK build environment. It combines the compilation and flashing steps into a single command, assuming the device is in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/yynmt/acperience12/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake yynmt/acperience12:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for Breeze Keyboard (QMK)\nDESCRIPTION: This command builds the default firmware for the Breeze Rev0 keyboard using the QMK build environment. It requires the QMK build environment to be set up correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/afternoonlabs/breeze/rev0/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake afternoonlabs/breeze/rev0:default\n```\n\n----------------------------------------\n\nTITLE: Building KiwiKeebs MacroBoard V2.0 Firmware\nDESCRIPTION: This command builds the default firmware for the KiwiKeebs MacroBoard V2.0 using the QMK build environment.  It assumes the QMK build environment is already set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kiwikeebs/macro_v2/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake kiwikeebs/macro_v2:default\n```\n\n----------------------------------------\n\nTITLE: Configuring Maximum GC9A01 Devices (C)\nDESCRIPTION: This snippet shows how to configure the maximum number of GC9A01 displays that can be used by setting the `GC9A01_NUM_DEVICES` macro in `config.h`. The default value is 1. This is a preprocessor definition. Requires Quantum Painter to be enabled.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/quantum_painter.md#_snippet_6\n\nLANGUAGE: c\nCODE:\n```\n// 3 displays:\n#define GC9A01_NUM_DEVICES 3\n```\n\n----------------------------------------\n\nTITLE: Building REVIUNG33 Default Configuration with QMK\nDESCRIPTION: This snippet shows how to build the default configuration for the REVIUNG33 keyboard using the QMK build environment. It assumes that the QMK build environment has already been set up according to the QMK documentation. It will generate a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/reviung/reviung33/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake reviung33:default\n```\n\n----------------------------------------\n\nTITLE: Building GK6 Firmware with QMK\nDESCRIPTION: This snippet shows how to build the default firmware for the Gizmo Engineering GK6 keyboard using the QMK build environment. It requires a properly configured QMK environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/gizmo_engineering/gk6/readme.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmake gizmo_engineering/gk6:default\n```\n\n----------------------------------------\n\nTITLE: Building Charon Firmware (QMK)\nDESCRIPTION: This command builds the default keymap for the Charon keyboard using the QMK firmware. It assumes that the QMK build environment is already set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/charue/charon/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake charue/charon:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Lunakey Macro Firmware\nDESCRIPTION: This command flashes the compiled firmware to the Lunakey Macro keyboard using the QMK build environment. It requires the keyboard to be connected and in a state ready to accept the firmware. The flashing process overwrites the existing firmware on the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/yoichiro/lunakey_macro/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake lunakey_macro:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building the Keyboard Firmware\nDESCRIPTION: This command builds the firmware for the phdesign/ph60/multi keyboard with the default keymap. It uses the QMK build system to compile the firmware and generate a .hex file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/phdesign/ph60/multi/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake phdesign/ph60/multi:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Nack Keyboard Firmware (QMK)\nDESCRIPTION: Flashes the built firmware onto the Nack keyboard using the QMK build system. This command requires the keyboard to be in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/nack/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake nack:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Fluorite Keyboard Firmware\nDESCRIPTION: This command builds the default keymap for the Fluorite keyboard using the QMK firmware. It assumes that the QMK build environment has been set up correctly, as detailed in the QMK documentation. The command compiles the keymap and generates the firmware ready to be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/fluorite/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake fluorite:default\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for keyten Diablo - QMK\nDESCRIPTION: This command builds the default firmware for the keyten Diablo keyboard. It uses the QMK build system to compile the keymap and generate the firmware file. This requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keyten/diablo/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake keyten/diablo:default\n```\n\n----------------------------------------\n\nTITLE: Building blu vimclutch with default keymap - QMK\nDESCRIPTION: This command builds the QMK firmware for the blu/vimclutch keyboard using the default keymap. It compiles the keyboard's firmware and prepares it for flashing onto the device. Ensure you have a properly configured QMK build environment before executing this command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/blu/vimclutch/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake blu/vimclutch:default\n```\n\n----------------------------------------\n\nTITLE: Flashing rb69 Keyboard Firmware with QMK\nDESCRIPTION: This command flashes the built firmware onto the rb69 keyboard using the QMK build environment. It requires the keyboard to be in bootloader mode, typically achieved by holding the reset button during plug-in.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ryanbaekr/rb69/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake ryanbaekr/rb69:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Clueboard 60% Firmware with Make\nDESCRIPTION: This command builds the default firmware for the Clueboard 60% keyboard using the QMK build environment. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/clueboard/60/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake clueboard/60:default\n```\n\n----------------------------------------\n\nTITLE: Building Pisces Firmware - Makefile\nDESCRIPTION: This command builds the default firmware for the Pisces keyboard using the QMK build environment.  It compiles the keymap and other necessary files to create the firmware image.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/pisces/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake pisces:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Twig50 Keyboard Firmware (QMK)\nDESCRIPTION: This command flashes the default keymap for the Twig50 keyboard onto the connected device using the QMK build environment. It requires a properly configured QMK build environment and a connection to the keyboard's bootloader.  The `default` parameter specifies the keymap to build and flash.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/twig/twig50/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake handwired/twig/twig50:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building The Uni Keyboard Firmware\nDESCRIPTION: This command builds the default keymap for The Uni keyboard using the QMK firmware. It specifies the target keyboard (stenokeyboards/the_uni), the microcontroller (pro_micro), and the keymap (default). This requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/stenokeyboards/the_uni/pro_micro/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake stenokeyboards/the_uni/pro_micro:default\n```\n\n----------------------------------------\n\nTITLE: Building Rookey Firmware\nDESCRIPTION: This command compiles the QMK firmware for the Rookey keyboard with the default keymap. It requires a properly set up QMK build environment. It produces a .hex file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/takashicompany/rookey/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake takashicompany/rookey:default\n```\n\n----------------------------------------\n\nTITLE: Flashing the Dactyl Lightcycle Keyboard (make)\nDESCRIPTION: This command flashes the compiled firmware onto the Pro Micro controllers of the Dactyl Lightcycle keyboard. It depends on the `make` command and a correctly configured QMK build environment. It requires the necessary tools for flashing, such as dfu-util or avrdude, to be installed and accessible.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/dactyl_lightcycle/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake handwired/dactyl_lightcycle:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for ATSET AT3 Keyboard (Makefile)\nDESCRIPTION: This command builds the default firmware for the ATSET AT3 keyboard using the QMK build environment. It compiles the source code and generates the firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/atset/at3/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake atset/at3:default\n```\n\n----------------------------------------\n\nTITLE: Building Launchpad Firmware with RGB Underglow\nDESCRIPTION: This command compiles the firmware for the Launchpad keyboard rev1 with RGB underglow enabled. It requires a properly configured QMK build environment and the underglow add-on kit.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/maple_computing/launchpad/keymaps/default_rgb/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake launchpad/rev1:default_rgb\n```\n\n----------------------------------------\n\nTITLE: Building the pi60 keyboard\nDESCRIPTION: This command builds the firmware for the pi60 keyboard with the default configuration. It requires a properly set up QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/1upkeyboards/pi60/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake 1upkeyboards/pi60:default\n```\n\n----------------------------------------\n\nTITLE: Flashing the default keymap\nDESCRIPTION: This command builds and flashes the default keymap for the 0xC.pad macropad using the QMK build environment. It requires the QMK build environment to be set up correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/s_ol/0xc_pad/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake s_ol/0xc_pad:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building WT65-G3 Firmware\nDESCRIPTION: This command builds the default firmware for the wilba_tech WT65-G3 keyboard. It compiles the QMK firmware based on the keyboard's keymap and configuration.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wilba_tech/wt65_g3/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake wilba_tech/wt65_g3:default\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for Unicomp Keyboard\nDESCRIPTION: This command builds the default firmware for the unicomp/classic_ultracl_post_2013/overnumpad_1xb keyboard. It requires a properly set up QMK build environment and will generate a .hex or .bin file suitable for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/unicomp/classic_ultracl_post_2013/overnumpad_1xb/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake unicomp/classic_ultracl_post_2013/overnumpad_1xb:default\n```\n\n----------------------------------------\n\nTITLE: Building B.mini Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the B.mini keyboard using the QMK build environment. It requires the QMK build environment to be set up correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/winkeyless/bmini/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake winkeyless/bmini:default\n```\n\n----------------------------------------\n\nTITLE: Building Rena Keyboard Firmware\nDESCRIPTION: This command builds the QMK firmware for the Rena keyboard with the default keymap. It utilizes the 'make' command within the QMK build environment to compile the firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/meetlab/rena/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake meetlab/rena:default\n```\n\n----------------------------------------\n\nTITLE: Flashing THE30 Keyboard Firmware with QMK\nDESCRIPTION: This command flashes the default firmware onto the THE30 keyboard using the QMK toolchain. It assumes the keyboard is connected and in a flashable state. Requires the QMK build environment to be configured and the keyboard to be in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/lazydesigners/the30/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake lazydesigners/the30:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing EVO70 Firmware\nDESCRIPTION: This command flashes the default firmware onto the EVO70 keyboard using the QMK build environment and the qmk-dfu bootloader. It requires the keyboard to be in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/custommk/evo70/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake custommk/evo70:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Mona Keyboard Firmware (QMK)\nDESCRIPTION: This command flashes the built firmware onto the Mona keyboard using the QMK build environment. The keyboard needs to be in bootloader mode, usually accessed by pressing the reset button.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/rmi_kb/mona/v1_1/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake rmi_kb/mona:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing ScottoCMD Firmware\nDESCRIPTION: This command flashes the compiled firmware to the ScottoCMD keyboard. It utilizes the QMK build environment and appropriate flashing tools to upload the firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/scottokeebs/scottocmd/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/scottokeebs/scottocmd:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Compacx Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Compacx keyboard using the QMK build environment. It requires the QMK build environment to be set up correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/takashicompany/compacx/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake takashicompany/compacx:default\n```\n\n----------------------------------------\n\nTITLE: Building QWERTYYdox Firmware\nDESCRIPTION: This command builds the default firmware for the QWERTYYdox keyboard's rev1 using the QMK build environment. It compiles the keymap and necessary drivers into a firmware image.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/qwertyydox/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake qwertyydox/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Dilemma Keyboard Firmware with QMK\nDESCRIPTION: These `make` commands flash the firmware to the Dilemma keyboard with specific layouts using the QMK Firmware build environment.  The first command flashes the 3x5_3 layout with the default keymap. The second command flashes the 4x6_4 layout with the default keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/bastardkb/dilemma/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake bastardkb/dilemma/3x5_3:default:flash\n```\n\nLANGUAGE: Makefile\nCODE:\n```\nmake bastardkb/dilemma/4x6_4:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for Bakeneko 65 V3 with QMK\nDESCRIPTION: This command builds the default firmware for the Bakeneko 65 V3 keyboard (revision 3) using the QMK build environment. It assumes the QMK build environment is already set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kkatano/bakeneko65/rev3/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake kkatano/bakeneko65/rev3:default\n```\n\n----------------------------------------\n\nTITLE: Flashing the NortonTechPad Firmware\nDESCRIPTION: This command flashes the compiled QMK firmware to the NortonTechPad keyboard. It extends the build command by adding the `:flash` target, which initiates the flashing process. This requires a correctly configured QMK build environment and a connected keyboard in flashing mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/nortontechpad/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake handwired/nortontechpad:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing QMK Firmware to Voice65 Hotswap\nDESCRIPTION: This command flashes the compiled QMK firmware to the Voice65 hotswap keyboard. It builds the firmware if it hasn't been built already and then uses the appropriate flashing tool (e.g., dfu-util) to upload the firmware to the keyboard's microcontroller. Requires the keyboard to be in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/owlab/voice65/hotswap/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake owlab/voice65/hotswap:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing BIOI F60 Firmware\nDESCRIPTION: This command flashes the default firmware onto the BIOI F60 keyboard. It depends on the QMK build environment and a connected keyboard in flashing mode. The command combines the build and flash steps for convenience.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/bioi/f60/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake bioi/f60:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building ScottoStarter Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the ScottoStarter keyboard. It compiles the keyboard layout and associated code using the QMK build environment.  Ensure the QMK build environment is properly set up before executing this command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/scottokeebs/scottostarter/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake handwired/scottokeebs/scottostarter:default\n```\n\n----------------------------------------\n\nTITLE: Flashing REVIUNG53 Firmware (QMK)\nDESCRIPTION: This command flashes the built firmware onto the REVIUNG53 keyboard. It depends on the QMK build environment and a compatible flashing tool (e.g., dfu-util).  The command assumes the keyboard is connected in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/reviung/reviung53/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake reviung53:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Keyboard Firmware with QMK\nDESCRIPTION: This command flashes the compiled firmware to the NoodlePad v.2 keyboard using QMK. It specifies the keyboard and keymap. The keyboard should be in bootloader mode before executing the flash command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/themadnoodle/noodlepad/v2/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nqmk flash -kb themadnoodle/noodlepad/v2 -km default\n```\n\n----------------------------------------\n\nTITLE: Flashing L+M 60N Firmware (QMK)\nDESCRIPTION: This command builds and flashes the default firmware for the L+M 60N keyboard. It requires a connected keyboard in bootloader mode. The command combines the build and flash steps into a single operation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/lm_keyboard/lm60n/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake lm_keyboard/lm60n:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Mino Firmware\nDESCRIPTION: This command builds the firmware for the Mino keyboard with the hotswap layout and default keymap. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/shandoncodes/mino/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake shandoncodes/mino/hotswap:default\n```\n\n----------------------------------------\n\nTITLE: Building 3dortho14u with Make\nDESCRIPTION: This command compiles the default keymap for the 3dortho14u/rev1 keyboard. It uses the QMK make system to generate the firmware. The resulting firmware can then be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/3dortho14u/rev1/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake 3dortho14u/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Building Keyboard Firmware\nDESCRIPTION: This command builds the firmware for the Satisfaction75 keyboard with the rev1 PCB and the default keymap.  It utilizes the QMK make system.  The 'make' command invokes the build process.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cannonkeys/satisfaction75/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake cannonkeys/satisfaction75/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Building Noxary x268 Firmware with QMK\nDESCRIPTION: This code snippet shows the command to build the default firmware for the Noxary x268 keyboard using the QMK build environment. It requires the QMK build environment to be set up and configured properly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/noxary/x268/readme.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmake noxary/x268:default\n```\n\n----------------------------------------\n\nTITLE: Compiling Firmware for Quarkeys Z67 (Solder Version)\nDESCRIPTION: This command compiles the QMK firmware for the Quarkeys Z67 keyboard, specifically targeting the solder version with the default keymap.  It assumes that the QMK build environment is already set up.  No specific input files are required, and the output is a compiled firmware binary.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/quarkeys/z67/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake quarkeys/z67/solder:default\n```\n\n----------------------------------------\n\nTITLE: Building Free Willy Firmware\nDESCRIPTION: This command builds the default firmware for the Free Willy keyboard. It requires a properly set up QMK build environment.  The output is the compiled firmware ready to be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/free_willy/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake free_willy:default\n```\n\n----------------------------------------\n\nTITLE: Building WOO-DY Keyboard Firmware with QMK\nDESCRIPTION: This snippet shows how to build the default firmware for the WOO-DY keyboard using the `make` command in a QMK build environment. It assumes that the QMK build environment has already been set up correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/xbows/woody/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake xbows/woody:default\n```\n\n----------------------------------------\n\nTITLE: Building Relic Keyboard Firmware - QMK\nDESCRIPTION: This snippet shows how to compile the default keymap for the Relic keyboard using the QMK build system. It requires the QMK build environment to be set up. The output will be a firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/projectcain/relic/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake projectcain/relic:default\n```\n\n----------------------------------------\n\nTITLE: Flashing egg58 Firmware\nDESCRIPTION: This command flashes the default firmware to the egg58 keyboard. It requires the QMK build environment and a connected keyboard in bootloader mode. The command combines the build and flash steps into one.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/eggsworks/egg58/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake eggsworks/egg58:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building JJ50 rev1 Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the JJ50 rev1 keyboard using the QMK build environment. It compiles the necessary source code and generates a firmware file ready for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kprepublic/jj50/rev1/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake kprepublic/jj50/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Testing Georgi Firmware Build\nDESCRIPTION: This command builds the Georgi keyboard firmware using the default keymap without flashing. This is useful for testing the build process and identifying any errors before flashing the firmware to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/gboards/georgi/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake gboards/georgi:default\n```\n\n----------------------------------------\n\nTITLE: Building Big Series Keyboard Firmware (QMK)\nDESCRIPTION: This snippet demonstrates how to build the firmware for a 1-key Big Series keyboard using the QMK build system. It uses the `make` command with the specified keyboard and keymap to compile the firmware. Ensure the QMK build environment is set up correctly before running this command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/woodkeys/bigseries/1key/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake woodkeys/bigseries/1key:default\n```\n\n----------------------------------------\n\nTITLE: Compiling Skeletyl Firmware with v2 (Splinky v2) and via keymap\nDESCRIPTION: This command compiles the QMK firmware for the Skeletyl keyboard with v2 shield (Splinky v2) and via keymap. It uses the `qmk compile` command with specific parameters for the keyboard, version, and keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/bastardkb/skeletyl/readme.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nqmk compile -kb bastardkb/skeletyl/v2/splinky_2 -km via\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for WASD Code\nDESCRIPTION: This command is used to build the default firmware for the WASD Code keyboard using the QMK build environment. Replace 'evyd13/wasdat_code' with the appropriate keyboard/keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/evyd13/wasdat_code/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake evyd13/wasdat_code:default\n```\n\n----------------------------------------\n\nTITLE: Building the Element G67 Hotswap Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the Element G67 Hotswap keyboard using the QMK build environment. It requires the QMK build environment to be set up beforehand.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/neokeys/g67/element_hs/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake neokeys/g67/element_hs:default\n```\n\n----------------------------------------\n\nTITLE: Building KB16-01 Firmware using QMK CLI\nDESCRIPTION: This command builds the default firmware for the KB16-01 macropad using the `qmk compile` command. It requires the QMK CLI to be installed and configured. The output is a .hex file that can be flashed to the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/doio/kb16/rev1/readme.md#_snippet_1\n\nLANGUAGE: QMK CLI\nCODE:\n```\n`qmk compile -kb doio/kb16/rev1 -km default`\n```\n\n----------------------------------------\n\nTITLE: Building Tennie Firmware\nDESCRIPTION: This snippet provides the command to build the firmware for the Tennie macropad with the default keymap. It requires a properly set up QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/tennie/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake handwired/tennie:default\n```\n\n----------------------------------------\n\nTITLE: Building handwired/ortho5x13 Keyboard with QMK\nDESCRIPTION: This command builds the default keymap for the handwired/ortho5x13 keyboard. It requires a properly configured QMK build environment. The resulting firmware can then be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/ortho5x13/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake handwired/ortho5x13:default\n```\n\n----------------------------------------\n\nTITLE: Building wilba_tech WT8-A Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the wilba_tech WT8-A macropad using the QMK build environment. It requires the QMK build environment to be set up correctly. The command compiles the firmware and generates a .hex file that can be flashed onto the macropad.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wilba_tech/wt8_a/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake wilba_tech/wt8_a:default\n```\n\n----------------------------------------\n\nTITLE: Building Flatbread60 Firmware with Make\nDESCRIPTION: This command compiles the QMK Firmware for the Flatbread60 keyboard with the default keymap. It uses the `make` command and specifies the keyboard and keymap. The build environment must be set up beforehand as described in the QMK documentation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/delikeeb/flatbread60/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake delikeeb/flatbread60:default\n```\n\n----------------------------------------\n\nTITLE: Building deltapad Firmware with Make\nDESCRIPTION: This command builds the default keymap for the deltapad keyboard firmware using the make command. It assumes that the QMK build environment has been properly set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/deltapad/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake deltapad:default\n```\n\n----------------------------------------\n\nTITLE: Building GPAD8-2R Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the GPAD8-2R keyboard using the QMK build environment. It assumes that the QMK build environment has been properly set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/gkeyboard/gpad8_2r/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake gkeyboard/gpad8_2r:default\n```\n\n----------------------------------------\n\nTITLE: Atomic Block Usage in QMK (C)\nDESCRIPTION: This code snippet demonstrates the usage of the `ATOMIC_BLOCK_FORCEON` macro in QMK to ensure atomic operations when working with GPIOs. It prevents interruptions during critical sections of code by disabling interrupts before execution and re-enabling them afterward.  It relies on the avr-libc library.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/gpio.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nvoid some_function(void) {\n     // some process\n     ATOMIC_BLOCK_FORCEON {\n        // Atomic Processing\n     }\n     // some process\n}\n```\n\n----------------------------------------\n\nTITLE: Building Cluecard Firmware using Make\nDESCRIPTION: This command builds the default firmware for the Clueboard Cluecard using the QMK build environment. It assumes that the QMK build environment is already set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/clueboard/card/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake clueboard/card:default\n```\n\n----------------------------------------\n\nTITLE: Flashing the Blue Team Pad firmware\nDESCRIPTION: This command flashes the built firmware to the Blue Team Pad.  It relies on the QMK build environment and assumes the necessary tools for flashing are installed and configured correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/fearherbs1/blue_team_pad/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake fearherbs1/blue_team_pad:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing 3W6HS Keyboard Firmware\nDESCRIPTION: This command flashes the compiled firmware onto the 3W6HS keyboard using the QMK build environment. It requires the keyboard to be in a flashable state (usually bootloader mode).  The command combines the build and flash steps into one, streamlining the update process.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/beekeeb/3w6hs/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake beekeeb/3w6hs:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Default Keymap to Monsgeek M1 in QMK\nDESCRIPTION: This command builds and flashes the default keymap to the Monsgeek M1 keyboard. It assumes a correctly configured QMK build environment and a connected keyboard. The keyboard needs to be in a flashable state.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/monsgeek/m1/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake monsgeek/m1:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Class60 Firmware (Make Command)\nDESCRIPTION: This command compiles the QMK firmware for the Class60 keyboard with the soldered PCB layout and the default keymap. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mmkeyboard/class60/soldered/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake mmkeyboard/class60/soldered:default\n```\n\n----------------------------------------\n\nTITLE: Building Haven80 Hotswap Firmware\nDESCRIPTION: This command builds the default firmware for the Haven80 hotswap keyboard. It uses the QMK make system to compile the firmware and create a .hex file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ah/haven80/hotswap/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake ah/haven80/hotswap:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Kudox rev3 Firmware (QMK)\nDESCRIPTION: This command builds and flashes the default keymap for the Kudox keyboard rev3. It assumes that the QMK build environment is properly set up and the flashing tool is configured.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kumaokobo/kudox/readme.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nmake kumaokobo/kudox/rev3:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Fuyu HS Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Fuyu HS keyboard using the QMK build environment. It compiles the keymap and firmware into a hex file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/zykrah/fuyu_hs/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake zykrah/fuyu_hs:default\n```\n\n----------------------------------------\n\nTITLE: Building Zeal65 Keyboard Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Zeal65 keyboard using the QMK build environment. It assumes that the QMK build environment has already been set up according to the QMK documentation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wilba_tech/zeal65/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake wilba_tech/zeal65:default\n```\n\n----------------------------------------\n\nTITLE: Building 1up60hte Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the 1up60hte keyboard. It uses the `make` command with the keyboard's identifier (`1upkeyboards/1up60hte`) and the default keymap. The QMK build environment must be set up before running this command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/1upkeyboards/1up60hte/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake 1upkeyboards/1up60hte:default\n```\n\n----------------------------------------\n\nTITLE: Building Meow65 Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the Meow65 keyboard using the QMK build environment. It assumes that the QMK build environment has already been set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/eason/meow65/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake eason/meow65:default\n```\n\n----------------------------------------\n\nTITLE: Building TKC M0LLY Keyboard Firmware\nDESCRIPTION: This command builds the default keymap for the TKC M0LLY keyboard. It assumes that the QMK build environment is already set up and configured correctly.  The output will be a firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/tkc/m0lly/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake tkc/m0lly:default\n```\n\n----------------------------------------\n\nTITLE: Building Booster Firmware with Make\nDESCRIPTION: This code snippet shows how to build the default firmware for the Booster number pad using the `make` command. It assumes that the QMK build environment is already set up. This command is the starting point for compiling the firmware for the specified keyboard and keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/percent/booster/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake percent/booster:default\n```\n\n----------------------------------------\n\nTITLE: Building DOIO KB3x Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the DOIO KB3x keyboard using QMK. It assumes that the QMK build environment is properly set up. It generates a .hex or .bin file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/doio/kb3x/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake doio/kb3x:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Piggy60 Firmware - Make Flash Command\nDESCRIPTION: This command flashes the compiled QMK firmware to the Piggy60 keyboard. It targets either the rev1 or rev2 PCB. It assumes the keyboard is in bootloader mode. Requires the QMK build environment to be properly configured.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/jacky_studio/piggy60/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake jacky_studio/piggy60/rev1:default:flash\nmake jacky_studio/piggy60/rev2:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing QMK Firmware to h65 keyboard\nDESCRIPTION: This command builds and flashes the QMK Firmware for the hineybush/h65 keyboard with the default keymap. It requires the QMK build environment and a connected keyboard in bootloader mode. The command will compile the firmware and then use the appropriate flashing tool to upload it to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/hineybush/h65_hotswap/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake hineybush/h65:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing wings42 firmware\nDESCRIPTION: This command builds and flashes the default firmware for the wings42 keyboard using the QMK build environment. It compiles the firmware and then programs it onto the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/dailycraft/wings42/rev1_extkeys/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake dailycraft/wings42/rev1_extkeys:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing RS40 Firmware (QMK)\nDESCRIPTION: This command flashes the built firmware to the RS40 keyboard. It assumes the QMK build environment is configured and the firmware has been built. The command uses the `flash` target to program the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kj_modify/rs40/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake kj_modify/rs40:default:flash\n```\n\n----------------------------------------\n\nTITLE: Making Keyboard Firmware (QMK)\nDESCRIPTION: This command builds the QMK firmware for the Parallel 65% keyboard with a soldered layout using the default keymap. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/parallel/parallel_65/soldered/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake parallel/parallel_65/soldered:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Z60 Solder Keymap (QMK)\nDESCRIPTION: This command flashes the compiled firmware to the Quarkeys Z60 solder keyboard.  It depends on the QMK build environment being properly configured and the keyboard being in a state ready to receive the flash.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/quarkeys/z60/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake quarkeys/z60/solder:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware to IDOBAO ID87 v2\nDESCRIPTION: This command compiles and flashes the default firmware for the IDOBAO ID87 v2 keyboard. It uses the QMK build environment and requires that the board is in bootloader mode. The command attempts to automatically flash the compiled firmware to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/idobao/id87/v2/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake idobao/id87/v2:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Wazowski Keyboard Firmware with Make\nDESCRIPTION: This command builds the default firmware for the Wazowski keyboard. It requires a properly configured QMK build environment. The output is the firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keebzdotnet/wazowski/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake keebzdotnet/wazowski:default\n```\n\n----------------------------------------\n\nTITLE: Building EndZone34 Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the EndZone34 keyboard using the QMK build environment. It requires QMK to be set up correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/takashicompany/endzone34/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake takashicompany/endzone34:default\n```\n\n----------------------------------------\n\nTITLE: Flashing ELISE V2 keyboard firmware\nDESCRIPTION: This command flashes the built firmware to the ELISE V2 keyboard. It requires the keyboard to be in DFU mode and a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/draytronics/elise_v2/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake draytronics/elise_v2:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing cool836A Firmware with Default Keymap\nDESCRIPTION: This command compiles and flashes the cool836A firmware for the verB_RED variant with the default keymap onto the Pro Micro controller. It uses `avrdude` to upload the compiled firmware. Requires `avrdude` to be correctly configured within the QMK Firmware environment and the Pro Micro to be in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cool836a/readme.md#_snippet_2\n\nLANGUAGE: make\nCODE:\n```\nmake cool836A/verB_RED:default:avrdude\n```\n\n----------------------------------------\n\nTITLE: Building the Aya keyboard firmware in QMK\nDESCRIPTION: This command builds the default keymap for the Aya keyboard within the QMK Firmware environment. It assumes that the QMK build environment is already set up correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/aya/readme.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmake aya:default\n```\n\n----------------------------------------\n\nTITLE: Flashing QK100 Firmware - Make Flash Command\nDESCRIPTION: This command flashes the compiled QMK firmware onto the QK100 solder PCB keyboard. It uses the appropriate flashing tool based on the keyboard's bootloader. Before flashing, the keyboard must be in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/qwertykeys/qk100/solder/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake qwertykeys/qk100/solder:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Iris LM-K Firmware (Makefile)\nDESCRIPTION: This command builds the default firmware for the Iris LM-K keyboard using the QMK build environment.  It compiles the keyboard's keymap and firmware files into a flashable image.  The command assumes that the QMK build environment has been properly set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keebio/iris_lm/k1/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake keebio/iris_lm/k1:default\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for Jelly Evolv Keyboard\nDESCRIPTION: This command builds the default firmware for the Jelly Evolv Hotswap 7U PCB.  It utilizes the QMK make system to compile the firmware.  The output is a .hex or .bin file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/owlab/jelly_evolv/hotswap/7u/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake owlab/jelly_evolv/hotswap/7u:default\n```\n\n----------------------------------------\n\nTITLE: Flashing LGBTKL Keyboard Firmware (QMK)\nDESCRIPTION: This command builds and flashes the default keymap for the LGBTKL keyboard using QMK. It requires a properly configured QMK build environment and a connected keyboard in bootloader mode. This combines the build and flash steps into a single command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/lgbtkl/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake lgbtkl:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Acperience12 Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Acperience12 macropad using the QMK build environment.  It compiles the keymap and necessary drivers to create a firmware image ready to be flashed. The 'yynmt/acperience12' argument specifies the keyboard and the 'default' argument specifies the keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/yynmt/acperience12/rev1/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake yynmt/acperience12:default\n```\n\n----------------------------------------\n\nTITLE: Compiling rb86 Keyboard Firmware\nDESCRIPTION: This command compiles the QMK firmware for the rb86 keyboard with the default keymap. It requires the QMK build environment to be properly set up. The command generates a .hex file that can be used for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ryanbaekr/rb86/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake ryanbaekr/rb86:default\n```\n\n----------------------------------------\n\nTITLE: Building Atreus Firmware for ProMicro Controller\nDESCRIPTION: This command builds the Atreus keyboard firmware specifically for a variant powered by a ProMicro microcontroller and flashes it. It configures the build process for the ProMicro's specific hardware characteristics.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/atreus/readme.md#_snippet_3\n\nLANGUAGE: makefile\nCODE:\n```\nmake atreus/promicro:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building pi50 Keyboard Firmware with Make\nDESCRIPTION: This command builds the default firmware for the pi50 keyboard.  It leverages the QMK make system to compile the firmware for the specified keyboard and keymap.  The build environment must be set up prior to running this command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/1upkeyboards/pi50/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake 1upkeyboards/pi50:default\n```\n\n----------------------------------------\n\nTITLE: Flashing EC Pro X ANSI/ISO Firmware\nDESCRIPTION: This command flashes the built firmware to the EC Pro X ANSI/ISO keyboard. It relies on the make command with the 'flash' target and requires a properly configured QMK build environment and a connected keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cipulot/ec_prox/ansi_iso/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake cipulot/ec_prox/ansi_iso:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Keychron Q7 Firmware (QMK)\nDESCRIPTION: This command builds the QMK firmware for the Keychron Q7 keyboard with the ISO layout. It requires a properly set up QMK build environment. The output will be a firmware file ready to be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keychron/q7/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake keychron/q7/iso:default\n```\n\n----------------------------------------\n\nTITLE: Building Span Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the Span keyboard. It utilizes the QMK build environment to compile the source code and generate a firmware file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/idank/spankbd/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake idank/spankbd:default\n```\n\n----------------------------------------\n\nTITLE: Flashing the Model H Keyboard Firmware\nDESCRIPTION: This command flashes the compiled QMK firmware onto the Model H controller for the IBM Model M keyboard using the default keymap. It assumes that the build process has already been completed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ibm/model_m/modelh/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake ibm/model_m/modelh:default:flash\n```\n\n----------------------------------------\n\nTITLE: Setting User Configuration Values with QMK CLI\nDESCRIPTION: This snippet sets the `user.keyboard` and `user.keymap` configurations, defining default values that can be used by multiple commands. This simplifies command usage by providing defaults for common arguments like `--keyboard`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/cli_configuration.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ qmk config user.keyboard=clueboard/66/rev4 user.keymap=default\n```\n\n----------------------------------------\n\nTITLE: Flashing YMD09 Firmware\nDESCRIPTION: This command flashes the default firmware onto the YMD09 macropad. It assumes the build environment is set up correctly and that the necessary tools for flashing are available.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ymdk/ymd09/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake ymdk/ymd09:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Keychron V2 Firmware (Make)\nDESCRIPTION: This command is used to build the default ANSI layout firmware for the Keychron V2 keyboard.  It utilizes the `make` command within the QMK Firmware environment to compile the necessary files. The output will be a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keychron/v2/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake keychron/v2/ansi:default\n```\n\n----------------------------------------\n\nTITLE: Building the default keymap for silverbullet44\nDESCRIPTION: This command compiles the default keymap for the silverbullet44 keyboard. It requires a properly configured QMK build environment.  The compiled firmware can then be flashed onto the keyboard's ProMicro controller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/silverbullet44/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake silverbullet44:default\n```\n\n----------------------------------------\n\nTITLE: Building is0GR Keyboard Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the is0GR keyboard using the QMK build environment. It compiles the keyboard layout and firmware for the specific target.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cannonkeys/is0gr/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake cannonkeys/is0gr:default\n```\n\n----------------------------------------\n\nTITLE: Building Makey Makey Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the Makey Makey keyboard using the QMK build environment. It requires the QMK build environment to be set up correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/makeymakey/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake makeymakey:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Shorty Zero Firmware - Make Command\nDESCRIPTION: This command flashes the default firmware onto the Shorty Zero macropad. It requires a working QMK build environment and a connected Shorty Zero in a state ready to receive the firmware. It uses the 'flash' target, which invokes the appropriate flashing tool based on the microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/shorty/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake shorty:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building EEK! Keyboard Firmware with Silk Up Configuration (Makefile)\nDESCRIPTION: This command builds the firmware for the EEK! keyboard with the 'silk up' configuration, which is used when the PCB is flipped. It relies on the QMK build environment being properly set up. The output is a firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/eek/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake eek/silk_up:default\n```\n\n----------------------------------------\n\nTITLE: Compile Dactyl Manuform Firmware for Pro Micro\nDESCRIPTION: This command compiles the firmware for a Dactyl Manuform 6x6 keyboard using a Pro Micro controller. It specifies the keyboard and keymap to use during compilation, which results in a .hex file that can be flashed to the Pro Micro.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/dactyl_manuform/6x6/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nqmk compile -kb keyboards/handwired/dactyl_manuform/6x6 -km default\n```\n\n----------------------------------------\n\nTITLE: Building the Sofle Choc Pro Firmware\nDESCRIPTION: This command builds the default firmware for the keebart/sofle_choc_pro keyboard.  It uses the `make` command within the QMK Firmware environment. Ensure the QMK build environment is properly set up before executing this command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keebart/sofle_choc_pro/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake keebart/sofle_choc_pro:default\n```\n\n----------------------------------------\n\nTITLE: Making the ScottoKatana Keyboard\nDESCRIPTION: This command builds the default keymap for the ScottoKatana keyboard using the QMK build environment. It assumes that the build environment has already been set up correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/scottokeebs/scottokatana/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake handwired/scottokeebs/scottokatana:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Sango Firmware with QMK\nDESCRIPTION: This command is used to flash the compiled firmware onto the Sango keyboard. It programs the keyboard's microcontroller with the new firmware. It requires a properly configured QMK build environment and a connected keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/aidansmithdotdev/sango/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake aidansmithdotdev/sango:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Ejectix Firmware\nDESCRIPTION: This command flashes the compiled firmware onto the Ejectix keyboard. It requires a properly configured QMK build environment and a connected keyboard in bootloader mode. The output is the flashed firmware running on the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/takashicompany/ejectix/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake takashicompany/ejectix:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Jocker 1800 Firmware (QMK)\nDESCRIPTION: Flashes the compiled firmware onto the Jocker 1800 keyboard.  Requires QMK firmware environment setup and a connected Jocker 1800. Assumes the default target and uses the appropriate flashing tool based on the keyboard's bootloader.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mazestudio/jocker/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake mazestd/jocker:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building the 45-ATS keyboard firmware\nDESCRIPTION: This command is used to build the default firmware for the 45-ATS keyboard using the QMK build environment. It assumes that the QMK build environment is already set up. The output will be a .hex or .bin file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/45_ats/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake 45_ats:default\n```\n\n----------------------------------------\n\nTITLE: Building Han60 Firmware\nDESCRIPTION: This command builds the default firmware for the Han60 keyboard. It requires a properly set up QMK build environment. The output will be a .hex file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/han60/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake han60:default\n```\n\n----------------------------------------\n\nTITLE: Building DJam Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the DJam keyboard using the QMK build environment. It requires the QMK build environment to be set up correctly.  The output is a firmware file that can be flashed to the controller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/deng/djam/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake deng/djam:default\n```\n\n----------------------------------------\n\nTITLE: Building CyberGear Macro25 Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the CyberGear Macro25 keyboard using the QMK build environment. It requires the QMK build environment to be set up correctly.  The output is a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cybergear/macro25/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake cybergear/macro25:default\n```\n\n----------------------------------------\n\nTITLE: Building Ergodox STM32 Firmware with QMK Make\nDESCRIPTION: This command builds the default firmware for a handwired Ergodox STM32 keyboard using the QMK Firmware's `make` command.  It assumes the QMK build environment is already set up. The resulting firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/ergodox_stm32/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/ergodox_stm32:default\n```\n\n----------------------------------------\n\nTITLE: Building CannonKeys Sagittarius Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the CannonKeys + Acheron Sagittarius keyboard using the QMK build environment. It assumes that the QMK build environment has been properly set up as per the QMK documentation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cannonkeys/sagittarius/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake cannonkeys/sagittarius:default\n```\n\n----------------------------------------\n\nTITLE: Flashing akb/ogr keyboard firmware - Make\nDESCRIPTION: This command builds and flashes the default firmware to the akb/ogr keyboard. It requires the QMK build environment and a compatible flashing tool to be configured.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/akb/ogr/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake akb/ogr:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building NEK Type A Keyboard Firmware\nDESCRIPTION: This command builds and installs the firmware for the nek_type_a keyboard with the default keymap using avrdude. It assumes the QMK build environment is properly set up. The command flashes the compiled firmware to the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/nek_type_a/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake nek_type_a:default:avrdude\n```\n\n----------------------------------------\n\nTITLE: Building MNK 60 EC Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the MNK 60 EC keyboard. It uses the `make` command within the QMK Firmware environment. The command assumes that the QMK build environment has already been set up according to the QMK documentation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cipulot/mnk_60_ec/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake cipulot/mnk_60_ec:default\n```\n\n----------------------------------------\n\nTITLE: Flashing BM40hsrgb Firmware (rev1)\nDESCRIPTION: This command builds and flashes the default firmware for revision 1 of the kprepublic/bm40hsrgb keyboard using the QMK build environment. It requires the QMK environment to be set up correctly and the keyboard to be in a flashable state.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kprepublic/bm40hsrgb/readme.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmake kprepublic/bm40hsrgb/rev1:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing ZLANT XL Firmware with Make\nDESCRIPTION: This command flashes the compiled firmware onto the ZLANT XL keyboard. It combines the build process with the flashing process using the QMK make system.  A connected and bootloader-ready keyboard is required for successful flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/zlant_xl/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake zlant_xl:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building 3Key Firmware\nDESCRIPTION: This command builds the default firmware for the 3Key keyboard using the QMK build environment. It requires a properly configured QMK build environment and assumes the 'mwstudio/mmk_3' keyboard definition is available. The output will be a firmware file ready for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mwstudio/mmk_3/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake mwstudio/mmk_3:default\n```\n\n----------------------------------------\n\nTITLE: Defining Keyboard Layout: ortho_3x3\nDESCRIPTION: Defines a keyboard layout named `ortho_3x3`. This likely represents an ortholinear keyboard with a 3x3 key arrangement. The purpose is to provide a pre-defined keymap for QMK firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/layouts/community/ortho_3x3/readme.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nLAYOUT_ortho_3x3\n```\n\n----------------------------------------\n\nTITLE: Building MOTHWING Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the MOTHWING keyboard using the QMK build environment. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mothwing/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake mothwing:default\n```\n\n----------------------------------------\n\nTITLE: Building ErgoDash mini firmware with QMK\nDESCRIPTION: This command builds the default firmware for the ErgoDash mini keyboard using the QMK build environment. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/omkbd/ergodash/mini/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake omkbd/ergodash/mini:default\n```\n\n----------------------------------------\n\nTITLE: Building Clueboard 66% HotSwap Firmware\nDESCRIPTION: This command builds the default firmware for the Clueboard 66% HotSwap prototype keyboard. It requires the QMK build environment to be set up. The output is a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/clueboard/66_hotswap/prototype/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake clueboard/66_hotswap/prototype:default\n```\n\n----------------------------------------\n\nTITLE: Building Keyboard Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the handwired Magicforce 68 keyboard. It uses the QMK make system to compile the firmware and create a .hex file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/magicforce68/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake handwired/magicforce68:default\n```\n\n----------------------------------------\n\nTITLE: Building Duck Eagle/Viper V2 Firmware\nDESCRIPTION: This command builds the default firmware for the Duck Eagle/Viper V2 keyboard using the QMK build environment. It assumes the build environment is already set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/duck/eagle_viper/v2/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake duck/eagle_viper/v2:default\n```\n\n----------------------------------------\n\nTITLE: Building OmronTKL Firmware with QMK Make\nDESCRIPTION: This command builds the default firmware for the OmronTKL keyboard using the QMK build system. It requires the QMK build environment to be set up correctly, as detailed in the linked documentation.  The command compiles the firmware and generates a .hex file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/evyd13/omrontkl/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake evyd13/omrontkl:default\n```\n\n----------------------------------------\n\nTITLE: Enabling Leader Key in rules.mk (QMK)\nDESCRIPTION: This snippet shows how to enable the Leader Key feature in the `rules.mk` file. This is a necessary step to use the Leader Key functionality within your QMK firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/leader_key.md#_snippet_0\n\nLANGUAGE: Make\nCODE:\n```\nLEADER_ENABLE = yes\n```\n\n----------------------------------------\n\nTITLE: Flashing N8X Firmware\nDESCRIPTION: This command builds and flashes the default firmware for the N8X keyboard to the connected device. It requires a properly configured QMK build environment and a connected keyboard in a flashable state. This command handles both the compilation and flashing steps in a single operation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/era/linx3/n8x/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake era/linx3/n8x:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building BIOI F60 Firmware\nDESCRIPTION: This command builds the default firmware for the BIOI F60 keyboard using the QMK build environment.  It requires a properly configured QMK build environment. The output is a firmware file ready to be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/bioi/f60/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake bioi/f60:default\n```\n\n----------------------------------------\n\nTITLE: Building x16 Keyboard Firmware with QMK\nDESCRIPTION: This snippet provides the command to build the default firmware for the x16 keyboard using the QMK build environment. It requires QMK to be set up and assumes the user is in the QMK firmware directory.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/x16/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake x16:default\n```\n\n----------------------------------------\n\nTITLE: Flashing the Sunsetter R2 Keyboard Firmware\nDESCRIPTION: This command builds and flashes the default firmware for the Sunsetter R2 keyboard. It assumes that the QMK build environment has been properly set up and that the necessary flashing tools are installed. It combines the build and flash steps into one command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/charue/sunsetter_r2/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake charue/sunsetter_r2:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building RART67M Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the RART67M keyboard using the QMK build environment. It requires QMK to be properly set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/rart/rart67m/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake rart/rart67m:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Keyboard Firmware with Make\nDESCRIPTION: This command flashes the compiled firmware to the Mont Cervin Klein keyboard using the QMK build environment. It requires the QMK build environment to be properly set up, and the keyboard to be in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/era/sirind/klein_hs/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake era/sirind/klein_hs:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Duck Octagon V2 Firmware\nDESCRIPTION: This command builds the QMK firmware for the Duck Octagon V2 keyboard with the default keymap.  It assumes that the QMK build environment has already been set up according to the official QMK documentation. The compiled firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/duck/octagon/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake duck/octagon/v2:default\n```\n\n----------------------------------------\n\nTITLE: Build Barracuda Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the barracuda keyboard. It requires QMK build environment to be set up. It will create the .hex file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/barracuda/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake barracuda:default\n```\n\n----------------------------------------\n\nTITLE: Flashing OSAv2 Firmware with QMK\nDESCRIPTION: This command builds and flashes the default firmware for the OSAv2 keyboard using the QMK build environment. It requires the QMK build environment to be set up, and a compatible flashing tool.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/viktus/osav2/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake viktus/osav2:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Damapad Firmware - Makefile\nDESCRIPTION: This command builds the default firmware for the Damapad using the QMK build system. It targets the Bolsa Supply Damapad with the default configuration.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/bolsa/damapad/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake bolsa/damapad:default\n```\n\n----------------------------------------\n\nTITLE: Defining Tap Hold Caps Delay\nDESCRIPTION: Sets the delay (in milliseconds) for Tap Hold keys (`LT`, `MT`) when using the `KC_CAPS_LOCK` keycode.  This is due to special handling on MacOS.  Defaults to 80 ms. macOS might require setting it to 200 or higher.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/config_options.md#_snippet_66\n\nLANGUAGE: C\nCODE:\n```\n#define TAP_HOLD_CAPS_DELAY 80\n```\n\n----------------------------------------\n\nTITLE: Building the keyboard firmware with make\nDESCRIPTION: This command compiles the QMK firmware for the Dactyl Manuform 5x8 keyboard using the default keymap. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/dactyl_manuform/5x8/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/dactyl_manuform/5x8:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Elite C Left Side\nDESCRIPTION: This command flashes the left side of the Keyhive Sofle keyboard with the default keymap using the dfu-split-left target, suitable for Elite C or DFU bootloader builds. The correct bootloader needs to be selected.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/sofle/keyhive/readme.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nmake sofle/keyhive:default:dfu-split-left\n```\n\n----------------------------------------\n\nTITLE: Building Uthol Firmware\nDESCRIPTION: This command builds the default firmware for the Uthol keyboard (rev2) within the handwired folder.  It compiles the keymap and firmware for the specified keyboard layout.  Requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/uthol/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake handwired/uthol/rev2:default\n```\n\n----------------------------------------\n\nTITLE: Flashing zErgo Keyboard Firmware\nDESCRIPTION: This command flashes the compiled QMK firmware to the zErgo keyboard. It assumes that the keyboard is connected and the flashing tool is configured correctly. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/zergo/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake handwired/zergo:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Ejectix Firmware\nDESCRIPTION: This command builds the default firmware for the Ejectix keyboard. It requires a properly configured QMK build environment. The output is the compiled firmware ready for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/takashicompany/ejectix/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake takashicompany/ejectix:default\n```\n\n----------------------------------------\n\nTITLE: Flashing QMK Firmware to Kobold\nDESCRIPTION: This command builds and flashes the default QMK firmware to the Kobold r1 keyboard. It depends on a correctly configured QMK build environment and a connected keyboard in flashable mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/tzarc/kobold/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake tzarc/kobold/r1:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for LvL Type-01/80 using QMK\nDESCRIPTION: This command compiles the firmware for the LvL Type-01/80 keyboard with the 'default' keymap using the QMK build environment.  It requires QMK to be set up correctly. The output will be a .hex or .bin file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/artifact/lvl/rev_hs01/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake artifact/lvl/rev_hs01:default\n```\n\n----------------------------------------\n\nTITLE: Building the ada1800mini Firmware\nDESCRIPTION: This command builds the default firmware for the ada1800mini keyboard using the QMK build environment. It compiles the keyboard's keymap and firmware based on the configuration files.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ada/ada1800mini/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake ada/ada1800mini:default\n```\n\n----------------------------------------\n\nTITLE: Building JNAO Firmware with QMK\nDESCRIPTION: This command compiles the default keymap for the JNAO keyboard using the QMK build environment. It assumes that the QMK build environment has been properly set up as described in the linked documentation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/maple_computing/jnao/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake maple_computing/jnao:default\n```\n\n----------------------------------------\n\nTITLE: Building Tiger910 Keyboard Firmware - Makefile\nDESCRIPTION: This command builds the default firmware for the Tiger910 keyboard using the QMK build system. It utilizes the 'make' command with the keyboard and keymap specified as arguments.  The resulting firmware can then be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/weirdo/tiger910/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake weirdo/tiger910:default\n```\n\n----------------------------------------\n\nTITLE: Building LB75 Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the LB75 keyboard using the QMK build environment. It requires QMK to be set up correctly and assumes the necessary keyboard and keymap files are in place.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/quad_h/lb75/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake quad_h/lb75:default\n```\n\n----------------------------------------\n\nTITLE: Building Dougal Firmware with QMK Make\nDESCRIPTION: This command builds the default firmware for the Dougal keyboard. It requires a properly configured QMK build environment. The resulting firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cutie_club/keebcats/dougal/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake cutie_club/keebcats/dougal:default\n```\n\n----------------------------------------\n\nTITLE: Building Vanana Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the Vanana keyboard (revision 2) using the QMK build environment. It assumes that the QMK build environment has been set up correctly according to the QMK documentation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/delikeeb/vanana/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake delikeeb/vanana/rev2:default\n```\n\n----------------------------------------\n\nTITLE: Building AUMZ Work Keyboard Firmware\nDESCRIPTION: This command builds the QMK firmware for the AUMZ Work keyboard. Replace `<version>` with the specific version of the keyboard (e.g., hotswap or soldered). It assumes the QMK build environment is already set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/jaykeeb/aumz_work/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake jaykeeb/aumz_work/<version>:default\n```\n\n----------------------------------------\n\nTITLE: Building Firmware\nDESCRIPTION: This command builds the default firmware for the cxt_studio/12e4 keyboard using the QMK build environment. It compiles the keymap and other necessary files into a firmware image that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cxt_studio/12e4/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake cxt_studio/12e4:default\n```\n\n----------------------------------------\n\nTITLE: Building Waaffle Firmware with Pro Micro\nDESCRIPTION: This command builds the QMK firmware for the Waaffle keyboard using the Pro Micro controller. It specifies the keyboard layout, revision, and controller type to generate the firmware file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/delikeeb/waaffle/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake delikeeb/waaffle/rev3/pro_micro:default\n```\n\n----------------------------------------\n\nTITLE: Building UM-80 Firmware with Make\nDESCRIPTION: This command builds the default firmware for the UM-80 keyboard using the QMK build environment. It assumes that the build environment is already set up according to the QMK documentation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/merge/um80/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake merge/um80:default\n```\n\n----------------------------------------\n\nTITLE: Building firmware for edinburgh41\nDESCRIPTION: This command builds the default firmware for the edinburgh41 keyboard. It uses the `make` command within the QMK Firmware environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/edinburgh41/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake edinburgh41:default\n```\n\n----------------------------------------\n\nTITLE: Building Piantor UV 44 Firmware\nDESCRIPTION: This command builds the default firmware for the Piantor UV 44 keyboard. It requires a correctly configured QMK build environment. The output is a firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/piantoruv44/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake piantoruv44:default\n```\n\n----------------------------------------\n\nTITLE: Building The Uni v1/v2 Firmware (Pro Micro)\nDESCRIPTION: This command compiles the firmware for The Uni v1 and v2 keyboards, which use the Pro Micro controller. It utilizes the `make` command with the specified keyboard and keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/stenokeyboards/the_uni/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake stenokeyboards/the_uni/pro_micro:default\n```\n\n----------------------------------------\n\nTITLE: Building superuser/ext Keyboard Firmware\nDESCRIPTION: This command compiles the QMK firmware for the superuser/ext keyboard with the default keymap. It assumes that the QMK build environment is already set up. It produces a .hex or .bin file that can be flashed onto the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/superuser/ext/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake superuser/ext:default\n```\n\n----------------------------------------\n\nTITLE: Building Silhouette Keyboard Firmware (Makefile)\nDESCRIPTION: This command builds the QMK firmware for the Silhouette keyboard with the default keymap. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wolf/silhouette/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake wolf/silhouette:default\n```\n\n----------------------------------------\n\nTITLE: Flashing ScottoInvader Firmware with Make\nDESCRIPTION: This command flashes the compiled firmware to the ScottoInvader keyboard using the QMK build environment. It requires the QMK build environment to be set up and the keyboard to be connected and in a state ready to accept the flash.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/scottokeebs/scottoinvader/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/scottokeebs/scottoinvader:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing KBO-5000 Firmware with QMK\nDESCRIPTION: This command builds and flashes the default firmware to the KBO-5000 keyboard revision 1 using the QMK build environment.  It assumes the QMK build environment is properly configured and the keyboard is connected and in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keebio/kbo5000/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake keebio/kbo5000/rev1:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing QMK Firmware\nDESCRIPTION: This command flashes the QMK firmware to the Scorpio Rev2 keyboard. It uses the `make` command with the keyboard name and the `flash` target.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kwstudio/scorpio_rev2/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake kwstudio/scorpio_rev2:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware to EC Alveus\nDESCRIPTION: This command flashes the default firmware to the EC Alveus 1.2.0 keyboard. It requires a compatible flashing tool and a connection to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cipulot/ec_alveus/1_2_0/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake cipulot/ec_alveus/1_2_0:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building RS108 Firmware with QMK\nDESCRIPTION: This snippet shows how to build the default RS108 firmware using the QMK build system. It assumes that the QMK build environment has already been set up according to the official documentation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/xelus/rs108/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake xelus/rs108:default\n```\n\n----------------------------------------\n\nTITLE: Flashing the Keyspensory KP60 Keyboard\nDESCRIPTION: This command flashes the default firmware onto the Keyspensory KP60 keyboard.  It requires a properly configured QMK build environment and a connected keyboard in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keyspensory/kp60/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake keyspensory/kp60:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building the 75pixels Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the 75pixels keyboard. It uses the QMK make system and specifies the keyboard layout (sendyyeah/75pixels) and the keymap (default). This requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/sendyyeah/75pixels/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake sendyyeah/75pixels:default\n```\n\n----------------------------------------\n\nTITLE: Building GOAT51 firmware with QMK\nDESCRIPTION: This command builds the default firmware for the GOAT51 keyboard using the QMK build environment. It assumes that the QMK build environment has been properly set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/takashicompany/goat51/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake takashicompany/goat51:default\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Number of Steps in config.h\nDESCRIPTION: The sequencer defaults to 16 steps. To override this, define `SEQUENCER_STEPS` in your `config.h` file.  This example sets the number of steps to 32.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/sequencer.md#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n#define SEQUENCER_STEPS 32\n```\n\n----------------------------------------\n\nTITLE: Building Aurora Sweep Firmware\nDESCRIPTION: This command builds the firmware for the Aurora Sweep keyboard with the default configuration. It requires a properly set up QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/splitkb/aurora/sweep/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake splitkb/aurora/sweep/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Flashing MW60 Firmware\nDESCRIPTION: This command flashes the built firmware to the MW60 keyboard. It uses the `make` command to compile and then flash the firmware specified by `buildakb/mw60:default:flash`. This command depends on having a functional QMK build environment and a connected MW60 keyboard in a flashable state.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/buildakb/mw60/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake buildakb/mw60:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building lovelive9 Firmware (Makefile)\nDESCRIPTION: This command builds the default firmware for the lovelive9 keyboard using the QMK build environment.  It requires a properly configured QMK build environment. The output is a compiled firmware file that can be flashed onto the Pro Micro controller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/lovelive9/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/lovelive9:default\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for Creator Pro with QMK\nDESCRIPTION: This snippet demonstrates how to build the default firmware for the Creator Pro keyboard using the QMK build environment. It uses the `make` command with the keyboard and keymap specified.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/sergiopoverony/creator_pro/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake sergiopoverony/creator_pro:default\n```\n\n----------------------------------------\n\nTITLE: Flashing SNES Macropad Firmware\nDESCRIPTION: This command flashes the default firmware to the SNES Macropad. It requires a properly configured QMK build environment and a connected SNES Macropad in flashing mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/snes_macropad/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake snes_macropad:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building XT65 Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the XT65 keyboard using the QMK build environment. It assumes that the QMK build environment is already set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kopibeng/xt65/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake kopibeng/xt65:default\n```\n\n----------------------------------------\n\nTITLE: Building 2Key2CrawlPad Firmware (QMK)\nDESCRIPTION: This command builds the default keymap for the 2key2crawl keyboard using the QMK firmware. It assumes the QMK build environment is already set up. The compiled firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/2key2crawl/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake 2key2crawl:default\n```\n\n----------------------------------------\n\nTITLE: Building Pachi RGB Rev 1 Firmware - QMK\nDESCRIPTION: This snippet shows how to build the default firmware for the Pachi RGB Rev 1 keyboard using the QMK build environment.  It requires the QMK build environment to be set up. The output will be a compiled firmware ready to be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/xelus/pachi/rgb/rev1/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake xelus/pachi/rgb/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Building moky67 Firmware\nDESCRIPTION: This command builds the default firmware for the moky67 keyboard.  It requires QMK build environment to be set up. It outputs the compiled firmware ready for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/moky/moky67/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake moky/moky67:default\n```\n\n----------------------------------------\n\nTITLE: Building Default Keymap for GHS.JEM (QMK)\nDESCRIPTION: This command builds the default keymap for the GHS.JEM keyboard. It requires the QMK build environment to be set up correctly. The output is a .hex file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ghs/jem/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake ghs/jem:default\n```\n\n----------------------------------------\n\nTITLE: Flashing FnRow v1 Firmware (QMK)\nDESCRIPTION: This command flashes the compiled firmware onto the FnRow v1 keyboard. It assumes the keyboard is in bootloader mode (entered via the reset button). Requires the QMK Firmware build environment and a connection to the keyboard via USB.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/dinofizz/fnrow/v1/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake dinofizz/fnrow/v1:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing m3n3van firmware with QMK\nDESCRIPTION: This command compiles and flashes the default firmware for the m3n3van keyboard using the QMK build environment. It requires a connected keyboard in bootloader mode and a correctly configured QMK environment. The command assumes that dfu-programmer or a similar flashing tool is installed and available.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/matthewdias/m3n3van/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake matthewdias/m3n3van:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building the KL-90 Firmware with QMK\nDESCRIPTION: This snippet provides the command to build the default firmware for the KL-90 keyboard using the QMK build environment.  It assumes the build environment is already set up. The command invokes the make utility with the target specified as `kikoslab/kl90:default`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kikoslab/kl90/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake kikoslab/kl90:default\n```\n\n----------------------------------------\n\nTITLE: Building bear_face firmware with QMK\nDESCRIPTION: This command builds the firmware for the bear_face keyboard using the QMK build environment. It specifies the keyboard layout (v1 or v2) and the keymap (default). The QMK build environment must be set up beforehand.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/bear_face/readme.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmake bear_face/v1:default\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nmake bear_face/v2:default\n```\n\n----------------------------------------\n\nTITLE: Building QMK Firmware for Zeno Keyboard\nDESCRIPTION: This command builds the default QMK firmware for the Zeno Ergo 60% keyboard. It compiles the source code and creates a firmware image that can be flashed onto the keyboard's microcontroller. This requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/skme/zeno/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake skme/zeno:default\n```\n\n----------------------------------------\n\nTITLE: Flashing QMK Firmware to Lin EM.8\nDESCRIPTION: This command flashes the built QMK firmware to the Lin EM.8 keyboard.  It assumes the QMK build environment is set up and the firmware has been built.  It uses the default flashing method configured in the keyboard's rules.mk file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/linworks/em8/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake linworks/em8:default:flash\n```\n\n----------------------------------------\n\nTITLE: Defining Keyboard Layout: TKL ANSI WKL Split BS RShift\nDESCRIPTION: This snippet defines the `LAYOUT_tkl_ansi_wkl_split_bs_rshift` keyboard layout.  It's likely part of a larger QMK firmware configuration. The specific key mappings associated with this layout are not included in the snippet but would be defined elsewhere in the configuration.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/layouts/default/tkl_ansi_wkl_split_bs_rshift/readme.md#_snippet_0\n\nLANGUAGE: QMK Layout Definition\nCODE:\n```\n# tkl_ansi_wkl_split_bs_rshift\n\n    LAYOUT_tkl_ansi_wkl_split_bs_rshift\n```\n\n----------------------------------------\n\nTITLE: Building the Hard Light Mark 1 keyboard\nDESCRIPTION: This command builds the default keymap for the Hard Light Mark 1 keyboard using the QMK build environment. It compiles the firmware, creating a .hex or .bin file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/edi/hardlight/mk1/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake edi/hardlight/mk1:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Navi60 Keyboard Firmware\nDESCRIPTION: This command builds and flashes the default firmware to the Navi60 keyboard. It requires a properly configured QMK build environment and a connected keyboard in a flashable state.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/navi60/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake navi60:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Purin Keyboard Firmware (QMK)\nDESCRIPTION: This command builds the default keymap for the Purin keyboard using the QMK build environment. It compiles the firmware and generates a .hex file that can be flashed to the keyboard's microcontroller. Requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/purin/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake purin:default\n```\n\n----------------------------------------\n\nTITLE: Building ADKB96 Firmware\nDESCRIPTION: This command builds the default firmware for the ADKB96 keyboard (revision 1). It uses the QMK build environment to compile the firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/adkb96/readme.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmake adkb96/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Building Ishi 80 Mk 0 Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the Ishi 80 Mk 0 keyboard using the QMK build system.  It requires the QMK build environment to be properly set up according to the QMK documentation. The resulting firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/argo_works/ishi/80/mk0_avr/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake argo_works/ishi/80/mk0_avr:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Hillside Firmware\nDESCRIPTION: This command flashes the built firmware onto the Hillside 48 keyboard. It requires the QMK build environment to be set up and a compatible flashing tool.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/hillside/48/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake hillside/48/0_1:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Keyboard Firmware (Make)\nDESCRIPTION: This command builds the firmware for the Hillside 46 keyboard using the QMK build environment. It targets the 0_1 revision and the default keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/hillside/46/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake hillside/46/0_1:default\n```\n\n----------------------------------------\n\nTITLE: QMK Make Command for IBM Model M with Teensy++\nDESCRIPTION: This command demonstrates how to build the QMK firmware for an IBM Model M keyboard using the Teensy++ 2.0 board.  It uses the `make` command with specific arguments for the keyboard (ibm/model_m/teensypp), keymap (default), and target (teensy). Ensure that the QMK build environment is set up correctly before running this command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ibm/model_m/teensypp/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake ibm/model_m/teensypp:default:teensy\n```\n\n----------------------------------------\n\nTITLE: Flashing Friedrich Keyboard Firmware\nDESCRIPTION: This command flashes the default firmware onto the Friedrich keyboard. It requires a correctly set up QMK build environment and a connected Friedrich keyboard in bootloader mode. The keyboard will be updated with the compiled firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/friedrich/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake friedrich:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Masonry Keyboard Firmware (QMK)\nDESCRIPTION: This command builds and flashes the default keymap for the Masonry keyboard to the device using QMK firmware. It combines the build and flash steps into a single command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/dcpedit/masonry/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake dcpedit/masonry:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing QMK Firmware to Mars 8.0 Keyboard\nDESCRIPTION: This command flashes the compiled QMK firmware to the Mars 8.0 keyboard.  It assumes the QMK build environment is correctly configured and that the firmware has been built.  The exact flashing process depends on the bootloader used by the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ft/mars80/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake ft/mars80:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing TSUBASA Firmware\nDESCRIPTION: This command flashes the built firmware onto the TSUBASA keyboard. It requires a connected and bootloader-ready device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/tsubasa/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/tsubasa:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building ATSET AT16 Firmware\nDESCRIPTION: This command builds the default firmware for the ATSET AT16 keyboard using the QMK build environment.  It compiles the keyboard's keymap and other configurations into a flashable binary.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/atset/at16/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake atset/at3:default\n```\n\n----------------------------------------\n\nTITLE: Building Firmware - Mokey 64 QMK\nDESCRIPTION: This command builds the default firmware for the Mokey 64 keyboard using the QMK build environment. It requires QMK to be properly set up and configured.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mokey/mokey64/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake mokey/mokey64:default\n```\n\n----------------------------------------\n\nTITLE: Building Rotor Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the Rotor keyboard using the QMK build environment. It requires the QMK build environment to be properly set up beforehand.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/rotor/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake rotor:default\n```\n\n----------------------------------------\n\nTITLE: Building QMK Firmware for Tomak79H Keyboard\nDESCRIPTION: This command builds the QMK firmware for the Tomak79H keyboard using the default keymap. It assumes that the QMK build environment has been set up correctly according to the official QMK documentation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/era/sirind/tomak79h/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake era/sirind/tomak79h:default\n```\n\n----------------------------------------\n\nTITLE: Building default firmware for BMEK rev3 using QMK\nDESCRIPTION: This command builds the default firmware for the BMEK keyboard, specifically for revision 3, using an HHKB-like layout and keymap. It assumes the QMK build environment has already been set up. The command utilizes the `make` utility within the QMK environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/bemeier/bmek/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake bemeier/bmek/rev3:default\n```\n\n----------------------------------------\n\nTITLE: Building kelownaRGB64 Keyboard Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the kelownaRGB64 keyboard using the QMK build environment. It requires a correctly configured QMK build environment. The output is a .hex or .bin file that can be flashed onto the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/weirdo/kelowna/rgb64/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake weirdo/kelowna/rgb64:default\n```\n\n----------------------------------------\n\nTITLE: Building Technik-O Keyboard Firmware\nDESCRIPTION: This command compiles the QMK firmware for the Technik-O keyboard with the default keymap. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/boardsource/technik_o/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake boardsource/technik_o:default\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for Duck Octagon V2\nDESCRIPTION: This command builds the default firmware for the Duck Octagon V2 keyboard. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/duck/octagon/v2/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake octagon/v2:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Jels60 Keyboard Firmware\nDESCRIPTION: This command flashes the compiled firmware onto the Jels60 keyboard. It requires the QMK build environment and appropriate flashing tools to be installed and configured.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/jels/jels60/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake jels/jels60:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing the firmware for Unicomp PC122 OverNumpad 1xb\nDESCRIPTION: This command flashes the built firmware to the Unicomp PC122 OverNumpad 1xb keyboard. It utilizes the 'make' command along with the 'flash' target, assuming the build environment is properly configured and the keyboard is in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/unicomp/pc122/overnumpad_1xb/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake unicomp/pc122/overnumpad_1xb:default:flash\n```\n\n----------------------------------------\n\nTITLE: Selecting I2C Driver in rules.mk\nDESCRIPTION: This snippet demonstrates how to select the I2C driver for WS2812 LEDs in the `rules.mk` file.  This driver is typically used for PS2AVRGB (Bootmapper Client) boards, which use an ATtiny85 to handle the WS2812 LEDs. It communicates with the ATtiny85 over I2C.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/ws2812.md#_snippet_4\n\nLANGUAGE: Make\nCODE:\n```\nWS2812_DRIVER = i2c\n```\n\n----------------------------------------\n\nTITLE: Flashing QMK Firmware to A-JAZZ AKC084\nDESCRIPTION: This command flashes the compiled QMK firmware to the A-JAZZ AKC084 keyboard. It requires the QMK build environment and a configured flashing tool.  The keyboard must be in bootloader mode prior to executing this command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/a_jazz/akc084/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake a_jazz/akc084:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flash Firmware to Le Chiffre Keyboard\nDESCRIPTION: This command flashes the built firmware to the Le Chiffre keyboard. It utilizes the QMK build environment and specifies the keyboard, revision, keymap, and flash target.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/tominabox1/le_chiffre/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake tominabox1/le_chiffre/rev1:default:flash\nmake tominabox1/le_chiffre/rev2:default:flash\nmake tominabox1/le_chiffre/he:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Sweet16 V1 Firmware with Make\nDESCRIPTION: This command builds the default firmware for the Sweet16 V1 keyboard using the QMK build environment. It requires the QMK build environment to be properly set up and configured.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/1upkeyboards/sweet16/v1/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake 1upkeyboards/sweet16/v1:default\n```\n\n----------------------------------------\n\nTITLE: Building Red Scarf II+ Ver.B Firmware with QMK Makefile\nDESCRIPTION: This snippet demonstrates how to build the default firmware for the Red Scarf II+ Ver.B keyboard using the QMK make command.  It requires a properly set up QMK build environment as described in the QMK documentation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/redscarf_iiplus/verb/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake redscarf_iiplus/verb:default\n```\n\n----------------------------------------\n\nTITLE: Building Virgo EC Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the Virgo EC keyboard using the QMK build environment. It requires the QMK build environment to be set up correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cipulot/ec_virgo/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake cipulot/ec_virgo:default\n```\n\n----------------------------------------\n\nTITLE: Building Masonry Keyboard Firmware (QMK)\nDESCRIPTION: This command builds the default keymap for the Masonry keyboard using the QMK firmware. It specifies the keyboard (dcpedit/masonry) and the keymap (default).\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/dcpedit/masonry/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake dcpedit/masonry:default\n```\n\n----------------------------------------\n\nTITLE: Building LeftyNumpad Firmware (QMK)\nDESCRIPTION: This command builds the firmware for the LeftyNumpad keyboard with the default configuration using the QMK build environment. It requires QMK to be properly set up and the handwired/leftynumpad keyboard definition to be available.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/leftynumpad/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake handwired/leftynumpad:default\n```\n\n----------------------------------------\n\nTITLE: Building YMD40 v2 Firmware\nDESCRIPTION: This command builds the default firmware for the YMD40 v2 keyboard. It assumes that the QMK build environment has already been set up and configured.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ymdk/ymd40/v2/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake ymdk/ymd40/v2:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Chapter-1 Keyboard Firmware\nDESCRIPTION: This command flashes the compiled firmware to the Chapter-1 keyboard. It requires a properly configured QMK environment and a connected keyboard in a flashable state.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechstudio/chapter1/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake mechstudio/chapter1:default:flash\n```\n\n----------------------------------------\n\nTITLE: Compiling usb_detach Utility\nDESCRIPTION: This snippet shows how to compile the usb_detach utility using the `make` command. It first cleans the build directory and then compiles the program. This assumes that a Makefile exists in the current directory.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/util/usb_detach/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake clean && make\n```\n\n----------------------------------------\n\nTITLE: Building Nemui Keyboard Firmware (Makefile)\nDESCRIPTION: This command builds the default firmware for the Nemui keyboard using the QMK build environment. It compiles the keyboard layout and necessary firmware components into a flashable file. Requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/nemui/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake nemui:default\n```\n\n----------------------------------------\n\nTITLE: Building handwired/d48 keyboard with make\nDESCRIPTION: This command builds the firmware for the handwired/d48 keyboard using the default configuration. Ensure that the QMK build environment is properly set up before running this command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/d48/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake handwired/d48:default\n```\n\n----------------------------------------\n\nTITLE: Defining Alternate Repeat for Macros (C)\nDESCRIPTION: This snippet demonstrates using Alternate Repeat to trigger macros.  Pressing 'K' then Alternate Repeat types \"keyboard\", while pressing '.' then Alternate Repeat types \"../\". Custom keycodes are defined for each macro. `SEND_STRING` sends the string associated with each macro key.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/repeat_key.md#_snippet_5\n\nLANGUAGE: c\nCODE:\n```\nenum custom_keycodes {\n    M_KEYBOARD = SAFE_RANGE,\n    M_UPDIR,\n    // Other custom keys...\n};\n\nuint16_t get_alt_repeat_key_keycode_user(uint16_t keycode, uint8_t mods) {\n    switch (keycode) {\n        case KC_K: return M_KEYBOARD;\n        case KC_DOT: return M_UPDIR;\n    }\n\n    return KC_TRNS;\n}\n\nbool process_record_user(uint16_t keycode, keyrecord_t* record) {\n    switch (keycode) {\n        case M_KEYBOARD: SEND_STRING(/*k*/\"eyboard\"); break;\n        case M_UPDIR: SEND_STRING(/*.*/\"./\"); break;\n    }\n    return true;\n}\n```\n\n----------------------------------------\n\nTITLE: Building NP_hhkb Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the NP_hhkb keyboard using the QMK build environment. It assumes that the QMK build environment is already set up correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/weirdo/naiping/nphhkb/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake weirdo/naiping/nphhkb:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Key Ripper Keyboard Firmware (Make)\nDESCRIPTION: This command flashes the compiled firmware onto the key_ripper keyboard. It extends the build command by adding the ':flash' target, which triggers the flashing process after the firmware is built. This requires the QMK firmware environment and the appropriate flashing tools configured.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/bschwind/key_ripper/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake bschwind/key_ripper:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Pteron38 Firmware\nDESCRIPTION: This command builds the default firmware for the handwired Pteron38 keyboard using the QMK build environment. It requires a properly configured build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/pteron38/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/pteron38:default\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for Bakeneko60 ISO Hotswap (QMK)\nDESCRIPTION: This command builds the default firmware for the CannonKeys Bakeneko60 ISO Hotswap keyboard using the QMK build environment.  It utilizes the `make` command with specific target parameters.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cannonkeys/bakeneko60_iso_hs/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake cannonkeys/bakeneko60_iso_hs:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Pinky4 Keyboard Firmware (QMK)\nDESCRIPTION: This command flashes the compiled firmware to the Pinky4 keyboard. It assumes the keyboard is connected and in a state ready to receive the firmware. The `flash` target is used to program the firmware onto the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/pinky/4/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake pinky/4:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building AC980mini Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the AC980mini keyboard using the QMK build environment.  It compiles the keymap and other necessary components into a firmware image. This assumes the QMK build environment is already set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/blockboy/ac980mini/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake blockboy/ac980mini:default\n```\n\n----------------------------------------\n\nTITLE: Flashing KBOD Firmware with avrdude\nDESCRIPTION: This command flashes the KBOD firmware to the Arduino Micro using avrdude.  It requires avrdude to be installed and configured, and the correct COM port and avrdude configuration file path must be specified.  The .hex file generated from the make command is used as input.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/kbod/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\navrdude -p m32u4 -c avr109 -P <COM PORT> -C <avrdude conf file> -e -u flash:w:handwired_kbod_default.hex\n```\n\n----------------------------------------\n\nTITLE: Flashing the Teleport Numpad Firmware\nDESCRIPTION: This command flashes the compiled firmware onto the Teleport Numpad. It uses the QMK build environment and a compatible flashing tool to upload the .hex file to the device. Requires the device to be in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/teleport/numpad/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake teleport/numpad:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Earth Rover Firmware with QMK\nDESCRIPTION: This command flashes the compiled firmware onto the Earth Rover keyboard using the QMK build environment and the default keymap. It assumes the device is connected and ready to receive the firmware. It requires a properly configured QMK build environment and a compatible flashing tool.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/earth_rover/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake earth_rover:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building QMK Firmware for JC65\nDESCRIPTION: This command builds the default QMK firmware for the JC65 keyboard with the v32u4 microcontroller. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/jc65/v32u4/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake jc65/v32u4:default\n```\n\n----------------------------------------\n\nTITLE: Flashing MK-65 Keyboard Firmware (QMK)\nDESCRIPTION: This command flashes the compiled firmware onto the MK-65 keyboard using the QMK build environment. It requires the QMK build environment to be set up and the keyboard to be in a flashable state (e.g., bootloader mode).  It assumes the default keymap is used.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mk65/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake mk65:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware for Octopad+ Keyboard (QMK)\nDESCRIPTION: This command flashes the generated firmware to the DeskDaily Octopad+ keyboard. It builds the firmware and then attempts to flash it to the device. It requires the QMK build environment to be set up and the necessary flashing tools to be installed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/nightly_boards/octopadplus/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake nightly_boards/octopadplus:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building wings42 Firmware\nDESCRIPTION: This command builds the QMK Firmware for the wings42 keyboard with the default keymap. It utilizes the `make` command to compile the firmware based on the specified keyboard and revision.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/dailycraft/wings42/rev1/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake dailycraft/wings42/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Flashing the winter keyboard firmware\nDESCRIPTION: This command flashes the default keymap to the winter keyboard. It requires the QMK build environment and a properly configured flashing tool.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kibou/winter/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake kibou/winter:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Super 16 Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Super 16 macro pad using the QMK build environment. It requires a properly configured QMK environment and the appropriate keyboard and keymap defined.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/1upkeyboards/super16/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake 1upkeyboards/super16:default\n```\n\n----------------------------------------\n\nTITLE: Building Kanu Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the Kanu keyboard using the QMK build environment. It requires the QMK build environment to be set up properly.  The output is the firmware ready to be flashed onto the Kanu PCB.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechlovin/kanu/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake mechlovin/kanu:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware to gl516/xr63gl Keyboard\nDESCRIPTION: This command compiles and flashes the default keymap for the gl516/xr63gl keyboard to the device. It requires the QMK build environment to be properly configured and the necessary flashing tools to be installed. The keyboard must be in a flashable state, such as bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/gl516/xr63gl/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake gl516/xr63gl:default:flash\n```\n\n----------------------------------------\n\nTITLE: Extra Key Configuration in Keymap\nDESCRIPTION: This code snippet demonstrates how to configure the extra key(s) that are present when using a split Enter key setup (2 1U keys instead of a 2U key) by replacing the `XXXXXXX` placeholder with the desired keycode. This allows customizing the key to the right of the P key.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/marksard/treadstone48/rev1/keymaps/like_jis_rs/readme_jp.md#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n      XXXXXXX \\n  // ExtraKey: This key is an extra key. REV1 is a split back space. REV2 is to the right of the arrow-up key.\n```\n\n----------------------------------------\n\nTITLE: Flashing Scorpio Firmware\nDESCRIPTION: This command flashes the compiled firmware onto the Scorpio keyboard using the QMK build system. It programs the keyboard's microcontroller with the new firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kwstudio/scorpio/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake kwstudio/scorpio:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Kyria Firmware (rev3)\nDESCRIPTION: This command flashes the built QMK firmware to the Kyria keyboard with revision 3 using the default configuration. It assumes the QMK build environment is correctly configured and the keyboard is connected in a flashable state. Requires `dfu-util` or similar flashing tool.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/splitkb/kyria/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake splitkb/kyria/rev3:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing ALF X2 Keyboard Firmware\nDESCRIPTION: This command builds and flashes the default firmware for the ALF X2 keyboard.  It requires a properly configured QMK build environment and a connected ALF X2 keyboard in a flashable state. It combines the build and flash steps.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/alf/x2/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake alf/x2:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Dawn60 Firmware\nDESCRIPTION: This code snippet shows how to build the default firmware for the Dawn60 keyboard using the QMK build environment.  The `make` command compiles the firmware for the `xelus/dawn60/rev1` keyboard with the `default` keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/xelus/dawn60/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake xelus/dawn60/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Building Jabberwocky v1 Firmware\nDESCRIPTION: This command builds the default firmware for the Jabberwocky v1 keyboard. It assumes that the QMK build environment has been set up.  The resulting firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/nopunin10did/jabberwocky/v1/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake nopunin10did/jabberwocky/v1:default\n```\n\n----------------------------------------\n\nTITLE: Building N87 Keyboard Firmware with Make\nDESCRIPTION: This command builds the QMK firmware for the era/linx3/n87 keyboard with the default keymap. It utilizes the QMK make system to compile the firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/era/linx3/n87/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake era/linx3/n87:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Carbo 65 Keyboard with QMK\nDESCRIPTION: This command flashes the specified keymap for the Carbo 65 keyboard using the QMK firmware. Replace `<keymap>` with the desired keymap name. This process requires the keyboard to be in DFU mode, typically achieved by holding the Escape key while plugging in the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/carbo65/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake carbo65:<keymap>:flash\n```\n\n----------------------------------------\n\nTITLE: Building sf2040 Firmware\nDESCRIPTION: This command builds the default firmware for the sf2040 keyboard. It assumes the QMK build environment is already set up. This process compiles the keyboard's firmware based on the defined keymap and keyboard configuration.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/sf2040/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake sf2040:default\n```\n\n----------------------------------------\n\nTITLE: Building Ergomirage Firmware\nDESCRIPTION: This command builds the default firmware for the Ergomirage keyboard. It requires the QMK build environment to be set up correctly. The output will be the compiled firmware ready to be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/takashicompany/ergomirage/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake takashicompany/ergomirage:default\n```\n\n----------------------------------------\n\nTITLE: Building arc60h Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the arc60h keyboard using the QMK build environment. It requires a properly set up build environment as described in the QMK documentation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/vertex/arc60h/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake vertex/arc60h:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Cycle7 Firmware\nDESCRIPTION: This command flashes the built firmware onto the Cycle7 keyboard. It requires the QMK build environment to be properly configured and the keyboard to be in a state where it can accept a firmware update (e.g., bootloader mode).\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/vertex/cycle7/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake vertex/cycle7:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Baion 808 Firmware with QMK\nDESCRIPTION: This command is used to flash the built firmware to the Baion 808 keyboard using the QMK build environment. It requires the keyboard to be in a flashable state and the QMK build environment to be properly configured.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/baion_808/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake baion_808:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for SBL Keyboard\nDESCRIPTION: This command builds the default firmware for the SBL keyboard. It uses the `make` command with the target specified as `dnworks/sbl:default`.  This assumes the QMK build environment is already set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/dnworks/sbl/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake dnworks/sbl:default\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for Axolstudio Yeti\nDESCRIPTION: This command builds the default firmware for the soldered version of the Axolstudio Yeti keyboard.  It assumes the QMK build environment is already set up according to the QMK documentation. The output will be a .hex or .bin file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/axolstudio/yeti/soldered/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake axolstudio/yeti/soldered:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware to SHARKOON SKILLER SGK50 S2 (Makefile)\nDESCRIPTION: This command flashes the compiled QMK firmware to the SHARKOON SKILLER SGK50 S2 keyboard using the default keymap. This assumes that the keyboard is in bootloader mode and that the QMK build environment is configured correctly for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/sharkoon/skiller_sgk50_s2/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake sharkoon/skiller_sgk50_s2:default:flash\n```\n\n----------------------------------------\n\nTITLE: Adding QMK Firmware as a Remote Repository\nDESCRIPTION: This Git command adds the official QMK Firmware repository as a remote, allowing you to fetch updates.  The remote is named 'upstream' but can be named anything.  This command is executed once to establish the remote connection.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/newbs_git_using_your_master_branch.md#_snippet_0\n\nLANGUAGE: Git\nCODE:\n```\ngit remote add upstream https://github.com/qmk/qmk_firmware.git\n```\n\n----------------------------------------\n\nTITLE: Building the default .hex file - Shell\nDESCRIPTION: This command builds the default .hex file for the XeaL60 keyboard firmware using the QMK build environment.  It navigates to the top level directory and executes the make command with the specified keyboard and keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/xealous/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ make handwired/xeal60/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Flashing the default keymap for Cornia keyboard\nDESCRIPTION: This command flashes the default keymap onto the Cornia keyboard. It assumes that the QMK build environment is set up and that the keyboard is connected to the computer in a flashable state. It uploads the compiled firmware to the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cornia/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake cornia/v1:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing the TW40 Firmware - Bash\nDESCRIPTION: This command flashes the compiled firmware to the Training Wheel 40 keyboard.  It assumes the keyboard is in DFU mode (achieved by holding Esc while plugging it in) and that the QMK build environment is properly set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/p3d/tw40/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake p3d/tw40:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Eon40 QMK Firmware\nDESCRIPTION: This command builds the default firmware for the Eon40 keyboard using the QMK build environment. It compiles the keymap located in the `evyd13/eon40` directory with the `default` configuration.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/evyd13/eon40/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake evyd13/eon40:default\n```\n\n----------------------------------------\n\nTITLE: Compiling Levinson Keyboard Firmware - make command\nDESCRIPTION: This command compiles the default firmware for the Levinson keyboard rev3 using the QMK build environment. It assumes that the QMK build environment has already been set up.  No dependencies are explicitly listed, but the QMK build environment is a prerequisite.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keebio/levinson/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake keebio/levinson/rev3:default\n```\n\n----------------------------------------\n\nTITLE: Building QMK Firmware\nDESCRIPTION: This command builds the default firmware for the DeskDaily Alter Lite keyboard using the QMK build environment. It requires the QMK build environment to be set up correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/nightly_boards/alter_lite/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake nightly_boards/alter_lite:default\n```\n\n----------------------------------------\n\nTITLE: Compiling KBIC65 Firmware (QMK)\nDESCRIPTION: This command compiles the firmware for the KBIC65 keyboard using the QMK build environment. It uses the `karlb/kbic65` keyboard definition and the `default` keymap.  The QMK build environment must be set up beforehand.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/karlb/kbic65/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nqmk compile -kb karlb/kbic65 -km default\n```\n\n----------------------------------------\n\nTITLE: Building the Teleport Numpad Firmware\nDESCRIPTION: This command builds the default keymap for the Teleport Numpad using the QMK build environment. It compiles the firmware, creating a .hex file that can be flashed onto the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/teleport/numpad/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake teleport/numpad:default\n```\n\n----------------------------------------\n\nTITLE: Flashing SL40 Keyboard Firmware with Make\nDESCRIPTION: This command flashes the compiled firmware onto the SL40 keyboard using the `make` command. It specifies the keyboard layout as `wsk/sl40`, the keymap as `default`, and the action as `flash`. It requires a properly configured QMK build environment and a connected keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wsk/sl40/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake wsk/sl40:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Alas Keyboard Firmware\nDESCRIPTION: This command builds the default keymap for the Alas keyboard using the QMK build environment. It assumes that the build environment has been set up correctly as per the QMK documentation. The output will be the firmware file ready for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/alas/readme.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmake alas:default\n```\n\n----------------------------------------\n\nTITLE: Flashing the Uncertainty Keyboard Firmware\nDESCRIPTION: This command builds and flashes the default firmware for the Uncertainty keyboard to the connected device. It requires a properly configured QMK build environment and a connected keyboard in a flashable state. It programs the keyboard with the newly built firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/vinhcatba/uncertainty/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake vinhcatba/uncertainty:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing the firmware\nDESCRIPTION: This command is used to flash the pre-built firmware onto the keyboard. It requires a properly configured build environment and a compatible flashing tool. This will overwrite the existing firmware on the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechlovin/infinity87/rev1/rouge87/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake mechlovin/infinity87/rev1/rouge87:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for 1upSuper16v3\nDESCRIPTION: This command builds the default firmware for the 1upSuper16v3 keyboard. It uses the `make` command, specifying the keyboard and keymap. Ensure the QMK build environment is properly set up before executing this command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/1upkeyboards/1upsuper16v3/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake 1upkeyboards/1upsuper16v3:default\n```\n\n----------------------------------------\n\nTITLE: Building EC Pro X ANSI/ISO Firmware\nDESCRIPTION: This command builds the default firmware for the EC Pro X ANSI/ISO keyboard. It requires a correctly configured QMK build environment and utilizes the make command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cipulot/ec_prox/ansi_iso/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake cipulot/ec_prox/ansi_iso:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Sono1 Firmware to Teensy\nDESCRIPTION: This command compiles and flashes the QMK firmware specifically for the handwired/sono1 keyboard using a Teensy 2.0++ microcontroller and the default keymap. The `:flash` argument automatically initiates the flashing process after compilation. A reset may be required to activate the bootloader.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/sono1/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nqmk compile -kb handwired/sono1/t2pp:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Hotdog Pad Firmware (QMK)\nDESCRIPTION: This command builds and flashes the default keymap for the Hotdog Pad keyboard to the device using the QMK firmware and its build environment. It depends on a properly configured QMK build environment and a connected keyboard in flashing mode. The output is the flashed firmware on the Hotdog Pad keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/onnenon/hotdog_pad/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake onnenon/hotdog_pad:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for Tractyl Manuform Keyboard\nDESCRIPTION: This command builds the firmware for the handwired Tractyl Manuform 5x6 right-side keyboard using the F411 microcontroller with the default configuration. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/tractyl_manuform/5x6_right/f411/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/tractyl_manuform/5x6_right/f411:default\n```\n\n----------------------------------------\n\nTITLE: Building wings42 Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the wings42 keyboard. It utilizes the QMK build environment and specifies the keyboard and keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/dailycraft/wings42/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake dailycraft/wings42:default\n```\n\n----------------------------------------\n\nTITLE: Building akb/ogr keyboard firmware - Make\nDESCRIPTION: This command builds the default firmware for the akb/ogr keyboard. It assumes that the QMK build environment has already been set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/akb/ogr/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake akb/ogr:default\n```\n\n----------------------------------------\n\nTITLE: Compiling CK60i Default Keymap\nDESCRIPTION: This command compiles the default keymap for the CK60i keyboard using the QMK firmware build environment. It requires a properly configured QMK build environment. The output is the compiled firmware ready to be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ck60i/readme.md#_snippet_0\n\nLANGUAGE: makefile\nCODE:\n```\nmake ck60i:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Alpha9 Firmware\nDESCRIPTION: This command builds and flashes the default firmware to the Alpha9 keyboard using the QMK build environment. Requires a configured QMK environment and a connected keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wsk/alpha9/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake wsk/alpha9:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Rewind Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the Rewind keyboard using QMK Firmware. It assumes that the build environment has been set up correctly according to the QMK documentation. The output is a .hex or .bin file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/montsinger/rewind/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake montsinger/rewind:default\n```\n\n----------------------------------------\n\nTITLE: Remapping LED Pins - Bonsai C4 - C\nDESCRIPTION: This code snippet allows remapping the on-board LED pins (B0) on the Bonsai C4. By undefining the default pin B0 and redefining it to another pin (PAL_LINE(GPIOA, 9)), you can change the LED behavior. This can be useful if VBUS detection is not being used.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/feature_converters.md#_snippet_4\n\nLANGUAGE: c\nCODE:\n```\n#undef B0\n// If VBUS detection is unused, we can send RXLED to the Vbus detect pin instead\n#define B0 PAL_LINE(GPIOA, 9)\n```\n\n----------------------------------------\n\nTITLE: Building NIU Mini Firmware\nDESCRIPTION: This command builds the default firmware for the NIU Mini keyboard using the QMK build environment. It compiles the source code into a firmware image that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kbdfans/niu_mini/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake kbdfans/niu_mini:default\n```\n\n----------------------------------------\n\nTITLE: Flashing QMK Firmware to Iris LM-G Keyboard\nDESCRIPTION: This command flashes the QMK firmware to the Iris LM-G keyboard using the default keymap. It requires the QMK build environment to be set up and a compatible flashing tool. The process uploads the generated .hex file to the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keebio/iris_lm/g1/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake keebio/iris_lm/g1:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building BIOI G60 BLE Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the BIOI G60 BLE keyboard using the QMK build environment.  It assumes the build environment is already set up. It generates a .hex or .bin file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/bioi/g60ble/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake bioi/g60ble:default\n```\n\n----------------------------------------\n\nTITLE: Building Keymap for 0xCB 1337 with QMK\nDESCRIPTION: This command builds the default keymap for the 0xCB 1337 keyboard using the QMK firmware. It compiles the keymap and prepares it for flashing to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/0xcb/1337/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake 0xcb/1337:default\n```\n\n----------------------------------------\n\nTITLE: Building Big Series Keyboard Firmware (QMK)\nDESCRIPTION: This command builds the QMK firmware for the Big Series 2-key keyboard with the default keymap. It requires a properly set up QMK build environment. The output is a firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/woodkeys/bigseries/2key/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake woodkeys/bigseries/2key:default\n```\n\n----------------------------------------\n\nTITLE: Building Eon75 Firmware with Make\nDESCRIPTION: This command compiles the default firmware for the Eon75 keyboard using the QMK build environment. It requires QMK to be properly set up and assumes the user is in the QMK firmware directory.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/evyd13/eon75/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake evyd13/eon75:default\n```\n\n----------------------------------------\n\nTITLE: Building the DE80 Keyboard Firmware\nDESCRIPTION: This command builds the default keymap for the DE80 keyboard using the QMK build environment. It compiles the source code and generates the firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/deemen17/de80/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake deemen17/de80:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Keyboard Firmware (Make)\nDESCRIPTION: This command flashes the compiled firmware onto the macroboard keyboard using the default keymap. It requires a properly configured QMK build environment and a connected keyboard in flashable mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/macroboard/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake handwired/macroboard:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building ic45_v2 Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the handwired ic45_v2 keyboard using the QMK build environment. It requires the QMK build environment to be properly set up. The output is a firmware file ready to be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/ic45_v2/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake handwired/ic45_v2:default\n```\n\n----------------------------------------\n\nTITLE: Building QMK Firmware for sandbox keyboard\nDESCRIPTION: This command builds the QMK Firmware for the sandbox keyboard with the default keymap. It compiles the necessary files and creates a firmware image that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/dailycraft/sandbox/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake dailycraft/sandbox:default\n```\n\n----------------------------------------\n\nTITLE: Building Abacus Keyboard Firmware (QMK)\nDESCRIPTION: This command builds the default keymap for the Abacus keyboard using the QMK firmware. It requires a properly configured QMK build environment.  The resulting firmware can then be flashed onto the Abacus PCB.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/abacus/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake abacus:default\n```\n\n----------------------------------------\n\nTITLE: Disabling LED Matrix in QMK Firmware (C)\nDESCRIPTION: This function turns the LED matrix off. The disabled state is saved to EEPROM.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/led_matrix.md#_snippet_13\n\nLANGUAGE: C\nCODE:\n```\nvoid led_matrix_disable(void)\n```\n\n----------------------------------------\n\nTITLE: Create New Keymap (qmk new-keymap)\nDESCRIPTION: This command creates a new keymap based on a keyboard's existing default keymap. It is directory-aware and can automatically fill in KEYBOARD and/or KEYMAP if executed within a keyboard or keymap directory.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/cli_commands.md#_snippet_28\n\nLANGUAGE: text\nCODE:\n```\nqmk new-keymap [-kb KEYBOARD] [-km KEYMAP]\n```\n\n----------------------------------------\n\nTITLE: Building Momokai Tap Duo Firmware with Make\nDESCRIPTION: This snippet shows how to compile the default firmware for the Momokai Tap Duo keyboard using the `make` command. It assumes that the QMK build environment has been set up correctly. The command targets the `momokai/tap_duo` keyboard with the `default` keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/momokai/tap_duo/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake momokai/tap_duo:default\n```\n\n----------------------------------------\n\nTITLE: Flashing ATSET AT6 Keyboard Firmware\nDESCRIPTION: This command flashes the built firmware onto the ATSET AT6 keyboard. It relies on the QMK build environment and a connected, bootloader-ready keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/atset/at6/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake atset/at6:default:flash\n```\n\n----------------------------------------\n\nTITLE: Atmega168P Fuse Bit Breakdown\nDESCRIPTION: Provides a detailed breakdown of the Atmega168P's fuse bits (extended, high, and low bytes) and lock bits, explaining the function of each bit. It clarifies how the fuse bits configure settings such as boot reset vector, boot size, BODLEVEL, EESAVE, WDTON, SPIEN, DWEN, RSTDISBL, CKSEL, SUT, CKOUT and CKDIV8 and lock bits control memory lock features such as LB, BLB0, BLB1.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/fuse.txt#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n# 0x00 = 0 0 0 0   0 0 0 0 <-- BOOTRST (boot reset vector at 0x1800)\n#                    \\+/    \n#                     +------- BOOTSZ (00 = 2k bytes)\n\n# 0xd6 = 1 1 0 1   0 1 1 0\n#        ^ ^ ^ ^   ^ \\-+-/\n#        | | | |   |   +------ BODLEVEL 0..2 (110 = 1.8 V)\n#        | | | |   + --------- EESAVE (preserve EEPROM over chip erase)\n#        | | | +-------------- WDTON (if 0: watchdog always on)\n#        | | +---------------- SPIEN (allow serial programming)\n#        | +------------------ DWEN (debug wire enable)\n#        +-------------------- RSTDISBL (reset pin is enabled)\n\n# 0xdf = 1 1 0 1   1 1 1 1\n#        ^ ^ \\ /   \\--+--/\n#        | |  |       +------- CKSEL 3..0 (external >8M crystal)\n#        | |  +--------------- SUT 1..0 (crystal osc, BOD enabled)\n#        | +------------------ CKOUT (if 0: Clock output enabled)\n#        +-------------------- CKDIV8 (if 0: divide by 8)\n\n# 0x3f = - - 1 1   1 1 1 1\n#            \\ /   \\-/ \\-/\n#             |     |   +----- LB 2..1 (No memory lock features enabled)\n#             |     +--------- BLB0 2..1 (No restrictions for SPM or LPM accessing the Application section)\n#             +--------------- BLB1 2..1 (No restrictions for SPM or LPM accessing the Boot Loader section)\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for Promenade Keyboard (QMK)\nDESCRIPTION: This command builds the default firmware for the Promenade keyboard using the QMK build environment.  It compiles the keyboard layout and generates a firmware file ready for flashing. It assumes the QMK build environment is properly set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kradoindustries/promenade/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake kradoindustries/promenade:default\n```\n\n----------------------------------------\n\nTITLE: Install OpenOCD using XPM\nDESCRIPTION: This command uses the xPack Manager to install OpenOCD, a crucial tool for debugging ARM MCUs. OpenOCD provides the necessary interface for GDB (GNU Debugger) to access the MCU via SWD (Serial Wire Debug).  The `--global` flag makes OpenOCD accessible system-wide.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/arm_debugging.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nxpm install --global @xpack-dev-tools/openocd\n```\n\n----------------------------------------\n\nTITLE: Flashing Monoflex 60 Firmware\nDESCRIPTION: This command flashes the default firmware onto the Monoflex 60 keyboard using the QMK build environment. It depends on the QMK build environment and a compatible flashing tool. It uploads the pre-built firmware to the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/monoflex60/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake monoflex60:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building firmware for Synth Labs 060\nDESCRIPTION: This command is used to build the default firmware for the Synth Labs 060 keyboard within the QMK Firmware environment. It requires the QMK build environment to be set up correctly. The output will be a .hex or .bin file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/synthlabs/060/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake synthlabs/060:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Krush60 Solder Keyboard\nDESCRIPTION: This command builds and flashes the default keymap for the Krush60 solder keyboard. It requires a properly set up QMK build environment and a compatible flashing tool (e.g., dfu-util).  It programs the compiled firmware onto the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/sawnsprojects/krush/krush60/solder/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake sawnsprojects/krush/krush60/solder:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Bolek Firmware with QMK\nDESCRIPTION: This command flashes the built firmware to the Bolek keyboard using QMK. It requires the QMK build environment to be set up and the keyboard to be connected to the computer.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/bolek/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake handwired/bolek:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Keymap with Make\nDESCRIPTION: This snippet shows the command to build the default keymap for the KBP V60 Type R using the QMK Firmware's `make` command.  It requires the QMK Firmware environment to be set up correctly. The command compiles the keymap and generates the firmware binary, which can then be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/v60_type_r/keymaps/default/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake v60_type_r:default\n```\n\n----------------------------------------\n\nTITLE: Building Rhino Keyboard Firmware with Make\nDESCRIPTION: This command builds the default firmware for the Rhino keyboard using the QMK make system. It compiles the keyboard's layout and keymap into a firmware image.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keyprez/rhino/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake keyprez/rhino:default\n```\n\n----------------------------------------\n\nTITLE: PS/2 Mouse Fine Control Settings (C)\nDESCRIPTION: These defines control the sensitivity and speed of the PS/2 mouse.  These settings are placed in `config.h`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/ps2_mouse.md#_snippet_12\n\nLANGUAGE: c\nCODE:\n```\n#define PS2_MOUSE_X_MULTIPLIER 3\n#define PS2_MOUSE_Y_MULTIPLIER 3\n#define PS2_MOUSE_V_MULTIPLIER 1\n```\n\n----------------------------------------\n\nTITLE: Flashing the keyboard firmware\nDESCRIPTION: This command compiles and flashes the default keymap for the handwired/aim65 keyboard to the connected Pro Micro.  Requires a configured QMK build environment and a connected Pro Micro.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/aim65/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake handwired/aim65:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Otaku Split rev.0 Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Otaku Split rev.0 keyboard using the QMK build environment. It assumes that the QMK build environment is already set up. The resulting firmware can then be flashed onto the keyboard's Pro Micro controller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/takashiski/otaku_split/rev0/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake takashiski/otaku_split/rev0:default\n```\n\n----------------------------------------\n\nTITLE: Flashing NoodlePad [Micro] Firmware with QMK\nDESCRIPTION: This command flashes the compiled firmware onto the NoodlePad [Micro] keyboard using the QMK command-line interface. It assumes the keyboard is connected and QMK is configured to communicate with it. Requires a properly configured QMK environment and the compiled firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/themadnoodle/noodlepad_micro/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nqmk flash -kb themadnoodle/noodlepad_micro -km default\n```\n\n----------------------------------------\n\nTITLE: Building Bookerboard Firmware with Make\nDESCRIPTION: This snippet shows how to build the default Bookerboard firmware using the `make` command within the QMK build environment.  It assumes the QMK build environment has already been set up. The command compiles the firmware and generates a .hex file that can be flashed to the macropad.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/clawsome/bookerboard/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake clawsome/bookerboard:default\n```\n\n----------------------------------------\n\nTITLE: Building Symmetric70 Proto Firmware\nDESCRIPTION: This command builds the firmware for the symmetric70_proto keyboard using the QMK build environment. It specifies the keyboard (handwired/symmetric70_proto/promicro), keymap (default), and build type (normal or fast). The output is a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/symmetric70_proto/promicro/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake handwired/symmetric70_proto/promicro/normal:default\nmake handwired/symmetric70_proto/promicro/fast:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware to Big Smooth Knob (QMK)\nDESCRIPTION: This command flashes the compiled firmware to the Big Smooth Knob keyboard.  It assumes the keyboard is connected and in a state ready to receive the firmware.  It requires QMK to be set up correctly with appropriate flashing tools configured.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/nacly/bigsmoothknob/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake nacly/bigsmoothknob:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing QK65 Solder PCB Firmware (Makefile)\nDESCRIPTION: Builds and flashes the default keymap for the QK65 solder PCB keyboard. Requires a properly configured QMK build environment and a connected keyboard in bootloader mode. This command combines the build and flash steps.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/qwertykeys/qk65/solder/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake qwertykeys/qk65/solder:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing EC 60 Firmware with QMK\nDESCRIPTION: This command flashes the compiled firmware onto the EC 60 keyboard. It requires the QMK build environment to be set up and the keyboard to be in a state ready to receive the firmware, typically bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cipulot/ec_60/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake cipulot/ec_60:default:flash\n```\n\n----------------------------------------\n\nTITLE: Backing up Original Firmware with dfu-util\nDESCRIPTION: This command backs up the original firmware of the Durgod K3X0 keyboard using dfu-util. It specifies the device ID, memory address, and output file name for the backup. This provides a safety net in case the user wants to revert to the original firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/durgod/k3x0/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndfu-util -a 0 -d 0483:DF11 -s 0x08000000 -U k3x0_original.bin\n```\n\n----------------------------------------\n\nTITLE: Building Satisfaction75 Rev2 Firmware\nDESCRIPTION: This command builds the default firmware for the Satisfaction75 Revision 2 keyboard. It uses the QMK make system to compile the firmware based on the configuration files for the specified keyboard and layout.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cannonkeys/satisfaction75/rev2/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake cannonkeys/satisfaction75/rev2:default\n```\n\n----------------------------------------\n\nTITLE: Row Pin Configuration for H87a\nDESCRIPTION: Defines the row pin configuration for the H87a keyboard PCB. It maps row numbers to the corresponding pins on the Atmega32u4 microcontroller. This configuration is essential for reading key presses from the keyboard matrix.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/hineybush/h87a/readme.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n/* Row pin configuration\n * row: 0   1   2   3   4   5   6   7   8   9   10  11\n * pin: B0  B1  B2  B3  D0  D1  B5  B6  D7  B4  D6  D4  (Rev 1)\n */\n```\n\n----------------------------------------\n\nTITLE: Building 6-Ball Macropad Firmware with QMK\nDESCRIPTION: This command builds the default keymap for the 6-Ball macropad using the QMK build system. It requires the QMK build environment to be set up correctly and utilizes the make command with the specified keyboard and keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/maple_computing/6ball/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake maple_computing/6ball:default\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for Mode M256-WS PCB\nDESCRIPTION: This command builds the default layout for the Mode M256-WS PCB using the QMK build environment. Ensure the build environment is properly set up before running this command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mode/m256ws/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake mode/m256ws:default\n```\n\n----------------------------------------\n\nTITLE: Flashing the Navpad Side Firmware\nDESCRIPTION: This command flashes the left-hand side (Navpad) firmware using `avrdude` and split keyboard functionality. It requires the QMK build environment and `avrdude` to be configured. The `:avrdude-split-left` target specifies flashing for the left side of a split keyboard setup.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/yushakobo/navpad/10_helix_r/readme.md#_snippet_2\n\nLANGUAGE: Makefile\nCODE:\n```\nmake yushakobo/navpad/10_helix_r:default:avrdude-split-left\n```\n\n----------------------------------------\n\nTITLE: Defining Display Rotation Enum\nDESCRIPTION: Defines an enumeration type `display_rotation_t` with possible values `DISPLAY_ROTATION_0` and `DISPLAY_ROTATION_180`.  These represent the rotation of the display output.  This is used to configure the display during initialization.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/st7565.md#_snippet_5\n\nLANGUAGE: C\nCODE:\n```\n// Rotation enum values are flags\ntypedef enum {\n    DISPLAY_ROTATION_0,\n    DISPLAY_ROTATION_180\n} display_rotation_t;\n```\n\n----------------------------------------\n\nTITLE: Building merro60 with QMK\nDESCRIPTION: This command builds the default keymap for the merro60 keyboard using the QMK firmware build environment. It assumes the QMK build environment is already set up.  The resulting firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/chlx/merro60/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake chlx/merro60:default\n```\n\n----------------------------------------\n\nTITLE: Flashing firmware to EC 23U Numpad in QMK\nDESCRIPTION: This command builds and flashes the default firmware to the EC 23U numpad.  It requires a configured QMK build environment and a connected EC 23U device in a flashable state (e.g., bootloader mode).\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cipulot/ec_23u/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake cipulot/ec_23u:default:flash\n```\n\n----------------------------------------\n\nTITLE: Configuring PWM Pin (config.h)\nDESCRIPTION: Defines the audio output pin for software PWM signal generation. The selected pin will output a PWM signal generated from a timer callback which toggles the pin in software.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/audio.md#_snippet_8\n\nLANGUAGE: c\nCODE:\n```\n#define AUDIO_PIN C13\n```\n\n----------------------------------------\n\nTITLE: Keyboard Matrix Diagram\nDESCRIPTION: This diagram represents the keyboard matrix for the jaykeeb joker keyboard. Each cell represents a key, and the coordinates (row and column) indicate its position in the matrix. The diagram shows the key layout and how the rows and columns are connected to detect key presses.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/jaykeeb/joker/matrix_diagram.md#_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n┌───┐┌───┬───┬───┬───┐┌───┬───┬───┬───┐┌───┬───┬───┬───┐┌───┐┌───┐┌───┬───┬───┬───┐\n│00 ││01 │02 │03 │04 ││05 │06 │07 │08 ││09 │0A │0B │0C ││0D ││0E ││0F │0G │0H │0I │\n└───┘└───┴───┴───┴───┘└───┴───┴───┴───┘└───┴───┴───┴───┘└───┘└───┘└───┴───┴───┴───┘\n┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┐┌───┐┌───┬───┬───┬───┐    ┌───────┐\n│10 │11 │12 │13 │14 │15 │16 │17 │18 │19 │1A │1B │1C │1D │2D ││1E ││1F │1G │1H │1I │    │1E     │ 2u Backspace\n├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴───┤├───┤├───┼───┼───┼───┤    └───────┘\n│20   │21 │22 │23 │24 │25 │26 │27 │28 │29 │2A │2B │2C │3D   ││2E ││2F │2G │2H │   │  \n├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴─────┤├───┤├───┼───┼───┤2I │ \n│30    │31 │32 │33 │34 │35 │36 │37 │38 │39 │3A │3B │3C      ││3E ││3F │3G │3H │   │ \n├──────┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴────┬───┘└───┘├───┼───┼───┼───┤ \n│40      │42 │43 │44 │45 │46 │47 │48 │49 │4A │4B │4C    │┌───┐    │4F │4G │4H │   │\n├────┬───┴┬──┴─┬─┴───┴───┴───┴───┴───┴──┬┴───┴┬──┴──┬───┘│4D │    ├───┴───┼───┤4I │\n│50  │51  │52  │56                      │5A   │5B   │┌───┼───┼───┐│5F     │5H │   │\n└────┴────┴────┴────────────────────────┴─────┴─────┘│5C │5D │5E │└───────┴───┴───┘\n                                                     └───┴───┴───┘\n\n┌─────┬─────┬───────────────────────────┬─────┬─────┐\n│50   │51   │56                         │5A   │5B   │ WKL\n└─────┴─────┴───────────────────────────┴─────┴─────┘\n```\n\n----------------------------------------\n\nTITLE: Building Keyboard Firmware: QMK Make Command\nDESCRIPTION: This command is used to build the QMK firmware for the handwired/jankrp2040dactyl keyboard with the default keymap. It compiles the source code and generates the firmware binary that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/jankrp2040dactyl/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake handwired/jankrp2040dactyl:default\n```\n\n----------------------------------------\n\nTITLE: Building Wren Keyboard Firmware (QMK)\nDESCRIPTION: This command builds the default keymap for the Wren keyboard. It requires a properly set up QMK build environment as a prerequisite.  The output is the firmware file ready to be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wren/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake wren:default\n```\n\n----------------------------------------\n\nTITLE: Flashing the keyboard firmware\nDESCRIPTION: This command flashes the compiled firmware to the takashicompany/klec_01 keyboard using the default keymap. It assumes the QMK build environment is set up and the keyboard is connected.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/takashicompany/klec_01/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake takashicompany/klec_01:default:flash\n```\n\n----------------------------------------\n\nTITLE: Adding Conflicting File and Continuing Rebase - Bash\nDESCRIPTION: This snippet adds the resolved conflicting file to the staging area and then continues the rebase operation.  It requires that the conflicting file has been manually edited to resolve the conflicts. The `git add` command stages the changes, and `git rebase --continue` command proceeds with the rebase.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/newbs_git_resolving_merge_conflicts.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit add conflicting_file_1.txt\ngit rebase --continue\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware to myskeeb Keyboard\nDESCRIPTION: This command builds and flashes the firmware to the handwired/myskeeb keyboard with the default keymap. It requires a connected and properly configured keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/myskeeb/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/myskeeb:default:flash\n```\n\n----------------------------------------\n\nTITLE: Listing Keyboards - qmk list-keyboards\nDESCRIPTION: Lists all the keyboards currently defined in `qmk_firmware`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/cli_commands.md#_snippet_24\n\nLANGUAGE: shell\nCODE:\n```\nqmk list-keyboards\n```\n\n----------------------------------------\n\nTITLE: Building Kyria Firmware (rev3)\nDESCRIPTION: This command builds the QMK firmware for the Kyria keyboard with revision 3 using the default configuration. It requires a properly set up QMK build environment. The output will be a .hex or .bin file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/splitkb/kyria/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake splitkb/kyria/rev3:default\n```\n\n----------------------------------------\n\nTITLE: QMK Build Commands - Helix Keyboard\nDESCRIPTION: These commands demonstrate how to build QMK firmware for the Helix keyboard with various configurations, including with/without OLED, backlight, underglow, and animations. The `make` command compiles the firmware based on the specified keyboard and keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/helix/rev2/keymaps/default/readme.md#_snippet_7\n\nLANGUAGE: Makefile\nCODE:\n```\n$ make helix:default                         # with oled\n$ make helix/rev2/back:default               # with oled and backlight\n$ make HELIX=no-ani helix/rev2/back:default  # with oled and backlight without animation\n$ make helix/rev2/under:default              # with oled and underglow\n$ make HELIX=no-oled helix:default           # without oled\n```\n\n----------------------------------------\n\nTITLE: Kibou Harbour Keyboard Matrix Diagram\nDESCRIPTION: This is a visual representation of the Kibou Harbour keyboard's matrix layout. It illustrates the arrangement of keys and potential configurations, including support for 2u backspace and ISO enter. However, some key assignments are unknown (marked with '??').\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kibou/harbour/matrix_diagram.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n                                                    ┌───────┐\n                                       2u Backspace │??     │\n                                                    └───────┘\n┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┐\n│00 │01 │02 │03 │04 │05 │06 │07 │08 │09 │0A │0B │0C │0D │0E │0F │\n├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴───┼───┤      ┌─────┐\n│10   │12 │13 │14 │15 │16 │17 │18 │19 │1A │1B │1C │1D │1E   │1F │      │     │\n├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴─────┼───┤   ┌──┴┐??  │ ISO Enter\n│20    │22 │23 │24 │25 │26 │27 │28 │29 │2A │2B │2C │2E      │2F │   │?? │    │\n├────┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴────┬───┼───┤   └───┴────┘\n│30  │?? │32 │33 │34 │35 │36 │37 │38 │39 │3A │3B │3D    │3E │3F │\n├────┴┬──┴┬──┴──┬┴───┴───┴───┴───┴───┴───┴──┬┴───┴┬─┬───┼───┼───┤\n│40   │42 │43   │47                         │4B   │ │4D │4E │4F │\n└─────┴───┴─────┴───────────────────────────┴─────┘ └───┴───┴───┘\n┌────────┐\n│30      │ 2.25u LShift\n└────────┘\n┌─────┬──┬─────┬───────────────────────────┬─────┐\n│40   │  │43   │47                         │4B   │ Blocker WKL\n└─────┘  └─────┴───────────────────────────┴─────┘\n```\n\n----------------------------------------\n\nTITLE: Flashing Sauce Mild Keyboard Firmware\nDESCRIPTION: This command builds and flashes the default firmware for the Sauce Mild keyboard using the QMK build environment. It requires the QMK environment to be properly configured and the keyboard to be in flashing mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/sauce/mild/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake sauce/mild:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing XD84 Keyboard Firmware\nDESCRIPTION: This command flashes the compiled firmware onto the XD84 keyboard. It uses the QMK build environment. Make sure the board is in the correct flashing mode before executing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/xiudi/xd84/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake xiudi/xd84:default:flash\n```\n\n----------------------------------------\n\nTITLE: Making the Cypher keyboard with QMK\nDESCRIPTION: This snippet shows how to make the cypher keyboard with the rev5 pcb using the default keymap. It is built using the make command inside the QMK firmware environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/westfoxtrot/cypher/rev5/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake westfoxtrot/cypher/rev5:default\n```\n\n----------------------------------------\n\nTITLE: Building BM42 Firmware\nDESCRIPTION: This command compiles the default keymap for the BM42 keyboard. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kb_elmo/bm42/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake kb_elmo/bm42:default\n```\n\n----------------------------------------\n\nTITLE: Building Rosaline Firmware (Staggered)\nDESCRIPTION: This command builds the QMK firmware for the Rosaline keyboard with a staggered layout using the default keymap. It assumes that the QMK build environment is already set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/peej/rosaline/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake peej/rosaline/staggered:default\n```\n\n----------------------------------------\n\nTITLE: Flashing mini_elixivy Firmware (Make)\nDESCRIPTION: This command flashes the default firmware to the mini_elixivy keyboard. It relies on the `make` command and assumes the QMK build environment and flashing tools are properly configured.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mini_elixivy/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake mini_elixivy:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Cantor Keyboard Firmware\nDESCRIPTION: This command is used to build the default firmware for the Cantor keyboard. It compiles the keyboard layout and generates the firmware file that can be flashed onto the device. The command requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cantor/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake cantor:default\n```\n\n----------------------------------------\n\nTITLE: Building the Firmware\nDESCRIPTION: This command builds the default firmware for the Bruce keyboard using the QMK build environment.  It compiles the keymap and firmware for the specified keyboard and keymap. Requires QMK build environment to be set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/jlw/bruce_the_keyboard/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake jlw/bruce_the_keyboard:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware for Noah AVR\nDESCRIPTION: This command flashes the compiled firmware to the Noah AVR keyboard. It depends on the build environment being set up and the firmware being successfully built.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kb_elmo/noah_avr/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake kb_elmo/noah_avr:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Akko 5108 Keyboard Firmware\nDESCRIPTION: This command builds the default keymap for the Akko 5108 keyboard using the QMK build environment. It compiles the firmware and prepares it for flashing onto the keyboard. Ensure the QMK build environment is properly set up before running this command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/akko/5108/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake akko/5108:default\n```\n\n----------------------------------------\n\nTITLE: Flashing the pi60 keyboard\nDESCRIPTION: This command flashes the built firmware onto the pi60 keyboard.  It assumes the keyboard is connected and the QMK build environment is set up correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/1upkeyboards/pi60/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake 1upkeyboards/pi60:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building firmware for Golden Delicious PCB using QMK\nDESCRIPTION: These commands are used to build the firmware for the Golden Delicious keyboard PCB using the QMK build environment.  The specific configurations are 'default', 'm0116', and 'm0118'. It requires a properly set up QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/sck/m0116b/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake sck/m0116b:default\nmake sck/m0116b:m0116\nmake sck/m0116b:m0118\n```\n\n----------------------------------------\n\nTITLE: Flashing QMK Firmware to Fine!40\nDESCRIPTION: This command flashes the compiled QMK firmware to the Fine!40 keyboard. It requires a compatible flashing tool (e.g., dfu-util) and that the keyboard is in bootloader mode. Replace 'default' with the appropriate keymap if needed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/aidansmithdotdev/fine40/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake aidansmithdotdev/fine40:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Koalafications Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the Koalafications keyboard. It assumes that the QMK build environment is already set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/swiftrax/koalafications/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/swiftrax/koalafications:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Tenkey++ with default layout in QMK\nDESCRIPTION: This command flashes the Tenkey++ keyboard with the default layout firmware using the QMK build environment. This also requires the QMK build environment to be set up. It programs the compiled firmware onto the keyboard, enabling its functionality.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/lizard_trick/tenkey_plusplus/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake lizard_trick/tenkey_plusplus:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building the Firmware for Plywrks Allaro using QMK\nDESCRIPTION: This command builds the QMK firmware for the Plywrks Allaro keyboard using the VIA keymap.  It requires a configured QMK build environment as a prerequisite. The output is a .hex file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/plywrks/allaro/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake plywrks/allaro:via\n```\n\n----------------------------------------\n\nTITLE: Building Scotto40 Firmware - Make Command\nDESCRIPTION: This command builds the default firmware for the Scotto40 keyboard using the QMK build environment. It assumes the build environment has already been set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/scottokeebs/scotto40/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake handwired/scottokeebs/scotto40:default\n```\n\n----------------------------------------\n\nTITLE: Flashing ISO85K Firmware with QMK\nDESCRIPTION: This command flashes the compiled firmware onto the ISO85K keyboard using the QMK build environment. It requires the keyboard to be in bootloader mode for successful flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/iso85k/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/iso85k:via:flash\n```\n\n----------------------------------------\n\nTITLE: Building Red Scarf II+ Ver.D Firmware with Make\nDESCRIPTION: This command builds the default keymap for the Red Scarf II+ Ver.D keyboard using the QMK Firmware build environment. It relies on the QMK make system and requires a properly configured build environment. The output is the compiled firmware that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/redscarf_iiplus/verd/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake redscarf_iiplus/verd:default\n```\n\n----------------------------------------\n\nTITLE: Flashing QMK Firmware\nDESCRIPTION: Flashes the compiled QMK firmware onto the viktus/osav2_numpad_topre keyboard using the default keymap. This command requires a properly configured build environment and a connected keyboard in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/viktus/osav2_numpad_topre/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake viktus/osav2_numpad_topre:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building BM60HSRGB Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the BM60HSRGB/rev2 keyboard using the QMK build environment.  It requires a properly configured QMK build environment. The resulting firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kprepublic/bm60hsrgb/rev2/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake kprepublic/bm60hsrgb/rev2:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Wearhaus66 Firmware with QMK\nDESCRIPTION: This command flashes the built QMK firmware onto the Wearhaus66 keyboard. It assumes the QMK build environment is set up and uses the `make` command with the `:flash` target.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechlovin/zed65/no_backlight/wearhaus66/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake mechlovin/zed65/no_backlight/wearhaus66:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing falsonix/fx19 Firmware with QMK\nDESCRIPTION: This command builds and flashes the default keymap for the falsonix/fx19 keyboard using the QMK build environment. It requires QMK to be properly set up and the keyboard to be in bootloader mode. Flashing will overwrite existing firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/falsonix/fx19/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake falsonix/fx19:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing TG67 Keyboard Firmware\nDESCRIPTION: This command builds and flashes the default firmware for the TG67 keyboard. It requires the QMK build environment and a configured flashing tool.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/tg67/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake tg67:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing the GMMK Numpad Firmware\nDESCRIPTION: This command builds and flashes the default firmware for the GMMK Numpad onto the device.  It depends on the QMK build environment and a connected GMMK Numpad in bootloader mode. Requires appropriate permissions to access the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/gmmk/numpad/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake gmmk/numpad:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Mini Firmware with QMK for Postage Board\nDESCRIPTION: These commands are used to build the firmware for the Mini Postage Board keyboard using the QMK build environment. The `make` command compiles the keyboard layout specified (e.g., `handwired/postageboard/mini:default`) into a firmware that can be flashed onto the Postage Board. It relies on the QMK build environment being properly set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/postageboard/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake handwired/postageboard/mini:default\n```\n\n----------------------------------------\n\nTITLE: Building Pterodactyl Keyboard Firmware\nDESCRIPTION: This command builds the firmware for the Pterodactyl keyboard with the default keymap. It assumes that the QMK build environment has already been set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/pterodactyl/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/pterodactyl:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Skjöldr Keyboard Firmware (QMK)\nDESCRIPTION: This command is used to flash the compiled firmware onto the Skjöldr keyboard. It assumes that the QMK build environment is set up and that the firmware has already been built. It uses the appropriate flashing tool to write the firmware to the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/runes/skjoldr/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake runes/skjoldr:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Nemui Keyboard Firmware (Makefile)\nDESCRIPTION: This command flashes the default firmware onto the Nemui keyboard using the QMK build environment.  It requires the keyboard to be in a flashable state (e.g., bootloader mode). Requires a properly configured QMK build environment and appropriate flashing tools.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/nemui/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake nemui:default:flash\n```\n\n----------------------------------------\n\nTITLE: Compiling Scylla Firmware with QMK\nDESCRIPTION: This command compiles the Scylla keyboard firmware using the QMK toolchain.  It requires specifying the keyboard, version, and keymap. The command uses `qmk compile` with flags for keyboard (`-kb`) and keymap (`-km`).\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/bastardkb/scylla/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nqmk compile -kb bastardkb/scylla/{VERSION}/elitec -km {KEYMAP}\n```\n\n----------------------------------------\n\nTITLE: Flashing ERA65 Firmware with QMK\nDESCRIPTION: This command builds and flashes the default firmware to the ERA65 keyboard using the QMK build environment. It assumes the QMK build environment is configured correctly and a flashing tool (e.g., dfu-util) is available. The target keyboard must be in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/era/era65/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake era/era65:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Artemis/Paragon Firmware\nDESCRIPTION: This command builds the default hotswap version of the Artemis/Paragon keyboard firmware using the QMK build environment. It compiles the source code and generates a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/artemis/paragon/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake artemis/paragon/hotswap:default\n```\n\n----------------------------------------\n\nTITLE: Building Frankie Macropad Firmware\nDESCRIPTION: This command builds the firmware for the Frankie Macropad keyboard with the default keymap. It utilizes the QMK build environment to compile the code for the specified keyboard and keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/frankie_macropad/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake handwired/frankie_macropad:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware to SHARKOON SKILLER SGK50 S4 (QMK)\nDESCRIPTION: This command flashes the compiled firmware to the SHARKOON SKILLER SGK50 S4 keyboard using the QMK build environment. It requires a properly configured QMK build environment and the keyboard to be in bootloader mode. This command assumes the default flashing method configured in QMK.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/sharkoon/skiller_sgk50_s4/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake sharkoon/skiller_sgk50_s4:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Keychron Q4 Firmware\nDESCRIPTION: This snippet shows how to flash the compiled firmware to the Keychron Q4 keyboard.  It uses the `make` command with the `:flash` target, specifying the keyboard, layout, and version.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keychron/q4/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake keychron/q4/ansi/v1:default:flash\nmake keychron/q4/ansi/v2:default:flash\nmake keychron/q4/iso:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing 3Key Firmware\nDESCRIPTION: This command flashes the default firmware onto the 3Key keyboard. It relies on a properly configured QMK build environment and a connected keyboard in a flashable state. The 'flash' target utilizes the appropriate flashing tool for the target microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mwstudio/mmk_3/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake mwstudio/mmk_3:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Herringbone Pro Keyboard Firmware with QMK\nDESCRIPTION: This command builds the firmware for the Herringbone Pro keyboard using the default keymap within the QMK firmware environment. It presupposes a correctly set-up QMK build environment. The result is a .hex file, flashable to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/rmi_kb/herringbone/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake ramonimbao/herringbone/pro:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Mesa TKL Firmware\nDESCRIPTION: This command flashes the default firmware onto the Mesa TKL keyboard. It uses the `make` command with the target `mesa/mesa_tkl:default:flash`. The board must be in bootloader mode for this command to succeed. Short the two exposed pads labeled \"RESET\" next to the MCU to enter bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mesa/mesa_tkl/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake mesa/mesa_tkl:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing BM16A V2 Firmware\nDESCRIPTION: Flashes the compiled firmware onto the BM16A V2 macropad.  This command uploads the QMK firmware to the device. A correctly setup QMK build environment and a connected BM16A V2 macropad in bootloader mode are required.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kprepublic/bm16a/v2/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake kprepublic/bm16a/v2:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware to RAMA WORKS M50-AX (QMK)\nDESCRIPTION: This command flashes the compiled firmware to the RAMA WORKS M50-AX keyboard. It uses the QMK build environment and the dfu-programmer or similar tool to upload the firmware to the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wilba_tech/rama_works_m50_ax/readme.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nmake wilba_tech/rama_works_m50_ax:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Keyboard with QMK\nDESCRIPTION: This command flashes the keyboard firmware using the QMK toolbox. It specifies the keyboard layout and keymap to use during the flashing process, ensuring the correct configuration for the custom 68keys keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/sowbug/68keys/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nqmk flash -kb sowbug/68keys -km default\n```\n\n----------------------------------------\n\nTITLE: Building BM40hsrgb Firmware (rev2)\nDESCRIPTION: This command builds the default firmware for revision 2 of the kprepublic/bm40hsrgb keyboard using the QMK build environment. It compiles the source code and creates a firmware image ready to be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kprepublic/bm40hsrgb/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake kprepublic/bm40hsrgb/rev2:default\n```\n\n----------------------------------------\n\nTITLE: Building DZ60RGB Firmware (AVR V2)\nDESCRIPTION: This command compiles the QMK firmware for the DZ60RGB-WKL V2 keyboard, which uses an ATmega32U4 AVR microcontroller. A QMK build environment is needed for this operation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/dztech/dz60rgb_wkl/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake dztech/dz60rgb_wkl/v2:default # AVR (ATmega32U4)\n```\n\n----------------------------------------\n\nTITLE: Flashing FoldKB Keyboard Firmware\nDESCRIPTION: This command compiles and flashes the firmware to the FoldKB keyboard. It builds the firmware and then uses the appropriate flashing tool to program the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keebio/foldkb/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake keebio/foldkb/rev1:default:flash\n```\n\n----------------------------------------\n\nTITLE: Enabling Retro Tapping in QMK Firmware (C)\nDESCRIPTION: This code snippet shows how to enable Retro Tapping globally by defining `RETRO_TAPPING` in `config.h`.  With this enabled, releasing a dual-function key without pressing another key will send the original keycode even if it is outside the tapping term.  Dependencies include a functional QMK firmware setup.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/tap_hold.md#_snippet_19\n\nLANGUAGE: c\nCODE:\n```\n#define RETRO_TAPPING\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for YMD75 V4\nDESCRIPTION: This command builds the default firmware for the ISO layout of the YMD75 V4 keyboard. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ymdk/ymd75/rev4/iso/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake ymdk/ymd75/rev4/iso:default\n```\n\n----------------------------------------\n\nTITLE: Atmega32u4 Fuse and Lock Bits\nDESCRIPTION: Defines the low, high, extended fuses and lock byte values for the Atmega32u4 microcontroller, commonly used in Planck/Atomic/Preonic keyboards. These values configure the device's behavior and security settings.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/fuse.txt#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nLow Fuse: 0x5E\nHigh Fuse: 0x99\nExtended Fuse: 0xF3\nLock Byte: 0xFF\n```\n\n----------------------------------------\n\nTITLE: Building bm43hsrgb firmware with QMK\nDESCRIPTION: This command builds the default firmware for the kprepublic/bm43hsrgb keyboard using the QMK build environment. Ensure the build environment is set up correctly before executing this command. It produces a firmware file suitable for flashing onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kprepublic/bm43hsrgb/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake kprepublic/bm43hsrgb:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Left Half of K8split Keyboard\nDESCRIPTION: This command flashes the left half of the K8split keyboard with the 'left' keymap. This assumes that the QMK build environment has already been set up and the keyboard is connected correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/k8split/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake handwired/k8split:left:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing GHS/XLS Keyboard Firmware - Make\nDESCRIPTION: This command flashes the default firmware onto the GHS/XLS keyboard using the make command. It requires a correctly configured QMK build environment and a connected keyboard in flashable mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ghs/xls/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake ghs/xls:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Rect44 Firmware\nDESCRIPTION: This command builds the default keymap for the Rect44 keyboard using the QMK build environment. It compiles the source code and generates a firmware file ready for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/rect44/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake rect44:default\n```\n\n----------------------------------------\n\nTITLE: Building Bastion60 Firmware using Make\nDESCRIPTION: This command compiles the QMK firmware for the Bastion60 keyboard with the default keymap. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cannonkeys/bastion60/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake cannonkeys/bastion60:default\n```\n\n----------------------------------------\n\nTITLE: Flashing E80-1800 Firmware with QMK\nDESCRIPTION: This command flashes the default firmware onto the E80-1800 keyboard using the QMK build environment. It programs the compiled firmware image onto the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ebastler/e80_1800/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake ebastler/e80_1800:default\n```\n\n----------------------------------------\n\nTITLE: Flashing ISOlation Firmware\nDESCRIPTION: This command builds and flashes the default firmware to the ISOlation keyboard. It requires a properly set up QMK build environment and a connected keyboard. The command assumes the bootloader is already set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kb_elmo/isolation/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake kb_elmo/isolation:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building WT69-A Firmware using QMK\nDESCRIPTION: This snippet shows how to build the default firmware for the wilba_tech WT69-A keyboard using the QMK build environment.  It requires the QMK build environment to be set up beforehand. The command compiles the keyboard's firmware with the default configuration.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wilba_tech/wt69_a/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake wilba_tech/wt69_a:default\n```\n\n----------------------------------------\n\nTITLE: Building Eden Keyboard Firmware - Make Command\nDESCRIPTION: This command builds the default keymap for the Eden keyboard using the QMK build environment. It assumes that the QMK firmware repository is set up correctly and that the necessary tools are installed. The output will be a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/zeix/eden/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake zeix/eden:default\n```\n\n----------------------------------------\n\nTITLE: Building BB Steno Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the BB Steno keyboard using the QMK build environment. It compiles the keymap and other configurations to create a flashable firmware image.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechwild/bbs/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake mechwild/bbs:default\n```\n\n----------------------------------------\n\nTITLE: Building Efreet Keyboard Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Efreet keyboard using the QMK Firmware build environment. It compiles the keyboard's keymap and other configurations into a firmware image that can be flashed onto the keyboard's microcontroller. Requires QMK build environment setup.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/efreet/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake efreet:default\n```\n\n----------------------------------------\n\nTITLE: Formatting Python Code - Python\nDESCRIPTION: Formats the Python code in the QMK CLI using the `format-python` subcommand. This command uses a code formatter to automatically adjust the code's style to conform to the project's standards.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/cli_development.md#_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\nqmk format-python\n```\n\n----------------------------------------\n\nTITLE: Building Rooboard65 QMK Firmware\nDESCRIPTION: This command builds the default QMK firmware for the FJLabs Rooboard65 keyboard. It assumes that the QMK build environment is already set up according to the QMK documentation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/skippys_custom_pcs/rooboard65/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake skippys_custom_pcs/rooboard65:default\n```\n\n----------------------------------------\n\nTITLE: Flashing CRBN Firmware with Make\nDESCRIPTION: This command builds and flashes the default firmware for the CRBN keyboard to the Pro Micro controller. It requires a properly configured QMK build environment and a connected keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/crbn/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake crbn:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for Orbweaver\nDESCRIPTION: This command builds the firmware for the handwired Orbweaver keyboard with the default keymap. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/orbweaver/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake handwired/orbweaver:default\n```\n\n----------------------------------------\n\nTITLE: Flashing QMK Firmware to IDOBAO ID61\nDESCRIPTION: This command flashes the compiled QMK firmware to the IDOBAO ID61 keyboard. It combines the compilation and flashing steps into a single command using `make`. The command requires the QMK build environment to be properly configured and the keyboard to be in a flashable state.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/idobao/id61/readme.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nmake idobao/id61:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Skog Lite Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the Skog Lite keyboard using the QMK build environment. It requires the QMK build environment to be set up. The output is the compiled firmware file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/percent/skog_lite/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake percent/skog_lite:default\n```\n\n----------------------------------------\n\nTITLE: Kimera Core Component Pinout\nDESCRIPTION: This C-style comment block defines the pinout and component connections for the Kimera core v1.0 keyboard. It illustrates the connections between the atmega32u4 microcontroller, PCA9555 I2C IO expanders (IC1 and IC2), and various components such as LEDs and I2C communication lines.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/switchplate/southpaw_65/dev.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n/*\nKimera_core_v1.0 Components\n\n             U1 (atmega32u4)\n           ,----------------.\n      TX --| TX0(PD3)   RAW |--\n      RX --| RX1(PD2)   GND |--\n         --| GND      RESET |-- RST\n         --| GND        VCC |--\n     SDA --| 2(PD1) (PF4)A3 |--\n     SCL --| 3(PD0) (PF5)A2 |--\n   (INT) --| 4(PD4) (PF6)A1 |--\n         --| 5(PC6) (PF7)A0 |--\n         --| 6(PD7) (PB1)15 |-- SCK\n    LED2 --| 7(PE6) (PB3)14 |-- MISO\n    LED1 --| 8(PB4) (PB2)16 |-- MOSI\n    LED3 --| 9(PB5) (PB6)10 |-- LED4\n          `----------------'\n\n         IC1 (PCA9555)                  IC2 (PCA9555)\n         ,----------.                   ,----------.\n   SDA --| SDA  P00 |-- P1        SDA --| SDA  P00 |-- P17\n   SCL --| SCL  P01 |-- P2        SCL --| SCL  P01 |-- P18\n   INT --| INT  P02 |-- P3        INT --| INT  P02 |-- P19\n         |      P03 |-- P4              |      P03 |-- P20\n   GND --| A0   P04 |-- P5        VCC --| A0   P04 |-- P21\n   SJ1 --| A1   P05 |-- P6        SJ1 --| A1   P05 |-- P22\n   SJ2 --| A2   P06 |-- P7        SJ2 --| A2   P06 |-- P23\n         |      P07 |-- P8              |      P07 |-- P24\n         |          |                   |          |\n         |      P10 |-- P9              |      P10 |-- P25\n         |      P11 |-- P10             |      P11 |-- P26\n         |      P12 |-- P11             |      P12 |-- P27\n         |      P13 |-- P12             |      P13 |-- P28\n         |      P14 |-- P13             |      P14 |-- P29\n         |      P15 |-- P14             |      P15 |-- P30\n         |      P16 |-- P15             |      P16 |-- P31\n         |      P17 |-- P16             |      P17 |-- P32\n         `----------'                   `----------'\n*/\n```\n\n----------------------------------------\n\nTITLE: Building Wang V2 Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the Wang V2 keyboard using the QMK build environment.  It uses the `make` command with the keyboard and keymap specified. Prerequisites include a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ocean/wang_v2/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake ocean/wang_v2:default\n```\n\n----------------------------------------\n\nTITLE: Building 3dp660 Keyboard Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the 3dp660 keyboard using the QMK build environment. It requires QMK to be set up correctly with all necessary dependencies installed. The output is a .hex file that can be flashed to the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/3dp660/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake handwired/3dp660:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Zed65-Mono Keyboard Firmware\nDESCRIPTION: This command flashes the built firmware onto the Zed65-Mono keyboard. It uses the `mechlovin/zed65/mono_led` keyboard definition, the `default` keymap, and the `flash` target. It requires the QMK build environment and a compatible bootloader on the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechlovin/zed65/mono_led/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake mechlovin/zed65/mono_led:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Vega Keyboard Firmware with Make\nDESCRIPTION: This snippet shows how to build the default firmware for the Vega keyboard using the QMK make command.  It requires a properly configured QMK build environment as per the documentation. The output will be a firmware file ready for flashing onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ai03/vega/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake ai03/vega:default\n```\n\n----------------------------------------\n\nTITLE: Building Osborne1 Keyboard Firmware (QMK)\nDESCRIPTION: This command builds the default keymap for the Osborne1 keyboard using the QMK build environment. It requires the QMK build environment to be properly set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/osborne1/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake osborne1:default\n```\n\n----------------------------------------\n\nTITLE: Flashing the Tomak79S Keyboard Firmware\nDESCRIPTION: This command builds and flashes the default firmware for the SIRIND Tomak79S keyboard. It requires a correctly configured QMK build environment and a connected keyboard in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/era/sirind/tomak79s/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake era/sirind/tomak79s:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Boston Meetup Macropad Firmware (Makefile)\nDESCRIPTION: This command builds the QMK firmware for a specific Boston Meetup macropad. Replace YYYY with the year of the macropad version (e.g., 2018, 2019). Ensure that the QMK build environment is properly set up before running this command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/boston_meetup/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake boston_meetup/YYYY:default\n```\n\n----------------------------------------\n\nTITLE: Flashing LXXT keyboard firmware\nDESCRIPTION: This command builds and flashes the default firmware to the LXXT keyboard using the QMK build environment. It requires the keyboard to be connected to the computer and in a state where it can receive the firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/lxxt/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake lxxt:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware to Neson Design 810E - Make Command\nDESCRIPTION: This command flashes the compiled firmware to the Neson Design 810E keyboard. It requires QMK build environment and a configured flashing tool. The command uploads the compiled firmware to the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/neson_design/810e/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake neson_design/810e:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Pluckey Firmware (QMK)\nDESCRIPTION: This command builds the QMK firmware for the Pluckey keyboard with the default keymap. It requires a properly set up QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/pluckey/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake pluckey:default\n```\n\n----------------------------------------\n\nTITLE: Compiling Keyhive Sofle Keyboard\nDESCRIPTION: This command compiles the default keymap for the Keyhive Sofle keyboard using the QMK build environment. It's necessary to have the QMK build environment properly configured before running this command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/sofle/keyhive/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake sofle/keyhive:default\n```\n\n----------------------------------------\n\nTITLE: Old OLED task function in keymap\nDESCRIPTION: This C code shows the old way keymap code would override the OLED drawing.  The `oled_task_user` function was simply defined without a return value, meaning it fully replaced any keyboard-level implementation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/ChangeLog/20211127.md#_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nvoid oled_task_user(void) {\n    // keymap drawing code\n}\n```\n\n----------------------------------------\n\nTITLE: Get Display Offset Y (C)\nDESCRIPTION: This snippet defines the `qp_get_offset_y` function, which returns the Y offset of the display viewport.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/quantum_painter.md#_snippet_82\n\nLANGUAGE: c\nCODE:\n```\nuint16_t qp_get_offset_y(painter_device_t device);\n```\n\n----------------------------------------\n\nTITLE: Building ECO Keyboard Firmware\nDESCRIPTION: This command builds the firmware for the ECO keyboard (rev2) with the `that_canadian` keymap using the QMK build environment. It requires the QMK build environment to be set up beforehand as described in the linked documentation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/eco/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake eco/rev2:that_canadian\n```\n\n----------------------------------------\n\nTITLE: Flashing Hub20 Firmware with QMK\nDESCRIPTION: This command flashes the default firmware onto the Hub20 keyboard using the QMK build environment. It requires the QMK environment to be configured and the necessary tools for flashing STM32 devices to be installed. The device needs to be in a state where it can accept the firmware (e.g., bootloader mode).\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/joshajohnson/hub20/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake joshajohnson/hub20:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware to Promenade Keyboard (QMK)\nDESCRIPTION: This command flashes the compiled firmware to the Promenade keyboard. It requires the QMK build environment to be set up and the keyboard to be in bootloader mode. It uses the default layout and assumes the flashing tools are correctly configured.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kradoindustries/promenade/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake kradoindustries/promenade:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Polyandry Firmware with QMK Compile\nDESCRIPTION: This command compiles the default firmware for the Polyandry keyboard using the `qmk compile` command.  It provides an alternative to the `make` command for compiling QMK firmwares. This command assumes the build environment has been set up as per QMK Firmware's documentation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/40percentclub/polyandry/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nqmk compile -kb 40percentclub/polyandry -km default\n```\n\n----------------------------------------\n\nTITLE: Flashing ScottoAlp Firmware with QMK Make\nDESCRIPTION: This command builds and flashes the default keymap for the ScottoAlp keyboard. It builds the firmware and then uses the appropriate flashing tool based on the keyboard's bootloader. This requires the QMK build environment and a connected keyboard in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/scottokeebs/scottoalp/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/jscotto/scottoalp:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building firmware for P3D Synapse keyboard\nDESCRIPTION: This command builds the default firmware for the P3D Synapse keyboard. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/p3d/synapse/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake p3d/synapse:default\n```\n\n----------------------------------------\n\nTITLE: Resetting to Upstream Master\nDESCRIPTION: This command resets the local `master` branch to match the `upstream/master` branch. The `--hard` flag discards any local changes, and the `--recurse-submodules` flag ensures that submodules are also reset. This effectively overwrites the local branch with the content of the upstream repository.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/newbs_git_resynchronize_a_branch.md#_snippet_5\n\nLANGUAGE: git\nCODE:\n```\ngit reset --recurse-submodules --hard upstream/master\n```\n\n----------------------------------------\n\nTITLE: Building JJ40 rev1 Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the JJ40 rev1 keyboard using the QMK build environment.  It compiles the keyboard layout and generates a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kprepublic/jj40/rev1/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake kprepublic/jj40/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Flashing the keyboard firmware with make\nDESCRIPTION: This command flashes the compiled QMK firmware to the Dactyl Manuform 5x8 keyboard. It requires a configured QMK build environment and a connected keyboard in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/dactyl_manuform/5x8/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/dactyl_manuform/5x8:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing EAVE Keyboard Firmware\nDESCRIPTION: This command flashes the compiled firmware to the Swagkeys EAVE keyboard. It requires the QMK build environment and appropriate flashing tools to be configured. The command builds and then flashes the firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/swagkeys/eave/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake swagkeys/eave:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Djinn keyboard firmware\nDESCRIPTION: This command builds and flashes the default firmware for the Djinn rev2 keyboard. It extends the build command by adding the flash target, requiring a configured build environment and a connected keyboard in flashing mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/tzarc/djinn/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake tzarc/djinn/rev2:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Sofle Choc Firmware with QMK\nDESCRIPTION: This command flashes the compiled QMK firmware to the Sofle Choc keyboard using the default keymap. It requires a properly set up QMK build environment and a connected Sofle Choc keyboard in flashing mode.  The keyboard's reset button needs to be pressed twice when prompted.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/sofle_choc/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake sofle_choc:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing the BM65HSRGB Firmware\nDESCRIPTION: This command flashes the built firmware to the BM65HSRGB keyboard. It assumes the board is connected and in a state ready to receive the firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kprepublic/bm65hsrgb/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake kprepublic/bm65hsrgb/rev1:default:flash\n```\n\n----------------------------------------\n\nTITLE: APA102 Initialization Function in C\nDESCRIPTION: This function, `apa102_init(void)`, initializes the APA102 LED driver. It sets up the necessary hardware and software configurations to enable communication with the APA102 LEDs. It should be called before any other APA102 API functions are used.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/apa102.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nvoid apa102_init(void)\n```\n\n----------------------------------------\n\nTITLE: Building Alf X1.1 Firmware with QMK\nDESCRIPTION: This command is used to compile the default keymap for the Alf X1.1 keyboard using the QMK firmware build environment.  It assumes that the QMK build environment has been properly set up according to the QMK documentation. The compiled firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/alf/x11/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake alf/x11:default\n```\n\n----------------------------------------\n\nTITLE: Building Okayu Firmware QMK\nDESCRIPTION: This command builds the default firmware for the Okayu keyboard using the QMK build environment. It targets the `sawnsprojects/okayu` keyboard and the `default` keymap. You must have the QMK build environment set up to execute this command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/sawnsprojects/okayu/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake sawnsprojects/okayu:default\n```\n\n----------------------------------------\n\nTITLE: Building Louhi Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the Louhi keyboard using the QMK build environment.  It assumes the QMK build environment has been properly set up. The output is a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/pohjolaworks/louhi/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake pohjolaworks/louhi:default\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for myskeeb Keyboard\nDESCRIPTION: This command builds the firmware for the handwired/myskeeb keyboard with the default keymap. It is used after setting up the QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/myskeeb/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/myskeeb:default\n```\n\n----------------------------------------\n\nTITLE: Configuring USB Device Drivers\nDESCRIPTION: This snippet demonstrates the configuration format for USB device drivers used with QMK firmware. Each line represents a device and specifies the driver type (winusb, libusb, or libusbk), a description, the Vendor ID (VID), Product ID (PID), and a unique GUID.  This configuration allows the QMK Toolbox to automatically recognize and flash compatible devices.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/util/drivers.txt#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nwinusb,STM32 Bootloader,0483,DF11,6d98a87f-4ecf-464d-89ed-8c684d857a75\nwinusb,APM32 Bootloader,314B,0106,9ff3cc31-6772-4a3f-a492-a80d91f7a853\nwinusb,STM32duino Bootloader,1EAF,0003,746915ec-99d8-4a90-a722-3c85ba31e4fe\nlibusbk,USBaspLoader,16C0,05DC,e69affdc-0ef0-427c-aefb-4e593c9d2724\nwinusb,Kiibohd DFU Bootloader,1C11,B007,aa5a3f86-b81e-4416-89ad-0c1ea1ed63af\nwinusb,ATmega16U2,03EB,2FEF,007274da-b75f-492e-a288-8fc0aff8339f\nwinusb,ATmega32U2,03EB,2FF0,ddc2c572-cb6e-4f61-a6cc-1a5de941f063\nwinusb,ATmega16U4,03EB,2FF3,3180d426-bf93-4578-a693-2efbc337da8e\nwinusb,ATmega32U4,03EB,2FF4,5f9726fd-f9de-487a-9fbd-8b3524a7a56a\nwinusb,AT90USB64,03EB,2FF9,c6a708ad-e97d-43cd-b04a-3180d737a71b\nwinusb,AT90USB162,03EB,2FFA,ef8546f0-ef09-4e7c-8fc2-ffbae1dcd84a\nwinusb,AT90USB128,03EB,2FFB,fd217df3-59d0-440a-a8f3-4c0c8c84daa3\n```\n\n----------------------------------------\n\nTITLE: Building Wete keyboard firmware\nDESCRIPTION: This command builds the default firmware for the Wete keyboard using the QMK build environment. It specifies the keyboard name (rmi_kb/wete/v1) and the keymap (default).\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/rmi_kb/wete/v1/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake rmi_kb/wete/v1:default\n```\n\n----------------------------------------\n\nTITLE: Proton-C Audio Configuration (config.h)\nDESCRIPTION: Example configuration for the Proton-C board, which uses pins A4 and A5 for audio output. It also defines `AUDIO_PIN_ALT_AS_NEGATIVE` to indicate that the pins are used to drive the piezo in opposite polarities.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/audio.md#_snippet_4\n\nLANGUAGE: c\nCODE:\n```\n#define AUDIO_PIN A5\n#define AUDIO_PIN_ALT A4\n#define AUDIO_PIN_ALT_AS_NEGATIVE\n```\n\n----------------------------------------\n\nTITLE: Building Opus Firmware with QMK\nDESCRIPTION: This command is used to build the default firmware for the Opus keyboard using the QMK firmware build environment. It assumes that the QMK build environment has been set up and configured correctly. The output will be a firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keyhive/opus/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake keyhive/opus:default\n```\n\n----------------------------------------\n\nTITLE: Making Neson Design N6 Firmware\nDESCRIPTION: This command builds the default firmware for the Neson Design N6 keyboard using the QMK build environment. It requires the QMK build environment to be set up. The output is the firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/neson_design/n6/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake neson_design/n6:default\n```\n\n----------------------------------------\n\nTITLE: Flashing GMMK V2 65% (ANSI) Firmware - Make\nDESCRIPTION: This command flashes the compiled firmware to the GMMK V2 65% ANSI keyboard using the QMK build environment. It uses the `make` command with the target specified as `gmmk/gmmk2/p65/ansi:default:flash`. The board must be in bootloader mode for flashing to succeed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/gmmk/gmmk2/p65/ansi/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake gmmk/gmmk2/p65/ansi:default:flash\n```\n\n----------------------------------------\n\nTITLE: Changing Matrix Rows for Pro Micro in config.h\nDESCRIPTION: This directive in `config.h` changes the number of matrix rows from 9 to 8 when using a Pro Micro controller with the Terrazzo keyboard. This adjustment is necessary because the Pro Micro has fewer available pins compared to the Elite-C, which the firmware is configured for by default.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/terrazzo/readme.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n#define MATRIX_ROWS 8\n```\n\n----------------------------------------\n\nTITLE: Building the firmware for GG Keyboards Genesis Hotswap\nDESCRIPTION: This command builds the firmware for the GG Keyboards Genesis Hotswap keyboard with the default keymap. It requires the QMK build environment to be set up correctly. The resulting firmware can then be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ggkeyboards/genesis/hotswap/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake ggkeyboards/genesis/hotswap:default\n```\n\n----------------------------------------\n\nTITLE: Flashing the MacroPad12 Firmware\nDESCRIPTION: This command is used to flash the built firmware onto the MacroPad12 keyboard. It builds the firmware and then flashes it to the device, requiring a configured QMK build environment and a connected MacroPad12.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/sapuseven/macropad12/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake sapuseven/macropad12:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building CRBN Firmware with Make\nDESCRIPTION: This command builds the default firmware for the CRBN keyboard using the QMK build environment. It assumes that the build environment has been properly set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/crbn/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake crbn:default\n```\n\n----------------------------------------\n\nTITLE: Making Default Firmware for Virgo Keyboard\nDESCRIPTION: This command builds the default firmware for the Virgo keyboard. It requires a properly set up QMK build environment. Execute this command in the QMK firmware directory to compile the firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/flx/virgo/readme.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmake flx/virgo:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Irene Keyboard Firmware (QMK)\nDESCRIPTION: This command builds and flashes the default firmware for the Irene keyboard onto the device. It assumes a configured QMK environment and a connected keyboard in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/irene/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake irene:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building QMK Firmware for FJLaboratories Peaker Keyboard\nDESCRIPTION: This command builds the QMK firmware for the Peaker keyboard with the default keymap. It requires a properly configured QMK build environment. The output is a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/fjlabs/peaker/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake fjlabs/peaker:default\n```\n\n----------------------------------------\n\nTITLE: Building Carbo 65 Firmware with QMK\nDESCRIPTION: This command builds the default keymap for the Carbo 65 keyboard using the QMK firmware build environment. It assumes that the QMK build environment has been properly set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/carbo65/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake carbo65:default\n```\n\n----------------------------------------\n\nTITLE: Building the Hnah108 Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the Hnah108 keyboard. It requires a properly set up QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/hnah108/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/hnah108:default\n```\n\n----------------------------------------\n\nTITLE: Building THE30 Keyboard Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the THE30 keyboard using the QMK build environment.  It compiles the keymap and generates the firmware file ready for flashing.  Requires the QMK build environment to be set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/lazydesigners/the30/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake lazydesigners/the30:default\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for HEX.4B Keyboard\nDESCRIPTION: This command builds the default firmware for the HEX.4B keyboard's revision 1 using QMK. It compiles the necessary source code and generates a .hex file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechlovin/hex4b/rev1/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake mechlovin/hex4b/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Flashing wanten Firmware (QMK)\nDESCRIPTION: This command flashes the default firmware onto the wanten keyboard using the QMK build environment. It requires the QMK build environment to be set up properly and the keyboard to be connected.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/qpockets/wanten/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake qpockets/wanten:default:flash\n```\n\n----------------------------------------\n\nTITLE: Including IS31FL3742A Driver in rules.mk (Make)\nDESCRIPTION: To include the IS31FL3742A driver in your QMK firmware project, add these lines to your `rules.mk` file. This includes the necessary source files and specifies that an I2C driver is required. The choice between `is31fl3742a-mono.c` and `is31fl3742a.c` depends on whether you're using single-color or RGB LEDs.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/is31fl3742a.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nCOMMON_VPATH += $(DRIVER_PATH)/led/issi\nSRC += is31fl3742a-mono.c # For single-color\nSRC += is31fl3742a.c # For RGB\nI2C_DRIVER_REQUIRED = yes\n```\n\n----------------------------------------\n\nTITLE: Flashing the Firmware\nDESCRIPTION: This command flashes the built firmware to the ibm/model_m_4th_gen/overnumpad_1xb keyboard. This also requires a properly configured QMK build environment.  Ensure the keyboard is in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ibm/model_m_4th_gen/overnumpad_1xb/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake ibm/model_m_4th_gen/overnumpad_1xb:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware to Novus Keyboard\nDESCRIPTION: This command flashes the default QMK firmware to the Novus keyboard. It requires a properly set up QMK build environment and a connected keyboard in flashing mode. The command utilizes the `make` tool with specific targets for the Novus keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cutie_club/novus/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake cutie_club/novus:default:flash\n```\n\n----------------------------------------\n\nTITLE: Qwerty Layout - Helix Keyboard\nDESCRIPTION: Defines the standard Qwerty key layout for the Helix keyboard. It shows the key assignments for each physical key, including modifiers like Ctrl, Shift, and Alt, as well as navigation keys.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/helix/rev2/keymaps/default/readme.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n ,-----------------------------------------.             ,-----------------------------------------.\n |   `  |   1  |   2  |   3  |   4  |   5  |             |   6  |   7  |   8  |   9  |   0  | Del  |\n |------+------+------+------+------+------|             |------+------+------+------+------+------|\n | Tab  |   Q  |   W  |   E  |   R  |   T  |             |   Y  |   U  |   I  |   O  |   P  | Bksp |\n |------+------+------+------+------+------|             |------+------+------+------+------+------|\n | Ctrl |   A  |   S  |   D  |   F  |   G  |             |   H  |   J  |   K  |   L  |   ;  |  '   |\n |------+------+------+------+------+------+------+------+------+------+------+------+------+------|\n | Shift|   Z  |   X  |   C  |   V  |   B  |   [  |   ]  |   N  |   M  |   ,  |   .  |   /  |Enter |\n |------+------+------+------+------+------+------+------+------+------+------+------+------+------|\n |Adjust| Esc  | Alt  | GUI  | EISU |Lower |Space |Space |Raise | KANA | Left | Down |  Up  |Right |\n `-------------------------------------------------------------------------------------------------'\n```\n\n----------------------------------------\n\nTITLE: Building Pinky4 Keyboard Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the Pinky4 keyboard. It uses the QMK build environment to compile the keyboard's keymap and firmware based on the specified keyboard and keymap configurations.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/pinky/4/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake pinky/4:default\n```\n\n----------------------------------------\n\nTITLE: Building Planck Rev6 Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Planck rev6 keyboard using the QMK build environment. It assumes that the QMK build environment has been properly set up.  The resulting firmware can then be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/planck/rev6/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake planck/rev6:default\n```\n\n----------------------------------------\n\nTITLE: Flashing blu vimclutch with default keymap - QMK\nDESCRIPTION: This command flashes the compiled QMK firmware onto the blu/vimclutch keyboard using the default keymap. It programs the keyboard's microcontroller with the firmware. Ensure your keyboard is in bootloader mode and that you have the necessary flashing tools installed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/blu/vimclutch/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake blu/vimclutch:default\n```\n\n----------------------------------------\n\nTITLE: Making FoldKB Keyboard Firmware\nDESCRIPTION: This command is used to compile the firmware for the FoldKB keyboard with the default keymap. It assumes that the QMK build environment has been set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keebio/foldkb/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake keebio/foldkb/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Building rotcon 0 firmware using QMK\nDESCRIPTION: This command builds the default firmware for the rotcon 0 keyboard using the QMK build environment. Ensure the QMK build environment is properly set up before running this command. This example is for the 'rot13labs/rotc0n' keyboard with the 'default' keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/rot13labs/rotc0n/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake rot13labs/rotc0n:default\n```\n\n----------------------------------------\n\nTITLE: Building TG67 Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the TG67 keyboard. It uses the QMK build environment to compile the firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/tg67/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake tg67:default\n```\n\n----------------------------------------\n\nTITLE: Making KinTwin Firmware\nDESCRIPTION: This command builds the default firmware for the KinTwin keyboard. It requires a properly configured QMK build environment.  The output is a .hex or .bin file suitable for flashing to the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kinesis/kintwin/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake kinesis/kintwin:default\n```\n\n----------------------------------------\n\nTITLE: Building Keyboard Firmware with Make\nDESCRIPTION: This command builds the default firmware for the Gray Studio Aero 75 keyboard using the QMK build environment. It requires the QMK build environment to be properly set up beforehand.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/gray_studio/aero75/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake gray_studio/aero75:default\n```\n\n----------------------------------------\n\nTITLE: Flashing keyboard firmware\nDESCRIPTION: This command builds and flashes the firmware for the Caticorn Solder (Rev 1) keyboard with the default keymap. It assumes that the QMK build environment has been set up and that the flashing tool is correctly configured.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/horrortroll/caticorn/rev1/solder/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake horrortroll/caticorn/rev1/solder:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing QMK Firmware to Durgod Hades ISO\nDESCRIPTION: This command flashes the compiled QMK firmware onto the Durgod Hades ISO keyboard. It requires the keyboard to be in the correct flashing mode (e.g., DFU mode) and uses the appropriate flashing tool based on the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/durgod/dgk6x/hades_iso/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake durgod/dgk6x/hades_iso:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing top40 Keyboard Firmware\nDESCRIPTION: This command flashes the default firmware onto the Akko top40 keyboard. It requires a properly configured QMK build environment and a connected keyboard in flashing mode. The command assumes the default flashing method is configured.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/akko/top40/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake akko/top40:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Amber80 Solder Firmware\nDESCRIPTION: This command builds the default firmware for the Amber80 solder keyboard.  It requires a properly configured QMK build environment.  The output will be a .hex or .bin file, suitable for flashing to the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/sawnsprojects/amber80/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake sawnsprojects/amber80/solder:default\n```\n\n----------------------------------------\n\nTITLE: Compiling QAZ Keyboard Firmware\nDESCRIPTION: This command compiles the QMK firmware for the QAZ keyboard with the default keymap. It requires the QMK build environment to be set up correctly. It generates a .hex or .bin file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/tominabox1/qaz/readme.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nqmk compile -kb tominabox1/qaz -km default\n```\n\n----------------------------------------\n\nTITLE: Building Latin6RGB Firmware\nDESCRIPTION: This command builds the default firmware for the Latin6RGB keyboard. It assumes that the QMK build environment is properly set up. It uses the `make` command with the target `latincompass/latin6rgb:default`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/latincompass/latin6rgb/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake latincompass/latin6rgb:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Eliza Keyboard Firmware with QMK\nDESCRIPTION: This command flashes the default firmware to the Eliza keyboard. It assumes the keyboard is connected and in a state where it can accept a firmware flash. The QMK build environment and necessary tools must be properly installed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kb_elmo/eliza/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake kb_elmo/eliza:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Ergosaurus Firmware with QMK\nDESCRIPTION: This command demonstrates how to build the default firmware for the Ergosaurus keyboard using the QMK build environment. It assumes that the build environment is already set up. The command compiles the keyboard's keymap and other configurations into a firmware image.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keyhive/ergosaurus/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake keyhive/ergosaurus:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Ginkgo65hot Keyboard Firmware\nDESCRIPTION: This command flashes the compiled firmware to the Ginkgo65hot keyboard. It requires the keyboard to be in bootloader mode, typically activated by pressing the physical reset button on the PCB. The command uses the QMK build environment to initiate the flashing process.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mokey/ginkgo65hot/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake mokey/ginkgo65hot:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Infinity87 Firmware\nDESCRIPTION: This command builds the QMK firmware for the Infinity87 keyboard. It specifies the keyboard (mechlovin/infinity87/rev1/standard) and the keymap (default). Requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechlovin/infinity87/rev1/standard/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake mechlovin/infinity87/rev1/standard:default\n```\n\n----------------------------------------\n\nTITLE: Building Oddball v2.1 Firmware with PMW3360 Sensor\nDESCRIPTION: This command builds the Oddball v2.1 keyboard firmware specifically configured for the PMW3360 sensor. It requires the QMK build environment to be set up correctly. The resulting firmware file will be tailored for use with the PMW3360 sensor on the Oddball v2.1 keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/oddball/v2_1/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake oddball/v2_1:pmw3360\n```\n\n----------------------------------------\n\nTITLE: Building IKKI68 Firmware using QMK\nDESCRIPTION: This command builds the default firmware for the IKKI68 keyboard. It requires a properly set up QMK build environment. The output will be a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wuque/ikki68/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake wuque/ikki68:default\n```\n\n----------------------------------------\n\nTITLE: Flashing QMK Firmware to Durgod K310\nDESCRIPTION: This command builds and flashes the QMK firmware to the Durgod K310 base model with the default keymap. It builds the firmware first, then attempts to flash it to the keyboard. Ensure the keyboard is in the correct bootloader mode before running this command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/durgod/k310/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake durgod/k310/base:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building the Soulstone Firmware\nDESCRIPTION: This command builds the default keymap for the Soulstone keyboard. It uses the `make` command with the target specified as `strech/soulstone:default`.  It assumes that the QMK build environment has been set up correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/strech/soulstone/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake strech/soulstone:default\n```\n\n----------------------------------------\n\nTITLE: Building ProjectD 75% ISO Firmware\nDESCRIPTION: This command builds the default firmware for the ProjectD 75% ISO keyboard. It uses the QMK make system to compile the necessary code for the specified keyboard and keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/projectd/75/iso/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake projectd/75/iso:default\n```\n\n----------------------------------------\n\nTITLE: Building Adelais standard_led Firmware\nDESCRIPTION: This command compiles the QMK firmware for the Adelais keyboard with standard LEDs. It uses the default keymap and assumes the QMK build environment is already set up. It generates a .hex or .bin file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechlovin/adelais/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake mechlovin/adelais/standard_led:default\n```\n\n----------------------------------------\n\nTITLE: Building Genesis Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the Genesis Rev1 macro pad. It requires a properly configured QMK build environment and assumes the user is in the QMK firmware directory. The output is a firmware file that can be flashed to the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/custommk/genesis/rev1/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake custommk/genesis/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Building Pandora Keyboard Firmware - make\nDESCRIPTION: This command builds the default firmware for the Pandora keyboard using the QMK build environment. It requires the QMK build environment to be set up beforehand.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/pearlboards/pandora/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake pearlboards/pandora:default\n```\n\n----------------------------------------\n\nTITLE: Building Devil68 Pro Firmware\nDESCRIPTION: This command builds the default firmware for the Devil68 Pro keyboard.  It uses the QMK make system and requires a properly set up build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/horrortroll/chinese_pcb/devil68_pro/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake horrortroll/chinese_pcb/devil68_pro:default\n```\n\n----------------------------------------\n\nTITLE: Building XS60HS Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the XS60HS keyboard with hotswap support. It assumes the QMK build environment is already set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/xelus/xs60/hotswap/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake xelus/xs60/hotswap:default\n```\n\n----------------------------------------\n\nTITLE: Define Keyboard Key Row 4\nDESCRIPTION: Defines the fourth row, including Shift, backslash/pipe, letters Z-M, and shifted comma/less-than, period/greater-than, and slash/question mark keys.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/lib/python/qmk/tests/kle.txt#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n[{w:1.25},\"Shift\",\"|\\n\\\\\",\"Z\",\"X\",\"C\",\"V\",\"B\",\"N\",\"M\",\"<\\n,\",\">\\n.\",\"?\\n/\",{w:2.75},\"Shift\"]\n```\n\n----------------------------------------\n\nTITLE: One Shot Modifiers Changed Callback in QMK\nDESCRIPTION: This C code snippet shows how to implement the `oneshot_mods_changed_user` callback function in QMK.  This function is called whenever the state of any one-shot modifier key changes. The `mods` argument contains a bitmask of the active modifiers after the change, allowing the user to implement custom logic based on the current modifier state. The function prints to the console which modifiers are currently active, or indicates when all modifiers are off.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/one_shot_keys.md#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nvoid oneshot_mods_changed_user(uint8_t mods) {\n  if (mods & MOD_MASK_SHIFT) {\n    println(\"Oneshot mods SHIFT\");\n  }\n  if (mods & MOD_MASK_CTRL) {\n    println(\"Oneshot mods CTRL\");\n  }\n  if (mods & MOD_MASK_ALT) {\n    println(\"Oneshot mods ALT\");\n  }\n  if (mods & MOD_MASK_GUI) {\n    println(\"Oneshot mods GUI\");\n  }\n  if (!mods) {\n    println(\"Oneshot mods off\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building Cordillera firmware using QMK\nDESCRIPTION: This command builds the default firmware for the Cordillera keyboard using the QMK build environment.  It requires a properly set up QMK build environment.  The output will be a firmware file that can be flashed to the Cordillera keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/coarse/cordillera/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake coarse/cordillera:default\n```\n\n----------------------------------------\n\nTITLE: Flashing KBMG68 Firmware - Make Command\nDESCRIPTION: This command flashes the compiled QMK firmware onto the Keebmonkey KBMG68 keyboard. It requires a properly configured QMK build environment and a connected keyboard in a flashable state (typically bootloader mode).\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keebmonkey/kbmg68/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake keebmonkey/kbmg68:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Subatomic keyboard firmware with make\nDESCRIPTION: This snippet shows how to build the default firmware for the Subatomic keyboard using the `make` command within the QMK Firmware environment. It assumes that the QMK build environment has been set up correctly. The command compiles the firmware and prepares it for flashing onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/subatomic/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake subatomic:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Symmetric70 Proto Firmware\nDESCRIPTION: This command flashes the compiled firmware to the symmetric70_proto keyboard. It uses the QMK build environment and specifies the keyboard, keymap, build type, and the 'flash' target. This uploads the compiled .hex file to the Pro Micro controller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/symmetric70_proto/promicro/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake handwired/symmetric70_proto/promicro/normal:default:flash\nmake handwired/symmetric70_proto/promicro/fast:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Chavdai40 Firmware (rev2)\nDESCRIPTION: This command builds the default firmware for the Chavdai40 keyboard, revision 2. It utilizes the QMK make system to compile the firmware. Requires a correctly set up QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/chavdai40/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake chavdai40/rev2:default\n```\n\n----------------------------------------\n\nTITLE: Flashing EndZone34 Firmware with QMK\nDESCRIPTION: This command flashes the built firmware to the EndZone34 keyboard using the QMK build environment. This requires the QMK environment to be setup and the necessary tools for flashing to be available.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/takashicompany/endzone34/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake takashicompany/endzone34:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building LPAD Firmware with Make\nDESCRIPTION: This command builds the default firmware for the LPAD keyboard using the QMK build environment. It requires a properly configured QMK environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/laneware/lpad/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake laneware/lpad:default\n```\n\n----------------------------------------\n\nTITLE: Building Alicia Cook Keyboard Firmware (QMK)\nDESCRIPTION: This command builds the default keymap for the Alicia Cook keyboard using the QMK build environment. It compiles the source code and generates the firmware binary. Requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ibnuda/alicia_cook/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake ibnuda/alicia_cook:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware with Make\nDESCRIPTION: This command flashes the compiled firmware to the Plywrks Ji-Eun keyboard with VIA enabled. It requires QMK build environment to be set up and a compatible bootloader on the keyboard. The command uses the dfu-programmer or avrdude to flash the .hex file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/plywrks/ji_eun/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake plywrks/ji_eun:via:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Hubble Keyboard Firmware\nDESCRIPTION: This command flashes the default firmware to the Hubble keyboard using the QMK build environment. It requires the QMK build environment to be properly set up and a compatible flashing tool. The command assumes the keyboard is already in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/hubble/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake hubble:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing jels88 Firmware with Make\nDESCRIPTION: This snippet demonstrates how to flash the built firmware onto the jels88 keyboard using the `make` command. It requires the QMK build environment to be correctly configured and the keyboard to be in a flashable state.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/jels/jels88/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake jels/jels88:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Shadow80 Keyboard Firmware\nDESCRIPTION: This command flashes the compiled firmware onto the Shadow80 keyboard using the QMK build environment. It assumes the keyboard is connected and in a state ready to receive the firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/pixelspace/shadow80/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake shadow80:default:flash\n```\n\n----------------------------------------\n\nTITLE: Updating IS31FL3742A Scaling Registers (C)\nDESCRIPTION: This function flushes the scaling register values to the IS31FL3742A LED driver, applying the configured scaling factors to the LEDs.  The driver index must be supplied.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/is31fl3742a.md#_snippet_9\n\nLANGUAGE: C\nCODE:\n```\nvoid is31fl3742a_update_scaling_registers(uint8_t index)\n```\n\n----------------------------------------\n\nTITLE: Flashing Keyboard Firmware\nDESCRIPTION: This command flashes the compiled firmware onto the BM60HSRGB_ISO/rev2 keyboard using the QMK build environment. It requires the keyboard to be in flashing mode and uses the appropriate flashing tool for the keyboard's bootloader.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kprepublic/bm60hsrgb_iso/rev2/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake kprepublic/bm60hsrgb_iso/rev2:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Chevron Keyboard Firmware - QMK\nDESCRIPTION: This command builds the default firmware for the Chevron keyboard using the QMK build environment. It requires the QMK build environment to be set up. The output is the compiled firmware file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/rmi_kb/chevron/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake rmi_kb/chevron:default\n```\n\n----------------------------------------\n\nTITLE: Building Satan GH60 Firmware\nDESCRIPTION: This command builds the default firmware for the Satan GH60 keyboard within the QMK environment.  It assumes that the QMK build environment has been properly set up according to the QMK documentation. The resulting firmware can then be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/gh60/satan/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake gh60/satan:default\n```\n\n----------------------------------------\n\nTITLE: Building X-BOWS Numpad with QMK\nDESCRIPTION: This command builds the default configuration for the X-BOWS Numpad using the QMK firmware.  It utilizes the 'make' command which compiles the firmware based on the specified keyboard and keymap.  Dependencies include a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/xbows/numpad/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake xbows/numpad:default\n```\n\nLANGUAGE: bash\nCODE:\n```\nmake xbows/numpad:via\n```\n\n----------------------------------------\n\nTITLE: Building Crin Keyboard Firmware with Make\nDESCRIPTION: This command compiles the QMK firmware for the Bachoo Crin keyboard with the default keymap. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/crin/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake crin:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Mino Firmware\nDESCRIPTION: This command flashes the built firmware onto the Mino keyboard. It builds the firmware with the hotswap layout and default keymap, then flashes it to the device. Requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/shandoncodes/mino/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake shandoncodes/mino/hotswap:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Keychron C1 Pro V2 Firmware with Make\nDESCRIPTION: These `make` commands compile and flash the QMK firmware to the Keychron C1 Pro V2 keyboard. The `:flash` target instructs the build system to flash the compiled firmware to the keyboard. The commands include various configurations (rgb, white, non_light).\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keychron/c1_pro_v2/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake keychron/c1_pro_v2/ansi/rgb:default:flash\n```\n\nLANGUAGE: Makefile\nCODE:\n```\nmake keychron/c1_pro_v2/ansi/white:default:flash\n```\n\nLANGUAGE: Makefile\nCODE:\n```\nmake keychron/c1_pro_v2/ansi/non_light:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware to Tractyl Manuform Keyboard\nDESCRIPTION: This command flashes the previously built firmware to the handwired Tractyl Manuform 5x6 right-side keyboard using the F411 microcontroller with the default configuration. It requires a properly configured QMK build environment and a connected microcontroller in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/tractyl_manuform/5x6_right/f411/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/tractyl_manuform/5x6_right/f411:default:flash\n```\n\n----------------------------------------\n\nTITLE: PS/2 Mouse Rotate Axes (C)\nDESCRIPTION: Defines to rotate mouse axes by 90, 180, or 270 degrees.  Add to `config.h`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/ps2_mouse.md#_snippet_16\n\nLANGUAGE: c\nCODE:\n```\n#define PS2_MOUSE_ROTATE 270 /* Compensate for East-facing device orientation. */\n```\n\nLANGUAGE: c\nCODE:\n```\n#define PS2_MOUSE_ROTATE 180 /* Compensate for South-facing device orientation. */\n```\n\nLANGUAGE: c\nCODE:\n```\n#define PS2_MOUSE_ROTATE 90 /* Compensate for West-facing device orientation. */\n```\n\n----------------------------------------\n\nTITLE: Building Mini1800 RevA with QMK\nDESCRIPTION: This command compiles the QMK firmware for the Mini1800 RevA keyboard with the default keymap. It requires a properly set up QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/lfkeyboards/mini1800/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake lfkeyboards/mini1800/reva:default\n```\n\n----------------------------------------\n\nTITLE: Building ErgoStrafer Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the ErgoStrafer keyboard using the QMK build environment. It requires a properly configured QMK environment to execute successfully.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/custommk/ergostrafer/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake custommk/ergostrafer:default\n```\n\n----------------------------------------\n\nTITLE: Flashing moky88 keyboard firmware using QMK\nDESCRIPTION: This command builds and flashes the default keymap for the moky88 keyboard. It requires the QMK build environment and a connected keyboard in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/moky/moky88/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake moky/moky88:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Firmware with Make\nDESCRIPTION: This command builds the default firmware for the Lightweight65 keyboard using the `make` command. It specifies the keyboard (`holyswitch/lightweight65`) and the keymap (`default`).\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/holyswitch/lightweight65/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake holyswitch/lightweight65:default\n```\n\n----------------------------------------\n\nTITLE: Flashing MW75 Keyboard Firmware - Make Command\nDESCRIPTION: This command flashes the compiled firmware onto the MW75 keyboard. This command depends on the QMK build environment being set up and the keyboard being in a flashable state, typically via the bootloader. \nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mwstudio/mw75/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake mwstudio/mw75:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for X-BOWS Ranger\nDESCRIPTION: These commands are used to build the QMK firmware for the X-BOWS Ranger keyboard with different keymap configurations (default and via). The 'make' command compiles the firmware based on the specified target.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/xbows/ranger/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake xbows/ranger:default\n```\n\nLANGUAGE: make\nCODE:\n```\nmake xbows/ranger:via\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for Meira (Feather BLE)\nDESCRIPTION: This command builds the QMK firmware for the Meira keyboard using the Feather BLE 32u4 controller and the default keymap. It requires a properly configured QMK build environment. The resulting firmware can be flashed onto the Feather BLE controller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/woodkeys/meira/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake woodkeys/meira/featherble:default\n```\n\n----------------------------------------\n\nTITLE: Building Delphine Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Delphine keyboard using the QMK build environment. It requires QMK to be set up correctly and assumes the user is familiar with the QMK build process. The command compiles the keyboard layout and generates a firmware file that can be flashed onto the Delphine keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechlovin/delphine/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake mechlovin/delphine:default\n```\n\n----------------------------------------\n\nTITLE: Building Packrat Firmware with QMK\nDESCRIPTION: This snippet demonstrates how to build the default firmware for the Packrat keyboard using the QMK build environment. It assumes that the QMK build environment has already been set up. The command will compile the firmware and create a .hex file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/drhigsby/packrat/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake drhigsby/packrat:default\n```\n\n----------------------------------------\n\nTITLE: Building uzu42 Firmware\nDESCRIPTION: This command builds the default firmware for the uzu42 keyboard using the QMK build environment. It requires the QMK build environment to be set up correctly. The output will be a firmware file that can be flashed onto the Pro Micro controller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/uzu42/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake uzu42:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Charon Firmware (QMK)\nDESCRIPTION: This command flashes the compiled firmware to the Charon keyboard using the QMK firmware. It requires the QMK build environment to be set up and assumes the keyboard is connected and in a flashable state.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/charue/charon/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake charue/charon:default:flash\n```\n\n----------------------------------------\n\nTITLE: Enabling SIO Subsystem in ChibiOS HAL (halconf.h)\nDESCRIPTION: This code snippet enables the `SIO` subsystem in the ChibiOS HAL, allowing the use of the `SIO` driver for serial communication. This configuration is added to the keyboard's `halconf.h` file.  `#pragma once` prevents multiple inclusions, and `#include_next` includes the subsequent `halconf.h` file in the include path.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/serial.md#_snippet_13\n\nLANGUAGE: C\nCODE:\n```\n#pragma once\n\n#define HAL_USE_SIO TRUE // [!code focus]\n\n#include_next <halconf.h>\n```\n\n----------------------------------------\n\nTITLE: Building waffling60 Rev. E ISO Firmware\nDESCRIPTION: This command builds the default firmware for the waffling60 Rev. E ISO keyboard. It requires a properly configured QMK build environment. The output will be the firmware file ready to be flashed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/4pplet/waffling60/rev_e_iso/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake 4pplet/waffling60/rev_e_iso:default\n```\n\n----------------------------------------\n\nTITLE: Fuse Settings for Bootloader - ATMega32u4\nDESCRIPTION: These are the recommended fuse settings when flashing the bootloader onto the ATMega32u4 microcontroller on the Ploopy Trackball Nano. Incorrect fuse settings can prevent the device from booting correctly.  The settings configure the microcontroller's behavior and should be set correctly for proper operation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ploopyco/trackball_nano/readme.md#_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n| Fuse     | Setting     |\n|----------|-------------|\n| Low      | `0x5E`      |\n| High     | `0x99`      |\n| Extended | `0xC3`      |\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for Foxlab Time 80 Reforged Universal\nDESCRIPTION: This command compiles the default keymap for the Foxlab Time 80 Reforged Universal keyboard using the QMK build environment. It assumes that the QMK build environment is set up correctly. The output is a firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/foxlab/time_re/universal/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake foxlab/time_re/universal:default\n```\n\n----------------------------------------\n\nTITLE: Building the wilba.tech WT60-D Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the wilba.tech WT60-D keyboard using the QMK build environment. It assumes that the QMK build environment has already been set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wilba_tech/wt60_d/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake wilba_tech/wt60_d:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware: Mode Tempo M60H_F (Makefile)\nDESCRIPTION: This command flashes the compiled firmware onto the Mode Tempo M60H_F keyboard. It uses the QMK build environment and appropriate flashing tools to transfer the firmware to the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mode/m60h_f/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake mode/m60h_f:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building QMK Firmware for CannonKeys Link\nDESCRIPTION: This command compiles the default keymap for the CannonKeys Link keyboard.  It requires a properly configured QMK build environment. The output is a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cannonkeys/link/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake cannonkeys/link:default\n```\n\n----------------------------------------\n\nTITLE: Building GHS/XLS Keyboard Firmware - Make\nDESCRIPTION: This command builds the default firmware for the GHS/XLS keyboard using the make command. It assumes that the QMK build environment has been set up correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ghs/xls/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake ghs/xls:default\n```\n\n----------------------------------------\n\nTITLE: Building Recon Firmware (QMK)\nDESCRIPTION: This command is used to build the default firmware for the xdboards/recon keyboard within the QMK Firmware environment. It assumes that the QMK build environment is already set up. The output will be a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/xdboards/recon/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake xdboards/recon:default\n```\n\n----------------------------------------\n\nTITLE: Flashing BM42 Firmware\nDESCRIPTION: This command flashes the compiled firmware to the BM42 keyboard.  It requires a properly configured QMK build environment and a connected keyboard in a flashable state.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kb_elmo/bm42/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake kb_elmo/bm42:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing the DE80 Keyboard Firmware\nDESCRIPTION: This command flashes the compiled firmware onto the DE80 keyboard. It requires the QMK build environment and a configured flashing tool.  The command assumes the keyboard is in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/deemen17/de80/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake deemen17/de80:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing TGR 910 CE Firmware (Makefile)\nDESCRIPTION: This command builds and flashes the default firmware for the TGR 910 CE keyboard. It utilizes the `make` command with the `flash` target. Requires a configured QMK build environment and appropriate flashing tools.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/tgr/910ce/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake tgr/910ce:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Absolute Designs 65 Firmware (QMK)\nDESCRIPTION: This command is used to compile the QMK firmware for the Absolute Designs 65 keyboard with the default keymap. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/fjlabs/ad65/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake fjlabs/ad65:default\n```\n\n----------------------------------------\n\nTITLE: Building Chapter-1 Keyboard Firmware\nDESCRIPTION: This command compiles the default firmware for the Chapter-1 keyboard using the QMK build environment. It requires a properly configured QMK environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechstudio/chapter1/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake mechstudio/chapter1:default\n```\n\n----------------------------------------\n\nTITLE: Compiling Pill60 Keyboard Firmware with STM32F103\nDESCRIPTION: Compiles the default keymap for the Pill60 keyboard using QMK, specifying the STM32F103 microcontroller as the target. This command is used to generate the firmware that can be flashed onto the Pill60 keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/pill60/readme.md#_snippet_0\n\nLANGUAGE: qmk\nCODE:\n```\nqmk compile -kb handwired/pill60 -km default\n```\n\n----------------------------------------\n\nTITLE: Flashing Haus QMK Firmware\nDESCRIPTION: This command flashes the compiled firmware onto the Haus keyboard.  It assumes the keyboard is in bootloader mode and uses the appropriate flashing tool to upload the firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechlovin/hannah65/rev1/haus/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake mechlovin/hannah65/rev1/haus:flash\n```\n\n----------------------------------------\n\nTITLE: Building VCL65 Solder Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the VCL65 Solder keyboard using the QMK build environment. It requires QMK to be set up correctly and provides the compiled firmware ready for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/sawnsprojects/vcl65/solder/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake sawnsprojects/vcl65/solder:default\n```\n\n----------------------------------------\n\nTITLE: Building the GMMK Numpad Firmware\nDESCRIPTION: This command builds the default firmware for the GMMK Numpad. It requires a properly set up QMK build environment. The resulting firmware can then be flashed onto the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/gmmk/numpad/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake gmmk/numpad:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Polaris Firmware with Make\nDESCRIPTION: This command builds and flashes the default firmware for the Polaris keyboard to the device using the QMK build environment. It depends on a properly configured QMK environment and a connected keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wekey/polaris/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake polaris:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Smolka Keyboard Firmware\nDESCRIPTION: This command flashes the compiled firmware onto the Smolka keyboard. It extends the previous `make` command by adding the `:flash` target, which instructs the QMK build environment to program the firmware onto the connected device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/viktus/smolka/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake viktus/smolka:default:flash\n```\n\n----------------------------------------\n\nTITLE: Making AEK64 default keymap\nDESCRIPTION: This command compiles the AEK64 keyboard firmware with the default keymap using the QMK build environment. It requires the QMK build environment to be set up beforehand.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/aek64/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake aek64:default\n```\n\n----------------------------------------\n\nTITLE: Building the Mode SeventyFive M75S Firmware\nDESCRIPTION: This command builds the default firmware for the Mode SeventyFive M75S keyboard. It uses the `make` command with the target specified as `mode/m75s:default`. This assumes the QMK build environment is already set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mode/m75s/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake mode/m75s:default\n```\n\n----------------------------------------\n\nTITLE: Building Ortho 48 Keyboard Firmware - QMK\nDESCRIPTION: This code snippet demonstrates how to build the firmware for the Ortho 48 keyboard using the QMK build environment. It requires the QMK build environment to be set up correctly. The command compiles the firmware with the default configuration.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cannonkeys/ortho48/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake cannonkeys/ortho48:default\n```\n\n----------------------------------------\n\nTITLE: De-ghosting configuration in config.h\nDESCRIPTION: This snippet shows how to configure the pulldown and pullup resistor values for the SWy and CSx pins to eliminate ghosting in the LED matrix. It uses `#define` directives to set the `IS31FL3745_SW_PULLDOWN` and `IS31FL3745_CS_PULLUP` macros.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/is31fl3745.md#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n#define IS31FL3745_SW_PULLDOWN IS31FL3745_PDR_2K_OHM_SW_OFF\n#define IS31FL3745_CS_PULLUP IS31FL3745_PUR_2K_OHM_CS_OFF\n```\n\n----------------------------------------\n\nTITLE: Building 42 Keyboard Firmware (QMK)\nDESCRIPTION: This snippet provides the command to build the default firmware for the 42 keyboard using the QMK build environment. It assumes that the QMK build environment is already set up. The command targets the 'handwired/42' keyboard layout and uses the 'default' keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/42/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/42:default\n```\n\n----------------------------------------\n\nTITLE: Building Speedo v3 Firmware with QMK\nDESCRIPTION: This command compiles the default keymap for the Speedo v3 keyboard using the QMK build environment. It uses the 'make' command with the specified keyboard and keymap target. The resulting firmware can then be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cozykeys/speedo/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake cozykeys/speedo/v3:default\n```\n\n----------------------------------------\n\nTITLE: Building M0110a USB Firmware (QMK)\nDESCRIPTION: This snippet provides the command to compile the firmware for the kb_elmo/m0110a_usb keyboard with the default keymap using the QMK build environment. It requires the QMK build environment to be set up beforehand. The output will be the compiled firmware ready to be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kb_elmo/m0110a_usb/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake kb_elmo/m0110a_usb:default\n```\n\n----------------------------------------\n\nTITLE: Building Firmware: QMK Make\nDESCRIPTION: Builds the default firmware for the O4L 5x12 keyboard using the QMK build environment. This command compiles the keyboard layout and creates a firmware image.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keycapsss/o4l_5x12/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake keycapsss/o4l_5x12:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Pinky3 Keyboard Firmware - QMK\nDESCRIPTION: This command builds and flashes the QMK Firmware for the Pinky3 keyboard with the default keymap. It uses the `make` command with the target `pinky/3:default:flash`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/pinky/readme.md#_snippet_2\n\nLANGUAGE: Makefile\nCODE:\n```\nmake pinky/3:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building MW660 Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the mw660 keyboard using the QMK build system. It uses the `make` command with the target specified as `mwstudio/mw660:default`. This process compiles the keyboard layout and other configurations into a firmware image.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mwstudio/mw660/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake mwstudio/mw660:default\n```\n\n----------------------------------------\n\nTITLE: Building SPIN Macro Pad Firmware\nDESCRIPTION: This command builds the firmware for the SPIN Macro Pad with the default keymap. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/dmqdesign/spin/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake dmqdesign/spin:default\n```\n\n----------------------------------------\n\nTITLE: Building CA66 Firmware\nDESCRIPTION: This command builds the default firmware for the CA66 keyboard. It requires a properly configured QMK build environment.  The output is a .hex file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/playkbtw/ca66/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake playkbtw/ca66:default\n```\n\n----------------------------------------\n\nTITLE: Mapping LEDs in <keyboardname>.c\nDESCRIPTION: This snippet illustrates how to map LED outputs to specific LED indices using the `g_aw20216s_leds` array in the `<keyboardname>.c` file.  Each entry in the array defines the driver index and the PWM register addresses for the red, green, and blue channels of a single RGB LED.  Dependencies: Requires the `AW20216S_LED_COUNT` macro to be defined.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/aw20216s.md#_snippet_2\n\nLANGUAGE: C\nCODE:\n```\nconst aw20216s_led_t PROGMEM g_aw20216s_leds[AW20216S_LED_COUNT] = {\n/* Driver\n *   |  R          G          B */\n    {0, SW1_CS1,   SW1_CS2,   SW1_CS3},\n    // etc...\n};\n```\n\n----------------------------------------\n\nTITLE: Flashing ErgoDox Infinity Firmware (dfu-util)\nDESCRIPTION: This command flashes the ErgoDox Infinity keyboard with the built firmware using dfu-util. It requires the keyboard to be in bootloader mode (triggered by the program button) and assumes dfu-util is installed with sudo privileges.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/input_club/ergodox_infinity/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nsudo make input_club/ergodox_infinity:keymapname:dfu-util\n```\n\n----------------------------------------\n\nTITLE: Compiling Firmware for IDOBAO Montex V2 (QMK)\nDESCRIPTION: This command compiles the default QMK firmware for the IDOBAO Montex V2 keyboard. It requires a properly configured QMK build environment. The resulting firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/idobao/montex/v2/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake idobao/montex/v2:default\n```\n\n----------------------------------------\n\nTITLE: Define Planck EZ Layer LED mapping\nDESCRIPTION: These preprocessor definitions control which layers are used for layer indication on the Planck EZ keyboard. This configuration requires `ORYX_CONFIGURATOR` to be defined in `config.h`. It maps specific QMK layers to specific indicator lights.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/zsa/planck_ez/readme.md#_snippet_5\n\nLANGUAGE: c\nCODE:\n```\n#define PLANCK_EZ_LED_LOWER 3\n#define PLANCK_EZ_LED_RAISE 4\n#define PLANCK_EZ_LED_ADJUST 6\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware for Galatea rev1\nDESCRIPTION: This command builds and flashes the default firmware for the studiokestra/galatea keyboard revision 1. It combines the build and flash steps into a single command. Requires a properly configured QMK build environment and a connected keyboard in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/studiokestra/galatea/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake studiokestra/galatea/rev1:default:flash\n```\n\n----------------------------------------\n\nTITLE: Define Keyboard Key Row 1\nDESCRIPTION: Defines the first row of keys on the keyboard, including shifted characters and special keys like Backspace. 'w' specifies the width of the key, and the strings represent the key's label (unshifted\\nshifted).\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/lib/python/qmk/tests/kle.txt#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n[\"¬\\n`\",\"!\\n1\",\"\\\"\\n2\",\"£\\n3\",\"$\\n4\",\"%\\n5\",\"^\\n6\",\"&\\n7\",\"*\\n8\",\"(\\n9\",\")\\n0\",\"_\\n-\",\"+\\n=\",{w:2},\"Backspace\"]\n```\n\n----------------------------------------\n\nTITLE: Building MW60 Firmware\nDESCRIPTION: This command builds the default firmware for the MW60 keyboard. It utilizes the `make` command within the QMK environment to compile the keyboard's firmware based on the configuration specified by `buildakb/mw60:default`.  It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/buildakb/mw60/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake buildakb/mw60:default\n```\n\n----------------------------------------\n\nTITLE: Defining TKL ISO WKL Layout - QMK\nDESCRIPTION: Defines a TKL (Tenkeyless) ISO layout with an F13 key and without Windows (GUI) keys (WKL - Windows KeyLess). This layout provides a cleaner look by removing the Windows keys.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/layouts/default/readme.md#_snippet_22\n\nLANGUAGE: plaintext\nCODE:\n```\n┌───┐┌───┬───┬───┬───┐┌───┬───┬───┬───┐┌───┬───┬───┬───┐┌───┐ ┌───┬───┬───┐\n│   ││   │   │   │   ││   │   │   │   ││   │   │   │   ││   │ │   │   │   │\n└───┘└───┴───┴───┴───┘└───┴───┴───┴───┘└───┴───┴───┴───┘└───┘ └───┴───┴───┘\n┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───────┐ ┌───┬───┬───┐\n│   │   │   │   │   │   │   │   │   │   │   │   │   │       │ │   │   │   │\n├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─────┤ ├───┼───┼───┤\n│     │   │   │   │   │   │   │   │   │   │   │   │   │     │ │   │   │   │\n├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┐    │ └───┴───┴───┘\n│      │   │   │   │   │   │   │   │   │   │   │   │   │    │\n├────┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴───┴────┤     ┌───┐\n│    │   │   │   │   │   │   │   │   │   │   │   │          │     │   │\n├────┴┬──┴┬──┴──┬┴───┴───┴───┴───┴───┴───┴──┬┴───┴┬───┬─────┤ ┌───┼───┼───┐\n│     │   │     │                           │     │   │     │ │   │   │   │\n└─────┘   └─────┴───────────────────────────┴─────┘   └─────┘ └───┴───┴───┘\n```\n\n----------------------------------------\n\nTITLE: Keyboard Matrix Diagram\nDESCRIPTION: This snippet provides a visual representation of the key matrix for the CustomMK EVO70 R2 keyboard. It illustrates the arrangement of keys and their corresponding row/column connections, aiding in firmware configuration and understanding the physical keyboard layout.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/custommk/evo70_r2/matrix_diagram.md#_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n  ┌───┐  ┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───────┬───┐\n  │10 │  │00 │02 │03 │04 │05 │06 │07 │08 │09 │0A │0B │0C │0D │0E     │0F │\n  └───┘  ├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─────┼───┤      ┌─────┐\n         │11   │12 │13 │14 │15 │16 │17 │18 │19 │1A │1B │1C │1D │1E   │1F │      │     │\n┌───┬───┐├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴─────┼───┤   ┌──┴┐2E  │ ISO Enter\n│22 │20 ││21    │23 │24 │25 │26 │27 │28 │29 │2A │2B │2C │2D │2E      │2F │   │1E │    │\n├───┼───┤├────┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴────┬───┼───┤   └───┴────┘\n│31 │30 ││32  │01 │33 │34 │35 │36 │37 │38 │39 │3A │3B │3C │3D    │3E │3F │\n├───┼───┤├────┼───┴┬──┴─┬─┴───┴───┴───┴───┴───┴──┬┴───┼───┴┬─┬───┼───┼───┤\n│43 │40 ││41  │42  │44  │47                      │4A  │4B  │ │4D │4E │4F │\n└───┴───┘└────┴────┴────┴────────────────────────┴────┴────┘ └───┴───┴───┘\n         ┌────────┐\n         │32      │ 2.25u LShift\n         └────────┘\n```\n\n----------------------------------------\n\nTITLE: Flashing DOIO Knob 12% Keyboard Firmware\nDESCRIPTION: This command builds and flashes the default keymap for the DOIO Knob 12% keyboard to the keyboard's microcontroller. This requires that the keyboard is connected to the computer and that the necessary flashing tools are installed and configured correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/doio/kb12/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake doio/kb12:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building TIGER80 Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the TIGER80 keyboard. It requires a properly set up QMK build environment. The command compiles the keyboard layout and firmware components into a flashable image.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kbdfans/tiger80/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake kbdfans/tiger80:default\n```\n\n----------------------------------------\n\nTITLE: Check USB support for STM32 in ChibiOS\nDESCRIPTION: This code snippet demonstrates how to check if USB support is enabled for a specific STM32 MCU within ChibiOS. It checks for the `STM32_HAS_USB` or `STM32_HAS_OTG1`/`STM32_HAS_OTG2` defines to be set to `TRUE` within the same conditional block as the MCU definition. This is crucial for USB functionality within QMK.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/platformdev_selecting_arm_mcu.md#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n#define STM32_HAS_USB                       TRUE\n```\n\nLANGUAGE: c\nCODE:\n```\n#define STM32_HAS_OTG1                      TRUE\n```\n\nLANGUAGE: c\nCODE:\n```\n#define STM32_HAS_OTG2                      TRUE\n```\n\n----------------------------------------\n\nTITLE: Building mini42 Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the mini42 keyboard using the QMK build environment.  It requires a properly configured QMK environment. The output is the firmware file ready to be flashed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/controllerworks/mini42/readme.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmake controllerworks/mini42:default\n```\n\n----------------------------------------\n\nTITLE: Flashing SUS Board Firmware with QMK\nDESCRIPTION: This command builds and flashes the default firmware for the SUS Board using the QMK build environment. It requires the QMK build environment to be properly set up and configured, along with a connected SUS Board in flashing mode. The command uses the dfu-programmer or similar tool to write the firmware to the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ocean/sus/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake ocean/sus:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Gurindam Keyboard Firmware with QMK\nDESCRIPTION: This command builds the default keymap for the Gurindam keyboard using the QMK firmware. It utilizes the `make` command with the specific target for the Gurindam keyboard and the default keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ibnuda/gurindam/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake ibnuda/gurindam:default\n```\n\n----------------------------------------\n\nTITLE: Enabling VIA Feature\nDESCRIPTION: This command builds the firmware with VIA support enabled. VIA allows for real-time keymap customization.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/bstk100/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake handwired/bstk100:via\n```\n\n----------------------------------------\n\nTITLE: Flashing GK61 PRO Firmware with QMK\nDESCRIPTION: This command flashes the compiled firmware onto the GK61 PRO keyboard. It utilizes the QMK build environment and flashing tools to program the firmware image onto the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/skyloong/gk61/pro/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake skyloong/gk61/pro:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Dumbpad Firmware\nDESCRIPTION: This command builds the default firmware for the dumbpad/v0x_right keyboard. It requires a properly set up QMK build environment. The resulting firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/dumbpad/v0x_right/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake dumbpad/v0x_right:default\n```\n\n----------------------------------------\n\nTITLE: Flashing the Selka40 Firmware\nDESCRIPTION: This command flashes the built firmware to the Selka40 keyboard. It assumes that the keyboard is connected and in a flashable state. Requires QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/dyz/selka40/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake dyz/selka40:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Quark LP Firmware\nDESCRIPTION: This command builds the default firmware for the Quark LP keyboard.  It requires the QMK build environment to be set up. The command targets the `checkerboards/quark_lp` keyboard with the `default` keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/checkerboards/quark_lp/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake checkerboards/quark_lp:default\n```\n\n----------------------------------------\n\nTITLE: Building Gingham Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the Gingham keyboard. It uses the QMK build environment to compile the keymap and firmware for the specified keyboard and keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/yiancardesigns/gingham/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake yiancardesigns/gingham:default\n```\n\n----------------------------------------\n\nTITLE: Compiling Uno Firmware (QMK CLI)\nDESCRIPTION: Compiles the default keymap for the Keyhive Uno rev2 keyboard using the QMK command-line interface. This requires the QMK CLI to be installed and configured.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keyhive/uno/readme.md#_snippet_2\n\nLANGUAGE: QMK CLI\nCODE:\n```\nqmk compile -kb keyhive/uno/rev2 -km default\n```\n\n----------------------------------------\n\nTITLE: Flashing FancyAlice66 Firmware\nDESCRIPTION: This command flashes the compiled firmware to the FancyAlice66 keyboard. It uses the QMK make system with the flash target to upload the firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/fancytech/fancyalice66/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake fancytech/fancyalice66:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building BM980HSRGB Firmware\nDESCRIPTION: This command builds the default firmware for the BM980HSRGB keyboard using the QMK build environment.  It requires a properly configured QMK build environment. It creates a firmware binary that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kprepublic/bm980hsrgb/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake kprepublic/bm980hsrgb:default\n```\n\n----------------------------------------\n\nTITLE: Building UT47.2 Firmware with QMK\nDESCRIPTION: This command builds the firmware for the UT47.2 keyboard with the default keymap using the QMK build environment. It assumes that the QMK environment is properly set up. The output is a .hex file which can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keyhive/ut472/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake keyhive/ut472:default\n```\n\n----------------------------------------\n\nTITLE: Building Keychron Q6 Firmware\nDESCRIPTION: This command builds the default ANSI layout firmware for the Keychron Q6 keyboard. It utilizes the QMK make system to compile the firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keychron/q6/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake keychron/q6/ansi:default\n```\n\n----------------------------------------\n\nTITLE: Customizing Zinc Compilation via Command Line (Shell)\nDESCRIPTION: This command shows how to customize the Zinc keyboard compilation using command-line options passed through the `ZINC` variable. This allows users to adjust features like LED backlight, underglow, and iOS device connection during compilation. The values for options are \"back\", \"under\", \"both\", \"cont\", \"na\", and \"ios\".\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/25keys/zinc/keymaps/default/readme_en.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n# Zinc keyboard 'default' keymap: convenient command line option\nmake ZINC=<options> zinc:defualt\n#    option= back | under | both | cont | na | ios\n#    ex.\n#      make ZINC=under    zinc:defualt\n#      make ZINC=under,ios zinc:defualt\n#      make ZINC=back     zinc:default\n#      make ZINC=back,na  zinc:default\n#      make ZINC=back,ios zinc:default\n```\n\n----------------------------------------\n\nTITLE: Building Mini1800 RevC Firmware (Makefile)\nDESCRIPTION: This command builds the default firmware for the Mini1800 RevC keyboard.  It utilizes the QMK build environment to compile the firmware based on the keyboard's configuration.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/lfkeyboards/mini1800/revc/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake lfkeyboards/mini1800/revc:default\n```\n\n----------------------------------------\n\nTITLE: Flashing the bobpad keyboard\nDESCRIPTION: This command flashes the pre-built firmware onto the bobpad keyboard. It assumes that the keyboard is connected to the computer and in a state where it can receive the firmware. Requires a configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/bobpad/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake bobpad:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing JKB65 RGB R2 Firmware (QMK)\nDESCRIPTION: This command flashes the default firmware to the JKB65 RGB R2 keyboard using the QMK build environment. It builds and flashes the firmware using the `make` command with the target specified as `jadookb/jkb65/r2:default:flash`. Dependencies include the QMK build environment and a connected keyboard in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/jadookb/jkb65/r2/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake jadookb/jkb65/r2:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Laplace Keyboard Firmware (QMK, avrdude)\nDESCRIPTION: This command builds and flashes the default firmware for the Keebio Laplace keyboard using the QMK build environment and the avrdude flashing tool. It compiles the firmware and then uploads it to the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keebio/laplace/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake keebio/laplace:default:avrdude\n```\n\n----------------------------------------\n\nTITLE: Git Submodule Log\nDESCRIPTION: This snippet describes how to iterate through the git submodules and retrieve their latest commit SHA-1 hash to compare it with the QMK-based forks.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/breaking_changes.md#_snippet_3\n\nLANGUAGE: git\nCODE:\n```\ngit submodule foreach git log -n1\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for Knife66 ISO\nDESCRIPTION: This command builds the default firmware for the Knife66 ISO keyboard using the QMK build environment.  It compiles the keymap and other necessary files into a firmware image that can be flashed to the keyboard.  Requires QMK build environment to be set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/misterknife/knife66_iso/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake misterknife/knife66_iso:default\n```\n\n----------------------------------------\n\nTITLE: Building Typ65+ with VIA\nDESCRIPTION: This command builds the firmware for the Typ65+ keyboard with VIA support using the QMK build environment. It compiles the keyboard layout and firmware into a flashable image.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kopibeng/typ65/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake kopibeng/typ65:via\n```\n\n----------------------------------------\n\nTITLE: Building Adellein Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the Adellein keyboard using the QMK build environment.  It compiles the keymap and other necessary components to create a firmware image suitable for flashing. Requires QMK build environment to be set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/nightly_boards/adellein/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake nightly_boards/adellein:default\n```\n\n----------------------------------------\n\nTITLE: Building the Sejin EAT-1010R2 firmware (QMK)\nDESCRIPTION: This command compiles the QMK firmware for the Sejin EAT-1010R2 keyboard with the default configuration. It requires a properly set up QMK build environment. The command outputs the firmware binary, ready for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/sejin_eat1010r2/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake handwired/sejin_eat1010r2:default\n```\n\n----------------------------------------\n\nTITLE: Building KBD6x Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the KBD6x keyboard using the QMK build environment. It requires that the QMK build environment is properly set up. The output is a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kbdfans/kbd6x/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake kbdfans/kbd6x:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Aurora Sofle v2 Keyboard\nDESCRIPTION: This command flashes the built firmware onto the Aurora Sofle v2 keyboard. It requires the build environment to be set up correctly and the keyboard to be connected in a flashable state (e.g., bootloader mode). It combines the build and flash steps.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/splitkb/aurora/sofle_v2/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake splitkb/aurora/sofle_v2/rev1:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing KNIGHT keyboard firmware\nDESCRIPTION: This command flashes the pre-built or newly built QMK firmware onto the X-BOWS KNIGHT keyboard using the default keymap. It transfers the firmware to the keyboard's microcontroller, replacing the existing firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/xbows/knight/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake xbows/knight:default:flash\n```\n\nLANGUAGE: Shell\nCODE:\n```\nmake xbows/knight:via:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Tata80 Firmware with QMK\nDESCRIPTION: This command builds and flashes the default firmware for the Tata80 WKL layout keyboard using the QMK build system. It assumes the keyboard is in a flashable state and the build environment is correctly set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wuque/tata80/wkl/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake wuque/tata80/wkl:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Fave60a Keyboard Firmware\nDESCRIPTION: This command flashes the compiled firmware to the linworks/fave60a keyboard. It requires a configured build environment and the necessary tools for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/linworks/fave60a/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake linworks/fave60a:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Glacier Keyboard with QMK Make\nDESCRIPTION: This command flashes the Glacier keyboard with the default keymap using the QMK build environment. It requires the QMK build environment to be set up correctly. The target is `handwired/swiftrax/glacier:default:flash`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/swiftrax/glacier/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/swiftrax/glacier:default:flash\n```\n\n----------------------------------------\n\nTITLE: Enabling Audio on Pin B5 in QMK config.h\nDESCRIPTION: This code snippet enables audio output on pin B5 in QMK firmware. Duophony is enabled if one of the B pins is enabled along with one of the C pins. Deprecated. Use `#define AUDIO_PIN B5`, or use `#define AUDIO_PIN_ALT B5` if a `C` pin is enabled with `AUDIO_PIN`. This setting is configured in the `config.h` file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/config_options.md#_snippet_18\n\nLANGUAGE: c\nCODE:\n```\n#define B5_AUDIO\n```\n\n----------------------------------------\n\nTITLE: Making Infinity87 Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the Infinity87 keyboard using the QMK build environment.  It assumes the QMK build environment is properly set up. The resulting firmware can then be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechlovin/infinity87/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake mechlovin/infinity87:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Raindrop Keyboard Firmware\nDESCRIPTION: This command flashes the compiled firmware to the Raindrop keyboard using the QMK build environment.  It uses the 'default' keymap for the 'laneware/raindrop' keyboard and the 'flash' target to upload the firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/laneware/raindrop/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake laneware/raindrop:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building NT750 Firmware\nDESCRIPTION: This command builds the default firmware for the NT750 keyboard using the QMK build environment. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/evyd13/nt750/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake evyd13/nt750:default\n```\n\n----------------------------------------\n\nTITLE: Building XT8x Firmware with Make\nDESCRIPTION: This command builds the default firmware for the XT8x keyboard using the `make` command. It assumes that the QMK build environment has already been set up. The command compiles the firmware based on the `kopibeng/xt8x:default` configuration and generates a `.hex` or `.bin` file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kopibeng/xt8x/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake kopibeng/xt8x:default\n```\n\n----------------------------------------\n\nTITLE: Building Meishi Keyboard Firmware\nDESCRIPTION: This command builds the firmware for the Meishi keyboard using the QMK build environment. It specifies the keyboard layout (biacco42/meishi), the keymap (default), and the flashing method (avrdude).  It assumes that the QMK build environment is properly set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/biacco42/meishi/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ make biacco42/meishi:default:avrdude\n```\n\n----------------------------------------\n\nTITLE: Flashing keyboard firmware\nDESCRIPTION: This command flashes the built firmware onto the posey_split_v5 keyboard. It uses the `make` command with arguments for the keyboard, version, keymap and the flash target.  It requires a properly configured QMK build environment and a connected keyboard in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/pmk/posey_split/v5/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake pmk/posey_split/v5:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Noxary 268 Firmware with QMK\nDESCRIPTION: This snippet shows how to compile the firmware for the Noxary 268 keyboard using the QMK firmware. It assumes that the user has already set up the build environment as described in the QMK documentation. The command compiles the 'default' keymap for the 'noxary/268' keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/noxary/268/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake noxary/268:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Udon:13 Firmware with QMK\nDESCRIPTION: This command flashes the compiled QMK firmware onto the Udon:13 keyboard using the default keymap.  It requires a properly configured QMK build environment and a connected Udon:13 device.  The command assumes the device is in a flashable state.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/themadnoodle/udon13/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nqmk flash -kb themadnoodle/udon13 -km default\n```\n\n----------------------------------------\n\nTITLE: Building Timber Wolf Firmware (ANSI)\nDESCRIPTION: This command builds the QMK firmware for the Timber Wolf keyboard with a TBR-Prime layout and an ANSI configuration. It utilizes the `make` command with specific target parameters to compile the firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/metamechs/timberwolf/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake metamechs/timberwolf:prime_ansi\n```\n\n----------------------------------------\n\nTITLE: Building Hannah65 Firmware (QMK)\nDESCRIPTION: This command is used to compile the QMK firmware for the Hannah65 keyboard with the default configuration. It utilizes the make command within the QMK build environment to generate the firmware. This requires the QMK build environment to be properly set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechlovin/hannah65/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake mechlovin/hannah65/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Flashing YMD40 AIR40 Firmware with Make\nDESCRIPTION: This command flashes the compiled firmware onto the YMD40 AIR40 keyboard using the QMK make system. It requires the keyboard to be in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ymdk/ymd40/air40/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake ymdk/ymd40/air40:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building TutelPad Firmware\nDESCRIPTION: This command builds the default firmware for the TutelPad macropad. It requires the QMK build environment to be properly set up. The resulting firmware can then be flashed to the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/0xcb/tutelpad/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake 0xcb/tutelpad:default\n```\n\n----------------------------------------\n\nTITLE: Flashing RAMA WORKS M65-B Firmware\nDESCRIPTION: This command compiles and flashes the QMK Firmware onto the RAMA WORKS M65-B keyboard with the default keymap. It requires a configured QMK build environment and a compatible flashing tool.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wilba_tech/rama_works_m65_b/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake wilba_tech/rama_works_m65_b:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building the ogre/ergo_split keyboard with make\nDESCRIPTION: This command is used to compile the default keymap for the ogre/ergo_split keyboard using the QMK build environment. It assumes that the build environment has been properly set up as described in the QMK documentation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ogre/ergo_split/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake ogre/ergo_split:default\n```\n\n----------------------------------------\n\nTITLE: Building Keyboard Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the Viktus Styrka v2 keyboard. It requires a properly configured QMK build environment.  The output is a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/viktus/sp111_v2/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake viktus/sp111_v2:default\n```\n\n----------------------------------------\n\nTITLE: Building Promise87 Keyboard Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the Promise87 WKL keyboard using the QMK build environment. It compiles the keymap and generates the firmware file for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wuque/promise87/wkl/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake wuque/promise87/wkl:default\n```\n\n----------------------------------------\n\nTITLE: Flashing RART67M Firmware with QMK\nDESCRIPTION: This command flashes the compiled firmware to the RART67M keyboard. It builds the firmware if necessary and then flashes it. Requires a properly configured QMK environment and a connected keyboard in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/rart/rart67m/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake rart/rart67m:default:flash\n```\n\n----------------------------------------\n\nTITLE: Defining the FN3 Layer Keymap\nDESCRIPTION: This snippet defines the FN3 layer keymap for the Navpad 1.0.  All keys are set to KC_NO, indicating no action is assigned to them. This layer can be customized with desired functionalities.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/yushakobo/navpad/10/keymaps/default/readme.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n   ,-------------------------------. ,-------.\n   | KC_NO    | KC_NO    | KC_NO   | | KC_NO |\n   |----------+----------+----------+-------------------------------------------------.\n   | KC_NO    | KC_NO    | KC_NO    | KC_NO    | KC_NO     | KC_NO    | KC_NO         |\n   |----------+----------+----------+----------+-----------+----------+---------------|\n   | KC_NO    | KC_NO    | KC_NO    | KC_NO    | KC_NO     | KC_NO    | KC_NO         |\n   `--------------------------------+----------+-----------+----------+---------------|\n                                    | KC_NO    | KC_NO     | KC_NO    | KC_NO         |\n   ,--------------------------------+----------+-----------+----------+---------------|\n   | KC_NO    | KC_NO    | KC_NO    | KC_NO    | KC_NO     | KC_NO    | KC_NO         |\n   |----------+----------+----------+----------+-----------+----------+---------------|\n   | KC_NO    | KC_NO    | KC_NO    | KC_NO    | KC_NO     | KC_NO    | KC_NO         |\n   '----------------------------------------------------------------------------------`\n```\n\n----------------------------------------\n\nTITLE: Building HS60 ANSI Firmware with QMK\nDESCRIPTION: This command compiles the QMK firmware for the HS60 keyboard with an ANSI layout. It utilizes the 'make' command within the QMK build environment, targeting the 'hs60/v1/ansi' configuration with the 'default' keymap. This process generates the firmware ready to be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/hs60/v1/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake hs60/v1/ansi:default\n```\n\n----------------------------------------\n\nTITLE: Flashing QMK Firmware to Dygma Raise\nDESCRIPTION: This command flashes the built QMK firmware to the Dygma Raise keyboard. It requires the QMK build environment and a configured flashing tool compatible with the STM32 Blackpill. The target device must be in DFU mode or a similar flashing-ready state.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/dygma/raise/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake handwired/dygma/raise/ansi:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Chroma Firmware with QMK\nDESCRIPTION: This command builds the default keymap for the Chroma keyboard using the QMK build environment. It requires a properly configured QMK build environment as described in the documentation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cipulot/chroma/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake cipulot/chroma:default\n```\n\n----------------------------------------\n\nTITLE: Building Kawayo Keyboard Firmware\nDESCRIPTION: These commands are used to build the firmware for the Kawayo keyboard using QMK.  The `make` command compiles the source code into a firmware image that can be flashed onto the keyboard. The first command builds the default keymap, and the second builds the VIA-enabled keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cipulot/kawayo/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake cipulot/kawayo:default\n```\n\nLANGUAGE: Makefile\nCODE:\n```\nmake cipulot/kawayo:via\n```\n\n----------------------------------------\n\nTITLE: Building suika15tone Firmware\nDESCRIPTION: This command builds the default firmware for the suika15tone keyboard. It uses the `make` command with the keyboard's identifier.  Ensure the build environment is properly set up before running this command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/suikagiken/suika15tone/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake suikagiken/suika15tone:default\n```\n\n----------------------------------------\n\nTITLE: Flashing BM40hsrgb Firmware (rev2)\nDESCRIPTION: This command builds and flashes the default firmware for revision 2 of the kprepublic/bm40hsrgb keyboard using the QMK build environment. It requires the QMK environment to be set up correctly and the keyboard to be in a flashable state.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kprepublic/bm40hsrgb/readme.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmake kprepublic/bm40hsrgb/rev2:default:flash\n```\n\n----------------------------------------\n\nTITLE: Creating a Backup Branch\nDESCRIPTION: This command creates a new branch named `old_master` that is a duplicate of the current `master` branch. This serves as a backup of any local changes made on the `master` branch before resynchronizing with the upstream repository.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/newbs_git_resynchronize_a_branch.md#_snippet_0\n\nLANGUAGE: git\nCODE:\n```\ngit branch old_master master\n```\n\n----------------------------------------\n\nTITLE: Running QMK Docs Locally\nDESCRIPTION: This command allows you to preview documentation changes locally after setting up the QMK development environment. It builds the documentation and opens it in a web browser.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/contributing.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nqmk docs -b\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for Neson Design 810E - Make Command\nDESCRIPTION: This command builds the default firmware for the Neson Design 810E keyboard. It requires QMK build environment to be set up. The output is the compiled firmware ready to be flashed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/neson_design/810e/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake neson_design/810e:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Gud70 Default Layout with QMK\nDESCRIPTION: This command flashes the default layout to the Gud70 keyboard using QMK firmware.  It assumes a correctly configured QMK build environment and a connected keyboard in bootloader mode (activated by pressing the reset button under the spacebar). The target is flashed with the compiled firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/evyd13/gud70/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake evyd13/gud70:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Bartlesplit Firmware (Make)\nDESCRIPTION: This command builds and flashes the default firmware for the Bartlesplit keyboard. It requires the QMK build environment and a connected Pro Micro controller. The command assumes the bootloader is active.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/minimon/bartlesplit/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake minimon/bartlesplit:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Dango40 Keyboard with QMK\nDESCRIPTION: This command compiles the default keymap for the Dango40 keyboard and flashes it to the device. It requires a properly configured QMK build environment. The command assumes the keyboard is connected and in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/onekeyco/dango40/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake onekeyco/dango40:default:flash\n```\n\n----------------------------------------\n\nTITLE: Bottom Row Keymap Configuration\nDESCRIPTION: Defines the keymap configuration for the bottom row of the keyboard, including function (Fn), Alt, Meta, and Space keys. Two variations are presented, presumably for different keyboard layouts or models.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kc60se/keymaps/default/readme.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n    |Fn |Alt |Meta|        Space          |Meta|Alt |\n    |Fn |Meta|Alt |        Space          |ALt |Meta|\n```\n\n----------------------------------------\n\nTITLE: Importing Keyboard Firmware Builder configuration with QMK CLI\nDESCRIPTION: This code snippet demonstrates how to import a configuration file generated by the Keyboard Firmware Builder into a modern version of QMK Firmware using the `qmk import-kbfirmware` command. It includes example usage and the expected output after the import process is complete. This allows users to transition from the older KBFirmware-generated configuration to a current QMK environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/hand_wire.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nqmk import-kbfirmware /path/to/export.json\n```\n\n----------------------------------------\n\nTITLE: Making the Vida Keyboard Firmware (Hotswap)\nDESCRIPTION: This command compiles the QMK firmware for the CannonKeys Vida keyboard with the hotswap layout and default keymap. It requires a properly set up build environment as described in the QMK documentation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cannonkeys/vida/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake cannonkeys/vida:hotswap:default\n```\n\n----------------------------------------\n\nTITLE: Building Chavdai40 Firmware (rev1)\nDESCRIPTION: This command builds the default firmware for the Chavdai40 keyboard, revision 1. It uses the QMK make system to compile the firmware. Requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/chavdai40/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake chavdai40/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Soup10 Firmware\nDESCRIPTION: This command flashes the built firmware onto the Soup10 keyboard. It uses the QMK make system and assumes a connected and bootloader-ready device. Requires a configured QMK build environment and a connected Pro Micro.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/soup10/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake soup10:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Adelheid Keyboard Firmware with QMK\nDESCRIPTION: This snippet shows the command to build the default firmware for the Adelheid keyboard using the QMK build environment. It requires a properly set up QMK build environment.  It outputs the compiled firmware ready to be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/adelheid/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake adelheid:default\n```\n\n----------------------------------------\n\nTITLE: Flashing mini42 Keyboard Firmware\nDESCRIPTION: This command flashes the default firmware onto the mini42 keyboard using the QMK build environment.  It requires a properly configured QMK environment and a connected keyboard in a flashable state. The command also includes the building of the firmware as a pre-requisite. It updates the keyboard's firmware with the compiled binary.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/controllerworks/mini42/readme.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nmake controllerworks/mini42:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building dyz40 Firmware with QMK\nDESCRIPTION: This command builds the default keymap for the dyz40 keyboard using the QMK build environment.  It compiles the firmware for the specified keyboard and keymap.  Requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/dyz/dyz40/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake dyz/dyz40:default\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for Boardrun Classic (QMK)\nDESCRIPTION: This command builds the default firmware for the Boardrun Classic keyboard using the QMK build environment. It assumes that the QMK build environment has already been set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/boardrun/classic/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake boardrun/classic:default\n```\n\n----------------------------------------\n\nTITLE: Building P42 Keyboard Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Pabile P42 keyboard using the QMK build environment. It assumes that the QMK build environment has already been set up.  The command targets the `pabile/p42` keyboard and the `default` keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/pabile/p42/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake pabile/p42:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Sesame Keyboard Firmware (QMK)\nDESCRIPTION: This command flashes the compiled firmware to the Sesame keyboard. It utilizes the QMK build environment to transfer the firmware to the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kb_elmo/sesame/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake kb_elmo/sesame:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Teton 78 Firmware\nDESCRIPTION: This command flashes the compiled firmware to the Teton 78 keyboard. It depends on the QMK build environment and a correctly compiled firmware file. The keyboard must be connected to the computer.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mountainmechdesigns/teton_78/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake mountainmechdesigns/teton_78:default:flash\n```\n\n----------------------------------------\n\nTITLE: Compiling Frosty Flake Firmware (104-key Default)\nDESCRIPTION: This command compiles the Frosty Flake firmware with the default (104-key) layout. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/bpiphany/frosty_flake/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake bpiphany/frosty_flake:default\n```\n\n----------------------------------------\n\nTITLE: Building DB60 (rev2) Firmware with QMK\nDESCRIPTION: This command builds the firmware for the CannonKeys DB60 rev2 keyboard using the QMK build environment. It assumes that the QMK build environment is properly set up. The `default` keyword specifies the default keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cannonkeys/db60/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake cannonkeys/db60/rev2:default\n```\n\n----------------------------------------\n\nTITLE: Building the firmware for the 2% Milk keyboard (Makefile)\nDESCRIPTION: This snippet shows how to build the default firmware for the 2% Milk keyboard using the `make` command. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/spaceman/2_milk/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake spaceman/2_milk:default\n```\n\n----------------------------------------\n\nTITLE: Building and Flashing Ergo42 Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Ergo42 keyboard revision 1 and flashes it to the device. It requires the QMK build environment to be set up correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/biacco42/ergo42/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake biacco42/ergo42/rev1:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Bison Keyboard Firmware - Makefile\nDESCRIPTION: This command flashes the compiled firmware to the Bison keyboard. It uses the 'make' command with the 'bison' target, 'default' keymap, and the 'flash' action. Assumes the build environment is correctly configured.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keyprez/bison/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake bison:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing M6-C Keyboard Firmware with QMK\nDESCRIPTION: This command builds and flashes the default firmware for the M6-C keyboard using the QMK build environment. It requires the QMK build environment and a configured flashing tool.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wolf/m6_c/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake wolf/m6_c:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building TKC Candybar Firmware with Make\nDESCRIPTION: This snippet demonstrates how to build the QMK firmware for the TKC Candybar keyboard with a lefty layout, default keymap, and DFU-util bootloader.  It assumes that the QMK build environment is already set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/tkc/candybar/lefty/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake tkc/candybar/lefty:default:dfu-util\n```\n\n----------------------------------------\n\nTITLE: Flashing the keyboard firmware - Makefile\nDESCRIPTION: This command flashes the default firmware to the studiokestra/line_friends_tkl keyboard. It requires a properly configured QMK build environment and a connected keyboard in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/studiokestra/line_friends_tkl/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake studiokestra/line_friends_tkl:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Viktus Styrka Keyboard Firmware (Makefile)\nDESCRIPTION: This command builds the default firmware for the Viktus Styrka keyboard. It uses the `make` command with the target `viktus/styrka:default`.  It assumes that the QMK build environment has already been set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/viktus/styrka/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake viktus/styrka:default\n```\n\n----------------------------------------\n\nTITLE: Building the Blue Team Pad firmware\nDESCRIPTION: This command builds the default firmware for the Blue Team Pad using the QMK build environment. It assumes the build environment has been properly set up according to the QMK documentation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/fearherbs1/blue_team_pad/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake fearherbs1/blue_team_pad:default\n```\n\n----------------------------------------\n\nTITLE: Flashing ProjectD 75% ANSI Firmware\nDESCRIPTION: This command builds and flashes the default firmware onto the ProjectD 75% ANSI keyboard. Ensure the keyboard is connected and in a flashable state.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/projectd/75/ansi/readme.md#_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nmake projectd/75/ansi:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Chaos65 Firmware\nDESCRIPTION: This command builds the default firmware for the Chaos65 keyboard.  It requires a properly configured QMK build environment.  The output will be a .hex or .bin file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/chaos65/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake chaos65:default\n```\n\n----------------------------------------\n\nTITLE: Building Mitosis Keyboard Firmware\nDESCRIPTION: This command builds the default keymap for the Mitosis keyboard using the QMK firmware. It requires a properly set up QMK build environment as detailed in the linked documentation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mitosis/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake mitosis:default\n```\n\n----------------------------------------\n\nTITLE: Flashing BigBoy Firmware\nDESCRIPTION: This command flashes the built firmware onto the BigBoy macropad using the QMK build environment and flash tools.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/tominabox1/bigboy/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake bigboy:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building SHU98 Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the SHU98 keyboard using the QMK build system. It compiles the source code and generates a firmware image that can be flashed onto the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/shuguet/shu89/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake shuguet/shu89:default\n```\n\n----------------------------------------\n\nTITLE: Building Key Ripper Keyboard Firmware (Make)\nDESCRIPTION: This command builds the default firmware for the key_ripper keyboard. It utilizes the make command within the QMK firmware environment, specifying the keyboard layout as 'bschwind/key_ripper' and the keymap as 'default'. This process compiles the source code into a firmware image ready for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/bschwind/key_ripper/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake bschwind/key_ripper:default\n```\n\n----------------------------------------\n\nTITLE: Building UK78 Firmware\nDESCRIPTION: This command builds the default keymap for the UK78 keyboard. It requires a properly configured QMK build environment. The output will be a .hex or .bin file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/uk78/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake uk78:default\n```\n\n----------------------------------------\n\nTITLE: Matrix Diagram for Studio Kestra Nue\nDESCRIPTION: This is a visual representation of the keyboard matrix for the Studio Kestra Nue. It shows the row and column positions of each key, as well as the positions of the Shift keys and Backspace key. This helps in understanding the physical layout of the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/studiokestra/nue/matrix_diagram.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n                                                    ┌───────┐\n                                       2u Backspace │0D     │\n                                                    └───────┘\n┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┐\n│00 │01 │02 │03 │04 │05 │06 │07 │08 │09 │0A │0B │0C │0D │1D │\n├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴───┤      ┌─────┐\n│10   │11 │12 │13 │14 │15 │16 │17 │18 │19 │1A │1B │1C │2C   │      │     │\n├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴─────┤   ┌──┴┐2C  │\n│20    │21 │22 │23 │24 │25 │26 │27 │28 │29 │2A │2B │2D      │   │2D │    │\n├────┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴────┬───┤   └───┴────┘\n│30  │31 │32 │33 │34 │35 │36 │37 │38 │39 │3A │3B │3C    │3D │    ISO Enter\n├────┼───┴┬──┴─┬─┴───┴───┴───┴───┴───┴──┬┴───┼───┴┬────┬┴───┤\n│40  │41  │42  │46                      │49  │4A  │4B  │4C  │\n└────┴────┴────┴────────────────────────┴────┴────┴────┴────┘\n┌────────┐                                       ┌──────────┐\n│30      │ 2.25u LShift             2.75u RShift │3C        │\n└────────┘                                       └──────────┘\n┌─────┬───┬─────┬───────────────────────────┬─────┬───┬─────┐\n│40   │41 │42   │46                         │4A   │4B │4C   │ Tsangan/WKL/HHKB\n└─────┴───┴─────┴───────────────────────────┴─────┴───┴─────┘\n```\n\n----------------------------------------\n\nTITLE: Defining Mousekey Delay\nDESCRIPTION: Defines the initial delay for mouse key movements, influencing when the cursor starts moving after a mouse key is pressed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/config_options.md#_snippet_82\n\nLANGUAGE: C\nCODE:\n```\n#define MOUSEKEY_DELAY 0\n```\n\n----------------------------------------\n\nTITLE: Building E6-V2 OE_BMC Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the E6-V2 OE_BMC keyboard using the QMK build environment. It assumes that the QMK build environment is properly set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/exclusive/e6v2/oe_bmc/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake exclusive/e6v2/oe_bmc:default\n```\n\n----------------------------------------\n\nTITLE: Building Gin V2 Firmware (Makefile)\nDESCRIPTION: This command builds the default firmware for the Gin V2 keyboard.  It uses the QMK build environment.  The output is the .hex file to be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ocean/gin_v2/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake ocean/gin_v2:default\n```\n\n----------------------------------------\n\nTITLE: Making the MxSS keyboard with default keymap\nDESCRIPTION: This command compiles the QMK firmware for the MxSS keyboard with the default keymap. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mxss/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake mxss:default\n```\n\n----------------------------------------\n\nTITLE: Building dumbpad v3.x default firmware using make\nDESCRIPTION: This command builds the default firmware for the dumbpad v3.x keyboard. It utilizes the make command within the QMK firmware environment.  The compiled firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/dumbpad/v3x/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake dumbpad/v3x:default\n```\n\n----------------------------------------\n\nTITLE: Flashing h101 Firmware (QMK)\nDESCRIPTION: This command flashes the default firmware onto the hineybush/h101 keyboard.  It requires a configured QMK build environment and a connected keyboard in a flashable state. The command programs the .hex file onto the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/hineybush/h101/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake hineybush/h101:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Mechmini V1 Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Mechmini V1 keyboard using the QMK build environment. It assumes that the QMK build environment is already set up and configured correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechkeys/mechmini/v1/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake mechkeys/mechmini/v1:default\n```\n\n----------------------------------------\n\nTITLE: Building MB17 Firmware with QMK\nDESCRIPTION: This command compiles the QMK firmware for the MB17 keyboard using the default keymap. It requires a correctly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mountainblocks/mb17/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake mountainblocks/mb17:default\n```\n\n----------------------------------------\n\nTITLE: Building Play Keyboard60 with QMK\nDESCRIPTION: This snippet shows the command to build the Play Keyboard60 with the default keymap using the QMK firmware. It assumes that the QMK build environment is already set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/playkbtw/pk60/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake playkbtw/pk60:default\n```\n\n----------------------------------------\n\nTITLE: Flashing CU7 Firmware\nDESCRIPTION: This command builds and flashes the default firmware for the CU7 macropad using the QMK build environment. Ensure the QMK build environment is set up before running this command. Requires 'make' command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/capsunlocked/cu7/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake capsunlocked/cu7:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Nebula68 Firmware with VIA - Makefile\nDESCRIPTION: This command builds the firmware for the Nebula68 keyboard with VIA support using the QMK build environment. It requires QMK build environment to be setup and will generate a firmware file ready to be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/spaceholdings/nebula68/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake spaceholdings/nebula68:via\n```\n\n----------------------------------------\n\nTITLE: Making Keyboard Firmware - QMK - Bash\nDESCRIPTION: This command builds the default firmware for the Kastenwagen 1840 keyboard using the QMK build environment. It compiles the source code into a firmware image that can be flashed onto the keyboard's microcontroller. The command requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/nopunin10did/kastenwagen1840/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake nopunin10did/kastenwagen1840:default\n```\n\n----------------------------------------\n\nTITLE: Building Maxipad Firmware with Default Configuration\nDESCRIPTION: This command builds the Maxipad keyboard firmware with the default configuration. It assumes that the QMK build environment has been properly set up. The output is a firmware file that can be flashed onto the Maxipad.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/maxipad/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake maxipad:default\n```\n\n----------------------------------------\n\nTITLE: Building BDN9 Rev. 2 with QMK\nDESCRIPTION: This command builds the default keymap for the BDN9 Rev. 2 macropad using the QMK firmware. Ensure the QMK build environment is properly configured. The resulting firmware file can then be flashed to the macropad.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keebio/bdn9/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake keebio/bdn9/rev2:default\n```\n\n----------------------------------------\n\nTITLE: Building Infinity87 Keyboard Firmware (QMK)\nDESCRIPTION: This command builds the QMK firmware for the Infinity87 keyboard with the default keymap. It requires a properly configured QMK build environment.  It assumes the `mechlovin/infinity87` keyboard definition is available in the QMK firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechlovin/infinity87/rev1/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake mechlovin/infinity87:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Zygomorph Firmware with DFU\nDESCRIPTION: This `make` command flashes the compiled QMK firmware onto the Zygomorph keyboard using the DFU (Device Firmware Update) bootloader.  This command is used for subsequent flashes after the initial flash with AVRdudess.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/rgbkb/zygomorph/keymaps/default/readme.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n$ make rgbkb/zygomorph:default:dfu\n```\n\n----------------------------------------\n\nTITLE: Building retro_refit Keyboard Firmware\nDESCRIPTION: This command builds the firmware for the retro_refit keyboard with the default keymap. It requires a properly configured QMK build environment.  The output will be a .hex file that can be flashed to the Teensy.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/retro_refit/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake handwired/retro_refit:default\n```\n\n----------------------------------------\n\nTITLE: Building Roopad Firmware - Make Command\nDESCRIPTION: This snippet shows the make command used to build the default firmware for the skippys_custom_pcs/roopad keyboard. It requires a correctly configured QMK build environment. The command compiles the firmware, which can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/skippys_custom_pcs/roopad/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake skippys_custom_pcs/roopad:default\n```\n\n----------------------------------------\n\nTITLE: Building BlocKey Firmware\nDESCRIPTION: This command builds the default firmware for the BlocKey keyboard using the QMK build environment. It assumes that the QMK build environment has been properly set up. Refer to the QMK documentation for setup instructions.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/blockey/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake blockey:default\n```\n\n----------------------------------------\n\nTITLE: Building ALU84 Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the ALU84 keyboard using the QMK build environment.  It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechkeys/alu84/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake mechkeys/alu84:default\n```\n\n----------------------------------------\n\nTITLE: Building Ferris Firmware with Make\nDESCRIPTION: These commands demonstrate how to build the QMK firmware for various Ferris keyboard configurations using the `make` command. Each command specifies the keyboard model (e.g., ferris/0_1, ferris/0_2, ferris/sweep) and the keymap (e.g., default). The `avrdude-split-right` target is specified for flashing the right half of the Ferris sweep keyboard.  Dependencies include a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ferris/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake ferris/0_1:default\nmake ferris/0_2:default\nmake ferris/0_2/bling:default\nmake ferris/0_2/compact:default\nmake ferris/0_2/mini:default\nmake ferris/0_2/high:default\nmake ferris/sweep:default:avrdude-split-right\n```\n\n----------------------------------------\n\nTITLE: Building Vault45 Keyboard Firmware (Makefile)\nDESCRIPTION: This command builds the default firmware for the Vault45 keyboard. It uses the QMK make system to compile the firmware for the 'projectcain/vault45' keyboard with the 'default' keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/projectcain/vault45/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake projectcain/vault45:default\n```\n\n----------------------------------------\n\nTITLE: Building Zed60 Firmware with Make\nDESCRIPTION: This command builds the default firmware for the Zed60 keyboard using the QMK build environment. It compiles the keyboard layout and necessary files into a firmware image.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechlovin/zed60/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake mechlovin/zed60:default\n```\n\n----------------------------------------\n\nTITLE: Flashing wings42 Keyboard Firmware (QMK)\nDESCRIPTION: This command flashes the compiled firmware onto the wings42 keyboard. It requires the QMK build environment and a connected keyboard in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/dailycraft/wings42/rev2/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake dailycraft/wings42:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building foobar Keyboard Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the foobar keyboard using QMK. It assumes the build environment has already been set up according to the QMK documentation. The output will be a .hex file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/40percentclub/foobar/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake 40percentclub/foobar:default\n```\n\n----------------------------------------\n\nTITLE: Committing Files to GitHub\nDESCRIPTION: These shell commands initialize a Git repository, add the created files, commit them, create a main branch, and push the changes to a remote GitHub repository. The user needs to replace `gh-username` with their actual GitHub username for the remote origin URL.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/newbs_building_firmware_workflow.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ncd ~/qmk_keymap\ngit init\ngit add -A\ngit commit -m \"Initial QMK keymap commit\"\ngit branch -M main\ngit remote add origin https://github.com/gh-username/qmk_keymap.git\ngit push -u origin main\n```\n\n----------------------------------------\n\nTITLE: Flashing BSTK100 Default Keymap\nDESCRIPTION: This command builds and flashes the default keymap to the BSTK100 keyboard. It requires the QMK build environment and a connected Pro Micro.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/bstk100/readme.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nmake handwired/bstk100:default:flash\n```\n\n----------------------------------------\n\nTITLE: Deleting Configuration Values (Dictionary Style) - Python\nDESCRIPTION: Demonstrates how to delete a configuration value using dictionary-style access in the QMK CLI. This method removes a specific configuration entry by specifying its section and key as strings.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/cli_development.md#_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\ndel(cli.config['<section>']['<key>'])\n```\n\n----------------------------------------\n\nTITLE: Flashing city42 Keyboard Firmware (QMK)\nDESCRIPTION: This command flashes the compiled firmware to the city42 keyboard. It requires a properly configured QMK build environment and the target keyboard to be in a flashable state.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/controllerworks/city42/readme.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nmake controllerworks/city42:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Firmware with Custom Keymap - make command\nDESCRIPTION: This command builds the .hex file for the Orthodox keyboard firmware using a custom keymap. It requires copying an existing keymap and then using the `make` command with the target `orthodox/rev1:YOUR_KEYMAP_NAME`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/orthodox/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ make orthodox/rev1:YOUR_KEYMAP_NAME\n```\n\n----------------------------------------\n\nTITLE: Setting Git Remote URL\nDESCRIPTION: This command modifies the URL of the `origin` remote repository to point to your own fork on GitHub.  This ensures that push operations target the correct remote repository.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/newbs_git_resynchronize_a_branch.md#_snippet_3\n\nLANGUAGE: git\nCODE:\n```\ngit remote set-url origin https://github.com/<your_username>/qmk_firmware.git\n```\n\n----------------------------------------\n\nTITLE: Flashing Ein_60 Firmware\nDESCRIPTION: This command flashes the default firmware to the Ein_60 keyboard. It requires a properly configured QMK build environment and a connected Ein_60 keyboard in bootloader mode. The flash process overwrites the existing firmware with the newly built one.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ein_60/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake ein_60:default:flash\n```\n\n----------------------------------------\n\nTITLE: Mapping LEDs in <keyboardname>.c (Single-Color Driver)\nDESCRIPTION: This snippet demonstrates how to map LEDs to specific driver outputs in the `<keyboardname>.c` file for the single-color driver.  The `g_is31fl3737_leds` array is defined as a constant array of `is31fl3737_led_t` structs, mapping each LED index to the driver index and PWM register address for the LED's brightness control.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/is31fl3737.md#_snippet_5\n\nLANGUAGE: c\nCODE:\n```\nconst is31fl3737_led_t PROGMEM g_is31fl3737_leds[IS31FL3737_LED_COUNT] = {\n/* Driver\n *   |  V */\n    {0, SW1_CS1},\n    // etc...\n};\n```\n\n----------------------------------------\n\nTITLE: Building Keyboard Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the Center x Enter keyboard. It compiles the keymap and necessary files to create a firmware ready to be flashed onto the keyboard's microcontroller. Requires a configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/takashicompany/center_enter/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake takashicompany/center_enter:default\n```\n\n----------------------------------------\n\nTITLE: Building Harbour Firmware with Make\nDESCRIPTION: This command builds the default firmware for the Harbour keyboard. It uses the QMK make system to compile the keyboard layout and generate the firmware binary, using the specified keyboard and keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kibou/harbour/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake kibou/harbour:default\n```\n\n----------------------------------------\n\nTITLE: Default Argument Values Example (Good) - Python\nDESCRIPTION: Demonstrates the correct way to use default argument values by using None and then initializing a mutable object inside the function.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/coding_conventions_python.md#_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\ndef my_func(foo=None):\n    if not foo:\n        foo = {}\n```\n\n----------------------------------------\n\nTITLE: Building waffling60 Firmware with Make\nDESCRIPTION: These `make` commands are used to build the firmware for different revisions and layouts of the waffling60 keyboard. Each command specifies the keyboard, revision, and keymap to build. The commands assume the QMK build environment is already set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/4pplet/waffling60/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake 4pplet/waffling60/rev_a:default\nmake 4pplet/waffling60/rev_b:default\nmake 4pplet/waffling60/rev_c:default\nmake 4pplet/waffling60/rev_d:default\nmake 4pplet/waffling60/rev_e:default\nmake 4pplet/waffling60/rev_d_ansi:default\nmake 4pplet/waffling60/rev_d_iso:default\n```\n\n----------------------------------------\n\nTITLE: Configuring Maximum ILI9486 Devices (C)\nDESCRIPTION: This snippet shows how to configure the maximum number of ILI9486 displays that can be used by setting the `ILI9486_NUM_DEVICES` macro in `config.h`. The default value is 1. This is a preprocessor definition. Requires Quantum Painter to be enabled.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/quantum_painter.md#_snippet_16\n\nLANGUAGE: c\nCODE:\n```\n// 3 displays:\n#define ILI9486_NUM_DEVICES 3\n```\n\n----------------------------------------\n\nTITLE: Flashing Matrix ME Keyboard Firmware\nDESCRIPTION: This command builds and flashes the QMK firmware for the Matrix ME keyboard using the default configuration. It compiles the source code and then uploads the generated firmware file to the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/matrix/me/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake matrix/me:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Daily60 Firmware\nDESCRIPTION: This command flashes the built firmware to the Daily60 keyboard. It utilizes the make command with the target nightly_boards/daily60:default:flash. This command relies on the QMK build environment being properly configured and the keyboard being connected.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/nightly_boards/daily60/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake nightly_boards/daily60:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Waldo Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the Waldo keyboard using the QMK build environment. It requires the QMK build environment to be set up beforehand.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/waldo/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake waldo:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Serratus Firmware\nDESCRIPTION: This command builds and flashes the default firmware to the Serratus keyboard. It requires a properly configured QMK build environment and a connected Serratus keyboard in a flashable state. The output is the flashed firmware running on the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechlovin/serratus/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake mechlovin/serratus:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing model-v Keyboard (QMK)\nDESCRIPTION: This command builds and flashes the default firmware to the model-v keyboard. Requires QMK build environment and a connected keyboard in bootloader mode.  The process writes the compiled firmware to the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/matthewdias/model_v/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake matthewdias/model_v:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building QMK Firmware for Mode Tempo M60H\nDESCRIPTION: This command builds the QMK firmware for the Mode Tempo M60H keyboard using the default keymap.  It requires the QMK build environment to be set up correctly. The output will be a .hex or .bin file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mode/m60h/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake mode/m60h:default\n```\n\n----------------------------------------\n\nTITLE: Running Single Python Test (QMK)\nDESCRIPTION: This command runs a single test within the python test suite. Two examples are given.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/cli_commands.md#_snippet_52\n\nLANGUAGE: qmk\nCODE:\n```\nqmk pytest -t qmk.tests.test_cli_commands.test_c2json\n```\n\nLANGUAGE: qmk\nCODE:\n```\nqmk pytest -t qmk.tests.test_qmk_path\n```\n\n----------------------------------------\n\nTITLE: DecenTKL Numpad Default Keymap\nDESCRIPTION: This C code represents the default keymap layout for the DecenTKL Numpad. It visually depicts the arrangement of keys and their corresponding functions in the default layer. No dependencies are explicitly required, but it relies on the QMK firmware framework for interpretation and implementation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/decent/numpad/readme.md#_snippet_2\n\nLANGUAGE: C\nCODE:\n```\n/*\n *    /─────/─────/\n *   /F11  /F12  /\n *  /─────/─────/\n * ┌───┬───┬───┬───┐\n * │Num│ / │ * │ - │\n * ├───┼───┼───┼───┤\n * │ 7 │ 8 │ 9 │ + │\n * ├───┼───┼───┤   │\n * │ 4 │ 5 │ 6 │   │\n * ├───┼───┼───┼───┤\n * │ 1 │ 2 │ 3 │Ent│\n * ├───┴───┼───┤ er│\n * │ 0     │ . │   │\n * └───────┴───┴───┘\n */\n```\n\n----------------------------------------\n\nTITLE: Building Vimouse Keymap for V60 Type R (Makefile)\nDESCRIPTION: This command builds the QMK firmware for the KBParadise V60 Type R keyboard using the vimouse keymap. It requires a configured QMK build environment. The resulting .hex file can then be flashed to the keyboard for use.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/v60_type_r/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake v60_type_r:vimouse\n```\n\n----------------------------------------\n\nTITLE: Amber80 Keyboard Matrix Diagram\nDESCRIPTION: This diagram illustrates the matrix layout for the SawnsProjects X Yuutsu X Zlane Amber80 Solder keyboard. Each cell represents a key and its corresponding row and column in the matrix. This information is vital for configuring the keyboard firmware correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/sawnsprojects/amber80/solder/matrix_diagram.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n┌───┐┌───┬───┬───┬───┐┌───┬───┬───┬───┐┌───┬───┬───┬───┐┌───┐┌───┬───┬───┐\n│00 ││10 │01 │11 │02 ││12 │03 │13 │04 ││14 │05 │15 │06 ││16 ││17 │08 │18 │\n└───┘└───┴───┴───┴───┘└───┴───┴───┴───┘└───┴───┴───┴───┘└───┘└───┴───┴───┘\n┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┐┌───┬───┬───┐\n│20 │30 │21 │31 │22 │32 │23 │33 │24 │34 │25 │35 │26 │36 │27 ││37 │28 │38 │\n├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴───┤├───┼───┼───┤\n│40   │50 │41 │51 │42 │52 │43 │53 │44 │54 │45 │55 │46 │56   ││57 │48 │58 │\n├─────┴──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴─────┤└───┴───┴───┘\n│60    │70 │61 │71 │62 │72 │63 │73 │64 │74 │65 │75 │76      │\n├────┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴────┬───┤    ┌───┐\n│80  │90 │81 │91 │82 │92 │83 │93 │84 │94 │85 │95 │86    │96 │    │88 │\n├────┴┬──┴┬──┴──┬┴───┴───┴───┴───┴───┴───┴──┬┴───┴┬───┬─┴───┤┌───┼───┼───┐\n│A0   │B0 │A1   │B3                         │A6   │B6 │A7   ││B7 │A8 │B8 │\n└─────┴───┴─────┴───────────────────────────┴─────┴───┴─────┘└───┴───┴───┘\n                                                    ┌───────┐\n                                       2u Backspace │36     │\n                                                    └─┬─────┤\n                                                      │     │\n                                         ISO Enter ┌──┴┐76  │\n                                                   │56 │    │\n┌────────┐                                       ┌─┴───┴────┤\n│80      │ 2.25u LShift             2.75u RShift │86        │\n└────────┘                                       └──────────┘\n```\n\n----------------------------------------\n\nTITLE: Flashing BM80V2_ISO keyboard firmware\nDESCRIPTION: This command flashes the built firmware onto the BM80V2_ISO keyboard. It utilizes the `make` command with the target set to `kprepublic/bm80v2_iso:default:flash`. The command depends on the QMK build environment and a connected keyboard in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kprepublic/bm80v2_iso/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake kprepublic/bm80v2_iso:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for YANG HHKB BLE Mod\nDESCRIPTION: This command is used to build the default firmware for the YANG HHKB BLE Mod keyboard. It assumes that the QMK build environment is already set up correctly. The resulting firmware file will be named `hhkb_yang_default.bin`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/hhkb/yang/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake hhkb/yang:default\n```\n\n----------------------------------------\n\nTITLE: Building PaladinPad Firmware\nDESCRIPTION: This command compiles the default firmware for the PaladinPad keyboard. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kapcave/paladinpad/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake kapcave/paladinpad:default\n```\n\n----------------------------------------\n\nTITLE: Setting Keymap Configuration\nDESCRIPTION: This command sets the keymap configuration for the QMK build environment. The keymap defines the layout and functionality of the keyboard. 'default' is a common keymap name, but other keymaps can be used if they exist in the keymaps folder.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/redox/rev1/readme.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nqmk config user.keymap=default\n```\n\n----------------------------------------\n\nTITLE: Compiling HHKB ANSI Firmware\nDESCRIPTION: This command is used to compile the QMK firmware for ANSI layout HHKB keyboards. It requires the QMK environment to be properly set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/ChangeLog/20200530.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake hhkb/ansi\n```\n\n----------------------------------------\n\nTITLE: Building KBD67 Mk.II RGB Firmware (AVR V4)\nDESCRIPTION: This command builds the QMK firmware for the KBD67 Mk.II RGB keyboard, version 4, which utilizes an AVR-based ATmega32U4 microcontroller and an SK6812MINI RGB LED driver. A .bin file will be generated. Requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kbdfans/kbd67/mkiirgb/readme.md#_snippet_3\n\nLANGUAGE: make\nCODE:\n```\nmake kbdfans/kbd67/mkiirgb/v4:default # AVR (ATmega32U4+SK6812MINI)\n```\n\n----------------------------------------\n\nTITLE: Flashing v83p Firmware with Make\nDESCRIPTION: This command flashes the built firmware to the inland/v83p keyboard using the QMK make system. It requires a correctly configured QMK build environment and a compatible bootloader on the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/inland/v83p/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake inland/v83p:default:flash\n```\n\n----------------------------------------\n\nTITLE: Implementing ST7565 task call in QMK keymap.c\nDESCRIPTION: This code shows how to implement the `st7565_task_user` function in your `keymap.c` file to display information on the ST7565 LCD. It retrieves the active keyboard layer and LED status, then writes corresponding strings to the display using `st7565_write_P` and `st7565_write_ln_P`. The `PSTR` macro is used to store strings in program memory to save RAM.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/st7565.md#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n#ifdef ST7565_ENABLE\nvoid st7565_task_user(void) {\n    // Host Keyboard Layer Status\n    st7565_write_P(PSTR(\"Layer: \"), false);\n\n    switch (get_highest_layer(layer_state)) {\n        case _QWERTY:\n            st7565_write_P(PSTR(\"Default\\n\"), false);\n            break;\n        case _FN:\n            st7565_write_P(PSTR(\"FN\\n\"), false);\n            break;\n        case _ADJ:\n            st7565_write_P(PSTR(\"ADJ\\n\"), false);\n            break;\n        default:\n            // Or use the write_ln shortcut over adding '\\n' to the end of your string\n            st7565_write_ln_P(PSTR(\"Undefined\"), false);\n    }\n\n    // Host Keyboard LED Status\n    led_t led_state = host_keyboard_led_state();\n    st7565_write_P(led_state.num_lock ? PSTR(\"NUM \") : PSTR(\"    \"), false);\n    st7565_write_P(led_state.caps_lock ? PSTR(\"CAP \") : PSTR(\"    \"), false);\n    st7565_write_P(led_state.scroll_lock ? PSTR(\"SCR \") : PSTR(\"    \"), false);\n}\n#endif\n```\n\n----------------------------------------\n\nTITLE: Flashing Type-B Keyboard Firmware with Make\nDESCRIPTION: This command builds and flashes the default firmware for the Type-B keyboard using the QMK build environment. It requires the QMK build environment to be set up correctly and a connected keyboard in bootloader mode.  The command assumes that the dfu-util or other flashing tools are installed and configured.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cannonkeys/typeb/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake cannonkeys/typeb:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Ashwing66 Firmware with QMK\nDESCRIPTION: This command builds and flashes the default firmware for the Ashwing66 keyboard using the QMK build environment. It requires that the build environment is set up correctly. This command also implies the build command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ashwing66/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake ashwing66:default:flash\n```\n\n----------------------------------------\n\nTITLE: Detaching LVGL from Display (C)\nDESCRIPTION: This code snippet shows the `qp_lvgl_detach` function, which stops internal LVGL ticks and releases resources. After detaching, the display is no longer controlled by LVGL.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/quantum_painter_lvgl.md#_snippet_3\n\nLANGUAGE: C\nCODE:\n```\nvoid qp_lvgl_detach(void)\n```\n\n----------------------------------------\n\nTITLE: Building Coupe Keyboard Firmware with QMK\nDESCRIPTION: This command builds the default keymap for the Coupe keyboard using the QMK firmware. It assumes that the QMK build environment has already been set up. Replace 'default' with another keymap name if needed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/clawsome/coupe/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake clawsome/coupe:default\n```\n\n----------------------------------------\n\nTITLE: Kafka60 Keyboard Matrix Diagram\nDESCRIPTION: This is a visual representation of the key matrix for the Kafka60 keyboard. Each cell represents a key, and the values inside the cells (00, 01, etc.) indicate the row and column that key corresponds to in the keyboard matrix. This diagram is crucial for understanding how the keyboard controller scans for key presses.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/meetlab/kafka60/matrix_diagram.md#_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┐   \n│00 │01 │02 │03 │04 │05 │06 │07 │08 │09 │0A │0B │0C │0D │0E │ \n├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴───┤\n│10   │11 │12 │13 │14 │15 │16 │17 │18 │19 │1A │1B │1C │1E   │\n├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴─────┤\n│20    │21 │22 │23 │24 │25 │26 │27 │28 │29 │2A │2B │2D      │\n├──────┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴────┬───┤\n│30      │31 │32 │33 │34 │35 │36 │37 │38 │39 │3A │3C    │3E │\n└─────┬──┴┬──┴─┬─┴───┴───┴───┴───┴───┴───┴───┼───┴┬───┬─┴───┘\n      │40 │41  │45                           │4A  │4C │\n      └───┴────┴─────────────────────────────┴────┴───┘\n```\n\n----------------------------------------\n\nTITLE: Flashing TONE Keyboard Firmware (QMK)\nDESCRIPTION: This command flashes the compiled firmware onto the TONE keyboard, specifically the rev1 version with the default configuration, using the QMK make system and the appropriate flashing tools.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/peranekofactory/tone/rev1/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake peranekofactory/tone/rev1:default:flash\n```\n\n----------------------------------------\n\nTITLE: Defining AVR Sleep Modes (C/C++)\nDESCRIPTION: These macros define various sleep modes available in AVR microcontrollers using bitwise operations and register manipulation. These modes determine the level of power saving during sleep, ranging from idle to power-down. They are defined using preprocessor directives and bitwise OR operations with _BV macro.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/power.txt#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#define set_sleep_mode(mode) \\\n#define SLEEP_MODE_IDLE         (0)\n#define SLEEP_MODE_ADC          _BV(SM0)\n#define SLEEP_MODE_PWR_DOWN     _BV(SM1)\n#define SLEEP_MODE_PWR_SAVE     (_BV(SM0) | _BV(SM1))\n#define SLEEP_MODE_STANDBY      (_BV(SM1) | _BV(SM2))\n#define SLEEP_MODE_EXT_STANDBY  (_BV(SM0) | _BV(SM1) | _BV(SM2))\n```\n\n----------------------------------------\n\nTITLE: Building KBD8X Firmware\nDESCRIPTION: This snippet shows how to build the default firmware for the KBD8X keyboard using the QMK build environment. It assumes that the QMK build environment has been set up correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kbdfans/kbd8x/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake kbdfans/kbd8x:default\n```\n\n----------------------------------------\n\nTITLE: Flashing the DIVINE Keyboard Firmware with QMK\nDESCRIPTION: This command flashes the compiled firmware onto the DIVINE keyboard. It requires the QMK build environment and a compatible flashing tool.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/era/divine/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake era/divine:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building split_blackpill Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the zvecr/split_blackpill keyboard using the QMK build environment. Ensure the QMK build environment is set up before running this command. The compiled firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/zvecr/split_blackpill/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake zvecr/split_blackpill:default\n```\n\n----------------------------------------\n\nTITLE: Building Elysian Firmware with Make\nDESCRIPTION: This command builds the default firmware for the Elysian macropad using the 'make' command. It compiles the QMK firmware with the specific configuration for the 'custommk/elysian' keyboard and the 'default' keymap. The build process requires a properly set up QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/custommk/elysian/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake custommk/elysian:default\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for Handwired Split Keyboard\nDESCRIPTION: This command builds the firmware for the handwired/riblee_split keyboard with the default keymap. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/riblee_split/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake handwired/riblee_split:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Pila87 with QMK\nDESCRIPTION: This command compiles the default keymap for the Pila87 keyboard and then flashes it onto the keyboard. It depends on a properly configured QMK build environment and a connected, flashable keyboard.  The flash target must be correctly configured in the QMK environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/phage_studio/pila87/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake phage_studio/pila87:default:flash\n```\n\n----------------------------------------\n\nTITLE: 60% ISO Layout Diagram\nDESCRIPTION: This is an ASCII art diagram representing the standard 60% ISO keyboard layout. ISO layouts typically include a larger, vertical Enter key and an additional key next to the left shift. The diagram shows this arrangement visually.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/layouts/default/readme.md#_snippet_10\n\nLANGUAGE: text\nCODE:\n```\n┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───────┐\n│   │   │   │   │   │   │   │   │   │   │   │   │   │       │\n├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─────┤\n│     │   │   │   │   │   │   │   │   │   │   │   │   │     │\n├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┐    │\n│      │   │   │   │   │   │   │   │   │   │   │   │   │    │\n├────┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴───┴────┤\n│    │   │   │   │   │   │   │   │   │   │   │   │          │\n├────┼───┴┬──┴─┬─┴───┴───┴───┴───┴───┴──┬┴───┼───┴┬────┬────┤\n│    │    │    │                        │    │    │    │    │\n└────┴────┴────┴────────────────────────┴────┴────┴────┴────┘\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for RPNeko65\nDESCRIPTION: This command builds the default firmware for the RPNeko65 keyboard. It uses the `make` command with the specified keyboard and revision.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/lendunistus/rpneko65/rev1/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake lendunistus/rpneko65/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Building Sesame Keyboard Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the Sesame keyboard using the QMK build environment. It compiles the keyboard layout and necessary components into a firmware file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kb_elmo/sesame/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake kb_elmo/sesame:default\n```\n\n----------------------------------------\n\nTITLE: Matrix Diagram for Mode Designs M256W-H\nDESCRIPTION: This is a text-based representation of the key matrix for the Mode Designs M256W-H keyboard. Each number represents a key's location in the matrix, corresponding to a row and column.  This diagram is crucial for mapping physical key presses to electrical signals for keyboard functionality.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mode/m256wh/matrix_diagram.md#_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───────┬───┐\n│00 │01 │02 │03 │04 │05 │06 │07 │08 │09 │0A │0B │0C │0D     │0E │\n├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─────┼───┤\n│10   │11 │12 │13 │14 │15 │16 │17 │18 │19 │1A │1B │1C │1D   │1E │\n├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴─────┼───┤\n│20    │21 │22 │23 │24 │25 │26 │27 │28 │29 │2A │2B │2D      │2E │\n├──────┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴────┬───┼───┤\n│30      │32 │33 │34 │35 │36 │37 │38 │39 │3A │3B │3C    │3D │3E │\n├────┬───┴┬──┴─┬─┴───┴───┴───┴───┴───┴──┬┴───┼───┴┬─┬───┼───┼───┤\n│50  │51  │52  │5F                      │49  │4A  │ │4B │4C │4D │\n└────┴────┴────┴────────────────────────┴────┴────┘ └───┴───┴───┘\n┌─────┬───┬─────┬───────────────────────────┬─────┐\n│50   │51 │52   │5F                         │4A   │ Blocker Tsangan\n└─────┴───┴─────┴───────────────────────────┴─────┘\n```\n\n----------------------------------------\n\nTITLE: Defining Key Override Repeat Delay\nDESCRIPTION: Sets the key repeat interval (in milliseconds) for key overrides. Determines how quickly a key override is repeated when held down.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/config_options.md#_snippet_67\n\nLANGUAGE: C\nCODE:\n```\n#define KEY_OVERRIDE_REPEAT_DELAY 500\n```\n\n----------------------------------------\n\nTITLE: Compiling Redox Media Keyboard Firmware\nDESCRIPTION: This command compiles the QMK firmware for the redox_media keyboard with the default keymap. It ensures that the QMK setup is working correctly and that the keyboard and keymap files are valid. The generated .hex file is output to the QMK root directory.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/redox_media/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nqmk compile -kb redox_media -km default\n```\n\n----------------------------------------\n\nTITLE: Building Splitish Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the Splitish keyboard using the QMK build environment. It assumes that the QMK build environment has been properly set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/splitish/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake splitish:default\n```\n\n----------------------------------------\n\nTITLE: Building AMJ40 Firmware\nDESCRIPTION: This command builds the default firmware for the AMJ40 keyboard using the QMK build environment. It requires the QMK build environment to be set up correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/amjkeyboard/amj40/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake amjkeyboard/amj40:default\n```\n\n----------------------------------------\n\nTITLE: Building Ryujin Firmware with QMK\nDESCRIPTION: This command builds the default keymap for the Ryujin keyboard using the QMK firmware build environment. It assumes that the QMK build environment has been properly set up according to the QMK documentation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wolf/ryujin/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake wolf/ryujin:default\n```\n\n----------------------------------------\n\nTITLE: Building mini_elixivy Firmware (Make)\nDESCRIPTION: This command builds the default firmware for the mini_elixivy keyboard. It requires a correctly configured QMK build environment and utilizes the `make` command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mini_elixivy/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake mini_elixivy:default\n```\n\n----------------------------------------\n\nTITLE: Building Stratos keyboard firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the Stratos keyboard. It requires a properly set up QMK build environment. The output will be a .hex or .bin file suitable for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/stratos/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake stratos:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware to Fujitsu T111 Keyboard\nDESCRIPTION: This command builds and flashes the QMK firmware for the Fujitsu N860-2500-T111 keyboard with the default keymap to the microcontroller. This requires a configured QMK build environment and a connected programmer. Replace `handwired/t111` with the correct keyboard and keymap if necessary.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/t111/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/t111:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Gorthage Truck Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the Gorthage Truck keyboard using the QMK build environment.  It compiles the source code and generates the firmware file. Ensure the QMK build environment is properly set up before running this command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/gorthage_truck/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake gorthage_truck:default\n```\n\n----------------------------------------\n\nTITLE: Compiling Firmware\nDESCRIPTION: This command compiles the default firmware for the Noxary Valhalla V2 keyboard. It assumes that the QMK build environment has already been set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/noxary/valhalla_v2/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake noxary/valhalla_v2:default\n```\n\n----------------------------------------\n\nTITLE: Flashing GameHand Firmware\nDESCRIPTION: This command flashes the compiled firmware onto the GameHand keyboard. It assumes that the QMK build environment and necessary flashing tools are properly configured.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kb_elmo/gamehand/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake kb_elmo/gamehand:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Think6.5 Hotswap Firmware with Make\nDESCRIPTION: This command builds the default firmware for the Think6.5 Hotswap keyboard using the QMK make system. It assumes that the QMK build environment has already been set up correctly as detailed in the QMK documentation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/gray_studio/think65/hotswap/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake gray_studio/think65/hotswap:default\n```\n\n----------------------------------------\n\nTITLE: Enabling Velocikey in QMK Firmware via rules.mk\nDESCRIPTION: This code snippet demonstrates how to enable Velocikey in the `rules.mk` file within a QMK Firmware project. Setting `VELOCIKEY_ENABLE=yes` activates the Velocikey feature, allowing it to control RGB light effects.  This is a prerequisite for using Velocikey.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/rgblight.md#_snippet_13\n\nLANGUAGE: Makefile\nCODE:\n```\nMOUSEKEY_ENABLE = no\nSTENO_ENABLE = no\nEXTRAKEY_ENABLE = yes\nVELOCIKEY_ENABLE = yes\n```\n\n----------------------------------------\n\nTITLE: Drawing Rainbow Circles with `qp_circle` in C\nDESCRIPTION: This example draws a set of filled circles down the left side of the display, creating a rainbow effect. The `qp_circle` function draws each filled circle, and `qp_flush` updates the display.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/quantum_painter.md#_snippet_57\n\nLANGUAGE: c\nCODE:\n```\nvoid housekeeping_task_user(void) {\n    static uint32_t last_draw = 0;\n    if (timer_elapsed32(last_draw) > 33) { // Throttle to 30fps\n        last_draw = timer_read32();\n        // Draw r=4 filled circles down the left side of the display\n        for (int i = 0; i < 239; i+=8) {\n            qp_circle(display, 4, 4+i, 4, i, 255, 255, true);\n        }\n        qp_flush(display);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for Rati(o)60\nDESCRIPTION: This command builds the default firmware for the Rati(o)60 Rev A keyboard.  It requires QMK build environment to be set up. The resulting firmware can then be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/rationalist/ratio60_hotswap/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake rationalist/ratio60_hotswap/rev_a:default\n```\n\n----------------------------------------\n\nTITLE: Building CB87RGB Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the CherryB Studio CB87RGB keyboard using the QMK build environment. It compiles the source code and generates the firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cherrybstudio/cb87rgb/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake cherrybstudio/cb87rgb:default\n```\n\n----------------------------------------\n\nTITLE: Making Aurora Sofle v2 Keyboard\nDESCRIPTION: This command is used to build the firmware for the Aurora Sofle v2 keyboard. It specifies the keyboard layout and configuration to be compiled.  The output will be a .hex file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/splitkb/aurora/sofle_v2/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake splitkb/aurora/sofle_v2/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Baumkuchen with QMK\nDESCRIPTION: This command flashes the compiled firmware to the Baumkuchen macropad.  It requires the QMK build environment to be set up and the device to be in bootloader mode.  The target is the default keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/takashicompany/baumkuchen/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake takashicompany/baumkuchen:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Minne Keyboard Firmware - QMK\nDESCRIPTION: This command builds the default firmware for the Viktus Minne keyboard using the QMK build environment.  It compiles the keyboard layout and firmware into a flashable image. Requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/viktus/minne/readme.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmake viktus/minne:default\n```\n\n----------------------------------------\n\nTITLE: Building QMK Firmware for Durgod K310\nDESCRIPTION: This command builds the QMK firmware for the Durgod K310 base model with the default keymap. It requires a properly set up QMK build environment as described in the QMK documentation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/durgod/k310/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake durgod/k310/base:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Ziggurat Firmware (QMK)\nDESCRIPTION: This command flashes the default keymap onto the Ziggurat keyboard using the QMK firmware.  It builds the firmware if necessary and then attempts to flash it to the keyboard. Requires a configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wolf/ziggurat/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake wolf/ziggurat:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building TechnicPad Firmware\nDESCRIPTION: This command builds the default firmware for the TechnicPad keyboard. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/technicpad/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake handwired/technicpad:default\n```\n\n----------------------------------------\n\nTITLE: Enabling Split LED State in QMK\nDESCRIPTION: This ensures the current host indicator state (caps/num/scroll) is available on the slave when using the QMK-provided split transport. This allows the slave to reflect the host's LED status.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/config_options.md#_snippet_106\n\nLANGUAGE: c\nCODE:\n```\n#define SPLIT_LED_STATE_ENABLE\n```\n\n----------------------------------------\n\nTITLE: Flashing Ellipse Keyboard Firmware (QMK)\nDESCRIPTION: This command flashes the default firmware for the Ellipse keyboard to the device. It relies on the QMK build environment and specifies the 'default' keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cannonkeys/ellipse/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake cannonkeys/ellipse:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing TutelPad Firmware\nDESCRIPTION: This command builds and flashes the default firmware to the TutelPad macropad. It requires the QMK build environment to be properly set up and the device to be connected in bootloader mode. This command combines the build and flash steps into one.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/0xcb/tutelpad/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake 0xcb/tutelpad:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Zed60 Firmware with Make\nDESCRIPTION: This command flashes the compiled firmware to the Zed60 keyboard using the QMK build environment. It combines the build and flash steps into a single command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechlovin/zed60/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake mechlovin/zed60:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing KBD67 rev1 Firmware with Make\nDESCRIPTION: This command flashes the compiled firmware onto the KBD67 rev1 keyboard using the QMK Make tool.  It requires a properly configured build environment and a connected keyboard in bootloader mode. Successful execution will overwrite the existing firmware with the newly built version.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kbdfans/kbd67/rev1/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake kbdfans/kbd67/rev1:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Pinky3 Keyboard Firmware - QMK\nDESCRIPTION: This command builds the QMK Firmware for the Pinky3 keyboard with the default keymap. It uses the `make` command with the target `pinky/3:default`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/pinky/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake pinky/3:default\n```\n\n----------------------------------------\n\nTITLE: Define Keyboard Key Row 3\nDESCRIPTION: Defines the third row of keys, starting with Caps Lock and including letters A-L. It uses 'w' for width and provides shifted characters for the colon/semicolon and at/apostrophe keys.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/lib/python/qmk/tests/kle.txt#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n[{w:1.75},\"Caps Lock\",\"A\",\"S\",\"D\",\"F\",\"G\",\"H\",\"J\",\"K\",\"L\",\":\\n;\",\"@\\n'\",\"~\\n#\"]\n```\n\n----------------------------------------\n\nTITLE: Tagging ChibiOS develop version\nDESCRIPTION: Tags a ChibiOS develop version.  `develop_YYYY_qN` should be replaced with the actual develop tag. The tag is created locally and then pushed to the `qmk` remote.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/chibios_upgrade_instructions.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\ngit tag -a develop_YYYY_qN -m develop_YYYY_qN svn/tags/ver20.3.4\n```\n\nLANGUAGE: Shell\nCODE:\n```\ngit push qmk develop_YYYY_qN\n```\n\n----------------------------------------\n\nTITLE: Listing keyboards in QMK using shell command\nDESCRIPTION: This shell command lists all available keyboards in the QMK firmware and counts them using `wc -l`. It helps determine the number of supported keyboards in the QMK repository. No dependencies outside of the QMK environment and a standard shell are required.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/ChangeLog/20211127.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n% qmk list-keyboards | wc -l\n```\n\n----------------------------------------\n\nTITLE: Flashing 1up60hte Firmware (QMK)\nDESCRIPTION: This command flashes the built firmware to the 1up60hte keyboard.  It uses the `make` command with the keyboard's identifier (`1upkeyboards/1up60hte`), the default keymap, and the `flash` target.  The QMK build environment must be set up and the keyboard must be in flashing mode for this command to work.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/1upkeyboards/1up60hte/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake 1upkeyboards/1up60hte:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Pachi Keyboard Firmware with Make\nDESCRIPTION: These commands demonstrate how to build QMK firmware for different Pachi keyboard variants using the `make` command. The target specifies the keyboard layout, revision, and features (e.g., RGB). It assumes the QMK build environment is already set up according to the QMK documentation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/xelus/pachi/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake xelus/pachi/rev1:default\nmake xelus/pachi/mini_32u4:default\nmake xelus/pachi/rgb/rev1:default\nmake xelus/pachi/rgb/rev2:default\n```\n\n----------------------------------------\n\nTITLE: Update LED Control Registers - IS31FL3736\nDESCRIPTION: Flushes the LED control register values to the LED driver for a specific driver index, applying any configuration changes.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/is31fl3736.md#_snippet_8\n\nLANGUAGE: c\nCODE:\n```\nvoid is31fl3736_update_led_control_registers(uint8_t index)\n```\n\n----------------------------------------\n\nTITLE: Planck-Specific Configuration Options\nDESCRIPTION: These are Planck-specific options that can be defined in the `config.h` file. They include settings for the watchdog timer (timeout and disable), and the encoder pin state settling delay. The watchdog timer resets the keyboard on hang/crash. The settle pin state delay sets time to wait for encoder pin state stabilization.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/planck/rev7/readme.md#_snippet_3\n\nLANGUAGE: C\nCODE:\n```\n// sets the length (in seconds) of the watchdog timer, which will reset the keyboard due to hang/crash in the code\n#define PLANCK_WATCHDOG_TIMEOUT 1.0\n// disables the watchdog timer - you may want to disable the watchdog timer if you use longer macros\n#define PLANCK_WATCHDOG_DISABLE\n// Sets the time to wait for the rotary encoder pin state to stabilize while scanning (Default is 20(us))\n#define PLANCK_ENCODER_SETTLE_PIN_STATE_DELAY 20\n```\n\n----------------------------------------\n\nTITLE: Defining FN3 Layer Keymap for Navpad\nDESCRIPTION: This snippet defines the FN3 layer keymap for the Navpad 1.0 keyboard. This layer is activated when the FN3 key is held down. All keys are set to KC_NO.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/yushakobo/navpad/10_helix_r/keymaps/default/readme.md#_snippet_3\n\nLANGUAGE: QMK Keymap\nCODE:\n```\n   ,-------------------------------. ,------.\n   | KC_NO    | KC_NO    | KC_NO   | | KC_NO |\n   |----------+----------+----------+-------------------------------------------------.                ,-----------------------------------------------------------------------.\n   | KC_NO    | KC_NO    | KC_NO    | KC_NO    | KC_NO     | KC_NO    | KC_NO         |\n   `--------------------------------+----------+-----------+----------+---------------|                |------------+----------+-----------+-----------+-----------+-----------|\n   | KC_NO    | KC_NO    | KC_NO    | KC_NO    | KC_NO     | KC_NO    | KC_NO         |\n   `--------------------------------+----------+-----------+----------+---------------|                |------------+----------+-----------+-----------+-----------+-----------|\n                                    | KC_NO    | KC_NO     | KC_NO    | KC_NO         |\n   ,--------------------------------+----------+-----------+----------+---------------|  ,-------------+------------+----------+-----------+-----------+-----------+-----------|\n   | KC_NO    | KC_NO    | KC_NO    | KC_NO    | KC_NO     | KC_NO    | KC_NO         |\n   |----------+----------+----------+----------+-----------+----------+---------------|  |-------------+------------+----------+-----------+-----------+-----------+-----------|\n   | KC_NO    | KC_NO    | KC_NO    | KC_NO    | KC_NO     | KC_NO    | KC_NO         |\n   '----------------------------------------------------------------------------------`  '-------------------------------------------------------------------------------------`\n```\n\n----------------------------------------\n\nTITLE: Flashing ScottoMouse Firmware\nDESCRIPTION: This command compiles and flashes the default firmware for the ScottoMouse keyboard using the QMK build environment. It requires the QMK build environment to be set up and the device to be connected. This command assumes a suitable flashing tool is configured.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/scottokeebs/scottomouse/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake handwired/scottokeebs/scottomouse:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing WT60-G2 QMK Firmware\nDESCRIPTION: This command flashes the default QMK firmware to the wilba.tech WT60-G2 keyboard. It requires a properly set up QMK build environment and a compatible flashing tool. The command uploads the compiled firmware to the keyboard's microcontroller, replacing the existing firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wilba_tech/wt60_g2/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake wilba_tech/wt60_g2:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Palette G67 Soldered Firmware\nDESCRIPTION: This command compiles the QMK Firmware for the Palette G67 Soldered keyboard with the default keymap.  It requires a correctly configured QMK build environment. The resulting firmware can then be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/neokeys/g67/soldered/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake neokeys/palette_g67/soldered:default\n```\n\n----------------------------------------\n\nTITLE: Defining Split Hand Matrix Grid\nDESCRIPTION: Handedness is determined by using the intersection of the keyswitches in the key matrix, which normally does not exist. Normally, when this intersection is shorted (level low), it is considered right.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/config_options.md#_snippet_88\n\nLANGUAGE: C\nCODE:\n```\n#define SPLIT_HAND_MATRIX_GRID <out_pin>,<in_pin>\n```\n\n----------------------------------------\n\nTITLE: Atmega168P Fuse and Lock Bits\nDESCRIPTION: Defines the high, low, and extended fuses, and lock byte values for the Atmega168P microcontroller, based on the usbasploader Makefile.  These configurations affect boot options, brown-out detection, EEPROM save, SPI enable, debug wire, reset disable, clock settings and memory lock.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/fuse.txt#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nHFUSE   0xD6\nLFUSE   0xDF\nEFUSE   0x00\nLOCK    0x3F(intact)\n```\n\n----------------------------------------\n\nTITLE: Flashing the Space65 Keyboard\nDESCRIPTION: This command builds the QMK firmware for the Space65 keyboard with the 'keithlo' keymap and flashes it to the device. It assumes you are in the qmk_firmware directory. It uses the `make` command to compile and flash the firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/gray_studio/space65/keymaps/keithlo/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake gray_studio/space65:keithlo:flash # be in the qmk_firmware directory to do this\n```\n\n----------------------------------------\n\nTITLE: Making KBD19x Firmware\nDESCRIPTION: This command builds the default firmware for the KBD19x keyboard.  It uses the `make` command with the target `kbdfans/kbd19x:default`. The command assumes a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kbdfans/kbd19x/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake kbdfans/kbd19x:default\n```\n\n----------------------------------------\n\nTITLE: Flashing SLZ40 Firmware with QMK\nDESCRIPTION: This command flashes the default keymap to the SLZ40 keyboard using the QMK firmware. It requires a connected ProMicro or similar controller and a correctly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/slz40/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake slz40:default:flash\n```\n\n----------------------------------------\n\nTITLE: Making the default keymap for Pix keyboard\nDESCRIPTION: This command builds the default keymap for the Pix keyboard. It requires the QMK build environment to be set up. The command compiles the firmware and generates a .hex file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/sendyyeah/pix/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake sendyyeah/pix:default\n```\n\n----------------------------------------\n\nTITLE: Flashing QMK Firmware to Keychron Q1V2\nDESCRIPTION: These `make` commands are used to flash the compiled QMK firmware to the Keychron Q1 Version 2 keyboard. The `:flash` suffix appended to the build target initiates the flashing process, assuming the keyboard is in the correct bootloader mode.  The specific bootloader triggering mechanism is described further in the document.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keychron/q1v2/readme.md#_snippet_1\n\nLANGUAGE: makefile\nCODE:\n```\nmake keychron/q1v2/ansi:default:flash\nmake keychron/q1v2/ansi_encoder:default:flash\nmake keychron/q1v2/iso:default:flash\nmake keychron/q1v2/iso_encoder:default:flash\nmake keychron/q1v2/jis:default:flash\nmake keychron/q1v2/jis_encoder:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing the ada1800mini Firmware\nDESCRIPTION: This command flashes the compiled firmware to the ada1800mini keyboard. It assumes that the QMK build environment is set up correctly and that the keyboard is connected to the computer.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ada/ada1800mini/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake ada/ada1800mini:default:flash\n```\n\n----------------------------------------\n\nTITLE: Git Reset Submodule\nDESCRIPTION: This snippet shows the git commands to fetch all, checkout to the `qmk-master` branch, reset hard to the commit hash, and force push the branch with lease. This ensures the submodule in the main repo matches the QMK fork, resolving potential Configurator compatibility issues.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/breaking_changes.md#_snippet_4\n\nLANGUAGE: git\nCODE:\n```\ncd lib/chibios\n```\n\nLANGUAGE: git\nCODE:\n```\ngit fetch --all\n```\n\nLANGUAGE: git\nCODE:\n```\ngit checkout qmk-master\n```\n\nLANGUAGE: git\nCODE:\n```\ngit reset --hard <commit hash>\n```\n\nLANGUAGE: git\nCODE:\n```\ngit push origin qmk-master --force-with-lease\n```\n\n----------------------------------------\n\nTITLE: Building n87 Keyboard Firmware with QMK\nDESCRIPTION: This code snippet provides the command to build the default firmware for the n87 keyboard using the QMK build environment.  It assumes that the QMK build environment has been correctly set up.  The output is the compiled firmware that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/nightly_boards/n87/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake nightly_boards/n87:default\n```\n\n----------------------------------------\n\nTITLE: Flashing BM60HSRGB_ISO Firmware (rev1)\nDESCRIPTION: This command builds and flashes the default firmware for the rev1 version of the BM60HSRGB_ISO keyboard to the board. It relies on the QMK build environment and associated flashing tools.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kprepublic/bm60hsrgb_iso/readme.md#_snippet_2\n\nLANGUAGE: Makefile\nCODE:\n```\nmake kprepublic/bm60hsrgb_iso/rev1:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Frosty Flake Firmware (104-key Default) via DFU\nDESCRIPTION: This command compiles and flashes the Frosty Flake firmware with the default (104-key) layout using the DFU bootloader. It requires a properly configured QMK build environment and a DFU-compatible bootloader on the controller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/bpiphany/frosty_flake/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake bpiphany/frosty_flake:default:dfu\n```\n\n----------------------------------------\n\nTITLE: Flashing ErgoStrafer Firmware with QMK\nDESCRIPTION: This command flashes the compiled firmware to the ErgoStrafer keyboard using the QMK build environment. It requires a properly configured QMK environment and a connected keyboard in a flashable state.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/custommk/ergostrafer/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake custommk/ergostrafer:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building DeltaSplit75 Firmware with Make\nDESCRIPTION: This command builds the default firmware for the DeltaSplit75 v2 keyboard. It requires a properly configured QMK build environment. The resulting firmware can be flashed to the keyboard's Pro Micro controller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/deltasplit75/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake deltasplit75/v2:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Janus Keyboard Firmware\nDESCRIPTION: This command flashes the default firmware to the Janus keyboard. It requires a properly configured QMK build environment and a connected Janus keyboard in bootloader mode.  It assumes the left half is plugged in unless the EEPROM handedness is set.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/janus/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake janus:default:flash\n```\n\n----------------------------------------\n\nTITLE: LED Mapping in keyboardname.c (Single-Color)\nDESCRIPTION: Maps LED indices to specific driver and pin configurations for single-color LEDs. The anode is connected to the `SW1` pin and the cathode is connected to the `CS1` pin of the IS31FL3741 driver.  This example maps the first LED on driver 0.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/is31fl3741.md#_snippet_5\n\nLANGUAGE: c\nCODE:\n```\nconst is31fl3741_led_t PROGMEM g_is31fl3741_leds[IS31FL3741_LED_COUNT] = {\n/* Driver\n *   |  V */\n    {0, SW1_CS1},\n    // etc...\n};\n```\n\n----------------------------------------\n\nTITLE: Flashing Somei70 Keyboard Firmware with Make\nDESCRIPTION: This command flashes the built firmware to the Somei70 keyboard using the QMK build environment. It leverages the make command with the keyboard, keymap, and flash target.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/somei70/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake somei70:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Keyboard Firmware - Make Command\nDESCRIPTION: This command flashes the compiled firmware onto the Owlab Jelly Evolv Hotswap 6.25U keyboard.  It uses the QMK make system to build (if necessary) and then flash the firmware.  Requires a properly configured QMK build environment and a compatible flashing tool.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/owlab/jelly_evolv/hotswap/625u/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake owlab/jelly_evolv/hotswap/625u:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for TX Roundup Pad (QMK)\nDESCRIPTION: This command builds the default firmware for the TX Roundup Pad using the QMK build environment. It compiles the keymap and firmware necessary for flashing the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/viktus/tx_roundup_pad/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake viktus/tx_roundup_pad:default\n```\n\n----------------------------------------\n\nTITLE: Building split_65 Firmware with QMK\nDESCRIPTION: This snippet shows how to build the default firmware for the split_65 keyboard using the QMK build environment. It requires setting up the QMK build environment and assumes the user has a basic understanding of the QMK build process.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/jtallbean/split_65/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/jtallbean/split_65:default\n```\n\n----------------------------------------\n\nTITLE: Making Keyboard Firmware\nDESCRIPTION: This command builds the QMK firmware for the Split_5x7 keyboard. It requires the QMK build environment to be set up correctly. This command will compile the keyboard layout and generate the firmware file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/stef9998/split_5x7/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake handwired/stef9998/split_5x7/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware to Pisces Keyboard (QMK)\nDESCRIPTION: This command flashes the compiled firmware to the Pisces keyboard. It requires a properly configured QMK build environment and a connected keyboard in a flashable state (e.g., bootloader mode).\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kwstudio/pisces/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake kwstudio/pisces:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Bear 65 Firmware\nDESCRIPTION: This command builds the default firmware for the Bear 65 keyboard within the QMK Firmware environment. It requires a properly configured build environment as described in the QMK documentation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/jacky_studio/bear_65/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake jacky_studio/bear_65:default\n```\n\n----------------------------------------\n\nTITLE: Building XD60 Split Space Keymap with Make\nDESCRIPTION: This command builds the specified keymap for the XIUDI XD60 PCB rev3 using the QMK build environment. It assumes the build environment is already set up. The keymap uses ANSI layout with split backspace, right shift, and spacebar.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/xiudi/xd60/keymaps/ansi_split_bs_rshift_space/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake xiudi/xd60/rev3:ansi_split_bs_rshift_space\n```\n\n----------------------------------------\n\nTITLE: Defining FN2 Layer Keymap for Navpad\nDESCRIPTION: This snippet defines the FN2 layer keymap for the Navpad 1.0 keyboard. This layer is activated when the FN2 key is held down. The keymap includes VIA RGB controls.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/yushakobo/navpad/10_helix_r/keymaps/default/readme.md#_snippet_2\n\nLANGUAGE: QMK Keymap\nCODE:\n```\n   ,-------------------------------. ,------.\n   | UG_TOGG  | UG_NEXT  | UG_PREV | | KC_NO |\n   |----------+----------+----------+-------------------------------------------------.                ,-----------------------------------------------------------------------.\n   | UG_HUEU  | UG_SATU  | UG_VALU  | KC_NO    | KC_NO     | KC_NO    | KC_NO         |\n   `--------------------------------+----------+-----------+----------+---------------|                |------------+----------+-----------+-----------+-----------+-----------|\n   | UG_HUED  | UG_SATD  | UG_VALD  | KC_NO    | KC_NO     | KC_NO    | KC_NO         |\n   `--------------------------------+----------+-----------+----------+---------------|                |------------+----------+-----------+-----------+-----------+-----------|\n                                    | KC_NO    | KC_NO     | KC_NO    | KC_NO         |\n   ,--------------------------------+----------+-----------+----------+---------------|  ,-------------+------------+----------+-----------+-----------+-----------+-----------|\n   | KC_NO    | KC_NO    | KC_NO    | KC_NO    | KC_NO     | KC_NO    | KC_NO         |\n   |----------+----------+----------+----------+-----------+----------+---------------|  |-------------+------------+----------+-----------+-----------+-----------+-----------|\n   | KC_NO    | KC_NO    | KC_NO    | KC_NO    | KC_NO     | KC_NO    | KC_NO         |\n   '----------------------------------------------------------------------------------`  '-------------------------------------------------------------------------------------`\n```\n\n----------------------------------------\n\nTITLE: Flashing Dactyl Manuform Keyboard\nDESCRIPTION: This command flashes the compiled firmware to the Dactyl Manuform 5x6 right trackball keyboard. It builds the firmware and then flashes it to the connected microcontroller, requiring a correctly setup QMK build environment and the appropriate flashing tools.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/tractyl_manuform/4x6_right/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake handwired/dactyl_manuform/5x6_right_trackball:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building YM68 Firmware\nDESCRIPTION: This command builds the default keymap for the YM68 keyboard using the QMK build environment. It compiles the necessary code to create a firmware image that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ymdk/ym68/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake ymdk/ym68:default\n```\n\n----------------------------------------\n\nTITLE: Building Chimera Ortho with QMK\nDESCRIPTION: This command builds the default keymap for the Chimera Ortho keyboard using the QMK firmware build environment. It assumes that the QMK firmware environment has already been set up according to the QMK documentation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/glenpickle/chimera_ortho/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake glenpickle/chimera_ortho:default\n```\n\n----------------------------------------\n\nTITLE: Building SCARLET Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the SCARLET keyboard using the QMK build environment.  It requires a properly configured QMK build environment.  The output is a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/draytronics/scarlet/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake draytronics/scarlet:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Damapad Firmware - Makefile\nDESCRIPTION: This command flashes the compiled firmware to the Damapad using the QMK build system.  It builds and flashes the Bolsa Supply Damapad with the default configuration.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/bolsa/damapad/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake bolsa/damapad:default:flash\n```\n\n----------------------------------------\n\nTITLE: Key Override Signature Update - Before\nDESCRIPTION: This code snippet demonstrates the old key override signature format in `keymap.c`, which includes a `NULL` terminator. This format is deprecated and needs to be updated.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/ChangeLog/20240825.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nconst key_override_t **key_overrides = (const key_override_t *[]){\n    &my_override_1,\n    &my_override_2,\n    NULL\n};\n```\n\n----------------------------------------\n\nTITLE: Building Freoduo Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Freoduo keyboard using the QMK build environment. It requires the QMK build environment to be set up correctly. The resulting firmware can then be flashed onto the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/freoduo/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake handwired/freoduo:default\n```\n\n----------------------------------------\n\nTITLE: Flashing the Quokka Keyboard Firmware\nDESCRIPTION: This command builds and flashes the default firmware for the Quokka keyboard. It requires QMK build environment to be set up and a flashing tool compatible with the keyboard's microcontroller.  The command attempts to automatically flash the generated firmware to the connected device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/quokka/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake quokka:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing BB65 Firmware with QMK Make\nDESCRIPTION: This command builds and flashes the QMK firmware for the BB65 keyboard with the specified target and keymap. It compiles the source code, generates a firmware file, and flashes it to the keyboard using the appropriate flashing tool. Requires QMK build environment and flashing tools to be set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechwild/bb65/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake mechwild/bb65/f401:default:flash\n```\n\nLANGUAGE: make\nCODE:\n```\nmake mechwild/bb65/f411:default:flash\n```\n\n----------------------------------------\n\nTITLE: Compiling Scotto61 Firmware (QMK)\nDESCRIPTION: This command compiles the default firmware for the Scotto61 keyboard using the QMK build environment. It requires the QMK build environment to be properly set up. The output is a firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/scottokeebs/scotto61/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/scottokeebs/scotto61:default\n```\n\n----------------------------------------\n\nTITLE: Flashing the Right Side of Momoka Ergo\nDESCRIPTION: This command flashes the QMK firmware onto the right side of the Momoka Ergo keyboard using the DFU bootloader in split mode.  It requires the keyboard to be connected and detectable by the DFU tool. The `default` keymap is utilized for this side.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/momoka_ergo/readme.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmake momoka_ergo:default:dfu-split-right\n```\n\n----------------------------------------\n\nTITLE: Building Nori Keyboard Firmware\nDESCRIPTION: This command is used to build the default firmware for the Nori keyboard within the QMK Firmware environment. It assumes that the QMK build environment is already set up. This command compiles the keyboard's keymap and firmware based on the default configuration.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/40percentclub/nori/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake 40percentclub/nori:default\n```\n\n----------------------------------------\n\nTITLE: Building Keyboard Firmware (QMK)\nDESCRIPTION: This command compiles the firmware for the SkeletonNumPad keyboard with the default keymap. It requires a correctly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/skeletonkbd/skeletonnumpad/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake skeletonkbd/skeletonnumpad:default\n```\n\n----------------------------------------\n\nTITLE: Building Yakiimo Rev A Firmware\nDESCRIPTION: This command builds the default firmware for the Yakiimo Rev A keyboard using the QMK build environment. It requires the QMK build environment to be set up correctly. The output is a .hex or .bin file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/4pplet/yakiimo/rev_a/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake 4pplet/yakiimo/rev_a:default\n```\n\n----------------------------------------\n\nTITLE: Flashing the Rabbit Capture Plan Keyboard\nDESCRIPTION: This command flashes the compiled firmware onto the Rabbit Capture Plan keyboard. It uses the QMK build environment and appropriate flashing tools to transfer the firmware to the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kakunpc/rabbit_capture_plan/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake kakunpc/rabbit_capture_plan:default:flash\n```\n\n----------------------------------------\n\nTITLE: Compile and Flash Noxary Valhalla Firmware (Default)\nDESCRIPTION: This command compiles the default firmware for the Noxary Valhalla keyboard and directly flashes it to the PCB, assuming the board is already in DFU mode. It requires the QMK build environment to be set up and the board to be in the correct bootloader state.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/noxary/valhalla/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake noxary/valhalla:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Architeuthis Dux Firmware with Make\nDESCRIPTION: This command builds the default firmware for the Architeuthis Dux keyboard. It requires a properly set up QMK build environment. The output is a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/a_dux/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake a_dux:default\n```\n\n----------------------------------------\n\nTITLE: Building Hailey Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the Hailey keyboard using the QMK build environment. It assumes that the build environment has been properly set up according to the QMK documentation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/nightingale_studios/hailey/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake nightingale_studios/hailey:default\n```\n\n----------------------------------------\n\nTITLE: Building the default keymap for GHS/RAR\nDESCRIPTION: This snippet shows how to build the default keymap for the GHS/RAR keyboard using the `make` command within the QMK Firmware environment. The command assumes that the QMK build environment has already been set up as described in the QMK documentation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ghs/rar/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake ghs/rar:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Bento Box Firmware\nDESCRIPTION: This command builds and flashes the default firmware to the Bento Box macropad using QMK. It assumes a properly configured QMK build environment and a connected device in bootloader mode.  The flash target is specified after the keyboard and keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/synthandkeys/bento_box/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake synthandkeys/bento_box:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Ciel Keyboard Firmware - QMK\nDESCRIPTION: This command builds the default keymap for the Ciel keyboard using the QMK firmware.  It compiles the source code and prepares it for flashing onto the keyboard's microcontroller. Requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/chickenman/ciel/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake chickenman/ciel:default\n```\n\n----------------------------------------\n\nTITLE: Flashing nt650 firmware with make\nDESCRIPTION: This command flashes the default firmware onto the nt650 keyboard using the QMK build environment. It requires the keyboard to be in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/evyd13/nt650/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake evyd13/nt650:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building QooLee Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the QooLee keyboard.  It requires the QMK build environment to be set up.  The output will be a .hex or .bin file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/takashicompany/qoolee/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake takashicomoany/qoolee:default\n```\n\n----------------------------------------\n\nTITLE: Flashing zwerg Firmware with Make\nDESCRIPTION: This command flashes the default keymap onto the zwerg keyboard using the make command. This assumes the board is connected and in a state ready to receive the firmware, typically requiring the bootloader to be active.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/zwerg/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake zwerg:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing REVIUNG46 Firmware (QMK)\nDESCRIPTION: This command flashes the default firmware to the REVIUNG46 keyboard.  It requires a properly configured QMK build environment and a connected keyboard in a flashable state.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/reviung/reviung46/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake reviung46:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Firmware\nDESCRIPTION: This command builds the default firmware for the Alveus keyboard with MX switches using the densus configuration.  It assumes that the QMK build environment has been set up. The resulting firmware can then be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/densus/alveus/mx/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake densus/alveus/mx:default\n```\n\n----------------------------------------\n\nTITLE: Building the Splite Keyboard Firmware - Make\nDESCRIPTION: This command builds the default keymap for the Splite keyboard using the QMK firmware build environment. It requires the QMK build environment to be set up correctly.  It takes no explicit input parameters, relying on the QMK build system's configuration files. The output is the compiled firmware ready to be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/whale/sk/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake whale/sk:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Reverie PCB Firmware\nDESCRIPTION: This command builds and flashes the QMK firmware to the solderable version of the Reverie PCB with the default keymap. It assumes the QMK build environment is configured and the necessary flashing tools are installed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cannonkeys/reverie/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake cannonkeys/reverie/solderable:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building firmware for EC 23U Numpad in QMK\nDESCRIPTION: This command builds the default firmware for the EC 23U numpad using the QMK build environment. It compiles the source code and generates the firmware image that can be flashed onto the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cipulot/ec_23u/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake cipulot/ec_23u:default\n```\n\n----------------------------------------\n\nTITLE: Setting layer state based on user configuration in C\nDESCRIPTION: This function sets the RGB underglow color based on the currently active layer and the `rgb_layer_change` configuration. It uses a switch statement to determine the color based on the layer and calls `rgblight_sethsv_noeeprom()` and `rgblight_mode_noeeprom()` to set the RGB lighting if `user_config.rgb_layer_change` is enabled.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/feature_eeprom.md#_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nlayer_state_t layer_state_set_user(layer_state_t state) {\n    switch (get_highest_layer(state)) {\n    case _RAISE:\n        if (user_config.rgb_layer_change) { rgblight_sethsv_noeeprom(HSV_MAGENTA); rgblight_mode_noeeprom(1); }\n        break;\n    case _LOWER:\n        if (user_config.rgb_layer_change) { rgblight_sethsv_noeeprom(HSV_RED); rgblight_mode_noeeprom(1); }\n        break;\n    case _PLOVER:\n        if (user_config.rgb_layer_change) { rgblight_sethsv_noeeprom(HSV_GREEN); rgblight_mode_noeeprom(1); }\n        break;\n    case _ADJUST:\n        if (user_config.rgb_layer_change) { rgblight_sethsv_noeeprom(HSV_WHITE); rgblight_mode_noeeprom(1); }\n        break;\n    default: //  for any other layers, or the default layer\n        if (user_config.rgb_layer_change) { rgblight_sethsv_noeeprom(HSV_CYAN); rgblight_mode_noeeprom(1); }\n        break;\n    }\n  return state;\n}\n```\n\n----------------------------------------\n\nTITLE: Update PWM Buffers - IS31FL3729 (C)\nDESCRIPTION: Flushes the PWM values to the IS31FL3729 LED driver. This function updates the LED driver with the current PWM values for the specified driver index. The `index` argument refers to the driver index.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/is31fl3729.md#_snippet_8\n\nLANGUAGE: C\nCODE:\n```\nvoid is31fl3729_update_pwm_buffers(uint8_t index)\n```\n\n----------------------------------------\n\nTITLE: Building WT65-FX Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the wilba.tech WT65-FX keyboard. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wilba_tech/wt65_fx/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake wilba_tech/wt65_fx:default\n```\n\n----------------------------------------\n\nTITLE: Building the dnlnm/cloak keyboard with QMK\nDESCRIPTION: This command builds the default keymap for the dnlnm/cloak keyboard using the QMK build environment. It requires a correctly configured QMK build environment. The output is a .hex or .bin file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/dnlnm/cloak/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake dnlnm/cloak:default\n```\n\n----------------------------------------\n\nTITLE: Import Keyboard from info.json (qmk import-keyboard)\nDESCRIPTION: This command imports a data-driven `info.json` keyboard into the repository. Requires the filename as an argument.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/cli_commands.md#_snippet_31\n\nLANGUAGE: text\nCODE:\n```\nusage: qmk import-keyboard [-h] filename\n```\n\nLANGUAGE: text\nCODE:\n```\n$ qmk import-keyboard ~/Downloads/forever60.json\n```\n\n----------------------------------------\n\nTITLE: Flashing Pica40 Keyboard Firmware\nDESCRIPTION: This command flashes the built firmware onto the Pica40 keyboard.  It requires the QMK build environment to be set up and uses the `flash` target.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/pica40/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake pica40:default:flash\n```\n\nLANGUAGE: make\nCODE:\n```\nmake pica40/rev1:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Selene Keyboard Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the Selene keyboard using the QMK build environment. It assumes that the QMK build environment has been properly set up. The compiled firmware can then be flashed onto the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/selene/readme.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmake handwired/selene:default\n```\n\n----------------------------------------\n\nTITLE: Flashing keyten Lisa Firmware\nDESCRIPTION: Flashes the default firmware onto the keyten Lisa keyboard using the QMK build environment. This command builds the firmware if it hasn't been built already and then attempts to flash it to the keyboard. Requires a configured QMK build environment and appropriate flashing tools.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keyten/lisa/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake keyten/lisa:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing txuu keyboard firmware with QMK\nDESCRIPTION: This command builds and flashes the default firmware for the txuu keyboard using the QMK build environment. It requires a correctly configured QMK build environment and a connected keyboard in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/matthewdias/txuu/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake matthewdias/txuu:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware for RPNeko65\nDESCRIPTION: This command flashes the compiled firmware onto the RPNeko65 keyboard. It utilizes the `make` command with the target set to flash after building the default configuration.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/lendunistus/rpneko65/rev1/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake lendunistus/rpneko65/rev1:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware to banime40 Keyboard\nDESCRIPTION: This command flashes the compiled firmware to the banime40 keyboard using the QMK build environment. It requires the keyboard to be in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/sporewoh/banime40/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake sporewoh/banime40:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Amigopunk Keyboard Firmware\nDESCRIPTION: This command builds and flashes the default firmware for the Amigopunk keyboard. It requires a correctly configured QMK build environment and a connected keyboard that can be flashed.  It will compile the firmware and then use the appropriate tool to flash it to the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/amigopunk/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake handwired/amigopunk:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building 6PAD Firmware with QMK\nDESCRIPTION: This command compiles the QMK firmware for the 6PAD macropad using the default configuration.  It requires a properly set up QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/zlabkeeb/6pad/readme.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmake zlabkeeb/6pad:default\n```\n\n----------------------------------------\n\nTITLE: Entering DFU Bootloader Mode on Edda\nDESCRIPTION: This describes how to manually enter Device Firmware Upgrade (DFU) bootloader mode on the Edda keyboard PCB. This mode is necessary for flashing new firmware to the board. It involves pressing and holding a button on the PCB during startup.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/edda/readme.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nPress and hold the button on the keyboard (the small one on the same side as the MCU) for more than 1 second.\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Keycodes for Charybdis\nDESCRIPTION: This code defines custom keycodes for Charybdis-specific features, such as DPI control, sniping mode, and drag-scroll. Disabling these keycodes reduces binary size. Requires `NO_CHARYBDIS_KEYCODES` to disable.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/bastardkb/charybdis/readme.md#_snippet_4\n\nLANGUAGE: C\nCODE:\n```\n#ifndef NO_CHARYBDIS_KEYCODES\nenum charybdis_keycodes {\n  POINTER_DEFAULT_DPI_FORWARD = QK_KB_0,\n  POINTER_DEFAULT_DPI_REVERSE,\n  POINTER_SNIPING_DPI_FORWARD,\n  POINTER_SNIPING_DPI_REVERSE,\n  SNIPING_MODE,\n  SNIPING_MODE_TOGGLE,\n  DRAGSCROLL_MODE,\n  DRAGSCROLL_MODE_TOGGLE,\n};\n\n#define DPI_MOD POINTER_DEFAULT_DPI_FORWARD\n#define DPI_RMOD POINTER_DEFAULT_DPI_REVERSE\n#define S_D_MOD POINTER_SNIPING_DPI_FORWARD\n#define S_D_RMOD POINTER_SNIPING_DPI_REVERSE\n#define SNIPING SNIPING_MODE\n#define SNP_TOG SNIPING_MODE_TOGGLE\n#define DRGSCRL DRAGSCROLL_MODE\n#define DRG_TOG DRAGSCROLL_MODE_TOGGLE\n#endif // !NO_CHARYBDIS_KEYCODES\n```\n\n----------------------------------------\n\nTITLE: Flashing B87 Firmware with QMK\nDESCRIPTION: This command flashes the compiled firmware onto the B87 keyboard. It extends the build command to include the flashing step. The keyboard must be in a state where it can accept the firmware, potentially requiring a reset.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/winkeyless/b87/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake winkeyless/b87:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Aperture Keyboard Firmware\nDESCRIPTION: This command flashes the compiled firmware onto the Aperture keyboard. It uses the `make` command with the `aperture:default:flash` target. The keyboard must be in bootloader mode for this command to execute successfully.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keyten/aperture/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake aperture:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building La+ Firmware\nDESCRIPTION: This command builds the default firmware for the La+ keyboard using the QMK build environment. It requires QMK to be set up and configured.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/xelus/la_plus/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake xelus/la_plus:default\n```\n\n----------------------------------------\n\nTITLE: Flashing miniDivide MAX Firmware\nDESCRIPTION: This command flashes the built firmware to the miniDivide MAX keyboard.  It relies on the QMK build environment and assumes the keyboard is connected and in bootloader mode.  Success depends on the correct bootloader being installed and recognized.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/takashicompany/minidivide_max/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake takashicompany/minidivide_max:default:flash\n```\n\n----------------------------------------\n\nTITLE: Setting EEPROM Handedness (Right)\nDESCRIPTION: This command sets the EEPROM handedness for the right side of the Architeuthis Dux split keyboard. It assumes the keyboard is connected in DFU mode. This command configures the keyboard to be recognized as the right half.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/a_dux/readme.md#_snippet_2\n\nLANGUAGE: make\nCODE:\n```\nmake a_dux:default:dfu-split-right\n```\n\n----------------------------------------\n\nTITLE: Flashing Keaboard Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Keaboard revision 1 and flashes it onto the keyboard using the QMK build system. It requires that the keyboard is in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keaboard/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake keaboard/rev1:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Keymap After EE_HANDS Initialization\nDESCRIPTION: This command builds the keyboard firmware with the specified keymap, after the `EE_HANDS` feature is enabled by including `#define EE_HANDS` in the config.h file. It's used after initializing the EEPROM to ensure both halves can use the same keymap without issues.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/input_club/ergodox_infinity/readme.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nmake input_club/ergodox_infinity:keymapname\n```\n\n----------------------------------------\n\nTITLE: Building Yampad Firmware\nDESCRIPTION: This command builds the default firmware for the Yampad using the QMK build environment.  It assumes the user has already set up their build environment as per the QMK documentation. The output will be a .hex or .bin file that can be flashed to the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/yampad/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake yampad:default\n```\n\n----------------------------------------\n\nTITLE: Building GON NerD 60 Firmware with Make\nDESCRIPTION: This command builds the default keymap for the GON NerD 60 keyboard using the QMK build environment. It assumes that the build environment is already set up. The resulting firmware can then be flashed onto the keyboard after the bootloader is configured correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/gon/nerd60/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake gon/nerd60:default\n```\n\n----------------------------------------\n\nTITLE: Building Christmas Tree Firmware (QMK)\nDESCRIPTION: This command builds the firmware for the Christmas Tree keyboard using the QMK build environment. It targets the default keymap for the v2017 version of the keyboard. Requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/maple_computing/christmas_tree/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake maple_computing/christmas_tree/v2017:default\n```\n\n----------------------------------------\n\nTITLE: Writing Pixel to OLED (C)\nDESCRIPTION: This function sets a specific pixel on or off on the OLED display. It takes the x and y coordinates, and a boolean indicating whether to turn the pixel on or off.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/oled_driver.md#_snippet_26\n\nLANGUAGE: c\nCODE:\n```\n// Sets a specific pixel on or off\n// Coordinates start at top-left and go right and down for positive x and y\nvoid oled_write_pixel(uint8_t x, uint8_t y, bool on);\n```\n\n----------------------------------------\n\nTITLE: Building dyz60 Keyboard Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the dyz60 keyboard within the QMK firmware environment. It assumes that the QMK build environment is properly set up and configured.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/dyz/dyz60/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake dyz/dyz60:default\n```\n\n----------------------------------------\n\nTITLE: Get UCIS Character Count - C\nDESCRIPTION: This function gets the number of characters in the UCIS (Unicode Composing Input Sequence) input sequence buffer. It returns a `uint8_t` representing the count.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/unicode.md#_snippet_25\n\nLANGUAGE: C\nCODE:\n```\nuint8_t ucis_count(void)\n```\n\n----------------------------------------\n\nTITLE: Building XMMX Keyboard Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the XMMX keyboard using the QMK build environment.  It assumes that the QMK build environment is properly set up. The resulting firmware can then be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/xmmx/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake xmmx:default\n```\n\n----------------------------------------\n\nTITLE: Flashing left ErgoDox Infinity half with dfu-util\nDESCRIPTION: This command builds and flashes the firmware to the left half of the ErgoDox Infinity keyboard using the dfu-util programmer. It assumes the keyboard is already in DFU mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/input_club/ergodox_infinity/keymaps/input_club/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake ergodox_infinity:input_club:dfu-util\n```\n\n----------------------------------------\n\nTITLE: Compiling Yee-Haw Firmware with QMK\nDESCRIPTION: This command compiles the firmware for the Yee-Haw keyboard with the default keymap using the QMK command-line interface.  It requires the QMK build environment to be set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/yeehaw/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nqmk compile -kb yeehaw -km default\n```\n\n----------------------------------------\n\nTITLE: Building Tartan Firmware\nDESCRIPTION: This command builds the default firmware for the Tartan keyboard. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/dm9records/tartan/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake dm9records/tartan:default\n```\n\n----------------------------------------\n\nTITLE: True/False Evaluations Example (Bad) - Python\nDESCRIPTION: Demonstrates explicitly checking for True or False in an if statement, which is not the preferred style in QMK Python code.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/coding_conventions_python.md#_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\nif foo == True:\n    pass\n\nif bar == False:\n    pass\n```\n\n----------------------------------------\n\nTITLE: Building Cocoa40 Keyboard Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the Cocoa40 keyboard using the QMK build environment. It requires the QMK build environment to be properly set up beforehand. This command compiles the firmware and prepares it for flashing onto the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/recompile_keys/cocoa40/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake recompile_keys/cocoa40:default\n```\n\n----------------------------------------\n\nTITLE: Flashing CB87RGB Firmware with QMK\nDESCRIPTION: This command flashes the default firmware onto the CherryB Studio CB87RGB keyboard using the QMK build environment. It requires the keyboard to be in bootloader mode. The command combines the build and flash steps into a single command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cherrybstudio/cb87rgb/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake cherrybstudio/cb87rgb:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing ibis80 firmware with QMK\nDESCRIPTION: This command builds and flashes the default firmware for the mokey/ibis80 keyboard using the QMK build environment. This will compile the firmware and then use the appropriate tool to upload it to the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mokey/ibis80/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake mokey/ibis80:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building XD68 Firmware\nDESCRIPTION: This snippet shows how to build the QMK firmware for the XD68 keyboard with the default keymap and the default ISO UK layout.  It assumes that the QMK build environment is properly set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/xiudi/xd68/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake xiudi/xd68:default       \nmake xiudi/xd68:default_iso   # default ISO UK layout\n```\n\n----------------------------------------\n\nTITLE: Building Jels60 Keyboard Firmware\nDESCRIPTION: This command compiles the default keymap for the Jels60 keyboard using the QMK build environment. It creates a firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/jels/jels60/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake jels/jels60:default\n```\n\n----------------------------------------\n\nTITLE: Flashing the keyboard firmware\nDESCRIPTION: This command flashes the built QMK firmware to the ppr.merro60 keyboard using the default keymap. The `flash` target is added to the `make` command to trigger the flashing process. This assumes that the build environment is properly configured and the keyboard is connected in a flashable state.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/chlx/ppr_merro60/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake chlx/ppr_merro60:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Serpent65 Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Serpent65 keyboard using the QMK build environment. It requires a properly configured QMK build environment. The output will be a firmware file suitable for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/caffeinated/serpent65/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake caffeinated/serpent65:default\n```\n\n----------------------------------------\n\nTITLE: Building Matrix Cain Firmware\nDESCRIPTION: This snippet shows how to build the Matrix Cain keyboard firmware using the `make` command. It requires a properly configured QMK build environment. The `matrix/cain_re:default` target specifies the keyboard and keymap to build.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/matrix/cain_re/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake matrix/cain_re:default\n```\n\n----------------------------------------\n\nTITLE: Building the DC01 Arrow Keyboard Firmware (QMK)\nDESCRIPTION: This snippet provides the command to build the default keymap for the DC01 Arrow Cluster keyboard using the QMK Firmware build environment. It assumes that the QMK build environment is already set up and configured correctly. The resulting firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/dc01/arrow/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake dc01/arrow:default\n```\n\n----------------------------------------\n\nTITLE: Building Djinn keyboard firmware\nDESCRIPTION: This command builds the default firmware for the Djinn rev2 keyboard. It utilizes the QMK make system and requires a correctly configured build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/tzarc/djinn/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake tzarc/djinn/rev2:default\n```\n\n----------------------------------------\n\nTITLE: Building Wyvern HS Firmware with QMK\nDESCRIPTION: This command compiles the QMK firmware for the Bredworks Wyvern HS keyboard with the default keymap.  It requires a properly configured QMK build environment. The output will be a .hex file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/bredworks/wyvern_hs/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake bredworks/wyvern_hs:default\n```\n\n----------------------------------------\n\nTITLE: Building with Wheelwriter ISO Keymap\nDESCRIPTION: This command builds the QMK firmware for the IBM Model M with Model H, specifically using the `wheelwriter_1x_iso` keymap for IBM Wheelwriter 10/15/1000 (ISO) modules. It compiles the code using this specific keymap configuration.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ibm/model_m/modelh/readme.md#_snippet_2\n\nLANGUAGE: Makefile\nCODE:\n```\nmake ibm/model_m/modelh:wheelwriter_1x_iso\n```\n\n----------------------------------------\n\nTITLE: Building BDN9 Rev. 1 with QMK\nDESCRIPTION: This command builds the default keymap for the BDN9 Rev. 1 macropad using the QMK firmware. It requires the QMK build environment to be set up correctly. The output will be a firmware file that can be flashed to the macropad.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keebio/bdn9/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake keebio/bdn9/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Marauder Firmware (QMK)\nDESCRIPTION: This command builds and flashes the default firmware to the Marauder keyboard. It requires a configured QMK build environment and a connected keyboard in bootloader mode.  It combines the build and flash steps into a single command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/marauder/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake handwired/marauder:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building iLumkb Simpler64 Firmware with QMK\nDESCRIPTION: This command is used to build the default firmware for the iLumkb Simpler64 keyboard using the QMK build environment.  It assumes that the QMK build environment has already been properly set up. The output will be a .hex or .bin file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ilumkb/simpler64/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake ilumkb/simpler64:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Emery65 Firmware with QMK\nDESCRIPTION: This command flashes the specified keymap for the Emery65 keyboard onto the device.  It utilizes QMK Toolbox or the command line interface, and requires the keyboard to be in the correct reset state (holding Escape while plugging in). Replace <keymap> with the desired keymap name.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/emery65/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake emery65:<keymap>:flash\n```\n\n----------------------------------------\n\nTITLE: Building Dactyl Minidox Keyboard Firmware\nDESCRIPTION: This command builds the firmware for the Dactyl Minidox keyboard using the default keymap. It assumes that the QMK build environment is already set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/dactyl_minidox/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake handwired/dactyl_minidox:default\n```\n\n----------------------------------------\n\nTITLE: Display Initialization Example in C\nDESCRIPTION: This code demonstrates how to initialize a display using the Quantum Painter API. It creates a `painter_device_t` object and initializes it with a specified rotation. This is typically done within the `keyboard_post_init_kb` function in QMK.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/quantum_painter.md#_snippet_44\n\nLANGUAGE: c\nCODE:\n```\nstatic painter_device_t display;\nvoid keyboard_post_init_kb(void) {\n    display = qp_make_.......;         // Create the display\n    qp_init(display, QP_ROTATION_0);   // Initialise the display\n}\n```\n\n----------------------------------------\n\nTITLE: Building the MacroPad12 Firmware\nDESCRIPTION: This command is used to build the firmware for the MacroPad12 keyboard with the default keymap. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/sapuseven/macropad12/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake sapuseven/macropad12:default\n```\n\n----------------------------------------\n\nTITLE: Cleaning Compiled Files\nDESCRIPTION: This snippet shows the command to clean the compiled files and intermediate generated files. It uses the `:clean` option with the `make` command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/helix/rev2/keymaps/default/readme_jp.md#_snippet_8\n\nLANGUAGE: makefile\nCODE:\n```\n$ make helix:default:clean\n```\n\n----------------------------------------\n\nTITLE: Flashing BM980HSRGB Firmware\nDESCRIPTION: This command builds and flashes the default firmware for the BM980HSRGB keyboard using the QMK build environment. It requires a properly configured QMK build environment and a connected keyboard in bootloader mode. This command will overwrite the existing firmware on the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kprepublic/bm980hsrgb/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake kprepublic/bm980hsrgb:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Horizon Firmware\nDESCRIPTION: This snippet shows how to flash the default firmware to the Horizon keyboard using the QMK build system. It requires a configured QMK build environment and a connected Horizon keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/horizon/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake horizon:default:flash\n```\n\n----------------------------------------\n\nTITLE: Mechlovin9 Matrix Diagram\nDESCRIPTION: A visual representation of the Mechlovin Studio Mechlovin9 keyboard matrix. It displays the arrangement of rows and columns, and the corresponding matrix positions for each key. This diagram aids in understanding the keyboard's layout for firmware configuration.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechlovin/mechlovin9/matrix_diagram.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┐   ┌───────┐\n│00 │01 │02 │03 │04 │05 │06 │07 │08 │09 │0A │0B │0C │0D │1D │0E │   │0D     │ 2u Backspace\n├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴───┼───┤   └───────┘\n│10   │11 │12 │13 │14 │15 │16 │17 │18 │19 │1A │1B │1C │2C   │1E │\n├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴─────┼───┤\n│20    │21 │22 │23 │24 │25 │26 │27 │28 │29 │2A │2B │2D      │2E │\n├──────┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴────┬───┼───┤\n│30      │32 │33 │34 │35 │36 │37 │38 │39 │3A │3B │3C    │3D │3E │\n├─────┬──┴┬──┴──┬┴───┴───┴───┴───┴───┴───┴──┬┴───┴┬─┬───┼───┼───┤\n│40   │41 │42   │46                         │4B   │ │4C │4D │4E │\n└─────┴───┴─────┴───────────────────────────┴─────┘ └───┴───┴───┘\n```\n\n----------------------------------------\n\nTITLE: Setting IS31FL3742A Mono LED Scaling Register (C)\nDESCRIPTION: This function configures the scaling register for a single LED connected to an IS31FL3742A LED driver, specifically for single-color applications.  The LED index and scaling value are passed as arguments. Call `is31fl3742a_update_scaling_registers()` to apply the changes.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/is31fl3742a.md#_snippet_7\n\nLANGUAGE: C\nCODE:\n```\nvoid is31fl3742a_set_scaling_register(uint8_t index, uint8_t value)\n```\n\n----------------------------------------\n\nTITLE: Flashing EEPROM for left hand\nDESCRIPTION: This command flashes the EEPROM of the left-hand side of the Let's Split keyboard.  It uses `avrdude` to write the `eeprom-lefthand.eep` file to the EEPROM. The `$(COM_PORT)` variable needs to be replaced with the correct serial port of the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/lets_split/readme.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\navrdude -p atmega32u4 -P $(COM_PORT) -c avr109 -U eeprom:w:\\\"./quantum/split_common/eeprom-lefthand.eep\\\"\n```\n\n----------------------------------------\n\nTITLE: Flashing the keyboard firmware\nDESCRIPTION: This command flashes the compiled firmware onto the Hillside 52 keyboard. It requires that the keyboard is in bootloader mode and connected to the computer. The command uses the QMK flashing tools to write the firmware to the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/hillside/52/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake hillside/52/0_1:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing the MxSS keyboard with default keymap\nDESCRIPTION: This command compiles and flashes the QMK firmware onto the MxSS keyboard.  It builds upon the 'make mxss:default' command and requires a configured QMK build environment along with necessary flashing tools.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mxss/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake mxss:default:flash\n```\n\n----------------------------------------\n\nTITLE: Example info.json Configuration\nDESCRIPTION: Example snippet showcasing how to configure the PS/2 mouse settings within the `info.json` file for RP2040. This includes pin assignments, driver selection, and enabling the mouse.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/ps2_mouse.md#_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n    \"ps2\": {\n        \"clock_pin\": \"GP1\",\n        \"data_pin\": \"GP0\",\n        \"driver\": \"vendor\",\n        \"enabled\": true,\n        \"mouse_enabled\": true\n    }\n```\n\n----------------------------------------\n\nTITLE: Flashing the keyboard with compiled firmware\nDESCRIPTION: This command compiles the QMK firmware for the atset/at3 keyboard with the default keymap and then flashes it to the device. It requires a configured QMK build environment and a connected keyboard in a state ready to receive the firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/atset/at12/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake atset/at3:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building moky88 keyboard firmware using QMK\nDESCRIPTION: This command builds the default keymap for the moky88 keyboard. It requires the QMK build environment to be set up correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/moky/moky88/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake moky/moky88:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Vector Keyboard Firmware\nDESCRIPTION: This command builds and flashes the default firmware for the Vector keyboard to the device using the QMK build system. It requires the QMK build environment and appropriate flashing tools to be set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cannonkeys/vector/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake cannonkeys/vector:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Potato65 Solderable Keyboard Firmware\nDESCRIPTION: This command builds the default keymap for the Potato65 Solderable keyboard using the QMK build system. It assumes the QMK build environment is already set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/buildakb/potato65s/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake buildakb/potato65s:default\n```\n\n----------------------------------------\n\nTITLE: Building the Chiri CE Keyboard Firmware\nDESCRIPTION: This command builds the firmware for the Chiri CE keyboard with the default configuration. It uses the QMK build environment to compile the keyboard's firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keebio/chiri_ce/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake keebio/chiri_ce/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Building ENTER67 Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the ENTER67 keyboard using the QMK build environment. It targets the `kezewa/enter67` keyboard definition and the `default` keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kezewa/enter67/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake kezewa/enter67:default\n```\n\n----------------------------------------\n\nTITLE: Building DK Saver Redux Firmware (Makefile)\nDESCRIPTION: This command builds the default keymap for the DK Saver Redux keyboard using the QMK build environment. It compiles the source code and generates the firmware file ready for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/druah/dk_saver_redux/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake druah/dk_saver_redux:default\n```\n\n----------------------------------------\n\nTITLE: Updating IS31FL3742A PWM Buffers (C)\nDESCRIPTION: This function flushes the PWM (Pulse Width Modulation) values to the IS31FL3742A LED driver, updating the LED brightness. It takes the driver index as an argument.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/is31fl3742a.md#_snippet_8\n\nLANGUAGE: C\nCODE:\n```\nvoid is31fl3742a_update_pwm_buffers(uint8_t index)\n```\n\n----------------------------------------\n\nTITLE: Flashing MW65_RGB Firmware (QMK)\nDESCRIPTION: This command flashes the built firmware onto the MW65_RGB keyboard. It requires the QMK build environment to be set up and assumes the keyboard is in a state where it can accept a flash.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mwstudio/mw65_rgb/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake mwstudio/mw65_rgb:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building UM-A Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the UM-A keyboard using the QMK build environment. It assumes that the QMK build environment has already been set up.  The resulting firmware can then be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/merge/uma/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake merge/uma:default\n```\n\n----------------------------------------\n\nTITLE: QMK Make Command for Teensy 2++\nDESCRIPTION: This command builds the QMK firmware for the Amiga 1200 keyboard converter using a Teensy 2++ board. It compiles the code with the default configuration and generates the firmware file to be flashed onto the microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/converter/a1200/readme.md#_snippet_2\n\nLANGUAGE: makefile\nCODE:\n```\nmake converter/a1200/teensy2pp:default\n```\n\n----------------------------------------\n\nTITLE: Building QMK Firmware for hexon38\nDESCRIPTION: This snippet demonstrates how to build the QMK firmware for the hexon38 keyboard. It requires navigating to the qmk_firmware directory in the terminal and executing the `make` command with the target `handwired/hexon38`. The compiled firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/hexon38/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ cd qmk_firmware\n$ make handwired/hexon38\n```\n\n----------------------------------------\n\nTITLE: 60 ANSI Arrow Keymap Layout\nDESCRIPTION: This is a visual representation of the default 60 ANSI Arrow Keymap layout. It shows the arrangement of keys on the keyboard, including the placement of the arrow keys. This layout is used as the basis for configuring the keymap in the QMK firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/layouts/default/60_ansi_arrow/readme.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n    /*\n     * ┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───────┐\n     * │Esc│1  │2  │3  │4  │5  │6  │7  │8  │9  │0  │-  │+  │Bspc   │\n     * ├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─────┤\n     * │Tab  │Q  │W  │E  │R  │T  │Y  │U  │I  │O  │P  │[  │]  │\\    │\n     * ├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴─────┤\n     * │Caps  │A  │S  │D  │F  │G  │H  │J  │K  │L  │;  │'  │Enter   │\n     * ├──────┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴───┴┬───┬───┤\n     * │Shift   │Z  │X  │C  │V  │B  │N  │M  │,  │.  │Shift │↑  │/  │\n     * ├────┬───┴┬──┴─┬─┴───┴───┴───┴───┴───┴──┬┴──┬┴──┬───┼───┼───┤\n     * │Ctrl│GUI │Alt │Space                   │Alt│GUI│←  │↓  │→  │\n     * └────┴────┴────┴────────────────────────┴───┴───┴───┴───┴───┘\n     */\n```\n\n----------------------------------------\n\nTITLE: Flashing Cantor Keyboard Firmware\nDESCRIPTION: This command is used to flash the compiled firmware onto the Cantor keyboard. It requires a connected keyboard in bootloader mode and a properly configured QMK build environment. This process uploads the firmware to the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cantor/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake cantor:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building QMK Firmware\nDESCRIPTION: Builds the default keymap for the Vagrant 10 keyboard using the QMK make command. This command compiles the firmware and creates a .hex file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/vagrant_10/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake vagrant_10:default\n```\n\n----------------------------------------\n\nTITLE: Building Firmware with Make\nDESCRIPTION: This command compiles the firmware for the Plywrks Ji-Eun keyboard with VIA enabled. It requires QMK build environment to be set up. The output is a .hex file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/plywrks/ji_eun/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake plywrks/ji_eun:via\n```\n\n----------------------------------------\n\nTITLE: Building Kallos Keyboard Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the Kallos keyboard. It assumes that the QMK build environment is properly set up. The output will be a .hex or .bin file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cipulot/kallos/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake cipulot/kallos:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Jelly Epoch Hotswap Firmware - QMK\nDESCRIPTION: This command flashes the compiled QMK firmware onto the Jelly Epoch hotswap PCB.  It uses the `make` command with the keyboard, keymap, and `flash` target specified. This requires the QMK environment to be set up correctly and the keyboard to be in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/owlab/jelly_epoch/hotswap/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake owlab/jelly_epoch/hotswap:default:flash\n```\n\n----------------------------------------\n\nTITLE: Compiling Firmware for IDOBAO ID87 v2\nDESCRIPTION: This command compiles the default firmware for the IDOBAO ID87 v2 keyboard using the QMK build environment.  It assumes that the QMK build environment is already set up. The compiled firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/idobao/id87/v2/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake idobao/id87/v2:default\n```\n\n----------------------------------------\n\nTITLE: Building Matrix ME Keyboard Firmware\nDESCRIPTION: This command builds the QMK firmware for the Matrix ME keyboard using the default configuration.  It compiles the source code and generates the firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/matrix/me/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake matrix/me:default\n```\n\n----------------------------------------\n\nTITLE: Building the Bastion75 Firmware\nDESCRIPTION: This command builds the default firmware for the CannonKeys Bastion75 keyboard using the QMK build environment. Ensure the QMK build environment is properly set up before executing this command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cannonkeys/bastion75/readme.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmake cannonkeys/bastion75:default\n```\n\n----------------------------------------\n\nTITLE: Building Phantom Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the Phantom keyboard. It assumes that the QMK build environment is properly set up. The output will be a .hex or .bin file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/phantom/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake phantom:default\n```\n\n----------------------------------------\n\nTITLE: Building IDOBAO MONTEX Firmware with QMK\nDESCRIPTION: This command is used to compile the default firmware for the IDOBAO MONTEX numpad (version 1) using the QMK build environment. It requires a properly set up QMK build environment and uses the 'make' command to trigger the compilation process.  The compiled firmware can then be flashed onto the numpad.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/idobao/montex/v1/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake idobao/montex/v1:default\n```\n\n----------------------------------------\n\nTITLE: Compiling ehan default keymap | QMK\nDESCRIPTION: Compiles the default keymap for the ehan keyboard using the QMK build environment. This command assumes that the QMK build environment is properly set up. Refer to the QMK documentation for setting up the build environment and make instructions.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/suavity/ehan/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake suavity/ehan:default\n```\n\n----------------------------------------\n\nTITLE: Building ATSET AT2 Firmware\nDESCRIPTION: This command builds the default firmware for the ATSET AT2 keyboard.  It assumes that the QMK build environment has been set up.  The output is a .hex or .bin file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/atset/at2/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake atset/at2:default\n```\n\n----------------------------------------\n\nTITLE: Flashing QMK Firmware to Mode Tempo M60H\nDESCRIPTION: This command flashes the built QMK firmware to the Mode Tempo M60H keyboard. It requires the QMK build environment to be set up and the necessary flashing tools to be installed. The keyboard must be in bootloader mode for the flashing to succeed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mode/m60h/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake mode/m60h:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing 4 Pack Macropad with QMK\nDESCRIPTION: This command flashes the default keymap to the 4 Pack macropad using the QMK build environment. It requires the QMK build environment to be set up and the 4 Pack keyboard definition to be available.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/40percentclub/4pack/readme.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmake 40percentclub/4pack:default:flash\n```\n\n----------------------------------------\n\nTITLE: Measure Text Width (C)\nDESCRIPTION: This snippet defines the `qp_textwidth` function, which calculates the width of a string in pixels for a given font. It's useful for calculating the position of text on the display.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/quantum_painter.md#_snippet_75\n\nLANGUAGE: c\nCODE:\n```\nint16_t qp_textwidth(painter_font_handle_t font, const char *str);\n```\n\n----------------------------------------\n\nTITLE: Building zwerg Firmware with Make\nDESCRIPTION: This command builds the default keymap for the zwerg keyboard using the make command. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/zwerg/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake zwerg:default\n```\n\n----------------------------------------\n\nTITLE: Building Atreus62 Firmware with Make\nDESCRIPTION: This snippet shows how to build the default Atreus62 firmware using the `make` command. It assumes that the QMK build environment has already been set up according to the QMK documentation. The command compiles the firmware with the default keymap for the Atreus62 keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/atreus62/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake atreus62:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Zoom65 Firmware with QMK\nDESCRIPTION: This command flashes the compiled firmware onto the Meletrix Zoom65 keyboard using the QMK build environment. It assumes the keyboard is in bootloader mode and uses the appropriate flashing tool for the hardware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/meletrix/zoom65/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake meletrix/zoom65:default:flash\n```\n\n----------------------------------------\n\nTITLE: Compiling DirectPins Keyboard with QMK\nDESCRIPTION: This command compiles the DirectPins keyboard firmware for an RP2040-based board using the QMK command-line tool. It specifies the keyboard and keymap to use for the compilation process. Requires a properly set up QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ez_maker/directpins/rp2040/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nqmk compile -kb ez_maker/directpins/rp2040 -km default\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for Tomato Keyboard (QMK)\nDESCRIPTION: This command builds the default firmware for the Tomato keyboard using the QMK build environment. It assumes that the QMK build environment has been properly set up according to the QMK documentation. It compiles the source code and generates a firmware image that can be flashed onto the Tomato keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/40percentclub/tomato/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake 40percentclub/tomato:default\n```\n\n----------------------------------------\n\nTITLE: Building the E8ghty Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the E8ghty keyboard using the QMK build environment. It assumes that the QMK build environment has been set up correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/trnthsn/e8ghty/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake trnthsn/e8ghty:default\n```\n\n----------------------------------------\n\nTITLE: Building SdraKb00 Firmware with QMK\nDESCRIPTION: This command is used to compile the firmware for the SdraKb00 macropad using the QMK build environment.  It specifies the keyboard and keymap to be built.  The user needs to have QMK environment set up to run this command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/sdrakbs/sdrakb00/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake sdrakbs/sdrakb00:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Budget96 Keyboard Firmware\nDESCRIPTION: This command flashes the built firmware onto the Budget96 keyboard. This requires the QMK build environment and a compatible flashing tool to be configured. It is expected that the keyboard is connected to the computer and in a flashable state.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/donutcables/budget96/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake donutcables/budget96:default:flash\n```\n\n----------------------------------------\n\nTITLE: Installing nuvoton-isp tool\nDESCRIPTION: This command installs the `nuvoton-isp` Python package, which is a tool used for flashing firmware to Nuvoton microcontrollers. The `--user` flag installs the package in the user's local environment, avoiding the need for administrator privileges. This tool is a dependency for one of the flashing methods described in the document.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ducky/one2sf/1967st/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install --user nuvoton-isp\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for Flame60 Keyboard\nDESCRIPTION: This command builds the default firmware for the Flame60 keyboard. It requires a properly configured QMK build environment. The output is a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/clap_studio/flame60/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake clap_studio/flame60:default\n```\n\n----------------------------------------\n\nTITLE: Building Default Keymap for Treasure Type-9 Macropad\nDESCRIPTION: This command builds the default keymap for the Treasure Type-9 macropad using the QMK build system. It requires a properly configured QMK build environment. The output will be a firmware file that can be flashed onto the macropad.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/treasure/type9/readme.md#_snippet_0\n\nLANGUAGE: QMK Make\nCODE:\n```\nmake treasure/type9:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Skelett 60 Firmware with Make\nDESCRIPTION: This command flashes the built firmware to the Skelett 60 keyboard using the QMK build system. It requires a properly configured QMK environment and a connected keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/novelkeys/skelett60/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake novelkeys/skelett60:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building ELISE V2 keyboard firmware\nDESCRIPTION: This command builds the default keymap for the ELISE V2 keyboard. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/draytronics/elise_v2/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake draytronics/elise_v2:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Manibus Keyboard (Right Half)\nDESCRIPTION: This command flashes the right half of the Manibus keyboard using the DFU bootloader with split keyboard support. It requires the QMK build environment and a DFU-compatible bootloader on the right half of the keyboard. The command uploads the compiled firmware to the right half of the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/blank_tehnologii/manibus/readme.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nmake blank_tehnologii/manibus:default:dfu-split-right # Right half\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware\nDESCRIPTION: Flashes the compiled firmware to the Scotto34 keyboard. This command builds upon the compilation step and assumes the keyboard is connected and ready to receive the firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/scottokeebs/scotto34/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/scottokeebs/scotto34:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing firmware to Pizza Slice65\nDESCRIPTION: This command flashes the default firmware to the Pizza Keyboards Slice65 keyboard. It utilizes the QMK build environment and assumes the necessary tools for flashing are installed and configured.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/pizzakeyboards/slice65/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake pizzakeyboards/slice65:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building QMK Firmware for Tyson60s Keyboard\nDESCRIPTION: This command builds the default QMK firmware for the trnthsn/tyson60s keyboard. It requires the QMK build environment to be set up correctly. The output will be a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/trnthsn/tyson60s/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake trnthsn/tyson60s:default\n```\n\n----------------------------------------\n\nTITLE: Building QMK Firmware\nDESCRIPTION: Builds the QMK firmware for the viktus/osav2_numpad_topre keyboard with the default keymap.  This command compiles the keymap and prepares the firmware for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/viktus/osav2_numpad_topre/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake viktus/osav2_numpad_topre:default\n```\n\n----------------------------------------\n\nTITLE: Building EE-AT Keyboard Firmware - Make\nDESCRIPTION: This command builds the default keymap for the geonworks/ee_at keyboard within the QMK Firmware environment. It requires a properly configured QMK build environment.  The resulting firmware can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/geonworks/ee_at/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake geonworks/ee_at:default\n```\n\n----------------------------------------\n\nTITLE: Building Default TADA68 Firmware\nDESCRIPTION: This command builds the default firmware for the TADA68 keyboard using the QMK build environment.  It creates a .bin file, which is the standard firmware format for this keyboard. The output file is placed in the `qmk_firmware/.build` directory.  The command should be executed from the root of the `qmk_firmware` directory.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/tada68/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake tada68:default\n```\n\n----------------------------------------\n\nTITLE: Open current folder in macOS Finder\nDESCRIPTION: This command opens the current directory in macOS Finder. It provides a convenient way to locate the firmware file after compilation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/newbs_flashing.md#_snippet_1\n\nLANGUAGE: applescript\nCODE:\n```\nopen .\n```\n\n----------------------------------------\n\nTITLE: Compiling QMK Firmware for Uni v4\nDESCRIPTION: This command compiles the QMK firmware for the Uni v4 keyboard using the stenokeyboards/the_uni/rp_2040 keyboard definition and the default keymap. It requires the QMK build environment to be set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/stenokeyboards/the_uni/rp_2040/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nqmk compile -kb stenokeyboards/the_uni/rp_2040 -km default\n```\n\n----------------------------------------\n\nTITLE: Building the NCC-1701-KB Firmware using QMK\nDESCRIPTION: This command builds the default firmware for the NCC-1701-KB keypad using the QMK build environment. It requires the QMK build environment to be properly set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ncc1701kb/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake ncc1701kb:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Keyboard Firmware - QMK\nDESCRIPTION: This command flashes the built firmware onto the WindX R1 keyboard using the QMK build environment.  It requires the keyboard to be in bootloader mode and uses a flashing tool to upload the firmware to the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/windstudio/wind_x/r1/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake windstudio/wind_x/r1:default:flash\n```\n\n----------------------------------------\n\nTITLE: Compiling and Flashing Helix Pico Firmware\nDESCRIPTION: This snippet shows how to compile and flash the Helix Pico firmware with the default keymap using the `make` command. The `:flash` option is added to flash the compiled firmware to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/helix/pico/keymaps/default/readme_jp.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\n$ make helix/pico:default:flash\n```\n\n----------------------------------------\n\nTITLE: Defining Forced Sync Throttle in QMK\nDESCRIPTION: This defines the deadline (in milliseconds) for synchronizing data from the master to the slave when using the QMK-provided split transport. This configuration impacts data synchronization between the two halves.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/config_options.md#_snippet_103\n\nLANGUAGE: c\nCODE:\n```\n#define FORCED_SYNC_THROTTLE_MS 100\n```\n\n----------------------------------------\n\nTITLE: Flashing transition80 Keyboard Firmware with QMK\nDESCRIPTION: This command builds and flashes the QMK firmware for the yandrstudio/transition80 keyboard with the default keymap. It requires a correctly configured QMK build environment and a connected keyboard in a flashable state.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/yandrstudio/transition80/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake yandrstudio/transition80:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Keychron Q11 Firmware (ISO Encoder)\nDESCRIPTION: This command builds the QMK firmware for the Keychron Q11 keyboard with the ISO encoder layout and the default keymap.  It requires the QMK build environment to be properly set up.  The output will be a .hex or .bin file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keychron/q11/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake keychron/q11/iso_encoder:default\n```\n\n----------------------------------------\n\nTITLE: Update LED Control Registers - IS31FL3733\nDESCRIPTION: This function flushes the LED control register values to the IS31FL3733 LED driver. The index parameter specifies the driver index. This function must be called after configuring the LED control registers using `is31fl3733_set_led_control_register()` to apply the changes.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/is31fl3733.md#_snippet_12\n\nLANGUAGE: C\nCODE:\n```\nvoid is31fl3733_update_led_control_registers(uint8_t index)\n```\n\n----------------------------------------\n\nTITLE: Building WT65-H2 Firmware (QMK)\nDESCRIPTION: This command builds the default QMK firmware for the wilba.tech WT65-H2 keyboard. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wilba_tech/wt65_h2/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake wilba_tech/wt65_h2:default\n```\n\n----------------------------------------\n\nTITLE: Building Yuri Keyboard Firmware with QMK\nDESCRIPTION: This command builds the default keymap for the Yuri keyboard using the QMK firmware. It requires a properly configured QMK build environment. The output will be a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ocean/yuri/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake ocean/yuri:default\n```\n\n----------------------------------------\n\nTITLE: Enabling Split ST7565 Sync in QMK\nDESCRIPTION: This syncs the on/off state of the ST7565 screen between the halves of a split keyboard. This ensures that the ST7565 screens on both halves are synchronized.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/config_options.md#_snippet_110\n\nLANGUAGE: c\nCODE:\n```\n#define SPLIT_ST7565_ENABLE\n```\n\n----------------------------------------\n\nTITLE: Flashing Octopad Firmware with QMK\nDESCRIPTION: This command flashes the compiled firmware onto the Nightly Boards Octopad keyboard using the QMK build environment.  It requires the QMK build environment to be set up and the keyboard to be connected.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/nightly_boards/octopad/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake nightly_boards/octopad:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building MAJA Keyboard Firmware with QMK\nDESCRIPTION: This command is used to build the default keymap for the MAJA keyboard using the QMK firmware. It assumes that the QMK build environment has been properly set up according to the QMK documentation. The command compiles the firmware, creating a .hex file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kbdfans/maja/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake kbdfans/maja:default\n```\n\n----------------------------------------\n\nTITLE: Flashing the Twelvekey Firmware with QMK\nDESCRIPTION: This command builds and flashes the default firmware for the Twelvekey macropad using the QMK build environment. It requires QMK Firmware and the necessary flashing tools to be set up correctly.  The device needs to be in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kb_elmo/twelvekey/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake kb_elmo/twelvekey:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for Numeric Keypad IIe using QMK Make\nDESCRIPTION: This command builds the QMK firmware for the Numeric Keypad IIe converter with the default keymap. It assumes that the QMK build environment has already been set up. The resulting firmware can then be flashed to the microcontroller connected to the keypad.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/converter/numeric_keypad_iie/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake converter/numeric_keypad_iie:default\n```\n\n----------------------------------------\n\nTITLE: Building keyboard firmware with Make\nDESCRIPTION: This command compiles the firmware for the handwired/dc/mc/001 keyboard with the default keymap. It requires a properly set up build environment as described in the QMK documentation.  The compiled firmware can then be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/dc/mc/001/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/dc/mc/001:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Kudox Columner Firmware with QMK\nDESCRIPTION: This command builds and flashes the default keymap for the Kudox Columner keyboard using the QMK build environment. It compiles the firmware and flashes the resulting .hex file to the keyboard using the appropriate flashing tool.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kumaokobo/kudox/columner/readme.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nmake kumaokobo/kudox/columner:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Shadow80 Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the Shadow80 keyboard using the QMK build environment. Ensure the build environment is properly set up before executing this command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/pixelspace/shadow80/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake shadow80:default\n```\n\n----------------------------------------\n\nTITLE: Building h75_singa Keyboard Firmware\nDESCRIPTION: This command builds the default keymap for the h75_singa keyboard using the QMK Firmware build environment. It assumes the QMK build environment is already set up. The resulting firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/hineybush/h75_singa/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake h75_singa:default\n```\n\n----------------------------------------\n\nTITLE: Flashing the Plywrks ply8x Firmware\nDESCRIPTION: This command builds and flashes the default firmware for the Plywrks ply8x keyboard. It requires a properly configured QMK build environment and a connected keyboard in a flashable state.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/plywrks/ply8x/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake plywrks/ply8x:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing the frobiac/blackflat keyboard firmware\nDESCRIPTION: This command flashes the built QMK firmware onto the frobiac/blackflat keyboard.  It depends on the QMK build environment and requires the keyboard to be in bootloader mode.  The command uses dfu-programmer or similar tools to upload the firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/frobiac/blackflat/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake frobiac/blackflat:flash\n```\n\n----------------------------------------\n\nTITLE: Compiling Firmware\nDESCRIPTION: This snippet provides the command to compile the firmware for the Helix keyboard with the default keymap.  It uses the `make` command with the `<keyboard>:<keymap>` syntax.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/helix/rev2/keymaps/default/readme_jp.md#_snippet_6\n\nLANGUAGE: makefile\nCODE:\n```\n$ make helix:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Keeb68 Firmware (Makefile)\nDESCRIPTION: This command flashes the compiled firmware onto the Keeb68 keyboard. It requires the QMK build environment and a configured flashing tool. It specifies the keyboard layout as 'sandwich/keeb68', the keymap as 'default' and the target as 'flash'.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/sandwich/keeb68/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake sandwich/keeb68:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Zoom98 Firmware - Make Command\nDESCRIPTION: This command flashes the compiled firmware onto the Zoom98 keyboard. It assumes the QMK build environment is configured and the keyboard is connected. Ensure the keyboard is in a state ready to accept firmware updates.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/meletrix/zoom98/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake meletrix/zoom98:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for Jane v2 CE Keyboard\nDESCRIPTION: This command builds the QMK firmware for the TGR Jane v2 CE keyboard with the default keymap. It assumes that the QMK build environment has already been set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/tgr/jane/v2ce/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake tgr/jane/v2ce:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Keychron C2 Pro V2 Firmware\nDESCRIPTION: These commands flash the compiled firmware to the Keychron C2 Pro V2 keyboard. The `make ... :flash` command compiles and flashes the specified keymap to the keyboard using the configured flashing tool.  Requires a correctly configured QMK build environment and a connected keyboard in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keychron/c2_pro_v2/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake keychron/c2_pro_v2/ansi/rgb:default:flash\n```\n\nLANGUAGE: Shell\nCODE:\n```\nmake keychron/c2_pro_v2/ansi/white:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building JK65 Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the JK65 keyboard using the QMK build environment. It assumes that the QMK build environment has been properly set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/jaykeeb/jk65/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake jaykeeb/jk65:default\n```\n\n----------------------------------------\n\nTITLE: Compiling CHORD ZERO Firmware with QMK CLI\nDESCRIPTION: This command compiles the default keymap for the CHORD ZERO keyboard using the QMK CLI. It requires QMK CLI to be installed. The command generates a `.uf2` file which can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/chord/zero/readme.md#_snippet_1\n\nLANGUAGE: QMK CLI\nCODE:\n```\nqmk compile -kb chord/zero -km default\n```\n\n----------------------------------------\n\nTITLE: Flashing Elysian Firmware with Make\nDESCRIPTION: This command flashes the built firmware onto the Elysian macropad using the 'make' command. It requires the QMK build environment to be set up and the keyboard to be in bootloader mode.  The ':flash' target is used to trigger the flashing process after the firmware has been built.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/custommk/elysian/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake custommk/elysian:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing ProjectD 65% ANSI Keyboard Firmware\nDESCRIPTION: This command builds and flashes the default firmware for the ProjectD 65% ANSI keyboard.  It requires a properly configured QMK build environment and a connected keyboard in a flashable state.  This is equivalent to running the build command followed by the flash command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/projectd/65/projectd_65_ansi/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake projectd/65/projectd_65_ansi:default:flash\n```\n\n----------------------------------------\n\nTITLE: Get Commit Hash for Keymap - Git\nDESCRIPTION: This command retrieves the commit hash of the last change to the `keymap.c` (or `keymap.json`) file in the specified keyboard's default keymap directory within the `qmk_firmware` repository.  The commit hash is used to track the keymap version.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/configurator_default_keymaps.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit log -1 --pretty=oneline -- keyboards/<keyboard>/keymaps/default/keymap.c\n```\n\n----------------------------------------\n\nTITLE: Building nightstar75 Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the nightstar75 keyboard using the QMK build environment. It requires QMK to be set up correctly before execution.  The output is a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/yandrstudio/nightstar75/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake yandrstudio/nightstar75:default\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for PetruziaMini Keyboard\nDESCRIPTION: This command builds the QMK firmware for the PetruziaMini keyboard with the default keymap. It requires the QMK build environment to be set up. The output is the firmware file that can be flashed onto the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/petruziamini/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/petruziamini:default\n```\n\n----------------------------------------\n\nTITLE: Building the TMO50 keyboard with QMK\nDESCRIPTION: This command builds the default keymap for the TMO50 keyboard using the QMK Firmware build system. It assumes that the QMK build environment has already been set up. The output is a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/tmo50/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake tmo50:default\n```\n\n----------------------------------------\n\nTITLE: Building kafka68 Keyboard Firmware\nDESCRIPTION: This command builds the QMK firmware for the kafka68 keyboard with the default keymap. It utilizes the `make` command and specifies the keyboard and keymap to build.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/meetlab/kafka68/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake meetlab/kafka68:default\n```\n\n----------------------------------------\n\nTITLE: Flashing suika85ergo Firmware (QMK)\nDESCRIPTION: This command flashes the compiled firmware onto the suika85ergo keyboard. It requires a correctly set up QMK build environment and a compatible flashing tool. The command assumes the default keymap is used. The keyboard must be in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/suikagiken/suika85ergo/readme.md#_snippet_1\n\nLANGUAGE: QMK Make\nCODE:\n```\nmake suikagiken/suika85ergo:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building VIA keymap for Pteron36 (make)\nDESCRIPTION: This command compiles the VIA-enabled firmware for the Pteron36 keyboard. It requires the QMK build environment and the VIA support to be properly configured. The output is a firmware image that allows the keyboard to be configured using the VIA configurator.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/pteron36/readme.md#_snippet_3\n\nLANGUAGE: make\nCODE:\n```\nmake pteron36:via\n```\n\n----------------------------------------\n\nTITLE: Defining keyboard layout\nDESCRIPTION: The provided code snippet defines a keyboard layout named `LAYOUT_ortho_5x12`. This specifies how the keys are arranged on an ortholinear 5x12 keyboard. This is likely a part of a QMK firmware configuration.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/layouts/default/ortho_5x12/readme.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n# ortho_5x12\n\n    LAYOUT_ortho_5x12\n```\n\n----------------------------------------\n\nTITLE: Flashing Chavdai40 Firmware (rev2)\nDESCRIPTION: This command flashes the default firmware onto the Chavdai40 keyboard, revision 2. It uses the QMK make system with the 'flash' target. Requires a correctly configured QMK build environment and suitable flashing utilities.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/chavdai40/readme.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nmake chavdai40/rev2:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Kepler Firmware - QMK\nDESCRIPTION: This command builds the QMK firmware for the Kepler keyboard using the default keymap. It requires a properly configured QMK build environment. The command compiles the firmware based on the specified keyboard and keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/wwa/kepler/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake handwired/wwa/kepler:default\n```\n\n----------------------------------------\n\nTITLE: Building Waaffle Firmware with Elite-C\nDESCRIPTION: This command builds the QMK firmware for the Waaffle keyboard using the Elite-C controller. It specifies the keyboard layout, revision, and controller type to generate the firmware file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/delikeeb/waaffle/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake delikeeb/waaffle/rev3/elite_c:default\n```\n\n----------------------------------------\n\nTITLE: Building mt980 firmware using make\nDESCRIPTION: This command compiles the firmware for the mt980 keyboard with the default keymap. It requires a properly configured QMK build environment.  The output is a firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mt/mt980/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake mt/mt980:default\n```\n\n----------------------------------------\n\nTITLE: Building B.fake Keyboard Firmware\nDESCRIPTION: This command builds the default keymap for the B.fake keyboard using the QMK build environment. It requires QMK to be set up correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/bfake/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake bfake:default\n```\n\n----------------------------------------\n\nTITLE: Building Stand Aside Firmware\nDESCRIPTION: This command builds the default firmware for the Stand Aside keyboard using the QMK build environment. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/edi/standaside/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake edi/standaside:default\n```\n\n----------------------------------------\n\nTITLE: Building ACR60 Firmware with Make\nDESCRIPTION: This command builds the default firmware for the ACR60 keyboard using the make command. It assumes that the QMK build environment is already set up. The output will be a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechkeys/acr60/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake mechkeys/acr60:default\n```\n\n----------------------------------------\n\nTITLE: DecenTKL Numpad Num Keymap\nDESCRIPTION: This C code represents the keymap layout for the DecenTKL Numpad when the Num key is held down. It visually depicts the alternative functions assigned to the keys when this modifier is active. No external dependencies are explicitly listed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/decent/numpad/readme.md#_snippet_3\n\nLANGUAGE: C\nCODE:\n```\n/*\n *            /─────────/─────────/\n *           /Shift+F11/Shift+F12/\n *          /─────────/─────────/\n * ┌───────┬───────┬───────┬───────┐\n * │       │       │       │Bright-│\n * ├───────┼───────┼───────┼───────┤\n * │       │ Hue + │       │Bright+│\n * ├───────┼───────┼───────┤       │\n * │Speed -│ Swirl │Speed +│       │\n * ├───────┼───────┼───────┼───────┤\n * │Mode - │ Hue - │Mode + │       │\n * ├───────┴───────┼───────┤BootSel│\n * │ on / off      │       │       │\n * └───────────────┴───────┴───────┘\n */\n```\n\n----------------------------------------\n\nTITLE: Building Momokai Aurora Firmware (Makefile)\nDESCRIPTION: This command builds the default firmware for the Momokai Aurora keyboard using the QMK build environment. It compiles the source code and generates the firmware file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/momokai/aurora/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake momokai/aurora:default\n```\n\n----------------------------------------\n\nTITLE: Building n60-s Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the n60-s keyboard using the QMK build environment. It compiles the source code and creates a firmware image that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/nightly_boards/n60_s/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake nightly_boards/n60_s:default\n```\n\n----------------------------------------\n\nTITLE: Cleaning Zinc keyboard build\nDESCRIPTION: This command cleans the build directory by removing compiled objects and intermediate files for the Zinc keyboard's 'default' keymap. This is useful for ensuring a clean build or resolving build issues.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/25keys/zinc/keymaps/default/readme_jp.md#_snippet_3\n\nLANGUAGE: Makefile\nCODE:\n```\n$ make zinc:default:clean\n```\n\n----------------------------------------\n\nTITLE: Keyboard Matrix Diagram\nDESCRIPTION: This diagram visually represents the keyboard matrix for a split_65 layout. Each key is mapped to a specific row and column intersection, which the keyboard controller scans to detect key presses. The numbers inside the boxes represent the keycodes that the keyboard firmware will send when that key is pressed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/jtallbean/split_65/matrix_diagram.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n                                                                ┌───────┐\n                                                   2u Backspace │57     │\n                                                                └───────┘\n┌───┐┌───┬───┬───┬───┬───┬───┬───┐      ┌───┬───┬───┬───┬───┬───┬───┬───┬───┐\n│00 ││01 │02 │03 │04 │05 │06 │07 │      │50 │51 │52 │53 │54 │55 │56 │57 │58 │\n├───┤├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┘    ┌─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴───┼───┤\n│10 ││11   │13 │14 │15 │16 │17 │      │60 │61 │62 │63 │64 │65 │66 │67   │68 │\n├───┤├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┐     └┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴─────┼───┤\n│20 ││21    │23 │24 │25 │26 │27 │      │70 │71 │72 │73 │74 │75 │77      │78 │\n├───┤├──────┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┐    └─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴────┬───┼───┤\n│30 ││31      │33 │34 │35 │36 │37 │      │80 │81 │82 │83 │84 │85    │87 │88 │\n├───┤├────┬───┴┬──┴─┬─┴───┴───┴┬──┘   ┌──┴───┴─┬─┴──┬┴───┼───┴┬─┬───┼───┼───┤\n│40 ││41  │43  │44  │45        │      │90      │92  │93  │94  │ │95 │97 │98 │\n└───┘└────┴────┴────┴──────────┘      └────────┴────┴────┴────┘ └───┴───┴───┘\n```\n\n----------------------------------------\n\nTITLE: Building Pegasus Hoof Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Pegasus Hoof controller using the QMK build environment. It assumes that the QMK build environment is properly set up. The output will be a firmware file that can be flashed onto the controller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/bpiphany/pegasushoof/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake bpiphany/pegasus_hoof:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Index Tab Firmware with Make\nDESCRIPTION: This command builds and flashes the firmware to the Index Tab keyboard using the QMK build environment and dfu-programmer. It requires a properly configured QMK environment and the keyboard to be in DFU mode. The 'default' keymap is used, and the keyboard is specified as 'minimon/index_tab'.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/minimon/index_tab/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake minimon/index_tab:default:flash\n```\n\n----------------------------------------\n\nTITLE: Clear Programmable Button Report in QMK\nDESCRIPTION: This C function clears the programmable button report, resetting the state of all programmable buttons.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/programmable_button.md#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nvoid programmable_button_clear(void)\n```\n\n----------------------------------------\n\nTITLE: Building Equinox Firmware with VIA Keymap (QMK)\nDESCRIPTION: This command compiles the QMK firmware for the ai03/equinox keyboard with the VIA keymap. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ai03/equinox/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake ai03/equinox:via\n```\n\n----------------------------------------\n\nTITLE: Configure LED Control Register - IS31FL3733 (Mono)\nDESCRIPTION: This function configures the LED control register for a specific LED, enabling or disabling it for an IS31FL3733 single-color driver. The index specifies the LED, and the value parameter enables or disables it. The changes only take effect after calling `is31fl3733_update_led_control_registers()`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/is31fl3733.md#_snippet_10\n\nLANGUAGE: C\nCODE:\n```\nvoid is31fl3733_set_led_control_register(uint8_t index, bool value)\n```\n\n----------------------------------------\n\nTITLE: Making the keyboard firmware\nDESCRIPTION: This command builds the firmware for the Equanimity keyboard with the default keymap. It requires the QMK build environment to be set up. The output is a .hex or .bin file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/tyraelwastaken/equanimity/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake tyraelwastaken/equanimity:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware for Tractyl Manuform (QMK Make)\nDESCRIPTION: This command flashes the built firmware to the Tractyl Manuform keyboard using the QMK build environment. It specifies the keyboard layout (5x6_right), the microcontroller (f411), the keymap (drashna:default), and the flash target.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/tractyl_manuform/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake handwired/tractyl_manuform/5x6_right/f411/drashna:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building yr6095 Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the yr6095 keyboard using the QMK build environment. It assumes the QMK build environment is already set up according to the QMK documentation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/yandrstudio/yr6095/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake yandrstudio/yr6095:default\n```\n\n----------------------------------------\n\nTITLE: Building Feels65 Keyboard Firmware\nDESCRIPTION: This command is used to build the default keymap for the Feels65 keyboard using the QMK Firmware build environment.  It assumes that the QMK build environment has been properly set up according to the QMK documentation. The resulting firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/feels/feels65/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake feels/feels65:default\n```\n\n----------------------------------------\n\nTITLE: Adding Layout to Keyboard's rules.mk\nDESCRIPTION: This snippet demonstrates how to add a layout to the keyboard's `rules.mk` file. The `LAYOUTS` variable is set to `60_ansi`, indicating that the keyboard supports this layout. This allows the QMK build system to correctly include the layout when compiling the firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/feature_layouts.md#_snippet_2\n\nLANGUAGE: makefile\nCODE:\n```\nLAYOUTS = 60_ansi\n```\n\n----------------------------------------\n\nTITLE: Implementing early_hardware_init_pre function in C\nDESCRIPTION: This C code snippet demonstrates how to implement the `early_hardware_init_pre` function in a keyboard's source file. This function is executed before RAM gets cleared and before clocks or GPIOs are configured. It is intended for low-level register writes.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/platformdev_chibios_earlyinit.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nvoid early_hardware_init_pre(void) {\n    // do things with registers\n}\n```\n\n----------------------------------------\n\nTITLE: Flashing Rookey Firmware\nDESCRIPTION: This command flashes the compiled QMK firmware to the Rookey keyboard. It assumes that the keyboard is connected and in bootloader mode. It programs the microcontroller with the firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/takashicompany/rookey/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake takashicompany/rookey:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Morgan65 Firmware\nDESCRIPTION: This command is used to build the default firmware for the Morgan65 keyboard using the QMK build environment. It requires a properly configured QMK environment and assumes the bioi/morgan65 keymap is available.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/bioi/morgan65/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake bioi/morgan65:default\n```\n\n----------------------------------------\n\nTITLE: PS/2 Mouse Invert Buttons (C)\nDESCRIPTION: Defines to invert the left & right mouse buttons. Add to `config.h`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/ps2_mouse.md#_snippet_14\n\nLANGUAGE: c\nCODE:\n```\n#define PS2_MOUSE_INVERT_BUTTONS\n```\n\n----------------------------------------\n\nTITLE: Converting Font Image to QFF Format\nDESCRIPTION: This snippet demonstrates the use of the `qmk painter-convert-font-image` command to convert an intermediate font image (noto11.png) to the QFF file format using a mono4 color scheme. The unicode glyphs argument must match what was used when creating the image. Requires a valid font image file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/quantum_painter.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ cd /home/qmk/qmk_firmware/keyboards/my_keeb\n$ qmk painter-convert-font-image --input noto11.png -f mono4 --unicode-glyphs \"ĄȽɂɻɣɈʣ\"\nWriting /home/qmk/qmk_firmware/keyboards/my_keeb/generated/noto11.qff.h...\nWriting /home/qmk/qmk_firmware/keyboards/my_keeb/generated/noto11.qff.c...\n```\n\n----------------------------------------\n\nTITLE: Unicode Glyph Table Structure Definition in C\nDESCRIPTION: This C code defines the structure of the Unicode glyph table in the QMK Font Format (QFF). This table contains an array of Unicode code point and glyph information pairs. The number of glyphs (N) is variable and specified in the font descriptor. This block immediately follows the ASCII glyph table block (if present) or the font descriptor block.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/quantum_painter_qff.md#_snippet_2\n\nLANGUAGE: c\nCODE:\n```\ntypedef struct __attribute__((packed)) qff_unicode_glyph_table_v1_t {\n    qgf_block_header_v1_t header;     // = { .type_id = 0x02, .neg_type_id = (~0x02), .length = (N * 6) }\n    struct __attribute__((packed)) {  // container for a single unicode glyph\n        uint24_t code_point;          // the unicode code point\n        uint24_t glyph;               // the glyph information, as per ASCII glyphs above\n    } glyph[N];                       // N glyphs worth of data\n} qff_unicode_glyph_table_v1_t;\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware to Kamigakushi Keyboard (QMK)\nDESCRIPTION: This command builds and flashes the firmware to the kamigakushi keyboard with the default keymap. It requires a properly configured QMK build environment and a connected keyboard in bootloader mode. This command will attempt to automatically flash the generated firmware to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/jaykeeb/kamigakushi/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake jaykeeb/kamigakushi:default:flash\n```\n\n----------------------------------------\n\nTITLE: Defining LED Pin in gamenum.c (QMK)\nDESCRIPTION: This code snippet is used to define the pin that the LED will be using in `gamenum.c`. The DDRx register configures the pin as an output, and the PORTx register sets the initial state of the pin to LOW, turning off the LED.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/gamenum/readme.md#_snippet_3\n\nLANGUAGE: c\nCODE:\n```\n    DDRD |= (1<<4);\n    PORTD &= ~(1<<4);\n```\n\n----------------------------------------\n\nTITLE: DecenTKL Base Layout Visualization\nDESCRIPTION: This C-style comment visually represents the base layout of the DecenTKL keyboard. It shows the placement of keys such as Esc, F1-F10, Backspace, Tab, Caps Lock, Shift, Ctrl, GUI, and Alt. The diagram assists in understanding the physical arrangement of keys on the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/decent/tkl/readme.md#_snippet_2\n\nLANGUAGE: C\nCODE:\n```\n/*\n    *   /─────/       /─────/─────/─────/─────/─────/─────/─────/─────/─────/─────/\n    *  /Esc  /       /F1   /F2   /F3   /F4   /F5   /F6   /F7   /F8   /F9   /F10  /\n    * /─────/       /─────/─────/─────/─────/─────/─────/─────/─────/─────/─────/\n    * ┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───────┐ ┌───┬───┬───┐\n    * │ ` │ 1 │ 2 │ 3 │ 4 │ 5 │ 6 │ 7 │ 8 │ 9 │ 0 │ - │ = │ Backsp│ │Ins│Hom│PgU│\n    * ├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─────┤ ├───┼───┼───┤\n    * │ Tab │ Q │ W │ E │ R │ T │ Y │ U │ I │ O │ P │ [ │ ] │  \\  │ │Del│End│PgD│\n    * ├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴─────┤ └───┴───┴───┘\n    * │ Caps │ A │ S │ D │ F │ G │ H │ J │ K │ L │ ; │ ' │  Enter │\n    * ├──────┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴────────┤     ┌───┐\n    * │ Shift  │ Z │ X │ C │ V │ B │ N │ M │ , │ . │ / │    Shift │     │ ↑ │\n    * ├────┬───┴┬──┴─┬─┴───┴───┴───┴───┴───┴──┬┴───┼───┴┬────┬────┤ ┌───┼───┼───┐\n    * │Ctrl│GUI │Alt │                        │ Alt│ Fn │Menu│Ctrl│ │ ← │ ↓ │ → │\n    * └────┴────┴────┴────────────────────────┴────┴────┴────┴────┘ └───┴───┴───┘\n*/\n```\n\n----------------------------------------\n\nTITLE: Setting AT32-DFU Bootloader in rules.mk (Make)\nDESCRIPTION: This code snippet configures the build system to use the AT32-DFU bootloader. This setting is necessary for AT32 microcontrollers to ensure compatibility with the AT32's built-in DFU bootloader.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/flashing.md#_snippet_17\n\nLANGUAGE: make\nCODE:\n```\n# Bootloader selection\nBOOTLOADER = at32-dfu\n```\n\n----------------------------------------\n\nTITLE: Building FaceW Firmware\nDESCRIPTION: This command builds the default firmware for the FaceW keyboard using the QMK build environment. It compiles the necessary source code and creates a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/facew/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake facew:default\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for DP3000 Macropad (QMK)\nDESCRIPTION: These commands build the QMK firmware for the DP3000 macropad. They specify the keyboard (dp3000), the revision (rev1 or rev2), and the keymap (default). The resulting firmware can then be flashed onto the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/dp3000/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake dp3000/rev1:default\n```\n\nLANGUAGE: shell\nCODE:\n```\nmake dp3000/rev2:default\n```\n\n----------------------------------------\n\nTITLE: Enabling ILI9341 Driver in rules.mk (Make)\nDESCRIPTION: This snippet demonstrates how to enable the ILI9341 display driver for Quantum Painter by adding the driver to the `QUANTUM_PAINTER_DRIVERS` variable in the `rules.mk` file. This step is necessary to include the driver in the build process. Dependencies include Quantum Painter being enabled.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/quantum_painter.md#_snippet_10\n\nLANGUAGE: make\nCODE:\n```\nQUANTUM_PAINTER_ENABLE = yes\nQUANTUM_PAINTER_DRIVERS += ili9341_spi\n```\n\n----------------------------------------\n\nTITLE: Writing Raw Byte to OLED (C)\nDESCRIPTION: This function writes a single byte directly into the OLED display buffer at the specified index. It takes the byte and the index as input.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/oled_driver.md#_snippet_25\n\nLANGUAGE: c\nCODE:\n```\n// Writes a single byte into the buffer at the specified index\nvoid oled_write_raw_byte(const char data, uint16_t index);\n```\n\n----------------------------------------\n\nTITLE: Building Crin Keyboard Firmware with Make\nDESCRIPTION: This command builds the Crin keyboard firmware with the default configuration using the `make` command. It requires a properly set up QMK build environment. The command targets the `cannonkeys/crin` keyboard with the `default` keymap. The output will be the compiled firmware ready to be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cannonkeys/crin/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake cannonkeys/crin:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Tau4 Keyboard Firmware\nDESCRIPTION: This command flashes the compiled firmware onto the Tau4 keyboard. It assumes that the keyboard is connected and in a flashable state. This step requires QMK environment to be setup correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/tau4/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake tau4:default:flash\n```\n\n----------------------------------------\n\nTITLE: Python Script for Polling Rate\nDESCRIPTION: Adds a simple Python script to display the polling rate of the keyboard. This script helps users to verify and monitor the keyboard's performance. It requires Python to be installed on the system.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/ChangeLog/20241124.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nSimple Python script to show polling rate\n```\n\n----------------------------------------\n\nTITLE: Building nknl7jp Keyboard Firmware with QMK\nDESCRIPTION: This command builds the default keymap for the nknl7jp keyboard using the QMK firmware. It assumes that the QMK build environment has already been set up. Replace 'default' with another keymap name if needed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/salicylic_acid3/nknl7jp/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake salicylic_acid3/nknl7jp:default\n```\n\n----------------------------------------\n\nTITLE: Making the HEX.4B keyboard firmware with QMK\nDESCRIPTION: This command builds the default firmware for the HEX.4B Rev.2 keyboard using the QMK build environment. It requires a properly configured QMK build environment and the necessary files for the HEX.4B keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechlovin/hex4b/rev2/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake mechlovin/hex4b/rev2:default\n```\n\n----------------------------------------\n\nTITLE: VS Code Launch Configuration for Black Magic Probe (JSON)\nDESCRIPTION: This JSON snippet configures the Cortex-Debug extension in VS Code to use a Black Magic Probe for debugging. It specifies the target executable, serial port, device, and other settings necessary to connect to and debug an ARM microcontroller. It requires the Cortex-Debug VS Code extension and assumes the Black Magic Probe is connected to the MCU.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/other_vscode.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  // Use IntelliSense to learn about possible attributes.\n  // Hover to view descriptions of existing attributes.\n  // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"name\": \"Black Magic Probe (OneKey Proton-C)\",\n      \"type\": \"cortex-debug\",\n      \"request\": \"launch\",\n      \"cwd\": \"${workspaceRoot}\",\n      \"executable\": \"${workspaceRoot}/.build/handwired_onekey_proton_c_default.elf\",\n      \"servertype\": \"bmp\",\n      \"BMPGDBSerialPort\": \"COM4\",\n      \"svdFile\": \"Q:\\\\svd\\\\STM32F303.svd\",\n      \"device\": \"STM32F303\",\n      \"v1\": false,\n      \"windows\": {\n        \"armToolchainPath\": \"C:\\\\QMK_MSYS\\\\mingw64\\\\bin\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Making UD40_Ortho_Alt Firmware\nDESCRIPTION: This command is used to build the default firmware for the UD40_Ortho_Alt keyboard within the QMK Firmware environment. It leverages the 'make' utility and specifies the keyboard and keymap to compile.  The command must be executed within a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/checkerboards/ud40_ortho_alt/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake checkerboards/ud40_ortho_alt:default\n```\n\n----------------------------------------\n\nTITLE: QMK Configurator Keymap - JSON\nDESCRIPTION: This JSON code represents a default keymap for the Hineybush H87a keyboard, compatible with the QMK Configurator.  It includes the keyboard name, keymap type (default), commit hash, layout macro, and the layer definitions.  The layer definitions consist of arrays of keycodes.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/configurator_default_keymaps.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"keyboard\": \"hineybush/h87a\",\n  \"keymap\": \"default\",\n  \"commit\": \"ef8878fba5d3786e3f9c66436da63a560cd36ac9\",\n  \"layout\": \"LAYOUT_all\",\n  \"layers\": [\n    [\n      \"KC_ESC\",             \"KC_F1\",   \"KC_F2\",   \"KC_F3\",   \"KC_F4\",   \"KC_F5\",   \"KC_F6\",   \"KC_F7\",   \"KC_F8\",   \"KC_F9\",   \"KC_F10\",  \"KC_F11\",  \"KC_F12\",                \"KC_PSCR\", \"KC_SCRL\", \"KC_PAUS\",\n      \"KC_GRV\",  \"KC_1\",    \"KC_2\",    \"KC_3\",    \"KC_4\",    \"KC_5\",    \"KC_6\",    \"KC_7\",    \"KC_8\",    \"KC_9\",    \"KC_0\",    \"KC_MINS\", \"KC_EQL\",  \"KC_BSPC\", \"KC_BSPC\",    \"KC_INS\",  \"KC_HOME\", \"KC_PGUP\",\n      \"KC_TAB\",  \"KC_Q\",    \"KC_W\",    \"KC_E\",    \"KC_R\",    \"KC_T\",    \"KC_Y\",    \"KC_U\",    \"KC_I\",    \"KC_O\",    \"KC_P\",    \"KC_LBRC\", \"KC_RBRC\", \"KC_BSLS\",               \"KC_DEL\",  \"KC_END\",  \"KC_PGDN\",\n      \"KC_CAPS\", \"KC_A\",    \"KC_S\",    \"KC_D\",    \"KC_F\",    \"KC_G\",    \"KC_H\",    \"KC_J\",    \"KC_K\",    \"KC_L\",    \"KC_SCLN\", \"KC_QUOT\", \"KC_NUHS\", \"KC_ENT\",\n      \"KC_LSFT\", \"KC_NUBS\", \"KC_Z\",    \"KC_X\",    \"KC_C\",    \"KC_V\",    \"KC_B\",    \"KC_N\",    \"KC_M\",    \"KC_COMM\", \"KC_DOT\",  \"KC_SLSH\", \"KC_RSFT\", \"KC_TRNS\",                          \"KC_UP\",\n      \"KC_LCTL\", \"KC_LGUI\", \"KC_LALT\",                                  \"KC_SPC\",                                   \"KC_RALT\", \"MO(1)\",   \"KC_RGUI\", \"KC_RCTL\",               \"KC_LEFT\", \"KC_DOWN\", \"KC_RGHT\"\n    ],\n    [\n      \"KC_TRNS\",            \"KC_TRNS\", \"KC_TRNS\", \"KC_TRNS\", \"KC_TRNS\", \"UG_TOGG\", \"UG_NEXT\", \"UG_HUED\", \"UG_HUEU\", \"UG_SATD\", \"UG_SATU\", \"UG_VALD\", \"UG_VALU\",               \"BL_TOGG\", \"BL_DOWN\", \"BL_UP\",\n      \"KC_TRNS\", \"KC_TRNS\", \"KC_TRNS\", \"KC_TRNS\", \"KC_TRNS\", \"KC_TRNS\", \"KC_TRNS\", \"KC_TRNS\", \"KC_TRNS\", \"KC_TRNS\", \"KC_TRNS\", \"KC_TRNS\", \"KC_TRNS\", \"KC_TRNS\", \"KC_TRNS\",    \"KC_TRNS\", \"KC_TRNS\", \"KC_VOLU\",\n      \"KC_TRNS\", \"KC_TRNS\", \"KC_TRNS\", \"KC_TRNS\", \"QK_BOOT\", \"KC_TRNS\", \"KC_TRNS\", \"KC_TRNS\", \"KC_TRNS\", \"KC_TRNS\", \"KC_TRNS\", \"KC_TRNS\", \"KC_TRNS\", \"KC_TRNS\",               \"KC_MPLY\", \"KC_MNXT\", \"KC_VOLD\",\n      \"KC_TRNS\", \"KC_TRNS\", \"KC_TRNS\", \"KC_TRNS\", \"KC_TRNS\", \"KC_TRNS\", \"KC_TRNS\", \"KC_TRNS\", \"KC_TRNS\", \"KC_TRNS\", \"KC_TRNS\", \"KC_TRNS\", \"KC_TRNS\", \"KC_TRNS\",\n      \"KC_TRNS\", \"KC_TRNS\", \"KC_TRNS\", \"KC_TRNS\", \"KC_TRNS\", \"KC_TRNS\", \"KC_TRNS\", \"KC_TRNS\", \"KC_TRNS\", \"KC_TRNS\", \"KC_TRNS\", \"KC_TRNS\", \"KC_TRNS\", \"KC_TRNS\",                          \"KC_TRNS\",\n      \"KC_TRNS\", \"KC_TRNS\", \"KC_TRNS\",                                  \"KC_TRNS\",                                  \"KC_TRNS\", \"KC_TRNS\", \"KC_TRNS\", \"KC_TRNS\",               \"KC_TRNS\", \"KC_TRNS\", \"KC_TRNS\"\n    ]\n  ]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Building Lightsaver V3 Firmware (Makefile)\nDESCRIPTION: This command builds the default firmware for the Duck Lightsaver V3 keyboard using the QMK build environment. It assumes that the build environment has been properly set up according to the QMK documentation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/duck/lightsaver/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake lightsaver:default\n```\n\n----------------------------------------\n\nTITLE: Building HAD60 Firmware (Makefile)\nDESCRIPTION: This command compiles the default keymap for the HAD60 keyboard using the QMK Firmware build environment. It requires the QMK build environment to be set up correctly. The output is the compiled firmware ready to be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/senselessclay/had60/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake senselessclay/had60:default\n```\n\n----------------------------------------\n\nTITLE: Flashing the Portal 66 Firmware\nDESCRIPTION: This command builds and flashes the default firmware for the Portal 66 keyboard with hotswap support. It requires a properly configured QMK build environment and a connected keyboard in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/portal_66/hotswap/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake portal_66/hotswap:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Unicorn Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the Unicorn keyboard. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keyprez/unicorn/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake keyprez/unicorn:default\n```\n\n----------------------------------------\n\nTITLE: GPIO Pad Assignments (GH60 Rev C)\nDESCRIPTION: This block shows the assignment of specific GPIO pads to various LEDs on the GH60 Rev C keyboard. This allows the firmware to control these LEDs.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/gh60/revc/readme.md#_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nGPIO pads\n 0 F7 WASD LEDs\n 1 F6 ESC LED\n 2 F5 FN LED\n 3 F4 POKER Arrow LEDs\n \n B2 Capslock LED\n B0 not connected\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware to Unicomp Spacesaver M\nDESCRIPTION: This command flashes the default firmware to the Unicomp Spacesaver M keyboard with the OverNumpad 1XB controller.  It requires a properly configured QMK build environment and a connected keyboard in bootloader mode.  This will overwrite the existing firmware on the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/unicomp/spacesaver_m_pre_2013/overnumpad_1xb/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake unicomp/spacesaver_m_pre_2013/overnumpad_1xb:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building PistachioPro Firmware (Makefile)\nDESCRIPTION: This command builds the default firmware for the PistachioPro keyboard using the QMK build environment. It assumes the build environment is already set up as per the QMK documentation. The output will be a .hex or .bin file suitable for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/rate/pistachio_pro/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake rate/pistachio_pro:default\n```\n\n----------------------------------------\n\nTITLE: Register UCIS Code Point - C\nDESCRIPTION: This function sends the code point(s) for the given UCIS (Unicode Composing Input Sequence) index.  It requires the index to a UCIS symbol table.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/unicode.md#_snippet_30\n\nLANGUAGE: C\nCODE:\n```\nvoid register_ucis(void)\n```\n\n----------------------------------------\n\nTITLE: Flush Programmable Button Report in QMK\nDESCRIPTION: This C function sends the current programmable button report to the host. This is necessary for the host to receive updates to the button states.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/programmable_button.md#_snippet_7\n\nLANGUAGE: c\nCODE:\n```\nvoid programmable_button_flush(void)\n```\n\n----------------------------------------\n\nTITLE: De-Ghosting Configuration (C)\nDESCRIPTION: This C code snippet demonstrates how to configure the pulldown and pullup resistor values for de-ghosting on the `SWy` and `CSx` pins of the IS31FL3742A.  These settings help eliminate ghosting effects in the LED matrix by adjusting the resistance on specific pins.  Refer to the datasheet for details on ghosting and resistor selection.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/is31fl3742a.md#_snippet_2\n\nLANGUAGE: c\nCODE:\n```\n#define IS31FL3742A_SW_PULLDOWN IS31FL3742A_PDR_8K_OHM\n#define IS31FL3742A_CS_PULLUP IS31FL3742A_PUR_8K_OHM\n```\n\n----------------------------------------\n\nTITLE: Flashing Vault45 Keyboard Firmware (Makefile)\nDESCRIPTION: This command flashes the built firmware to the Vault45 keyboard. It uses the QMK make system to compile and flash the firmware for the 'projectcain/vault45' keyboard with the 'default' keymap. It assumes the keyboard is in a flashable state.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/projectcain/vault45/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake projectcain/vault45:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Wete V2 Firmware\nDESCRIPTION: This command builds the default firmware for the Wete V2 keyboard using the QMK build environment. It compiles the keyboard layout and generates the firmware file ready to be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/rmi_kb/wete/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake rmi_kb/wete/v2:default\n```\n\n----------------------------------------\n\nTITLE: Defining Keymap Layout\nDESCRIPTION: This snippet defines the `LAYOUT_numpad_5x6` macro.  The purpose is to configure the physical arrangement of keys in a 5x6 numpad keyboard matrix. The actual macro definition resides elsewhere within the QMK firmware project.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/layouts/default/numpad_5x6/readme.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n# numpad_5x6\n\n    LAYOUT_numpad_5x6\n```\n\n----------------------------------------\n\nTITLE: Building the keyboard firmware\nDESCRIPTION: This command builds the QMK firmware for the ppr.merro60 keyboard with the default keymap. It uses the `make` command, which is part of the QMK build environment. Before running this command, ensure the QMK build environment is properly set up according to the QMK documentation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/chlx/ppr_merro60/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake chlx/ppr_merro60:default\n```\n\n----------------------------------------\n\nTITLE: Defining Keyboard Layout: fullsize_extended_ansi\nDESCRIPTION: This snippet defines a keyboard layout named `LAYOUT_fullsize_extended_ansi`. This layout is likely used within the QMK firmware to map keycodes to specific physical key positions on the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/layouts/community/fullsize_extended_ansi/readme.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nLAYOUT_fullsize_extended_ansi\n```\n\n----------------------------------------\n\nTITLE: Flashing Budgy Keyboard Firmware\nDESCRIPTION: This command builds and flashes the default firmware for the Budgy keyboard. It requires a configured build environment and a connected keyboard in a flashable state.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/budgy/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake budgy:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building the Ruler PCB Firmware - QMK\nDESCRIPTION: This command builds the default firmware for the Ruler PCB keyboard using the QMK build environment. It assumes the QMK build environment is already set up and configured correctly. The output will be a firmware file suitable for flashing onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/maple_computing/the_ruler/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake maple_computing/the_ruler:default\n```\n\n----------------------------------------\n\nTITLE: Building hannah910 QMK Firmware\nDESCRIPTION: This command builds the default firmware for the hannah910 keyboard revision 1 using the QMK build environment. It assumes that the QMK build environment is set up correctly. The command compiles the keymap and generates a firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechlovin/hannah910/rev1/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake mechlovin/hannah910/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Building TENKI Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the TENKI numpad using the QMK build environment.  It assumes that the QMK build environment has been properly set up.  The resulting firmware can then be flashed to the TENKI numpad.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/tenki/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake tenki:default\n```\n\n----------------------------------------\n\nTITLE: Flashing QMK Firmware to ANAVI MacroPad8\nDESCRIPTION: This command flashes the compiled QMK firmware to the ANAVI MacroPad8 keyboard. It uses the QMK command-line interface and requires the keyboard to be connected to the computer. The process overwrites the existing firmware with the newly compiled one.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/anavi/macropad8/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nqmk flash -kb anavi/macropad8 -km default\n```\n\n----------------------------------------\n\nTITLE: Building Keycult 65 Firmware\nDESCRIPTION: This command builds the Keycult 65 firmware with the default keymap. It assumes the QMK build environment is properly set up. Refer to the QMK documentation for build environment setup and make instructions.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keycult/keycult65/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake keycult/keycult65:default\n```\n\n----------------------------------------\n\nTITLE: Building ELISE keyboard firmware with Make\nDESCRIPTION: This command builds the default firmware for the ELISE keyboard using the QMK Make build system. It targets the 'draytronics/elise' keyboard and the 'default' keymap. This requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/draytronics/elise/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake draytronics/elise:default\n```\n\n----------------------------------------\n\nTITLE: Building K34 Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the K34 keyboard using the QMK build environment. It requires the QMK build environment to be properly set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/k34/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake k34:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Keyboard Firmware with QMK\nDESCRIPTION: This command flashes the compiled firmware onto the handwired Tractyl Manuform 5x6 right-hand version with the default keymap using the QMK build environment. This step programs the microcontroller with the keyboard's functionality.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/tractyl_manuform/5x6_right/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/tractyl_manuform/5x6_right:default:flash\n```\n\n----------------------------------------\n\nTITLE: Compiling LumPy27 Keyboard Firmware with QMK\nDESCRIPTION: This command compiles the QMK firmware for the LumPy27 keyboard using the specified keyboard and keymap.  It requires a properly set up QMK build environment. The command outputs the compiled firmware file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/djreisch/lumpy27/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nqmk compile -kb djreisch/lumpy27 -km default\n```\n\n----------------------------------------\n\nTITLE: Building Ortho60 v2 Firmware using Make\nDESCRIPTION: This snippet shows how to build the default firmware for the Ortho60 v2 keyboard using the QMK Make command. It assumes that the QMK build environment has already been set up. The output will be a .hex or .bin file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cannonkeys/ortho60v2/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake cannonkeys/ortho60v2:default\n```\n\n----------------------------------------\n\nTITLE: Defining TKL ANSI Split BS RShift Layout\nDESCRIPTION: This snippet defines a TKL ANSI layout with split backspace and split right shift keys, represented using ASCII art. This allows users to visualize the uncommon layout for customized QMK keymaps. This has no dependencies other than the knowledge of standard keyboard physical arrangements.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/layouts/default/readme.md#_snippet_16\n\nLANGUAGE: text\nCODE:\n```\n┌───┐   ┌───┬───┬───┬───┐ ┌───┬───┬───┬───┐ ┌───┬───┬───┬───┐ ┌───┬───┬───┐\n│   │   │   │   │   │   │ │   │   │   │   │ │   │   │   │   │ │   │   │   │\n└───┘   └───┴───┴───┴───┘ └───┴───┴───┴───┘ └───┴───┴───┴───┘ └───┴───┴───┘\n┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┐ ┌───┬───┬───┐\n│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │ │   │   │   │\n├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴───┤ ├───┼───┼───┤\n│     │   │   │   │   │   │   │   │   │   │   │   │   │     │ │   │   │   │\n├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴─────┤ └───┴───┴───┘\n│      │   │   │   │   │   │   │   │   │   │   │   │        │\n├──────┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴────┬───┤     ┌───┐\n│        │   │   │   │   │   │   │   │   │   │   │      │   │     │   │\n├────┬───┴┬──┴─┬─┴───┴───┴───┴───┴───┴──┬┴───┼───┴┬────┬┴───┤ ┌───┼───┼───┐\n│    │    │    │                        │    │    │    │    │ │   │   │   │\n└────┴────┴────┴────────────────────────┴────┴────┴────┴────┘ └───┴───┴───┘\n```\n\n----------------------------------------\n\nTITLE: Building and Flashing Obelus Firmware with QMK and DFU\nDESCRIPTION: This command compiles the QMK firmware for the Obelus keyboard using the default keymap, and then flashes it to the keyboard using the DFU bootloader. It requires the QMK build environment and a DFU-compatible bootloader on the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ckeys/obelus/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake ckeys/obelus:default:dfu\n```\n\n----------------------------------------\n\nTITLE: Building Borsdorf keyboard firmware with QMK\nDESCRIPTION: This command builds the default keymap for the Borsdorf keyboard using the QMK firmware. It assumes that the QMK build environment is already set up.  It compiles the firmware and prepares it for flashing onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cutie_club/borsdorf/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake cutie_club/borsdorf:default\n```\n\n----------------------------------------\n\nTITLE: Get Display Height (C)\nDESCRIPTION: This snippet defines the `qp_get_height` function, which returns the height of the display in pixels.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/quantum_painter.md#_snippet_79\n\nLANGUAGE: c\nCODE:\n```\nuint16_t qp_get_height(painter_device_t device);\n```\n\n----------------------------------------\n\nTITLE: Entering Reset Mode on Duck Octagon V2\nDESCRIPTION: This describes how to put the Duck Octagon V2 into reset mode. By holding the top right key while plugging in, the keyboard will enter reset mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/duck/octagon/v2/readme.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nTo put the Octagon V2 into reset, hold the top right most key (`K5Q`) while plugging in.\n```\n\n----------------------------------------\n\nTITLE: Building falsonix/fx19 Firmware with QMK\nDESCRIPTION: This command builds the default keymap for the falsonix/fx19 keyboard using the QMK build environment. It requires QMK to be properly set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/falsonix/fx19/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake falsonix/fx19:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Aves60 Firmware\nDESCRIPTION: This command builds and flashes the default firmware to the Aves60 keyboard. It assumes a properly configured QMK build environment and a connected keyboard. Requires a flashing tool like QMK Toolbox or dfu-util.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/aves60/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake aves60:default:flash\n```\n\n----------------------------------------\n\nTITLE: Making the 5x5 Macropad with QMK\nDESCRIPTION: This command builds the default configuration for the 5x5 macropad. It uses the QMK make system to compile the firmware for the handwired m40 5x5_macropad keyboard with the default keymap.  Ensure the QMK build environment is set up before executing this command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/m40/5x5_macropad/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake handwired/m40/5x5_macropad:default\n```\n\n----------------------------------------\n\nTITLE: Building Dilly Keyboard Firmware\nDESCRIPTION: This command compiles the default firmware for the Dilly keyboard.  It assumes that the QMK build environment is already set up. It uses the keebio/dilly definition and the default keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keebio/dilly/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake keebio/dilly:default\n```\n\n----------------------------------------\n\nTITLE: FR4Boards unix60 Keyboard Matrix Diagram\nDESCRIPTION: This snippet is a visual representation of the key matrix layout for the FR4Boards unix60 keyboard. It maps each key to its row and column coordinates within the matrix. Special keys like 2u Backspace, ISO Enter, LShift, and RShift are also indicated with their sizes and positions.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/fr4/unix60/matrix_diagram.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┐\n│00 │01 │02 │03 │04 │05 │06 │07 │08 │10 │11 │12 │13 │14 │16 │\n├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴───┤\n│17   │18 │20 │21 │22 │23 │24 │25 │26 │27 │28 │30 │31 │32   │\n├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴─────┤\n│33    │34 │35 │36 │37 │38 │40 │41 │42 │43 │44 │45 │47      │\n├────┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴────┬───┤\n│48  │50 │51 │52 │53 │54 │55 │56 │57 │58 │60 │61 │62    │63 │\n└────┴┬──┴┬──┴──┬┴───┴───┴───┴───┴───┴───┴──┬┴───┴┬───┬─┴───┘\n      │64 │65   │66                         │67   │68 │\n      └───┴─────┴───────────────────────────┴─────┴───┘\n                                                    ┌───────┐\n                                       2u Backspace │15     │\n                                                    └─┬─────┤\n                                                      │     │\n                                         ISO Enter ┌──┴┐47  │\n                                                   │46 │    │\n┌────────┐                                       ┌─┴───┴────┤\n│48      │ 2.25u LShift             2.75u RShift │62        │\n└────────┘                                       └──────────┘\n```\n\n----------------------------------------\n\nTITLE: Building Keychron V4 Firmware\nDESCRIPTION: This command builds the default ANSI layout firmware for the Keychron V4 keyboard. It requires the QMK build environment to be set up correctly. The output will be a .hex or .bin file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keychron/v4/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake keychron/v4/ansi:default\n```\n\n----------------------------------------\n\nTITLE: Flashing TKC Portico Firmware with QMK\nDESCRIPTION: This command flashes the built firmware onto the TKC Portico keyboard using the QMK build environment. It requires the keyboard to be connected and in bootloader mode. The bootloader can be entered by holding down the Esc key while plugging in the USB-C cable.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/tkc/portico/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake tkc/portico:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flush Scaling Register Values\nDESCRIPTION: Flushes the scaling register values to the IS31FL3745 LED driver. Requires the driver index as input.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/is31fl3745.md#_snippet_10\n\nLANGUAGE: c\nCODE:\n```\nvoid is31fl3745_update_scaling_registers(uint8_t index)\n```\n\n----------------------------------------\n\nTITLE: Enabling Split Transport Mirror in QMK\nDESCRIPTION: This macro mirrors the master-side matrix on the slave when using the QMK-provided split transport. This enables the slave to have a copy of the master's key matrix data.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/config_options.md#_snippet_104\n\nLANGUAGE: c\nCODE:\n```\n#define SPLIT_TRANSPORT_MIRROR\n```\n\n----------------------------------------\n\nTITLE: Compiling KBD67 Rev1 Firmware with QMK\nDESCRIPTION: This command compiles the default firmware for the KBD67 Rev1 keyboard using the QMK build system. It requires the QMK build environment to be properly set up. The compiled firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kbdfans/kbd67/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake kbdfans/kbd67/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Defining keyboard layout: tkl_f13_iso_split_bs_rshift\nDESCRIPTION: This code snippet defines a keyboard layout macro named `LAYOUT_tkl_f13_iso_split_bs_rshift`. This layout likely represents a Tenkeyless (TKL) keyboard with an F13 key, ISO enter key, split backspace, and split right shift keys. It is intended for use with QMK firmware to define key mappings and physical arrangements.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/layouts/community/tkl_f13_iso_split_bs_rshift/readme.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nLAYOUT_tkl_f13_iso_split_bs_rshift\n```\n\n----------------------------------------\n\nTITLE: Building 6key Firmware with Make\nDESCRIPTION: This command builds the default firmware for the 6key macropad. It requires the QMK build environment to be set up beforehand. The command compiles the keyboard layout and generates the firmware for flashing onto the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/6key/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/6key:default\n```\n\n----------------------------------------\n\nTITLE: Flashing E6-V2 OE_BMC Firmware with QMK\nDESCRIPTION: This command flashes the built firmware onto the E6-V2 OE_BMC keyboard using the QMK build environment. It assumes that the QMK build environment is properly configured for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/exclusive/e6v2/oe_bmc/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake exclusive/e6v2/oe_bmc:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building KBD4x Keyboard Firmware with Make\nDESCRIPTION: This command builds the default firmware for the KBD4x keyboard using the QMK build environment.  It requires the QMK build environment to be properly set up. The resulting firmware can then be flashed to the KBD4x keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kbdfans/kbd4x/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake kbdfans/kbd4x:default\n```\n\n----------------------------------------\n\nTITLE: Building Wabi Keyboard Firmware - QMK\nDESCRIPTION: This command builds the QMK firmware for the Wabi keyboard with the default keymap. It assumes that the QMK build environment has already been set up according to the QMK documentation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/wabi/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake handwired/wabi:default\n```\n\n----------------------------------------\n\nTITLE: h88 Row Pin Configuration - C\nDESCRIPTION: This code defines the row pin configuration for the h88 keyboard matrix. Each row is assigned to a specific pin on the microcontroller. This configuration, along with the column pin configuration, allows the keyboard to accurately detect key presses using a matrix scanning method.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/hineybush/h88/readme.md#_snippet_2\n\nLANGUAGE: C\nCODE:\n```\n/* Row pin configuration\n * row: 0   1   2   3   4   5   6   7   8   9   10  11\n * pin: B0  B1  B2  B3  D0  D1  B5  B6  D7  B4  D6  D4  (Rev 1)\n */\n```\n\n----------------------------------------\n\nTITLE: x3270 Keymap Override\nDESCRIPTION: This code snippet shows how to override the default keymap for x3270 to enable 'Dup' and 'FieldMark' functions.  It involves adding custom mappings in the `.x3270pro` file, specifically mapping Ctrl+F to FieldMark() and Ctrl+D to Dup().  The x3270 application must be started with `-keymap m122` to use these custom mappings.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ibm/model_m_122/m122_3270/keymaps/default/readme.md#_snippet_0\n\nLANGUAGE: x3270\nCODE:\n```\nx3270.keymap.m122: #override \\\n Ctrl<Key>F: FieldMark()\\n\\\n Ctrl<Key>D: Dup()\n```\n\n----------------------------------------\n\nTITLE: Building Fruitbar R2 Firmware - QMK\nDESCRIPTION: This command builds the default firmware for the Fruitbar R2 keyboard. It uses the QMK build environment to compile the firmware using the default keymap configuration.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/fruitykeeb/fruitbar/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake fruitykeeb/fruitbar/r2:default\n```\n\n----------------------------------------\n\nTITLE: Building DOIO Knob 12% Keyboard Firmware\nDESCRIPTION: This command builds the default keymap for the DOIO Knob 12% keyboard using the QMK build environment. It assumes that the QMK build environment has been properly set up according to the QMK documentation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/doio/kb12/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake doio/kb12:default\n```\n\n----------------------------------------\n\nTITLE: Flashing stello65 firmware with QMK\nDESCRIPTION: This command builds and flashes the default firmware for the stello65/beta keyboard to the keyboard's microcontroller using QMK. Ensure the keyboard is in bootloader mode before running this command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/stello65/beta/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake stello65/beta:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Cycle8 Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the Cycle8 keyboard using the QMK build environment. It requires the QMK build environment to be set up correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/vertex/cycle8/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake vertex/cycle8:default\n```\n\n----------------------------------------\n\nTITLE: Disabling Printing/Debugging in QMK config.h\nDESCRIPTION: This code snippet disables printing/debugging using hid_listen in QMK firmware, potentially reducing code size. This setting is configured in the `config.h` file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/config_options.md#_snippet_34\n\nLANGUAGE: c\nCODE:\n```\n#define NO_PRINT\n```\n\n----------------------------------------\n\nTITLE: Building HHKB/JP Keyboard Firmware with QMK\nDESCRIPTION: This command is used to compile the firmware for the HHKB/JP keyboard with the default keymap using the QMK build environment. Ensure that the QMK build environment is properly set up before executing this command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/hhkb/jp/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake hhkb/jp:default\n```\n\n----------------------------------------\n\nTITLE: Enabling LVGL in rules.mk (Make)\nDESCRIPTION: This code snippet shows how to enable LVGL integration in the `rules.mk` file for your QMK firmware. It requires setting `QUANTUM_PAINTER_ENABLE`, `QUANTUM_PAINTER_DRIVERS`, and `QUANTUM_PAINTER_LVGL_INTEGRATION` variables to `yes`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/quantum_painter_lvgl.md#_snippet_0\n\nLANGUAGE: Make\nCODE:\n```\nQUANTUM_PAINTER_ENABLE = yes\nQUANTUM_PAINTER_DRIVERS = ......\nQUANTUM_PAINTER_LVGL_INTEGRATION = yes\n```\n\n----------------------------------------\n\nTITLE: Flashing Orthograph Keyboard Firmware (QMK)\nDESCRIPTION: This command flashes the compiled firmware onto the Orthograph keyboard using the QMK firmware flashing tool. It also requires flashing the EEPROM with handedness information (left/right) on both sides after flashing the firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/orthograph/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nqmk flash -kb orthograph -km default\n```\n\n----------------------------------------\n\nTITLE: Building ZJ68 Keyboard Firmware with QMK\nDESCRIPTION: This snippet provides the command to compile the default keymap for the ZJ68 keyboard using the QMK firmware. It assumes that the user has already set up their build environment as described in the QMK documentation. The output will be a firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/zj68/readme.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmake zj68:default\n```\n\n----------------------------------------\n\nTITLE: Compiling Delilah Keyboard Firmware with QMK\nDESCRIPTION: This command compiles the QMK firmware for the Delilah keyboard with the default keymap. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/rainkeebs/delilah/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nqmk compile -kb rainkeebs/delilah -km default\n```\n\n----------------------------------------\n\nTITLE: Flashing POS78 Default Keymap - QMK\nDESCRIPTION: This command builds and flashes the default keymap for the POS78 keyboard to the connected device using the QMK build environment.  It depends on a properly setup QMK environment with flashing tools and a connected, flashable POS78 keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/pos78/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake pos78:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing JK60 RGB Keyboard Firmware\nDESCRIPTION: This command builds and flashes the default firmware for the jaykeeb/jk60rgb keyboard to the connected device. This requires QMK build environment to be set up and the device to be in bootloader mode. This command will program the compiled firmware to the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/jaykeeb/jk60rgb/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake jaykeeb/jk60rgb:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Infinity Chibios Keyboard\nDESCRIPTION: Navigates to the keyboard directory `keyboard/infinity_chibios` within the TMK keyboard repository and executes the `make` command. This compiles the firmware for the Infinity keyboard using the ChibiOS port.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/input_club/ergodox_infinity/MEMO.txt#_snippet_2\n\nLANGUAGE: Makefile\nCODE:\n```\n$ cd tmk_keyboard/keyboard/infinity_chibios\n$ make\n```\n\n----------------------------------------\n\nTITLE: Building Chalice Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the Chalice keyboard. It requires the QMK build environment to be set up correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/chalice/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake chalice:default\n```\n\n----------------------------------------\n\nTITLE: Building Keyboard Firmware with Make\nDESCRIPTION: This command builds the firmware for the Phoenix Project No 1 keyboard with the default keymap. It requires a properly configured QMK build environment. The output will be a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/rico/phoenix_project_no1/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake rico/phoenix_project_no1:default\n```\n\n----------------------------------------\n\nTITLE: Compiling Orthograph Keyboard Firmware (QMK)\nDESCRIPTION: This command compiles the default keymap for the Orthograph keyboard using the QMK firmware build environment. It assumes that the QMK build environment has been set up correctly. The output will be the firmware file to be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/orthograph/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nqmk compile -kb orthograph -km default\n```\n\n----------------------------------------\n\nTITLE: Flashing right ErgoDox Infinity half with dfu-util\nDESCRIPTION: This command builds and flashes the firmware to the right half of the ErgoDox Infinity keyboard using the dfu-util programmer. The MASTER=right flag specifies that this is the right half.  It assumes the keyboard is already in DFU mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/input_club/ergodox_infinity/keymaps/input_club/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake ergodox_infinity:input_club:dfu-util MASTER=right\n```\n\n----------------------------------------\n\nTITLE: Building JC65 v32a Firmware with QMK\nDESCRIPTION: This command builds the firmware for the JC65 keyboard with the v32a PCB revision using the default keymap. It assumes that the QMK build environment has already been set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/jc65/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake jc65/v32a:default\n```\n\n----------------------------------------\n\nTITLE: Building the Pain27v2 Keyboard Firmware\nDESCRIPTION: This snippet demonstrates how to build the firmware for the Pain27v2 keyboard using the QMK build environment. It requires the QMK build environment to be set up correctly. The command will compile the 'default' keymap for the 'wsk/pain27' keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wsk/pain27/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake wsk/pain27:default\n```\n\n----------------------------------------\n\nTITLE: Xelus Kangaroo Matrix Diagram\nDESCRIPTION: This diagram represents the key matrix for the Xelus Kangaroo keyboard (Rev 1.0 and 2.0). Each cell indicates the row and column assignment for a specific key. The diagram also highlights the positions of specific keys like the 2u Backspace and Numpad Zero, as well as the 2.75 RShift key.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/xelus/kangaroo/matrix_diagram.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n        ┌───┬───┬───┬───┐┌───┬───┬───┐┌───┐   ┌───┬───┬───┬───┐ ┌───┬───┬───┬───┐ ┌───┬───┬───┬───┐\n        │00 │10 │01 │11 ││02 │12 │03 ││13 │   │04 │14 │05 │15 │ │06 │16 │07 │17 │ │08 │18 │09 │19 │\n        └───┴───┴───┴───┘└───┴───┴───┘└───┘   └───┴───┴───┴───┘ └───┴───┴───┴───┘ └───┴───┴───┴───┘\n        ┌───┬───┬───┬───┐┌───┬───┬───┐┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┐   ┌───────┐\n        │20 │30 │21 │31 ││22 │32 │23 ││33 │24 │34 │25 │35 │26 │36 │27 │37 │28 │38 │29 │39 │2A │0A │   │2A     │\n┌───┐   ├───┼───┼───┼───┤├───┼───┼───┤├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴───┤   └───────┘\n│   │   │40 │50 │41 │51 ││42 │52 │43 ││53   │44 │54 │45 │55 │46 │56 │47 │57 │48 │58 │49 │59 │4A   │    2u Backspace\n│60 │   ├───┼───┼───┼───┤└───┴───┴───┘├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴─────┤\n│   │   │60 │70 │61 │71 │             │73    │64 │74 │65 │75 │66 │76 │67 │77 │68 │78 │69 │79      │\n├───┤   ├───┼───┼───┼───┤    ┌───┐    ├──────┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴────┬───┤\n│   │   │80 │90 │81 │91 │    │92 │    │93      │84 │94 │85 │95 │86 │96 │87 │97 │88 │98 │89    │99 │\n│A0 │   ├───┼───┼───┼───┤┌───┼───┼───┐├────┬───┴┬──┴─┬─┴───┴───┴───┴───┴───┴──┬┴───┼───┴┬────┬┴───┤\n│   │   │A0 │B0 │A1 │B1 ││A2 │B2 │A3 ││B3  │A4  │B4  │B6                      │A8  │B8  │A9  │B9  │\n└───┘   └───┴───┴───┴───┘└───┴───┴───┘└────┴────┴────┴────────────────────────┴────┴────┴────┴────┘\n                ┌───────┐                                                              ┌──────────┐\n                │B1     │ 2u Numpad Zero                                   2.75 RShift │89        │\n                └───────┘                                                              └──────────┘\n                                      ┌─────┬───┬─────┬───────────────────────────┬─────┬───┬─────┐\n                                      │B3   │A4 │B4   │B6                         │B8   │A9 │B9   │ Tsangan/WKL\n                                      └─────┴───┴─────┴───────────────────────────┴─────┴───┴─────┘\n```\n\n----------------------------------------\n\nTITLE: Building Adam64 Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the KBDCraft Adam64 keyboard using the QMK build environment.  It assumes the QMK build environment is already set up according to the QMK documentation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kbdcraft/adam64/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake kbdcraft/adam64:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Vertex Keyboard Firmware\nDESCRIPTION: This command flashes the built firmware onto the Vertex keyboard. It depends on the QMK build environment being set up and the firmware being successfully built. The target device should be in a flashable state, potentially requiring bootloader activation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kb_elmo/vertex/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake kb_elmo/vertex:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Valor Rev 2 Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Valor Rev 2 keyboard using the QMK build environment. It assumes that the QMK build environment has already been set up. The resulting firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/xelus/valor/rev2/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake xelus/valor/rev2:default\n```\n\n----------------------------------------\n\nTITLE: Building ErgoDash Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the ErgoDash Rev1 keyboard. It requires the QMK build environment to be set up. The resulting firmware can then be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/omkbd/ergodash/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake omkbd/ergodash/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Flashing RM Fullsize Keyboard Firmware\nDESCRIPTION: This command flashes the built firmware to the RM Fullsize keyboard. It requires a properly configured QMK build environment and a connected keyboard in bootloader mode.  The `make` command is used with the keyboard, keymap, and flash target specified.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/rmkeebs/rm_fullsize/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake rmkeebs/rm_fullsize:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building transition80 Keyboard Firmware with QMK\nDESCRIPTION: This command builds the QMK firmware for the yandrstudio/transition80 keyboard with the default keymap. It assumes that the QMK build environment has already been set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/yandrstudio/transition80/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake yandrstudio/transition80:default\n```\n\n----------------------------------------\n\nTITLE: Building Plaid Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the Plaid keyboard. It compiles the source code and prepares the firmware for flashing onto the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/dm9records/plaid/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake dm9records/plaid:default\n```\n\n----------------------------------------\n\nTITLE: Building the phantagom/varan Keyboard\nDESCRIPTION: This snippet provides the command to build the default keymap for the phantagom/varan keyboard using the QMK build environment. It assumes that the QMK build environment has already been set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/phantagom/varan/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake phantagom/varan:default\n```\n\n----------------------------------------\n\nTITLE: Building Taleguers75 Firmware - Makefile\nDESCRIPTION: This command is used to build the default firmware for the Taleguers75 keyboard using the QMK build environment. It assumes that the QMK build environment has been properly set up according to the QMK documentation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/taleguers/taleguers75/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake taleguers/taleguers75:default\n```\n\n----------------------------------------\n\nTITLE: Building QMK Firmware for Durgod Hades ANSI\nDESCRIPTION: This command builds the QMK firmware for the Durgod Hades 65% ANSI keyboard with the default keymap. It requires a properly configured QMK build environment. The output is a firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/durgod/dgk6x/hades_ansi/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake durgod/dgk6x/hades_ansi:default\n```\n\n----------------------------------------\n\nTITLE: Building IDOBAO ID80 v2 ANSI default keymap\nDESCRIPTION: This command compiles the default keymap for the ANSI version of the IDOBAO ID80 v2 keyboard. It requires a properly set up QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/idobao/id80/v2/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake idobao/id80/v2/ansi:default\n```\n\n----------------------------------------\n\nTITLE: Building Sam S80 Keyboard Firmware - make command\nDESCRIPTION: This command builds the default firmware for the Sam S80 keyboard. It assumes that the QMK build environment has already been set up.  Executing this will compile the firmware, which can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/sam/s80/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake sam/s80:default\n```\n\n----------------------------------------\n\nTITLE: Building ScottoSplit Firmware\nDESCRIPTION: Builds the default firmware for the ScottoSplit keyboard. Requires a properly configured QMK build environment. The resulting firmware can then be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/scottokeebs/scottosplit/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/jscotto/scottosplit:default\n```\n\n----------------------------------------\n\nTITLE: Making Junco Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the Junco keyboard. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/junco/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake junco:default\n```\n\n----------------------------------------\n\nTITLE: Building Pteron Keyboard Firmware\nDESCRIPTION: This command builds the default keymap for the Pteron keyboard using the QMK firmware. It assumes the keyboard is handwired and that the QMK build environment is already set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/pteron/readme.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmake handwired/pteron:default\n```\n\n----------------------------------------\n\nTITLE: Building QMK Firmware for Mode M65S\nDESCRIPTION: This command is used to build the QMK firmware for the Mode SixtyFive M65S keyboard with the default keymap. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mode/m65s/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake mode/m65s:default\n```\n\n----------------------------------------\n\nTITLE: Building EC1-AT Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the EC1-AT keyboard using the QMK build environment. It compiles the keyboard layout and generates the firmware file for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cipulot/ec1_at/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake cipulot/ec1_at:default\n```\n\n----------------------------------------\n\nTITLE: Building treadstone32 firmware using make - QMK\nDESCRIPTION: This snippet demonstrates how to build the firmware for the treadstone32 keyboard using the QMK build environment. It utilizes the `make` command with the keyboard name and keymap specified as arguments. Two examples are provided: one for the standard version and one for the 'lite' version.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/marksard/treadstone32/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake marksard/treadstone32:default\n```\n\nLANGUAGE: Shell\nCODE:\n```\nmake marksard/treadstone32/lite:default\n```\n\n----------------------------------------\n\nTITLE: Building QMK Firmware for skmt/15k\nDESCRIPTION: This command builds the default keymap for the skmt/15k macropad. It requires a properly set up QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/skmt/15k/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake skmt/15k:default\n```\n\n----------------------------------------\n\nTITLE: Building Tenstad Keyboard Firmware\nDESCRIPTION: This command is used to build the default firmware for the Tenstad keyboard within the QMK firmware environment.  It requires a properly configured QMK build environment. The output will be the firmware binary file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/tenstad/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/tenstad:default\n```\n\n----------------------------------------\n\nTITLE: Building h60 default keymap\nDESCRIPTION: Builds the default keymap for the h60 keyboard using the QMK firmware. This command needs to be executed within a properly set up QMK build environment. It compiles the firmware for the hineybush/h60 keyboard with the default keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/hineybush/h60/readme.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmake hineybush/h60:default\n```\n\n----------------------------------------\n\nTITLE: 60% ANSI Split BS RShift Layout Diagram\nDESCRIPTION: This is an ASCII diagram of a 60% ANSI keyboard layout with both a split backspace and a split right shift key. It visualizes a more customized key arrangement for improved ergonomics. The diagram portrays the key placement.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/layouts/default/readme.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┐\n│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │\n├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴───┤\n│     │   │   │   │   │   │   │   │   │   │   │   │   │     │\n├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴─────┤\n│      │   │   │   │   │   │   │   │   │   │   │   │        │\n├──────┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴────┬───┤\n│        │   │   │   │   │   │   │   │   │   │   │      │   │\n├────┬───┴┬──┴─┬─┴───┴───┴───┴───┴───┴──┬┴───┼───┴┬────┬┴───┤\n│    │    │    │                        │    │    │    │    │\n└────┴────┴────┴────────────────────────┴────┴────┴────┴────┘\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for Mont Cervin Klein - QMK\nDESCRIPTION: This command builds the default firmware for the Mont Cervin Klein keyboard.  It requires a configured QMK build environment. It outputs the compiled firmware ready for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/era/sirind/klein_sd/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake era/sirind/klein_sd:default\n```\n\n----------------------------------------\n\nTITLE: Building Polaris Firmware with Make\nDESCRIPTION: This command builds the default firmware for the Polaris keyboard using the QMK build environment. It assumes that the QMK build environment is already set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wekey/polaris/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake polaris:default\n```\n\n----------------------------------------\n\nTITLE: Defining QMK keyboard layout: 60_iso_arrow_split_bs\nDESCRIPTION: This snippet defines a QMK keyboard layout using the LAYOUT_60_iso_arrow_split_bs macro.  It's intended to be included within a QMK keymap file to define the physical arrangement of keys on a 60% ISO keyboard with dedicated arrow keys and a split backspace.  No direct dependencies beyond the QMK firmware itself.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/layouts/community/60_iso_arrow_split_bs/readme.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nLAYOUT_60_iso_arrow_split_bs\n```\n\n----------------------------------------\n\nTITLE: Defining 60% ANSI Split Backspace Right Shift Layout\nDESCRIPTION: This snippet defines the keyboard layout `LAYOUT_60_ansi_split_bs_rshift`. It's used to configure a 60% ANSI keyboard with split backspace and right shift keys, potentially utilizing QMK's layout macros. The exact key mappings are not visible in the snippet itself, but are assumed to be defined elsewhere within the QMK firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/layouts/community/60_ansi_split_bs_rshift/readme.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nLAYOUT_60_ansi_split_bs_rshift\n```\n\n----------------------------------------\n\nTITLE: Building Space_Space Keyboard Firmware\nDESCRIPTION: This command compiles the QMK firmware for the Space_Space keyboard, specifically for the rev2 version with the default keymap. It prepares the firmware for flashing onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/qpockets/space_space/rev2/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake space_space/rev2:default\n```\n\n----------------------------------------\n\nTITLE: Building YDKB Chili Firmware (QMK)\nDESCRIPTION: This snippet demonstrates how to build the default firmware for the YDKB Chili keyboard using the QMK build environment. It assumes that the QMK build environment has already been set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ydkb/chili/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake ydkb/chili:default\n```\n\n----------------------------------------\n\nTITLE: Flashing e88 keyboard firmware with QMK\nDESCRIPTION: This command builds and flashes the default firmware to the e88 keyboard using QMK. This assumes the QMK build environment has been properly configured. The board is expected to be in bootloader mode for the flashing process to succeed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/e88/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake e88:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Cajal Firmware with Ortho Layout (QMK)\nDESCRIPTION: This command builds the QMK firmware for the Cajal keyboard with the ortholinear layout.  It compiles the source code with the ortho layout configuration and produces a firmware file. A QMK build environment is required.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/walletburner/cajal/readme.md#_snippet_1\n\nLANGUAGE: qmk\nCODE:\n```\nmake walletburner/cajal:default_ortho\n```\n\n----------------------------------------\n\nTITLE: Flashing NCR80 ALPS SKFL Firmware\nDESCRIPTION: This command flashes the default firmware to the NCR80 ALPS SKFL keyboard. It requires a properly configured QMK build environment and a compatible flashing tool. The command assumes the keyboard is in the correct bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/salane/ncr80alpsskfl/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake salane/ncr80alpsskfl:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for RAMA WORKS M10-B\nDESCRIPTION: This snippet shows how to build the default firmware for the RAMA WORKS M10-B keyboard using the QMK build environment. It assumes that the QMK build environment has been properly set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wilba_tech/rama_works_m10_b/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake wilba_tech/rama_works_m10_b:default\n```\n\n----------------------------------------\n\nTITLE: Udev Rules Configuration - Udev Rules\nDESCRIPTION: This code snippet configures udev rules to allow access to the keyboard device without requiring root privileges. Replace `abcd` and `def1` with the keyboard's vendor and product ID, respectively. The file should be named `/etc/udev/rules.d/70-hid-listen.rules` and requires a system restart or udev rules reload to take effect.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/faq_debug.md#_snippet_4\n\nLANGUAGE: udev rules\nCODE:\n```\nSUBSYSTEM==\"hidraw\", ATTRS{idVendor}==\"abcd\", ATTRS{idProduct}==\"def1\", TAG+=\"uaccess\", RUN{builtin}+=\"uaccess\"\n```\n\n----------------------------------------\n\nTITLE: Building Loki 65 Firmware - Makefile\nDESCRIPTION: This command builds the firmware for the Loki 65 keyboard with the default keymap. It assumes that the QMK build environment has already been set up. The resulting firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/loki65/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake loki65:default\n```\n\n----------------------------------------\n\nTITLE: Retrieving QMK Constants Metadata\nDESCRIPTION: This cURL command retrieves the metadata for QMK constants from either the `master` or `develop` endpoint. The metadata includes the last updated date and a list of available constant subsystems and their versions, such as `keycodes`. The `master` endpoint provides locked-in versions.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/api_docs.md#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\n$ curl https://keyboards.qmk.fm/v1/constants_metadata.json # For `master`\n$ curl https://keyboards.develop.qmk.fm/v1/constants_metadata.json # For `develop`\n```\n\n----------------------------------------\n\nTITLE: Conditional Configuration in post_config.h\nDESCRIPTION: This code snippet demonstrates how to use the `post_config.h` file to conditionally define USB power consumption and RGBLIGHT settings based on the presence of the `IOS_DEVICE_ENABLE` macro. This allows for different configurations based on whether the keyboard is connected to an iOS device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/hardware_keyboard_guidelines.md#_snippet_3\n\nLANGUAGE: c\nCODE:\n```\n#ifndef IOS_DEVICE_ENABLE\n  // USB_MAX_POWER_CONSUMPTION value for this keyboard\n  #define USB_MAX_POWER_CONSUMPTION 400\n#else\n  // fix iPhone and iPad power adapter issue\n  // iOS devices need less than 100\n  #define USB_MAX_POWER_CONSUMPTION 100\n#endif\n\n#ifdef RGBLIGHT_ENABLE\n  #ifndef IOS_DEVICE_ENABLE\n    #define RGBLIGHT_LIMIT_VAL 200\n    #define RGBLIGHT_VAL_STEP 17\n  #else\n    #define RGBLIGHT_LIMIT_VAL 35\n    #define RGBLIGHT_VAL_STEP 4\n  #endif\n  #ifndef RGBLIGHT_HUE_STEP\n    #define RGBLIGHT_HUE_STEP 10\n  #endif\n  #ifndef RGBLIGHT_SAT_STEP\n    #define RGBLIGHT_SAT_STEP 17\n  #endif\n#endif\n```\n\n----------------------------------------\n\nTITLE: Flashing BFO-9000 Keyboard Firmware with AVRDUDE\nDESCRIPTION: This command compiles and flashes the default keymap for the BFO-9000 keyboard using AVRDUDE. It requires a properly configured QMK environment and AVRDUDE.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keebio/bfo9000/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake keebio/bfo9000:default:avrdude\n```\n\n----------------------------------------\n\nTITLE: Flashing Skelett 40 Firmware\nDESCRIPTION: This command flashes the compiled Skelett 40 keyboard firmware to the keyboard. It assumes the firmware has already been built. It utilizes the QMK build environment and flashing tools to transfer the firmware to the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/novelkeys/skelett40/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake novelkeys/skelett40:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building M65 rev3 firmware with make\nDESCRIPTION: This command builds the default firmware for the M65 keyboard revision 3 using the QMK make system. It compiles the necessary source code and generates a firmware image suitable for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mlego/m65/readme.md#_snippet_4\n\nLANGUAGE: Makefile\nCODE:\n```\nmake mlego/m65/rev3:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Keychron C3 Pro Firmware\nDESCRIPTION: These commands flash the compiled QMK firmware to the Keychron C3 Pro keyboard. The `:flash` target is appended to the build command to initiate the flashing process after the firmware is built. The keyboard must be in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keychron/c3_pro/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake keychron/c3_pro/ansi/red:default:flash\n```\n\nLANGUAGE: make\nCODE:\n```\nmake keychron/c3_pro/ansi/rgb:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building BM60HSRGB_EC Firmware\nDESCRIPTION: These commands are used to build the firmware for the BM60HSRGB_EC keyboard within the QMK Firmware environment.  The correct command depends on the PCB revision (rev1 or rev2).  The `make` command invokes the QMK build system.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kprepublic/bm60hsrgb_ec/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfor rev1: make kprepublic/bm60hsrgb_ec/rev1:default\nfor rev2: make kprepublic/bm60hsrgb_ec/rev2:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware: Mode Tempo M60S\nDESCRIPTION: This command flashes the default firmware onto the Mode Tempo M60S keyboard. It requires a properly configured QMK build environment and a connected keyboard in bootloader mode. This step uploads the compiled firmware to the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mode/m60s/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake mode/m60s:default:flash\n```\n\n----------------------------------------\n\nTITLE: Setting STM32duino Bootloader in rules.mk (Make)\nDESCRIPTION: This code snippet configures the build system to use the STM32duino bootloader, specifically for STM32F103 boards. This is required as these boards do not have a USB DFU bootloader. This setting ensures that the firmware is built with the STM32duino bootloader.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/flashing.md#_snippet_15\n\nLANGUAGE: make\nCODE:\n```\n# Bootloader selection\nBOOTLOADER = stm32duino\n```\n\n----------------------------------------\n\nTITLE: Building Pumpkinpad Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Pumpkinpad keyboard. It utilizes the QMK build environment to compile the firmware and generate a .hex file for flashing. Requires QMK build environment to be set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/laser_ninja/pumpkinpad/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake laser_ninja/pumpkinpad:default\n```\n\n----------------------------------------\n\nTITLE: Flashing EE-AT Keyboard Firmware - Make\nDESCRIPTION: This command flashes the specified keymap for the geonworks/ee_at keyboard onto the device using the QMK command line interface. It assumes the QMK build environment is properly set up and the keyboard is in DFU mode. Replace `<keymap>` with the actual keymap name.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/geonworks/ee_at/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake geonworks/ee_at:<keymap>:flash\n```\n\n----------------------------------------\n\nTITLE: Enabling DIP Switch Map in keymap rules.mk\nDESCRIPTION: This snippet enables the DIP switch map feature in the `rules.mk` file for a specific keymap by setting `DIP_SWITCH_MAP_ENABLE` to `yes`. This allows mapping DIP switch states to keycodes.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/dip_switch.md#_snippet_3\n\nLANGUAGE: Makefile\nCODE:\n```\nDIP_SWITCH_MAP_ENABLE = yes\n```\n\n----------------------------------------\n\nTITLE: Building MIO keyboard firmware with QMK\nDESCRIPTION: This command builds the default firmware for the MIO keyboard using the QMK build environment. It assumes that the QMK build environment has already been set up correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/recompile_keys/mio/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake recompile_keys/mio:default\n```\n\n----------------------------------------\n\nTITLE: Dztech Dz96 Keyboard Matrix Diagram\nDESCRIPTION: This diagram visually represents the key matrix of the Dztech Dz96 keyboard. Each cell represents a key, with row and column numbers indicated. The diagram helps in understanding the physical layout and wiring of the keyboard, which is crucial for firmware development and troubleshooting.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/dztech/dz96/matrix_diagram.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┐\n│00 │01 │02 │03 │04 │60 │61 │62 │63 │05 │06 │07 │08 │72 │09 │0A │0B │0C │7C │\n├───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┤    ┌───────┐\n│10 │11 │12 │13 │14 │64 │65 │66 │67 │15 │16 │17 │18 │70 │71 │19 │1A │1B │1C │    │71     │ 2u BackSpace\n├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴───┼───┼───┼───┼───┤    └─┬─────┤                 ┌───┐\n│20   │21 │22 │23 │24 │68 │69 │6A │6B │25 │26 │27 │28 │73   │29 │2A │2B │2C │      │     │                 │   │\n├─────┴──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴─────┼───┼───┼───┼───┤   ┌──┴┐38  │ ISO Enter       │2C │ Numpad \"+\" 2u\n│30    │31 │32 │33 │34 │6C │75 │76 │77 │35 │36 │37 │38      │39 │3A │3B │3C │   │73 │    │                 │   │\n├────┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴────┬───┼───┼───┼───┼───┤   └───┴────┘                 ├───┤\n│40  │41 │42 │43 │44 │78 │79 │7A │7B │45 │46 │47 │48    │74 │49 │4A │4B │4C │                              │   │\n├────┼───┴┬──┴─┬─┴───┴───┴───┴───┴───┴──┬┴──┬┴──┬┴──┬───┼───┼───┼───┼───┼───┤                              │4C │ Numpad Enter 2U\n│50  │51  │52  │59                      │55 │56 │57 │58 │53 │54 │5A │5B │5C │                              │   │\n└────┴────┴────┴────────────────────────┴───┴───┴───┴───┴───┴───┴───┴───┴───┘                              └───┘\n┌────────┐\n│40      │ 2.25u LShift\n└────────┘\n┌─────┬─────┬───────────────────────────┬─────┬─────┐\n│50   │51   │59                         │55   │57   │ 2 Mod\n└─────┴─────┴───────────────────────────┴─────┴─────┘\n```\n\n----------------------------------------\n\nTITLE: Flashing guide68 Keyboard Firmware with QMK\nDESCRIPTION: This command builds and flashes the default firmware to the guide68 keyboard.  It uses the QMK build environment and requires a connected keyboard in bootloader mode. The command will compile the firmware and then attempt to flash it to the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/salicylic_acid3/guide68/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake salicylic_acid3/guide68:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building RYLOO STUDIO M0110 Firmware (QMK)\nDESCRIPTION: This command compiles the default firmware for the RYLOO STUDIO M0110 keyboard using the QMK build environment. It assumes that the QMK build environment is already set up and configured.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ryloo_studio/m0110/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake ryloo_studio/m0110:default\n```\n\n----------------------------------------\n\nTITLE: Flashing EEPROM for Right Hand\nDESCRIPTION: This command flashes the EEPROM of the right-hand side of the keyboard with the appropriate configuration. It allows the keyboard to determine its hand based on the EEPROM content. `$(COM_PORT)` needs to be replaced with the actual serial port.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/not_so_minidox/readme.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\navrdude -p atmega32u4 -P $(COM_PORT) -c avr109 -U eeprom:w:\\\"./quantum/split_common/eeprom-righthand.eep\\\"\n```\n\nLANGUAGE: Shell\nCODE:\n```\n// or the equivalent in dfu-programmer\n```\n\n----------------------------------------\n\nTITLE: Building Sentraq Number Pad Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Sentraq Number Pad using the QMK build environment. It targets the sentraq/number_pad keyboard with the default keymap and specifies DFU as the flashing method.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/sentraq/number_pad/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake sentraq/number_pad:default:dfu\n```\n\n----------------------------------------\n\nTITLE: Building AMJ Pad Firmware with Make\nDESCRIPTION: This snippet shows how to build the default AMJ Pad firmware using the `make` command. It requires a properly configured QMK build environment. The command compiles the firmware and generates a `.hex` file that can be flashed to the AMJ Pad.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/amjkeyboard/amjpad/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake amjkeyboard/amjpad:default\n```\n\n----------------------------------------\n\nTITLE: Building RAMA WORKS M60-A Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the RAMA WORKS M60-A keyboard using the QMK build environment. It assumes that the build environment is already set up. The output will be the firmware file ready to be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wilba_tech/rama_works_m60_a/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake wilba_tech/rama_works_m60_a:default\n```\n\n----------------------------------------\n\nTITLE: Building BAGUETTE66_RGB Firmware\nDESCRIPTION: This command compiles the default keymap for the BAGUETTE66_RGB keyboard using QMK. It requires a properly configured QMK build environment. The output is a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kbdfans/baguette66/rgb/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake kbdfans/baguette66/rgb:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Keychron Q0 Firmware\nDESCRIPTION: This command flashes the built QMK firmware to the Keychron Q0 number pad with the base or plus layout and the default keymap. It requires the QMK build environment to be set up and the appropriate flashing tools installed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keychron/q0/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake keychron/q0/base:default:flash\n```\n\nLANGUAGE: make\nCODE:\n```\nmake keychron/q0/plus:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building the DIVINE Keyboard Firmware with QMK\nDESCRIPTION: This command is used to build the default firmware for the DIVINE keyboard using the QMK build environment. It compiles the keyboard's configuration and generates the firmware file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/era/divine/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake era/divine:default\n```\n\n----------------------------------------\n\nTITLE: Building zErgo Keyboard Firmware\nDESCRIPTION: This command compiles the QMK firmware for the zErgo keyboard with the default keymap. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/zergo/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake handwired/zergo:default\n```\n\n----------------------------------------\n\nTITLE: Building AliceKK Keyboard Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the AliceKK keyboard using the QMK build environment. It compiles the source code and creates a firmware image that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mwstudio/alicekk/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake mwstudio/alicekk:default\n```\n\n----------------------------------------\n\nTITLE: Define Keyboard Key Row 5\nDESCRIPTION: Defines the bottom row of keys, including Ctrl, Win, Alt, a blank key, AltGr, Win, Menu, and Ctrl. It makes use of the 'a' parameter to specify some unknown attribute.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/lib/python/qmk/tests/kle.txt#_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n[{w:1.25},\"Ctrl\",{w:1.25},\"Win\",{w:1.25},\"Alt\",{a:7,w:6.25},\"\",{a:4,w:1.25},\"AltGr\",{w:1.25},\"Win\",{w:1.25},\"Menu\",{w:1.25},\"Ctrl\"]\n```\n\n----------------------------------------\n\nTITLE: Building TR60W Keyboard Firmware\nDESCRIPTION: This snippet shows how to build the default firmware for the TR60W keyboard using the QMK build system. It assumes the QMK build environment is already set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/tr60w/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake tr60w:default\n```\n\n----------------------------------------\n\nTITLE: Building ProjectKeyboard Alice Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the ProjectKeyboard Alice Rev2 keyboard using the QMK build environment. It compiles the keyboard layout and generates a firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/projectkb/alice/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake projectkb/alice/rev2:default\n```\n\n----------------------------------------\n\nTITLE: X Finished Function Declaration in QMK\nDESCRIPTION: This code declares the `x_finished` function, which is the finished callback for the 'x' tap dance, and the `x_reset` function, which is the reset callback for the 'x' tap dance. These callbacks handle registration and unregistration of keycodes based on the detected tap dance state.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/tap_dance.md#_snippet_15\n\nLANGUAGE: c\nCODE:\n```\n// For the x tap dance. Put it here so it can be used in any keymap\nvoid x_finished(tap_dance_state_t *state, void *user_data);\nvoid x_reset(tap_dance_state_t *state, void *user_data);\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware to MIIIW BlackIO83 (QMK)\nDESCRIPTION: This command flashes the built firmware onto the MIIIW BlackIO83 keyboard (rev_0100) using the QMK Firmware build system. It assumes the keyboard is in DFU mode or a compatible bootloader.  Requires a properly configured QMK build environment and a connected keyboard in flash mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/miiiw/blackio83/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake miiiw/blackio83/rev_0100:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building and Flashing QMK Firmware for E6-V2 OE via DFU\nDESCRIPTION: This command builds and flashes the QMK firmware for the E6-V2 OE keyboard with the default keymap using the DFU bootloader. It requires a properly configured QMK build environment and the keyboard to be in DFU mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/exclusive/e6v2/oe/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake e6v2/oe:default:dfu\n```\n\n----------------------------------------\n\nTITLE: Building Wampus Keyboard Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the Wampus keyboard. It requires the QMK build environment to be set up. The output will be the firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/zoo/wampus/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake zoo/wampus:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Bloomer v2 Firmware using QMK\nDESCRIPTION: This command builds and flashes the QMK firmware for the Bloomer v2 keyboard with the default keymap. It requires a properly configured QMK build environment and a connected Bloomer v2 keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cozykeys/bloomer/readme.md#_snippet_2\n\nLANGUAGE: Makefile\nCODE:\n```\nmake cozykeys/bloomer/v2:default:flash\n```\n\n----------------------------------------\n\nTITLE: Defining 60% ANSI WKL Keyboard Layout\nDESCRIPTION: This snippet defines a 60% ANSI WKL keyboard layout. It likely leverages a pre-existing macro within the QMK firmware to specify the physical arrangement of keys.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/layouts/community/60_ansi_wkl/readme.md#_snippet_0\n\nLANGUAGE: null\nCODE:\n```\nLAYOUT_60_ansi_wkl\n```\n\n----------------------------------------\n\nTITLE: Flashing 1upocarina Keyboard Firmware\nDESCRIPTION: This command flashes the compiled firmware onto the 1upocarina keyboard. It uses the QMK build environment to upload the firmware image to the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/1upkeyboards/1upocarina/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake 1upkeyboards/1upocarina:default:flash\n```\n\n----------------------------------------\n\nTITLE: Defining TKL ANSI WKL Split BS RShift Layout\nDESCRIPTION: This snippet uses ASCII art to display a TKL ANSI layout with no Windows (GUI) keys, split backspace, and split right shift. This visualizes the physical arrangement for configuration into a custom keyboard layout using QMK. No specific dependencies are listed other than knowledge of the standard keyboard layouts plus WKL split backspace and split right shift variants.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/layouts/default/readme.md#_snippet_20\n\nLANGUAGE: text\nCODE:\n```\n┌───┐   ┌───┬───┬───┬───┐ ┌───┬───┬───┬───┐ ┌───┬───┬───┬───┐ ┌───┬───┬───┐\n│   │   │   │   │   │   │ │   │   │   │   │ │   │   │   │   │ │   │   │   │\n└───┘   └───┴───┴───┴───┘ └───┴───┴───┴───┘ └───┴───┴───┴───┘ └───┴───┴───┘\n┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┐ ┌───┬───┬───┐\n│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │ │   │   │   │\n├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴───┤ ├───┼───┼───┤\n│     │   │   │   │   │   │   │   │   │   │   │   │   │     │ │   │   │   │\n├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴─────┤ └───┴───┴───┘\n│      │   │   │   │   │   │   │   │   │   │   │   │        │\n├──────┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴────┬───┤     ┌───┐\n│        │   │   │   │   │   │   │   │   │   │   │      │   │     │   │\n├─────┬──┴┬──┴──┬┴───┴───┴───┴───┴───┴───┴──┬┴───┴┬───┬─┴───┤ ┌───┼───┼───┐\n│     │   │     │                           │     │   │     │ │   │   │   │\n└─────┘   └─────┴───────────────────────────┴─────┘   └─────┘ └───┴───┴───┘\n```\n\n----------------------------------------\n\nTITLE: Flashing Keyboard Firmware (QMK)\nDESCRIPTION: This command flashes the built firmware to the Majestouch Redux keyboard.  It depends on the QMK build environment and a connected keyboard in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/druah/majestouch_redux/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake druah/majestouch_redux:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Coban Pad 12A Firmware (QMK)\nDESCRIPTION: This command flashes the compiled QMK firmware onto the Coban Pad 12A keyboard. It requires the QMK build environment to be configured and the keyboard to be connected in a flashable state. This command depends on the `make` command and the dfu-programmer or similar flashing tool.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/coban/pad12a/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake coban/pad12a:default:flash\n```\n\n----------------------------------------\n\nTITLE: Defining Keyboard Layout: 60 ISO Split BS RShift\nDESCRIPTION: This snippet defines a keyboard layout named LAYOUT_60_iso_split_bs_rshift. It specifies the key arrangement for a 60% keyboard with ISO layout, split backspace, and right shift keys. It's intended for use within the QMK firmware to configure the keyboard's keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/layouts/community/60_iso_split_bs_rshift/readme.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nLAYOUT_60_iso_split_bs_rshift\n```\n\n----------------------------------------\n\nTITLE: Defining QMK Keyboard Layout Macro\nDESCRIPTION: This snippet defines a keyboard layout macro in QMK firmware. The macro `LAYOUT_tkl_iso_split_bs_rshift` likely expands to a specific arrangement of keys for a tenkeyless keyboard with ISO layout, split backspace, and a split right shift key. This would be used in the keyboard's keymap configuration.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/layouts/default/tkl_iso_wkl_split_bs_rshift/readme.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nLAYOUT_tkl_iso_split_bs_rshift\n```\n\n----------------------------------------\n\nTITLE: Building Keyboard Firmware with Make\nDESCRIPTION: This command builds the firmware for the handwired/symmetric70_proto keyboard with the proton_c controller, using the 'normal' keymap configuration, and the 'default' keymap layout. The 'make' command compiles the QMK firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/symmetric70_proto/proton_c/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/symmetric70_proto/proton_c/normal:default\n```\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/symmetric70_proto/proton_c/fast:default\n```\n\n----------------------------------------\n\nTITLE: Building Horizon Firmware\nDESCRIPTION: This snippet demonstrates how to build the default firmware for the Horizon keyboard using the QMK build system. It assumes the QMK build environment is already set up and configured.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/horizon/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake horizon:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Snatchpad Firmware (Makefile)\nDESCRIPTION: This command flashes the built firmware onto the Snatchpad macropad.  It requires a correctly configured QMK build environment and a connected Snatchpad in bootloader mode. It builds and flashes the firmware in one step.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/snatchpad/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/snatchpad:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing DK60 Firmware with Make\nDESCRIPTION: This command flashes the DK60 keyboard with the default keymap using the `make` command. It programs the compiled firmware image onto the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/dk60/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake dk60:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing QMK Firmware with AVRDUDE\nDESCRIPTION: Flashes the compiled QMK firmware onto the Arduino Pro Micro using AVRDUDE. This command requires the QMK build environment and a connected Arduino Pro Micro. After running the command, press the reset button on the Pro Micro to initiate the flashing process.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/atreus50/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake handwired/atreus50:default:avrdude\n```\n\n----------------------------------------\n\nTITLE: Flashing firmware for mecxlabs/mp1 with QMK\nDESCRIPTION: This command builds and flashes the default firmware for the mecxlabs mp1 macropad. It requires a properly configured QMK build environment and a connected device in a flashable state.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mecxlabs/mp1/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake mecxlabs/mp1:default:flash\n```\n\n----------------------------------------\n\nTITLE: Start Unicode Composing Input Sequence - C\nDESCRIPTION: This function begins the input sequence for Unicode Composing Input Sequence (UCIS).\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/unicode.md#_snippet_23\n\nLANGUAGE: C\nCODE:\n```\nvoid ucis_start(void)\n```\n\n----------------------------------------\n\nTITLE: Flashing deltapad Firmware with Make\nDESCRIPTION: This command builds and flashes the default keymap for the deltapad keyboard firmware using the make command. This requires the QMK build environment and a configured flashing tool.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/deltapad/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake deltapad:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building the Curiosity Keyboard Firmware\nDESCRIPTION: This command builds the default keymap for the Curiosity keyboard using the QMK build environment. It assumes that the QMK build environment has already been set up and configured according to the QMK documentation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/curiosity/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake handwired/curiosity:default\n```\n\n----------------------------------------\n\nTITLE: Building Compound Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the Compound keyboard using the QMK build environment. It requires QMK build tools to be set up. The output is a firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/compound/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake compound:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Olly Orion Firmware\nDESCRIPTION: This command flashes the compiled firmware onto the Olly Orion keyboard using the QMK build environment.  It builds upon the previous compilation step and utilizes the flash target.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechlovin/olly/orion/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake mechlovin/olly/orion/default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Laplace Keyboard Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the Keebio Laplace keyboard using the QMK build environment. It compiles the source code and prepares the firmware for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keebio/laplace/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake keebio/laplace:default\n```\n\n----------------------------------------\n\nTITLE: Flashing EC Theca Firmware\nDESCRIPTION: This command flashes the default firmware onto the EC Theca keyboard. It requires a properly configured QMK build environment and a connected keyboard in bootloader mode. It programs the compiled firmware onto the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cipulot/ec_theca/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake cipulot/ec_theca:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building LeFishe Firmware with Make\nDESCRIPTION: This command builds the default firmware for the LeFishe keyboard. It requires a properly configured QMK build environment. The output is a firmware file ready to be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/lyso1/lefishe/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake lyso1/lefishe:default\n```\n\n----------------------------------------\n\nTITLE: Advancing OLED Character (C)\nDESCRIPTION: This function advances the cursor by one character length. If there is not enough room for the next character, it advances to the next page. The cursor wraps to the beginning when it goes out of bounds.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/oled_driver.md#_snippet_18\n\nLANGUAGE: c\nCODE:\n```\n// Moves the cursor forward 1 character length\n// Advance page if there is not enough room for the next character\n// Wraps to the beginning when out of bounds\nvoid oled_advance_char(void);\n```\n\n----------------------------------------\n\nTITLE: Turning On the Display\nDESCRIPTION: Manually turns on the ST7565 display if it is currently off. If the display is already on, it does nothing. Returns true if the screen was on or turned on. Calls the weak function `st7565_on_user` when turning the screen on.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/st7565.md#_snippet_24\n\nLANGUAGE: C\nCODE:\n```\n// Can be used to manually turn on the screen if it is off\n// Returns true if the screen was on or turns on\nbool st7565_on(void);\n```\n\n----------------------------------------\n\nTITLE: Keyboard Readme Template Example\nDESCRIPTION: This example demonstrates the structure of a keyboard readme, including an image link, a description of the keyboard, maintainer information, hardware support details, and build/flash instructions for Planck keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/documentation_templates.md#_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n# Planck\n\n![Planck](https://i.imgur.com/q2M3uEU.jpg)\n\nA compact 40% (12x4) ortholinear keyboard kit made and sold by OLKB and Massdrop. [More info on qmk.fm](https://qmk.fm/planck/)\n\n* Keyboard Maintainer: [Jack Humbert](https://github.com/jackhumbert)\n* Hardware Supported: Planck PCB rev1, rev2, rev3, rev4, Teensy 2.0\n* Hardware Availability: [OLKB.com](https://olkb.com), [Massdrop](https://www.massdrop.com/buy/planck-mechanical-keyboard?mode=guest_open)\n\nMake example for this keyboard (after setting up your build environment):\n\n    make planck/rev4:default\n\nFlashing example for this keyboard:\n\n    make planck/rev4:default:flash\n\nSee the [build environment setup](getting_started_build_tools) and the [make instructions](getting_started_make_guide) for more information. Brand new to QMK? Start with our [Complete Newbs Guide](newbs).\n\n## Bootloader\n\nEnter the bootloader in 3 ways:\n\n* **Bootmagic reset**: Hold down the key at (0,0) in the matrix (usually the top left key or Escape) and plug in the keyboard\n* **Physical reset button**: Briefly press the button on the back of the PCB - some may have pads you must short instead\n* **Keycode in layout**: Press the key mapped to `QK_BOOT` if it is available\n```\n\n----------------------------------------\n\nTITLE: Flashing QC60 Firmware\nDESCRIPTION: This command flashes the compiled firmware onto the QC60 keyboard's Pro Micro microcontroller using the avrdude tool. It assumes that the firmware has already been built using the 'make' command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/qc60/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/qc60/proto:avrdude\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware to Boardrun Classic (QMK)\nDESCRIPTION: This command flashes the built firmware to the Boardrun Classic keyboard using the QMK build environment and the specified flashing method. It requires that the default firmware has been built first and that the QMK build environment is correctly configured.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/boardrun/classic/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake boardrun/classic:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Firmware\nDESCRIPTION: This command builds the default firmware for the glyphkbd_v2 keyboard. It uses the QMK make system to compile the keyboard layout and generate a firmware file that can be flashed to the device. The command needs to be executed in the QMK Firmware build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/galile0/glyphkbd_v2/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake galile0/glyphkbd_v2:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Aurora Corne firmware - QMK\nDESCRIPTION: This command builds and flashes the default firmware to the Aurora Corne keyboard (rev1) using the QMK environment. The target board needs to be in bootloader mode to be flashed correctly. This command assumes necessary flashing tools are set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/splitkb/aurora/corne/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake splitkb/aurora/corne/rev1:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Jelly Epoch Firmware with QMK - Makefile\nDESCRIPTION: This snippet demonstrates how to flash the compiled firmware onto the Jelly Epoch soldered PCB using the QMK build environment. It extends the build command with the `:flash` target.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/owlab/jelly_epoch/soldered/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake owlab/jelly_epoch/soldered:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing KB16-01 Firmware with QMK CLI\nDESCRIPTION: This command flashes the compiled QMK firmware onto the KB16-01 macropad (revision 2) with the default keymap using the QMK CLI. It requires the QMK CLI to be installed and configured, and a compatible bootloader on the device. This will overwrite the existing firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/doio/kb16/rev2/readme.md#_snippet_3\n\nLANGUAGE: QMK CLI\nCODE:\n```\n`qmk flash -kb doio/kb16/rev2 -km default`\n```\n\n----------------------------------------\n\nTITLE: Building Q4Z keyboard firmware (QMK)\nDESCRIPTION: This command builds the default keymap for the Q4Z keyboard using the QMK firmware. It requires a properly configured build environment as detailed in the QMK documentation.  The output is a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/p3d/q4z/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake p3d/q4z:default\n```\n\n----------------------------------------\n\nTITLE: Flashing EEPROM (Left Hand)\nDESCRIPTION: This command flashes the EEPROM for the left-hand side of the keyboard. It requires `avrdude` to be installed and configured correctly. The `/dev/ttyS1` port needs to be replaced with the correct serial port of the bootloader.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/vitamins_included/rev1/readme.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\navrdude -c avr109 -p m32u4 -P /dev/ttyS1 -U eeprom:w:\"./quantum/split_common/eeprom-lefthand.eep\":a\n```\n\n----------------------------------------\n\nTITLE: Defining RXLED for Proton C in config.h\nDESCRIPTION: This code snippet demonstrates how to define the `CONVERT_TO_PROTON_C_RXLED` macro in the `config.h` file to map the RXLED (B0) to the on-board LED (C13) on the Proton C. It requires editing the keyboard's `config.h` file in the QMK firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/feature_converters.md#_snippet_3\n\nLANGUAGE: c\nCODE:\n```\n#define CONVERT_TO_PROTON_C_RXLED\n```\n\n----------------------------------------\n\nTITLE: Building PistachioMacroPad Firmware\nDESCRIPTION: This command builds the default firmware for the PistachioMacroPad keyboard using the QMK build environment. It requires QMK to be properly set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/rate/pistachio_mp/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake rate/pistachio_mp:default\n```\n\n----------------------------------------\n\nTITLE: Keyboard Matrix Diagram\nDESCRIPTION: This diagram visually represents the keyboard matrix for the kibou suisei keyboard.  Each cell in the diagram corresponds to a key, and the numbers indicate the row and column addresses used to identify that key in the keyboard's scanning process. The diagram is crucial for understanding the physical layout and for mapping keys to specific functions within the firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kibou/suisei/matrix_diagram.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n                                                    ┌───────┐\n                                       2u Backspace │0D     │\n                                                    └───────┘\n┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┐\n│00 │01 │02 │03 │04 │05 │06 │07 │08 │09 │0A │0B │0C │0D │0E │0F │\n├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴───┼───┤\n│10   │11 │12 │13 │14 │15 │16 │17 │18 │19 │1A │1B │1C │1D   │1F │\n├─────┴──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴─────┼───┤\n│20    │21 │22 │23 │24 │25 │26 │27 │28 │29 │2A │2B │2C      │2F │\n├──────┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴────┬───┼───┤\n│30      │31 │32 │33 │34 │35 │36 │37 │38 │39 │3A │3B    │3E │3F │\n├─────┬──┼───┴─┬─┴───┴───┴───┴───┴───┴───┴─┬─┴───┼──┬───┼───┼───┤\n│40   │  │42   │45                         │4A   │  │4D │4E │4F │\n└─────┘  └─────┴───────────────────────────┴─────┘  └───┴───┴───┘\n```\n\n----------------------------------------\n\nTITLE: Building the CannonKeys Rekt1800 Firmware\nDESCRIPTION: This command compiles the default keymap for the CannonKeys Rekt1800 keyboard using the QMK firmware build environment. It requires that the QMK build environment has been set up correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cannonkeys/rekt1800/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake cannonkeys/rekt1800:default\n```\n\n----------------------------------------\n\nTITLE: Flashing QWERTYYdox Firmware\nDESCRIPTION: This command builds and flashes the default firmware for the QWERTYYdox keyboard's rev1 using the QMK build environment and avrdude. It uploads the compiled firmware to the Pro Micro microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/qwertyydox/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake qwertyydox/rev1:default:avrdude\n```\n\n----------------------------------------\n\nTITLE: Running Python Test Group (QMK)\nDESCRIPTION: This command runs a specific test group within the python test suite.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/cli_commands.md#_snippet_51\n\nLANGUAGE: qmk\nCODE:\n```\nqmk pytest -t qmk.tests.test_cli_commands\n```\n\n----------------------------------------\n\nTITLE: Building Numpad20 Firmware (Makefile)\nDESCRIPTION: This command builds the QMK firmware for the `handwired/numpad20` keyboard with the `default` keymap.  It assumes that the QMK build environment has already been set up. The resulting firmware can then be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/numpad20/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/numpad20:default\n```\n\n----------------------------------------\n\nTITLE: Building The Railroad Keyboard Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for The Railroad keyboard (revision 0) using the QMK build environment. It requires QMK to be set up and configured correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/nopunin10did/railroad/readme.md#_snippet_0\n\nLANGUAGE: QMK\nCODE:\n```\nmake nopunin10did/railroad/rev0:default\n```\n\n----------------------------------------\n\nTITLE: Building ID75 v2 Firmware\nDESCRIPTION: This command builds the default firmware for the ID75 v2 keyboard using the QMK build environment.  It requires a properly configured QMK build environment.  The resulting firmware can then be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/idobao/id75/v2/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake idobao/id75/v2:default\n```\n\n----------------------------------------\n\nTITLE: Building chocV Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the chocV keyboard within the QMK Firmware environment. It assumes the build environment is already set up according to QMK's documentation. The output will be a .hex or .bin file ready to be flashed onto the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/chocv/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake chocv:default\n```\n\n----------------------------------------\n\nTITLE: Building PuckBuddy Firmware\nDESCRIPTION: This command builds the default keymap for the PuckBuddy macropad using the QMK build environment. It assumes that the QMK build environment has already been set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechwild/puckbuddy/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake mechwild/puckbuddy:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Degenpad Firmware - Makefile\nDESCRIPTION: This command builds and flashes the firmware for the Degenpad keyboard with the default keymap. It requires a properly configured QMK build environment and a connected keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/thepanduuh/degenpad/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake thepanduuh/degenpad:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Zeal60 Firmware\nDESCRIPTION: This command is used to build the default keymap for the Zeal60 keyboard within the QMK firmware environment. It requires a properly set up build environment and relies on the QMK make system to compile the firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wilba_tech/zeal60/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake wilba_tech/zeal60:default\n```\n\n----------------------------------------\n\nTITLE: Building KVT Firmware (make)\nDESCRIPTION: This command builds the default firmware for the KVT keyboard using the `make` command. It assumes that the QMK build environment has already been set up. The resulting firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kv/revt/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake kv/revt:default\n```\n\n----------------------------------------\n\nTITLE: Enabling Strict Combo Timer\nDESCRIPTION: Only start the combo timer on the first key press instead of on all key presses.  This changes how the combo timer is triggered.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/config_options.md#_snippet_63\n\nLANGUAGE: C\nCODE:\n```\n#define COMBO_STRICT_TIMER\n```\n\n----------------------------------------\n\nTITLE: Building Monoflex 60 Firmware\nDESCRIPTION: This command builds the default firmware for the Monoflex 60 keyboard using the QMK build environment.  It requires the QMK build environment to be set up properly. The output will be a firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/monoflex60/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake monoflex60:default\n```\n\n----------------------------------------\n\nTITLE: Building Elemental75 Firmware\nDESCRIPTION: This command builds the default firmware for the Elemental75 keyboard using QMK. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/halokeys/elemental75/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake halokeys/elemental75:default\n```\n\n----------------------------------------\n\nTITLE: Git Merge Develop to Master\nDESCRIPTION: This snippet shows the git commands to checkout the master branch, pull latest changes, merge develop into master, create and push a tag, and push the master branch.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/breaking_changes.md#_snippet_1\n\nLANGUAGE: git\nCODE:\n```\ngit checkout master\n```\n\nLANGUAGE: git\nCODE:\n```\ngit pull --ff-only\n```\n\nLANGUAGE: git\nCODE:\n```\ngit merge --no-ff develop\n```\n\nLANGUAGE: git\nCODE:\n```\ngit tag <next_version> # Prevent the breakpoint tag from confusing version incrementing\n```\n\nLANGUAGE: git\nCODE:\n```\ngit push upstream <next_version>\n```\n\nLANGUAGE: git\nCODE:\n```\ngit push upstream master\n```\n\n----------------------------------------\n\nTITLE: Building Fave60 Firmware (QMK)\nDESCRIPTION: This command builds the default keymap for the Linworks Fave60 keyboard. It requires a properly configured QMK build environment. The output is a .hex or .bin file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/linworks/fave60/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake linworks/fave60:default\n```\n\n----------------------------------------\n\nTITLE: Building Bartlesplit Firmware (Make)\nDESCRIPTION: This command builds the default firmware for the Bartlesplit keyboard.  It requires the QMK build environment to be set up correctly.  The resulting firmware can then be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/minimon/bartlesplit/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake minimon/bartlesplit:default\n```\n\n----------------------------------------\n\nTITLE: Defining the Block Header structure in C\nDESCRIPTION: This code snippet defines the structure for the block header used in the QMK Graphics Format (QGF). It contains the type ID, negated type ID, and the length of the data blob following the header. The `__attribute__((packed))` ensures no padding is added, and the structure size is asserted to be 5 bytes.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/quantum_painter_qgf.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\ntypedef struct __attribute__((packed)) qgf_block_header_v1_t {\n    uint8_t type_id;      // See each respective block type\n    uint8_t neg_type_id;  // Negated type ID, used for detecting parsing errors\n    uint24_t length;      // 24-bit blob length, allowing for block sizes of a maximum of 16MB\n} qgf_block_header_v1_t;\n// _Static_assert(sizeof(qgf_block_header_v1_t) == 5, \"qgf_block_header_v1_t must be 5 bytes in v1 of QGF\");\n```\n\n----------------------------------------\n\nTITLE: Flashing the Sejin EAT-1010R2 Firmware (QMK)\nDESCRIPTION: This command flashes the compiled QMK firmware onto the Sejin EAT-1010R2 keyboard using the default flash target. This requires the QMK build environment to be set up correctly and the necessary flashing tools to be installed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/sejin_eat1010r2/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake handwired/sejin_eat1010r2:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building CB87 Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the CherryB Studio CB87 keyboard using the QMK build environment. It compiles the source code and creates a firmware image that can be flashed onto the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cherrybstudio/cb87/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake cherrybstudio/cb87:default\n```\n\n----------------------------------------\n\nTITLE: Building Wavelet Keyboard Firmware\nDESCRIPTION: This command is used to build the QMK firmware for the Keebio Wavelet keyboard with the default keymap. It compiles the source code and generates the firmware image that can be flashed onto the keyboard. It requires the QMK build environment to be properly set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keebio/wavelet/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake keebio/wavelet:default\n```\n\n----------------------------------------\n\nTITLE: Flashing S20 Keyboard Firmware\nDESCRIPTION: This command flashes the built firmware to the S20 keyboard. It extends the build command by including the flash target. It also requires a properly configured QMK build environment and a connected S20 keyboard in a flashable state. The output is the firmware being written to the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/polycarbdiet/s20/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake polycarbdiet/s20:default:flash\n```\n\n----------------------------------------\n\nTITLE: Making MF-34 Keyboard Firmware using QMK\nDESCRIPTION: This command compiles the firmware for the MF-34 keyboard with the default keymap using the QMK build environment. It assumes that the QMK build environment is properly set up and configured.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/magic_force/mf34/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake magic_force/mf34:default\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for RAMA WORKS M50-AX (QMK)\nDESCRIPTION: This command builds the firmware for the RAMA WORKS M50-AX keyboard with the default keymap. It uses the QMK build environment to compile the firmware based on the specified keyboard and keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wilba_tech/rama_works_m50_ax/readme.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nmake wilba_tech/rama_works_m50_ax:default\n```\n\n----------------------------------------\n\nTITLE: Building and Flashing KeyDeck8 Firmware\nDESCRIPTION: This command builds the default firmware for the KeyDeck8 keyboard and flashes it to the Pro Micro controller. It requires a properly configured QMK build environment. The command specifies the keyboard's location within the QMK firmware repository (handwired/maverick0197/keydeck8), the keymap (default), and the action to perform (flash).\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/maverick0197/keydeck8/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake handwired/maverick0197/keydeck8:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing ScottoWing firmware\nDESCRIPTION: This command compiles and flashes the default firmware to the ScottoWing keyboard. It builds upon the compilation step and requires the QMK build environment to be properly configured and connected to the target hardware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/scottokeebs/scottowing/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake scottokeebs/handwired/scottowing:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing LBS6 Firmware (QMK)\nDESCRIPTION: This command builds and flashes the default firmware for the tweetydabird/lbs6 keyboard using the QMK build environment.  It compiles the source code, connects to the keyboard's bootloader, and uploads the firmware. Requires a properly configured QMK build environment and a connected keyboard in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/tweetydabird/lbs6/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake tweetydabird/lbs6:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Chocofly Keyboard Firmware\nDESCRIPTION: This command is used to build the default firmware for the Chocofly keyboard (v1).  It assumes that the QMK build environment has already been set up.  The command compiles the firmware, creating a .hex file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/chocofly/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake chocofly/v1:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Suit80 ISO Keyboard Firmware\nDESCRIPTION: This command flashes the default firmware onto the Suit80 ISO keyboard. It requires a properly configured QMK build environment and a connected keyboard in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/owlab/suit80/iso/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake owlab/suit80/iso:default:flash\n```\n\n----------------------------------------\n\nTITLE: Cloning ChibiOS-Contrib\nDESCRIPTION: Clones the ChibiOS-Contrib repository from GitHub. This is the first step to getting the ChibiOS Contrib library.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/chibios_upgrade_instructions.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\ngit clone git@github.com:qmk/ChibiOS-Contrib\n```\n\n----------------------------------------\n\nTITLE: Compiling with OLED Disabled and RGB Underglow Enabled\nDESCRIPTION: This snippet demonstrates how to compile the firmware with OLED disabled and RGB underglow enabled. It combines the `HELIX=no-oled` option with the `helix/rev2/under` keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/helix/rev2/keymaps/default/readme_jp.md#_snippet_13\n\nLANGUAGE: makefile\nCODE:\n```\n$ make HELIX=no-oled helix/rev2/under:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building ATSET AT6 Firmware\nDESCRIPTION: This command builds the default firmware for the ATSET AT6 keyboard using the QMK build environment. It compiles the source code and generates a firmware image that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/atset/at1/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake atset/at6:default\n```\n\n----------------------------------------\n\nTITLE: Flashing KD83A BFG Edition Firmware\nDESCRIPTION: This command flashes the built firmware to the KD83A BFG Edition keyboard. It requires a properly configured QMK build environment and a connected keyboard in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/darkproject/kd83a_bfg_edition/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake darkproject/kd83a_bfg_edition:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Manibus Keyboard (Left Half)\nDESCRIPTION: This command flashes the left half of the Manibus keyboard using the DFU bootloader with split keyboard support. It requires the QMK build environment and a DFU-compatible bootloader on the left half of the keyboard. The command uploads the compiled firmware to the left half of the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/blank_tehnologii/manibus/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake blank_tehnologii/manibus:default:dfu-split-left # Left half\n```\n\n----------------------------------------\n\nTITLE: Building MisteRdeck Firmware\nDESCRIPTION: This command builds the default firmware for the MisteRdeck keyboard within the QMK firmware environment. It assumes that the build environment has been set up correctly according to the QMK documentation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/misterdeck/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/misterdeck:default\n```\n\n----------------------------------------\n\nTITLE: Enabling IS31FL3218 Driver in rules.mk (Make)\nDESCRIPTION: This snippet demonstrates how to include the IS31FL3218 driver in your `rules.mk` file. It adds the necessary paths to `COMMON_VPATH` and specifies the source files to be compiled for single-color or RGB LED configurations. The `I2C_DRIVER_REQUIRED` flag is also set to `yes`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/is31fl3218.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nCOMMON_VPATH += $(DRIVER_PATH)/led/issi\nSRC += is31fl3218-mono.c # For single-color\nSRC += is31fl3218.c # For RGB\nI2C_DRIVER_REQUIRED = yes\n```\n\n----------------------------------------\n\nTITLE: Flashing Keychron V4 Firmware\nDESCRIPTION: This command builds and flashes the default ANSI layout firmware to the Keychron V4 keyboard. It assumes that the QMK build environment is properly configured and that the necessary tools for flashing (e.g., dfu-util) are installed. The keyboard must be in bootloader mode for flashing to succeed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keychron/v4/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake keychron/v4/ansi:default:flash\n```\n\n----------------------------------------\n\nTITLE: Disabling LED Animations in config.h\nDESCRIPTION: These directives in `config.h` disable specific LED animations for the Terrazzo keyboard. By commenting/uncommenting the `#define` directives, users can control which animations are included in the firmware, which helps manage firmware size. Disabled animations will not be available for selection on the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/terrazzo/readme.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n// #define DISABLE_TERRAZZO_EFFECT_STRIPES\n// #define DISABLE_TERRAZZO_EFFECT_DINO\n// #define DISABLE_TERRAZZO_EFFECT_OUTRUN\n#define DISABLE_TERRAZZO_EFFECT_PAC_DUDE\n#define DISABLE_TERRAZZO_EFFECT_HEART\n// #define DISABLE_TERRAZZO_EFFECT_WPM_CHART\n#define DISABLE_TERRAZZO_EFFECT_DOT\n```\n\n----------------------------------------\n\nTITLE: Running tests with debug messages enabled\nDESCRIPTION: This command executes all unit tests and enables debug messages, which are forwarded to `stderr`.  This helps in diagnosing issues during test execution.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/unit_testing.md#_snippet_3\n\nLANGUAGE: Makefile\nCODE:\n```\nmake test:all DEBUG=1\n```\n\n----------------------------------------\n\nTITLE: Building QMK Firmware for RAMA WORKS KARA\nDESCRIPTION: This snippet shows the command to build the QMK firmware for the RAMA WORKS KARA keyboard with the default keymap.  It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wilba_tech/rama_works_kara/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake wilba_tech/rama_works_kara:default\n```\n\n----------------------------------------\n\nTITLE: Building ScrabblePad Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the ScrabblePad keyboard using the QMK firmware build environment. It assumes that the QMK build environment is already set up and configured correctly. This is a make command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/donutcables/scrabblepad/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake donutcables/scrabblepad:default\n```\n\n----------------------------------------\n\nTITLE: Define Keyboard Layout: LAYOUT_tkl_iso_wkl\nDESCRIPTION: Defines a keyboard layout named `LAYOUT_tkl_iso_wkl`. This layout identifier can be used throughout the QMK firmware to reference and utilize this specific keyboard mapping.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/layouts/default/tkl_iso_wkl/readme.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n# tkl_iso_wkl\n\n    LAYOUT_tkl_iso_wkl\n```\n\n----------------------------------------\n\nTITLE: Building QMK Firmware for nt210\nDESCRIPTION: This command builds the QMK firmware for the nt210 keyboard using the default keymap. It requires a properly set up QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/evyd13/nt210/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake evyd13/nt210:default\n```\n\n----------------------------------------\n\nTITLE: Building stello65 firmware with QMK\nDESCRIPTION: This command builds the default firmware for the stello65/beta keyboard using the QMK build environment. It compiles the keymap and other necessary files to create a firmware image that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/stello65/beta/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake stello65/beta:default\n```\n\n----------------------------------------\n\nTITLE: Building 30wer Keyboard Firmware using QMK\nDESCRIPTION: This snippet shows how to build the default firmware for the 30wer keyboard using the QMK build environment. It assumes that the QMK build environment is already set up. The command `make 30wer:default` compiles the firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/30wer/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake 30wer:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Alas Keyboard via CLI\nDESCRIPTION: This command flashes a specific keymap onto the Alas keyboard using the QMK command-line interface. Replace `<keymap>` with the desired keymap name. Requires the keyboard to be in DFU mode or bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/alas/readme.md#_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nmake alas:<keymap>:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing the luckycat70 keyboard firmware\nDESCRIPTION: This command flashes the compiled firmware onto the luckycat70 keyboard. It requires the build environment to be properly configured and the keyboard to be connected to the computer.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mokey/luckycat70/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake mokey/luckycat70:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware for TX Roundup Pad (QMK)\nDESCRIPTION: This command flashes the compiled firmware to the TX Roundup Pad using the QMK build environment. It uploads the firmware to the device, making it ready for use.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/viktus/tx_roundup_pad/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake viktus/tx_roundup_pad:default:flash\n```\n\n----------------------------------------\n\nTITLE: Defining Breathing Period in QMK config.h\nDESCRIPTION: This code snippet defines the length of one backlight \"breath\" in seconds in QMK firmware. This setting is configured in the `config.h` file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/config_options.md#_snippet_24\n\nLANGUAGE: c\nCODE:\n```\n#define BREATHING_PERIOD 6\n```\n\n----------------------------------------\n\nTITLE: Building ErgoStrafer RGB firmware\nDESCRIPTION: This command builds the default firmware for the ErgoStrafer RGB keyboard using the QMK build environment.  It requires a properly configured QMK build environment. The output is the compiled firmware ready to be flashed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/custommk/ergostrafer_rgb/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake custommk/ergostrafer_rgb:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Kaly42 Keyboard Firmware with QMK\nDESCRIPTION: This command builds and flashes the default firmware to the Kaly42 keyboard using the QMK build environment. It assumes the QMK environment is configured and the keyboard is connected in a flashable state. This command simplifies the process of updating the keyboard's firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kaly/kaly42/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake kaly/kaly42:default:flash\n```\n\n----------------------------------------\n\nTITLE: Enabling Mechanical Lock Switch Support in QMK - C\nDESCRIPTION: This snippet shows how to enable support for mechanical lock switches in QMK by defining two macros in the `config.h` file. It's important to note that this is only relevant for keyboards with physical lock switches like Alps SKCL Lock. Using the regular keycodes is generally recommended.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/faq_keymap.md#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n#define LOCKING_SUPPORT_ENABLE\n#define LOCKING_RESYNC_ENABLE\n```\n\n----------------------------------------\n\nTITLE: Compiling S65-PLUS Firmware\nDESCRIPTION: This command compiles the default keymap for the S65-PLUS keyboard using the QMK build environment. It assumes that the QMK build environment has been properly set up according to the QMK documentation. The compiled firmware can then be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/sentraq/s65_plus/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake sentraq/s65_plus:default\n```\n\n----------------------------------------\n\nTITLE: Building Signum 3.0 Firmware with Elite-C\nDESCRIPTION: This command builds the firmware for the Signum 3.0 keyboard using the Elite-C microcontroller and the default keymap. It assumes that the QMK build environment is already set up correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/signum/3_0/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake signum/3_0/elitec:default\n```\n\n----------------------------------------\n\nTITLE: Making Firmware for Perk60 ISO Rev A\nDESCRIPTION: This snippet provides the command to compile the default keymap for the Perk60 ISO Rev A keyboard using the QMK build environment. It assumes the QMK build environment has already been set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/4pplet/perk60_iso/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake 4pplet/perk60_iso/rev_a:default\n```\n\n----------------------------------------\n\nTITLE: Navigating to QMK Firmware Directory\nDESCRIPTION: This shell command changes the current directory to the top-level directory of the QMK firmware repository. This is a necessary step before building the firmware for the Zygomorph keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/rgbkb/zygomorph/keymaps/default/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n$ cd qmk_firmware\n```\n\n----------------------------------------\n\nTITLE: Flashing Junco Keyboard (Left Half)\nDESCRIPTION: These commands flash the left half of the Junco keyboard with the default keymap using UF2 bootloader. It requires a QMK build environment and the QMK CLI tool, or the make command can be used directly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/junco/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# For flashing the left half...\nmake junco:default:uf2-split-left\n# or the qmk cli equivalent:\nqmk flash -kb junco --keymap default -bl uf2-split-left\n```\n\n----------------------------------------\n\nTITLE: Building Corin Firmware with QMK\nDESCRIPTION: This snippet demonstrates how to build the firmware for the Corin keyboard using the QMK Firmware build environment. It assumes the user has already set up the build environment as described in the QMK documentation. The command compiles the firmware using the default keymap for the Corin keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/longnald/corin/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake longnald/corin:default\n```\n\n----------------------------------------\n\nTITLE: Building the bobpad keyboard\nDESCRIPTION: This command builds the firmware for the bobpad keyboard with the default keymap.  It compiles the source code and prepares the firmware for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/bobpad/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake bobpad:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Q4Z keyboard firmware (QMK)\nDESCRIPTION: This command flashes the built firmware to the Q4Z keyboard. It assumes the keyboard is connected and in the correct bootloader mode. Requires a configured QMK build environment and appropriate flashing tools.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/p3d/q4z/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake p3d/q4z:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building h101 Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the hineybush/h101 keyboard. It requires a properly configured QMK build environment. The command compiles the keyboard's keymap and firmware into a .hex file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/hineybush/h101/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake hineybush/h101:default\n```\n\n----------------------------------------\n\nTITLE: Making Ortho48v2 with QMK\nDESCRIPTION: This command builds the default keymap for the Ortho48v2 keyboard using the QMK firmware build environment. It requires the QMK build environment to be properly set up. The output will be a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cannonkeys/ortho48v2/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake cannonkeys/ortho48v2:default\n```\n\n----------------------------------------\n\nTITLE: Building BKS65 Solder QMK Firmware\nDESCRIPTION: This snippet shows the command to build the default keymap for the BKS65 Solder keyboard using the QMK build environment.  It requires the QMK build environment to be set up.  The command compiles the firmware and generates a .hex file suitable for flashing to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/fjlabs/bks65solder/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake fjlabs/bks65solder:default\n```\n\n----------------------------------------\n\nTITLE: Flashing linworks/favepada Firmware\nDESCRIPTION: This command builds and flashes the default firmware for the linworks/favepada keyboard. It requires a properly set up QMK build environment and a connected keyboard in flashing mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/linworks/favepada/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake linworks/favepada:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing with bootloadHID CLI via command line\nDESCRIPTION: This snippet shows the command for flashing a keyboard using the `bootloadHID` command-line tool. Replace `<filename>` with the `.hex` file path. The `-r` option initiates a reset after flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/flashing.md#_snippet_11\n\nLANGUAGE: Shell\nCODE:\n```\nbootloadHID -r <filename>\n```\n\n----------------------------------------\n\nTITLE: Flashing Zoom87 Firmware\nDESCRIPTION: This command builds and flashes the QMK firmware to the Zoom87 keyboard using the default keymap. It requires the QMK build environment to be properly configured and a suitable flashing tool (e.g., QMK Toolbox) to be installed and accessible.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/meletrix/zoom87/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake meletrix/zoom87:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing the ortho5by12 Firmware\nDESCRIPTION: This command flashes the compiled firmware onto the ortho5by12 keyboard. It requires a properly configured flashing environment and a connected programmer. It uses the QMK build system to flash the firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ortho5by12/readme.md#_snippet_1\n\nLANGUAGE: makefile\nCODE:\n```\nmake ortho5by12:default:flash\n```\n\n----------------------------------------\n\nTITLE: Styled Hint Block (Warning) in Markdown\nDESCRIPTION: This snippet shows how to create a warning hint block in QMK documentation using markdown.  This is achieved by using the `::: warning` syntax.  This block is typically used to highlight important information or potential issues.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/documentation_best_practices.md#_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n::: warning\nThis is important\n:::\n```\n\n----------------------------------------\n\nTITLE: Flashing the Aswagata Keymap (QMK)\nDESCRIPTION: This command builds and flashes the default keymap for the SyenaKeyboards Aswagata macropad using the QMK Firmware build environment. It requires the QMK build environment and necessary flashing tools to be installed. The command combines the build and flash steps into a single operation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/syenakeyboards/aswagata/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake syenakeyboards/aswagata:default:flash\n```\n\n----------------------------------------\n\nTITLE: Entering Bootloader via Shell Command\nDESCRIPTION: This command sends the 'boot' command to the keyboard's serial port to trigger the bootloader.  It assumes the keyboard is listening for commands on the specified serial port. The command requires access to the keyboard's serial port.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/converter/xmk/readme.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\necho \"boot\" > /dev/ttyACM0\n```\n\n----------------------------------------\n\nTITLE: Matrix Diagram for Matrix Lab 8XV1.2 OG\nDESCRIPTION: This snippet is a visual representation (matrix diagram) of the key layout for the Matrix Lab 8XV1.2 OG keyboard.  It shows the matrix coordinates (row and column) assigned to each key. This information is crucial for configuring the keymap in QMK firmware, as it defines how each physical key press translates to a specific character or function.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/matrix/m12og/rev1/matrix_diagram.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n┌───┐   ┌───┬───┬───┬───┐ ┌───┬───┬───┬───┐ ┌───┬───┬───┬───┐┌───┬───┬───┐\n│00 │   │01 │02 │03 │04 │ │05 │06 │07 │08 │ │09 │0A │0B │0C ││0D │0E │0F │\n└───┘   └───┴───┴───┴───┘ └───┴───┴───┴───┘ └───┴───┴───┴───┘└───┴───┴───┘\n┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───────┐┌───┬───┬───┐\n│10 │11 │12 │13 │14 │15 │16 │17 │18 │19 │1A │1B │1C │2D     ││3D │1E │1F │\n├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─────┤├───┼───┼───┤\n│20   │21 │22 │23 │24 │25 │26 │27 │28 │29 │2A │2B │2C │1D   ││3E │2E │2F │\n├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴─────┤└───┴───┴───┘\n│30    │31 │32 │33 │34 │35 │36 │37 │38 │39 │3A │3B │3C      │\n├──────┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴────────┤    ┌───┐\n│40      │41 │42 │43 │44 │45 │46 │47 │48 │49 │4A │4B        │    │4C │\n├─────┬──┴┬──┴──┬┴───┴───┴───┴───┴───┴───┴──┬┴───┴┬───┬─────┤┌───┼───┼───┐\n│50   │51 │52   │55                         │56   │57 │58   ││4D │4E │3F │\n└─────┴───┴─────┴───────────────────────────┴─────┴───┴─────┘└───┴───┴───┘\n Tsangan or WKL bottom row\n```\n\n----------------------------------------\n\nTITLE: Flashing the Left Side of Momoka Ergo\nDESCRIPTION: This command flashes the QMK firmware onto the left side of the Momoka Ergo keyboard using the DFU bootloader in split mode.  It assumes that the keyboard is connected and recognized by the DFU tool. The `default` keymap is used.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/momoka_ergo/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake momoka_ergo:default:dfu-split-left\n```\n\n----------------------------------------\n\nTITLE: Building Default Firmware for ZTBoards After Keyboard\nDESCRIPTION: This command builds the default QMK firmware for the ZTBoards After keyboard.  It requires a properly configured QMK build environment.  The output is a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ztboards/after/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake ztboards/after:default\n```\n\n----------------------------------------\n\nTITLE: Building the Game Roy ADVANCE Firmware\nDESCRIPTION: This command builds the default firmware for the Game Roy ADVANCE keyboard. It requires a properly configured QMK build environment. The output will be a .hex or .bin file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keystonecaps/gameroyadvance/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake keystonecaps/gameroyadvance:default\n```\n\n----------------------------------------\n\nTITLE: Flashing 3dortho14u with Make\nDESCRIPTION: This command compiles and flashes the default keymap for the 3dortho14u/rev1 keyboard. It relies on the QMK make system and appropriate flashing tools to be installed and configured. It requires a connected keyboard in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/3dortho14u/rev1/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake 3dortho14u/rev1:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Zen Keyboard Firmware for Proton-C\nDESCRIPTION: This command builds the default firmware for the Zen rev2 keyboard, specifically targeting the Proton-C controller. It converts the firmware to be compatible with the Proton-C using the CONVERT_TO flag.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/rgbkb/zen/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake rgbkb/zen/rev2:default CONVERT_TO=proton_c\n```\n\n----------------------------------------\n\nTITLE: Building KD83A BFG Edition Firmware\nDESCRIPTION: This command builds the default firmware for the KD83A BFG Edition keyboard. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/darkproject/kd83a_bfg_edition/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake darkproject/kd83a_bfg_edition:default\n```\n\n----------------------------------------\n\nTITLE: Flashing the Unison Keyboard Firmware\nDESCRIPTION: This command flashes the default keymap for the Unison keyboard to the device. This requires the QMK build environment and a connected Unison keyboard in flashing mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/unison/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake unison:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building experimental split_common HelixPico Firmware - Makefile\nDESCRIPTION: This snippet provides instructions on how to build the HelixPico keyboard firmware using the experimental split_common configuration using the `make` command. The split common configuration uses the `sc` suffix.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/helix/pico/keymaps/default/readme.md#_snippet_2\n\nLANGUAGE: Makefile\nCODE:\n```\n$ make helix/pico/sc:default\n```\n\n----------------------------------------\n\nTITLE: Defining Split Hand Matrix Grid Low is Left\nDESCRIPTION: If you define `#define SPLIT_HAND_MATRIX_GRID_LOW_IS_LEFT`, it is determined to be left when the level is low. Used in conjunction with `#define SPLIT_HAND_MATRIX_GRID <out_pin>,<in_pin>`\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/config_options.md#_snippet_89\n\nLANGUAGE: C\nCODE:\n```\n#define SPLIT_HAND_MATRIX_GRID_LOW_IS_LEFT\n```\n\n----------------------------------------\n\nTITLE: Defining Keyboard Layout: tkl_f13_ansi_split_bs_rshift\nDESCRIPTION: This code snippet defines a keyboard layout named `LAYOUT_tkl_f13_ansi_split_bs_rshift`. It's likely used to configure key mappings and physical arrangement for a specific keyboard within the QMK firmware. This is likely used in a keymap file to assign specific functions to each key.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/layouts/community/tkl_f13_ansi_split_bs_rshift/readme.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nLAYOUT_tkl_f13_ansi_split_bs_rshift\n```\n\n----------------------------------------\n\nTITLE: Navigating to Keymap Directory using Command Line\nDESCRIPTION: This command navigates the user to their personal keymap directory within the QMK firmware repository. It assumes the user is starting from the root directory of the QMK repository.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/splitkb/aurora/sofle_v2/keymaps/default/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd ./keyboards/splitkb/aurora/sofle_v2/keymaps/my_personal_keymap\n```\n\n----------------------------------------\n\nTITLE: Building the XS60 Soldered Firmware\nDESCRIPTION: This command builds the default keymap for the XS60 soldered keyboard.  It requires a properly set up QMK build environment. The output will be a firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/xelus/xs60/soldered/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake xelus/xs60/soldered:default\n```\n\n----------------------------------------\n\nTITLE: Modifying Linker Script for EEPROM Emulation\nDESCRIPTION: This patch modifies the linker script `MKL26Z64.ld` to define memory regions for EEPROM emulation. It adjusts the `flash` region length and adds a new `eeprom_emu` region. The `__eeprom_workarea_start__`, `__eeprom_workarea_size__`, and `__eeprom_workarea_end__` symbols are also defined.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/input_club/ergodox_infinity/MEMO.txt#_snippet_3\n\nLANGUAGE: patch\nCODE:\n```\n--- ../../tmk_core/tool/chibios/chibios/os/common/ports/ARMCMx/compilers/GCC/ld/MKL26Z64.ld     2015-10-15 09:08:58.732904304 +0900\n+++ ld/MKL26Z64.ld      2015-10-15 08:48:06.430215496 +0900\n@@ -27,7 +27,8 @@\n {\n   flash0   :  org = 0x00000000,  len = 0xc0\n   flashcfg :  org = 0x00000400,  len = 0x10\n-  flash    :  org = 0x00000410,  len = 64k - 0x410\n+  flash    :  org = 0x00000410,  len = 62k - 0x410\n+  eeprom_emu : org = 0x0000F800, len = 2k\n   ram      :  org = 0x1FFFF800,  len = 8k\n }\n \n@@ -35,6 +36,10 @@\n __ram_size__            = LENGTH(ram);\n __ram_end__             = __ram_start__ + __ram_size__;\n \n+__eeprom_workarea_start__ = ORIGIN(eeprom_emu);\n+__eeprom_workarea_size__  = LENGTH(eeprom_emu);\n+__eeprom_workarea_end__   = __eeprom_workarea_start__ + __eeprom_workarea_size__;\n+\n SECTIONS\n {\n   . = 0;\n```\n\n----------------------------------------\n\nTITLE: Creating a ILI9486 Waveshare Device Instance (C)\nDESCRIPTION: This code snippet shows how to create an instance of the ILI9486 Waveshare display device in firmware using the `qp_ili9486_make_spi_waveshare_device` function. This variant is specifically for the Waveshare module with a quirky SPI->Parallel converter. The function takes parameters for panel dimensions, SPI pins (chip select, data/command, reset), SPI divisor, and SPI mode. The returned device handle is required for subsequent drawing operations. Requires the `ili9486_spi` driver to be enabled.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/quantum_painter.md#_snippet_15\n\nLANGUAGE: c\nCODE:\n```\npainter_device_t qp_ili9486_make_spi_waveshare_device(uint16_t panel_width, uint16_t panel_height, pin_t chip_select_pin, pin_t dc_pin, pin_t reset_pin, uint16_t spi_divisor, int spi_mode);\n```\n\n----------------------------------------\n\nTITLE: Building Krush65 Solder Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the Krush65 solder keyboard. It requires QMK build environment to be set up.  The output is the compiled firmware ready to be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/sawnsprojects/krush/krush65/solder/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake sawnsprojects/krush65/solder:default\n```\n\n----------------------------------------\n\nTITLE: Setting LED control register for Mono - IS31FL3736\nDESCRIPTION: Configures the LED control registers for a single single-color LED. It takes the LED index and a boolean value to enable or disable the LED. The changes are not applied immediately; `is31fl3736_update_led_control_registers()` must be called afterward.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/is31fl3736.md#_snippet_6\n\nLANGUAGE: c\nCODE:\n```\nvoid is31fl3736_set_led_control_register(uint8_t index, bool value)\n```\n\n----------------------------------------\n\nTITLE: Building TKC1800 Firmware with Make\nDESCRIPTION: This command builds the default firmware for the TKC1800 keyboard using the QMK build environment. It requires the QMK build environment to be set up correctly, as described in the provided documentation links.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/tkc/tkc1800/readme.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmake tkc/tkc1800:default\n```\n\n----------------------------------------\n\nTITLE: Enabling LED Matrix without EEPROM Persistence (C)\nDESCRIPTION: This function enables the LED matrix without writing the state to EEPROM. This change is temporary and will not persist across resets.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/led_matrix.md#_snippet_12\n\nLANGUAGE: C\nCODE:\n```\nvoid led_matrix_enable_noeeprom(void)\n```\n\n----------------------------------------\n\nTITLE: Creating and Pushing a New Development Branch\nDESCRIPTION: These Git commands create a new development branch named 'dev_branch', check it out, and push it to your fork. The `--set-upstream` option configures the branch for future `git push` and `git pull` commands, linking the local branch to the remote branch.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/newbs_git_using_your_master_branch.md#_snippet_3\n\nLANGUAGE: Git\nCODE:\n```\ngit checkout -b dev_branch\ngit push --set-upstream origin dev_branch\n```\n\n----------------------------------------\n\nTITLE: DFU Programmer Error\nDESCRIPTION: This error message indicates that the DFU programmer is unable to detect the keyboard. It usually means the keyboard is not in bootloader mode or is not properly connected.  Check the provided link for troubleshooting steps.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/gboards/gergoplex/readme.md#_snippet_2\n\nLANGUAGE: Text\nCODE:\n```\ndfu-programmer: no device present.\nERROR: Bootloader not found. Trying again in 5s.\n```\n\n----------------------------------------\n\nTITLE: Creating a ILI9341 Device Instance (C)\nDESCRIPTION: This code snippet shows how to create an instance of the ILI9341 display device in firmware using the `qp_ili9341_make_spi_device` function. The function takes parameters for panel dimensions, SPI pins (chip select, data/command, reset), SPI divisor, and SPI mode. The returned device handle is required for subsequent drawing operations. Requires the `ili9341_spi` driver to be enabled.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/quantum_painter.md#_snippet_11\n\nLANGUAGE: c\nCODE:\n```\npainter_device_t qp_ili9341_make_spi_device(uint16_t panel_width, uint16_t panel_height, pin_t chip_select_pin, pin_t dc_pin, pin_t reset_pin, uint16_t spi_divisor, int spi_mode);\n```\n\n----------------------------------------\n\nTITLE: Building ALETH42 Firmware (QMK)\nDESCRIPTION: This snippet demonstrates how to build the default firmware for the ALETH42 keyboard using the QMK build environment.  It assumes that the QMK build environment has been properly set up according to the QMK documentation. The command will compile the firmware and generate a .hex file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/25keys/aleth42/rev0/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake aleth42:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Nemui65 Firmware with QMK\nDESCRIPTION: This command compiles and flashes the QMK firmware to the Nemui65 keyboard. It requires a correctly configured QMK build environment and a connected keyboard in bootloader mode. It depends on the `make` utility and `dfu-util` or similar flashing tools.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wuque/nemui65/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake wuque/nemui65:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building CandyBar Ortho Keyboard Firmware (Makefile)\nDESCRIPTION: This command builds the default keymap for the CandyBar Ortho keyboard using the QMK firmware build system. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/checkerboards/candybar_ortho/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake checkerboards/candybar_ortho:default\n```\n\n----------------------------------------\n\nTITLE: Flashing ogurec keyboard firmware\nDESCRIPTION: These `make` commands flash the QMK firmware onto the ogurec keyboard. The first flashes the default configuration, while the second flashes the configuration for right-sided PM placement. A bootloader must be present on the Pro Micro for flashing to succeed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/drhigsby/ogurec/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake drhigsby/ogurec:default:flash\n```\n\nLANGUAGE: make\nCODE:\n```\nmake drhigsby/ogurec/right_pm:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Sol Keyboard Firmware with Make\nDESCRIPTION: This command builds the QMK firmware for the Sol keyboard, specifically the rev2 version with the default keymap. It requires a properly configured QMK build environment. The output is a .hex file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/rgbkb/sol/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake rgbkb/sol/rev2:default\n```\n\n----------------------------------------\n\nTITLE: Draw Text with Quantum Painter (C)\nDESCRIPTION: These are the function declarations for drawing text on the display using the Quantum Painter library. `qp_drawtext` draws text with the specified font, while `qp_drawtext_recolor` allows recoloring monochrome fonts.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/quantum_painter.md#_snippet_76\n\nLANGUAGE: c\nCODE:\n```\nint16_t qp_drawtext(painter_device_t device, uint16_t x, uint16_t y, painter_font_handle_t font, const char *str);\nint16_t qp_drawtext_recolor(painter_device_t device, uint16_t x, uint16_t y, painter_font_handle_t font, const char *str, uint8_t hue_fg, uint8_t sat_fg, uint8_t val_fg, uint8_t hue_bg, uint8_t sat_bg, uint8_t val_bg);\n```\n\n----------------------------------------\n\nTITLE: Making Dactyl Pro Micro with Default Configuration\nDESCRIPTION: This command compiles the firmware for the Dactyl Pro Micro keyboard using the default configuration. It is executed within the QMK firmware build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/dactyl_promicro/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake handwired/dactyl_promicro:default\n```\n\n----------------------------------------\n\nTITLE: Building Polly40 Keyboard Firmware\nDESCRIPTION: This command builds the firmware for the Polly40 keyboard with the default configuration. It assumes that the QMK build environment is already set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/polly40/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake handwired/polly40:default\n```\n\n----------------------------------------\n\nTITLE: Enabling OLED On/Off Status Synchronization\nDESCRIPTION: This definition enables transmitting the current OLED on/off status to the slave side of the split keyboard. It supports state (on/off state only) syncing.  It is defined in `config.h`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/split_keyboard.md#_snippet_20\n\nLANGUAGE: c\nCODE:\n```\n#define SPLIT_OLED_ENABLE\n```\n\n----------------------------------------\n\nTITLE: QMK Build Command\nDESCRIPTION: This command builds the QMK firmware for the specified IBM Model M keyboard configuration.  It requires the QMK build environment to be set up beforehand. The 'default' target specifies the keymap to use.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ibm/model_m/mschwingen/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake ibm/model_m/mschwingen/led_wired:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Creek70 Keyboard Firmware\nDESCRIPTION: This command flashes the compiled QMK firmware onto the Creek70 keyboard. It uses the `make` command in conjunction with the `flash` target to upload the firmware to the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wuque/creek70/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake wuque/creek70:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Singa Keyboard Firmware (Make)\nDESCRIPTION: This command flashes the built firmware onto the Singa keyboard using the `make` command. It requires a correctly configured QMK build environment and a compatible flashing tool.  The target is `singa:default:flash`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/singa/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake singa:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing LUFA MassStorage Bootloader on Linux\nDESCRIPTION: This snippet demonstrates how to flash the LUFA MassStorage bootloader on Linux using the `dd` command. It bypasses the VFS layer to prevent firmware corruption due to write cache issues. The `seek=4` option skips the first 4 sectors of the virtual block device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/hhkb/yang/memo.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndd if=FLASH.bin of=<path of virtual block device> seek=4\n```\n\n----------------------------------------\n\nTITLE: Building the BTHLabs GeekPad Firmware\nDESCRIPTION: This snippet shows the command to build the default firmware for the BTHLabs GeekPad using the QMK build environment.  It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/bthlabs/geekpad/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake bthlabs/geekpad:default\n```\n\n----------------------------------------\n\nTITLE: Setting LED control register for RGB - IS31FL3736\nDESCRIPTION: Configures the LED control registers for a single RGB LED. It takes the LED index and boolean values for enabling or disabling the red, green, and blue channels. The changes are not applied immediately; `is31fl3736_update_led_control_registers()` must be called afterward.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/is31fl3736.md#_snippet_5\n\nLANGUAGE: c\nCODE:\n```\nvoid is31fl3736_set_led_control_register(uint8_t index, bool red, bool green, bool blue)\n```\n\n----------------------------------------\n\nTITLE: Navigating to QMK Firmware Directory\nDESCRIPTION: This snippet shows the command to navigate to the top directory of the QMK Firmware project using the command line.  This is the starting point for compiling the firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/helix/rev2/keymaps/default/readme_jp.md#_snippet_5\n\nLANGUAGE: makefile\nCODE:\n```\n$ cd qmk_firmware\n```\n\n----------------------------------------\n\nTITLE: Building Ergosplit44 Firmware\nDESCRIPTION: This command builds the default firmware for the Ergosplit44 keyboard. It requires a correctly set up QMK build environment. The output will be a .hex or .bin file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/marek128b/ergosplit44/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake handwired/marek128b/ergosplit44:default\n```\n\n----------------------------------------\n\nTITLE: Disabling JTAG in QMK config.h\nDESCRIPTION: This code snippet demonstrates how to prevent JTAG from being disabled by adding `#define NO_JTAG_DISABLE` to the `config.h` file. This is useful for debugging purposes when you need to maintain JTAG access after the keyboard starts up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/faq_misc.md#_snippet_2\n\nLANGUAGE: C\nCODE:\n```\n#define NO_JTAG_DISABLE\n```\n\n----------------------------------------\n\nTITLE: Flashing Dizzy40 Firmware with Make\nDESCRIPTION: This command flashes the compiled firmware onto the Dizzy40 keyboard using the QMK build environment and a compatible flashing tool. It requires the keyboard to be in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kb_elmo/dizzy40/readme.md#_snippet_1\n\nLANGUAGE: Make\nCODE:\n```\nmake kb_elmo/dizzy40:default:flash\n```\n\n----------------------------------------\n\nTITLE: Enabling DAC Channels and Timer for Additive DAC - C\nDESCRIPTION: This snippet demonstrates how to enable the DAC channels (DAC1_CH1 and DAC1_CH2) and Timer 6 (TIM6) in the `mcuconf.h` file for the additive DAC driver. This is required for the `dac_additive` driver to function correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/audio.md#_snippet_4\n\nLANGUAGE: c\nCODE:\n```\n#pragma once\n\n#include_next <mcuconf.h>\n\n#undef STM32_DAC_USE_DAC1_CH1 // [!code focus]\n#define STM32_DAC_USE_DAC1_CH1 TRUE // [!code focus]\n#undef STM32_DAC_USE_DAC1_CH2 // [!code focus]\n#define STM32_DAC_USE_DAC1_CH2 TRUE // [!code focus]\n#undef STM32_GPT_USE_TIM6 // [!code focus]\n#define STM32_GPT_USE_TIM6 TRUE // [!code focus]\n```\n\n----------------------------------------\n\nTITLE: Building NavPad 1.0 Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the NavPad 1.0 keyboard using the QMK build environment.  It assumes that the QMK build environment is already set up. The resulting firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/yushakobo/navpad/10/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake yushakobo/navpad/10:default\n```\n\n----------------------------------------\n\nTITLE: Set Unicode Input Mode Keyboard Callback - C\nDESCRIPTION: This function is a keyboard-level callback that's invoked when the input mode is changed. It takes the new input mode as a `uint8_t` argument.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/unicode.md#_snippet_14\n\nLANGUAGE: C\nCODE:\n```\nvoid unicode_input_mode_set_kb(uint8_t input_mode)\n```\n\n----------------------------------------\n\nTITLE: Include Image Header in C\nDESCRIPTION: After compiling the image into the firmware, the image's header file must be included in the `keymap.c` file to access the image data.  This allows the image to be used with Quantum Painter functions.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/quantum_painter.md#_snippet_61\n\nLANGUAGE: c\nCODE:\n```\n#include \"my_image.qgf.h\"\n```\n\n----------------------------------------\n\nTITLE: Building WM1 Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the Wolfmark Club WM1 keyboard using the QMK build environment. It assumes that the build environment is already set up according to the QMK documentation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wolfmarkclub/wm1/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake wolfmarkclub/wm1:default\n```\n\n----------------------------------------\n\nTITLE: STM32 USART Configuration options (Full-Duplex) in config.h (C)\nDESCRIPTION: This code snippet defines additional configuration options for STM32 microcontrollers regarding full-duplex setup.  This may include options for swapping the TX/RX pins in software and setting the alternate function of the pins. These settings need to be adjusted based on the specific STM32 MCU being used.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/serial.md#_snippet_9\n\nLANGUAGE: c\nCODE:\n```\n#define SERIAL_USART_PIN_SWAP      // Swap TX and RX pins if keyboard is master halve. (Only available on some MCUs)\n#define USART1_REMAP               // Remap USART TX and RX pins on STM32F103 MCUs, see table below.\n#define SERIAL_USART_TX_PAL_MODE 7 // Pin \"alternate function\", see the respective datasheet for the appropriate values for your MCU. default: 7\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for Nebula12B\nDESCRIPTION: This command compiles the QMK firmware for the Nebula12B keyboard with the default keymap. Requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/spaceholdings/nebula12b/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake spaceholdings/nebula12b:default\n```\n\n----------------------------------------\n\nTITLE: Building Boaty Firmware\nDESCRIPTION: This command builds the default firmware for the Boaty keyboard. It uses the QMK make system to compile the firmware. Requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/jels/boaty/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake jels/boaty:default\n```\n\n----------------------------------------\n\nTITLE: Defining I2C Usage in QMK\nDESCRIPTION: This defines whether to use I2C instead of Serial for communication. The serial transport is supported on ARM, while I2C is typically used on AVR-based keyboards. This configuration impacts how the keyboard halves communicate in a split keyboard setup.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/config_options.md#_snippet_92\n\nLANGUAGE: c\nCODE:\n```\n#define USE_I2C\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for EnvKB 60F\nDESCRIPTION: This command builds the default firmware for the EnvKB 60F keyboard. It requires a properly set up QMK build environment. The output is a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/enviousdesign/60f/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake enviousdesign/60f:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Starry FRL Firmware\nDESCRIPTION: This command compiles and flashes the default firmware for the Starry FRL keyboard. It depends on a configured QMK build environment and a connected keyboard in bootloader mode. The uf2 file must be appropriate for your board version.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/salane/starryfrl/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake salane/starryfrl:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing the PHAC Keyboard\nDESCRIPTION: This command flashes the compiled firmware to the PHAC keyboard. It requires a QMK build environment and a connected PHAC keyboard in bootloader mode. The command uploads the firmware to the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/phdesign/phac/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake phdesign/phac:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing M65 rev3 firmware with make\nDESCRIPTION: This command builds and flashes the default firmware for the M65 keyboard revision 3 using the QMK make system. It compiles the source code, generates a firmware image, and then flashes it to the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mlego/m65/readme.md#_snippet_5\n\nLANGUAGE: Makefile\nCODE:\n```\nmake mlego/m65/rev3:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building HHKB ANSI Default Keymap with Make\nDESCRIPTION: This command builds the default keymap for the HHKB ANSI layout using the `make` command. It requires a properly configured QMK build environment. The output is a firmware file that can be flashed to the HHKB Alternate Controller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/hhkb/ansi/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake hhkb/ansi:default\n```\n\n----------------------------------------\n\nTITLE: Installing nu-isp-cli tool\nDESCRIPTION: This command installs the `nu-isp-cli` tool using `cargo`, the Rust package manager. `nu-isp-cli` is an alternative flashing tool, offering more features than `nuvoisp`, including support for .hex files. Requires Rust and Cargo to be installed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ducky/one2sf/1967st/readme.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncargo install nu-isp-cli\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Keycodes in keymap.c (Not Recommended)\nDESCRIPTION: This code snippet shows how custom keycodes are traditionally defined and handled in the `keymap.c` file within QMK firmware. It demonstrates the use of an `enum` to define the keycodes and a `process_record_user` function to handle their behavior, specifically sending strings when the key is pressed. This approach is discouraged for Configurator compatibility.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/configurator_default_keymaps.md#_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nenum custom_keycodes {\n    CUSTOM_1 = SAFE_RANGE,\n    CUSTOM_2,\n    CUSTOM_3\n};\n...\nbool process_record_user(uint16_t keycode, keyrecord_t *record) {\n    switch(keycode) {\n        case CUSTOM_1:\n            if (record->event.pressed) {\n                SEND_STRING(\"This is custom keycode #1.\");\n            }\n            return false;\n        case CUSTOM_2:\n            if (record->event.pressed) {\n                SEND_STRING(\"This is custom keycode #2.\");\n            }\n            return false;\n        case CUSTOM_3:\n            if (record->event.pressed) {\n                SEND_STRING(\"This is custom keycode #3.\");\n            }\n            return false;\n    }\n    return true;\n};\n```\n\n----------------------------------------\n\nTITLE: Building DC01 Right Half Firmware (Makefile)\nDESCRIPTION: This snippet shows how to build the default firmware for the right half of the DC01 keyboard using the QMK build environment.  It requires a configured QMK build environment. The command compiles the firmware and prepares it for flashing to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/dc01/right/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake dc01/right:default\n```\n\n----------------------------------------\n\nTITLE: Building WT65-G Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the wilba.tech WT65-G keyboard using the QMK build environment. It requires a correctly set up QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wilba_tech/wt65_g/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake wilba_tech/wt65_g:default\n```\n\n----------------------------------------\n\nTITLE: Setting Keyboard Configuration (Pro Micro)\nDESCRIPTION: This command sets the keyboard configuration for the QMK build environment to the Redox keyboard revision 1 using the Pro Micro microcontroller. This step is crucial for the QMK build system to correctly identify and build the firmware for the specific keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/redox/rev1/readme.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nqmk config user.keyboard=redox/rev1\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware to miniZone Keyboard (QMK)\nDESCRIPTION: This command is used to flash the compiled QMK firmware onto the miniZone keyboard. This command depends on the QMK build environment being properly set up and the keyboard being in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/takashicompany/minizone/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake takashicompany/minizone:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Buff75 Firmware with QMK\nDESCRIPTION: This command flashes the built firmware to the Buff75 keyboard using the QMK build environment. It depends on the keyboard being in a flashable state and the QMK build environment being properly configured. This assumes you have a bootloader configured.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/herevoland/buff75/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake herevoland/buff75:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building xox70 keyboard firmware\nDESCRIPTION: This command builds the QMK firmware for the xox70 keyboard with the default keymap. It requires the QMK build environment to be set up correctly. The resulting firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mokey/xox70/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake mokey/xox70:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Kira 80 Firmware\nDESCRIPTION: This command flashes the default firmware onto the Kira 80 keyboard. It requires a configured QMK build environment and a connected keyboard in bootloader mode. The `flash` target programs the compiled firmware onto the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kira/kira80/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake kira/kira80:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Prime_R Keyboard Firmware\nDESCRIPTION: This snippet shows the command to build the default firmware for the Prime_R keyboard using the QMK build environment. It assumes that the build environment is properly set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/primekb/prime_r/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake primekb/prime_r:default\n```\n\n----------------------------------------\n\nTITLE: Flashing EC660C QMK Firmware\nDESCRIPTION: This command flashes the compiled firmware to the EC660C keyboard. It assumes the keyboard is in a flashable state and that the build environment is correctly configured.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cipulot/ec_660c/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake cipulot/ec_660c:default:flash\n```\n\n----------------------------------------\n\nTITLE: Configuring De-Ghosting in config.h\nDESCRIPTION: This snippet shows how to configure de-ghosting settings for the IS31FL3733 LED driver by defining `IS31FL3733_SW_PULLUP` and `IS31FL3733_CS_PULLDOWN` in your `config.h` file.  These defines control the pull-up and pull-down resistor values on the `SWy` and `CSx` pins, respectively, to eliminate ghosting.  Refer to the datasheet for details on ghosting.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/is31fl3733.md#_snippet_2\n\nLANGUAGE: c\nCODE:\n```\n#define IS31FL3733_SW_PULLUP IS31FL3733_PUR_0_OHM\n#define IS31FL3733_CS_PULLDOWN IS31FL3733_PUR_0_OHM\n```\n\n----------------------------------------\n\nTITLE: Define Keyboard Layout Macro\nDESCRIPTION: Defines a macro named `LAYOUT_65_iso_split_bs`. This macro will likely be used within a keyboard firmware project to specify the physical arrangement and logical mapping of keys on a 65% keyboard with an ISO layout and a split backspace key. The exact definition of the macro is not present in this snippet.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/layouts/default/65_iso_split_bs/readme.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n# 65_iso_split_bs\n\n    LAYOUT_65_iso_split_bs\n```\n\n----------------------------------------\n\nTITLE: Building The Teleport TKL Firmware\nDESCRIPTION: This command builds the default QMK firmware for The Teleport TKL keyboard. It compiles the keymap and firmware code into a .hex file, which can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/teleport/tkl/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake teleport/tkl:default\n```\n\n----------------------------------------\n\nTITLE: Flashing I2C Scanner Keymap\nDESCRIPTION: These commands are used to flash the i2c_scanner keymap onto different microcontrollers using the QMK build system. The 'make' command compiles and flashes the specified keymap to the target device. Ensure the target matches your MCU and bootloader.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/onekey/keymaps/i2c_scanner/readme.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nmake handwired/onekey/elite_c:i2c_scanner:flash # also 32u4 + dfu bootloader\nmake handwired/onekey/promicro:i2c_scanner:flash\nmake handwired/onekey/teensy_2:i2c_scanner:flash\n\n# ChibiOS is currently 'best effort' and might not report accurate results\nmake handwired/onekey/proton_c:i2c_scanner:flash\n```\n\n----------------------------------------\n\nTITLE: Stream Pixel Data (C)\nDESCRIPTION: This snippet defines the `qp_pixdata` function, which streams raw pixel data to the display. It requires the number of native pixels to transfer, respecting the display panel's data alignment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/quantum_painter.md#_snippet_86\n\nLANGUAGE: c\nCODE:\n```\nbool qp_pixdata(painter_device_t device, const void *pixel_data, uint32_t native_pixel_count);\n```\n\n----------------------------------------\n\nTITLE: Building Timber Wolf Firmware (ISO)\nDESCRIPTION: This command builds the QMK firmware for the Timber Wolf keyboard with a TBR-B layout and an ISO configuration. It utilizes the `make` command with specific target parameters to compile the firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/metamechs/timberwolf/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake metamechs/timberwolf:b_iso\n```\n\n----------------------------------------\n\nTITLE: Compiling QMK Firmware for Plaid-Pad (default keymap)\nDESCRIPTION: This command compiles the QMK firmware for the Plaid-Pad keyboard with the default keymap. It requires a properly set up QMK build environment. The output is a .hex file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keycapsss/plaid_pad/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake keycapsss/plaid_pad:default\n// or\nqmk compile -kb keycapsss/plaid_pad -km default\n```\n\n----------------------------------------\n\nTITLE: Flashing H88 G2 Firmware\nDESCRIPTION: This command flashes the default firmware to the H88 G2 keyboard. It builds the firmware and then uses the appropriate flashing tool to upload it to the keyboard's microcontroller. A QMK build environment and the necessary flashing tools are required.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/hineybush/h88_g2/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake hineybush/h88_g2:default:flash\n```\n\n----------------------------------------\n\nTITLE: Defining Matrix Ghost Presence in QMK config.h\nDESCRIPTION: This code snippet defines whether the keyboard matrix has ghosting issues in QMK firmware.  This setting is configured in the `config.h` file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/config_options.md#_snippet_10\n\nLANGUAGE: c\nCODE:\n```\n#define MATRIX_HAS_GHOST\n```\n\n----------------------------------------\n\nTITLE: Compiling Sono1 Firmware\nDESCRIPTION: This command compiles the QMK firmware for the handwired/sono1 keyboard with the default keymap.  It assumes that the QMK build environment has been properly set up. The compiled firmware can then be flashed to the microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/sono1/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nqmk compile -kb handwired/sono1:default\n```\n\n----------------------------------------\n\nTITLE: Defining 96% ISO Layout - QMK\nDESCRIPTION: Defines a 96% ISO layout, providing a compact form factor with number pad in the ISO keyboard standard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/layouts/default/readme.md#_snippet_28\n\nLANGUAGE: plaintext\nCODE:\n```\n┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┐\n│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │\n├───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┴───┼───┼───┼───┼───┤\n│   │   │   │   │   │   │   │   │   │   │   │   │   │       │   │   │   │   │\n├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─────┼───┼───┼───┼───┤\n│     │   │   │   │   │   │   │   │   │   │   │   │   │     │   │   │   │   │\n├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┐    ├───┼───┼───┤   │\n│      │   │   │   │   │   │   │   │   │   │   │   │   │    │   │   │   │   │\n├────┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴───┴┬───┼───┼───┼───┼───┤\n│    │   │   │   │   │   │   │   │   │   │   │   │      │   │   │   │   │   │\n├────┼───┴┬──┴─┬─┴───┴───┴───┴───┴───┴──┬┴──┬┴──┬┴──┬───┼───┼───┼───┼───┤   │\n│    │    │    │                        │   │   │   │   │   │   │   │   │   │\n└────┴────┴────┴────────────────────────┴───┴───┴───┴───┴───┴───┴───┴───┴───┘\n```\n\n----------------------------------------\n\nTITLE: Building Keyboard Firmware with QMK\nDESCRIPTION: This command builds the firmware for a specific keyboard with the default keymap.  It requires the QMK build environment to be set up correctly and uses the 'make' command. The keyboard name must be substituted for '%KEYBOARD%'.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/data/templates/keyboard/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake %KEYBOARD%:default\n```\n\n----------------------------------------\n\nTITLE: Flashing the CB87v2 keyboard firmware with QMK\nDESCRIPTION: This command flashes the default firmware onto the CherryB Studio CB87v2 keyboard. It builds the firmware if it hasn't been already and then uses the appropriate flashing tool. This command requires a configured QMK build environment and a connected keyboard in a flashable state.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cherrybstudio/cb87v2/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake cherrybstudio/cb87v2:default:flash\n```\n\n----------------------------------------\n\nTITLE: 60% ANSI Tsangan Layout Diagram\nDESCRIPTION: Visualization of a 60% ANSI keyboard layout with a Tsangan bottom row (1.5u-1u-1.5u-7u-1.5u-1u-1.5u) using ASCII art. This layout uses different size keys in the bottom row for more customization. The diagram shows the specific Tsangan bottom row configuration.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/layouts/default/readme.md#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───────┐\n│   │   │   │   │   │   │   │   │   │   │   │   │   │       │\n├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─────┤\n│     │   │   │   │   │   │   │   │   │   │   │   │   │     │\n├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴─────┤\n│      │   │   │   │   │   │   │   │   │   │   │   │        │\n├──────┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴────────┤\n│        │   │   │   │   │   │   │   │   │   │   │          │\n├─────┬──┴┬──┴──┬┴───┴───┴───┴───┴───┴───┴──┬┴───┴┬───┬─────┤\n│     │   │     │                           │     │   │     │\n└─────┴───┴─────┴───────────────────────────┴─────┴───┴─────┘\n```\n\n----------------------------------------\n\nTITLE: Building Cajal Firmware with Default Layout (QMK)\nDESCRIPTION: This command builds the QMK firmware for the Cajal keyboard with the default (staggered) layout. It compiles the source code and creates a firmware file that can be flashed onto the keyboard.  It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/walletburner/cajal/readme.md#_snippet_0\n\nLANGUAGE: qmk\nCODE:\n```\nmake walletburner/cajal:default\n```\n\n----------------------------------------\n\nTITLE: Compiling Kimiko Rev2 Firmware with QMK\nDESCRIPTION: This command compiles the firmware for the Kimiko Rev2 keyboard using the QMK build environment. It specifies the keyboard layout (keycapsss/kimiko/rev2) and keymap (default). The resulting .hex file can then be flashed to the keyboard controller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keycapsss/kimiko/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nqmk compile -kb keycapsss/kimiko/rev2 -km default\n```\n\n----------------------------------------\n\nTITLE: Compiling Firmware for 3w6_2040 - QMK\nDESCRIPTION: This command compiles the firmware for the keycapsss/3w6_2040 keyboard with the default keymap.  It requires the QMK build environment to be set up. The output is a .uf2 file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keycapsss/3w6_2040/readme.md#_snippet_0\n\nLANGUAGE: QMK\nCODE:\n```\nqmk compile -kb keycapsss/3w6_2040 -km default\n```\n\n----------------------------------------\n\nTITLE: Keyboard Matrix Diagram\nDESCRIPTION: This diagram represents the keyboard matrix for the vanilla spacey keyboard. Each cell shows the matrix coordinates for the corresponding key. The diagram uses ASCII characters to create a visual representation of the keyboard layout and matrix wiring.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/p3d/spacey/matrix_diagram.md#_snippet_0\n\nLANGUAGE: ASCII\nCODE:\n```\n       ┌────────────────────────┬────────────────────────┬───────┐\n       │04                      │08                      │0D     │ Upper Spacebars\n       └────────────────────────┴────────────────────────┴───────┘\n      ┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───────┐   ┌───┐\n      │00 │01 │02 │03 │04 │05 │06 │07 │08 │09 │0A │0B │0C │0D     │   │43 │\n    ┌─┴───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼─────┬─┘   └───┘\n    │10   │11 │12 │13 │14 │15 │16 │17 │18 │19 │1A │1B │1C │1D   │\n   ┌┴─────┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┴────┬┘     ┌───┐\n   │20    │21 │22 │23 │24 │25 │26 │27 │28 │29 │2A │2B │2C      │      │2D │\n ┌─┴──────┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┴──────┬─┘  ┌───┼───┼───┐\n │30      │31 │32 │33 │34 │35 │36 │37 │38 │39 │3A │3B        │    │3C │3D │4D │\n┌┴───┬────┼───┴┬──┴─┬─┴───┴──┬┴───┴───┴─┬─┴──┬┴───┼────┬────┬┘    └───┴───┴───┘\n│40  │41  │42  │44  │45      │47        │48  │4A  │4B  │4C  │\n└────┴────┴────┴────┴────────┴──────────┴────┴────┴────┴────┘\n                    ┌────────────────────────┐\n                    │45                      │ 6.25u Spacebar\n                    └────────────────────────┘\n```\n\n----------------------------------------\n\nTITLE: Building Cradio Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the Cradio keyboard. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cradio/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake cradio:default\n```\n\n----------------------------------------\n\nTITLE: Building FLX Lodestone Keyboard Firmware\nDESCRIPTION: This command builds the default keymap for the FLX Lodestone keyboard using the QMK firmware. It assumes the QMK build environment is already set up. After successful compilation, the firmware can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/flx/lodestone/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake flx/lodestone:default\n```\n\n----------------------------------------\n\nTITLE: Building QMK Firmware\nDESCRIPTION: This command builds the QMK firmware for the Aster Ergo keyboard with the default keymap.  It requires the QMK build environment to be set up.  The output is a .hex or .bin file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/bahm/aster_ergo/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake bahm/aster_ergo:default\n```\n\n----------------------------------------\n\nTITLE: Building Dimpleplus Firmware - Makefile\nDESCRIPTION: This command compiles the Dimpleplus keyboard firmware using the QMK build environment. It specifies the keyboard layout as 'default'.  The command requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/lazydesigners/dimpleplus/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake lazydesigners/dimpleplus:default\n```\n\n----------------------------------------\n\nTITLE: Building Kepler-33 Keyboard Firmware\nDESCRIPTION: Builds the default firmware for the Kepler-33 keyboard proto using the QMK build environment. This command compiles the keyboard's keymap and firmware, preparing it for flashing onto the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kepler_33/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake kepler_33/proto:default\n```\n\n----------------------------------------\n\nTITLE: Flashing KK65 Firmware with Make\nDESCRIPTION: This command builds and flashes the default firmware for the KK65 keyboard. It requires a properly configured QMK build environment and a connected keyboard in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kk/65/readme.md#_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nmake kk/65:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building JN68M Keyboard Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the JN68M keyboard using the QMK build environment. It assumes that the QMK build environment has already been set up. The output is a firmware file that can be flashed to the JN68M keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/jn68m/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/jn68m:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Time80 Firmware (QMK)\nDESCRIPTION: This command flashes the compiled firmware onto the Time80 keyboard.  It assumes the keyboard is in a state ready to receive the firmware.  Requires the QMK build environment and appropriate flashing tools.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/foxlab/time80/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake foxlab/time80:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Crin Keyboard Firmware with Make\nDESCRIPTION: This command flashes the compiled QMK firmware to the Bachoo Crin keyboard with the default keymap. It builds and then flashes. The keyboard needs to be in bootloader mode for flashing to work.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/crin/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake crin:default:flash\n```\n\n----------------------------------------\n\nTITLE: Setting Container Runtime with Environment Variable\nDESCRIPTION: Manually specifies the container runtime to be used by setting the `RUNTIME` environment variable.  Defaults to docker if not set or if docker is detected, otherwise tries podman.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/getting_started_docker.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nRUNTIME=\"podman\" util/docker_build.sh keyboard:keymap:target\n```\n\n----------------------------------------\n\nTITLE: Building Keyboard Firmware with QMK\nDESCRIPTION: This command builds the firmware for the Wete R2 keyboard using the QMK build environment.  It specifies the keyboard layout (default) and initiates the compilation process. Requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/rmi_kb/wete/v2/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake rmi_kb/wete/v2:default\n```\n\n----------------------------------------\n\nTITLE: Making the firmware for FAve 65H\nDESCRIPTION: This command builds the QMK firmware for the FAve 65H keyboard with the default keymap. It requires that the QMK build environment is set up correctly. Ensure that you have followed the QMK documentation for setting up your environment before running this command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/linworks/fave65h/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake linworks/fave65h:default\n```\n\n----------------------------------------\n\nTITLE: Flashing the Ciel65 Keyboard\nDESCRIPTION: This command builds and flashes the default keymap for the Ciel65 keyboard. It requires the QMK build environment to be set up and the keyboard to be connected in a flashable state.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/chickenman/ciel65/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake chickenman/ciel65:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware for keyten Diablo - QMK\nDESCRIPTION: This command builds and flashes the default firmware for the keyten Diablo keyboard. It extends the build command by adding the ':flash' target, which programs the compiled firmware onto the keyboard's microcontroller. This also requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keyten/diablo/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake keyten/diablo:default:flash\n```\n\n----------------------------------------\n\nTITLE: Keyboard level OLED drawing function\nDESCRIPTION: This C code shows how keyboard designers should structure their OLED drawing routines to allow for keymap-level overrides. It checks if the user code has already handled the drawing and if not, runs the default keyboard drawing code.  It enables a hierarchical approach to OLED display customization.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/ChangeLog/20211127.md#_snippet_4\n\nLANGUAGE: c\nCODE:\n```\nbool oled_task_kb(void) {\n    // Defer to the keymap if they want to override\n    if(!oled_task_user()) { return false; }\n\n    // default keyboard drawing code\n    return false;\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Keycodes for Debugging OS Detection (C)\nDESCRIPTION: This code defines custom keycodes to store and print USB setup packet data for debugging OS detection. `STORE_SETUPS` stores the data, and `PRINT_SETUPS` prints it to the console.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/os_detection.md#_snippet_5\n\nLANGUAGE: c\nCODE:\n```\nenum custom_keycodes {\n    STORE_SETUPS = SAFE_RANGE,\n    PRINT_SETUPS,\n};\n\nbool process_record_user(uint16_t keycode, keyrecord_t *record) {\n    switch (keycode) {\n        case STORE_SETUPS:\n            if (record->event.pressed) {\n                store_setups_in_eeprom();\n            }\n            return false;\n        case PRINT_SETUPS:\n            if (record->event.pressed) {\n                print_stored_setups();\n            }\n            return false;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Compiling ANAVI Arrows Firmware\nDESCRIPTION: This command compiles the firmware for the ANAVI Arrows keyboard using the QMK build environment. It requires the QMK build environment to be set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/anavi/arrows/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nqmk compile -kb anavi/arrows -km default\n```\n\n----------------------------------------\n\nTITLE: Setting the Bootloader in rules.mk for HalfKay\nDESCRIPTION: This snippet sets the `BOOTLOADER` variable in the `rules.mk` file to `halfkay`. This configuration is necessary for keyboards using the HalfKay bootloader, typically found on Teensy boards.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/flashing.md#_snippet_6\n\nLANGUAGE: Make\nCODE:\n```\n# Bootloader selection\nBOOTLOADER = halfkay\n```\n\n----------------------------------------\n\nTITLE: Writing PROGMEM String to Display\nDESCRIPTION: Writes a string stored in PROGMEM (`data`) to the display buffer at the current cursor position. If `invert` is true, the pixels of the string are inverted. On ARM, this is remapped to call `st7565_write`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/st7565.md#_snippet_21\n\nLANGUAGE: C\nCODE:\n```\n// Writes a PROGMEM string to the buffer at current cursor position\n// Advances the cursor while writing, inverts the pixels if true\n// Remapped to call 'void st7565_write(const char *data, bool invert);' on ARM\nvoid st7565_write_P(const char *data, bool invert);\n```\n\n----------------------------------------\n\nTITLE: ST7565 On User Override\nDESCRIPTION: A weak function that can be overridden by the user to customize the behavior when the ST7565 display is turned on via `st7565_on()`. This is *not* called if the screen is already on.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/st7565.md#_snippet_25\n\nLANGUAGE: C\nCODE:\n```\n// Called when st7565_on() turns on the screen, weak function overridable by the user\n// Not called if the screen is already on\nvoid st7565_on_user(void);\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for 15PAD with QMK\nDESCRIPTION: This command builds the default firmware for the 15PAD macropad using the QMK build environment. It compiles the keymap and firmware based on the specified configuration.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/zlabkeeb/15pad/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake zlabkeeb/15pad:default\n```\n\n----------------------------------------\n\nTITLE: Building the Work Louder Loop Firmware\nDESCRIPTION: This command builds the default firmware for the Work Louder Loop keyboard. It uses the QMK build environment to compile the keymap and generate the firmware file, which can then be flashed to the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/work_louder/loop/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake work_louder/loop:default\n```\n\n----------------------------------------\n\nTITLE: Flashing tkk keyboard with QMK\nDESCRIPTION: This command flashes the compiled firmware to the 'tkk' keyboard using QMK. It assumes the QMK build environment is set up and the keyboard is in the bootloader mode. This command uploads the compiled firmware to the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/tkk/readme.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmake handwired/tkk:default:flash\n```\n\n----------------------------------------\n\nTITLE: Disabling Combo Timer\nDESCRIPTION: Disable the combo timer completely for relaxed combos. Useful if timing is not critical to detecting combos.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/config_options.md#_snippet_64\n\nLANGUAGE: C\nCODE:\n```\n#define COMBO_NO_TIMER\n```\n\n----------------------------------------\n\nTITLE: Navigating to qmk_firmware Directory - qmk cd\nDESCRIPTION: This command opens a new shell in the `qmk_firmware` directory. If already within the `QMK_HOME` directory, no action is taken.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/cli_commands.md#_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\nqmk cd\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for Unicomp Spacesaver M\nDESCRIPTION: This command builds the default firmware for the Unicomp Spacesaver M keyboard with the OverNumpad 1XB controller.  It requires a properly configured QMK build environment.  The output will be a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/unicomp/spacesaver_m_pre_2013/overnumpad_1xb/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake unicomp/spacesaver_m_pre_2013/overnumpad_1xb:default\n```\n\n----------------------------------------\n\nTITLE: Alas Keyboard Matrix Diagram\nDESCRIPTION: This matrix diagram represents the key layout and matrix positions of the Yiancar-Designs Alas keyboard. It visually illustrates the row and column connections for each key, enabling users to understand the keyboard's internal wiring and key mapping. The diagram also shows different bottom row configurations like standard and Tsangan/WKL/HHKB, and includes the matrix positions of the keys.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/alas/matrix_diagram.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n                                                    ┌───────┐\n                                       2u Backspace │0D     │\n                                                    └───────┘\n┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┐\n│00 │01 │02 │03 │04 │05 │06 │07 │08 │09 │0A │0B │0C │0D │2C │\n├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴───┤      ┌─────┐\n│10   │11 │12 │13 │14 │15 │16 │17 │18 │19 │1A │1B │1C │1D   │      │     │\n├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴─────┤   ┌──┴┐2D  │ ISO Enter\n│20    │21 │22 │23 │24 │25 │26 │27 │28 │29 │2A │2B │2D      │   │1D │    │\n├────┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴────┬───┤   └───┴────┘\n│30  │31 │32 │33 │34 │35 │36 │37 │38 │39 │3A │3B │3C    │3D │\n├────┼───┴┬──┴─┬─┴───┴───┴───┴───┴───┴──┬┴───┼───┴┬────┬┴───┤\n│40  │41  │42  │46                      │4A  │4B  │4C  │4D  │\n└────┴────┴────┴────────────────────────┴────┴────┴────┴────┘\n┌────────┐                                       ┌──────────┐\n│30      │ 2.25u LShift             2.75u RShift │3C        │\n└────────┘                                       └──────────┘\n┌─────┬───┬─────┬───────────────────────────┬─────┬───┬─────┐\n│40   │41 │42   │46                         │4B   │4C │4D   │ Tsangan/WKL/HHKB\n└─────┴───┴─────┴───────────────────────────┴─────┴───┴─────┘\n```\n\n----------------------------------------\n\nTITLE: Modifying SS and INT pins for MAX3421E\nDESCRIPTION: This code snippet shows how to redefine the SS (Slave Select) and INT (Interrupt) pins used by the MAX3421E USB host controller. This is necessary if the default pins 10 and 9 are needed for other functionalities. This modification requires changing the `UsbCore.h` file after rerouting the SS pin.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/lib/usbhost/USB_Host_Shield_2.0/README.md#_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\ntypedef MAX3421e<P10, P9> MAX3421E;\n```\n\n----------------------------------------\n\nTITLE: Building Irispad Firmware\nDESCRIPTION: This command builds the default firmware for the Irispad Rev. 8 using the QMK build environment. It prepares the firmware for flashing onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keebio/irispad/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake keebio/irispad/rev8:default\n```\n\n----------------------------------------\n\nTITLE: Define Keyboard Key Row 2\nDESCRIPTION: Defines the second row of keys, including Tab, letters Q-P, and Enter. It also uses 'w' for width, 'x' for horizontal offset, 'h' for height, and 'w2', 'h2', and 'x2' for the size and position of the second key label (shifted character).\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/lib/python/qmk/tests/kle.txt#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n[{w:1.5},\"Tab\",\"Q\",\"W\",\"E\",\"R\",\"T\",\"Y\",\"U\",\"I\",\"O\",\"P\",\"{\\n[\",\"}\\n]\",{x:0.25,w:1.25,h:2,w2:1.5,h2:1,x2:-0.25},\"Enter\"]\n```\n\n----------------------------------------\n\nTITLE: Building firmware for YMDK ID75 (f103)\nDESCRIPTION: This command builds the default firmware for the YMDK ID75 keyboard with the f103 PCB using the QMK build environment. It compiles the keymap and firmware into a .hex or .bin file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ymdk/id75/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake ymdk/id75/f103:default\n```\n\n----------------------------------------\n\nTITLE: Flashing KB16-01 Firmware with Make\nDESCRIPTION: This command flashes the compiled QMK firmware onto the KB16-01 macropad (revision 2) with the default keymap using the 'make' command. It requires a properly configured QMK build environment and a compatible bootloader on the device. This will overwrite the existing firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/doio/kb16/rev2/readme.md#_snippet_2\n\nLANGUAGE: Makefile\nCODE:\n```\n`make doio/kb16/rev2:default:flash`\n```\n\n----------------------------------------\n\nTITLE: Base Layer Keymap - Colemak-DH\nDESCRIPTION: This code represents the Colemak-DH base layer of the Hillside 48 keyboard layout. It defines the alternative assignment of keys, optimized for Colemak-DH users including modifiers and special keys.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/hillside/48/keymaps/default/readme.md#_snippet_2\n\nLANGUAGE: None\nCODE:\n```\nColemak-DH\n|  `    |  Q  |  W  |  F  |  P  |  B  |---------------------------|  J  |  L  |  U  |  Y  |  ;  | BKSPC |\n| TAB   |  A  |  R  |  S  |  T  |  G  |---------------------------|  M  |  N  |  E  |  I  |  O  | ENTER |\n| SHIFT |  Z  |  X  |  C  |  D  |  V  | ESC |---------------|CAPS |  K  |  H  |  ,  |  .  |  /  | SHIFT |\n--------------|CTRL |-----| GUI | ALT | Sym |SHIFT|---| Nav |SPACE| ALT | GUI |-----|  '  |--------------\n```\n\n----------------------------------------\n\nTITLE: QMK Experimental Build Command - Helix\nDESCRIPTION: This command compiles the Helix keyboard firmware with experimental use of split_common, backlight, and OLED features.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/helix/rev2/keymaps/default/readme.md#_snippet_8\n\nLANGUAGE: Makefile\nCODE:\n```\n$ make helix/rev2/sc:default\n```\n\n----------------------------------------\n\nTITLE: Compiling Zinc Keyboard Firmware (Shell)\nDESCRIPTION: This command compiles the Zinc keyboard firmware with the default keymap.  It uses the `make` command and specifies the target as `zinc:default`. This creates the firmware ready to be flashed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/25keys/zinc/keymaps/default/readme_en.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ make zinc:default\n```\n\n----------------------------------------\n\nTITLE: Building K-Numpad17 Default Keymap (QMK)\nDESCRIPTION: This command builds the default keymap for the K-Numpad17 keyboard within the QMK firmware environment.  It utilizes the `make` command with the specified keyboard and keymap. This command should be executed in a QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/k_numpad17/readme.md#_snippet_0\n\nLANGUAGE: qmk\nCODE:\n```\nmake handwired/k_numpad17:default\n```\n\n----------------------------------------\n\nTITLE: Building HP69 Firmware\nDESCRIPTION: This command builds the default firmware for the HP69 keyboard using the QMK build environment. It compiles the source code and generates a firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/hp69/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake hp69:default\n```\n\n----------------------------------------\n\nTITLE: Building the Lagrange Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the Lagrange keyboard. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/lagrange/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake handwired/lagrange:default\n```\n\n----------------------------------------\n\nTITLE: Flashing with avrdude via command line (USBasploader)\nDESCRIPTION: This snippet shows the command for flashing a keyboard using `avrdude` with the `usbasp` programmer for USBasploader. Replace `<mcu>` with the microcontroller type, and `<filename>` with the `.hex` file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/flashing.md#_snippet_9\n\nLANGUAGE: Shell\nCODE:\n```\navrdude -p <mcu> -c usbasp -U flash:w:<filename>:i\n```\n\n----------------------------------------\n\nTITLE: Flashing GH60 v1.3 Firmware with QMK\nDESCRIPTION: This command flashes the compiled firmware onto the GH60 v1.3 keyboard. It requires the QMK build environment to be set up and the keyboard to be in bootloader mode. The command uses the default keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/gh60/v1p3/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake gh60/v1p3:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building bt66tech60 Firmware\nDESCRIPTION: This command builds the default firmware for the bt66tech60 keyboard using the QMK build environment. It compiles the keyboard layout and generates the firmware file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/bt66tech/bt66tech60/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake bt66tech:default\n```\n\n----------------------------------------\n\nTITLE: Flashing MNK 60 EC Firmware (QMK)\nDESCRIPTION: This command flashes the built firmware to the MNK 60 EC keyboard. It uses the `make` command with the `:flash` target within the QMK Firmware environment. It requires the QMK build environment to be set up and the keyboard to be in a state ready to accept the firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cipulot/mnk_60_ec/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake cipulot/mnk_60_ec:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Dactyl Manuform Keyboard\nDESCRIPTION: This command builds the firmware for the Dactyl Manuform 5x6 right trackball keyboard with the default keymap. It requires a correctly set up QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/tractyl_manuform/4x6_right/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake handwired/dactyl_manuform/5x6_right_trackball:default\n```\n\n----------------------------------------\n\nTITLE: Flashing the Wave Keyboard Firmware\nDESCRIPTION: This command flashes the compiled firmware onto the Wave keyboard.  It builds the firmware if necessary and then uses the appropriate flashing tool for the keyboard's microcontroller.  Requires a correctly configured QMK build environment and a connected keyboard in a flashable state.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/etiennecollin/wave/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake etiennecollin/wave:default:flash\n```\n\n----------------------------------------\n\nTITLE: Compiling with OLED Disabled\nDESCRIPTION: This snippet demonstrates how to compile the firmware with the OLED display disabled. It uses the `HELIX=no-oled` option in the `make` command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/helix/rev2/keymaps/default/readme_jp.md#_snippet_9\n\nLANGUAGE: makefile\nCODE:\n```\n$ make HELIX=no-oled helix/rev2:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Silhouette Keyboard Firmware (Makefile)\nDESCRIPTION: This command flashes the built QMK firmware to the Silhouette keyboard using the default keymap.  It depends on the QMK build environment and a compatible flashing tool.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wolf/silhouette/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake wolf/silhouette:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing YMDK SP64 default keymap\nDESCRIPTION: This command flashes the default keymap onto the YMDK SP64 keyboard using the QMK build environment. It assumes that the build environment has already been set up and the keyboard is connected to the computer. The command compiles and uploads the firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ymdk/sp64/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake ymdk/sp64:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building the Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the Unicomp Spacesaver M Post 2013 Overnumpad 1xb keyboard. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/unicomp/spacesaver_m_post_2013/overnumpad_1xb/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake unicomp/spacesaver_m_post_2013/overnumpad_1xb:default\n```\n\n----------------------------------------\n\nTITLE: Building QMK Firmware for 7V Hotswap PCB\nDESCRIPTION: This command builds the default QMK firmware for the 7V Hotswap PCB. It requires the QMK build environment to be set up. The output is the compiled firmware ready to be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/fjlabs/7vhotswap/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake fjlabs/7vhotswap:default\n```\n\n----------------------------------------\n\nTITLE: Building GetawayVan Firmware with QMK\nDESCRIPTION: This command builds the QMK firmware for the GetawayVan keyboard using the specified microcontroller (STM32F042) and the default keymap. It assumes that the QMK build environment is properly set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/esca/getawayvan_f042/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake esca/getawayvan_f042:default\n```\n\n----------------------------------------\n\nTITLE: Building EC Theca Firmware\nDESCRIPTION: This command builds the default firmware for the EC Theca keyboard. It requires a properly configured QMK build environment. The output is a firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cipulot/ec_theca/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake cipulot/ec_theca:default\n```\n\n----------------------------------------\n\nTITLE: Flashing QooLee Firmware (QMK)\nDESCRIPTION: This command flashes the default firmware to the QooLee keyboard. It requires the QMK build environment and a flashing tool (e.g., dfu-util) to be installed and configured correctly. The keyboard must be in bootloader mode for the flashing process to succeed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/takashicompany/qoolee/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake takashicompany/qoolee:default:flash\n```\n\n----------------------------------------\n\nTITLE: Row Pin Configuration (GH60 Rev C)\nDESCRIPTION: This C-style comment describes the row pin configuration for the GH60 Rev C keyboard. It maps row numbers to specific GPIO pins on the microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/gh60/revc/readme.md#_snippet_2\n\nLANGUAGE: c\nCODE:\n```\n/* Row pin configuration\n * row: 0   1   2   3   4\n * pin: D0  D1  D2  D3  D5\n */\n```\n\n----------------------------------------\n\nTITLE: Matrix Diagram for Mechlovin.Studio Infinity87 RGB Rev1\nDESCRIPTION: This diagram illustrates the key matrix layout for the Mechlovin.Studio Infinity87 RGB Rev1 keyboard. It shows the row and column positions for each key, including variations for ANSI and ISO enter keys, as well as different shift key sizes.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechlovin/infinity87/rgb_rev1/matrix_diagram.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n┌───┐   ┌───┬───┬───┬───┐ ┌───┬───┬───┬───┐ ┌───┬───┬───┬───┐┌───┬───┬───┐\n│00 │   │01 │02 │03 │04 │ │05 │06 │07 │08 │ │09 │0A │0B │0C ││0E │0F │0G │\n└───┘   └───┴───┴───┴───┘ └───┴───┴───┴───┘ └───┴───┴───┴───┘└───┴───┴───┘\n┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┐┌───┬───┬───┐      ┌───────┐\n│10 │11 │12 │13 │14 │15 │16 │17 │18 │19 │1A │1B │1C │1D │0D ││1E │1F │1G │      │1D     │ 2u Backspace\n├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴───┤├───┼───┼───┤      └─┬─────┤      ┌─────┐\n│20   │21 │22 │23 │24 │25 │26 │27 │28 │29 │2A │2B │2C │2D   ││2E │2F │2G │        │2D   │      │     │\n├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬────┤└───┴───┴───┘     ┌──┴─────┤   ┌──┴┐3D  │\n│30    │31 │32 │33 │34 │35 │36 │37 │38 │39 │3A │3B │3C │3D  │                  │3D      │   │3C │    │\n├────┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴───┴┬───┤    ┌───┐         └────────┘   └───┴────┘\n│40  │41 │42 │43 │44 │45 │46 │47 │48 │49 │4A │4B │4C    │4D │    │4F │         ANSI Enter    ISO Enter\n├────┼───┴┬──┴─┬─┴───┴───┴───┴───┴───┴──┬┴───┼───┴┬────┬┴───┤┌───┼───┼───┐\n│50  │51  │52  │56                      │5A  │5B  │5C  │5D  ││5E │5F │5G │\n└────┴────┴────┴────────────────────────┴────┴────┴────┴────┘└───┴───┴───┘\n┌────────┐                                       ┌──────────┐\n│40      │ 2.25u LShift             2.75u RShift │4D        │\n└────────┘                                       └──────────┘\n                                                 ┌───┬──────┐\n                                 1u/1.75u RShift │4C │4D    │\n                                                 └───┴──────┘\n┌─────┬───┬─────┬───────────────────────────┬─────┬───┬─────┐\n│50   │51 │52   │56                         │5B   │5C │5D   │ Tsangan/WKL\n└─────┴───┴─────┴───────────────────────────┴─────┴───┴─────┘\n```\n\n----------------------------------------\n\nTITLE: Building Touchpad Keyboard Firmware\nDESCRIPTION: This snippet demonstrates how to build the default firmware for the Touchpad keyboard using the `make` command. It assumes that the QMK build environment has already been set up. The command compiles the firmware and generates the necessary files for flashing the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/touchpad/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake touchpad:default\n```\n\n----------------------------------------\n\nTITLE: Enabling ST7565 On/Off Status Synchronization\nDESCRIPTION: This definition enables transmitting the current ST7565 on/off status to the slave side of the split keyboard. It supports state (on/off state only) syncing. It is defined in `config.h`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/split_keyboard.md#_snippet_21\n\nLANGUAGE: c\nCODE:\n```\n#define SPLIT_ST7565_ENABLE\n```\n\n----------------------------------------\n\nTITLE: Flashing WTF60 Firmware with QMK\nDESCRIPTION: This command builds and flashes the default firmware to the keebio/wtf60 keyboard. It assumes that the QMK build environment is set up, and the flashing tools are correctly configured.  The keyboard must be in flashing mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keebio/wtf60/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake keebio/wtf60:default:flash\n```\n\n----------------------------------------\n\nTITLE: Defining TKL No Function Row ANSI Layout - QMK\nDESCRIPTION: Defines a TKL (Tenkeyless) ANSI layout without a function row. This layout offers a very compact design by omitting the function keys.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/layouts/default/readme.md#_snippet_25\n\nLANGUAGE: plaintext\nCODE:\n```\n┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───────┐ ┌───┬───┬───┐\n│   │   │   │   │   │   │   │   │   │   │   │   │   │       │ │   │   │   │\n├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─────┤ ├───┼───┼───┤\n│     │   │   │   │   │   │   │   │   │   │   │   │   │     │ │   │   │   │\n├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴─────┤ └───┴───┴───┘\n│      │   │   │   │   │   │   │   │   │   │   │   │        │\n├──────┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴────────┤     ┌───┐\n│        │   │   │   │   │   │   │   │   │   │   │          │     │   │\n├────┬───┴┬──┴─┬─┴───┴───┴───┴───┴───┴──┬┴───┼───┴┬────┬────┤ ┌───┼───┼───┐\n│    │    │    │                        │    │    │    │    │ │   │   │   │\n└────┴────┴────┴────────────────────────┴────┴────┴────┴────┘ └───┴───┴───┘\n```\n\n----------------------------------------\n\nTITLE: Building QMK Firmware for DQz11N1G Keyboard\nDESCRIPTION: This command compiles the QMK firmware for a handwired DQz11N1G keyboard with the default keymap. It assumes that the QMK build environment has already been set up. This will generate the firmware file that can be flashed onto the replacement controller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/dqz11n1g/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake handwired/dqz11n1g:default\n```\n\n----------------------------------------\n\nTITLE: Layer Lock User Callback (C)\nDESCRIPTION: This code shows how to define the optional `layer_lock_set_user()` callback function in `keymap.c`.  This callback allows you to perform custom actions when a layer is locked or unlocked, such as controlling an LED to visually indicate the lock state. The `locked_layers` argument is a bitfield representing which layers are locked.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/layer_lock.md#_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nbool layer_lock_set_user(layer_state_t locked_layers) {\n  // Do something like `set_led(is_layer_locked(NAV));`\n  return true;\n}\n```\n\n----------------------------------------\n\nTITLE: Building XD60 rev3 ISO Keymap\nDESCRIPTION: This command builds the ISO keymap for the revision 3 of the XIUDI XD60 keyboard using the QMK firmware build system. It requires the QMK firmware environment to be set up correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/xiudi/xd60/keymaps/iso/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake xiudi/xd60/rev3:iso\n```\n\n----------------------------------------\n\nTITLE: Flashing Left Side Firmware - Make Command\nDESCRIPTION: This command builds and flashes the firmware specifically for the left side of the Split-Cloud keyboard. It is necessary to set the handedness of each side of the split keyboard using EEPROM.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/split_cloud/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake handwired/split_cloud:default:avrdude-split-left\n```\n\n----------------------------------------\n\nTITLE: Enabling iPad/iPhone Support\nDESCRIPTION: This snippet illustrates how to enable support for iPad/iPhone devices with the Helix keyboard. By setting `IOS_DEVICE_ENABLE` to `yes` in the `rules.mk` file, the keyboard can connect to iOS devices.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/helix/rev2/keymaps/default/readme_jp.md#_snippet_4\n\nLANGUAGE: makefile\nCODE:\n```\nIOS_DEVICE_ENABLE = no      # connect to IOS device (iPad,iPhone)\n```\n\n----------------------------------------\n\nTITLE: Building AKB Vero Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the AKB Vero keyboard using the QMK build environment.  It requires a correctly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/akb/vero/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake antipode/vero:default\n```\n\n----------------------------------------\n\nTITLE: Building Altair-X Firmware\nDESCRIPTION: This command builds the default keymap for the Altair-X keyboard using the QMK build environment.  It compiles the source code into a firmware image ready for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ai03/altair_x/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake ai03/altair_x:default\n```\n\n----------------------------------------\n\nTITLE: Building Funky40 Firmware\nDESCRIPTION: This command builds the default firmware for the Funky40 keyboard using the QMK build environment. It requires QMK to be properly set up with all necessary dependencies. The output is the compiled firmware ready to be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/funky40/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake funky40:default\n```\n\n----------------------------------------\n\nTITLE: Compiling Firmware with QMK CLI\nDESCRIPTION: This command compiles the QMK firmware for the Anvil Native keyboard with the default keymap. It specifies the keyboard layout (ISO or ANSI) and the keymap to use. The command requires QMK CLI to be installed and configured.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/teleport/native/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nqmk compile -kb teleport/native/iso -km default\n```\n\nLANGUAGE: shell\nCODE:\n```\nqmk compile -kb teleport/native/ansi -km default\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware to Jelly Evolv Keyboard\nDESCRIPTION: This command flashes the compiled firmware to the Jelly Evolv Hotswap 7U PCB. It depends on the `make` command and appropriate flashing tools configured in the QMK build environment. The flash process requires the keyboard to be in bootloader mode, triggered by pressing button B while plugging in the board.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/owlab/jelly_evolv/hotswap/7u/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake owlab/jelly_evolv/hotswap/7u:default:flash\n```\n\n----------------------------------------\n\nTITLE: Compiling Kin80 firmware - default version\nDESCRIPTION: This command compiles the QMK firmware for the Kin80 keyboard with the default keymap. The default version is set to 'blackpill401'. It requires QMK build environment to be properly set up. The compiled firmware can then be flashed onto the Kin80 PCB.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kin80/readme.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n`qmk compile -kb kin80 -km default`\n```\n\n----------------------------------------\n\nTITLE: Building the wilba.tech WT60-XT Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the wilba.tech WT60-XT keyboard using the QMK build system. It requires a properly configured QMK build environment. The compiled firmware can then be flashed onto the keyboard PCB.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wilba_tech/wt60_xt/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake wilba_tech/wt60_xt:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Littlefoot LX Firmware\nDESCRIPTION: This command builds and flashes the default keymap for the Littlefoot LX keyboard to the keyboard's microcontroller. It requires a properly configured QMK build environment and a connected keyboard in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/tominabox1/littlefoot_lx/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake tominabox1/littlefoot_lx:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Keyboardio Model 01 Firmware\nDESCRIPTION: This command builds the default keymap for the Keyboardio Model 01 using the QMK build environment. It compiles the source code and generates the firmware image ready for flashing. Requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keyboardio/model01/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake keyboardio/model01:default\n```\n\n----------------------------------------\n\nTITLE: Flashing QMK Firmware to MNT Reform\nDESCRIPTION: This command flashes the built QMK firmware to the MNT Reform USB Keyboard (Standalone) with the default keymap. It requires the keyboard to be in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mntre_v3/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake mntre_v3:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building LW-67 Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the LW-67 keyboard using the QMK build environment. It requires QMK to be set up correctly according to the official documentation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/laneware/lw67/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake laneware/lw67:default\n```\n\n----------------------------------------\n\nTITLE: Building ErgoDox Infinity Firmware\nDESCRIPTION: This command builds the firmware for the ErgoDox Infinity keyboard using the specified keymap. It needs to be executed within the qmk_firmware directory after configuring the keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/input_club/ergodox_infinity/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake input_club/ergodox_infinity:keymapname\n```\n\n----------------------------------------\n\nTITLE: Flashing AddOn Keyboard Firmware (QMK)\nDESCRIPTION: This command flashes the compiled firmware onto the AddOn keyboard. It uses the QMK build environment to upload the firmware to the keyboard's microcontroller via a bootloader. The keyboard needs to be connected and in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ocean/addon/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake ocean/addon:default:flash\n```\n\n----------------------------------------\n\nTITLE: Creating a String Representation for Encoder Modes in C\nDESCRIPTION: This C code defines a function `spleeb_encoder_mode_string` that takes an encoder mode as input and returns a string representation of that mode. This function is useful for displaying the current encoder mode to the user, for example, on an OLED display. It uses a switch statement to map each encoder mode to its corresponding string.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/spleeb/readme.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nconst char *spleeb_encoder_mode_string(uint8_t mode) {\n    switch (mode) {\n        case DEF_DPI:\n            return \"df dpi\";\n        case SNP_DPI:\n            return \"sn dpi\";\n        case VOL:\n            return \"volume\";\n        case SEL:\n            return \"select\";\n    }\n\n    return get_u8_str(mode, ' ');\n}\n```\n\n----------------------------------------\n\nTITLE: Matrix Diagram for Yiancar-Designs / Hand Engineering Hand 88\nDESCRIPTION: This diagram shows the key matrix layout for the Yiancar-Designs / Hand Engineering Hand 88 keyboard. It illustrates the row and column connections and provides a visual representation of the key positions within the matrix.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/hand88/matrix_diagram.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n┌───┐┌───┬───┬───┬───┐┌───┬───┬───┬───┐┌───┬───┬───┬───┐┌───┐ ┌───┬───┬───┐\n│00 ││01 │02 │03 │04 ││05 │06 │07 │08 ││09 │0A │0B │0C ││0D │ │0E │0F │0G │\n└───┘└───┴───┴───┴───┘└───┴───┴───┴───┘└───┴───┴───┴───┘└───┘ └───┴───┴───┘\n┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┐ ┌───┬───┬───┐    ┌───────┐\n│10 │11 │12 │13 │14 │15 │16 │17 │18 │19 │1A │1B │1C │1D │2D │ │1E │1F │1G │    │1D     │ 2u Backspace\n├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴───┤ ├───┼───┼───┤    └─┬─────┤\n│20   │21 │22 │23 │24 │25 │26 │27 │28 │29 │2A │2B │2C │3C   │ │2E │2F │2G │      │     │\n├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴─────┤ └───┴───┴───┘   ┌──┴┐3D  │ ISO Enter\n│30    │31 │32 │33 │34 │35 │36 │37 │38 │39 │3A │3B │3D      │                 │3C │    │\n├────┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴────┬───┤     ┌───┐       └───┴────┘\n│40  │41 │42 │43 │44 │45 │46 │47 │48 │49 │4A │4B │4C    │4D │     │4F │\n├────┴┬──┴┬──┴──┬┴───┴───┴───┴───┴───┴───┴──┬┴───┴┬───┬─┴───┤ ┌───┼───┼───┐\n│50   │51 │52   │56                         │5B   │5C │5D   │ │5E │5F │5G │\n└─────┴───┴─────┴───────────────────────────┴─────┴───┴─────┘ └───┴───┴───┘\n┌────────┐                                       ┌──────────┐\n│40      │ 2.25u LShift             2.75u RShift │4C        │\n└────────┘                                       └──────────┘\n```\n\n----------------------------------------\n\nTITLE: Building Treasure TYPE-9 Series III Firmware\nDESCRIPTION: This command builds the default firmware for the Treasure TYPE-9 Series III macropad within the QMK Firmware environment. It assumes that the QMK build environment is already set up and configured. The output will be a .hex or .bin file that can be flashed to the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/treasure/type9s3/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake treasure/type9s3:default\n```\n\n----------------------------------------\n\nTITLE: QMK Make Command for MiSS-1200\nDESCRIPTION: This command builds the QMK firmware for the Amiga 1200 keyboard converter using a MiSS-1200 FPGA board. It compiles the code with the default configuration and generates the firmware file to be flashed onto the microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/converter/a1200/readme.md#_snippet_3\n\nLANGUAGE: makefile\nCODE:\n```\nmake converter/a1200/miss1200:default\n```\n\n----------------------------------------\n\nTITLE: Building iLumkb Simpler61 Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the iLumkb Simpler61 keyboard using the QMK build environment. It requires QMK Firmware to be properly set up and configured.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ilumkb/simpler61/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake ilumkb/simpler61:default\n```\n\n----------------------------------------\n\nTITLE: Building JKB65 RGB Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the JKB65 RGB keyboard. It uses the `make` command provided by QMK to compile the keyboard firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/jadookb/jkb65/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake jadookb/jkb65:default\n```\n\n----------------------------------------\n\nTITLE: Defining TKL No Function Row ISO Layout - QMK\nDESCRIPTION: Defines a TKL (Tenkeyless) ISO layout without a function row. Similar to the ANSI version, this layout omits function keys in the ISO format.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/layouts/default/readme.md#_snippet_26\n\nLANGUAGE: plaintext\nCODE:\n```\n┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───────┐ ┌───┬───┬───┐\n│   │   │   │   │   │   │   │   │   │   │   │   │   │       │ │   │   │   │\n├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─────┤ ├───┼───┼───┤\n│     │   │   │   │   │   │   │   │   │   │   │   │   │     │ │   │   │   │\n├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┐    │ └───┴───┴───┘\n│      │   │   │   │   │   │   │   │   │   │   │   │   │    │\n├────┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴───┴────┤     ┌───┐\n│    │   │   │   │   │   │   │   │   │   │   │   │          │     │   │\n├────┼───┴┬──┴─┬─┴───┴───┴───┴───┴───┴──┬┴───┼───┴┬────┬────┤ ┌───┼───┼───┐\n│    │    │    │                        │    │    │    │    │ │   │   │   │\n└────┴────┴────┴────────────────────────┴────┴────┴────┴────┘ └───┴───┴───┘\n```\n\n----------------------------------------\n\nTITLE: Flashing the EC Alveus Firmware\nDESCRIPTION: This command flashes the default firmware to the EC Alveus keyboard. It requires a properly configured QMK build environment and a connected keyboard in flashing mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cipulot/ec_alveus/1_0_0/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake cipulot/ec_alveus/1_0_0:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing RiotPad Firmware with QMK\nDESCRIPTION: This command flashes the pre-built or newly built firmware onto the RiotPad. It assumes the device is connected and in a state ready to receive the firmware, typically bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/shandoncodes/riot_pad/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake shandoncodes/riot_pad:default:flash\n```\n\n----------------------------------------\n\nTITLE: Navigate to Keymap Folder (Bash)\nDESCRIPTION: This command navigates to the user's personal keymap folder within the QMK repository using the command line. It assumes the current directory is the root of the QMK repository. This step is essential before converting the `keymap.json` file to `keymap.c`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/splitkb/aurora/helix/keymaps/default/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd ./keyboards/splitkb/aurora/helix/keymaps/my_personal_keymap\n```\n\n----------------------------------------\n\nTITLE: Building USB-USB Converter with Make\nDESCRIPTION: This command builds the USB-USB converter firmware using the `make` command. It assumes the QMK build environment is set up correctly. It builds the default configuration.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/converter/usb_usb/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake converter/usb_usb:default\n```\n\n----------------------------------------\n\nTITLE: Building Bella Soldered Firmware\nDESCRIPTION: This command builds the default firmware for the Bella Soldered keyboard.  It uses the `make` command within the QMK Firmware environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kbdfans/bella/soldered/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake kbdfans/bella/soldered:default\n```\n\n----------------------------------------\n\nTITLE: Flush PWM Values to LED Driver\nDESCRIPTION: Flushes the PWM values to the IS31FL3745 LED driver, updating the LED brightness.  Requires the driver index as input.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/is31fl3745.md#_snippet_9\n\nLANGUAGE: c\nCODE:\n```\nvoid is31fl3745_update_pwm_buffers(uint8_t index)\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware: QMK Make Flash Command\nDESCRIPTION: This command flashes the built firmware to the Infinity875 keyboard using the QMK build environment. It depends on a successfully built firmware and a connected keyboard in a flashable state. It programs the firmware onto the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechlovin/infinity875/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake mechlovin/infinity875:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building XO87 RGB Default Keymap\nDESCRIPTION: This command compiles the default keymap for the XO87 RGB keyboard. It uses the `make` command with the target `monstargear/xo87/rgb:default`.  This assumes a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/monstargear/xo87/rgb/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake monstargear/xo87/rgb:default\n```\n\n----------------------------------------\n\nTITLE: Flashing the Hard Light Mark 1 keyboard\nDESCRIPTION: This command flashes the compiled firmware to the Hard Light Mark 1 keyboard. It requires the QMK build environment to be set up and the keyboard to be in a flashable state (e.g., bootloader mode).\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/edi/hardlight/mk1/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake edi/hardlight/mk1:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Adelais Firmware with QMK\nDESCRIPTION: This command builds the QMK firmware for the Adelais keyboard with the standard_led layout using the ARM architecture. It assumes the QMK build environment is already set up. The resulting firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechlovin/adelais/standard_led/arm/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake mechlovin/adelais/standard_led/arm:default\n```\n\n----------------------------------------\n\nTITLE: Mapping LEDs for RGB Driver in keyboardname.c\nDESCRIPTION: This snippet illustrates how to map LEDs to the IS31FL3733 RGB driver in your `<keyboardname>.c` file.  It defines a `g_is31fl3733_leds` array of type `is31fl3733_led_t` to specify the driver index and PWM register addresses for the red, green, and blue channels of each LED.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/is31fl3733.md#_snippet_4\n\nLANGUAGE: c\nCODE:\n```\nconst is31fl3733_led_t PROGMEM g_is31fl3733_leds[IS31FL3733_LED_COUNT] = {\n/* Driver\n *   |  R         G         B */\n    {0, SW1_CS1,  SW1_CS2,  SW1_CS3},\n    // etc...\n};\n```\n\n----------------------------------------\n\nTITLE: Flashing Jones v.03 Keyboard Firmware with QMK\nDESCRIPTION: This command builds and flashes the default firmware to the Jones v.03 keyboard. It requires the QMK build environment to be set up and the keyboard to be in bootloader mode. This utilizes the 'flash' target to upload the compiled firmware to the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/jones/v03/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake jones/v03:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building ProjectD 75% ANSI Firmware\nDESCRIPTION: This command builds the default firmware for the ProjectD 75% ANSI keyboard. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/projectd/75/ansi/readme.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmake projectd/75/ansi:default\n```\n\n----------------------------------------\n\nTITLE: Making the Sleepy Keeb Firmware\nDESCRIPTION: This command compiles the default firmware for the Sleepy Keeb keyboard. It requires a configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/sleepy_craft_studios/sleepy_keeb/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake sleepy_keeb:default\n```\n\n----------------------------------------\n\nTITLE: Flashing with avrdude via command line (Caterina)\nDESCRIPTION: This snippet shows the command for flashing a keyboard using `avrdude` with the `avr109` programmer for Caterina bootloader. Replace `<mcu>` with the microcontroller type, `<serialport>` with the serial port, and `<filename>` with the `.hex` file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/flashing.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\navrdude -p <mcu> -c avr109 -P <serialport> -U flash:w:<filename>:i\n```\n\n----------------------------------------\n\nTITLE: Configuring Maximum ST7789 Devices (C)\nDESCRIPTION: This snippet shows how to configure the maximum number of ST7789 displays that can be used by setting the `ST7789_NUM_DEVICES` macro in `config.h`. The default value is 1. This is a preprocessor definition. Requires Quantum Painter to be enabled.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/quantum_painter.md#_snippet_25\n\nLANGUAGE: c\nCODE:\n```\n// 3 displays:\n#define ST7789_NUM_DEVICES 3\n```\n\n----------------------------------------\n\nTITLE: Check STM32 MCU support in ChibiOS\nDESCRIPTION: This code snippet demonstrates how to check if a specific STM32 MCU is supported by ChibiOS.  It looks for `#define` directives in the `stm32_registry.h` file within the ChibiOS repository.  The presence of a define for the MCU (e.g., `STM32F303xC`) indicates support.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/platformdev_selecting_arm_mcu.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#if defined(STM32F303xC) || defined(__DOXYGEN__)\n```\n\n----------------------------------------\n\nTITLE: Flashing SuperLyra Firmware with QMK\nDESCRIPTION: This command flashes the compiled firmware onto the SuperLyra keyboard. It requires a QMK build environment and a connection to the keyboard in DFU mode, typically activated by pressing the reset button.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/malevolti/superlyra/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake malevolti/superlyra:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building GameHand Firmware\nDESCRIPTION: This command compiles the default firmware for the GameHand keyboard. It uses the QMK build environment to generate a firmware image that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kb_elmo/gamehand/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake kb_elmo/gamehand:default\n```\n\n----------------------------------------\n\nTITLE: Stepping to Previous LED Matrix Effect without EEPROM (C)\nDESCRIPTION: This function moves to the previous enabled LED matrix effect without writing it to EEPROM. The effect change will not be persistent.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/led_matrix.md#_snippet_23\n\nLANGUAGE: C\nCODE:\n```\nvoid led_matrix_step_reverse_noeeprom(void)\n```\n\n----------------------------------------\n\nTITLE: Building Pancake 2 Keyboard Firmware (Makefile)\nDESCRIPTION: This command builds the default firmware for the Pancake 2 keyboard, revision 2, using the QMK build environment. It assumes that the QMK build environment has been properly set up according to the QMK documentation. The output is a firmware file ready to be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/spaceman/pancake/rev2/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake spaceman/pancake/rev2:default\n```\n\n----------------------------------------\n\nTITLE: Building Spring Keyboard Firmware (QMK)\nDESCRIPTION: This command compiles the QMK firmware for the OwLab Spring keyboard with the default keymap. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/owlab/spring/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake owlab/spring:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Sriwedari70 Firmware\nDESCRIPTION: This command builds and flashes the default firmware for the Sriwedari70 keyboard. It assumes that the QMK build environment is properly configured and the keyboard is connected to the computer in a flashable state.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/jaykeeb/sriwedari70/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake jaykeeb/sriwedari70:default:flash\n```\n\n----------------------------------------\n\nTITLE: Lower Layer Keymap Definition\nDESCRIPTION: Defines the lower layer key assignments for the Dozen0 keyboard. This layer includes navigation keys like Page Up, Page Down, Home, and End.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/yynmt/dozen0/keymaps/default/readme.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n,-----------------------------------------.\n|      |      |      | Page |      |      |\n|      |      |      |  Up  |      |      |\n|------+------+------+------+------+------|\n|      |      | Home | Page | End  |      |\n|      |      |      | Down |      |      |\n`-----------------------------------------'\n```\n\n----------------------------------------\n\nTITLE: qmk_module.json example (JSON)\nDESCRIPTION: This is an example `qmk_module.json` file, which defines the metadata for a QMK Community Module.  It specifies the module's name, maintainer, features, and keycodes.  At minimum, `module_name` and `maintainer` are required.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/community_modules.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"module_name\": \"Hello World\",\n    \"maintainer\": \"QMK Maintainers\",\n    \"features\": {\n        \"deferred_exec\": true\n    },\n    \"keycodes\": [\n        {\n            \"key\": \"COMMUNITY_MODULE_HELLO\",\n            \"aliases\": [\"CM_HELO\"]\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Flashing Left Side of Split Keyboard\nDESCRIPTION: This command flashes the left side firmware to the split keyboard. It requires `qmk` command line tool. It sets the EE_HANDS to left.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/stront/readme.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nqmk flash -kb stront -km default -bl uf2-split-left\n```\n\n----------------------------------------\n\nTITLE: Teensy 2++ Pin Configuration\nDESCRIPTION: This code defines the pin assignments for connecting an Amiga 1200 keyboard membrane to a Teensy 2++ board using the AT90USB1286 microcontroller. It specifies the pins used for columns, rows, and the CapsLock LED, and provides a mapping between these pins and the corresponding keyboard signals. This configuration is crucial for the keyboard matrix scanning process.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/converter/a1200/readme.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nColumns: 1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16  \nPins:    D2 D3 D4 D5 D6 D7 E0 E1 C0 C1 C2 C3 C4 C5 C6 C7 \n--------------------------------------------------------  \nRows: 1  2  3  4  5  6  7  8  \nPins: F0 F1 F2 F3 F4 F5 F6 F7  \n--------------------------------------------------------  \nStatus LEDs: CapsLock +5V   \nPins:        B6       5V    \n```\n\n----------------------------------------\n\nTITLE: Clearing ST7565 Display Buffer\nDESCRIPTION: Clears the internal display buffer. Resets the cursor position to the beginning (0,0). Sets the buffer to 'dirty' indicating that it needs to be re-rendered to the display. No parameters or return value.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/st7565.md#_snippet_8\n\nLANGUAGE: C\nCODE:\n```\n// Clears the display buffer, resets cursor position to 0, and sets the buffer to dirty for rendering\nvoid st7565_clear(void);\n```\n\n----------------------------------------\n\nTITLE: Building Spooky Keyboard with QMK\nDESCRIPTION: This command builds the default keymap for the Spooky keyboard within the QMK Firmware environment. It assumes the QMK build environment is already set up. It uses the `make` command with the target specifying the keyboard and keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/boardsource/holiday/spooky/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake boardsource/holiday/spooky:default\n```\n\n----------------------------------------\n\nTITLE: Building XS108 Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the XS108 keyboard using the QMK build environment. It requires the QMK build environment to be set up correctly. The output is the compiled firmware ready to be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/xelus/xs108/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake xelus/xs108:default\n```\n\n----------------------------------------\n\nTITLE: Keyboard Matrix Diagram for senselessclay had60\nDESCRIPTION: This diagram visually represents the key matrix for the senselessclay had60 keyboard layout. Each key is mapped to its row and column coordinates within the matrix. This information is critical for configuring the keyboard firmware to correctly interpret key presses based on the matrix wiring.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/senselessclay/had60/matrix_diagram.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n                                                    ┌───────┐\n                                       2u Backspace │0D     │\n                                                    └───────┘\n┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┐\n│00 │01 │02 │03 │04 │05 │06 │07 │08 │09 │0A │0B │0C │0D │2D │\n├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴───┤      ┌─────┐\n│10   │11 │12 │13 │14 │15 │16 │17 │18 │19 │1A │1B │1C │1D   │      │     │\n├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴─────┤   ┌──┴┐1D  │\n│20    │21 │22 │23 │24 │25 │26 │27 │28 │29 │2A │2B │2C      │   │2C │    │\n├────┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴────┬───┤   └───┴────┘\n│30  │31 │32 │33 │34 │35 │36 │37 │38 │39 │3A │3B │3C    │3D │    ISO Enter\n├────┼───┴┬──┴─┬─┴───┴───┴───┴───┴───┴──┬┴───┼───┴┬────┬┴───┤\n│40  │41  │42  │43                      │4A  │4B  │4C  │4D  │\n└────┴────┴────┴────────────────────────┴────┴────┴────┴────┘\n┌────────┐                                       ┌──────────┐\n│30      │ 2.25u LShift             2.75u RShift │3C        │\n└────────┘                                       └──────────┘\n┌─────┬───┬─────┬───────────────────────────┬─────┬───┬─────┐\n│40   │41 │42   │43                         │4B   │4C │4D   │ Tsangan/WKL/HHKB\n└─────┴───┴─────┴───────────────────────────┴─────┴───┴─────┘\n```\n\n----------------------------------------\n\nTITLE: Building Specific Revision Firmware\nDESCRIPTION: This command builds the firmware for a specific revision of the Navi10 macropad (e.g., rev2). It requires the QMK build environment to be configured. This allows users to compile firmware tailored to particular hardware revisions.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keyhive/navi10/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake keyhive/navi10/rev2:default\n```\n\n----------------------------------------\n\nTITLE: Finish UCIS Sequence - C\nDESCRIPTION: This function marks the UCIS (Unicode Composing Input Sequence) input sequence as complete and attempts to match the sequence.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/unicode.md#_snippet_28\n\nLANGUAGE: C\nCODE:\n```\nvoid ucis_finish(void)\n```\n\n----------------------------------------\n\nTITLE: Building MNK65 Firmware with Make\nDESCRIPTION: This command builds the default firmware for the MNK65 keyboard using the QMK build environment. It assumes the environment is already set up according to the QMK documentation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kopibeng/mnk65_stm32/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake kopibeng/mnk65_stm32:default\n```\n\n----------------------------------------\n\nTITLE: Updating qmk-master branch\nDESCRIPTION: Updates the `qmk-master` branch to point to the `develop_YYYY_qN` tag. This involves checking out the `qmk-master` branch, resetting it hard to the specified tag, and force-pushing the changes to the origin remote. Use with caution.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/chibios_upgrade_instructions.md#_snippet_14\n\nLANGUAGE: Shell\nCODE:\n```\ngit checkout qmk-master\n```\n\nLANGUAGE: Shell\nCODE:\n```\ngit reset --hard develop_YYYY_qN\n```\n\nLANGUAGE: Shell\nCODE:\n```\ngit push origin qmk-master --force-with-lease\n```\n\n----------------------------------------\n\nTITLE: Navigate to Keymap Directory (Bash)\nDESCRIPTION: This command navigates to the specified keymap directory within the QMK firmware repository using the `cd` command.  It assumes the user is currently in the root directory of their QMK repository. It's used as a prerequisite for converting the keymap to C format.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/splitkb/aurora/lily58/keymaps/default/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd ./keymaps/splitkb/aurora/lily58/my_personal_keymap\n```\n\n----------------------------------------\n\nTITLE: Defining Split Transaction IDs in QMK\nDESCRIPTION: These macros allow for custom data synchronization with the slave when using the QMK-provided split transport. They are used to define transaction IDs for custom data being transmitted between the master and slave.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/config_options.md#_snippet_111\n\nLANGUAGE: c\nCODE:\n```\n#define SPLIT_TRANSACTION_IDS_KB .....\n```\n\nLANGUAGE: c\nCODE:\n```\n#define SPLIT_TRANSACTION_IDS_USER .....\n```\n\n----------------------------------------\n\nTITLE: DN FRLTKL Matrix Diagram\nDESCRIPTION: This diagram represents the key matrix of the DN FRLTKL keyboard. Each cell indicates the row and column number associated with a specific key. Some keys, like Backspace, LShift, and RShift, span multiple units.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/dnworks/frltkl/matrix_diagram.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┐┌───┬───┬───┐    ┌───────┐\n│10 │00 │11 │01 │12 │02 │13 │03 │14 │04 │15 │05 │16 │06 │17 ││07 │18 │08 │    │06     │ 2u Backspace\n├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴───┤├───┼───┼───┤    └─┬─────┤\n│20   │30 │21 │31 │22 │32 │23 │33 │24 │34 │25 │35 │26 │37   ││27 │38 │28 │      │     │\n├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴─────┤└───┴───┴───┘   ┌──┴┐46  │ ISO Enter\n│40    │50 │41 │51 │42 │52 │43 │53 │44 │54 │45 │55 │46      │                │37 │    │\n├────┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴────┬───┤    ┌───┐       └───┴────┘\n│60  │70 │61 │71 │62 │72 │63 │73 │64 │74 │65 │75 │66    │77 │    │68 │\n├────┼───┴┬──┴─┬─┴───┴───┴───┴───┴───┴──┬┴───┼───┴┬────┬┴───┤┌───┼───┼───┐\n│80  │90  │81  │93                      │85  │95  │86  │97  ││87 │98 │88 │\n└────┴────┴────┴────────────────────────┴────┴────┴────┴────┘└───┴───┴───┘\n┌────────┐                                       ┌──────────┐\n│60      │ 2.25u LShift             2.75u RShift │66        │\n└────────┘                                       └──────────┘\n┌─────┬───┬─────┬───────────────────────────┬─────┬───┬─────┐\n│80   │90 │81   │93                         │95   │86 │97   │ Tsangan/WKL\n└─────┴───┴─────┴───────────────────────────┴─────┴───┴─────┘\n```\n\n----------------------------------------\n\nTITLE: Building KBOD Firmware with Make\nDESCRIPTION: This command builds the default firmware for the KBOD keyboard using the QMK build environment. It requires QMK to be set up and configured correctly.  The output is a .hex file that can be flashed to the Arduino Micro.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/kbod/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/kbod:default\n```\n\n----------------------------------------\n\nTITLE: Building the RART 80 keyboard firmware - QMK\nDESCRIPTION: This command is used to build the firmware for the RART 80 keyboard using the QMK firmware build environment. It specifies the keyboard (rart/rart80) and the keymap (default).\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/rart/rart80/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake rart/rart80:default\n```\n\n----------------------------------------\n\nTITLE: Matrix Diagram - krado industries Promenade\nDESCRIPTION: This diagram represents the key matrix layout for the krado industries Promenade keyboard. It illustrates how the keys are arranged in rows and columns, defining the physical connections within the keyboard matrix. Multiple layouts like 2x2u, 2x3u, 6u space, and 7u space are described.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kradoindustries/promenade/matrix_diagram.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n┌─────┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬─────┐\n│00   │01 │02 │03 │04 │05 │06 │07 │08 │09 │0A │0B │0C │0D   │\n├─────┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼─────┤\n│10   │11 │12 │13 │14 │15 │16 │17 │18 │19 │1A │1B │1C │1D   │\n├─────┼───┼───┼───┼───┼───├───┼───┼───┼───┼───┼───┼───┼─────┤\n│20   │21 │22 │23 │24 │25 │26 │27 │28 │29 │2A │2B │2C │2D   │\n├─────┼───┼───┼───┼───┼───├───┼───┼───┼───┼───┼───┼───┼─────┤\n│30   │31 │32 │33 │34 │35 │36 │37 │38 │39 │3A │3B │3C │3D   │\n├─────┼───┼───┼───┼───┼───┼───┴───┼───┼───┼───┼───┼───┼─────┤\n│40   │41 │42 │43 │44 │45 │46     │48 │49 │4A │4B │4C │4D   │\n└─────┴───┴───┴───┴───┴───┴───────┴───┴───┴───┴───┴───┴─────┘\n┌─────┬───┬───┬───┬───┬───────┬───────┬───┬───┬───┬───┬─────┐\n│40   │41 │42 │43 │44 │45     │48     │49 │4A │4B │4C │4D   │ 2x2u\n└─────┴───┴───┴───┴───┴───────┴───────┴───┴───┴───┴───┴─────┘\n┌─────┬───┬───┬───┬───────────┬───────────┬───┬───┬───┬─────┐\n│40   │41 │42 │43 │45         │48         │4A │4B │4C │4D   │ 2x3u\n└─────┴───┴───┴───┴───────────┴───────────┴───┴───┴───┴─────┘\n┌─────┬───┬───┬───┬───────────────────────┬───┬───┬───┬─────┐\n│40   │41 │42 │43 │46                     │4A │4B │4C │4D   │ 6u Space\n└─────┴───┴───┴───┴───────────────────────┴───┴───┴───┴─────┘\n┌─────┬───┬─────┬───────────────────────────┬─────┬───┬─────┐\n│40   │41 │42   │46                         │4B   │4C │4D   │ 7u Space\n└─────┴───┴─────┴───────────────────────────┴─────┴───┴─────┘\n```\n\n----------------------------------------\n\nTITLE: Updating ModemManager filter policy on Linux\nDESCRIPTION: These commands update the ModemManager filter policy to 'default', which is needed for older versions of ModemManager (< 1.12) to ensure filtering works correctly when not in strict mode.  It involves writing to a configuration file, reloading the systemd daemon, and restarting ModemManager. Requires root privileges and systemd.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/faq_build.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nprintf '[Service]\nExecStart=\nExecStart=/usr/sbin/ModemManager --filter-policy=default' | sudo tee /etc/systemd/system/ModemManager.service.d/policy.conf\nsudo systemctl daemon-reload\nsudo systemctl restart ModemManager\n```\n\n----------------------------------------\n\nTITLE: Building Default Keymap for Monsgeek M1 in QMK\nDESCRIPTION: This command compiles the default keymap for the Monsgeek M1 keyboard. It requires a properly set up QMK build environment. The resulting firmware can then be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/monsgeek/m1/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake monsgeek/m1:default\n```\n\n----------------------------------------\n\nTITLE: Copyright Disclaimer Sample\nDESCRIPTION: This snippet shows a sample copyright disclaimer that an employer or school can sign, relinquishing their copyright interest in a program. It includes the organization's name, program name, author, signature, and the signer's title and date.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/lib/usbhost/USB_Host_Shield_2.0/gpl2.txt#_snippet_2\n\nLANGUAGE: Text\nCODE:\n```\nYoyodyne, Inc., hereby disclaims all copyright interest in the program\n`Gnomovision' (which makes passes at compilers) written by James Hacker.\n\n<signature of Ty Coon>, 1 April 1989\nTy Coon, President of Vice\n```\n\n----------------------------------------\n\nTITLE: Building Hub16 Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Hub16 keyboard using the QMK build environment. It assumes that the QMK build environment has already been set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/joshajohnson/hub16/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake joshajohnson/hub16:default\n```\n\n----------------------------------------\n\nTITLE: Simple Docstring Example - Python\nDESCRIPTION: Illustrates a simple docstring example adhering to the QMK's Python docstring conventions. It shows the use of triple-dquote docstrings with a short description on the first line.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/coding_conventions_python.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ndef my_awesome_function():\n    \"\"\"Return the number of seconds since 1970 Jan 1 00:00 UTC.\n    \"\"\"\n    return int(time.time())\n```\n\n----------------------------------------\n\nTITLE: Change Directory (Shell)\nDESCRIPTION: This command changes the current directory to the top-level directory of the QMK Firmware project.  This is a prerequisite step before compiling the keyboard firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/rgbkb/sol/keymaps/default/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ cd qmk_firmware\n```\n\n----------------------------------------\n\nTITLE: Adding GPL Notices to Source Files\nDESCRIPTION: This snippet demonstrates how to add copyright and licensing notices to the start of each source file in a program, in order to comply with the GNU General Public License. It shows the essential elements including the program name, author, copyright year, and a reference to the GPL.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/lib/usbhost/USB_Host_Shield_2.0/gpl2.txt#_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n<one line to give the program's name and a brief idea of what it does.>\nCopyright (C) <year>  <name of author>\n\nThis program is free software; you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation; either version 2 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program; if not, write to the Free Software\nFoundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n```\n\n----------------------------------------\n\nTITLE: Adding ChibiOS Submodule\nDESCRIPTION: Adds the ChibiOS submodule to the TMK keyboard repository. The `-f` flag forces the addition even if the directory already exists. The `-b kinetis` specifies that we are pulling the `kinetis` branch.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/input_club/ergodox_infinity/MEMO.txt#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\n$ git submodule add -f -b kinetis https://github.com/flabbergast/ChibiOS.git tmk_core/tool/chibios/chibios\n```\n\n----------------------------------------\n\nTITLE: Defining an IOS Device Enable Macro in config.h\nDESCRIPTION: This code snippet shows how to define the `IOS_DEVICE_ENABLE` macro within a keymap's `config.h` file. This macro can be used to conditionally configure settings in the `post_config.h` file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/hardware_keyboard_guidelines.md#_snippet_2\n\nLANGUAGE: c\nCODE:\n```\n#define IOS_DEVICE_ENABLE\n```\n\n----------------------------------------\n\nTITLE: Building Drop SHIFT v2 Keyboard Firmware (Makefile)\nDESCRIPTION: This command builds the default firmware for the Drop SHIFT v2 keyboard using the QMK build environment. It compiles the keyboard layout and generates a firmware image ready for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/drop/shift/v2/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake drop/shift/v2:default\n```\n\n----------------------------------------\n\nTITLE: Building Prophet Keyboard Firmware\nDESCRIPTION: This command builds the default keymap for the Prophet keyboard using the QMK firmware build environment. It assumes that the QMK build environment has been properly set up. The output will be a firmware file that can be flashed to the Prophet keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/westfoxtrot/prophet/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake westfoxtrot/prophet:default\n```\n\n----------------------------------------\n\nTITLE: Building the Twelvekey Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Twelvekey macropad using the QMK build environment. It requires QMK Firmware to be set up correctly. The resulting firmware can then be flashed onto the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kb_elmo/twelvekey/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake kb_elmo/twelvekey:default\n```\n\n----------------------------------------\n\nTITLE: Building Phoenix45_Ortho Firmware\nDESCRIPTION: This command builds the default firmware for the Phoenix45_Ortho keyboard. It requires a properly configured QMK build environment. The output will be a .hex or .bin file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/checkerboards/phoenix45_ortho/readme.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmake checkerboards/phoenix45_ortho:default\n```\n\n----------------------------------------\n\nTITLE: 60% ANSI WKL Layout Diagram\nDESCRIPTION: Visualization of a 60% ANSI keyboard layout without Windows (GUI) keys using ASCII art. This layout is often preferred by users who do not require or want Windows keys on their keyboard. The diagram portrays the key arrangement, excluding the Windows keys.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/layouts/default/readme.md#_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───────┐\n│   │   │   │   │   │   │   │   │   │   │   │   │   │       │\n├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─────┤\n│     │   │   │   │   │   │   │   │   │   │   │   │   │     │\n├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴─────┤\n│      │   │   │   │   │   │   │   │   │   │   │   │        │\n├──────┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴────────┤\n│        │   │   │   │   │   │   │   │   │   │   │          │\n├─────┬──┴┬──┴──┬┴───┴───┴───┴───┴───┴───┴──┬┴───┴┬───┬─────┤\n│     │   │     │                           │     │   │     │\n└─────┘   └─────┴───────────────────────────┴─────┘   └─────┘\n```\n\n----------------------------------------\n\nTITLE: Customizing Autocorrect Library\nDESCRIPTION: This snippet demonstrates the format for creating a custom autocorrect library in a text file.  Each line represents a correction, with the typo on the left and the correction on the right, separated by `->`. Whitespace is ignored, and typos are case-insensitive.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/autocorrect.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n:thier        -> their\nfitler        -> filter\nlenght        -> length\nouput         -> output\nwidht         -> width\n```\n\n----------------------------------------\n\nTITLE: Flashing LATE-9 Keyboard Firmware\nDESCRIPTION: This command builds and flashes the default firmware to the LATE-9 keyboard (rev1). It requires the QMK build environment and a configured flashing tool (e.g., dfu-programmer or dfu-util). The keyboard must be in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/rookiebwoy/late9/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake rookiebwoy/late9/rev1:default:flash\n```\n\n----------------------------------------\n\nTITLE: CPU Frequency Configuration (Pro Micro)\nDESCRIPTION: This configuration sets the CPU frequency for the Pro Micro variant of the USB-USB converter. The Pro Micro is running at 8 MHz due to its 3.3V operation. This line in `rules.mk` file defines the `F_CPU` variable.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/converter/usb_usb/readme.md#_snippet_2\n\nLANGUAGE: makefile\nCODE:\n```\nF_CPU = 8000000\n```\n\n----------------------------------------\n\nTITLE: Making Haven80 Solder Keyboard Firmware\nDESCRIPTION: This command is used to build the default firmware for the Haven80 Solder keyboard within the QMK firmware environment.  It utilizes the `make` command with the keyboard's specific identifier (`ah/haven80/solder`) and the default keymap. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ah/haven80/solder/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake ah/haven80/solder:default\n```\n\n----------------------------------------\n\nTITLE: JSON Code Block Example\nDESCRIPTION: This JSON snippet showcases a nested JSON structure with a dictionary containing a list. It is an example of how JSON blocks can be included in the QMK documentation for configuration or data examples. There are no dependencies required.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/__capabilities.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n```json\n{\n    \"a\": \"b\",\n    \"c\": 4,\n    \"d\": {\n        \"e\": [\n            0, 1, 2, 3\n        ]\n    }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Building 10bleoledhub Keyboard Firmware\nDESCRIPTION: This command is used to compile the firmware for the 10bleoledhub keyboard with the default keymap.  It requires a properly configured QMK build environment. The command generates a .hex or .bin file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/10bleoledhub/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake 10bleoledhub:default\n```\n\n----------------------------------------\n\nTITLE: Building the Uncertainty Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the Uncertainty keyboard. It requires a properly configured QMK build environment. The output will be a .hex file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/vinhcatba/uncertainty/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake vinhcatba/uncertainty:default\n```\n\n----------------------------------------\n\nTITLE: Flashing M60-B Firmware\nDESCRIPTION: This command builds and flashes the default firmware to the M60-B keyboard. It requires a properly set up QMK build environment and a compatible flashing tool. The keyboard needs to be in bootloader mode for this command to work.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wolf/m60_b/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake wolf/m60_b:default:flash\n```\n\n----------------------------------------\n\nTITLE: Keyboard Matrix Diagram Visualization\nDESCRIPTION: This diagram illustrates the matrix layout of the FJLaboratories Velvet Hotswap keyboard. Each cell represents a key, and the numbers indicate the row and column connections needed for keyboard firmware configuration.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/lucid/velvet_hotswap/matrix_diagram.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n┌───┐┌───┬───┬───┬───┐┌───┬───┬───┬───┐┌───┬───┬───┬───┐┌───┐┌───┬───┬───┐\n│00 ││01 │02 │03 │04 ││05 │06 │07 │08 ││09 │0A │0B │0C ││0D ││0E │0F │0G │\n└───┘└───┴───┴───┴───┘└───┴───┴───┴───┘└───┴───┴───┴───┘└───┘└───┴───┴───┘\n┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┐┌───┬───┬───┐   ┌───────┐\n│10 │11 │12 │13 │14 │15 │16 │17 │18 │19 │1A │1B │1C │3C │1D ││1E │1F │1G │   │1D     │ 2u Backspace\n├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴───┤├───┼───┼───┤   └───────┘\n│20   │21 │22 │23 │24 │25 │26 │27 │28 │29 │2A │2B │2C │2D   ││2E │2F │2G │\n├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴─────┤└───┴───┴───┘\n│30    │31 │32 │33 │34 │35 │36 │37 │38 │39 │3A │3B │3D      │\n├──────┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴────┬───┤    ┌───┐       ┌──────────┐\n│40      │41 │42 │43 │44 │45 │46 │47 │48 │49 │4A │4C    │4D │    │4F │       │4C        │ 2.75u RShift\n├────┬───┴┬──┴─┬─┴───┴───┴───┴───┴───┴──┬┴───┼───┴┬────┬┴───┤┌───┼───┼───┐   └──────────┘\n│50  │51  │52  │55                      │59  │5A  │5B  │5D  ││5E │5F │5G │\n└────┴────┴────┴────────────────────────┴────┴────┴────┴────┘└───┴───┴───┘\n┌─────┬───┬─────┬───────────────────────────┬─────┬───┬─────┐\n│50   │51 │52   │55                         │5A   │5B │5D   │ Tsangan/WKL\n└─────┴───┴─────┴───────────────────────────┴─────┴───┴─────┘\n```\n\n----------------------------------------\n\nTITLE: 60% ABNT2 Layout Diagram\nDESCRIPTION: Visualization of the 60% ABNT2 keyboard layout using ASCII art. It depicts the key arrangement for the ABNT2 standard, commonly used in Brazil. The diagram represents the physical layout of the keys on the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/layouts/default/readme.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───────┐\n│   │   │   │   │   │   │   │   │   │   │   │   │   │       │\n├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─────┤\n│     │   │   │   │   │   │   │   │   │   │   │   │   │     │\n├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┐    │\n│      │   │   │   │   │   │   │   │   │   │   │   │   │    │\n├────┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴────┤\n│    │   │   │   │   │   │   │   │   │   │   │   │   │      │\n├────┼───┴┬──┴─┬─┴───┴───┴───┴───┴───┴──┬┴───┼───┴┬──┴─┬────┤\n│    │    │    │                        │    │    │    │    │\n└────┴────┴────┴────────────────────────┴────┴────┴────┴────┘\n```\n\n----------------------------------------\n\nTITLE: Configuring Maximum ST7735 Devices (C)\nDESCRIPTION: This snippet shows how to configure the maximum number of ST7735 displays that can be used by setting the `ST7735_NUM_DEVICES` macro in `config.h`. The default value is 1. This is a preprocessor definition. Requires Quantum Painter to be enabled.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/quantum_painter.md#_snippet_22\n\nLANGUAGE: c\nCODE:\n```\n// 3 displays:\n#define ST7735_NUM_DEVICES 3\n```\n\n----------------------------------------\n\nTITLE: Flashing Delilah Keyboard Firmware with QMK\nDESCRIPTION: This command flashes the compiled QMK firmware onto the Delilah keyboard with the default keymap. It requires a properly configured QMK build environment and a connected keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/rainkeebs/delilah/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nqmk flash -kb rainkeebs/delilah -km default\n```\n\n----------------------------------------\n\nTITLE: Set Viewport (C)\nDESCRIPTION: This snippet defines the `qp_viewport` function, which controls the region of the display where raw pixel data is written. It defines the left, top, right, and bottom boundaries of the viewport.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/quantum_painter.md#_snippet_85\n\nLANGUAGE: c\nCODE:\n```\nbool qp_viewport(painter_device_t device, uint16_t left, uint16_t top, uint16_t right, uint16_t bottom);\n```\n\n----------------------------------------\n\nTITLE: Flashing Left Hand Firmware with EE_HANDS\nDESCRIPTION: This command builds and flashes the QMK firmware to the left-hand side of the alt34 keyboard using the DFU bootloader and enables EE_HANDS mode. It also updates the EEPROM with hand-specific data, and the board must be in bootloader mode. Replace `alt34/rev1` with your keyboard revision if different.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/alt34/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake alt34/rev1:default:dfu-split-left\n```\n\n----------------------------------------\n\nTITLE: Keyboard Matrix Diagram for Mode Designs M256W-S\nDESCRIPTION: This is a visual representation of the key matrix for the Mode Designs M256W-S keyboard. Each key is labeled with its corresponding row and column address within the matrix. The diagram illustrates the physical layout of the keys and their electrical connections to the keyboard controller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mode/m256ws/matrix_diagram.md#_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n                                                    ┌───────┐\n                                       2u Backspace │0D     │\n                                                    └───────┘\n┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┐\n│00 │01 │02 │03 │04 │05 │06 │07 │08 │09 │0A │0B │0C │0D │0E │1E │\n├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴───┼───┤      ┌─────┐\n│10   │11 │12 │13 │14 │15 │16 │17 │18 │19 │1A │1B │1C │1D   │4E │      │     │\n├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴─────┼───┤   ┌──┴┐2D  │ ISO Enter\n│50    │21 │22 │23 │24 │25 │26 │27 │28 │29 │2A │2B │2D      │2E │   │2C │    │\n├────┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴────┬───┼───┤   └───┴────┘\n│30  │31 │32 │33 │34 │35 │36 │37 │38 │39 │3A │3B │3C    │3D │3E │\n├────┼───┴┬──┴─┬─┴───┴───┴───┴───┴───┴──┬┴───┼───┴┬─┬───┼───┼───┤\n│40  │41  │42  │46                      │49  │4A  │ │4B │4C │4D │\n└────┴────┴────┴────────────────────────┴────┴────┘ └───┴───┴───┘\n┌────────┐\n│30      │ 2.25u LShift\n└────────┘\n┌─────┬───┬─────┬───────────────────────────┬─────┐\n│40   │41 │42   │46                         │4A   │ Blocker Tsangan\n└─────┴───┴─────┴───────────────────────────┴─────┘\n```\n\n----------------------------------------\n\nTITLE: Keyboard Matrix Diagram Visualization\nDESCRIPTION: This code snippet represents a visual matrix diagram for the 4pplet Eagle Viper REP Rev B keyboard. It depicts the layout of the keys and their respective matrix positions. The diagram includes various key sizes and layouts like ISO enter, different shift key arrangements, and spacebar options (Tsangan/WKL/HHKB, split space, 10u space).\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/4pplet/eagle_viper_rep/rev_b/matrix_diagram.md#_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n                                                    ┌───────┐\n                                       2u Backspace │36     │\n                                                    └───────┘\n┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┐\n│00 │10 │01 │11 │02 │12 │03 │13 │04 │14 │05 │15 │06 │16 │36 │\n├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴───┤      ┌─────┐\n│20   │30 │21 │31 │22 │32 │23 │33 │24 │34 │25 │35 │26 │56   │      │     │\n├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴─────┤   ┌──┴┐76  │ ISO Enter\n│40    │50 │41 │51 │42 │52 │43 │53 │44 │54 │45 │55 │76      │   │46 │    │\n├────┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴────┬───┤   └───┴────┘\n│60  │70 │61 │71 │62 │72 │63 │73 │64 │74 │65 │75 │66    │96 │\n├────┼───┴┬──┴─┬─┴───┴───┴───┴───┴───┴──┬┴───┼───┴┬────┬┴───┤\n│80  │90  │91  │93                      │94  │85  │95  │86  │\n└────┴────┴────┴────────────────────────┴────┴────┴────┴────┘\n┌────────┐                                       ┌──────────┐\n│60      │ 2.25u LShift             2.75u RShift │66        │\n└────────┘                                       └──────────┘\n┌─────┬───┬─────┬───────────────────────────┬─────┬───┬─────┐\n│80   │90 │91   │93                         │85   │95 │86   │ Tsangan/WKL/HHKB\n└─────┴───┴─────┴───────────────────────────┴─────┴───┴─────┘\n┌─────┬───┬─────┬───────────┬───┬───────────┬─────┬───┬─────┐\n│80   │90 │91   │92         │93 │84         │85   │95 │86   │ Tsangan/WKL/HHKB Split Space\n└─────┴───┴─────┴───────────┴───┴───────────┴─────┴───┴─────┘\n┌─────┬───┬───────────────────────────────────────┬───┬─────┐\n│80   │90 │93                                     │95 │86   │ 10u Space\n└─────┴───┴───────────────────────────────────────┴───┴─────┘\n```\n\n----------------------------------------\n\nTITLE: Flashing pi60_rgb Firmware\nDESCRIPTION: This command builds and flashes the default firmware for the pi60_rgb keyboard. It requires QMK build environment to be set up and the keyboard to be in bootloader mode. The command assumes that the flashing tool is properly configured in the QMK environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/1upkeyboards/pi60_rgb/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake 1upkeyboards/pi60_rgb:default:flash\n```\n\n----------------------------------------\n\nTITLE: Hand Swap Configuration for Planck Keymap in QMK\nDESCRIPTION: This code defines the `hand_swap_config` array, which maps the original column/row positions to the new column/row positions when the swap-hands action is active. The array is a 2-dimensional array with `MATRIX_ROWS` and `MATRIX_COLS` dimensions.  The keypos_t type represents the new {col, row} position.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/swap_hands.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nconst keypos_t PROGMEM hand_swap_config[MATRIX_ROWS][MATRIX_COLS] = {\n  {{11, 0}, {10, 0}, {9, 0}, {8, 0}, {7, 0}, {6, 0}, {5, 0}, {4, 0}, {3, 0}, {2, 0}, {1, 0}, {0, 0}},\n  {{11, 1}, {10, 1}, {9, 1}, {8, 1}, {7, 1}, {6, 1}, {5, 1}, {4, 1}, {3, 1}, {2, 1}, {1, 1}, {0, 1}},\n  {{11, 2}, {10, 2}, {9, 2}, {8, 2}, {7, 2}, {6, 2}, {5, 2}, {4, 2}, {3, 2}, {2, 2}, {1, 2}, {0, 2}},\n  {{11, 3}, {10, 3}, {9, 3}, {8, 3}, {7, 3}, {6, 3}, {5, 3}, {4, 3}, {3, 3}, {2, 3}, {1, 3}, {0, 3}},\n};\n```\n\n----------------------------------------\n\nTITLE: Building Kay60 Firmware\nDESCRIPTION: This command builds the default firmware for the Kay60 keyboard using the QMK build environment. It assumes the build environment has been properly set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechlovin/kay60/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake mechlovin/kay60:default\n```\n\n----------------------------------------\n\nTITLE: Flashing imi60 Keyboard Firmware\nDESCRIPTION: This command builds and flashes the default keymap to the keyten imi60 keyboard. It requires the QMK build environment to be set up correctly and the keyboard to be in a flashable state.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keyten/imi60/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake keyten/imi60:default:flash\n```\n\n----------------------------------------\n\nTITLE: Defining TKL ISO WKL Split Layout - QMK\nDESCRIPTION: Defines a TKL (Tenkeyless) ISO layout with an F13 key, without Windows (GUI) keys (WKL), split backspace, and split right shift. Combines both WKL and split key modifications for a specific key arrangement.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/layouts/default/readme.md#_snippet_23\n\nLANGUAGE: plaintext\nCODE:\n```\n┌───┐┌───┬───┬───┬───┐┌───┬───┬───┬───┐┌───┬───┬───┬───┐┌───┐ ┌───┬───┬───┐\n│   ││   │   │   │   ││   │   │   │   ││   │   │   │   ││   │ │   │   │   │\n└───┘└───┴───┴───┴───┘└───┴───┴───┴───┘└───┴───┴───┴───┘└───┘ └───┴───┴───┘\n┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┐ ┌───┬───┬───┐\n│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │ │   │   │   │\n├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴───┤ ├───┼───┼───┤\n│     │   │   │   │   │   │   │   │   │   │   │   │   │     │ │   │   │   │\n├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┐    │ └───┴───┴───┘\n│      │   │   │   │   │   │   │   │   │   │   │   │   │    │\n├────┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴───┴┬───┤     ┌───┐\n│    │   │   │   │   │   │   │   │   │   │   │   │      │   │     │   │\n├────┴┬──┴┬──┴──┬┴───┴───┴───┴───┴───┴───┴──┬┴───┴┬───┬─┴───┤ ┌───┼───┼───┐\n│     │   │     │                           │     │   │     │ │   │   │   │\n└─────┘   └─────┴───────────────────────────┴─────┘   └─────┘ └───┴───┴───┘\n```\n\n----------------------------------------\n\nTITLE: RGB Matrix Animations Configuration JSON\nDESCRIPTION: This JSON snippet demonstrates how to configure RGB Matrix animations, enabling or disabling different visual effects. Similar to RGBLight, undefined effects default to `false`. It is used to customize RGB matrix lighting effects.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/reference_info_json.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n            \"alphas_mods\": true,\n            \"breathing\": true,\n            \"cycle_left_right\": false\n        }\n```\n\n----------------------------------------\n\nTITLE: Flashing AC980mini Keyboard Firmware\nDESCRIPTION: This command flashes the compiled firmware onto the AC980mini keyboard. It requires the QMK build environment and a compatible flashing tool (e.g., dfu-util). The keyboard needs to be in bootloader mode for this command to work.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/blockboy/ac980mini/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake blockboy/ac980mini:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Quarkeys Z67 Hotswap Firmware (Makefile)\nDESCRIPTION: This command flashes the compiled firmware to the Quarkeys Z67 Hotswap keyboard.  It requires the keyboard to be in bootloader mode. Assumes the QMK build environment is configured correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/quarkeys/z67/hotswap/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake quarkeys/z67/hotswap:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Falcon Keyboard Firmware\nDESCRIPTION: This command flashes the default firmware to the Matrix Falcon keyboard. It requires a properly configured QMK build environment and a flashing tool such as dfu-programmer or avrdude. Ensure the keyboard is in bootloader mode before flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/matrix/falcon/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake matrix/falcon:default:flash\n```\n\n----------------------------------------\n\nTITLE: Running ST7565 Task\nDESCRIPTION: Executes the main task for the ST7565 display, including timeout management and calling `st7565_task_user`. Effectively it's `st7565_render` with timeout management and user function calling.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/st7565.md#_snippet_29\n\nLANGUAGE: C\nCODE:\n```\n// Basically it's st7565_render, but with timeout management and st7565_task_user calling!\nvoid st7565_task(void);\n```\n\n----------------------------------------\n\nTITLE: Building the Treasure TYPE-9 Series II Firmware\nDESCRIPTION: This command compiles the default keymap for the Treasure TYPE-9 Series II keyboard using the QMK build environment. It requires a properly configured QMK build environment. The output is the firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/treasure/type9s2/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake treasure/type9s2:default\n```\n\n----------------------------------------\n\nTITLE: Building Zoom87 Firmware\nDESCRIPTION: This command builds the QMK firmware for the Zoom87 keyboard with the default keymap.  It assumes that the QMK build environment has already been set up. The resulting firmware file can then be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/meletrix/zoom87/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake meletrix/zoom87:default\n```\n\n----------------------------------------\n\nTITLE: Building Zodiark Keyboard Firmware - QMK\nDESCRIPTION: This command builds the default keymap for the Zodiark keyboard. It requires a properly configured QMK build environment. The output is a .hex or .bin file that can be flashed onto the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/aleblazer/zodiark/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake aleblazer/zodiark:default\n```\n\n----------------------------------------\n\nTITLE: Building Croxsplit44 Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Croxsplit44 keyboard using the QMK build environment. It assumes the QMK build environment is already set up. It compiles the keymap and keyboard definitions into a firmware image that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/croxsplit44/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake handwired/croxsplit44:default\n```\n\n----------------------------------------\n\nTITLE: Building OTD PLUS Keyboard Firmware - Makefile\nDESCRIPTION: This command builds the default firmware for the OTD PLUS keyboard. It utilizes the QMK build environment to compile the keyboard's specific configuration. Ensure the QMK build environment is properly set up before running this command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/hardlineworks/otd_plus/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake hardlineworks/otd_plus:default\n```\n\n----------------------------------------\n\nTITLE: Configure Wear-Leveling SPI Flash Driver\nDESCRIPTION: This snippet configures the wear-leveling SPI Flash driver. It requires a working SPI NOR Flash peripheral configuration. Configurable options include the number of blocks, block offset, logical size, backing size, and write width.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/eeprom.md#_snippet_5\n\nLANGUAGE: c\nCODE:\n```\n#define WEAR_LEVELING_EXTERNAL_FLASH_BLOCK_COUNT 1\n#define WEAR_LEVELING_EXTERNAL_FLASH_BLOCK_OFFSET 0\n#define WEAR_LEVELING_LOGICAL_SIZE ((block_count*block_size)/2)\n#define WEAR_LEVELING_BACKING_SIZE (block_count*block_size)\n#define BACKING_STORE_WRITE_SIZE 8\n```\n\n----------------------------------------\n\nTITLE: Secure Unlock Sequence Configuration JSON\nDESCRIPTION: This JSON snippet shows an example of defining an unlock sequence for the Secure feature. The sequence consists of a list of matrix locations that must be activated in the specified order to unlock the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/reference_info_json.md#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n[[0, 0], [0, 1], [4, 3]]\n```\n\n----------------------------------------\n\nTITLE: Flashing 6PAD Firmware with QMK\nDESCRIPTION: This command compiles and flashes the QMK firmware to the 6PAD macropad using the default configuration. It requires a properly set up QMK build environment and a connected 6PAD device in a flashable state.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/zlabkeeb/6pad/readme.md#_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nmake zlabkeeb/6pad:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Lancer Keyboard Firmware\nDESCRIPTION: Builds the default firmware for the subrezon/lancer keyboard. This command compiles the keyboard's keymap and firmware based on the default configuration. It requires a properly set up QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/subrezon/lancer/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake subrezon/lancer:default\n```\n\n----------------------------------------\n\nTITLE: Defining USB Max Power Consumption in QMK config.h\nDESCRIPTION: This code snippet sets the maximum power consumption (in mA) over USB for the device (default: 500) in QMK firmware. This setting is configured in the `config.h` file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/config_options.md#_snippet_29\n\nLANGUAGE: c\nCODE:\n```\n#define USB_MAX_POWER_CONSUMPTION 500\n```\n\n----------------------------------------\n\nTITLE: Flashing Jones Keyboard Firmware - QMK\nDESCRIPTION: This command flashes the default firmware for the Jones keyboard's v1 version onto the keyboard.  It uses the QMK command-line tools to upload the compiled firmware image to the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/jones/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake jones/v1:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building QMK Firmware for VE.A Keyboard\nDESCRIPTION: This command builds the QMK firmware with the default keymap for the VE.A keyboard. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/oddforge/vea/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake oddforge/vea:default\n```\n\n----------------------------------------\n\nTITLE: Building QCK75 Firmware\nDESCRIPTION: This command builds the default firmware for the QCK75/v1 keyboard. It uses the QMK build environment to compile the keyboard's keymap and other configurations into a firmware image ready for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/qck75/v1/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake qck75/v1:default\n```\n\n----------------------------------------\n\nTITLE: Attaching LVGL to Display (C)\nDESCRIPTION: This code snippet demonstrates how to attach LVGL to a Quantum Painter display. It requires an already initialized `painter_device_t` and calls `qp_lvgl_attach` to set up LVGL. After attachment, LVGL 'owns' the display.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/quantum_painter_lvgl.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nbool qp_lvgl_attach(painter_device_t device);\n```\n\n----------------------------------------\n\nTITLE: Building BNR1 V1 Keyboard Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the BNR1 V1 keyboard using the QMK build environment. It compiles the keymap and other necessary files to create a firmware image that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/binepad/bnr1/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake binepad/bnr1/v1:default\n```\n\n----------------------------------------\n\nTITLE: Building Elora Keyboard Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Elora keyboard (revision 1) using the QMK build environment. It assumes that the QMK build environment has been set up correctly. The resulting `.uf2` file can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/splitkb/elora/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake splitkb/elora/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Building Infinity87 RGB Rev.1 Firmware\nDESCRIPTION: This command builds the default firmware for the Infinity87 RGB Rev.1 keyboard. It requires a properly set up QMK build environment. The resulting firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechlovin/infinity87/rgb_rev1/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake mechlovin/infinity87/rgb_rev1:default\n```\n\n----------------------------------------\n\nTITLE: Flashing QMK Firmware to IBM Model M Keyboard\nDESCRIPTION: This command flashes the built QMK firmware to the IBM Model M keyboard using the `led_ws2812` configuration. It specifies the keyboard layout, the target environment, and the flash command. Note that the QMK bootloader should not be used; instead, use the bootloader from the specified external source.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ibm/model_m/mschwingen/led_ws2812/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake ibm/model_m/mschwingen/led_ws2812:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for CXT Studio 12E3 with QMK\nDESCRIPTION: This command builds the default firmware for the CXT Studio 12E3 keyboard using the QMK build environment. It compiles the keymap and necessary drivers to create a firmware image ready for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cxt_studio/12e3/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake cxt_studio/12e3:default\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Bootloader Drivers with pnputil\nDESCRIPTION: This snippet shows how to uninstall bootloader drivers using the `pnputil` command-line utility. The command requires administrative privileges and utilizes the `Inf name` value obtained from the device properties in Device Manager. This involves identifying the published name of the driver using `pnputil /enum-drivers` and then deleting the driver package using `pnputil /delete-driver oemXX.inf /uninstall`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/driver_installation_zadig.md#_snippet_0\n\nLANGUAGE: batch\nCODE:\n```\npnputil /enum-drivers\n```\n\nLANGUAGE: batch\nCODE:\n```\npnputil /delete-driver oemXX.inf /uninstall\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for Pro Micro Controller\nDESCRIPTION: This command builds the QMK firmware for the Lotus 58 Glow keyboard using the Pro Micro controller with the default keymap. It compiles the source code and prepares the firmware for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/tweetydabird/lotus58/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake tweetydabird/lotus58/promicro:default\n```\n\n----------------------------------------\n\nTITLE: Flashing NCR-80 with QMK Firmware\nDESCRIPTION: These commands demonstrate how to flash the built QMK firmware to the NCR-80 keyboard. The commands specify the keyboard (mt/ncr80/r2), the variant (hotswap or solder), and the keymap (default), along with the 'flash' target.  The build environment and necessary tools must be set up prior to executing these commands.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mt/ncr80/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake mt/ncr80/r2/hotswap:default:flash\n```\n\nLANGUAGE: bash\nCODE:\n```\nmake mt/ncr80/r2/solder:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware to BINEPAD BNK8 with QMK\nDESCRIPTION: This command builds and flashes the default firmware to the BINEPAD BNK8 macropad using the QMK build environment. It combines the build and flash steps into a single command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/binepad/bnk8/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake binepad/bnk8:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Ninjin Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the Ninjin keyboard using the QMK build environment. It compiles the keyboard layout and firmware into a .hex or .bin file that can be flashed to the keyboard's microcontroller. It requires QMK build environment to be set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/xelus/ninjin/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake xelus/ninjin:default\n```\n\n----------------------------------------\n\nTITLE: Defining Keyboard Layout: fullsize_extended_ansi\nDESCRIPTION: This snippet defines a keyboard layout macro named `LAYOUT_fullsize_extended_ansi`. It's designed to configure a fullsize extended ANSI keyboard within QMK firmware. The specific key mappings and structure associated with this layout are not detailed in this single snippet but are referenced by its name.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/layouts/default/fullsize_extended_ansi/readme.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nLAYOUT_fullsize_extended_ansi\n```\n\n----------------------------------------\n\nTITLE: Building 7skb Keyboard Firmware with QMK\nDESCRIPTION: This command builds the QMK firmware for the 7skb keyboard with a default configuration. It assumes that the QMK build environment is already set up. The command uses the `make` utility to compile the firmware and generate a .hex file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/salicylic_acid3/7skb/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake salicylic_acid3/7skb/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Building WT60-H3 Keyboard Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the wilba_tech WT60_H3 keyboard using the QMK build environment. It compiles the keyboard layout and generates the firmware file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wilba_tech/wt60_h3/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake wilba_tech/wt60_h3:default\n```\n\n----------------------------------------\n\nTITLE: Building elephant42 Keyboard Firmware\nDESCRIPTION: This command builds the default keymap for the elephant42 keyboard using the QMK build environment. It requires the QMK build environment to be set up beforehand. The output is a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/elephant42/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake elephant42:default\n```\n\n----------------------------------------\n\nTITLE: Building QMK Firmware for Unicomp Keyboard\nDESCRIPTION: This command builds the QMK firmware for the specified Unicomp keyboard layout. It requires a properly configured QMK build environment. The output is a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/unicomp/classic_ultracl_pre_2013/overnumpad_1xb/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake unicomp/classic_ultracl_pre_2013/overnumpad_1xb:default\n```\n\n----------------------------------------\n\nTITLE: Flashing SCRAMBLE with QMK\nDESCRIPTION: This command flashes the default keymap to the SCRAMBLE macropad using the QMK build system. It compiles the firmware for the 'nullbitsco/scramble' keyboard with the 'default' keymap and uploads it to the device. This assumes that the QMK build environment is properly set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/nullbitsco/scramble/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake nullbitsco/scramble:default\n```\n\n----------------------------------------\n\nTITLE: Building the Model H Keyboard Firmware\nDESCRIPTION: This command builds the QMK firmware for the IBM Model M keyboard with the Model H controller using the default keymap. It compiles the source code and prepares the firmware for flashing onto the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ibm/model_m/modelh/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake ibm/model_m/modelh:default\n```\n\n----------------------------------------\n\nTITLE: Building VRYNBOARD Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the VRYNBOARD macropad using the QMK build environment. It requires a correctly configured QMK environment to function. The output will be a firmware file that can be flashed onto the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/zlabkeeb/vrynboard/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake zlabkeeb/vrynboard:default\n```\n\n----------------------------------------\n\nTITLE: Example Usage (Docker or Python)\nDESCRIPTION: This provides an example of running the keymap beautifier script, either with Docker or directly with Python, using the `-p` and `-c` flags to format the output with `LAYOUT_ergodox_pretty` and center alignment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ergodox_ez/util/keymap_beautifier/README.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n./docker_run.sh input.c -p -c -o output.c\n# or if you don't want to use docker:\n#./KeymapBeautifier.py input.c -p -c -o output.c\n```\n\n----------------------------------------\n\nTITLE: Building the Keyboard Firmware\nDESCRIPTION: This command builds the default keymap for the BM60HSRGB_EC/rev1 keyboard using the QMK build environment. It requires the QMK build environment to be set up and configured. The output is a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kprepublic/bm60hsrgb_ec/rev1/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake kprepublic/bm60hsrgb_ec/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Flashing BB40 Firmware with QMK (make)\nDESCRIPTION: This command builds and flashes the default firmware for the BB40 keyboard using the QMK build system.  It uses the `flash` target, which builds the firmware and then attempts to flash it to the connected keyboard. This requires the QMK build environment to be properly configured for flashing to the STM32 BlackPill.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechwild/bb40/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake mechwild/bb40/f401:default:flash\n```\n\nLANGUAGE: make\nCODE:\n```\nmake mechwild/bb40/f411:default:flash\n```\n\n----------------------------------------\n\nTITLE: Enabling Compile Keycode in QMK config.h\nDESCRIPTION: This code snippet enables the `QK_MAKE` keycode in QMK firmware. This setting is configured in the `config.h` file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/config_options.md#_snippet_38\n\nLANGUAGE: c\nCODE:\n```\n#define ENABLE_COMPILE_KEYCODE\n```\n\n----------------------------------------\n\nTITLE: OLED Logo Definition - Trans Rights (C)\nDESCRIPTION: This C code defines a bitmap representing a \"Trans Rights\" logo for an OLED display.  Each byte represents a column of pixels on the OLED screen. This bitmap can be integrated into the QMK firmware to customize the OLED display on the Pancake 2 keyboard, displaying this logo. No external dependencies are required, as it is designed to be used within the QMK framework.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/spaceman/pancake/rev2/readme.md#_snippet_2\n\nLANGUAGE: C\nCODE:\n```\n0x00, 0x00, 0x00, 0x02, 0x02, 0xFE,\n    0x02, 0x02, 0x00, 0xFE, 0x12, 0x12,\n    0xEC, 0x00, 0xFC, 0x12, 0x12, 0xFC,\n    0x00, 0xFE, 0x04, 0x18, 0x20, 0xFE,\n    0x00, 0x8C, 0x92, 0x92, 0x62, 0x00,\n    0x00, 0x00, 0x00, 0xFE, 0x12, 0x12,\n    0xEC, 0x00, 0x82, 0xFE, 0x82, 0x00,\n    0x7C, 0x82, 0x82, 0x92, 0x70, 0x00,\n    0xFE, 0x10, 0x10, 0xFE, 0x00, 0x02,\n    0x02, 0xFE, 0x02, 0x02, 0x00, 0x8C,\n    0x92, 0x92, 0x62, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0xC0, 0xF0, 0xF0, 0xF8,\n    0x98, 0x98, 0xF8, 0xF8, 0xF8, 0xF8,\n    0xFC, 0xFE, 0xFE, 0xFE, 0xF6, 0xF2,\n    0xF0, 0xE0, 0xE0, 0xC0, 0xC0, 0xC0,\n    0xE0, 0xF0, 0x70, 0x30, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x01, 0x03,\n    0x07, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F,\n    0x0F, 0x0F, 0x0F, 0x1F, 0x3F, 0x7F,\n    0x7F, 0x6F, 0x07, 0x07, 0x03, 0x03,\n    0x03, 0x03, 0x0F, 0x1F, 0x1E, 0x18,\n    0x00, 0x00,\n```\n\n----------------------------------------\n\nTITLE: Keymap Beautifier execution (without Docker)\nDESCRIPTION: This command executes the KeymapBeautifier.py script directly using Python. It requires pycparser to be installed. The -p and -c options are used for pretty output and center justification.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ergodox_ez/util/keymap_beautifier/README.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ncd QMK_GIT_REPO_dir/keyboards/ergodox_ez/util/keymap_beautifier\ncp PATH_TO_YOUR_C_SOURCE_FILE.c input.c\n./KeymapBeautifier.py input.c -p -c -o output.c\n```\n\n----------------------------------------\n\nTITLE: NK87 Keyboard Matrix Diagram\nDESCRIPTION: This snippet represents the NK87 keyboard matrix diagram. It shows the row and column mapping for each key on the keyboard. The numbers inside each block represent the matrix position of the key, which is essential for configuring the keyboard firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/novelkeys/nk87/matrix_diagram.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n┌───┐┌───┬───┬───┬───┐┌───┬───┬───┬───┐┌───┬───┬───┬───┐┌───┐┌───┬───┬───┐\n│00 ││01 │02 │03 │04 ││05 │06 │07 │08 ││09 │0A │0B │0C ││0D ││0E │0F │0G │\n└───┘└───┴───┴───┴───┘└───┴───┴───┴───┘└───┴───┴───┴───┘└───┘└───┴───┴───┘\n┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───────┐┌───┬───┬───┐\n│10 │11 │12 │13 │14 │15 │16 │17 │18 │19 │1A │1B │1C │1D     ││1E │1F │1G │\n├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─────┤├───┼───┼───┤\n│20   │21 │22 │23 │24 │25 │26 │27 │28 │29 │2A │2B │2C │3C   ││2E │2F │2G │\n├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴─────┤└───┴───┴───┘\n│30    │31 │32 │33 │34 │35 │36 │37 │38 │39 │3A │3B │3D      │\n├──────┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴────────┤    ┌───┐\n│40      │42 │43 │44 │45 │46 │47 │48 │49 │4A │4B │4C        │    │4F │\n├─────┬──┴┬──┴──┬┴───┴───┴───┴───┴───┴───┴──┬┴───┴┬───┬─────┤┌───┼───┼───┐\n│50   │51 │52   │56                         │5B   │5C │5D   ││5E │5F │5G │\n└─────┴───┴─────┴───────────────────────────┴─────┴───┴─────┘└───┴───┴───┘\n```\n\n----------------------------------------\n\nTITLE: AMJKeyboard AMJ84 Matrix Diagram\nDESCRIPTION: This diagram shows the matrix layout of the AMJKeyboard AMJ84. Each cell represents a key, with the coordinates indicating its position in the matrix (row and column). The diagram also includes labels for keys with specific sizes, such as LShift.  It is crucial for understanding how the keyboard's switches are connected to the microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/amjkeyboard/amj84/matrix_diagram.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┐\n│00 │01 │02 │03 │04 │05 │06 │07 │08 │09 │0A │0B │0C │0D │58 │0E │\n├───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┴───┼───┤\n│10 │11 │12 │13 │14 │15 │16 │17 │18 │19 │1A │1B │1C │1D     │1E │\n├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─────┼───┤      ┌─────┐\n│20   │21 │22 │23 │24 │25 │26 │27 │28 │29 │2A │2B │2C │2D   │2E │      │     │\n├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴─────┼───┤   ┌──┴┐3D  │ ISO Enter\n│30    │31 │32 │33 │34 │35 │36 │37 │38 │39 │3A │3B │3D      │3E │   │3C │    │\n├────┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴────┬───┼───┤   └───┴────┘\n│40  │41 │42 │43 │44 │45 │46 │47 │48 │49 │4A │4B │4C    │4D │4E │\n├────┼───┴┬──┴─┬─┴───┴───┴───┴───┴───┴──┬┴──┬┴──┬┴──┬───┼───┼───┤\n│50  │51  │52  │55                      │59 │5A │5B │5C │5D │5E │\n└────┴────┴────┴────────────────────────┴───┴───┴───┴───┴───┴───┘\n┌────────┐                              └─────┬─────┘\n│40      │ 2.25u LShift                       │\n└────────┘                              ┌─────┴─────┐\n┌─────┬───┬─────┬───────────────────────┬─────┬─────┐\n│50   │51 │52   │55                     │5A   │5B   │ RWKL\n└─────┴───┴─────┴───────────────────────┴─────┴─────┘\n 1.5u  1u  1.5u  6u\n```\n\n----------------------------------------\n\nTITLE: Code Comment Demonstrating Zero Crossing - C\nDESCRIPTION: This code provides a visual representation of the zero crossing concept using ASCII art within a C code comment.  It illustrates how the audio signal crosses the AUDIO_DAC_OFF_VALUE, which represents the DAC's resting state. This is useful for understanding audio waveform behavior in relation to DAC output values.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/audio.md#_snippet_5\n\nLANGUAGE: c\nCODE:\n```\n        /* zero crossing (or approach, whereas zero == DAC_OFF_VALUE, which can be configured to anything from 0 to DAC_SAMPLE_MAX)\n         * ============================*=*========================== AUDIO_DAC_SAMPLE_MAX\n         *                          *       *\n         *                        *           *\n         * ---------------------------------------------------------\n         *                     *                 *                  } AUDIO_DAC_SAMPLE_MAX/100\n         * --------------------------------------------------------- AUDIO_DAC_OFF_VALUE\n         *                  *                       *               } AUDIO_DAC_SAMPLE_MAX/100\n         * ---------------------------------------------------------\n         *               *\n         * *           *\n         *   *       *\n         * =====*=*================================================= 0x0\n         */\n```\n\n----------------------------------------\n\nTITLE: Building NIBBLE Keyboard Firmware with QMK\nDESCRIPTION: This command is used to compile the default keymap for the NIBBLE keyboard using the QMK build environment. It assumes that the QMK build environment has been correctly set up. The output is a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/nullbitsco/nibble/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake nullbitsco/nibble:default\n```\n\n----------------------------------------\n\nTITLE: Enabling EE Hands\nDESCRIPTION: Reads the handedness value stored in the EEPROM after eeprom-lefthand.eep/eeprom-righthand.eep has been flashed to their respective halves. Only works if `SPLIT_HAND_PIN` and `SPLIT_HAND_MATRIX_GRID` are not defined.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/config_options.md#_snippet_90\n\nLANGUAGE: C\nCODE:\n```\n#define EE_HANDS\n```\n\n----------------------------------------\n\nTITLE: SPDX License Identifier Example\nDESCRIPTION: This snippet demonstrates the SPDX license identifier used as an alternative to the full GPLv2 license header. It provides a concise way to specify the license type for a source file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/pr_checklist.md#_snippet_2\n\nLANGUAGE: C\nCODE:\n```\n// Copyright 2024 Your Name (@yourgithub)\n// SPDX-License-Identifier: GPL-2.0-or-later\n```\n\n----------------------------------------\n\nTITLE: Import Keyboard from KBFirmware Export (qmk import-kbfirmware)\nDESCRIPTION: This command creates a new keyboard based on a Keyboard Firmware Builder export. Requires the filename as an argument.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/cli_commands.md#_snippet_33\n\nLANGUAGE: text\nCODE:\n```\nusage: qmk import-kbfirmware [-h] filename\n```\n\nLANGUAGE: text\nCODE:\n```\n$ qmk import-kbfirmware ~/Downloads/gh62.json\n```\n\n----------------------------------------\n\nTITLE: Building MNT Reform Firmware - QMK\nDESCRIPTION: This command builds the default keymap for the MNT Reform keyboard. It requires the QMK build environment to be set up beforehand. The output will be a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mntre/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake mntre:default\n```\n\n----------------------------------------\n\nTITLE: Matrix Diagram for Viktus Design LLC Styrka - Topre\nDESCRIPTION: This diagram represents the key matrix for the Viktus Design LLC Styrka - Topre keyboard. Each cell corresponds to a physical key, and the labels inside the cells indicate the matrix row and column coordinates. The diagram helps in understanding how the keyboard controller scans the keys.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/viktus/styrka_topre/matrix_diagram.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n                                                             ┌───────┐\n                                                2u Backspace │0G     │\n                                                             └───────┘\n┌───┬───┐┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┐\n│00 │01 ││02 │03 │04 │05 │06 │07 │08 │09 │0A │0B │0C │0D │0E │0F │0G │0H │\n├───┼───┤├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴───┼───┤\n│10 │11 ││12   │13 │14 │15 │16 │17 │18 │19 │1A │1B │1C │1D │1E │1G   │1H │\n├───┼───┤├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴─────┼───┤\n│20 │21 ││22    │23 │24 │25 │26 │27 │28 │29 │2A │2B │2C │2D │2F      │2H │\n├───┼───┤├──────┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴────┬───┼───┤\n│30 │31 ││32      │34 │35 │36 │37 │38 │39 │3A │3B │3C │3D │3E    │3G │3H │\n├───┼───┤├─────┬──┴┬──┴──┬┴───┴───┴───┴───┴───┴──┬┴───┴┬──┴┬─┬───┼───┼───┤\n│40 │41 ││42   │43 │44   │48                     │4C   │4D │ │4E │4G │4H │\n└───┴───┘└─────┴───┴─────┴───────────────────────┴─────┴───┘ └───┴───┴───┘\n         ┌─────┬───┬─────┬───────────────────────────┬─────┐\n         │42   │43 │44   │48                         │4D   │ Blocker Tsangan\n         └─────┴───┴─────┴───────────────────────────┴─────┘\n```\n\n----------------------------------------\n\nTITLE: Changing Delay Behavior - Makefile\nDESCRIPTION: This snippet shows how to modify the delay behavior using different compilation options. Options like `always_delay`, `adaptive_delay`, and `adaptive_delay_fast` can be used to control the delay strategy during matrix scanning. The example compiles for the symmetric70_proto keyboard layout on a Pro Micro.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/symmetric70_proto/matrix_debug/readme.md#_snippet_3\n\nLANGUAGE: Makefile\nCODE:\n```\nmake MTEST=matrix_debug_delay,always_delay handwired/symmetric70_proto/promicro/normal:default:flash\nmake MTEST=matrix_debug_delay,adaptive_delay,mdelay0 handwired/symmetric70_proto/promicro/normal:default:flash\nmake MTEST=matrix_debug_delay,adaptive_delay_fast,mdelay0 handwired/symmetric70_proto/promicro/normal:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Keybow 2040 Firmware\nDESCRIPTION: This command builds the default firmware for the Keybow 2040 using the QMK build environment. It compiles the source code and generates a firmware image that can be flashed onto the device. Make sure the QMK build environment is set up correctly before running this command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/pimoroni/keybow2040/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake pimoroni/keybow2040:default\n```\n\n----------------------------------------\n\nTITLE: Defining 64-key ISO Keyboard Layout\nDESCRIPTION: This snippet defines a 64-key ISO keyboard layout. The snippet uses ASCII characters to visually represent the arrangement of keys on the keyboard. This representation is intended for documentation purposes.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/layouts/default/64_iso/readme.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nLAYOUT_64_iso\n┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───────┐\n│   │   │   │   │   │   │   │   │   │   │   │   │   │       │\n├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─────┤\n│     │   │   │   │   │   │   │   │   │   │   │   │   │     │\n├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┐    │\n│      │   │   │   │   │   │   │   │   │   │   │   │   │    │\n├───┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬───┤\n│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │\n├───┴┬──┴─┬─┴──┬┴───┴───┴───┴───┴───┴───┼───┼───┼───┼───┼───┤\n│    │    │    │                        │   │   │   │   │   │\n└────┴────┴────┴────────────────────────┴───┴───┴───┴───┴───┘\n```\n\n----------------------------------------\n\nTITLE: Define LAYOUT_66_ansi\nDESCRIPTION: This line defines a keyboard layout named `LAYOUT_66_ansi`. This layout is likely used within a QMK firmware configuration to map physical keys on a 66-key ANSI keyboard to specific actions or characters. The exact definition would typically involve specifying the key positions and their corresponding functionalities in a matrix format, though that detail isn't included in the snippet.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/layouts/community/66_ansi/readme.md#_snippet_0\n\nLANGUAGE: Keyboard Layout Definition\nCODE:\n```\nLAYOUT_66_ansi\n```\n\n----------------------------------------\n\nTITLE: LED Mapping for RGB Driver (C)\nDESCRIPTION: This snippet shows how to map LED indices to specific output pins for the RGB driver. It involves creating an array `g_is31fl3743a_leds` of type `is31fl3743a_led_t` in your `<keyboardname>.c` file. Each element in the array defines the driver index and the PWM register addresses (corresponding to SWx_CSy pins) for the red, green, and blue channels of an LED. The `PROGMEM` keyword indicates that the array is stored in program memory.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/is31fl3743a.md#_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nconst is31fl3743a_led_t PROGMEM g_is31fl3743a_leds[IS31FL3743A_LED_COUNT] = {\n/* Driver\n *   |  R         G         B */\n    {0, SW1_CS1,  SW1_CS2,  SW1_CS3},\n    // etc...\n};\n```\n\n----------------------------------------\n\nTITLE: Building AEK 2 USB Firmware with Make\nDESCRIPTION: This snippet demonstrates how to build the default firmware for the AEK 2 USB keyboard using the `make` command.  It assumes the QMK build environment has already been set up according to the QMK documentation. The resulting firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kb_elmo/aek2_usb/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake kb_elmo/aek2_usb:default\n```\n\n----------------------------------------\n\nTITLE: Building Splitty Firmware (make)\nDESCRIPTION: This command builds the default firmware for the Splitty keyboard. It requires a properly set up QMK build environment. The output is a firmware file ready to be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/splitty/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake splitty:default\n```\n\n----------------------------------------\n\nTITLE: Checking out ChibiOS-Contrib branch\nDESCRIPTION: Creates and checks out a new branch for a specific ChibiOS-Contrib version.  `chibios-20.3.x` should be adjusted to the correct version number.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/chibios_upgrade_instructions.md#_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\ngit checkout -b chibios-20.3.x upstream/chibios-20.3.x\n```\n\n----------------------------------------\n\nTITLE: Raise Layer Keymap Definition\nDESCRIPTION: Defines the raise layer key assignments for the Dozen0 keyboard. This layer is currently empty.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/yynmt/dozen0/keymaps/default/readme.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n,-----------------------------------------.\n|      |      |      |      |      |      |\n|      |      |      |      |      |      |\n|------+------+------+------+------+------|\n|      |      |      |      |      |      |\n|      |      |      |      |      |      |\n`-----------------------------------------'\n```\n\n----------------------------------------\n\nTITLE: Building the keyboard firmware\nDESCRIPTION: This command builds the firmware for the takashicompany/klec_01 keyboard with the default keymap. It assumes that the QMK build environment has already been set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/takashicompany/klec_01/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake takashicompany/klec_01:default\n```\n\n----------------------------------------\n\nTITLE: Defining the FN2 Layer Keymap\nDESCRIPTION: This snippet defines the FN2 layer keymap for the Navpad 1.0. It primarily contains keys with no assigned action (KC_NO). It also contains UG_TOGG, UG_NEXT, UG_PREV, UG_HUEU, UG_SATU, UG_VALU, UG_HUED, UG_SATD, and UG_VALD keycodes, suggesting usage with the Rotary Encoder.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/yushakobo/navpad/10/keymaps/default/readme.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n   ,-------------------------------. ,-------.\n   | UG_TOGG  | UG_NEXT  | UG_PREV | | KC_NO |\n   |----------+----------+----------+-------------------------------------------------.\n   | UG_HUEU  | UG_SATU  | UG_VALU  | KC_NO    | KC_NO     | KC_NO    | KC_NO         |\n   |----------+----------+----------+----------+-----------+----------+---------------|\n   | UG_HUED  | UG_SATD  | UG_VALD  | KC_NO    | KC_NO     | KC_NO    | KC_NO         |\n   `--------------------------------+----------+-----------+----------+---------------|\n                                    | KC_NO    | KC_NO     | KC_NO    | KC_NO         |\n   ,--------------------------------+----------+-----------+----------+---------------|\n   | KC_NO    | KC_NO    | KC_NO    | KC_NO    | KC_NO     | KC_NO    | KC_NO         |\n   |----------+----------+----------+----------+-----------+----------+---------------|\n   | KC_NO    | KC_NO    | KC_NO    | KC_NO    | KC_NO     | KC_NO    | KC_NO         |\n   '----------------------------------------------------------------------------------`\n```\n\n----------------------------------------\n\nTITLE: Building TGR Alice Firmware\nDESCRIPTION: This command builds the default firmware for the TGR Alice keyboard. It assumes that the QMK build environment has already been set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/tgr/alice/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake tgr/alice:default\n```\n\n----------------------------------------\n\nTITLE: Makefile Code Block Example\nDESCRIPTION: This Makefile snippet shows a conditional check for the `BUILD` variable. If `BUILD` is not defined, it sets `CHUNDER_REQUIRED` to `yes`. This example illustrates how to embed Makefile code within the QMK documentation. No dependencies are required.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/__capabilities.md#_snippet_1\n\nLANGUAGE: makefile\nCODE:\n```\n```makefile\nifeq ($(BUILD),)\n     CHUNDER_REQUIRED = yes\nendif\n```\n```\n\n----------------------------------------\n\nTITLE: Building Chimera65 Default Keymap (Makefile)\nDESCRIPTION: This snippet shows the make command to build the default keymap for the Chimera65 keyboard using QMK Firmware. It assumes that the build environment is already set up. The output will be a firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cannonkeys/chimera65/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake cannonkeys/chimera65:default\n```\n\n----------------------------------------\n\nTITLE: Defining TKL ANSI Tsangan Keyboard Layout\nDESCRIPTION: This snippet defines a TKL ANSI layout with a Tsangan bottom row, displayed using ASCII art.  This is used to visually define the custom bottom row for use within the QMK firmware. No dependencies are listed except the knowledge of standard keyboard layouts and Tsangan variations.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/layouts/default/readme.md#_snippet_17\n\nLANGUAGE: text\nCODE:\n```\n┌───┐   ┌───┬───┬───┬───┐ ┌───┬───┬───┬───┐ ┌───┬───┬───┬───┐ ┌───┬───┬───┐\n│   │   │   │   │   │   │ │   │   │   │   │ │   │   │   │   │ │   │   │   │\n└───┘   └───┴───┴───┴───┘ └───┴───┴───┴───┘ └───┴───┴───┴───┘ └───┴───┴───┘\n┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───────┐ ┌───┬───┬───┐\n│   │   │   │   │   │   │   │   │   │   │   │   │   │       │ │   │   │   │\n├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─────┤ ├───┼───┼───┤\n│     │   │   │   │   │   │   │   │   │   │   │   │   │     │ │   │   │   │\n├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴─────┤ └───┴───┴───┘\n│      │   │   │   │   │   │   │   │   │   │   │   │        │\n├──────┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴────────┤     ┌───┐\n│        │   │   │   │   │   │   │   │   │   │   │          │     │   │\n├─────┬──┴┬──┴──┬┴───┴───┴───┴───┴───┴───┴──┬┴───┴┬───┬─────┤ ┌───┼───┼───┐\n│     │   │     │                           │     │   │     │ │   │   │   │\n└─────┴───┴─────┴───────────────────────────┴─────┴───┴─────┘ └───┴───┴───┘\n```\n\n----------------------------------------\n\nTITLE: SmithRune I160-S Keyboard Matrix Diagram\nDESCRIPTION: This ASCII art diagram visually represents the key matrix layout for the SmithRune I160-S keyboard. It maps each physical key to its corresponding row and column location within the matrix. This information is crucial for configuring the keyboard firmware to correctly interpret key presses. The diagram indicates the keycodes and sizes of specific keys, such as the 2u Backspace, 2.25u Left Shift, and 2.75u Right Shift.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/smithrune/iron160/iron160_s/matrix_diagram.md#_snippet_0\n\nLANGUAGE: ASCII\nCODE:\n```\n                                                    ┌───────┐\n                                       2u Backspace │0D     │\n                                                    └───────┘\n┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┐\n│00 │01 │02 │03 │04 │05 │06 │07 │08 │09 │0A │0B │0C │0D │4D │\n├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴───┤      ┌─────┐\n│10   │11 │12 │13 │14 │15 │16 │17 │18 │19 │1A │1B │1C │1D   │      │     │\n├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴─────┤   ┌──┴┐2D  │ ISO Enter\n│20    │21 │22 │23 │24 │25 │26 │27 │28 │29 │2A │2B │2D      │   │2C │    │\n├────┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴────┬───┤   └───┴────┘\n│30  │31 │32 │33 │34 │35 │36 │37 │38 │39 │3A │3B │3C    │3D │\n├────┼───┴┬──┴─┬─┴───┴───┴───┴───┴───┴──┬┴───┼───┴┬────┬┴───┤\n│40  │41  │42  │46                      │49  │4A  │4B  │4C  │\n└────┴────┴────┴────────────────────────┴────┴────┴────┴────┘\n┌────────┐                                       ┌──────────┐\n│30      │ 2.25u LShift             2.75u RShift │3C        │\n└────────┘                                       └──────────┘\n┌─────┬───┬─────┬───────────────────────────┬─────┬───┬─────┐\n│40   │41 │42   │46                         │4A   │4B │4C   │ Tsangan/WKL/HHKB\n└─────┴───┴─────┴───────────────────────────┴─────┴───┴─────┘\n```\n\n----------------------------------------\n\nTITLE: KLE to JSON Example 2 (QMK)\nDESCRIPTION: An example showcasing how to force overwrite `info.json` when converting `kle.txt` using the `-f` flag with `qmk kle2json`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/cli_commands.md#_snippet_47\n\nLANGUAGE: qmk\nCODE:\n```\n$ qmk kle2json -f kle.txt -f\nΨ Wrote out to info.json\n```\n\n----------------------------------------\n\nTITLE: Flashing dyz60_hs Default Keymap\nDESCRIPTION: This command flashes the compiled default keymap to the dyz60_hs keyboard. It requires the QMK build environment and the necessary tools for flashing to the ATmega32U4 microcontroller. The keyboard must be in bootloader mode for this command to work.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/dyz/dyz60_hs/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake dyz/dyz60_hs:default:flash\n```\n\n----------------------------------------\n\nTITLE: Y&R Transition80 Keyboard Matrix Diagram\nDESCRIPTION: This diagram represents the key matrix layout of the Y&R Transition80 keyboard. Each cell corresponds to a specific key, and the numbers within each cell denote its matrix position (row and column). It helps visualize the physical arrangement of keys and their connections to the keyboard controller. The diagram includes various layout options like split backspace and Tsangan/WKL bottom row.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/yandrstudio/transition80/matrix_diagram.md#_snippet_0\n\nLANGUAGE: Diagram\nCODE:\n```\n┌───┐   ┌───┬───┬───┬───┐ ┌───┬───┬───┬───┐ ┌───┬───┬───┬───┐┌───┬───┬───┐\n│00 │   │02 │03 │04 │05 │ │06 │07 │08 │09 │ │0A │0B │0C │0D ││0E │0F │0G │\n└───┘   └───┴───┴───┴───┘ └───┴───┴───┴───┘ └───┴───┴───┴───┘└───┴───┴───┘\n┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───────┐┌───┬───┬───┐   ┌───┬───┐\n│10 │11 │12 │13 │14 │15 │16 │17 │18 │19 │1A │1B │1C │1D     ││1E │1F │1G │   │3D │3E │ Split Backspace\n├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─────┤├───┼───┼───┤   └───┴───┘   soldered PCB only\n│20   │21 │22 │23 │24 │25 │26 │27 │28 │29 │2A │2B │2C │2D   ││2E │2F │2G │\n├─────┴──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴─────┤└───┴───┴───┘\n│30    │31 │32 │33 │34 │35 │36 │37 │38 │39 │3A │3B │3C      │\n├──────┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴────────┤    ┌───┐\n│40      │42 │43 │44 │45 │46 │47 │48 │49 │4A │4B │4D        │    │4E │\n├────┬───┴┬──┴─┬─┴───┴───┴───┴───┴───┴──┬┴───┼───┴┬────┬────┤┌───┼───┼───┐\n│50  │51  │52  │56                      │5A  │5B  │5C  │5D  ││5E │5F │5G │\n└────┴────┴────┴────────────────────────┴────┴────┴────┴────┘└───┴───┴───┘\n┌─────┬───┬─────┬───────────────────────────┬─────┬───┬─────┐\n│50   │51 │52   │56                         │5B   │5C │5D   │ Tsangan/WKL\n└─────┴───┴─────┴───────────────────────────┴─────┴───┴─────┘\n```\n\n----------------------------------------\n\nTITLE: Flashing Keymaps\nDESCRIPTION: This command flashes specified keymaps onto the keyboard using `make` and `avrdude` from the qmk_firmware folder.  `[KEYMAP]` should be replaced with the name of a valid keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/vitamins_included/rev1/readme.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmake lets_split_vitamins/rev1:[KEYMAP]:avrdude\n```\n\n----------------------------------------\n\nTITLE: Building Keychron C3 Pro Firmware\nDESCRIPTION: These commands build the QMK firmware for the Keychron C3 Pro keyboard with different configurations (ANSI layout, red switches, and RGB). The `make` command compiles the firmware based on the specified keyboard, layout, and keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keychron/c3_pro/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake keychron/c3_pro/ansi/red:default\n```\n\nLANGUAGE: make\nCODE:\n```\nmake keychron/c3_pro/ansi/rgb:default\n```\n\n----------------------------------------\n\nTITLE: Building Redox Wireless Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the Redox Wireless keyboard using the QMK build environment. It compiles the keyboard layout and necessary drivers into a firmware image ready for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/redox/wireless/readme.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmake redox/wireless:default\n```\n\n----------------------------------------\n\nTITLE: 60% ANSI Layout Diagram\nDESCRIPTION: Visualization of the standard 60% ANSI keyboard layout using ASCII art. The diagram shows the typical arrangement of keys for the ANSI standard. It provides a visual representation of the key positions on the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/layouts/default/readme.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───────┐\n│   │   │   │   │   │   │   │   │   │   │   │   │   │       │\n├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─────┤\n│     │   │   │   │   │   │   │   │   │   │   │   │   │     │\n├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴─────┤\n│      │   │   │   │   │   │   │   │   │   │   │   │        │\n├──────┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴────────┤\n│        │   │   │   │   │   │   │   │   │   │   │          │\n├────┬───┴┬──┴─┬─┴───┴───┴───┴───┴───┴──┬┴───┼───┴┬────┬────┤\n│    │    │    │                        │    │    │    │    │\n└────┴────┴────┴────────────────────────┴────┴────┴────┴────┘\n```\n\n----------------------------------------\n\nTITLE: Running Entire C Test Suite (QMK)\nDESCRIPTION: This command runs the entire C test suite without specifying any particular test.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/cli_commands.md#_snippet_54\n\nLANGUAGE: qmk\nCODE:\n```\nqmk test-c\n```\n\n----------------------------------------\n\nTITLE: DecenTKL Fn Layer Visualization\nDESCRIPTION: This C-style comment visually represents the function layer layout of the DecenTKL keyboard when the Fn key is held down. It shows special functions such as My Computer, Home Page, Calculator, Media controls, Volume controls, and Bootloader access. The diagram assists in understanding the special functions accessible via the Fn key.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/decent/tkl/readme.md#_snippet_3\n\nLANGUAGE: C\nCODE:\n```\n/*\n    *  /     /       /MyCmp/HomeP/Calc /Media/ ⏮  / ⏭  / ⏯   / ⏹   /Mute /     /\n    *\n    * │   │💡│   │   │   │   │   │   │   │   │   │   │   │       │ │   │   │V+ │\n    * │     │   │🔆│   │   │   │   │   │   │   │   │   │   │BootL│ │   │   │V- │\n    * │      │   │🔅│   │   │   │   │   │   │   │   │   │        │\n    * │        │   │🎨│   │   │   │   │   │   │   │   │          │     │🗘 │\n    * │    │    │    │                        │    │    │    │    │ │㉈ │🗘 │㉏ │\n*/\n```\n\n----------------------------------------\n\nTITLE: Define Keyboard Layout\nDESCRIPTION: Defines a keyboard layout configuration constant. This is used within QMK firmware to specify the arrangement of keys on a particular keyboard.  The layout is named 'LAYOUT_60_iso_arrow_split_bs', suggesting a 60% keyboard with ISO layout, arrow keys, and a split backspace key.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/layouts/default/60_iso_arrow_split_bs/readme.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nLAYOUT_60_iso_arrow_split_bs\n```\n\n----------------------------------------\n\nTITLE: Building KMAC Keyboard Firmware with QMK\nDESCRIPTION: This snippet shows how to build the default firmware for the KMAC keyboard using the QMK build environment. It assumes the environment is already set up. This command compiles the firmware and creates a .hex file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kbdmania/kmac/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake kbdmania/kmac:default\n```\n\n----------------------------------------\n\nTITLE: Multiplexer Extension Configuration Example C\nDESCRIPTION: This C code snippet demonstrates how to configure a multiplexer (74HC157 or 74HC153) to extend the input pins of the matrix in QMK Firmware. It defines the MATRIX_EXTENSION_74HC157 or MATRIX_EXTENSION_74HC153 macro and provides example configurations for input and output pins.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/symmetric70_proto/matrix_fast/readme.md#_snippet_2\n\nLANGUAGE: c\nCODE:\n```\n#define MATRIX_EXTENSION_74HC157 B2 /* or #define MATRIX_EXTENSION_74HC153 B2, B6 */\n\n// list of OUTPUT ports\n#define MATRIX_OUT_PORTS (Port_D, MCU_GPIO, D0), (Port_C, MCU_GPIO, C0), (Port_E, MCU_GPIO, E0), (Port_B, MCU_GPIO, B0)\n// list of OUTPUT pins\n#define MATRIX_OUT_PINS  (0, Port_D, 4), (1, Port_C, 6), (2, Port_D, 7), (3, Port_E, 6), (4, Port_B, 4), (5, Port_B, 5)\n\n// list of INPUT ports\n#define MATRIX_IN_PORTS \\\n    (Port_Fa, MCU_GPIOa, F0), \\\n    (Port_Ba, MCU_GPIOa, B0), \\\n    (Port_Fb, MCU_GPIOb, F0), \\\n    (Port_Bb, MCU_GPIOb, B0)\n// list of INPUT pins\n#define MATRIX_IN_PINS \\\n    (0, Port_Fa, 4), \\\n    (1, Port_Fb, 5), \\\n    (2, Port_Fb, 6), \\\n    (3, Port_Fa, 7), \\\n    (4, Port_Ba, 1), \\\n    (5, Port_Bb, 3)\n```\n\n----------------------------------------\n\nTITLE: Flashing xox70hot Firmware\nDESCRIPTION: This command flashes the built firmware onto the xox70hot keyboard using the QMK build environment. It programs the firmware image onto the Atmega32u4 microcontroller.  The keyboard must be in bootloader mode, triggered by a physical reset button on the back of the PCB, before executing this command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mokey/xox70hot/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake mokey/xox70hot:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Exent Keyboard Firmware\nDESCRIPTION: This command builds the default keymap for the Exent keyboard using the QMK build environment. It assumes that the QMK build environment has been properly set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/exent/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake exent:default\n```\n\n----------------------------------------\n\nTITLE: Building Bop Keyboard Firmware (Make)\nDESCRIPTION: This command builds the default keymap for the Bop keyboard using the QMK build environment.  It assumes that the QMK build environment has been properly set up. The resulting firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/bop/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake bop:default\n```\n\n----------------------------------------\n\nTITLE: YDKB Chili Matrix Diagram\nDESCRIPTION: This diagram represents the key matrix layout for the YDKB Chili keyboard.  Each cell indicates the matrix position of a key. This is useful for understanding how key presses are detected and for customizing keymaps.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ydkb/chili/matrix_diagram.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n┌───┐   ┌───┬───┬───┬───┐ ┌───┬───┬───┬───┐ ┌───┬───┬───┬───┐┌───┬───┬───┐\n│00 │   │01 │02 │03 │04 │ │05 │06 │07 │08 │ │09 │69 │68 │67 ││66 │65 │64 │\n└───┘   └───┴───┴───┴───┘ └───┴───┴───┴───┘ └───┴───┴───┴───┘└───┴───┴───┘\n┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┐┌───┬───┬───┐┌───┬───┬───┬───┐\n│10 │11 │12 │13 │14 │15 │16 │17 │18 │19 │79 │78 │77 │76 │75 ││74 │73 │72 ││63 │62 │61 │60 │\n├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴───┤├───┼───┼───┤├───┼───┼───┼───┤   ┌───┐\n│20   │21 │22 │23 │24 │25 │26 │27 │28 │29 │89 │88 │87 │86   ││85 │84 │83 ││82 │81 │80 │90 │   │   │\n├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴─────┤└───┴───┴───┘├───┼───┼───┼───┤   │90 │ 2u Numpad Plus\n│30    │31 │32 │33 │34 │35 │36 │37 │38 │39 │99 │98 │97      │             │95 │92 │71 │70 │   │   │\n├────┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬──────┤    ┌───┐    ├───┼───┼───┼───┤   └───┘\n│40  │41 │42 │43 │44 │45 │46 │47 │48 │49 │A9 │A8 │A6 │A7    │    │96 │    │94 │93 │91 │A0 │\n├────┼───┴┬──┴─┬─┴───┴───┴─┬─┴───┴───┴──┬┴───┼───┴┬──┴─┬────┤┌───┼───┼───┐├───┼───┼───┤   │\n│50  │51  │52  │53         │54          │55  │56  │57  │58  ││59 │A5 │A4 ││A3 │A2 │A1 │   │\n└────┴────┴────┴───────────┴────────────┴────┴────┴────┴────┘└───┴───┴───┘└───┴───┴───┴───┘\n                                                    ┌───────┐             ┌───────┐\n                                       2u Backspace │76     │             │A3     │ 2u Numpad Zero\n                                                    └─┬─────┤             └───────┘\n                                                      │     │\n                                         ISO Enter ┌──┴┐97  │\n                                                   │86 │    │\n┌────────┐                                       ┌─┴───┴────┤\n│40      │ 2.25u LShift             2.75u RShift │A7        │\n├─────┬──┴┬─────┬───────────────────────────┬────┴┬───┬─────┤\n│50   │51 │52   │54                         │56   │57 │58   │ Tsangan/WKL\n└─────┴───┴─────┴───────────────────────────┴─────┴───┴─────┘\n```\n\n----------------------------------------\n\nTITLE: Building Lex60 Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Gami Studio Lex60 keyboard using the QMK build environment. It compiles the keymap and creates a firmware file that can be flashed to the keyboard.  Adding `:flash` to the command will also flash the firmware to the board after compiling.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/gami_studio/lex60/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake gami_studio/lex60:default # postfix with `:flash` to load the firmware into the board\n```\n\n----------------------------------------\n\nTITLE: Xelus Valor FRL TKL Keyboard Matrix Diagram\nDESCRIPTION: This diagram illustrates the matrix layout for the Xelus Valor FRL TKL keyboard. Each cell represents a key, with the coordinates indicating its row and column within the matrix. This information is crucial for configuring the keyboard firmware and defining keymaps. The diagram shows the layout for Rev1, Rev2.0, and Rev2.1.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/xelus/valor_frl_tkl/matrix_diagram.md#_snippet_0\n\nLANGUAGE: Diagram\nCODE:\n```\n┌───┬───┬───┬───┬───┬───┬───┐         ┌───┬───┬───┬───┬───┬───┬───┬───┐┌───┬───┬───┐   ┌───────┐\n│00 │01 │02 │03 │04 │05 │06 │         │07 │08 │09 │0A │0B │0C │0D │2D ││0E │0F │0G │   │0D     │ 2u Backspace\n├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┘       ┌─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴───┤├───┼───┼───┤   └───────┘\n│10   │11 │12 │13 │14 │15 │         │16 │17 │18 │19 │1A │1B │1C │1D   ││1E │1F │1G │\n├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┐        └┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴─────┤└───┴───┴───┘\n│20    │21 │22 │23 │24 │25 │         │26 │27 │28 │29 │2A │2B │2C      │\n├──────┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┐     ┌─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴────┬───┤    ┌───┐       ┌──────────┐\n│30      │31 │32 │33 │34 │35 │     │36 │37 │38 │39 │3A │3B │3C    │3D │    │3F │       │3C        │ 2.75u RShift\n├─────┬──┴──┬┴───┴┬──┴───┴┬──┴─┐   ├───┴───┴──┬┴───┴┬──┴───┴────┬─┴───┤┌───┼───┼───┐   └──────────┘\n│40   │     │42   │44     │45  │   │47        │49   │           │4C   ││4E │4F │4G │\n└─────┘     └─────┴───────┴────┘   └──────────┴─────┘           └─────┘└───┴───┴───┘\n```\n\n----------------------------------------\n\nTITLE: Submitting Compile Job via cURL\nDESCRIPTION: This cURL command submits a JSON payload to the `/v1/compile` endpoint of the QMK API to initiate a firmware compilation job. It uses the POST method and sets the `Content-Type` header to `application/json`. The JSON data is read from a file named `json_data`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/api_docs.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\n$ curl -H \"Content-Type: application/json\" -X POST -d \"$(< json_data)\" https://api.qmk.fm/v1/compile\n```\n\n----------------------------------------\n\nTITLE: Navigating to QMK Firmware Directory (Shell)\nDESCRIPTION: This command changes the current directory to the top-level directory of the QMK Firmware project. This is a necessary step before compiling the keyboard firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/25keys/zinc/keymaps/default/readme_en.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ cd qmk_firmware\n```\n\n----------------------------------------\n\nTITLE: Mapping LEDs in keyboardname.c (C)\nDESCRIPTION: These snippets demonstrate how to map LED outputs to LED indices in your keyboard's `.c` file.  One shows RGB mapping, and the other shows single-color mapping. The mappings use register indices from the IS31FL3746A datasheet to associate LEDs with driver outputs.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/is31fl3746a.md#_snippet_4\n\nLANGUAGE: C\nCODE:\n```\nconst is31fl3746a_led_t PROGMEM g_is31fl3746a_leds[IS31FL3746A_LED_COUNT] = {\n/* Driver\n *   |  R         G         B */\n    {0, SW1_CS1,  SW1_CS2,  SW1_CS3},\n    // etc...\n};\n```\n\nLANGUAGE: C\nCODE:\n```\nconst is31fl3746a_led_t PROGMEM g_is31fl3746a_leds[IS31FL3746A_LED_COUNT] = {\n/* Driver\n *   |  V */\n    {0, SW1_CS1},\n    // etc...\n};\n```\n\n----------------------------------------\n\nTITLE: Building the unloved_bastard firmware\nDESCRIPTION: This command builds the default keymap for the unloved_bastard keyboard using the QMK build system. It assumes that the QMK build environment is already set up. The output is the firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/bpiphany/unloved_bastard/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake bpiphany/unloved_bastard:default\n```\n\n----------------------------------------\n\nTITLE: Kastenwagen 48 Keyboard Matrix Visualization\nDESCRIPTION: This visual representation shows how keys are organized in the Kastenwagen 48 keyboard matrix. Each key is located at the intersection of a row and a column, which is used to detect key presses. The 7u spacebar is also visually represented in the diagram.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/nopunin10did/kastenwagen48/matrix_diagram.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬──────┐  ┌───┐\n│00 │10 │01 │11 │02 │12 │03 │13 │04 │14 │05 │15 │06    │  │07 │\n├───┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬─────┤  ├───┤\n│20  │30 │21 │31 │22 │32 │23 │33 │24 │34 │25 │35 │26   │  │27 │\n├────┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴──┬──┘  ├───┤\n│40    │50 │41 │51 │42 │52 │43 │53 │44 │54 │45 │55  │┌───┐│47 │\n├────┬─┴──┬┴──┬┴───┴───┴─┬─┴───┴──┬┴──┬┴───┼───┴┬───┘│46 │└───┘\n│60  │70  │61 │71        │73      │64 │74  │65  │┌───┼───┼───┐\n└────┴────┴───┴──────────┴────────┴───┴────┴────┘│75 │76 │67 │\n          ┌─ 7u Spacebar ─────────────┐          └───┴───┴───┘\n          ┌───────────────────────────┐\n          │71                         │\n          └───────────────────────────┘\n```\n\n----------------------------------------\n\nTITLE: Building Keyboard Firmware (Make)\nDESCRIPTION: This command builds the default firmware for the Mechlovin Olly JF Rev. 1 keyboard.  It requires the QMK build environment to be properly set up.  The output is the compiled firmware ready for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechlovin/olly/jf/rev1/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake mechlovin/olly/jf/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Building Switchplate910 Firmware with Make\nDESCRIPTION: This command builds the default firmware for the Switchplate910 keyboard using the QMK build environment. It requires the QMK build environment to be set up correctly. The output will be a .hex or .bin file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/switchplate/switchplate910/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake switchplate/switchplate910:default\n```\n\n----------------------------------------\n\nTITLE: Define PS2_PIO_USE_PIO1\nDESCRIPTION: This allows the user to switch between the PIO0 or PIO1 peripheral on RP2040 devices. Define this in `config.h`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/ps2_mouse.md#_snippet_9\n\nLANGUAGE: c\nCODE:\n```\n#define PS2_PIO_USE_PIO1 // Force the usage of PIO1 peripheral, by default the PS2 implementation uses the PIO0 peripheral\n```\n\n----------------------------------------\n\nTITLE: Building Centromere Keyboard Firmware\nDESCRIPTION: This command builds the QMK firmware for the Centromere keyboard with the default keymap. It assumes the QMK build environment has been set up correctly. This command compiles the firmware and prepares it for flashing onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/centromere/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake centromere:default\n```\n\n----------------------------------------\n\nTITLE: Compiling Iron180 Default Layout Firmware\nDESCRIPTION: This command compiles the QMK firmware for the Iron180 keyboard with the default keymap. It requires a properly configured QMK build environment. The resulting firmware can then be flashed onto the keyboard's PCB.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/iron180/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake iron180:default\n```\n\n----------------------------------------\n\nTITLE: Building and Flashing QMK Firmware for JC65\nDESCRIPTION: This command builds the default QMK firmware for the JC65 keyboard with the v32u4 microcontroller and flashes it using DFU. It requires a properly configured QMK build environment and the DFU bootloader.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/jc65/v32u4/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake jc65/v32u4:default:dfu\n```\n\n----------------------------------------\n\nTITLE: Building AT-AT 660M Firmware with QMK\nDESCRIPTION: This command builds the default keymap for the AT-AT 660M keyboard using the QMK firmware build system. It requires a correctly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/at_at/660m/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake at_at/660m:default\n```\n\n----------------------------------------\n\nTITLE: Building Pteron56 Firmware\nDESCRIPTION: This command builds the default firmware for the Pteron56 keyboard using the QMK build environment. It compiles the necessary code to create a firmware file that can be flashed onto the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kraken_jones/pteron56/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake pteron56:default\n```\n\n----------------------------------------\n\nTITLE: Building Hannah65 Rev1 Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Hannah65 Rev1 keyboard using the QMK build environment. It assumes that the QMK build environment is properly set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechlovin/hannah65/rev1/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake mechlovin/hannah65/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Building LS_60 keyboard firmware\nDESCRIPTION: This command builds the default firmware for the LS_60 keyboard using the QMK build environment. It assumes the environment has been set up properly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/weirdo/ls_60/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake weirdo/ls_60:default\n```\n\n----------------------------------------\n\nTITLE: Building OBE Firmware\nDESCRIPTION: This command builds the default firmware for the OrangeBoyErgo (OBE) keyboard using the QMK build environment. It specifies the keyboard and keymap to compile.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechwild/obe/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake mechwild/obe:default\n```\n\n----------------------------------------\n\nTITLE: Kafka68 Key Matrix Diagram\nDESCRIPTION: This is a visual representation (diagram) of the Kafka68 keyboard's key matrix, showing the arrangement of keys in rows and columns. Each cell represents a specific key and its corresponding matrix location. This is used for understanding the hardware connections for key presses.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/meetlab/kafka68/matrix_diagram.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───────┐┌───┬───┐    \n│00 │01 │02 │03 │04 │05 │06 │07 │08 │09 │0A │0B │0C │0D     ││0E │0F │    \n├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─────┤├───┼───┤   \n│10   │11 │12 │13 │14 │15 │16 │17 │18 │19 │1A │1B │1C │1D   ││1E │1F │\n├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴─────┤└───┴───┘   \n│20    │21 │22 │23 │24 │25 │26 │27 │28 │29 │2A │2B │2C      │             \n├──────┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴────────┤┌───┐       \n│30      │31 │32 │33 │34 │35 │36 │37 │38 │39 │3A │3C        ││3E │\n├────┬───┴┬──┴─┬─┴───┴───┴───┴───┴───┴──┬┴───┼───┴┬───┬──┬──┴┼───┼───┐\n│40  │41  │42  │45                      │49  │4A  │4B │  │4D │4E │4F │\n└────┴────┴────┴────────────────────────┴────┴────┴───┘  └───┴───┴───┘\n```\n\n----------------------------------------\n\nTITLE: Building GodSpeed75 Firmware with QMK\nDESCRIPTION: This command builds the default keymap for the TKC GodSpeed75 keyboard using the QMK build environment. It requires the QMK build environment to be properly set up. The output is the firmware binary, which can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/tkc/godspeed75/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake tkc/godspeed75:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Aurora Helix Firmware\nDESCRIPTION: This command compiles and flashes the firmware for the Aurora Helix keyboard rev1 with the default configuration. It builds upon the previous command by adding the `:flash` target to initiate the flashing process. It assumes the QMK build environment is set up and configured for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/splitkb/aurora/helix/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake splitkb/aurora/helix/rev1:default:flash\n```\n\n----------------------------------------\n\nTITLE: Configuring Maximum Number of Surfaces\nDESCRIPTION: This C code snippet shows how to configure the maximum number of supported surfaces within the `config.h` file using the `SURFACE_NUM_DEVICES` macro.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/quantum_painter.md#_snippet_40\n\nLANGUAGE: c\nCODE:\n```\n// 3 surfaces:\n#define SURFACE_NUM_DEVICES 3\n```\n\n----------------------------------------\n\nTITLE: Flashing the Aurora65 Keyboard Firmware\nDESCRIPTION: This command flashes the specified keymap to the Aurora65 keyboard using the QMK build environment. Requires QMK Toolbox or CLI. The `<keymap>` parameter specifies which keymap to flash (e.g., `default`).\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/aurora65/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake aurora65:<keymap>:flash\n```\n\n----------------------------------------\n\nTITLE: Building Naked60 Firmware with QMK Make\nDESCRIPTION: This command builds the default firmware for the Naked60 keyboard (revision 1) using the QMK build environment. It targets the `avrdude` programmer for flashing the firmware to the Pro Micro controller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/salicylic_acid3/naked60/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake salicylic_acid3/naked60/rev1:default:avrdude\n```\n\n----------------------------------------\n\nTITLE: Properties Example - Python\nDESCRIPTION: Shows how to use properties instead of getter and setter functions in Python. This is the preferred way in the QMK project.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/coding_conventions_python.md#_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nclass Foo(object):\n    def __init__(self):\n        self._bar = None\n\n    @property\n    def bar(self):\n        return self._bar\n\n    @bar.setter\n    def bar(self, bar):\n        self._bar = bar\n```\n\n----------------------------------------\n\nTITLE: Seigaiha Keyboard Matrix Diagram\nDESCRIPTION: This is a visual representation of the keyboard matrix for the Yiancar-Designs Seigaiha keyboard.  It maps physical keys to row and column numbers for scanning.  The diagram shows the layout and the matrix coordinates associated with each key.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/yiancardesigns/seigaiha/matrix_diagram.md#_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n                                                                       ┌───────┐\n                                                          2u Backspace │0E     │\n                                                                       └───────┘\n  ┌───┐  ┌───┬───┬───┬───┬───┬───┬───┐         ┌───┬───┬───┬───┬───┬───┬───┬───┐\n  │10 │  │00 │01 │02 │03 │04 │05 │06 │         │07 │08 │09 │0A │0B │0C │0D │0E │\n ┌┴──┬┘ ┌┴───┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┘       ┌─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴───┴┐\n │20 │  │11   │12 │13 │14 │15 │16 │          │17 │18 │19 │1A │1B │1C │1D │1E    │\n┌┴──┬┘ ┌┴─────┼───┼───┼───┼───┼───┤          └┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴──────┴┐\n│30 │  │21    │22 │23 │24 │25 │26 │           │27 │28 │29 │2A │2B │2C │2E        │\n└───┘ ┌┴──────┴┬──┴┬──┴┬──┴┬──┴┬──┴┐        ┌─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴───────┬──┴┐\n      │31      │32 │33 │34 │35 │36 │        │37 │38 │39 │3A │3B │3C │3D       │3E │\n      ├─────┬──┴──┬┴───┴┬──┴───┴┬──┴──┐     ├───┴───┴──┬┴───┴┬──┴───┴──────┬──┴──┬┘\n      │41   │     │43   │45     │46   │     │48        │4A   │             │4E   │\n      └─────┘     └─────┴───────┴─────┘     └──────────┴─────┘             └─────┘\n                                                                     ┌────────────┐\n                                                        2.75u RShift │3D          │\n                                                                     └────────────┘\n```\n\n----------------------------------------\n\nTITLE: Year Range Copyright Header Example in C\nDESCRIPTION: This code snippet illustrates how to represent a copyright period spanning multiple years in a C file header within the QMK firmware. It shows the start year and the end year, separated by a hyphen.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/hardware_keyboard_guidelines.md#_snippet_8\n\nLANGUAGE: C\nCODE:\n```\nCopyright 2015-2017 Your Name <you@example.com>\n```\n\n----------------------------------------\n\nTITLE: Building BM60 Poker Firmware with QMK\nDESCRIPTION: This snippet demonstrates how to compile the default firmware for the BM60HSRGB_Poker/rev2 keyboard using the QMK build system. This requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kprepublic/bm60hsrgb_poker/rev2/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake kprepublic/bm60hsrgb_poker/rev2:default\n```\n\n----------------------------------------\n\nTITLE: Flashing EEPROM for left half - Shell\nDESCRIPTION: This command flashes the EEPROM of the left half of the keyboard with the `eeprom-lefthand.eep` file, configuring it as the left-hand side when `EE_HANDS` is defined in `config.h`. Replace `$(COM_PORT)` with the correct COM port. Requires `avrdude` or equivalent.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/xealous/readme.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\navrdude -p atmega32u4 -P $(COM_PORT) -c avr109 -U eeprom:w:\"./quantum/split_common/eeprom-lefthand.eep\"\n// or the equivalent in dfu-programmer\n```\n\n----------------------------------------\n\nTITLE: ChibiOS USB Patch\nDESCRIPTION: This patch resolves an issue with the current ChibiOS where pin PA9 is unusable, causing the first column of the keyboard to be disabled.  It modifies hal_usb_lld.c and hal_usb_lld.h to address VBUS sensing and transceiver enable/disable.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/xelus/valor_frl_tkl/rev2_0/readme.md#_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- a/os/hal/ports/STM32/LLD/OTGv1/hal_usb_lld.c b/os/hal/ports/STM32/LLD/OTGv1/hal_usb_lld.c\nindex 0f48d1fd0..38aff8554 100644\n--- a/os/hal/ports/STM32/LLD/OTGv1/hal_usb_lld.c\n+++ b/os/hal/ports/STM32/LLD/OTGv1/hal_usb_lld.c\n@@ -40,18 +40,18 @@\n \n #if STM32_OTG_STEPPING == 1\n #if defined(BOARD_OTG_NOVBUSSENS)\n-#define GCCFG_INIT_VALUE        (GCCFG_NOVBUSSENS | GCCFG_VBUSASEN |        \\\n-#                                 GCCFG_VBUSBSEN | GCCFG_PWRDWN)\n+#define GCCFG_INIT_VALUE        (GCCFG_NOVBUSSENS |        \\\n+#                                 GCCFG_PWRDWN)\n #else\n-#define GCCFG_INIT_VALUE        (GCCFG_VBUSASEN | GCCFG_VBUSBSEN |          \\\n+#define GCCFG_INIT_VALUE        (GCCFG_NOVBUSSENS |          \\\n                                  GCCFG_PWRDWN)\n #endif\n \n #elif STM32_OTG_STEPPING == 2\n #if defined(BOARD_OTG_NOVBUSSENS)\n-#define GCCFG_INIT_VALUE        GCCFG_PWRDWN\n+#define GCCFG_INIT_VALUE        (GCCFG_NOVBUSSENS | GCCFG_PWRDWN)\n #else\n-#define GCCFG_INIT_VALUE        (GCCFG_VBDEN | GCCFG_PWRDWN)\n+#define GCCFG_INIT_VALUE        (GCCFG_NOVBUSSENS | GCCFG_VBDEN | GCCFG_PWRDWN)\n #endif\n \n #endif\n@@ -815,7 +815,7 @@ void usb_lld_start(USBDriver *usbp) {\n     otgp->PCGCCTL = 0;\n \n     /* VBUS sensing and transceiver enabled.*/\n-    otgp->GOTGCTL = GOTGCTL_BVALOEN | GOTGCTL_BVALOVAL;\n+    // otgp->GOTGCTL = GOTGCTL_BVALOEN | GOTGCTL_BVALOVAL;\n \n #if defined(BOARD_OTG2_USES_ULPI)\n #if STM32_USB_USE_OTG1\ndiff --git a/os/hal/ports/STM32/LLD/OTGv1/hal_usb_lld.h b/os/hal/ports/STM32/LLD/OTGv1/hal_usb_lld.h\nindex 69a5ab603..200b4b91a 100644\n--- a/os/hal/ports/STM32/LLD/OTGv1/hal_usb_lld.h\n+++ b/os/hal/ports/STM32/LLD/OTGv1/hal_usb_lld.h\n@@ -534,7 +534,7 @@ struct USBDriver {\n  * @notapi\n  */\n #if (STM32_OTG_STEPPING == 1) || defined(__DOXYGEN__)\n-#define usb_lld_connect_bus(usbp) ((usbp)->otg->GCCFG |= GCCFG_VBUSBSEN)\n+#define usb_lld_connect_bus(usbp)\n #else\n #define usb_lld_connect_bus(usbp) ((usbp)->otg->DCTL &= ~DCTL_SDIS)\n #endif\n@@ -545,7 +545,7 @@ struct USBDriver {\n  * @notapi\n  */\n #if (STM32_OTG_STEPPING == 1) || defined(__DOXYGEN__)\n-#define usb_lld_disconnect_bus(usbp) ((usbp)->otg->GCCFG &= ~GCCFG_VBUSBSEN)\n+#define usb_lld_disconnect_bus(usbp)\n #else\n #define usb_lld_disconnect_bus(usbp) ((usbp)->otg->DCTL |= DCTL_SDIS)\n #endif\n```\n\n----------------------------------------\n\nTITLE: Building Siris Keyboard Firmware with QMK\nDESCRIPTION: This snippet provides the command to build the default firmware for the Siris keyboard using the QMK build environment. It assumes that the QMK build environment is already set up. The command compiles the firmware and generates a .hex or .bin file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ffkeebs/siris/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake ffkeebs/siris:default\n```\n\n----------------------------------------\n\nTITLE: Changing Matrix Row Pins for Pro Micro in config.h\nDESCRIPTION: This directive in `config.h` modifies the matrix row pin assignments when using a Pro Micro controller with the Terrazzo keyboard. The Pro Micro lacks the \"F0\" pin available on the Elite-C, necessitating a change in the pin definitions to match the Pro Micro's pinout.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/terrazzo/readme.md#_snippet_2\n\nLANGUAGE: C\nCODE:\n```\n#define MATRIX_ROW_PINS { D2, D7, E6, B4, B5, B6, B2, B3 }\n```\n\n----------------------------------------\n\nTITLE: Autocorrect Data Header File\nDESCRIPTION: This snippet shows the structure and contents of the `autocorrect_data.h` file generated by the `qmk generate-autocorrect-data` command.  It includes defines for min/max typo lengths and the autocorrect data stored as a `uint8_t` array in program memory.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/autocorrect.md#_snippet_3\n\nLANGUAGE: c\nCODE:\n```\n// :thier        -> their\n// fitler        -> filter\n// lenght        -> length\n// ouput         -> output\n// widht         -> width\n\n#define AUTOCORRECT_MIN_LENGTH 5  // \"ouput\"\n#define AUTOCORRECT_MAX_LENGTH 6  // \":thier\"\n\n#define DICTIONARY_SIZE 74\n\nstatic const uint8_t autocorrect_data[DICTIONARY_SIZE] PROGMEM = {85, 7, 0, 23, 35, 0, 0, 8, 0, 76, 16, 0, 15, 25, 0, 0,\n    11, 23, 44, 0, 130, 101, 105, 114, 0, 23, 12, 9, 0, 131, 108, 116, 101, 114, 0, 75, 42, 0, 24, 64, 0, 0, 71, 49, 0,\n    10, 56, 0, 0, 12, 26, 0, 129, 116, 104, 0, 17, 8, 15, 0, 129, 116, 104, 0, 19, 24, 18, 0, 130, 116, 112, 117, 116,\n    0};\n```\n\n----------------------------------------\n\nTITLE: AEBoards Constellation Rev3 Keyboard Matrix Diagram\nDESCRIPTION: This is a visual representation of the keyboard matrix for the AEBoards Constellation Rev3 keyboard. Each key is mapped to a row and column number, which the firmware uses to detect key presses. The numbers represent the matrix coordinates.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/aeboards/constellation/rev3/matrix_diagram.md#_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n                                                    ┌───────┐\n                                       2u Backspace │0D     │\n                                                    └───────┘\n┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┐\n│00 │01 │02 │03 │04 │05 │06 │07 │08 │09 │0A │0B │0C │0D │2D │0E │\n├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴───┼───┤\n│10   │11 │12 │13 │14 │15 │16 │17 │18 │19 │1A │1B │1C │1D   │1E │\n├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴─────┼───┤\n│20    │21 │22 │23 │24 │25 │26 │27 │28 │29 │2A │2B │2C      │2E │\n├──────┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴────┬───┼───┤\n│30      │31 │32 │33 │34 │35 │36 │37 │38 │39 │3A │3C    │3D │3E │\n├────┬───┴┬──┴─┬─┴───┴───┴───┴───┴───┴──┬┴───┴┬──┴──┬───┼───┼───┤\n│40  │41  │42  │45                      │49   │4A   │4C │4D │4E │\n└────┴────┴────┴────────────────────────┴─────┴─────┴───┴───┴───┘\n```\n\n----------------------------------------\n\nTITLE: Noxary Valhalla V2 Key Matrix Diagram\nDESCRIPTION: This diagram visually represents the key matrix for the Noxary Valhalla V2 keyboard. Each number corresponds to a specific key and its location within the matrix, which is used by the QMK firmware to map key presses to actions.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/noxary/valhalla_v2/matrix_diagram.md#_snippet_0\n\nLANGUAGE: None\nCODE:\n```\n                                                            ┌───────┐\n                                               2u Backspace │5C     │\n                                                            └───────┘\n┌───┬───┬───┬───┬───┬───┬───┐       ┌───┬───┬───┬───┬───┬───┬───┬───┬───┐\n│00 │01 │02 │03 │04 │05 │45 │       │56 │57 │58 │59 │5A │5B │5C │5D │8E │\n├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┘     ┌─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴───┼───┤\n│10   │11 │12 │13 │14 │15 │       │66 │67 │68 │69 │6A │6B │6C │6D   │6E │\n├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┐      └┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴─────┼───┤\n│20    │21 │22 │23 │24 │25 │       │76 │77 │78 │79 │7A │7B │7C      │7E │\n├──────┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┐   ┌─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴────┬───┼───┤\n│30      │31 │32 │33 │34 │35 │   │86 │87 │88 │89 │8A │8B │8C    │8D │8E │\n├─────┬──┴┬──┴──┬┴───┴─┬─┴─┬─┘  ┌┴──┬┴───┼───┴─┬─┴─┬─┴───┼──┬───┼───┼───┤\n│40   │41 │42   │43    │44 │    │96 │97  │98   │99 │9A   │  │9B │9C │9D │\n└─────┴───┴─────┴──────┴───┘    └───┴────┴─────┴───┴─────┘  └───┴───┴───┘\n          2.75u ┌──────────┐    ┌────────┐ 2.25u\n     Left Space │44        │    │97      │ Right Space\n                └──────────┘    └────────┘\n```\n\n----------------------------------------\n\nTITLE: Setting Configuration Values (Dictionary Style) - Python\nDESCRIPTION: Shows how to set a configuration value using dictionary-style access in the QMK CLI. This method allows you to modify the configuration by specifying the section and key as strings.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/cli_development.md#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\ncli.config['<section>']['<key>'] = <value>\n```\n\n----------------------------------------\n\nTITLE: Building The Stick Firmware\nDESCRIPTION: This command builds the default firmware for the Keebio The Stick keyboard. It uses the `make` command with the keyboard name and default keymap specified. Ensure that the QMK build environment is properly set up before running this command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keebio/stick/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake keebio/stick:default\n```\n\n----------------------------------------\n\nTITLE: Navigating to TADA68 Volume (Mac)\nDESCRIPTION: This command navigates to the mounted TADA68 volume on a Mac using the `cd` command in the terminal.  It assumes that the TADA68 volume is mounted and named 'TADA68 '. The space after TADA68 requires escaping.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/tada68/readme.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncd /Volumes/TADA68\\ /\n```\n\n----------------------------------------\n\nTITLE: Flashing Viktus Styrka Keyboard Firmware (Makefile)\nDESCRIPTION: This command flashes the built firmware to the Viktus Styrka keyboard. It uses the `make` command with the target `viktus/styrka:default:flash`.  It assumes that the QMK build environment has already been set up and the keyboard is in flashing mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/viktus/styrka/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake viktus/styrka:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building DZ65RGB V1 Firmware\nDESCRIPTION: This command builds the default firmware for the DZ65RGB V1 keyboard using the STM32F303 (Arm) microcontroller. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/dztech/dz65rgb/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake dztech/dz65rgb/v1:default # Arm (STM32F303)\n```\n\n----------------------------------------\n\nTITLE: Matrix Diagram Representation\nDESCRIPTION: This code snippet represents a keyboard matrix diagram for the wilba.tech WT69-A keyboard.  It illustrates how each key is mapped to a row and column within the matrix, defining its position.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wilba_tech/wt69_a/matrix_diagram.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n                                                             ┌───────┐\n                                                2u Backspace │0F     │\n                                                             └───────┘\n┌───┬───┐┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┐\n│00 │01 ││02 │03 │04 │05 │06 │07 │08 │09 │0A │0B │0C │0D │0E │0F │2F │0G │\n├───┼───┤├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴───┼───┤\n│10 │11 ││12   │13 │14 │15 │16 │17 │18 │19 │1A │1B │1C │1D │1E │1F   │1G │\n├───┼───┤├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴─────┼───┤\n│20 │21 ││22    │23 │24 │25 │26 │27 │28 │29 │2A │2B │2C │2D │2E      │2G │\n├───┼───┤├──────┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴────┬───┼───┤\n│30 │31 ││32      │34 │35 │36 │37 │38 │39 │3A │3B │3C │3D │3E    │3F │3G │\n├───┼───┤├─────┬──┴┬──┴──┬┴───┴───┴───┴───┴───┴───┴──┬┴───┴┬─┬───┼───┼───┤\n│40 │41 ││42   │43 │44   │48                         │4D   │ │4E │4F │4G │\n└───┴───┘└─────┴───┴─────┴───────────────────────────┴─────┘ └───┴───┴───┘\n```\n\n----------------------------------------\n\nTITLE: Building Southpaw66 Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Southpaw66 keyboard using the QMK build environment. It assumes that the build environment has already been set up according to the QMK documentation.  The output will be a .hex or .bin file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/rpiguy9907/southpaw66/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake rpiguy9907/southpaw66:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Acacia Keyboard Firmware (QMK)\nDESCRIPTION: This command flashes the built firmware to the Acacia keyboard using the QMK Firmware environment.  It depends on the keyboard being in bootloader mode.  Successful execution results in the keyboard running the new firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/acacia/readme.md#_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nmake handwired/acacia:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building BB40 Firmware with QMK (make)\nDESCRIPTION: This command builds the default firmware for the BB40 keyboard using the QMK build system. It specifies the keyboard (`mechwild/bb40`), the microcontroller variant (`f401` or `f411`), and the keymap (`default`).  The resulting firmware can then be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechwild/bb40/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake mechwild/bb40/f401:default\n```\n\nLANGUAGE: make\nCODE:\n```\nmake mechwild/bb40/f411:default\n```\n\n----------------------------------------\n\nTITLE: Building Default Firmware for The Key\nDESCRIPTION: This command builds the default firmware for the Drop \"The Key\" macropad using the QMK build environment. It compiles the code located in the `drop/thekey/v1` directory with the `default` keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/drop/thekey/v1/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake drop/thekey/v1:default\n```\n\n----------------------------------------\n\nTITLE: Building Phantom Solder QMK Firmware\nDESCRIPTION: This command builds the QMK firmware for the Phantom Solder PCB with the default keymap.  It assumes that the QMK build environment is already set up. Execute this command in the QMK firmware directory.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/lucid/phantom_solder/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake lucid/phantom_solder:default\n```\n\n----------------------------------------\n\nTITLE: Listing Available C Tests (QMK)\nDESCRIPTION: This command lists the available C tests that can be run using the test suite.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/cli_commands.md#_snippet_55\n\nLANGUAGE: qmk\nCODE:\n```\nqmk test-c --list\n```\n\n----------------------------------------\n\nTITLE: Generating keymap.c from keymap.json\nDESCRIPTION: The keymap.c file for the Ferris keyboard is generated from keymap.json by the build system. This approach avoids duplicating information and allows users to edit their keymap using the QMK Configurator web interface. Users directly modify keymap.json, which is then used to generate the necessary C code.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ferris/keymaps/default/readme.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Matrix Diagram Visualization\nDESCRIPTION: This diagram visualizes the key matrix of the Quarkeys Studio Z67 Solder keyboard. Each cell represents a key, and the numbers inside the cells indicate the row and column to which the key is connected. It shows the standard layout with various blocker configurations.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/quarkeys/z67/solder/matrix_diagram.md#_snippet_0\n\nLANGUAGE: None\nCODE:\n```\n                                                    ┌───────┐\n                                       2u Backspace │0D     │\n                                                    └───────┘\n┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┐\n│00 │01 │02 │03 │04 │05 │06 │07 │08 │09 │0A │0B │0C │0D │0E │0F │\n├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴───┼───┤      ┌─────┐\n│10   │11 │12 │13 │14 │15 │16 │17 │18 │19 │1A │1B │1C │1E   │1F │      │     │\n├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴─────┼───┤   ┌──┴┐2D  │ ISO Enter\n│20    │21 │22 │23 │24 │25 │26 │27 │28 │29 │2A │2B │2D      │2F │   │2C │    │\n├────┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴────┬───┼───┤   └───┴────┘\n│30  │31 │32 │33 │34 │35 │36 │37 │38 │39 │3A │3B │3C    │3E │3F │\n├────┼───┴┬──┴─┬─┴───┴───┴───┴───┴───┴──┬┴──┬┴──┬┴──┬───┼───┼───┤\n│40  │41  │42  │47                      │48 │49 │4B │4C │4D │4F │\n└────┴────┴────┴────────────────────────┴───┴───┴───┴───┴───┴───┘\n┌────────┐\n│30      │ 2.25u LShift\n└────────┘\n┌────┬────┬────┬────────────────────────┬────┬────┐\n│40  │41  │42  │47                      │48  │49  │ Blocker\n└────┴────┴────┴────────────────────────┴────┴────┘\n┌─────┬───┬─────┬───────────────────────────┬─────┐\n│40   │41 │42   │47                         │48   │ Blocker Tsangan\n└─────┴───┴─────┴───────────────────────────┴─────┘\n┌─────┬──┬─────┬───────────────────────────┬─────┐\n│40   │  │42   │47                         │48   │ \"Bauer\"\n└─────┘  └─────┴───────────────────────────┴─────┘   WKL with 0.75u blockers\n```\n\n----------------------------------------\n\nTITLE: Enabling Permissive Hold\nDESCRIPTION: Enables the Permissive Hold feature, which triggers the hold action of a dual-role key if another key is pressed before the first key is released, even if the `TAPPING_TERM` has not been reached. Requires `TAPPING_TERM` to be defined.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/config_options.md#_snippet_46\n\nLANGUAGE: C\nCODE:\n```\n#define PERMISSIVE_HOLD\n```\n\n----------------------------------------\n\nTITLE: Build Firmware for Le Chiffre Keyboard\nDESCRIPTION: This command builds the firmware for different revisions of the Le Chiffre keyboard using the QMK build environment. It specifies the keyboard, revision, and keymap to build.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/tominabox1/le_chiffre/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake tominabox1/le_chiffre/rev1:default\nmake tominabox1/le_chiffre/rev2:default\nmake tominabox1/le_chiffre/he:default\n```\n\n----------------------------------------\n\nTITLE: Building Ortho 75 Keyboard Firmware with QMK\nDESCRIPTION: This snippet shows the command to build the default firmware for the Ortho 75 keyboard using the QMK build environment. It assumes the QMK build environment is already set up and configured. The command targets the 'cannonkeys/ortho75' keyboard layout with the 'default' keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cannonkeys/ortho75/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake cannonkeys/ortho75:default\n```\n\n----------------------------------------\n\nTITLE: Building the fire keymap for Cornia keyboard\nDESCRIPTION: This command builds the fire keymap for the Cornia keyboard. This keymap enables support for OLED displays and Cirque trackpads via I²C. QMK build environment needs to be properly configured. The output will be a firmware file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cornia/readme.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmake cornia/v1:fire\n```\n\n----------------------------------------\n\nTITLE: Building Vaguette Lite Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the Vaguette Lite keyboard using the QMK build system. It requires a properly configured QMK build environment. The output will be a .hex or .bin file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/delikeeb/vaguettelite/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake delikeeb/vaguettelite:default\n```\n\n----------------------------------------\n\nTITLE: Enabling UART Driver in QMK Firmware\nDESCRIPTION: This snippet shows how to enable the UART driver in QMK Firmware. Instead of manually adding `uart.c` to the `SRC` variable, you should now use `UART_DRIVER_REQUIRED = yes`. This ensures that the build system handles the UART driver dependency.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/ChangeLog/20231126.md#_snippet_5\n\nLANGUAGE: Makefile\nCODE:\n```\nUART_DRIVER_REQUIRED = yes\n```\n\n----------------------------------------\n\nTITLE: Building yosino58 firmware\nDESCRIPTION: This command builds the default firmware for the yosino58 keyboard using the QMK build environment.  It requires a correctly configured QMK build environment. The resulting firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/yosino58/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake yosino58:default\n```\n\n----------------------------------------\n\nTITLE: Building MNK60_STM32 Firmware\nDESCRIPTION: This command builds the default firmware for the MNK60_STM32 keyboard.  It uses the QMK make system. It compiles the keyboard layout and core firmware components for flashing to the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kopibeng/mnk60_stm32/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake kopibeng/mnk60_stm32:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Cheshire Curiosity Keyboard\nDESCRIPTION: This command builds and flashes the default keymap for the Cheshire Curiosity keyboard. It assumes the QMK build environment is already set up. This is for general use after initial flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cheshire/curiosity/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake cheshire/curiosity:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Idobao ID96 Firmware\nDESCRIPTION: This command builds the default firmware for the Idobao ID96 keyboard. It requires the QMK build environment to be set up correctly. The output will be a .hex or .bin file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/idobao/id96/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake idobao/id96:default\n```\n\n----------------------------------------\n\nTITLE: Flashing QMK Firmware for GH60 Satan with HHKB 7u Layout (bash)\nDESCRIPTION: This command flashes the compiled QMK firmware to the gh60/satan keyboard with the hhkb_7u keymap. It requires the keyboard to be in programming mode. The qmk flash command is used, specifying the keyboard and keymap. A working QMK environment and a keyboard in flashing mode are required.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/gh60/satan/keymaps/hhkb_7u/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ qmk flash -kb gh60/satan -km hhkb_7u\n```\n\n----------------------------------------\n\nTITLE: Flashing VN66 Firmware with QMK\nDESCRIPTION: This snippet shows how to flash the compiled firmware to the VN66 keyboard using the QMK build system.  It uses the `make` command along with the flash target.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/hnahkb/vn66/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake hnahkb/vn66:default:flash\n```\n\n----------------------------------------\n\nTITLE: Keymap Readme Template Example\nDESCRIPTION: This example shows a basic keymap readme structure, including an image link and a brief description of the layout. The example is for the default Clueboard layout and highlights the unusual key in the upper left.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/documentation_templates.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n![Clueboard Layout Image](https://i.imgur.com/7Capi8W.png)\n\n# Default Clueboard Layout\n\nThis is the default layout that comes flashed on every Clueboard. For the most\npart it's a straightforward and easy to follow layout. The only unusual key is\nthe key in the upper left, which sends Escape normally, but Grave when any of\nthe Ctrl, Alt, or GUI modifiers are held down.\n```\n\n----------------------------------------\n\nTITLE: Building Dizzy40 Firmware with Make\nDESCRIPTION: This command builds the default firmware for the Dizzy40 keyboard using the QMK build environment. It compiles the keymap and necessary files to create a firmware image.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kb_elmo/dizzy40/readme.md#_snippet_0\n\nLANGUAGE: Make\nCODE:\n```\nmake kb_elmo/dizzy40:default\n```\n\n----------------------------------------\n\nTITLE: Building AN-C Keyboard Firmware\nDESCRIPTION: This code snippet provides the make command to build the default keymap for the AN-C keyboard using the QMK Firmware. It assumes the user has already set up their build environment as described in the QMK documentation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cannonkeys/an_c/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake cannonkeys/an_c:default\n```\n\n----------------------------------------\n\nTITLE: Compiling Bourgeau Keyboard Firmware\nDESCRIPTION: This command compiles the default firmware for the Bourgeau keyboard using the QMK build environment. It requires the build environment to be properly set up beforehand, as detailed in the QMK documentation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/studiokestra/bourgeau/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake studiokestra/bourgeau:default\n```\n\n----------------------------------------\n\nTITLE: Building the YMDK Bface firmware with QMK\nDESCRIPTION: This command builds the default firmware for the YMDK Bface keyboard using the QMK build environment.  It assumes the user has already set up their QMK build environment. It compiles the source code into a firmware image that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ymdk/bface/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake ymdk/bface:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Ghoul Firmware (RP2040)\nDESCRIPTION: This command flashes the default firmware for the Ghoul keyboard using the RP2040 MicroMod. It executes the `make` command with the `flash` target for the tzarc/ghoul/rev1 board with the rp2040 MCU. A proper QMK setup is expected, along with a Ghoul board connected in flashing mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/tzarc/ghoul/readme.md#_snippet_3\n\nLANGUAGE: Makefile\nCODE:\n```\nmake tzarc/ghoul/rev1/rp2040:default:flash\n```\n\n----------------------------------------\n\nTITLE: Enabling Audio on Pin C6 in QMK config.h\nDESCRIPTION: This code snippet enables audio output on pin C6 in QMK firmware. Deprecated. Use `#define AUDIO_PIN C6` instead. This setting is configured in the `config.h` file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/config_options.md#_snippet_17\n\nLANGUAGE: c\nCODE:\n```\n#define C6_AUDIO\n```\n\n----------------------------------------\n\nTITLE: DIP Switch Callback Example (Before)\nDESCRIPTION: This code snippet demonstrates the DIP switch callback implementation before the change, where the functions returned `void`. The callback functions are used to handle DIP switch state changes and trigger corresponding actions.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/ChangeLog/20210828.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nvoid dip_switch_update_kb(uint8_t index, bool active) {\n    dip_switch_update_user(index, active);\n}\n\nvoid dip_switch_update_user(uint8_t index, bool active) {\n    switch (index) {\n        case 0:\n            if(active) { audio_on(); } else { audio_off(); }\n            break;\n    }\n}\n\nvoid dip_switch_update_mask_kb(uint32_t state) { \n    dip_switch_update_mask_user(state);\n}\n\nvoid dip_switch_update_mask_user(uint32_t state) {\n    if (state & (1UL<<0) && state & (1UL<<1)) {\n        layer_on(_ADJUST); // C on esc\n    } else {\n        layer_off(_ADJUST);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Building the Plexus75_HE keyboard\nDESCRIPTION: This command builds the default keymap for the Plexus75_HE keyboard using the QMK build environment. It requires the QMK build environment to be set up correctly. The output is a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/checkerboards/plexus75_he/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake plexus75_he:default\n```\n\n----------------------------------------\n\nTITLE: Building KBDPAD MK3 Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the KBDPAD MK3 using the QMK build environment. It assumes that the QMK build environment has been properly set up. The output is a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kbdfans/kbdpad/mk3/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake kbdfans/kbdpad/mk3:default\n```\n\n----------------------------------------\n\nTITLE: Matrix Diagram for Protozoa Cassini\nDESCRIPTION: This diagram represents the key matrix for the Protozoa Cassini keyboard layout, showing the row and column assignments for each key. It also includes information about key sizes, like 2u Backspace, 2.25u LShift and 2.75u RShift.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/protozoa/cassini/matrix_diagram.md#_snippet_0\n\nLANGUAGE: None\nCODE:\n```\n                                                    ┌───────┐\n                                       2u Backspace │0D     │\n                                                    └───────┘\n┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┐\n│00 │01 │02 │03 │04 │05 │06 │07 │08 │09 │0A │0B │0C │0D │2C │\n├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴───┤      ┌─────┐\n│10   │11 │12 │13 │14 │15 │16 │17 │18 │19 │1A │1B │1C │1D   │      │     │\n├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴─────┤   ┌──┴┐2D  │\n│20    │21 │22 │23 │24 │25 │26 │27 │28 │29 │2A │2B │2D      │   │1D │    │\n├────┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴────┬───┤   └───┴────┘\n│30  │31 │32 │33 │34 │35 │36 │37 │38 │39 │3A │3B │3C    │3D │    ISO Enter\n├────┼───┴┬──┴─┬─┴───┴───┴───┴───┴───┴──┬┴───┼───┴┬────┬┴───┤\n│40  │41  │42  │46                      │4A  │4B  │4C  │4D  │\n└────┴────┴────┴────────────────────────┴────┴────┴────┴────┘\n┌────────┐                                       ┌──────────┐\n│30      │ 2.25u LShift             2.75u RShift │3C        │\n└────────┘                                       └──────────┘\n┌─────┬───┬─────┬───────────────────────────┬─────┬───┬─────┐\n│40   │41 │42   │46                         │4B   │4C │4D   │ Tsangan/WKL\n└─────┴───┴─────┴───────────────────────────┴─────┴───┴─────┘\n```\n\n----------------------------------------\n\nTITLE: Mod-Tap Interrupt Handling (Old)\nDESCRIPTION: This code snippet demonstrates the old way of handling mod-tap interrupts using `get_ignore_mod_tap_interrupt`. It defines a function that returns whether to ignore interrupts based on the keycode, specifically for `LCTL_T(KC_A)`.  The function returns `true` for `LCTL_T(KC_A)` and `false` for all other cases, effectively ignoring interrupts only for that specific mod-tap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/ChangeLog/20230226.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nbool get_ignore_mod_tap_interrupt(uint16_t keycode, keyrecord_t *record) {\n    switch(keycode) {\n        case LCTL_T(KC_A):\n            return true;\n        default:\n            return false;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Single C Test (QMK)\nDESCRIPTION: This command runs a single, specific C test.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/cli_commands.md#_snippet_57\n\nLANGUAGE: qmk\nCODE:\n```\nqmk test-c --test basic\n```\n\n----------------------------------------\n\nTITLE: Undefining RGBLED_SPLIT in QMK\nDESCRIPTION: This snippet shows how to undefine `RGBLED_SPLIT` macro using `#undef` preprocessor directive in QMK. This is required when customizing RGB LED wiring on Keebio split boards before redefining it with user's specific configuration.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/ChangeLog/20200829.md#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n#undef RGBLED_SPLIT\n```\n\n----------------------------------------\n\nTITLE: Building FAve 87H QMK Firmware using Make\nDESCRIPTION: This command builds the default keymap for the FAve 87H keyboard using the QMK build environment.  It assumes the QMK build environment is properly set up.  The resulting firmware can then be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/linworks/fave87h/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake linworks/fave87h:default\n```\n\n----------------------------------------\n\nTITLE: GPLv2 License Header Example\nDESCRIPTION: This snippet demonstrates the standard GPLv2 license header that should be included at the top of new source files in the QMK firmware project. It includes copyright information, terms of redistribution and modification, and a link to the full license text.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/pr_checklist.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n/* Copyright 2024 Your Name (@yourgithub)\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 2 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n```\n\n----------------------------------------\n\nTITLE: Font Descriptor Block Structure Definition in C\nDESCRIPTION: This code defines the structure of the font descriptor block in the QMK Font Format (QFF). This block contains essential metadata about the font, such as magic number, version, file size, line height, presence of ASCII table, number of Unicode glyphs, format, flags, compression scheme, and transparency index. It must be the first block in the QFF file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/quantum_painter_qff.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\ntypedef struct __attribute__((packed)) qff_font_descriptor_v1_t {\n    qgf_block_header_v1_t header;               // = { .type_id = 0x00, .neg_type_id = (~0x00), .length = 20 }\n    uint24_t              magic;                // constant, equal to 0x464651 (\"QFF\")\n    uint8_t               qff_version;          // constant, equal to 0x01\n    uint32_t              total_file_size;      // total size of the entire file, starting at offset zero\n    uint32_t              neg_total_file_size;  // negated value of total_file_size, used for detecting parsing errors\n    uint8_t               line_height;          // glyph height in pixels\n    bool                  has_ascii_table;      // whether the font has an ascii table of glyphs (0x20...0x7E)\n    uint16_t              num_unicode_glyphs;   // the number of glyphs in the unicode table -- no table specified if zero\n    uint8_t               format;               // frame format, see below.\n    uint8_t               flags;                // frame flags, see below.\n    uint8_t               compression_scheme;   // compression scheme, see below.\n    uint8_t               transparency_index;   // palette index used for transparent pixels (not yet implemented)\n} qff_font_descriptor_v1_t;\n// _Static_assert(sizeof(qff_font_descriptor_v1_t) == (sizeof(qgf_block_header_v1_t) + 20), \"qff_font_descriptor_v1_t must be 25 bytes in v1 of QFF\");\n```\n\n----------------------------------------\n\nTITLE: Building Emery65 Firmware with QMK\nDESCRIPTION: This command builds the default keymap for the Emery65 keyboard within the QMK firmware environment. It requires a properly configured build environment as outlined in the QMK documentation.  The output is a firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/emery65/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake emery65:default\n```\n\n----------------------------------------\n\nTITLE: Building Black Hellebore Firmware with Make\nDESCRIPTION: This command builds the default firmware for the Black Hellebore keyboard using the QMK build system. It assumes that the QMK build environment is already set up and configured correctly.  The resulting firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/black_hellebore/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake black_hellebore:default\n```\n\n----------------------------------------\n\nTITLE: Keyboard Matrix Diagram\nDESCRIPTION: This diagram illustrates the row and column mapping for keys on the marksard Leftover30 keyboard.  It shows the connection between the physical keys and their corresponding matrix locations. The numbers inside the keycaps represent the row and column indices used in the keyboard firmware to identify the keypresses. The diagram is purely for visual representation and doesn't involve any code.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/marksard/leftover30/matrix_diagram.md#_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n  ┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┐\n  │44 │43 │42 │41 │40 │04 │03 │02 │01 │00 │30 │\n  └┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴───┤   ┌─────┐\n   │54 │53 │52 │51 │50 │14 │13 │12 │11 │10    │   │     │\n   └─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬────┤   └┐10  │ ISO Enter\n     │64 │63 │62 │61 │60 │24 │23 │22 │21 │20  │    │    │\n┌───┐└┬──┴─┬─┴───┴───┴───┴───┴───┴──┬┴──┬┴────┤    └────┘\n│74 │ │34  │33                      │32 │31   │\n└───┘ └────┴────────────────────────┴───┴─────┘\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for IO-Mini 1800\nDESCRIPTION: This command builds the default firmware for the IO-Mini 1800 keyboard using the QMK build environment.  It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/io_mini1800/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake io_mini1800:default\n```\n\n----------------------------------------\n\nTITLE: Building QMK Firmware for Slice Keyboard\nDESCRIPTION: This snippet shows how to build the QMK firmware for the Slice keyboard with the default configuration. It assumes that the QMK build environment is already set up. The command compiles the firmware and creates a .hex file that can be flashed onto the keyboard's Pro Micro controller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/basekeys/slice/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake basekeys/slice/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware to Lunakey Pico (QMK)\nDESCRIPTION: Flashes the compiled firmware to the Lunakey Pico keyboard using the QMK flash command. This uses the `qmk flash` command, specifying the keyboard, keymap, and bootloader as arguments. It assumes the `avrdude` bootloader and requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/yoichiro/lunakey_pico/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nqmk flash -kb yoichiro/lunakey_pico -km default -bl avrdude\n```\n\n----------------------------------------\n\nTITLE: Building Owlet60 Firmware with Make\nDESCRIPTION: This command builds the default firmware for the Owlet60 keyboard using the QMK build environment. It assumes that the QMK build environment is already set up. It will generate a .hex file that can be flashed onto the Pro Micro controller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/owlet60/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake handwired/owlet60:default\n```\n\n----------------------------------------\n\nTITLE: Building Oddball v2.1 Firmware with ADNS Sensor\nDESCRIPTION: This command builds the Oddball v2.1 keyboard firmware with the default configuration, which includes support for the ADNS sensor. It assumes that the QMK build environment is properly set up. The output will be a firmware file suitable for flashing onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/oddball/v2_1/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake oddball/v2_1:default\n```\n\n----------------------------------------\n\nTITLE: Initializing ST7565 Display\nDESCRIPTION: Initializes the ST7565 display. Takes a `display_rotation_t` value to rotate the display's rendered output.  Calls the weak function `st7565_init_user` to allow for custom initialization behavior. Returns `true` if initialization was successful, `false` otherwise.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/st7565.md#_snippet_6\n\nLANGUAGE: C\nCODE:\n```\n// Initialize the display, rotating the rendered output based on the define passed in.\n// Returns true if the was initialized successfully\nbool st7565_init(display_rotation_t rotation);\n```\n\n----------------------------------------\n\nTITLE: Configuring USB IDs in config.h - C\nDESCRIPTION: This code snippet illustrates the old method of specifying USB Vendor ID, Product ID, Device Version, Manufacturer and Product Name in the `config.h` file. This method is deprecated and will be removed in future versions of QMK. Defining these values in `config.h` will generate warnings during build and cause compilation failure after November 26, 2022.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/ChangeLog/20220827.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#define VENDOR_ID    0x1234\n#define PRODUCT_ID   0x5678\n#define DEVICE_VER   0x0001\n#define MANUFACTURER Me\n#define PRODUCT      MyKeyboard\n```\n\n----------------------------------------\n\nTITLE: Building ErgoInu Firmware with Make\nDESCRIPTION: These commands are used to compile the QMK firmware for the ErgoInu keyboard. The first command builds the default layout, while the second builds the default layout with JIS keymap.  It assumes the QMK build environment has been properly set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/dm9records/ergoinu/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake dm9records/ergoinu:default\n```\n\nLANGUAGE: Makefile\nCODE:\n```\nmake dm9records/ergoinu:default_jis\n```\n\n----------------------------------------\n\nTITLE: Building QMK Firmware for Durgod Galaxy\nDESCRIPTION: This command builds the QMK firmware for the Durgod Galaxy keyboard with the default keymap. It requires a properly configured QMK build environment. The output is a firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/durgod/dgk6x/galaxy/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake durgod/galaxy:default\n```\n\n----------------------------------------\n\nTITLE: Flashing EEPROM (Right Hand) - avrdude command\nDESCRIPTION: This command flashes the EEPROM for the right half of the keyboard. It uses `avrdude` to write the `eeprom-righhand.eep` file to the EEPROM. `$(COM_PORT)` must be replaced with the actual port name.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/orthodox/readme.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\navrdude -p atmega32u4 -P $(COM_PORT) -c avr109 -U eeprom:w:eeprom-righhand.eep\n// or the equivalent in dfu-programmer\n```\n\n----------------------------------------\n\nTITLE: Removing MacOS Metadata Files\nDESCRIPTION: This command removes MacOS-specific metadata files from the TADA68 volume, preventing potential issues with the keyboard. These files can interfere with the keyboard's operation if not removed.  It uses `rm -fr` to recursively and forcefully remove the specified directories and files.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/tada68/readme.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nrm -fr .Trashes/ .fseventsd/ ._.Trashes ._FLASH.bin\n```\n\n----------------------------------------\n\nTITLE: Building Alpha9 Firmware\nDESCRIPTION: This command builds the default firmware for the Alpha9 keyboard using the QMK build environment. It compiles the source code and generates a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wsk/alpha9/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake wsk/alpha9:default\n```\n\n----------------------------------------\n\nTITLE: Building QMK Firmware for EC980C\nDESCRIPTION: This command builds the default QMK firmware for the EC980C keyboard. It assumes that the QMK build environment is already set up.  The output is a .hex or .bin file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cipulot/ec_980c/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake cipulot/ec_980c:default\n```\n\n----------------------------------------\n\nTITLE: Building EB46 Keyboard Firmware with QMK\nDESCRIPTION: This snippet provides the command to build the default firmware for the EB46 keyboard using the QMK build environment. It assumes that the QMK build environment has already been set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/akb/eb46/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake akb/eb46:default\n```\n\n----------------------------------------\n\nTITLE: Building Haven65 Firmware (QMK)\nDESCRIPTION: This command builds the default keymap for the Haven65 keyboard. It requires QMK build environment to be set up beforehand.  The output is a .hex or .bin file which can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ah/haven65/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake ah/haven65:default\n```\n\n----------------------------------------\n\nTITLE: Building Genesis Rev2 Firmware with Make\nDESCRIPTION: This command builds the default firmware for the Genesis Rev2 macro pad using the make command. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/custommk/genesis/rev2/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake custommk/genesis/rev2:default\n```\n\n----------------------------------------\n\nTITLE: Building WT60-H1 Keyboard Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the wilba.tech WT60-H1 keyboard using the QMK build environment. It requires a properly configured QMK environment and will produce a firmware file ready to be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wilba_tech/wt60_h1/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake wilba_tech/wt60_h1:default\n```\n\n----------------------------------------\n\nTITLE: Building Solanis QMK Firmware\nDESCRIPTION: This command builds the default QMK firmware for the Solanis keyboard. It requires a properly configured QMK build environment. The command compiles the firmware and generates a .hex file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/fjlabs/solanis/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake fjlabs/solanis:default\n```\n\n----------------------------------------\n\nTITLE: Building Wyvern Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Wyvern keyboard using the QMK build environment. It compiles the necessary source code and creates a firmware file suitable for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mysticworks/wyvern/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake mysticworks/wyvern:default\n```\n\n----------------------------------------\n\nTITLE: Building Stoutgat Firmware with QMK\nDESCRIPTION: This snippet shows how to build the default firmware for the Stoutgat keyboard using the QMK build environment.  It requires a properly set up QMK environment. The command compiles the firmware and produces a .hex file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/tkw/stoutgat/v1/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake tkw/stoutgat/v1:default\n```\n\n----------------------------------------\n\nTITLE: Flashing firmware to Vault 35 WKL Universal\nDESCRIPTION: This command flashes the compiled firmware to the Vault 35 WKL Universal keyboard. It utilizes the QMK build environment and associated tools to transfer the firmware to the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/jlw/vault35_wkl_universal/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake jlw/vault35_wkl_universal:default:flash\n```\n\n----------------------------------------\n\nTITLE: Writing Raw PROGMEM Data to Display\nDESCRIPTION: Writes raw character data stored in PROGMEM (`data`) of a specified size (`size`) to the display buffer, starting at the current cursor position. The size is passed as `uint16_t`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/st7565.md#_snippet_23\n\nLANGUAGE: C\nCODE:\n```\n// Writes a PROGMEM string to the buffer at current cursor position\nvoid st7565_write_raw_P(const char *data, uint16_t size);\n```\n\n----------------------------------------\n\nTITLE: Building Keyboard Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the BINPAD PIXIE keyboard using the QMK build environment.  It compiles the source code and generates a firmware file that can be flashed onto the device. Requires a configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/binepad/pixie/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake binepad/pixie:default\n```\n\n----------------------------------------\n\nTITLE: Flashing OXALYS80 Firmware with QMK\nDESCRIPTION: This command builds and flashes the default firmware for the OXALYS80 keyboard. It requires a correctly set up QMK build environment and a connected keyboard. The command will attempt to flash the compiled firmware to the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/nix_studio/oxalys80/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake nix_studio/oxalys80:default:flash\n```\n\n----------------------------------------\n\nTITLE: Tap Dance Tap Struct Definition in QMK\nDESCRIPTION: This code defines a struct `td_tap_t` to store the state of a tap dance. It includes a boolean `is_press_action` and a `td_state_t` to represent the current state of the tap dance.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/tap_dance.md#_snippet_12\n\nLANGUAGE: c\nCODE:\n```\ntypedef struct {\n    bool is_press_action;\n    td_state_t state;\n} td_tap_t;\n```\n\n----------------------------------------\n\nTITLE: Building Vault35 Keyboard Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the Vault35 keyboard using the QMK build environment. It assumes that the QMK build environment has been properly set up. The output will be a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/projectcain/vault35/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake projectcain/vault35:default\n```\n\n----------------------------------------\n\nTITLE: Flashing QMK Firmware to Tyson60s Keyboard\nDESCRIPTION: This command builds and flashes the default QMK firmware to the trnthsn/tyson60s keyboard.  It assumes the QMK build environment is set up and the necessary flashing tools are installed and configured correctly. The keyboard needs to be in flashing mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/trnthsn/tyson60s/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake trnthsn/tyson60s:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Pulse 4k Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Pulse 4k macropad using the QMK build environment. It assumes that the QMK build environment has already been set up. The command compiles the firmware and creates a .hex file that can be flashed onto the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/maxr1998/pulse4k/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake maxr1998/pulse4k:default\n```\n\n----------------------------------------\n\nTITLE: Flashing GreatPad Firmware (QMK)\nDESCRIPTION: This command flashes the default firmware onto the GreatPad keyboard using the QMK Firmware build system. It uploads the compiled firmware image to the device, replacing the existing firmware. Requires a properly configured QMK build environment and a connected GreatPad keyboard in flashing mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/gkeyboard/greatpad/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake gkeyboard/greatpad:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware: QMK Make Flash\nDESCRIPTION: Flashes the compiled firmware onto the O4L 5x12 keyboard using the QMK build environment and the flash target. Requires a correctly configured QMK environment and a connected keyboard in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keycapsss/o4l_5x12/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake keycapsss/o4l_5x12:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building keyboard firmware\nDESCRIPTION: This command builds the firmware for the frobiac/blackbowl keyboard using the QMK build environment. It assumes the build environment has already been set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/frobiac/blackbowl/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake frobiac/blackbowl\n```\n\n----------------------------------------\n\nTITLE: Building Wearhaus66 Firmware with QMK\nDESCRIPTION: This command builds the QMK firmware for the Wearhaus66 keyboard with the default keymap and no backlight. It utilizes the `make` command within the QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechlovin/zed65/no_backlight/wearhaus66/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake mechlovin/zed65/no_backlight/wearhaus66:default\n```\n\n----------------------------------------\n\nTITLE: Building Keyboard Firmware\nDESCRIPTION: This command compiles the studiokestra/fairholme keyboard firmware with the default keymap.  It requires a properly configured QMK build environment. The output will be a firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/studiokestra/fairholme/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake studiokestra/fairholme:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Vaneela Firmware (QMK)\nDESCRIPTION: This command flashes the built firmware to the Vaneela keyboard, utilizing the QMK Firmware environment. It extends the build command with the `:flash` target, triggering the flashing process after building. It requires a properly configured QMK build environment and a connected Vaneela keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/delikeeb/vaneela/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake delikeeb/vaneela:default:flash\n```\n\n----------------------------------------\n\nTITLE: Making Default Firmware for Lime Keyboard\nDESCRIPTION: This command compiles the default firmware for the Lime keyboard. It assumes that the QMK build environment is already set up. The compiled firmware is generated and ready for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/lime/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake lime:default\n```\n\n----------------------------------------\n\nTITLE: Flashing ADM42 Firmware\nDESCRIPTION: This command flashes the built firmware to the ADM42 keyboard. It depends on the QMK build environment and a connected keyboard in flashing mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/adm42/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake adm42:default:flash\n```\n\n----------------------------------------\n\nTITLE: Compiling nknl7en Keyboard Firmware with QMK\nDESCRIPTION: This command compiles the firmware for the nknl7en keyboard using the QMK build environment. It assumes the QMK build environment is properly set up. The compiled firmware can then be flashed onto the keyboard's Pro Micro controller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/salicylic_acid3/nknl7en/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake salicylic_acid3/nknl7en:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware - QMK Makefile\nDESCRIPTION: This command compiles and flashes the default keymap for the Concrete Flowers Cor TKL keyboard. It combines the build and flash steps into a single command, simplifying the process of updating the keyboard's firmware. It requires a properly configured QMK build environment and a connected keyboard in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/concreteflowers/cor_tkl/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake concreteflowers/cor_tkl:default:flash\n```\n\n----------------------------------------\n\nTITLE: Making the 4x4 keyboard firmware\nDESCRIPTION: This command builds the default firmware for the 4x4 keyboard using the QMK build environment. It compiles the keymap and other necessary files to create a firmware image that can be flashed onto the keyboard's microcontroller. Requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/40percentclub/4x4/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake 40percentclub/4x4:default\n```\n\n----------------------------------------\n\nTITLE: Building the Dactyl Lightcycle Keyboard (make)\nDESCRIPTION: This command builds the firmware for the Dactyl Lightcycle keyboard with the default configuration. It requires a properly set up QMK build environment. The output is the compiled firmware ready to be flashed onto the Pro Micro controllers.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/dactyl_lightcycle/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake handwired/dactyl_lightcycle:default\n```\n\n----------------------------------------\n\nTITLE: Flashing pi60_hse Firmware with QMK\nDESCRIPTION: This command builds and flashes the default firmware for the pi60_hse keyboard to the device. It requires a correctly configured QMK build environment and a connected keyboard in a state ready to accept the flashed firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/1upkeyboards/pi60_hse/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake 1upkeyboards/pi60_hse:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Alexa Solder Firmware with Make\nDESCRIPTION: This command is used to build the default QMK firmware for the Alexa Solder PCB. It relies on the QMK build environment being properly set up. The output is a firmware file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/lucid/alexa_solder/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake lucid/alexa_solder:default\n```\n\n----------------------------------------\n\nTITLE: Building Snap96 Firmware\nDESCRIPTION: This command is used to build the default keymap for the Snap96 keyboard using the QMK firmware. It assumes that the QMK build environment is already set up.  The command targets the xelus/snap96 keyboard with the default keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/xelus/snap96/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake xelus/snap96:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Numpad Firmware with QMK Makefile\nDESCRIPTION: This command builds and flashes the QMK firmware for the AlhenKB Macropad 5x4 configured as a numpad. It requires the QMK build environment and a compatible flashing tool.  Ensure the device is in the bootloader mode before executing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/alhenkb/macropad5x4/readme.md#_snippet_3\n\nLANGUAGE: Makefile\nCODE:\n```\nmake alhenkb/macropad5x4:numpad:flash\n```\n\n----------------------------------------\n\nTITLE: Running Entire Python Test Suite (QMK)\nDESCRIPTION: This command runs the entire python test suite without specifying any particular test or test group.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/cli_commands.md#_snippet_50\n\nLANGUAGE: qmk\nCODE:\n```\nqmk pytest\n```\n\n----------------------------------------\n\nTITLE: Building Barleycorn Firmware\nDESCRIPTION: This command builds the default keymap for the Barleycorn keyboard using the QMK build environment. It compiles the firmware for the specified keyboard and keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/yiancardesigns/barleycorn/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake yiancardesigns/barleycorn:default\n```\n\n----------------------------------------\n\nTITLE: Old RGB Matrix Keymap Code Example - C\nDESCRIPTION: This snippet showcases the previous method of implementing RGB Matrix indicator code within keymaps in QMK Firmware.  It involves defining a `void rgb_matrix_indicators_user(void)` function to handle LED behavior. This approach lacked a mechanism for keymaps to signal completion, hindering keyboard-level overrides.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/ChangeLog/20221126.md#_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nvoid rgb_matrix_indicators_user(void) {\n    // keymap LED code\n}\n```\n\n----------------------------------------\n\nTITLE: Compiling Firmware for Hotswap PCB\nDESCRIPTION: This command compiles the default layout for the hotswap version of the Mode Eighty V1 keyboard. It requires QMK build environment setup. The resulting binary (*.bin) file needs to be flashed separately using dfu-util or QMK Toolbox.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mode/m80v1/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake mode/m80v1/m80h:default # Hotswap\n```\n\n----------------------------------------\n\nTITLE: Defining DIP Switch Map for QMK Firmware (C)\nDESCRIPTION: This code snippet demonstrates how to define a DIP switch map in QMK Firmware using the `DIP_SWITCH_MAP_ENABLE` macro. It defines the actions to be executed when the state of a DIP switch changes, using `DIP_SWITCH_OFF_ON` to specify different actions for the OFF and ON states of each switch.  The actions are defined as `DF(0)`, `DF(1)`, `EC_NORM`, and `EC_SWAP`.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/ChangeLog/20240225.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#if defined(DIP_SWITCH_MAP_ENABLE)\nconst uint16_t PROGMEM dip_switch_map[NUM_DIP_SWITCHES][NUM_DIP_STATES] = {\n    DIP_SWITCH_OFF_ON(DF(0), DF(1)),\n    DIP_SWITCH_OFF_ON(EC_NORM, EC_SWAP)\n};\n#endif\n```\n\n----------------------------------------\n\nTITLE: Building Meow48 Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Meow48 keyboard using the QMK build environment. It compiles the source code into a firmware image that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/meow48/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake meow48:default\n```\n\n----------------------------------------\n\nTITLE: Building Magicforce 68 Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Magicforce 68 keyboard using the QMK build environment. It requires QMK to be set up properly and will compile the firmware based on the configurations in the specified keyboard directory. The output is a .hex or .bin file which can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/40percentclub/mf68/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake 40percentclub/mf68:default\n```\n\n----------------------------------------\n\nTITLE: Building WT80-BC Keyboard Firmware with QMK\nDESCRIPTION: This command builds the default keymap for the wilba.tech WT80-BC keyboard using the QMK build environment. It assumes that the QMK build environment has been properly set up according to the QMK documentation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wilba_tech/wt80_bc/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake wilba_tech/wt80_bc:default\n```\n\n----------------------------------------\n\nTITLE: Building and Flashing Hillside 52 Firmware (C)\nDESCRIPTION: This snippet shows the commands used to build and flash the default firmware for the Hillside 52 keyboard using a keymap.c file. The first command compiles the firmware, and the second command flashes it to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/hillside/52/keymaps/default_dot_c/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake hillside/52:default_dot_c\nmake hillside/52:default_doc_c:flash\n```\n\n----------------------------------------\n\nTITLE: Building Firmware with Make\nDESCRIPTION: This command builds the default firmware for the balloondogcaps/tr90pm keyboard using the `make` command. It compiles the keyboard's configuration and keymap into a firmware image.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/balloondogcaps/tr90pm/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake balloondogcaps/tr90pm:default\n```\n\n----------------------------------------\n\nTITLE: Building stickey4 Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the stickey4 keyboard using the QMK build environment. It compiles the keymap and keyboard definition into a firmware image ready for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/dailycraft/stickey4/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake dailycraft/stickey4:default\n```\n\n----------------------------------------\n\nTITLE: Building Kintsugi Firmware\nDESCRIPTION: This command builds the default firmware for the Kintsugi keyboard using the QMK build environment.  It requires the QMK build environment to be set up correctly.  The output will be the firmware file ready to be flashed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/adpenrose/kintsugi/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake kintsugi:default\n```\n\n----------------------------------------\n\nTITLE: Building YMDK YMD62 Firmware\nDESCRIPTION: This command builds the default firmware for the YMDK YMD62 keyboard.  It requires a properly configured QMK build environment.  The output is a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ymdk/ymd62/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake ymdk/ymd62:default\n```\n\n----------------------------------------\n\nTITLE: Keymaps Array Definition in QMK\nDESCRIPTION: Defines a constant two-dimensional array called `keymaps` which stores the keymap configurations. `MATRIX_ROWS` and `MATRIX_COLS` are preprocessor macros that define the dimensions of the keyboard matrix. The `PROGMEM` attribute specifies that the array is stored in program memory.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/signum/3_0/keymaps/default/km_template.txt#_snippet_2\n\nLANGUAGE: C\nCODE:\n```\nconst uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {\n\n//<keymaps/>\n};\n```\n\n----------------------------------------\n\nTITLE: Building EC660C QMK Firmware\nDESCRIPTION: This command builds the default keymap for the EC660C keyboard using the QMK firmware. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cipulot/ec_660c/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake cipulot/ec_660c:default\n```\n\n----------------------------------------\n\nTITLE: Building the Satisfaction75 Hotswap Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Satisfaction75 Hotswap keyboard using the QMK build environment. It requires QMK to be set up properly. The compiled firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cannonkeys/satisfaction75_hs/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake cannonkeys/satisfaction75_hs:default\n```\n\n----------------------------------------\n\nTITLE: Building Aozora Firmware\nDESCRIPTION: This code snippet demonstrates how to build the default firmware for the Aozora keyboard using the QMK build environment. It assumes that the QMK build environment has already been set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/aozora/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake aozora:default\n```\n\n----------------------------------------\n\nTITLE: Building UraNuma Firmware with QMK\nDESCRIPTION: This command compiles the default keymap for the UraNuma keyboard using the QMK build environment. It assumes that the QMK build environment has already been set up according to the QMK documentation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/uranuma/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake uranuma:default\n```\n\n----------------------------------------\n\nTITLE: Building h10 Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the h10 keyboard using the QMK build environment. It requires the QMK build environment to be set up beforehand.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/hineybush/h10/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake hineybush/h10:default\n```\n\n----------------------------------------\n\nTITLE: Compiling Firmware for Soldered PCB\nDESCRIPTION: This command compiles the default layout for the soldered version of the Mode Eighty V1 keyboard. It depends on the QMK build environment. The output is a *.bin file which must be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mode/m80v1/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake mode/m80v1/m80s:default # Soldered\n```\n\n----------------------------------------\n\nTITLE: Building Cyclops Keyboard Firmware with QMK\nDESCRIPTION: This command builds the default keymap for the Cyclops keyboard using the QMK firmware. It assumes that the QMK build environment has already been set up. This command will compile the firmware and generate a .hex file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/westfoxtrot/cyclops/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake westfoxtrot/cyclops:default\n```\n\n----------------------------------------\n\nTITLE: Building Ghost Squid firmware with default layout\nDESCRIPTION: This command builds the firmware for the Ghost Squid keyboard using the default keymap.  It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/bpiphany/ghost_squid/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake bpiphany/ghost_squid:default\n```\n\n----------------------------------------\n\nTITLE: Building Pilcrow Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the pilcrow keyboard using the QMK build environment. It assumes that the QMK build environment has been set up correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/pilcrow/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/pilcrow:default\n```\n\n----------------------------------------\n\nTITLE: Building Coban Pad 12A Firmware (QMK)\nDESCRIPTION: This command compiles the QMK firmware for the Coban Pad 12A keyboard with the default keymap.  It requires the QMK build environment to be set up beforehand. The output is the compiled firmware ready to be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/coban/pad12a/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake coban/pad12a:default\n```\n\n----------------------------------------\n\nTITLE: Building Somei70 Keyboard Firmware with Make\nDESCRIPTION: This command builds the default firmware for the Somei70 keyboard using the QMK build environment. It utilizes the make command with the specified keyboard and keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/somei70/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake somei70:default\n```\n\n----------------------------------------\n\nTITLE: Flashing sf2040 Firmware\nDESCRIPTION: This command flashes the compiled firmware onto the sf2040 keyboard. It requires the QMK build environment and a connection to the keyboard's microcontroller. This process programs the keyboard with the newly built firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/sf2040/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake sf2040:default:flash\n```\n\n----------------------------------------\n\nTITLE: Compiling ScottoWing Keyboard Firmware\nDESCRIPTION: This command compiles the default firmware for the ScottoWing keyboard using the QMK build environment.  It requires QMK build environment to be set up correctly. It compiles the scottokeebs/scottowing keyboard with the default keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/scottokeebs/scottowing/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake scottokeebs/scottowing:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Fuyu HS Firmware with QMK\nDESCRIPTION: This command flashes the built firmware onto the Fuyu HS keyboard using the QMK build environment. It requires a compatible flashing tool to be configured and connected.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/zykrah/fuyu_hs/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake zykrah/fuyu_hs:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building the suihankey/alpha keyboard with default keymap\nDESCRIPTION: This command builds the firmware for the suihankey/alpha keyboard using the default keymap. It assumes that the QMK build environment has already been set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kakunpc/suihankey/alpha/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake suihankey/alpha:default\n```\n\n----------------------------------------\n\nTITLE: Testing Symmetric70 Proto Matrix\nDESCRIPTION: This command allows testing the keyboard matrix using the MTEST flag to set debugging options. It compiles and flashes the firmware with matrix debugging enabled, setting `mdelay0` for testing. Requires the QMK build environment to be set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/symmetric70_proto/promicro/readme.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmake MTEST=mdelay0 handwired/symmetric70_proto/promicro/normal:default:flash\nmake MTEST=mdelay0 handwired/symmetric70_proto/promicro/fast:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Gas75 Firmware with QMK (make)\nDESCRIPTION: This command builds the default firmware for the Gas75 keyboard. It requires a correctly set up QMK build environment. The command compiles the keyboard layout and prepares it for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ml/gas75/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake ml/gas75:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Ergoslab with default keymap using QMK\nDESCRIPTION: This command compiles and flashes the Ergoslab keyboard with the default keymap to the Pro Micro controller using the QMK build environment. It assumes the QMK environment and required tools (e.g., dfu-programmer) are correctly installed and configured.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ergoslab/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake ergoslab:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building the Firmware\nDESCRIPTION: This command builds the default firmware for the ibm/model_m_4th_gen/overnumpad_1xb keyboard. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ibm/model_m_4th_gen/overnumpad_1xb/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake ibm/model_m_4th_gen/overnumpad_1xb:default\n```\n\n----------------------------------------\n\nTITLE: Flashing RURA66 Firmware\nDESCRIPTION: This command flashes the default firmware onto the RURA66 keyboard using the QMK build environment.  It assumes the board is in bootloader mode. The command combines the build and flash steps into one.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/rura66/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake rura66:default:flash\n```\n\n----------------------------------------\n\nTITLE: Configuring Maximum ILI9341 Devices (C)\nDESCRIPTION: This snippet shows how to configure the maximum number of ILI9341 displays that can be used by setting the `ILI9341_NUM_DEVICES` macro in `config.h`. The default value is 1. This is a preprocessor definition. Requires Quantum Painter to be enabled.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/quantum_painter.md#_snippet_12\n\nLANGUAGE: c\nCODE:\n```\n// 3 displays:\n#define ILI9341_NUM_DEVICES 3\n```\n\n----------------------------------------\n\nTITLE: Building S7 Elephant Firmware\nDESCRIPTION: This command builds the default firmware for the S7 Elephant keyboard (revision 1) using the QMK build environment.  It assumes that the QMK build environment has already been set up according to the QMK documentation. The resulting firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/jacky_studio/s7_elephant/rev1/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake s7_elephant/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Flashing QMK Firmware to Singa Kohaku R2\nDESCRIPTION: This command builds and flashes the default QMK firmware to the Singa Kohaku R2 keyboard. It assumes that the QMK build environment has been set up and the necessary flashing tools are installed. It relies on the `make` command and the `flash` target.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/zeix/singa/kohaku/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake zeix/singa/kohaku:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building the piche60 Keyboard\nDESCRIPTION: This command builds the default keymap for the piche60 keyboard using the QMK build environment. It compiles the firmware for the chlx/piche60 target with the default keymap configuration. Requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/chlx/piche60/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake chlx/piche60:default\n```\n\n----------------------------------------\n\nTITLE: Compiling QMK Firmware\nDESCRIPTION: This command compiles the QMK firmware for the specified keyboard and keymap. It requires the QMK build environment to be properly set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/rabijl/rotary_numpad/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nqmk compile -kb handwired/rabijl/rotary_numpad -km default\n```\n\n----------------------------------------\n\nTITLE: Build Argyle Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the Argyle keyboard using the QMK build environment. It compiles the necessary source code and generates a firmware image that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/argyle/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake argyle:default\n```\n\n----------------------------------------\n\nTITLE: Flashing the Obi Keyboard Firmware\nDESCRIPTION: This command flashes the built firmware to the Obi keyboard. It depends on the QMK build environment and a connected keyboard in a flashable state.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/adpenrose/obi/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake adpenrose/obi:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Paladin64 Firmware (Make)\nDESCRIPTION: This command builds and flashes the default firmware for the Paladin64 keyboard to the device. It requires a configured QMK build environment and a connected keyboard. The output is the flashed firmware on the device.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kapcave/paladin64/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake kapcave/paladin64:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Jones Keyboard Firmware - QMK\nDESCRIPTION: This command builds the default firmware for the Jones keyboard's v1 version using the QMK build environment.  It compiles the necessary source code and generates a firmware image that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/jones/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake jones/v1:default\n```\n\n----------------------------------------\n\nTITLE: KLE to JSON Example 1 (QMK)\nDESCRIPTION: An example showing the use of `qmk kle2json` to convert `kle.txt` to `info.json`. If `info.json` already exists, it will prompt the user to use the `-f` flag to force overwriting.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/cli_commands.md#_snippet_46\n\nLANGUAGE: qmk\nCODE:\n```\n$ qmk kle2json kle.txt\n☒ File info.json already exists, use -f or --force to overwrite.\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for FC980C\nDESCRIPTION: This command builds the default firmware for the fc980c keyboard. Before executing this command, ensure that the QMK build environment is properly set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/fc980c/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake fc980c:default\n```\n\n----------------------------------------\n\nTITLE: Building SouthPad Firmware\nDESCRIPTION: Builds the default firmware for the SouthPad keyboard. This command assumes the QMK build environment is set up and ready for use.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/matchstickworks/southpad/rev1/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake matchstickworks/southpad/rev1:default\n```\n\n----------------------------------------\n\nTITLE: Flashing WhiteFox Firmware (QMK)\nDESCRIPTION: This command builds and flashes the default firmware to the WhiteFox keyboard. It requires a correctly configured QMK build environment and a connected WhiteFox keyboard in flashing mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/input_club/whitefox/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake input_club/whitefox:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Polaris Keyboard Firmware - QMK\nDESCRIPTION: This snippet demonstrates how to build the default firmware for the Polaris keyboard using the QMK build environment. It requires QMK to be set up and configured. The command compiles the firmware and generates a .hex file that can be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ai03/polaris/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake ai03/polaris:default\n```\n\n----------------------------------------\n\nTITLE: Building Erdnuss65 Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the Erdnuss65 keyboard using the QMK build system. It requires the QMK build environment to be properly set up beforehand, as detailed in the linked documentation. The command compiles the keymap and core QMK code for the specified keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/citrus/erdnuss65/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake citrus/erdnuss65:default\n```\n\n----------------------------------------\n\nTITLE: Building Blaster 75 Firmware\nDESCRIPTION: This command builds the default firmware for the Blaster 75 keyboard using the QMK build environment.  It assumes that the QMK build environment has already been set up according to the QMK documentation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/blaster75/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake blaster75:default\n```\n\n----------------------------------------\n\nTITLE: Compiling Keyboard Firmware with QMK\nDESCRIPTION: This command compiles the firmware for the NoodlePad v.2 keyboard using the QMK build environment. It specifies the keyboard and keymap to use for compilation. Ensure the QMK build environment is properly set up before running this command.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/themadnoodle/noodlepad/v2/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nqmk compile -kb themadnoodle/noodlepad/v2 -km default\n```\n\n----------------------------------------\n\nTITLE: Layout Definition in Markdown\nDESCRIPTION: This snippet shows how to define a layout within a layout's readme.md file. The `LAYOUT_60_ansi` variable represents the layout, and is referenced by the keyboard's configuration to indicate its support for that specific layout.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/feature_layouts.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# 60_ansi\n\n   LAYOUT_60_ansi\n```\n\n----------------------------------------\n\nTITLE: Building Signum 3.0 Firmware with Teensy\nDESCRIPTION: This command builds the firmware for the Signum 3.0 keyboard using the Teensy microcontroller and the default keymap. It assumes that the QMK build environment is already set up correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/signum/3_0/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake signum/3_0/teensy:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Edda Firmware with QMK\nDESCRIPTION: This command flashes the default firmware to the Edda keyboard using the QMK build environment.  It requires the QMK build environment to be set up correctly and a connected Edda PCB. This command assumes the board is in a flashable state (e.g., DFU mode).\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/edda/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake edda:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Zed65-Mono Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the Zed65-Mono keyboard with LED support. It uses the `mechlovin/zed65/mono_led` keyboard definition and the `default` keymap. This command assumes that the QMK build environment is correctly set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechlovin/zed65/mono_led/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake mechlovin/zed65/mono_led:default\n```\n\n----------------------------------------\n\nTITLE: Key Override Signature Update - After\nDESCRIPTION: This code snippet demonstrates the updated key override signature format in `keymap.c`, which removes the `NULL` terminator. This is required for compatibility with the keymap introspection system.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/ChangeLog/20240825.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nconst key_override_t *key_overrides[] = {\n    &my_override_1,\n    &my_override_2,\n};\n```\n\n----------------------------------------\n\nTITLE: Building the luckycat70 keyboard firmware\nDESCRIPTION: This command builds the default firmware for the luckycat70 keyboard within the QMK environment. It compiles the source code and prepares the firmware for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mokey/luckycat70/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake mokey/luckycat70:default\n```\n\n----------------------------------------\n\nTITLE: Building Bastion65 Firmware with QMK\nDESCRIPTION: This command compiles the QMK firmware for the Bastion65 keyboard with the default keymap.  It requires a properly configured QMK build environment.  The output is a firmware file ready to be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cannonkeys/bastion65/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake cannonkeys/bastion65:default\n```\n\n----------------------------------------\n\nTITLE: CannonKeys Rekt1800 Matrix Diagram\nDESCRIPTION: This diagram represents the key matrix layout for the CannonKeys Rekt1800 keyboard. Each cell shows the row and column number for that key. It illustrates the physical wiring of the keys to the microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cannonkeys/rekt1800/matrix_diagram.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n┌───┐┌───┬───┬───┬───┐┌───┬───┬───┬───┐┌───┬───┬───┬───┐┌───┐ ┌───┬───┬───┬───┐\n│00 ││01 │02 │03 │04 ││05 │06 │07 │08 ││09 │0A │0B │0C ││0E │ │0F │0G │0H │0I │\n└───┘└───┴───┴───┴───┘└───┴───┴───┴───┘└───┴───┴───┴───┘└───┘ └───┴───┴───┴───┘\n┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┐ ┌───┬───┬───┬───┐    ┌───────┐\n│10 │11 │12 │13 │14 │15 │16 │17 │18 │19 │1A │1B │1C │1D │1E │ │1F │1G │1H │1I │    │1D     │ 2u Backspace\n├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴───┤ ├───┼───┼───┼───┤    └─┬─────┤                ┌───┐\n│20   │21 │22 │23 │24 │25 │26 │27 │28 │29 │2A │2B │2C │2E   │ │2F │2G │2H │2I │      │     │                │2I │\n├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴─────┤ ├───┼───┼───┼───┤   ┌──┴┐3E  │ ISO Enter      │   │ 2u Numpad Plus\n│30    │31 │32 │33 │34 │35 │36 │37 │38 │39 │3A │3B │3E      │ │3F │3G │3H │3I │   │3C │    │                │   │\n├────┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴────┬───┘ ├───┼───┼───┼───┤   └───┴────┘                └───┘\n│40  │41 │42 │43 │44 │45 │46 │47 │48 │49 │4A │4B │4C    │┌───┐│4F │4G │4H │4I │\n├────┼───┴┬──┴─┬─┴───┴───┴───┴───┴───┴──┬┴───┴┬──┴──┬───┘│4E │└───┼───┼───┤   │\n│50  │51  │52  │56                      │5A   │5B   │┌───┼───┼───┐│5G │5H │   │\n└────┴────┴────┴────────────────────────┴─────┴─────┘│5C │5E │5F │└───┴───┴───┘\n                                                     └───┴───┴───┘\n┌────────┐\n│40      │ 2.25u LShift\n└────────┘\n┌─────┬─────┬───────────────────────────┐\n│50   │51   │56                         │ WKL\n└─────┴─────┴───────────────────────────┘\n```\n\n----------------------------------------\n\nTITLE: Flashing the cosmo65 Firmware\nDESCRIPTION: This command flashes the default keymap to the cosmo65 keyboard. It depends on the QMK build environment and the availability of a suitable flashing tool.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cosmo65/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake cosmo65:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building mechlovin9 Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the mechlovin9/rev1 keyboard using the QMK build environment. It assumes that the QMK build environment is already set up. The output is the compiled firmware ready to be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mechlovin/mechlovin9/rev1/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake mechlovin/mechlovin9/rev1:default\n```\n\n----------------------------------------\n\nTITLE: 60% ANSI HHKB Layout Diagram\nDESCRIPTION: ASCII art diagram showing a 60% ANSI keyboard layout with an HHKB (Happy Hacking Keyboard) style bottom row, along with a split backspace and split right shift. This emulates the key arrangement found on HHKB keyboards. The diagram visualizes the specified layout.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/layouts/default/readme.md#_snippet_9\n\nLANGUAGE: text\nCODE:\n```\n┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┐\n│   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │\n├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴───┤\n│     │   │   │   │   │   │   │   │   │   │   │   │   │     │\n├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴─────┤\n│      │   │   │   │   │   │   │   │   │   │   │   │        │\n├──────┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴────┬───┤\n│        │   │   │   │   │   │   │   │   │   │   │      │   │\n└─────┬──┴┬──┴──┬┴───┴───┴───┴───┴───┴───┴──┬┴───┴┬───┬─┴───┘\n      │   │     │                           │     │   │\n      └───┴─────┴───────────────────────────┴─────┴───┘\n```\n\n----------------------------------------\n\nTITLE: Keyboard Matrix Diagram\nDESCRIPTION: This is a visual representation of the key matrix for the 4pplet Waffling60 Rev D ISO keyboard. The diagram shows how each key is connected to a row and column, which is essential for the keyboard controller to identify which key is pressed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/4pplet/waffling60/rev_d_iso/matrix_diagram.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n                                                    ┌───────┐\n                                       2u Backspace │1D     │\n                                                    └───────┘\n┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┐\n│00 │01 │02 │03 │04 │05 │06 │07 │08 │09 │0A │0B │0C │0D │1D │\n├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴───┤\n│10   │11 │12 │13 │14 │15 │16 │17 │18 │19 │1A │1B │1C │     │\n├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┐2D  │\n│20    │21 │22 │23 │24 │25 │26 │27 │28 │29 │2A │2B │2C │    │\n├────┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴───┴┬───┤\n│30  │31 │32 │33 │34 │35 │36 │37 │38 │39 │3A │3B │3C    │3D │\n├────┴┬──┴┬──┴──┬┴───┴───┴──┬┴──┬┴───┴───┴──┬┴───┴┬───┬─┴───┤\n│40   │41 │42   │44         │46 │48         │4B   │4C │4D   │\n└─────┴───┴─────┴───────────┴───┴───────────┴─────┴───┴─────┘\n┌─────┬───┬─────┬───────────────────────────┬─────┬───┬─────┐\n│40   │41 │42   │46                         │4B   │4C │4D   │ Tsangan/WKL/HHKB\n└─────┴───┴─────┴───────────────────────────┴─────┴───┴─────┘\n┌─────┬───┬───────────────────────────────────────┬───┬─────┐\n│40   │41 │46                                     │4C │4D   │ 10u Spacebar\n└─────┴───┴───────────────────────────────────────┴───┴─────┘\n```\n\n----------------------------------------\n\nTITLE: Keyboard Matrix Diagram\nDESCRIPTION: This diagram illustrates the matrix layout of the Waffling60 Rev E ANSI Hotswap keyboard. It visually maps each key to its row and column within the keyboard matrix. The diagram includes variations for different bottom row configurations, specifically 7u split spacebar and 10u spacebar layouts. Understanding this mapping is crucial for firmware development and customizing key assignments.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/4pplet/waffling60/rev_e_ansi/matrix_diagram.md#_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n                                                    ┌───────┐\n                                       2u Backspace │1D     │\n                                                    └───────┘\n┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┐\n│00 │01 │02 │03 │04 │05 │06 │07 │08 │09 │0A │0B │0C │0D │1D │\n├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴───┤      \n│10   │11 │12 │13 │14 │15 │16 │17 │18 │19 │1A │1B │1C │2C   │      \n├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴─────┤  \n│20    │21 │22 │23 │24 │25 │26 │27 │28 │29 │2A │2B │2D      │   \n├──────┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴────┬───┤ \n│30      │32 │33 │34 │35 │36 │37 │38 │39 │3A │3B │3C    │3D │   \n├────┬───┴┬──┴─┬─┴───┴───┴───┴───┴───┴───┴───┼───┴┬────┬┴───┤\n│40  │41  │42  │46                           │4B  │4C  │4D  │ Tsangan/WKL/HHKB\n└────┴────┴────┴─────────────────────────────┴────┴────┴────┘\n┌─────┬───┬─────┬───────────┬───┬───────────┬─────┬───┬─────┐\n│40   │41 │42   │44         │46 │48         │4B   │4C │4D   │ 7u split spacebar\n└─────┴───┴─────┴───────────┴───┴───────────┴─────┴───┴─────┘\n┌─────┬───┬───────────────────────────────────────┬───┬─────┐\n│40   │41 │46                                     │4C │4D   │ 10u Spacebar\n└─────┴───┴───────────────────────────────────────┴───┴─────┘\n```\n\n----------------------------------------\n\nTITLE: Flashing the Firmware to Plywrks Allaro using QMK\nDESCRIPTION: This command flashes the QMK firmware to the Plywrks Allaro keyboard, specifically the VIA keymap. It requires a configured QMK build environment and a connected keyboard in bootloader mode. The command uses the dfu-programmer or similar tool to write the compiled firmware to the keyboard's microcontroller.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/plywrks/allaro/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake plywrks/allaro:via:flash\n```\n\n----------------------------------------\n\nTITLE: Compiling QMK Firmware\nDESCRIPTION: Compiles the QMK firmware for the NCC-1701-KB v.2 keyboard with the default keymap. This command requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/themadnoodle/ncc1701kb/v2/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nqmk compile -kb themadnoodle/ncc1701kb/v2 -km default\n```\n\n----------------------------------------\n\nTITLE: Defining Pin Compatibility in rules.mk\nDESCRIPTION: This code snippet demonstrates how to declare the base pin compatibility for a keyboard in its `rules.mk` file. The `PIN_COMPATIBLE` variable is set to the appropriate compatibility interface (e.g., `elite_c`). It requires editing the keyboard's `rules.mk` file in the QMK firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/feature_converters.md#_snippet_2\n\nLANGUAGE: makefile\nCODE:\n```\nPIN_COMPATIBLE = elite_c\n```\n\n----------------------------------------\n\nTITLE: KBDfans Bounce75 Hotswap Matrix Diagram\nDESCRIPTION: This diagram illustrates the matrix layout of the KBDfans Bounce75 Hotswap keyboard, mapping each key to its respective row and column coordinates within the keyboard matrix. It is presented in an ASCII art format for visualization. There are no dependencies. The expected 'input' is the physical layout of the KBDfans Bounce75 Hotswap. The output is the row/column assignment of each key. The layout is specific to the KBDfans Bounce75 Hotswap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kbdfans/bounce/75/hotswap/matrix_diagram.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n┌───┐┌───┬───┬───┬───┐┌───┬───┬───┬───┐┌───┬───┬───┬───┐┌───┐┌───┐\n│00 ││01 │02 │03 │04 ││05 │06 │07 │08 ││09 │0A │0B │0C ││0D ││0E │\n└───┘└───┴───┴───┴───┘└───┴───┴───┴───┘└───┴───┴───┴───┘└───┘└───┘\n┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───────┐┌───┐\n│10 │11 │12 │13 │14 │15 │16 │17 │18 │19 │1A │1B │1C │1D     ││1E │\n├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─────┤├───┤\n│20   │21 │22 │23 │24 │25 │26 │27 │28 │29 │2A │2B │2C │2D   ││2E │\n├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴─────┤├───┤\n│30    │31 │32 │33 │34 │35 │36 │37 │38 │39 │3A │3B │3D      ││3E │\n├──────┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴────┬───┘└───┘\n│40      │41 │42 │43 │44 │45 │46 │47 │48 │49 │4A │4B    │┌───┐\n├────┬───┴┬──┴─┬─┴───┴───┴───┴───┴───┴──┬┴───┴┬──┴──┬───┘│4D │\n│50  │51  │52  │55                      │58   │5A   │┌───┼───┼───┐\n└────┴────┴────┴────────────────────────┴─────┴─────┘│5B │5D │5E │\n                                                     └───┴───┴───┘\n```\n\n----------------------------------------\n\nTITLE: Compile and Flash Firmware for Elongate Delta - Make\nDESCRIPTION: This command compiles the default firmware layout for the Acheron Elongate Delta keyboard PCB and immediately flashes it to the board, assuming the PCB is already in DFU (Device Firmware Upgrade) mode.  It requires `dfu-util` or a compatible flashing tool to be installed and accessible in the system's PATH.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/acheron/elongate/delta/readme.md#_snippet_1\n\nLANGUAGE: makefile\nCODE:\n```\nmake acheron/elongate/delta:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building AK84BT Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the AK84BT keyboard using the QMK build environment. It compiles the source code and generates the firmware file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/abko/ak84bt/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake abko/ak84bt:default\n```\n\n----------------------------------------\n\nTITLE: Flashing RARTLITE Firmware (Makefile)\nDESCRIPTION: This command builds and flashes the default firmware to the RARTLITE keyboard using the QMK build environment.  It requires a connected RARTLITE keyboard and a configured flashing tool.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/rart/rartlite/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake rart/rartlite:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Preonic Firmware (make)\nDESCRIPTION: This command compiles the QMK firmware for the Preonic keyboard, specifically the rev2 version, using the default keymap.  It requires a properly configured QMK build environment. The output is the compiled firmware ready to be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/preonic/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake preonic/rev2:default\n```\n\n----------------------------------------\n\nTITLE: Flashing J80 Firmware with Make\nDESCRIPTION: This command flashes the default firmware to the J80 keyboard using the make command. It requires a correctly configured QMK build environment and a connected J80 keyboard in a state that accepts firmware flashing. Success depends on the bootloader on the J80.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/j80/readme.md#_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake j80:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for DZ60RGB-ANSI V1\nDESCRIPTION: This command builds the firmware for the DZ60RGB-ANSI V1 keyboard, which uses an STM32F303 (Arm) microcontroller and requires a .bin file.  It uses the default keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/dztech/dz60rgb_ansi/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake dztech/dz60rgb_ansi/v1:default\n```\n\n----------------------------------------\n\nTITLE: Building the Drop ALT v2 Firmware\nDESCRIPTION: This command builds the default firmware for the Drop ALT v2 keyboard. It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/drop/alt/v2/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake drop/alt/v2:default\n```\n\n----------------------------------------\n\nTITLE: Building Minorca Keyboard Firmware\nDESCRIPTION: This command builds the default firmware for the Minorca keyboard using the QMK build environment.  It assumes the QMK build environment is already set up. The output will be a .hex or .bin file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/minorca/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/minorca:default\n```\n\n----------------------------------------\n\nTITLE: Updating Combo Event Handler in QMK\nDESCRIPTION: This snippet illustrates the change required in the `process_combo_event` function signature within QMK Firmware. The first argument, representing the combo index, has been updated from `uint8_t` to `uint16_t` to accommodate a larger number of combos.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/ChangeLog/20200829.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n* Old function: `void process_combo_event(uint8_t combo_index, bool pressed)`\n* New function: `void process_combo_event(uint16_t combo_index, bool pressed)`\n```\n\n----------------------------------------\n\nTITLE: Building Nasu Firmware\nDESCRIPTION: This command compiles the Nasu keyboard firmware with the default keymap using the QMK build environment. It requires the QMK build environment to be set up correctly and uses the 'make' command to initiate the compilation process.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/nasu/readme.md#_snippet_0\n\nLANGUAGE: QMK Make\nCODE:\n```\nmake nasu:default\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for Work Louder Work Keyboard\nDESCRIPTION: This command builds the default firmware for the Work Louder Work keyboard. It assumes that the QMK build environment is already set up. This command compiles the keymap located in the `work_louder/work` directory with the `default` keymap.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/work_louder/work_board/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake work_louder/work:default\n```\n\n----------------------------------------\n\nTITLE: Flashing the Ramlord WITF Firmware\nDESCRIPTION: This command flashes the built firmware onto the Ramlord WITF keyboard using the QMK build environment.  It requires the keyboard to be in bootloader mode. Execute this command within the QMK firmware directory after a successful build.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ramlord/witf/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake ramlord/witf:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing the itstleo9 Firmware\nDESCRIPTION: These commands are used to flash the compiled firmware onto the itstleo9 macropad with either a Pro Micro or RP2040 controller.  The `make` command, with the `:flash` target, initiates the flashing process.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/itstleo9/readme.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/itstleo9/promicro:default:flash\n```\n\nLANGUAGE: Makefile\nCODE:\n```\nmake handwired/itstleo9/rp2040:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building dumbpad v1x_right with QMK\nDESCRIPTION: This command builds the default keymap for the dumbpad v1x_right keyboard using the QMK firmware. It requires a properly configured QMK build environment. The output will be a firmware file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/dumbpad/v1x_right/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake dumbpad/v1x_right:default\n```\n\n----------------------------------------\n\nTITLE: Building Firmware\nDESCRIPTION: This command builds the firmware for the meck_tkl keyboard with the default keymap. It uses the QMK build environment to compile the firmware and create a .hex file that can be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/meck_tkl/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake handwired/meck_tkl:default\n```\n\n----------------------------------------\n\nTITLE: Building S7 Elephant Firmware (QMK)\nDESCRIPTION: Builds the firmware for the S7 Elephant keyboard using the QMK build environment.  It specifies the keyboard layout and revision to build. Make sure QMK build environment is set up prior to running.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/jacky_studio/s7_elephant/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake jacky_studio/s7_elephant/rev1:default # 2018 run\nmake jacky_studio/s7_elephant/rev2:default # 2019 run\n```\n\n----------------------------------------\n\nTITLE: Building Pegasus Keyboard Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Pegasus keyboard using the QMK build environment. It assumes that the build environment has been properly set up according to the QMK documentation.  No specific inputs or outputs are directly generated by this line; it invokes the QMK build system.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/pegasus/readme.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmake pegasus:default\n```\n\n----------------------------------------\n\nTITLE: Enum Examples for QMK Documentation\nDESCRIPTION: These examples illustrate the naming conventions for enums used in QMK documentation. They standardize enum names like `my_layers` and `my_keycodes` for consistency across the documentation.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/contributing.md#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nenum my_layers {\n  _FIRST_LAYER,\n  _SECOND_LAYER\n};\n\nenum my_keycodes {\n  FIRST_LAYER = SAFE_RANGE,\n  SECOND_LAYER\n};\n```\n\n----------------------------------------\n\nTITLE: Building EVE Meteor Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the EVE Meteor keyboard using the QMK build environment. It requires a properly configured QMK environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/eve/meteor/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake eve/meteor:default\n```\n\n----------------------------------------\n\nTITLE: Building the HHKB Lite 2 firmware with QMK\nDESCRIPTION: This command builds the default firmware for the HHKB Lite 2 keyboard using the QMK build environment. It assumes that the QMK build environment has already been set up. No specific input is required; the output is a compiled firmware ready for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/hhkb_lite_2/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake hhkb_lite_2:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Dactyl Minidox Keyboard Firmware\nDESCRIPTION: This command flashes the built firmware to the Dactyl Minidox keyboard using the default keymap. It requires a properly configured QMK build environment and a connected keyboard in bootloader mode.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/dactyl_minidox/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake handwired/dactyl_minidox:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Think6.5 Solder firmware using make\nDESCRIPTION: This command builds the default keymap for the Think6.5 solder version keyboard using the QMK build environment. It leverages the `make` command to compile the firmware and generate a .hex file ready to be flashed to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/gray_studio/think65/solder/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake gray_studio/think65/solder:default\n```\n\n----------------------------------------\n\nTITLE: Building Cornelius Keyboard Firmware - QMK Makefile\nDESCRIPTION: This command builds the default keymap for the Cornelius keyboard using the QMK build environment. It compiles the firmware and prepares it for flashing to the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/foostan/cornelius/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake foostan/cornelius:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Paddino02 Firmware\nDESCRIPTION: Flashes the compiled QMK firmware onto the Paddino02 macropad. The `flash` target of the `make` command uploads the firmware to the device. Different targets specify the PCB revision (rev1, rev2) and handedness (right, left).\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/pimentoso/paddino02/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake pimentoso/paddino02/rev2/right:default:flash\n```\n\nLANGUAGE: Shell\nCODE:\n```\nmake pimentoso/paddino02/rev2/left:default:flash\n```\n\nLANGUAGE: Shell\nCODE:\n```\nmake pimentoso/paddino02/rev1:default:flash\n```\n\n----------------------------------------\n\nTITLE: Defining Mousekey Interval\nDESCRIPTION: Defines the interval for mouse key movements, affecting how often mouse cursor updates occur. This value influences mouse cursor speed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/config_options.md#_snippet_81\n\nLANGUAGE: C\nCODE:\n```\n#define MOUSEKEY_INTERVAL 20\n```\n\n----------------------------------------\n\nTITLE: Building ALETH42 Keyboard Firmware\nDESCRIPTION: This snippet shows the command to build the default keymap for the ALETH42 keyboard using the QMK build environment. It assumes the user has already set up their QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/25keys/aleth42/rev1/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake aleth42:default\n```\n\n----------------------------------------\n\nTITLE: Building Retro75 Keyboard Firmware - Makefile\nDESCRIPTION: This command builds the default keymap for the Retro75 keyboard using the QMK firmware build system.  It requires a properly configured QMK build environment. The output will be a firmware file suitable for flashing onto the Retro75 keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/retro_75/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake retro_75:default\n```\n\n----------------------------------------\n\nTITLE: Flashing Bubble75 Firmware (QMK)\nDESCRIPTION: This command builds and flashes the default firmware for the Bubble75 Hotswap keyboard using the QMK build environment. It requires the build environment to be properly set up and the keyboard to be in a flashable state (e.g., bootloader mode).\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/bubble75/hotswap/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake bubble75/hotswap:default:flash\n```\n\n----------------------------------------\n\nTITLE: Keyboard Matrix Diagram\nDESCRIPTION: This is a visual representation of the keyboard matrix layout, showing the row and column assignments for each key. It is used for designing and understanding the physical key arrangement and how the keyboard controller scans the keys. The diagram uses ASCII characters to represent the keys and their positions within the matrix.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/kakunpc/rabbit_capture_plan/matrix_diagram.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n   ┌───┬───┐ ┌───┬───┬───┬───┬───┐          ┌───┬───┬───┬───┐   ┌───┬───┬───┬───┐\n   │00 │01 │ │02 │03 │04 │05 │06 │          │50 │51 │52 │53 │   │54 │55 │56 │57 │\n  ┌┴───┴┬──┴┐└─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┐      ┌─┴─┬─┴─┬─┴─┬─┴─┬─┘ ┌─┴─┬─┴─┬─┴─┬───┤            ┌─────┐\n  │10   │11 │  │12 │13 │14 │15 │16 │      │60 │61 │62 │63 │   │64 │65 │66 │67   │            │67   │\n ┌┴─────┼───┤  └┬──┴┬──┴┬──┴┬──┴┬──┴┐     └┬──┴┬──┴┬──┴┬──┴┐  └─┬─┴─┬─┴─┬─┴─────┴┐        ┌──┴┐    │ ISO Enter\n │20    │21 │   │22 │23 │24 │25 │26 │      │70 │71 │72 │73 │    │74 │75 │76      │        │76 │    │\n┌┴──────┴┬──┴┐  └─┬─┴─┬─┴─┬─┴─┬─┴─┬─┘    ┌─┴─┬─┴─┬─┴─┬─┴─┬─┘  ┌─┴─┬─┴─┬─┴─┬───┬──┘        └───┴────┘\n│30      │31 │    │32 │33 │34 │35 │      │80 │81 │82 │83 │    │84 │85 │86 │87 │ ┌───┐      ┌──────┐\n└┬────┬──┴─┬─┘    └─┬─┴─┬─┴───┴─┬─┴─┐    └─┬─┴───┴───┴┬──┴┐   └───┴───┴───┴───┘ │90 │      │86    │ 1.75u Right Shift\n │40  │41  │        │42 │43     │44 │      │91        │92 │                 ┌───┼───┼───┐  └──────┘\n └────┴────┘        └───┴───────┴───┘      └──────────┴───┘                 │93 │94 │95 │\n                                                                            └───┴───┴───┘\n```\n\n----------------------------------------\n\nTITLE: Flashing Megalodon DOIO 30% default firmware - QMK\nDESCRIPTION: This command compiles and flashes the default keymap for the Megalodon DOIO 30% keyboard. It assumes the keyboard is in bootloader mode and that the QMK build environment is set up correctly.  The keyboard will be flashed with the compiled firmware.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/doio/kb30/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake doio/kb30:default:flash\n```\n\n----------------------------------------\n\nTITLE: Building Dactyl Tracer Firmware\nDESCRIPTION: This command builds the default firmware for the Dactyl Tracer keyboard using the QMK build environment. It compiles the keyboard layout and generates the firmware file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/dactyl_tracer/readme.md#_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake handwired/dactyl_tracer:default\n```\n\n----------------------------------------\n\nTITLE: Compiling Firmware for NoodlePad v.1 with QMK\nDESCRIPTION: This command compiles the QMK firmware for the NoodlePad v.1 keyboard using the default keymap.  It requires a correctly configured QMK build environment. The output is the compiled firmware ready for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/themadnoodle/noodlepad/v1/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nqmk compile -kb themadnoodle/noodlepad/v1 -km default\n```\n\n----------------------------------------\n\nTITLE: Building Herringbone Firmware with Make\nDESCRIPTION: This command builds the default firmware for the Herringbone keyboard using the QMK build environment. It utilizes the `make` command with specific target parameters defining the keyboard (rmi_kb/herringbone/v1) and keymap (default). The command assumes that the QMK build environment is correctly set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/rmi_kb/herringbone/v1/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake rmi_kb/herringbone/v1:default\n```\n\n----------------------------------------\n\nTITLE: Building Firmware for ZOS65S\nDESCRIPTION: This command builds the default firmware for the ZOS65S keyboard using the QMK build environment. It assumes that the QMK build environment has already been set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/zos/65s/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake zos/65s:default\n```\n\n----------------------------------------\n\nTITLE: Building Ferris 0.2 Bling Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Ferris 0.2 Bling keyboard using the QMK build environment. It assumes that the QMK build environment has been properly set up. The resulting firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/ferris/0_2/bling/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake ferris/0_2/bling:default\n```\n\n----------------------------------------\n\nTITLE: Building Mixi Firmware with QMK\nDESCRIPTION: This command builds the default firmware for the Mixi macropad using the QMK build environment.  It assumes the QMK build environment is properly configured.  The output is a firmware file that can be flashed to the Mixi's Arduino Pro Micro.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mixi/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake mixi:default\n```\n\n----------------------------------------\n\nTITLE: Building Piantor Firmware with Make\nDESCRIPTION: This command builds the default keymap for the Piantor keyboard using the QMK build environment. It assumes the QMK build environment has been set up correctly.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/beekeeb/piantor/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake beekeeb/piantor:default\n```\n\n----------------------------------------\n\nTITLE: Building gregandcin/teaqueen Keyboard Firmware\nDESCRIPTION: This command builds the default keymap for the gregandcin/teaqueen keyboard.  It requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/gregandcin/teaqueen/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake gregandcin/teaqueen:default\n```\n\n----------------------------------------\n\nTITLE: Flashing firmware for P3D Synapse keyboard\nDESCRIPTION: This command builds and flashes the default firmware for the P3D Synapse keyboard. It requires a properly configured QMK build environment and a connected keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/p3d/synapse/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake p3d/synapse:default:flash\n```\n\n----------------------------------------\n\nTITLE: Buff75 Keyboard Matrix Diagram\nDESCRIPTION: This is a visual representation of the key matrix for the Buff75 keyboard.  Each key's location in the diagram corresponds to its row and column within the matrix. This diagram is used to understand the physical wiring and how the firmware needs to scan the matrix to detect key presses.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/herevoland/buff75/matrix_diagram.md#_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n            ┌───┐ ┌───┬───┬───┬───┐ ┌───┬───┬───┬───┐ ┌───┬───┬───┬───┐ ┌───┐\n            │00 │ │01 │02 │03 │04 │ │06 │07 │08 │09 │ │0A │0B │0C │0D │ │0E │\n            └───┘ └───┴───┴───┴───┘ └───┴───┴───┴───┘ └───┴───┴───┴───┘ └───┘\n            ┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───────┬───┐\n            │10 │11 │12 │13 │14 │15 │16 │17 │18 │19 │1A │1B │1C │1D     │1E │\n            ├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴────┬──┼───┤\n            │20   │21 │22 │23 │24 │25 │26 │27 │28 │29 │2A │2B │2C    │2D│2E │\n            ├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬─────┴──┼───┤\n            │30    │31 │32 │33 │34 │35 │36 │37 │38 │39 │3A │3B │3D      │3E │\n            ├──────┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴────┬───┼───┤\n            │40      │42 │43 │44 │45 │46 │47 │48 │49 │4A │4B │4C    │4D │4E │\n            ├────┬───┴┬──┴─┬─┴───┴───┴───┴───┴───┴──┬┴──┬┴───┴┬─┬───┼───┼───┤\n            │50  │51  │52  │56                      │5A │ 5B  │ │5C │5D |5E |\n            └────┴────┴────┴────────────────────────┴───┴─────┘ └───┴───┘───┘\n```\n\n----------------------------------------\n\nTITLE: Navigating to qmk_firmware directory\nDESCRIPTION: This command is used to navigate to the top directory of the qmk_firmware project. This is a prerequisite for compiling the firmware for the Zinc keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/25keys/zinc/keymaps/default/readme_jp.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\n$ cd qmk_firmware\n```\n\n----------------------------------------\n\nTITLE: Flashing QMK Firmware to EnvKB Delirium\nDESCRIPTION: This command builds and flashes the QMK firmware to the EnvKB Delirium RGB keyboard with the default keymap. It requires the QMK build environment to be set up and a connected keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/enviousdesign/delirium/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake enviousdesign/tkl/rgb:default:flash\n```\n\n----------------------------------------\n\nTITLE: Mass compiling QMK\nDESCRIPTION: Compiles the entire QMK Firmware using the `qmk mass-compile` command with 4 parallel jobs.  Assumes `$QMK_FIRMWARE` is set. The `-j 4` flag specifies the number of parallel compilation processes.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/chibios_upgrade_instructions.md#_snippet_12\n\nLANGUAGE: Shell\nCODE:\n```\ncd $QMK_FIRMWARE\n```\n\nLANGUAGE: Shell\nCODE:\n```\nqmk mass-compile -j 4\n```\n\n----------------------------------------\n\nTITLE: Allison protoTypist Key Matrix Diagram\nDESCRIPTION: This diagram visually represents the key matrix layout of the Allison protoTypist keyboard. It shows the row and column positions for each key, enabling precise key mapping and firmware configuration. It uses ASCII characters to display the layout.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/prototypist/allison/matrix_diagram.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n     ┌───┐┌───┬───┬───┬───┐┌───┬───┬───┬───┐┌───┬───┬───┬───┐┌───┐\n     │00 ││01 │02 │03 │04 ││05 │06 │07 │08 ││09 │0A │0B │0C ││0D │\n     └───┘└───┴───┴───┴───┘└───┴───┴───┴───┘└───┴───┴───┴───┘└───┘\n┌───┐┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┐    ┌───────┐\n│10 ││11 │12 │13 │14 │15 │16 │17 │18 │19 │1A │1B │1C │1D │1E │0E │    │0E     │ 2u Backspace\n├───┤├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴───┤    └─┬─────┤\n│20 ││21   │22 │23 │24 │25 │26 │27 │28 │29 │2A │2B │2C │2D │2E   │      │     │\n├───┤├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴─────┤   ┌──┴┐3E  │ ISO Enter\n│30 ││31    │32 │33 │34 │35 │36 │37 │38 │39 │3A │3B │3C │3E      │   │3D │    │\n├───┤├────┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴────┬───┤   └───┴────┘\n│40 ││41  │42 │43 │44 │45 │46 │47 │48 │49 │4A │4B │4C │4D    │4E │\n├───┤├────┴┬──┴┬──┴──┬┴───┴───┴───┴───┴───┴───┴──┬┴───┴┬───┬─┴───┤\n│50 ││51   │52 │53   │58                         │5C   │5D │5E   │\n└───┘└─────┴───┴─────┴───────────────────────────┴─────┴───┴─────┘\n     ┌────────┐                                       ┌──────────┐\n     │41      │ 2.25u LShift             2.75u RShift │4D        │\n     └────────┘                                       └──────────┘\n     ┌─────┬───┬─────┬───────────────────────────┬─────┬───┬─────┐\n     │51   │   │53   │58                         │5C   │   │5E   │ WKL\n     └─────┘   └─────┴───────────────────────────┴─────┘   └─────┘\n```\n\n----------------------------------------\n\nTITLE: Defining ortho_5x10 Keyboard Layout\nDESCRIPTION: This line defines a keyboard layout named 'ortho_5x10'.  It's used within the QMK firmware to specify how keys are arranged on the keyboard. This layout definition will be referenced later when configuring keymaps.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/layouts/community/ortho_5x10/readme.md#_snippet_0\n\nLANGUAGE: QMK Layout Definition\nCODE:\n```\nLAYOUT_ortho_5x10\n```\n\n----------------------------------------\n\nTITLE: Flashing Serpent65 Firmware with QMK\nDESCRIPTION: This command flashes the default firmware onto the Serpent65 keyboard using the QMK build environment. It requires a properly configured QMK build environment and a connected keyboard in flashing mode. The flashing process may vary depending on the bootloader.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/caffeinated/serpent65/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake caffeinated/serpent65:default:flash\n```\n\n----------------------------------------\n\nTITLE: Tap Dance State Enum Definition in QMK\nDESCRIPTION: This code defines an enum `td_state_t` to represent the different states of a tap dance, including single tap, single hold, double tap, and double hold. This is used in the quad function example.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/tap_dance.md#_snippet_11\n\nLANGUAGE: c\nCODE:\n```\ntypedef enum {\n    TD_NONE,\n    TD_UNKNOWN,\n    TD_SINGLE_TAP,\n    TD_SINGLE_HOLD,\n    TD_DOUBLE_TAP,\n    TD_DOUBLE_HOLD,\n    TD_DOUBLE_SINGLE_TAP, // Send two single taps\n    TD_TRIPLE_TAP,\n    TD_TRIPLE_HOLD\n} td_state_t;\n```\n\n----------------------------------------\n\nTITLE: Turning Off the Display\nDESCRIPTION: Manually turns off the ST7565 display if it is currently on. If the display is already off, it does nothing. Returns true if the screen was off or turns off. Calls the weak function `st7565_off_user` when turning the screen off.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/st7565.md#_snippet_26\n\nLANGUAGE: C\nCODE:\n```\n// Can be used to manually turn off the screen if it is on\n// Returns true if the screen was off or turns off\nbool st7565_off(void);\n```\n\n----------------------------------------\n\nTITLE: Tagging ChibiOS-Contrib develop version\nDESCRIPTION: Tags a ChibiOS-Contrib develop version. `develop_YYYY_qN` should be replaced with the actual develop tag. The tag is created locally and then pushed to the `origin` remote.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/chibios_upgrade_instructions.md#_snippet_9\n\nLANGUAGE: Shell\nCODE:\n```\ngit tag -a develop_YYYY_qN -m develop_YYYY_qN chibios-20.3.x\n```\n\nLANGUAGE: Shell\nCODE:\n```\ngit push origin develop_YYYY_qN\n```\n\n----------------------------------------\n\nTITLE: Building Helpo Firmware\nDESCRIPTION: This command compiles the QMK firmware for the Helpo macropad with the default keymap.  It assumes that the QMK build environment has been correctly set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/axolstudio/helpo/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake axolstudio/helpo:default\n```\n\n----------------------------------------\n\nTITLE: Flashing QMK Firmware to Plaid-Pad (default keymap)\nDESCRIPTION: This command flashes the compiled QMK firmware to the Plaid-Pad keyboard using the default keymap. It requires a properly set up QMK build environment and a compatible flashing tool. The keyboard must be in bootloader mode for flashing to succeed.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/keycapsss/plaid_pad/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake keycapsss/plaid_pad:default:flash\n// or\nqmk flash -kb keycapsss/plaid_pad -km default\n```\n\n----------------------------------------\n\nTITLE: Building QMK Firmware for Mehkee96 Keyboard\nDESCRIPTION: This command builds the default keymap for the Mehkee96 keyboard. It compiles the QMK firmware with the specified keymap configuration.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/mehkee96/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake mehkee96:default\n```\n\n----------------------------------------\n\nTITLE: Building Kodachi50 Firmware with QMK\nDESCRIPTION: This snippet shows the command to build the default firmware for the Kodachi50 keyboard using the QMK build environment. It assumes the QMK build environment is already set up. This command should be executed from the QMK firmware root directory.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wsk/kodachi50/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake wsk/kodachi50:default\n```\n\n----------------------------------------\n\nTITLE: Default Argument Values Example (Bad) - Python\nDESCRIPTION: Demonstrates incorrect usage of a mutable object as a default argument value. This is discouraged due to the changes persisting between calls.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/coding_conventions_python.md#_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\ndef my_func(foo={}):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Building the Tomak Keyboard Firmware (QMK)\nDESCRIPTION: This command builds the default firmware for the Tomak keyboard using the QMK build environment. It assumes the QMK build environment has already been set up.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/era/sirind/tomak/readme.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake era/sirind/tomak:default\n```\n\n----------------------------------------\n\nTITLE: Building the Unicorne Keyboard Firmware (QMK)\nDESCRIPTION: This command builds the default keymap for the Unicorne keyboard using the QMK firmware build system.  It compiles the source code and generates a firmware file suitable for flashing onto the keyboard. This command requires a properly configured QMK build environment.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/boardsource/unicorne/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake boardsource/unicorne:default\n```\n\n----------------------------------------\n\nTITLE: Building Herringbone Pro Firmware with QMK\nDESCRIPTION: This command compiles the QMK firmware for the Herringbone Pro keyboard with the default keymap. It utilizes the 'make' command within the QMK build environment. Ensure the QMK build environment is set up correctly before executing this command.  The compiled firmware can then be flashed onto the keyboard.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/rmi_kb/herringbone/pro/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake rmi_kb/herringbone/pro:default\n```\n\n----------------------------------------\n\nTITLE: Defining Keyboard Layout: LAYOUT_60_ansi_arrow_split_bs\nDESCRIPTION: This snippet defines a keyboard layout macro named LAYOUT_60_ansi_arrow_split_bs. This macro likely represents a pre-configured key arrangement for a 60% ANSI keyboard with arrow keys and a split backspace. It is intended for use in QMK firmware to map physical keys to logical functions.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/layouts/default/60_ansi_arrow_split_bs/readme.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nLAYOUT_60_ansi_arrow_split_bs\n```\n\n----------------------------------------\n\nTITLE: Flashing Keyboard Firmware\nDESCRIPTION: This command builds and flashes the firmware to the Bakeneko65 ISO Hotswap keyboard using the default keymap.  It requires the QMK build environment to be configured and the keyboard to be connected.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cannonkeys/bakeneko65_iso_hs/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake cannonkeys/bakeneko65_iso_hs:default:flash\n```\n\n----------------------------------------\n\nTITLE: Flashing Speedo v3 Firmware with QMK\nDESCRIPTION: This command compiles and flashes the default keymap for the Speedo v3 keyboard using the QMK build environment. It uses the 'make' command with the specified keyboard, keymap target, and the 'flash' target. This assumes the QMK environment is correctly configured for flashing.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/cozykeys/speedo/readme.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nmake cozykeys/speedo/v3:default:flash\n```\n\n----------------------------------------\n\nTITLE: Cloning QMK Repository with Git\nDESCRIPTION: Clones the QMK Firmware repository from GitHub, including all submodules. The `--recurse-submodules` flag ensures that all necessary submodules are also downloaded. Then changes the directory to the cloned repo.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/getting_started_docker.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone --recurse-submodules https://github.com/qmk/qmk_firmware.git\ncd qmk_firmware\n```\n\n----------------------------------------\n\nTITLE: Extended Copyright Header Example in C\nDESCRIPTION: This code demonstrates how to extend a copyright header in a C file within the QMK firmware if significant modifications have been made to someone else's code.  It includes both the original author's information and the modifier's.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/hardware_keyboard_guidelines.md#_snippet_7\n\nLANGUAGE: C\nCODE:\n```\nCopyright 2017 Their Name <original_author@example.com> Your Name <you@example.com>\n```\n\n----------------------------------------\n\nTITLE: Enabling ILI9163 Driver in rules.mk (Make)\nDESCRIPTION: This snippet demonstrates how to enable the ILI9163 display driver for Quantum Painter by adding the driver to the `QUANTUM_PAINTER_DRIVERS` variable in the `rules.mk` file. This step is necessary to include the driver in the build process. Dependencies include Quantum Painter being enabled.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/quantum_painter.md#_snippet_7\n\nLANGUAGE: make\nCODE:\n```\nQUANTUM_PAINTER_ENABLE = yes\nQUANTUM_PAINTER_DRIVERS += ili9163_spi\n```\n\n----------------------------------------\n\nTITLE: Defining DIP Switch Pins in config.h (Matrix)\nDESCRIPTION: This snippet shows an alternative method of defining DIP switch connections by connecting them to unused intersections of the key matrix. `DIP_SWITCH_MATRIX_GRID` defines the row and column pairs for each DIP switch.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/dip_switch.md#_snippet_2\n\nLANGUAGE: C\nCODE:\n```\n// Connect each switch in the DIP switch to an unused intersections in the key matrix.\n#define DIP_SWITCH_MATRIX_GRID { {0,6}, {1,6}, {2,6} } // List of row and col pairs\n```\n\n----------------------------------------\n\nTITLE: Compiling tkk keyboard with QMK\nDESCRIPTION: This command compiles the default keymap for the 'tkk' keyboard using QMK. It assumes that the QMK build environment is already set up. The command will generate the firmware file.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/handwired/tkk/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake handwired/tkk:default\n```\n\n----------------------------------------\n\nTITLE: WT75-A Keyboard Matrix Diagram\nDESCRIPTION: This diagram visually represents the key matrix layout for the wilba.tech WT75-A keyboard. Each key is labeled with a hexadecimal code corresponding to its row and column in the matrix. This matrix is essential for firmware configuration.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/wilba_tech/wt75_a/matrix_diagram.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n                                                    ┌───────┐\n                                       2u Backspace │1D     │\n                                                    └───────┘\n┌───┐ ┌───┬───┬───┬───┐┌───┬───┬───┬───┐┌───┬───┬───┬───┐   ┌───┐\n│00 │ │01 │02 │03 │04 ││05 │06 │07 │08 ││09 │0A │0B │0C │   │0E │\n└───┘ └───┴───┴───┴───┘└───┴───┴───┴───┘└───┴───┴───┴───┘   └───┘\n┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┐\n│10 │11 │12 │13 │14 │15 │16 │17 │18 │19 │1A │1B │1C │1D │3D │1E │\n├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴───┼───┤\n│20   │21 │22 │23 │24 │25 │26 │27 │28 │29 │2A │2B │2C │2D   │2E │\n├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴─────┼───┤\n│30    │31 │32 │33 │34 │35 │36 │37 │38 │39 │3A │3B │3C      │3E │\n├──────┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴────┬───┼───┤\n│40      │42 │43 │44 │45 │46 │47 │48 │49 │4A │4B │4C    │4D │4E │\n├────┬───┴┬──┴─┬─┴───┴───┴───┴───┴───┴──┬┴───┼───┴┬─┬───┼───┼───┤\n│50  │51  │52  │56                      │5A  │5B  │ │5C │5D │5E │\n└────┴────┴────┴────────────────────────┴────┴────┘ └───┴───┴───┘\n┌─────┬───┬─────┬───────────────────────────┬─────┐\n│50   │51 │52   │56                         │5B   │ Blocker Tsangan\n└─────┴───┴─────┴───────────────────────────┴─────┘\n┌─────┬───┬─────┬───────────────────────┬─────┬───┐\n│50   │51 │52   │56                     │5A   │5B │\n└─────┴───┴─────┴───────────────────────┴─────┴───┘\n```\n\n----------------------------------------\n\nTITLE: ST7565 Task User Override\nDESCRIPTION: A weak function that can be overridden by the user. It's called at the start of `st7565_task`. This allows the user to perform custom actions or logic within the main display task.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/features/st7565.md#_snippet_30\n\nLANGUAGE: C\nCODE:\n```\n// Called at the start of st7565_task, weak function overridable by the user\nvoid st7565_task_user(void);\n```\n\n----------------------------------------\n\nTITLE: Ratio65 Solder Rev A Matrix Diagram\nDESCRIPTION: This diagram visually represents the key matrix for the Ratio65 Solder Rev A keyboard. It maps each key to a specific row and column, essential for firmware configuration. It also illustrates layout options such as 2u Backspace, ISO Enter, 2.25u LShift, and Tsangan blocker.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/rationalist/ratio65_solder/rev_a/matrix_diagram.md#_snippet_0\n\nLANGUAGE: None\nCODE:\n```\n                                                    ┌───────┐\n                                       2u Backspace │07     │\n                                                    └───────┘\n┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┐\n│00 │10 │01 │11 │02 │12 │03 │13 │04 │14 │05 │15 │06 │16 │07 │17 │\n├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴───┼───┤      ┌─────┐\n│20   │21 │31 │22 │32 │23 │33 │24 │34 │25 │35 │26 │36 │27   │37 │      │     │\n├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴─────┼───┤   ┌──┴┐47  │\n│40    │41 │51 │42 │52 │43 │53 │44 │54 │45 │55 │46 │47      │57 │   │56 │    │\n├────┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴────┬───┼───┤   └───┴────┘\n│60  │70 │61 │71 │62 │72 │63 │73 │64 │74 │65 │75 │66    │67 │77 │    ISO Enter\n├────┼───┴┬──┴─┬─┴───┴───┴───┴───┴───┴──┬┴───┼───┴┬─┬───┼───┼───┤\n│80  │81  │91  │83                      │94  │95  │ │96 │87 │97 │\n└────┴────┴────┴────────────────────────┴────┴────┘ └───┴───┴───┘\n┌────────┐\n│60      │ 2.25u LShift\n└────────┘\n┌─────┬───┬─────┬───────────────────────────┬─────┐\n│80   │81 │91   │83                         │95   │ Blocker Tsangan\n└─────┴───┴─────┴───────────────────────────┴─────┘\n```\n\n----------------------------------------\n\nTITLE: Mapping LEDs in <keyboardname>.c (RGB Driver)\nDESCRIPTION: This snippet demonstrates how to map LEDs to specific driver outputs in the `<keyboardname>.c` file for the RGB driver. The `g_is31fl3737_leds` array is defined as a constant array of `is31fl3737_led_t` structs, mapping each LED index to the driver index and PWM register addresses for the red, green, and blue channels.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/docs/drivers/is31fl3737.md#_snippet_4\n\nLANGUAGE: c\nCODE:\n```\nconst is31fl3737_led_t PROGMEM g_is31fl3737_leds[IS31FL3737_LED_COUNT] = {\n/* Driver\n *   |  R         G         B */\n    {0, SW1_CS1,  SW1_CS2,  SW1_CS3},\n    // etc...\n};\n```\n\n----------------------------------------\n\nTITLE: Converting JSON Keymap to C Keymap using QMK CLI\nDESCRIPTION: This command converts a keymap.json file to a keymap.c file using the QMK command-line interface.  It utilizes the `qmk json2c` utility and specifies the input and output files.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/splitkb/aurora/sofle_v2/keymaps/default/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nqmk json2c -o keymap.c keymap.json\n```\n\n----------------------------------------\n\nTITLE: Flashing QMK Firmware\nDESCRIPTION: This command builds and flashes the QMK firmware for the Model-B rev0 keyboard with the default keymap to the keyboard. It depends on a configured QMK build environment and a connected keyboard in a flashable state.\nSOURCE: https://github.com/qmk/qmk_firmware/blob/master/keyboards/trojan_pinata/model_b/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake trojan_pinata/model-b/rev0:default:flash\n```"
  }
]