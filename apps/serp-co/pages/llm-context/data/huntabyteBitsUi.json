[
  {
    "owner": "huntabyte",
    "repo": "bits-ui",
    "content": "TITLE: Combobox Value Two-Way Binding (Svelte/TS)\nDESCRIPTION: Demonstrates using two-way binding with `bind:value` to synchronize the Combobox's value with a local Svelte state variable.  It initializes `myValue` with `$state('')`, and binds it to the `Combobox.Root`. Clicking the button updates `myValue`, automatically updating the Combobox value.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/combobox.md#_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Combobox } from \"bits-ui\";\n\tlet myValue = $state(\"\");\n</script>\n\n<button onclick={() => (myValue = \"A\")}> Select A </button>\n\n<Combobox.Root type=\"single\" bind:value={myValue}>\n\t<!-- ... -->\n</Combobox.Root>\n```\n\n----------------------------------------\n\nTITLE: Using Bits-UI Command in Svelte\nDESCRIPTION: This snippet demonstrates how to use the `Command` component from the `bits-ui` library in a Svelte application. It includes importing the `Command` component, binding to the `Command.Root` component, and creating a function `jumpToLastItem` to update the selected index. It also shows how to use `svelte:window` to listen for keyboard events and trigger the function.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/command.md#_snippet_14\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Command } from \"bits-ui\";\n\n\tlet command: typeof Command.Root;\n\n\tfunction jumpToLastItem() {\n\t\tif (!command) return;\n\t\tconst items = command.getValidItems();\n\t\tif (!items.length) return;\n\t\tcommand.updateSelectedToIndex(items.length - 1);\n\t}\n</script>\n\n<svelte:window\n\tonkeydown={(e) => {\n\t\tif (e.key === \"o\") {\n\t\t\tjumpToLastItem();\n\t\t}\n\t}}\n/>\n<Command.Root bind:this={command}>\n\t<!-- Command content -->\n</Command.Root>\n```\n\n----------------------------------------\n\nTITLE: Reusable MySelect Component\nDESCRIPTION: Demonstrates how to create a reusable `MySelect` component that wraps the primitives of the `Select` component for easier use.  This example includes type definitions for props and demonstrates binding the value, handling placeholder text, and rendering a list of options.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/select.md#_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Select, type WithoutChildren } from \"bits-ui\";\n\n\ttype Props = WithoutChildren<Select.RootProps> & {\n\t\tplaceholder?: string;\n\t\titems: { value: string; label: string; disabled?: boolean }[];\n\t\tcontentProps?: WithoutChildren<Select.ContentProps>;\n\t\t// any other specific component props if needed\n\t};\n\n\tlet { value = $bindable(), items, contentProps, placeholder, ...restProps }: Props = $props();\n\n\tconst selectedLabel = $derived(items.find((item) => item.value === value)?.label);\n</script>\n\n<!--\nTypeScript Discriminated Unions + destructing (required for \"bindable\") do not\nget along, so we shut typescript up by casting `value` to `never`, however,\nfrom the perspective of the consumer of this component, it will be typed appropriately.\n-->\n<Select.Root bind:value={value as never} {...restProps}>\n\t<Select.Trigger>\n\t\t{selectedLabel ? selectedLabel : placeholder}\n\t</Select.Trigger>\n\t<Select.Portal>\n\t\t<Select.Content {...contentProps}>\n\t\t\t<Select.ScrollUpButton>up</Select.ScrollUpButton>\n\t\t\t<Select.Viewport>\n\t\t\t\t{#each items as { value, label, disabled } (value)}\n\t\t\t\t\t<Select.Item {value} {label} {disabled}>\n\t\t\t\t\t\t{#snippet children({ selected })}\n\t\t\t\t\t\t\t{selected ? \"✅\" : \"\"}\n\t\t\t\t\t\t\t{label}\n\t\t\t\t\t\t{/snippet}\n\t\t\t\t\t</Select.Item>\n\t\t\t\t{/each}\n\t\t\t</Select.Viewport>\n\t\t\t<Select.ScrollDownButton>down</Select.ScrollDownButton>\n\t\t</Select.Content>\n\t</Select.Portal>\n</Select.Root>\n```\n\n----------------------------------------\n\nTITLE: Combobox Value Fully Controlled (Svelte/TS)\nDESCRIPTION: Illustrates how to fully control the Combobox's value state using function bindings. This gives precise control over how the value is read and written. `getValue` and `setValue` functions act as intermediaries between the Combobox and the local state `myValue`. The bind:value prop is used with the functions for the getter and setter.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/combobox.md#_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Combobox } from \"bits-ui\";\n\tlet myValue = $state(\"\");\n\n\tfunction getValue() {\n\t\treturn myValue;\n\t}\n\n\tfunction setValue(newValue: string) {\n\t\tmyValue = newValue;\n\t}\n</script>\n\n<Combobox.Root type=\"single\" bind:value={getValue, setValue}>\n\t<!-- ... -->\n</Combobox.Root>\n```\n\n----------------------------------------\n\nTITLE: Two-Way Binding with PinInput (Svelte)\nDESCRIPTION: This snippet shows how to use two-way binding with the PinInput component to manage its value.  It imports the PinInput component and declares a reactive state variable `myValue` initialized to an empty string. A button is included to programmatically set the value.  The PinInput.Root is bound to `myValue` using `bind:value`.  This provides automatic state synchronization.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/pin-input.md#_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { PinInput } from \"bits-ui\";\n\tlet myValue = $state(\"\");\n</script>\n\n<button onclick={() => (myValue = \"123456\")}> Set value to 123456 </button>\n\n<PinInput.Root bind:value={myValue}>\n\t<!-- -->\n</PinInput.Root>\n```\n\n----------------------------------------\n\nTITLE: Reusable Radio Group Component - Svelte\nDESCRIPTION: Demonstrates creating a reusable `MyRadioGroup` component with custom styling and functionality. It takes an array of items as input and renders a radio group with a label for each item using `RadioGroup.Root`, `RadioGroup.Item`, and `Label.Root` from Bits-UI.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/radio-group.md#_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { RadioGroup, Label, type WithoutChildrenOrChild, useId } from \"bits-ui\";\n\n\ttype Item = {\n\t\tvalue: string;\n\t\tlabel: string;\n\t\tdisabled?: boolean;\n\t};\n\n\ttype Props = WithoutChildrenOrChild<RadioGroup.RootProps> & {\n\t\titems: Item[];\n\t};\n\n\tlet { value = $bindable(\"\"), ref = $bindable(null), items, ...restProps }: Props = $props();\n</script>\n\n<RadioGroup.Root bind:value bind:ref {...restProps}>\n\t{#each items as item}\n\t\t{@const id = useId()}\n\t\t<div>\n\t\t\t<RadioGroup.Item {id} value={item.value} disabled={item.disabled}>\n\t\t\t\t{#snippet children({ checked })}\n\t\t\t\t\t{#if checked}\n\t\t\t\t\t\t✅\n\t\t\t\t\t{/if}\n\t\t\t\t{/snippet}\n\t\t\t</RadioGroup.Item>\n\t\t\t<Label.Root for={id}>{item.label}</Label.Root>\n\t\t</div>\n\t{/each}\n</RadioGroup.Root>\n```\n\n----------------------------------------\n\nTITLE: Localizing Date Field - Svelte\nDESCRIPTION: This snippet demonstrates how to localize the DateField component using the `locale` prop. This will affect the formatting of date segments and placeholders according to the specified locale.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/date-field.md#_snippet_13\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport MyDateField from \"$lib/components/MyDateField.svelte\";\n</script>\n\n<MyDateField locale=\"de\" />\n```\n\n----------------------------------------\n\nTITLE: Fully Controlled Checkbox Group Value Svelte\nDESCRIPTION: Illustrates how to fully control the `value` state of a Checkbox Group using function bindings.  It defines getter and setter functions, `getValue` and `setValue`, to manage the `myValue` state, and then binds these functions to the `bind:value` prop of the `Checkbox.Group`.  This allows explicit control over reading and writing to the Checkbox Group's `value` state.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/checkbox.md#_snippet_13\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Checkbox } from \"bits-ui\";\n\tlet myValue = $state<string[]>([])\n\n\tfunction getValue() {\n\t\treturn myValue;\n\t}\n\n\tfunction setValue(newValue: string[]) {\n\t\tmyValue = newValue;\n\t}\n</script>\n\n<Checkbox.Group bind:value={getValue, setValue}>\n\t<!-- ... -->\n</Checkbox.Group>\n```\n\n----------------------------------------\n\nTITLE: Toolbar Two-Way Binding Svelte\nDESCRIPTION: Illustrates how to manage the value state of the Bits-UI Toolbar component using two-way binding with `bind:value`. This approach allows for simple and automatic state synchronization between the component and a variable. It uses `$state` for reactive state management.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/toolbar.md#_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Toolbar } from \"bits-ui\";\n\tlet myValue = $state(\"\");\n</script>\n\n<button onclick={() => (myValue = \"item-1\")}> Press item 1 </button>\n\n<Toolbar.Root>\n\t<Toolbar.Group type=\"single\" bind:value={myValue}>\n\t\t<!-- ... -->\n\t</Toolbar.Group>\n</Toolbar.Root>\n```\n\n----------------------------------------\n\nTITLE: Custom Switch Component with Label Svelte\nDESCRIPTION: Illustrates how to create a reusable custom Switch component, MySwitch, using the Switch, Label, and useId primitives from bits-ui. It uses two-way binding for the checked state and includes a label for accessibility.  It shows how to create a custom component that integrates a switch with a label, enhancing usability.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/switch.md#_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Switch, Label, useId, type WithoutChildrenOrChild } from \"bits-ui\";\n\n\tlet {\n\t\tid = useId(),\n\t\tchecked = $bindable(false),\n\t\tref = $bindable(null),\n\t\t...restProps\n\t}: WithoutChildrenOrChild<Switch.RootProps> & {\n\t\tlabelText: string;\n\t} = $props();\n</script>\n\n<Switch.Root bind:checked bind:ref {id} {...restProps}>\n\t<Switch.Thumb />\n</Switch.Root>\n<Label.Root for={id}>{labelText}</Label.Root>\n```\n\n----------------------------------------\n\nTITLE: Tooltip Structure\nDESCRIPTION: Demonstrates the basic structure of the Tooltip component, including the Provider, Root, Trigger, Portal, Content, and Arrow components. This example shows how to import the Tooltip components from the bits-ui library and use them to create a simple tooltip.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/tooltip.md#_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Tooltip } from \"bits-ui\";\n</script>\n\n<Tooltip.Provider>\n\t<Tooltip.Root>\n\t\t<Tooltip.Trigger />\n\t\t<Tooltip.Portal>\n\t\t\t<Tooltip.Content>\n\t\t\t\t<Tooltip.Arrow />\n\t\t\t</Tooltip.Content>\n\t\t</Tooltip.Portal>\n\t</Tooltip.Root>\n</Tooltip.Provider>\n```\n\n----------------------------------------\n\nTITLE: Accordion Two-Way Binding Example - Svelte\nDESCRIPTION: This example demonstrates two-way binding with the Accordion component's `value` prop.  The `myValue` array is bound to the Accordion, allowing for programmatic control and synchronization of open items. A button toggles the open state of items 1 and 2.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/accordion.md#_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Accordion } from \"bits-ui\";\n\tlet myValue = $state<string[]>([]);\n\tconst numberOfItemsOpen = $derived(myValue.length);\n</script>\n\n<button\n\tonclick={() => {\n\t\tmyValue = [\"item-1\", \"item-2\"];\n\t}}\n>\n\tOpen Items 1 and 2\n</button>\n\n<Accordion.Root type=\"multiple\" bind:value={myValue}>\n\t<Accordion.Item value=\"item-1\">\n\t\t<!-- ... -->\n\t</Accordion.Item>\n\t<Accordion.Item value=\"item-2\">\n\t\t<!-- ... -->\n\t</Accordion.Item>\n\t<Accordion.Item value=\"item-3\">\n\t\t<!-- ... -->\n\t</Accordion.Item>\n</Accordion.Root>\n```\n\n----------------------------------------\n\nTITLE: Command Component Structure Svelte\nDESCRIPTION: This snippet shows the basic structure of the Command component using Svelte. It imports the Command component from 'bits-ui' and demonstrates how to nest various sub-components like Root, Input, List, Viewport, Empty, Loading, Group, GroupHeading, GroupItems, Item, LinkItem, and Separator.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/command.md#_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Command } from \"bits-ui\";\n</script>\n\n<Command.Root>\n\t<Combobox.Input />\n\t<Command.List>\n\t\t<Command.Viewport>\n\t\t\t<Command.Empty />\n\t\t\t<Command.Loading />\n\t\t\t<Command.Group>\n\t\t\t\t<Command.GroupHeading />\n\t\t\t\t<Command.GroupItems>\n\t\t\t\t\t<Command.Item />\n\t\t\t\t\t<Command.LinkItem />\n\t\t\t\t</Command.GroupItems>\n\t\t\t</Command.Group>\n\t\t\t<Command.Separator />\n\t\t\t<Command.Item />\n\t\t\t<Command.LinkItem />\n\t\t</Command.Viewport>\n\t</Command.List>\n</Command.Root>\n```\n\n----------------------------------------\n\nTITLE: Vertical Navigation Menu Svelte\nDESCRIPTION: Demonstrates how to create a vertical navigation menu in Svelte using the `orientation` prop of the NavigationMenu.Root component. This example sets the orientation to \"vertical\".\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/navigation-menu.md#_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<NavigationMenu.Root orientation=\"vertical\">\n\t<!-- ... -->\n</NavigationMenu.Root>\n```\n\n----------------------------------------\n\nTITLE: Accordion Fully Controlled Example - Svelte\nDESCRIPTION: This example shows how to fully control the Accordion component's `value` state using Function Bindings.  `getValue` and `setValue` functions are used to manage the `myValue` state variable, giving complete control over reads and writes.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/accordion.md#_snippet_5\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Accordion } from \"bits-ui\";\n\tlet myValue = $state(\"\");\n\n\tfunction getValue() {\n\t\treturn myValue;\n\t}\n\n\tfunction setValue(newValue: string) {\n\t\tmyValue = newValue;\n\t}\n</script>\n\n<Accordion.Root type=\"single\" bind:value={getValue, setValue}>\n\t<!-- ... -->\n</Accordion.Root>\n```\n\n----------------------------------------\n\nTITLE: ToggleGroup Two-Way Binding Svelte\nDESCRIPTION: This snippet shows how to manage the ToggleGroup component's value state using two-way binding with `bind:value`.  It initializes a reactive variable `myValue` and binds it to the ToggleGroup.Root component. A button is included to change the `myValue` programmatically, demonstrating the binding in action.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/toggle-group.md#_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { ToggleGroup } from \"bits-ui\";\n\tlet myValue = $state(\"\");\n</script>\n\n<button onclick={() => (myValue = \"item-1\")}> Press item 1 </button>\n\n<ToggleGroup.Root type=\"single\" bind:value={myValue}>\n\t<!-- -->\n</ToggleGroup.Root>\n```\n\n----------------------------------------\n\nTITLE: Two-Way Binding with Command Svelte\nDESCRIPTION: This snippet demonstrates two-way binding with the Command component in Svelte using the `bind:value` directive. It initializes a local state variable `myValue`, binds it to the Command.Root component, and includes a button to update the value externally. The `myValue` variable automatically updates when the Command's internal state changes.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/command.md#_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Command } from \"bits-ui\";\n\tlet myValue = $state(\"\");\n</script>\n\n<button onclick={() => (myValue = \"A\")}> Select A </button>\n\n<Command.Root bind:value={myValue}>\n\t<!-- ... -->\n</Command.Root>\n```\n\n----------------------------------------\n\nTITLE: Date Picker Value Fully Controlled Svelte\nDESCRIPTION: This example demonstrates how to fully control the `value` state of the DatePicker component using function bindings.  It imports DatePicker from 'bits-ui' and DateValue from '@internationalized/date'.  Getter and setter functions `getValue` and `setValue` manage read/write access to the `myValue` state.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/date-picker.md#_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { DatePicker } from \"bits-ui\";\n\timport type { DateValue } from \"@internationalized/date\";\n\tlet myValue = $state<DateValue>();\n\n\tfunction getValue() {\n\t\treturn myValue;\n\t}\n\n\tfunction setValue(newValue: DateValue) {\n\t\tmyValue = newValue;\n\t}\n</script>\n\n<DatePicker.Root bind:value={getValue, setValue}>\n\t<!-- ... -->\n</DatePicker.Root>\n```\n\n----------------------------------------\n\nTITLE: Dropdown Menu Structure - Svelte\nDESCRIPTION: Demonstrates the basic structure of a Dropdown Menu using Bits UI components. It includes the root, trigger, and content sections, as well as elements for groups, items, checkboxes, radio groups, submenus, separators, and arrows.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/dropdown-menu.md#_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { DropdownMenu } from \"bits-ui\";\n</script>\n\n<DropdownMenu.Root>\n\t<DropdownMenu.Trigger />\n\n\t<DropdownMenu.Content>\n\t\t<DropdownMenu.Group>\n\t\t\t<DropdownMenu.GroupHeading />\n\t\t\t<DropdownMenu.Item />\n\t\t</DropdownMenu.Group>\n\n\t\t<DropdownMenu.Group>\n\t\t\t<DropdownMenu.Item />\n\t\t</DropdownMenu.Group>\n\n\t\t<DropdownMenu.CheckboxItem>\n\t\t\t<DropdownMenu.CheckboxIndicator />\n\t\t</DropdownMenu.CheckboxItem>\n\n\t\t<DropdownMenu.RadioGroup>\n\t\t\t<DropdownMenu.RadioItem>\n\t\t\t\t<DropdownMenu.RadioIndicator />\n\t\t\t</DropdownMenu.RadioItem>\n\t\t</DropdownMenu.RadioGroup>\n\n\t\t<DropdownMenu.Sub>\n\t\t\t<DropdownMenu.SubTrigger />\n\t\t\t<DropdownMenu.SubContent />\n\t\t</DropdownMenu.Sub>\n\n\t\t<DropdownMenu.Separator />\n\t\t<DropdownMenu.Arrow />\n\t</DropdownMenu.Content>\n</DropdownMenu.Root>\n```\n\n----------------------------------------\n\nTITLE: Two-Way Binding Collapsible State Svelte/TS\nDESCRIPTION: Illustrates how to manage the `open` state of the Collapsible component using two-way binding with `bind:open`.  It declares an `isOpen` variable, binds it to the `open` prop of the Collapsible.Root component, and uses a button to toggle the `isOpen` state.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/collapsible.md#_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Collapsible } from \"bits-ui\";\n\tlet isOpen = $state(false);\n</script>\n\n<button onclick={() => (isOpen = true)}>Open Collapsible</button>\n\n<Collapsible.Root bind:open={isOpen}>\n\t<!-- ... -->\n</Collapsible.Root>\n```\n\n----------------------------------------\n\nTITLE: Two-Way Binding Checkbox Group Value Svelte\nDESCRIPTION: Demonstrates two-way binding of the `value` state for a Checkbox Group using `bind:value`. It initializes a local variable `myValue` as an empty array of strings, and binds it to the `value` prop of `Checkbox.Group`. A button is provided to set a pre-defined array of values.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/checkbox.md#_snippet_12\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Checkbox } from \"bits-ui\";\n\tlet myValue = $state<string[]>([])\n</script>\n\n<button\n\tonclick={() => {\n\t\tmyValue = [\"item-1\", \"item-2\"];\n\t}}\n>\n\tOpen Items 1 and 2\n</button>\n\n<Checkbox.Group name=\"myItems\" bind:value={myValue}>\n\t<Checkbox.GroupLabel>Items</Checkbox.GroupLabel>\n\t<Checkbox.Root value=\"item-1\" />\n\t<Checkbox.Root value=\"item-2\" />\n\t<Checkbox.Root value=\"item-3\" />\n</Checkbox.Group>\n```\n\n----------------------------------------\n\nTITLE: Radio Group Orientation Prop - Svelte\nDESCRIPTION: Demonstrates how to set the `orientation` prop on the `RadioGroup.Root` component to control keyboard navigation. Orientation can be either `vertical` or `horizontal`.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/radio-group.md#_snippet_8\n\nLANGUAGE: svelte\nCODE:\n```\n<RadioGroup.Root orientation=\"vertical\">\n\t<!-- ... -->\n</RadioGroup.Root>\n```\n\nLANGUAGE: svelte\nCODE:\n```\n<RadioGroup.Root orientation=\"horizontal\">\n\t<!-- ... -->\n</RadioGroup.Root>\n```\n\n----------------------------------------\n\nTITLE: Fully Controlled Radio Group - Svelte\nDESCRIPTION: Demonstrates how to fully control the `value` state of the `RadioGroup.Root` component using function bindings. This allows for custom logic to be executed when the value is read or written.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/radio-group.md#_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { RadioGroup } from \"bits-ui\";\n\tlet myValue = $state(\"\");\n\n\tfunction getValue() {\n\t\treturn myValue;\n\t}\n\n\tfunction setValue(newValue: string) {\n\t\tmyValue = newValue;\n\t}\n</script>\n\n<RadioGroup.Root bind:value={getValue, setValue}>\n\t<!-- ... -->\n</RadioGroup.Root>\n```\n\n----------------------------------------\n\nTITLE: Date Picker Open State Two-Way Binding Svelte\nDESCRIPTION: This code shows how to manage the `open` state of the DatePicker component using two-way binding with `bind:open`. It imports DatePicker from 'bits-ui'. A button is provided to set the `isOpen` state to true, opening the DatePicker.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/date-picker.md#_snippet_5\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { DatePicker } from \"bits-ui\";\n\tlet isOpen = $state(false);\n</script>\n\n<button onclick={() => (isOpen = true)}>Open DatePicker</button>\n\n<DatePicker.Root bind:open={isOpen}>\n\t<!-- ... -->\n</DatePicker.Root>\n```\n\n----------------------------------------\n\nTITLE: Localization Svelte\nDESCRIPTION: Demonstrates using the `locale` prop to format the calendar content according to a specific locale.  In this example, it's set to French (France).\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/calendar.md#_snippet_13\n\nLANGUAGE: svelte\nCODE:\n```\n<Calendar.Root locale=\"fr-FR\">\n\t<!-- ...-->\n</Calendar.Root>\n```\n\n----------------------------------------\n\nTITLE: Two-Way Binding with Slider\nDESCRIPTION: Demonstrates using two-way binding with the `bind:value` prop to automatically synchronize the slider's value with a reactive variable. Shows how to update the value externally and have the slider reflect the change.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/slider.md#_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Slider } from \"bits-ui\";\n\tlet myValue = $state(0);\n</script>\n\n<button onclick={() => (myValue = 20)}> Set value to 20 </button>\n\n<Slider.Root bind:value={myValue} type=\"single\">\n\t<!-- ... -->\n</Slider.Root>\n```\n\n----------------------------------------\n\nTITLE: Two-Way Binding with Radio Group - Svelte\nDESCRIPTION: Demonstrates two-way binding with the `RadioGroup.Root` component using `bind:value`. This allows the `myValue` variable to be automatically updated when the selected radio button changes.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/radio-group.md#_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { RadioGroup } from \"bits-ui\";\n\tlet myValue = $state(\"\");\n</script>\n\n<button onclick={() => (myValue = \"A\")}> Select A </button>\n\n<RadioGroup.Root bind:value={myValue}>\n\t<!-- ... -->\n</RadioGroup.Root>\n```\n\n----------------------------------------\n\nTITLE: Basic Alert Dialog Implementation (Svelte)\nDESCRIPTION: This snippet demonstrates a basic implementation of the Alert Dialog component using Svelte and TypeScript. It includes the Root, Trigger, Portal, Overlay, Content, Title, Description, Cancel, and Action components to create a functional alert dialog.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/alert-dialog.md#_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { AlertDialog } from \"bits-ui\";\n</script>\n\n<AlertDialog.Root>\n\t<AlertDialog.Trigger>Open Dialog</AlertDialog.Trigger>\n\t<AlertDialog.Portal>\n\t\t<AlertDialog.Overlay />\n\t\t<AlertDialog.Content>\n\t\t\t<AlertDialog.Title>Confirm Action</AlertDialog.Title>\n\t\t\t<AlertDialog.Description>Are you sure?</AlertDialog.Description>\n\t\t\t<AlertDialog.Cancel>Cancel</AlertDialog.Cancel>\n\t\t\t<AlertDialog.Action>Confirm</AlertDialog.Action>\n\t\t</AlertDialog.Content>\n\t</AlertDialog.Portal>\n</AlertDialog.Root>\n```\n\n----------------------------------------\n\nTITLE: ToggleGroup Fully Controlled Svelte\nDESCRIPTION: This example illustrates a fully controlled approach to managing the ToggleGroup component's value. It uses a Function Binding to completely control the state's reads and writes. The `getValue` function returns the current `myValue`, and the `setValue` function updates `myValue` with a new value.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/toggle-group.md#_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { ToggleGroup } from \"bits-ui\";\n\tlet myValue = $state(\"\");\n\n\tfunction getValue() {\n\t\treturn myValue;\n\t}\n\n\tfunction setValue(newValue: string) {\n\t\tmyValue = newValue;\n\t}\n</script>\n\n<ToggleGroup.Root type=\"single\" bind:value={getValue, setValue}>\n\t<!-- ... -->\n</ToggleGroup.Root>\n```\n\n----------------------------------------\n\nTITLE: Custom Combobox Component (Svelte/TS)\nDESCRIPTION: Demonstrates how to create a reusable custom Combobox component using Bits-UI primitives. This snippet defines a `CustomCombobox` component that accepts an array of items, handles filtering based on user input, and renders the filtered items in a dropdown. It utilizes TypeScript for type safety and Svelte's reactivity features.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/combobox.md#_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Combobox, type WithoutChildrenOrChild, mergeProps } from \"bits-ui\";\n\n\ttype Item = { value: string; label: string };\n\n\ttype Props = Combobox.RootProps & {\n\t\titems: Item[];\n\t\tinputProps?: WithoutChildrenOrChild<Combobox.InputProps>;\n\t\tcontentProps?: WithoutChildrenOrChild<Combobox.ContentProps>;\n\t};\n\n\tlet {\n\t\titems,\n\t\tvalue = $bindable(),\n\t\topen = $bindable(false),\n\t\tinputProps,\n\t\tcontentProps,\n\t\t...restProps\n\t}: Props = $props();\n\n\tlet searchValue = $state(\"\");\n\n\tconst filteredItems = $derived.by(() => {\n\t\tif (searchValue === \"\") return items;\n\t\treturn items.filter((item) => item.label.toLowerCase().includes(searchValue.toLowerCase()));\n\t});\n\n\tfunction handleInput(e: Event & { currentTarget: HTMLInputElement }) {\n\t\tsearchValue = e.currentTarget.value;\n\t}\n\n\tfunction handleOpenChange(newOpen: boolean) {\n\t\tif (!newOpen) searchValue = \"\";\n\t}\n\n\tconst mergedRootProps = $derived(mergeProps(restProps, { onOpenChange: handleOpenChange }));\n\tconst mergedInputProps = $derived(mergeProps(inputProps, { oninput: handleInput }));\n</script>\n\n<Combobox.Root bind:value bind:open {...mergedRootProps}>\n\t<Combobox.Input {...mergedInputProps} />\n\t<Combobox.Trigger>Open</Combobox.Trigger>\n\t<Combobox.Portal>\n\t\t<Combobox.Content {...contentProps}>\n\t\t\t{#each filteredItems as item, i (i + item.value)}\n\t\t\t\t<Combobox.Item value={item.value} label={item.label}>\n\t\t\t\t\t{#snippet children({ selected })}\n\t\t\t\t\t\t{item.label}\n\t\t\t\t\t\t{selected ? \"✅\" : \"\"}\n\t\t\t\t\t{/snippet}\n\t\t\t\t</Combobox.Item>\n\t\t\t{:else}\n\t\t\t\t<span> No results found </span>\n\t\t\t{/each}\n\t\t</Combobox.Content>\n\t</Combobox.Portal>\n</Combobox.Root>\n```\n\n----------------------------------------\n\nTITLE: Two-Way Binding Value Svelte\nDESCRIPTION: Demonstrates two-way binding for the `value` prop of the Calendar component using Svelte. It initializes a `CalendarDateTime` object and uses `bind:value` to synchronize the state between the component and the `myValue` variable. Clicking the button updates the value, which automatically reflects in the Calendar.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/calendar.md#_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Calendar } from \"bits-ui\";\n\timport { CalendarDateTime } from \"@internationalized/date\";\n\tlet myValue = $state(new CalendarDateTime(2024, 8, 3, 12, 30));\n</script>\n\n<button onclick={() => (myValue = myValue.add({ days: 1 }))}> Add 1 day </button>\n<Calendar.Root type=\"single\" bind:value={myValue}>\n\t<!-- ... -->\n</Calendar.Root>\n```\n\n----------------------------------------\n\nTITLE: Combobox Open State Fully Controlled (Svelte/TS)\nDESCRIPTION: Demonstrates full control over the Combobox's open state using function bindings. It initializes a reactive variable `myOpen` to `false`. Functions `getOpen` and `setOpen` are defined to get and set the state. The `bind:open` prop then uses these functions to manage the open state.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/combobox.md#_snippet_6\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Combobox } from \"bits-ui\";\n\tlet myOpen = $state(false);\n\n\tfunction getOpen() {\n\t\treturn myOpen;\n\t}\n\n\tfunction setOpen(newOpen: boolean) {\n\t\tmyOpen = newOpen;\n\t}\n</script>\n\n<Combobox.Root type=\"single\" bind:open={getOpen, setOpen}>\n\t<!-- ... -->\n</Combobox.Root>\n```\n\n----------------------------------------\n\nTITLE: Link Item Command Svelte\nDESCRIPTION: This snippet shows the usage of `Command.LinkItem` component, which is a variant of `Command.Item` that renders an `a` element instead of a `div` element. This is useful when you want to link to a page.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/command.md#_snippet_8\n\nLANGUAGE: svelte\nCODE:\n```\n<Command.LinkItem href=\"/some/path\">\n\t<!-- ... -->\n</Command.LinkItem>\n```\n\n----------------------------------------\n\nTITLE: Checkbox Group Svelte\nDESCRIPTION: Demonstrates how to create a Checkbox Group using `Checkbox.Group`, `Checkbox.GroupLabel`, and `Checkbox.Root` components.  The `Checkbox.Group` component manages the group, `Checkbox.GroupLabel` provides a label, and `Checkbox.Root` represents individual checkboxes within the group, each with a distinct `value` prop.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/checkbox.md#_snippet_11\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Checkbox } from \"bits-ui\";\n</script>\n\n<Checkbox.Group name=\"notifications\">\n\t<Checkbox.GroupLabel>Notifications</Checkbox.GroupLabel>\n\t<Checkbox.Root value=\"marketing\" />\n\t<Checkbox.Root value=\"promotions\" />\n\t<Checkbox.Root value=\"news\" />\n</Checkbox.Group>\n```\n\n----------------------------------------\n\nTITLE: Creating Radio Groups - Svelte\nDESCRIPTION: Demonstrates how to create a radio group within a dropdown menu using the `DropdownMenu.RadioGroup` and `DropdownMenu.RadioItem` components.  The example includes dynamically generating radio items from a list of possible values and showing a checkmark when selected.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/dropdown-menu.md#_snippet_8\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { DropdownMenu } from \"bits-ui\";\n\n\tconst values = [\"one\", \"two\", \"three\"];\n\tlet value = $state(\"one\");\n</script>\n\n<DropdownMenu.RadioGroup bind:value>\n\t<DropdownMenu.GroupHeading>Favorite number</DropdownMenu.GroupHeading>\n\t{#each values as value}\n\t\t<DropdownMenu.RadioItem {value}>\n\t\t\t{#snippet children({ checked })}\n\t\t\t\t{#if checked}\n\t\t\t\t\t✅\n\t\t\t\t{/if}\n\t\t\t\t{value}\n\t\t\t{/snippet}\n\t\t</DropdownMenu.RadioItem>\n\t{/each}\n</DropdownMenu.RadioGroup>\n```\n\n----------------------------------------\n\nTITLE: Toggle Fully Controlled Svelte\nDESCRIPTION: Shows how to fully control the `pressed` state of the Toggle component using function bindings in Svelte. It defines getter and setter functions for the `myPressed` state variable and binds them to the `pressed` prop of Toggle.Root.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/toggle.md#_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Toggle } from \"bits-ui\";\n\tlet myPressed = $state(false);\n\n\tfunction getPressed() {\n\t\treturn myPressed;\n\t}\n\n\tfunction setPressed(newPressed: boolean) {\n\t\tmyPressed = newPressed;\n\t}\n</script>\n\n<Toggle.Root bind:pressed={getPressed, setPressed}>\n\t<!-- ... -->\n</Toggle.Root>\n```\n\n----------------------------------------\n\nTITLE: Using MySelect Component\nDESCRIPTION: Shows how to use the custom `MySelect` component defined previously.  It includes importing the component, defining a list of items, and binding the selected value to a state variable.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/select.md#_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport MySelect from \"$lib/components/MySelect.svelte\";\n\n\tconst items = [\n\t\t{ value: \"apple\", label: \"Apple\" },\n\t\t{ value: \"banana\", label: \"Banana\" },\n\t\t{ value: \"cherry\", label: \"Cherry\" },\n\t];\n\n\tlet fruit = $state(\"apple\");\n</script>\n\n<MySelect {items} bind:value={fruit} />\n```\n\n----------------------------------------\n\nTITLE: Tabs Fully Controlled Svelte\nDESCRIPTION: Demonstrates how to fully control the Tabs component's value state using function bindings in Svelte.  It defines getter and setter functions (getValue and setValue) to manage the `myValue` state and binds these functions to the `bind:value` property of the Tabs.Root component. This provides complete control over how the state is read and written. Requires importing Tabs from the bits-ui library.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/tabs.md#_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Tabs } from \"bits-ui\";\n\tlet myValue = $state(\"\");\n\n\tfunction getValue() {\n\t\treturn myValue;\n\t}\n\n\tfunction setValue(newValue: string) {\n\t\tmyValue = newValue;\n\t}\n</script>\n\n<Tabs.Root bind:value={getValue, setValue}>\n\t<!-- ... -->\n</Tabs.Root>\n```\n\n----------------------------------------\n\nTITLE: Reusable Scroll Area Component Svelte/TS\nDESCRIPTION: Creates a reusable Scroll Area component in Svelte that accepts custom props like `orientation` and `viewportClasses`. It utilizes TypeScript for type definitions and provides flexibility in configuring the scroll area's behavior and appearance.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/scroll-area.md#_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { ScrollArea, type WithoutChild } from \"bits-ui\";\n\n\ttype Props = WithoutChild<ScrollArea.RootProps> & {\n\t\torientation: \"vertical\" | \"horizontal\" | \"both\";\n\t\tviewportClasses?: string;\n\t};\n\n\tlet {\n\t\tref = $bindable(null),\n\t\torientation = \"vertical\",\n\t\tviewportClasses,\n\t\tchildren,\n\t\t...restProps\n\t}: Props = $props();\n</script>\n\n{#snippet Scrollbar({ orientation }: { orientation: \"vertical\" | \"horizontal\" })} \n\t<ScrollArea.Scrollbar {orientation}>\n\t\t<ScrollArea.Thumb />\n\t</ScrollArea.Scrollbar>\n{/snippet}\n\n<ScrollArea.Root bind:ref {...restProps}>\n\t<ScrollArea.Viewport class={viewportClasses}>\n\t\t{@render children?.()}\n\t</ScrollArea.Viewport>\n\t{#if orientation === \"vertical\" || orientation === \"both\"}\n\t\t{@render Scrollbar({ orientation: \"vertical\" })}\n\t{/if}\n\t{#if orientation === \"horizontal\" || orientation === \"both\"}\n\t\t{@render Scrollbar({ orientation: \"horizontal\" })}\n\t{/if}\n\t<ScrollArea.Corner />\n</ScrollArea.Root>\n```\n\n----------------------------------------\n\nTITLE: Reusable Menubar Menu Component\nDESCRIPTION: Creates a reusable `MyMenubarMenu` component with customizable trigger text, menu items, and content properties. It uses the `Menubar` component from `bits-ui` and defines a `Props` type for configuration.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/menubar.md#_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Menubar, type WithoutChildrenOrChild } from \"bits-ui\";\n\n\ttype Props = WithoutChildrenOrChild<Menubar.MenuProps> & {\n\t\ttriggerText: string;\n\t\titems: { label: string; value: string; onSelect?: () => void }[];\n\t\tcontentProps?: WithoutChildrenOrChild<Menubar.ContentProps>;\n\t\t// other component props if needed\n\t};\n\n\tlet { triggerText, items, contentProps, ...restProps }: Props = $props();\n</script>\n\n<Menubar.Menu {...restProps}>\n\t<Menubar.Trigger>\n\t\t{triggerText}\n\t</Menubar.Trigger>\n\t<Menubar.Content {...contentProps}>\n\t\t<Menubar.Group aria-label={triggerText}>\n\t\t\t{#each items as item}\n\t\t\t\t<Menubar.Item textValue={item.label} onSelect={item.onSelect}>\n\t\t\t\t\t{item.label}\n\t\t\t\t</Menubar.Item>\n\t\t\t{/each}\n\t\t</Menubar.Group>\n\t</Menubar.Content>\n</Menubar.Menu>\n```\n\n----------------------------------------\n\nTITLE: Enable Scroll Lock on Select.Content - Svelte\nDESCRIPTION: This snippet demonstrates how to enable scroll lock on the `Select.Content` component by setting the `preventScroll` prop to `true`. When the select is open, scrolling outside the content will be disabled, preventing the underlying page from scrolling.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/select.md#_snippet_10\n\nLANGUAGE: svelte\nCODE:\n```\n<Select.Content preventScroll={true}>\n\t<!-- ... -->\n</Select.Content>\n```\n\n----------------------------------------\n\nTITLE: Custom Checkbox Component Svelte\nDESCRIPTION: Illustrates how to create a reusable custom checkbox component, `MyCheckbox`, using the `Checkbox` and `Label` components from 'bits-ui'.  It defines props for the checkbox, including label text, and uses two-way binding for the `checked` state. The component utilizes snippets for rendering different states, allowing for custom visuals based on the checkbox's state (checked, unchecked, or indeterminate).\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/checkbox.md#_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Checkbox, Label, useId, type WithoutChildrenOrChild } from \"bits-ui\";\n\n\tlet {\n\t\tid = useId(),\n\t\tchecked = $bindable(false),\n\t\tref = $bindable(null),\n\t\tlabelRef = $bindable(null),\n\t\t...restProps\n\t}: WithoutChildrenOrChild<Checkbox.RootProps> & {\n\t\tlabelText: string;\n\t\tlabelRef?: HTMLLabelElement | null;\n\t} = $props();\n</script>\n\n<Checkbox.Root bind:checked bind:ref {...restProps}>\n\t{#snippet children({ checked, indeterminate })}\n\t\t{#if indeterminate}\n\t\t\t-\n\t\t{:else if checked}\n\t\t\t✅\n\t\t{:else}\n\t\t\t❌\n\t\t{/if}\n\t{/snippet}\n</Checkbox.Root>\n<Label.Root for={id} bind:ref={labelRef}>\n\t{labelText}\n</Label.Root>\n```\n\n----------------------------------------\n\nTITLE: Function Binding with Svelte\nDESCRIPTION: Illustrates using a function binding for complete control over getting and setting the value of a Bits UI component. This approach allows for complex state transformation logic, conditional updates, and integration with external state systems. The `getValue` function returns the current value, and the `setValue` function handles updating the value, with conditional logic based on the current time. It requires importing the specific component from `bits-ui`. The `<ComponentName.Root>` component is a placeholder for the actual component being used.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/state-management.md#_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { ComponentName } from \"bits-ui\";\n\n\tlet myValue = $state(\"default-value\");\n\n\tfunction getValue() {\n\t\treturn myValue;\n\t}\n\n\tfunction setValue(newValue: string) {\n\t\t// Only update during business hours\n\t\tconst now = new Date();\n\t\tconst hour = now.getHours();\n\n\t\tif (hour >= 9 && hour <= 17) {\n\t\t\tmyValue = newValue;\n\t\t}\n\t}\n</script>\n\n<ComponentName.Root bind:value={getValue, setValue}></ComponentName.Root>\n```\n\n----------------------------------------\n\nTITLE: DateRangePicker Value Two-Way Binding in Svelte\nDESCRIPTION: This example demonstrates two-way binding of the `value` property in the DateRangePicker component with Bits UI in Svelte. It initializes a date range and allows external modification of the date range value through a button that adds one day to both the start and end dates.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/date-range-picker.md#_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { DateRangePicker } from \"bits-ui\";\n\timport { CalendarDateTime } from \"@internationalized/date\";\n\tlet myValue = $state({\n\t\tstart: new CalendarDateTime(2024, 8, 3, 12, 30),\n\t\tend: new CalendarDateTime(2024, 8, 4, 12, 30),\n\t});\n</script>\n\n<button\n\tonclick={() => {\n\t\tvalue = {\n\t\t\tstart: value.start.add({ days: 1 }),\n\t\t\tend: value.end.add({ days: 1 }),\n\t\t};\n\t}}\n>\n\tAdd 1 day\n</button>\n<DateRangePicker.Root bind:value={myValue}>\n\t<!-- ... -->\n</DateRangePicker.Root>\n```\n\n----------------------------------------\n\nTITLE: Combobox with ContentStatic (Svelte)\nDESCRIPTION: Illustrates opting out of Floating UI by using `Combobox.ContentStatic`.  This gives the developer full control over the positioning of the dropdown content. It showcases the structure with the `ContentStatic` component, including other components like `ScrollUpButton`, `Viewport`, `Item`, `Group`, and `GroupHeading`.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/combobox.md#_snippet_7\n\nLANGUAGE: svelte\nCODE:\n```\n<Combobox.Root>\n\t<Combobox.Trigger />\n\t<Combobox.Input />\n\t<Combobox.Portal>\n\t\t<Combobox.ContentStatic>\n\t\t\t<Combobox.ScrollUpButton />\n\t\t\t<Combobox.Viewport>\n\t\t\t\t<Combobox.Item />\n\t\t\t\t<Combobox.Group>\n\t\t\t\t\t<Combobox.GroupHeading />\n\t\t\t\t\t<Combobox.Item />\n\t\t\t\t</Combobox.Group>\n\t\t\t\t<Combobox.ScrollDownButton />\n\t\t\t</Combobox.Viewport>\n\t\t</Combobox.ContentStatic>\n\t</Combobox.Portal>\n</Combobox.Root>\n```\n\n----------------------------------------\n\nTITLE: Context Menu Structure in Svelte with bits-ui\nDESCRIPTION: Demonstrates the basic structure of a context menu using bits-ui components in Svelte. It shows how to define the Root, Trigger, Portal, Content, and various items within the menu.  Requires the `bits-ui` library. This snippet doesn't have inputs or outputs, but renders a context menu.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/context-menu.md#_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { ContextMenu } from \"bits-ui\";\n</script>\n\n<ContextMenu.Root>\n\t<ContextMenu.Trigger />\n\t<ContextMenu.Portal>\n\t\t<ContextMenu.Content>\n\t\t\t<ContextMenu.Group>\n\t\t\t\t<ContextMenu.GroupHeading />\n\t\t\t\t<ContextMenu.Item />\n\t\t\t</ContextMenu.Group>\n\n\t\t\t<ContextMenu.Item />\n\n\t\t\t<ContextMenu.CheckboxItem>\n\t\t\t\t{#snippet children({ checked })}\n\t\t\t\t\t{checked ? \"✅\" : \"\"}\n\t\t\t\t{/snippet}\n\t\t\t</ContextMenu.CheckboxItem>\n\n\t\t\t<ContextMenu.RadioGroup>\n\t\t\t\t<ContextMenu.GroupHeading />\n\t\t\t\t<ContextMenu.RadioItem>\n\t\t\t\t\t{#snippet children({ checked })}\n\t\t\t\t\t\t{checked ? \"✅\" : \"\"}\n\t\t\t\t\t{/snippet}\n\t\t\t\t</ContextMenu.RadioItem>\n\t\t\t</ContextMenu.RadioGroup>\n\n\t\t\t<ContextMenu.Sub>\n\t\t\t\t<ContextMenu.SubTrigger />\n\t\t\t\t<ContextMenu.SubContent />\n\t\t\t</ContextMenu.Sub>\n\n\t\t\t<ContextMenu.Separator />\n\t\t\t<ContextMenu.Arrow />\n\t\t</ContextMenu.Content>\n\t</ContextMenu.Portal>\n</ContextMenu.Root>\n\n```\n\n----------------------------------------\n\nTITLE: Custom Date Validation - Svelte\nDESCRIPTION: This snippet illustrates how to implement custom validation for the DateField component using the `validate` prop. The provided function checks if the selected date is the first day of the month and returns an error message if it is, otherwise undefined.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/date-field.md#_snippet_11\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport MyDateField from \"$lib/components/MyDateField.svelte\";\n\timport { CalendarDate, type DateValue } from \"@internationalized/date\";\n\n\tconst value = new CalendarDate(2024, 8, 2);\n\n\tfunction validate(date: DateValue) {\n\t\treturn date.day === 1 ? \"Date cannot be the first day of the month\" : undefined;\n\t}\n\n\tfunction onInvalid(reason: \"min\" | \"max\" | \"custom\", msg?: string | string[]) {\n\t\tif (reason === \"custom\") {\n\t\t\tif (typeof msg === \"string\") {\n\t\t\t\t// do something with the error message\n\t\t\t\tconsole.log(msg);\n\t\t\t\treturn;\n\t\t\t} else if (Array.isArray(msg)) {\n\t\t\t\t// do something with the error messages\n\t\t\t\tconsole.log(msg);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconsole.log(\"The date is invalid\");\n\t\t} else if (reason === \"min\") {\n\t\t\t// let the user know that the date is too early.\n\t\t\tconsole.log(\"The date is too early.\");\n\t\t} else if (reason === \"max\") {\n\t\t\t// let the user know that the date is too late.\n\t\t\tconsole.log(\"The date is too late.\");\n\t\t}\n\t}\n</script>\n\n<MyDateField {validate} {value} {onInvalid} />\n```\n\n----------------------------------------\n\nTITLE: Reusable Dropdown Menu Component - Svelte\nDESCRIPTION: Shows how to create a reusable Dropdown Menu component in Svelte that accepts custom props like button text and items. It uses TypeScript for type definitions and Bits UI components for the dropdown menu structure.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/dropdown-menu.md#_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport type { Snippet } from \"svelte\";\n\timport { DropdownMenu, type WithoutChild } from \"bits-ui\";\n\n\ttype Props = DropdownMenu.Props & {\n\t\tbuttonText: string;\n\t\titems: string[];\n\t\tcontentProps?: WithoutChild<DropdownMenu.Content.Props>;\n\t\t// other component props if needed\n\t};\n\n\tlet {\n\t\topen = $bindable(false),\n\t\tchildren,\n\t\tbuttonText,\n\t\titems,\n\t\tcontentProps,\n\t\t...restProps\n\t}: Props = $props();\n</script>\n\n<DropdownMenu.Root bind:open {...restProps}>\n\t<DropdownMenu.Trigger>\n\t\t{buttonText}\n\t</DropdownMenu.Trigger>\n\t<DropdownMenu.Portal>\n\t\t<DropdownMenu.Content {...contentProps}>\n\t\t\t<DropdownMenu.Group aria-label={buttonText}>\n\t\t\t\t{#each items as item}\n\t\t\t\t\t<DropdownMenu.Item textValue={item}>\n\t\t\t\t\t\t{item}\n\t\t\t\t\t</DropdownMenu.Item>\n\t\t\t\t{/each}\n\t\t\t</DropdownMenu.Group>\n\t\t</DropdownMenu.Content>\n\t</DropdownMenu.Portal>\n</DropdownMenu.Root>\n```\n\n----------------------------------------\n\nTITLE: Date Picker Value Two-Way Binding Svelte\nDESCRIPTION: This example shows how to manage the `value` state of the DatePicker component using two-way binding with `bind:value`. It imports DatePicker and CalendarDateTime from 'bits-ui' and '@internationalized/date', respectively. A button is included to increment the date by one day.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/date-picker.md#_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { DatePicker } from \"bits-ui\";\n\timport { CalendarDateTime } from \"@internationalized/date\";\n\tlet myValue = $state(new CalendarDateTime(2024, 8, 3, 12, 30));\n</script>\n\n<button onclick={() => (myValue = myValue.add({ days: 1 }))}> Add 1 day </button>\n<DatePicker.Root bind:value={myValue}>\n\t<!-- ... -->\n</DatePicker.Root>\n```\n\n----------------------------------------\n\nTITLE: Two-Way Binding Value Svelte\nDESCRIPTION: Shows how to manage the value state of the DateRangeField component using two-way binding in Svelte with `bind:value`. Includes a button to modify the date range, demonstrating the reactivity. Requires the 'bits-ui' and '@internationalized/date' packages.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/date-range-field.md#_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { DateRangeField, type DateRange } from \"bits-ui\";\n\timport { CalendarDateTime } from \"@internationalized/date\";\n\tlet myValue = $state<DateRange>({\n\t\tstart: new CalendarDateTime(2024, 8, 3, 12, 30),\n\t\tend: new CalendarDateTime(2024, 8, 4, 12, 30),\n\t});\n</script>\n\n<button\n\tonclick={() => {\n\t\tvalue = {\n\t\t\tstart: value.start.add({ days: 1 }),\n\t\t\tend: value.end.add({ days: 1 }),\n\t\t};\n\t}}\n>\n\tAdd 1 day\n</button>\n<DateRangeField.Root bind:value={myValue}>\n\t<!-- ... -->\n</DateRangeField.Root>\n```\n\n----------------------------------------\n\nTITLE: AlertDialog with Form Submission - Svelte\nDESCRIPTION: This example showcases how to integrate an `AlertDialog` with a form submission process in Svelte. It includes TypeScript for type safety, demonstrating how to wait for an asynchronous action (simulated with `wait`) and then programmatically close the dialog upon completion.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/alert-dialog.md#_snippet_14\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { AlertDialog } from \"bits-ui\";\n\n\tfunction wait(ms: number) {\n\t\treturn new Promise((resolve) => setTimeout(resolve, ms));\n\t}\n\n\tlet open = $state(false);\n</script>\n\n<AlertDialog.Root bind:open>\n\t<AlertDialog.Portal>\n\t\t<AlertDialog.Overlay />\n\t\t<AlertDialog.Content>\n\t\t\t<AlertDialog.Title>Confirm your action</AlertDialog.Title>\n\t\t\t<AlertDialog.Description>Are you sure you want to do this?</AlertDialog.Description>\n\t\t\t<form\n\t\t\t\tmethod=\"POST\"\n\t\t\t\taction=\"?/someAction\"\n\t\t\t\tonsubmit={() => {\n\t\t\t\t\twait(1000).then(() => (open = false));\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<AlertDialog.Cancel type=\"button\">No, cancel (close dialog)</AlertDialog.Cancel>\n\t\t\t\t<AlertDialog.Action type=\"submit\">Yes (submit form)</AlertDialog.Action>\n\t\t\t</form>\n\t\t</AlertDialog.Content>\n\t</AlertDialog.Portal>\n</AlertDialog.Root>\n```\n\n----------------------------------------\n\nTITLE: Tabs Two-Way Binding Svelte\nDESCRIPTION: Illustrates how to manage the Tabs component's value state using two-way binding in Svelte. It imports the Tabs component and uses `bind:value` to synchronize the `myValue` state with the Tabs.Root component. An example button is included to programmatically activate a specific tab. Requires importing Tabs from the bits-ui library.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/tabs.md#_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Tabs } from \"bits-ui\";\n\tlet myValue = $state(\"\");\n</script>\n\n<button onclick={() => (myValue = \"tab-1\")}> Activate tab 1 </button>\n\n<Tabs.Root bind:value={myValue}>\n\t<!-- -->\n</Tabs.Root>\n```\n\n----------------------------------------\n\nTITLE: Two-Way Binding for Switch State Svelte\nDESCRIPTION: Illustrates the use of two-way binding with the bind:checked directive to manage the checked state of the Switch component.  The snippet shows how to synchronize the switch's state with a variable, allowing for dynamic control of the switch.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/switch.md#_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Switch } from \"bits-ui\";\n\tlet myChecked = $state(true);\n</script>\n\n<button onclick={() => (myChecked = false)}> uncheck </button>\n\n<Switch.Root bind:checked={myChecked} />\n```\n\n----------------------------------------\n\nTITLE: Date Picker Placeholder Fully Controlled Svelte\nDESCRIPTION: This example demonstrates how to fully control the placeholder state of the DatePicker component using function bindings. It imports DatePicker from 'bits-ui' and DateValue from '@internationalized/date'.  Getter and setter functions `getPlaceholder` and `setPlaceholder` manage read/write access to the `myPlaceholder` state.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/date-picker.md#_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { DatePicker } from \"bits-ui\";\n\timport type { DateValue } from \"@internationalized/date\";\n\tlet myPlaceholder = $state<DateValue>();\n\n\tfunction getPlaceholder() {\n\t\treturn myPlaceholder;\n\t}\n\n\tfunction setPlaceholder(newPlaceholder: DateValue) {\n\t\tmyPlaceholder = newPlaceholder;\n\t}\n</script>\n\n<DatePicker.Root bind:placeholder={getPlaceholder, setPlaceholder}>\n\t<!-- ... -->\n</DatePicker.Root>\n```\n\n----------------------------------------\n\nTITLE: Using the Custom Switch Component Svelte\nDESCRIPTION: Demonstrates how to use the custom MySwitch component created in the previous example within an application. It binds the checked state of the switch to a notifications variable and passes a label text for accessibility and context. Shows how to integrate the custom switch component into an application, binding its state to a variable.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/switch.md#_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport MySwitch from \"$lib/components/MySwitch.svelte\";\n\n\tlet notifications = $state(true);\n</script>\n\n<MySwitch bind:checked={notifications} labelText=\"Enable notifications\" />\n```\n\n----------------------------------------\n\nTITLE: Fully Controlled Value Svelte\nDESCRIPTION: Demonstrates a fully controlled DateField using function bindings for the value.  This approach provides complete control over how the value state is read and written utilizing getter and setter functions.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/date-field.md#_snippet_7\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { DateField } from \"bits-ui\";\n\timport type { DateValue } from \"@internationalized/date\";\n\tlet myValue = $state<DateValue>();\n\n\tfunction getValue() {\n\t\treturn myValue;\n\t}\n\n\tfunction setValue(newValue: DateValue) {\n\t\tmyValue = newValue;\n\t}\n</script>\n\n<DateField.Root bind:value={getValue, setValue}>\n\t<!-- ... -->\n</DateField.Root>\n```\n\n----------------------------------------\n\nTITLE: Checkbox with Name Attribute Svelte\nDESCRIPTION: Shows how to add a `name` attribute to the `MyCheckbox` component. This is important for submitting the checkbox value within an HTML form. When the checkbox is checked, the form will include a key-value pair where the key is the `name` and the value is 'on' (by default).\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/checkbox.md#_snippet_8\n\nLANGUAGE: svelte\nCODE:\n```\n<MyCheckbox name=\"notifications\" labelText=\"Enable notifications\" />\n```\n\n----------------------------------------\n\nTITLE: Two-Way Binding for Open State (Svelte/TS)\nDESCRIPTION: This snippet illustrates how to use two-way binding with the `bind:open` directive to manage the open state of the Alert Dialog.  A simple `$state` variable `isOpen` is used to control the visibility of the dialog.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/alert-dialog.md#_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { AlertDialog } from \"bits-ui\";\n\tlet isOpen = $state(false);\n</script>\n\n<button onclick={() => (isOpen = true)}>Open Dialog</button>\n\n<AlertDialog.Root bind:open={isOpen}>\n\t<!-- ... -->\n</AlertDialog.Root>\n```\n\n----------------------------------------\n\nTITLE: DateRangePicker Value Fully Controlled in Svelte\nDESCRIPTION: This code snippet shows how to fully control the `value` state (the selected date range) of the DateRangePicker component using Bits UI in a Svelte application. It employs function bindings to handle both reading and writing to the state, allowing for customized data management.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/date-range-picker.md#_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { DateRangePicker, type DateRange } from \"bits-ui\";\n\tlet myValue = $state<DateRange>();\n\n\tfunction getValue() {\n\t\treturn myValue;\n\t}\n\n\tfunction setValue(newValue: DateRange) {\n\t\tmyValue = newValue;\n\t}\n</script>\n\n<DateRangePicker.Root bind:value={getValue, setValue}>\n\t<!-- ... -->\n</DateRangePicker.Root>\n```\n\n----------------------------------------\n\nTITLE: Using Reusable Menubar Components\nDESCRIPTION: Demonstrates how to use the `MyMenubarMenu` component within a `Menubar.Root` to create multiple menus. It defines data for sales, HR, and accounting departments and renders a custom menubar for each.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/menubar.md#_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Menubar } from \"bits-ui\";\n\timport MyMenubarMenu from \"./MyMenubarMenu.svelte\";\n\n\tconst sales = [\n\t\t{ label: \"Michael Scott\", value: \"michael\" },\n\t\t{ label: \"Dwight Schrute\", value: \"dwight\" },\n\t\t{ label: \"Jim Halpert\", value: \"jim\" },\n\t\t{ label: \"Stanley Hudson\", value: \"stanley\" },\n\t\t{ label: \"Phyllis Vance\", value: \"phyllis\" },\n\t\t{ label: \"Pam Beesly\", value: \"pam\" },\n\t\t{ label: \"Andy Bernard\", value: \"andy\" },\n\t];\n\n\tconst hr = [\n\t\t{ label: \"Toby Flenderson\", value: \"toby\" },\n\t\t{ label: \"Holly Flax\", value: \"holly\" },\n\t\t{ label: \"Jan Levinson\", value: \"jan\" },\n\t];\n\n\tconst accounting = [\n\t\t{ label: \"Angela Martin\", value: \"angela\" },\n\t\t{ label: \"Kevin Malone\", value: \"kevin\" },\n\t\t{ label: \"Oscar Martinez\", value: \"oscar\" },\n\t];\n\n\tconst menubarMenus = [\n\t\t{ title: \"Sales\", items: sales },\n\t\t{ title: \"HR\", items: hr },\n\t\t{ title: \"Accounting\", items: accounting },\n\t];\n</script>\n\n<Menubar.Root>\n\t{#each menubarMenus as { title, items }}\n\t\t<CustomMenubar triggerText={title} {items} />\n\t{/each}\n</Menubar.Root>\n```\n\n----------------------------------------\n\nTITLE: Fully Controlled PinInput (Svelte)\nDESCRIPTION: This example demonstrates how to fully control the PinInput's value state using function bindings. It imports the PinInput component, declares a reactive state variable `myValue`, and defines `getValue` and `setValue` functions to control reads and writes to `myValue`. The PinInput.Root is bound to these functions using `bind:value={getValue, setValue}`.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/pin-input.md#_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { PinInput } from \"bits-ui\";\n\tlet myValue = $state(\"\");\n\n\tfunction getValue() {\n\t\treturn myValue;\n\t}\n\n\tfunction setValue(newValue: string) {\n\t\tmyValue = newValue;\n\t}\n</script>\n\n<PinInput.Root bind:value={getValue, setValue}>\n\t<!-- ... -->\n</PinInput.Root>\n```\n\n----------------------------------------\n\nTITLE: Fully Controlled Placeholder Svelte\nDESCRIPTION: Demonstrates how to manage the placeholder state of the DateRangeField component using a Function Binding for complete control over the state's reads and writes. This approach requires defining getter and setter functions. Requires the 'bits-ui' and '@internationalized/date' packages.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/date-range-field.md#_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { DateRangeField } from \"bits-ui\";\n\timport { CalendarDateTime } from \"@internationalized/date\";\n\tlet myPlaceholder = $state(new CalendarDateTime(2024, 8, 3, 12, 30));\n\n\tfunction getPlaceholder() {\n\t\treturn myPlaceholder;\n\t}\n\n\tfunction setPlaceholder(newPlaceholder: CalendarDateTime) {\n\t\tmyPlaceholder = newPlaceholder;\n\t}\n</script>\n\n<DateRangeField.Root bind:placeholder={getPlaceholder, setPlaceholder}>\n\t<!-- ... -->\n</DateRangeField.Root>\n```\n\n----------------------------------------\n\nTITLE: Fully Controlled Command Svelte\nDESCRIPTION: This snippet demonstrates a fully controlled Command component in Svelte using a function binding. It initializes a local state variable `myValue` and provides both a getter and a setter function to the `bind:value` directive, giving complete control over how the value is updated and retrieved.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/command.md#_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Command } from \"bits-ui\";\n\tlet myValue = $state(\"\");\n</script>\n\n<Command.Root bind:value={() => myValue, (newValue) => (myValue = newValue)}>\n\t<!-- ... -->\n</Command.Root>\n```\n\n----------------------------------------\n\nTITLE: Multiple Thumbs and Ticks Configuration\nDESCRIPTION: Demonstrates how to configure the Slider component to render multiple thumbs and ticks, by providing multiple values for the value array. It also shows how to use the `ticks` snippet prop to render ticks at specific intervals.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/slider.md#_snippet_6\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Slider } from \"bits-ui\";\n\n\t// we have two numbers in the array, so the slider will render two thumbs\n\tlet value = $state([5, 7]);\n</script>\n\n<Slider.Root type=\"multiple\" min={0} max={10} step={1} bind:value>\n\t{#snippet children({ ticks, thumbs })}\n\t\t<Slider.Range />\n\n\t\t{#each thumbs as index}\n\t\t\t<Slider.Thumb {index} />\n\t\t{/each}\n\n\t\t{#each ticks as index}\n\t\t\t<Slider.Tick {index} />\n\t\t{/each}\n\t{/snippet}\n</Slider.Root>\n```\n\n----------------------------------------\n\nTITLE: Accordion Svelte Transitions Example\nDESCRIPTION: This snippet demonstrates how to apply Svelte transitions to the Accordion.Content component using the forceMount prop and child snippet. This allows for custom animations when the content is expanded or collapsed, such as a slide transition.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/accordion.md#_snippet_6\n\nLANGUAGE: svelte\nCODE:\n```\n<Accordion.Content forceMount={true}>\n\t{#snippet child({ props, open })}\n\t\t{#if open}\n\t\t\t<div {...props} transition:slide={{ duration: 1000 }}>\n\t\t\t\tThis is the accordion content that will transition in and out.\n\t\t\t</div>\n\t\t{/if}\n\t{/snippet}\n</Accordion.Content>\n```\n\n----------------------------------------\n\nTITLE: Reusable Meter Component (bits-ui)\nDESCRIPTION: Demonstrates creating a reusable Meter component using the base Meter primitive from 'bits-ui'.  It defines properties for max, value, min, label, and valueLabel to customize the meter. The useId function is used to generate a unique ID for the label.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/meter.md#_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Meter, useId } from \"bits-ui\";\n\timport type { ComponentProps } from \"svelte\";\n\n\tlet {\n\t\tmax = 100,\n\t\tvalue = 0,\n\t\tmin = 0,\n\t\tlabel,\n\t\tvalueLabel,\n\t}: ComponentProps<typeof Meter.Root> & {\n\t\tlabel: string;\n\t\tvalueLabel: string;\n\t} = $props();\n\n\tconst labelId = useId();\n</script>\n\n<div>\n\t<span id={labelId}> {label} </span>\n\t<span>{valueLabel}</span>\n</div>\n<Meter.Root aria-labelledby={labelId} aria-valuetext={valueLabel} {value} {min} {max} />\n```\n\n----------------------------------------\n\nTITLE: Paste Transformation in PinInput (Svelte)\nDESCRIPTION: This code shows how to use the `pasteTransformer` prop to sanitize pasted text in the PinInput component.  It imports the PinInput component and provides a `pasteTransformer` function that removes hyphens from the pasted text using the `replace` method.  This cleaned text will be used as the new value of the PinInput.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/pin-input.md#_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { PinInput } from \"bits-ui\";\n</script>\n\n<PinInput.Root pasteTransformer={(text) => text.replace(/-/g, \"\")}>\n\t<!-- ... -->\n</PinInput.Root>\n```\n\n----------------------------------------\n\nTITLE: Radio Group Structure - Svelte\nDESCRIPTION: Illustrates the basic structure of a Radio Group using Bits-UI components. It imports the `RadioGroup` component and uses `RadioGroup.Root` and `RadioGroup.Item` to define the radio group and its items.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/radio-group.md#_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { RadioGroup } from \"bits-ui\";\n</script>\n\n<RadioGroup.Root>\n\t<RadioGroup.Item>\n\t\t{#snippet children({ checked })}\n\t\t\t{#if checked}\n\t\t\t\t✅\n\t\t\t{/if}\n\t\t{/snippet}\n\t</RadioGroup.Item>\n</RadioGroup.Root>\n```\n\n----------------------------------------\n\nTITLE: Fully Controlled Open State (Svelte/TS)\nDESCRIPTION: This snippet demonstrates how to fully control the open state of the Alert Dialog using function bindings. It defines `getOpen` and `setOpen` functions to read and update the `myOpen` state variable, providing complete control over the dialog's visibility.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/alert-dialog.md#_snippet_5\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { AlertDialog } from \"bits-ui\";\n\tlet myOpen = $state(false);\n\n\tfunction getOpen() {\n\t\treturn myOpen;\n\t}\n\n\tfunction setOpen(newOpen: boolean) {\n\t\tmyOpen = newOpen;\n\t}\n</script>\n\n<AlertDialog.Root bind:open={getOpen, setOpen}>\n\t<!-- ... -->\n</AlertDialog.Root>\n```\n\n----------------------------------------\n\nTITLE: Switch with Custom Input Value Svelte\nDESCRIPTION: Illustrates setting a custom value for the hidden input element when using the Switch component in HTML forms. By setting the value prop on Switch.Root, you can specify a custom value that will be submitted instead of the default 'on' value, offering more control over the submitted form data.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/switch.md#_snippet_7\n\nLANGUAGE: svelte\nCODE:\n```\n<Switch.Root name=\"dnd\" value=\"hello\">\n\t<!-- ... -->\n\t<Switch.Thumb />\n</Switch.Root>\n```\n\n----------------------------------------\n\nTITLE: Two-Way Binding for Value\nDESCRIPTION: Demonstrates using two-way binding (`bind:value`) to synchronize the selected value of the Select component with a state variable.  This approach provides a simple way to automatically update the state when the selection changes.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/select.md#_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Select } from \"bits-ui\";\n\tlet myValue = $state(\"\");\n</script>\n\n<button onclick={() => (myValue = \"A\")}> Select A </button>\n\n<Select.Root type=\"single\" bind:value={myValue}>\n\t<!-- ... -->\n</Select.Root>\n```\n\n----------------------------------------\n\nTITLE: Managing Open State with Two-Way Binding - Svelte\nDESCRIPTION: Illustrates managing the open state of a Dropdown Menu using two-way binding with the `bind:open` directive. This allows for simple and automatic synchronization of the menu's open state with a state variable.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/dropdown-menu.md#_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { DropdownMenu } from \"bits-ui\";\n\tlet isOpen = $state(false);\n</script>\n\n<button onclick={() => (isOpen = true)}>Open Context Menu</button>\n\n<DropdownMenu.Root bind:open={isOpen}>\n\t<!-- ... -->\n</DropdownMenu.Root>\n```\n\n----------------------------------------\n\nTITLE: Reusable DateField Component Svelte\nDESCRIPTION: Illustrates how to create a reusable DateField component in Svelte, named `MyDateField`. This component simplifies the use of DateField across an application by encapsulating common properties like label text and placeholder.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/date-field.md#_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { DateField, type WithoutChildrenOrChild } from \"bits-ui\";\n\n\ttype Props = WithoutChildrenOrChild<DateField.RootProps> & {\n\t\tlabelText: string;\n\t};\n\n\tlet { value, placeholder, name, ...restProps }: Props = $props();\n</script>\n\n<DateField.Root bind:value bind:placeholder {name} {...restProps}>\n\t<DateField.Label>{labelText}</DateField.Label>\n\t<DateField.Input>\n\t\t{#snippet children({ segments })}\n\t\t\t{#each segments as { part, value }}\n\t\t\t\t<DateField.Segment {part}>\n\t\t\t\t\t{value}\n\t\t\t\t</DateField.Segment>\n\t\t\t{/each}\n\t\t{/snippet}\n\t</DateField.Input>\n</DateField.Root>\n```\n\n----------------------------------------\n\nTITLE: Custom Collapsible Component Svelte/TS\nDESCRIPTION: Demonstrates how to create a reusable custom collapsible component (MyCollapsible.svelte) using the Collapsible primitives from 'bits-ui'.  It defines properties for the component, including buttonText and children, and uses the Root, Trigger, and Content components to build the custom collapsible. It showcases how to use 'WithoutChild' type to define properties.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/collapsible.md#_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Collapsible, type WithoutChild } from \"bits-ui\";\n\n\ttype Props = WithoutChild<Collapsible.RootProps> & {\n\t\tbuttonText: string;\n\t};\n\n\tlet {\n\t\topen = $bindable(false),\n\t\tref = $bindable(null),\n\t\tbuttonText,\n\t\tchildren,\n\t\t...restProps\n\t}: Props = $props();\n</script>\n\n<Collapsible.Root bind:open bind:ref {...restProps}>\n\t<Collapsible.Trigger>{buttonText}</Collapsible.Trigger>\n\t<Collapsible.Content>\n\t\t{@render children?.()}\n\t</Collapsible.Content>\n</Collapsible.Root>\n```\n\n----------------------------------------\n\nTITLE: Reusable Alert Dialog Component (Svelte/TS)\nDESCRIPTION: This snippet defines a reusable Alert Dialog component named `MyAlertDialog` using Svelte and TypeScript. It allows customization of button text, title, description, and other content via props, making it easy to reuse across different parts of an application.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/alert-dialog.md#_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport type { Snippet } from \"svelte\";\n\timport { AlertDialog, type WithoutChild } from \"bits-ui\";\n\n\ttype Props = AlertDialog.RootProps & {\n\t\tbuttonText: string;\n\t\ttitle: Snippet;\n\t\tdescription: Snippet;\n\t\tcontentProps?: WithoutChild<AlertDialog.ContentProps>;\n\t\t// ...other component props if you wish to pass them\n\t};\n\n\tlet {\n\t\topen = $bindable(false),\n\t\tchildren,\n\t\tbuttonText,\n\t\tcontentProps,\n\t\ttitle,\n\t\tdescription,\n\t\t...restProps\n\t}: Props = $props();\n</script>\n\n<AlertDialog.Root bind:open {...restProps}>\n\t<AlertDialog.Trigger>\n\t\t{buttonText}\n\t</AlertDialog.Trigger>\n\t<AlertDialog.Portal>\n\t\t<AlertDialog.Overlay />\n\t\t<AlertDialog.Content {...contentProps}>\n\t\t\t<AlertDialog.Title>\n\t\t\t\t{@render title()}\n\t\t\t</AlertDialog.Title>\n\t\t\t<AlertDialog.Description>\n\t\t\t\t{@render description()}\n\t\t\t</AlertDialog.Description>\n\t\t\t{@render children?.()}\n\t\t\t<AlertDialog.Cancel>Cancel</AlertDialog.Cancel>\n\t\t\t<AlertDialog.Action>Confirm</AlertDialog.Action>\n\t\t</AlertDialog.Content>\n\t</AlertDialog.Portal>\n</AlertDialog.Root>\n```\n\n----------------------------------------\n\nTITLE: Tabs Activation Mode Svelte\nDESCRIPTION: Illustrates how to configure the Tabs component's activation mode to manual, preventing automatic activation of the tab when its trigger is focused. This is achieved by setting the `activationMode` prop to 'manual'. Requires importing Tabs from the bits-ui library.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/tabs.md#_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<Tabs.Root activationMode=\"manual\">\n\t<!-- ... -->\n</Tabs.Root>\n```\n\n----------------------------------------\n\nTITLE: Switch with Name Prop for HTML Forms Svelte\nDESCRIPTION: Demonstrates how to integrate the Switch component with HTML forms by setting the name prop on Switch.Root.  This will render a hidden input element that will be submitted with the form, allowing the switch's value to be included in the form data.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/switch.md#_snippet_6\n\nLANGUAGE: svelte\nCODE:\n```\n<Switch.Root name=\"dnd\">\n\t<!-- ... -->\n</Switch.Root>\n```\n\n----------------------------------------\n\nTITLE: Custom Combobox Usage Example (Svelte/TS)\nDESCRIPTION: Shows how to use the `CustomCombobox` component with a predefined list of items.  It imports the custom component and passes an array of objects with `value` and `label` properties.  This demonstrates the basic setup required to display a list of options in the custom combobox.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/combobox.md#_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { CustomCombobox } from \"$lib/components\";\n\n\tconst items = [\n\t\t{ value: \"mango\", label: \"Mango\" },\n\t\t{ value: \"watermelon\", label: \"Watermelon\" },\n\t\t{ value: \"apple\", label: \"Apple\" },\n\t\t// ...\n\t];\n</script>\n\n<CustomCombobox {items} />\n```\n\n----------------------------------------\n\nTITLE: DateRangePicker Open State Fully Controlled in Svelte\nDESCRIPTION: This code snippet provides an example of fully controlling the `open` state of a DateRangePicker component using Bits UI in a Svelte application. It defines `getOpen` and `setOpen` functions that act as getter and setter, enabling more customized logic for managing the component's open/closed state.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/date-range-picker.md#_snippet_6\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { DateRangePicker } from \"bits-ui\";\n\tlet myOpen = $state(false);\n\n\tfunction getOpen() {\n\t\treturn myOpen;\n\t}\n\n\tfunction setOpen(newOpen: boolean) {\n\t\tmyOpen = newOpen;\n\t}\n</script>\n\n<DateRangePicker.Root bind:open={getOpen, setOpen}>\n\t<!-- ... -->\n</DateRangePicker.Root>\n```\n\n----------------------------------------\n\nTITLE: Combobox Open State Two-Way Binding (Svelte/TS)\nDESCRIPTION: Shows how to use two-way binding with `bind:open` to manage the Combobox's open state.  It initializes a reactive variable `myOpen` to false, and binds it to the open prop of the Combobox. Clicking the button updates `myOpen`, which in turn opens the Combobox.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/combobox.md#_snippet_5\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Combobox } from \"bits-ui\";\n\tlet myOpen = $state(false);\n</script>\n\n<button onclick={() => (myOpen = true)}> Open </button>\n\n<Combobox.Root bind:open={myOpen}>\n\t<!-- ... -->\n</Combobox.Root>\n```\n\n----------------------------------------\n\nTITLE: Using the Reusable Radio Group - Svelte\nDESCRIPTION: Shows how to use the custom `MyRadioGroup` component in a page. It defines an array of items with values, labels, and a disabled state, and passes them to the `MyRadioGroup` component.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/radio-group.md#_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport MyRadioGroup from \"$lib/components/MyRadioGroup.svelte\";\n\n\tconst myItems = [\n\t\t{ value: \"apple\", label: \"Apple\" },\n\t\t{ value: \"banana\", label: \"Banana\" },\n\t\t{ value: \"coconut\", label: \"Coconut\", disabled: true },\n\t];\n</script>\n\n<MyRadioGroup items={myItems} name=\"favoriteFruit\" />\n```\n\n----------------------------------------\n\nTITLE: Fully Controlled Indeterminate State Svelte\nDESCRIPTION: Illustrates how to fully control the `indeterminate` state of a Checkbox using function bindings. It defines getter and setter functions, `getIndeterminate` and `setIndeterminate`, to manage the `myIndeterminate` state, and then binds these functions to the `bind:indeterminate` prop of the `Checkbox.Root`. This provides complete control over reading and writing the indeterminate state.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/checkbox.md#_snippet_6\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Checkbox } from \"bits-ui\";\n\tlet myIndeterminate = $state(true);\n\n\tfunction getIndeterminate() {\n\t\treturn myIndeterminate;\n\t}\n\n\tfunction setIndeterminate(newIndeterminate: boolean) {\n\t\tmyIndeterminate = newIndeterminate;\n\t}\n</script>\n\n<Checkbox.Root bind:indeterminate={getIndeterminate, setIndeterminate}>\n\t<!-- ... -->\n</Checkbox.Root>\n```\n\n----------------------------------------\n\nTITLE: Change Handler with Command Svelte\nDESCRIPTION: This snippet shows how to use the `onValueChange` prop with the Command component in Svelte to execute additional logic when the value changes. It passes a function to `onValueChange` that logs the new value to the console. This is useful for implementing custom behaviors or integrating with external state management solutions.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/command.md#_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Command } from \"bits-ui\";\n</script>\n\n<Command.Root\n\tonValueChange={(value) => {\n\t\t// do something with the new value\n\t\tconsole.log(value);\n\t}}\n>\n\t<!-- ... -->\n</Command.Root>\n```\n\n----------------------------------------\n\nTITLE: Popover Two-Way Binding Svelte\nDESCRIPTION: Illustrates managing the open state of the Popover component using two-way binding with `bind:open`. It defines a reactive variable `isOpen` using `$state` and binds it to the `open` prop of the `Popover.Root` component. A button is used to toggle the popover's open state.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/popover.md#_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Popover } from \"bits-ui\";\n\tlet isOpen = $state(false);\n</script>\n\n<button onclick={() => (isOpen = true)}>Open Popover</button>\n\n<Popover.Root bind:open={isOpen}>\n\t<!-- ... -->\n</Popover.Root>\n```\n\n----------------------------------------\n\nTITLE: Popover Fully Controlled Svelte\nDESCRIPTION: Demonstrates managing the open state of the Popover component using a fully controlled approach with function bindings. It defines `getOpen` and `setOpen` functions to control the `myOpen` state variable and binds these functions to the `open` prop of the `Popover.Root` component.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/popover.md#_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Popover } from \"bits-ui\";\n\tlet myOpen = $state(false);\n\n\tfunction getOpen() {\n\t\treturn myOpen;\n\t}\n\n\tfunction setOpen(newOpen: boolean) {\n\t\tmyOpen = newOpen;\n\t}\n</script>\n\n<Popover.Root bind:open={getOpen, setOpen}>\n\t<!-- ... -->\n</Popover.Root>\n```\n\n----------------------------------------\n\nTITLE: Fully Controlled Value Svelte\nDESCRIPTION: Demonstrates fully controlled state management for the `value` prop of the Calendar component using Svelte. It uses function bindings (`getValue`, `setValue`) to manage the `value` state, providing complete control over reads and writes to the `myValue` state variable.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/calendar.md#_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Calendar } from \"bits-ui\";\n\timport type { DateValue } from \"@internationalized/date\";\n\tlet myValue = $state();\n\n\tfunction getValue() {\n\t\treturn myValue;\n\t}\n\n\tfunction setValue(newValue: DateValue) {\n\t\tmyValue = newValue;\n\t}\n</script>\n\n<Calendar.Root type=\"single\" bind:value={getValue, setValue}>\n\t<!-- ... -->\n</Calendar.Root>\n```\n\n----------------------------------------\n\nTITLE: Fully Controlled Collapsible Svelte/TS\nDESCRIPTION: Demonstrates how to fully control the `open` state of the Collapsible component using function bindings. It defines `getOpen` and `setOpen` functions to read and write the `myOpen` state variable, and binds these functions to the `open` prop of the Collapsible.Root component.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/collapsible.md#_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Collapsible } from \"bits-ui\";\n\tlet myOpen = $state(false);\n\n\tfunction getOpen() {\n\t\treturn myOpen;\n\t}\n\n\tfunction setOpen(newOpen: boolean) {\n\t\tmyOpen = newOpen;\n\t}\n</script>\n\n<Collapsible.Root bind:open={getOpen, setOpen}>\n\t<!-- ... -->\n</Collapsible.Root>\n```\n\n----------------------------------------\n\nTITLE: Popover Structure Svelte\nDESCRIPTION: Demonstrates the basic structure of the Popover component using Svelte and TypeScript. It imports the Popover component from 'bits-ui' and shows the nested structure of Root, Trigger, Content, Close, and Arrow components.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/popover.md#_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Popover } from \"bits-ui\";\n</script>\n\n<Popover.Root>\n\t<Popover.Trigger />\n\t<Popover.Content>\n\t\t<Popover.Close />\n\t\t<Popover.Arrow />\n\t</Popover.Content>\n</Popover.Root>\n```\n\n----------------------------------------\n\nTITLE: Two-Way Binding Value Svelte\nDESCRIPTION: Illustrates two-way binding with `bind:value` for the DateField. This allows for simple and automatic state synchronization of the value with a Svelte reactive statement.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/date-field.md#_snippet_6\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { DateField } from \"bits-ui\";\n\timport { CalendarDateTime } from \"@internationalized/date\";\n\tlet myValue = $state(new CalendarDateTime(2024, 8, 3, 12, 30));\n</script>\n\n<button onclick={() => (myValue = myValue.add({ days: 1 }))}> Add 1 day </button>\n<DateField.Root bind:value={myValue}>\n\t<!-- ... -->\n</DateField.Root>\n```\n\n----------------------------------------\n\nTITLE: Custom Button with Child Snippet (Svelte/TS)\nDESCRIPTION: Illustrates how to use the `child` snippet to replace the default button element in `Accordion.Trigger` with a custom button component (`MyCustomButton`) or a styled HTML button.  The `props` parameter contains all necessary attributes and event handlers which are spread onto the custom element using `{...props}`.  This snippet shows how to maintain functionality while customizing the appearance and behavior.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/child-snippet.md#_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport MyCustomButton from \"$lib/components\";\n\timport { Accordion } from \"bits-ui\";\n</script>\n\n<Accordion.Trigger>\n\t{#snippet child({ props })}\n\t\t<MyCustomButton {...props}>Toggle Item</MyCustomButton>\n\t{/snippet}\n</Accordion.Trigger>\n\n<!-- or -->\n\n<Accordion.Trigger>\n\t{#snippet child({ props })}\n\t\t<button {...props} class=\"scoped-button\">Toggle Item</button>\n\t{/snippet}\n</Accordion.Trigger>\n\n<style>\n\t.scoped-button {\n\t\tbackground-color: #3182ce;\n\t\tcolor: #fff;\n\t}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Default Value Svelte\nDESCRIPTION: Demonstrates setting a default value for the Calendar component using Svelte and the `@internationalized/date` package.  It parses an ISO 8601 date string into a `CalendarDate` object and passes it to the `value` prop of the `Calendar.Root` component, setting the initial selected date.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/calendar.md#_snippet_5\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Calendar } from \"bits-ui\";\n\timport { parseDate } from \"@internationalized/date\";\n\n\t// this came from a database/API call\n\tconst date = \"2024-08-03\";\n\n\tlet value = $state(parseDate(date));\n</script>\n\n<Calendar.Root {value}>\n\t<!-- ...-->\n</Calendar.Root>\n```\n\n----------------------------------------\n\nTITLE: Custom Reusable Context Menu Component in Svelte\nDESCRIPTION: Demonstrates creating a reusable context menu component in Svelte using bits-ui. This allows for easier reuse and customization of context menus throughout the application. The component accepts props for trigger content, item list, and content properties. Requires Svelte and bits-ui. Input: Array of strings for items, a Svelte Snippet for the trigger. Output: A rendered context menu.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/context-menu.md#_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport type { Snippet } from \"svelte\";\n\timport { ContextMenu, type WithoutChild } from \"bits-ui\";\n\ttype Props = ContextMenu.Props & {\n\t\ttrigger: Snippet;\n\t\titems: string[];\n\t\tcontentProps?: WithoutChild<ContextMenu.Content.Props>;\n\t\t// other component props if needed\n\t};\n\tlet {\n\t\topen = $bindable(false),\n\t\tchildren,\n\t\ttrigger,\n\t\titems,\n\t\tcontentProps,\n\t\t...restProps\n\t}: Props = $props();\n</script>\n\n<ContextMenu.Root bind:open {...restProps}>\n\t<ContextMenu.Trigger>\n\t\t{@render trigger()}\n\t</ContextMenu.Trigger>\n\t<ContextMenu.Portal>\n\t\t<ContextMenu.Content {...contentProps}>\n\t\t\t<ContextMenu.Group>\n\t\t\t\t<ContextMenu.GroupHeading>Select an Office</ContextMenu.GroupHeading>\n\t\t\t\t{#each items as item}\n\t\t\t\t\t<ContextMenu.Item textValue={item}>\n\t\t\t\t\t\t{item}\n\t\t\t\t\t</ContextMenu.Item>\n\t\t\t\t{/each}\n\t\t\t</ContextMenu.Group>\n\t\t</ContextMenu.Content>\n\t</ContextMenu.Portal>\n</ContextMenu.Root>\n\n```\n\n----------------------------------------\n\nTITLE: LinkPreview Custom Anchor Svelte\nDESCRIPTION: Illustrates how to use a custom anchor element for the LinkPreview content.  It binds a div element to the `customAnchor` variable and passes it as a prop to the `LinkPreview.Content` component.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/link-preview.md#_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { LinkPreview } from \"bits-ui\";\n\tlet customAnchor = $state<HTMLElement>(null!);\n</script>\n\n<div bind:this={customAnchor}></div>\n\n<LinkPreview.Root>\n\t<LinkPreview.Trigger />\n\t<LinkPreview.Content {customAnchor}>\n\t\t<!-- ... -->\n\t</LinkPreview.Content>\n</LinkPreview.Root>\n```\n\n----------------------------------------\n\nTITLE: Minimum Value Validation Svelte\nDESCRIPTION: Demonstrates setting a minimum selectable date for the Calendar component using Svelte. It utilizes `today` and `getLocalTimeZone` from `@internationalized/date` to define today's date. It then subtracts one day to create a 'yesterday' date. Setting the `minValue` prop on `Calendar.Root` to `todayDate` and attempting to initialize the component with 'yesterday' will enforce the minimum value constraint.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/calendar.md#_snippet_6\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Calendar } from \"bits-ui\";\n\timport { today, getLocalTimeZone } from \"@internationalized/date\";\n\n\tconst todayDate = today(getLocalTimeZone());\n\tconst yesterday = todayDate.subtract({ days: 1 });\n</script>\n\n<Calendar.Root minValue={todayDate} value={yesterday}>\n\t<!-- ...-->\n</Calendar.Root>\n```\n\n----------------------------------------\n\nTITLE: HTML Forms Integration\nDESCRIPTION: Illustrates how to integrate the Slider component with HTML forms by manually creating hidden input elements to submit the slider's values. Shows how to handle both single and multiple value sliders in a form.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/slider.md#_snippet_12\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport MySlider from \"$lib/components/MySlider.svelte\";\n\n\tlet expectedIncome = $state([50, 100]);\n\tlet desiredIncome = $state(50);\n</script>\n\n<form method=\"POST\">\n\t<MySlider type=\"multiple\" bind:value={expectedIncome} />\n\t<input type=\"hidden\" name=\"expectedIncomeStart\" value={expectedIncome[0]} />\n\t<input type=\"hidden\" name=\"expectedIncomeEnd\" value={expectedIncome[1]} />\n\t<MySlider type=\"single\" bind:value={desiredIncome} />\n\t<input type=\"hidden\" name=\"expectedIncomeEnd\" value={desiredIncome} />\n\t<button type=\"submit\">Submit</button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Toggle Two-Way Binding Svelte\nDESCRIPTION: Illustrates how to use two-way binding to manage the `pressed` state of the Toggle component in Svelte. It imports the Toggle component, defines a reactive state variable `myPressed`, and binds it to the `pressed` prop of Toggle.Root.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/toggle.md#_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Toggle } from \"bits-ui\";\n\tlet myPressed = $state(true);\n</script>\n\n<button onclick={() => (myPressed = false)}> un-press </button>\n\n<Toggle.Root bind:pressed={myPressed} />\n```\n\n----------------------------------------\n\nTITLE: Multiple Selection\nDESCRIPTION: Demonstrates how to enable multiple selection in the `Select` component by setting the `type` prop to `'multiple'`.  This example includes initializing the value as an array of strings.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/select.md#_snippet_7\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Select } from \"bits-ui\";\n\n\tlet value = $state<string[]>([])\n</script>\n\n<Select.Root type=\"multiple\" bind:value>\n\t<!-- ... -->\n</Select.Root>\n```\n\n----------------------------------------\n\nTITLE: Styling an Accordion with Different States in Svelte\nDESCRIPTION: This snippet provides a comprehensive example of styling an Accordion component with different states using data attributes and CSS. It includes base styles, trigger styles based on state, and content styles.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/styling.md#_snippet_9\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Accordion } from \"bits-ui\";\n</script>\n\n<Accordion.Root>\n\t<Accordion.Item value=\"item-1\">\n\t\t<Accordion.Trigger>Section 1</Accordion.Trigger>\n\t\t<Accordion.Content>Content for section 1</Accordion.Content>\n\t</Accordion.Item>\n\t<Accordion.Item value=\"item-2\">\n\t\t<Accordion.Trigger disabled>Section 2 (Disabled)</Accordion.Trigger>\n\t\t<Accordion.Content>Content for section 2</Accordion.Content>\n\t</Accordion.Item>\n</Accordion.Root>\n\n<style>\n\t/* Base styles */\n\t:global([data-accordion-item]) {\n\t\tborder: 1px solid #e2e8f0;\n\t\tborder-radius: 0.25rem;\n\t\tmargin-bottom: 0.5rem;\n\t}\n\n\t/* Trigger styles based on state */\n\t:global([data-accordion-trigger]) {\n\t\twidth: 100%;\n\t\tpadding: 1rem;\n\t\tdisplay: flex;\n\t\tjustify-content: space-between;\n\t\talign-items: center;\n\t}\n\n\t:global([data-accordion-trigger][data-state=\"open\"]) {\n\t\tbackground-color: #f7fafc;\n\t\tborder-bottom: 1px solid #e2e8f0;\n\t}\n\n\t:global([data-accordion-trigger][data-disabled]) {\n\t\topacity: 0.5;\n\t\tcursor: not-allowed;\n\t}\n\n\t/* Content styles */\n\t:global([data-accordion-content]) {\n\t\tpadding: 1rem;\n\t}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Radio Group Required Prop - Svelte\nDESCRIPTION: Demonstrates how to set the `required` prop on the `RadioGroup.Root` component to make the hidden input element required for form submission.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/radio-group.md#_snippet_6\n\nLANGUAGE: svelte\nCODE:\n```\n<RadioGroup.Root required>\n\t<!-- ... -->\n</RadioGroup.Root>\n```\n\n----------------------------------------\n\nTITLE: DateRangePicker Open State Two-Way Binding in Svelte\nDESCRIPTION: This code demonstrates how to use two-way binding with the `open` property of the DateRangePicker component using Bits UI in a Svelte application. The `isOpen` variable controls whether the DateRangePicker is visible, toggled by a button.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/date-range-picker.md#_snippet_5\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { DateRangePicker } from \"bits-ui\";\n\tlet isOpen = $state(false);\n</script>\n\n<button onclick={() => (isOpen = true)}>Open DateRangePicker</button>\n\n<DateRangePicker.Root bind:open={isOpen}>\n\t<!-- ... -->\n</DateRangePicker.Root>\n```\n\n----------------------------------------\n\nTITLE: Two-Way Binding for Open State\nDESCRIPTION: Demonstrates using two-way binding (`bind:open`) to control the open state of the Select component. The example shows how to link the component's open state to a state variable, allowing external control via a button click.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/select.md#_snippet_5\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Select } from \"bits-ui\";\n\tlet myOpen = $state(false);\n</script>\n\n<button onclick={() => (myOpen = true)}> Open </button>\n\n<Select.Root bind:open={myOpen}>\n\t<!-- ... -->\n</Select.Root>\n```\n\n----------------------------------------\n\nTITLE: Switch Component Structure Svelte\nDESCRIPTION: Demonstrates the basic structure of the Switch component using Switch.Root and Switch.Thumb from the bits-ui library. This snippet imports the Switch component and renders a basic switch with a root and thumb.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/switch.md#_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Switch } from \"bits-ui\";\n</script>\n\n<Switch.Root>\n\t<Switch.Thumb />\n</Switch.Root>\n```\n\n----------------------------------------\n\nTITLE: Default Value with ParseDate Svelte\nDESCRIPTION: Shows how to initialize the DateField with a default value parsed from an ISO 8601 string using the `parseDate` function from `@internationalized/date`.  The database/API call returns a date string which is then parsed.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/date-field.md#_snippet_8\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { DateField } from \"bits-ui\";\n\timport { parseDate } from \"@internationalized/date\";\n\n\t// this came from a database/API call\n\tconst date = \"2024-08-03\";\n\n\tlet value = $state(parseDate(date));\n</script>\n\n<DateField.Root {value}>\n\t<!-- ... -->\n</DateField.Root>\n```\n\n----------------------------------------\n\nTITLE: Fully Controlled Checkbox State Svelte\nDESCRIPTION: Illustrates how to fully control the `checked` state of a Checkbox using function bindings. It defines getter and setter functions, `getChecked` and `setChecked`, to manage the `myChecked` state, and then binds these functions to the `bind:checked` prop of the `Checkbox.Root`. This provides complete control over reading and writing the state.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/checkbox.md#_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Checkbox } from \"bits-ui\";\n\tlet myChecked = $state(false);\n\n\tfunction getChecked() {\n\t\treturn myChecked;\n\t}\n\n\tfunction setChecked(newChecked: boolean) {\n\t\tmyChecked = newChecked;\n\t}\n</script>\n\n<Checkbox.Root bind:checked={getChecked, setChecked}>\n\t<!-- ... -->\n</Checkbox.Root>\n```\n\n----------------------------------------\n\nTITLE: Fully Controlled Value Svelte\nDESCRIPTION: Demonstrates managing the DateRangeField's value state using a Function Binding in Svelte, allowing full control over reads and writes. Getter and setter functions for `myValue` are defined. Requires the 'bits-ui' package.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/date-range-field.md#_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { DateRangeField } from \"bits-ui\";\n\tlet myValue = $state<DateRange>({\n\t\tstart: undefined,\n\t\tend: undefined,\n\t});\n\n\tfunction getValue() {\n\t\treturn myValue;\n\t}\n\n\tfunction setValue(newValue: DateRange) {\n\t\tmyValue = newValue;\n\t}\n</script>\n\n<DateRangeField.Root bind:value={getValue, setValue}>\n\t<!-- ... -->\n</DateRangeField.Root>\n```\n\n----------------------------------------\n\nTITLE: Custom Collapsible Content with Transition Svelte/TS\nDESCRIPTION: Demonstrates creating a reusable custom component, MyCollapsibleContent.svelte, that applies a Svelte transition to the Collapsible.Content. It uses the `forceMount` prop and the `child` snippet for the content.  It includes properties for duration of the transition and the content to be rendered.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/collapsible.md#_snippet_6\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Collapsible, type WithoutChildrenOrChild } from \"bits-ui\";\n\timport { fade } from \"svelte/transition\";\n\timport type { Snippet } from \"svelte\";\n\n\tlet {\n\t\tref = $bindable(null),\n\t\tduration = 200,\n\t\tchildren,\n\t\t...restProps\n\t}: WithoutChildrenOrChild<Collapsible.ContentProps> & {\n\t\tduration?: number;\n\t\tchildren?: Snippet;\n\t} = $props();\n</script>\n\n<Collapsible.Content forceMount bind:ref {...restProps}>\n\t{#snippet child({ props, open })}\n\t\t{#if open}\n\t\t\t<div {...props} transition:fade={{ duration }}>\n\t\t\t\t{@render children?.()}\n\t\t\t</div>\n\t\t{/if}\n\t{/snippet}\n</Collapsible.Content>\n```\n\n----------------------------------------\n\nTITLE: Fully Controlled Slider\nDESCRIPTION: Explains how to use Function Bindings to have complete control over the slider's value. Shows how to define `getValue` and `setValue` functions to manage the state of the slider.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/slider.md#_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Slider } from \"bits-ui\";\n\tlet myValue = $state(0);\n\n\tfunction getValue() {\n\t\treturn myValue;\n\t}\n\n\tfunction setValue(newValue: number) {\n\t\tmyValue = newValue;\n\t}\n</script>\n\n<Slider.Root type=\"single\" bind:value={getValue, setValue}>\n\t<!-- ... -->\n</Slider.Root>\n```\n\n----------------------------------------\n\nTITLE: Menubar Nested Menus\nDESCRIPTION: Shows how to create nested menus using the `Menubar.Sub`, `Menubar.SubTrigger`, and `Menubar.SubContent` components.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/menubar.md#_snippet_7\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Menubar } from \"bits-ui\";\n</script>\n\n<Menubar.Content>\n\t<Menubar.Item>Item 1</Menubar.Item>\n\t<Menubar.Item>Item 2</Menubar.Item>\n\t<Menubar.Sub>\n\t\t<Menubar.SubTrigger>Open Sub Menu</Menubar.SubTrigger>\n\t\t<Menubar.SubContent>\n\t\t\t<Menubar.Item>Sub Item 1</Menubar.Item>\n\t\t\t<Menubar.Item>Sub Item 2</Menubar.Item>\n\t\t</Menubar.SubContent>\n\t</Menubar.Sub>\n</Menubar.Content>\n```\n\n----------------------------------------\n\nTITLE: Value Commit Callback\nDESCRIPTION: Illustrates the usage of the `onValueCommit` prop to be notified when the user finishes dragging the thumb and the value changes, providing the new value as argument. The callback is executed after the user has finished dragging.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/slider.md#_snippet_5\n\nLANGUAGE: svelte\nCODE:\n```\n<Slider.Root\n\tonValueCommit={(v) => {\n\t\tconsole.log(\"user is done sliding!\", v);\n\t}}\n/>\n```\n\n----------------------------------------\n\nTITLE: Reusable MultiSlider Component\nDESCRIPTION: Shows how to create a reusable `MySlider` component using Bits UI primitives, including handling bindable values and rendering multiple thumbs and ticks. Demonstrates the usage of the `Slider.Root`, `Slider.Range`, `Slider.Thumb`, and `Slider.Tick` components within a custom component.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/slider.md#_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport type { ComponentProps } from \"svelte\";\n\timport { Slider } from \"bits-ui\";\n\n\ttype Props = WithoutChildren<ComponentProps<typeof Slider.Root>>;\n\n\tlet { value = $bindable(), ref = $bindable(null), ...restProps }: Props = $props();\n</script>\n\n<!--\n Since we have to destructure the `value` to make it `$bindable`, we need to use `as any` here to avoid\n type errors from the discriminated union of `\"single\" | \"multiple\"`.\n (an unfortunate consequence of having to destructure bindable values)\n  -->\n<Slider.Root bind:value bind:ref {...restProps as any}>\n\t{#snippet children({ thumbs, ticks })}\n\t\t<Slider.Range />\n\t\t{#each thumbs as index}\n\t\t\t<Slider.Thumb {index} />\n\t\t{/each}\n\n\t\t{#each ticks as index}\n\t\t\t<Slider.Tick {index} />\n\t\t{/each}\n\t{/snippet}\n</Slider.Root>\n```\n\n----------------------------------------\n\nTITLE: Multiple Type Slider\nDESCRIPTION: Demonstrates how to set the `type` prop to \"multiple\" for sliders with multiple thumbs, allowing multiple values to be selected.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/slider.md#_snippet_8\n\nLANGUAGE: svelte\nCODE:\n```\n<Slider.Root type=\"multiple\" />\n```\n\n----------------------------------------\n\nTITLE: Tooltip with Svelte Transitions\nDESCRIPTION: Demonstrates how to use Svelte transitions with the Tooltip.Content component by using the `forceMount` prop and a child snippet. This allows for more control over the animation of the tooltip.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/tooltip.md#_snippet_11\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Tooltip } from \"bits-ui\";\n\timport { fly, fade } from \"svelte/transition\";\n</script>\n\n<Tooltip.Root>\n\t<!-- ... other tooltip components -->\n\t<Tooltip.Content forceMount>\n\t\t{#snippet child({ wrapperProps, props, open })}\n\t\t\t{#if open}\n\t\t\t\t<div {...wrapperProps}>\n\t\t\t\t\t<div {...props} transition:fly>\n\t\t\t\t\t\t<!-- ... -->\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t{/if}\n\t\t{/snippet}\n\t</Tooltip.Content>\n</Dialog.Root>\n```\n\n----------------------------------------\n\nTITLE: Dialog Content with Force Mount and Transition\nDESCRIPTION: This snippet demonstrates using the `forceMount` prop on a `Dialog.Content` component from Bits UI to ensure it's always mounted, allowing for the application of Svelte transitions. The `child` snippet is used to delegate the rendering to a `div` element, where the `fly` transition is applied conditionally based on the `open` state. Dependencies include `bits-ui` for the Dialog component and `svelte/transition` for the `fly` transition.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/transitions.md#_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Dialog } from \"bits-ui\";\n\timport { fly } from \"svelte/transition\";\n</script>\n\n<Dialog.Root>\n\t<!-- ... -->\n\t<Dialog.Content forceMount>\n\t\t{#snippet child({ props, open })}\n\t\t\t{#if open}\n\t\t\t\t<div {...props} transition:fly>\n\t\t\t\t\t<!-- ... -->\n\t\t\t\t</div>\n\t\t\t{/if}\n\t\t{/snippet}\n\t</Dialog.Content>\n</Dialog.Root>\n```\n\n----------------------------------------\n\nTITLE: LinkPreview Svelte Transitions\nDESCRIPTION: Demonstrates how to use Svelte transitions with the LinkPreview component by leveraging `forceMount` and a child snippet. It imports the `fly` transition from `svelte/transition`.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/link-preview.md#_snippet_5\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { LinkPreview } from \"bits-ui\";\n\timport { fly } from \"svelte/transition\";\n</script>\n\n<LinkPreview.Content forceMount>\n\t{#snippet child({ wrapperProps, props, open })}\n\t\t{#if open}\n\t\t\t<div {...wrapperProps}>\n\t\t\t\t<div {...props} transition:fly>\n\t\t\t\t\t<!-- ... -->\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t{/if}\n\t{/snippet}\n</LinkPreview.Content>\n```\n\n----------------------------------------\n\nTITLE: Menubar Checkbox Items\nDESCRIPTION: Shows how to create a checkbox item in a menubar using `Menubar.CheckboxItem`.  The `bind:checked` directive is used to sync the `notifications` state and the checked state of the checkbox.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/menubar.md#_snippet_5\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Menubar } from \"bits-ui\";\n\n\tlet notifications = $state(true);\n</script>\n\n<Menubar.CheckboxItem bind:checked={notifications}>\n\t{#snippet children({ checked, indeterminate })}\n\t\t{#if indeterminate}\n\t\t\t-\n\t\t{:else if checked}\n\t\t\t✅\n\t\t{/if}\n\t\tNotifications\n\t{/snippet}\n</Menubar.CheckboxItem>\n```\n\n----------------------------------------\n\nTITLE: Custom Filter Function Command Svelte\nDESCRIPTION: This snippet demonstrates how to provide a custom filter function to the Command component in Svelte. The `customFilter` function takes the command value, search string, and command keywords as input and returns a number between 0 and 1 representing the match score. In this example, it implements a strict substring match filter.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/command.md#_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Command } from \"bits-ui\";\n\n\tfunction customFilter(\n\t\tcommandValue: string,\n\t\tsearch: string,\n\t\tcommandKeywords?: string[]\n\t): number {\n\t\treturn commandValue.includes(search) ? 1 : 0;\n\t}\n</script>\n\n<Command.Root filter={customFilter}>\n\t<!-- ... -->\n</Command.Root>\n```\n\n----------------------------------------\n\nTITLE: Open Focus Override Svelte\nDESCRIPTION: Demonstrates overriding the default focus behavior when the Popover is opened. It uses the `onOpenAutoFocus` prop to prevent the default focusing of the first focusable element and instead focuses a specific input field using a bound `nameInput` variable.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/popover.md#_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Popover } from \"bits-ui\";\n\tlet nameInput = $state<HTMLInputElement>();\n</script>\n\n<Popover.Root>\n\t<Popover.Trigger>Open Popover</Popover.Trigger>\n\t<Popover.Content\n\t\tonOpenAutoFocus={(e) => {\n\t\t\te.preventDefault();\n\t\t\tnameInput?.focus();\n\t\t}}\n\t>\n\t\t<input type=\"text\" bind:this={nameInput} />\n\t</Popover.Content>\n</Popover.Root>\n```\n\n----------------------------------------\n\nTITLE: Extend Default Filter Command Svelte\nDESCRIPTION: This snippet shows how to extend the default filter behavior of the Command component in Svelte. It imports the `computeCommandScore` function and uses it as a base for the custom filter. This allows you to add custom logic while still leveraging the default scoring algorithm.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/command.md#_snippet_5\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Command, computeCommandScore } from \"bits-ui\";\n\n\tfunction customFilter(\n\t\tcommandValue: string,\n\t\tsearch: string,\n\t\tcommandKeywords?: string[]\n\t): number {\n\t\tconst score = computeCommandScore(commandValue, search, commandKeywords);\n\n\t\t// Add custom logic here\n\t\treturn score;\n\t}\n</script>\n\n<Command.Root filter={customFilter}>\n\t<!-- ... -->\n</Command.Root>\n```\n\n----------------------------------------\n\nTITLE: Portal Default Usage Svelte\nDESCRIPTION: This example demonstrates the default usage of the Bits UI Portal component. It renders the children within a portal to the `body` element.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/utilities/portal.md#_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Portal } from \"bits-ui\";\n</script>\n\n<Portal>\n\t<div>This content will be portalled to the body</div>\n</Portal>\n```\n\n----------------------------------------\n\nTITLE: Basic Slider Structure\nDESCRIPTION: Demonstrates the basic structure of the Slider component using Slider.Root, Slider.Range, Slider.Thumb, and Slider.Tick components from Bits UI.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/slider.md#_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Slider } from \"bits-ui\";\n</script>\n\n<Slider.Root>\n\t<Slider.Range />\n\t<Slider.Thumb />\n\t<Slider.Tick />\n</Slider.Root>\n```\n\n----------------------------------------\n\nTITLE: Floating Content Structure with Child Snippet (Svelte)\nDESCRIPTION: Shows the required two-level structure for floating content components (e.g., tooltips, popovers) when using the `child` snippet. This structure includes an outer wrapper element with `{...wrapperProps}` for positioning and an inner content element with `{...props}` for styling.  The `open` parameter controls the conditional rendering of the content. Styling should be applied to the inner content element, and the wrapper element should remain unstyled.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/child-snippet.md#_snippet_5\n\nLANGUAGE: svelte\nCODE:\n```\n<Popover.Content>\n\t{#snippet child({ wrapperProps, props, open })}\n\t\t{#if open}\n\t\t\t<div {...wrapperProps}>\n\t\t\t\t<div {...props}>\n\t\t\t\t\t<!-- ... -->\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t{/if}\n\t{/snippet}\n</Popover.Content>\n```\n\n----------------------------------------\n\nTITLE: DateField with CalendarDateTime Placeholder Svelte\nDESCRIPTION: Shows how to set a `CalendarDateTime` object as the placeholder for the DateField. This determines the granularity and initial date/time displayed when the user interacts with the field.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/date-field.md#_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport MyDateField from \"$lib/components/MyDateField.svelte\";\n\timport { CalendarDateTime } from \"@internationalized/date\";\n</script>\n\n<MyDateField placeholder={new CalendarDateTime(2024, 8, 3, 12, 30)} />\n```\n\n----------------------------------------\n\nTITLE: Using Custom Meter Component (+page.svelte)\nDESCRIPTION: Shows how to use the custom `MyMeter` component in a SvelteKit page. It imports the `MyMeter` component and defines reactive `value` and `max` variables. These variables are then passed as props to the `MyMeter` component.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/meter.md#_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport MyMeter from \"$lib/components/MyMeter.svelte\";\n\n\tlet value = $state(3000);\n\tconst max = 4000;\n</script>\n\n<MyMeter label=\"Tokens remaining\" valueLabel=\"{value} / {max}\" {value} {max} />\n```\n\n----------------------------------------\n\nTITLE: Reusable Dialog Component - Svelte/TS\nDESCRIPTION: This example demonstrates how to create a reusable Dialog component using Bits UI building blocks in Svelte and Typescript. It showcases the flexibility of the component API by combining props and snippets to customize the dialog's behavior and appearance. The component accepts properties like buttonText, title, description, and contentProps for customization.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/dialog.md#_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport type { Snippet } from \"svelte\";\n\timport { Dialog, type WithoutChild } from \"bits-ui\";\n\n\ttype Props = Dialog.RootProps & {\n\t\tbuttonText: string;\n\t\ttitle: Snippet;\n\t\tdescription: Snippet;\n\t\tcontentProps?: WithoutChild<Dialog.ContentProps>;\n\t\t// ...other component props if you wish to pass them\n\t};\n\n\tlet {\n\t\topen = $bindable(false),\n\t\tchildren,\n\t\tbuttonText,\n\t\tcontentProps,\n\t\ttitle,\n\t\tdescription,\n\t\t...restProps\n\t}: Props = $props();\n</script>\n\n<Dialog.Root bind:open {...restProps}>\n\t<Dialog.Trigger>\n\t\t{buttonText}\n\t</Dialog.Trigger>\n\t<Dialog.Portal>\n\t\t<Dialog.Overlay />\n\t\t<Dialog.Content {...contentProps}>\n\t\t\t<Dialog.Title>\n\t\t\t\t{@render title()}\n\t\t\t</Dialog.Title>\n\t\t\t<Dialog.Description>\n\t\t\t\t{@render description()}\n\t\t\t</Dialog.Description>\n\t\t\t{@render children?.()}\n\t\t\t<Dialog.Close>Close Dialog</Dialog.Close>\n\t\t</Dialog.Content>\n\t</Dialog.Portal>\n</Dialog.Root>\n```\n\n----------------------------------------\n\nTITLE: Tooltip Two-Way Binding\nDESCRIPTION: Shows how to use two-way binding with the `bind:open` directive to automatically synchronize the open state of the Tooltip.Root component with a local variable. Clicking the button toggles the tooltip.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/tooltip.md#_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Tooltip } from \"bits-ui\";\n\tlet isOpen = $state(false);\n</script>\n\n<button onclick={() => (isOpen = true)}>Open Tooltip</button>\n\n<Tooltip.Root bind:open={isOpen}>\n\t<!-- ... -->\n</Tooltip.Root>\n```\n\n----------------------------------------\n\nTITLE: Pagination Fully Controlled - Svelte\nDESCRIPTION: Shows how to completely control the pagination state using function bindings. This example defines `getPage` and `setPage` functions to manage reads and writes to the `myPage` state, providing full control over the page state management.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/pagination.md#_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Pagination } from \"bits-ui\";\n\tlet myPage = $state(1);\n\n\tfunction getPage() {\n\t\treturn myPage;\n\t}\n\n\tfunction setPage(newPage: number) {\n\t\tmyPage = newPage;\n\t}\n</script>\n\n<Pagination.Root bind:page={getPage, setPage}>\n\t<!-- ... -->\n</Pagination.Root>\n```\n\n----------------------------------------\n\nTITLE: Two-Way Binding for Open State - Svelte/TS\nDESCRIPTION: This code snippet demonstrates how to use two-way binding with `bind:open` to manage the `open` state of the Dialog component in Svelte and Typescript. The isOpen variable is bound to the Dialog's open prop, allowing for automatic state synchronization.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/dialog.md#_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Dialog } from \"bits-ui\";\n\tlet isOpen = $state(false);\n</script>\n\n<button onclick={() => (isOpen = true)}>Open Dialog</button>\n\n<Dialog.Root bind:open={isOpen}>\n\t<!-- ... -->\n</Dialog.Root>\n```\n\n----------------------------------------\n\nTITLE: Customizing Open Focus (Svelte/TS)\nDESCRIPTION: This snippet demonstrates how to customize the focus behavior when the Alert Dialog opens using the `onOpenAutoFocus` prop on the `AlertDialog.Content` component. It prevents the default focus behavior and sets focus to a specific input element.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/alert-dialog.md#_snippet_7\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { AlertDialog } from \"bits-ui\";\n\tlet nameInput = $state<HTMLInputElement>();\n</script>\n\n<AlertDialog.Root>\n\t<AlertDialog.Trigger>Open AlertDialog</AlertDialog.Trigger>\n\t<AlertDialog.Content\n\t\tonOpenAutoFocus={(e) => {\n\t\t\te.preventDefault();\n\t\t\tnameInput?.focus();\n\t\t}}\n\t>\n\t\t<input type=\"text\" bind:this={nameInput} />\n\t</AlertDialog.Content>\n</AlertDialog.Root>\n```\n\n----------------------------------------\n\nTITLE: Accordion Quick Start - Svelte\nDESCRIPTION: This snippet demonstrates the basic implementation of the Accordion component using Svelte. It imports the Accordion component from 'bits-ui' and sets up a simple Accordion with two items. Each item contains a header with a trigger and content.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/accordion.md#_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Accordion } from \"bits-ui\";\n</script>\n\n<Accordion.Root type=\"single\">\n\t<Accordion.Item value=\"item-1\">\n\t\t<Accordion.Header>\n\t\t\t<Accordion.Trigger>Item 1 Title</Accordion.Trigger>\n\t\t</Accordion.Header>\n\t\t<Accordion.Content>This is the collapsible content for this section.</Accordion.Content>\n\t</Accordion.Item>\n\t<Accordion.Item value=\"item-2\">\n\t\t<Accordion.Header>\n\t\t\t<Accordion.Trigger>Item 2 Title</Accordion.Trigger>\n\t\t</Accordion.Header>\n\t\t<Accordion.Content>This is the collapsible content for this section.</Accordion.Content>\n\t</Accordion.Item>\n</Accordion.Root>\n```\n\n----------------------------------------\n\nTITLE: Required Checkbox Svelte\nDESCRIPTION: Demonstrates how to make a Checkbox required within an HTML form by using the `required` prop on the Checkbox.Root component.  This will enforce form validation, ensuring that the checkbox must be checked before the form can be submitted.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/checkbox.md#_snippet_10\n\nLANGUAGE: svelte\nCODE:\n```\n<Checkbox.Root required>\n\t<!-- ... -->\n</Checkbox.Root>\n```\n\n----------------------------------------\n\nTITLE: Tooltip Custom Anchor\nDESCRIPTION: Demonstrates how to anchor the Tooltip.Content to a custom element using the `customAnchor` prop. This allows for more flexible positioning of the tooltip.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/tooltip.md#_snippet_13\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Tooltip } from \"bits-ui\";\n\tlet customAnchor = $state<HTMLElement>(null!);\n</script>\n\n<div bind:this={customAnchor}></div>\n\n<Tooltip.Root>\n\t<Tooltip.Trigger />\n\t<Tooltip.Content {customAnchor}>\n\t\t<!-- ... -->\n\t</Tooltip.Content>\n</Tooltip.Root>\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Ref Props Svelte/TS\nDESCRIPTION: This code snippet shows how to create custom components with their own `ref` props using the `WithElementRef` type helper from Bits UI.  It defines a custom component with a `ref` prop and uses it to bind to the underlying button element.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/ref.md#_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { WithElementRef } from \"bits-ui\";\n\timport type { HTMLButtonAttributes } from \"svelte/elements\";\n\n\t// Define props with the ref type\n\tlet {\n\t\tref = $bindable(null),\n\t\tchildren,\n\t\t...rest\n\t}: WithElementRef<\n\t\tHTMLButtonAttributes & {\n\t\t\tyourPropA: string;\n\t\t\tyourPropB: number;\n\t\t},\n\t\tHTMLButtonElement\n\t> = $props();\n</script>\n\n<button bind:this={ref} {...rest}>\n\t{@render children?.()}\n</button>\n```\n\n----------------------------------------\n\nTITLE: Using Reusable Dialog Content Component\nDESCRIPTION: This snippet demonstrates how to use the `MyDialogContent` component created in the previous example, integrating it within a `Dialog.Root` component from Bits UI. It showcases the usage of other `Dialog.*` components like `Dialog.Trigger`, `Dialog.Overlay`, `Dialog.Title`, `Dialog.Description`, and `Dialog.Close` within the custom content component. Dependencies include `bits-ui` for Dialog components and the custom `MyDialogContent` component.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/transitions.md#_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Dialog } from \"bits-ui\";\n\timport MyDialogContent from \"$lib/components/MyDialogContent.svelte\";\n</script>\n\n<Dialog.Root>\n\t<Dialog.Trigger>Open Dialog</Dialog.Trigger>\n\t<Dialog.Portal>\n\t\t<Dialog.Overlay />\n\t\t<MyDialogContent>\n\t\t\t<Dialog.Title>Dialog Title</Dialog.Title>\n\t\t\t<Dialog.Description>Dialog Description</Dialog.Description>\n\t\t\t<Dialog.Close>Close</Dialog.Close>\n\t\t\t<div>Other dialog content</div>\n\t\t</MyDialogContent>\n\t</Dialog.Portal>\n</Dialog.Root>\n```\n\n----------------------------------------\n\nTITLE: Two-Way Binding Placeholder Svelte\nDESCRIPTION: Demonstrates two-way binding for the `placeholder` prop of the Calendar component using Svelte. It initializes a `CalendarDateTime` object and uses `bind:placeholder` to synchronize the state between the component and the `myPlaceholder` variable. Clicking the button updates the placeholder, which automatically reflects in the Calendar.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/calendar.md#_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Calendar } from \"bits-ui\";\n\timport { CalendarDateTime } from \"@internationalized/date\";\n\tlet myPlaceholder = $state(new CalendarDateTime(2024, 8, 3, 12, 30));\n</script>\n\n<button onclick={() => (myPlaceholder = new CalendarDate(2024, 8, 3))}>\n\tSet placeholder to August 3rd, 2024\n</button>\n\n<Calendar.Root bind:placeholder={myPlaceholder}>\n\t<!-- ... -->\n</Calendar.Root>\n```\n\n----------------------------------------\n\nTITLE: Tabs Structure Svelte\nDESCRIPTION: Demonstrates the basic structure of the Tabs component using Svelte and Typescript. It imports the Tabs component from \"bits-ui\" and sets up the Root, List, Trigger, and Content elements within the Tabs structure. No dependencies are explicitly required beyond the bits-ui library.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/tabs.md#_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Tabs } from \"bits-ui\";\n</script>\n\n<Tabs.Root>\n\t<Tabs.List>\n\t\t<Tabs.Trigger />\n\t</Tabs.List>\n\t<Tabs.Content />\n</Tabs.Root>\n```\n\n----------------------------------------\n\nTITLE: Reusable Dialog Content Component with Transition\nDESCRIPTION: This snippet creates a reusable `MyDialogContent` component that extends the `Dialog.Content` from Bits UI and applies a Svelte `fly` transition. It utilizes the `forceMount` prop to ensure the content is always mounted and uses a `child` snippet to delegate rendering to a `div` with the transition applied. Dependencies include `bits-ui` for Dialog components and types, and `svelte/transition` for the `fly` transition.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/transitions.md#_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport type { Snippet } from \"svelte\";\n\timport { fly } from \"svelte/transition\";\n\timport { Dialog, type WithoutChildrenOrChild } from \"bits-ui\";\n\n\tlet {\n\t\tref = $bindable(null),\n\t\tchildren,\n\t\t...restProps\n\t}: WithoutChildrenOrChild<Dialog.ContentProps> & {\n\t\tchildren?: Snippet;\n\t} = $props();\n</script>\n\n<Dialog.Content bind:ref {...restProps} forceMount={true}>\n\t{#snippet child({ props, open })}\n\t\t{#if open}\n\t\t\t<div {...props} transition:fly>\n\t\t\t\t{@render children?.()}\n\t\t\t</div>\n\t\t{/if}\n\t{/snippet}\n</Dialog.Content>\n```\n\n----------------------------------------\n\nTITLE: Imperative API Access Command Svelte\nDESCRIPTION: This snippet shows how to access the imperative API of the `Command.Root` component by binding to it using `bind:this`. This allows you to call methods like `getValidItems()`, `updateSelectedToIndex()`, `updateSelectedByGroup()`, and `updateSelectedByItem()`.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/command.md#_snippet_9\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Command } from \"bits-ui\";\n\tlet command: typeof Command.Root;\n</script>\n\n<Command.Root bind:this={command}>\n\t<!-- ... -->\n</Command.Root>\n```\n\n----------------------------------------\n\nTITLE: Two-Way Binding Placeholder Svelte\nDESCRIPTION: Illustrates two-way binding with `bind:placeholder` for the DateField. This approach provides a simple and automatic way to synchronize the placeholder state with a Svelte reactive statement.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/date-field.md#_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { DateField } from \"bits-ui\";\n\timport { CalendarDateTime } from \"@internationalized/date\";\n\tlet myPlaceholder = $state(new CalendarDateTime(2024, 8, 3, 12, 30));\n</script>\n\n<button onclick={() => (myPlaceholder = new CalendarDate(2024, 8, 3))}>\n\tSet placeholder to August 3rd, 2024\n</button>\n\n<DateField.Root bind:placeholder={myPlaceholder}>\n\t<!-- ... -->\n</DateField.Root>\n```\n\n----------------------------------------\n\nTITLE: Disable Focus Trap Svelte\nDESCRIPTION: Shows how to disable focus trapping within the Popover.Content by setting the `trapFocus` prop to `false`. When set to false, focus will not be confined within the popover content.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/popover.md#_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<Popover.Content trapFocus={false}>\n\t<!-- ... -->\n</Popover.Content>\n```\n\n----------------------------------------\n\nTITLE: RTL Support for Slider\nDESCRIPTION: Shows how to use the `dir` prop to change the reading direction of the slider to right-to-left (RTL).\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/slider.md#_snippet_10\n\nLANGUAGE: svelte\nCODE:\n```\n<Slider.Root type=\"single\" dir=\"rtl\">\n\t<!-- ... -->\n</Slider.Root>\n```\n\n----------------------------------------\n\nTITLE: Custom Anchor Svelte\nDESCRIPTION: Shows how to anchor the `Popover.Content` to a custom element instead of the `Popover.Trigger` by passing an `HTMLElement` to the `customAnchor` prop. It uses a `bind:this` directive on a `div` to obtain a reference to the element.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/popover.md#_snippet_11\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Popover } from \"bits-ui\";\n\tlet customAnchor = $state<HTMLElement>(null!);\n</script>\n\n<div bind:this={customAnchor}></div>\n\n<Popover.Root>\n\t<Popover.Trigger />\n\t<Popover.Content {customAnchor}>\n\t\t<!-- ... -->\n\t</Popover.Content>\n</Popover.Root>\n```\n\n----------------------------------------\n\nTITLE: Custom Anchor for Content - Svelte\nDESCRIPTION: Explains how to customize the anchor point for the DropdownMenu.Content using the `customAnchor` prop. This allows positioning the content relative to a different element other than the trigger.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/dropdown-menu.md#_snippet_11\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { DropdownMenu } from \"bits-ui\";\n\tlet customAnchor = $state<HTMLElement>(null!);\n</script>\n\n<div bind:this={customAnchor}></div>\n\n<DropdownMenu.Root>\n\t<DropdownMenu.Trigger />\n\t<DropdownMenu.Content {customAnchor}>\n\t\t<!-- ... -->\n\t</DropdownMenu.Content>\n</DropdownMenu.Root>\n```\n\n----------------------------------------\n\nTITLE: DateRangePicker Structure in Svelte\nDESCRIPTION: This code shows the basic structure of the DateRangePicker component using Bits UI in a Svelte application. It demonstrates the hierarchical structure including Root, Label, Input (for start and end dates), Trigger, Content, and Calendar components for date selection.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/date-range-picker.md#_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { DateRangePicker } from \"bits-ui\";\n</script>\n\n<DateRangePicker.Root>\n\t<DateRangePicker.Label />\n\t{#each [\"start\", \"end\"] as const as type}\n\t\t<DateRangePicker.Input {type}>\n\t\t\t{#snippet children({ segments })}\n\t\t\t\t{#each segments as { part, value }}\n\t\t\t\t\t<DateRangePicker.Segment {part}>\n\t\t\t\t\t\t{value}\n\t\t\t\t\t</DateRangePicker.Segment>\n\t\t\t\t{/each}\n\t\t\t{/snippet}\n\t\t</DateRangePicker.Input>\n\t{/each}\n\t<DateRangePicker.Trigger />\n\t<DateRangePicker.Content>\n\t\t<DateRangePicker.Calendar>\n\t\t\t{#snippet children({ months, weekdays })}\n\t\t\t\t<DateRangePicker.Header>\n\t\t\t\t\t<DateRangePicker.PrevButton />\n\t\t\t\t\t<DateRangePicker.Heading />\n\t\t\t\t\t<DateRangePicker.NextButton />\n\t\t\t\t</DateRangePicker.Header>\n\t\t\t\t{#each months as month}\n\t\t\t\t\t<DateRangePicker.Grid>\n\t\t\t\t\t\t<DateRangePicker.GridHead>\n\t\t\t\t\t\t\t<DateRangePicker.GridRow>\n\t\t\t\t\t\t\t\t{#each weekdays as day}\n\t\t\t\t\t\t\t\t\t<DateRangePicker.HeadCell>\n\t\t\t\t\t\t\t\t\t\t{day}\n\t\t\t\t\t\t\t\t\t</DateRangePicker.HeadCell>\n\t\t\t\t\t\t\t\t{/each}\n\t\t\t\t\t\t\t</DateRangePicker.GridRow>\n\t\t\t\t\t\t</DateRangePicker.GridHead>\n\t\t\t\t\t\t<DateRangePicker.GridBody>\n\t\t\t\t\t\t\t{#each month.weeks as weekDates}\n\t\t\t\t\t\t\t\t<DateRangePicker.GridRow>\n\t\t\t\t\t\t\t\t\t{#each weekDates as date}\n\t\t\t\t\t\t\t\t\t\t<DateRangePicker.Cell {date} month={month.value}>\n\t\t\t\t\t\t\t\t\t\t\t<DateRangePicker.Day>\n\t\t\t\t\t\t\t\t\t\t\t\t{date.day}\n\t\t\t\t\t\t\t\t\t\t\t</DateRangePicker.Day>\n\t\t\t\t\t\t\t\t\t\t</DateRangePicker.Cell>\n\t\t\t\t\t\t\t\t\t{/each}\n\t\t\t\t\t\t\t\t</DateRangePicker.GridRow>\n\t\t\t\t\t\t\t{/each}\n\t\t\t\t\t\t</DateRangePicker.GridBody>\n\t\t\t\t\t</DateRangePicker.Grid>\n\t\t\t\t{/each}\n\t\t\t{/snippet}\n\t\t</DateRangePicker.Calendar>\n\t</DateRangePicker.Content>\n</DateRangePicker.Root>\n```\n\n----------------------------------------\n\nTITLE: Date Picker Placeholder Two-Way Binding Svelte\nDESCRIPTION: This example demonstrates how to use two-way binding with `bind:placeholder` to manage the placeholder state of the DatePicker component. It imports the DatePicker and CalendarDateTime from 'bits-ui' and '@internationalized/date', respectively. A button is provided to set the placeholder to a specific date.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/date-picker.md#_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { DatePicker } from \"bits-ui\";\n\timport { CalendarDateTime } from \"@internationalized/date\";\n\tlet myPlaceholder = $state();\n</script>\n\n<button\n\tonclick={() => {\n\t\tmyPlaceholder = new CalendarDateTime(2024, 8, 3, 12, 30);\n\t}}\n>\n\tSet placeholder to August 3rd, 2024\n</button>\n\n<DatePicker.Root bind:placeholder={myPlaceholder}>\n\t<!-- ... -->\n</DatePicker.Root>\n```\n\n----------------------------------------\n\nTITLE: Required Switch for HTML Forms Svelte\nDESCRIPTION: Shows how to make the Switch component required in HTML forms by setting the required prop on Switch.Root. This adds the required attribute to the hidden input element, ensuring that the form cannot be submitted unless the switch is checked, enforcing data validation.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/switch.md#_snippet_8\n\nLANGUAGE: svelte\nCODE:\n```\n<Switch.Root required>\n\t<!-- ... -->\n</Switch.Root>\n```\n\n----------------------------------------\n\nTITLE: Fully Controlled Context Menu Open State in Svelte\nDESCRIPTION: Demonstrates full control over the context menu's open state using a function binding. This allows for custom logic to be executed when the state changes. Requires bits-ui. The getOpen and setOpen functions must exist and correctly manage the 'myOpen' state variable.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/context-menu.md#_snippet_5\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { ContextMenu } from \"bits-ui\";\n\tlet myOpen = $state(false);\n\n\tfunction getOpen() {\n\t\treturn myOpen;\n\t}\n\n\tfunction setOpen(newOpen: boolean) {\n\t\tmyOpen = newOpen;\n\t}\n</script>\n\n<ContextMenu.Root bind:open={getOpen, setOpen}>\n\t<!-- ... -->\n</ContextMenu.Root>\n\n```\n\n----------------------------------------\n\nTITLE: Use Svelte Transitions with Select.Content - Svelte\nDESCRIPTION: This code demonstrates how to use Svelte transitions with the `Select.Content` component by using the `forceMount` prop and a `child` snippet. This approach allows for more control over the mounting and unmounting of the content, enabling the use of animation libraries like Svelte's `transition:fly`.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/select.md#_snippet_12\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Select } from \"bits-ui\";\n\timport { fly } from \"svelte/transition\";\n</script>\n\n<Select.Content forceMount>\n\t{#snippet child({ wrapperProps, props, open })}\n\t\t{#if open}\n\t\t\t<div {...wrapperProps}>\n\t\t\t\t<div {...props} transition:fly>\n\t\t\t\t\t<!-- ... -->\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t{/if}\n\t{/snippet}\n</Select.Content>\n```\n\n----------------------------------------\n\nTITLE: Dialog Structure in Svelte\nDESCRIPTION: This code snippet shows the basic structure of the Dialog component in Svelte, including the Root, Trigger, Portal, Overlay, Content, Title, Description, and Close sub-components. It demonstrates how to import the Dialog component from Bits UI and arrange the sub-components within the Root component.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/dialog.md#_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Dialog } from \"bits-ui\";\n</script>\n\n<Dialog.Root>\n\t<Dialog.Trigger />\n\t<Dialog.Portal>\n\t\t<Dialog.Overlay />\n\t\t<Dialog.Content>\n\t\t\t<Dialog.Title />\n\t\t\t<Dialog.Description />\n\t\t\t<Dialog.Close />\n\t\t</Dialog.Content>\n\t</Dialog.Portal>\n</Dialog.Root>\n```\n\n----------------------------------------\n\nTITLE: Collapsible with Svelte Transitions Svelte/TS\nDESCRIPTION: Shows how to apply Svelte transitions to the Collapsible.Content component using `forceMount` and the `child` snippet. The example uses the `fade` transition from svelte/transition and wraps the content within an `#if open` block to control its visibility. The `forceMount` prop ensures the content is always in the DOM.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/collapsible.md#_snippet_5\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Collapsible } from \"bits-ui\";\n\timport { fade } from \"svelte/transition\";\n</script>\n\n<Collapsible.Root>\n\t<Collapsible.Trigger>Open</Collapsible.Trigger>\n\t<Collapsible.Content forceMount>\n\t\t{#snippet child({ props, open })}\n\t\t\t{#if open}\n\t\t\t\t<div {...props} transition:fade>\n\t\t\t\t\t<!-- ... -->\n\t\t\t\t</div>\n\t\t\t{/if}\n\t\t{/snippet}\n\t</Collapsible.Content>\n</Collapsible.Root>\n```\n\n----------------------------------------\n\nTITLE: Disable Hoverable Content\nDESCRIPTION: Shows how to configure the tooltip to close when the user moves the mouse towards the content by setting the `disableHoverableContent` prop to `true` on the Tooltip.Root component.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/tooltip.md#_snippet_9\n\nLANGUAGE: svelte\nCODE:\n```\n<Tooltip.Root disableHoverableContent>\n\t<!-- .... -->\n</Tooltip.Root>\n```\n\n----------------------------------------\n\nTITLE: DateField with ZonedDateTime Placeholder Svelte\nDESCRIPTION: Demonstrates the use of a `ZonedDateTime` object as the placeholder for the DateField. This allows for capturing the date and time along with the timezone information.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/date-field.md#_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport MyDateField from \"$lib/components/MyDateField.svelte\";\n\timport { now, getLocalTimeZone } from \"@internationalized/date\";\n</script>\n\n<MyDateField placeholder={now(\"America/New_York\")} />\n```\n\n----------------------------------------\n\nTITLE: Date Picker Open State Fully Controlled Svelte\nDESCRIPTION: This code demonstrates how to fully control the `open` state of the DatePicker component using function bindings. It imports DatePicker from 'bits-ui'. Getter and setter functions `getOpen` and `setOpen` are defined to manage read/write access to the `myOpen` state.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/date-picker.md#_snippet_6\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { DatePicker } from \"bits-ui\";\n\tlet myOpen = $state(false);\n\n\tfunction getOpen() {\n\t\treturn myOpen;\n\t}\n\n\tfunction setOpen(newOpen: boolean) {\n\t\tmyOpen = newOpen;\n\t}\n</script>\n\n<DatePicker.Root bind:open={getOpen, setOpen}>\n\t<!-- ... -->\n</DatePicker.Root>\n```\n\n----------------------------------------\n\nTITLE: Custom Accordion Item Wrapper - Svelte\nDESCRIPTION: This Svelte component, `MyAccordionItem.svelte`, is a reusable wrapper that combines the `Item`, `Header`, `Trigger`, and `Content` components of the Bits-UI Accordion. It takes a title and content as props and renders a single Accordion item.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/accordion.md#_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Accordion, type WithoutChildrenOrChild } from \"bits-ui\";\n\n\ttype Props = WithoutChildrenOrChild<Accordion.ItemProps> & {\n\t\ttitle: string;\n\t\tcontent: string;\n\t};\n\n\tlet { title, content, ...restProps }: Props = $props();\n</script>\n\n<Accordion.Item {...restProps}>\n\t<Accordion.Header>\n\t\t<Accordion.Trigger>{item.title}</Accordion.Trigger>\n\t\t</Accordion.Header>\n\t<Accordion.Content>\n\t\t{content}\n\t</Accordion.Content>\n</Accordion.Item>\n```\n\n----------------------------------------\n\nTITLE: Date Picker Structure Svelte\nDESCRIPTION: This code snippet demonstrates the basic structure of the DatePicker component in Svelte. It includes the Root, Label, Input, Content, and Calendar components, along with segments, trigger, header, navigation buttons, weekdays, grid, head, body, and day components for complete date selection functionality.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/date-picker.md#_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { DatePicker } from \"bits-ui\";\n</script>\n\n<DatePicker.Root>\n\t<DatePicker.Label />\n\t<DatePicker.Input>\n\t\t{#snippet children({ segments })}\n\t\t\t{#each segments as { part, value }}\n\t\t\t\t<DatePicker.Segment {part}>\n\t\t\t\t\t{value}\n\t\t\t\t</DatePicker.Segment>\n\t\t\t{/each}\n\t\t\t<DatePicker.Trigger />\n\t\t{/snippet}\n\t</DatePicker.Input>\n\t<DatePicker.Content>\n\t\t<DatePicker.Calendar>\n\t\t\t{#snippet children({ months, weekdays })}\n\t\t\t\t<DatePicker.Header>\n\t\t\t\t\t<DatePicker.PrevButton />\n\t\t\t\t\t<DatePicker.Heading />\n\t\t\t\t\t<DatePicker.NextButton />\n\t\t\t\t</DatePicker.Header>\n\t\t\t\t{#each months as month}\n\t\t\t\t\t<DatePicker.Grid>\n\t\t\t\t\t\t<DatePicker.GridHead>\n\t\t\t\t\t\t\t<DatePicker.GridRow>\n\t\t\t\t\t\t\t\t{#each weekdays as day}\n\t\t\t\t\t\t\t\t\t<DatePicker.HeadCell>\n\t\t\t\t\t\t\t\t\t\t{day}\n\t\t\t\t\t\t\t\t\t</DatePicker.HeadCell>\n\t\t\t\t\t\t\t\t{/each}\n\t\t\t\t\t\t\t</DatePicker.GridRow>\n\t\t\t\t\t\t</DatePicker.GridHead>\n\t\t\t\t\t\t<DatePicker.GridBody>\n\t\t\t\t\t\t\t{#each month.weeks as weekDates}\n\t\t\t\t\t\t\t\t<DatePicker.GridRow>\n\t\t\t\t\t\t\t\t\t{#each weekDates as date}\n\t\t\t\t\t\t\t\t\t\t<DatePicker.Cell {date} month={month.value}>\n\t\t\t\t\t\t\t\t\t\t\t<DatePicker.Day />\n\t\t\t\t\t\t\t\t\t\t</DatePicker.Cell>\n\t\t\t\t\t\t\t\t\t{/each}\n\t\t\t\t\t\t\t\t</DatePicker.GridRow>\n\t\t\t\t\t\t\t{/each}\n\t\t\t\t\t\t</DatePicker.GridBody>\n\t\t\t\t\t</DatePicker.Grid>\n\t\t\t\t{/each}\n\t\t\t{/snippet}\n\t\t</DatePicker.Calendar>\n\t</DatePicker.Content>\n</DatePicker.Root>\n```\n\n----------------------------------------\n\nTITLE: Custom Accordion Content Component with Transition - Svelte\nDESCRIPTION: This Svelte component, `MyAccordionContent.svelte`, is a reusable wrapper for the Bits-UI Accordion.Content component, adding a fade transition. It utilizes the forceMount prop and a child snippet to apply the transition.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/accordion.md#_snippet_7\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Accordion, type WithoutChildrenOrChild } from \"bits-ui\";\n\timport type { Snippet } from \"svelte\";\n\timport { fade } from \"svelte/transition\";\n\n\tlet {\n\t\tref = $bindable(null),\n\t\tduration = 200,\n\t\tchildren,\n\t\t...restProps\n\t}: WithoutChildrenOrChild<Accordion.ContentProps> & {\n\t\tduration?: number;\n\t\tchildren: Snippet;\n\t} = $props();\n</script>\n\n<Accordion.Content forceMount bind:ref {...restProps}>\n\t{#snippet child({ props, open })}\n\t\t{#if open}\n\t\t\t<div {...props} transition:fade={{ duration }}>\n\t\t\t\t{@render children?.()}\n\t\t\t</div>\n\t\t{/if}\n\t{/snippet}\n</Accordion.Content>\n```\n\n----------------------------------------\n\nTITLE: Fully Controlled Placeholder Svelte\nDESCRIPTION: Demonstrates a fully controlled DateField using function bindings for the placeholder. This provides complete control over how the placeholder state is read and written, utilizing getter and setter functions.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/date-field.md#_snippet_5\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { DateField } from \"bits-ui\";\n\timport type { DateValue } from \"@internationalized/date\";\n\tlet myPlaceholder = $state<DateValue>();\n\n\tfunction getPlaceholder() {\n\t\treturn myPlaceholder;\n\t}\n\n\tfunction setPlaceholder(newPlaceholder: DateValue) {\n\t\tmyPlaceholder = newPlaceholder;\n\t}\n</script>\n\n<DateField.Root bind:placeholder={getPlaceholder, setPlaceholder}>\n\t<!-- ... -->\n</DateField.Root>\n```\n\n----------------------------------------\n\nTITLE: Tooltip Content Static\nDESCRIPTION: Shows how to opt-out of Floating UI by using the `Tooltip.ContentStatic` component instead of `Tooltip.Content`. This allows for manual positioning of the tooltip content.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/tooltip.md#_snippet_12\n\nLANGUAGE: svelte\nCODE:\n```\n<Tooltip.Root>\n\t<Tooltip.Trigger>Hello</Tooltip.Trigger>\n\t<Tooltip.ContentStatic>\n\t\t<!-- ... -->\n\t</Tooltip.ContentStatic>\n</Tooltip.Root>\n```\n\n----------------------------------------\n\nTITLE: Using Group Heading - Svelte\nDESCRIPTION: Demonstrates the use of the `DropdownMenu.GroupHeading` component within either a `DropdownMenu.Group` or `DropdownMenu.RadioGroup`. It highlights the importance of using the heading within a group to avoid errors.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/dropdown-menu.md#_snippet_6\n\nLANGUAGE: svelte\nCODE:\n```\n<DropdownMenu.Group>\n\t<DropdownMenu.GroupHeading>File</DropdownMenu.GroupHeading>\n\t<!-- ... items here -->\n</DropdownMenu.Group>\n\n<!-- or -->\n\n<DropdownMenu.RadioGroup>\n\t<DropdownMenu.GroupHeading>Favorite color</DropdownMenu.GroupHeading>\n\t<!-- ... radio items here -->\n</DropdownMenu.RadioGroup>\n```\n\n----------------------------------------\n\nTITLE: Using useId in Svelte Component\nDESCRIPTION: This code demonstrates how to import and use the `useId` function from the `bits-ui` library within a Svelte component. The function generates a unique ID that is then assigned to both a label and an input element. This ensures proper accessibility and association between the label and input.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/utilities/use-id.md#_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { useId } from \"bits-ui\";\n\n\tconst id = useId();\n</script>\n\n<label for={id}>Label here</label>\n<input {id} />\n```\n\n----------------------------------------\n\nTITLE: Meter Component Structure (bits-ui)\nDESCRIPTION: Shows the basic structure of the Meter component using bits-ui. It imports the Meter component from 'bits-ui' and uses the Meter.Root component.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/meter.md#_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Meter } from \"bits-ui\";\n</script>\n\n<Meter.Root />\n```\n\n----------------------------------------\n\nTITLE: Reusable Aspect Ratio Component\nDESCRIPTION: Demonstrates creating a reusable `MyAspectRatio` component that takes a `src` prop and renders an `img` element within the `AspectRatio.Root`.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/aspect-ratio.md#_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { AspectRatio, type WithoutChildrenOrChild } from \"bits-ui\";\n\n\tlet {\n\t\tsrc,\n\t\talt,\n\t\tref = $bindable(null),\n\t\timageRef = $bindable(null),\n\t\t...restProps\n\t}: WithoutChildrenOrChild<AspectRatio.RootProps> & {\n\t\tsrc: string;\n\t\talt: string;\n\t\timageRef?: HTMLImageElement | null;\n\t} = $props();\n</script>\n\n<AspectRatio.Root {...restProps} bind:ref>\n\t<img {src} {alt} bind:this={imageRef} />\n</AspectRatio.Root>\n```\n\n----------------------------------------\n\nTITLE: Tooltip Provider Component\nDESCRIPTION: Illustrates the usage of the Tooltip.Provider component to manage shared state for tooltip components. It demonstrates how to set delayDuration and disableHoverableContent props on the provider to apply to all nested tooltip components.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/tooltip.md#_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Tooltip } from \"bits-ui\";\n</script>\n\n<Tooltip.Provider delayDuration={0} disableHoverableContent={true}>\n\t<!-- Will have a delayDuration of 0 and disableHoverableContent of true -->\n\t<Tooltip.Root>\n\t\t<Tooltip.Trigger />\n\t\t<Tooltip.Portal>\n\t\t\t<Tooltip.Content>\n\t\t\t\t<Tooltip.Arrow />\n\t\t\t</Tooltip.Content>\n\t\t</Tooltip.Portal>\n\t</Tooltip.Root>\n\t<!-- Will have a delayDuration of 0 and disableHoverableContent of true -->\n\t<Tooltip.Root>\n\t\t<Tooltip.Trigger />\n\t\t<Tooltip.Portal>\n\t\t\t<Tooltip.Content>\n\t\t\t\t<Tooltip.Arrow />\n\t\t\t</Tooltip.Content>\n\t\t</Tooltip.Portal>\n\t</Tooltip.Root>\n</Tooltip.Provider>\n```\n\n----------------------------------------\n\nTITLE: Fully Controlled Switch State Svelte\nDESCRIPTION: Demonstrates fully controlled state management of the Switch component using function bindings for getting and setting the checked state. It allows for complete control over the state's reads and writes, providing flexibility for complex state management scenarios. It shows a more advanced way to manage the state of a switch using getter and setter functions.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/switch.md#_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Switch } from \"bits-ui\";\n\tlet myChecked = $state(false);\n\n\tfunction getChecked() {\n\t\treturn myChecked;\n\t}\n\n\tfunction setChecked(newChecked: boolean) {\n\t\tmyChecked = newChecked;\n\t}\n</script>\n\n<Switch.Root bind:checked={getChecked, setChecked}>\n\t<!-- ... -->\n</Switch.Root>\n```\n\n----------------------------------------\n\nTITLE: Reusable Tooltip Component\nDESCRIPTION: Illustrates how to create a reusable tooltip component using the Tooltip primitives. The component accepts a trigger snippet and other props to customize the tooltip's behavior and appearance.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/tooltip.md#_snippet_5\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Tooltip } from \"bits-ui\";\n\timport { type Snippet } from \"svelte\";\n\n\ttype Props = Tooltip.RootProps & {\n\t\ttrigger: Snippet;\n\t\ttriggerProps?: Tooltip.TriggerProps;\n\t};\n\n\tlet {\n\t\topen = $bindable(false),\n\t\tchildren,\n\t\tbuttonText,\n\t\ttriggerProps = {},\n\t\t...restProps\n\t}: Tooltip.RootProps = $props();\n</script>\n\n<!--\n Ensure you have a `Tooltip.Provider` component wrapping\n your root layout content\n-->\n<Tooltip.Root bind:open {onOpenChange}>\n\t<Tooltip.Trigger {...triggerProps}>\n\t\t{@render trigger()}\n\t</Tooltip.Trigger>\n\t<Tooltip.Portal>\n\t\t<Tooltip.Content>\n\t\t\t<Tooltip.Arrow />\n\t\t\t{@render children?.()}\n\t\t</Tooltip.Content>\n\t</Tooltip.Portal>\n</Tooltip.Root>\n```\n\n----------------------------------------\n\nTITLE: Svelte Transitions with Popover Svelte\nDESCRIPTION: Demonstrates how to use Svelte transitions with the `Popover.Content` component by using the `forceMount` prop and a Svelte transition such as `fly`.  It requires a child snippet to wrap the content.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/popover.md#_snippet_12\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Popover } from \"bits-ui\";\n\timport { fly } from \"svelte/transition\";\n</script>\n\n<Popover.Content forceMount>\n\t{#snippet child({ wrapperProps, props, open })}\n\t\t{#if open}\n\t\t\t<div {...wrapperProps}>\n\t\t\t\t<div {...props} transition:fly>\n\t\t\t\t\t<!-- ... -->\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t{/if}\n\t{/snippet}\n</Popover.Content>\n```\n\n----------------------------------------\n\nTITLE: Tabs Orientation Svelte\nDESCRIPTION: Shows how to set the orientation of the Tabs component to either horizontal or vertical using the `orientation` prop. Keyboard navigation adapts based on the orientation specified. Requires importing Tabs from the bits-ui library.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/tabs.md#_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<Tabs.Root orientation=\"horizontal\">\n\t<!-- ... -->\n</Tabs.Root>\n\n<Tabs.Root orientation=\"vertical\">\n\t<!-- ... -->\n</Tabs.Root>\n```\n\n----------------------------------------\n\nTITLE: Using Custom Context Menu Component in Svelte\nDESCRIPTION: This example demonstrates how to use the custom context menu component defined in the previous snippet. It passes an array of items and a snippet for the trigger area. Requires the `CustomContextMenu.svelte` component defined earlier. Input:  The array of items defines what will appear in the CustomContextMenu, the triggerArea snippet defines how to trigger it.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/context-menu.md#_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport CustomContextMenu from \"./CustomContextMenu.svelte\";\n</script>\n\n<CustomContextMenu items={[\"Dunder Mifflin\", \"Vance Refrigeration\", \"Michael Scott Paper Company\"]}>\n\t{#snippet triggerArea()}\n\t\t<div class=\"grid size-20 place-items-center rounded-lg border border-dashed p-4\">\n\t\t\tRight-click me\n\t\t</div>\n\t{/snippet}\n</CustomContextMenu>\n\n```\n\n----------------------------------------\n\nTITLE: Scroll Area Type Hover Svelte\nDESCRIPTION: Sets the `type` prop of the `MyScrollArea` component to `hover`.  This configuration displays scrollbars only when the user hovers over the scroll area and the content overflows.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/scroll-area.md#_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<MyScrollArea type=\"hover\">\n\t<!-- ... -->\n</MyScrollArea>\n```\n\n----------------------------------------\n\nTITLE: Opt-out of Floating UI\nDESCRIPTION: Shows how to opt-out of using Floating UI for positioning the `Select.Content` by using the `Select.ContentStatic` component instead.  This provides control over the positioning of the content, but requires manual handling of the positioning logic.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/select.md#_snippet_8\n\nLANGUAGE: svelte\nCODE:\n```\n<Select.Root>\n\t<Select.Trigger />\n\t<Select.Portal>\n\t\t<Select.ContentStatic>\n\t\t\t<Select.ScrollUpButton />\n\t\t\t<Select.Viewport>\n\t\t\t\t<Select.Item />\n\t\t\t\t<Select.Group>\n\t\t\t\t\t<Select.GroupHeading />\n\t\t\t\t\t<Select.Item />\n\t\t\t\t</Select.Group>\n\t\t\t\t<Select.ScrollDownButton />\n\t\t\t</Select.Viewport>\n\t\t</Select.ContentStatic>\n\t</Select.Portal>\n</Select.Root>\n```\n\n----------------------------------------\n\nTITLE: Date Range Field Structure Svelte\nDESCRIPTION: Demonstrates the basic structure of the DateRangeField component in Svelte, showcasing how to use the Root, Label, Input, and Segment components.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/date-range-field.md#_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { DateRangeField } from \"$lib\";\n</script>\n\n<DateRangeField.Root>\n\t<DateRangeField.Label>Check-in date</DateRangeField.Label>\n\t{#each [\"start\", \"end\"] as const as type}\n\t\t<DateRangeField.Input {type}>\n\t\t\t{#snippet children({ segments })}\n\t\t\t\t{#each segments as { part, value }}\n\t\t\t\t\t<DateRangeField.Segment {part}>\n\t\t\t\t\t\t{value}\n\t\t\t\t\t</DateRangeField.Segment>\n\t\t\t\t{/each}\n\t\t\t{/snippet}\n\t\t</DateRangeField.Input>\n\t{/each}\n</DateRangeField.Root>\n```\n\n----------------------------------------\n\nTITLE: PinInput with Digit-Only Pattern (Svelte)\nDESCRIPTION: This code shows how to use the `pattern` prop to restrict input to only digits. It imports the PinInput component and `REGEXP_ONLY_DIGITS` constant from 'bits-ui'. The `pattern` prop of the PinInput.Root component is set to `REGEXP_ONLY_DIGITS`, which only allows digits to be entered.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/pin-input.md#_snippet_5\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { PinInput, REGEXP_ONLY_DIGITS } from \"bits-ui\";\n</script>\n\n<PinInput.Root pattern={REGEXP_ONLY_DIGITS}>\n\t<!-- ... -->\n</PinInput.Root>\n```\n\n----------------------------------------\n\nTITLE: Select Component Structure\nDESCRIPTION: Illustrates the basic structure of the Select component, including the Root, Trigger, Portal, Content, Viewport, and Item components. This snippet provides a foundational understanding of how to assemble a basic Select component.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/select.md#_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Select } from \"bits-ui\";\n</script>\n\n<Select.Root>\n\t<Select.Trigger />\n\t<Select.Portal>\n\t\t<Select.Content>\n\t\t\t<Select.ScrollUpButton />\n\t\t\t<Select.Viewport>\n\t\t\t\t<Select.Item />\n\t\t\t\t<Select.Group>\n\t\t\t\t\t<Select.GroupHeading />\n\t\t\t\t\t<Select.Item />\n\t\t\t\t</Select.Group>\n\t\t\t\t<Select.ScrollDownButton />\n\t\t\t</Select.Viewport>\n\t\t</Select.Content>\n\t</Select.Portal>\n</Select.Root>\n```\n\n----------------------------------------\n\nTITLE: Checkbox with Custom Value Svelte\nDESCRIPTION: Demonstrates how to specify a custom value for the checkbox when submitting the form, using the `value` prop.  This overrides the default 'on' value.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/checkbox.md#_snippet_9\n\nLANGUAGE: svelte\nCODE:\n```\n<MyCheckbox value=\"hello\" name=\"notifications\" labelText=\"Enable notifications\" />\n```\n\n----------------------------------------\n\nTITLE: Multiple Selection Svelte\nDESCRIPTION: Demonstrates using the `type` prop to allow the selection of multiple dates.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/calendar.md#_snippet_15\n\nLANGUAGE: svelte\nCODE:\n```\n<Calendar.Root type=\"multiple\">\n\t<!-- ...-->\n</Calendar.Root>\n```\n\n----------------------------------------\n\nTITLE: Custom Anchor for Content\nDESCRIPTION: Demonstrates how to anchor the `Select.Content` to a custom HTML element instead of the default `Select.Trigger` component. This is achieved by passing a reference to the custom anchor element to the `customAnchor` prop of the `Select.Content` component.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/select.md#_snippet_9\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Select } from \"bits-ui\";\n\n\tlet customAnchor = $state<HTMLElement>(null!);\n</script>\n\n<div bind:this={customAnchor}></div>\n\n<Select.Root>\n\t<Select.Trigger />\n\t<Select.Content {customAnchor}>\n\t\t<!-- ... -->\n\t</Select.Content>\n</Select.Root>\n```\n\n----------------------------------------\n\nTITLE: Toolbar Fully Controlled Svelte\nDESCRIPTION: Shows how to manage the value state of the Bits-UI Toolbar component with full control using function bindings. It involves defining `getValue` and `setValue` functions to control the state's reads and writes. This provides more granular control over the component's state.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/toolbar.md#_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Toolbar } from \"bits-ui\";\n\tlet myValue = $state(\"\");\n\n\tfunction getValue() {\n\t\treturn myValue;\n\t}\n\n\tfunction setValue(newValue: string) {\n\t\tmyValue = newValue;\n\t}\n</script>\n\n<Toolbar.Root>\n\t<Toolbar.Group type=\"single\" bind:value={getValue, setValue}>\n\t\t<!-- ... -->\n\t</Toolbar.Group>\n</Toolbar.Root>\n```\n\n----------------------------------------\n\nTITLE: Radio Groups in Context Menu with bits-ui Svelte\nDESCRIPTION: Demonstrates how to create radio groups within a context menu using the `ContextMenu.RadioGroup` and `ContextMenu.RadioItem` components. Requires bits-ui. The 'value' variable stores the currently selected radio button. Each radio item displays a checkmark if it is selected.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/context-menu.md#_snippet_7\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { ContextMenu } from \"bits-ui\";\n\n\tconst values = [\"one\", \"two\", \"three\"];\n\tlet value = $state(\"one\");\n</script>\n\n<ContextMenu.RadioGroup bind:value>\n\t{#each values as value}\n\t\t<ContextMenu.RadioItem {value}>\n\t\t\t{#snippet children({ checked })}\n\t\t\t\t{#if checked}\n\t\t\t\t\t✅\n\t\t\t\t{/if}\n\t\t\t\t{value}\n\t\t\t{/snippet}\n\t\t</ContextMenu.RadioItem>\n\t{/each}\n</ContextMenu.RadioGroup>\n\n```\n\n----------------------------------------\n\nTITLE: Svelte Button Component\nDESCRIPTION: Defines a simple Svelte component that imports the Button component from `bits-ui` and uses its `Root` element. This component serves as the base for styling the button element.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/getting-started.md#_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Button } from \"bits-ui\";\n\timport \"../app.css\";\n</script>\n\n<Button.Root>Click me</Button.Root>\n```\n\n----------------------------------------\n\nTITLE: Checkbox Group with Name Attribute Svelte\nDESCRIPTION: Shows how to add a `name` attribute to the `Checkbox.Group` component. This is important for submitting the checkbox group values within an HTML form. Each checked checkbox will contribute to an array of values associated with the group's `name`.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/checkbox.md#_snippet_14\n\nLANGUAGE: svelte\nCODE:\n```\n<Checkbox.Group name=\"notifications\">\n\t<!-- ... -->\n</Checkbox.Group>\n```\n\n----------------------------------------\n\nTITLE: Using Global Class with Component in Svelte\nDESCRIPTION: This snippet demonstrates how to apply a global CSS class to a Bits UI Accordion.Trigger component in Svelte. It imports the Accordion component from 'bits-ui' and applies the 'accordion-trigger' class to the Accordion.Trigger component.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/styling.md#_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Accordion } from \"bits-ui\";\n</script>\n\n<Accordion.Trigger class=\"accordion-trigger\">Click me</Accordion.Trigger>\n```\n\n----------------------------------------\n\nTITLE: Floating Element Example with Child Snippet (Svelte)\nDESCRIPTION: Demonstrates the correct structure for a floating element, a `Tooltip.Content`, using the `child` snippet. It includes the required wrapper element with `{...wrapperProps}` and an inner content element with `{...props}` and a fade transition.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/child-snippet.md#_snippet_8\n\nLANGUAGE: svelte\nCODE:\n```\n<Tooltip.Content>\n\t{#snippet child({ wrapperProps, props, open })}\n\t\t{#if open}\n\t\t\t<div {...wrapperProps}>\n\t\t\t\t<div {...props} transition:fade>Custom tooltip content</div>\n\t\t\t</div>\n\t\t{/if}\n\t{/snippet}\n</Tooltip.Content>\n```\n\n----------------------------------------\n\nTITLE: Internal Logic for Child Snippet (Svelte/TS)\nDESCRIPTION: Shows the internal logic of Bits UI components that support the `child` snippet. The component checks if a `child` snippet is provided. If so, it renders the snippet with merged props; otherwise, it renders the default element with its default behavior. The `mergeProps` function merges internal props with user-provided props, allowing for customization while maintaining core functionality.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/child-snippet.md#_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\t// Bits UI component internal logic\n\tlet { child, children, ...restProps } = $props();\n\tconst trigger = makeTrigger();\n\n\t// Merge internal props with user props\n\tconst mergedProps = $derived(mergeProps(restProps, trigger.props));\n</script>\n\n{#if child}\n\t{@render child({ props: mergedProps })}\n{:else}\n\t<button {...mergedProps}>\n\t\t{@render children?.()}\n\t</button>\n{/if}\n```\n\n----------------------------------------\n\nTITLE: Context Menu with Svelte Transitions using bits-ui\nDESCRIPTION: Demonstrates how to integrate Svelte transitions into a context menu using the `forceMount` prop and the `child` snippet. This gives more control over the mounting and unmounting of the content, allowing for smooth animations. Requires bits-ui and Svelte's 'fly' transition. The code uses forceMount to manage content visibility, allowing for the use of Svelte transitions.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/context-menu.md#_snippet_9\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { ContextMenu } from \"bits-ui\";\n\timport { fly } from \"svelte/transition\";\n</script>\n\n<ContextMenu.Content forceMount>\n\t{#snippet child({ wrapperProps, props, open })}\n\t\t{#if open}\n\t\t\t<div {...wrapperProps}>\n\t\t\t\t<div {...props} transition:fly>\n\t\t\t\t\t<ContextMenu.Item>Item 1</ContextMenu.Item>\n\t\t\t\t\t<ContextMenu.Item>Item 2</ContextMenu.Item>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t{/if}\n\t{/snippet}\n</ContextMenu.Content>\n\n```\n\n----------------------------------------\n\nTITLE: Item Selection Event Command Svelte\nDESCRIPTION: This snippet demonstrates how to use the `onSelect` prop on `Command.Item` component to handle item selection events. The provided function will be called when the item is selected.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/command.md#_snippet_7\n\nLANGUAGE: svelte\nCODE:\n```\n<Command.Item onSelect={() => console.log(\"selected something!\")} />\n```\n\n----------------------------------------\n\nTITLE: PinInput Structure (Svelte)\nDESCRIPTION: This code demonstrates the basic structure of the PinInput component. It imports the PinInput component from 'bits-ui' and renders a PinInput.Root element with a maxlength of 6. Inside the root, it uses a snippet with an each block to iterate over cells and render a PinInput.Cell for each cell.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/pin-input.md#_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { PinInput } from \"bits-ui\";\n</script>\n\n<PinInput.Root maxlength={6}>\n\t{#snippet children({ cells })}\n\t\t{#each cells as cell}\n\t\t\t<PinInput.Cell {cell} />\n\t\t{/each}\n\t{/snippet}\n</PinInput.Root>\n```\n\n----------------------------------------\n\nTITLE: Using Svelte Transitions - Svelte\nDESCRIPTION: Demonstrates how to integrate Svelte transitions with the DropdownMenu.Content component using `forceMount` and the `child` snippet. This approach provides more control over the mounting and unmounting of the content, allowing for smoother animations.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/dropdown-menu.md#_snippet_10\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { DropdownMenu } from \"bits-ui\";\n\timport { fly } from \"svelte/transition\";\n</script>\n\n<DropdownMenu.Content forceMount>\n\t{#snippet child({ wrapperProps, props, open })}\n\t\t{#if open}\n\t\t\t<div {...wrapperProps}>\n\t\t\t\t<div {...props} transition:fly>\n\t\t\t\t\t<DropdownMenu.Item>Item 1</DropdownMenu.Item>\n\t\t\t\t\t<DropdownMenu.Item>Item 2</DropdownMenu.Item>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t{/if}\n\t{/snippet}\n</DropdownMenu.Content>\n```\n\n----------------------------------------\n\nTITLE: Customize Escape Key Behavior with escapeKeydownBehavior in Svelte\nDESCRIPTION: This snippet shows how to use the `escapeKeydownBehavior` prop to prevent the Dialog from closing when the Escape key is pressed. Setting the prop to `'ignore'` ensures the dialog remains open.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/dialog.md#_snippet_10\n\nLANGUAGE: svelte\nCODE:\n```\n<Dialog.Content escapeKeydownBehavior=\"ignore\">\n\t<!-- ... -->\n</Dialog.Content>\n```\n\n----------------------------------------\n\nTITLE: Using Custom Context Menu Component with props in Svelte\nDESCRIPTION: An alternative to the previous snippet showcasing how to utilize the custom component with named snippet props.  Requires the `CustomContextMenu.svelte` component defined earlier. Input:  The array of items defines what will appear in the CustomContextMenu, the triggerArea snippet defines how to trigger it.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/context-menu.md#_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport CustomContextMenu from \"./CustomContextMenu.svelte\";\n</script>\n\n{#snippet triggerArea()}\n\t<div class=\"grid size-20 place-items-center rounded-lg border border-dashed p-4\">\n\t\tRight-click me\n\t</div>\n{/snippet}\n\n<CustomContextMenu\n\titems={[\"Dunder Mifflin\", \"Vance Refrigeration\", \"Michael Scott Paper Company\"]}\n\t{triggerArea}\n/>\n\n```\n\n----------------------------------------\n\nTITLE: Styling with Style Prop in Svelte\nDESCRIPTION: This snippet shows how to use the style prop to apply inline styles to a Bits UI Accordion.Trigger component. It demonstrates using both a string and an object to define CSS properties.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/styling.md#_snippet_6\n\nLANGUAGE: svelte\nCODE:\n```\n<!-- prettier-ignore -->\n<Accordion.Trigger style=\"background-color: #3182ce; color: white; padding: 1rem;\">\n\tClick me\n</Accordion.Trigger>\n\n<!-- Or using an object -->\n<Accordion.Trigger style={{ backgroundColor: \"#3182ce\", color: \"white\", padding: \"1rem\" }}>\n\tClick me\n</Accordion.Trigger>\n```\n\n----------------------------------------\n\nTITLE: Combobox with Custom Anchor (Svelte/TS)\nDESCRIPTION: Demonstrates how to anchor the `Combobox.Content` to a custom HTML element instead of the default input.  A reactive variable `customAnchor` is created using `$state<HTMLElement>(null!)`.  This variable is then bound to a div and passed as the `customAnchor` prop to the `Combobox.Content` component.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/combobox.md#_snippet_8\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Combobox } from \"bits-ui\";\n\n\tlet customAnchor = $state<HTMLElement>(null!);\n</script>\n\n<div bind:this={customAnchor}></div>\n\n<Combobox.Root>\n\t<Combobox.Trigger />\n\t<Combobox.Input />\n\t<Combobox.Content {customAnchor}>\n\t\t<!-- ... -->\n\t</Combobox.Content>\n</Combobox.Root>\n```\n\n----------------------------------------\n\nTITLE: Custom Attributes with Child Snippet (Svelte)\nDESCRIPTION: Demonstrates how to pass custom IDs, event handlers, and other attributes to the component and use them within the `child` snippet. These custom attributes are passed to the component and are then accessible in the `props` object within the `child` snippet.  The `{...props}` spread applies these attributes to the custom element.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/child-snippet.md#_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<Accordion.Trigger\n\tid=\"my-custom-id\"\n\tdata-testid=\"accordion-trigger\"\n\tonclick={() => console.log(\"clicked\")}\n>\n\t{#snippet child({ props })}\n\t\t<button {...props}>Open accordion item</button>\n\t{/snippet}\n</Accordion.Trigger>\n```\n\n----------------------------------------\n\nTITLE: Ignore Escape Key Svelte\nDESCRIPTION: Demonstrates how to ignore the Escape key press when the Popover is open by setting the `escapeKeydownBehavior` prop to `'ignore'` on the `Popover.Content` component.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/popover.md#_snippet_7\n\nLANGUAGE: svelte\nCODE:\n```\n<Popover.Content escapeKeydownBehavior=\"ignore\">\n\t<!-- ... -->\n</Popover.Content>\n```\n\n----------------------------------------\n\nTITLE: Menubar Fully Controlled State\nDESCRIPTION: Demonstrates how to use a function binding with the `value` property for fully controlled state management.  Getter and setter functions are used to manage the `activeValue` state.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/menubar.md#_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Menubar } from \"bits-ui\";\n\tlet activeValue = $state(\"\");\n\n\tfunction getValue() {\n\t\treturn activeValue;\n\t}\n\n\tfunction setValue(newValue: string) {\n\t\tactiveValue = newValue;\n\t}\n</script>\n\n<Menubar.Root bind:value={getValue, setValue}>\n\t<Menubar.Menu value=\"menu-1\">\n\t\t<!-- ... -->\n\t</Menubar.Menu>\n\t<Menubar.Menu value=\"menu-2\">\n\t\t<!-- ... -->\n\t</Menubar.Menu>\n</Menubar.Root>\n```\n\n----------------------------------------\n\nTITLE: ToggleGroup Structure Svelte\nDESCRIPTION: This code snippet demonstrates the basic structure of a ToggleGroup component in Svelte. It imports the ToggleGroup component from the 'bits-ui' library and shows how to use the Root and Item components to create a toggle group with 'bold' and 'italic' options.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/toggle-group.md#_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { ToggleGroup } from \"bits-ui\";\n</script>\n\n<ToggleGroup.Root>\n\t<ToggleGroup.Item value=\"bold\">bold</ToggleGroup.Item>\n\t<ToggleGroup.Item value=\"italic\">italic</ToggleGroup.Item>\n</ToggleGroup.Root>\n```\n\n----------------------------------------\n\nTITLE: Passing Snippets as Props (Svelte/TS)\nDESCRIPTION: This snippet demonstrates how to pass snippets to the `MyAlertDialog` component as props.  This approach offers an alternative way to customize the dialog's title and description, especially when snippets are defined separately.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/alert-dialog.md#_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport MyAlertDialog from \"$lib/components/MyAlertDialog.svelte\";\n</script>\n\n{#snippet title()}\n\tDelete your account\n{/snippet}\n{#snippet description()}\n\tThis action cannot be undone.\n{/snippet}\n\n<MyAlertDialog buttonText=\"Open Dialog\" {title} {description}>\n\t<!-- ... additional content here -->\n</MyAlertDialog>\n```\n\n----------------------------------------\n\nTITLE: Disabling Focus Trap (Svelte/TS)\nDESCRIPTION: This example shows how to disable the default focus trap behavior of the Alert Dialog by setting the `trapFocus` prop to `false` on the `AlertDialog.Content` component.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/alert-dialog.md#_snippet_6\n\nLANGUAGE: svelte\nCODE:\n```\n<AlertDialog.Content trapFocus={false}>\n\t<!-- ... -->\n</AlertDialog.Content>\n```\n\n----------------------------------------\n\nTITLE: Custom Dialog Overlay Component with Svelte Transitions and TypeScript\nDESCRIPTION: This snippet defines a reusable `MyDialogOverlay` component in Svelte that applies a fade transition to the `Dialog.Overlay`. It utilizes TypeScript for type definitions and imports necessary modules from `bits-ui` and `svelte`.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/dialog.md#_snippet_16\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Dialog, type WithoutChildrenOrChild } from \"bits-ui\";\n\timport { fade } from \"svelte/transition\";\n\timport type { Snippet } from \"svelte\";\n\n\tlet {\n\t\tref = $bindable(null),\n\t\tduration = 200,\n\t\tchildren,\n\t\t...restProps\n\t}: WithoutChildrenOrChild<Dialog.OverlayProps> & {\n\t\tduration?: number;\n\t\tchildren?: Snippet;\n\t} = $props();\n</script>\n\n<Dialog.Overlay forceMount bind:ref {...restProps}>\n\t{#snippet child({ props, open })}\n\t\t{#if open}\n\t\t\t<div {...props} transition:fade={{ duration }}>\n\t\t\t\t{@render children?.()}\n\t\t\t</div>\n\t\t{/if}\n\t{/snippet}\n</Dialog.Overlay>\n```\n\n----------------------------------------\n\nTITLE: Menubar Two-Way Binding\nDESCRIPTION: Demonstrates how to use two-way binding with the `value` property of the `Menubar.Root` component. It uses `bind:value` to synchronize the `activeValue` state with the active menu.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/menubar.md#_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Menubar } from \"bits-ui\";\n\tlet activeValue = $state(\"\");\n</script>\n\n<button onclick={() => (activeValue = \"menu-1\")}>Open Menubar Menu</button>\n<Menubar.Root bind:value={activeValue}>\n\t<Menubar.Menu value=\"menu-1\">\n\t\t<!-- ... -->\n\t</Menubar.Menu>\n\t<Menubar.Menu value=\"menu-2\">\n\t\t<!-- ... -->\n\t</Menubar.Menu>\n</Menubar.Root>\n```\n\n----------------------------------------\n\nTITLE: Formatting Dates for Display in TypeScript\nDESCRIPTION: This TypeScript code shows how to use the DateFormatter class from @internationalized/date to format dates for display in a locale-aware manner. It creates a formatter and uses it to format a DateValue object.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/dates.md#_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { DateFormatter } from \"@internationalized/date\";\n\n// Create a formatter for the current locale\nconst formatter = new DateFormatter(\"en-US\", {\n\tdateStyle: \"full\",\n\ttimeStyle: \"short\",\n});\n\n// Format a DateValue\nconst formattedDate = formatter.format(myDateValue.toDate(\"America/New_York\"));\n// Example output: \"Wednesday, July 10, 2024 at 12:30 PM\"\n```\n\n----------------------------------------\n\nTITLE: Customizing Initial Focus - Svelte/TS\nDESCRIPTION: This code snippet demonstrates how to customize the initial focus when the Dialog opens using the `onOpenAutoFocus` prop on Dialog.Content in Svelte and Typescript. The example sets focus to a text input element when the dialog opens.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/dialog.md#_snippet_7\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Dialog } from \"bits-ui\";\n\tlet nameInput = $state<HTMLInputElement>();\n</script>\n\n<Dialog.Root>\n\t<Dialog.Trigger>Open Dialog</Dialog.Trigger>\n\t<Dialog.Content\n\t\tonOpenAutoFocus={(e) => {\n\t\t\te.preventDefault();\n\t\t\tnameInput?.focus();\n\t\t}}\n\t>\n\t\t<input type=\"text\" bind:this={nameInput} />\n\t</Dialog.Content>\n</Dialog.Root>\n```\n\n----------------------------------------\n\nTITLE: TypeScript Usage with Bits UI Accordion Component\nDESCRIPTION: This code snippet demonstrates how to use TypeScript with Bits UI components to enforce type safety. It imports the Accordion component and defines two sets of props for the `Accordion.Root` component: one for the 'multiple' type and one for the 'single' type. TypeScript will validate that the value prop matches the expected type based on the specified type.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/getting-started.md#_snippet_5\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Accordion } from \"bits-ui\";\n\n\t// TypeScript will validate these props\n\tconst accordionMultipleProps: Accordion.RootProps = {\n\t\ttype: \"multiple\",\n\t\tvalue: [\"item-1\"], // type error if value is not an array\n\t};\n\n\tconst accordionSingleProps: Accordion.RootProps = {\n\t\ttype: \"single\",\n\t\tvalue: \"item-1\", // type error if value is an array\n\t};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Minimum Value Validation Svelte\nDESCRIPTION: Demonstrates how to implement minimum value validation for the DateField using the `minValue` prop. If the selected date is before the minimum date, the field will be marked as invalid.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/date-field.md#_snippet_9\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport MyDateField from \"$lib/components/MyDateField.svelte\";\n\timport { today, getLocalTimeZone } from \"@internationalized/date\";\n\n\tconst todayDate = today(getLocalTimeZone());\n\tconst yesterday = todayDate.subtract({ days: 1 });\n</script>\n\n<MyDateField minValue={todayDate} value={yesterday} />\n```\n\n----------------------------------------\n\nTITLE: Tooltip Fully Controlled\nDESCRIPTION: Demonstrates how to use Function Bindings to fully control the open state of the Tooltip.Root component. `getOpen` and `setOpen` functions are used to manage the `myOpen` state variable.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/tooltip.md#_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Tooltip } from \"bits-ui\";\n\tlet myOpen = $state(false);\n\n\tfunction getOpen() {\n\t\treturn myOpen;\n\t}\n\n\tfunction setOpen(newOpen: boolean) {\n\t\tmyOpen = newOpen;\n\t}\n</script>\n\n<Tooltip.Root bind:open={getOpen, setOpen}>\n\t<!-- ... -->\n</Tooltip.Root>\n```\n\n----------------------------------------\n\nTITLE: Two-Way Binding Indeterminate State Svelte\nDESCRIPTION: Demonstrates two-way binding for the `indeterminate` state of a `MyCheckbox` component using `bind:indeterminate`. It initializes a local variable `myIndeterminate` to `true`, then binds it to the `indeterminate` prop of the custom checkbox. A button is included to clear the indeterminate state.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/checkbox.md#_snippet_5\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport MyCheckbox from \"$lib/components/MyCheckbox.svelte\";\n\tlet myIndeterminate = $state(true);\n</script>\n\n<button onclick={() => (myIndeterminate = false)}> clear indeterminate </button>\n\n<MyCheckbox bind:indeterminate={myIndeterminate} />\n```\n\n----------------------------------------\n\nTITLE: Fixed Weeks Svelte\nDESCRIPTION: Demonstrates using the `fixedWeeks` prop on the `Calendar.Root` component to ensure a consistent visual appearance by always rendering a fixed number of weeks.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/calendar.md#_snippet_10\n\nLANGUAGE: svelte\nCODE:\n```\n<Calendar.Root fixedWeeks>\n\t<!-- ...-->\n</Calendar.Root>\n```\n\n----------------------------------------\n\nTITLE: Form Submission with Dialog in Svelte\nDESCRIPTION: This snippet demonstrates how to handle form submissions within a Dialog component in Svelte.  It shows how to programmatically close the dialog after an asynchronous action (simulated with a `wait` function) is completed.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/dialog.md#_snippet_18\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Dialog } from \"bits-ui\";\n\n\tfunction wait(ms: number) {\n\t\treturn new Promise((resolve) => setTimeout(resolve, ms));\n\t}\n\n\tlet open = $state(false);\n</script>\n\n<Dialog.Root bind:open>\n\t<Dialog.Portal>\n\t\t<Dialog.Overlay />\n\t\t<Dialog.Content>\n\t\t\t<Dialog.Title>Confirm your action</Dialog.Title>\n\t\t\t<Dialog.Description>Are you sure you want to do this?</Dialog.Description>\n\t\t\t<form\n\t\t\t\tmethod=\"POST\"\n\t\t\t\taction=\"?/someAction\"\n\t\t\t\tonsubmit={() => {\n\t\t\t\t\twait(1000).then(() => (open = false));\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<button type=\"submit\">Submit form</Dialog.Action>\n\t\t\t</form>\n\t\t</Dialog.Content>\n\t</Dialog.Portal>\n</Dialog.Root>\n```\n\n----------------------------------------\n\nTITLE: Using Custom Dialog Overlay Component in Svelte\nDESCRIPTION: This snippet demonstrates how to use the custom `MyDialogOverlay` component within a `Dialog.Root` component from `bits-ui`. It sets the duration for the fade transition and includes `Dialog.Trigger` and `Dialog.Content` components for a complete dialog setup.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/dialog.md#_snippet_17\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Dialog } from \"bits-ui\";\n\timport { MyDialogOverlay } from \"$lib/components\";\n</script>\n\n<Dialog.Root>\n\t<Dialog.Trigger>Open</Dialog.Trigger>\n\t<Dialog.Portal>\n\t\t<MyDialogOverlay duration={300} />\n\t\t<Dialog.Content>\n\t\t\t<!-- ... -->\n\t\t</Dialog.Content>\n\t</Dialog.Portal>\n</Dialog.Root>\n```\n\n----------------------------------------\n\nTITLE: Checkbox Items in Context Menu using bits-ui Svelte\nDESCRIPTION: Demonstrates how to implement checkbox items within a context menu using the `ContextMenu.CheckboxItem` component.  Requires bits-ui. The 'notifications' variable is bound to the checked state of the checkbox item. The content displays either a checkmark or nothing depending on the checked state.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/context-menu.md#_snippet_6\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { ContextMenu } from \"bits-ui\";\n\n\tlet notifications = $state(true);\n</script>\n\n<ContextMenu.CheckboxItem bind:checked={notifications}>\n\t{#snippet children({ checked, indeterminate })}\n\t\t{#if indeterminate}\n\t\t\t-\n\t\t{:else if checked}\n\t\t\t✅\n\t\t{/if}\n\t\tNotifications\n\t{/snippet}\n</ContextMenu.CheckboxItem>\n\n```\n\n----------------------------------------\n\nTITLE: Setting Interact Outside Behavior - Svelte\nDESCRIPTION: This snippet demonstrates how to set the `interactOutsideBehavior` prop to 'ignore' on the `AlertDialog.Content` component, preventing the dialog from closing when an interaction occurs outside its boundaries. This allows custom event handling or prevents accidental closing.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/alert-dialog.md#_snippet_12\n\nLANGUAGE: svelte\nCODE:\n```\n<AlertDialog.Content interactOutsideBehavior=\"ignore\">\n\t<!-- ... -->\n</AlertDialog.Content>\n```\n\n----------------------------------------\n\nTITLE: Setting Date Granularity - Svelte\nDESCRIPTION: This snippet shows how to set the granularity of the DateField component using the `granularity` prop. The granularity determines which segments (day, hour, minute, second) are rendered in the date field.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/date-field.md#_snippet_12\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport MyDateField from \"$lib/components/MyDateField.svelte\";\n\timport { CalendarDateTime } from \"@internationalized/date\";\n\n\tconst value = new CalendarDateTime(2024, 8, 2, 12, 30);\n</script>\n\n<MyDateField granularity=\"second\" {value} />\n```\n\n----------------------------------------\n\nTITLE: Updating DateValue Objects in TypeScript\nDESCRIPTION: This TypeScript code demonstrates the correct way to update DateValue objects, which are immutable. It shows how to use the set(), add(), subtract(), and cycle() methods to create new instances with updated values.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/dates.md#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\n// INCORRECT - will not work\nlet placeholder = new CalendarDate(2024, 7, 10);\nplaceholder.month = 8; // Error! DateValue objects are immutable\n\n// CORRECT - using methods that return new instances\nlet placeholder = new CalendarDate(2024, 7, 10);\n\n// Method 1: Using set()\nplaceholder = placeholder.set({ month: 8 });\n\n// Method 2: Using add()\nplaceholder = placeholder.add({ months: 1 });\n\n// Method 3: Using subtract()\nplaceholder = placeholder.subtract({ days: 5 });\n\n// Method 4: Using cycle() - cycles through valid values\nplaceholder = placeholder.cycle(\"month\", \"forward\", [1, 3, 5, 7, 9, 11]);\n```\n\n----------------------------------------\n\nTITLE: Exclude Child Props in Svelte\nDESCRIPTION: This code snippet demonstrates how to use the `WithoutChildrenOrChild` type from `bits-ui` to exclude the `child` and `children` props from a custom `Accordion.Trigger` component in Svelte. It defines a `CustomAccordionTrigger` component that accepts a `title` prop and other `Accordion.TriggerProps` except for `child` and `children`. The snippet also uses the `$props()` function from Svelte to destructure the props passed to the component.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/type-helpers/without-children-or-child.md#_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Accordion, type WithoutChildrenOrChild } from \"bits-ui\";\n\n\tlet {\n\t\ttitle,\n\t\t...restProps\n\t}: WithoutChildrenOrChild<\n\t\tAccordion.TriggerProps & {\n\t\t\ttitle: string;\n\t\t}\n\t> = $props();\n</script>\n\n<Accordion.Trigger>\n\t{title}\n</Accordion.Trigger>\n```\n\n----------------------------------------\n\nTITLE: Disabling Focus Trap - Svelte\nDESCRIPTION: This code snippet shows how to disable the focus trap on the Dialog.Content component using the `trapFocus={false}` prop in Svelte.  It's generally not recommended as it compromises accessibility.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/dialog.md#_snippet_6\n\nLANGUAGE: svelte\nCODE:\n```\n<Dialog.Content trapFocus={false}>\n\t<!-- ... -->\n</Dialog.Content>\n```\n\n----------------------------------------\n\nTITLE: Using the Reusable MySlider Component\nDESCRIPTION: Illustrates how to use the reusable `MySlider` component created earlier, binding its value to reactive variables and setting the `type` prop to either \"multiple\" or \"single\".\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/slider.md#_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport MySlider from \"$lib/components/MySlider.svelte\";\n\n\tlet multiValue = $state([5, 10]);\n\tlet singleValue = $state(50);\n</script>\n\n<MySlider bind:value={multiValue} type=\"multiple\" />\n<MySlider bind:value={singleValue} type=\"single\" />\n```\n\n----------------------------------------\n\nTITLE: Close Focus Override Svelte\nDESCRIPTION: Demonstrates overriding the default focus behavior when the Popover is closed. It uses the `onCloseAutoFocus` prop to prevent the default focusing of the trigger element and instead focuses a specific input field using a bound `nameInput` variable.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/popover.md#_snippet_5\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Popover } from \"bits-ui\";\n\tlet nameInput = $state<HTMLInputElement>();\n</script>\n\n<input type=\"text\" bind:this={nameInput} />\n<Popover.Root>\n\t<Popover.Trigger>Open Popover</Popover.Trigger>\n\t<Popover.Content\n\t\tonCloseAutoFocus={(e) => {\n\t\t\te.preventDefault();\n\t\t\tnameInput?.focus();\n\t\t}}\n\t>\n\t\t<!-- ... -->\n\t</Popover.Content>\n</Popover.Root>\n```\n\n----------------------------------------\n\nTITLE: Styling with Data Attributes in CSS\nDESCRIPTION: This CSS snippet shows how to style Bits UI components using data attributes. It targets all elements with the 'data-accordion-trigger' attribute and applies specific styles such as height, width, background color, and text color.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/styling.md#_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n/* Target all Accordion.Trigger components */\n[data-accordion-trigger] {\n\theight: 3rem;\n\twidth: 100%;\n\tbackground-color: #3182ce;\n\tcolor: #fff;\n}\n```\n\n----------------------------------------\n\nTITLE: Navigation Menu Submenus Svelte\nDESCRIPTION: Demonstrates how to create submenus within a navigation menu using the `NavigationMenu.Sub` component.  Submenus require a `value` prop to manage the active state, similar to Tabs.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/navigation-menu.md#_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<NavigationMenu.Root>\n\t<NavigationMenu.List>\n\t\t<NavigationMenu.Item>\n\t\t\t<NavigationMenu.Trigger>Item one</NavigationMenu.Trigger>\n\t\t\t<NavigationMenu.Content>Item one content</NavigationMenu.Content>\n\t\t</NavigationMenu.Item>\n\t\t<NavigationMenu.Item>\n\t\t\t<NavigationMenu.Trigger>Item two</NavigationMenu.Trigger>\n\t\t\t<NavigationMenu.Content>\n\t\t\t\t<NavigationMenu.Sub value=\"sub1\">\n\t\t\t\t\t<NavigationMenu.List>\n\t\t\t\t\t\t<NavigationMenu.Item value=\"sub1\">\n\t\t\t\t\t\t\t<NavigationMenu.Trigger>Sub item one</NavigationMenu.Trigger>\n\t\t\t\t\t\t\t<NavigationMenu.Content>Sub item one content</NavigationMenu.Content>\n\t\t\t\t\t\t</NavigationMenu.Item>\n\t\t\t\t\t\t<NavigationMenu.Item value=\"sub2\">\n\t\t\t\t\t\t\t<NavigationMenu.Trigger>Sub item two</NavigationMenu.Trigger>\n\t\t\t\t\t\t\t<NavigationMenu.Content>Sub item two content</NavigationMenu.Content>\n\t\t\t\t\t\t</NavigationMenu.Item>\n\t\t\t\t\t</NavigationMenu.List>\n\t\t\t\t</NavigationMenu.Sub>\n\t\t\t</NavigationMenu.Content>\n\t\t</NavigationMenu.Item>\n\t</NavigationMenu.List>\n</NavigationMenu.Root>\n```\n\n----------------------------------------\n\nTITLE: Radio Group Name Prop - Svelte\nDESCRIPTION: Illustrates how to set the `name` prop on the `RadioGroup.Root` component to enable form submission. A hidden input element will be rendered with the specified name.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/radio-group.md#_snippet_5\n\nLANGUAGE: svelte\nCODE:\n```\n<RadioGroup.Root name=\"favoriteFruit\">\n\t<!-- ... -->\n</RadioGroup.Root>\n```\n\n----------------------------------------\n\nTITLE: Maximum Value Validation Svelte\nDESCRIPTION: Demonstrates setting a maximum selectable date for the Calendar component using Svelte. It utilizes `today` and `getLocalTimeZone` from `@internationalized/date` to define today's date. It then adds one day to create a 'tomorrow' date. Setting the `maxValue` prop on `Calendar.Root` to `todayDate` and attempting to initialize the component with 'tomorrow' will enforce the maximum value constraint.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/calendar.md#_snippet_7\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Calendar } from \"bits-ui\";\n\timport { today, getLocalTimeZone } from \"@internationalized/date\";\n\n\tconst todayDate = today(getLocalTimeZone());\n\tconst tomorrow = todayDate.add({ days: 1 });\n</script>\n\n<Calendar.Root maxValue={todayDate} value={tomorrow}>\n\t<!-- ...-->\n</Calendar.Root>\n```\n\n----------------------------------------\n\nTITLE: LinkPreview Fully Controlled Svelte\nDESCRIPTION: Shows how to fully control the open state of the LinkPreview component using function bindings.  It uses `$state` and defines separate `getOpen` and `setOpen` functions to manage the `myOpen` state variable.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/link-preview.md#_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { LinkPreview } from \"bits-ui\";\n\tlet myOpen = $state(false);\n\n\tfunction getOpen() {\n\t\treturn myOpen;\n\t}\n\n\tfunction setOpen(newOpen: boolean) {\n\t\tmyOpen = newOpen;\n\t}\n</script>\n\n<LinkPreview.Root bind:open={getOpen, setOpen}>\n\t<!-- ... -->\n</LinkPreview.Root>\n```\n\n----------------------------------------\n\nTITLE: Force Mounting Svelte\nDESCRIPTION: Demonstrates how to use the `forceMount` prop on the `NavigationMenu.Content` and `NavigationMenu.Viewport` components to ensure they persist in the DOM, even when the menu is closed. This is particularly useful for SEO purposes.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/navigation-menu.md#_snippet_7\n\nLANGUAGE: svelte\nCODE:\n```\n<NavigationMenu.Content forceMount></NavigationMenu.Content>\n<NavigationMenu.Viewport forceMount></NavigationMenu.Viewport>\n```\n\n----------------------------------------\n\nTITLE: Exclude Children Prop from Accordion Root - Svelte\nDESCRIPTION: This Svelte component, CustomAccordion, uses the WithoutChildren type helper from the bits-ui library to exclude the children prop from the Accordion.RootProps. This allows custom props to be passed to the Accordion.Root component without conflicts. The Accordion component is used to create an accordion with custom value and onValueChange props. Dependencies: bits-ui.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/type-helpers/without-children.md#_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Accordion, type WithoutChildren } from \"bits-ui\";\n\n\tlet { value, onValueChange, ...restProps }: WithoutChildren<Accordion.RootProps> = $props();\n</script>\n\n<Accordion.Root {...restProps}>\n\t<Accordion.Item {value} {onValueChange}>\n\t\t<Accordion.Header />\n\t\t<Accordion.Trigger />\n\t\t<Accordion.Content />\n\t</Accordion.Item>\n</Accordion.Root>\n```\n\n----------------------------------------\n\nTITLE: Navigation Menu Structure Svelte\nDESCRIPTION: Defines the basic structure of a Navigation Menu component in Svelte using the bits-ui library. It demonstrates how to create a root, list, items, triggers, content, links, submenus, and a viewport within the navigation menu.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/navigation-menu.md#_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { NavigationMenu } from \"bits-ui\";\n</script>\n\n<NavigationMenu.Root>\n\t<NavigationMenu.List>\n\t\t<NavigationMenu.Item>\n\t\t\t<NavigationMenu.Trigger />\n\t\t\t<NavigationMenu.Content />\n\t\t</NavigationMenu.Item>\n\t\t<NavigationMenu.Item>\n\t\t\t<NavigationMenu.Trigger />\n\t\t\t<NavigationMenu.Content>\n\t\t\t\t<NavigationMenu.Link />\n\t\t\t</NavigationMenu.Content>\n\t\t</NavigationMenu.Item>\n\t\t<NavigationMenu.Item>\n\t\t\t<NavigationMenu.Link />\n\t\t</NavigationMenu.Item>\n\t\t<NavigationMenu.Item>\n\t\t\t<NavigationMenu.Trigger />\n\t\t\t<NavigationMenu.Content>\n\t\t\t\t<NavigationMenu.Sub>\n\t\t\t\t\t<NavigationMenu.List />\n\t\t\t\t\t<NavigationMenu.Viewport />\n\t\t\t\t</NavigationMenu.Sub>\n\t\t\t</NavigationMenu.Content>\n\t\t</NavigationMenu.Item>\n\t\t<NavigationMenu.Indicator />\n\t</NavigationMenu.List>\n\t<NavigationMenu.Viewport />\n</NavigationMenu.Root>\n```\n\n----------------------------------------\n\nTITLE: Menubar with Svelte Transitions\nDESCRIPTION: Demonstrates how to use Svelte transitions with the `Menubar.Content` component using `forceMount` and the `child` snippet.  The example applies a `fly` transition to the content.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/menubar.md#_snippet_8\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Menubar } from \"bits-ui\";\n\timport { fly } from \"svelte/transition\";\n</script>\n\n<Menubar.Content forceMount>\n\t{#snippet child({ wrapperProps, props, open })}\n\t\t{#if open}\n\t\t\t<div {...wrapperProps}>\n\t\t\t\t<div {...props} transition:fly>\n\t\t\t\t\t<Menubar.Item>Item 1</Menubar.Item>\n\t\t\t\t\t<Menubar.Item>Item 2</Menubar.Item>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t{/if}\n\t{/snippet}\n</Menubar.Content>\n```\n\n----------------------------------------\n\nTITLE: Using Svelte Transitions with Combobox Content (Svelte/Typescript)\nDESCRIPTION: This snippet illustrates how to use Svelte transitions within the `Combobox.Content` component by forcefully mounting it using the `forceMount` prop and a child snippet. It imports the `fly` transition from `svelte/transition` and applies it to a div within the content.  The code demonstrates integrating Svelte's animation capabilities with Bits UI components.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/combobox.md#_snippet_11\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Combobox } from \"bits-ui\";\n\timport { fly } from \"svelte/transition\";\n</script>\n\n<Combobox.Content forceMount>\n\t{#snippet child({ wrapperProps, props, open })}\n\t\t{#if open}\n\t\t\t<div {...wrapperProps}>\n\t\t\t\t<div {...props} transition:fly>\n\t\t\t\t\t<!-- ... -->\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t{/if}\n\t{/snippet}\n</Combobox.Content>\n```\n\n----------------------------------------\n\nTITLE: Override Interact Outside Svelte\nDESCRIPTION: Demonstrates how to override the default behavior when the user interacts outside the Popover by using the `onInteractOutside` prop on the `Popover.Content` component. The example prevents the default action by calling `e.preventDefault()`.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/popover.md#_snippet_10\n\nLANGUAGE: svelte\nCODE:\n```\n<Popover.Content onInteractOutside={(e) => e.preventDefault()}>\n\t<!-- ... -->\n</Popover.Content>\n```\n\n----------------------------------------\n\nTITLE: Update Selected By Group Method Command TS\nDESCRIPTION: This snippet shows how to use the `updateSelectedByGroup(change: 1 | -1)` method to move selection to the first item in the next/previous group. It also specifies that the selection falls back to the next/previous item if no group is found.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/command.md#_snippet_12\n\nLANGUAGE: ts\nCODE:\n```\ncommand.updateSelectedByGroup(1); // move to next group\ncommand.updateSelectedByGroup(-1); // move to previous group\n```\n\n----------------------------------------\n\nTITLE: Using Custom Collapsible Svelte\nDESCRIPTION: Shows how to use the custom MyCollapsible component within a page (+page.svelte).  It imports the MyCollapsible component and then renders it with a specified button text and content.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/collapsible.md#_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport MyCollapsible from \"$lib/components/MyCollapsible.svelte\";\n</script>\n\n<MyCollapsible buttonText=\"Open Collapsible\">Here is my collapsible content.</MyCollapsible>\n```\n\n----------------------------------------\n\nTITLE: Highlight/Unhighlight Event Handlers in Combobox Item (Svelte)\nDESCRIPTION: This snippet demonstrates how to use the `onHighlight` and `onUnhighlight` props on a `Combobox.Item` component to trigger side effects, such as logging messages to the console, when the item is highlighted or unhighlighted.  It shows the basic usage for event handling within a Bits UI Combobox.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/combobox.md#_snippet_10\n\nLANGUAGE: svelte\nCODE:\n```\n<Combobox.Item onHighlight={() => console.log('I am highlighted!')} onUnhighlight={() => console.log('I am unhighlighted!')} />\n<!-- ... -->\n</Combobox.Item>\n```\n\n----------------------------------------\n\nTITLE: Import and use Button component Svelte\nDESCRIPTION: This snippet demonstrates how to import the Button component from the bits-ui library in a Svelte component. It then shows how to use the Button.Root component within the template.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/button.md#_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Button } from \"bits-ui\";\n</script>\n\n<Button.Root />\n```\n\n----------------------------------------\n\nTITLE: Reusable Progress Component Svelte/TS\nDESCRIPTION: This snippet demonstrates how to create a reusable progress component using the Bits-UI Progress primitive. It imports Progress and useId from bits-ui and defines props for max, value, min, label, and valueLabel.  It creates a custom progress component with label and value display.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/progress.md#_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Progress, useId } from \"bits-ui\";\n\timport type { ComponentProps } from \"svelte\";\n\n\tlet {\n\t\tmax = 100,\n\t\tvalue = 0,\n\t\tmin = 0,\n\t\tlabel,\n\t\tvalueLabel,\n\t}: ComponentProps<typeof Progress.Root> & {\n\t\tlabel: string;\n\t\tvalueLabel: string;\n\t} = $props();\n\n\tconst labelId = useId();\n</script>\n\n<div>\n\t<span id={labelId}> {label} </span>\n\t<span>{valueLabel}</span>\n</div>\n<Progress.Root aria-labelledby={labelId} aria-valuetext={valueLabel} {value} {min} {max} />\n```\n\n----------------------------------------\n\nTITLE: Using the Reusable Dropdown Menu - Svelte\nDESCRIPTION: Demonstrates how to use the custom `MyDropdownMenu` component with specific props like buttonText and items.  This example passes a list of strings to be used as the selectable items in the dropdown.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/dropdown-menu.md#_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport MyDropdownMenu from \"./MyDropdownMenu.svelte\";\n</script>\n\n<MyDropdownMenu\n\tbuttonText=\"Select a manager\"\n\titems={[\"Michael Scott\", \"Dwight Schrute\", \"Jim Halpert\"]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Custom Keyframe Animations in CSS\nDESCRIPTION: This CSS snippet demonstrates how to use custom keyframe animations with CSS variables to control the opening and closing of an accordion. It defines `accordionOpen` and `accordionClose` keyframes and applies them based on the `data-state` attribute.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/styling.md#_snippet_11\n\nLANGUAGE: css\nCODE:\n```\n/* Define keyframes for opening animation */\n@keyframes accordionOpen {\n\t0% {\n\t\theight: 0;\n\t\topacity: 0;\n\t}\n\t80% {\n\t\theight: var(--bits-accordion-content-height);\n\t\topacity: 0.8;\n\t}\n\t100% {\n\t\theight: var(--bits-accordion-content-height);\n\t\topacity: 1;\n\t}\n}\n\n/* Define keyframes for closing animation */\n@keyframes accordionClose {\n\t0% {\n\t\theight: var(--bits-accordion-content-height);\n\t\topacity: 1;\n\t}\n\t20% {\n\t\theight: var(--bits-accordion-content-height);\n\t\topacity: 0.8;\n\t}\n\t100% {\n\t\theight: 0;\n\t\topacity: 0;\n\t}\n}\n\n/* Apply animations based on state */\n[data-accordion-content][data-state=\"open\"] {\n\tanimation: accordionOpen 400ms cubic-bezier(0.16, 1, 0.3, 1) forwards;\n}\n\n[data-accordion-content][data-state=\"closed\"] {\n\tanimation: accordionClose 300ms cubic-bezier(0.7, 0, 0.84, 0) forwards;\n}\n```\n\n----------------------------------------\n\nTITLE: Nested Dialogs Implementation in Svelte\nDESCRIPTION: This snippet demonstrates how to nest `MyDialog` components within each other to create complex user interfaces with multiple dialogs.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/dialog.md#_snippet_14\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport MyDialog from \"$lib/components/MyDialog.svelte\";\n</script>\n\n<MyDialog buttonText=\"Open first dialog\">\n\t{#snippet title()}\n\t\tFirst Dialog\n\t{/snippet}\n\t{#snippet description()}\n\t\tThis is the first dialog.\n\t{/snippet}\n\t<MyDialog buttonText=\"Open second dialog\">\n\t\t{#snippet title()}\n\t\t\tSecond Dialog\n\t\t{/snippet}\n\t\t{#snippet description()}\n\t\t\tThis is the second dialog.\n\t\t{/snippet}\n\t</MyDialog>\n</MyDialog>\n```\n\n----------------------------------------\n\nTITLE: Two-Way Binding for Context Menu Open State in Svelte\nDESCRIPTION: Demonstrates how to use two-way binding with `bind:open` to manage the open state of the context menu. This simplifies state synchronization. Requires bits-ui. The `isOpen` variable controls whether the ContextMenu is open.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/context-menu.md#_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { ContextMenu } from \"bits-ui\";\n\tlet isOpen = $state(false);\n</script>\n\n<button onclick={() => (isOpen = true)}>Open Context Menu</button>\n\n<ContextMenu.Root bind:open={isOpen}>\n\t<!-- ... -->\n</ContextMenu.Root>\n\n```\n\n----------------------------------------\n\nTITLE: Pagination Structure - Svelte\nDESCRIPTION: Demonstrates the basic structure of the Pagination component in Svelte using the imported Pagination module from bits-ui. It uses Pagination.Root, Pagination.PrevButton, Pagination.Page, and Pagination.NextButton components to create the pagination interface.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/pagination.md#_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Pagination } from \"bits-ui\";\n</script>\n\n<Pagination.Root let:pages>\n\t<Pagination.PrevButton />\n\t{#each pages as page (page.key)}\n\t\t<Pagination.Page {page} />\n\t{/each}\n\t<Pagination.NextButton />\n</Pagination.Root>\n```\n\n----------------------------------------\n\nTITLE: Advanced Animation CSS\nDESCRIPTION: Defines the CSS styles for the advanced animation of the NavigationMenu.Viewport and NavigationMenu.Content. It uses keyframes and CSS variables to create smooth transitions based on the enter/exit direction.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/navigation-menu.md#_snippet_6\n\nLANGUAGE: css\nCODE:\n```\n/* app.css */\n.NavigationMenuContent {\n\tposition: absolute;\n\ttop: 0;\n\tleft: 0;\n\tanimation-duration: 250ms;\n\tanimation-timing-function: ease;\n}\n.NavigationMenuContent[data-motion=\"from-start\"] {\n\tanimation-name: enter-from-left;\n}\n.NavigationMenuContent[data-motion=\"from-end\"] {\n\tanimation-name: enter-from-right;\n}\n.NavigationMenuContent[data-motion=\"to-start\"] {\n\tanimation-name: exit-to-left;\n}\n.NavigationMenuContent[data-motion=\"to-end\"] {\n\tanimation-name: exit-to-right;\n}\n\n.NavigationMenuViewport {\n\tposition: relative;\n\twidth: var(--bits-navigation-menu-viewport-width);\n\theight: var(--bits-navigation-menu-viewport-height);\n\ttransition:\n\t\twidth,\n\t\theight,\n\t\t250ms ease;\n}\n\n@keyframes enter-from-right {\n\tfrom {\n\t\topacity: 0;\n\t\ttransform: translateX(200px);\n\t}\n\tto {\n\t\topacity: 1;\n\t\ttransform: translateX(0);\n\t}\n}\n\n@keyframes enter-from-left {\n\tfrom {\n\t\topacity: 0;\n\t\ttransform: translateX(-200px);\n\t}\n\tto {\n\t\topacity: 1;\n\t\ttransform: translateX(0);\n\t}\n}\n\n@keyframes exit-to-right {\n\tfrom {\n\t\topacity: 1;\n\t\ttransform: translateX(0);\n\t}\n\tto {\n\t\topacity: 0;\n\t\ttransform: translateX(200px);\n\t}\n}\n\n@keyframes exit-to-left {\n\tfrom {\n\t\topacity: 1;\n\t\ttransform: translateX(0);\n\t}\n\tto {\n\t\topacity: 0;\n\t\ttransform: translateX(-200px);\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Date Strings in TypeScript\nDESCRIPTION: This TypeScript code demonstrates how to parse date strings using various parsing functions from @internationalized/date. It provides examples for parsing CalendarDate, CalendarDateTime, and ZonedDateTime objects from different string formats.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/dates.md#_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {\n\tparseDate, // For CalendarDate\n\tparseDateTime, // For CalendarDateTime\n\tparseZonedDateTime, // For ZonedDateTime with timezone name\n\tparseAbsolute, // For ZonedDateTime from UTC string + timezone\n\tparseAbsoluteToLocal, // For ZonedDateTime in local timezone\n} from \"@internationalized/date\";\n\n// Examples\nconst date = parseDate(\"2024-07-10\"); // CalendarDate\nconst dateTime = parseDateTime(\"2024-07-10T12:30:00\"); // CalendarDateTime\nconst zonedDate = parseZonedDateTime(\"2024-07-12T00:45[America/New_York]\"); // ZonedDateTime\nconst absoluteDate = parseAbsolute(\"2024-07-12T07:45:00Z\", \"America/New_York\"); // ZonedDateTime\nconst localDate = parseAbsoluteToLocal(\"2024-07-12T07:45:00Z\"); // ZonedDateTime in user's timezone\n```\n\n----------------------------------------\n\nTITLE: Vertical Orientation Slider\nDESCRIPTION: Explains how to use the `orientation` prop to change the orientation of the slider to vertical.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/slider.md#_snippet_9\n\nLANGUAGE: svelte\nCODE:\n```\n<Slider.Root type=\"single\" orientation=\"vertical\">\n\t<!-- ... -->\n</Slider.Root>\n```\n\n----------------------------------------\n\nTITLE: Disable Filtering Command Svelte\nDESCRIPTION: This snippet demonstrates how to disable filtering in the Command component by setting the `shouldFilter` prop to `false`. This is useful when you want to handle filtering manually, such as when fetching items asynchronously or implementing custom filtering logic.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/command.md#_snippet_6\n\nLANGUAGE: svelte\nCODE:\n```\n<Command.Root shouldFilter={false}>\n\t<!-- ... -->\n</Command.Root>\n```\n\n----------------------------------------\n\nTITLE: Accordion.Trigger Ref with Child Snippet Svelte/TS\nDESCRIPTION: This code snippet shows how the `ref` prop works with child snippets in Bits UI. The reference binding automatically works with delegated child elements/components. A custom component `CustomButton` is used within the snippet.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/ref.md#_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport CustomButton from \"./CustomButton.svelte\";\n\timport { Accordion } from \"bits-ui\";\n\n\tlet triggerRef = $state<HTMLButtonElement | null>(null);\n\n\tfunction focusTrigger() {\n\t\ttriggerRef?.focus();\n\t}\n</script>\n\n<Accordion.Trigger bind:ref={triggerRef}>\n\t{#snippet child({ props })}\n\t\t<CustomButton {...props} />\n\t{/snippet}\n</Accordion.Trigger>\n```\n\n----------------------------------------\n\nTITLE: Transitions Example with Child Snippet (Svelte)\nDESCRIPTION: Shows how to use Svelte transitions within the `child` snippet to animate the appearance of a `Dialog.Content` component. The `transition:scale` directive applies a scale transition when the dialog opens.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/child-snippet.md#_snippet_7\n\nLANGUAGE: svelte\nCODE:\n```\n<Dialog.Content>\n\t{#snippet child({ props, open })}\n\t\t{#if open}\n\t\t\t<div {...props} transition:scale={{ start: 0.95 }}>\n\t\t\t\tDialog content with a scale transition\n\t\t\t</div>\n\t\t{/if}\n\t{/snippet}\n</Dialog.Content>\n```\n\n----------------------------------------\n\nTITLE: Disabling Scroll Lock - Svelte\nDESCRIPTION: This code snippet shows how to disable scroll locking when the Dialog is open using the `preventScroll={false}` prop on the Dialog.Content component in Svelte. This allows the body to be scrolled while the dialog is open.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/dialog.md#_snippet_9\n\nLANGUAGE: svelte\nCODE:\n```\n<Dialog.Content preventScroll={false}>\n\t<!-- ... -->\n</Dialog.Content>\n```\n\n----------------------------------------\n\nTITLE: LinkPreview Static Content Svelte\nDESCRIPTION: Demonstrates how to opt-out of Floating UI by using the `LinkPreview.ContentStatic` component instead of `LinkPreview.Content`.  This allows for manual positioning of the content.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/link-preview.md#_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<LinkPreview.Root>\n\t<LinkPreview.Trigger />\n\t<LinkPreview.ContentStatic>\n\t\t<!-- ... -->\n\t</LinkPreview.ContentStatic>\n</LinkPreview.Root>\n```\n\n----------------------------------------\n\nTITLE: Single Type Slider\nDESCRIPTION: Shows how to set the `type` prop to \"single\" to restrict the slider to a single value, useful in scenarios with only one thumb.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/slider.md#_snippet_7\n\nLANGUAGE: svelte\nCODE:\n```\n<Slider.Root type=\"single\" />\n```\n\n----------------------------------------\n\nTITLE: Radio Group Item Disabled Prop - Svelte\nDESCRIPTION: Shows how to disable a specific radio group item by setting the `disabled` prop to `true` on the `RadioGroup.Item` component.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/radio-group.md#_snippet_7\n\nLANGUAGE: svelte\nCODE:\n```\n<RadioGroup.Item value=\"apple\" disabled>Apple</RadioGroup.Item>\n```\n\n----------------------------------------\n\nTITLE: Managing Open State with Function Binding - Svelte\nDESCRIPTION: Illustrates managing the open state of a Dropdown Menu using function binding for complete control over reads and writes. Functions are defined for getting and setting the open state, allowing for custom logic.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/dropdown-menu.md#_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { DropdownMenu } from \"bits-ui\";\n\tlet myOpen = $state(false);\n\n\tfunction getOpen() {\n\t\treturn myOpen;\n\t}\n\n\tfunction setOpen(newOpen: boolean) {\n\t\tmyOpen = newOpen;\n\t}\n</script>\n\n<DropdownMenu.Root bind:open={getOpen, setOpen}>\n\t<!-- ... -->\n</DropdownMenu.Root>\n```\n\n----------------------------------------\n\nTITLE: LinkPreview Two-Way Binding Svelte\nDESCRIPTION: Illustrates how to use two-way binding to manage the open state of the LinkPreview component. It utilizes a state variable `isOpen` and binds it to the `open` prop of the `LinkPreview.Root` component.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/link-preview.md#_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { LinkPreview } from \"bits-ui\";\n\tlet isOpen = $state(false);\n</script>\n\n<button onclick={() => (isOpen = true)}>Open Link Preview</button>\n\n<LinkPreview.Root bind:open={isOpen}>\n\t<!-- ... -->\n</LinkPreview.Root>\n```\n\n----------------------------------------\n\nTITLE: Creating a new Svelte project with create-svelte\nDESCRIPTION: This snippet demonstrates how to create a new Svelte project using the `create-svelte` command-line tool. It showcases creating a project in the current directory and in a specified directory.  Dependencies include Node.js and npm (or pnpm/yarn).\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/tests/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# create a new project in the current directory\nnpm create svelte@latest\n\n# create a new project in my-app\nnpm create svelte@latest my-app\n```\n\n----------------------------------------\n\nTITLE: Multiple Months Svelte\nDESCRIPTION: Demonstrates using the `numberOfMonths` prop on the `Calendar.Root` component to display multiple months at once.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/calendar.md#_snippet_11\n\nLANGUAGE: svelte\nCODE:\n```\n<Calendar.Root numberOfMonths={2}>\n\t<!-- ...-->\n</Calendar.Root>\n```\n\n----------------------------------------\n\nTITLE: Scroll Area Type Auto Svelte\nDESCRIPTION: Sets the `type` prop of the `MyScrollArea` component to `auto`. This makes the scroll area behave like typical browser scrollbars, appearing only when content exceeds the viewport.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/scroll-area.md#_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<MyScrollArea type=\"auto\">\n\t<!-- ... -->\n</MyScrollArea>\n```\n\n----------------------------------------\n\nTITLE: Styling Bits UI Button with CSS Data Attributes\nDESCRIPTION: This CSS snippet demonstrates how to style a Bits UI Button component using data attributes. It targets the `data-button-root` attribute applied by the `Button.Root` component and applies custom styles such as height, width, background color, text color, border radius, padding, and font weight. It also includes a hover state to change the background color on hover.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/getting-started.md#_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n[data-button-root] {\n\theight: 3rem;\n\twidth: 100%;\n\tbackground-color: #3182ce;\n\tcolor: white;\n\tborder-radius: 0.375rem;\n\tpadding: 0.5rem 1rem;\n\tfont-weight: 500;\n}\n\n[data-button-root]:hover {\n\tbackground-color: #2c5282;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a ZonedDateTime in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create ZonedDateTime objects, representing dates with time and timezone information. It showcases creation from individual components and parsing from various ISO 8601 string formats using different parsing functions.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/dates.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Creating a ZonedDateTime\nimport {\n\tZonedDateTime,\n\tparseZonedDateTime,\n\tparseAbsolute,\n\tparseAbsoluteToLocal,\n} from \"@internationalized/date\";\n\nconst date = new ZonedDateTime(\n\t2022,\n\t2,\n\t3, // Date (year, month, day)\n\t\"America/Los_Angeles\", // Timezone\n\t-28800000, // UTC offset in milliseconds\n\t9,\n\t15,\n\t0 // Time (hour, minute, second)\n);\n\n// From ISO 8601 strings using different parsing functions\nconst date1 = parseZonedDateTime(\"2024-07-12T00:45[America/New_York]\");\nconst date2 = parseAbsolute(\"2024-07-12T07:45:00Z\", \"America/New_York\");\nconst date3 = parseAbsoluteToLocal(\"2024-07-12T07:45:00Z\");\n```\n\n----------------------------------------\n\nTITLE: Portal Disable Svelte\nDESCRIPTION: This example demonstrates how to disable the portal behavior of the Bits UI Portal component using the `disabled` prop.  When disabled, the content will not be moved to a portal.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/utilities/portal.md#_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Portal } from \"bits-ui\";\n</script>\n\n<Portal disabled>\n\t<div>This content will not be portalled</div>\n</Portal>\n```\n\n----------------------------------------\n\nTITLE: Nested Menus in Context Menu with bits-ui Svelte\nDESCRIPTION: Demonstrates how to create nested menus (submenus) within a context menu using the `ContextMenu.Sub`, `ContextMenu.SubTrigger`, and `ContextMenu.SubContent` components. Requires bits-ui. This example shows a basic submenu structure with two items in both the main menu and the submenu.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/context-menu.md#_snippet_8\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { ContextMenu } from \"bits-ui\";\n</script>\n\n<ContextMenu.Content>\n\t<ContextMenu.Item>Item 1</ContextMenu.Item>\n\t<ContextMenu.Item>Item 2</ContextMenu.Item>\n\t<ContextMenu.Sub>\n\t\t<ContextMenu.SubTrigger>Open Sub Menu</ContextMenu.SubTrigger>\n\t\t<ContextMenu.SubContent>\n\t\t\t<ContextMenu.Item>Sub Item 1</ContextMenu.Item>\n\t\t\t<ContextMenu.Item>Sub Item 2</ContextMenu.Item>\n\t\t</ContextMenu.SubContent>\n\t</ContextMenu.Sub>\n</ContextMenu.Content>\n\n```\n\n----------------------------------------\n\nTITLE: Customizing Hide Delay Svelte\nDESCRIPTION: Sets the `scrollHideDelay` prop of the `MyScrollArea` component. This allows customization of the delay before the scrollbars hide after the user stops interacting with the scroll area.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/scroll-area.md#_snippet_6\n\nLANGUAGE: svelte\nCODE:\n```\n<MyScrollArea scrollHideDelay={10}>\n\t<!-- ... -->\n</MyScrollArea>\n```\n\n----------------------------------------\n\nTITLE: Usage with Inline Snippets - Svelte\nDESCRIPTION: This code snippet demonstrates how to use the reusable Dialog component with inline snippets in Svelte.  The `title` and `description` are provided directly within the MyDialog component.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/dialog.md#_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport MyDialog from \"$lib/components/MyDialog.svelte\";\n</script>\n\n<MyDialog buttonText=\"Open Dialog\">\n\t{#snippet title()}\n\t\tAccount settings\n\t{/snippet}\n\n\t{#snippet description()}\n\t\tManage your account settings and preferences.\n\t{/snippet}\n\n\t<!-- Additional dialog content here... -->\n</MyDialog>\n```\n\n----------------------------------------\n\nTITLE: Using the Reusable Avatar Component Svelte\nDESCRIPTION: This snippet demonstrates how to use the reusable UserAvatar component created in the previous step.  It imports the UserAvatar component, defines an array of user objects with handle and initials, and iterates through the array to render a UserAvatar for each user.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/avatar.md#_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport UserAvatar from \"$lib/components/UserAvatar.svelte\";\n\n\tconst users = [\n\t\t{ handle: \"huntabyte\", initials: \"HJ\" },\n\t\t{ handle: \"pavelstianko\", initials: \"PS\" },\n\t\t{ handle: \"adriangonz97\", initials: \"AG\" },\n\t];\n</script>\n\n{#each users as user}\n\t<UserAvatar\n\t\tsrc=\"https://github.com/{user.handle}.png\"\n\t\talt=\"{user.name}'s avatar\"\n\t\tfallback={user.initials}\n\t/>\n{/each}\n```\n\n----------------------------------------\n\nTITLE: LinkPreview Structure Svelte\nDESCRIPTION: Demonstrates the basic structure of the LinkPreview component, including the Root, Trigger, and Content components.  It imports the LinkPreview component from the bits-ui library.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/link-preview.md#_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { LinkPreview } from \"bits-ui\";\n</script>\n\n<LinkPreview.Root>\n\t<LinkPreview.Trigger />\n\t<LinkPreview.Content />\n</LinkPreview.Root>\n```\n\n----------------------------------------\n\nTITLE: Basic Avatar Implementation Svelte\nDESCRIPTION: This snippet shows how to create a basic Avatar component using Avatar.Root, Avatar.Image, and Avatar.Fallback from the bits-ui library.  It imports the Avatar component and defines the necessary HTML structure to display an avatar with an image and a fallback.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/avatar.md#_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Avatar } from \"bits-ui\";\n</script>\n\n<Avatar.Root>\n\t<Avatar.Image src=\"https://github.com/huntabyte.png\" alt=\"Huntabyte's avatar\" />\n\t<Avatar.Fallback>HB</Avatar.Fallback>\n</Avatar.Root>\n```\n\n----------------------------------------\n\nTITLE: Scroll Area Type Always Svelte\nDESCRIPTION: Sets the `type` prop of the `MyScrollArea` component to `always` and `orientation` to `both`. This ensures that scrollbars are always visible, even when the content is smaller than the viewport, and that both vertical and horizontal scrollbars are rendered.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/scroll-area.md#_snippet_5\n\nLANGUAGE: svelte\nCODE:\n```\n<MyScrollArea type=\"always\" orientation=\"both\">\n\t<!-- ... -->\n</MyScrollArea>\n```\n\n----------------------------------------\n\nTITLE: Defining Single Number Callback Type in TypeScript\nDESCRIPTION: Defines a TypeScript function type that accepts a single number as input and returns void. This is typically used for callbacks that handle a single numerical value, such as setting a value or triggering an event based on a single number.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/src/lib/content/api-reference/extended-types/slider/slider-root-on-value-change.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(value: number) => void\n```\n\n----------------------------------------\n\nTITLE: Override Escape Key Svelte\nDESCRIPTION: Shows how to override the default Escape key behavior by using the `onEscapeKeydown` prop on the `Popover.Content` component. The example prevents the default action by calling `e.preventDefault()`.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/popover.md#_snippet_8\n\nLANGUAGE: svelte\nCODE:\n```\n<Popover.Content onEscapeKeydown={(e) => e.preventDefault()}>\n\t<!-- ... -->\n</Popover.Content>\n```\n\n----------------------------------------\n\nTITLE: Submit Form on PinInput Complete (Svelte)\nDESCRIPTION: This example demonstrates how to submit an HTML form when the PinInput is complete using the `onComplete` prop.  It imports the PinInput component, declares a reactive state variable `form` to hold a reference to the HTML form element.  The form's `submit` method is called within the `onComplete` handler of the PinInput.Root component.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/pin-input.md#_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { PinInput } from \"bits-ui\";\n\tlet form = $state<HTMLFormElement>(null!);\n</script>\n\n<form method=\"POST\" bind:this={form}>\n\t<PinInput.Root name=\"mfaCode\" onComplete={() => form.submit()}>\n\t\t<!-- ... -->\n\t</PinInput.Root>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Collapsible Structure Svelte\nDESCRIPTION: Illustrates the basic structure of the Collapsible component using its sub-components: Root, Trigger, and Content. It imports the Collapsible component from the 'bits-ui' library and shows how to nest the Trigger and Content within the Root component.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/collapsible.md#_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Collapsible } from \"bits-ui\";\n</script>\n\n<Collapsible.Root>\n\t<Collapsible.Trigger />\n\t<Collapsible.Content />\n</Collapsible.Root>\n```\n\n----------------------------------------\n\nTITLE: Handle Item Highlighting - Svelte\nDESCRIPTION: This snippet shows how to trigger side effects when a `Select.Item` is highlighted or unhighlighted using the `onHighlight` and `onUnhighlight` props. This allows for custom logic to be executed when an item receives focus during keyboard navigation.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/select.md#_snippet_11\n\nLANGUAGE: svelte\nCODE:\n```\n<Select.Item onHighlight={() => console.log('I am highlighted!')} onUnhighlight={() => console.log('I am unhighlighted!')} />\n<!-- ... -->\n</Select.Item>\n```\n\n----------------------------------------\n\nTITLE: TypeScript Function Type Definition\nDESCRIPTION: Defines a TypeScript function type. The function takes a boolean argument named `open` and returns void. This type definition can be used to define the shape of a callback function.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/src/lib/content/api-reference/extended-types/shared/on-open-change-prop.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(open: boolean) => void\n```\n\n----------------------------------------\n\nTITLE: Ignore Interact Outside Svelte\nDESCRIPTION: Illustrates how to ignore interactions outside the Popover by setting the `interactOutsideBehavior` prop to `'ignore'` on the `Popover.Content` component.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/popover.md#_snippet_9\n\nLANGUAGE: svelte\nCODE:\n```\n<Popover.Content interactOutsideBehavior=\"ignore\">\n\t<!-- ... -->\n</Popover.Content>\n```\n\n----------------------------------------\n\nTITLE: Update Selected To Index Method Command TS\nDESCRIPTION: This snippet demonstrates how to use the `updateSelectedToIndex(index: number)` method to set selection to item at specified index. It includes an example with a bounds check to ensure the index is valid.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/command.md#_snippet_11\n\nLANGUAGE: ts\nCODE:\n```\n// select third item (if it exists)\ncommand.updateSelectedToIndex(2);\n\n// with bounds check\nconst items = command.getValidItems();\nif (index < items.length) {\n\tcommand.updateSelectedToIndex(index);\n}\n```\n\n----------------------------------------\n\nTITLE: Two-Way Binding Placeholder Svelte\nDESCRIPTION: Illustrates how to manage the placeholder state of the DateRangeField component using two-way binding in Svelte, utilizing bind:placeholder for automatic state synchronization. Requires the 'bits-ui' and '@internationalized/date' packages.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/date-range-field.md#_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { DateRangeField } from \"bits-ui\";\n\timport { CalendarDateTime } from \"@internationalized/date\";\n\tlet myPlaceholder = $state(new CalendarDateTime(2024, 8, 3, 12, 30));\n</script>\n\n<DateRangeField.Root bind:placeholder={myPlaceholder}>\n\t<!-- ... -->\n</DateRangeField.Root>\n```\n\n----------------------------------------\n\nTITLE: Combobox Structure Example (Svelte)\nDESCRIPTION: Illustrates the basic structure of the Combobox component using its sub-components like Root, Input, Trigger, Portal, Content, Group, GroupHeading, and Item. This snippet demonstrates how to assemble a minimal Combobox UI using the Bits-UI primitives.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/combobox.md#_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Combobox } from \"bits-ui\";\n</script>\n\n<Combobox.Root>\n\t<Combobox.Input />\n\t<Combobox.Trigger />\n\t<Combobox.Portal>\n\t\t<Combobox.Content>\n\t\t\t<Combobox.Group>\n\t\t\t\t<Combobox.GroupHeading />\n\t\t\t\t<Combobox.Item />\n\t\t\t</Combobox.Group>\n\t\t\t<Combobox.Item />\n\t\t</Combobox.Content>\n\t</Combobox.Portal>\n</Combobox.Root>\n```\n\n----------------------------------------\n\nTITLE: Basic Custom Element Example with Child Snippet (Svelte)\nDESCRIPTION: Illustrates a basic example of using the `child` snippet to customize a `Collapsible.Trigger` component. The snippet replaces the default element with a button containing an icon and text.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/child-snippet.md#_snippet_6\n\nLANGUAGE: svelte\nCODE:\n```\n<Collapsible.Trigger>\n\t{#snippet child({ props })}\n\t\t<button {...props}>\n\t\t\t<Icon name=\"star\" />\n\t\t\t<span>Favorite</span>\n\t\t</button>\n\t{/snippet}\n</Collapsible.Trigger>\n```\n\n----------------------------------------\n\nTITLE: Toggle Basic Structure Svelte\nDESCRIPTION: Demonstrates the basic structure of the Toggle component using Svelte. It imports the Toggle component from 'bits-ui' and renders the Toggle.Root component.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/toggle.md#_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Toggle } from \"bits-ui\";\n</script>\n\n<Toggle.Root />\n```\n\n----------------------------------------\n\nTITLE: Disabled Checkbox Svelte\nDESCRIPTION: Demonstrates how to disable a `MyCheckbox` component by setting the `disabled` prop to `true`. The checkbox will be rendered in a disabled state, preventing user interaction.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/checkbox.md#_snippet_7\n\nLANGUAGE: svelte\nCODE:\n```\n<MyCheckbox disabled labelText=\"Enable notifications\" />\n```\n\n----------------------------------------\n\nTITLE: Define Keyboard Event Handler Type - TypeScript\nDESCRIPTION: Defines a TypeScript type alias for a function that handles keyboard events. The function accepts a `KeyboardEvent` object as input and does not return any value (void). This is commonly used for event listeners attached to keyboard-related events in web applications.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/src/lib/content/api-reference/extended-types/shared/on-escape-keydown-prop.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(event: KeyboardEvent) => void\n```\n\n----------------------------------------\n\nTITLE: Week Starts On Svelte\nDESCRIPTION: Demonstrates using the `weekStartsOn` prop to set the first day of the week. In this example, it's set to 1 (Monday).\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/calendar.md#_snippet_14\n\nLANGUAGE: svelte\nCODE:\n```\n<Calendar.Root weekStartsOn={1}>\n\t<!-- ...-->\n</Calendar.Root>\n```\n\n----------------------------------------\n\nTITLE: Merging Props with CSS Variables - TypeScript\nDESCRIPTION: Demonstrates how CSS variables are handled when merging style properties within props. Later defined CSS variables will override earlier ones.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/utilities/merge-props.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mergeProps } from \"bits-ui\";\n\nconst props1 = { style: \"--foo: red\" };\nconst props2 = { style: { \"--foo\": \"green\", color: \"blue\" } };\n\nconst mergedProps = mergeProps(props1, props2);\n\nconsole.log(mergedProps.style); // \"--foo: green; color: blue;\"\n```\n\n----------------------------------------\n\nTITLE: Import and Render Separator - Svelte/TS\nDESCRIPTION: This snippet demonstrates how to import the Separator component from the `bits-ui` library and render its root element in a Svelte component. It requires the `bits-ui` package to be installed. The `<Separator.Root />` tag represents the separator element, which will render a visual separator.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/separator.md#_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Separator } from \"bits-ui\";\n</script>\n\n<Separator.Root />\n```\n\n----------------------------------------\n\nTITLE: Styling Accordion with TailwindCSS in Svelte\nDESCRIPTION: This snippet shows how to style Bits UI components using TailwindCSS classes within a Svelte component. It demonstrates applying classes directly to the Accordion component and its child components to customize the appearance. The example uses utility classes for layout, spacing, typography, and colors.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/getting-started.md#_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Accordion } from \"bits-ui\";\n</script>\n\n<Accordion.Root class=\"mx-auto w-full max-w-md\">\n\t<Accordion.Item class=\"mb-2 rounded-md border border-gray-200\">\n\t\t<Accordion.Header class=\"bg-gray-50 transition-colors hover:bg-gray-100\">\n\t\t\t<Accordion.Trigger\n\t\t\t\tclass=\"flex w-full items-center justify-between p-4 text-left font-medium\"\n\t\t\t>\n\t\t\t\t<span>Tailwind-styled Accordion</span>\n\t\t\t\t<svg\n\t\t\t\t\tclass=\"h-5 w-5 transform transition-transform\"\n\t\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\t\td=\"M19 9l-7 7-7-7\"\n\t\t\t\t\t/>\n\t\t\t\t</svg>\n\t\t\t</Accordion.Trigger>\n\t\t</Accordion.Header>\n\t\t<Accordion.Content class=\"p-4 text-gray-700\">\n\t\t\tThis accordion is styled using Tailwind CSS classes.\n\t\t</Accordion.Content>\n\t</Accordion.Item>\n</Accordion.Root>\n```\n\n----------------------------------------\n\nTITLE: Defining Optimization Type in TypeScript\nDESCRIPTION: This snippet defines a TypeScript type alias named `optimizationType` that represents the possible values for optimization strategies within the Bits-UI library. It allows specifying either 'optimized' or 'always', influencing how components are processed for performance.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/src/lib/content/api-reference/extended-types/floating/update-position-strategy-prop.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"optimized\" | \"always\";\n```\n\n----------------------------------------\n\nTITLE: Disabling Scroll Lock (Svelte/TS)\nDESCRIPTION: This snippet demonstrates how to disable the default scroll lock behavior of the Alert Dialog by setting the `preventScroll` prop to `false` on the `AlertDialog.Content` component.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/alert-dialog.md#_snippet_9\n\nLANGUAGE: svelte\nCODE:\n```\n<AlertDialog.Content preventScroll={false}>\n\t<!-- ... -->\n</AlertDialog.Content>\n```\n\n----------------------------------------\n\nTITLE: Get Valid Items Method Command TS\nDESCRIPTION: This snippet shows how to use the `getValidItems()` method to get an array of valid (non-disabled, visible) command items. This is useful for checking bounds before operations.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/command.md#_snippet_10\n\nLANGUAGE: ts\nCODE:\n```\nconst items = command.getValidItems();\nconsole.log(items.length); // number of selectable items\n```\n\n----------------------------------------\n\nTITLE: Merging Props with Event Handlers - TypeScript\nDESCRIPTION: Demonstrates merging props objects with event handlers. Event handlers are chained, and if a handler calls `event.preventDefault()`, subsequent handlers are not executed.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/utilities/merge-props.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst props1 = { onclick: (e: MouseEvent) => console.log(\"First click\") };\nconst props2 = { onclick: (e: MouseEvent) => console.log(\"Second click\") };\n\nconst mergedProps = mergeProps(props1, props2);\nmergedProps.onclick(new MouseEvent(\"click\")); // Logs: \"First click\" then \"Second click\"\n```\n\n----------------------------------------\n\nTITLE: Combining Data Attributes with CSS Variables in CSS\nDESCRIPTION: This snippet shows how to combine data attributes with CSS variables to create dynamic styles. It animates the accordion content using the `--bits-accordion-content-height` variable and the `data-state` attribute.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/styling.md#_snippet_10\n\nLANGUAGE: css\nCODE:\n```\n/* Basic transition animation */\n[data-accordion-content] {\n\toverflow: hidden;\n\ttransition: height 300ms ease-out;\n\theight: 0;\n}\n\n[data-accordion-content][data-state=\"open\"] {\n\theight: var(--bits-accordion-content-height);\n}\n\n[data-accordion-content][data-state=\"closed\"] {\n\theight: 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Placeholder with Calendar in Svelte\nDESCRIPTION: This Svelte code snippet shows how to use the placeholder prop with the Calendar component. The placeholder acts as the initial date when no value is selected, defines the type of date/time to display, and controls the visible date range in calendar views.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/dates.md#_snippet_5\n\nLANGUAGE: Svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Calendar } from \"bits-ui\";\n\timport { today, getLocalTimeZone, type DateValue } from \"@internationalized/date\";\n\n\t// Initialize placeholder with today's date\n\tlet placeholder: DateValue = $state(today(getLocalTimeZone()));\n\tlet selectedMonth: number = $state(placeholder.month);\n</script>\n\n<!-- Month selector to control calendar view -->\n<select\n\tonchange={() => {\n\t\tplaceholder = placeholder.set({ month: selectedMonth });\n\t}}\n\tbind:value={selectedMonth}\n>\n\t<option value={1}>January</option>\n\t<option value={2}>February</option>\n\t<!-- Additional months... -->\n</select>\n\n<Calendar.Root bind:placeholder>\n\t<!-- Calendar components... -->\n</Calendar.Root>\n```\n\n----------------------------------------\n\nTITLE: Scroll Area Structure Svelte\nDESCRIPTION: Demonstrates the basic structure of the Scroll Area component using Svelte. It imports the `ScrollArea` component and defines the Root, Viewport, Scrollbar, Thumb, and Corner elements to create a scrollable area.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/scroll-area.md#_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { ScrollArea } from \"bits-ui\";\n</script>\n\n<ScrollArea.Root>\n\t<ScrollArea.Viewport>\n\t\t<!-- Scrollable content here -->\n\t</ScrollArea.Viewport>\n\t<ScrollArea.Scrollbar orientation=\"vertical\">\n\t\t<ScrollArea.Thumb />\n\t</ScrollArea.Scrollbar>\n\t<ScrollArea.Scrollbar orientation=\"horizontal\">\n\t\t<ScrollArea.Thumb />\n\t</ScrollArea.Scrollbar>\n\t<ScrollArea.Corner />\n</ScrollArea.Root>\n```\n\n----------------------------------------\n\nTITLE: Customizing Close Focus - Svelte/TS\nDESCRIPTION: This code snippet demonstrates how to customize the focus when the Dialog closes using the `onCloseAutoFocus` prop on Dialog.Content in Svelte and Typescript. The example sets focus to a text input element when the dialog closes.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/dialog.md#_snippet_8\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Dialog } from \"bits-ui\";\n\tlet nameInput = $state<HTMLInputElement>();\n</script>\n\n<input type=\"text\" bind:this={nameInput} />\n<Dialog.Root>\n\t<Dialog.Trigger>Open Dialog</Dialog.Trigger>\n\t<Dialog.Content\n\t\tonCloseAutoFocus={(e) => {\n\t\t\te.preventDefault();\n\t\t\tnameInput?.focus();\n\t\t}}\n\t>\n\t\t<!-- ... -->\n\t</Dialog.Content>\n</Dialog.Root>\n```\n\n----------------------------------------\n\nTITLE: Installing Bits UI using npm\nDESCRIPTION: This command installs the Bits UI library using npm. It's the first step to integrate Bits UI into your project.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/getting-started.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install bits-ui\n```\n\n----------------------------------------\n\nTITLE: Using the Reusable Component\nDESCRIPTION: Shows how to use the `MyAspectRatio` component in a page, passing the `src`, `alt`, and `ratio` props.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/aspect-ratio.md#_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport MyAspectRatio from \"$lib/components/MyAspectRatio.svelte\";\n</script>\n\n<MyAspectRatio src=\"https://example.com/image.jpg\" alt=\"an abstract painting\" ratio={4 / 3} />\n```\n\n----------------------------------------\n\nTITLE: Adding Checkbox Items - Svelte\nDESCRIPTION: Illustrates how to create menu items with checkbox functionality using the `DropdownMenu.CheckboxItem` component. It includes handling the `checked` state and displaying a checkmark or dash based on the state.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/dropdown-menu.md#_snippet_7\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { DropdownMenu } from \"bits-ui\";\n\n\tlet notifications = $state(true);\n</script>\n\n<DropdownMenu.CheckboxItem bind:checked={notifications}>\n\t{#snippet children({ checked, indeterminate })}\n\t\t{#if indeterminate}\n\t\t\t-\n\t\t{:else if checked}\n\t\t\t✅\n\t\t{/if}\n\t\tNotifications\n\t{/snippet}\n</DropdownMenu.CheckboxItem>\n```\n\n----------------------------------------\n\nTITLE: Navigation Menu Indicator Svelte\nDESCRIPTION: Explains how to use the `NavigationMenu.Indicator` component to visually highlight the active trigger. It provides an animated visual cue, such as an arrow or highlight, to accompany the viewport.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/navigation-menu.md#_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<NavigationMenu.Root>\n\t<NavigationMenu.List>\n\t\t<NavigationMenu.Item>\n\t\t\t<NavigationMenu.Trigger>Item one</NavigationMenu.Trigger>\n\t\t\t<NavigationMenu.Content>Item one content</NavigationMenu.Content>\n\t\t</NavigationMenu.Item>\n\t\t<NavigationMenu.Item>\n\t\t\t<NavigationMenu.Trigger>Item two</NavigationMenu.Trigger>\n\t\t\t<NavigationMenu.Content>Item two content</NavigationMenu.Content>\n\t\t</NavigationMenu.Item>\n\n\t\t<NavigationMenu.Indicator />\n\t</NavigationMenu.List>\n\n\t<NavigationMenu.Viewport />\n</NavigationMenu.Root>\n```\n\n----------------------------------------\n\nTITLE: Define Array Type for Objects in TypeScript\nDESCRIPTION: Defines a TypeScript type for an array of objects. Each object in the array has a 'value' and a 'label' property, both of which are strings. Additionally, each object can optionally have a 'disabled' property, which is a boolean. This type definition is likely used for defining the structure of data used in UI components, such as select boxes or list items, where each item has a value, a display label, and an optional disabled state.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/src/lib/content/api-reference/extended-types/select/items-prop.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{ value: string; label: string; disabled?: boolean}[]\n```\n\n----------------------------------------\n\nTITLE: Define Side Type in TypeScript\nDESCRIPTION: Defines a TypeScript type `Side` as a string literal union of 'top', 'bottom', 'left', and 'right'. This type is used to represent the different sides of an element, likely for positioning or layout purposes.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/src/lib/content/api-reference/extended-types/floating/collision-padding-prop.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype Side = \"top\" | \"bottom\" | \"left\" | \"right\";\n```\n\n----------------------------------------\n\nTITLE: Setting a Custom Ratio\nDESCRIPTION: Demonstrates setting a custom aspect ratio using the `ratio` prop on the `AspectRatio.Root` component.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/aspect-ratio.md#_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<AspectRatio.Root ratio={16 / 9}>\n\t<!-- ... -->\n</AspectRatio.Root>\n```\n\n----------------------------------------\n\nTITLE: Disable Close on Trigger Click\nDESCRIPTION: Illustrates how to disable the default behavior of closing the tooltip when the user clicks the trigger by setting the `disableCloseOnTriggerClick` prop to `true` on the Tooltip.Root component.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/tooltip.md#_snippet_8\n\nLANGUAGE: svelte\nCODE:\n```\n<Tooltip.Root disableCloseOnTriggerClick>\n\t<!-- .... -->\n</Tooltip.Root>\n```\n\n----------------------------------------\n\nTITLE: Viewport Component Svelte\nDESCRIPTION: Illustrates the use of the `NavigationMenu.Viewport` component for controlling the rendering of `NavigationMenu.Content`. It allows for flexible DOM structure and advanced animations by rendering the content within the viewport, which is particularly useful when needing control over rendering and animations.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/navigation-menu.md#_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<NavigationMenu.Root>\n\t<NavigationMenu.List>\n\t\t<NavigationMenu.Item>\n\t\t\t<NavigationMenu.Trigger>Item one</NavigationMenu.Trigger>\n\t\t\t<NavigationMenu.Content>Item one content</NavigationMenu.Content>\n\t\t</NavigationMenu.Item>\n\t\t<NavigationMenu.Item>\n\t\t\t<NavigationMenu.Trigger>Item two</NavigationMenu.Trigger>\n\t\t\t<NavigationMenu.Content>Item two content</NavigationMenu.Content>\n\t\t</NavigationMenu.Item>\n\t</NavigationMenu.List>\n\n\t<!-- NavigationMenu.Content will be rendered here when active  -->\n\t<NavigationMenu.Viewport />\n</NavigationMenu.Root>\n```\n\n----------------------------------------\n\nTITLE: Custom Accordion Usage Example - Svelte\nDESCRIPTION: This snippet demonstrates how to use the custom `MyAccordion` component in a Svelte page. It imports the `MyAccordion` component and defines an array of items with titles and content.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/accordion.md#_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport MyAccordion from \"$lib/components/MyAccordion.svelte\";\n\tconst items = [\n\t\t{ title: \"Item 1\", content: \"Content 1\" },\n\t\t{ title: \"Item 2\", content: \"Content 2\" },\n\t];\n</script>\n\n<MyAccordion type=\"single\" {items} />\n```\n\n----------------------------------------\n\nTITLE: Creating a CalendarDate in TypeScript\nDESCRIPTION: This code demonstrates how to create a CalendarDate object using the @internationalized/date library in TypeScript. It shows how to create a date from year, month, and day parameters, from an ISO 8601 string, and for the current date in a specific or user's timezone.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/dates.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Creating a CalendarDate\nimport { CalendarDate, parseDate, today, getLocalTimeZone } from \"@internationalized/date\";\n\n// From year, month, day parameters\nconst date = new CalendarDate(2024, 7, 10);\n\n// From ISO 8601 string\nconst parsedDate = parseDate(\"2024-07-10\");\n\n// Current date in specific timezone\nconst losAngelesToday = today(\"America/Los_Angeles\");\n\n// Current date in user's timezone\nconst localToday = today(getLocalTimeZone());\n```\n\n----------------------------------------\n\nTITLE: Popover Content with Floating UI and Transition\nDESCRIPTION: This snippet demonstrates how to use transitions with a `Popover.Content` component from Bits UI, which relies on Floating UI. The `child` snippet requires a wrapper element that receives `wrapperProps` to correctly position the popover. The actual content with the `fly` transition is placed within the wrapper. Dependencies include `bits-ui` for the Popover component and `svelte/transition` for the `fly` transition.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/transitions.md#_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Popover } from \"bits-ui\";\n\timport { fly } from \"svelte/transition\";\n</script>\n\n<Popover.Root>\n\t<Popover.Trigger>Open Popover</Popover.Trigger>\n\t<Popover.Portal>\n\t\t<Popover.Content forceMount>\n\t\t\t{#snippet child({ wrapperProps, props, open })}\n\t\t\t\t{#if open}\n\t\t\t\t\t<div {...wrapperProps}>\n\t\t\t\t\t\t<div {...props} transition:fly>\n\t\t\t\t\t\t\t<!-- ... -->\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t{/if}\n\t\t\t{/snippet}\n\t\t</Popover.Content>\n\t</Popover.Portal>\n</Popover.Root>\n```\n\n----------------------------------------\n\nTITLE: Ignore Non-Keyboard Focus\nDESCRIPTION: Explains how to prevent the tooltip from opening when the trigger is focused without using the keyboard by setting the `ignoreNonKeyboardFocus` prop to `true` on the Tooltip.Root component.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/tooltip.md#_snippet_10\n\nLANGUAGE: svelte\nCODE:\n```\n<Tooltip.Root ignoreNonKeyboardFocus>\n\t<!-- .... -->\n</Tooltip.Root>\n```\n\n----------------------------------------\n\nTITLE: Define Event Handler Type in TypeScript\nDESCRIPTION: Defines a type for an event handler function. This function takes an Event object as input and returns nothing (void). It's likely used as a callback function for event listeners within the Bits-UI library.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/src/lib/content/api-reference/extended-types/shared/on-auto-focus-prop.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(event: Event) => void\n```\n\n----------------------------------------\n\nTITLE: Ignoring Escape Key (Svelte/TS)\nDESCRIPTION: This snippet demonstrates how to prevent the Alert Dialog from closing when the Escape key is pressed by setting the `escapeKeydownBehavior` prop to `'ignore'` on the `AlertDialog.Content` component.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/alert-dialog.md#_snippet_10\n\nLANGUAGE: svelte\nCODE:\n```\n<AlertDialog.Content escapeKeydownBehavior=\"ignore\">\n\t<!-- ... -->\n</AlertDialog.Content>\n```\n\n----------------------------------------\n\nTITLE: Combobox Content with Prevent Scroll Disabled (Svelte)\nDESCRIPTION: Shows how to disable scroll locking for the Combobox content by setting the `preventScroll` prop to `false`. This allows scrolling outside the Combobox content when it's open.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/combobox.md#_snippet_9\n\nLANGUAGE: svelte\nCODE:\n```\n<Combobox.Content preventScroll={false}>\n\t<!-- ... -->\n</Combobox.Content>\n```\n\n----------------------------------------\n\nTITLE: Merging Props with preventDefault - TypeScript\nDESCRIPTION: Illustrates how `event.preventDefault()` in one event handler prevents subsequent handlers from being executed when merging props.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/utilities/merge-props.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst props1 = { onclick: (e: MouseEvent) => console.log(\"First click\") };\nconst props2 = {\n\tonclick: (e: MouseEvent) => {\n\t\tconsole.log(\"Second click\");\n\t\te.preventDefault();\n\t},\n};\nconst props3 = { onclick: (e: MouseEvent) => console.log(\"Third click\") };\n\nconst mergedProps = mergeProps(props1, props2, props3);\nmergedProps.onclick(new MouseEvent(\"click\")); // Logs: \"First click\" then \"Second click\" only\n```\n\n----------------------------------------\n\nTITLE: Range Calendar Structure in Svelte\nDESCRIPTION: Demonstrates the basic structure of the RangeCalendar component using Svelte. It includes the Root, Header (with navigation buttons and heading), and Grid components to render the calendar.  This example requires the `RangeCalendar` component from the `bits-ui` library.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/range-calendar.md#_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { RangeCalendar } from \"bits-ui\";\n</script>\n\n<RangeCalendar.Root>\n\t{#snippet children({ months, weekdays })}\n\t\t<RangeCalendar.Header>\n\t\t\t<RangeCalendar.PrevButton />\n\t\t\t<RangeCalendar.Heading />\n\t\t\t<RangeCalendar.NextButton />\n\t\t</RangeCalendar.Header>\n\t\t{#each months as month}\n\t\t\t<RangeCalendar.Grid>\n\t\t\t\t<RangeCalendar.GridHead>\n\t\t\t\t\t<RangeCalendar.GridRow>\n\t\t\t\t\t\t{#each weekdays as day}\n\t\t\t\t\t\t\t<RangeCalendar.HeadCell>\n\t\t\t\t\t\t\t\t{day}\n\t\t\t\t\t\t\t</RangeCalendar.HeadCell>\n\t\t\t\t\t\t{/each}\n\t\t\t\t\t</RangeCalendar.GridRow>\n\t\t\t\t</RangeCalendar.GridHead>\n\t\t\t\t<RangeCalendar.GridBody>\n\t\t\t\t\t{#each month.weeks as weekDates}\n\t\t\t\t\t\t<RangeCalendar.GridRow>\n\t\t\t\t\t\t\t{#each weekDates as date}\n\t\t\t\t\t\t\t\t<RangeCalendar.Cell {date} month={month.value}>\n\t\t\t\t\t\t\t\t\t<RangeCalendar.Day />\n\t\t\t\t\t\t\t\t</RangeCalendar.Cell>\n\t\t\t\t\t\t\t{/each}\n\t\t\t\t\t\t</RangeCalendar.GridRow>\n\t\t\t\t\t{/each}\n\t\t\t\t</RangeCalendar.GridBody>\n\t\t\t</RangeCalendar.Grid>\n\t\t{/each}\n\t{/snippet}\n</RangeCalendar.Root>\n```\n\n----------------------------------------\n\nTITLE: Defining Orientation Type in TypeScript\nDESCRIPTION: This code snippet defines a TypeScript type alias named 'orientation' that constrains the possible values to either 'horizontal' or 'vertical'. This type can be used to ensure type safety when specifying the orientation of a component, preventing invalid values from being used.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/src/lib/content/api-reference/extended-types/shared/orientation-prop.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"horizontal\" | \"vertical\";\n```\n\n----------------------------------------\n\nTITLE: Defining Open/Closed State Type in TypeScript\nDESCRIPTION: This code snippet defines a TypeScript type alias named 'open' | 'closed'.  It's used to represent the state of UI components such as dialogs, menus, or accordions, indicating whether they are currently visible or hidden. The type is a union of two string literals.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/src/lib/content/api-reference/extended-types/shared/open-closed-prop.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"open\" | \"closed\";\n```\n\n----------------------------------------\n\nTITLE: Example Changelog Chore and Fix Entries\nDESCRIPTION: This code snippet shows an example changelog with a chore entry for simplifying the Menubar.Content implementation, and a fix entry preventing multiple submenus from opening simultaneously. This example includes multiple entries in a single changelog.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/policies/changelog-conventions.md#_snippet_2\n\nLANGUAGE: md\nCODE:\n```\n## 1.3.7\n\n### Patch Changes\n\n-   chore(Menubar.Content): simplify internal implementation for maintainability\n-   fix(Menubar): prevent multiple submenus from opening simultaneously when too close\n```\n\n----------------------------------------\n\nTITLE: Svelte Features with Child Snippet (Svelte)\nDESCRIPTION: Illustrates how to apply Svelte-specific features like transitions, actions, and scoped styles to custom elements within the `child` snippet.  This allows for advanced customization of the component's appearance and behavior while still maintaining its core functionality. The custom action `use:myCustomAction` and the scoped style `.my-custom-trigger` are applied to the div element.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/child-snippet.md#_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<Accordion.Trigger>\n\t{#snippet child({ props })}\n\t\t<div {...props} use:myCustomAction class=\"my-custom-trigger\">\n\t\t\t<!-- ... -->\n\t\t</div>\n\t{/snippet}\n</Accordion.Trigger>\n\n<style>\n\t.my-custom-trigger {\n\t\tbackground-color: #3182ce;\n\t\tcolor: #fff;\n\t}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Two-Way Binding with Svelte\nDESCRIPTION: Demonstrates using Svelte's `bind:` directive for two-way data binding with a Bits UI component. This allows for simple state updates and automatic synchronization with external controls.  It requires importing the specific component from `bits-ui`. The `myValue` variable is declared using `$state` for reactivity. The `<ComponentName.Root>` component is a placeholder for the actual component being used.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/state-management.md#_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { ComponentName } from \"bits-ui\";\n\n\tlet myValue = $state(\"default-value\");\n</script>\n\n<button onclick={() => (myValue = \"new-value\")}> Update Value </button>\n\n<ComponentName.Root bind:value={myValue}></ComponentName.Root>\n```\n\n----------------------------------------\n\nTITLE: Basic Accordion Component Usage in Svelte\nDESCRIPTION: This code snippet demonstrates the basic usage of the Accordion component from Bits UI in a Svelte file. It imports the Accordion component and uses its nested components (Root, Item, Header, Trigger, Content) to create a simple accordion structure. The component provides minimal styling and relies on the user to add custom styles.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/getting-started.md#_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Accordion } from \"bits-ui\";\n</script>\n\n<Accordion.Root>\n\t<Accordion.Item>\n\t\t<Accordion.Header>\n\t\t\t<Accordion.Trigger>First</Accordion.Trigger>\n\t\t</Accordion.Header>\n\t\t<Accordion.Content>First accordion content</Accordion.Content>\n\t</Accordion.Item>\n\t<Accordion.Item>\n\t\t<Accordion.Header>\n\t\t\t<Accordion.Trigger>Second</Accordion.Trigger>\n\t\t</Accordion.Header>\n\t\t<Accordion.Content>Second accordion content</Accordion.Content>\n\t</Accordion.Item>\n</Accordion.Root>\n```\n\n----------------------------------------\n\nTITLE: DateRange Type Definition in TypeScript\nDESCRIPTION: This TypeScript code defines a DateRange type, which is an object containing a start and end DateValue. This type is used in components such as Date Range Field, Date Range Picker, and Range Calendar.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/dates.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype DateRange = {\n\tstart: DateValue;\n\tend: DateValue;\n};\n```\n\n----------------------------------------\n\nTITLE: Animated Accordion Example in Svelte\nDESCRIPTION: This snippet provides a complete example of an animated accordion using Bits UI components, CSS variables, data attributes, and custom keyframe animations. It demonstrates how to create smooth transitions for opening and closing accordion content.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/styling.md#_snippet_12\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Accordion } from \"bits-ui\";\n</script>\n\n<Accordion.Root type=\"single\">\n\t<Accordion.Item value=\"item-1\">\n\t\t<Accordion.Trigger>Section 1</Accordion.Trigger>\n\t\t<Accordion.Content>Content for section 1</Accordion.Content>\n\t</Accordion.Item>\n\t<Accordion.Item value=\"item-2\">\n\t\t<Accordion.Trigger>Section 2</Accordion.Trigger>\n\t\t<Accordion.Content>Content for section 2</Accordion.Content>\n\t</Accordion.Item>\n</Accordion.Root>\n\n<style>\n\t/* Base styles */\n\t:global([data-accordion-item]) {\n\t\tborder: 1px solid #e2e8f0;\n\t\tborder-radius: 0.25rem;\n\t\tmargin-bottom: 0.5rem;\n\t}\n\n\t/* Trigger styles based on state */\n\t:global([data-accordion-trigger]) {\n\t\twidth: 100%;\n\t\tpadding: 1rem;\n\t\tdisplay: flex;\n\t\tjustify-content: space-between;\n\t\talign-items: center;\n\t}\n\n\t:global([data-accordion-trigger][data-state=\"open\"]) {\n\t\tbackground-color: #f7fafc;\n\t\tborder-bottom: 1px solid #e2e8f0;\n\t}\n\n\t/* Content styles */\n\t:global([data-accordion-content]) {\n\t\toverflow: hidden;\n\t\ttransition: height 300ms ease-out;\n\t}\n\n\t/* Define keyframes for opening animation */\n\t@keyframes -global-accordionOpen {\n\t\t0% {\n\t\t\theight: 0;\n\t\t\topacity: 0;\n\t\t}\n\t\t80% {\n\t\t\theight: var(--bits-accordion-content-height);\n\t\t\topacity: 0.8;\n\t\t}\n\t\t100% {\n\t\t\theight: var(--bits-accordion-content-height);\n\t\t\topacity: 1;\n\t\t}\n\t}\n\n\t/* Define keyframes for closing animation */\n\t@keyframes -global-accordionClose {\n\t\t0% {\n\t\t\theight: var(--bits-accordion-content-height);\n\t\t\topacity: 1;\n\t\t}\n\t\t20% {\n\t\t\theight: var(--bits-accordion-content-height);\n\t\t\topacity: 0.8;\n\t\t}\n\t\t100% {\n\t\t\theight: 0;\n\t\t\topacity: 0;\n\t\t}\n\t}\n\n\t/* Apply animations based on state */\n\t:global([data-accordion-content][data-state=\"open\"]) {\n\t\tanimation: accordionOpen 400ms cubic-bezier(0.16, 1, 0.3, 1) forwards;\n\t}\n\n\t:global([data-accordion-content][data-state=\"closed\"]) {\n\t\tanimation: accordionClose 300ms cubic-bezier(0.7, 0, 0.84, 0) forwards;\n\t}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Override Outside Interaction with onInteractOutside in Svelte\nDESCRIPTION: This snippet demonstrates how to override the default behavior when an interaction occurs outside the Dialog content using the `onInteractOutside` prop. The provided event handler can prevent the default action and implement custom logic.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/dialog.md#_snippet_13\n\nLANGUAGE: svelte\nCODE:\n```\n<Dialog.Content\n\tonInteractOutside={(e) => {\n\t\t\te.preventDefault();\n\t\t\t// do something else instead\n\t\t}}\n>\n\t<!-- ... -->\n</Dialog.Content>\n```\n\n----------------------------------------\n\nTITLE: Defining ChildSnippetProps type in TypeScript\nDESCRIPTION: This snippet defines the `ChildSnippetProps` type, which is used to pass properties to a child component's wrapper and content elements. It includes `wrapperProps` and `props` for styling purposes, and an `open` boolean to control the visibility of the content, typically used with Svelte transitions. The `wrapperProps` are intended for positioning the wrapper, while `props` are meant for styling the content element itself. The `Record<string, unknown>` type allows for arbitrary string keys with any type of value.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/src/lib/content/api-reference/extended-types/floating/floating-content-child-snippet-props.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype ChildSnippetProps = {\n\t// Props for the positioning wrapper\n\t// Do not style this element -\n\t// styling should be applied to the content element\n\twrapperProps: Record<string, unknown>;\n\n\t// Props for your content element\n\t// Apply your custom styles here\n\tprops: Record<string, unknown>;\n\n\t// Content visibility state\n\t// Use this for conditional rendering with\n\t// Svelte transitions\n\topen: boolean;\n};\n```\n\n----------------------------------------\n\nTITLE: Define Checkbox State Type - TypeScript\nDESCRIPTION: Defines a TypeScript type that represents the possible states of a checkbox-like component. The states are \"checked\", \"unchecked\", and \"indeterminate\".  This type is likely used to manage the visual representation and user interaction of the component.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/src/lib/content/api-reference/extended-types/checkbox/checkbox-root-state-data-attr.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"checked\" | \"unchecked\" | \"indeterminate\";\n```\n\n----------------------------------------\n\nTITLE: Example Changelog Patch Entry\nDESCRIPTION: This code snippet is an example changelog entry showing a patch change with a fix in the Select.Trigger component, including accessibility improvements for screen readers and keyboard navigation. This example demonstrates the format for patch changes.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/policies/changelog-conventions.md#_snippet_1\n\nLANGUAGE: md\nCODE:\n```\n## 1.3.10\n\n### Patch Changes\n\n-   fix(Select.Trigger): improve accessibility for screen readers and keyboard navigation\n```\n\n----------------------------------------\n\nTITLE: Using Reusable Tooltip Component\nDESCRIPTION: Shows how to use the custom `MyTooltip` component in an application. It passes a snippet for the trigger content and triggerProps for additional customization.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/tooltip.md#_snippet_6\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport MyTooltip from \"$lib/components/MyTooltip.svelte\";\n\timport BoldIcon from \"..some-icon-library\"; // not real\n</script>\n\n<MyTooltip triggerProps={{ onclick: () => alert(\"changed to bold!\") }}>\n\t{#snippet trigger()}\n\t\t<BoldIcon />\n\t{/snippet}\n\tChange font to bold\n</MyTooltip>\n```\n\n----------------------------------------\n\nTITLE: Defining DateValue Type in TypeScript\nDESCRIPTION: This snippet defines a type alias named `DateValue` that can hold values of type `CalendarDate`, `CalendarDateTime`, or `ZonedDateTime`. These types are imported from the `@internationalized/date` library.  The purpose is to create a single type that can represent different kinds of date and time values.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/src/lib/content/api-reference/extended-types/shared/date-value-prop.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { CalendarDate, CalendarDateTime, ZonedDateTime } from \"@internationalized/date\";\n\ntype DateValue = CalendarDate | CalendarDateTime | ZonedDateTime;\n```\n\n----------------------------------------\n\nTITLE: Usage with Separate Snippets - Svelte\nDESCRIPTION: This code snippet shows how to use the reusable Dialog component with separate snippets in Svelte. The `title` and `description` snippets are defined outside the MyDialog component and passed as props.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/dialog.md#_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport MyDialog from \"$lib/components/MyDialog.svelte\";\n</script>\n\n{#snippet title()}\n\tAccount settings\n{/snippet}\n\n{#snippet description()}\n\tManage your account settings and preferences.\n{/snippet}\n\n<MyDialog buttonText=\"Open Dialog\" {title} {description}>\n\t<!-- Additional dialog content here... -->\n</MyDialog>\n```\n\n----------------------------------------\n\nTITLE: Defining a state type in TypeScript\nDESCRIPTION: This TypeScript code defines a type alias that represents the possible states of a component, which can be \"loading\", \"loaded\", or \"error\". This is commonly used in UI development to manage asynchronous operations and provide visual feedback to the user based on the component's state. No dependencies required.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/src/lib/content/api-reference/extended-types/avatar/loading-status-prop.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"loading\" | \"loaded\" | \"error\";\n```\n\n----------------------------------------\n\nTITLE: Defining Pagination Types in TypeScript\nDESCRIPTION: This snippet defines the TypeScript types `Page`, `Ellipsis`, `PageItem`, and `ChildrenSnippetProps` which are used to represent pagination data. `Page` represents a page number, `Ellipsis` represents a gap in the pagination, `PageItem` is the union of `Page` and `Ellipsis` with a unique key, and `ChildrenSnippetProps` defines the properties for the pagination component, including the list of pages, the range of pages to render, and the current active page.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/src/lib/content/api-reference/extended-types/pagination/pagination-children-snippet-props.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype Page = {\n\ttype: \"page\";\n\tvalue: number;\n};\n\ntype Ellipsis = {\n\ttype: \"ellipsis\";\n};\n\ntype PageItem = (Page | Ellipsis) & {\n\t/**  A unique key to be used as the key in a svelte `#each` block. */\n\tkey: string;\n};\n\ntype ChildrenSnippetProps = {\n\t/** The items to iterate over and render for the pagination component */\n\tpages: PageItem[];\n\t/** The range of pages to render */\n\trange: { start: number; end: number };\n\t/** The currently active page */\n\tcurrentPage: number;\n};\n```\n\n----------------------------------------\n\nTITLE: DateValue Type Definition for Single Date Selection (TypeScript)\nDESCRIPTION: This code snippet defines a TypeScript type alias `Value` for representing a single date value, utilizing the `DateValue` type from the `@internationalized/date` library. This type is used when the date selection type is set to 'single'.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/src/lib/content/api-reference/extended-types/shared/calendar-value-prop.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { DateValue } from \"@internationalized/date\";\n\n// if `type` is `'single'`\ntype Value = DateValue;\n```\n\n----------------------------------------\n\nTITLE: Svelte Callout Component Import\nDESCRIPTION: Imports the `Callout` component from the `$lib/components` module within a Svelte file. This component is likely used for displaying informational messages or alerts within the Bits UI documentation.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/migration-guide.md#_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\timport { Callout } from '$lib/components';\n</script>\n```\n\n----------------------------------------\n\nTITLE: Overriding Escape Key Behavior (Svelte/TS)\nDESCRIPTION: This snippet shows how to override the default behavior of the Escape key by using the `onEscapeKeydown` prop. This enables the user to define custom logic to run when the Escape key is pressed.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/alert-dialog.md#_snippet_11\n\nLANGUAGE: svelte\nCODE:\n```\n<AlertDialog.Content\n\t\tonEscapeKeydown={(e) => {\n\t\t\te.preventDefault();\n\t\t\t// do something else instead\n\t\t}}\n>\n\t<!-- ... -->\n</AlertDialog.Content>\n```\n\n----------------------------------------\n\nTITLE: Calendar Structure Svelte\nDESCRIPTION: Demonstrates the basic structure of the Calendar component using Svelte. It imports the Calendar component and renders its root element with a header and grid for displaying months, weekdays, and individual dates.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/calendar.md#_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Calendar } from \"bits-ui\";\n</script>\n\n<Calendar.Root>\n\t{#snippet children({ months, weekdays })}\n\t\t<Calendar.Header>\n\t\t\t<Calendar.PrevButton />\n\t\t\t<Calendar.Heading />\n\t\t\t<Calendar.NextButton />\n\t\t</Calendar.Header>\n\n\t\t{#each months as month}\n\t\t\t<Calendar.Grid>\n\t\t\t\t<Calendar.GridHead>\n\t\t\t\t\t<Calendar.GridRow>\n\t\t\t\t\t\t{#each weekdays as day}\n\t\t\t\t\t\t\t<Calendar.HeadCell>\n\t\t\t\t\t\t\t\t{day}\n\t\t\t\t\t\t\t</Calendar.HeadCell>\n\t\t\t\t\t\t{/each}\n\t\t\t\t\t</Calendar.GridRow>\n\t\t\t\t</Calendar.GridHead>\n\t\t\t\t<Calendar.GridBody>\n\t\t\t\t\t{#each month.weeks as weekDates}\n\t\t\t\t\t\t<Calendar.GridRow>\n\t\t\t\t\t\t\t{#each weekDates as date}\n\t\t\t\t\t\t\t\t<Calendar.Cell {date} month={month.value}>\n\t\t\t\t\t\t\t\t\t<Calendar.Day />\n\t\t\t\t\t\t\t\t</Calendar.Cell>\n\t\t\t\t\t\t\t{/each}\n\t\t\t\t\t\t</Calendar.GridRow>\n\t\t\t\t\t{/each}\n\t\t\t\t</Calendar.GridBody>\n\t\t\t</Calendar.Grid>\n\t\t{/each}\n\t{/snippet}\n</Calendar.Root>\n```\n\n----------------------------------------\n\nTITLE: Custom Button Component - Svelte\nDESCRIPTION: This example demonstrates how to use the WithElementRef type helper in a Svelte component to enable the 'ref' prop. It defines a Props type that includes WithElementRef and then uses it to type the component's props.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/type-helpers/with-element-ref.md#_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport type { WithElementRef } from \"bits-ui\";\n\n\ttype Props = WithElementRef<\n\t\t{\n\t\t\tyourPropA: string;\n\t\t\tyourPropB: number;\n\t\t},\n\t\tHTMLButtonElement\n\t>;\n\n\tlet { yourPropA, yourPropB, ref = $bindable(null) }: Props = $props();\n</script>\n\n<button bind:this={ref}>\n\t<!-- ... -->\n</button>\n```\n\n----------------------------------------\n\nTITLE: Define PinInputCell Type - TypeScript\nDESCRIPTION: This code defines the `PinInputCell` type, which represents a single cell in a pin input component. It includes properties for the character displayed in the cell (`char`), whether the cell is active (`isActive`), and whether the cell has a fake caret (`hasFakeCaret`).\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/src/lib/content/api-reference/extended-types/pin-input/pin-input-root-children-snippet-props.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype PinInputCell = {\n\t/** The character displayed in the cell. */\n\tchar: string | null | undefined;\n\t/** Whether the cell is active. */\n\tisActive: boolean;\n\t/** Whether the cell has a fake caret. */\n\thasFakeCaret: boolean;\n};\n```\n\n----------------------------------------\n\nTITLE: Styling with CSS Frameworks in Svelte\nDESCRIPTION: This snippet demonstrates how to apply styles to a Bits UI Accordion.Trigger component using a CSS framework like TailwindCSS. It imports the Accordion component from 'bits-ui' and applies TailwindCSS classes directly to the Accordion.Trigger component.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/styling.md#_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Accordion } from \"bits-ui\";\n</script>\n\n<Accordion.Trigger class=\"h-12 w-full bg-blue-500 hover:bg-blue-600\">Click me</Accordion.Trigger>\n```\n\n----------------------------------------\n\nTITLE: Layout with Tooltip Provider\nDESCRIPTION: Demonstrates how to wrap the root layout content with the Tooltip.Provider component to provide default props for all tooltips within the application. The `children` prop is rendered within the provider.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/tooltip.md#_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Tooltip } from \"bits-ui\";\n\tlet { children } = $props();\n</script>\n\n<Tooltip.Provider>\n\t{@render children()}\n</Tooltip.Provider>\n```\n\n----------------------------------------\n\nTITLE: Define Pagination Types in TypeScript\nDESCRIPTION: This code snippet defines the TypeScript types necessary for a pagination component. It includes types for individual page numbers (`Page`), ellipsis (`Ellipsis`), combined page items (`PageItem`), and the props for a child snippet (`ChildSnippetProps`) used to render the pagination elements. The `PageItem` type includes a unique key for use in Svelte's `#each` block.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/src/lib/content/api-reference/extended-types/pagination/pagination-child-snippet-props.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype Page = {\n\ttype: \"page\";\n\tvalue: number;\n};\n\ntype Ellipsis = {\n\ttype: \"ellipsis\";\n};\n\ntype PageItem = (Page | Ellipsis) & {\n\t/**  A unique key to be used as the key in a svelte `#each` block. */\n\tkey: string;\n};\n\ntype ChildSnippetProps = {\n\t/** The items to iterate over and render for the pagination component */\n\tpages: PageItem[];\n\t/** The range of pages to render */\n\trange: { start: number; end: number };\n\t/** The currently active page */\n\tcurrentPage: number;\n\tprops: Record<string, unknown>;\n};\n```\n\n----------------------------------------\n\nTITLE: TypeScript Type Declaration\nDESCRIPTION: Defines a TypeScript type which is a union of string literals representing date and time components. This type is likely used for specifying which parts of a date/time value should be formatted or extracted.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/src/lib/content/api-reference/extended-types/date-field/date-field-segment-part.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"month\" | \"day\" | \"year\" | \"hour\" | \"minute\" | \"second\" | \"dayPeriod\" | \"timeZoneName\" | \"literal\";\n```\n\n----------------------------------------\n\nTITLE: TypeScript String or String Array Type Definition\nDESCRIPTION: Defines a TypeScript type alias that can be either a single string or an array of strings. This flexible type is commonly used to represent various input values or configuration parameters.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/src/lib/content/api-reference/extended-types/shared/string-or-array-string-prop.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nstring | string[]\n```\n\n----------------------------------------\n\nTITLE: Defining Snippet Properties Type in Typescript\nDESCRIPTION: Defines a Typescript type `SnippetProps` that consists of a `checked` boolean and a `props` object which is a record of string keys to unknown values. This type is likely used to represent properties passed to UI component snippets.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/src/lib/content/api-reference/extended-types/switch/switch-root-child-snippet-props.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype SnippetProps = {\n\tchecked: boolean;\n\tprops: Record<string, unknown>;\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing Close Focus (Svelte/TS)\nDESCRIPTION: This snippet demonstrates how to customize the focus behavior when the Alert Dialog closes using the `onCloseAutoFocus` prop on the `AlertDialog.Content` component. It prevents the default focus behavior and sets focus to a specific input element.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/alert-dialog.md#_snippet_8\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { AlertDialog } from \"bits-ui\";\n\tlet nameInput = $state<HTMLInputElement>();\n</script>\n\n<input type=\"text\" bind:this={nameInput} />\n<AlertDialog.Root>\n\t<AlertDialog.Trigger>Open AlertDialog</AlertDialog.Trigger>\n\t<AlertDialog.Content\n\t\tonCloseAutoFocus={(e) => {\n\t\t\te.preventDefault();\n\t\t\tnameInput?.focus();\n\t\t}}\n\t>\n\t\t<!-- ... -->\n\t</AlertDialog.Content>\n</AlertDialog.Root>\n```\n\n----------------------------------------\n\nTITLE: Define Focus Event Handler Type - TypeScript\nDESCRIPTION: This snippet defines a type for a function that handles focus events. The function takes a FocusEvent object as input and returns void, indicating that it does not return any value. This is a common pattern for event handlers in TypeScript and JavaScript.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/src/lib/content/api-reference/extended-types/shared/on-focus-outside-prop.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(event: FocusEvent) => void\n```\n\n----------------------------------------\n\nTITLE: Defining ChildSnippetProps Type in TypeScript\nDESCRIPTION: This code defines a TypeScript type named `ChildSnippetProps`. It has two properties: `props`, which is a record of string keys to unknown values, and `open`, which is a boolean value. The `props` property is intended to hold arbitrary properties for the child snippet, while the `open` property determines whether the snippet is visible or not.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/src/lib/content/api-reference/extended-types/dialog/dialog-overlay-child-snippet-props.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype ChildSnippetProps = {\n\tprops: Record<string, unknown>;\n\topen: boolean;\n};\n```\n\n----------------------------------------\n\nTITLE: Define Month Type\nDESCRIPTION: Defines the `Month` type with properties for the current month's value (`DateValue`), a 2D array of weeks and dates (`DateValue[][]`), and a flat array of dates (`DateValue[]`).  The `DateValue` type comes from the `@internationalized/date` package.  This type is used for rendering custom calendars.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/src/lib/content/api-reference/extended-types/shared/month-prop.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { DateValue } from \"@internationalized/date\";\n\ntype Month = {\n\t/**\n\t * The current month being iterated over.\n\t * This is passed to certain components to determine\n\t * if they fall within the current month.\n\t */\n\tvalue: DateValue;\n\n\t/**\n\t * An array of arrays of dates. Each top-level array represents\n\t * a week. Each nested array represents a day in the week.\n\t */\n\tweeks: DateValue[][];\n\n\t/**\n\t * An array of all the dates in the month. This is a flat array\n\t * used for rendering more custom calendars.\n\t */\n\tdates: DateValue[];\n};\n```\n\n----------------------------------------\n\nTITLE: Aspect Ratio Component Structure\nDESCRIPTION: Illustrates the basic structure of the Aspect Ratio component using `AspectRatio.Root`.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/aspect-ratio.md#_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { AspectRatio } from \"bits-ui\";\n</script>\n\n<AspectRatio.Root />\n```\n\n----------------------------------------\n\nTITLE: Disabled Switch Svelte\nDESCRIPTION: Shows how to disable the Switch component by setting the disabled prop to true, rendering it un-interactive. This is useful for scenarios where the user should not be able to toggle the switch.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/switch.md#_snippet_5\n\nLANGUAGE: svelte\nCODE:\n```\n<Switch.Root disabled>\n\t<!-- ...-->\n</Switch.Root>\n```\n\n----------------------------------------\n\nTITLE: Toolbar Structure Svelte\nDESCRIPTION: Demonstrates the basic structure of the Bits-UI Toolbar component. It includes the Root, Group, GroupItem, Link, and Button components. This snippet shows how to import the Toolbar component and arrange its elements.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/toolbar.md#_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Toolbar } from \"bits-ui\";\n</script>\n\n<Toolbar.Root>\n\t<Toolbar.Group>\n\t\t<Toolbar.GroupItem />\n\t</Toolbar.Group>\n\t<Toolbar.Link />\n\t<Toolbar.Button />\n</Toolbar.Root>\n```\n\n----------------------------------------\n\nTITLE: Defining Checkbox State Type in TypeScript\nDESCRIPTION: This TypeScript code defines a union type that represents the possible states of a checkbox: either \"checked\" or \"unchecked\". This type can be used to enforce type safety when dealing with checkbox state in the bits-ui project.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/src/lib/content/api-reference/extended-types/radio-group/radio-group-state-attr.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"checked\" | \"unchecked\";\n```\n\n----------------------------------------\n\nTITLE: Apply Svelte Transitions to Dialog with forceMount and child Snippets\nDESCRIPTION: This snippet demonstrates how to apply Svelte transitions to `Dialog.Overlay` and `Dialog.Content` using the `forceMount` prop and the `child` snippet. It imports Dialog from bits-ui and fade/fly transitions from svelte.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/dialog.md#_snippet_15\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Dialog } from \"bits-ui\";\n\timport { fly, fade } from \"svelte/transition\";\n</script>\n\n<Dialog.Root>\n\t<!-- ... other dialog components -->\n\t<Dialog.Overlay forceMount>\n\t\t{#snippet child({ props, open })}\n\t\t\t{#if open}\n\t\t\t\t<div {...props} transition:fade>\n\t\t\t\t\t<!-- ... -->\n\t\t\t\t</div>\n\t\t\t{/if}\n\t\t{/snippet}\n\t</Dialog.Overlay>\n\t<Dialog.Content forceMount>\n\t\t{#snippet child({ props, open })}\n\t\t\t{#if open}\n\t\t\t\t<div {...props} transition:fly>\n\t\t\t\t\t<!-- ... -->\n\t\t\t\t</div>\n\t\t\t{/if}\n\t\t{/snippet}\n\t</Dialog.Content>\n</Dialog.Root>\n```\n\n----------------------------------------\n\nTITLE: Typescript Input Value Change Handler Definition\nDESCRIPTION: Defines Typescript type signatures for input value change handlers.  The type of the handler depends on whether the input accepts a single string value or an array of string values. It demonstrates the use of conditional types based on a hypothetical 'type' property.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/src/lib/content/api-reference/extended-types/shared/on-change-string-or-array-prop.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// if `type` is `'single'`\n(value: string) => void\n\n// if `type` is `'multiple'`\n(value: string[]) => void\n```\n\n----------------------------------------\n\nTITLE: Creating a CalendarDateTime in TypeScript\nDESCRIPTION: This code snippet shows how to create a CalendarDateTime object using the @internationalized/date library in TypeScript. It illustrates how to create a date with time components from individual parameters and from an ISO 8601 string.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/dates.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Creating a CalendarDateTime\nimport { CalendarDateTime, parseDateTime } from \"@internationalized/date\";\n\n// From date and time components\nconst dateTime = new CalendarDateTime(2024, 7, 10, 12, 30, 0);\n\n// From ISO 8601 string\nconst parsedDateTime = parseDateTime(\"2024-07-10T12:30:00\");\n```\n\n----------------------------------------\n\nTITLE: Transforming Text String in TypeScript\nDESCRIPTION: This code defines the type signature for a function that takes a string as input, named `pastedText`, and returns a transformed string. The function's implementation details are not shown, but it is expected to perform some operation on the input string and return the result.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/src/lib/content/api-reference/extended-types/pin-input/pin-input-root-paste-transformer.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(pastedText: string) => string;\n```\n\n----------------------------------------\n\nTITLE: DateRangePicker Placeholder Fully Controlled in Svelte\nDESCRIPTION: This code shows how to fully control the `placeholder` state of the DateRangePicker component using Bits UI in a Svelte application with function bindings. It defines getter and setter functions for the placeholder, allowing for custom logic on state updates.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/date-range-picker.md#_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { DateRangePicker } from \"bits-ui\";\n\timport type { DateValue } from \"@internationalized/date\";\n\tlet myPlaceholder = $state<DateValue>();\n\n\tfunction getPlaceholder() {\n\t\treturn myPlaceholder;\n\t}\n\n\tfunction setPlaceholder(newPlaceholder: DateValue) {\n\t\tmyPlaceholder = newPlaceholder;\n\t}\n</script>\n\n<DateRangePicker.Root bind:placeholder={getPlaceholder, setPlaceholder}>\n\t<!-- ... -->\n</DateRangePicker.Root>\n```\n\n----------------------------------------\n\nTITLE: Defining Orientation Type in TypeScript\nDESCRIPTION: This code snippet defines a TypeScript type alias named `Orientation` using string literals.  The `Orientation` type can only be one of the specified strings: \"top\", \"right\", \"bottom\", or \"left\". This type is likely used to control the direction or placement of UI elements.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/src/lib/content/api-reference/extended-types/floating/side-prop.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"top\" | \"right\" | \"bottom\" | \"left\";\n```\n\n----------------------------------------\n\nTITLE: Merging Props with Styles - TypeScript\nDESCRIPTION: Illustrates merging style objects and strings when merging props, with later properties overriding earlier ones.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/utilities/merge-props.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst props1 = { style: { color: \"red\", fontSize: \"16px\" } };\nconst props2 = { style: \"background-color: blue; font-weight: bold;\" };\n\nconst mergedProps = mergeProps(props1, props2);\nconsole.log(mergedProps.style);\n// \"color: red; font-size: 16px; background-color: blue; font-weight: bold;\"\n```\n\n----------------------------------------\n\nTITLE: TypeScript Function Signature\nDESCRIPTION: This snippet defines a TypeScript function signature. The function takes a string `value`, a string `search`, and an optional string array `keywords` as input. It returns a number, likely representing some kind of score or index based on the input strings.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/src/lib/content/api-reference/extended-types/command/command-filter-prop.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(value: string, search: string, keywords?: string[]) => number;\n```\n\n----------------------------------------\n\nTITLE: Styling with Global Classes in CSS\nDESCRIPTION: This CSS snippet shows how to style Bits UI components using global CSS classes. It defines a class named 'accordion-trigger' and applies styles such as height, width, background color, and text color to it.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/styling.md#_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n.accordion-trigger {\n\theight: 3rem;\n\twidth: 100%;\n\tbackground-color: #3182ce;\n\tcolor: #fff;\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Validation Function Type Definition\nDESCRIPTION: This TypeScript code snippet defines a type for a function that likely handles validation results. It accepts a reason (either 'min', 'max', or 'custom') and an optional message which can be a string or an array of strings. The function returns void, implying it might update state or trigger an event based on the validation result.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/src/lib/content/api-reference/extended-types/shared/date-on-invalid-prop.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(reason: \"min\" | \"max\" | \"custom\", msg?: string | string[]) => void;\n```\n\n----------------------------------------\n\nTITLE: Customize Outside Interaction with interactOutsideBehavior in Svelte\nDESCRIPTION: This snippet shows how to use the `interactOutsideBehavior` prop to prevent the Dialog from closing when an interaction occurs outside the dialog content. Setting the prop to `'ignore'` ensures the dialog remains open.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/dialog.md#_snippet_12\n\nLANGUAGE: svelte\nCODE:\n```\n<Dialog.Content interactOutsideBehavior=\"ignore\">\n\t<!-- ... -->\n</Dialog.Content>\n```\n\n----------------------------------------\n\nTITLE: Import Label Component Svelte\nDESCRIPTION: Imports the Label component from the 'bits-ui' library in a Svelte component.  This allows you to use the Label component within your Svelte application. It requires the bits-ui library to be installed.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/label.md#_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Label } from \"bits-ui\";\n</script>\n\n<Label.Root />\n```\n\n----------------------------------------\n\nTITLE: Using Custom Checkbox Svelte\nDESCRIPTION: Shows how to use the custom `MyCheckbox` component in a Svelte page. It imports `MyCheckbox` and then uses it in the template with the `labelText` prop to display a label next to the checkbox.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/checkbox.md#_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport MyCheckbox from \"$lib/components/MyCheckbox.svelte\";\n</script>\n\n<MyCheckbox labelText=\"Enable notifications\" />\n```\n\n----------------------------------------\n\nTITLE: TypeScript Type Definition\nDESCRIPTION: This code snippet defines a TypeScript type that can take one of three string literal values: \"indeterminate\", \"loaded\", or \"loading\". This type can be used to represent the state of a loading process or a UI element.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/src/lib/content/api-reference/extended-types/progress/progress-state-attr.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"indeterminate\" | \"loaded\" | \"loading\";\n```\n\n----------------------------------------\n\nTITLE: Prevent Scroll Svelte\nDESCRIPTION: Shows how to prevent scrolling of the body when the Popover is open by setting the `preventScroll` prop to `true` on the `Popover.Content` component.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/popover.md#_snippet_6\n\nLANGUAGE: svelte\nCODE:\n```\n<Popover.Content preventScroll={true}>\n\t<!-- ... -->\n</Popover.Content>\n```\n\n----------------------------------------\n\nTITLE: Merging Props with Non-Event Handler Functions - TypeScript\nDESCRIPTION: Shows how non-event handler functions are chained when merging props, without the ability to prevent subsequent functions from executing.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/utilities/merge-props.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst props1 = { doSomething: () => console.log(\"Action 1\") };\nconst props2 = { doSomething: () => console.log(\"Action 2\") };\n\nconst mergedProps = mergeProps(props1, props2);\nmergedProps.doSomething(); // Logs: \"Action 1\" then \"Action 2\"\n```\n\n----------------------------------------\n\nTITLE: Define CollisionPadding Type in TypeScript\nDESCRIPTION: Defines a TypeScript type `CollisionPadding` as either a single number or a partial record mapping `Side` to a number. This type is used to represent the padding applied during collision detection, allowing for different padding values on each side of an element.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/src/lib/content/api-reference/extended-types/floating/collision-padding-prop.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype CollisionPadding = number | Partial<Record<Side, number>>;\n```\n\n----------------------------------------\n\nTITLE: Pagination Two-Way Binding - Svelte\nDESCRIPTION: Illustrates managing the pagination state using two-way binding with `bind:page`. This allows automatic synchronization of the page state with the `myPage` variable using Svelte's `$state` utility.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/pagination.md#_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Pagination } from \"bits-ui\";\n\tlet myPage = $state(1);\n</script>\n\n<button onclick={() => (myPage = 2)}> Go to page 2 </button>\n\n<Pagination.Root bind:pressed={myPage}>\n\t<!-- ...-->\n</Pagination.Root>\n```\n\n----------------------------------------\n\nTITLE: TypeScript Function Type Declaration\nDESCRIPTION: This snippet defines a TypeScript function type declaration. It specifies a function that accepts a string argument named 'value' and returns nothing (void).\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/src/lib/content/api-reference/extended-types/shared/on-string-value-change-prop.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n(value: string) => void\n```\n\n----------------------------------------\n\nTITLE: Defining DateValue Validation Function Type - TypeScript\nDESCRIPTION: Defines a TypeScript type alias for a function that accepts a `DateValue` object as input and returns a boolean value. This is likely used for date validation or filtering operations within the Bits-UI component library.  The `DateValue` type is assumed to be defined elsewhere.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/src/lib/content/api-reference/extended-types/shared/date-matcher-prop.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(date: DateValue) => boolean;\n```\n\n----------------------------------------\n\nTITLE: Portal Custom Target Svelte\nDESCRIPTION: This example shows how to specify a custom target element for the Bits UI Portal component using the `to` prop. The content will be rendered within the element specified by the selector.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/utilities/portal.md#_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Portal } from \"bits-ui\";\n</script>\n\n<div id=\"custom-target\"></div>\n\n<div>\n\t<Portal to=\"#custom-target\">\n\t\t<div>This content will be portalled to the #custom-target element</div>\n\t</Portal>\n</div>\n```\n\n----------------------------------------\n\nTITLE: TypeScript Function Type Definition\nDESCRIPTION: This code snippet defines a TypeScript type for a function. The function takes a single argument, 'checked', which is a boolean value. The function does not return any value (void). This type can be used to enforce type safety when working with functions that handle boolean input without returning a result.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/src/lib/content/api-reference/extended-types/checkbox/checkbox-root-on-checked-change-prop.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(checked: boolean) => void\n```\n\n----------------------------------------\n\nTITLE: Skipping Loading Check Svelte\nDESCRIPTION: This snippet shows how to skip the loading check for an Avatar image when you're sure the image will load. It sets the loadingStatus prop to 'loaded' on the Avatar.Root component to bypass the default loading behavior.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/avatar.md#_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Avatar } from \"bits-ui\";\n\n\t// local asset that's guaranteed to be available\n\timport localAvatar from \"/avatar.png\";\n</script>\n\n<Avatar.Root loadingStatus=\"loaded\">\n\t<Avatar.Image src={localAvatar} alt=\"User avatar\" />\n\t<Avatar.Fallback>HB</Avatar.Fallback>\n</Avatar.Root>\n```\n\n----------------------------------------\n\nTITLE: Menubar Structure\nDESCRIPTION: Demonstrates the basic structure of a Menubar component, including Root, Menu, Trigger, Portal, Content, Group, GroupHeading, Item, CheckboxItem, RadioGroup, RadioItem, Sub, SubTrigger, SubContent, Separator, and Arrow components.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/menubar.md#_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Menubar } from \"bits-ui\";\n</script>\n\n<Menubar.Root>\n\t<Menubar.Menu>\n\t\t<Menubar.Trigger />\n\t\t<Menubar.Portal>\n\t\t\t<Menubar.Content>\n\t\t\t\t<Menubar.Group>\n\t\t\t\t\t<Menubar.GroupHeading />\n\t\t\t\t\t<Menubar.Item />\n\t\t\t\t</Menubar.Group>\n\n\t\t\t\t<Menubar.Item />\n\n\t\t\t\t<Menubar.CheckboxItem>\n\t\t\t\t\t{#snippet children({ checked })}\n\t\t\t\t\t\t{checked ? \"✅\" : \"\"}\n\t\t\t\t\t{/snippet}\n\t\t\t\t</Menubar.CheckboxItem>\n\n\t\t\t\t<Menubar.RadioGroup>\n\t\t\t\t\t<Menubar.GroupHeading />\n\t\t\t\t\t<Menubar.RadioItem>\n\t\t\t\t\t\t{#snippet children({ checked })}\n\t\t\t\t\t\t\t{checked ? \"✅\" : \"\"}\n\t\t\t\t\t\t{/snippet}\n\t\t\t\t\t</Menubar.RadioItem>\n\t\t\t\t</Menubar.RadioGroup>\n\n\t\t\t\t<Menubar.Sub>\n\t\t\t\t\t<Menubar.SubTrigger />\n\t\t\t\t\t<Menubar.SubContent />\n\t\t\t\t</Menubar.Sub>\n\n\t\t\t\t<Menubar.Separator />\n\t\t\t\t<Menubar.Arrow />\n\t\t\t</Menubar.Content>\n\t\t</Menubar.Portal>\n\t</Menubar.Menu>\n</Menubar.Root>\n```\n\n----------------------------------------\n\nTITLE: Defining Date Picker Event Handlers Typescript\nDESCRIPTION: This snippet defines two type definitions for event handlers related to date selection in a date picker component. The first one is for a single date selection scenario, where the handler takes a DateValue or undefined. The second is for a multiple date selection, the handler takes an array of DateValue objects.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/src/lib/content/api-reference/extended-types/shared/calendar-on-value-change-prop.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// if `type` is `'single'`\n(date: DateValue | undefined) => void\n\n// if `type` is `'multiple'`\n(date: DateValue[]) => void\n```\n\n----------------------------------------\n\nTITLE: Merging Props with Classes - TypeScript\nDESCRIPTION: Demonstrates merging class names using the `clsx` library when merging props.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/utilities/merge-props.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst props1 = { class: \"text-lg font-bold\" };\nconst props2 = { class: [\"bg-blue-500\", \"hover:bg-blue-600\"] };\n\nconst mergedProps = mergeProps(props1, props2);\nconsole.log(mergedProps.class); // \"text-lg font-bold bg-blue-500 hover:bg-blue-600\"\n```\n\n----------------------------------------\n\nTITLE: TypeScript Type Declaration\nDESCRIPTION: This TypeScript snippet defines a union type for time units. It can represent 'day', 'hour', 'minute', or 'second'. It is likely used for specifying the granularity of time-based operations or configurations within the Bits-UI project.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/src/lib/content/api-reference/extended-types/shared/granularity-prop.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"day\" | \"hour\" | \"minute\" | \"second\";\n```\n\n----------------------------------------\n\nTITLE: Define pressed state handler type - TypeScript\nDESCRIPTION: This code snippet defines a type for a function. This function accepts a boolean value named 'pressed' as an argument and returns nothing (void). It's likely used as a callback to handle changes in a button's pressed state within the Bits-UI component library.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/src/lib/content/api-reference/extended-types/toggle/toggle-root-on-pressed-change-prop.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(pressed: boolean) => void\n```\n\n----------------------------------------\n\nTITLE: TypeScript Function Type Definition\nDESCRIPTION: This snippet defines a TypeScript function type. The function accepts a string array as input, denoted by `string[]`, and has a void return type, meaning it doesn't return any value. The function is named implicitly through its type definition.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/src/lib/content/api-reference/extended-types/checkbox/checkbox-group-on-value-change-prop.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(value: string[]) => void;\n```\n\n----------------------------------------\n\nTITLE: Typescript Function Type Definition\nDESCRIPTION: This defines a function type that accepts either a DateValue or undefined as input and returns void. The DateValue type is not defined within the provided text. It's probably related to date handling in the bits-ui library.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/src/lib/content/api-reference/extended-types/shared/on-start-end-value-change-prop.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(value: DateValue | undefined) => void\n```\n\n----------------------------------------\n\nTITLE: TypeScript Callback Function Definition\nDESCRIPTION: This snippet defines a callback function in TypeScript. The function takes a boolean parameter named 'checked' and returns void, indicating it doesn't return any value. This type of callback is commonly used in event handling or component state management.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/src/lib/content/api-reference/extended-types/switch/switch-root-on-checked-change.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(checked: boolean) => void\n```\n\n----------------------------------------\n\nTITLE: Defining an Event Handler Type in Typescript\nDESCRIPTION: This code snippet defines a type for an event handler function in TypeScript. The handler function takes any number of arguments of any type and returns void. This is a general type definition and may be used to describe various types of event handlers within the Bits-UI project.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/src/lib/content/api-reference/extended-types/pin-input/pin-input-root-on-complete-prop.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(...args: any[]) => void;\n```\n\n----------------------------------------\n\nTITLE: Define Pagination Types in TypeScript\nDESCRIPTION: This snippet defines TypeScript types for a pagination component. It includes types for representing a specific page ('Page'), an ellipsis ('Ellipsis'), and a union type ('PageItem') that combines both, ensuring each item has a unique key suitable for use with Svelte's `each` block. The 'Page' type represents a page number, while 'Ellipsis' indicates a gap in the pagination.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/src/lib/content/api-reference/extended-types/pagination/pagination-page-item-prop.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type Page = {\n\ttype: \"page\";\n\t/** The page number the `PageItem` represents */\n\tvalue: number;\n};\n\nexport type Ellipsis = {\n\ttype: \"ellipsis\";\n};\n\nexport type PageItem = (Page | Ellipsis) & {\n\t/** Unique key for the item, for svelte #each block */\n\tkey: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Menubar Radio Groups\nDESCRIPTION: Illustrates how to create a radio group in a menubar using `Menubar.RadioGroup` and `Menubar.RadioItem`.  The `bind:value` directive synchronizes the selected `value` with the radio group.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/menubar.md#_snippet_6\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Menubar } from \"bits-ui\";\n\n\tconst values = [\"one\", \"two\", \"three\"];\n\tlet value = $state(\"one\");\n</script>\n\n<Menubar.RadioGroup bind:value>\n\t{#each values as value}\n\t\t<Menubar.RadioItem {value}>\n\t\t\t{#snippet children({ checked })}\n\t\t\t\t{#if checked}\n\t\t\t\t\t✅\n\t\t\t\t{/if}\n\t\t\t\t{value}\n\t\t\t{/snippet}\n\t\t</Menubar.RadioItem>\n\t{/each}\n</Menubar.RadioGroup>\n```\n\n----------------------------------------\n\nTITLE: WithElementRef Type Definition - TypeScript\nDESCRIPTION: Defines the WithElementRef type helper. It takes a type T and an optional HTMLElement type U (defaults to HTMLElement). It adds a 'ref' property to type T, which can be either an element of type U or null.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/type-helpers/with-element-ref.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype WithElementRef<T, U extends HTMLElement = HTMLElement> = T & { ref?: U | null };\n```\n\n----------------------------------------\n\nTITLE: Defining a Void Function Type in TypeScript\nDESCRIPTION: This snippet defines a function type in TypeScript that takes no arguments and returns nothing (void). This is commonly used to represent functions that perform actions or side effects without returning a value.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/src/lib/content/api-reference/extended-types/shared/noop-prop.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n() => void\n```\n\n----------------------------------------\n\nTITLE: Styling Component States with Data Attributes in CSS\nDESCRIPTION: This CSS snippet illustrates how to style Bits UI components based on their state using data attributes. It targets Accordion.Trigger components in 'open', 'closed', and 'disabled' states and applies different styles accordingly.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/styling.md#_snippet_7\n\nLANGUAGE: css\nCODE:\n```\n/* Style the Accordion.Trigger when open */\n[data-accordion-trigger][data-state=\"open\"] {\n\tbackground-color: #f0f0f0;\n\tfont-weight: bold;\n}\n\n/* Style the Accordion.Trigger when closed */\n[data-accordion-trigger][data-state=\"closed\"] {\n\tbackground-color: #ffffff;\n}\n\n/* Style disabled components */\n[data-accordion-trigger][data-disabled] {\n\topacity: 0.5;\n\tcursor: not-allowed;\n}\n```\n\n----------------------------------------\n\nTITLE: Define ChildSnippetProps Type - TypeScript\nDESCRIPTION: This code snippet defines a TypeScript type named `ChildSnippetProps`. This type is likely used to represent the properties passed to a child component within the Bits-UI library. It contains three properties: `checked` (a boolean indicating the checked state), `indeterminate` (a boolean indicating an indeterminate state), and `props` (a generic record allowing for any other properties to be passed).\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/src/lib/content/api-reference/extended-types/checkbox/checkbox-root-child-snippet-props.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype ChildSnippetProps = {\n\tchecked: boolean;\n\tindeterminate: boolean;\n\tprops: Record<string, unknown>;\n};\n```\n\n----------------------------------------\n\nTITLE: Installing @internationalized/date\nDESCRIPTION: This command installs the @internationalized/date package using npm. This package provides a unified API for working with dates and times across different locales and time zones in Bits UI.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/dates.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nnpm install @internationalized/date\n```\n\n----------------------------------------\n\nTITLE: Date Processing Function Type Definition TypeScript\nDESCRIPTION: Defines a function type in TypeScript that takes a date object with 'start' and 'end' properties of type DateValue, and returns either an array of strings, a single string, or nothing (void). It represents a type signature for a date range processing function.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/src/lib/content/api-reference/extended-types/shared/date-range-validate-prop.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(date: { start: DateValue; end: DateValue }) => string[] | string | void;\n```\n\n----------------------------------------\n\nTITLE: TypeScript Code Snippet\nDESCRIPTION: This snippet shows a series of numbers separated by vertical bars and terminated by a semicolon. Without further context, it's impossible to determine the specific purpose or functionality. It could be related to configuration, enumeration, or a similar concept within the bits-ui project.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/src/lib/content/api-reference/extended-types/shared/header-level-prop.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n1 | 2 | 3 | 4 | 5 | 6;\n```\n\n----------------------------------------\n\nTITLE: Define SnippetProps Type in TypeScript\nDESCRIPTION: Defines the `SnippetProps` type, which represents the props used for a snippet component. It includes an array of `PinInputCell` objects and a record of additional properties.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/src/lib/content/api-reference/extended-types/pin-input/pin-input-root-child-snippet-props.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype SnippetProps = {\n\tcells: PinInputCell[];\n\tprops: Record<string, unknown>;\n};\n```\n\n----------------------------------------\n\nTITLE: Import AspectRatio Component in Svelte\nDESCRIPTION: Imports the AspectRatio component from the bits-ui library. This component is used to maintain the aspect ratio of the embedded Figma frame.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/figma-file.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<script lang=\"ts\">\n\timport { AspectRatio } from \"bits-ui\";\n</script>\n```\n\n----------------------------------------\n\nTITLE: Toggle State Type Definition in TypeScript\nDESCRIPTION: Defines a TypeScript type alias named anonymously that represents the possible states of a toggle switch, which can be either 'on' or 'off'. This type is used for type-checking and ensures that toggle state variables are assigned only valid values.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/src/lib/content/api-reference/extended-types/toggle/toggle-root-state-data-attr.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"on\" | \"off\";\n```\n\n----------------------------------------\n\nTITLE: Reusable Avatar Component Svelte\nDESCRIPTION: This snippet demonstrates creating a reusable Avatar component with customizable properties like src, alt, and fallback. It imports the Avatar component and type definitions from bits-ui, defines props for the component, and passes them to the underlying Avatar primitives.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/avatar.md#_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Avatar, type WithoutChildrenOrChild } from \"bits-ui\";\n\n\tlet {\n\t\tsrc,\n\t\talt,\n\t\tfallback,\n\t\tref = $bindable(null),\n\t\timageRef = $bindable(null),\n\t\tfallbackRef = $bindable(null),\n\t\t...restProps\n\t}: WithoutChildrenOrChild<Avatar.RootProps> & {\n\t\tsrc: string;\n\t\talt: string;\n\t\tfallback: string;\n\t\timageRef?: HTMLImageElement | null;\n\t\tfallbackRef?: HTMLElement | null;\n\t} = $props();\n</script>\n\n<Avatar.Root {...restProps} bind:ref>\n\t<Avatar.Image {src} {alt} bind:ref={imageRef} />\n\t<Avatar.Fallback bind:ref={fallbackRef}>\n\t\t{fallback}\n\t</Avatar.Fallback>\n</Avatar.Root>\n```\n\n----------------------------------------\n\nTITLE: Defining Bits-UI component state type in TypeScript\nDESCRIPTION: This snippet defines a TypeScript type alias for possible states within a Bits-UI component, representing different stages of visibility or activity. The type includes three possible values: \"delayed-open\", \"instant-open\", and \"closed\". This type is used for state management to determine the component's current status.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/src/lib/content/api-reference/extended-types/tooltip/tooltip-state-data-attr.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"delayed-open\" | \"instant-open\" | \"closed\";\n```\n\n----------------------------------------\n\nTITLE: Custom Accordion Wrapper - Svelte\nDESCRIPTION: This Svelte component, `MyAccordion.svelte`, is a reusable wrapper for the Bits-UI Accordion. It takes an array of items as props, where each item contains a title and content. It then renders multiple `MyAccordionItem` components within the `Accordion.Root` component.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/accordion.md#_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Accordion, type WithoutChildrenOrChild } from \"bits-ui\";\n\timport MyAccordionItem from \"$lib/components/MyAccordionItem.svelte\";\n\n\ttype Item = {\n\t\tvalue?: string;\n\t\ttitle: string;\n\t\tcontent: string;\n\t\tdisabled?: boolean;\n\t};\n\n\tlet {\n\t\tvalue = $bindable(),\n\t\tref = $bindable(null),\n\t\t...restProps\n\t}: WithoutChildrenOrChild<Accordion.RootProps> & {\n\t\titems: Item[];\n\t} = $props();\n</script>\n\n<!--\n Since we have to destructure the `value` to make it `$bindable`, we need to use `as any` here to avoid\n type errors from the discriminated union of `\"single\" | \"multiple\"`.\n (an unfortunate consequence of having to destructure bindable values)\n  -->\n<Accordion.Root bind:value bind:ref {...restProps as any}>\n\t{#each items as item, i (item.title + i)}\n\t\t<MyAccordionItem {...item} />\n\t{/each}\n</Accordion.Root>\n```\n\n----------------------------------------\n\nTITLE: Exclude Child Prop with WithoutChild - Svelte\nDESCRIPTION: This Svelte component demonstrates how to use the `WithoutChild` type helper to exclude the `child` prop from the `Accordion.ItemProps` type. This allows the component to manage the `children` prop internally, preventing external modification. The component destructures the props using `$props()` and spreads the remaining props to the `Accordion.Header` component.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/type-helpers/without-child.md#_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Accordion, type WithoutChild } from \"bits-ui\";\n\n\tlet { children, ...restProps }: WithoutChild<Accordion.ItemProps> = $props();\n</script>\n\n<Accordion.Header {...restProps}>\n\t<Accordion.Trigger>\n\t\t{@render children?.()}\n\t</Accordion.Trigger>\n</Accordion.Header>\n```\n\n----------------------------------------\n\nTITLE: Styling Component with CSS Variables\nDESCRIPTION: This CSS snippet shows how to use CSS variables exposed by Bits UI components to style them. It uses the `--bits-select-anchor-width` variable to ensure the width of `Select.Content` matches the width of the anchor element.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/styling.md#_snippet_8\n\nLANGUAGE: css\nCODE:\n```\n[data-select-content] {\n\twidth: var(--bits-select-anchor-width);\n\tmin-width: var(--bits-select-anchor-width);\n\tmax-width: var(--bits-select-anchor-width);\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Type Alias Definition\nDESCRIPTION: Defines a TypeScript type alias that represents a set of possible string literal values. The type `\"close\" | \"ignore\" | \"defer-otherwise-close\" | \"defer-otherwise-ignore\"` allows a variable to only hold one of these specific string values. This can be used for defining the possible actions in response to a specific event or condition within the Bits-UI project.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/src/lib/content/api-reference/extended-types/shared/interact-outside-behavior-prop.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"close\" | \"ignore\" | \"defer-otherwise-close\" | \"defer-otherwise-ignore\";\n```\n\n----------------------------------------\n\nTITLE: Defining Checkbox State Type in TypeScript\nDESCRIPTION: Defines a TypeScript type alias representing the possible states of a checkbox or similar component. The type allows for three states: \"checked\", \"unchecked\", and \"indeterminate\". This type will be utilized across the Bits-UI library to consistently manage checkbox states.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/src/lib/content/api-reference/extended-types/menu/menu-checked-state-attr.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"checked\" | \"unchecked\" | \"indeterminate\";\n```\n\n----------------------------------------\n\nTITLE: Define SnippetProps Type in TypeScript\nDESCRIPTION: Defines the `SnippetProps` type with a single property `open` of type boolean. This type is likely used to define the props interface for a component named `Snippet`, probably for controlling its open/closed state.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/src/lib/content/api-reference/extended-types/accordion/content-children-snippet-props.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype SnippetProps = {\n\topen: boolean;\n};\n```\n\n----------------------------------------\n\nTITLE: TypeScript String Literal Type Definition\nDESCRIPTION: Defines a TypeScript string literal type that can only be one of the specified strings: 'hover', 'scroll', 'auto', or 'always'. This type is likely used to constrain the possible values of a property, ensuring type safety and providing a clear set of options.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/src/lib/content/api-reference/extended-types/scroll-area/scroll-area-type-prop.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"hover\" | \"scroll\" | \"auto\" | \"always\";\n```\n\n----------------------------------------\n\nTITLE: Declaring String Literal Type in TypeScript\nDESCRIPTION: This TypeScript snippet declares a string literal type, which can be used to restrict the values that a variable can hold to one of the specified strings. This type ensures that the variable can only be assigned the values \"start\", \"center\", or \"end\".\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/src/lib/content/api-reference/extended-types/floating/align-prop.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"start\" | \"center\" | \"end\";\n```\n\n----------------------------------------\n\nTITLE: Incorrect Custom ID Usage Svelte\nDESCRIPTION: This code snippet shows an incorrect usage of the custom ID within a child snippet. Setting the `id` directly on the child component/element breaks the connection between the `ref` binding and the element because the parent cannot track the id.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/ref.md#_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<!-- ❌ This won't work correctly -->\n<Accordion.Trigger bind:ref={triggerRef}>\n\t{#snippet child({ props })}\n\t\t<CustomButton {...props} id=\"my-custom-id\" />\n\t{/snippet}\n</Accordion.Trigger>\n```\n\n----------------------------------------\n\nTITLE: Grouping Menu Items - Svelte\nDESCRIPTION: Shows how to group related menu items using the `DropdownMenu.Group` component, with either a `DropdownMenu.GroupHeading` or an `aria-label` attribute. This improves the menu's organization and usability.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/dropdown-menu.md#_snippet_5\n\nLANGUAGE: svelte\nCODE:\n```\n<DropdownMenu.Group>\n\t<DropdownMenu.GroupHeading>File</DropdownMenu.GroupHeading>\n\t<DropdownMenu.Item>New</DropdownMenu.Item>\n\t<DropdownMenu.Item>Open</DropdownMenu.Item>\n\t<DropdownMenu.Item>Save</DropdownMenu.Item>\n\t<DropdownMenu.Item>Save As</DropdownMenu.Item>\n</DropdownMenu.Group>\n<!-- or -->\n<DropdownMenu.Group aria-label=\"file\">\n\t<DropdownMenu.Item>New</DropdownMenu.Item>\n\t<DropdownMenu.Item>Open</DropdownMenu.Item>\n\t<DropdownMenu.Item>Save</DropdownMenu.Item>\n\t<DropdownMenu.Item>Save As</DropdownMenu.Item>\n</DropdownMenu.Group>\n```\n\n----------------------------------------\n\nTITLE: Default HTML Element Rendering in Bits UI (Svelte)\nDESCRIPTION: Demonstrates the default rendering of a `<button>` element within an `Accordion.Trigger` component in Bits UI.  The component uses `{@render children()}` to render the button's content. This example sets the context for understanding how the `child` snippet overrides this default behavior.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/child-snippet.md#_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<button {...props}>\n\t{@render children()}\n</button>\n```\n\n----------------------------------------\n\nTITLE: TypeScript Date Formatting Function Type Definition\nDESCRIPTION: This TypeScript snippet defines a type for a function that takes a DateValue object as input and returns either an array of strings, a single string, or void. This is likely part of a date formatting or processing utility within the bits-ui project.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/src/lib/content/api-reference/extended-types/shared/date-validate-prop.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(date: DateValue) => string[] | string | void;\n```\n\n----------------------------------------\n\nTITLE: Importing Stylesheet in Svelte Layout\nDESCRIPTION: This snippet shows how to import a CSS stylesheet into a Svelte layout component. It imports the '../app.css' file and includes a slot for rendering child components.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/styling.md#_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport \"../app.css\";\n\tlet { children } = $props();\n</script>\n\n{@render children()}\n```\n\n----------------------------------------\n\nTITLE: Setting Calendar Placeholder for Month Selection in Svelte\nDESCRIPTION: This code snippet shows how to use the `placeholder` prop of the `Calendar` component from the `bits-ui` library to set the currently displayed month programmatically. The placeholder is bound to the Calendar.Root component, which updates the calendar view when the placeholder value is changed. A button is used to trigger the change in the selected month to August.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/calendar.md#_snippet_16\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Calendar } from \"bits-ui\";\n\timport { CalendarDate } from \"@internationalized/date\";\n\n\tlet placeholder = $state(new CalendarDate(2024, 8, 3));\n</script>\n\n<!-- You can use a select, button, or whatever you wish -->\n<button\n\tonclick={() => {\n\t\tplaceholder = placeholder.set({ month: 8 });\n\t}}\n>\n\tSet month to August\n</button>\n\n<Calendar.Root bind:placeholder>\n\t<!-- ... -->\n</Calendar.Root>\n```\n\n----------------------------------------\n\nTITLE: Defining Visibility Types in TypeScript\nDESCRIPTION: This TypeScript snippet defines a type alias that represents the possible values for visibility, which are either \"visible\" or \"hidden\". It is likely used to control the display state of UI elements within the bits-ui library.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/src/lib/content/api-reference/extended-types/scroll-area/visible-hidden-prop.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"visible\" | \"hidden\";\n```\n\n----------------------------------------\n\nTITLE: Formatting Bits UI Code\nDESCRIPTION: This command uses Prettier to automatically format the codebase, ensuring consistent code style and readability. It should be run before submitting pull requests.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/CONTRIBUTING.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npnpm format\n```\n\n----------------------------------------\n\nTITLE: Fully Controlled Value\nDESCRIPTION: Illustrates using function bindings (getter and setter) for complete control over the value state of the Select component. This method provides the most flexibility for managing the state's reads and writes.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/select.md#_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Select } from \"bits-ui\";\n\tlet myValue = $state(\"\");\n\n\tfunction getValue() {\n\t\treturn myValue;\n\t}\n\n\tfunction setValue(newValue: string) {\n\t\tmyValue = newValue;\n\t}\n</script>\n\n<Select.Root type=\"single\" bind:value={getValue, setValue}>\n\t<!-- ... -->\n</Select.Root>\n```\n\n----------------------------------------\n\nTITLE: Disable Auto Sort\nDESCRIPTION: Explains how to disable automatic sorting of values by setting the `autoSort` prop to `false`. This is useful when the order of the values is important.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/slider.md#_snippet_11\n\nLANGUAGE: svelte\nCODE:\n```\n<Slider.Root type=\"multiple\" autoSort={false}>\n\t<!-- ... -->\n</Slider.Root>\n```\n\n----------------------------------------\n\nTITLE: Tooltip Delay Duration\nDESCRIPTION: Demonstrates how to set the delay duration before the tooltip appears by setting the `delayDuration` prop on the Tooltip.Root component.  The example sets a delay of 200ms.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/tooltip.md#_snippet_7\n\nLANGUAGE: svelte\nCODE:\n```\n<Tooltip.Root delayDuration={200}>\n\t<!-- .... -->\n</Tooltip.Root>\n```\n\n----------------------------------------\n\nTITLE: Building a Svelte project for production\nDESCRIPTION: This snippet illustrates how to build a production version of a Svelte application using the `npm run build` command.  The expected output is a directory containing the optimized production build files. Requires a Svelte project.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/tests/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Update Selected By Item Method Command TS\nDESCRIPTION: This snippet demonstrates how to use the `updateSelectedByItem(change: 1 | -1)` method to move selection up/down relative to the current item. It also mentions that the selection wraps around if the `loop` option is enabled.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/command.md#_snippet_13\n\nLANGUAGE: ts\nCODE:\n```\ncommand.updateSelectedByItem(1); // next item\ncommand.updateSelectedByItem(-1); // previous item\n```\n\n----------------------------------------\n\nTITLE: Define Date Range Type in TypeScript\nDESCRIPTION: This code snippet defines a TypeScript type called `DateRange`.  It consists of two properties: `start` and `end`, both of which can be a `DateValue` or undefined. The `DateValue` type is imported from the `@internationalized/date` library, which is a dependency for this code to work.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/src/lib/content/api-reference/extended-types/shared/date-range-prop.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { DateValue } from \"@internationalized/date\";\n\ntype DateRange = {\n\tstart: DateValue | undefined;\n\tend: DateValue | undefined;\n};\n```\n\n----------------------------------------\n\nTITLE: Using Custom Collapsible Content Svelte/TS\nDESCRIPTION: Shows how to use the custom MyCollapsibleContent component within another component or page.  It imports the MyCollapsibleContent component and places it within Collapsible.Root and Collapsible.Trigger components.  It sets the duration property for the transition.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/collapsible.md#_snippet_7\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Collapsible } from \"bits-ui\";\n\timport { MyCollapsibleContent } from \"$lib/components\";\n</script>\n\n<Collapsible.Root>\n\t<Collapsible.Trigger>Open</Collapsible.Trigger>\n\t<MyCollapsibleContent duration={300}>\n\t\t<!-- ... -->\n\t</MyCollapsibleContent>\n</Collapsible.Root>\n```\n\n----------------------------------------\n\nTITLE: Fully Controlled Open State - Svelte/TS\nDESCRIPTION: This code snippet demonstrates how to fully control the `open` state of the Dialog component using a Function Binding in Svelte and Typescript.  The getOpen and setOpen functions provide complete control over the state's reads and writes.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/dialog.md#_snippet_5\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Dialog } from \"bits-ui\";\n\tlet myOpen = $state(false);\n\n\tfunction getOpen() {\n\t\treturn myOpen;\n\t}\n\n\tfunction setOpen(newOpen: boolean) {\n\t\tmyOpen = newOpen;\n\t}\n</script>\n\n<Dialog.Root bind:open={getOpen, setOpen}>\n\t<!-- ... -->\n</Dialog.Root>\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry Format\nDESCRIPTION: This code snippet shows the general format for changelog entries, including type, scope, and description. It is written in a plain text-like format to define the structure.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/policies/changelog-conventions.md#_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\n- <type>(<scope>): <description>\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Date Value - Svelte\nDESCRIPTION: This snippet demonstrates setting the maximum allowable date for the DateField component using the `maxValue` prop. If the selected date exceeds this maximum, the field will be marked as invalid.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/date-field.md#_snippet_10\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport MyDateField from \"$lib/components/MyDateField.svelte\";\n\timport { today, getLocalTimeZone } from \"@internationalized/date\";\n\n\tconst todayDate = today(getLocalTimeZone());\n\tconst tomorrow = todayDate.add({ days: 1 });\n</script>\n\n<MyDateField maxValue={todayDate} value={tomorrow} />\n```\n\n----------------------------------------\n\nTITLE: Defining ChildSnippetProps Type in TypeScript\nDESCRIPTION: This code snippet defines a TypeScript type named `ChildSnippetProps`. This type is designed to represent the properties that can be passed to a child snippet or component. It includes a boolean `open` property and a `props` property which is a record of string keys to unknown values, allowing for arbitrary properties to be passed.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/src/lib/content/api-reference/extended-types/shared/open-child-snippet-props.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype ChildSnippetProps = {\n\topen: boolean;\n\tprops: Record<string, unknown>;\n};\n```\n\n----------------------------------------\n\nTITLE: Unavailable Dates Svelte\nDESCRIPTION: Demonstrates how to mark specific dates as unavailable in the Calendar component using Svelte. It defines a function `isDateUnavailable` that returns `true` if the day of the date is 1 (the first day of the month), effectively disabling the 1st of every month.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/calendar.md#_snippet_8\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Calendar } from \"bits-ui\";\n\timport { today, getLocalTimeZone, isNotNull } from \"@internationalized/date\";\n\n\tconst todayDate = today(getLocalTimeZone());\n\tconst tomorrow = todayDate.add({ days: 1 });\n\n\tfunction isDateUnavailable(date: DateValue) {\n\t\treturn date.day === 1;\n\t}\n</script>\n\n<Calendar.Root {isDateUnavailable} value={tomorrow}>\n\t<!-- ...-->\n</Calendar.Root>\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Bits UI\nDESCRIPTION: This command uses pnpm to install all the necessary dependencies for the Bits UI project. This step is required before running the development server or contributing code.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Defining ChildrenSnippetProps Type in TypeScript\nDESCRIPTION: This code snippet defines a TypeScript type `ChildrenSnippetProps` which is an object with a single property `open` of type boolean. This type is likely used to pass props to components that need to manage their open/closed state. The type does not have any dependencies.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/src/lib/content/api-reference/extended-types/shared/open-children-snippet-props.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype ChildrenSnippetProps = {\n\topen: boolean;\n};\n```\n\n----------------------------------------\n\nTITLE: Disabled Dates Svelte\nDESCRIPTION: Demonstrates how to mark specific dates as disabled in the Calendar component using Svelte. It defines a function `isDateDisabled` that returns `true` if the day of the date is 1 (the first day of the month), effectively disabling the 1st of every month.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/calendar.md#_snippet_9\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Calendar } from \"bits-ui\";\n\timport { today, getLocalTimeZone, isNotNull } from \"@internationalized/date\";\n\n\tconst todayDate = today(getLocalTimeZone());\n\tconst tomorrow = todayDate.add({ days: 1 });\n\n\tfunction isDateDisabled(date: DateValue) {\n\t\treturn date.day === 1;\n\t}\n</script>\n\n<Calendar.Root {isDateDisabled} value={tomorrow}>\n\t<!-- ...-->\n</Calendar.Root>\n```\n\n----------------------------------------\n\nTITLE: Checkbox Structure Svelte\nDESCRIPTION: Demonstrates the basic structure of the Checkbox component using Svelte. It imports the Checkbox component from 'bits-ui' and utilizes the Root component to create a checkbox with a snippet for rendering different states (checked, unchecked, indeterminate).\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/checkbox.md#_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Checkbox } from \"bits-ui\";\n</script>\n\n<Checkbox.Root>\n\t{#snippet children({ checked, indeterminate })}\n\t\t{#if indeterminate}\n\t\t\t-\n\t\t{:else if checked}\n\t\t\t✅\n\t\t{:else}\n\t\t\t❌\n\t\t{/if}\n\t{/snippet}\n</Checkbox.Root>\n```\n\n----------------------------------------\n\nTITLE: Fully Controlled Open State\nDESCRIPTION: Illustrates how to fully control the `open` state of the `Select` component using function bindings. This allows for complete control over how the open state is read and written, providing maximum flexibility.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/select.md#_snippet_6\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Select } from \"bits-ui\";\n\tlet myOpen = $state(false);\n\n\tfunction getOpen() {\n\t\treturn myOpen;\n\t}\n\n\tfunction setOpen(newOpen: boolean) {\n\t\tmyOpen = newOpen;\n\t}\n</script>\n\n<Select.Root bind:open={getOpen, setOpen}>\n\t<!-- ... -->\n</Select.Root>\n```\n\n----------------------------------------\n\nTITLE: Linting Bits UI Code\nDESCRIPTION: This command runs ESLint to check the codebase for linting errors, ensuring code style consistency and adherence to project guidelines. It's a crucial step before submitting pull requests.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/CONTRIBUTING.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm lint\n```\n\n----------------------------------------\n\nTITLE: DateRangePicker Placeholder Two-Way Binding in Svelte\nDESCRIPTION: This code demonstrates how to use two-way binding with the `placeholder` property of the DateRangePicker component using Bits UI in a Svelte application. It imports necessary modules and initializes a `CalendarDateTime` object to act as the initial placeholder value.  It updates the placeholder when the DateRangePicker selection is changed.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/date-range-picker.md#_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { DateRangePicker } from \"bits-ui\";\n\timport { CalendarDateTime } from \"@internationalized/date\";\n\tlet myPlaceholder = $state(new CalendarDateTime(2024, 8, 3, 12, 30));\n</script>\n\n<DateRangePicker.Root bind:placeholder={myPlaceholder}>\n\t<!-- ... -->\n</DateRangePicker.Root>\n```\n\n----------------------------------------\n\nTITLE: Define SnippetProps type in Typescript\nDESCRIPTION: This code defines a TypeScript type named `SnippetProps`.  It specifies that an object of this type must have a property named `open` of type boolean. This is commonly used to control the display state of a UI component, such as a snippet or modal.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/src/lib/content/api-reference/extended-types/collapsible/content-children-snippet-props.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype SnippetProps = {\n\topen: boolean;\n};\n```\n\n----------------------------------------\n\nTITLE: Override Escape Key Behavior with onEscapeKeydown in Svelte\nDESCRIPTION: This snippet demonstrates how to override the default Escape key behavior using the `onEscapeKeydown` prop.  The provided event handler can prevent the default action and implement custom logic.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/dialog.md#_snippet_11\n\nLANGUAGE: svelte\nCODE:\n```\n<Dialog.Content\n\tonEscapeKeydown={(e) => {\n\t\t\te.preventDefault();\n\t\t\t// do something else instead\n\t\t}}\n>\n\t<!-- ... -->\n</Dialog.Content>\n```\n\n----------------------------------------\n\nTITLE: Defining ChildrenSnippetProps Type in Typescript\nDESCRIPTION: This snippet defines a TypeScript type named `ChildrenSnippetProps`. This type is used to encapsulate properties passed to child components. It includes a single property, `checked`, which is a boolean value, presumably indicating the checked state of a component.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/src/lib/content/api-reference/extended-types/shared/radio-item-children-snippet-props.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype ChildrenSnippetProps = {\n\tchecked: boolean;\n};\n```\n\n----------------------------------------\n\nTITLE: Cloning the Bits UI Repository\nDESCRIPTION: This command clones the Bits UI repository from GitHub to your local machine. It is the first step in setting up the development environment.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/huntabyte/bits-ui.git\n```\n\n----------------------------------------\n\nTITLE: Paged Navigation Svelte\nDESCRIPTION: Demonstrates using the `pagedNavigation` prop on the `Calendar.Root` component. When set to `true`, the previous and next buttons will shift the calendar forward or backward by the number of months being displayed, rather than just one month.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/calendar.md#_snippet_12\n\nLANGUAGE: svelte\nCODE:\n```\n<Calendar.Root pagedNavigation>\n\t<!-- ...-->\n</Calendar.Root>\n```\n\n----------------------------------------\n\nTITLE: DateField Structure Svelte\nDESCRIPTION: Demonstrates the basic structure of the DateField component using Svelte and TypeScript. It showcases the Root, Label, Input, and Segment components for creating a date input field.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/date-field.md#_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { DateField } from \"$lib\";\n</script>\n\n<DateField.Root>\n\t<DateField.Label>Check-in date</DateField.Label>\n\t<DateField.Input>\n\t\t{#snippet children({ segments })}\n\t\t\t{#each segments as { part, value }}\n\t\t\t\t<DateField.Segment {part}>\n\t\t\t\t\t{value}\n\t\t\t\t</DateField.Segment>\n\t\t\t{/each}\n\t\t{/snippet}\n\t</DateField.Input>\n</DateField.Root>\n```\n\n----------------------------------------\n\nTITLE: Two-Way Binding Checkbox State Svelte\nDESCRIPTION: Demonstrates two-way binding of the `checked` state of a Checkbox using `bind:checked`. It initializes a local variable `myChecked` to `false`, and then binds it to the `checked` prop of the `Checkbox.Root`.  A button is included to uncheck the checkbox.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/checkbox.md#_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Checkbox } from \"bits-ui\";\n\tlet myChecked = $state(false);\n</script>\n\n<button onclick={() => (myChecked = false)}> uncheck </button>\n\n<Checkbox.Root bind:checked={myChecked} />\n```\n\n----------------------------------------\n\nTITLE: Type Definition in Typescript\nDESCRIPTION: Defines a TypeScript type alias.  The type can only be one of two string literals: \"partial\" or \"always\". This type is likely used to represent a state or configuration option within the application.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/src/lib/content/api-reference/extended-types/floating/sticky-prop.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"partial\" | \"always\";\n```\n\n----------------------------------------\n\nTITLE: Using Reusable Alert Dialog (Svelte/TS)\nDESCRIPTION: This example shows how to use the `MyAlertDialog` component in a Svelte application.  It demonstrates how to pass snippets as children to customize the title and description of the dialog.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/alert-dialog.md#_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport MyAlertDialog from \"$lib/components/MyAlertDialog.svelte\";\n</script>\n\n<MyAlertDialog buttonText=\"Open Dialog\">\n\t{#snippet title()}\n\t\tDelete your account\n\t{/snippet}\n\t{#snippet description()}\n\t\tThis action cannot be undone.\n\t{/snippet}\n</MyAlertDialog>\n```\n\n----------------------------------------\n\nTITLE: Defining SnippetProps type in TypeScript\nDESCRIPTION: This snippet defines a TypeScript type named `SnippetProps`. It includes a `checked` property, which is a boolean value, indicating a checked or unchecked state. This type can be used to define the structure of props for a component or function related to a checkbox or toggle element.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/src/lib/content/api-reference/extended-types/switch/switch-root-children-snippet-props.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype SnippetProps = {\n\tchecked: boolean;\n};\n```\n\n----------------------------------------\n\nTITLE: TypeScript Type Definition\nDESCRIPTION: Defines a TypeScript type that can have one of two string values: \"checked\" or \"unchecked\". This is likely used to represent the state of a checkbox or similar UI element.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/src/lib/content/api-reference/extended-types/switch/switch-checked-data-attr.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"checked\" | \"unchecked\";\n```\n\n----------------------------------------\n\nTITLE: Fully Controlled Placeholder Svelte\nDESCRIPTION: Demonstrates fully controlled state management for the `placeholder` prop of the Calendar component using Svelte. It uses function bindings (`getPlaceholder`, `setPlaceholder`) to manage the `placeholder` state, providing complete control over reads and writes to the `myPlaceholder` state variable.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/calendar.md#_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Calendar } from \"bits-ui\";\n\timport type { DateValue } from \"@internationalized/date\";\n\n\tlet myPlaceholder = $state<DateValue>();\n\n\tfunction getPlaceholder() {\n\t\treturn myPlaceholder;\n\t}\n\n\tfunction setPlaceholder(newPlaceholder: DateValue) {\n\t\tmyPlaceholder = newPlaceholder;\n\t}\n</script>\n\n<Calendar.Root bind:placeholder={getPlaceholder, setPlaceholder}>\n\t<!-- ... -->\n</Calendar.Root>\n```\n\n----------------------------------------\n\nTITLE: Scroll Area Type Scroll Svelte\nDESCRIPTION: Sets the `type` prop of the `MyScrollArea` component to `scroll`. With this configuration, the scrollbars appear when the user scrolls the content, mimicking macOS behavior.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/scroll-area.md#_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<MyScrollArea type=\"scroll\">\n\t<!-- ... -->\n</MyScrollArea>\n```\n\n----------------------------------------\n\nTITLE: Define ChildrenSnippetProps Type - Typescript\nDESCRIPTION: Defines the `ChildrenSnippetProps` type which includes `checked` and `indeterminate` boolean properties. This type is likely used as a prop type for components that manage a checked/unchecked and indeterminate state, providing a structured way to handle the states of child elements.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/src/lib/content/api-reference/extended-types/checkbox/checkbox-root-children-snippet-props.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype ChildrenSnippetProps = {\n\tchecked: boolean;\n\tindeterminate: boolean;\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Menus (Submenus) - Svelte\nDESCRIPTION: Shows how to create nested menus using the `DropdownMenu.Sub`, `DropdownMenu.SubTrigger`, and `DropdownMenu.SubContent` components.  This allows creating hierarchical menu structures for more complex applications.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/dropdown-menu.md#_snippet_9\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { DropdownMenu } from \"bits-ui\";\n</script>\n\n<DropdownMenu.Content>\n\t<DropdownMenu.Item>Item 1</DropdownMenu.Item>\n\t<DropdownMenu.Item>Item 2</DropdownMenu.Item>\n\t<DropdownMenu.Sub>\n\t\t<DropdownMenu.SubTrigger>Open Sub Menu</DropdownMenu.SubTrigger>\n\t\t<DropdownMenu.SubContent>\n\t\t\t<DropdownMenu.Item>Sub Item 1</DropdownMenu.Item>\n\t\t\t<DropdownMenu.Item>Sub Item 2</DropdownMenu.Item>\n\t\t</DropdownMenu.SubContent>\n\t</DropdownMenu.Sub>\n</DropdownMenu.Content>\n```\n\n----------------------------------------\n\nTITLE: TypeScript Function Type Definition\nDESCRIPTION: Defines a function type in TypeScript. The function accepts a single argument named 'page' of type 'number' and returns 'void', suggesting the function performs an action but doesn't return any value. This is likely a handler function related to pagination or similar functionality within the Bits-UI project.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/src/lib/content/api-reference/extended-types/pagination/pagination-on-page-change-prop.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(page: number) => void\n```\n\n----------------------------------------\n\nTITLE: Handling Outside Interactions - Svelte\nDESCRIPTION: This snippet shows how to use the `onInteractOutside` prop to override the default behavior when a user interacts outside the `AlertDialog.Content`. It provides an example of preventing the default action using `e.preventDefault()` and allows for custom actions to be implemented.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/alert-dialog.md#_snippet_13\n\nLANGUAGE: svelte\nCODE:\n```\n<AlertDialog.Content\n\tonInteractOutside={(e) => {\n\t\te.preventDefault();\n\t\t// do something else instead\n\t}}\n>\n\t<!-- ... -->\n</AlertDialog.Content>\n```\n\n----------------------------------------\n\nTITLE: TypeScript Function Type Definition\nDESCRIPTION: Defines a TypeScript function type that accepts a boolean value named 'indeterminate' as input and returns void. This type definition likely represents a callback function used to handle changes in an indeterminate state, such as in a checkbox component.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/src/lib/content/api-reference/extended-types/checkbox/checkbox-root-on-indeterminate-change.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n(indeterminate: boolean) => void\n```\n\n----------------------------------------\n\nTITLE: Type Definition in TypeScript\nDESCRIPTION: This TypeScript code defines a type alias that can represent a string, an HTMLElement, null, or undefined. This type is likely used as a property type or return type for functions dealing with UI elements within the Bits-UI library. It provides flexibility in handling various types of element references or values.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/src/lib/content/api-reference/extended-types/portal/to-prop.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nstring | HTMLElement | null | undefined;\n```\n\n----------------------------------------\n\nTITLE: Define SnippetProps Type - TypeScript\nDESCRIPTION: This code defines the `SnippetProps` type, which represents the properties for a snippet component that uses pin input cells. It contains a single property `cells`, which is an array of `PinInputCell` objects. This array is used to render the individual cells of the pin input.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/src/lib/content/api-reference/extended-types/pin-input/pin-input-root-children-snippet-props.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype SnippetProps = {\n\tcells: PinInputCell[];\n};\n```\n\n----------------------------------------\n\nTITLE: Running the Bits UI Development Server\nDESCRIPTION: This command starts the development server for the Bits UI documentation and also watches for changes in the library code, rebuilding it automatically. This allows for live development and testing.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/CONTRIBUTING.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Define CommandState Type in TypeScript\nDESCRIPTION: Defines the `CommandState` type, representing the state of a command menu. It includes properties for the search query (`search`), the selected value (`value`), and filtered items (`filtered`). The `filtered` property contains the count of visible items, a map of item IDs to their search store, and a set of groups with at least one visible item.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/src/lib/content/api-reference/extended-types/command/command-on-state-change-prop.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype CommandState = {\n\t/** The value of the search query */\n\tsearch: string;\n\t/** The value of the selected command menu item */\n\tvalue: string;\n\t/** The filtered items */\n\tfiltered: {\n\t\t/** The count of all visible items. */\n\t\tcount: number;\n\t\t/** Map from visible item id to its search store. */\n\t\titems: Map<string, number>;\n\t\t/** Set of groups with at least one visible item. */\n\t\tgroups: Set<string>;\n\t};\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Positioning Type in TypeScript\nDESCRIPTION: This code snippet defines a TypeScript type alias that restricts the possible values to either 'fixed' or 'absolute'. This is commonly used for specifying CSS positioning properties.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/src/lib/content/api-reference/extended-types/floating/strategy-prop.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"fixed\" | \"absolute\";\n```\n\n----------------------------------------\n\nTITLE: Accordion.Trigger Ref with Custom ID Svelte/TS\nDESCRIPTION: This code snippet demonstrates how to use a custom `id` on the element within a child snippet. The `id` is passed to the parent component (`Accordion.Trigger`) so it can be correctly registered with the `ref` binding. The custom ID will then be available in props for the child snippet.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/ref.md#_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport CustomButton from \"./CustomButton.svelte\";\n\timport { Accordion } from \"bits-ui\";\n\n\tlet triggerRef = $state<HTMLButtonElement | null>(null);\n\tconst myCustomId = \"my-custom-id\";\n</script>\n\n<Accordion.Trigger bind:ref={triggerRef} id={myCustomId}>\n\t{#snippet child({ props })}\n\t\t<!-- The custom ID will be included in props -->\n\t\t<CustomButton {...props} />\n\t{/snippet}\n</Accordion.Trigger>\n```\n\n----------------------------------------\n\nTITLE: Defining Alignment Type in TypeScript\nDESCRIPTION: This snippet defines a TypeScript string literal type representing possible alignment values. It allows specifying the horizontal alignment as either \"left\", \"center\", or \"right\". This type can be used to enforce valid alignment options within the Bits-UI project.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/src/lib/content/api-reference/extended-types/pin-input/pin-input-root-text-align-prop.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"left\" | \"center\" | \"right\";\n```\n\n----------------------------------------\n\nTITLE: Define PinInputCell Type in TypeScript\nDESCRIPTION: Defines the `PinInputCell` type, which represents a single cell in a pin input component. It includes properties for the character displayed in the cell, whether the cell is active, and whether the cell has a fake caret.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/src/lib/content/api-reference/extended-types/pin-input/pin-input-root-child-snippet-props.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype PinInputCell = {\n\t/** The character displayed in the cell. */\n\tchar: string | null | undefined;\n\t/** Whether the cell is active. */\n\tisActive: boolean;\n\t/** Whether the cell has a fake caret. */\n\thasFakeCaret: boolean;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Direction Type in TypeScript\nDESCRIPTION: This code snippet defines a TypeScript type alias named `Direction` which can hold either the string literal value \"ltr\" or the string literal value \"rtl\". This is typically used to specify the direction of text and layout within a user interface, supporting both left-to-right and right-to-left languages.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/src/lib/content/api-reference/extended-types/shared/dir-prop.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"ltr\" | \"rtl\";\n```\n\n----------------------------------------\n\nTITLE: Defining Active/Inactive State Type in TypeScript\nDESCRIPTION: This code snippet defines a TypeScript type alias for representing the state of a component. The type `\"active\" | \"inactive\"` allows a variable to hold either the string literal 'active' or the string literal 'inactive'. This is commonly used for managing component state in UI frameworks.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/src/lib/content/api-reference/extended-types/tabs/tabs-trigger-state.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"active\" | \"inactive\";\n```\n\n----------------------------------------\n\nTITLE: Pointer Event Handler in TypeScript\nDESCRIPTION: This code snippet defines a type for a function that handles PointerEvent in TypeScript. The function takes a PointerEvent as input and returns void, indicating that it performs some action without returning a value.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/src/lib/content/api-reference/extended-types/shared/on-interact-outside-prop.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(event: PointerEvent) => void\n```\n\n----------------------------------------\n\nTITLE: DateValue Type Definition for Multiple Date Selection (TypeScript)\nDESCRIPTION: This code snippet defines a TypeScript type alias `Value` for representing an array of `DateValue` objects. This array represents multiple selected dates. It uses the `DateValue` type from the `@internationalized/date` library and is used when the date selection type is set to 'multiple'.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/src/lib/content/api-reference/extended-types/shared/calendar-value-prop.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// if `type` is `'multiple'`\ntype Value = DateValue[];\n```\n\n----------------------------------------\n\nTITLE: Defining UI Element Type in TypeScript\nDESCRIPTION: This TypeScript snippet defines a type that represents either a DOM Element or null. It's commonly used in UI frameworks to handle situations where an element might not be immediately available or could be removed from the DOM. This type provides type safety when working with potentially non-existent elements.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/src/lib/content/api-reference/extended-types/floating/collision-boundary-prop.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nElement | null;\n```\n\n----------------------------------------\n\nTITLE: Defining Action Type in TypeScript\nDESCRIPTION: This TypeScript code snippet defines a union type that specifies the possible string values that can be used to represent different types of actions related to closing or ignoring something. The available options are \"close\", \"ignore\", \"defer-otherwise-close\", and \"defer-otherwise-ignore\".\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/src/lib/content/api-reference/extended-types/shared/escape-keydown-behavior-prop.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"close\" | \"ignore\" | \"defer-otherwise-close\" | \"defer-otherwise-ignore\";\n```\n\n----------------------------------------\n\nTITLE: Define SnippetProps Type in TypeScript\nDESCRIPTION: This snippet defines the `SnippetProps` type in TypeScript. It consists of two properties: `open`, a boolean indicating whether the snippet is open, and `props`, a record of type `Record<string, unknown>` allowing to pass any type of data as key-value pairs to the snippet.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/src/lib/content/api-reference/extended-types/collapsible/content-child-snippet-props.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype SnippetProps = {\n\topen: boolean;\n\tprops: Record<string, unknown>;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Theme Mode Type in TypeScript\nDESCRIPTION: This TypeScript code defines a type alias named `\"automatic\" | \"manual\"`. This type specifies the possible values for the theme mode, allowing it to be either 'automatic' or 'manual'. This is essential for controlling the theme behavior of the Bits-UI library, where the theme can be automatically switched based on system preferences or manually selected by the user.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/src/lib/content/api-reference/extended-types/tabs/tabs-root-activation-mode.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"automatic\" | \"manual\";\n```\n\n----------------------------------------\n\nTITLE: Defining Date Format Units in TypeScript\nDESCRIPTION: This code snippet defines a TypeScript type that represents the valid units for formatting dates and times. These units include month, day, year, hour, minute, second, dayPeriod, timeZoneName, and literal, allowing for precise control over date and time string representation.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/src/lib/content/api-reference/extended-types/shared/segment-part-prop.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"month\" | \"day\" | \"year\" | \"hour\" | \"minute\" | \"second\" | \"dayPeriod\" | \"timeZoneName\" | \"literal\";\n```\n\n----------------------------------------\n\nTITLE: Starting the Svelte development server\nDESCRIPTION: This snippet shows how to start the development server for a Svelte project using the `npm run dev` command. It also demonstrates how to open the application in a new browser tab using the `-- --open` flag. The primary dependency is having a Svelte project already set up with `create-svelte` and dependencies installed.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/tests/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n\n# or start the server and open the app in a new browser tab\nnpm run dev -- --open\n```\n\n----------------------------------------\n\nTITLE: Type Definition in Typescript\nDESCRIPTION: This code snippet defines a type that can be either a string, an HTMLElement, an object with a getBoundingClientRect method that returns a DOMRect, or null. This is commonly used to represent a reference to an element either via a selector string, a direct element reference, or an object capable of providing a bounding rectangle.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/src/lib/content/api-reference/extended-types/floating/custom-anchor-prop.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nstring | HTMLElement | { getBoundingClientRect: () => DOMRect } | null;\n```\n\n----------------------------------------\n\nTITLE: TypeScript Type Definition\nDESCRIPTION: Defines a TypeScript type alias that represents a union of string literals. This is likely used to restrict the values of a configuration parameter to a predefined set of options. The options \"nearest\" and \"center\" suggest this type might be related to positioning or alignment within the Bits-UI library.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/src/lib/content/api-reference/extended-types/combobox/scroll-alignment-prop.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"nearest\" | \"center\";\n```\n\n----------------------------------------\n\nTITLE: Using IsUsingKeyboard in Svelte\nDESCRIPTION: This code snippet demonstrates how to import and use the IsUsingKeyboard utility within a Svelte component. It initializes the utility and creates a derived state to determine if a menu should be displayed based on keyboard usage.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/utilities/is-using-keyboard.md#_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { IsUsingKeyboard } from \"bits-ui\";\n\n\tconst isUsingKeyboard = new IsUsingKeyboard();\n\tconst shouldShowMenu = $derived(isUsingKeyboard.current);\n</script>\n```\n\n----------------------------------------\n\nTITLE: TypeScript String Literal Type Definition\nDESCRIPTION: Defines a TypeScript string literal type that allows only the values \"narrow\", \"short\", or \"long\".  This likely represents different length options for a component or feature in the Bits-UI library.  Usage of this type ensures type safety when setting related options.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/src/lib/content/api-reference/extended-types/shared/weekday-format-prop.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"narrow\" | \"short\" | \"long\";\n```\n\n----------------------------------------\n\nTITLE: Defining Types for Bits-UI Segment Props\nDESCRIPTION: This code defines the type `ChildrenSnippetProps` which is used to type the props passed to a component. This type expects an array of objects, where each object represents a segment and contains the `part` of type `SegmentPart` and its associated `value` of type `string`.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/src/lib/content/api-reference/extended-types/shared/date-field-input-children-snippet-props.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { SegmentPart } from \"bits-ui\";\n\ntype ChildrenSnippetProps = {\n\tsegments: Array<{ part: SegmentPart; value: string }>;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Editable Date/Time Segment Types in TypeScript\nDESCRIPTION: This snippet defines a TypeScript type alias `EditableSegmentPart` as a union of string literals. It specifies the possible editable parts of a date/time component, such as 'day', 'month', 'year', 'hour', 'minute', 'second', and 'dayPeriod'.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/src/lib/content/api-reference/extended-types/date-field/date-field-editable-segment-part.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype EditableSegmentPart = \"day\" | \"month\" | \"year\" | \"hour\" | \"minute\" | \"second\" | \"dayPeriod\";\n```\n\n----------------------------------------\n\nTITLE: Defining ChildSnippetProps Type in TypeScript\nDESCRIPTION: This code snippet defines a TypeScript type named `ChildSnippetProps`. It specifies the structure of the props that can be passed to a child snippet component. It includes a generic `props` property (a record of string keys to unknown values) and a `segments` property, which is an array of objects. Each object in the `segments` array represents a segment with a `part` of type `SegmentPart` and a string `value`.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/src/lib/content/api-reference/extended-types/shared/date-field-input-child-snippet-props.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { SegmentPart } from \"bits-ui\";\n\ntype ChildSnippetProps = {\n\tprops: Record<string, unknown>;\n\tsegments: Array<{ part: SegmentPart; value: string }>;\n};\n```\n\n----------------------------------------\n\nTITLE: Define SnippetProps Type in TypeScript\nDESCRIPTION: This snippet defines a TypeScript type called `SnippetProps`. This type is designed to hold properties that can be passed to code snippets or components. The `props` field is a `Record<string, unknown>`, which means it's an object where keys are strings and values can be of any type. This allows for maximum flexibility when passing data to the snippet.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/src/lib/content/api-reference/extended-types/shared/child-default-snippet-props.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype SnippetProps = {\n\tprops: Record<string, unknown>;\n};\n```\n\n----------------------------------------\n\nTITLE: Example Changelog Calendar Fixes\nDESCRIPTION: This code snippet demonstrates multiple `fix` entries for the Calendar component, addressing focusability of outside days when `disableOutsideDays` is true and ensuring the default placeholder isn't a disabled date. This snippet shows how similar fixes are documented.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/policies/changelog-conventions.md#_snippet_3\n\nLANGUAGE: md\nCODE:\n```\n## 1.3.6\n\n### Patch Changes\n\n-   fix(Calendar): prevent outside days from being focusable when `disableOutsideDays` is `true`\n-   fix(Range Calendar): prevent outside days from being focusable when `disableOutsideDays` is `true`\n-   fix(Calendar): ensure default placeholder isn't a disabled date for keyboard navigation\n```\n\n----------------------------------------\n\nTITLE: Defining a TypeScript String Literal Type\nDESCRIPTION: This snippet defines a TypeScript string literal type named without an explicit name in the surrounding context. This type allows for the selection of either \"single\" or \"multiple\" values. It enhances type safety when implementing UI components that handle different selection modes, such as a single-select dropdown or a multi-select list.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/src/lib/content/api-reference/extended-types/shared/single-or-multiple-prop.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"single\" | \"multiple\";\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Numbers Callback Type in TypeScript\nDESCRIPTION: Defines a TypeScript function type that accepts an array of numbers as input and returns void. This is commonly used for callbacks that process multiple numerical values, such as handling a list of selected items or performing calculations on a set of numbers.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/src/lib/content/api-reference/extended-types/slider/slider-root-on-value-change.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n(value: number[]) => void\n```\n\n----------------------------------------\n\nTITLE: Defining \"start\" | \"end\" string literal type in TypeScript\nDESCRIPTION: This snippet defines a TypeScript string literal type. This type restricts the values a variable can hold to either 'start' or 'end'. It's useful for defining properties or parameters that can only accept these two specific string values, improving type safety and code clarity.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/src/lib/content/api-reference/extended-types/date-range-field/date-range-field-input-type-prop.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"start\" | \"end\";\n```\n\n----------------------------------------\n\nTITLE: Define ChildSnippetProps Type - TypeScript\nDESCRIPTION: Defines the `ChildSnippetProps` type in TypeScript. This type is used to define the structure of props passed to a child component. It contains a `checked` boolean property and a `props` property which is a record of string keys to unknown values, allowing for arbitrary HTML attributes to be passed to the component.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/src/lib/content/api-reference/extended-types/shared/radio-item-child-snippet-props.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype ChildSnippetProps = {\n\tchecked: boolean;\n\tprops: Record<string, unknown>;\n};\n```\n\n----------------------------------------\n\nTITLE: Define Cell Type in TypeScript\nDESCRIPTION: This code defines a TypeScript type named `Cell`. It has three properties: `char` (a string or null or undefined), `isActive` (a boolean indicating if the cell is active), and `hasFakeCaret` (a boolean indicating if the cell has a fake caret). This type is likely used to represent a cell within a grid-like component.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/src/lib/content/api-reference/extended-types/pin-input/pin-input-cell-cell-prop.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype Cell = {\n\t/** The character displayed in the cell. */\n\tchar: string | null | undefined;\n\t/** Whether the cell is active. */\n\tisActive: boolean;\n\t/** Whether the cell has a fake caret. */\n\thasFakeCaret: boolean;\n};\n```\n\n----------------------------------------\n\nTITLE: Embed Figma Frame with AspectRatio in Svelte\nDESCRIPTION: Embeds a Figma design using an iframe within the AspectRatio component. The AspectRatio component ensures the embedded Figma design maintains a 16:9 aspect ratio.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/figma-file.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<AspectRatio.Root ratio={16 / 9} class=\"w-full mt-4 \">\n\n  <iframe title=\"Figma page for bits-ui\" src=\"https://embed.figma.com/file/1430229712135910564/hf_embed?community_viewer=true&embed_host=shadcn&hub_file_id=1430229712135910564&kind=&viewer=1\" class=\"h-full w-full overflow-hidden rounded-lg border bg-muted\" />\n</AspectRatio.Root>\n```\n\n----------------------------------------\n\nTITLE: Defining Size Type in TypeScript\nDESCRIPTION: This code snippet defines a TypeScript type alias named `Size`. This type restricts the possible values to either the string literal 'increase-width' or 'none'.  This is used to enforce specific size options in a UI component.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/src/lib/content/api-reference/extended-types/pin-input/pin-input-root-push-password-manager-strategy.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"increase-width\" | \"none\";\n```\n\n----------------------------------------\n\nTITLE: Numerical Expression\nDESCRIPTION: This TypeScript code snippet defines a numerical expression. It's unclear what the expression represents or how it is used without further context. It could be a constant, a calculation, or part of a larger expression.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/src/lib/content/api-reference/extended-types/shared/hour-cycle-prop.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n12 | 24;\n```\n\n----------------------------------------\n\nTITLE: Define SnippetProps Type in TypeScript\nDESCRIPTION: This TypeScript code defines a type called `SnippetProps`.  It contains a boolean property `open` to indicate whether the snippet is open or closed, and a `props` property which is a record of string keys to unknown values, allowing it to hold arbitrary properties associated with the snippet.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/src/lib/content/api-reference/extended-types/accordion/content-child-snippet-props.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype SnippetProps = {\n\topen: boolean;\n\tprops: Record<string, unknown>;\n};\n```\n\n----------------------------------------\n\nTITLE: Define ChildSnippetProps Type (TypeScript)\nDESCRIPTION: Defines a TypeScript type alias named `ChildSnippetProps` that specifies the structure of props expected by a child snippet component. It includes a `props` property which is a record of string keys to unknown values, and an `open` property which is a boolean indicating whether the snippet is open.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/src/lib/content/api-reference/extended-types/dialog/dialog-content-child-snippet-props.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype ChildSnippetProps = {\n\tprops: Record<string, unknown>;\n\topen: boolean;\n};\n```\n\n----------------------------------------\n\nTITLE: Progress Component Structure Svelte\nDESCRIPTION: This snippet shows the basic structure of the Progress component using Svelte and TypeScript. It imports the Progress component from bits-ui and renders the Progress.Root component.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/progress.md#_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Progress } from \"bits-ui\";\n</script>\n\n<Progress.Root />\n```\n\n----------------------------------------\n\nTITLE: Define onStateChange Type Alias in TypeScript\nDESCRIPTION: Defines the `onStateChange` type alias, which represents a function that handles changes to the `CommandState`. This function takes a read-only `CommandState` object as input and returns void, indicating it's primarily used for side effects like updating the UI or triggering other events.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/src/lib/content/api-reference/extended-types/command/command-on-state-change-prop.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype onStateChange = (state: Readonly<CommandState>) => void;\n```\n\n----------------------------------------\n\nTITLE: Type Definition in TypeScript\nDESCRIPTION: Defines a TypeScript type for a callback function. This function accepts a 'status' parameter which can be one of three string literals: 'loading', 'loaded', or 'error'. The function returns void, indicating it performs an action without returning a value.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/src/lib/content/api-reference/extended-types/avatar/on-loading-status-change-prop.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(status: \"loading\" | \"loaded\" | \"error\") => void\n```\n\n----------------------------------------\n\nTITLE: Define DateRange Function Type TypeScript\nDESCRIPTION: Defines a function type that takes a DateRange object as input and returns void. This is likely used as a callback or handler for date range selection events within the Bits-UI library. The function doesn't return a value and likely performs side effects such as updating state or triggering other actions.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/src/lib/content/api-reference/extended-types/shared/date-on-range-change-prop.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n(date: DateRange) => void\n```\n\n----------------------------------------\n\nTITLE: Basic Accordion.Trigger Ref Binding Svelte/TS\nDESCRIPTION: This code snippet demonstrates how to bind a reference to the underlying HTML button element of the `Accordion.Trigger` component using the `ref` prop. It also shows how to focus the trigger element programmatically.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/ref.md#_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Accordion } from \"bits-ui\";\n\n\tlet triggerRef = $state<HTMLButtonElement | null>(null);\n\n\tfunction focusTrigger() {\n\t\ttriggerRef?.focus();\n\t}\n</script>\n\n<button onclick={focusTrigger}>Focus trigger</button>\n\n<Accordion.Trigger bind:ref={triggerRef}>Trigger content</Accordion.Trigger>\n```\n\n----------------------------------------\n\nTITLE: Date Value Callback Definition TypeScript\nDESCRIPTION: This TypeScript code defines a type for a callback function. The function takes a parameter 'date' which is either a DateValue type or undefined. The function does not return any value (void).\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/src/lib/content/api-reference/extended-types/shared/on-placeholder-change-prop.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(date: DateValue | undefined) => void\n```\n\n----------------------------------------\n\nTITLE: Styling with Scoped Styles in Svelte\nDESCRIPTION: This Svelte component demonstrates how to use scoped styles with Bits UI components. It utilizes the 'child' snippet to bring the Accordion.Trigger element into the component's scope, allowing for scoped styling using Svelte's `<style>` tag.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/styling.md#_snippet_5\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Accordion } from \"bits-ui\";\n</script>\n\n<Accordion.Trigger>\n\t{#snippet child({ props })}\n\t\t<button {...props} class=\"my-accordion-trigger\"> Click me! </button>\n\t{/snippet}\n</Accordion.Trigger>\n\n<style>\n\t.my-accordion-trigger {\n\t\theight: 3rem;\n\t\twidth: 100%;\n\t\tbackground-color: #3182ce;\n\t\tcolor: #fff;\n\t}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Using the Custom Progress Component Svelte\nDESCRIPTION: This snippet shows how to use the custom progress component created in the previous example. It imports the MyProgress component and defines a reactive value using $state.  It then renders the MyProgress component, passing label and value props.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/progress.md#_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport MyProgress from \"$lib/components/MyProgress.svelte\";\n\n\tlet value = $state(50);\n</script>\n\n<MyProgress label=\"Loading images...\" valueLabel=\"{value}%\" {value} />\n```\n\n----------------------------------------\n\nTITLE: Advanced Animation Svelte\nDESCRIPTION: Shows how to implement advanced animations for the NavigationMenu.Viewport and NavigationMenu.Content using CSS variables and data attributes. This allows for smooth transitions between menu items.\nSOURCE: https://github.com/huntabyte/bits-ui/blob/main/docs/content/components/navigation-menu.md#_snippet_5\n\nLANGUAGE: svelte\nCODE:\n```\n<NavigationMenu.Root>\n\t<NavigationMenu.List>\n\t\t<NavigationMenu.Item>\n\t\t\t<NavigationMenu.Trigger>Item one</NavigationMenu.Trigger>\n\t\t\t<NavigationMenu.Content class=\"NavigationMenuContent\">\n\t\t\t\tItem one content\n\t\t\t</NavigationMenu.Content>\n\t\t</NavigationMenu.Item>\n\t\t<NavigationMenu.Item>\n\t\t\t<NavigationMenu.Trigger>Item two</NavigationMenu.Trigger>\n\t\t\t<NavigationMenu.Content class=\"NavigationMenuContent\">\n\t\t\t\tItem two content\n\t\t\t</NavigationMenu.Content>\n\t\t</NavigationMenu.Item>\n\t</NavigationMenu.List>\n\n\t<NavigationMenu.Viewport class=\"NavigationMenuViewport\" />\n</NavigationMenu.Root>\n```"
  }
]