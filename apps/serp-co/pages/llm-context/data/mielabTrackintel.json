[
  {
    "owner": "mie-lab",
    "repo": "trackintel",
    "content": "TITLE: Reading and Processing Positionfixes in Python\nDESCRIPTION: Demonstrates how to read positionfixes from a CSV file into a Positionfixes trackintel class and generate staypoints. This showcases the basic usage of trackintel classes and methods.\nSOURCE: https://github.com/mie-lab/trackintel/blob/master/docs/modules/model.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndf = trackintel.read_positionfixes_csv('data.csv')\ndf.generate_staypoints()\n```\n\n----------------------------------------\n\nTITLE: Generating Staypoints and Triplegs from Positionfixes in Python\nDESCRIPTION: This code shows how to generate staypoints and triplegs from positionfixes data using trackintel's data model generation functions.\nSOURCE: https://github.com/mie-lab/trackintel/blob/master/README.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# generate staypoints and triplegs\npfs, sp = pfs.generate_staypoints(method='sliding')\npfs, tpls = pfs.generate_triplegs(sp, method='between_staypoints')\n```\n\n----------------------------------------\n\nTITLE: Generating Staypoints from Positionfixes in Python\nDESCRIPTION: This function generates staypoints from positionfixes. It is part of the trackintel preprocessing module.\nSOURCE: https://github.com/mie-lab/trackintel/blob/master/docs/modules/preprocessing.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. autofunction:: trackintel.preprocessing.generate_staypoints\n```\n\n----------------------------------------\n\nTITLE: Generating Trips from Triplegs in Python\nDESCRIPTION: This function generates trips from triplegs and staypoints, summarizing movement between relevant activity staypoints. It is part of the trackintel preprocessing module.\nSOURCE: https://github.com/mie-lab/trackintel/blob/master/docs/modules/preprocessing.rst#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n.. autofunction:: trackintel.preprocessing.triplegs.generate_trips\n```\n\n----------------------------------------\n\nTITLE: Generating Locations from Staypoints in Python\nDESCRIPTION: This function generates locations by clustering staypoints that a user frequently visits. It is part of the trackintel preprocessing module.\nSOURCE: https://github.com/mie-lab/trackintel/blob/master/docs/modules/preprocessing.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n.. autofunction:: trackintel.preprocessing.generate_locations\n```\n\n----------------------------------------\n\nTITLE: Importing PositionFixes from CSV in Python using TrackinTel\nDESCRIPTION: This function reads positionfixes from a CSV file and returns them as a GeoDataFrame. It supports additional arguments that are passed to the pandas read_csv function.\nSOURCE: https://github.com/mie-lab/trackintel/blob/master/docs/modules/io.rst#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\ntrackintel.read_positionfixes_csv('data.csv')\n```\n\n----------------------------------------\n\nTITLE: Reading Geolife Dataset in Python using TrackinTel\nDESCRIPTION: This function parses the Geolife dataset and imports it into the TrackinTel framework. It supports loading multiple users and includes available mode labels.\nSOURCE: https://github.com/mie-lab/trackintel/blob/master/docs/modules/io.rst#2025-04-22_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ntrackintel.io.read_geolife\n```\n\n----------------------------------------\n\nTITLE: Analyzing Trackintel Data: Mode Prediction and Tracking Quality\nDESCRIPTION: This code shows how to perform analysis tasks such as predicting transport mode labels and calculating temporal tracking coverage using trackintel functions.\nSOURCE: https://github.com/mie-lab/trackintel/blob/master/README.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# e.g., predict travel mode labels based on travel speed\ntpls = tpls.predict_transport_mode()\n# or calculate the temporal tracking coverage of users\ntracking_coverage = ti.analysis.temporal_tracking_quality(tpls, granularity='all')\n```\n\n----------------------------------------\n\nTITLE: Generating and Plotting Locations\nDESCRIPTION: Code to extract locations from staypoints using DBSCAN clustering and visualize all data layers including the street network.\nSOURCE: https://github.com/mie-lab/trackintel/blob/master/docs/tutorial.rst#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n_, locs = sp.generate_locations(method='dbscan', epsilon=100, num_samples=1)\nti.plot(filename=\"locations.png\", locations=locs, radius_locs=125, positionfixes=pfs,\n        staypoints=sp, radius_sp=100, plot_osm=True)\n```\n\n----------------------------------------\n\nTITLE: Generating and Plotting Staypoints\nDESCRIPTION: Code to detect staypoints from position fixes and visualize them along with the original data and OSM street network.\nSOURCE: https://github.com/mie-lab/trackintel/blob/master/docs/tutorial.rst#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n_, sp = pfs.generate_staypoints(method='sliding')\nti.plot(filename=\"staypoints.png\", radius_sp=10, staypoints=sp, positionfixes=pfs, plot_osm=True)\n```\n\n----------------------------------------\n\nTITLE: Generating Tours from Trips in Python\nDESCRIPTION: This function generates tours from trips, where a tour is a sequence of trips starting and ending at the same location. It is part of the trackintel preprocessing module.\nSOURCE: https://github.com/mie-lab/trackintel/blob/master/docs/modules/preprocessing.rst#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n.. autofunction:: trackintel.preprocessing.generate_tours\n```\n\n----------------------------------------\n\nTITLE: Adding Mode Labels to Triplegs from Geolife Dataset in Python\nDESCRIPTION: This function adds mode labels to triplegs derived from the Geolife dataset. It matches the labels based on temporal overlap between triplegs and labeled data.\nSOURCE: https://github.com/mie-lab/trackintel/blob/master/docs/modules/io.rst#2025-04-22_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\ntrackintel.io.geolife_add_modes_to_triplegs\n```\n\n----------------------------------------\n\nTITLE: Visualizing Trackintel Data Model Components in Python\nDESCRIPTION: This snippet demonstrates how to visualize the generated positionfixes, staypoints, and triplegs using trackintel's plot function.\nSOURCE: https://github.com/mie-lab/trackintel/blob/master/README.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# plot the generated tripleg result\nti.plot(positionfixes=pfs, staypoints=sp, triplegs=tpls, radius_sp=10)\n```\n\n----------------------------------------\n\nTITLE: Reading GPX Tracks in Python using TrackinTel\nDESCRIPTION: This function loads multiple GPX tracks of the same user into the TrackinTel framework. It supports parsing GPX files and converting them into the appropriate data structures.\nSOURCE: https://github.com/mie-lab/trackintel/blob/master/docs/modules/io.rst#2025-04-22_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\ntrackintel.io.read_gpx\n```\n\n----------------------------------------\n\nTITLE: Merging Staypoints in Python\nDESCRIPTION: This function merges staypoints that are close in time and at the same location, addressing tracking artifacts. It is part of the trackintel preprocessing module.\nSOURCE: https://github.com/mie-lab/trackintel/blob/master/docs/modules/preprocessing.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n.. autofunction:: trackintel.preprocessing.merge_staypoints\n```\n\n----------------------------------------\n\nTITLE: Creating Positionfixes Table in SQL\nDESCRIPTION: SQL schema for creating the positionfixes table, which stores raw GPS data including user ID, timestamp, and geographic coordinates. It also includes references to related triplegs and staypoints.\nSOURCE: https://github.com/mie-lab/trackintel/blob/master/docs/modules/model.rst#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE positionfixes (\n    -- Common to all tables.\n    id bigint NOT NULL,\n    user_id bigint NOT NULL,\n\n    -- References to foreign tables.\n    tripleg_id bigint,\n    staypoint_id bigint,\n\n    -- Temporal attributes.\n    tracked_at timestamp with time zone NOT NULL,\n\n    -- Spatial attributes.\n    elevation double precision,\n    geom geometry(Point, 4326),\n\n    -- Constraints.\n    CONSTRAINT positionfixes_pkey PRIMARY KEY (id)\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Staypoints Table in SQL\nDESCRIPTION: SQL schema for creating the staypoints table, which represents locations where a user stayed for a certain amount of time. It includes temporal and spatial attributes, as well as purpose and activity information.\nSOURCE: https://github.com/mie-lab/trackintel/blob/master/docs/modules/model.rst#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE staypoints (\n    -- Common to all tables.\n    id bigint NOT NULL,\n    user_id bigint NOT NULL,\n\n    -- References to foreign tables.\n    trip_id bigint,\n    location_id bigint,\n\n    -- Temporal attributes.\n    started_at timestamp with time zone NOT NULL,\n    finished_at timestamp with time zone NOT NULL,\n    \n    -- Attributes related to the activity performed at the staypoint.\n    purpose_detected character varying,\n    purpose_validated character varying,\n    validated boolean,\n    validated_at timestamp with time zone,\n    activity boolean,\n\n    -- Spatial attributes.\n    elevation double precision,\n    geom geometry(Point, 4326),\n\n    -- Constraints.\n    CONSTRAINT staypoints_pkey PRIMARY KEY (id)\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Triplegs Table in SQL\nDESCRIPTION: SQL schema for creating the triplegs table, which represents journeys taken with a single mode of transport. It includes temporal and spatial attributes, as well as transport mode information.\nSOURCE: https://github.com/mie-lab/trackintel/blob/master/docs/modules/model.rst#2025-04-22_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE triplegs (\n    -- Common to all tables.\n    id bigint NOT NULL,\n    user_id bigint NOT NULL,\n\n    -- References to foreign tables.\n    trip_id bigint,\n\n    -- Temporal attributes.\n    started_at timestamp with time zone NOT NULL,\n    finished_at timestamp with time zone NOT NULL,\n\n    -- Attributes related to the transport mode used for this tripleg.\n    mode_detected character varying,\n    mode_validated character varying,\n    validated boolean,\n    validated_at timestamp with time zone,\n\n    -- Spatial attributes.\n    -- The raw geometry is unprocessed, directly made up from the positionfixes. The column\n    -- 'geom' contains processed (e.g., smoothened, map matched, etc.) data.\n    geom_raw geometry(Linestring, 4326),\n    geom geometry(Linestring, 4326),\n\n    -- Constraints.\n    CONSTRAINT triplegs_pkey PRIMARY KEY (id)\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Locations Table in SQL\nDESCRIPTION: SQL schema for creating the locations table, which represents meaningful locations derived from clustering staypoints. It includes spatial attributes such as elevation, extent, and center.\nSOURCE: https://github.com/mie-lab/trackintel/blob/master/docs/modules/model.rst#2025-04-22_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE locations (\n    -- Common to all tables.\n    id bigint NOT NULL,\n    user_id bigint,\n    \n    -- Spatial attributes.\n    elevation double precision,\n    extent geometry(Polygon, 4326),\n    center geometry(Point, 4326),\n\n    -- Constraints.\n    CONSTRAINT locations_pkey PRIMARY KEY (id)\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Trips Table in SQL\nDESCRIPTION: SQL schema for creating the trips table, which represents collections of triplegs between consecutive activity staypoints. It includes temporal attributes and references to origin and destination staypoints.\nSOURCE: https://github.com/mie-lab/trackintel/blob/master/docs/modules/model.rst#2025-04-22_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE trips (\n    -- Common to all tables.\n    id bigint NOT NULL,\n    user_id integer NOT NULL,\n\n    -- References to foreign tables.\n    origin_staypoint_id bigint,\n    destination_staypoint_id bigint,\n\n    -- Temporal attributes.\n    started_at timestamp with time zone NOT NULL,\n    finished_at timestamp with time zone NOT NULL,\n\n    -- Constraints.\n    CONSTRAINT trips_pkey PRIMARY KEY (id)\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Tours Table in SQL\nDESCRIPTION: SQL schema for creating the tours table, which represents sequences of trips that start and end at the same location. It includes temporal attributes and a flag to indicate if the tour is a journey (starting and ending at home).\nSOURCE: https://github.com/mie-lab/trackintel/blob/master/docs/modules/model.rst#2025-04-22_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE tours (\n    -- Common to all tables.\n    id bigint NOT NULL,\n    user_id integer NOT NULL,\n\n    -- References to foreign tables.\n    location_id bigint,\n\n    -- Temporal attributes.\n    started_at timestamp with time zone NOT NULL,\n    finished_at timestamp with time zone NOT NULL,\n    \n    -- Specific attributes.\n    journey bool,\n\n    -- Constraints.\n    CONSTRAINT tours_pkey PRIMARY KEY (id)\n);\n```\n\n----------------------------------------\n\nTITLE: Saving Trackintel Results to CSV Files in Python\nDESCRIPTION: This snippet demonstrates how to save the generated staypoints and triplegs data to CSV files using pandas' to_csv method.\nSOURCE: https://github.com/mie-lab/trackintel/blob/master/README.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# save the generated results as csv file \nsp.to_csv(r'.\\examples\\data\\sp.csv')\ntpls.to_csv(r'.\\examples\\data\\tpls.csv')\n```\n\n----------------------------------------\n\nTITLE: Importing and Storing Trajectory Data\nDESCRIPTION: Code to import trajectory data from CSV and store it in a PostGIS database using Trackintel's functions.\nSOURCE: https://github.com/mie-lab/trackintel/blob/master/docs/tutorial.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport trackintel as ti\n\ndatabase_name = 'trackintel-tests'\nconn_string = 'postgresql://test:1234@localhost:5432/' + database_name\n\npfs = ti.read_positionfixes_csv('examples/data/posmo_trajectory_2.csv', sep=';')\npfs.to_postgis('positionfixes', conn_string, if_exists='append')\n```\n\n----------------------------------------\n\nTITLE: Plotting Position Fixes\nDESCRIPTION: Code to visualize position fixes data using Trackintel's plotting function.\nSOURCE: https://github.com/mie-lab/trackintel/blob/master/docs/tutorial.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nti.plot(positionfixes=pfs, filename=\"positionfixes.png\")\n```\n\n----------------------------------------\n\nTITLE: Running Trackintel Example Scripts in Bash\nDESCRIPTION: Commands to execute various example scripts including trajectory preprocessing, PostGIS import/export, and database setup. The scripts generate output plots in the examples/out directory and can be configured via config.json for database connections.\nSOURCE: https://github.com/mie-lab/trackintel/blob/master/examples/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython preprocess_trajectories.py\npython import_export_postgis.py\npython setup_example_database.py\n```\n\n----------------------------------------\n\nTITLE: Grouping Trips by Tour in Python\nDESCRIPTION: This helper function groups trips by tour, handling the n:n relationship between trips and tours. It is part of the trackintel preprocessing module.\nSOURCE: https://github.com/mie-lab/trackintel/blob/master/docs/modules/preprocessing.rst#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n.. autofunction:: trackintel.preprocessing.trips.get_trips_grouped\n```\n\n----------------------------------------\n\nTITLE: Calculating Temporal Overlap in Python\nDESCRIPTION: This utility function calculates temporal overlap. It is part of the trackintel preprocessing module.\nSOURCE: https://github.com/mie-lab/trackintel/blob/master/docs/modules/preprocessing.rst#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n.. autofunction:: trackintel.preprocessing.calc_temp_overlap\n```\n\n----------------------------------------\n\nTITLE: Applying Parallel Processing in Python\nDESCRIPTION: This utility function applies parallel processing. It is part of the trackintel preprocessing module.\nSOURCE: https://github.com/mie-lab/trackintel/blob/master/docs/modules/preprocessing.rst#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n.. autofunction:: trackintel.preprocessing.applyParallel\n```\n\n----------------------------------------\n\nTITLE: Importing Positionfixes Data in Python using Trackintel\nDESCRIPTION: This snippet demonstrates how to import positionfixes data into trackintel using either a CSV file or a predefined dataset reader for Geolife data.\nSOURCE: https://github.com/mie-lab/trackintel/blob/master/README.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport geopandas as gpd\nimport trackintel as ti\n\n# read pfs from csv file\npfs = ti.io.read_positionfixes_csv(\".\\examples\\data\\pfs.csv\", sep=\";\", index_col=\"id\")\n# or with predefined dataset readers (here geolife) \npfs, _ = ti.io.read_geolife(\".\\tests\\data\\geolife_long\")\n```\n\n----------------------------------------\n\nTITLE: Importing and Printing Trackintel Version in Python\nDESCRIPTION: This code shows how to import the trackintel library and print its version information.\nSOURCE: https://github.com/mie-lab/trackintel/blob/master/README.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport trackintel as ti\n\nti.print_version()\n```\n\n----------------------------------------\n\nTITLE: Installing Trackintel Package\nDESCRIPTION: Command to install the Trackintel package using pip package manager.\nSOURCE: https://github.com/mie-lab/trackintel/blob/master/docs/tutorial.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npip install trackintel\n```\n\n----------------------------------------\n\nTITLE: Testing Trackintel Installation\nDESCRIPTION: Code to verify the Trackintel installation by importing the package and printing its version.\nSOURCE: https://github.com/mie-lab/trackintel/blob/master/docs/tutorial.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport trackintel as ti\nti.print_version()\n```\n\n----------------------------------------\n\nTITLE: Installing Trackintel Package Locally\nDESCRIPTION: Commands for installing trackintel locally for development and running quick tests.\nSOURCE: https://github.com/mie-lab/trackintel/blob/master/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install .\n```\n\nLANGUAGE: python\nCODE:\n```\ntrackintel.print_version()\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Pytest\nDESCRIPTION: Commands for running tests using pytest, including alternative method for pipenv users.\nSOURCE: https://github.com/mie-lab/trackintel/blob/master/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npytest\npip install pytest\npython -m pytest\n```\n\n----------------------------------------\n\nTITLE: Generating Sphinx Documentation\nDESCRIPTION: Commands for installing Sphinx and generating documentation in the docs.gen directory.\nSOURCE: https://github.com/mie-lab/trackintel/blob/master/CONTRIBUTING.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install -U sphinx\nconda install sphinx\nsphinx-build -b html docs docs.gen\n```\n\n----------------------------------------\n\nTITLE: Code Formatting with Black\nDESCRIPTION: Command for formatting code using Black with a 120 character line length limit.\nSOURCE: https://github.com/mie-lab/trackintel/blob/master/CONTRIBUTING.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython -m black . -l 120\n```\n\n----------------------------------------\n\nTITLE: Listing Core and Development Dependencies for trackintel Project\nDESCRIPTION: This snippet lists the required Python packages for the trackintel project. It includes core dependencies for data processing and analysis, as well as additional packages for development purposes. The core dependencies include numpy, matplotlib, geopandas, scikit-learn, and others for geospatial and data analysis. Development dependencies include tools for code formatting, testing, and documentation generation.\nSOURCE: https://github.com/mie-lab/trackintel/blob/master/requirements-dev.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnumpy\nmatplotlib\ngeopandas>=0.12.0\nscikit-learn\ngeoalchemy2 \nosmnx \npsycopg2\ntqdm\nsimilaritymeasures\n# additional dependencies for development\nblack   # linting\njupyter # notebooks\npytest  # testing\nsphinx  # documentation\nsphinx_rtd_theme\n```\n\n----------------------------------------\n\nTITLE: RestructuredText Documentation Directives\nDESCRIPTION: RestructuredText markup for documenting trackintel's visualization functions and displaying example images.\nSOURCE: https://github.com/mie-lab/trackintel/blob/master/docs/modules/visualization.rst#2025-04-22_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autofunction:: trackintel.plot\n\n.. image:: /_static/example_locations.png\n   :scale: 25 %\n   :align: center\n```\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autofunction:: trackintel.plot_modal_split\n\n.. image:: /_static/example_modal_split_geolife.png\n   :scale: 18 %\n   :align: center\n```\n\n----------------------------------------\n\nTITLE: Installing PyQt5 and PyQtWebEngine Dependencies for Python\nDESCRIPTION: This snippet shows how to install specific versions of PyQt5 and PyQtWebEngine to resolve dependency conflicts in the Trackintel environment.\nSOURCE: https://github.com/mie-lab/trackintel/blob/master/benchmarks/ASV-BENCHMARKING.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install --upgrade --user pyqtwebengine==5.12\npip install --upgrade --user pyqt5==5.12\n```\n\n----------------------------------------\n\nTITLE: Retrieving Recent Merge Commit Hashes in Git\nDESCRIPTION: This command retrieves the short hashes of the last 3 merge commits in the Git repository and saves them to a file named 'commits.txt'.\nSOURCE: https://github.com/mie-lab/trackintel/blob/master/benchmarks/ASV-BENCHMARKING.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit log | grep -B 1 'Merge' | grep 'commit' | sed 's/commit //g' | cut -c1-7 | head -n 3 > commits.txt\n```\n\n----------------------------------------\n\nTITLE: Running ASV Benchmarks for Specific Commits\nDESCRIPTION: This command runs ASV benchmarks for the commits specified in the 'commits.txt' file.\nSOURCE: https://github.com/mie-lab/trackintel/blob/master/benchmarks/ASV-BENCHMARKING.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nasv run HASHFILE:commits.txt\n```\n\n----------------------------------------\n\nTITLE: Running ASV Benchmarks with Quick Mode\nDESCRIPTION: This command runs ASV benchmarks in quick mode (-q flag) for the commits specified in the 'commits.txt' file, useful for initial testing.\nSOURCE: https://github.com/mie-lab/trackintel/blob/master/benchmarks/ASV-BENCHMARKING.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nasv run -q HASHFILE:commits.txt\n```\n\n----------------------------------------\n\nTITLE: Running ASV Benchmarks Skipping Existing Results\nDESCRIPTION: This command runs ASV benchmarks for the commits in 'commits.txt', skipping any existing benchmark results.\nSOURCE: https://github.com/mie-lab/trackintel/blob/master/benchmarks/ASV-BENCHMARKING.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nasv run --skip-existing HASHFILE:commits.txt\n```\n\n----------------------------------------\n\nTITLE: Publishing ASV Benchmark Results\nDESCRIPTION: This command generates HTML files for the ASV benchmark results.\nSOURCE: https://github.com/mie-lab/trackintel/blob/master/benchmarks/ASV-BENCHMARKING.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nasv publish\n```\n\n----------------------------------------\n\nTITLE: Previewing ASV Benchmark Results Locally\nDESCRIPTION: This command starts a local server to preview the generated ASV benchmark result HTML files.\nSOURCE: https://github.com/mie-lab/trackintel/blob/master/benchmarks/ASV-BENCHMARKING.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nasv preview\n```\n\n----------------------------------------\n\nTITLE: Pushing ASV Benchmark Results to GitHub Pages\nDESCRIPTION: This series of commands prepares and pushes the ASV benchmark results to the gh-pages branch for hosting on GitHub Pages.\nSOURCE: https://github.com/mie-lab/trackintel/blob/master/benchmarks/ASV-BENCHMARKING.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nasv gh-pages --no-push --rewrite\ngit stash\ngit checkout gh-pages\ngit log\ngit push -f origin gh-pages\n```\n\n----------------------------------------\n\nTITLE: Returning to Original Branch After Publishing\nDESCRIPTION: These commands switch back to the master branch and restore any stashed changes after publishing benchmark results.\nSOURCE: https://github.com/mie-lab/trackintel/blob/master/benchmarks/ASV-BENCHMARKING.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout master\ngit stash pop\n```\n\n----------------------------------------\n\nTITLE: Time-based Transportation Mode Log in CSV Format\nDESCRIPTION: Tabular data showing transportation tracking records with columns for start time, end time, and mode of transport. Each row represents a single journey segment with precise timestamps.\nSOURCE: https://github.com/mie-lab/trackintel/blob/master/tests/data/geolife_modes/020/labels.txt#2025-04-22_snippet_0\n\nLANGUAGE: csv\nCODE:\n```\nStart Time\tEnd Time\tTransportation Mode\n2011/08/27 06:13:01\t2011/08/27 08:01:37\twalk\n2011/08/27 09:34:43\t2011/08/27 14:50:30\twalk\n2011/08/27 14:50:31\t2011/08/27 15:01:58\tbus\n```\n\n----------------------------------------\n\nTITLE: Transportation Mode Time Series Data\nDESCRIPTION: Tabular data showing transportation mode logs with start datetime, end datetime, and mode of transport. Format is tab-separated with timestamps in YYYY/MM/DD HH:MM:SS format.\nSOURCE: https://github.com/mie-lab/trackintel/blob/master/tests/data/geolife_modes/010/labels.txt#2025-04-22_snippet_0\n\nLANGUAGE: csv\nCODE:\n```\n2008/09/28 12:47:43\t2008/09/28 12:49:22\twalk\n2008/09/28 13:29:51\t2008/09/28 15:59:59\ttrain\n2008/09/28 16:00:00\t2008/09/29 07:16:06\ttrain\n```\n\n----------------------------------------\n\nTITLE: Transportation Log Format\nDESCRIPTION: Time series data showing transportation mode entries with start timestamp, end timestamp, and transport mode in tab-separated format. Records show a sequence of trips using different modes.\nSOURCE: https://github.com/mie-lab/trackintel/blob/master/tests/data/geolife_long_10_MB/010/labels.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n2008/12/07 10:59:29\t2008/12/07 11:29:48\ttrain\n2008/12/07 11:43:12\t2008/12/07 12:23:26\tbus\n2008/12/07 12:23:34\t2008/12/07 12:25:07\twalk\n2008/12/07 12:25:34\t2008/12/07 12:37:28\ttaxi\n```\n\n----------------------------------------\n\nTITLE: Generating Triplegs from Positionfixes in Python\nDESCRIPTION: This function generates triplegs from positionfixes. It is part of the trackintel preprocessing module.\nSOURCE: https://github.com/mie-lab/trackintel/blob/master/docs/modules/preprocessing.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n.. autofunction:: trackintel.preprocessing.generate_triplegs\n```"
  }
]