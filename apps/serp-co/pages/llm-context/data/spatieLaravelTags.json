[
  {
    "owner": "spatie",
    "repo": "laravel-tags",
    "content": "TITLE: Tag Manipulation Examples - PHP\nDESCRIPTION: This snippet showcases various tag manipulation operations such as creating models with tags, attaching/detaching tags, retrieving tags, syncing tags, translating tags, and retrieving models by tags. It uses the `NewsItem` model and the `Tag` model from the `spatie/laravel-tags` package.\nSOURCE: https://github.com/spatie/laravel-tags/blob/main/README.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// create a model with some tags\n$newsItem = NewsItem::create([\n   'name' => 'The Article Title',\n   'tags' => ['first tag', 'second tag'], //tags will be created if they don't exist\n]);\n\n// attaching tags\n$newsItem->attachTag('third tag');\n$newsItem->attachTag('third tag','some_type');\n$newsItem->attachTags(['fourth tag', 'fifth tag']);\n$newsItem->attachTags(['fourth_tag','fifth_tag'],'some_type');\n\n// detaching tags\n$newsItem->detachTag('third tag');\n$newsItem->detachTag('third tag','some_type');\n$newsItem->detachTags(['fourth tag', 'fifth tag']);\n$newsItem->detachTags(['fourth tag', 'fifth tag'],'some_type');\n\n// get all tags of a model\n$newsItem->tags;\n\n// syncing tags\n$newsItem->syncTags(['first tag', 'second tag']); // all other tags on this model will be detached\n\n// syncing tags with a type\n$newsItem->syncTagsWithType(['category 1', 'category 2'], 'categories'); \n$newsItem->syncTagsWithType(['topic 1', 'topic 2'], 'topics'); \n\n// retrieving tags with a type\n$newsItem->tagsWithType('categories'); \n$newsItem->tagsWithType('topics'); \n\n// retrieving models that have any of the given tags\nNewsItem::withAnyTags(['first tag', 'second tag'])->get();\n\n// retrieve models that have all of the given tags\nNewsItem::withAllTags(['first tag', 'second tag'])->get();\n\n// retrieve models that don't have any of the given tags\nNewsItem::withoutTags(['first tag', 'second tag'])->get();\n\n// translating a tag\n$tag = Tag::findOrCreate('my tag');\n$tag->setTranslation('name', 'fr', 'mon tag');\n$tag->setTranslation('name', 'nl', 'mijn tag');\n$tag->save();\n\n// getting translations\n$tag->translate('name'); //returns my name\n$tag->translate('name', 'fr'); //returns mon tag (optional locale param)\n\n// convenient translations through taggable models\n$newsItem->tagsTranslated();// returns tags with slug_translated and name_translated properties\n$newsItem->tagsTranslated('fr');// returns tags with slug_translated and name_translated properties set for specified locale\n\n// using tag types\n$tag = Tag::findOrCreate('tag 1', 'my type');\n\n// tags have slugs\n$tag = Tag::findOrCreate('yet another tag');\n$tag->slug; //returns \"yet-another-tag\"\n\n// tags are sortable\n$tag = Tag::findOrCreate('my tag');\n$tag->order_column; //returns 1\n$tag2 = Tag::findOrCreate('another tag');\n$tag2->order_column; //returns 2\n\n// manipulating the order of tags\n$tag->swapOrder($anotherTag);\n\n// checking if a model has a tag\n$newsItem->hasTag('first tag');\n$newsItem->hasTag('first tag', 'some_type');\n\n// Retrieve models that have tags of a \nModel::withAnyTagsOfType('type');\nModel::withAnyTagsOfType(['first type', 'second type']);\n```\n\n----------------------------------------\n\nTITLE: Tagging Model Operations\nDESCRIPTION: Demonstrates various operations related to tagging Eloquent models using the `spatie/laravel-tags` package. Includes creating models with tags, attaching new tags, detaching existing tags, syncing tags, and retrieving models based on tag criteria.  The `NewsItem` model is assumed to have the `HasTags` trait.\nSOURCE: https://github.com/spatie/laravel-tags/blob/main/docs/introduction.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// create a model with some tags\n$newsItem = NewsItem::create([\n   'name' => 'testModel',\n   'tags' => ['tag', 'tag2'], //tags will be created if they don't exist\n]);\n\n// attaching tags\n$newsItem->attachTag('tag3');\n$newsItem->attachTags(['tag4', 'tag5']);\n\n// detaching tags\n$newsItem->detachTag('tag3');\n$newsItem->detachTags(['tag4', 'tag5']);\n\n// syncing tags\n$newsItem->syncTags(['tag1', 'tag2']); // all other tags on this model will be detached\n\n// retrieving models that have any of the given tags\nNewsItem::withAnyTags(['tag1', 'tag2']);\n\n// retrieve models that have all of the given tags\nNewsItem::withAllTags(['tag1', 'tag2']);\n```\n\n----------------------------------------\n\nTITLE: Applying HasTags Trait to Model - PHP\nDESCRIPTION: This snippet demonstrates how to apply the `HasTags` trait to an Eloquent model, enabling it to be taggable. It imports the necessary classes and uses the `use` keyword to include the trait in the model definition.\nSOURCE: https://github.com/spatie/laravel-tags/blob/main/README.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// apply HasTags trait to a model\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Spatie\\Tags\\HasTags;\n\nclass NewsItem extends Model\n{\n    use HasTags;\n    \n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Querying models with any tags (no type) - PHP\nDESCRIPTION: This snippet demonstrates how to retrieve models that have at least one of the specified tags, without considering tag types. It uses the `withAnyTags` scope and retrieves models where the tags are not associated with any specific type. It returns a collection of `YourModel` instances.\nSOURCE: https://github.com/spatie/laravel-tags/blob/main/docs/basic-usage/retrieving-tagged-models.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n//returns models that have one or more of the given tags that are not saved with a type\nYourModel::withAnyTags(['tag 1', 'tag 2'])->get();\n```\n\n----------------------------------------\n\nTITLE: Querying models with all tags (no type) - PHP\nDESCRIPTION: This snippet demonstrates how to retrieve models that have all of the specified tags, without considering tag types. It uses the `withAllTags` scope and retrieves models where the tags are not associated with any specific type. It returns a collection of `YourModel` instances.\nSOURCE: https://github.com/spatie/laravel-tags/blob/main/docs/basic-usage/retrieving-tagged-models.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n//returns models that have all given tags that are not saved with a type\nYourModel::withAllTags(['tag 1', 'tag 2'])->get();\n```\n\n----------------------------------------\n\nTITLE: Querying models with all tags (with type) - PHP\nDESCRIPTION: This snippet demonstrates how to retrieve models that have all of the specified tags, with a specific tag type. It uses the `withAllTags` scope and specifies the `myType` argument to filter models that are tagged with the specified tags of that type. It returns a collection of `YourModel` instances.\nSOURCE: https://github.com/spatie/laravel-tags/blob/main/docs/basic-usage/retrieving-tagged-models.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n//returns models that have all given tags that are typed `myType`\nYourModel::withAllTags(['tag 1', 'tag 2'], 'myType')->get();\n```\n\n----------------------------------------\n\nTITLE: Attaching/Detaching Tag Instances - PHP\nDESCRIPTION: Demonstrates attaching and detaching tag instances (created via Tag::findOrCreate or Tag::create) to a model. This uses the `attachTag` and `detachTag` methods, which accept `Tag` instances directly.\nSOURCE: https://github.com/spatie/laravel-tags/blob/main/docs/advanced-usage/using-types.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n$newsItem->attachTag($tagWithType);\n$newsItem->detachTag($tagWithType);\n// ...\n```\n\n----------------------------------------\n\nTITLE: Syncing Tags with Type - PHP\nDESCRIPTION: Synchronizes tags for a specific type using the `syncTagsWithType` method. This method allows associating multiple tags with a model under a given type. The first argument is an array of tag names, and the second is the tag type.\nSOURCE: https://github.com/spatie/laravel-tags/blob/main/docs/advanced-usage/using-types.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n$newsItem->syncTagsWithType(['tagA', 'tagB'], 'firstType');\n$newsItem->syncTagsWithType(['tagC', 'tagD'], 'secondType');\n```\n\n----------------------------------------\n\nTITLE: Tag Translation Example\nDESCRIPTION: Illustrates how to translate tags using the `spatie/laravel-tags` package.  This snippet demonstrates finding or creating a tag and then setting translations for it in French ('fr') and Dutch ('nl'). The `Tag` model is part of the `spatie/laravel-tags` package.\nSOURCE: https://github.com/spatie/laravel-tags/blob/main/docs/introduction.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// translating a tag\n$tag = Tag::findOrCreate('my tag');\n$tag->setTranslation('fr', 'mon tag');\n$tag->setTranslation('nl', 'mijn tag');\n$tag->save();\n```\n\n----------------------------------------\n\nTITLE: Adding Tag Translations in Laravel\nDESCRIPTION: This snippet demonstrates how to create a tag, add translations for it in different locales (French and Dutch), save the tag, and retrieve translations. It uses the `Tag` model and the `setTranslation` and `getTranslation` methods. Make sure `Spatie\\Tags\\Tag` is imported.\nSOURCE: https://github.com/spatie/laravel-tags/blob/main/docs/advanced-usage/adding-translations.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$tag = Tag::findOrCreate('my tag'); //store in the current locale of your app\n\n//let's add some translation for other languages\n$tag->setTranslation('name', 'fr', 'mon tag');\n$tag->setTranslation('name', 'nl', 'mijn tag');\n\n//don't forget to save the model\n$tag->save();\n\n$tag->getTranslation('name', 'fr'); // returns 'mon tag'\n\n$tag->name // returns the name of the tag in current locale of your app.\n```\n\n----------------------------------------\n\nTITLE: Querying with Tag Instances - PHP\nDESCRIPTION: Illustrates how to use tag instances with the `withAnyTags` and `withAllTags` method scopes. This is useful for retrieving models that have any or all of the specified tag instances associated with them.\nSOURCE: https://github.com/spatie/laravel-tags/blob/main/docs/advanced-usage/using-types.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n$tag = Tag::create(['name' => 'gossip']);\n$tag2 = Tag::create(['name' => 'headline']);\n\nNewsItem::withAnyTags([$tag, $tag2])->get();\n```\n\n----------------------------------------\n\nTITLE: Querying Tags by Translation in Laravel\nDESCRIPTION: This snippet shows how to query the `tags` table to find a tag that has a specific translation using Laravel's query builder and JSON column support.  It assumes the `name` column in the `tags` table is a JSON column and translation is stored under a locale key. Requires the `Spatie\\Tags\\Tag` import.\nSOURCE: https://github.com/spatie/laravel-tags/blob/main/docs/advanced-usage/adding-translations.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n \\Spatie\\Tags\\Tag::query()\n   ->where('name->fr', 'mon tag')\n   ->first();\n```\n\n----------------------------------------\n\nTITLE: Querying models with any tags (with type) - PHP\nDESCRIPTION: This snippet demonstrates how to retrieve models that have at least one of the specified tags, with a specific tag type. It uses the `withAnyTags` scope and specifies the `myType` argument to filter models that are tagged with the specified tags of that type. It returns a collection of `YourModel` instances.\nSOURCE: https://github.com/spatie/laravel-tags/blob/main/docs/basic-usage/retrieving-tagged-models.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n//returns models that have one or more of the given tags that are typed `myType`\nYourModel::withAnyTags(['tag 1', 'tag 2'], 'myType')->get();\n```\n\n----------------------------------------\n\nTITLE: Installing Laravel Tags package\nDESCRIPTION: This command uses Composer to install the spatie/laravel-tags package into your Laravel project. It adds the package as a dependency, allowing you to use its features for managing tags.\nSOURCE: https://github.com/spatie/laravel-tags/blob/main/docs/installation-and-setup.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require spatie/laravel-tags\n```\n\n----------------------------------------\n\nTITLE: Install Laravel Tags Package - Bash\nDESCRIPTION: This command installs the `spatie/laravel-tags` package using Composer. Composer is a dependency manager for PHP.\nSOURCE: https://github.com/spatie/laravel-tags/blob/main/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require spatie/laravel-tags\n```\n\n----------------------------------------\n\nTITLE: Running Database Migrations\nDESCRIPTION: This command runs the database migrations that were previously published. This will create the `tags` and `taggables` tables in your database, enabling the functionality provided by the spatie/laravel-tags package.\nSOURCE: https://github.com/spatie/laravel-tags/blob/main/docs/installation-and-setup.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan migrate\n```\n\n----------------------------------------\n\nTITLE: Publishing Tags Migrations\nDESCRIPTION: This command publishes the migrations included in the spatie/laravel-tags package. These migrations are required to create the `tags` and `taggables` tables in your database, which are essential for the package to function correctly. The `--provider` and `--tag` options specify the service provider and tag for the migrations to be published.\nSOURCE: https://github.com/spatie/laravel-tags/blob/main/docs/installation-and-setup.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan vendor:publish --provider=\"Spatie\\Tags\\TagsServiceProvider\" --tag=\"tags-migrations\"\n```\n\n----------------------------------------\n\nTITLE: Using Tag Types\nDESCRIPTION: Shows how to create a tag with a specific type using the `spatie/laravel-tags` package. This allows for categorizing tags. The `Tag` model is part of the `spatie/laravel-tags` package.\nSOURCE: https://github.com/spatie/laravel-tags/blob/main/docs/introduction.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// using tag types\n$tag = Tag::findOrCreate('tag 1', 'my type');\n```\n\n----------------------------------------\n\nTITLE: Creating Tag with Type - PHP\nDESCRIPTION: Creates a tag with a specified type. This allows for categorizing tags into different collections, such as associating tags with specific models like 'News' or 'BlogPost'. The first argument is the tag name, and the second is the tag type.\nSOURCE: https://github.com/spatie/laravel-tags/blob/main/docs/advanced-usage/using-types.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n//creating a tag with a certain type\n$tagWithType = Tag::findOrCreate('headline', 'newsTag');\n```\n\n----------------------------------------\n\nTITLE: Getting Tags with Type - PHP\nDESCRIPTION: Retrieves all tags of a specific type using `Tag::getWithType('type')`. It shows both the direct method call and the scoped version `Tag::withType('type')->get()`. Both achieve the same result of fetching all tags of the specified type.\nSOURCE: https://github.com/spatie/laravel-tags/blob/main/docs/advanced-usage/using-types.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n$tagA = Tag::findOrCreate('tagA', 'firstType');\n$tagB = Tag::findOrCreate('tagB', 'firstType');\n$tagC = Tag::findOrCreate('tagC', 'secondType');\n$tagD = Tag::findOrCreate('tagD', 'secondType');\n\nTag::getWithType('firstType'); // returns a collection with $tagA and $tagB\n\n//there's also a scoped version\nTag::withType('firstType')->get(); // returns the same result\n```\n\n----------------------------------------\n\nTITLE: Getting Model Tags with Type - PHP\nDESCRIPTION: Retrieves all tags associated with a model for a specific type using the `tagsWithType('type')` method. This returns a collection of tags linked to the model under the specified type.\nSOURCE: https://github.com/spatie/laravel-tags/blob/main/docs/advanced-usage/using-types.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n$newsItem->tagsWithType('firstType'); // returns a collection\n```\n\n----------------------------------------\n\nTITLE: Run Database Migrations - Bash\nDESCRIPTION: This command executes the database migrations, creating the tables required by the `spatie/laravel-tags` package. It assumes that the migration file has been published.\nSOURCE: https://github.com/spatie/laravel-tags/blob/main/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan migrate\n```\n\n----------------------------------------\n\nTITLE: Publish Tags Migration - Bash\nDESCRIPTION: This command publishes the migration file for the `spatie/laravel-tags` package. The migration creates the `tags` and `taggables` tables in the database. It requires the `TagsServiceProvider` to be registered.\nSOURCE: https://github.com/spatie/laravel-tags/blob/main/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan vendor:publish --provider=\"Spatie\\Tags\\TagsServiceProvider\" --tag=\"tags-migrations\"\n```\n\n----------------------------------------\n\nTITLE: Publishing Tags Configuration\nDESCRIPTION: This command publishes the configuration file for the spatie/laravel-tags package. This allows you to customize the package's behavior, such as defining a custom slugger function or specifying a custom tag model. The `--provider` and `--tag` options specify the service provider and tag for the configuration file to be published.\nSOURCE: https://github.com/spatie/laravel-tags/blob/main/docs/installation-and-setup.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan vendor:publish --provider=\"Spatie\\Tags\\TagsServiceProvider\" --tag=\"tags-config\"\n```\n\n----------------------------------------\n\nTITLE: Tags Configuration File\nDESCRIPTION: This PHP array defines the configuration options for the spatie/laravel-tags package. It allows customizing the slug generation, specifying the tag model class, and configuring the taggable morph relation including pivot table names and class names.  It's important to modify this file to suit your specific application needs.\nSOURCE: https://github.com/spatie/laravel-tags/blob/main/docs/installation-and-setup.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n\n    /*\n     * The given function generates a URL friendly \"slug\" from the tag name property before saving it.\n     * Defaults to Str::slug (https://laravel.com/docs/master/helpers#method-str-slug)\n     */\n    'slugger' => null,\n\n    /*\n     * The fully qualified class name of the tag model.\n     */\n    'tag_model' => Spatie\\Tags\\Tag::class,\n\n    /*\n     * The name of the table associated with the taggable morph relation.\n     */\n    'taggable' => [\n        'table_name' => 'taggables',\n        'morph_name' => 'taggable',\n\n        /*\n         * The fully qualified class name of the pivot model.\n         */\n        'class_name' => Illuminate\\Database\\Eloquent\\Relations\\MorphPivot::class,\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Querying Tags by Content\nDESCRIPTION: Shows how to retrieve all tags containing a given value using the `spatie/laravel-tags` package. The `Tag` model is part of the `spatie/laravel-tags` package.\nSOURCE: https://github.com/spatie/laravel-tags/blob/main/docs/introduction.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n// get all tags containing a given value\nTag::containing('test'); // returns all tags that contain 'test'\n```\n\n----------------------------------------\n\nTITLE: Querying models with any tags of any type - PHP\nDESCRIPTION: This snippet demonstrates how to retrieve models that have one or more of the specified tags, regardless of tag type. It uses the `withAnyTagsOfAnyType` scope. It returns a collection of `YourModel` instances.\nSOURCE: https://github.com/spatie/laravel-tags/blob/main/docs/basic-usage/retrieving-tagged-models.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n//returns models that have one or more of the given tags of any type\nYourModel::withAnyTagsOfAnyType(['tag 1', 'tag 2'])->get();\n```\n\n----------------------------------------\n\nTITLE: Querying models with all tags of any type - PHP\nDESCRIPTION: This snippet demonstrates how to retrieve models that have all of the specified tags, regardless of tag type. It uses the `withAllTagsOfAnyType` scope. It returns a collection of `YourModel` instances.\nSOURCE: https://github.com/spatie/laravel-tags/blob/main/docs/basic-usage/retrieving-tagged-models.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n//returns models that have all given tags of any type\nYourModel::withAllTagsOfAnyType(['tag 1', 'tag 2'])->get();\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Tag Model with HasTags Trait in PHP\nDESCRIPTION: Demonstrates overriding the `getTagClassName` method within a model that uses the `HasTags` trait. This allows the model to use a custom tag model instead of the default `Spatie\\Tags\\Tag` model. It requires a custom tag model class that extends `Spatie\\Tags\\Tag`.\nSOURCE: https://github.com/spatie/laravel-tags/blob/main/docs/advanced-usage/using-your-own-tag-model.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Spatie\\Tags\\HasTags;\n\nclass YourModel extends Model\n{\n    use HasTags;\n    \n    public static function getTagClassName(): string\n    {\n        return YourTagModel::class;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Tags Relationship with MorphToMany in PHP\nDESCRIPTION: Shows how to override the `tags()` method within a model that uses the `HasTags` trait. This is necessary to maintain the `tag_id` column for tags relationship instead of the default `your_tag_model_id`. It requires `Illuminate\\Database\\Eloquent\\Relations\\MorphToMany`.\nSOURCE: https://github.com/spatie/laravel-tags/blob/main/docs/advanced-usage/using-your-own-tag-model.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nuse Illuminate\\Database\\Eloquent\\Relations\\MorphToMany;\n\npublic function tags(): MorphToMany\n{\n    return $this\n        ->morphToMany(self::getTagClassName(), 'taggable', 'taggables', null, 'tag_id')\n        ->orderBy('order_column');\n}\n```\n\n----------------------------------------\n\nTITLE: Tags Configuration - PHP\nDESCRIPTION: This is the content of the published config file allowing users to define a custom slugger function. If no slugger is provided, the configuration defaults to the Laravel `Str::slug` helper.\nSOURCE: https://github.com/spatie/laravel-tags/blob/main/README.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n\n    /*\n     * The given function generates a URL friendly \"slug\" from the tag name property before saving it.\n     * Defaults to Str::slug (https://laravel.com/docs/5.8/helpers#method-str-slug)\n     */\n    'slugger' => null, \n];\n```\n\n----------------------------------------\n\nTITLE: Publish Tags Configuration - Bash\nDESCRIPTION: This command publishes the configuration file for the `spatie/laravel-tags` package. The configuration file allows customization of the package's behavior, such as the slug generation method.\nSOURCE: https://github.com/spatie/laravel-tags/blob/main/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan vendor:publish --provider=\"Spatie\\Tags\\TagsServiceProvider\" --tag=\"tags-config\"\n```\n\n----------------------------------------\n\nTITLE: Sorting Tags\nDESCRIPTION: Illustrates how tags are automatically assigned an order column and provides a method to swap the order of two tags using the `spatie/laravel-tags` package. The `Tag` model is part of the `spatie/laravel-tags` package.\nSOURCE: https://github.com/spatie/laravel-tags/blob/main/docs/introduction.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// tags are sortable\n$tag = Tag::findOrCreate('my tag');\n$tag->order_column; //returns 1\n$tag2 = Tag::findOrCreate('another tag');\n$tag2->order_column; //returns 2\n\n//manipulating the order of tags\n$tag->swapOrder($anotherTag);\n```\n\n----------------------------------------\n\nTITLE: Getting Ordered Tags using spatie/laravel-tags in PHP\nDESCRIPTION: Retrieves all tags sorted by the `order_column`. This leverages the `ordered()` scope provided by the spatie/eloquent-sortable package, which is a dependency of spatie/laravel-tags. The `get()` method fetches the results as a collection of Tag model instances.\nSOURCE: https://github.com/spatie/laravel-tags/blob/main/docs/advanced-usage/sorting-tags.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n//get all tags sorted on `order_column`\n$orderedTags = Tag::ordered()->get();\n```\n\n----------------------------------------\n\nTITLE: Setting New Order of Tags using spatie/laravel-tags in PHP\nDESCRIPTION: Sets a new order for tags based on the provided array of Tag IDs.  This uses the `setNewOrder` method provided by the underlying spatie/eloquent-sortable package. The input `$arrayWithTagIds` should be an array where the order of IDs corresponds to the desired order of the tags.\nSOURCE: https://github.com/spatie/laravel-tags/blob/main/docs/advanced-usage/sorting-tags.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n//set a new order entirely\nTag::setNewOrder($arrayWithTagIds);\n```\n\n----------------------------------------\n\nTITLE: Moving Tag Order Up/Down using spatie/laravel-tags in PHP\nDESCRIPTION: Moves the order of a specific Tag instance either up or down within the sorted list. This uses the `moveOrderUp()` and `moveOrderDown()` methods inherited from the spatie/eloquent-sortable package on the Tag model. The `$myModel` variable refers to an instance of the Tag model.\nSOURCE: https://github.com/spatie/laravel-tags/blob/main/docs/advanced-usage/sorting-tags.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$myModel->moveOrderUp();\n$myModel->moveOrderDown();\n```\n\n----------------------------------------\n\nTITLE: Moving Tag to Start/End using spatie/laravel-tags in PHP\nDESCRIPTION: Moves a specific Tag instance to either the start or the end of the sorted list. This utilizes the `moveToStart()` and `moveToEnd()` methods from the spatie/eloquent-sortable package. `$tag` represents an instance of the Tag model.\nSOURCE: https://github.com/spatie/laravel-tags/blob/main/docs/advanced-usage/sorting-tags.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n//let's grab a Tag instance\n$tag = $orderedTags->first();\n\n//move the tag to the first or last position\n$tag->moveToStart();\n$tag->moveToEnd();\n```\n\n----------------------------------------\n\nTITLE: Accessing Tag Slug\nDESCRIPTION: Demonstrates how to access the automatically generated slug for a tag using the `spatie/laravel-tags` package. The `Tag` model is part of the `spatie/laravel-tags` package.\nSOURCE: https://github.com/spatie/laravel-tags/blob/main/docs/introduction.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// tags have slugs\n$tag = Tag::findOrCreate('yet another tag');\n$tag->slug; //returns \"yet-another-tag\"\n```\n\n----------------------------------------\n\nTITLE: Swapping Tag Order using spatie/laravel-tags in PHP\nDESCRIPTION: Swaps the order of one Tag instance with another. The `swapOrder()` method is provided by spatie/eloquent-sortable.  `$anotherTag` must be another instance of the Tag model. Both tags will have their `order_column` values updated to reflect the swap.\nSOURCE: https://github.com/spatie/laravel-tags/blob/main/docs/advanced-usage/sorting-tags.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$tag->swapOrder($anotherTag);\n```\n\n----------------------------------------\n\nTITLE: Manually Changing Order Column using spatie/laravel-tags in PHP\nDESCRIPTION: Demonstrates how to manually modify the `order_column` value of a Tag instance. This allows for direct control over the sorting order.  After modifying the `order_column`, the `save()` method must be called to persist the changes to the database.\nSOURCE: https://github.com/spatie/laravel-tags/blob/main/docs/advanced-usage/sorting-tags.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$tag->order_column = 10;\n$tag->save();\n```"
  }
]