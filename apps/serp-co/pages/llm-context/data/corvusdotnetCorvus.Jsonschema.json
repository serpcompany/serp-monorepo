[
  {
    "owner": "corvus-dotnet",
    "repo": "corvus.jsonschema",
    "content": "TITLE: Using Generated C# Types with JSON Schema Validation\nDESCRIPTION: Example C# code demonstrating how to use the generated types to parse JSON and validate it against the schema. This shows accessing properties and checking validation status of a Person object.\nSOURCE: https://github.com/corvus-dotnet/Corvus.JsonSchema/blob/main/README.md#2025-04-16_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nstring jsonText =\n    \"\"\"{\n           \"name\": {\n               \"familyName\": \"Oldroyd\",\n               \"givenName\": \"Michael\",\n               \"otherNames\": [\"Francis\", \"James\"]\n           },\n           \"dateOfBirth\": \"1944-07-14\"\n       }\"\"\";\n\nvar person = Person.Parse(jsonText);\nConsole.WriteLine(person.Name.FamilyName);\nConsole.WriteLine($\"The person {person.IsValid() ? \"is\" : \"is not\"} valid JSON\");\n```\n\n----------------------------------------\n\nTITLE: Parsing and Accessing JSON Data with Generated Types in C#\nDESCRIPTION: This snippet demonstrates how to parse JSON text into a strongly-typed Person object and access its properties. It showcases the serialization capabilities of Corvus.JsonSchema.\nSOURCE: https://github.com/corvus-dotnet/Corvus.JsonSchema/blob/main/README.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nstring jsonText =\n    \"\"\"\n    {\n        \"name\": {\n            \"familyName\": \"Oldroyd\",\n            \"givenName\": \"Michael\",\n            \"otherNames\": [\"Francis\", \"James\"]\n        },\n        \"dateOfBirth\": \"1944-07-14\"\n    }\n    \"\"\";\n\nvar person = Person.Parse(jsonText);\n\nConsole.WriteLine($\"{person.Name.FamilyName}\");\n```\n\n----------------------------------------\n\nTITLE: Complete Person JSON Schema Definition\nDESCRIPTION: A comprehensive JSON schema for a Person entity including nested definitions for name handling, date validation, and link references. Demonstrates schema composition, required fields, and format validations.\nSOURCE: https://github.com/corvus-dotnet/Corvus.JsonSchema/blob/main/docs/GettingStartedWithJsonSchemaCodeGeneration.md#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"title\": \"JSON Schema for a Person entity coming back from a 3rd party API (e.g. a storage format in a database)\",\n  \"$defs\": {\n    \"Person\": {\n      \"type\": \"object\",\n      \"required\":  [\"name\"],\n      \"properties\": {\n        \"name\": { \"$ref\": \"#/$defs/PersonName\" },\n        \"dateOfBirth\": {\n          \"type\": \"string\",\n          \"format\": \"date\"\n        }\n      }\n    },\n    \"PersonName\": {\n      \"type\": \"object\",\n      \"description\": \"A name of a person.\",\n      \"required\": [ \"familyName\" ],\n      \"properties\": {\n        \"givenName\": {\n          \"$ref\": \"#/$defs/PersonNameElement\",\n          \"description\": \"The person's given name.\"\n        },\n        \"familyName\": {\n          \"$ref\": \"#/$defs/PersonNameElement\",\n          \"description\": \"The person's family name.\"\n        },\n        \"otherNames\": {\n          \"$ref\": \"#/$defs/OtherNames\",\n          \"description\": \"Other (middle) names for the person\"\n        }\n      }\n    },\n    \"OtherNames\": {\n        \"oneOf\": [\n            { \"$ref\": \"#/$defs/PersonNameElement\" },\n            { \"$ref\": \"#/$defs/PersonNameElementArray\" }\n        ]\n    },\n    \"PersonNameElementArray\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"$ref\": \"#/$defs/PersonNameElement\"\n      }\n    },\n    \"PersonNameElement\": {\n      \"type\": \"string\",\n      \"minLength\": 1,\n      \"maxLength\": 256\n    },\n    \"Link\": {\n      \"required\": [\"href\"],\n      \"type\": \"object\",\n      \"properties\": {\n        \"href\": {\n          \"title\": \"URI of the target resource\",\n          \"type\": \"string\",\n          \"description\": \"Either a URI [RFC3986] or URI Template [RFC6570] of the target resource.\"\n        },\n        \"templated\": {\n          \"title\": \"URI Template\",\n          \"type\": \"boolean\",\n          \"description\": \"Is true when the link object's href property is a URI Template. Defaults to false.\",\n          \"default\": false\n        },\n        \"type\": {\n          \"title\": \"Media type indication of the target resource\",\n          \"pattern\": \"^(application|audio|example|image|message|model|multipart|text|video)\\\\/[a-zA-Z0-9!#\\\\$&\\\\.\\\\+-\\\\^_]{1,127}$\",\n          \"type\": \"string\",\n          \"description\": \"When present, used as a hint to indicate the media type expected when dereferencing the target resource.\"\n        },\n        \"name\": {\n          \"title\": \"Secondary key\",\n          \"type\": \"string\",\n          \"description\": \"When present, may be used as a secondary key for selecting link objects that contain the same relation type.\"\n        },\n        \"profile\": {\n          \"title\": \"Additional semantics of the target resource\",\n          \"type\": \"string\",\n          \"description\": \"A URI that, when dereferenced, results in a profile to allow clients to learn about additional semantics (constraints, conventions, extensions) that are associated with the target resource representation, in addition to those defined by the HAL media type and relations.\",\n          \"format\": \"uri\"\n        },\n        \"description\": {\n          \"title\": \"Human-readable identifier\",\n          \"type\": \"string\",\n          \"description\": \"When present, is used to label the destination of a link such that it can be used as a human-readable identifier (e.g. a menu entry) in the language indicated by the Content-Language header (if present).\"\n        },\n        \"hreflang\": {\n          \"title\": \"Language indication of the target resource [RFC5988]\",\n          \"pattern\": \"^([a-zA-Z]{2,3}(-[a-zA-Z]{3}(-[a-zA-Z]{3}){0,2})?(-[a-zA-Z]{4})?(-([a-zA-Z]{2}|[0-9]{3}))?(-([a-zA-Z0-9]{5,8}|[0-9][a-zA-Z0-9]{3}))*([0-9A-WY-Za-wy-z](-[a-zA-Z0-9]{2,8}){1,})*(x-[a-zA-Z0-9]{2,8})?)|(x-[a-zA-Z0-9]{2,8})|(en-GB-oed)|(i-ami)|(i-bnn)|(i-default)|(i-enochian)|(i-hak)|(i-klingon)|(i-lux)|(i-mingo)|(i-navajo)|(i-pwn)|(i-tao)|(i-tay)|(i-tsu)|(sgn-BE-FR)|(sgn-BE-NL)|(sgn-CH-DE)|(art-lojban)|(cel-gaulish)|(no-bok)|(no-nyn)|(zh-guoyu)|(zh-hakka)|(zh-min)|(zh-min-nan)|(zh-xiang)$\",\n          \"type\": \"string\",\n          \"description\": \"When present, is a hint in RFC5646 format indicating what the language of the result of dereferencing the link should be.  Note that this is only a hint; for example, it does not override the Content-Language header of a HTTP response obtained by actually following the link.\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Validating JSON Objects in C#\nDESCRIPTION: Demonstrates how to validate a JSON object against its schema using the IsValid() extension method.\nSOURCE: https://github.com/corvus-dotnet/Corvus.JsonSchema/blob/main/docs/GettingStartedWithJsonSchemaCodeGeneration.md#2025-04-16_snippet_26\n\nLANGUAGE: csharp\nCODE:\n```\nbool isValid = michaelOldroyd.IsValid();\nConsole.WriteLine($\"michaelOldroyd {(isValid ? \"is\" : \"is not\")} valid.\");\n```\n\n----------------------------------------\n\nTITLE: Validating JSON Data with Generated Types in C#\nDESCRIPTION: This snippet shows how to validate a parsed JSON object using the IsValid() method generated by Corvus.JsonSchema. It demonstrates the basic validation capability of the library.\nSOURCE: https://github.com/corvus-dotnet/Corvus.JsonSchema/blob/main/README.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nstring jsonText =\n    \"\"\"\n    {\n        \"name\": {\n            \"familyName\": \"Oldroyd\",\n            \"givenName\": \"Michael\",\n            \"otherNames\": [\"Francis\", \"James\"]\n        },\n        \"dateOfBirth\": \"1944-07-14\"\n    }\n    \"\"\";\n\nvar person = Person.Parse(jsonText);\n\nConsole.WriteLine($\"The person {person.IsValid() ? \"is\" : \"is not\"} valid JSON\");\n```\n\n----------------------------------------\n\nTITLE: Detailed JSON Validation with Error Reporting in C#\nDESCRIPTION: This snippet demonstrates how to perform detailed validation of a JSON object and retrieve specific validation errors. It showcases the advanced validation features of Corvus.JsonSchema, including error reporting.\nSOURCE: https://github.com/corvus-dotnet/Corvus.JsonSchema/blob/main/README.md#2025-04-16_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar result = person.Validate(ValidationContext.ValidContext, ValidationLevel.Detailed);\n\nif (!result.IsValid)\n{\n    foreach (ValidationResult error in result.Results)\n    {\n        Console.WriteLine(error);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating JSON Primitive Types in C#\nDESCRIPTION: Examples of creating JSON primitive types (string, number, boolean, null) using both implicit conversion from .NET types and explicit construction. This demonstrates the flexibility in how primitive JSON values can be instantiated.\nSOURCE: https://github.com/corvus-dotnet/Corvus.JsonSchema/blob/main/docs/GettingStartedWithJsonSchemaCodeGeneration.md#2025-04-16_snippet_39\n\nLANGUAGE: csharp\nCODE:\n```\nJsonString myImplicitString = \"a string, implicitly\";\nJsonString myExplicitString = new JsonString(\"a string, explicitly\");\nJsonNumber myImplicitNumber = 1.1;\nJsonNumber myExplicitNumber = new JsonNumber(1.1);\nJsonBoolean myImplicitBoolean = true;\nJsonBoolean myExplicitBoolean = new JsonBoolean(true);\nJsonNull myImplicitNull = default;\nJsonNull myExplicitNull = new JsonNull();\nJsonNull myNull = JsonAny.Null;\n```\n\n----------------------------------------\n\nTITLE: Constructing a Complex JSON Object with Named Parameters in C#\nDESCRIPTION: Complete example of creating a Person object with nested properties using factory methods and named parameters. This demonstrates how to build a hierarchical JSON structure with required and optional properties.\nSOURCE: https://github.com/corvus-dotnet/Corvus.JsonSchema/blob/main/docs/GettingStartedWithJsonSchemaCodeGeneration.md#2025-04-16_snippet_43\n\nLANGUAGE: csharp\nCODE:\n```\nPerson audreyJones =\n    Person.Create(\n        name: PersonName.Create(\n                givenName: \"Audrey\",\n                otherNames: PersonNameElementArray.FromItems(\"Margaret\", \"Nancy\"),\n                familyName: \"Jones\"),\n        dateOfBirth: new LocalDate(1947, 11, 7));\n```\n\n----------------------------------------\n\nTITLE: Using IsNotUndefined Extension Method with Optional Properties\nDESCRIPTION: Demonstrates how to use the IsNotUndefined() extension method to check if an optional property exists before accessing it, with a fallback value if the property is undefined.\nSOURCE: https://github.com/corvus-dotnet/Corvus.JsonSchema/blob/main/docs/GettingStartedWithJsonSchemaCodeGeneration.md#2025-04-16_snippet_29\n\nLANGUAGE: csharp\nCODE:\n```\nstring givenName =\n    michaelOldroyd.Name.GivenName.IsNotUndefined()\n        ? (string)michaelOldroyd.Name.GivenName\n        : \"[no given name specified]\";\n```\n\n----------------------------------------\n\nTITLE: Parsing JSON to JsonAny in C#\nDESCRIPTION: Demonstrates how to parse a JSON string into a JsonAny object, which can then be implicitly converted to a specific type like Person.\nSOURCE: https://github.com/corvus-dotnet/Corvus.JsonSchema/blob/main/docs/GettingStartedWithJsonSchemaCodeGeneration.md#2025-04-16_snippet_24\n\nLANGUAGE: csharp\nCODE:\n```\npublic static JsonAny Parse(string json, JsonDocumentOptions options = default)\n```\n\nLANGUAGE: csharp\nCODE:\n```\nPerson michaelOldroyd = JsonAny.Parse(jsonText);\n```\n\n----------------------------------------\n\nTITLE: Using Generated JSON Types in C#\nDESCRIPTION: Example of how to use the automatically generated JSON schema types in code, demonstrating parsing from JSON and accessing the data as a JsonArray.\nSOURCE: https://github.com/corvus-dotnet/Corvus.JsonSchema/blob/main/README.md#2025-04-16_snippet_17\n\nLANGUAGE: csharp\nCODE:\n```\nusing Corvus.Json;\nusing SourceGenTest2.Model;\n\nFlimFlam flimFlam = JsonAny.ParseValue(\"[1,2,3]\"u8);\nConsole.WriteLine(flimFlam);\nJsonArray array = flimFlam.As<JsonArray>();\nConsole.WriteLine(array);\n```\n\n----------------------------------------\n\nTITLE: Validating JSON Data Against a Schema in C#\nDESCRIPTION: Shows how to validate a JsonElement against a loaded JSON Schema using the Validate method, which returns a ValidationContext containing the results.\nSOURCE: https://github.com/corvus-dotnet/Corvus.JsonSchema/blob/main/README.md#2025-04-16_snippet_20\n\nLANGUAGE: csharp\nCODE:\n```\nJsonElement elementToValidate = ...\nValidationContext result = this.corvusSchema.Validate(elementToValidate);\n```\n\n----------------------------------------\n\nTITLE: Creating JSON Arrays with Corvus.JsonSchema in C#\nDESCRIPTION: Example of creating a JSON array using the generated PersonNameElementArray type. This demonstrates how to use the FromItems() static method with implicit conversion from strings to create an array of name elements.\nSOURCE: https://github.com/corvus-dotnet/Corvus.JsonSchema/blob/main/docs/GettingStartedWithJsonSchemaCodeGeneration.md#2025-04-16_snippet_40\n\nLANGUAGE: csharp\nCODE:\n```\nvar otherNames = PersonNameElementArray.FromItems(\"Margaret\", \"Nancy\");\n```\n\n----------------------------------------\n\nTITLE: Loading a JSON Schema in C#\nDESCRIPTION: Demonstrates how to load a JSON Schema from a file using the new dynamic JSON Schema validator in Corvus.Json.Validator.\nSOURCE: https://github.com/corvus-dotnet/Corvus.JsonSchema/blob/main/README.md#2025-04-16_snippet_19\n\nLANGUAGE: csharp\nCODE:\n```\nvar corvusSchema = CorvusValidator.JsonSchema.FromFile(\"./person-array-schema.json\");\n```\n\n----------------------------------------\n\nTITLE: Using TryGet Pattern for Union Types\nDESCRIPTION: Demonstrates the TryGet pattern for safer type casting with union types.\nSOURCE: https://github.com/corvus-dotnet/Corvus.JsonSchema/blob/main/docs/GettingStartedWithJsonSchemaCodeGeneration.md#2025-04-16_snippet_50\n\nLANGUAGE: csharp\nCODE:\n```\nif (michaelOldroyd.Name.OtherNames.TryGetAsPersonNameElementArray(out PersonNameElementArray otherNamesArray))\n{\n    // Use the array\n    otherNamesArray.EnumerateArray();\n}\n```\n\n----------------------------------------\n\nTITLE: Creating JSON Using Anonymous Types in C#\nDESCRIPTION: Shows how to create JSON objects using C# anonymous types as an alternative to string literals.\nSOURCE: https://github.com/corvus-dotnet/Corvus.JsonSchema/blob/main/docs/GettingStartedWithJsonSchemaCodeGeneration.md#2025-04-16_snippet_37\n\nLANGUAGE: csharp\nCODE:\n```\nvar jsonAnon = new {\n    name = new {\n      familyName = \"Oldroyd\",\n      givenName = \"Michael\",\n      otherNames = new [] { \"Francis\", \"James\" }\n    },\n    dateOfBirth = \"1944-07-14\"\n  };\n\nvar michaelOldroyd = JsonAny.CreateFromSerializedInstance(jsonAnon);\n```\n\n----------------------------------------\n\nTITLE: Pattern Matching with Union Types\nDESCRIPTION: Shows how to use the Match() method for exhaustive pattern matching on union types.\nSOURCE: https://github.com/corvus-dotnet/Corvus.JsonSchema/blob/main/docs/GettingStartedWithJsonSchemaCodeGeneration.md#2025-04-16_snippet_51\n\nLANGUAGE: csharp\nCODE:\n```\nstring result = audreyJones.Name.OtherNames.Match(\n    static (in PersonNameElement otherNames) => $\"Other names: {otherNames}\",\n    static (in PersonNameElementArray otherNames) => $\"Other names: {string.Join(\", \", otherNames)}\",\n    static (in OtherNames value) => throw new InvalidOperationException($\"Unexpected type: {value}\"));\n```\n\n----------------------------------------\n\nTITLE: Accessing Additional Properties with TryGetProperty\nDESCRIPTION: Shows how to retrieve and use additional properties that aren't part of the schema definition using the TryGetProperty method and checking the ValueKind before accessing the property value.\nSOURCE: https://github.com/corvus-dotnet/Corvus.JsonSchema/blob/main/docs/GettingStartedWithJsonSchemaCodeGeneration.md#2025-04-16_snippet_31\n\nLANGUAGE: csharp\nCODE:\n```\nConsole.WriteLine($\"{familyName}, {givenName}: {dateOfBirth}\");\n\nif (michaelOldroyd.TryGetProperty(\"occupation\", out JsonAny occupation) &&\n    occupation.ValueKind == JsonValueKind.String)\n{\n    Console.WriteLine($\"occupation: {occupation.AsString}\");\n}\n\nbool isValid = michaelOldroyd.IsValid();\n```\n\n----------------------------------------\n\nTITLE: Creating Complex JSON Objects with Factory Methods in C#\nDESCRIPTION: Example of the Create() factory method signature for the Person class. This method requires passing the mandatory 'name' parameter while making the 'dateOfBirth' parameter optional, reflecting the JSON schema requirements.\nSOURCE: https://github.com/corvus-dotnet/Corvus.JsonSchema/blob/main/docs/GettingStartedWithJsonSchemaCodeGeneration.md#2025-04-16_snippet_42\n\nLANGUAGE: csharp\nCODE:\n```\npublic static Person Create(in JsonSchemaSample.Api.PersonName name, in Corvus.Json.JsonDate? dateOfBirth = null)\n```\n\n----------------------------------------\n\nTITLE: Creating JSON Arrays from Existing Collections in C#\nDESCRIPTION: Examples of creating JSON arrays from existing collections using JsonArray.FromRange() and PersonNameElementArray.FromRange(). This demonstrates how to convert existing .NET collections into JSON arrays.\nSOURCE: https://github.com/corvus-dotnet/Corvus.JsonSchema/blob/main/docs/GettingStartedWithJsonSchemaCodeGeneration.md#2025-04-16_snippet_41\n\nLANGUAGE: csharp\nCODE:\n```\nvar someNameStrings = new List<PersonNameElement> { \"Margaret\", \"Nancy\" };\nPersonNameElementArray array = JsonArray.FromRange(someNameStrings);\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar someNameValues = new List<PersonNameElement> { \"Margaret\", \"Nancy\" };\nPersonNameElementArray valueArray = PersonNameElementArray.FromRange(someNameValues);\n```\n\n----------------------------------------\n\nTITLE: Example JSON Schema for Person Entity\nDESCRIPTION: A sample JSON Schema file demonstrating a Person entity structure with nested objects for name components and validation constraints for individual fields. This example includes definitions for PersonName, OtherNames, and Link objects.\nSOURCE: https://github.com/corvus-dotnet/Corvus.JsonSchema/blob/main/README.md#2025-04-16_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"title\": \"JSON Schema for a Person entity coming back from a 3rd party API (e.g. a storage format in a database)\",\n  \"$defs\": {\n    \"Person\": {\n      \"type\": \"object\",\n\n      \"required\":  [\"name\"],\n      \"properties\": {\n        \"name\": { \"$ref\": \"#/$defs/PersonName\" },\n        \"dateOfBirth\": {\n          \"type\": \"string\",\n          \"format\": \"date\"\n        }\n      }\n    },\n    \"PersonName\": {\n      \"type\": \"object\",\n      \"description\": \"A name of a person.\",\n      \"required\": [ \"familyName\" ],\n      \"properties\": {\n        \"givenName\": {\n          \"$ref\": \"#/$defs/PersonNameElement\",\n          \"description\": \"The person's given name.\"\n        },\n        \"familyName\": {\n          \"$ref\": \"#/$defs/PersonNameElement\",\n          \"description\": \"The person's family name.\"\n        },\n        \"otherNames\": {\n          \"$ref\": \"#/$defs/OtherNames\",\n          \"description\": \"Other (middle) names for the person\"\n        }\n      }\n    },\n    \"OtherNames\": {\n        \"oneOf\": [\n            { \"$ref\": \"#/$defs/PersonNameElement\" },\n            { \"$ref\": \"#/$defs/PersonNameElementArray\" }\n        ]\n    },\n    \"PersonNameElementArray\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"$ref\": \"#/$defs/PersonNameElement\"\n      }\n    },\n    \"PersonNameElement\": {\n      \"type\": \"string\",\n      \"minLength\": 1,\n      \"maxLength\": 256\n    },\n    \"Link\": {\n      \"required\": [\n        \"href\"\n      ],\n      \"type\": \"object\",\n      \"properties\": {\n        \"href\": {\n          \"title\": \"URI of the target resource\",\n          \"type\": \"string\",\n          \"description\": \"Either a URI [RFC3986] or URI Template [RFC6570] of the target resource.\"\n        },\n        \"templated\": {\n          \"title\": \"URI Template\",\n          \"type\": \"boolean\",\n          \"description\": \"Is true when the link object's href property is a URI Template. Defaults to false.\",\n          \"default\": false\n        },\n        \"type\": {\n          \"title\": \"Media type indication of the target resource\",\n          \"pattern\": \"^(application|audio|example|image|message|model|multipart|text|video)\\\\/[a-zA-Z0-9!#\\\\$&\\\\.\\\\+-\\\\^_]{1,127}$\",\n          \"type\": \"string\",\n          \"description\": \"When present, used as a hint to indicate the media type expected when dereferencing the target resource.\"\n        },\n        \"name\": {\n          \"title\": \"Secondary key\",\n          \"type\": \"string\",\n          \"description\": \"When present, may be used as a secondary key for selecting link objects that contain the same relation type.\"\n        },\n        \"profile\": {\n          \"title\": \"Additional semantics of the target resource\",\n          \"type\": \"string\",\n          \"description\": \"A URI that, when dereferenced, results in a profile to allow clients to learn about additional semantics (constraints, conventions, extensions) that are associated with the target resource representation, in addition to those defined by the HAL media type and relations.\",\n          \"format\": \"uri\"\n        },\n        \"description\": {\n          \"title\": \"Human-readable identifier\",\n          \"type\": \"string\",\n          \"description\": \"When present, is used to label the destination of a link such that it can be used as a human-readable identifier (e.g. a menu entry) in the language indicated by the Content-Language header (if present).\"\n        },\n        \"hreflang\": {\n          \"title\": \"Language indication of the target resource [RFC5988]\",\n          \"pattern\": \"^([a-zA-Z]{2,3}(-[a-zA-Z]{3}(-[a-zA-Z]{3}){0,2})?(-[a-zA-Z]{4})?(-([a-zA-Z]{2}|[0-9]{3}))?(-([a-zA-Z0-9]{5,8}|[0-9][a-zA-Z0-9]{3}))*([0-9A-WY-Za-wy-z](-[a-zA-Z0-9]{2,8}){1,})*(x-[a-zA-Z0-9]{2,8})?)|(x-[a-zA-Z0-9]{2,8})|(en-GB-oed)|(i-ami)|(i-bnn)|(i-default)|(i-enochian)|(i-hak)|(i-klingon)|(i-lux)|(i-mingo)|(i-navajo)|(i-pwn)|(i-tao)|(i-tay)|(i-tsu)|(sgn-BE-FR)|(sgn-BE-NL)|(sgn-CH-DE)|(art-lojban)|(cel-gaulish)|(no-bok)|(no-nyn)|(zh-guoyu)|(zh-hakka)|(zh-min)|(zh-min-nan)|(zh-xiang)$\",\n          \"type\": \"string\",\n          \"description\": \"When present, is a hint in RFC5646 format indicating what the language of the result of dereferencing the link should be.  Note that this is only a hint; for example, it does not override the Content-Language header of a HTTP response obtained by actually following the link.\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enumerating JSON Object Properties in C#\nDESCRIPTION: Demonstrates how to enumerate all properties in a JSON object and write them to console.\nSOURCE: https://github.com/corvus-dotnet/Corvus.JsonSchema/blob/main/docs/GettingStartedWithJsonSchemaCodeGeneration.md#2025-04-16_snippet_33\n\nLANGUAGE: csharp\nCODE:\n```\nConsole.WriteLine(\"Additional properties:\");\nforeach(JsonObjectProperty property in michaelOldroyd.EnumerateObject())\n{\n    Console.WriteLine($\"{property.Name}: {property.Value}\");\n}\n```\n\n----------------------------------------\n\nTITLE: Enumerating JSON Array Elements in C#\nDESCRIPTION: Demonstrates how to enumerate elements in a JSON array property.\nSOURCE: https://github.com/corvus-dotnet/Corvus.JsonSchema/blob/main/docs/GettingStartedWithJsonSchemaCodeGeneration.md#2025-04-16_snippet_36\n\nLANGUAGE: csharp\nCODE:\n```\nforeach(PersonNameElement otherName in michaelOldroyd.Name.OtherNames.EnumerateArray())\n{\n  Console.WriteLine(otherName);\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Person Properties\nDESCRIPTION: Demonstrates accessing properties of the Person object and formatting output\nSOURCE: https://github.com/corvus-dotnet/Corvus.JsonSchema/blob/main/docs/GettingStartedWithJsonSchemaCodeGeneration.md#2025-04-16_snippet_21\n\nLANGUAGE: csharp\nCODE:\n```\nstring familyName = (string)michaelOldroyd.Name.FamilyName;\nstring givenName = (string)michaelOldroyd.Name.GivenName;\nLocalDate dateOfBirth = michaelOldroyd.DateOfBirth;\n\nConsole.WriteLine($\"{familyName}, {givenName}: {dateOfBirth}\");\n```\n\n----------------------------------------\n\nTITLE: Handling Invalid JSON in C#\nDESCRIPTION: Shows how to parse and validate an invalid JSON object, demonstrating that even invalid objects can be partially accessed.\nSOURCE: https://github.com/corvus-dotnet/Corvus.JsonSchema/blob/main/docs/GettingStartedWithJsonSchemaCodeGeneration.md#2025-04-16_snippet_27\n\nLANGUAGE: csharp\nCODE:\n```\nstring invalidJsonText =\n    \"\"\"\n        {\n        \"name\": {\n          \"givenName\": \"Michael\",\n          \"otherNames\": [\"Francis\", \"James\"]\n        },\n        \"dateOfBirth\": \"1944-07-14\"\n    }\n    \"\"\";\n\nPerson invalidOldroyd = JsonAny.Parse(invalidJsonText);\nbool isValid2 = invalidOldroyd.IsValid();\nConsole.WriteLine($\"invalidOldroyd {(isValid2 ? \"is\" : \"is not\")} valid.\");\n\nstring givenName2 = (string)invalidOldroyd.Name.GivenName;\nLocalDate dateOfBirth2 = invalidOldroyd.DateOfBirth;\n\nConsole.WriteLine($\"{givenName2}: {dateOfBirth2}\");\n```\n\n----------------------------------------\n\nTITLE: Accessing JSON Properties in C#\nDESCRIPTION: Shows how to access properties of a JSON object using implicit conversions to native C# types like string and LocalDate.\nSOURCE: https://github.com/corvus-dotnet/Corvus.JsonSchema/blob/main/docs/GettingStartedWithJsonSchemaCodeGeneration.md#2025-04-16_snippet_25\n\nLANGUAGE: csharp\nCODE:\n```\nstring familyName = (string)michaelOldroyd.Name.FamilyName;\nstring givenName = (string)michaelOldroyd.Name.GivenName;\nLocalDate dateOfBirth = michaelOldroyd.DateOfBirth;\n```\n\n----------------------------------------\n\nTITLE: JsonAny Usage Example\nDESCRIPTION: Demonstrates simplified JSON parsing using JsonAny.Parse instead of JsonDocument\nSOURCE: https://github.com/corvus-dotnet/Corvus.JsonSchema/blob/main/docs/GettingStartedWithJsonSchemaCodeGeneration.md#2025-04-16_snippet_23\n\nLANGUAGE: csharp\nCODE:\n```\nPerson michaelOldroyd = JsonAny.Parse(jsonText);\n```\n\n----------------------------------------\n\nTITLE: Generating C# Types from JSON Schema\nDESCRIPTION: Command to execute the JSON Schema type generator tool against a JSON schema file, specifying a root namespace and path to the root type. This command generates C# files based on the Person schema.\nSOURCE: https://github.com/corvus-dotnet/Corvus.JsonSchema/blob/main/README.md#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngeneratejsonschematypes --rootNamespace JsonSchemaSample.Api --rootPath #/$defs/Person person-from-api.json\n```\n\n----------------------------------------\n\nTITLE: Initializing CSharpGenerator for JSON Schema Code Generation\nDESCRIPTION: Demonstrates how to set up and use the CSharpGenerator class to generate C# code from JSON schemas. The code shows initialization with namespace options and generating code files from a JSON schema reference.\nSOURCE: https://github.com/corvus-dotnet/Corvus.JsonSchema/blob/main/Solutions/Corvus.Json.CodeGeneration.CSharp.QuickStart/QuickStart.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Corvus.Json;\nusing Corvus.Json.CodeGeneration;\nusing Corvus.Json.CodeGeneration.CSharp;\nusing Corvus.Json.CodeGeneration.CSharp.QuickStart;\n\nvar options = new CSharpLanguageProvider.Options(\"My.Test.Namespace\");\n\nvar generator = CSharpGenerator.Create(options: options);\n\nIReadOnlyCollection<GeneratedCodeFile> generatedFiles =\n    await generator.GenerateFilesAsync(new JsonReference(\"./CombinedDocumentSchema.json\"));\n```\n\n----------------------------------------\n\nTITLE: JSON Document Parsing\nDESCRIPTION: Creates a JsonDocument from a JSON string containing person data with name and date of birth\nSOURCE: https://github.com/corvus-dotnet/Corvus.JsonSchema/blob/main/docs/GettingStartedWithJsonSchemaCodeGeneration.md#2025-04-16_snippet_19\n\nLANGUAGE: csharp\nCODE:\n```\nstring jsonText =\n  \"\"\"\n  {\n    \"name\": {\n      \"familyName\": \"Oldroyd\",\n      \"givenName\": \"Michael\",\n      \"otherNames\": [\"Francis\", \"James\"]\n    },\n    \"dateOfBirth\": \"1944-07-14\"\n  }\n  \"\"\";\n\nusing JsonDocument document = JsonDocument.Parse(jsonText);\n```\n\n----------------------------------------\n\nTITLE: Example JSON Array Schema Definition\nDESCRIPTION: A sample JSON Schema that defines an array with specific requirements for its items, including a positive integer, a string, and a datetime string.\nSOURCE: https://github.com/corvus-dotnet/Corvus.JsonSchema/blob/main/README.md#2025-04-16_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"$schema\": \"https://corvus-oss.org/json-schema/2020-12/schema\",\n    \"type\": \"array\",\n    \"prefixItems\": [\n        {\n            \"$corvusTypeName\": \"PositiveInt32\",\n            \"type\": \"integer\",\n            \"format\": \"int32\",\n            \"minimum\": 0\n        },\n        { \"type\": \"string\" },\n        {\n            \"type\": \"string\",\n            \"format\": \"date-time\"\n        }\n    ],\n    \"unevaluatedItems\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing JSON Person Object in C#\nDESCRIPTION: Demonstrates basic JSON parsing of a person object with name and date of birth using Corvus.Json library.\nSOURCE: https://github.com/corvus-dotnet/Corvus.JsonSchema/blob/main/docs/GettingStartedWithJsonSchemaCodeGeneration.md#2025-04-16_snippet_44\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.Text.Json;\nusing Corvus.Json;\nusing JsonSchemaSample.Api;\nusing NodaTime;\n\nstring jsonText = \n\"\"\"\n{\n    \"name\": {\n      \"familyName\": \"Oldroyd\",\n      \"givenName\": \"Michael\",\n      \"otherNames\": [\"Francis\", \"James\"]\n    },\n    \"dateOfBirth\": \"1944-07-14\"\n}\n\"\"\";\n\nvar michaelOldroyd = Person.Parse(jsonText);\n```\n\n----------------------------------------\n\nTITLE: JSON Serialization Example\nDESCRIPTION: Shows how to serialize a Person object back to a JSON string\nSOURCE: https://github.com/corvus-dotnet/Corvus.JsonSchema/blob/main/docs/GettingStartedWithJsonSchemaCodeGeneration.md#2025-04-16_snippet_22\n\nLANGUAGE: csharp\nCODE:\n```\nstring serializedOldroyd = michaelOldroyd.Serialize();\nConsole.WriteLine(serializedOldroyd);\n```\n\n----------------------------------------\n\nTITLE: YAML Schema Definition for Arrays with JSON References\nDESCRIPTION: Example of a YAML schema definition that defines an array type with prefixItems referencing another YAML schema file. This demonstrates the YAML support feature added in V4.1.\nSOURCE: https://github.com/corvus-dotnet/Corvus.JsonSchema/blob/main/README.md#2025-04-16_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\ntype: array\nprefixItems:\n  - $ref: ./positiveInt32.yaml\n  - type: string\n  - type: string\n    format: date-time\nunevaluatedItems: false\n```\n\n----------------------------------------\n\nTITLE: Setting Up Using Statements for JSON Document Creation in C#\nDESCRIPTION: Basic using statements required for working with the Corvus.Json library and the generated API classes. These imports enable access to System.Text.Json, Corvus.Json primitives, generated API types, and NodaTime for date handling.\nSOURCE: https://github.com/corvus-dotnet/Corvus.JsonSchema/blob/main/docs/GettingStartedWithJsonSchemaCodeGeneration.md#2025-04-16_snippet_38\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.Text.Json;\nusing Corvus.Json;\nusing JsonSchemaSample.Api;\nusing NodaTime;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating JSON Value States (Present, Null, Undefined)\nDESCRIPTION: Shows the three possible states of JSON values: present with a value, present with null, and undefined (not present at all). These states correspond to JsonValueKind enumeration values in the library.\nSOURCE: https://github.com/corvus-dotnet/Corvus.JsonSchema/blob/main/docs/GettingStartedWithJsonSchemaCodeGeneration.md#2025-04-16_snippet_28\n\nLANGUAGE: json\nCODE:\n```\n{ \"foo\": 3.14 } # Present with a non-null value\n{ \"foo\": null } # Present and null\n{}              # Not present\n```\n\n----------------------------------------\n\nTITLE: Using Generated Union Type Helpers\nDESCRIPTION: Shows how to use generated Is/As properties for union type checking and casting.\nSOURCE: https://github.com/corvus-dotnet/Corvus.JsonSchema/blob/main/docs/GettingStartedWithJsonSchemaCodeGeneration.md#2025-04-16_snippet_49\n\nLANGUAGE: csharp\nCODE:\n```\nOtherNames otherNames = michaelOldroyd.Name.OtherNames;\nif (otherNames.IsPersonNameElementArray)\n{\n    PersonNameElementArray otherNamesArray = otherNames.AsPersonNameElementArray;\n\n    // Use the array\n    otherNamesArray.EnumerateArray();\n}\n```\n\n----------------------------------------\n\nTITLE: Generating C# Types from a JSON Schema Document\nDESCRIPTION: This command generates C# code from a JSON schema document, targeting a specific schema element at #/$defs/Person and placing generated types in the JsonSchemaSample.Api namespace.\nSOURCE: https://github.com/corvus-dotnet/Corvus.JsonSchema/blob/main/docs/GettingStartedWithJsonSchemaCodeGeneration.md#2025-04-16_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\ngeneratejsonschematypes --rootNamespace JsonSchemaSample.Api --rootPath #/$defs/Person person-from-api.json\n```\n\n----------------------------------------\n\nTITLE: Validation-based Type Casting\nDESCRIPTION: Shows how to cast to PersonNameElementArray using IsValid() check for more robust type verification.\nSOURCE: https://github.com/corvus-dotnet/Corvus.JsonSchema/blob/main/docs/GettingStartedWithJsonSchemaCodeGeneration.md#2025-04-16_snippet_47\n\nLANGUAGE: csharp\nCODE:\n```\nif (michaelOldroyd.Name.OtherNames.As<PersonNameElementArray>().IsValid())\n{\n    PersonNameElementArray otherNames = michaelOldroyd.Name.OtherNames.As<PersonNameElementArray>();\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Input with Additional Properties\nDESCRIPTION: Example JSON input that includes both standard schema-defined properties and an additional property (occupation) that isn't defined in the schema but is allowed by default.\nSOURCE: https://github.com/corvus-dotnet/Corvus.JsonSchema/blob/main/docs/GettingStartedWithJsonSchemaCodeGeneration.md#2025-04-16_snippet_30\n\nLANGUAGE: csharp\nCODE:\n```\nstring jsonText = \n\"\"\"\n{\n    \"name\": {\n      \"familyName\": \"Oldroyd\",\n      \"givenName\": \"Michael\",\n      \"otherNames\": [\"Francis\", \"James\"]\n    },\n    \"occupation\": \"Farrier\",\n    \"dateOfBirth\": \"1944-07-14\"\n}\n\"\"\";\n```\n\n----------------------------------------\n\nTITLE: Person Object Creation\nDESCRIPTION: Creates a Person object from the parsed JsonDocument root element\nSOURCE: https://github.com/corvus-dotnet/Corvus.JsonSchema/blob/main/docs/GettingStartedWithJsonSchemaCodeGeneration.md#2025-04-16_snippet_20\n\nLANGUAGE: csharp\nCODE:\n```\nPerson michaelOldroyd = new(document.RootElement);\n```\n\n----------------------------------------\n\nTITLE: Filtering Well-Known JSON Properties in C#\nDESCRIPTION: Shows how to filter out well-known properties while enumerating JSON object properties using predefined JsonPropertyNames.\nSOURCE: https://github.com/corvus-dotnet/Corvus.JsonSchema/blob/main/docs/GettingStartedWithJsonSchemaCodeGeneration.md#2025-04-16_snippet_34\n\nLANGUAGE: csharp\nCODE:\n```\nforeach(JsonObjectProperty property in michaelOldroyd.EnumerateObject())\n{\n    if (property.NameEquals(Person.JsonPropertyNames.DateOfBirthUtf8) ||\n        property.NameEquals(Person.JsonPropertyNames.NameUtf8))\n    {\n        // Skip the properties we already know about\n        continue;\n    }\n\n    Console.WriteLine($\"{(string)property.Name}: {property.Value}\");\n}\n```\n\n----------------------------------------\n\nTITLE: Running the Command Line Validator\nDESCRIPTION: Example of using the new validateDocument command to validate a JSON document against a JSON schema from the command line.\nSOURCE: https://github.com/corvus-dotnet/Corvus.JsonSchema/blob/main/README.md#2025-04-16_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\ngeneratejsonschematypes validateDocument ./schema.json ./document_to_validate.json`\n```\n\n----------------------------------------\n\nTITLE: Installing JSON Schema Type Generator Tool via .NET CLI\nDESCRIPTION: Command to install the Corvus.Json.JsonSchema.TypeGeneratorTool as a global .NET tool, which enables the generation of C# types from JSON Schema files.\nSOURCE: https://github.com/corvus-dotnet/Corvus.JsonSchema/blob/main/README.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install --global Corvus.Json.JsonSchema.TypeGeneratorTool\n```\n\n----------------------------------------\n\nTITLE: Initializing JSON Document with Additional Properties in C#\nDESCRIPTION: Creates a JSON document string containing person details with additional properties like selfEmployed and salary.\nSOURCE: https://github.com/corvus-dotnet/Corvus.JsonSchema/blob/main/docs/GettingStartedWithJsonSchemaCodeGeneration.md#2025-04-16_snippet_32\n\nLANGUAGE: csharp\nCODE:\n```\nstring jsonText = \n\"\"\"\n{\n    \"name\": {\n      \"familyName\": \"Oldroyd\",\n      \"givenName\": \"Michael\",\n      \"otherNames\": [\"Francis\", \"James\"]\n    },\n    \"occupation\": \"Farrier\",\n    \"selfEmployed\": false,\n    \"salary\": 26000,\n    \"dateOfBirth\": \"1944-07-14\"\n}\n\"\"\";\n```\n\n----------------------------------------\n\nTITLE: Installing Corvus JSON Schema Generator Tool\nDESCRIPTION: Command to install the Corvus.Json.JsonSchema.TypeGeneratorTool globally using the .NET CLI\nSOURCE: https://github.com/corvus-dotnet/Corvus.JsonSchema/blob/main/docs/GettingStartedWithJsonSchemaCodeGeneration.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install --global Corvus.Json.JsonSchema.TypeGeneratorTool --prerelease\n```\n\n----------------------------------------\n\nTITLE: Base Person JSON Initialization in C#\nDESCRIPTION: Creates a basic JSON document string containing core person details for array enumeration example.\nSOURCE: https://github.com/corvus-dotnet/Corvus.JsonSchema/blob/main/docs/GettingStartedWithJsonSchemaCodeGeneration.md#2025-04-16_snippet_35\n\nLANGUAGE: csharp\nCODE:\n```\nstring jsonText = \n\"\"\"\n{\n    \"name\": {\n      \"familyName\": \"Oldroyd\",\n      \"givenName\": \"Michael\",\n      \"otherNames\": [\"Francis\", \"James\"]\n    },\n    \"dateOfBirth\": \"1944-07-14\"\n}\n\"\"\";\n\nvar michaelOldroyd = Person.Parse(jsonText);\n```\n\n----------------------------------------\n\nTITLE: Required Namespace Imports\nDESCRIPTION: Namespace imports for JSON processing, including System.Text.Json, Corvus.Json, and NodaTime for date handling\nSOURCE: https://github.com/corvus-dotnet/Corvus.JsonSchema/blob/main/docs/GettingStartedWithJsonSchemaCodeGeneration.md#2025-04-16_snippet_18\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.Text.Json;\nusing Corvus.Json;\nusing JsonSchemaSample.Api;\nusing NodaTime;\n```\n\n----------------------------------------\n\nTITLE: Configuring Explicit Global Usings in C# Source Generator\nDESCRIPTION: Example of the standard global usings that can be explicitly generated in the source files when using the --addExplicitUsings switch. This allows the generated code to be used in projects that don't have ImplicitUsings enabled.\nSOURCE: https://github.com/corvus-dotnet/Corvus.JsonSchema/blob/main/README.md#2025-04-16_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\nusing global::System;\nusing global::System.Collections.Generic;\nusing global::System.IO;\nusing global::System.Linq;\nusing global::System.Net.Http;\nusing global::System.Threading;\nusing global::System.Threading.Tasks;\n```\n\n----------------------------------------\n\nTITLE: Project Configuration for Source Generator in C#\nDESCRIPTION: Example project file configuration showing how to set up the Corvus.Json.SourceGenerator with AdditionalFiles to include JSON schema files for compile-time code generation.\nSOURCE: https://github.com/corvus-dotnet/Corvus.JsonSchema/blob/main/README.md#2025-04-16_snippet_15\n\nLANGUAGE: xml\nCODE:\n```\n<Project Sdk=\"Microsoft.NET.Sdk\">\n\n  <PropertyGroup>\n    <TargetFramework>net8.0</TargetFramework>\n    <ImplicitUsings>enable</ImplicitUsings>\n    <Nullable>enable</Nullable>\n    <EmitCompilerGeneratedFiles>true</EmitCompilerGeneratedFiles>\n  </PropertyGroup>\n\n  <ItemGroup>\n    <ProjectReference Include=\"..\\Corvus.Json.ExtendedTypes\\Corvus.Json.ExtendedTypes.csproj\" />\n    <ProjectReference\n        Include=\"..\\Corvus.Json.SourceGenerator\\Corvus.Json.SourceGenerator.csproj\"\n        OutputItemType=\"Analyzer\"\n        ReferenceOutputAssembly=\"false\"\n        SetTargetFramework=\"TargetFramework=netstandard2.0\" />\n  </ItemGroup>\n\n  <ItemGroup>\n    <AdditionalFiles Include=\"test.json\" />\n  </ItemGroup>\n\n</Project>\n```\n\n----------------------------------------\n\nTITLE: Sample Person Name JSON - Multiple Other Names\nDESCRIPTION: Example JSON showing how to represent a person's name with multiple other names as an array.\nSOURCE: https://github.com/corvus-dotnet/Corvus.JsonSchema/blob/main/docs/GettingStartedWithJsonSchemaCodeGeneration.md#2025-04-16_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"familyName\": \"Oldroyd\",\n    \"givenName\": \"Michael\",\n    \"otherNames\": [\"Francis\", \"James\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Source Generator Type in C#\nDESCRIPTION: Example code showing how to define a partial struct with the JsonSchemaTypeGenerator attribute to generate a type from a JSON schema file at compile time using the source generator.\nSOURCE: https://github.com/corvus-dotnet/Corvus.JsonSchema/blob/main/README.md#2025-04-16_snippet_16\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace SourceGenTest2.Model;\n\nusing Corvus.Json;\n\n[JsonSchemaTypeGenerator(\"../test.json\")]\npublic readonly partial struct FlimFlam\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Validation Results Output\nDESCRIPTION: The output of the validation command showing two validation errors: a negative value that violates the minimum constraint and an incorrectly formatted date-time string.\nSOURCE: https://github.com/corvus-dotnet/Corvus.JsonSchema/blob/main/README.md#2025-04-16_snippet_24\n\nLANGUAGE: text\nCODE:\n```\nValidation minimum - -1 is less than 0 (#/prefixItems/0/minimum, #/prefixItems/0, #/0, ./testdoc.json#1:4)\nValidation type - should have been 'string' with format 'datetime' but was 'Goodbye'. (#/prefixItems/2, , #/2, ./testdoc.json#3:4)\n```\n\n----------------------------------------\n\nTITLE: Checking JSON Value Kind for Array\nDESCRIPTION: Shows how to check if a JSON value is an array using ValueKind enumeration and casting to JsonArray.\nSOURCE: https://github.com/corvus-dotnet/Corvus.JsonSchema/blob/main/docs/GettingStartedWithJsonSchemaCodeGeneration.md#2025-04-16_snippet_45\n\nLANGUAGE: csharp\nCODE:\n```\nif (michaelOldroyd.Name.OtherNames.ValueKind == JsonValueKind.Array)\n{\n    JsonArray otherNames = michaelOldroyd.Name.OtherNames.AsArray();\n}\n```\n\n----------------------------------------\n\nTITLE: YAML Schema for Positive Integer Type Definition\nDESCRIPTION: A simple YAML schema defining a positive integer with int32 format and a minimum value of 0. This is referenced by the main schema in the previous example.\nSOURCE: https://github.com/corvus-dotnet/Corvus.JsonSchema/blob/main/README.md#2025-04-16_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\ntype: integer\nformat: int32\nminimum: 0\n```\n\n----------------------------------------\n\nTITLE: Explicit Type Casting for PersonNameElementArray\nDESCRIPTION: Demonstrates explicit type casting to PersonNameElementArray when the ValueKind is Array.\nSOURCE: https://github.com/corvus-dotnet/Corvus.JsonSchema/blob/main/docs/GettingStartedWithJsonSchemaCodeGeneration.md#2025-04-16_snippet_46\n\nLANGUAGE: csharp\nCODE:\n```\nif (michaelOldroyd.Name.OtherNames.ValueKind == JsonValueKind.Array)\n{\n    PersonNameElementArray otherNames = michaelOldroyd.Name.OtherNames.As<PersonNameElementArray>();\n}\n```\n\n----------------------------------------\n\nTITLE: Type and Scope Name Reservation in C# Code Generator\nDESCRIPTION: Code snippets showing name reservation for types and scopes. These calls ensure that type names and scope names don't conflict with other identifiers in the generated code.\nSOURCE: https://github.com/corvus-dotnet/Corvus.JsonSchema/blob/main/Solutions/Sandbox/TextFile1.txt#2025-04-16_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\ngenerator.ReserveNameIfNotReserved(dotnetTypeName);\n```\n\nLANGUAGE: C#\nCODE:\n```\n.ReserveNameIfNotReserved(dotnetTypeName) // Reserve the name of the containing scope in its own scope\n```\n\nLANGUAGE: C#\nCODE:\n```\n.ReserveNameIfNotReserved(name) // Reserve the name of the containing scope in its own scope\n```\n\nLANGUAGE: C#\nCODE:\n```\n.ReserveNameIfNotReserved(\"context\", childScope: scopeName);\n```\n\nLANGUAGE: C#\nCODE:\n```\n.ReserveNameIfNotReserved(\"defaultMatch\", childScope: scopeName);\n```\n\n----------------------------------------\n\nTITLE: CLI Help Output for JSON Schema Type Generator Tool\nDESCRIPTION: The help output displayed when running the generatejsonschematypes tool with the -h flag, showing all available arguments and options with their descriptions.\nSOURCE: https://github.com/corvus-dotnet/Corvus.JsonSchema/blob/main/README.md#2025-04-16_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nUSAGE:\n    generatejsonschematypes <schemaFile> [OPTIONS]\n\nARGUMENTS:\n    <schemaFile>    The path to the schema file to process\n\nOPTIONS:\n                                             DEFAULT\n    -h, --help                                               Prints help information\n        --rootNamespace                                      The default root namespace for generated types\n        --rootPath                                           The path in the document for the root type\n        --useSchema                          NotSpecified    Override the fallback schema variant to use. If\n                                                             NotSpecified, and it cannot be inferred from the schema\n                                                             itself, it will use Draft2020-12\n        --outputMapFile                                      The name to use for a map file which includes details of\n                                                             the files that were written\n        --outputPath                                         The path to which to write the generated code\n        --outputRootTypeName                                 The .NET type name for the root type\n        --rebaseToRootPath                                   If a --rootPath is specified, rebase the document as if it\n                                                             was rooted on the specified element\n        --assertFormat                       True            If --assertFormat is specified, assert format\n                                                             specifications\n        --disableOptionalNamingHeuristics                    Disables optional naming heuristics\n        --optionalAsNullable                 None            If NullOrUndefined, optional properties are emitted as .NET\n                                                             nullable values\n```\n\n----------------------------------------\n\nTITLE: Reserving Core Method and Property Names in C# Code Generation\nDESCRIPTION: Method calls to reserve names for fundamental properties and type conversion methods in the generated code. These include special values (Null, Undefined), type conversion methods (As* methods), and metadata properties.\nSOURCE: https://github.com/corvus-dotnet/Corvus.JsonSchema/blob/main/Solutions/Sandbox/TextFile1.txt#2025-04-16_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n.ReserveName(methodName) // Reserve the method name in the parent scope\n.ReserveName(\"SchemaLocation\")\n.ReserveName(\"Null\")\n.ReserveName(\"Undefined\")\n.ReserveName(\"DefaultInstance\")\n.ReserveName(\"ConstInstance\")\n.ReserveName(propertyName, suffix: \"Utf8\")\n.ReserveName(\"AsAny\")\n.ReserveName(\"AsJsonElement\")\n.ReserveName(\"AsString\")\n.ReserveName(\"AsBoolean\")\n.ReserveName(\"AsNumber\")\n.ReserveName(\"AsObject\")\n.ReserveName(\"AsArray\")\n.ReserveName(\"HasJsonElementBacking\")\n.ReserveName(\"HasDotnetBacking\")\n.ReserveName(\"ValueKind\")\n```\n\n----------------------------------------\n\nTITLE: Defining Internal Type with JsonSchemaTypeGenerator in C#\nDESCRIPTION: Example of using the JsonSchemaTypeGenerator attribute to generate an internal readonly partial struct from a JSON schema definition. The source generator will respect the internal accessibility declaration when generating code.\nSOURCE: https://github.com/corvus-dotnet/Corvus.JsonSchema/blob/main/README.md#2025-04-16_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\n[JsonSchemaTypeGenerator(\"../test.json#/$defs/FlimFlam\")]\ninternal readonly partial struct FlimFlam\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Reserving Numeric and String Operation Names in C# Code Generator\nDESCRIPTION: Name reservation for methods related to numeric comparisons, equality checks, and string operations like concatenation. These methods ensure proper handling of JSON numeric and string values in the generated code.\nSOURCE: https://github.com/corvus-dotnet/Corvus.JsonSchema/blob/main/Solutions/Sandbox/TextFile1.txt#2025-04-16_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\n.ReserveNameIfNotReserved(\"Compare\")\n```\n\nLANGUAGE: C#\nCODE:\n```\n.ReserveName(\"Concatenate\")\n```\n\nLANGUAGE: C#\nCODE:\n```\n.ReserveName(\"TryGetString\")\n```\n\n----------------------------------------\n\nTITLE: Output of Generated C# Files\nDESCRIPTION: This shows the complete list of C# files generated from the JSON schema, organized by schema definition and including class, validation, and type-specific implementation files.\nSOURCE: https://github.com/corvus-dotnet/Corvus.JsonSchema/blob/main/docs/GettingStartedWithJsonSchemaCodeGeneration.md#2025-04-16_snippet_13\n\nLANGUAGE: text\nCODE:\n```\nName\n----\nOtherNames.cs (#/$defs/OtherNames)\nOtherNames.Array.cs (#/$defs/OtherNames)\nOtherNames.String.cs (#/$defs/OtherNames)\nOtherNames.Validate.cs (#/$defs/OtherNames)\nPerson.cs (#/$defs/Person)\nPerson.Object.cs (#/$defs/Person)\nPerson.Validate.cs (#/$defs/Person)\nPersonName.cs (#/$defs/PersonName)\nPersonName.Object.cs (#/$defs/PersonName)\nPersonName.Validate.cs (#/$defs/PersonName)\nPersonNameElement.cs (#/$defs/PersonNameElement)\nPersonNameElement.String.cs (#/$defs/PersonNameElement)\nPersonNameElement.Validate.cs (#/$defs/PersonNameElement)\nPersonNameElementArray.cs (#/$defs/PersonNameElementArray)\nPersonNameElementArray.Array.cs (#/$defs/PersonNameElementArray)\nPersonNameElementArray.Validate.cs (#/$defs/PersonNameElementArray)\n```\n\n----------------------------------------\n\nTITLE: Reserving Boolean-Related Method Names in C# Code Generation\nDESCRIPTION: Method calls to reserve names specifically for boolean handling in the JSON schema code generation. These methods would be used to retrieve and validate boolean values from JSON data.\nSOURCE: https://github.com/corvus-dotnet/Corvus.JsonSchema/blob/main/Solutions/Sandbox/TextFile1.txt#2025-04-16_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n.ReserveName(\"TryGetBoolean\")\n.ReserveName(\"GetBoolean\")\n```\n\n----------------------------------------\n\nTITLE: Running Corvus.Json.JsonSchema.TypeGeneratorTool to Generate Model Types\nDESCRIPTION: Command line syntax for the TypeGeneratorTool to generate C# types from basictypes.json schema. The command specifies the root namespace, output path, and the source JSON schema file.\nSOURCE: https://github.com/corvus-dotnet/Corvus.JsonSchema/blob/main/Solutions/Corvus.Json.Specs/Features/JsonModel/V3Interop/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n --rootNamespace Model.V3 --outputPath Model.V3 .\\basictypes.json\n```\n\n----------------------------------------\n\nTITLE: String Method Name Reservations\nDESCRIPTION: Method name reservations for basic string operations including GetString, EqualsUtf8Bytes, and EqualsString.\nSOURCE: https://github.com/corvus-dotnet/Corvus.JsonSchema/blob/main/Solutions/Sandbox/TextFile1.txt#2025-04-16_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\n.ReserveName(\"GetString\")\n.ReserveName(\"EqualsUtf8Bytes\")\n.ReserveName(\"EqualsString\")\n```\n\n----------------------------------------\n\nTITLE: Format Method Name Reservations\nDESCRIPTION: Method name reservations for string formatting and conversion operations including TryFormat and ToString.\nSOURCE: https://github.com/corvus-dotnet/Corvus.JsonSchema/blob/main/Solutions/Sandbox/TextFile1.txt#2025-04-16_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\n.ReserveNameIfNotReserved(\"TryFormat\")\n.ReserveNameIfNotReserved(\"ToString\")\n.ReserveNameIfNotReserved(\"GetHashCode\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Generator Properties in C# Project\nDESCRIPTION: Example of how to configure the source generator using project properties, showing how to set the optional-as-nullable behavior.\nSOURCE: https://github.com/corvus-dotnet/Corvus.JsonSchema/blob/main/README.md#2025-04-16_snippet_18\n\nLANGUAGE: xml\nCODE:\n```\n<PropertyGroup>\n   <CorvusJsonSchemaOptionalAsNullable>None</CorvusJsonSchemaOptionalAsNullable>\n</PropertyGroup>\n```\n\n----------------------------------------\n\nTITLE: Base64 Method Name Reservations\nDESCRIPTION: Method name reservations for Base64 encoding and decoding operations.\nSOURCE: https://github.com/corvus-dotnet/Corvus.JsonSchema/blob/main/Solutions/Sandbox/TextFile1.txt#2025-04-16_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\n.ReserveNameIfNotReserved(\"GetDecodedBufferSize\")\n.ReserveNameIfNotReserved(\"TryGetDecodedBase64Bytes\")\n.ReserveNameIfNotReserved(\"GetDecodedBase64Bytes\")\n.ReserveNameIfNotReserved(\"HasBase64Bytes\")\n```\n\n----------------------------------------\n\nTITLE: OtherNames Schema Definition\nDESCRIPTION: JSON Schema definition showing oneOf union type for OtherNames property.\nSOURCE: https://github.com/corvus-dotnet/Corvus.JsonSchema/blob/main/docs/GettingStartedWithJsonSchemaCodeGeneration.md#2025-04-16_snippet_48\n\nLANGUAGE: json\nCODE:\n```\n\"OtherNames\": {\n    \"oneOf\": [\n        { \"$ref\": \"#/$defs/PersonNameElement\" },\n        { \"$ref\": \"#/$defs/PersonNameElementArray\" }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Data Type Conversion Method Reservations\nDESCRIPTION: Method name reservations for converting between various data types including GUID, IP Address, DateTime, and URI.\nSOURCE: https://github.com/corvus-dotnet/Corvus.JsonSchema/blob/main/Solutions/Sandbox/TextFile1.txt#2025-04-16_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\n.ReserveNameIfNotReserved(\"GetGuid\")\n.ReserveName(\"TryGetGuid\")\n.ReserveNameIfNotReserved(\"GetIPAddress\")\n.ReserveName(\"TryGetIPAddress\")\n.ReserveNameIfNotReserved(\"GetDateTime\")\n.ReserveName(\"TryGetDateTime\")\n.ReserveNameIfNotReserved(\"GetUri\")\n.ReserveName(\"TryGetUri\")\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Document for Validation\nDESCRIPTION: An example JSON document containing an array with three items that will be validated against the schema, demonstrating validation failures.\nSOURCE: https://github.com/corvus-dotnet/Corvus.JsonSchema/blob/main/README.md#2025-04-16_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n[\n    -1,\n    \"Hello\",\n    \"Goodbye\"\n]\n```\n\n----------------------------------------\n\nTITLE: Viewing Help Output for JSON Schema Generator\nDESCRIPTION: This shows the complete help output for the generatejsonschematypes tool, including all available command line arguments and options with their descriptions.\nSOURCE: https://github.com/corvus-dotnet/Corvus.JsonSchema/blob/main/docs/GettingStartedWithJsonSchemaCodeGeneration.md#2025-04-16_snippet_10\n\nLANGUAGE: text\nCODE:\n```\nUSAGE:\n    generatejsonschematypes <schemaFile> [OPTIONS]\n\nARGUMENTS:\n    <schemaFile>    The path to the schema file to process\n\nOPTIONS:\n                                             DEFAULT\n    -h, --help                                               Prints help information\n        --rootNamespace                                      The default root namespace for generated types\n        --rootPath                                           The path in the document for the root type\n        --useSchema                          NotSpecified    Override the fallback schema variant to use. If\n                                                             NotSpecified, and it cannot be inferred from the schema\n                                                             itself, it will use Draft2020-12\n        --outputMapFile                                      The name to use for a map file which includes details of\n                                                             the files that were written\n        --outputPath                                         The path to which to write the generated code\n        --outputRootTypeName                                 The .NET type name for the root type\n        --rebaseToRootPath                                   If a --rootPath is specified, rebase the document as if it\n                                                             was rooted on the specified element\n        --assertFormat                       True            If --assertFormat is specified, assert format\n                                                             specifications\n        --disableOptionalNamingHeuristics                    Disables optional naming heuristics\n        --optionalAsNullable                 None            If NullOrUndefined, optional properties are emitted as .NET\n                                                             nullable values\n```\n\n----------------------------------------\n\nTITLE: Reserving Object-Related Method Names in C# Code Generator\nDESCRIPTION: Name reservation for methods related to JSON object handling. These include property access, enumeration, and object construction methods that are essential for working with JSON objects in the generated code.\nSOURCE: https://github.com/corvus-dotnet/Corvus.JsonSchema/blob/main/Solutions/Sandbox/TextFile1.txt#2025-04-16_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\n.ReserveNameIfNotReserved(\"AsPropertyBacking\")\n```\n\nLANGUAGE: C#\nCODE:\n```\n.ReserveNameIfNotReserved(\"Count\")\n```\n\nLANGUAGE: C#\nCODE:\n```\n.ReserveNameIfNotReserved(\"GetEnumerator\")\n```\n\nLANGUAGE: C#\nCODE:\n```\n.ReserveNameIfNotReserved(\"EnumerateObject\");\n```\n\nLANGUAGE: C#\nCODE:\n```\n.ReserveNameIfNotReserved(\"FromProperties\");\n```\n\nLANGUAGE: C#\nCODE:\n```\n.ReserveNameIfNotReserved(\"HasProperties\")\n```\n\nLANGUAGE: C#\nCODE:\n```\n.ReserveNameIfNotReserved(\"HasProperty\")\n```\n\nLANGUAGE: C#\nCODE:\n```\n.ReserveNameIfNotReserved(\"TryGetProperty\")\n```\n\nLANGUAGE: C#\nCODE:\n```\n.ReserveNameIfNotReserved(\"RemoveProperty\")\n```\n\nLANGUAGE: C#\nCODE:\n```\n.ReserveNameIfNotReserved(\"SetProperty\");\n```\n\nLANGUAGE: C#\nCODE:\n```\n.ReserveNameIfNotReserved(\"__CorvusObjectHelpers\")\n```\n\n----------------------------------------\n\nTITLE: Running the JSON Schema Code Generator Help Command\nDESCRIPTION: This command displays the help information for the generatejsonschematypes tool, showing all available options and parameters.\nSOURCE: https://github.com/corvus-dotnet/Corvus.JsonSchema/blob/main/docs/GettingStartedWithJsonSchemaCodeGeneration.md#2025-04-16_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ngeneratejsonschematypes -h\n```\n\n----------------------------------------\n\nTITLE: Code Generator Name Reservation Methods\nDESCRIPTION: Core methods for handling name reservation in the code generator. Includes methods to reserve names absolutely or conditionally, with failure handling.\nSOURCE: https://github.com/corvus-dotnet/Corvus.JsonSchema/blob/main/Solutions/Sandbox/TextFile1.txt#2025-04-16_snippet_12\n\nLANGUAGE: C#\nCODE:\n```\npublic CodeGenerator ReserveName(MemberName memberName)\n{\n    if (!this.TryReserveName(memberName))\n    {\n        throw new InvalidOperationException();\n    }\n    return this;\n}\n\npublic CodeGenerator ReserveNameIfNotReserved(MemberName memberName)\n{\n    this.TryReserveName(memberName);\n    return this;\n}\n\npublic bool TryReserveName(MemberName memberName)\n```\n\n----------------------------------------\n\nTITLE: Verifying JSON Schema Type Generator Tool Installation\nDESCRIPTION: Command to verify that the JSON Schema type generator tool is correctly installed by displaying its help information.\nSOURCE: https://github.com/corvus-dotnet/Corvus.JsonSchema/blob/main/README.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngeneratejsonschematypes -h\n```\n\n----------------------------------------\n\nTITLE: Name Reservation Extension Methods in C# Code Generator\nDESCRIPTION: Declaration of extension methods for name reservation in the code generator. These methods handle the logic of reserving names and checking if names are already reserved to prevent conflicts.\nSOURCE: https://github.com/corvus-dotnet/Corvus.JsonSchema/blob/main/Solutions/Sandbox/TextFile1.txt#2025-04-16_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\npublic static CodeGenerator ReserveName(\n```\n\nLANGUAGE: C#\nCODE:\n```\nreturn generator.ReserveName(\n```\n\nLANGUAGE: C#\nCODE:\n```\npublic static CodeGenerator ReserveNameIfNotReserved(\n```\n\nLANGUAGE: C#\nCODE:\n```\nreturn generator.ReserveNameIfNotReserved(\n```\n\nLANGUAGE: C#\nCODE:\n```\npublic static bool TryReserveName(\n```\n\nLANGUAGE: C#\nCODE:\n```\nreturn generator.TryReserveName(\n```\n\n----------------------------------------\n\nTITLE: Building the Generated Code Project\nDESCRIPTION: These commands navigate back to the project root directory and build the project using the .NET CLI.\nSOURCE: https://github.com/corvus-dotnet/Corvus.JsonSchema/blob/main/docs/GettingStartedWithJsonSchemaCodeGeneration.md#2025-04-16_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\ncd ..\ndotnet build\n```\n\n----------------------------------------\n\nTITLE: Reserving Array-Related Method Names in C# Code Generation\nDESCRIPTION: Various method calls to reserve names for array-related functionality in the JSON schema code generation system. These include basic array properties, collection methods, and enumeration capabilities.\nSOURCE: https://github.com/corvus-dotnet/Corvus.JsonSchema/blob/main/Solutions/Sandbox/TextFile1.txt#2025-04-16_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n.ReserveName(\"EmptyArray\")\n.ReserveName(\"Rank\")\n.ReserveName(\"Dimension\")\n.ReserveName(\"ValueBufferSize\")\n.ReserveName(\"TryGetNumericValues\")\n.ReserveName($\"Item{i + 1}\")\n.ReserveNameIfNotReserved(\"Add\")\n.ReserveNameIfNotReserved(\"Insert\")\n.ReserveNameIfNotReserved(\"AddRange\")\n.ReserveNameIfNotReserved(\"InsertRange\")\n.ReserveNameIfNotReserved(\"Remove\")\n.ReserveNameIfNotReserved(\"RemoveAt\")\n.ReserveNameIfNotReserved(\"RemoveRange\")\n.ReserveName(\"__CorvusArrayHelpers\")\n.ReserveNameIfNotReserved(\"EnumerateArray\")\n.ReserveNameIfNotReserved(\"EnumerateArray\")\n.ReserveNameIfNotReserved(\"EnumerateArray\")\n.ReserveNameIfNotReserved(\"GetArrayLength\")\n.ReserveNameIfNotReserved(\"AsImmutableList\")\n.ReserveNameIfNotReserved(\"AsImmutableListBuilder\")\n.ReserveNameIfNotReserved(\"GetEnumerator\")\n.ReserveNameIfNotReserved(\"Count\")\n.ReserveNameIfNotReserved(\"Create\")\n.ReserveNameIfNotReserved(\"From\")\n.ReserveNameIfNotReserved(\"Create\")\n.ReserveNameIfNotReserved(\"FromItems\")\n.ReserveNameIfNotReserved(\"FromValues\")\n.ReserveNameIfNotReserved(\"FromRange\")\n.ReserveNameIfNotReserved(\"FromRange\")\n.ReserveNameIfNotReserved(\"FromRange\")\n```\n\n----------------------------------------\n\nTITLE: Listing Generated C# Files\nDESCRIPTION: This command lists all the C# files that were generated by the JSON schema code generator tool.\nSOURCE: https://github.com/corvus-dotnet/Corvus.JsonSchema/blob/main/docs/GettingStartedWithJsonSchemaCodeGeneration.md#2025-04-16_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nls *.cs\n```\n\n----------------------------------------\n\nTITLE: Reserving Method Names in C# Code Generator\nDESCRIPTION: Various method calls to reserve common method names in the code generator to prevent naming conflicts. These include methods like 'CreateFromSerializedInstance', 'FromJson', 'Parse', and others that are typical in JSON processing libraries.\nSOURCE: https://github.com/corvus-dotnet/Corvus.JsonSchema/blob/main/Solutions/Sandbox/TextFile1.txt#2025-04-16_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n.ReserveName(\"CreateFromSerializedInstance\")\n```\n\nLANGUAGE: C#\nCODE:\n```\n.ReserveName(\"FromJson\")\n```\n\nLANGUAGE: C#\nCODE:\n```\n.ReserveName(\"FromAny\")\n```\n\nLANGUAGE: C#\nCODE:\n```\n.ReserveName($\"From{jsonValueTypeBaseName}\")\n```\n\nLANGUAGE: C#\nCODE:\n```\n.ReserveNameIfNotReserved(\"Parse\")\n```\n\nLANGUAGE: C#\nCODE:\n```\n.ReserveNameIfNotReserved(\"As\")\n```\n\nLANGUAGE: C#\nCODE:\n```\n.ReserveName(\"WriteTo\")\n```\n\nLANGUAGE: C#\nCODE:\n```\n.ReserveNameIfNotReserved(\"Equals\")\n```\n\nLANGUAGE: C#\nCODE:\n```\n.ReserveNameIfNotReserved(\"ParseValue\")\n```\n\nLANGUAGE: C#\nCODE:\n```\n.ReserveNameIfNotReserved(\"Validate\")\n```\n\nLANGUAGE: C#\nCODE:\n```\n.ReserveNameIfNotReserved(\"Match\")\n```\n\n----------------------------------------\n\nTITLE: Project File Configuration\nDESCRIPTION: The .NET project file showing configuration for a console application with Corvus.Json.ExtendedTypes package reference\nSOURCE: https://github.com/corvus-dotnet/Corvus.JsonSchema/blob/main/docs/GettingStartedWithJsonSchemaCodeGeneration.md#2025-04-16_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<Project Sdk=\"Microsoft.NET.Sdk\">\n\n  <PropertyGroup>\n    <OutputType>Exe</OutputType>\n    <TargetFramework>net8.0</TargetFramework>\n    <ImplicitUsings>enable</ImplicitUsings>\n    <Nullable>enable</Nullable>\n  </PropertyGroup>\n\n  <ItemGroup>\n    <PackageReference Include=\"Corvus.Json.ExtendedTypes\" Version=\"4.0.0\" />\n  </ItemGroup>\n\n</Project>\n```\n\n----------------------------------------\n\nTITLE: Variable Name Reservations for JSON Validation\nDESCRIPTION: Collection of variable name reservations used across different validation contexts including array, object, and type validations.\nSOURCE: https://github.com/corvus-dotnet/Corvus.JsonSchema/blob/main/Solutions/Sandbox/TextFile1.txt#2025-04-16_snippet_13\n\nLANGUAGE: C#\nCODE:\n```\n.ReserveName(\"isValid\")\n.ReserveName(\"result\")\n.ReserveName(\"length\")\n.ReserveName(\"arrayEnumerator\")\n.ReserveName(\"valueKind\")\n.ReserveName(\"propertyCount\")\n.ReserveName(\"objectEnumerator\")\n.ReserveName(\"propertyNameAsString\")\n```\n\n----------------------------------------\n\nTITLE: Adding Corvus JSON Package Reference\nDESCRIPTION: Command to add the Corvus.Json.ExtendedTypes package to the project\nSOURCE: https://github.com/corvus-dotnet/Corvus.JsonSchema/blob/main/docs/GettingStartedWithJsonSchemaCodeGeneration.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Corvus.Json.ExtendedTypes\n```\n\n----------------------------------------\n\nTITLE: Sample Person Name JSON - Single Other Name\nDESCRIPTION: Example JSON showing how to represent a person's name with a single other name string.\nSOURCE: https://github.com/corvus-dotnet/Corvus.JsonSchema/blob/main/docs/GettingStartedWithJsonSchemaCodeGeneration.md#2025-04-16_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"familyName\": \"Oldroyd\",\n    \"givenName\": \"Michael\",\n    \"otherNames\": \"Francis James\"\n}\n```\n\n----------------------------------------\n\nTITLE: Initial Console Application Code\nDESCRIPTION: Default console application code that prints 'Hello, World!'\nSOURCE: https://github.com/corvus-dotnet/Corvus.JsonSchema/blob/main/docs/GettingStartedWithJsonSchemaCodeGeneration.md#2025-04-16_snippet_17\n\nLANGUAGE: csharp\nCODE:\n```\n// See https://aka.ms/new-console-template for more information\nConsole.WriteLine(\"Hello, World!\");\n```\n\n----------------------------------------\n\nTITLE: Updating Git Submodules for JSON Schema Test Suite\nDESCRIPTION: Commands to initialize and update Git submodules for the JSON-Schema-Test-Suite repository, which is used for testing JSON Schema validation in the project.\nSOURCE: https://github.com/corvus-dotnet/Corvus.JsonSchema/blob/main/README.md#2025-04-16_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ngit submodule update --init --recursive\n```\n\n----------------------------------------\n\nTITLE: Default Application Output\nDESCRIPTION: The default output from the application showing the standard greeting message.\nSOURCE: https://github.com/corvus-dotnet/Corvus.JsonSchema/blob/main/docs/GettingStartedWithJsonSchemaCodeGeneration.md#2025-04-16_snippet_16\n\nLANGUAGE: text\nCODE:\n```\nHello, World!\n```\n\n----------------------------------------\n\nTITLE: Updating to Latest JSON Schema Test Suite\nDESCRIPTION: Git commands to update the JSON-Schema-Test-Suite submodule to the latest version from the main branch, allowing the project to test against the most recent JSON Schema test cases.\nSOURCE: https://github.com/corvus-dotnet/Corvus.JsonSchema/blob/main/README.md#2025-04-16_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncd JSON-Schema-Test-Suite\ngit fetch\ngit merge origin/main\ncd ..\ngit commit -a -m \"Updated to the lastest JSON Schema Test Suite\"\n```\n\n----------------------------------------\n\nTITLE: Shell Commands for Project Setup\nDESCRIPTION: Command line instructions for creating the project directory structure and setting up the schema file.\nSOURCE: https://github.com/corvus-dotnet/Corvus.JsonSchema/blob/main/docs/GettingStartedWithJsonSchemaCodeGeneration.md#2025-04-16_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nmkdir api\ncd api\ncode person-from-api.json\n```\n\n----------------------------------------\n\nTITLE: Creating New .NET Console Project\nDESCRIPTION: Commands to create a new .NET 8.0 console application and navigate to its directory\nSOURCE: https://github.com/corvus-dotnet/Corvus.JsonSchema/blob/main/docs/GettingStartedWithJsonSchemaCodeGeneration.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndotnet new console -o JsonSchemaSample -f net8.0\ncd JsonSchemaSample\n```\n\n----------------------------------------\n\nTITLE: Opening Project File in VS Code\nDESCRIPTION: Command to open the project file in Visual Studio Code\nSOURCE: https://github.com/corvus-dotnet/Corvus.JsonSchema/blob/main/docs/GettingStartedWithJsonSchemaCodeGeneration.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncode JsonSchemaSample.csproj\n```\n\n----------------------------------------\n\nTITLE: Running the Built Application\nDESCRIPTION: This command runs the compiled application, which at this point only displays a standard 'Hello, World!' message.\nSOURCE: https://github.com/corvus-dotnet/Corvus.JsonSchema/blob/main/docs/GettingStartedWithJsonSchemaCodeGeneration.md#2025-04-16_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\n.\\bin\\Debug\\net8.0\\JsonSchemaSample.exe\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using SourceGeneratorHelpers in C#\nDESCRIPTION: This snippet demonstrates how to initialize and use SourceGeneratorHelpers in a source generator. It shows the setup of document resolvers, vocabulary registry, and the process of generating code from JSON schema.\nSOURCE: https://github.com/corvus-dotnet/Corvus.JsonSchema/blob/main/Solutions/Corvus.Json.SourceGeneratorTools/README.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n    private static readonly IDocumentResolver MetaSchemaResolver = CreateMetaSchemaResolver();\n    private static readonly VocabularyRegistry VocabularyRegistry = CreateVocabularyRegistry(MetaSchemaResolver);\n\n    public void Initialize(IncrementalGeneratorInitializationContext initializationContext)\n    {\n        // Get global options\n        IncrementalValueProvider<SourceGeneratorHelpers.GlobalOptions> globalOptions = initializationContext.AnalyzerConfigOptionsProvider.Select(GetGlobalOptions);\n\n        IncrementalValuesProvider<AdditionalText> jsonSourceFiles = initializationContext.AdditionalTextsProvider.Where(p => p.Path.EndsWith(\".json\"));\n\n        IncrementalValueProvider<IDocumentResolver> documentResolver = jsonSourceFiles.Collect().Select(SourceGeneratorHelpers.BuildDocumentResolver);\n\n        IncrementalValueProvider<SourceGeneratorHelpers.GenerationContext> generationContext = documentResolver.Combine(globalOptions).Select((r, c) => new SourceGeneratorHelpers.GenerationContext(r.Left, r.Right));\n\n        // Typically built from e.g. attributes or other syntax on partial classes.\n        IncrementalValuesProvider<SourceGeneratorHelpers.GenerationSpecification> generationSpecifications = BuildGenerationSpecifications();\n            \n        IncrementalValueProvider<SourceGeneratorHelpers.TypesToGenerate> typesToGenerate = generationSpecifications.Collect().Combine(generationContext).Select((c, t) => new SourceGeneratorHelpers.TypesToGenerate(c.Left, c.Right));\n\n        initializationContext.RegisterSourceOutput(typesToGenerate, GenerateCode);\n    }\n\n    private static void GenerateCode(SourceProductionContext context, SourceGeneratorHelpers.TypesToGenerate generationSource)\n    {\n        SourceGeneratorHelpers.GenerateCode(context, generationSource, VocabularyRegistry);\n    }\n```"
  }
]