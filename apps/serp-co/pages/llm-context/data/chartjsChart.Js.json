[
  {
    "owner": "chartjs",
    "repo": "chart.js",
    "content": "TITLE: Creating a Bar Chart with Chart.js in HTML\nDESCRIPTION: This snippet demonstrates how to create a basic bar chart using Chart.js. It includes the HTML structure, Chart.js CDN inclusion, and JavaScript code to initialize and configure the chart. The chart displays vote counts for different colors.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/getting-started/index.md#2025-04-08_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div>\n  <canvas id=\"myChart\"></canvas>\n</div>\n\n<script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n\n<script>\n  const ctx = document.getElementById('myChart');\n\n  new Chart(ctx, {\n    type: 'bar',\n    data: {\n      labels: ['Red', 'Blue', 'Yellow', 'Green', 'Purple', 'Orange'],\n      datasets: [{\n        label: '# of Votes',\n        data: [12, 19, 3, 5, 2, 3],\n        borderWidth: 1\n      }]\n    },\n    options: {\n      scales: {\n        y: {\n          beginAtZero: true\n        }\n      }\n    }\n  });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Initializing and Configuring a Chart.js Bar Chart\nDESCRIPTION: This JavaScript code creates a new Chart.js bar chart. It selects the canvas element, specifies the chart type as 'bar', sets up data with labels and datasets, and configures options such as setting the y-axis to begin at zero.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/getting-started/index.md#2025-04-08_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst ctx = document.getElementById('myChart');\n\nnew Chart(ctx, {\n  type: 'bar',\n  data: {\n    labels: ['Red', 'Blue', 'Yellow', 'Green', 'Purple', 'Orange'],\n    datasets: [{\n      label: '# of Votes',\n      data: [12, 19, 3, 5, 2, 3],\n      borderWidth: 1\n    }]\n  },\n  options: {\n    scales: {\n      y: {\n        beginAtZero: true\n      }\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Including Chart.js from CDN\nDESCRIPTION: This HTML snippet demonstrates how to include Chart.js library from a CDN (Content Delivery Network) in an HTML file.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/getting-started/index.md#2025-04-08_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Bar Chart with Chart.js\nDESCRIPTION: This snippet demonstrates how to set up a basic bar chart using Chart.js. It includes data setup with labels, dataset configuration, and chart options. The chart displays monthly data with colored bars and customized scales.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/charts/bar.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// <block:setup:1>\nconst labels = Utils.months({count: 7});\nconst data = {\n  labels: labels,\n  datasets: [{\n    label: 'My First Dataset',\n    data: [65, 59, 80, 81, 56, 55, 40],\n    backgroundColor: [\n      'rgba(255, 99, 132, 0.2)',\n      'rgba(255, 159, 64, 0.2)',\n      'rgba(255, 205, 86, 0.2)',\n      'rgba(75, 192, 192, 0.2)',\n      'rgba(54, 162, 235, 0.2)',\n      'rgba(153, 102, 255, 0.2)',\n      'rgba(201, 203, 207, 0.2)'\n    ],\n    borderColor: [\n      'rgb(255, 99, 132)',\n      'rgb(255, 159, 64)',\n      'rgb(255, 205, 86)',\n      'rgb(75, 192, 192)',\n      'rgb(54, 162, 235)',\n      'rgb(153, 102, 255)',\n      'rgb(201, 203, 207)'\n    ],\n    borderWidth: 1\n  }]\n};\n// </block:setup>\n\n// <block:config:0>\nconst config = {\n  type: 'bar',\n  data: data,\n  options: {\n    scales: {\n      y: {\n        beginAtZero: true\n      }\n    }\n  },\n};\n// </block:config>\n\nmodule.exports = {\n  actions: [],\n  config: config,\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Chart.js Configuration Structure\nDESCRIPTION: Demonstrates the top-level structure of a Chart.js configuration object, including the main properties: type, data, options, and plugins.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/configuration/index.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n  type: 'line',\n  data: {},\n  options: {},\n  plugins: []\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Chart.js Bar Chart\nDESCRIPTION: Enhanced version of the bar chart with customized options to disable animations, legend, and tooltips.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/getting-started/usage.md#2025-04-08_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n  new Chart(\n    document.getElementById('acquisitions'),\n    {\n      type: 'bar',\n      options: {\n        animation: false,\n        plugins: {\n          legend: {\n            display: false\n          },\n          tooltip: {\n            enabled: false\n          }\n        }\n      },\n      data: {\n        labels: data.map(row => row.year),\n        datasets: [\n          {\n            label: 'Acquisitions by year',\n            data: data.map(row => row.count)\n          }\n        ]\n      }\n    }\n  );\n```\n\n----------------------------------------\n\nTITLE: Installing Chart.js via npm\nDESCRIPTION: Command to install Chart.js using the Node Package Manager (npm). This is the recommended method for projects using npm as their package manager.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/getting-started/installation.md#2025-04-08_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install chart.js\n```\n\n----------------------------------------\n\nTITLE: Selective Component Import for Bubble Chart in Chart.js\nDESCRIPTION: This snippet demonstrates how to selectively import and register only the required components for a bubble chart in Chart.js, further optimizing the bundle size through tree-shaking.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/getting-started/usage.md#2025-04-08_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n  Chart,\n  Colors,\n  BubbleController,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  Legend\n} from 'chart.js'\n\nChart.register(\n  Colors,\n  BubbleController,\n  PointElement,\n  CategoryScale,\n  LinearScale,\n  Legend\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing a Basic Line Chart in Chart.js\nDESCRIPTION: This code snippet demonstrates how to set up a basic line chart using Chart.js. It includes data setup with labels and a single dataset, as well as the chart configuration specifying the chart type as 'line'.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/charts/line.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// <block:setup:1>\nconst labels = Utils.months({count: 7});\nconst data = {\n  labels: labels,\n  datasets: [{\n    label: 'My First Dataset',\n    data: [65, 59, 80, 81, 56, 55, 40],\n    fill: false,\n    borderColor: 'rgb(75, 192, 192)',\n    tension: 0.1\n  }]\n};\n// </block:setup>\n\n// <block:config:0>\nconst config = {\n  type: 'line',\n  data: data,\n};\n// </block:config>\n\nmodule.exports = {\n  actions: [],\n  config: config,\n};\n```\n\n----------------------------------------\n\nTITLE: Loading Chart.js via Script Tag\nDESCRIPTION: Basic integration of Chart.js using a standard HTML script tag and initializing a chart instance.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/getting-started/integration.md#2025-04-08_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"path/to/chartjs/dist/chart.umd.js\"></script>\n<script>\n    const myChart = new Chart(ctx, {...});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Creating Stacked Area Chart in Chart.js\nDESCRIPTION: Demonstrates how to configure a line chart as a stacked area chart by enabling stacking on the y-axis scale.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/charts/line.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst stackedLine = new Chart(ctx, {\n    type: 'line',\n    data: data,\n    options: {\n        scales: {\n            y: {\n                stacked: true\n            }\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing a Chart.js Line Chart\nDESCRIPTION: Creates a new Chart.js line chart instance using the Chart constructor.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/developers/api.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst myLineChart = new Chart(ctx, config);\n```\n\n----------------------------------------\n\nTITLE: Setting Default Line Chart Options in Chart.js\nDESCRIPTION: Shows how to configure global default settings for all line charts by modifying Chart.overrides.line property.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/charts/line.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nChart.overrides.line.spanGaps = true;\n```\n\n----------------------------------------\n\nTITLE: Initializing Scatter Chart with Chart.js\nDESCRIPTION: Creates a basic scatter chart with 4 data points using Chart.js. The example demonstrates setting up the data structure, configuring chart options, and defining the scatter plot type with a linear x-axis.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/charts/scatter.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// <block:setup:1>\nconst data = {\n  datasets: [{\n    label: 'Scatter Dataset',\n    data: [{\n      x: -10,\n      y: 0\n    }, {\n      x: 0,\n      y: 10\n    }, {\n      x: 10,\n      y: 5\n    }, {\n      x: 0.5,\n      y: 5.5\n    }],\n    backgroundColor: 'rgb(255, 99, 132)'\n  }],\n};\n// </block:setup>\n\n// <block:config:0>\nconst config = {\n  type: 'scatter',\n  data: data,\n  options: {\n    scales: {\n      x: {\n        type: 'linear',\n        position: 'bottom'\n      }\n    }\n  }\n};\n// </block:config>\n\nmodule.exports = {\n  actions: [],\n  config: config,\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Looping Tension Animation in Chart.js Line Chart\nDESCRIPTION: This example demonstrates how to create a line chart with a looping tension animation. It configures a linear tension animation that cycles between values 1 and 0 with a duration of 1000ms.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/configuration/animations.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// <block:setup:1>\nconst data = {\n  labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\n  datasets: [{\n    label: 'Looping tension',\n    data: [65, 59, 80, 81, 26, 55, 40],\n    fill: false,\n    borderColor: 'rgb(75, 192, 192)',\n  }]\n};\n// </block:setup>\n\n// <block:config:0>\nconst config = {\n  type: 'line',\n  data: data,\n  options: {\n    animations: {\n      tension: {\n        duration: 1000,\n        easing: 'linear',\n        from: 1,\n        to: 0,\n        loop: true\n      }\n    },\n    scales: {\n      y: { // defining min and max so hiding the dataset does not change scale range\n        min: 0,\n        max: 100\n      }\n    }\n  }\n};\n// </block:config>\n\nmodule.exports = {\n  actions: [],\n  config: config,\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Doughnut Chart with Chart.js\nDESCRIPTION: Example configuration for creating a doughnut chart with three color segments. Sets up data structure with labels, values, and colors, then configures the chart type as 'doughnut'.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/charts/doughnut.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// <block:setup:1>\nconst data = {\n  labels: [\n    'Red',\n    'Blue',\n    'Yellow'\n  ],\n  datasets: [{\n    label: 'My First Dataset',\n    data: [300, 50, 100],\n    backgroundColor: [\n      'rgb(255, 99, 132)',\n      'rgb(54, 162, 235)',\n      'rgb(255, 205, 86)'\n    ],\n    hoverOffset: 4\n  }]\n};\n// </block:setup>\n\n// <block:config:0>\nconst config = {\n  type: 'doughnut',\n  data: data,\n};\n// </block:config>\n\nmodule.exports = {\n  actions: [],\n  config: config,\n};\n```\n\n----------------------------------------\n\nTITLE: Destroying a Chart.js Instance\nDESCRIPTION: Demonstrates how to destroy a specific chart instance, cleaning up references and event listeners.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/developers/api.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmyLineChart.destroy();\n```\n\n----------------------------------------\n\nTITLE: Implementing Animation Callbacks with Progress Bar in Chart.js\nDESCRIPTION: This snippet shows how to use animation callbacks in Chart.js to track animation progress. It demonstrates updating a progress bar during chart animation by using the onProgress callback.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/configuration/animations.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst chart = new Chart(ctx, {\n    type: 'line',\n    data: data,\n    options: {\n        animation: {\n            onProgress: function(animation) {\n                progress.value = animation.currentStep / animation.numSteps;\n            }\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Chart.js with Primitive Array Data\nDESCRIPTION: Shows how to configure a bar chart using primitive arrays for data values, with corresponding labels array for the index axis. This is the simplest data structure for Chart.js.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/general/data-structures.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst cfg = {\n  type: 'bar',\n  data: {\n    datasets: [{\n      data: [20, 10],\n    }],\n    labels: ['a', 'b']\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Chart.js Doughnut Chart with Actions in JavaScript\nDESCRIPTION: This snippet sets up a doughnut chart using Chart.js, including data initialization, chart configuration, and a set of interactive actions. It defines the chart structure, styling, and provides functions for dynamically updating the chart data and appearance.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/samples/other-charts/doughnut.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// <block:actions:2>\nconst actions = [\n  {\n    name: 'Randomize',\n    handler(chart) {\n      chart.data.datasets.forEach(dataset => {\n        dataset.data = Utils.numbers({count: chart.data.labels.length, min: 0, max: 100});\n      });\n      chart.update();\n    }\n  },\n  {\n    name: 'Add Dataset',\n    handler(chart) {\n      const data = chart.data;\n      const newDataset = {\n        label: 'Dataset ' + (data.datasets.length + 1),\n        backgroundColor: [],\n        data: [],\n      };\n\n      for (let i = 0; i < data.labels.length; i++) {\n        newDataset.data.push(Utils.numbers({count: 1, min: 0, max: 100}));\n\n        const colorIndex = i % Object.keys(Utils.CHART_COLORS).length;\n        newDataset.backgroundColor.push(Object.values(Utils.CHART_COLORS)[colorIndex]);\n      }\n\n      chart.data.datasets.push(newDataset);\n      chart.update();\n    }\n  },\n  {\n    name: 'Add Data',\n    handler(chart) {\n      const data = chart.data;\n      if (data.datasets.length > 0) {\n        data.labels.push('data #' + (data.labels.length + 1));\n\n        for (let index = 0; index < data.datasets.length; ++index) {\n          data.datasets[index].data.push(Utils.rand(0, 100));\n        }\n\n        chart.update();\n      }\n    }\n  },\n  {\n    name: 'Hide(0)',\n    handler(chart) {\n      chart.hide(0);\n    }\n  },\n  {\n    name: 'Show(0)',\n    handler(chart) {\n      chart.show(0);\n    }\n  },\n  {\n    name: 'Hide (0, 1)',\n    handler(chart) {\n      chart.hide(0, 1);\n    }\n  },\n  {\n    name: 'Show (0, 1)',\n    handler(chart) {\n      chart.show(0, 1);\n    }\n  },\n  {\n    name: 'Remove Dataset',\n    handler(chart) {\n      chart.data.datasets.pop();\n      chart.update();\n    }\n  },\n  {\n    name: 'Remove Data',\n    handler(chart) {\n      chart.data.labels.splice(-1, 1); // remove the label first\n\n      chart.data.datasets.forEach(dataset => {\n        dataset.data.pop();\n      });\n\n      chart.update();\n    }\n  }\n];\n// </block:actions>\n\n// <block:setup:1>\nconst DATA_COUNT = 5;\nconst NUMBER_CFG = {count: DATA_COUNT, min: 0, max: 100};\n\nconst data = {\n  labels: ['Red', 'Orange', 'Yellow', 'Green', 'Blue'],\n  datasets: [\n    {\n      label: 'Dataset 1',\n      data: Utils.numbers(NUMBER_CFG),\n      backgroundColor: Object.values(Utils.CHART_COLORS),\n    }\n  ]\n};\n// </block:setup>\n\n// <block:config:0>\nconst config = {\n  type: 'doughnut',\n  data: data,\n  options: {\n    responsive: true,\n    plugins: {\n      legend: {\n        position: 'top',\n      },\n      title: {\n        display: true,\n        text: 'Chart.js Doughnut Chart'\n      }\n    }\n  },\n};\n// </block:config>\n\nmodule.exports = {\n  actions: actions,\n  config: config,\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Mixed Chart with Bar and Line Datasets in Chart.js\nDESCRIPTION: Demonstrates how to create a mixed chart combining bar and line chart types by specifying the chart type on each dataset. The example shows a bar dataset and a line dataset sharing the same labels.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/charts/mixed.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst mixedChart = new Chart(ctx, {\n    data: {\n        datasets: [{\n            type: 'bar',\n            label: 'Bar Dataset',\n            data: [10, 20, 30, 40]\n        }, {\n            type: 'line',\n            label: 'Line Dataset',\n            data: [50, 50, 50, 50],\n        }],\n        labels: ['January', 'February', 'March', 'April']\n    },\n    options: options\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Chart.js Data and Triggering Animation\nDESCRIPTION: Shows how to update chart data and trigger an animation using the update method.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/developers/api.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmyLineChart.data.datasets[0].data[2] = 50; // Would update the first dataset's value of 'March' to be 50\nmyLineChart.update(); // Calling update now animates the position of March from 90 to 50.\n```\n\n----------------------------------------\n\nTITLE: Setting Up Initial Data for Chart.js Line Chart in JavaScript\nDESCRIPTION: This snippet sets up the initial data for the line chart. It defines constants for data count and number configuration, creates labels using utility functions, and sets up two datasets with random data and color configurations.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/samples/line/line.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst DATA_COUNT = 7;\nconst NUMBER_CFG = {count: DATA_COUNT, min: -100, max: 100};\n\nconst labels = Utils.months({count: 7});\nconst data = {\n  labels: labels,\n  datasets: [\n    {\n      label: 'Dataset 1',\n      data: Utils.numbers(NUMBER_CFG),\n      borderColor: Utils.CHART_COLORS.red,\n      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red, 0.5),\n    },\n    {\n      label: 'Dataset 2',\n      data: Utils.numbers(NUMBER_CFG),\n      borderColor: Utils.CHART_COLORS.blue,\n      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.blue, 0.5),\n    }\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Chart with Custom Legend Colors in JavaScript\nDESCRIPTION: This example demonstrates how to create a bar chart with a legend enabled and all text in red color. It showcases basic legend configuration options.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/configuration/legend.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst chart = new Chart(ctx, {\n    type: 'bar',\n    data: data,\n    options: {\n        plugins: {\n            legend: {\n                display: true,\n                labels: {\n                    color: 'rgb(255, 99, 132)'\n                }\n            }\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Registering and Creating a Custom Chart Type in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a custom chart type by extending Chart.DatasetController, registering it, and creating a new instance using the Chart.js API.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/developers/charts.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyType extends Chart.DatasetController {\n\n}\n\nChart.register(MyType);\n\n// Now we can create a new instance of our chart, using the Chart.js API\nnew Chart(ctx, {\n    // this is the string the constructor was registered at, ie Chart.controllers.MyType\n    type: 'MyType',\n    data: data,\n    options: options\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Chart Title Configuration in Chart.js\nDESCRIPTION: Demonstrates how to enable and set a custom title for a Chart.js chart. The example shows basic title configuration with display and text options.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/configuration/title.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst chart = new Chart(ctx, {\n    type: 'line',\n    data: data,\n    options: {\n        plugins: {\n            title: {\n                display: true,\n                text: 'Custom Chart Title'\n            }\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Chart.js Horizontal Bar Chart with Interactive Actions\nDESCRIPTION: A complete implementation of a Chart.js horizontal bar chart with multiple datasets and interactive actions like randomizing data, adding/removing datasets, and manipulating data points. The configuration uses the 'indexAxis: y' property to create a horizontal orientation and includes responsive layout with customized styling.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/samples/bar/horizontal.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// <block:actions:2>\nconst actions = [\n  {\n    name: 'Randomize',\n    handler(chart) {\n      chart.data.datasets.forEach(dataset => {\n        dataset.data = Utils.numbers({count: chart.data.labels.length, min: -100, max: 100});\n      });\n      chart.update();\n    }\n  },\n  {\n    name: 'Add Dataset',\n    handler(chart) {\n      const data = chart.data;\n      const dsColor = Utils.namedColor(chart.data.datasets.length);\n      const newDataset = {\n        label: 'Dataset ' + (data.datasets.length + 1),\n        backgroundColor: Utils.transparentize(dsColor, 0.5),\n        borderColor: dsColor,\n        borderWidth: 1,\n        data: Utils.numbers({count: data.labels.length, min: -100, max: 100}),\n      };\n      chart.data.datasets.push(newDataset);\n      chart.update();\n    }\n  },\n  {\n    name: 'Add Data',\n    handler(chart) {\n      const data = chart.data;\n      if (data.datasets.length > 0) {\n        data.labels = Utils.months({count: data.labels.length + 1});\n\n        for (let index = 0; index < data.datasets.length; ++index) {\n          data.datasets[index].data.push(Utils.rand(-100, 100));\n        }\n\n        chart.update();\n      }\n    }\n  },\n  {\n    name: 'Remove Dataset',\n    handler(chart) {\n      chart.data.datasets.pop();\n      chart.update();\n    }\n  },\n  {\n    name: 'Remove Data',\n    handler(chart) {\n      chart.data.labels.splice(-1, 1); // remove the label first\n\n      chart.data.datasets.forEach(dataset => {\n        dataset.data.pop();\n      });\n\n      chart.update();\n    }\n  }\n];\n// </block:actions>\n\n// <block:setup:1>\nconst DATA_COUNT = 7;\nconst NUMBER_CFG = {count: DATA_COUNT, min: -100, max: 100};\n\nconst labels = Utils.months({count: 7});\nconst data = {\n  labels: labels,\n  datasets: [\n    {\n      label: 'Dataset 1',\n      data: Utils.numbers(NUMBER_CFG),\n      borderColor: Utils.CHART_COLORS.red,\n      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red, 0.5),\n    },\n    {\n      label: 'Dataset 2',\n      data: Utils.numbers(NUMBER_CFG),\n      borderColor: Utils.CHART_COLORS.blue,\n      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.blue, 0.5),\n    }\n  ]\n};\n// </block:setup>\n\n// <block:config:0>\nconst config = {\n  type: 'bar',\n  data: data,\n  options: {\n    indexAxis: 'y',\n    // Elements options apply to all of the options unless overridden in a dataset\n    // In this case, we are setting the border of each horizontal bar to be 2px wide\n    elements: {\n      bar: {\n        borderWidth: 2,\n      }\n    },\n    responsive: true,\n    plugins: {\n      legend: {\n        position: 'right',\n      },\n      title: {\n        display: true,\n        text: 'Chart.js Horizontal Bar Chart'\n      }\n    }\n  },\n};\n// </block:config>\n\nmodule.exports = {\n  actions: actions,\n  config: config,\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Bubble Chart with Chart.js\nDESCRIPTION: Example demonstrating how to initialize a bubble chart with Chart.js. It defines a dataset with two bubbles, each with x, y coordinates and r for radius, applies styling with background color, and configures the chart with the bubble type.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/charts/bubble.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// <block:setup:1>\nconst data = {\n  datasets: [{\n    label: 'First Dataset',\n    data: [{\n      x: 20,\n      y: 30,\n      r: 15\n    }, {\n      x: 40,\n      y: 10,\n      r: 10\n    }],\n    backgroundColor: 'rgb(255, 99, 132)'\n  }]\n};\n// </block:setup>\n\n// <block:config:0>\nconst config = {\n  type: 'bubble',\n  data: data,\n  options: {}\n};\n// </block:config>\n\nmodule.exports = {\n  actions: [],\n  config: config,\n};\n```\n\n----------------------------------------\n\nTITLE: Styling and Configuring a Mixed Chart in Chart.js\nDESCRIPTION: A more complete example of a mixed chart configuration with styling properties. It sets up a chart with bar and line datasets, including color configurations and axis settings. The example uses a chart-editor setup with separate blocks for data and configuration.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/charts/mixed.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// <block:setup:1>\nconst data = {\n  labels: [\n    'January',\n    'February',\n    'March',\n    'April'\n  ],\n  datasets: [{\n    type: 'bar',\n    label: 'Bar Dataset',\n    data: [10, 20, 30, 40],\n    borderColor: 'rgb(255, 99, 132)',\n    backgroundColor: 'rgba(255, 99, 132, 0.2)'\n  }, {\n    type: 'line',\n    label: 'Line Dataset',\n    data: [50, 50, 50, 50],\n    fill: false,\n    borderColor: 'rgb(54, 162, 235)'\n  }]\n};\n// </block:setup>\n\n// <block:config:0>\nconst config = {\n  type: 'scatter',\n  data: data,\n  options: {\n    scales: {\n      y: {\n        beginAtZero: true\n      }\n    }\n  }\n};\n// </block:config>\n\nmodule.exports = {\n  actions: [],\n  config: config,\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Chart.js with Array Tuples\nDESCRIPTION: Demonstrates how to use arrays of arrays (tuples) as data, where the first element represents the index value and the second element represents the data value. Null can be used for skipped values.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/general/data-structures.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst cfg = {\n  type: 'line',\n  data: {\n    datasets: [{\n      data: [[10, 20], [15, null], [20, 10]]\n    }]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi Axis Line Chart with Chart.js\nDESCRIPTION: Complete setup for a Chart.js line chart with two Y-axes. Includes action handlers for data randomization, dataset configuration with custom colors and axis assignments, and detailed chart options for responsive behavior and axis positioning. The chart displays two datasets with separate Y-axes on left and right sides.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/samples/line/multi-axis.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// <block:actions:2>\nconst actions = [\n  {\n    name: 'Randomize',\n    handler(chart) {\n      chart.data.datasets.forEach(dataset => {\n        dataset.data = Utils.numbers({count: chart.data.labels.length, min: -100, max: 100});\n      });\n      chart.update();\n    }\n  },\n];\n// </block:actions>\n\n// <block:setup:1>\nconst DATA_COUNT = 7;\nconst NUMBER_CFG = {count: DATA_COUNT, min: -100, max: 100};\n\nconst labels = Utils.months({count: 7});\nconst data = {\n  labels: labels,\n  datasets: [\n    {\n      label: 'Dataset 1',\n      data: Utils.numbers(NUMBER_CFG),\n      borderColor: Utils.CHART_COLORS.red,\n      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red, 0.5),\n      yAxisID: 'y',\n    },\n    {\n      label: 'Dataset 2',\n      data: Utils.numbers(NUMBER_CFG),\n      borderColor: Utils.CHART_COLORS.blue,\n      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.blue, 0.5),\n      yAxisID: 'y1',\n    }\n  ]\n};\n// </block:setup>\n\n// <block:config:0>\nconst config = {\n  type: 'line',\n  data: data,\n  options: {\n    responsive: true,\n    interaction: {\n      mode: 'index',\n      intersect: false,\n    },\n    stacked: false,\n    plugins: {\n      title: {\n        display: true,\n        text: 'Chart.js Line Chart - Multi Axis'\n      }\n    },\n    scales: {\n      y: {\n        type: 'linear',\n        display: true,\n        position: 'left',\n      },\n      y1: {\n        type: 'linear',\n        display: true,\n        position: 'right',\n\n        // grid line settings\n        grid: {\n          drawOnChartArea: false, // only want the grid lines for one axis to show up\n        },\n      },\n    }\n  },\n};\n// </block:config>\n\nmodule.exports = {\n  actions: actions,\n  config: config,\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Bubble Chart Data Structure in JavaScript\nDESCRIPTION: Example showing the required data structure for bubble chart points in Chart.js. Each data point must include x and y values for positioning and an r value for the bubble radius in pixels.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/charts/bubble.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    // X Value\n    x: number,\n\n    // Y Value\n    y: number,\n\n    // Bubble radius in pixels (not scaled).\n    r: number\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Stacked Bar Chart with Chart.js\nDESCRIPTION: Example of creating a stacked bar chart by configuring the x and y axes to enable stacking. This allows showing how one data series is made up of smaller pieces.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/charts/bar.md#2025-04-08_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst stackedBar = new Chart(ctx, {\n    type: 'bar',\n    data: data,\n    options: {\n        scales: {\n            x: {\n                stacked: true\n            },\n            y: {\n                stacked: true\n            }\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Chart.js with Object Arrays - Category Values\nDESCRIPTION: Shows how to use object arrays with category strings as x-values for bar charts. This approach is useful for non-numeric x-axis labels with corresponding y-values.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/general/data-structures.md#2025-04-08_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst cfg = {\n  type: 'bar',\n  data: {\n    datasets: [{\n      data: [{x: 'Sales', y: 20}, {x: 'Revenue', y: 10}]\n    }]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Chart.js Combined Line/Bar Chart in JavaScript\nDESCRIPTION: This code snippet sets up a Chart.js configuration for a combined line and bar chart. It defines action handlers for data manipulation, initializes chart data, and specifies chart options. The chart includes two datasets: one bar chart and one line chart.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/samples/other-charts/combo-bar-line.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// <block:actions:2>\nconst actions = [\n  {\n    name: 'Randomize',\n    handler(chart) {\n      chart.data.datasets.forEach(dataset => {\n        dataset.data = Utils.numbers({count: chart.data.labels.length, min: -100, max: 100});\n      });\n      chart.update();\n    }\n  },\n  {\n    name: 'Add Dataset',\n    handler(chart) {\n      const data = chart.data;\n      const dsColor = Utils.namedColor(chart.data.datasets.length);\n      const newDataset = {\n        label: 'Dataset ' + (data.datasets.length + 1),\n        backgroundColor: Utils.transparentize(dsColor, 0.5),\n        borderColor: dsColor,\n        borderWidth: 1,\n        data: Utils.numbers({count: data.labels.length, min: -100, max: 100}),\n      };\n      chart.data.datasets.push(newDataset);\n      chart.update();\n    }\n  },\n  {\n    name: 'Add Data',\n    handler(chart) {\n      const data = chart.data;\n      if (data.datasets.length > 0) {\n        data.labels = Utils.months({count: data.labels.length + 1});\n\n        for (let index = 0; index < data.datasets.length; ++index) {\n          data.datasets[index].data.push(Utils.rand(-100, 100));\n        }\n\n        chart.update();\n      }\n    }\n  },\n  {\n    name: 'Remove Dataset',\n    handler(chart) {\n      chart.data.datasets.pop();\n      chart.update();\n    }\n  },\n  {\n    name: 'Remove Data',\n    handler(chart) {\n      chart.data.labels.splice(-1, 1); // remove the label first\n\n      chart.data.datasets.forEach(dataset => {\n        dataset.data.pop();\n      });\n\n      chart.update();\n    }\n  }\n];\n// </block:actions>\n\n// <block:setup:1>\nconst DATA_COUNT = 7;\nconst NUMBER_CFG = {count: DATA_COUNT, min: -100, max: 100};\n\nconst labels = Utils.months({count: 7});\nconst data = {\n  labels: labels,\n  datasets: [\n    {\n      label: 'Dataset 1',\n      data: Utils.numbers(NUMBER_CFG),\n      borderColor: Utils.CHART_COLORS.red,\n      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red, 0.5),\n      order: 1\n    },\n    {\n      label: 'Dataset 2',\n      data: Utils.numbers(NUMBER_CFG),\n      borderColor: Utils.CHART_COLORS.blue,\n      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.blue, 0.5),\n      type: 'line',\n      order: 0\n    }\n  ]\n};\n// </block:setup>\n\n// <block:config:0>\nconst config = {\n  type: 'bar',\n  data: data,\n  options: {\n    responsive: true,\n    plugins: {\n      legend: {\n        position: 'top',\n      },\n      title: {\n        display: true,\n        text: 'Chart.js Combined Line/Bar Chart'\n      }\n    }\n  },\n};\n// </block:config>\n\nmodule.exports = {\n  actions: actions,\n  config: config,\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Radar Chart with Chart.js\nDESCRIPTION: This code demonstrates how to set up a basic radar chart with two datasets using Chart.js. It includes data configuration with labels, dataset styling (colors, fills, point styling), and chart options.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/charts/radar.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// <block:setup:1>\nconst data = {\n  labels: [\n    'Eating',\n    'Drinking',\n    'Sleeping',\n    'Designing',\n    'Coding',\n    'Cycling',\n    'Running'\n  ],\n  datasets: [{\n    label: 'My First Dataset',\n    data: [65, 59, 90, 81, 56, 55, 40],\n    fill: true,\n    backgroundColor: 'rgba(255, 99, 132, 0.2)',\n    borderColor: 'rgb(255, 99, 132)',\n    pointBackgroundColor: 'rgb(255, 99, 132)',\n    pointBorderColor: '#fff',\n    pointHoverBackgroundColor: '#fff',\n    pointHoverBorderColor: 'rgb(255, 99, 132)'\n  }, {\n    label: 'My Second Dataset',\n    data: [28, 48, 40, 19, 96, 27, 100],\n    fill: true,\n    backgroundColor: 'rgba(54, 162, 235, 0.2)',\n    borderColor: 'rgb(54, 162, 235)',\n    pointBackgroundColor: 'rgb(54, 162, 235)',\n    pointBorderColor: '#fff',\n    pointHoverBackgroundColor: '#fff',\n    pointHoverBorderColor: 'rgb(54, 162, 235)'\n  }]\n};\n// </block:setup>\n\n// <block:config:0>\nconst config = {\n  type: 'radar',\n  data: data,\n  options: {\n    elements: {\n      line: {\n        borderWidth: 3\n      }\n    }\n  },\n};\n// </block:config>\n\nmodule.exports = {\n  actions: [],\n  config: config,\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Color Background Plugin in Chart.js\nDESCRIPTION: Custom plugin that adds a solid color background to a Chart.js canvas. The plugin uses the beforeDraw hook to render a background color that can be configured through plugin options. Includes a complete example with a doughnut chart configuration.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/configuration/canvas-background.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// <block:setup:1>\nconst data = {\n  labels: [\n    'Red',\n    'Blue',\n    'Yellow'\n  ],\n  datasets: [{\n    label: 'My First Dataset',\n    data: [300, 50, 100],\n    backgroundColor: [\n      'rgb(255, 99, 132)',\n      'rgb(54, 162, 235)',\n      'rgb(255, 205, 86)'\n    ],\n    hoverOffset: 4\n  }]\n};\n// </block:setup>\n\n// <block:plugin:2>\n// Note: changes to the plugin code is not reflected to the chart, because the plugin is loaded at chart construction time and editor changes only trigger an chart.update().\nconst plugin = {\n  id: 'customCanvasBackgroundColor',\n  beforeDraw: (chart, args, options) => {\n    const {ctx} = chart;\n    ctx.save();\n    ctx.globalCompositeOperation = 'destination-over';\n    ctx.fillStyle = options.color || '#99ffff';\n    ctx.fillRect(0, 0, chart.width, chart.height);\n    ctx.restore();\n  }\n};\n// </block:plugin>\n\n// <block:config:0>\nconst config = {\n  type: 'doughnut',\n  data: data,\n  options: {\n    plugins: {\n      customCanvasBackgroundColor: {\n        color: 'lightGreen',\n      }\n    }\n  },\n  plugins: [plugin],\n};\n// </block:config>\n\nmodule.exports = {\n  actions: [],\n  config: config,\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Chart.js Line Chart with Linear Scale Step Size\nDESCRIPTION: Creates a complete Chart.js line chart configuration with custom step size and interactive data manipulation features. Includes action handlers for randomizing data, adding/removing datasets and data points, and configuring linear scale with fixed step size of 50 units.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/samples/scales/linear-step-size.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// <block:actions:2>\nconst actions = [\n  {\n    name: 'Randomize',\n    handler(chart) {\n      chart.data.datasets.forEach(dataset => {\n        dataset.data = Utils.numbers({count: chart.data.labels.length, min: 0, max: 100});\n      });\n      chart.update();\n    }\n  },\n  {\n    name: 'Add Dataset',\n    handler(chart) {\n      const data = chart.data;\n      const dsColor = Utils.namedColor(chart.data.datasets.length);\n      const newDataset = {\n        label: 'Dataset ' + (data.datasets.length + 1),\n        backgroundColor: dsColor,\n        borderColor: dsColor,\n        data: Utils.numbers({count: data.labels.length, min: 0, max: 100}),\n      };\n      chart.data.datasets.push(newDataset);\n      chart.update();\n    }\n  },\n  {\n    name: 'Add Data',\n    handler(chart) {\n      const data = chart.data;\n      if (data.datasets.length > 0) {\n        data.labels = Utils.months({count: data.labels.length + 1});\n\n        for (let index = 0; index < data.datasets.length; ++index) {\n          data.datasets[index].data.push(Utils.rand(0, 100));\n        }\n\n        chart.update();\n      }\n    }\n  },\n  {\n    name: 'Remove Dataset',\n    handler(chart) {\n      chart.data.datasets.pop();\n      chart.update();\n    }\n  },\n  {\n    name: 'Remove Data',\n    handler(chart) {\n      chart.data.labels.splice(-1, 1); // remove the label first\n\n      chart.data.datasets.forEach(dataset => {\n        dataset.data.pop();\n      });\n\n      chart.update();\n    }\n  }\n];\n// </block:actions>\n\n// <block:setup:1>\nconst DATA_COUNT = 7;\nconst NUMBER_CFG = {count: DATA_COUNT, min: 0, max: 100};\n\nconst labels = Utils.months({count: 7});\nconst data = {\n  labels: labels,\n  datasets: [\n    {\n      label: 'Dataset 1',\n      data: Utils.numbers(NUMBER_CFG),\n      borderColor: Utils.CHART_COLORS.red,\n      backgroundColor: Utils.CHART_COLORS.red,\n    },\n    {\n      label: 'Dataset 2',\n      data: Utils.numbers(NUMBER_CFG),\n      borderColor: Utils.CHART_COLORS.blue,\n      backgroundColor: Utils.CHART_COLORS.blue,\n    }\n  ]\n};\n// </block:setup>\n\n// <block:config:0>\nconst config = {\n  type: 'line',\n  data: data,\n  options: {\n    responsive: true,\n    plugins: {\n      tooltip: {\n        mode: 'index',\n        intersect: false\n      },\n      title: {\n        display: true,\n        text: 'Chart.js Line Chart'\n      }\n    },\n    hover: {\n      mode: 'index',\n      intersect: false\n    },\n    scales: {\n      x: {\n        title: {\n          display: true,\n          text: 'Month'\n        }\n      },\n      y: {\n        title: {\n          display: true,\n          text: 'Value'\n        },\n        min: 0,\n        max: 100,\n        ticks: {\n          // forces step size to be 50 units\n          stepSize: 50\n        }\n      }\n    }\n  },\n};\n// </block:config>\n\nmodule.exports = {\n  actions: actions,\n  config: config,\n};\n```\n\n----------------------------------------\n\nTITLE: Chart.js External HTML Tooltip Implementation\nDESCRIPTION: Complete implementation of an external HTML tooltip handler for Chart.js. Includes functions for creating and managing tooltip elements, handling tooltip events, and configuring chart data with custom tooltip settings. The code creates a styled HTML table-based tooltip that displays chart data points with color indicators.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/samples/tooltip/html.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst getOrCreateTooltip = (chart) => {\n  let tooltipEl = chart.canvas.parentNode.querySelector('div');\n\n  if (!tooltipEl) {\n    tooltipEl = document.createElement('div');\n    tooltipEl.style.background = 'rgba(0, 0, 0, 0.7)';\n    tooltipEl.style.borderRadius = '3px';\n    tooltipEl.style.color = 'white';\n    tooltipEl.style.opacity = 1;\n    tooltipEl.style.pointerEvents = 'none';\n    tooltipEl.style.position = 'absolute';\n    tooltipEl.style.transform = 'translate(-50%, 0)';\n    tooltipEl.style.transition = 'all .1s ease';\n\n    const table = document.createElement('table');\n    table.style.margin = '0px';\n\n    tooltipEl.appendChild(table);\n    chart.canvas.parentNode.appendChild(tooltipEl);\n  }\n\n  return tooltipEl;\n};\n\nconst externalTooltipHandler = (context) => {\n  // Tooltip Element\n  const {chart, tooltip} = context;\n  const tooltipEl = getOrCreateTooltip(chart);\n\n  // Hide if no tooltip\n  if (tooltip.opacity === 0) {\n    tooltipEl.style.opacity = 0;\n    return;\n  }\n\n  // Set Text\n  if (tooltip.body) {\n    const titleLines = tooltip.title || [];\n    const bodyLines = tooltip.body.map(b => b.lines);\n\n    const tableHead = document.createElement('thead');\n\n    titleLines.forEach(title => {\n      const tr = document.createElement('tr');\n      tr.style.borderWidth = 0;\n\n      const th = document.createElement('th');\n      th.style.borderWidth = 0;\n      const text = document.createTextNode(title);\n\n      th.appendChild(text);\n      tr.appendChild(th);\n      tableHead.appendChild(tr);\n    });\n\n    const tableBody = document.createElement('tbody');\n    bodyLines.forEach((body, i) => {\n      const colors = tooltip.labelColors[i];\n\n      const span = document.createElement('span');\n      span.style.background = colors.backgroundColor;\n      span.style.borderColor = colors.borderColor;\n      span.style.borderWidth = '2px';\n      span.style.marginRight = '10px';\n      span.style.height = '10px';\n      span.style.width = '10px';\n      span.style.display = 'inline-block';\n\n      const tr = document.createElement('tr');\n      tr.style.backgroundColor = 'inherit';\n      tr.style.borderWidth = 0;\n\n      const td = document.createElement('td');\n      td.style.borderWidth = 0;\n\n      const text = document.createTextNode(body);\n\n      td.appendChild(span);\n      td.appendChild(text);\n      tr.appendChild(td);\n      tableBody.appendChild(tr);\n    });\n\n    const tableRoot = tooltipEl.querySelector('table');\n\n    // Remove old children\n    while (tableRoot.firstChild) {\n      tableRoot.firstChild.remove();\n    }\n\n    // Add new children\n    tableRoot.appendChild(tableHead);\n    tableRoot.appendChild(tableBody);\n  }\n\n  const {offsetLeft: positionX, offsetTop: positionY} = chart.canvas;\n\n  // Display, position, and set styles for font\n  tooltipEl.style.opacity = 1;\n  tooltipEl.style.left = positionX + tooltip.caretX + 'px';\n  tooltipEl.style.top = positionY + tooltip.caretY + 'px';\n  tooltipEl.style.font = tooltip.options.bodyFont.string;\n  tooltipEl.style.padding = tooltip.options.padding + 'px ' + tooltip.options.padding + 'px';\n};\n\nconst DATA_COUNT = 7;\nconst NUMBER_CFG = {count: DATA_COUNT, min: -100, max: 100, decimals: 0};\nconst data = {\n  labels: Utils.months({count: DATA_COUNT}),\n  datasets: [\n    {\n      label: 'Dataset 1',\n      data: Utils.numbers(NUMBER_CFG),\n      fill: false,\n      borderColor: Utils.CHART_COLORS.red,\n      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red, 0.5),\n    },\n    {\n      label: 'Dataset 2',\n      data: Utils.numbers(NUMBER_CFG),\n      fill: false,\n      borderColor: Utils.CHART_COLORS.blue,\n      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.blue, 0.5),\n    },\n  ]\n};\n\nconst config = {\n  type: 'line',\n  data: data,\n  options: {\n    interaction: {\n      mode: 'index',\n      intersect: false,\n    },\n    plugins: {\n      title: {\n        display: true,\n        text: 'Chart.js Line Chart - External Tooltips'\n      },\n      tooltip: {\n        enabled: false,\n        position: 'nearest',\n        external: externalTooltipHandler\n      }\n    }\n  }\n};\n\nmodule.exports = {\n  actions: [],\n  config: config,\n};\n```\n\n----------------------------------------\n\nTITLE: Adding and Removing Data in Chart.js (JavaScript)\nDESCRIPTION: Functions to add new data points to a chart and remove the last data point from a chart. These functions modify the chart's data array and call the update method.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/developers/updates.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction addData(chart, label, newData) {\n    chart.data.labels.push(label);\n    chart.data.datasets.forEach((dataset) => {\n        dataset.data.push(newData);\n    });\n    chart.update();\n}\n\nfunction removeData(chart) {\n    chart.data.labels.pop();\n    chart.data.datasets.forEach((dataset) => {\n        dataset.data.pop();\n    });\n    chart.update();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Chart.js Action Handlers for Data Manipulation\nDESCRIPTION: Defines a set of action handlers for manipulating chart data, including randomizing data, adding/removing datasets, and adding/removing data points. Each action updates the chart after modifying the data.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/samples/advanced/progress-bar.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// <block:actions:2>\nconst actions = [\n  {\n    name: 'Randomize',\n    handler(chart) {\n      chart.data.datasets.forEach(dataset => {\n        dataset.data = Utils.numbers({count: chart.data.labels.length, min: -100, max: 100});\n      });\n      chart.update();\n    }\n  },\n  {\n    name: 'Add Dataset',\n    handler(chart) {\n      const data = chart.data;\n      const dsColor = Utils.namedColor(chart.data.datasets.length);\n      const newDataset = {\n        label: 'Dataset ' + (data.datasets.length + 1),\n        backgroundColor: Utils.transparentize(dsColor, 0.5),\n        borderColor: dsColor,\n        data: Utils.numbers({count: data.labels.length, min: -100, max: 100}),\n      };\n      chart.data.datasets.push(newDataset);\n      chart.update();\n    }\n  },\n  {\n    name: 'Add Data',\n    handler(chart) {\n      const data = chart.data;\n      if (data.datasets.length > 0) {\n        data.labels = Utils.months({count: data.labels.length + 1});\n\n        for (let index = 0; index < data.datasets.length; ++index) {\n          data.datasets[index].data.push(Utils.rand(-100, 100));\n        }\n\n        chart.update();\n      }\n    }\n  },\n  {\n    name: 'Remove Dataset',\n    handler(chart) {\n      chart.data.datasets.pop();\n      chart.update();\n    }\n  },\n  {\n    name: 'Remove Data',\n    handler(chart) {\n      chart.data.labels.splice(-1, 1); // remove the label first\n\n      chart.data.datasets.forEach(dataset => {\n        dataset.data.pop();\n      });\n\n      chart.update();\n    }\n  }\n];\n// </block:actions>\n```\n\n----------------------------------------\n\nTITLE: Disabling Line Drawing in Chart.js\nDESCRIPTION: This code shows how to disable line rendering for datasets in Chart.js, which can improve performance for charts with many data points by reducing the amount of drawing on the canvas.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/general/performance.md#2025-04-08_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nnew Chart(ctx, {\n    type: 'line',\n    data: {\n        datasets: [{\n            showLine: false // disable for a single dataset\n        }]\n    },\n    options: {\n        showLine: false // disable for all datasets\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring a Dynamic Pie Chart with Chart.js\nDESCRIPTION: A complete example of creating a pie chart with Chart.js that includes data generation, dynamic coloring based on values, and interactive actions like randomization and toggle between pie and doughnut views. The chart uses scriptable options to customize colors based on data values and provides action handlers for user interaction.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/samples/scriptable/pie.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// <block:setup:2>\nconst DATA_COUNT = 5;\nUtils.srand(110);\n\nconst actions = [\n  {\n    name: 'Randomize',\n    handler(chart) {\n      chart.data.datasets.forEach(dataset => {\n        dataset.data = generateData();\n      });\n      chart.update();\n    }\n  },\n  {\n    name: 'Toggle Doughnut View',\n    handler(chart) {\n      if (chart.options.cutout) {\n        chart.options.cutout = 0;\n      } else {\n        chart.options.cutout = '50%';\n      }\n      chart.update();\n    }\n  }\n];\n// </block:setup>\n\n// <block:data:1>\nfunction generateData() {\n  return Utils.numbers({\n    count: DATA_COUNT,\n    min: -100,\n    max: 100\n  });\n}\n\nconst data = {\n  datasets: [{\n    data: generateData()\n  }]\n};\n// </block:data>\n\n// <block:options:0>\nfunction colorize(opaque, hover, ctx) {\n  const v = ctx.parsed;\n  const c = v < -50 ? '#D60000'\n    : v < 0 ? '#F46300'\n    : v < 50 ? '#0358B6'\n    : '#44DE28';\n\n  const opacity = hover ? 1 - Math.abs(v / 150) - 0.2 : 1 - Math.abs(v / 150);\n\n  return opaque ? c : Utils.transparentize(c, opacity);\n}\n\nfunction hoverColorize(ctx) {\n  return colorize(false, true, ctx);\n}\n\nconst config = {\n  type: 'pie',\n  data: data,\n  options: {\n    plugins: {\n      legend: false,\n      tooltip: false,\n    },\n    elements: {\n      arc: {\n        backgroundColor: colorize.bind(null, false, false),\n        hoverBackgroundColor: hoverColorize\n      }\n    }\n  }\n};\n// </block:options>\n\nmodule.exports = {\n  actions,\n  config,\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Up Responsive Chart Container in HTML\nDESCRIPTION: Demonstrates how to create a properly structured container for a responsive Chart.js canvas. The container needs to be relatively positioned and dedicated to the chart canvas only, with relative values for height and width.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/configuration/responsive.md#2025-04-08_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"chart-container\" style=\"position: relative; height:40vh; width:80vw\">\n    <canvas id=\"chart\"></canvas>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating a Scatter Chart with Multiple Y-Axes in Chart.js\nDESCRIPTION: This code demonstrates how to create a scatter chart with two Y-axes positioned on opposite sides of the chart. It includes data setup with random bubble points, action handlers for manipulating the chart (randomize, add/remove datasets and data points), and configuration options for responsiveness, legends, titles, and axis styling.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/samples/other-charts/scatter-multi-axis.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// <block:setup:1>\nconst DATA_COUNT = 7;\nconst NUMBER_CFG = {count: DATA_COUNT, rmin: 1, rmax: 1, min: -100, max: 100};\n\nconst data = {\n  datasets: [\n    {\n      label: 'Dataset 1',\n      data: Utils.bubbles(NUMBER_CFG),\n      borderColor: Utils.CHART_COLORS.red,\n      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red, 0.5),\n      yAxisID: 'y',\n    },\n    {\n      label: 'Dataset 2',\n      data: Utils.bubbles(NUMBER_CFG),\n      borderColor: Utils.CHART_COLORS.orange,\n      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.orange, 0.5),\n      yAxisID: 'y2',\n    }\n  ]\n};\n// </block:setup>\n\n// <block:actions:2>\nconst actions = [\n  {\n    name: 'Randomize',\n    handler(chart) {\n      chart.data.datasets.forEach(dataset => {\n        dataset.data = Utils.bubbles({count: DATA_COUNT, rmin: 1, rmax: 1, min: -100, max: 100});\n      });\n      chart.update();\n    }\n  },\n  {\n    name: 'Add Dataset',\n    handler(chart) {\n      const chartData = chart.data;\n      const dsColor = Utils.namedColor(chartData.datasets.length);\n      const newDataset = {\n        label: 'Dataset ' + (chartData.datasets.length + 1),\n        backgroundColor: Utils.transparentize(dsColor, 0.5),\n        borderColor: dsColor,\n        data: Utils.bubbles({count: DATA_COUNT, rmin: 1, rmax: 1, min: -100, max: 100}),\n      };\n      chart.data.datasets.push(newDataset);\n      chart.update();\n    }\n  },\n  {\n    name: 'Add Data',\n    handler(chart) {\n      const chartData = chart.data;\n      if (chartData.datasets.length > 0) {\n\n        for (let index = 0; index < chartData.datasets.length; ++index) {\n          chartData.datasets[index].data.push(Utils.bubbles({count: 1, rmin: 1, rmax: 1, min: -100, max: 100})[0]);\n        }\n\n        chart.update();\n      }\n    }\n  },\n  {\n    name: 'Remove Dataset',\n    handler(chart) {\n      chart.data.datasets.pop();\n      chart.update();\n    }\n  },\n  {\n    name: 'Remove Data',\n    handler(chart) {\n      chart.data.datasets.forEach(dataset => {\n        dataset.data.pop();\n      });\n\n      chart.update();\n    }\n  }\n];\n// </block:actions>\n\n// <block:config:0>\nconst config = {\n  type: 'scatter',\n  data: data,\n  options: {\n    responsive: true,\n    plugins: {\n      legend: {\n        position: 'top',\n      },\n      title: {\n        display: true,\n        text: 'Chart.js Scatter Multi Axis Chart'\n      }\n    },\n    scales: {\n      y: {\n        type: 'linear', // only linear but allow scale type registration. This allows extensions to exist solely for log scale for instance\n        position: 'left',\n        ticks: {\n          color: Utils.CHART_COLORS.red\n        }\n      },\n      y2: {\n        type: 'linear', // only linear but allow scale type registration. This allows extensions to exist solely for log scale for instance\n        position: 'right',\n        reverse: true,\n        ticks: {\n          color: Utils.CHART_COLORS.blue\n        },\n        grid: {\n          drawOnChartArea: false // only want the grid lines for one axis to show up\n        }\n      }\n    }\n  },\n};\n// </block:config>\n\nmodule.exports = {\n  actions: actions,\n  config: config,\n};\n```\n\n----------------------------------------\n\nTITLE: Exporting Chart.js Configuration for Module Use\nDESCRIPTION: This module exports configuration for the Chart.js line chart example. The exported object includes an empty actions array and the chart configuration defined previously, allowing this chart to be used in a Chart.js application.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/samples/line/interpolation.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  actions: [],\n  config: config,\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi Series Pie Chart with Chart.js\nDESCRIPTION: Creates a pie chart configuration with multiple datasets, custom legend labels, and interactive tooltips. The implementation includes data setup with color-coded series, custom legend label generation, click handling for dataset visibility toggling, and formatted tooltips showing combined label and value information.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/samples/other-charts/multi-series-pie.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// <block:setup:1>\nconst DATA_COUNT = 5;\nconst NUMBER_CFG = {count: DATA_COUNT, min: 0, max: 100};\n\nconst labels = Utils.months({count: 7});\nconst data = {\n  labels: ['Overall Yay', 'Overall Nay', 'Group A Yay', 'Group A Nay', 'Group B Yay', 'Group B Nay', 'Group C Yay', 'Group C Nay'],\n  datasets: [\n    {\n      backgroundColor: ['#AAA', '#777'],\n      data: [21, 79]\n    },\n    {\n      backgroundColor: ['hsl(0, 100%, 60%)', 'hsl(0, 100%, 35%)'],\n      data: [33, 67]\n    },\n    {\n      backgroundColor: ['hsl(100, 100%, 60%)', 'hsl(100, 100%, 35%)'],\n      data: [20, 80]\n    },\n    {\n      backgroundColor: ['hsl(180, 100%, 60%)', 'hsl(180, 100%, 35%)'],\n      data: [10, 90]\n    }\n  ]\n};\n// </block:setup>\n\n// <block:config:0>\nconst config = {\n  type: 'pie',\n  data: data,\n  options: {\n    responsive: true,\n    plugins: {\n      legend: {\n        labels: {\n          generateLabels: function(chart) {\n            // Get the default label list\n            const original = Chart.overrides.pie.plugins.legend.labels.generateLabels;\n            const labelsOriginal = original.call(this, chart);\n\n            // Build an array of colors used in the datasets of the chart\n            let datasetColors = chart.data.datasets.map(function(e) {\n              return e.backgroundColor;\n            });\n            datasetColors = datasetColors.flat();\n\n            // Modify the color and hide state of each label\n            labelsOriginal.forEach(label => {\n              // There are twice as many labels as there are datasets. This converts the label index into the corresponding dataset index\n              label.datasetIndex = (label.index - label.index % 2) / 2;\n\n              // The hidden state must match the dataset's hidden state\n              label.hidden = !chart.isDatasetVisible(label.datasetIndex);\n\n              // Change the color to match the dataset\n              label.fillStyle = datasetColors[label.index];\n            });\n\n            return labelsOriginal;\n          }\n        },\n        onClick: function(mouseEvent, legendItem, legend) {\n          // toggle the visibility of the dataset from what it currently is\n          legend.chart.getDatasetMeta(\n            legendItem.datasetIndex\n          ).hidden = legend.chart.isDatasetVisible(legendItem.datasetIndex);\n          legend.chart.update();\n        }\n      },\n      tooltip: {\n        callbacks: {\n          title: function(context) {\n            const labelIndex = (context[0].datasetIndex * 2) + context[0].dataIndex;\n            return context[0].chart.data.labels[labelIndex] + ': ' + context[0].formattedValue;\n          }\n        }\n      }\n    }\n  },\n};\n// </block:config>\n\nmodule.exports = {\n  config: config,\n};\n```\n\n----------------------------------------\n\nTITLE: Selective Component Import for Bar Chart in Chart.js\nDESCRIPTION: This code snippet shows how to selectively import and register only the necessary components for a bar chart in Chart.js, optimizing the bundle size through tree-shaking.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/getting-started/usage.md#2025-04-08_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n  Chart,\n  Colors,\n  BarController,\n  CategoryScale,\n  LinearScale,\n  BarElement,\n  Legend\n} from 'chart.js'\n\nChart.register(\n  Colors,\n  BarController,\n  BarElement,\n  CategoryScale,\n  LinearScale,\n  Legend\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Floating Bar Charts with Chart.js in JavaScript\nDESCRIPTION: A complete Chart.js configuration example that demonstrates how to create floating bar charts where each bar can start and end at arbitrary values. The code includes randomization actions, data setup with multiple datasets, and responsive chart configuration.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/samples/bar/floating.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// <block:actions:2>\nconst actions = [\n  {\n    name: 'Randomize',\n    handler(chart) {\n      chart.data.datasets.forEach(dataset => {\n        dataset.data = chart.data.labels.map(() => {\n          return [Utils.rand(-100, 100), Utils.rand(-100, 100)];\n        });\n      });\n      chart.update();\n    }\n  },\n];\n// </block:actions>\n\n// <block:setup:1>\nconst DATA_COUNT = 7;\nconst NUMBER_CFG = {count: DATA_COUNT, min: -100, max: 100};\n\nconst labels = Utils.months({count: 7});\nconst data = {\n  labels: labels,\n  datasets: [\n    {\n      label: 'Dataset 1',\n      data: labels.map(() => {\n        return [Utils.rand(-100, 100), Utils.rand(-100, 100)];\n      }),\n      backgroundColor: Utils.CHART_COLORS.red,\n    },\n    {\n      label: 'Dataset 2',\n      data: labels.map(() => {\n        return [Utils.rand(-100, 100), Utils.rand(-100, 100)];\n      }),\n      backgroundColor: Utils.CHART_COLORS.blue,\n    },\n  ]\n};\n// </block:setup>\n\n// <block:config:0>\nconst config = {\n  type: 'bar',\n  data: data,\n  options: {\n    responsive: true,\n    plugins: {\n      legend: {\n        position: 'top',\n      },\n      title: {\n        display: true,\n        text: 'Chart.js Floating Bar Chart'\n      }\n    }\n  }\n};\n// </block:config>\n\nmodule.exports = {\n  actions: actions,\n  config: config,\n};\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Point Styles in ChartJS Legend\nDESCRIPTION: Sets up a line chart with custom point styling in the legend using ChartJS. Includes data configuration, point style settings, and a toggle action to switch between point style and default rectangle display in the legend.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/samples/legend/point-style.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// <block:actions:2>\nconst actions = [\n  {\n    name: 'Toggle Point Style',\n    handler(chart) {\n      chart.options.plugins.legend.labels.usePointStyle = !chart.options.plugins.legend.labels.usePointStyle;\n      chart.update();\n    }\n  },\n];\n// </block:actions>\n\n// <block:setup:1>\nconst DATA_COUNT = 7;\nconst NUMBER_CFG = {count: DATA_COUNT, min: -100, max: 100};\nconst data = {\n  labels: Utils.months({count: DATA_COUNT}),\n  datasets: [\n    {\n      label: 'Dataset 1',\n      data: Utils.numbers(NUMBER_CFG),\n      fill: false,\n      borderColor: Utils.CHART_COLORS.red,\n      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red, 0.5),\n      borderWidth: 1,\n      pointStyle: 'rectRot',\n      pointRadius: 5,\n      pointBorderColor: 'rgb(0, 0, 0)'\n    },\n  ]\n};\n// </block:setup>\n\n// <block:config:0>\nconst config = {\n  type: 'line',\n  data: data,\n  options: {\n    plugins: {\n      legend: {\n        labels: {\n          usePointStyle: true,\n        },\n      }\n    }\n  }\n};\n// </block:config>\n\nmodule.exports = {\n  actions: actions,\n  config: config,\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Legend Click Handlers in Chart.js\nDESCRIPTION: This snippet shows how to create a custom click handler for legend items in Chart.js. It links the visibility of the first two datasets when clicking on their legend items, while maintaining default behavior for others.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/configuration/legend.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst defaultLegendClickHandler = Chart.defaults.plugins.legend.onClick;\nconst pieDoughnutLegendClickHandler = Chart.controllers.doughnut.overrides.plugins.legend.onClick;\nconst newLegendClickHandler = function (e, legendItem, legend) {\n    const index = legendItem.datasetIndex;\n    const type = legend.chart.config.type;\n\n    if (index > 1) {\n        // Do the original logic\n        if (type === 'pie' || type === 'doughnut') {\n            pieDoughnutLegendClickHandler(e, legendItem, legend)\n        } else {\n            defaultLegendClickHandler(e, legendItem, legend);\n        }\n\n    } else {\n        let ci = legend.chart;\n        [\n            ci.getDatasetMeta(0),\n            ci.getDatasetMeta(1)\n        ].forEach(function(meta) {\n            meta.hidden = meta.hidden === null ? !ci.data.datasets[index].hidden : null;\n        });\n        ci.update();\n    }\n};\n\nconst chart = new Chart(ctx, {\n    type: 'line',\n    data: data,\n    options: {\n        plugins: {\n            legend: {\n                onClick: newLegendClickHandler\n            }\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Chart.js Radar Chart with Interactive Actions in JavaScript\nDESCRIPTION: This code snippet demonstrates a complete Chart.js radar chart configuration with interactive controls. It defines action handlers for randomizing data, adding/removing datasets and data points, along with initial chart setup including data structure, styling options, and responsive configuration.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/samples/other-charts/radar.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// <block:actions:2>\nconst actions = [\n  {\n    name: 'Randomize',\n    handler(chart) {\n      chart.data.datasets.forEach(dataset => {\n        dataset.data = Utils.numbers({count: chart.data.labels.length, min: 0, max: 100});\n      });\n      chart.update();\n    }\n  },\n  {\n    name: 'Add Dataset',\n    handler(chart) {\n      const data = chart.data;\n      const dsColor = Utils.namedColor(chart.data.datasets.length);\n      const newDataset = {\n        label: 'Dataset ' + (data.datasets.length + 1),\n        backgroundColor: Utils.transparentize(dsColor, 0.5),\n        borderColor: dsColor,\n        data: Utils.numbers({count: data.labels.length, min: 0, max: 100}),\n      };\n      chart.data.datasets.push(newDataset);\n      chart.update();\n    }\n  },\n  {\n    name: 'Add Data',\n    handler(chart) {\n      const data = chart.data;\n      if (data.datasets.length > 0) {\n        data.labels = Utils.months({count: data.labels.length + 1});\n\n        for (let index = 0; index < data.datasets.length; ++index) {\n          data.datasets[index].data.push(Utils.rand(0, 100));\n        }\n\n        chart.update();\n      }\n    }\n  },\n  {\n    name: 'Remove Dataset',\n    handler(chart) {\n      chart.data.datasets.pop();\n      chart.update();\n    }\n  },\n  {\n    name: 'Remove Data',\n    handler(chart) {\n      chart.data.labels.splice(-1, 1); // remove the label first\n\n      chart.data.datasets.forEach(dataset => {\n        dataset.data.pop();\n      });\n\n      chart.update();\n    }\n  }\n];\n// </block:actions>\n\n// <block:setup:1>\nconst DATA_COUNT = 7;\nconst NUMBER_CFG = {count: DATA_COUNT, min: 0, max: 100};\n\nconst labels = Utils.months({count: 7});\nconst data = {\n  labels: labels,\n  datasets: [\n    {\n      label: 'Dataset 1',\n      data: Utils.numbers(NUMBER_CFG),\n      borderColor: Utils.CHART_COLORS.red,\n      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red, 0.5),\n    },\n    {\n      label: 'Dataset 2',\n      data: Utils.numbers(NUMBER_CFG),\n      borderColor: Utils.CHART_COLORS.blue,\n      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.blue, 0.5),\n    }\n  ]\n};\n// </block:setup>\n\n// <block:config:0>\nconst config = {\n  type: 'radar',\n  data: data,\n  options: {\n    responsive: true,\n    plugins: {\n      title: {\n        display: true,\n        text: 'Chart.js Radar Chart'\n      }\n    }\n  },\n};\n// </block:config>\n\nmodule.exports = {\n  actions: actions,\n  config: config,\n};\n```\n\n----------------------------------------\n\nTITLE: Using Shared Plugins in Chart.js\nDESCRIPTION: Demonstrates how to create a plugin and share it between multiple chart instances while excluding it from others.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/developers/plugins.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst plugin = { /* plugin implementation */ };\n\n// chart1 and chart2 use \"plugin\"\nconst chart1 = new Chart(ctx, {\n    plugins: [plugin]\n});\n\nconst chart2 = new Chart(ctx, {\n    plugins: [plugin]\n});\n\n// chart3 doesn't use \"plugin\"\nconst chart3 = new Chart(ctx, {});\n```\n\n----------------------------------------\n\nTITLE: Configuring Point Styles in Chart.js Line Charts\nDESCRIPTION: A comprehensive example showing how to configure and dynamically change point styles in Chart.js line charts. The code includes action handlers for different point styles, data setup with sample values, and chart configuration with responsive options. Point styles include circle, cross, crossRot, dash, line, rect, rectRounded, rectRot, star, triangle, and a false option.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/samples/line/point-styling.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// <block:actions:2>\nconst actions = [\n  {\n    name: 'pointStyle: circle (default)',\n    handler: (chart) => {\n      chart.data.datasets.forEach(dataset => {\n        dataset.pointStyle = 'circle';\n      });\n      chart.update();\n    }\n  },\n  {\n    name: 'pointStyle: cross',\n    handler: (chart) => {\n      chart.data.datasets.forEach(dataset => {\n        dataset.pointStyle = 'cross';\n      });\n      chart.update();\n    }\n  },\n  {\n    name: 'pointStyle: crossRot',\n    handler: (chart) => {\n      chart.data.datasets.forEach(dataset => {\n        dataset.pointStyle = 'crossRot';\n      });\n      chart.update();\n    }\n  },\n  {\n    name: 'pointStyle: dash',\n    handler: (chart) => {\n      chart.data.datasets.forEach(dataset => {\n        dataset.pointStyle = 'dash';\n      });\n      chart.update();\n    }\n  },\n  {\n    name: 'pointStyle: line',\n    handler: (chart) => {\n      chart.data.datasets.forEach(dataset => {\n        dataset.pointStyle = 'line';\n      });\n      chart.update();\n    }\n  },\n  {\n    name: 'pointStyle: rect',\n    handler: (chart) => {\n      chart.data.datasets.forEach(dataset => {\n        dataset.pointStyle = 'rect';\n      });\n      chart.update();\n    }\n  },\n  {\n    name: 'pointStyle: rectRounded',\n    handler: (chart) => {\n      chart.data.datasets.forEach(dataset => {\n        dataset.pointStyle = 'rectRounded';\n      });\n      chart.update();\n    }\n  },\n  {\n    name: 'pointStyle: rectRot',\n    handler: (chart) => {\n      chart.data.datasets.forEach(dataset => {\n        dataset.pointStyle = 'rectRot';\n      });\n      chart.update();\n    }\n  },\n  {\n    name: 'pointStyle: star',\n    handler: (chart) => {\n      chart.data.datasets.forEach(dataset => {\n        dataset.pointStyle = 'star';\n      });\n      chart.update();\n    }\n  },\n  {\n    name: 'pointStyle: triangle',\n    handler: (chart) => {\n      chart.data.datasets.forEach(dataset => {\n        dataset.pointStyle = 'triangle';\n      });\n      chart.update();\n    }\n  },\n  {\n    name: 'pointStyle: false',\n    handler: (chart) => {\n      chart.data.datasets.forEach(dataset => {\n        dataset.pointStyle = false;\n      });\n      chart.update();\n    }\n  }\n];\n// </block:actions>\n\n// <block:setup:1>\nconst data = {\n  labels: ['Day 1', 'Day 2', 'Day 3', 'Day 4', 'Day 5', 'Day 6'],\n  datasets: [\n    {\n      label: 'Dataset',\n      data: Utils.numbers({count: 6, min: -100, max: 100}),\n      borderColor: Utils.CHART_COLORS.red,\n      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red, 0.5),\n      pointStyle: 'circle',\n      pointRadius: 10,\n      pointHoverRadius: 15\n    }\n  ]\n};\n// </block:setup>\n\n// <block:config:0>\nconst config = {\n  type: 'line',\n  data: data,\n  options: {\n    responsive: true,\n    plugins: {\n      title: {\n        display: true,\n        text: (ctx) => 'Point Style: ' + ctx.chart.data.datasets[0].pointStyle,\n      }\n    }\n  }\n};\n// </block:config>\n\nmodule.exports = {\n  actions: actions,\n  config: config,\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring and Initializing Scatter Chart with Chart.js\nDESCRIPTION: This code snippet sets up the data, configuration, and actions for a scatter chart using Chart.js. It includes data generation, chart options, and interactive functions for randomizing data, adding/removing datasets, and adding/removing data points.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/samples/other-charts/scatter.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// <block:setup:1>\nconst DATA_COUNT = 7;\nconst NUMBER_CFG = {count: DATA_COUNT, rmin: 1, rmax: 1, min: 0, max: 100};\n\nconst data = {\n  datasets: [\n    {\n      label: 'Dataset 1',\n      data: Utils.bubbles(NUMBER_CFG),\n      borderColor: Utils.CHART_COLORS.red,\n      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red, 0.5),\n    },\n    {\n      label: 'Dataset 2',\n      data: Utils.bubbles(NUMBER_CFG),\n      borderColor: Utils.CHART_COLORS.orange,\n      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.orange, 0.5),\n    }\n  ]\n};\n// </block:setup>\n\n// <block:actions:2>\nconst actions = [\n  {\n    name: 'Randomize',\n    handler(chart) {\n      chart.data.datasets.forEach(dataset => {\n        dataset.data = Utils.bubbles({count: DATA_COUNT, rmin: 1, rmax: 1, min: 0, max: 100});\n      });\n      chart.update();\n    }\n  },\n  {\n    name: 'Add Dataset',\n    handler(chart) {\n      const chartData = chart.data;\n      const dsColor = Utils.namedColor(chartData.datasets.length);\n      const newDataset = {\n        label: 'Dataset ' + (chartData.datasets.length + 1),\n        backgroundColor: Utils.transparentize(dsColor, 0.5),\n        borderColor: dsColor,\n        data: Utils.bubbles({count: DATA_COUNT, rmin: 1, rmax: 1, min: 0, max: 100}),\n      };\n      chart.data.datasets.push(newDataset);\n      chart.update();\n    }\n  },\n  {\n    name: 'Add Data',\n    handler(chart) {\n      const chartData = chart.data;\n      if (chartData.datasets.length > 0) {\n\n        for (let index = 0; index < chartData.datasets.length; ++index) {\n          chartData.datasets[index].data.push(Utils.bubbles({count: 1, rmin: 1, rmax: 1, min: 0, max: 100})[0]);\n        }\n\n        chart.update();\n      }\n    }\n  },\n  {\n    name: 'Remove Dataset',\n    handler(chart) {\n      chart.data.datasets.pop();\n      chart.update();\n    }\n  },\n  {\n    name: 'Remove Data',\n    handler(chart) {\n      chart.data.datasets.forEach(dataset => {\n        dataset.data.pop();\n      });\n\n      chart.update();\n    }\n  }\n];\n// </block:actions>\n\n// <block:config:0>\nconst config = {\n  type: 'scatter',\n  data: data,\n  options: {\n    responsive: true,\n    plugins: {\n      legend: {\n        position: 'top',\n      },\n      title: {\n        display: true,\n        text: 'Chart.js Scatter Chart'\n      }\n    }\n  },\n};\n// </block:config>\n\nmodule.exports = {\n  actions: actions,\n  config: config,\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring and Styling a Line Chart using Chart.js\nDESCRIPTION: This code sets up data and configuration for a line chart with three differently styled datasets. It demonstrates various styling options like fill, color, and border dash. The chart is responsive and includes interaction modes and axis labels.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/samples/line/styling.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// <block:setup:1>\nconst DATA_COUNT = 7;\nconst NUMBER_CFG = {count: DATA_COUNT, min: -100, max: 100};\n\nconst labels = Utils.months({count: DATA_COUNT});\nconst data = {\n  labels: labels,\n  datasets: [\n    {\n      label: 'Unfilled',\n      fill: false,\n      backgroundColor: Utils.CHART_COLORS.blue,\n      borderColor: Utils.CHART_COLORS.blue,\n      data: Utils.numbers(NUMBER_CFG),\n    }, {\n      label: 'Dashed',\n      fill: false,\n      backgroundColor: Utils.CHART_COLORS.green,\n      borderColor: Utils.CHART_COLORS.green,\n      borderDash: [5, 5],\n      data: Utils.numbers(NUMBER_CFG),\n    }, {\n      label: 'Filled',\n      backgroundColor: Utils.CHART_COLORS.red,\n      borderColor: Utils.CHART_COLORS.red,\n      data: Utils.numbers(NUMBER_CFG),\n      fill: true,\n    }\n  ]\n};\n// </block:setup>\n\n// <block:config:0>\nconst config = {\n  type: 'line',\n  data: data,\n  options: {\n    responsive: true,\n    plugins: {\n      title: {\n        display: true,\n        text: 'Chart.js Line Chart'\n      },\n    },\n    interaction: {\n      mode: 'index',\n      intersect: false\n    },\n    scales: {\n      x: {\n        display: true,\n        title: {\n          display: true,\n          text: 'Month'\n        }\n      },\n      y: {\n        display: true,\n        title: {\n          display: true,\n          text: 'Value'\n        }\n      }\n    }\n  },\n};\n// </block:config>\n\nmodule.exports = {\n  actions: [],\n  config: config,\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring and Rendering Stacked Radar Chart with Chart.js\nDESCRIPTION: This snippet sets up the data, configuration, and actions for a stacked radar chart. It includes functions for generating labels and data, defines multiple datasets with different colors and fill options, and provides interactive actions for chart manipulation.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/samples/area/radar.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// <block:setup:1>\nconst inputs = {\n  min: 8,\n  max: 16,\n  count: 8,\n  decimals: 2,\n  continuity: 1\n};\n\nconst generateLabels = () => {\n  return Utils.months({count: inputs.count});\n};\n\nconst generateData = () => {\n  const values = Utils.numbers(inputs);\n  inputs.from = values;\n  return values;\n};\n\nconst labels = Utils.months({count: 8});\nconst data = {\n  labels: generateLabels(),\n  datasets: [\n    {\n      label: 'D0',\n      data: generateData(),\n      borderColor: Utils.CHART_COLORS.red,\n      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red),\n    },\n    {\n      label: 'D1',\n      data: generateData(),\n      borderColor: Utils.CHART_COLORS.orange,\n      hidden: true,\n      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.orange),\n      fill: '-1'\n    },\n    {\n      label: 'D2',\n      data: generateData(),\n      borderColor: Utils.CHART_COLORS.yellow,\n      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.yellow),\n      fill: 1\n    },\n    {\n      label: 'D3',\n      data: generateData(),\n      borderColor: Utils.CHART_COLORS.green,\n      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.green),\n      fill: false\n    },\n    {\n      label: 'D4',\n      data: generateData(),\n      borderColor: Utils.CHART_COLORS.blue,\n      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.blue),\n      fill: '-1'\n    },\n    {\n      label: 'D5',\n      data: generateData(),\n      borderColor: Utils.CHART_COLORS.purple,\n      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.purple),\n      fill: '-1'\n    },\n    {\n      label: 'D6',\n      data: generateData(),\n      borderColor: Utils.CHART_COLORS.grey,\n      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.grey),\n      fill: {value: 85}\n    }\n  ]\n};\n// </block:setup>\n\n// <block:actions:2>\nlet smooth = false;\nlet propagate = false;\n\nconst actions = [\n  {\n    name: 'Randomize',\n    handler(chart) {\n      inputs.from = [];\n      chart.data.datasets.forEach(dataset => {\n        dataset.data = generateData();\n      });\n      chart.update();\n    }\n  },\n  {\n    name: 'Propagate',\n    handler(chart) {\n      propagate = !propagate;\n      chart.options.plugins.filler.propagate = propagate;\n      chart.update();\n\n    }\n  },\n  {\n    name: 'Smooth',\n    handler(chart) {\n      smooth = !smooth;\n      chart.options.elements.line.tension = smooth ? 0.4 : 0;\n      chart.update();\n    }\n  }\n];\n// </block:actions>\n\n// <block:config:0>\nconst config = {\n  type: 'radar',\n  data: data,\n  options: {\n    plugins: {\n      filler: {\n        propagate: false\n      },\n      'samples-filler-analyser': {\n        target: 'chart-analyser'\n      }\n    },\n    interaction: {\n      intersect: false\n    }\n  }\n};\n// </block:config>\n\nmodule.exports = {\n  actions: actions,\n  config: config\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Radial Gradient Function\nDESCRIPTION: Implements a function to create three-color radial gradients for chart elements. Includes caching mechanism and handles chart area calculations.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/samples/advanced/radial-gradient.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction createRadialGradient3(context, c1, c2, c3) {\n  const chartArea = context.chart.chartArea;\n  if (!chartArea) {\n    return;\n  }\n\n  const chartWidth = chartArea.right - chartArea.left;\n  const chartHeight = chartArea.bottom - chartArea.top;\n  if (width !== chartWidth || height !== chartHeight) {\n    cache.clear();\n  }\n  let gradient = cache.get(c1 + c2 + c3);\n  if (!gradient) {\n    width = chartWidth;\n    height = chartHeight;\n    const centerX = (chartArea.left + chartArea.right) / 2;\n    const centerY = (chartArea.top + chartArea.bottom) / 2;\n    const r = Math.min(\n      (chartArea.right - chartArea.left) / 2,\n      (chartArea.bottom - chartArea.top) / 2\n    );\n    const ctx = context.chart.ctx;\n    gradient = ctx.createRadialGradient(centerX, centerY, 0, centerX, centerY, r);\n    gradient.addColorStop(0, c1);\n    gradient.addColorStop(0.5, c2);\n    gradient.addColorStop(1, c3);\n    cache.set(c1 + c2 + c3, gradient);\n  }\n\n  return gradient;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Chart.js Line Chart Options in JavaScript\nDESCRIPTION: This snippet defines the configuration object for the line chart. It specifies the chart type as 'line', sets the data, and configures options such as responsiveness, legend position, and chart title.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/samples/line/line.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n  type: 'line',\n  data: data,\n  options: {\n    responsive: true,\n    plugins: {\n      legend: {\n        position: 'top',\n      },\n      title: {\n        display: true,\n        text: 'Chart.js Line Chart'\n      }\n    }\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Chart.js Tick Options with Action Handlers in JavaScript\nDESCRIPTION: A complete Chart.js example that demonstrates tick configuration options including multi-line labels, label filtering, color customization, and alignment control. The code is structured in blocks for actions, setup, and configuration, and exports these components for use in the Chart.js framework.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/samples/scale-options/ticks.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// <block:actions:2>\nconst actions = [\n  {\n    name: 'Alignment: start',\n    handler(chart) {\n      chart.options.scales.x.ticks.align = 'start';\n      chart.update();\n    }\n  },\n  {\n    name: 'Alignment: center (default)',\n    handler(chart) {\n      chart.options.scales.x.ticks.align = 'center';\n      chart.update();\n    }\n  },\n  {\n    name: 'Alignment: end',\n    handler(chart) {\n      chart.options.scales.x.ticks.align = 'end';\n      chart.update();\n    }\n  },\n];\n// </block:actions>\n\n\n// <block:setup:1>\nconst DATA_COUNT = 12;\nconst NUMBER_CFG = {count: DATA_COUNT, min: 0, max: 100};\nconst data = {\n  labels: [['June', '2015'], 'July', 'August', 'September', 'October', 'November', 'December', ['January', '2016'], 'February', 'March', 'April', 'May'],\n  datasets: [\n    {\n      label: 'Dataset 1',\n      data: Utils.numbers(NUMBER_CFG),\n      fill: false,\n      borderColor: Utils.CHART_COLORS.red,\n      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red, 0.5),\n    },\n    {\n      label: 'Dataset 2',\n      data: Utils.numbers(NUMBER_CFG),\n      fill: false,\n      borderColor: Utils.CHART_COLORS.blue,\n      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.blue, 0.5),\n    }\n  ]\n};\n// </block:setup>\n\n// <block:config:0>\nconst config = {\n  type: 'line',\n  data: data,\n  options: {\n    responsive: true,\n    plugins: {\n      title: {\n        display: true,\n        text: 'Chart with Tick Configuration'\n      }\n    },\n    scales: {\n      x: {\n        ticks: {\n          // For a category axis, the val is the index so the lookup via getLabelForValue is needed\n          callback: function(val, index) {\n            // Hide every 2nd tick label\n            return index % 2 === 0 ? this.getLabelForValue(val) : '';\n          },\n          color: 'red',\n        }\n      }\n    }\n  },\n};\n// </block:config>\n\nmodule.exports = {\n  actions: actions,\n  config: config,\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Chart.js Quadrants Plugin with Scatter Plot\nDESCRIPTION: Complete implementation of a Chart.js scatter plot with quadrant backgrounds. The code defines sample datasets, creates a plugin to draw colored quadrants, and sets up the chart configuration with randomization capabilities. The plugin divides the chart area into four colored regions based on X and Y axes zero points.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/samples/plugins/quadrants.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// <block:data:2>\nconst DATA_COUNT = 7;\nconst NUMBER_CFG = {count: DATA_COUNT, min: -100, max: 100};\nconst data = {\n  datasets: [\n    {\n      label: 'Dataset 1',\n      data: Utils.points(NUMBER_CFG),\n      borderColor: Utils.CHART_COLORS.red,\n      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red, 0.5),\n    },\n    {\n      label: 'Dataset 2',\n      data: Utils.points(NUMBER_CFG),\n      borderColor: Utils.CHART_COLORS.blue,\n      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.blue, 0.5),\n    }\n  ]\n};\n// </block:data>\n\n// <block:plugin:1>\nconst quadrants = {\n  id: 'quadrants',\n  beforeDraw(chart, args, options) {\n    const {ctx, chartArea: {left, top, right, bottom}, scales: {x, y}} = chart;\n    const midX = x.getPixelForValue(0);\n    const midY = y.getPixelForValue(0);\n    ctx.save();\n    ctx.fillStyle = options.topLeft;\n    ctx.fillRect(left, top, midX - left, midY - top);\n    ctx.fillStyle = options.topRight;\n    ctx.fillRect(midX, top, right - midX, midY - top);\n    ctx.fillStyle = options.bottomRight;\n    ctx.fillRect(midX, midY, right - midX, bottom - midY);\n    ctx.fillStyle = options.bottomLeft;\n    ctx.fillRect(left, midY, midX - left, bottom - midY);\n    ctx.restore();\n  }\n};\n// </block:plugin>\n\n// <block:config:0>\nconst config = {\n  type: 'scatter',\n  data: data,\n  options: {\n    plugins: {\n      quadrants: {\n        topLeft: Utils.CHART_COLORS.red,\n        topRight: Utils.CHART_COLORS.blue,\n        bottomRight: Utils.CHART_COLORS.green,\n        bottomLeft: Utils.CHART_COLORS.yellow,\n      }\n    }\n  },\n  plugins: [quadrants]\n};\n// </block:config>\n\nconst actions = [\n  {\n    name: 'Randomize',\n    handler(chart) {\n      chart.data.datasets.forEach(dataset => {\n        dataset.data = Utils.points(NUMBER_CFG);\n      });\n      chart.update();\n    }\n  },\n];\n\nmodule.exports = {\n  actions,\n  config,\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Chart.js with Custom Point Styles for Tooltips\nDESCRIPTION: This code snippet sets up a Chart.js configuration with three datasets, each using a different point style (triangle, circle, star). It also includes an action to toggle the use of point styles in tooltips and configures the chart options accordingly.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/samples/tooltip/point-style.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// <block:actions:2>\nconst actions = [\n  {\n    name: 'Toggle Tooltip Point Style',\n    handler(chart) {\n      chart.options.plugins.tooltip.usePointStyle = !chart.options.plugins.tooltip.usePointStyle;\n      chart.update();\n    }\n  },\n];\n// </block:actions>\n\n// <block:setup:1>\nconst DATA_COUNT = 7;\nconst NUMBER_CFG = {count: DATA_COUNT, min: -100, max: 100};\nconst data = {\n  labels: Utils.months({count: DATA_COUNT}),\n  datasets: [\n    {\n      label: 'Triangles',\n      data: Utils.numbers(NUMBER_CFG),\n      fill: false,\n      borderColor: Utils.CHART_COLORS.red,\n      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red, 0.5),\n      pointStyle: 'triangle',\n      pointRadius: 6,\n    },\n    {\n      label: 'Circles',\n      data: Utils.numbers(NUMBER_CFG),\n      fill: false,\n      borderColor: Utils.CHART_COLORS.blue,\n      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.blue, 0.5),\n      pointStyle: 'circle',\n      pointRadius: 6,\n    },\n    {\n      label: 'Stars',\n      data: Utils.numbers(NUMBER_CFG),\n      fill: false,\n      borderColor: Utils.CHART_COLORS.green,\n      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.green, 0.5),\n      pointStyle: 'star',\n      pointRadius: 6,\n    }\n  ]\n};\n// </block:setup>\n\n// <block:config:0>\nconst config = {\n  type: 'line',\n  data: data,\n  options: {\n    interaction: {\n      mode: 'index',\n    },\n    plugins: {\n      title: {\n        display: true,\n        text: (ctx) => 'Tooltip point style: ' + ctx.chart.options.plugins.tooltip.usePointStyle,\n      },\n      tooltip: {\n        usePointStyle: true,\n      }\n    }\n  }\n};\n// </block:config>\n\nmodule.exports = {\n  actions: actions,\n  config: config,\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Chart.js Drop Animation with Interactive Actions\nDESCRIPTION: Complete Chart.js configuration that sets up a line chart with drop animation effects and interactive controls. Includes actions for randomizing data, adding/removing datasets and data points, and custom animation configurations using easeInOutElastic easing.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/samples/animations/drop.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// <block:actions:2>\nconst actions = [\n  {\n    name: 'Randomize',\n    handler(chart) {\n      chart.data.datasets.forEach(dataset => {\n        dataset.data = Utils.numbers({count: chart.data.labels.length, min: -100, max: 100});\n      });\n      chart.update();\n    }\n  },\n  {\n    name: 'Add Dataset',\n    handler(chart) {\n      const data = chart.data;\n      const dsColor = Utils.namedColor(chart.data.datasets.length);\n      const newDataset = {\n        label: 'Dataset ' + (data.datasets.length + 1),\n        backgroundColor: Utils.transparentize(dsColor, 0.5),\n        borderColor: dsColor,\n        data: Utils.numbers({count: data.labels.length, min: -100, max: 100}),\n      };\n      chart.data.datasets.push(newDataset);\n      chart.update();\n    }\n  },\n  {\n    name: 'Add Data',\n    handler(chart) {\n      const data = chart.data;\n      if (data.datasets.length > 0) {\n        data.labels = Utils.months({count: data.labels.length + 1});\n\n        for (let index = 0; index < data.datasets.length; ++index) {\n          data.datasets[index].data.push(Utils.rand(-100, 100));\n        }\n\n        chart.update();\n      }\n    }\n  },\n  {\n    name: 'Remove Dataset',\n    handler(chart) {\n      chart.data.datasets.pop();\n      chart.update();\n    }\n  },\n  {\n    name: 'Remove Data',\n    handler(chart) {\n      chart.data.labels.splice(-1, 1); // remove the label first\n\n      chart.data.datasets.forEach(dataset => {\n        dataset.data.pop();\n      });\n\n      chart.update();\n    }\n  }\n];\n// </block:actions>\n\n// <block:setup:1>\nconst DATA_COUNT = 7;\nconst NUMBER_CFG = {count: DATA_COUNT, min: -100, max: 100};\n\nconst labels = Utils.months({count: 7});\nconst data = {\n  labels: labels,\n  datasets: [\n    {\n      label: 'Dataset 1',\n      animations: {\n        y: {\n          duration: 2000,\n          delay: 500\n        }\n      },\n      data: Utils.numbers(NUMBER_CFG),\n      borderColor: Utils.CHART_COLORS.red,\n      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red, 0.5),\n      fill: 1,\n      tension: 0.5\n    },\n    {\n      label: 'Dataset 2',\n      data: Utils.numbers(NUMBER_CFG),\n      borderColor: Utils.CHART_COLORS.blue,\n      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.blue, 0.5),\n    }\n  ]\n};\n// </block:setup>\n\n// <block:config:0>\nconst config = {\n  type: 'line',\n  data: data,\n  options: {\n    animations: {\n      y: {\n        easing: 'easeInOutElastic',\n        from: (ctx) => {\n          if (ctx.type === 'data') {\n            if (ctx.mode === 'default' && !ctx.dropped) {\n              ctx.dropped = true;\n              return 0;\n            }\n          }\n        }\n      }\n    },\n  },\n};\n// </block:config>\n\nmodule.exports = {\n  actions: actions,\n  config: config,\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Legend Position in Chart.js\nDESCRIPTION: This code sets up a line chart with actions to change the legend position, defines chart data, and specifies the chart configuration. It uses Chart.js utilities for generating sample data and colors.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/samples/legend/position.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// <block:actions:2>\nconst actions = [\n  {\n    name: 'Position: top',\n    handler(chart) {\n      chart.options.plugins.legend.position = 'top';\n      chart.update();\n    }\n  },\n  {\n    name: 'Position: right',\n    handler(chart) {\n      chart.options.plugins.legend.position = 'right';\n      chart.update();\n    }\n  },\n  {\n    name: 'Position: bottom',\n    handler(chart) {\n      chart.options.plugins.legend.position = 'bottom';\n      chart.update();\n    }\n  },\n  {\n    name: 'Position: left',\n    handler(chart) {\n      chart.options.plugins.legend.position = 'left';\n      chart.update();\n    }\n  },\n];\n// </block:actions>\n\n\n// <block:setup:1>\nconst DATA_COUNT = 7;\nconst NUMBER_CFG = {count: DATA_COUNT, min: -100, max: 100};\nconst data = {\n  labels: Utils.months({count: DATA_COUNT}),\n  datasets: [\n    {\n      label: 'Dataset 1',\n      data: Utils.numbers(NUMBER_CFG),\n      fill: false,\n      borderColor: Utils.CHART_COLORS.red,\n      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red, 0.5),\n    },\n  ]\n};\n// </block:setup>\n\n// <block:config:0>\nconst config = {\n  type: 'line',\n  data: data,\n};\n// </block:config>\n\nmodule.exports = {\n  actions: actions,\n  config: config,\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Hide and Show Transitions in Chart.js\nDESCRIPTION: This code demonstrates how to configure show and hide transitions for a line chart. It animates the x and y coordinates from/to zero when showing or hiding the dataset, creating a smooth appearance/disappearance effect.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/configuration/animations.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// <block:setup:1>\nconst data = {\n  labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\n  datasets: [{\n    label: 'Try hiding me',\n    data: [65, 59, 80, 81, 26, 55, 40],\n    fill: false,\n    borderColor: 'rgb(75, 192, 192)',\n  }]\n};\n// </block:setup>\n\n// <block:config:0>\nconst config = {\n  type: 'line',\n  data: data,\n  options: {\n    transitions: {\n      show: {\n        animations: {\n          x: {\n            from: 0\n          },\n          y: {\n            from: 0\n          }\n        }\n      },\n      hide: {\n        animations: {\n          x: {\n            to: 0\n          },\n          y: {\n            to: 0\n          }\n        }\n      }\n    }\n  }\n};\n// </block:config>\n\nmodule.exports = {\n  actions: [],\n  config: config,\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Empty State Plugin for Chart.js Doughnut Charts in JavaScript\nDESCRIPTION: This code creates a custom Chart.js plugin that draws a circular outline when a doughnut chart contains no data. The plugin checks if any datasets contain data, and if not, draws a circle with customizable color, width, and radius. The implementation includes the data structure, plugin definition, chart configuration, and action handlers.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/samples/plugins/doughnut-empty-state.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// <block:data:2>\nconst data = {\n  labels: [],\n  datasets: [\n    {\n      label: 'Dataset 1',\n      data: []\n    }\n  ]\n};\n// </block:data>\n\n// <block:plugin:1>\nconst plugin = {\n  id: 'emptyDoughnut',\n  afterDraw(chart, args, options) {\n    const {datasets} = chart.data;\n    const {color, width, radiusDecrease} = options;\n    let hasData = false;\n\n    for (let i = 0; i < datasets.length; i += 1) {\n      const dataset = datasets[i];\n      hasData |= dataset.data.length > 0;\n    }\n\n    if (!hasData) {\n      const {chartArea: {left, top, right, bottom}, ctx} = chart;\n      const centerX = (left + right) / 2;\n      const centerY = (top + bottom) / 2;\n      const r = Math.min(right - left, bottom - top) / 2;\n\n      ctx.beginPath();\n      ctx.lineWidth = width || 2;\n      ctx.strokeStyle = color || 'rgba(255, 128, 0, 0.5)';\n      ctx.arc(centerX, centerY, (r - radiusDecrease || 0), 0, 2 * Math.PI);\n      ctx.stroke();\n    }\n  }\n};\n// </block:plugin>\n\n// <block:config:0>\nconst config = {\n  type: 'doughnut',\n  data: data,\n  options: {\n    plugins: {\n      emptyDoughnut: {\n        color: 'rgba(255, 128, 0, 0.5)',\n        width: 2,\n        radiusDecrease: 20\n      }\n    }\n  },\n  plugins: [plugin]\n};\n// </block:config>\n\nconst actions = [\n  {\n    name: 'Randomize',\n    handler(chart) {\n      chart.data.datasets.forEach(dataset => {\n        dataset.data = Utils.points(NUMBER_CFG);\n      });\n      chart.update();\n    }\n  },\n];\n\nmodule.exports = {\n  actions,\n  config,\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Time Scale Chart with Chart.js\nDESCRIPTION: This snippet demonstrates the complete setup for a time scale line chart using Chart.js. It includes data initialization, chart configuration, and custom actions for data randomization. The chart uses three datasets, including one with point data, and configures time-based x-axis and value-based y-axis.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/samples/scales/time-line.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// <block:actions:2>\nconst actions = [\n  {\n    name: 'Randomize',\n    handler(chart) {\n      chart.data.datasets.forEach(dataset => {\n        dataset.data.forEach(function(dataObj, j) {\n          const newVal = Utils.rand(0, 100);\n\n          if (typeof dataObj === 'object') {\n            dataObj.y = newVal;\n          } else {\n            dataset.data[j] = newVal;\n          }\n        });\n      });\n      chart.update();\n    }\n  },\n];\n// </block:actions>\n\n// <block:setup:1>\nconst DATA_COUNT = 7;\nconst NUMBER_CFG = {count: DATA_COUNT, min: 0, max: 100};\n\nconst data = {\n  labels: [ // Date Objects\n    Utils.newDate(0),\n    Utils.newDate(1),\n    Utils.newDate(2),\n    Utils.newDate(3),\n    Utils.newDate(4),\n    Utils.newDate(5),\n    Utils.newDate(6)\n  ],\n  datasets: [{\n    label: 'My First dataset',\n    backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red, 0.5),\n    borderColor: Utils.CHART_COLORS.red,\n    fill: false,\n    data: Utils.numbers(NUMBER_CFG),\n  }, {\n    label: 'My Second dataset',\n    backgroundColor: Utils.transparentize(Utils.CHART_COLORS.blue, 0.5),\n    borderColor: Utils.CHART_COLORS.blue,\n    fill: false,\n    data: Utils.numbers(NUMBER_CFG),\n  }, {\n    label: 'Dataset with point data',\n    backgroundColor: Utils.transparentize(Utils.CHART_COLORS.green, 0.5),\n    borderColor: Utils.CHART_COLORS.green,\n    fill: false,\n    data: [{\n      x: Utils.newDateString(0),\n      y: Utils.rand(0, 100)\n    }, {\n      x: Utils.newDateString(5),\n      y: Utils.rand(0, 100)\n    }, {\n      x: Utils.newDateString(7),\n      y: Utils.rand(0, 100)\n    }, {\n      x: Utils.newDateString(15),\n      y: Utils.rand(0, 100)\n    }],\n  }]\n};\n// </block:setup>\n\n// <block:config:0>\nconst config = {\n  type: 'line',\n  data: data,\n  options: {\n    plugins: {\n      title: {\n        text: 'Chart.js Time Scale',\n        display: true\n      }\n    },\n    scales: {\n      x: {\n        type: 'time',\n        time: {\n          // Luxon format string\n          tooltipFormat: 'DD T'\n        },\n        title: {\n          display: true,\n          text: 'Date'\n        }\n      },\n      y: {\n        title: {\n          display: true,\n          text: 'value'\n        }\n      }\n    },\n  },\n};\n// </block:config>\n\nmodule.exports = {\n  actions: actions,\n  config: config,\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Chart.js Line Chart Options and Scale Settings\nDESCRIPTION: This configuration code defines a responsive line chart with customized title, interaction settings, and axis scales. It specifies non-intersecting interactions and sets Y-axis range with suggested minimum and maximum values to properly display the data range.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/samples/line/interpolation.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// <block:config:0>\nconst config = {\n  type: 'line',\n  data: data,\n  options: {\n    responsive: true,\n    plugins: {\n      title: {\n        display: true,\n        text: 'Chart.js Line Chart - Cubic interpolation mode'\n      },\n    },\n    interaction: {\n      intersect: false,\n    },\n    scales: {\n      x: {\n        display: true,\n        title: {\n          display: true\n        }\n      },\n      y: {\n        display: true,\n        title: {\n          display: true,\n          text: 'Value'\n        },\n        suggestedMin: -10,\n        suggestedMax: 200\n      }\n    }\n  },\n};\n// </block:config>\n```\n\n----------------------------------------\n\nTITLE: Configuring a Stacked Bar Chart with Chart.js in JavaScript\nDESCRIPTION: A complete Chart.js configuration for a stacked bar chart with three datasets. The code defines data structure, chart options including stacking on both x and y axes, and an action for randomizing data. It uses utility functions to generate sample data and color schemes.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/samples/bar/stacked.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// <block:actions:2>\nconst actions = [\n  {\n    name: 'Randomize',\n    handler(chart) {\n      chart.data.datasets.forEach(dataset => {\n        dataset.data = Utils.numbers({count: chart.data.labels.length, min: -100, max: 100});\n      });\n      chart.update();\n    }\n  },\n];\n// </block:actions>\n\n// <block:setup:1>\nconst DATA_COUNT = 7;\nconst NUMBER_CFG = {count: DATA_COUNT, min: -100, max: 100};\n\nconst labels = Utils.months({count: 7});\nconst data = {\n  labels: labels,\n  datasets: [\n    {\n      label: 'Dataset 1',\n      data: Utils.numbers(NUMBER_CFG),\n      backgroundColor: Utils.CHART_COLORS.red,\n    },\n    {\n      label: 'Dataset 2',\n      data: Utils.numbers(NUMBER_CFG),\n      backgroundColor: Utils.CHART_COLORS.blue,\n    },\n    {\n      label: 'Dataset 3',\n      data: Utils.numbers(NUMBER_CFG),\n      backgroundColor: Utils.CHART_COLORS.green,\n    },\n  ]\n};\n// </block:setup>\n\n// <block:config:0>\nconst config = {\n  type: 'bar',\n  data: data,\n  options: {\n    plugins: {\n      title: {\n        display: true,\n        text: 'Chart.js Bar Chart - Stacked'\n      },\n    },\n    responsive: true,\n    scales: {\n      x: {\n        stacked: true,\n      },\n      y: {\n        stacked: true\n      }\n    }\n  }\n};\n// </block:config>\n\nmodule.exports = {\n  actions: actions,\n  config: config,\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Chart.js Line Chart with Fill Boundaries\nDESCRIPTION: Complete implementation of a Chart.js line chart with configurable fill boundaries and interactive controls. Includes setup for data generation, chart configuration, and action handlers for dynamic updates. Features options for different fill modes (false, origin, start, end) and smooth line transitions.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/samples/area/line-boundaries.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// <block:setup:2>\nconst inputs = {\n  min: -100,\n  max: 100,\n  count: 8,\n  decimals: 2,\n  continuity: 1\n};\n\nconst generateLabels = () => {\n  return Utils.months({count: inputs.count});\n};\n\nconst generateData = () => (Utils.numbers(inputs));\n// </block:setup>\n\n// <block:data:0>\nconst data = {\n  labels: generateLabels(),\n  datasets: [\n    {\n      label: 'Dataset',\n      data: generateData(),\n      borderColor: Utils.CHART_COLORS.red,\n      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red),\n      fill: false\n    }\n  ]\n};\n// </block:data>\n\n// <block:actions:3>\nlet smooth = false;\n\nconst actions = [\n  {\n    name: 'Fill: false (default)',\n    handler: (chart) => {\n      chart.data.datasets.forEach(dataset => {\n        dataset.fill = false;\n      });\n      chart.update();\n    }\n  },\n  {\n    name: 'Fill: origin',\n    handler: (chart) => {\n      chart.data.datasets.forEach(dataset => {\n        dataset.fill = 'origin';\n      });\n      chart.update();\n    }\n  },\n  {\n    name: 'Fill: start',\n    handler: (chart) => {\n      chart.data.datasets.forEach(dataset => {\n        dataset.fill = 'start';\n      });\n      chart.update();\n    }\n  },\n  {\n    name: 'Fill: end',\n    handler: (chart) => {\n      chart.data.datasets.forEach(dataset => {\n        dataset.fill = 'end';\n      });\n      chart.update();\n    }\n  },\n  {\n    name: 'Randomize',\n    handler(chart) {\n      chart.data.datasets.forEach(dataset => {\n        dataset.data = generateData();\n      });\n      chart.update();\n    }\n  },\n  {\n    name: 'Smooth',\n    handler(chart) {\n      smooth = !smooth;\n      chart.options.elements.line.tension = smooth ? 0.4 : 0;\n      chart.update();\n    }\n  }\n];\n// </block:actions>\n\n// <block:config:1>\nconst config = {\n  type: 'line',\n  data: data,\n  options: {\n    plugins: {\n      filler: {\n        propagate: false,\n      },\n      title: {\n        display: true,\n        text: (ctx) => 'Fill: ' + ctx.chart.data.datasets[0].fill\n      }\n    },\n    interaction: {\n      intersect: false,\n    }\n  },\n};\n// </block:config>\n\nmodule.exports = {\n  actions: actions,\n  config: config,\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring and Generating Bubble Chart Data with Chart.js\nDESCRIPTION: This snippet sets up the initial configuration, generates random data for the bubble chart, and defines custom styling functions. It demonstrates how to create dynamic, colorful bubbles with size and color based on data values.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/samples/scriptable/bubble.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// <block:setup:2>\nconst DATA_COUNT = 16;\nconst MIN_XY = -150;\nconst MAX_XY = 100;\nUtils.srand(110);\n\nconst actions = [\n  {\n    name: 'Randomize',\n    handler(chart) {\n      chart.data.datasets.forEach(dataset => {\n        dataset.data = generateData();\n      });\n      chart.update();\n    }\n  },\n];\n// </block:setup>\n\n// <block:data:1>\nfunction generateData() {\n  const data = [];\n  let i;\n\n  for (i = 0; i < DATA_COUNT; ++i) {\n    data.push({\n      x: Utils.rand(MIN_XY, MAX_XY),\n      y: Utils.rand(MIN_XY, MAX_XY),\n      v: Utils.rand(0, 1000)\n    });\n  }\n\n  return data;\n}\n\nconst data = {\n  datasets: [{\n    data: generateData()\n  }, {\n    data: generateData()\n  }]\n};\n// </block:data>\n\n// <block:options:0>\nfunction channelValue(x, y, values) {\n  return x < 0 && y < 0 ? values[0] : x < 0 ? values[1] : y < 0 ? values[2] : values[3];\n}\n\nfunction colorize(opaque, context) {\n  const value = context.raw;\n  const x = value.x / 100;\n  const y = value.y / 100;\n  const r = channelValue(x, y, [250, 150, 50, 0]);\n  const g = channelValue(x, y, [0, 50, 150, 250]);\n  const b = channelValue(x, y, [0, 150, 150, 250]);\n  const a = opaque ? 1 : 0.5 * value.v / 1000;\n\n  return 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')';\n}\n\nconst config = {\n  type: 'bubble',\n  data: data,\n  options: {\n    aspectRatio: 1,\n    plugins: {\n      legend: false,\n      tooltip: false,\n    },\n    elements: {\n      point: {\n        backgroundColor: colorize.bind(null, false),\n\n        borderColor: colorize.bind(null, true),\n\n        borderWidth: function(context) {\n          return Math.min(Math.max(1, context.datasetIndex + 1), 8);\n        },\n\n        hoverBackgroundColor: 'transparent',\n\n        hoverBorderColor: function(context) {\n          return Utils.color(context.datasetIndex);\n        },\n\n        hoverBorderWidth: function(context) {\n          return Math.round(8 * context.raw.v / 1000);\n        },\n\n        radius: function(context) {\n          const size = context.chart.width;\n          const base = Math.abs(context.raw.v) / 1000;\n          return (size / 24) * base;\n        }\n      }\n    }\n  }\n};\n// </block:options>\n\nmodule.exports = {\n  actions,\n  config,\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Chart.js with Custom Subtitle\nDESCRIPTION: This snippet shows how to create a line chart with Chart.js, including data setup and configuration of title and subtitle plugins. It demonstrates custom styling for the subtitle, including color, font properties, and padding.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/samples/subtitle/basic.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// <block:setup:1>\nconst DATA_COUNT = 7;\nconst NUMBER_CFG = {count: DATA_COUNT, min: -100, max: 100};\nconst data = {\n  labels: Utils.months({count: DATA_COUNT}),\n  datasets: [\n    {\n      label: 'Dataset 1',\n      data: Utils.numbers(NUMBER_CFG),\n      fill: false,\n      borderColor: Utils.CHART_COLORS.red,\n      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red, 0.5),\n    },\n  ]\n};\n// </block:setup>\n\n// <block:config:0>\nconst config = {\n  type: 'line',\n  data: data,\n  options: {\n    plugins: {\n      title: {\n        display: true,\n        text: 'Chart Title',\n      },\n      subtitle: {\n        display: true,\n        text: 'Chart Subtitle',\n        color: 'blue',\n        font: {\n          size: 12,\n          family: 'tahoma',\n          weight: 'normal',\n          style: 'italic'\n        },\n        padding: {\n          bottom: 10\n        }\n      }\n    }\n  }\n};\n// </block:config>\n\nmodule.exports = {\n  config: config,\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Chart.js Bar Chart with Delayed Animations\nDESCRIPTION: Creates a stacked bar chart with three datasets and implements progressive animation delays. The animation delay is calculated based on the data index and dataset index, creating a cascading effect where each bar appears sequentially. Includes randomization functionality and proper stacking configuration.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/samples/animations/delay.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// <block:actions:2>\nconst actions = [\n  {\n    name: 'Randomize',\n    handler(chart) {\n      chart.data.datasets.forEach(dataset => {\n        dataset.data = Utils.numbers({count: chart.data.labels.length, min: -100, max: 100});\n      });\n      chart.update();\n    }\n  },\n];\n// </block:actions>\n\n// <block:setup:1>\nconst DATA_COUNT = 7;\nconst NUMBER_CFG = {count: DATA_COUNT, min: -100, max: 100};\n\nconst labels = Utils.months({count: 7});\nconst data = {\n  labels: labels,\n  datasets: [\n    {\n      label: 'Dataset 1',\n      data: Utils.numbers(NUMBER_CFG),\n      backgroundColor: Utils.CHART_COLORS.red,\n    },\n    {\n      label: 'Dataset 2',\n      data: Utils.numbers(NUMBER_CFG),\n      backgroundColor: Utils.CHART_COLORS.blue,\n    },\n    {\n      label: 'Dataset 3',\n      data: Utils.numbers(NUMBER_CFG),\n      backgroundColor: Utils.CHART_COLORS.green,\n    },\n  ]\n};\n// </block:setup>\n\n// <block:config:0>\nlet delayed;\nconst config = {\n  type: 'bar',\n  data: data,\n  options: {\n    animation: {\n      onComplete: () => {\n        delayed = true;\n      },\n      delay: (context) => {\n        let delay = 0;\n        if (context.type === 'data' && context.mode === 'default' && !delayed) {\n          delay = context.dataIndex * 300 + context.datasetIndex * 100;\n        }\n        return delay;\n      },\n    },\n    scales: {\n      x: {\n        stacked: true,\n      },\n      y: {\n        stacked: true\n      }\n    }\n  }\n};\n// </block:config>\n\nmodule.exports = {\n  actions: actions,\n  config: config,\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Chart.js Bubble Chart with Interactive Features\nDESCRIPTION: Complete configuration for a Chart.js bubble chart with multiple datasets and interactive controls. Includes data setup, action handlers for adding/removing data points and datasets, and chart configuration options. Uses utility functions for color management and bubble data generation.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/samples/other-charts/bubble.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// <block:setup:1>\nconst DATA_COUNT = 7;\nconst NUMBER_CFG = {count: DATA_COUNT, rmin: 5, rmax: 15, min: 0, max: 100};\n\nconst data = {\n  datasets: [\n    {\n      label: 'Dataset 1',\n      data: Utils.bubbles(NUMBER_CFG),\n      borderColor: Utils.CHART_COLORS.red,\n      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red, 0.5),\n    },\n    {\n      label: 'Dataset 2',\n      data: Utils.bubbles(NUMBER_CFG),\n      borderColor: Utils.CHART_COLORS.orange,\n      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.orange, 0.5),\n    }\n  ]\n};\n// </block:setup>\n\n// <block:actions:2>\nconst actions = [\n  {\n    name: 'Randomize',\n    handler(chart) {\n      chart.data.datasets.forEach(dataset => {\n        dataset.data = Utils.bubbles({count: DATA_COUNT, rmin: 5, rmax: 15, min: 0, max: 100});\n      });\n      chart.update();\n    }\n  },\n  {\n    name: 'Add Dataset',\n    handler(chart) {\n      const chartData = chart.data;\n      const dsColor = Utils.namedColor(chartData.datasets.length);\n      const newDataset = {\n        label: 'Dataset ' + (chartData.datasets.length + 1),\n        backgroundColor: Utils.transparentize(dsColor, 0.5),\n        borderColor: dsColor,\n        data: Utils.bubbles({count: DATA_COUNT, rmin: 5, rmax: 15, min: 0, max: 100}),\n      };\n      chart.data.datasets.push(newDataset);\n      chart.update();\n    }\n  },\n  {\n    name: 'Add Data',\n    handler(chart) {\n      const chartData = chart.data;\n      if (chartData.datasets.length > 0) {\n\n        for (let index = 0; index < chartData.datasets.length; ++index) {\n          chartData.datasets[index].data.push(Utils.bubbles({count: 1, rmin: 5, rmax: 15, min: 0, max: 100})[0]);\n        }\n\n        chart.update();\n      }\n    }\n  },\n  {\n    name: 'Remove Dataset',\n    handler(chart) {\n      chart.data.datasets.pop();\n      chart.update();\n    }\n  },\n  {\n    name: 'Remove Data',\n    handler(chart) {\n      chart.data.datasets.forEach(dataset => {\n        dataset.data.pop();\n      });\n\n      chart.update();\n    }\n  }\n];\n// </block:actions>\n\n// <block:config:0>\nconst config = {\n  type: 'bubble',\n  data: data,\n  options: {\n    responsive: true,\n    plugins: {\n      legend: {\n        position: 'top',\n      },\n      title: {\n        display: true,\n        text: 'Chart.js Bubble Chart'\n      }\n    }\n  },\n};\n// </block:config>\n\nmodule.exports = {\n  actions: actions,\n  config: config,\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Chart.js Line Chart with Progressive Animation\nDESCRIPTION: This snippet sets up the configuration for a Chart.js line chart with two datasets. It includes the animation settings, interaction options, and scale configurations for a progressive line chart.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/samples/animations/progressive-line-easing.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n  type: 'line',\n  data: {\n    datasets: [{\n      borderColor: Utils.CHART_COLORS.red,\n      borderWidth: 1,\n      radius: 0,\n      data: data,\n    },\n    {\n      borderColor: Utils.CHART_COLORS.blue,\n      borderWidth: 1,\n      radius: 0,\n      data: data2,\n    }]\n  },\n  options: {\n    animation,\n    interaction: {\n      intersect: false\n    },\n    plugins: {\n      legend: false,\n      title: {\n        display: true,\n        text: () => easing.name\n      }\n    },\n    scales: {\n      x: {\n        type: 'linear'\n      }\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Bar Color Based on Y-Value in Chart.js\nDESCRIPTION: This snippet demonstrates a complete Chart.js bar chart implementation where bar colors change based on their y-values. It includes setup configuration, data generation with random values, a color function that assigns different colors based on value thresholds, and chart configuration with scriptable options.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/samples/scriptable/bar.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// <block:setup:2>\nconst DATA_COUNT = 16;\nUtils.srand(110);\n\nconst actions = [\n  {\n    name: 'Randomize',\n    handler(chart) {\n      chart.data.datasets.forEach(dataset => {\n        dataset.data = generateData();\n      });\n      chart.update();\n    }\n  },\n];\n// </block:setup>\n\n// <block:data:1>\nfunction generateData() {\n  return Utils.numbers({\n    count: DATA_COUNT,\n    min: -100,\n    max: 100\n  });\n}\n\nconst data = {\n  labels: Utils.months({count: DATA_COUNT}),\n  datasets: [{\n    data: generateData(),\n  }]\n};\n// </block:data>\n\n// <block:options:0>\nfunction colorize(opaque) {\n  return (ctx) => {\n    const v = ctx.parsed.y;\n    const c = v < -50 ? '#D60000'\n      : v < 0 ? '#F46300'\n      : v < 50 ? '#0358B6'\n      : '#44DE28';\n\n    return opaque ? c : Utils.transparentize(c, 1 - Math.abs(v / 150));\n  };\n}\n\nconst config = {\n  type: 'bar',\n  data: data,\n  options: {\n    plugins: {\n      legend: false,\n    },\n    elements: {\n      bar: {\n        backgroundColor: colorize(false),\n        borderColor: colorize(true),\n        borderWidth: 2\n      }\n    }\n  }\n};\n// </block:options>\n\nmodule.exports = {\n  actions,\n  config,\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Line Chart with Suggested Min-Max Scale Settings in Chart.js\nDESCRIPTION: This snippet demonstrates how to create a line chart with two datasets using Chart.js and configure the y-axis scale with suggestedMin and suggestedMax properties. The chart displays data for two datasets over a 7-month period with a controlled y-axis range.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/samples/scales/linear-min-max-suggested.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// <block:setup:1>\nconst DATA_COUNT = 7;\nconst NUMBER_CFG = {count: DATA_COUNT, min: 0, max: 100};\n\nconst labels = Utils.months({count: 7});\nconst data = {\n  labels: labels,\n  datasets: [\n    {\n      label: 'Dataset 1',\n      data: [10, 30, 39, 20, 25, 34, -10],\n      borderColor: Utils.CHART_COLORS.red,\n      backgroundColor: Utils.CHART_COLORS.red,\n    },\n    {\n      label: 'Dataset 2',\n      data: [18, 33, 22, 19, 11, 39, 30],\n      borderColor: Utils.CHART_COLORS.blue,\n      backgroundColor: Utils.CHART_COLORS.blue,\n    }\n  ]\n};\n// </block:setup>\n\n// <block:config:0>\nconst config = {\n  type: 'line',\n  data: data,\n  options: {\n    responsive: true,\n    plugins: {\n      title: {\n        display: true,\n        text: 'Suggested Min and Max Settings'\n      }\n    },\n    scales: {\n      y: {\n        // the data minimum used for determining the ticks is Math.min(dataMin, suggestedMin)\n        suggestedMin: 30,\n\n        // the data maximum used for determining the ticks is Math.max(dataMax, suggestedMax)\n        suggestedMax: 50,\n      }\n    }\n  },\n};\n// </block:config>\n\nmodule.exports = {\n  config: config,\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Decimation Options in Chart.js\nDESCRIPTION: This snippet defines the initial decimation configuration for a Chart.js chart. It sets the default state to disabled and uses the 'min-max' algorithm.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/samples/advanced/data-decimation.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst decimation = {\n  enabled: false,\n  algorithm: 'min-max',\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Interactive Line Chart with Chart.js\nDESCRIPTION: Creates a line chart with randomized data points and custom styling. Features include alternating point styles, dynamic radius sizing based on data values, and color customization. Implements interactive features like data randomization and hover effects.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/samples/scriptable/line.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// <block:setup:2>\nconst DATA_COUNT = 12;\nUtils.srand(110);\n\nconst actions = [\n  {\n    name: 'Randomize',\n    handler(chart) {\n      chart.data.datasets.forEach(dataset => {\n        dataset.data = generateData();\n      });\n      chart.update();\n    }\n  },\n];\n// </block:setup>\n\n// <block:data:1>\nfunction generateData() {\n  return Utils.numbers({\n    count: DATA_COUNT,\n    min: 0,\n    max: 100\n  });\n}\n\nconst data = {\n  labels: Utils.months({count: DATA_COUNT}),\n  datasets: [{\n    data: generateData()\n  }]\n};\n// </block:data>\n\n// <block:options:0>\nfunction getLineColor(ctx) {\n  return Utils.color(ctx.datasetIndex);\n}\n\nfunction alternatePointStyles(ctx) {\n  const index = ctx.dataIndex;\n  return index % 2 === 0 ? 'circle' : 'rect';\n}\n\nfunction makeHalfAsOpaque(ctx) {\n  return Utils.transparentize(getLineColor(ctx));\n}\n\nfunction adjustRadiusBasedOnData(ctx) {\n  const v = ctx.parsed.y;\n  return v < 10 ? 5\n    : v < 25 ? 7\n    : v < 50 ? 9\n    : v < 75 ? 11\n    : 15;\n}\n\nconst config = {\n  type: 'line',\n  data: data,\n  options: {\n    plugins: {\n      legend: false,\n      tooltip: true,\n    },\n    elements: {\n      line: {\n        fill: false,\n        backgroundColor: getLineColor,\n        borderColor: getLineColor,\n      },\n      point: {\n        backgroundColor: getLineColor,\n        hoverBackgroundColor: makeHalfAsOpaque,\n        radius: adjustRadiusBasedOnData,\n        pointStyle: alternatePointStyles,\n        hoverRadius: 15,\n      }\n    }\n  }\n};\n// </block:options>\n\nmodule.exports = {\n  actions,\n  config,\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Logarithmic Scale Chart with Chart.js\nDESCRIPTION: Creates a line chart with logarithmic y-axis scaling using Chart.js. Includes functions for random data generation, chart setup with logarithmic configuration, and a randomize action for data updates. The chart displays a single dataset with monthly labels and randomized logarithmic values.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/samples/scales/log.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// <block:actions:2>\nconst logNumbers = (num) => {\n  const data = [];\n\n  for (let i = 0; i < num; ++i) {\n    data.push(Math.ceil(Math.random() * 10.0) * Math.pow(10, Math.ceil(Math.random() * 5)));\n  }\n\n  return data;\n};\n\nconst actions = [\n  {\n    name: 'Randomize',\n    handler(chart) {\n      chart.data.datasets.forEach(dataset => {\n        dataset.data = logNumbers(chart.data.labels.length);\n      });\n      chart.update();\n    }\n  },\n];\n// </block:actions>\n\n// <block:setup:1>\nconst DATA_COUNT = 7;\nconst NUMBER_CFG = {count: DATA_COUNT, min: 0, max: 100};\n\nconst labels = Utils.months({count: 7});\nconst data = {\n  labels: labels,\n  datasets: [\n    {\n      label: 'Dataset 1',\n      data: logNumbers(DATA_COUNT),\n      borderColor: Utils.CHART_COLORS.red,\n      backgroundColor: Utils.CHART_COLORS.red,\n      fill: false,\n    },\n  ]\n};\n// </block:setup>\n\n// <block:config:0>\nconst config = {\n  type: 'line',\n  data: data,\n  options: {\n    responsive: true,\n    plugins: {\n      title: {\n        display: true,\n        text: 'Chart.js Line Chart - Logarithmic'\n      }\n    },\n    scales: {\n      x: {\n        display: true,\n      },\n      y: {\n        display: true,\n        type: 'logarithmic',\n      }\n    }\n  },\n};\n// </block:config>\n\nmodule.exports = {\n  actions: actions,\n  config: config,\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Chart.js Stacked Bar/Line Chart with Interactive Actions\nDESCRIPTION: Creates a mixed chart combining stacked bars and lines with interactive features like randomizing data, adding/removing datasets and data points. The implementation includes chart configuration, data setup, and action handlers for dynamic chart manipulation.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/samples/other-charts/stacked-bar-line.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// <block:actions:2>\nconst actions = [\n  {\n    name: 'Randomize',\n    handler(chart) {\n      chart.data.datasets.forEach(dataset => {\n        dataset.data = Utils.numbers({count: chart.data.labels.length, min: 0, max: 100});\n      });\n      chart.update();\n    }\n  },\n  {\n    name: 'Add Dataset',\n    handler(chart) {\n      const data = chart.data;\n      const dsColor = Utils.namedColor(chart.data.datasets.length);\n      const newDataset = {\n        label: 'Dataset ' + (data.datasets.length + 1),\n        backgroundColor: Utils.transparentize(dsColor, 0.5),\n        borderColor: dsColor,\n        borderWidth: 1,\n        stack: 'combined',\n        data: Utils.numbers({count: data.labels.length, min: 0, max: 100}),\n      };\n      chart.data.datasets.push(newDataset);\n      chart.update();\n    }\n  },\n  {\n    name: 'Add Data',\n    handler(chart) {\n      const data = chart.data;\n      if (data.datasets.length > 0) {\n        data.labels = Utils.months({count: data.labels.length + 1});\n\n        for (let index = 0; index < data.datasets.length; ++index) {\n          data.datasets[index].data.push(Utils.rand(0, 100));\n        }\n\n        chart.update();\n      }\n    }\n  },\n  {\n    name: 'Remove Dataset',\n    handler(chart) {\n      chart.data.datasets.pop();\n      chart.update();\n    }\n  },\n  {\n    name: 'Remove Data',\n    handler(chart) {\n      chart.data.labels.splice(-1, 1); // remove the label first\n\n      chart.data.datasets.forEach(dataset => {\n        dataset.data.pop();\n      });\n\n      chart.update();\n    }\n  }\n];\n// </block:actions>\n\n// <block:setup:1>\nconst DATA_COUNT = 7;\nconst NUMBER_CFG = {count: DATA_COUNT, min: 0, max: 100};\n\nconst labels = Utils.months({count: 7});\nconst data = {\n  labels: labels,\n  datasets: [\n    {\n      label: 'Dataset 1',\n      data: Utils.numbers(NUMBER_CFG),\n      borderColor: Utils.CHART_COLORS.red,\n      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red, 0.5),\n      stack: 'combined',\n      type: 'bar'\n    },\n    {\n      label: 'Dataset 2',\n      data: Utils.numbers(NUMBER_CFG),\n      borderColor: Utils.CHART_COLORS.blue,\n      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.blue, 0.5),\n      stack: 'combined'\n    }\n  ]\n};\n// </block:setup>\n\n// <block:config:0>\nconst config = {\n  type: 'line',\n  data: data,\n  options: {\n    plugins: {\n      title: {\n        display: true,\n        text: 'Chart.js Stacked Line/Bar Chart'\n      }\n    },\n    scales: {\n      y: {\n        stacked: true\n      }\n    }\n  },\n};\n// </block:config>\n\nmodule.exports = {\n  actions: actions,\n  config: config,\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Interactive Polar Area Chart with Chart.js\nDESCRIPTION: Complete implementation of a polar area chart with dynamic coloring based on data values, data randomization functionality, and hover effects. The code includes setup configuration, data generation, and color management functions. It uses Utils helper methods for generating random data and managing transparency.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/samples/scriptable/polar.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// <block:setup:2>\nconst DATA_COUNT = 7;\nUtils.srand(110);\n\nconst actions = [\n  {\n    name: 'Randomize',\n    handler(chart) {\n      chart.data.datasets.forEach(dataset => {\n        dataset.data = generateData();\n      });\n      chart.update();\n    }\n  },\n];\n// </block:setup>\n\n// <block:data:1>\nfunction generateData() {\n  return Utils.numbers({\n    count: DATA_COUNT,\n    min: 0,\n    max: 100\n  });\n}\n\nconst data = {\n  labels: Utils.months({count: DATA_COUNT}),\n  datasets: [{\n    data: generateData()\n  }]\n};\n// </block:data>\n\n// <block:options:0>\nfunction colorize(opaque, hover, ctx) {\n  const v = ctx.raw;\n  const c = v < 35 ? '#D60000'\n    : v < 55 ? '#F46300'\n    : v < 75 ? '#0358B6'\n    : '#44DE28';\n\n  const opacity = hover ? 1 - Math.abs(v / 150) - 0.2 : 1 - Math.abs(v / 150);\n\n  return opaque ? c : Utils.transparentize(c, opacity);\n}\n\nfunction hoverColorize(ctx) {\n  return colorize(false, true, ctx);\n}\n\nconst config = {\n  type: 'polarArea',\n  data: data,\n  options: {\n    plugins: {\n      legend: false,\n      tooltip: false,\n    },\n    elements: {\n      arc: {\n        backgroundColor: colorize.bind(null, false, false),\n        hoverBackgroundColor: hoverColorize\n      }\n    }\n  }\n};\n// </block:options>\n\nmodule.exports = {\n  actions,\n  config,\n};\n```\n\n----------------------------------------\n\nTITLE: Generating Chart Data and Configuring Chart.js with Custom Border Plugin\nDESCRIPTION: This snippet demonstrates the creation of a line chart using Chart.js. It includes data generation, a custom plugin for drawing a border around the chart area, and the chart configuration. The custom plugin allows for customization of the border color, width, dash pattern, and offset.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/samples/plugins/chart-area-border.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// <block:data:2>\nconst DATA_COUNT = 7;\nconst NUMBER_CFG = {count: DATA_COUNT, min: -100, max: 100};\nconst labels = Utils.months({count: 7});\nconst data = {\n  labels: labels,\n  datasets: [\n    {\n      label: 'Dataset 1',\n      data: Utils.numbers(NUMBER_CFG),\n      borderColor: Utils.CHART_COLORS.red,\n      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red, 0.5),\n    },\n    {\n      label: 'Dataset 2',\n      data: Utils.numbers(NUMBER_CFG),\n      borderColor: Utils.CHART_COLORS.blue,\n      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.blue, 0.5),\n    }\n  ]\n};\n// </block:data>\n\n// <block:plugin:1>\nconst chartAreaBorder = {\n  id: 'chartAreaBorder',\n  beforeDraw(chart, args, options) {\n    const {ctx, chartArea: {left, top, width, height}} = chart;\n    ctx.save();\n    ctx.strokeStyle = options.borderColor;\n    ctx.lineWidth = options.borderWidth;\n    ctx.setLineDash(options.borderDash || []);\n    ctx.lineDashOffset = options.borderDashOffset;\n    ctx.strokeRect(left, top, width, height);\n    ctx.restore();\n  }\n};\n// </block:plugin>\n\n// <block:config:0>\nconst config = {\n  type: 'line',\n  data: data,\n  options: {\n    plugins: {\n      chartAreaBorder: {\n        borderColor: 'red',\n        borderWidth: 2,\n        borderDash: [5, 5],\n        borderDashOffset: 2,\n      }\n    }\n  },\n  plugins: [chartAreaBorder]\n};\n// </block:config>\n\nmodule.exports = {\n  config: config,\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Chart.js with Log2 Axis Type\nDESCRIPTION: This snippet sets up a line chart configuration using Chart.js. It defines the data structure, including labels and a dataset, and configures the chart options. The y-axis is set to use a custom 'log2' type.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/samples/advanced/derived-axis-type.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// <block:setup:1>\nconst DATA_COUNT = 12;\nconst NUMBER_CFG = {count: DATA_COUNT, min: 0, max: 1000};\nconst labels = Utils.months({count: DATA_COUNT});\nconst data = {\n  labels: labels,\n  datasets: [\n    {\n      label: 'My First dataset',\n      data: Utils.numbers(NUMBER_CFG),\n      borderColor: Utils.CHART_COLORS.red,\n      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red, 0.5),\n      fill: false,\n    }\n  ],\n};\n// </block:setup>\n\n// <block:config:0>\nconst config = {\n  type: 'line',\n  data,\n  options: {\n    responsive: true,\n    scales: {\n      x: {\n        display: true,\n      },\n      y: {\n        display: true,\n        type: 'log2',\n      }\n    }\n  }\n};\n\n// </block:config>\n\nmodule.exports = {\n  actions: [],\n  config: config,\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Chart.js Axis Positioning with Interactive Actions\nDESCRIPTION: This code creates a Chart.js scatter plot with custom axis positioning options. It defines three interactive actions to toggle between default edge positioning, center positioning, and custom coordinate positioning. The chart uses two datasets with random points in the range of -100 to 100 on both axes.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/samples/scale-options/center.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// <block:actions:2>\nconst actions = [\n  {\n    name: 'Default Positions',\n    handler(chart) {\n      chart.options.scales.x.position = 'bottom';\n      chart.options.scales.y.position = 'left';\n      chart.update();\n    }\n  },\n  {\n    name: 'Position: center',\n    handler(chart) {\n      chart.options.scales.x.position = 'center';\n      chart.options.scales.y.position = 'center';\n      chart.update();\n    }\n  },\n  {\n    name: 'Position: Vertical: x=-60, Horizontal: y=30',\n    handler(chart) {\n      chart.options.scales.x.position = {y: 30};\n      chart.options.scales.y.position = {x: -60};\n      chart.update();\n    }\n  },\n];\n// </block:actions>\n\n\n// <block:setup:1>\nconst DATA_COUNT = 6;\nconst NUMBER_CFG = {count: DATA_COUNT, min: -100, max: 100};\nconst data = {\n  datasets: [\n    {\n      label: 'Dataset 1',\n      data: Utils.points(NUMBER_CFG),\n      fill: false,\n      borderColor: Utils.CHART_COLORS.red,\n      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red, 0.5),\n    },\n    {\n      label: 'Dataset 2',\n      data: Utils.points(NUMBER_CFG),\n      fill: false,\n      borderColor: Utils.CHART_COLORS.blue,\n      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.blue, 0.5),\n    }\n  ]\n};\n// </block:setup>\n\n// <block:config:0>\nconst config = {\n  type: 'scatter',\n  data: data,\n  options: {\n    responsive: true,\n    plugins: {\n      title: {\n        display: true,\n        text: 'Axis Center Positioning'\n      }\n    },\n    scales: {\n      x: {\n        min: -100,\n        max: 100,\n      },\n      y: {\n        min: -100,\n        max: 100,\n      }\n    }\n  },\n};\n// </block:config>\n\nmodule.exports = {\n  actions: actions,\n  config: config,\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Interactive Pie Chart with Chart.js\nDESCRIPTION: A complete implementation of a pie chart using Chart.js with interactive actions like randomizing data, adding/removing datasets, and adding/removing data points. The code sets up the initial chart configuration, defines the dataset structure, and exports the necessary components for Chart.js to render.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/samples/other-charts/pie.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// <block:actions:2>\nconst actions = [\n  {\n    name: 'Randomize',\n    handler(chart) {\n      chart.data.datasets.forEach(dataset => {\n        dataset.data = Utils.numbers({count: chart.data.labels.length, min: 0, max: 100});\n      });\n      chart.update();\n    }\n  },\n  {\n    name: 'Add Dataset',\n    handler(chart) {\n      const data = chart.data;\n      const newDataset = {\n        label: 'Dataset ' + (data.datasets.length + 1),\n        backgroundColor: [],\n        data: [],\n      };\n\n      for (let i = 0; i < data.labels.length; i++) {\n        newDataset.data.push(Utils.numbers({count: 1, min: 0, max: 100}));\n\n        const colorIndex = i % Object.keys(Utils.CHART_COLORS).length;\n        newDataset.backgroundColor.push(Object.values(Utils.CHART_COLORS)[colorIndex]);\n      }\n\n      chart.data.datasets.push(newDataset);\n      chart.update();\n    }\n  },\n  {\n    name: 'Add Data',\n    handler(chart) {\n      const data = chart.data;\n      if (data.datasets.length > 0) {\n        data.labels.push('data #' + (data.labels.length + 1));\n\n        for (let index = 0; index < data.datasets.length; ++index) {\n          data.datasets[index].data.push(Utils.rand(0, 100));\n        }\n\n        chart.update();\n      }\n    }\n  },\n  {\n    name: 'Remove Dataset',\n    handler(chart) {\n      chart.data.datasets.pop();\n      chart.update();\n    }\n  },\n  {\n    name: 'Remove Data',\n    handler(chart) {\n      chart.data.labels.splice(-1, 1); // remove the label first\n\n      chart.data.datasets.forEach(dataset => {\n        dataset.data.pop();\n      });\n\n      chart.update();\n    }\n  }\n];\n// </block:actions>\n\n// <block:setup:1>\nconst DATA_COUNT = 5;\nconst NUMBER_CFG = {count: DATA_COUNT, min: 0, max: 100};\n\nconst data = {\n  labels: ['Red', 'Orange', 'Yellow', 'Green', 'Blue'],\n  datasets: [\n    {\n      label: 'Dataset 1',\n      data: Utils.numbers(NUMBER_CFG),\n      backgroundColor: Object.values(Utils.CHART_COLORS),\n    }\n  ]\n};\n// </block:setup>\n\n// <block:config:0>\nconst config = {\n  type: 'pie',\n  data: data,\n  options: {\n    responsive: true,\n    plugins: {\n      legend: {\n        position: 'top',\n      },\n      title: {\n        display: true,\n        text: 'Chart.js Pie Chart'\n      }\n    }\n  },\n};\n// </block:config>\n\nmodule.exports = {\n  actions: actions,\n  config: config,\n};\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Chart.js Interaction Modes and Actions\nDESCRIPTION: This snippet defines action handlers for changing interaction modes and axis settings in a Chart.js chart. It includes options for index, dataset, point, nearest, x, and y modes, as well as toggling intersect behavior.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/samples/tooltip/interactions.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst actions = [\n  {\n    name: 'Mode: index',\n    handler(chart) {\n      chart.options.interaction.axis = 'xy';\n      chart.options.interaction.mode = 'index';\n      chart.update();\n    }\n  },\n  {\n    name: 'Mode: dataset',\n    handler(chart) {\n      chart.options.interaction.axis = 'xy';\n      chart.options.interaction.mode = 'dataset';\n      chart.update();\n    }\n  },\n  {\n    name: 'Mode: point',\n    handler(chart) {\n      chart.options.interaction.axis = 'xy';\n      chart.options.interaction.mode = 'point';\n      chart.update();\n    }\n  },\n  {\n    name: 'Mode: nearest, axis: xy',\n    handler(chart) {\n      chart.options.interaction.axis = 'xy';\n      chart.options.interaction.mode = 'nearest';\n      chart.update();\n    }\n  },\n  {\n    name: 'Mode: nearest, axis: x',\n    handler(chart) {\n      chart.options.interaction.axis = 'x';\n      chart.options.interaction.mode = 'nearest';\n      chart.update();\n    }\n  },\n  {\n    name: 'Mode: nearest, axis: y',\n    handler(chart) {\n      chart.options.interaction.axis = 'y';\n      chart.options.interaction.mode = 'nearest';\n      chart.update();\n    }\n  },\n  {\n    name: 'Mode: x',\n    handler(chart) {\n      chart.options.interaction.mode = 'x';\n      chart.update();\n    }\n  },\n  {\n    name: 'Mode: y',\n    handler(chart) {\n      chart.options.interaction.mode = 'y';\n      chart.update();\n    }\n  },\n  {\n    name: 'Toggle Intersect',\n    handler(chart) {\n      chart.options.interaction.intersect = !chart.options.interaction.intersect;\n      chart.update();\n    }\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Implementing Time Series Scale in Chart.js\nDESCRIPTION: This snippet demonstrates how to configure a Chart.js line chart with a time series x-axis. The time series scale extends the time scale but ensures each data point is spread equidistant on the axis.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/axes/cartesian/timeseries.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst chart = new Chart(ctx, {\n    type: 'line',\n    data: data,\n    options: {\n        scales: {\n            x: {\n                type: 'timeseries',\n            }\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Up Chart Data for Tooltip Position Demo\nDESCRIPTION: Prepares the chart data structure with two datasets containing random numerical values. The data is formatted for a line chart with specific colors and styling for visual distinction.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/samples/tooltip/position.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst DATA_COUNT = 7;\nconst NUMBER_CFG = {count: DATA_COUNT, min: -100, max: 100};\nconst data = {\n  labels: Utils.months({count: DATA_COUNT}),\n  datasets: [\n    {\n      label: 'Dataset 1',\n      data: Utils.numbers(NUMBER_CFG),\n      fill: false,\n      borderColor: Utils.CHART_COLORS.red,\n      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red, 0.5),\n    },\n    {\n      label: 'Dataset 2',\n      data: Utils.numbers(NUMBER_CFG),\n      fill: false,\n      borderColor: Utils.CHART_COLORS.blue,\n      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.blue, 0.5),\n    },\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Conditional Line Segment Styling in Chart.js\nDESCRIPTION: This code demonstrates how to apply different styles to line segments in Chart.js based on data conditions. It defines utility functions to detect skipped points and decreasing values, then applies these conditions to create visual distinctions in the chart with custom colors and dashed lines for gaps in the data.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/samples/line/segments.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// <block:segmentUtils:1>\nconst skipped = (ctx, value) => ctx.p0.skip || ctx.p1.skip ? value : undefined;\nconst down = (ctx, value) => ctx.p0.parsed.y > ctx.p1.parsed.y ? value : undefined;\n// </block:segmentUtils>\n\n// <block:genericOptions:2>\nconst genericOptions = {\n  fill: false,\n  interaction: {\n    intersect: false\n  },\n  radius: 0,\n};\n// </block:genericOptions>\n\n// <block:config:0>\nconst config = {\n  type: 'line',\n  data: {\n    labels: Utils.months({count: 7}),\n    datasets: [{\n      label: 'My First Dataset',\n      data: [65, 59, NaN, 48, 56, 57, 40],\n      borderColor: 'rgb(75, 192, 192)',\n      segment: {\n        borderColor: ctx => skipped(ctx, 'rgb(0,0,0,0.2)') || down(ctx, 'rgb(192,75,75)'),\n        borderDash: ctx => skipped(ctx, [6, 6]),\n      },\n      spanGaps: true\n    }]\n  },\n  options: genericOptions\n};\n// </block:config>\n\nmodule.exports = {\n  actions: [],\n  config: config,\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Stepped Line Chart in JavaScript with Chart.js\nDESCRIPTION: This code snippet sets up a stepped line chart using Chart.js. It defines actions to change the stepping behavior, creates the data structure, and configures the chart options. The chart displays a single dataset with customizable stepping options.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/samples/line/stepped.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// <block:actions:2>\nconst actions = [\n  {\n    name: 'Step: false (default)',\n    handler: (chart) => {\n      chart.data.datasets.forEach(dataset => {\n        dataset.stepped = false;\n      });\n      chart.update();\n    }\n  },\n  {\n    name: 'Step: true',\n    handler: (chart) => {\n      chart.data.datasets.forEach(dataset => {\n        dataset.stepped = true;\n      });\n      chart.update();\n    }\n  },\n  {\n    name: 'Step: before',\n    handler: (chart) => {\n      chart.data.datasets.forEach(dataset => {\n        dataset.stepped = 'before';\n      });\n      chart.update();\n    }\n  },\n  {\n    name: 'Step: after',\n    handler: (chart) => {\n      chart.data.datasets.forEach(dataset => {\n        dataset.stepped = 'after';\n      });\n      chart.update();\n    }\n  },\n  {\n    name: 'Step: middle',\n    handler: (chart) => {\n      chart.data.datasets.forEach(dataset => {\n        dataset.stepped = 'middle';\n      });\n      chart.update();\n    }\n  }\n];\n// </block:actions>\n\n// <block:setup:1>\nconst data = {\n  labels: ['Day 1', 'Day 2', 'Day 3', 'Day 4', 'Day 5', 'Day 6'],\n  datasets: [\n    {\n      label: 'Dataset',\n      data: Utils.numbers({count: 6, min: -100, max: 100}),\n      borderColor: Utils.CHART_COLORS.red,\n      fill: false,\n      stepped: true,\n    }\n  ]\n};\n// </block:setup>\n\n// <block:config:0>\nconst config = {\n  type: 'line',\n  data: data,\n  options: {\n    responsive: true,\n    interaction: {\n      intersect: false,\n      axis: 'x'\n    },\n    plugins: {\n      title: {\n        display: true,\n        text: (ctx) => 'Step ' + ctx.chart.data.datasets[0].stepped + ' Interpolation',\n      }\n    }\n  }\n};\n// </block:config>\n\nmodule.exports = {\n  actions: actions,\n  config: config,\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Tooltip Positioner in Chart.js\nDESCRIPTION: Creates a custom 'bottom' tooltip positioner that places tooltips at the bottom of the chart area. It extends the built-in positioner functionality to maintain the x-coordinate from the average position but fixes the y-coordinate at the bottom of the chart.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/samples/tooltip/position.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Create a custom tooltip positioner to put at the bottom of the chart area\ncomponents.Tooltip.positioners.bottom = function(items) {\n  const pos = components.Tooltip.positioners.average(items);\n\n  // Happens when nothing is found\n  if (pos === false) {\n    return false;\n  }\n\n  const chart = this.chart;\n\n  return {\n    x: pos.x,\n    y: chart.chartArea.bottom,\n    xAlign: 'center',\n    yAlign: 'bottom',\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Chart.js Bar Chart\nDESCRIPTION: This snippet defines the configuration for the bar chart. It specifies the chart type as 'bar', uses the previously defined data, and sets various options such as responsiveness, legend position, and chart title. This configuration object is used to initialize the Chart.js instance.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/samples/bar/vertical.md#2025-04-08_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst config = {\n  type: 'bar',\n  data: data,\n  options: {\n    responsive: true,\n    plugins: {\n      legend: {\n        position: 'top',\n      },\n      title: {\n        display: true,\n        text: 'Chart.js Bar Chart'\n      }\n    }\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing HTML Legend Plugin for Chart.js\nDESCRIPTION: Creates a custom HTML legend plugin for Chart.js that generates an interactive legend in an HTML container. The plugin creates clickable legend items that can toggle dataset visibility and includes styling for both color boxes and text labels. Requires a container element with specified ID in the HTML.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/samples/legend/html.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst getOrCreateLegendList = (chart, id) => {\n  const legendContainer = document.getElementById(id);\n  let listContainer = legendContainer.querySelector('ul');\n\n  if (!listContainer) {\n    listContainer = document.createElement('ul');\n    listContainer.style.display = 'flex';\n    listContainer.style.flexDirection = 'row';\n    listContainer.style.margin = 0;\n    listContainer.style.padding = 0;\n\n    legendContainer.appendChild(listContainer);\n  }\n\n  return listContainer;\n};\n\nconst htmlLegendPlugin = {\n  id: 'htmlLegend',\n  afterUpdate(chart, args, options) {\n    const ul = getOrCreateLegendList(chart, options.containerID);\n\n    // Remove old legend items\n    while (ul.firstChild) {\n      ul.firstChild.remove();\n    }\n\n    // Reuse the built-in legendItems generator\n    const items = chart.options.plugins.legend.labels.generateLabels(chart);\n\n    items.forEach(item => {\n      const li = document.createElement('li');\n      li.style.alignItems = 'center';\n      li.style.cursor = 'pointer';\n      li.style.display = 'flex';\n      li.style.flexDirection = 'row';\n      li.style.marginLeft = '10px';\n\n      li.onclick = () => {\n        const {type} = chart.config;\n        if (type === 'pie' || type === 'doughnut') {\n          // Pie and doughnut charts only have a single dataset and visibility is per item\n          chart.toggleDataVisibility(item.index);\n        } else {\n          chart.setDatasetVisibility(item.datasetIndex, !chart.isDatasetVisible(item.datasetIndex));\n        }\n        chart.update();\n      };\n\n      // Color box\n      const boxSpan = document.createElement('span');\n      boxSpan.style.background = item.fillStyle;\n      boxSpan.style.borderColor = item.strokeStyle;\n      boxSpan.style.borderWidth = item.lineWidth + 'px';\n      boxSpan.style.display = 'inline-block';\n      boxSpan.style.flexShrink = 0;\n      boxSpan.style.height = '20px';\n      boxSpan.style.marginRight = '10px';\n      boxSpan.style.width = '20px';\n\n      // Text\n      const textContainer = document.createElement('p');\n      textContainer.style.color = item.fontColor;\n      textContainer.style.margin = 0;\n      textContainer.style.padding = 0;\n      textContainer.style.textDecoration = item.hidden ? 'line-through' : '';\n\n      const text = document.createTextNode(item.text);\n      textContainer.appendChild(text);\n\n      li.appendChild(boxSpan);\n      li.appendChild(textContainer);\n      ul.appendChild(li);\n    });\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Up Chart Data with Hover Styles\nDESCRIPTION: This code configures the data for a Chart.js chart with two datasets. It includes labels, random data values, and custom styling for hover states including border width and color adjustments.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/samples/advanced/programmatic-events.md#2025-04-08_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst DATA_COUNT = 7;\nconst NUMBER_CFG = {count: DATA_COUNT, min: -100, max: 100};\n\nconst labels = Utils.months({count: 7});\nconst data = {\n  labels: labels,\n  datasets: [\n    {\n      label: 'Dataset 1',\n      data: Utils.numbers(NUMBER_CFG),\n      borderColor: Utils.CHART_COLORS.red,\n      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red, 0.5),\n      hoverBorderWidth: 5,\n      hoverBorderColor: 'green',\n    },\n    {\n      label: 'Dataset 2',\n      data: Utils.numbers(NUMBER_CFG),\n      borderColor: Utils.CHART_COLORS.blue,\n      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.blue, 0.5),\n      hoverBorderWidth: 5,\n      hoverBorderColor: 'green',\n    }\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Chart.js Data with Multiple Datasets\nDESCRIPTION: Defines sample data configuration for a line chart with two datasets. Sets up data structure with labels and datasets including styling properties like colors and transparency.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/samples/legend/html.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst NUM_DATA = 7;\nconst NUM_CFG = {count: NUM_DATA, min: 0, max: 100};\nconst data = {\n  labels: Utils.months({count: NUM_DATA}),\n  datasets: [\n    {\n      label: 'Dataset: 1',\n      data: Utils.numbers(NUM_CFG),\n      borderColor: Utils.CHART_COLORS.red,\n      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red, 0.5),\n      fill: false,\n    },\n    {\n      label: 'Dataset: 1',\n      data: Utils.numbers(NUM_CFG),\n      borderColor: Utils.CHART_COLORS.blue,\n      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.blue, 0.5),\n      fill: false,\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Legend Hover Effects in Chart.js Pie Chart\nDESCRIPTION: This code demonstrates how to use Chart.js event hooks to highlight chart elements. It creates a pie chart with color segments that change opacity when users hover over legend items. The implementation uses onHover and onLeave event handlers to modify the alpha channel of background colors.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/samples/legend/events.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// <block:data:3>\nconst data = {\n  labels: ['Red', 'Blue', 'Yellow', 'Green', 'Purple', 'Orange'],\n  datasets: [{\n    label: '# of Votes',\n    data: [12, 19, 3, 5, 2, 3],\n    borderWidth: 1,\n    backgroundColor: ['#CB4335', '#1F618D', '#F1C40F', '#27AE60', '#884EA0', '#D35400'],\n  }]\n};\n// </block:data>\n\n// <block:handleHover:1>\n// Append '4d' to the colors (alpha channel), except for the hovered index\nfunction handleHover(evt, item, legend) {\n  legend.chart.data.datasets[0].backgroundColor.forEach((color, index, colors) => {\n    colors[index] = index === item.index || color.length === 9 ? color : color + '4D';\n  });\n  legend.chart.update();\n}\n// </block:handleHover>\n\n// <block:handleLeave:2>\n// Removes the alpha channel from background colors\nfunction handleLeave(evt, item, legend) {\n  legend.chart.data.datasets[0].backgroundColor.forEach((color, index, colors) => {\n    colors[index] = color.length === 9 ? color.slice(0, -2) : color;\n  });\n  legend.chart.update();\n}\n// </block:handleLeave>\n\n// <block:config:0>\nconst config = {\n  type: 'pie',\n  data: data,\n  options: {\n    plugins: {\n      legend: {\n        onHover: handleHover,\n        onLeave: handleLeave\n      }\n    }\n  }\n};\n// </block:config>\n\nmodule.exports = {\n  config\n};\n```\n\n----------------------------------------\n\nTITLE: Converting Event Coordinates to Data Values in Chart.js\nDESCRIPTION: Example showing how to convert mouse/touch event pixel coordinates to corresponding data values using Chart.js helper functions.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/configuration/interactions.md#2025-04-08_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst chart = new Chart(ctx, {\n    type: 'line',\n    data: data,\n    options: {\n        onClick: (e) => {\n            const canvasPosition = Chart.helpers.getRelativePosition(e, chart);\n\n            // Substitute the appropriate scale IDs\n            const dataX = chart.scales.x.getValueForPixel(canvasPosition.x);\n            const dataY = chart.scales.y.getValueForPixel(canvasPosition.y);\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Chart.js Line Chart with Different Interpolation Modes\nDESCRIPTION: This JavaScript code creates a line chart with three datasets showcasing different interpolation modes: cubic interpolation with monotone mode, standard cubic interpolation, and linear interpolation. Each dataset uses the same data points including a NaN value to demonstrate how each mode handles missing data.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/samples/line/interpolation.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// <block:setup:1>\nconst DATA_COUNT = 12;\nconst labels = [];\nfor (let i = 0; i < DATA_COUNT; ++i) {\n  labels.push(i.toString());\n}\nconst datapoints = [0, 20, 20, 60, 60, 120, NaN, 180, 120, 125, 105, 110, 170];\nconst data = {\n  labels: labels,\n  datasets: [\n    {\n      label: 'Cubic interpolation (monotone)',\n      data: datapoints,\n      borderColor: Utils.CHART_COLORS.red,\n      fill: false,\n      cubicInterpolationMode: 'monotone',\n      tension: 0.4\n    }, {\n      label: 'Cubic interpolation',\n      data: datapoints,\n      borderColor: Utils.CHART_COLORS.blue,\n      fill: false,\n      tension: 0.4\n    }, {\n      label: 'Linear interpolation (default)',\n      data: datapoints,\n      borderColor: Utils.CHART_COLORS.green,\n      fill: false\n    }\n  ]\n};\n// </block:setup>\n```\n\n----------------------------------------\n\nTITLE: Setting Up Chart.js Configuration with HTML Legend\nDESCRIPTION: Configures the Chart.js instance with custom HTML legend plugin settings. Disables the default legend and specifies the container ID for the custom HTML legend.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/samples/legend/html.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n  type: 'line',\n  data: data,\n  options: {\n    plugins: {\n      htmlLegend: {\n        // ID of the container to put the legend in\n        containerID: 'legend-container',\n      },\n      legend: {\n        display: false,\n      }\n    }\n  },\n  plugins: [htmlLegendPlugin],\n};\n\nmodule.exports = {\n  actions: [],\n  config: config,\n};\n```\n\n----------------------------------------\n\nTITLE: Retrieving Chart Instance by Key in Chart.js\nDESCRIPTION: Finds a chart instance using various types of keys (string ID, CanvasRenderingContext2D, or HTMLDOMElement).\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/developers/api.md#2025-04-08_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nconst chart = Chart.getChart(\"canvas-id\");\n```\n\n----------------------------------------\n\nTITLE: Implementing a Grouped Stacked Bar Chart in Chart.js\nDESCRIPTION: A complete Chart.js setup that creates a stacked bar chart with multiple groups. The configuration includes three datasets divided into two stacks ('Stack 0' and 'Stack 1'), randomization functionality, responsive layout, and proper axis configuration for stacking. It uses utility functions for generating data and colors.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/samples/bar/stacked-groups.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// <block:actions:2>\nconst actions = [\n  {\n    name: 'Randomize',\n    handler(chart) {\n      chart.data.datasets.forEach(dataset => {\n        dataset.data = Utils.numbers({count: chart.data.labels.length, min: -100, max: 100});\n      });\n      chart.update();\n    }\n  },\n];\n// </block:actions>\n\n// <block:setup:1>\nconst DATA_COUNT = 7;\nconst NUMBER_CFG = {count: DATA_COUNT, min: -100, max: 100};\n\nconst labels = Utils.months({count: 7});\nconst data = {\n  labels: labels,\n  datasets: [\n    {\n      label: 'Dataset 1',\n      data: Utils.numbers(NUMBER_CFG),\n      backgroundColor: Utils.CHART_COLORS.red,\n      stack: 'Stack 0',\n    },\n    {\n      label: 'Dataset 2',\n      data: Utils.numbers(NUMBER_CFG),\n      backgroundColor: Utils.CHART_COLORS.blue,\n      stack: 'Stack 0',\n    },\n    {\n      label: 'Dataset 3',\n      data: Utils.numbers(NUMBER_CFG),\n      backgroundColor: Utils.CHART_COLORS.green,\n      stack: 'Stack 1',\n    },\n  ]\n};\n// </block:setup>\n\n// <block:config:0>\nconst config = {\n  type: 'bar',\n  data: data,\n  options: {\n    plugins: {\n      title: {\n        display: true,\n        text: 'Chart.js Bar Chart - Stacked'\n      },\n    },\n    responsive: true,\n    interaction: {\n      intersect: false,\n    },\n    scales: {\n      x: {\n        stacked: true,\n      },\n      y: {\n        stacked: true\n      }\n    }\n  }\n};\n// </block:config>\n\nmodule.exports = {\n  actions: actions,\n  config: config,\n};\n```\n\n----------------------------------------\n\nTITLE: Registering Chart Components Globally in Chart.js\nDESCRIPTION: Demonstrates how to register plugins, axis types, or chart types globally for all charts.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/developers/api.md#2025-04-08_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Chart, Tooltip, LinearScale, PointElement, BubbleController } from 'chart.js';\n\nChart.register(Tooltip, LinearScale, PointElement, BubbleController);\n```\n\n----------------------------------------\n\nTITLE: Configuring Chart.js with Animation Progress Tracking\nDESCRIPTION: Defines the chart configuration with animation callbacks that update progress bars based on animation state. Includes onProgress and onComplete callbacks that differentiate between initial and subsequent animations, along with interaction settings for user experience.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/samples/advanced/progress-bar.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// <block:config:0>\nconst config = {\n  type: 'line',\n  data: data,\n  options: {\n    animation: {\n      duration: 2000,\n      onProgress: function(context) {\n        if (context.initial) {\n          initProgress.value = context.currentStep / context.numSteps;\n        } else {\n          progress.value = context.currentStep / context.numSteps;\n        }\n      },\n      onComplete: function(context) {\n        if (context.initial) {\n          console.log('Initial animation finished');\n        } else {\n          console.log('animation finished');\n        }\n      }\n    },\n    interaction: {\n      mode: 'nearest',\n      axis: 'x',\n      intersect: false\n    },\n    plugins: {\n      title: {\n        display: true,\n        text: 'Chart.js Line Chart - Animation Progress Bar'\n      }\n    },\n  },\n};\n// </block:config>\n```\n\n----------------------------------------\n\nTITLE: Configuring Bar Chart with Custom Border Radius in Chart.js\nDESCRIPTION: This snippet sets up a bar chart with two datasets, demonstrating different border radius settings. It includes data generation, chart configuration, and an action for randomizing data. The chart uses Chart.js and showcases fully rounded and small radius bar styles.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/samples/bar/border-radius.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// <block:actions:2>\nconst actions = [\n  {\n    name: 'Randomize',\n    handler(chart) {\n      chart.data.datasets.forEach(dataset => {\n        dataset.data = Utils.numbers({count: chart.data.labels.length, min: -100, max: 100});\n      });\n      chart.update();\n    }\n  },\n];\n// </block:actions>\n\n// <block:setup:1>\nconst DATA_COUNT = 7;\nconst NUMBER_CFG = {count: DATA_COUNT, min: -100, max: 100};\n\nconst labels = Utils.months({count: 7});\nconst data = {\n  labels: labels,\n  datasets: [\n    {\n      label: 'Fully Rounded',\n      data: Utils.numbers(NUMBER_CFG),\n      borderColor: Utils.CHART_COLORS.red,\n      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red, 0.5),\n      borderWidth: 2,\n      borderRadius: Number.MAX_VALUE,\n      borderSkipped: false,\n    },\n    {\n      label: 'Small Radius',\n      data: Utils.numbers(NUMBER_CFG),\n      borderColor: Utils.CHART_COLORS.blue,\n      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.blue, 0.5),\n      borderWidth: 2,\n      borderRadius: 5,\n      borderSkipped: false,\n    }\n  ]\n};\n// </block:setup>\n\n// <block:config:0>\nconst config = {\n  type: 'bar',\n  data: data,\n  options: {\n    responsive: true,\n    plugins: {\n      legend: {\n        position: 'top',\n      },\n      title: {\n        display: true,\n        text: 'Chart.js Bar Chart'\n      }\n    }\n  },\n};\n// </block:config>\n\nmodule.exports = {\n  actions: actions,\n  config: config,\n};\n```\n\n----------------------------------------\n\nTITLE: Showing Datasets or Data Elements in Chart.js\nDESCRIPTION: Shows a specific dataset or data element and triggers a 'show' animation.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/developers/api.md#2025-04-08_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nchart.show(1); // shows dataset at index 1 and does 'show' animation.\nchart.show(0, 2); // shows the data element at index 2 of the first dataset.\n```\n\n----------------------------------------\n\nTITLE: Exporting Chart.js Module Configuration\nDESCRIPTION: Exports the complete chart configuration as a module, including all actions, configuration settings, and output display handling for the console logs generated by the animation callbacks.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/samples/advanced/progress-bar.md#2025-04-08_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  actions: actions,\n  config: config,\n  output: 'console.log output is displayed here'\n};\n```\n\n----------------------------------------\n\nTITLE: Retrieving Visible Dataset Metadata in Chart.js\nDESCRIPTION: Returns an array of all visible dataset metadata in the order they are drawn on the canvas.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/developers/api.md#2025-04-08_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst visibleMetas = chart.getSortedVisibleDatasetMetas();\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Tooltip Footer with Sum Calculation in Chart.js\nDESCRIPTION: This code creates a line chart with two datasets and implements a custom tooltip footer that displays the sum of y-values for all visible data points. The chart uses index mode interaction to show tooltips without requiring cursor intersection with data points.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/samples/tooltip/content.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// <block:footer:2>\nconst footer = (tooltipItems) => {\n  let sum = 0;\n\n  tooltipItems.forEach(function(tooltipItem) {\n    sum += tooltipItem.parsed.y;\n  });\n  return 'Sum: ' + sum;\n};\n\n// </block:footer>\n\n// <block:setup:1>\nconst DATA_COUNT = 7;\nconst NUMBER_CFG = {count: DATA_COUNT, min: -100, max: 100, decimals: 0};\nconst data = {\n  labels: Utils.months({count: DATA_COUNT}),\n  datasets: [\n    {\n      label: 'Dataset 1',\n      data: Utils.numbers(NUMBER_CFG),\n      fill: false,\n      borderColor: Utils.CHART_COLORS.red,\n      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red, 0.5),\n    },\n    {\n      label: 'Dataset 2',\n      data: Utils.numbers(NUMBER_CFG),\n      fill: false,\n      borderColor: Utils.CHART_COLORS.blue,\n      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.blue, 0.5),\n    },\n  ]\n};\n// </block:setup>\n\n// <block:config:0>\nconst config = {\n  type: 'line',\n  data: data,\n  options: {\n    interaction: {\n      intersect: false,\n      mode: 'index',\n    },\n    plugins: {\n      tooltip: {\n        callbacks: {\n          footer: footer,\n        }\n      }\n    }\n  }\n};\n// </block:config>\n\nmodule.exports = {\n  actions: [],\n  config: config,\n};\n```\n\n----------------------------------------\n\nTITLE: Handling Click Events in Chart.js\nDESCRIPTION: Demonstrates how to handle click events and retrieve information about clicked elements in the chart.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/developers/api.md#2025-04-08_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nfunction clickHandler(evt) {\n    const points = myChart.getElementsAtEventForMode(evt, 'nearest', { intersect: true }, true);\n\n    if (points.length) {\n        const firstPoint = points[0];\n        const label = myChart.data.labels[firstPoint.index];\n        const value = myChart.data.datasets[firstPoint.datasetIndex].data[firstPoint.index];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Linear Gradient Chart with Chart.js\nDESCRIPTION: Creates a line chart with dynamic linear gradient coloring. The gradient transitions from blue to yellow to red vertically across the chart area. Includes action handlers for randomizing data, adding/removing data points, and a gradient generation function that responds to chart size changes.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/samples/advanced/linear-gradient.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// <block:actions:3>\nconst actions = [\n  {\n    name: 'Randomize',\n    handler(chart) {\n      chart.data.datasets.forEach(dataset => {\n        dataset.data = Utils.numbers({count: chart.data.labels.length, min: -100, max: 100});\n      });\n      chart.update();\n    }\n  },\n  {\n    name: 'Add Data',\n    handler(chart) {\n      const data = chart.data;\n      if (data.datasets.length > 0) {\n        data.labels = Utils.months({count: data.labels.length + 1});\n\n        for (let index = 0; index < data.datasets.length; ++index) {\n          data.datasets[index].data.push(Utils.rand(-100, 100));\n        }\n\n        chart.update();\n      }\n    }\n  },\n  {\n    name: 'Remove Data',\n    handler(chart) {\n      chart.data.labels.splice(-1, 1); // remove the label first\n\n      chart.data.datasets.forEach(dataset => {\n        dataset.data.pop();\n      });\n\n      chart.update();\n    }\n  }\n];\n// </block:actions>\n\n// <block:getGradient:0>\nlet width, height, gradient;\nfunction getGradient(ctx, chartArea) {\n  const chartWidth = chartArea.right - chartArea.left;\n  const chartHeight = chartArea.bottom - chartArea.top;\n  if (!gradient || width !== chartWidth || height !== chartHeight) {\n    // Create the gradient because this is either the first render\n    // or the size of the chart has changed\n    width = chartWidth;\n    height = chartHeight;\n    gradient = ctx.createLinearGradient(0, chartArea.bottom, 0, chartArea.top);\n    gradient.addColorStop(0, Utils.CHART_COLORS.blue);\n    gradient.addColorStop(0.5, Utils.CHART_COLORS.yellow);\n    gradient.addColorStop(1, Utils.CHART_COLORS.red);\n  }\n\n  return gradient;\n}\n// </block:getGradient>\n\n// <block:setup:2>\nconst DATA_COUNT = 7;\nconst NUMBER_CFG = {count: DATA_COUNT, min: -100, max: 100};\nconst labels = Utils.months({count: 7});\n\nconst data = {\n  labels: labels,\n  datasets: [\n    {\n      label: 'Dataset 1',\n      data: Utils.numbers(NUMBER_CFG),\n      borderColor: function(context) {\n        const chart = context.chart;\n        const {ctx, chartArea} = chart;\n\n        if (!chartArea) {\n          // This case happens on initial chart load\n          return;\n        }\n        return getGradient(ctx, chartArea);\n      },\n    },\n  ]\n};\n// </block:setup>\n\n// <block:config:1>\nconst config = {\n  type: 'line',\n  data: data,\n  options: {\n    responsive: true,\n    plugins: {\n      legend: {\n        position: 'top',\n      },\n    }\n  },\n};\n// </block:config>\n\nmodule.exports = {\n  actions: actions,\n  config: config,\n};\n```\n\n----------------------------------------\n\nTITLE: Defining HTML Progress Bars for Chart.js Animation\nDESCRIPTION: Creates two HTML progress elements that visually track chart animation progress. The first tracks initial chart rendering animation, while the second tracks subsequent animations triggered by chart updates.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/samples/advanced/progress-bar.md#2025-04-08_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<progress id=\"initialProgress\" max=\"1\" value=\"0\" style=\"width: 100%\"></progress>\n\n<progress id=\"animationProgress\" max=\"1\" value=\"0\" style=\"width: 100%\"></progress>\n```\n\n----------------------------------------\n\nTITLE: Implementing Chart.js Action Handlers for Data Manipulation\nDESCRIPTION: Defines a set of action handlers for manipulating chart data, including randomizing values, adding/removing datasets, and adding/removing data points. These functions modify the chart data and call update() to refresh the visualization.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/samples/animations/loop.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst actions = [\n  {\n    name: 'Randomize',\n    handler(chart) {\n      chart.data.datasets.forEach(dataset => {\n        dataset.data = Utils.numbers({count: chart.data.labels.length, min: -100, max: 100});\n      });\n      chart.update();\n    }\n  },\n  {\n    name: 'Add Dataset',\n    handler(chart) {\n      const data = chart.data;\n      const dsColor = Utils.namedColor(chart.data.datasets.length);\n      const newDataset = {\n        label: 'Dataset ' + (data.datasets.length + 1),\n        backgroundColor: Utils.transparentize(dsColor, 0.5),\n        borderColor: dsColor,\n        data: Utils.numbers({count: data.labels.length, min: -100, max: 100}),\n      };\n      chart.data.datasets.push(newDataset);\n      chart.update();\n    }\n  },\n  {\n    name: 'Add Data',\n    handler(chart) {\n      const data = chart.data;\n      if (data.datasets.length > 0) {\n        data.labels = Utils.months({count: data.labels.length + 1});\n\n        for (let index = 0; index < data.datasets.length; ++index) {\n          data.datasets[index].data.push(Utils.rand(-100, 100));\n        }\n\n        chart.update();\n      }\n    }\n  },\n  {\n    name: 'Remove Dataset',\n    handler(chart) {\n      chart.data.datasets.pop();\n      chart.update();\n    }\n  },\n  {\n    name: 'Remove Data',\n    handler(chart) {\n      chart.data.labels.splice(-1, 1); // remove the label first\n\n      chart.data.datasets.forEach(dataset => {\n        dataset.data.pop();\n      });\n\n      chart.update();\n    }\n  }\n];\n```\n\n----------------------------------------\n\nTITLE: Setting Dataset Visibility in Chart.js\nDESCRIPTION: Sets the visibility for a given dataset, useful for building interactive chart legends.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/developers/api.md#2025-04-08_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nchart.setDatasetVisibility(1, false); // hides dataset at index 1\nchart.update(); // chart now renders with dataset hidden\n```\n\n----------------------------------------\n\nTITLE: Generating Chart Data\nDESCRIPTION: Creates data structure for the polar area chart with random values and month labels.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/samples/advanced/radial-gradient.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction generateData() {\n  return Utils.numbers({\n    count: DATA_COUNT,\n    min: 0,\n    max: 100\n  });\n}\n\nconst data = {\n  labels: Utils.months({count: DATA_COUNT}),\n  datasets: [{\n    data: generateData()\n  }]\n};\n```\n\n----------------------------------------\n\nTITLE: Toggling Data Visibility in Chart.js\nDESCRIPTION: Toggles the visibility of an item across all datasets that support this feature.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/developers/api.md#2025-04-08_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nchart.toggleDataVisibility(2); // toggles the item in all datasets, at index 2\nchart.update(); // chart now renders with item hidden\n```\n\n----------------------------------------\n\nTITLE: Creating Dual Y-Axes Chart in Chart.js\nDESCRIPTION: Example of creating a chart with two Y axes in Chart.js. The datasets are mapped to their respective axes using the yAxisID property, with one axis positioned on the left and the other on the right.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/axes/cartesian/index.md#2025-04-08_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst myChart = new Chart(ctx, {\n    type: 'line',\n    data: {\n        datasets: [{\n            data: [20, 50, 100, 75, 25, 0],\n            label: 'Left dataset',\n\n            // This binds the dataset to the left y axis\n            yAxisID: 'left-y-axis'\n        }, {\n            data: [0.1, 0.5, 1.0, 2.0, 1.5, 0],\n            label: 'Right dataset',\n\n            // This binds the dataset to the right y axis\n            yAxisID: 'right-y-axis'\n        }],\n        labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun']\n    },\n    options: {\n        scales: {\n            'left-y-axis': {\n                type: 'linear',\n                position: 'left'\n            },\n            'right-y-axis': {\n                type: 'linear',\n                position: 'right'\n            }\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Resizing Chart.js Canvas\nDESCRIPTION: Demonstrates how to manually resize the chart canvas, either to fit its container or with explicit dimensions.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/developers/api.md#2025-04-08_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nmyLineChart.resize();\n// => returns 'this' for chainability\n\n// With an explicit size:\nmyLineChart.resize(width, height);\n```\n\n----------------------------------------\n\nTITLE: Configuring Chart.js Title Alignment with Interactive Controls\nDESCRIPTION: This code demonstrates how to create a line chart with a title and implement actions to dynamically change the title's alignment. The snippet includes data generation, chart configuration, and action handlers for toggling between start, center (default), and end alignment options.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/samples/title/alignment.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// <block:actions:2>\nconst actions = [\n  {\n    name: 'Title Alignment: start',\n    handler(chart) {\n      chart.options.plugins.title.align = 'start';\n      chart.update();\n    }\n  },\n  {\n    name: 'Title Alignment: center (default)',\n    handler(chart) {\n      chart.options.plugins.title.align = 'center';\n      chart.update();\n    }\n  },\n  {\n    name: 'Title Alignment: end',\n    handler(chart) {\n      chart.options.plugins.title.align = 'end';\n      chart.update();\n    }\n  },\n];\n// </block:actions>\n\n\n// <block:setup:1>\nconst DATA_COUNT = 7;\nconst NUMBER_CFG = {count: DATA_COUNT, min: -100, max: 100};\nconst data = {\n  labels: Utils.months({count: DATA_COUNT}),\n  datasets: [\n    {\n      label: 'Dataset 1',\n      data: Utils.numbers(NUMBER_CFG),\n      fill: false,\n      borderColor: Utils.CHART_COLORS.red,\n      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red, 0.5),\n    },\n  ]\n};\n// </block:setup>\n\n// <block:config:0>\nconst config = {\n  type: 'line',\n  data: data,\n  options: {\n    plugins: {\n      title: {\n        display: true,\n        text: 'Chart Title',\n      }\n    }\n  }\n};\n// </block:config>\n\nmodule.exports = {\n  actions: actions,\n  config: config,\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Chart.js with Custom Tooltip Settings\nDESCRIPTION: Defines the chart configuration with specific interaction settings and plugin options. The tooltip is configured to use the 'index' mode without intersection, and the chart title dynamically displays the current tooltip position mode.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/samples/tooltip/position.md#2025-04-08_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n  type: 'line',\n  data: data,\n  options: {\n    interaction: {\n      intersect: false,\n      mode: 'index',\n    },\n    plugins: {\n      title: {\n        display: true,\n        text: (ctx) => 'Tooltip position mode: ' + ctx.chart.options.plugins.tooltip.position,\n      },\n    }\n  }\n};\n\nmodule.exports = {\n  actions: actions,\n  config: config,\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Symmetrical Padding with x/y Object in Chart.js\nDESCRIPTION: This snippet illustrates how to use the x/y object shorthand to set 10px left/right and 4px top/bottom padding on a Radial Linear Axis tick backdropPadding.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/general/padding.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nlet chart = new Chart(ctx, {\n    type: 'radar',\n    data: data,\n    options: {\n        scales: {\n          r: {\n            ticks: {\n              backdropPadding: {\n                  x: 10,\n                  y: 4\n              }\n            }\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Data Decimation Options in Chart.js\nDESCRIPTION: This snippet shows the configuration options available for the data decimation plugin in Chart.js. It includes options for enabling decimation, selecting the algorithm, specifying the number of samples, and setting the threshold for triggering decimation.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/configuration/decimation.md#2025-04-08_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Default | Description\n| ---- | ---- | ------- | -----------\n| `enabled` | `boolean` | `false` | Is decimation enabled?\n| `algorithm` | `string` | `'min-max'` | Decimation algorithm to use. See the [more...](#decimation-algorithms)\n| `samples` | `number` | | If the `'lttb'` algorithm is used, this is the number of samples in the output dataset. Defaults to the canvas width to pick 1 sample per pixel.\n| `threshold` | `number` | | If the number of samples in the current axis range is above this value, the decimation will be triggered. Defaults to 4 times the canvas width.<br />The number of point after decimation can be higher than the `threshold` value.\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Polar Area Chart with Chart.js\nDESCRIPTION: This code snippet demonstrates how to set up a basic Polar Area Chart using Chart.js. It defines the data structure with labels and dataset values, configures chart type and options, and exports the configuration for rendering.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/charts/polar.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// <block:setup:1>\nconst data = {\n  labels: [\n    'Red',\n    'Green',\n    'Yellow',\n    'Grey',\n    'Blue'\n  ],\n  datasets: [{\n    label: 'My First Dataset',\n    data: [11, 16, 7, 3, 14],\n    backgroundColor: [\n      'rgb(255, 99, 132)',\n      'rgb(75, 192, 192)',\n      'rgb(255, 205, 86)',\n      'rgb(201, 203, 207)',\n      'rgb(54, 162, 235)'\n    ]\n  }]\n};\n// </block:setup>\n\n// <block:config:0>\nconst config = {\n  type: 'polarArea',\n  data: data,\n  options: {}\n};\n// </block:config>\n\nmodule.exports = {\n  actions: [],\n  config: config,\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Padding on One Side in Chart.js\nDESCRIPTION: This example shows how to add 50px of padding to the left side of the chart canvas using an object with specific side properties in the layout options.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/general/padding.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlet chart = new Chart(ctx, {\n    type: 'line',\n    data: data,\n    options: {\n        layout: {\n            padding: {\n                left: 50\n            }\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Scriptable Grid Options in Chart.js\nDESCRIPTION: This code demonstrates Chart.js configuration with scriptable grid options. It creates a line chart with two datasets and customizes the grid appearance, including conditional coloring of Y-axis grid lines based on their values and configurable X-axis grid display properties.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/samples/scale-options/grid.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// <block:actions:2>\nconst actions = [\n  {\n    name: 'Randomize',\n    handler(chart) {\n      chart.data.datasets.forEach(dataset => {\n        dataset.data = Utils.numbers({count: chart.data.labels.length, min: -100, max: 100});\n      });\n      chart.update();\n    }\n  },\n];\n// </block:actions>\n\n// <block:setup:1>\nconst DATA_COUNT = 7;\nconst data = {\n  labels: Utils.months({count: DATA_COUNT}),\n  datasets: [\n    {\n      label: 'Dataset 1',\n      data: [10, 30, 39, 20, 25, 34, -10],\n      fill: false,\n      borderColor: Utils.CHART_COLORS.red,\n      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red, 0.5),\n    },\n    {\n      label: 'Dataset 2',\n      data: [18, 33, 22, 19, 11, -39, 30],\n      fill: false,\n      borderColor: Utils.CHART_COLORS.blue,\n      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.blue, 0.5),\n    }\n  ]\n};\n// </block:setup>\n\n// <block:config:0>\n// Change these settings to change the display for different parts of the X axis\n// grid configuration\nconst DISPLAY = true;\nconst BORDER = true;\nconst CHART_AREA = true;\nconst TICKS = true;\n\nconst config = {\n  type: 'line',\n  data: data,\n  options: {\n    responsive: true,\n    plugins: {\n      title: {\n        display: true,\n        text: 'Grid Line Settings'\n      }\n    },\n    scales: {\n      x: {\n        border: {\n          display: BORDER\n        },\n        grid: {\n          display: DISPLAY,\n          drawOnChartArea: CHART_AREA,\n          drawTicks: TICKS,\n        }\n      },\n      y: {\n        border: {\n          display: false\n        },\n        grid: {\n          color: function(context) {\n            if (context.tick.value > 0) {\n              return Utils.CHART_COLORS.green;\n            } else if (context.tick.value < 0) {\n              return Utils.CHART_COLORS.red;\n            }\n\n            return '#000000';\n          },\n        },\n      }\n    }\n  },\n};\n// </block:config>\n\nmodule.exports = {\n  actions: actions,\n  config: config,\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Uniform Padding in Chart.js\nDESCRIPTION: This snippet demonstrates how to set a uniform 20px padding on all sides of a chart using a single number value in the layout options.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/general/padding.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet chart = new Chart(ctx, {\n    type: 'line',\n    data: data,\n    options: {\n        layout: {\n            padding: 20\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Pie Chart with Chart.js\nDESCRIPTION: Example configuration for creating a pie chart with three color segments. Uses the same data structure as doughnut chart but configures the type as 'pie'.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/charts/doughnut.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// <block:setup:1>\nconst data = {\n  labels: [\n    'Red',\n    'Blue',\n    'Yellow'\n  ],\n  datasets: [{\n    label: 'My First Dataset',\n    data: [300, 50, 100],\n    backgroundColor: [\n      'rgb(255, 99, 132)',\n      'rgb(54, 162, 235)',\n      'rgb(255, 205, 86)'\n    ],\n    hoverOffset: 4\n  }]\n};\n// </block:setup>\n\n// <block:config:0>\nconst config = {\n  type: 'pie',\n  data: data,\n};\n// </block:config>\n\nmodule.exports = {\n  actions: [],\n  config: config,\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Stacked Linear and Category Scales in Chart.js\nDESCRIPTION: This code creates a line chart with two datasets: one using a linear scale for numerical values and another using a category scale for ON/OFF states. The scales are stacked on the left side with different weights, allowing both to be visible simultaneously. Dataset 1 shows numerical data while Dataset 2 displays categorical ON/OFF values with stepped lines.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/samples/scales/stacked.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// <block:setup:1>\nconst DATA_COUNT = 7;\nconst NUMBER_CFG = {count: DATA_COUNT, min: 0, max: 100};\n\nconst labels = Utils.months({count: 7});\nconst data = {\n  labels: labels,\n  datasets: [\n    {\n      label: 'Dataset 1',\n      data: [10, 30, 50, 20, 25, 44, -10],\n      borderColor: Utils.CHART_COLORS.red,\n      backgroundColor: Utils.CHART_COLORS.red,\n    },\n    {\n      label: 'Dataset 2',\n      data: ['ON', 'ON', 'OFF', 'ON', 'OFF', 'OFF', 'ON'],\n      borderColor: Utils.CHART_COLORS.blue,\n      backgroundColor: Utils.CHART_COLORS.blue,\n      stepped: true,\n      yAxisID: 'y2',\n    }\n  ]\n};\n// </block:setup>\n\n// <block:config:0>\nconst config = {\n  type: 'line',\n  data: data,\n  options: {\n    responsive: true,\n    plugins: {\n      title: {\n        display: true,\n        text: 'Stacked scales',\n      },\n    },\n    scales: {\n      y: {\n        type: 'linear',\n        position: 'left',\n        stack: 'demo',\n        stackWeight: 2,\n        border: {\n          color: Utils.CHART_COLORS.red\n        }\n      },\n      y2: {\n        type: 'category',\n        labels: ['ON', 'OFF'],\n        offset: true,\n        position: 'left',\n        stack: 'demo',\n        stackWeight: 1,\n        border: {\n          color: Utils.CHART_COLORS.blue\n        }\n      }\n    }\n  },\n};\n// </block:config>\n\nmodule.exports = {\n  config: config,\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Image Background Plugin in Chart.js\nDESCRIPTION: Custom plugin that adds an image background to a Chart.js canvas. The plugin loads an external image and centers it in the chart area, handling both immediate and lazy loading scenarios. Includes a complete example with a doughnut chart configuration.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/configuration/canvas-background.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// <block:setup:1>\nconst data = {\n  labels: [\n    'Red',\n    'Blue',\n    'Yellow'\n  ],\n  datasets: [{\n    label: 'My First Dataset',\n    data: [300, 50, 100],\n    backgroundColor: [\n      'rgb(255, 99, 132)',\n      'rgb(54, 162, 235)',\n      'rgb(255, 205, 86)'\n    ],\n    hoverOffset: 4\n  }]\n};\n// </block:setup>\n\n// <block:plugin:2>\n// Note: changes to the plugin code is not reflected to the chart, because the plugin is loaded at chart construction time and editor changes only trigger an chart.update().\nconst image = new Image();\nimage.src = 'https://www.chartjs.org/img/chartjs-logo.svg';\n\nconst plugin = {\n  id: 'customCanvasBackgroundImage',\n  beforeDraw: (chart) => {\n    if (image.complete) {\n      const ctx = chart.ctx;\n      const {top, left, width, height} = chart.chartArea;\n      const x = left + width / 2 - image.width / 2;\n      const y = top + height / 2 - image.height / 2;\n      ctx.drawImage(image, x, y);\n    } else {\n      image.onload = () => chart.draw();\n    }\n  }\n};\n// </block:plugin>\n\n// <block:config:0>\nconst config = {\n  type: 'doughnut',\n  data: data,\n  plugins: [plugin],\n};\n// </block:config>\n\nmodule.exports = {\n  actions: [],\n  config: config,\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Chart with Custom Subtitle in JavaScript using Chart.js\nDESCRIPTION: This code snippet demonstrates how to create a new Chart instance with a custom subtitle. It sets the subtitle display to true and specifies the text to be shown as the subtitle.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/configuration/subtitle.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst chart = new Chart(ctx, {\n    type: 'line',\n    data: data,\n    options: {\n        plugins: {\n            subtitle: {\n                display: true,\n                text: 'Custom Chart Subtitle'\n            }\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Advanced Print Handling for Chart.js Charts\nDESCRIPTION: Sets up event listeners for both 'beforeprint' and 'afterprint' events to explicitly control chart dimensions during printing and then restore automatic sizing afterward.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/configuration/responsive.md#2025-04-08_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.addEventListener('beforeprint', () => {\n  myChart.resize(600, 600);\n});\nwindow.addEventListener('afterprint', () => {\n  myChart.resize();\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Chart.js Combo Chart with Time Scale\nDESCRIPTION: Creates a combination chart with multiple datasets (2 bar charts and 1 line chart) using Chart.js. Includes action handlers for data randomization, dataset configuration with colors and transparency, and time scale setup for the x-axis.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/samples/scales/time-combo.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// <block:actions:2>\nconst actions = [\n  {\n    name: 'Randomize',\n    handler(chart) {\n      chart.data.datasets.forEach(dataset => {\n        dataset.data = Utils.numbers({count: chart.data.labels.length, min: 0, max: 100});\n      });\n      chart.update();\n    }\n  },\n];\n// </block:actions>\n\n// <block:setup:1>\nconst DATA_COUNT = 7;\nconst NUMBER_CFG = {count: DATA_COUNT, min: 0, max: 100};\n\nconst labels = [];\n\nfor (let i = 0; i < DATA_COUNT; ++i) {\n  labels.push(Utils.newDate(i));\n}\n\nconst data = {\n  labels: labels,\n  datasets: [{\n    type: 'bar',\n    label: 'Dataset 1',\n    backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red, 0.5),\n    borderColor: Utils.CHART_COLORS.red,\n    data: Utils.numbers(NUMBER_CFG),\n  }, {\n    type: 'bar',\n    label: 'Dataset 2',\n    backgroundColor: Utils.transparentize(Utils.CHART_COLORS.blue, 0.5),\n    borderColor: Utils.CHART_COLORS.blue,\n    data: Utils.numbers(NUMBER_CFG),\n  }, {\n    type: 'line',\n    label: 'Dataset 3',\n    backgroundColor: Utils.transparentize(Utils.CHART_COLORS.green, 0.5),\n    borderColor: Utils.CHART_COLORS.green,\n    fill: false,\n    data: Utils.numbers(NUMBER_CFG),\n  }]\n};\n// </block:setup>\n\n// <block:config:0>\nconst config = {\n  type: 'line',\n  data: data,\n  options: {\n    plugins: {\n      title: {\n        text: 'Chart.js Combo Time Scale',\n        display: true\n      }\n    },\n    scales: {\n      x: {\n        type: 'time',\n        display: true,\n        offset: true,\n        ticks: {\n          source: 'data'\n        },\n        time: {\n          unit: 'day'\n        },\n      },\n    },\n  },\n};\n// </block:config>\n\nmodule.exports = {\n  actions: actions,\n  config: config,\n};\n```\n\n----------------------------------------\n\nTITLE: Handling Chart Resizing Before Printing with JavaScript\nDESCRIPTION: Implements a handler for the 'onbeforeprint' event that manually triggers resizing of all Chart.js instances to ensure proper display when printing the page.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/configuration/responsive.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction beforePrintHandler () {\n    for (let id in Chart.instances) {\n        Chart.instances[id].resize();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Chart.js Scales (JavaScript)\nDESCRIPTION: Function to update chart scales by passing a new scales object. It demonstrates changing scale IDs and types, and updating scale references after the change.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/developers/updates.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction updateScales(chart) {\n    let xScale = chart.scales.x;\n    let yScale = chart.scales.y;\n    chart.options.scales = {\n        newId: {\n            display: true\n        },\n        y: {\n            display: true,\n            type: 'logarithmic'\n        }\n    };\n    chart.update();\n    // need to update the reference\n    xScale = chart.scales.newId;\n    yScale = chart.scales.y;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Layout Options in Chart.js Configuration\nDESCRIPTION: This code snippet demonstrates how to set layout options in a Chart.js configuration object. It includes options for automatic padding and custom padding values.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/configuration/layout.md#2025-04-08_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Layout\n\nNamespace: `options.layout`, the global options for the chart layout is defined in `Chart.defaults.layout`.\n\n| Name | Type | Default | [Scriptable](../general/options.md#scriptable-options) | Description\n| ---- | ---- | ------- | :----: | -----------\n| `autoPadding` | `boolean` | `true` | No | Apply automatic padding so visible elements are completely drawn.\n| `padding` | [`Padding`](../general/padding.md) | `0` | Yes | The padding to add inside the chart.\n```\n\n----------------------------------------\n\nTITLE: Implementing Label Callback for Currency Formatting in Chart.js\nDESCRIPTION: This snippet demonstrates how to use a label callback to format tooltip values as USD currency. It uses the Intl.NumberFormat API to apply proper formatting.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/configuration/tooltip.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst chart = new Chart(ctx, {\n    type: 'line',\n    data: data,\n    options: {\n        plugins: {\n            tooltip: {\n                callbacks: {\n                    label: function(context) {\n                        let label = context.dataset.label || '';\n\n                        if (label) {\n                            label += ': ';\n                        }\n                        if (context.parsed.y !== null) {\n                            label += new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(context.parsed.y);\n                        }\n                        return label;\n                    }\n                }\n            }\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Chart.js Locale Configuration Options Table\nDESCRIPTION: A markdown table displaying the configuration options for locale settings in Chart.js. It shows the 'locale' property which accepts a string with a BCP 47 language tag that leverages INTL NumberFormat.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/configuration/locale.md#2025-04-08_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Default | Description\n| ---- | ---- | ------- | -----------\n| `locale` | `string` | `undefined` | a string with a BCP 47 language tag, leveraging on [INTL NumberFormat](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat).\n```\n\n----------------------------------------\n\nTITLE: Implementing Grace Percentage in Chart.js Linear Axis\nDESCRIPTION: This code demonstrates how to add padding (grace) to a linear scale in Chart.js. It creates a bar chart with positive and negative values, adding 5% extra space to the scale range to improve visual presentation.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/axes/cartesian/linear.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// <block:setup:1>\nconst labels = Utils.months({count: 7});\nconst data = {\n  labels: ['Positive', 'Negative'],\n  datasets: [{\n    data: [100, -50],\n    backgroundColor: 'rgb(255, 99, 132)'\n  }],\n};\n// </block:setup>\n\n// <block:config:0>\nconst config = {\n  type: 'bar',\n  data,\n  options: {\n    scales: {\n      y: {\n        type: 'linear',\n        grace: '5%'\n      }\n    },\n    plugins: {\n      legend: false\n    }\n  }\n};\n// </block:config>\n\nmodule.exports = {\n  actions: [],\n  config: config,\n};\n```\n\n----------------------------------------\n\nTITLE: Multi-Color Fill Configuration in Chart.js\nDESCRIPTION: Shows how to configure multiple fill colors above and below a target point using RGB values.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/charts/area.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nnew Chart(ctx, {\n    data: {\n        datasets: [\n            {\n              fill: {\n                target: 'origin',\n                above: 'rgb(255, 0, 0)',   // Area will be red above the origin\n                below: 'rgb(0, 0, 255)'    // And blue below the origin\n              }\n            }\n        ]\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Accessible Canvas with Fallback Content in HTML\nDESCRIPTION: This example demonstrates how to make a canvas element accessible using fallback content. By placing text content between the opening and closing canvas tags, screen readers can access this alternative content when the canvas cannot be rendered.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/general/accessibility.md#2025-04-08_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<canvas id=\"okCanvas2\" width=\"400\" height=\"100\">\n    <p>Hello Fallback World</p>\n</canvas>\n```\n\n----------------------------------------\n\nTITLE: Configuring Bar Chart Dataset in Chart.js\nDESCRIPTION: This snippet shows an example of how to configure a dataset for a bar chart in Chart.js. It demonstrates setting various properties such as bar thickness, percentages, and data values.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/charts/bar.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ndata: {\n    datasets: [{\n        barPercentage: 0.5,\n        barThickness: 6,\n        maxBarThickness: 8,\n        minBarLength: 2,\n        data: [10, 20, 30, 40, 50, 60, 70]\n    }]\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Chart.js with Global Category Labels\nDESCRIPTION: Example showing how to create a Chart.js instance with globally defined category labels using the data.labels property.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/axes/cartesian/category.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet chart = new Chart(ctx, {\n    type: ...\n    data: {\n        labels: ['January', 'February', 'March', 'April', 'May', 'June'],\n        datasets: ...\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Accessible Canvas with ARIA Attributes in HTML\nDESCRIPTION: This example shows how to create an accessible canvas element using ARIA attributes. By setting the 'role' attribute to 'img' and providing an 'aria-label', screen readers can properly identify and announce the canvas content.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/general/accessibility.md#2025-04-08_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<canvas id=\"goodCanvas1\" width=\"400\" height=\"100\" aria-label=\"Hello ARIA World\" role=\"img\"></canvas>\n```\n\n----------------------------------------\n\nTITLE: Setting Up Data Structure for Radar Charts\nDESCRIPTION: This snippet demonstrates how to properly structure data for a radar chart. It shows two examples: a simple data array and a more complete configuration with labels and dataset properties.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/charts/radar.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ndata: [20, 10]\n```\n\nLANGUAGE: javascript\nCODE:\n```\ndata: {\n    labels: ['Running', 'Swimming', 'Eating', 'Cycling'],\n    datasets: [{\n        data: [20, 10, 4, 2]\n    }]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Currency Tick Format in Chart.js\nDESCRIPTION: Example showing how to add a dollar sign to Y-axis tick labels by overriding the ticks.callback function. This demonstrates basic tick format customization.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/axes/labelling.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst chart = new Chart(ctx, {\n    type: 'line',\n    data: data,\n    options: {\n        scales: {\n            y: {\n                ticks: {\n                    // Include a dollar sign in the ticks\n                    callback: function(value, index, ticks) {\n                        return '$' + value;\n                    }\n                }\n            }\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Chart.js with Axis-Specific Category Labels\nDESCRIPTION: Demonstrates how to define category labels specifically for an axis using the scales configuration option.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/axes/cartesian/category.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlet chart = new Chart(ctx, {\n    type: ...\n    data: ...\n    options: {\n        scales: {\n            x: {\n                type: 'category',\n                labels: ['January', 'February', 'March', 'April', 'May', 'June']\n            }\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Up Multiple Axes with Different IDs in Chart.js\nDESCRIPTION: Example of using dataset.xAxisID or dataset.yAxisID properties to match datasets with specific axes. This is particularly useful in multi-axes charts where datasets need to be associated with different axes.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/axes/cartesian/index.md#2025-04-08_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst myChart = new Chart(ctx, {\n    type: 'line',\n    data: {\n        datasets: [{\n            // This dataset appears on the first axis\n            yAxisID: 'first-y-axis'\n        }, {\n            // This dataset appears on the second axis\n            yAxisID: 'second-y-axis'\n        }]\n    },\n    options: {\n        scales: {\n            'first-y-axis': {\n                type: 'linear'\n            },\n            'second-y-axis': {\n                type: 'linear'\n            }\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Example of Inaccessible Canvas Element in HTML\nDESCRIPTION: This example shows an inaccessible canvas implementation that lacks both ARIA attributes and meaningful fallback content. Without these accessibility features, screen readers cannot interpret the canvas content.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/general/accessibility.md#2025-04-08_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<canvas id=\"badCanvas1\" width=\"400\" height=\"100\"></canvas>\n```\n\n----------------------------------------\n\nTITLE: Configuring Grid Lines in Chart.js\nDESCRIPTION: Example of configuring grid lines for an axis in Chart.js. The grid lines are drawn on the chart area and are colored red in this example, with grey border and tick colors.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/axes/cartesian/index.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// <block:setup:1>\nconst labels = Utils.months({count: 7});\nconst data = {\n  labels: labels,\n  datasets: [{\n    label: 'My First dataset',\n    backgroundColor: 'rgba(54, 162, 235, 0.5)',\n    borderColor: 'rgb(54, 162, 235)',\n    borderWidth: 1,\n    data: [10, 20, 30, 40, 50, 0, 5],\n  }]\n};\n// </block:setup>\n\n// <block:config:0>\nconst config = {\n  type: 'line',\n  data,\n  options: {\n    scales: {\n      x: {\n        grid: {\n          color: 'red',\n          borderColor: 'grey',\n          tickColor: 'grey'\n        }\n      }\n    }\n  }\n};\n// </block:config>\n\nmodule.exports = {\n  actions: [],\n  config: config,\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Min Value for Chart.js Category Axis\nDESCRIPTION: Shows how to configure a category axis with a minimum value constraint, limiting which labels are displayed on the axis.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/axes/cartesian/category.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nlet chart = new Chart(ctx, {\n    type: 'line',\n    data: {\n        datasets: [{\n            data: [10, 20, 30, 40, 50, 60]\n        }],\n        labels: ['January', 'February', 'March', 'April', 'May', 'June']\n    },\n    options: {\n        scales: {\n            x: {\n                min: 'March'\n            }\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Using Patternomaly Library for Chart.js Patterns\nDESCRIPTION: This snippet shows how to use the Patternomaly library to generate patterns for filling datasets in Chart.js, which can improve accessibility for viewers with vision deficiencies.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/general/colors.md#2025-04-08_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst chartData = {\n  datasets: [{\n    data: [45, 25, 20, 10],\n    backgroundColor: [\n      pattern.draw('square', '#ff6384'),\n      pattern.draw('circle', '#36a2eb'),\n      pattern.draw('diamond', '#cc65fe'),\n      pattern.draw('triangle', '#ffce56')\n    ]\n  }],\n  labels: ['Red', 'Blue', 'Purple', 'Yellow']\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing Ticks in Chart.js Radar Chart\nDESCRIPTION: This snippet demonstrates how to customize the ticks of a radial axis in a Chart.js radar chart. It configures the chart to display red ticks, which are used to label values based on their distance from the center of the axis.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/axes/radial/index.md#2025-04-08_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// <block:setup:1>\nconst labels = Utils.months({count: 7});\nconst data = {\n  labels: labels,\n  datasets: [{\n    label: 'My First dataset',\n    backgroundColor: 'rgba(54, 162, 235, 0.5)',\n    borderColor: 'rgb(54, 162, 235)',\n    borderWidth: 1,\n    data: [10, 20, 30, 40, 50, 0, 5],\n  }]\n};\n// </block:setup>\n\n// <block:config:0>\nconst config = {\n  type: 'radar',\n  data,\n  options: {\n    scales: {\n      r: {\n        ticks: {\n          color: 'red'\n        }\n      }\n    }\n  }\n};\n// </block:config>\n\nmodule.exports = {\n  actions: [],\n  config: config,\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Min Value for Chart.js Time Scale\nDESCRIPTION: This snippet demonstrates how to set a minimum value for the x-axis in a Chart.js time scale. It uses a string date that is parsable by the date adapter to set the start of the x-axis.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/axes/cartesian/time.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nlet chart = new Chart(ctx, {\n    type: 'line',\n    data: {\n        datasets: [{\n            data: [{\n                x: '2021-11-06 23:39:30',\n                y: 50\n            }, {\n                x: '2021-11-07 01:00:28',\n                y: 60\n            }, {\n                x: '2021-11-07 09:00:28',\n                y: 20\n            }]\n        }],\n    },\n    options: {\n        scales: {\n            x: {\n                min: '2021-11-07 00:00:00',\n            }\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Point Labels Color in Chart.js Radar Chart\nDESCRIPTION: This example illustrates how to change the color of point labels in a Chart.js radar chart's radial axis. It sets the point labels to red while using the same dataset configuration as previous examples.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/axes/radial/index.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// <block:setup:1>\nconst labels = Utils.months({count: 7});\nconst data = {\n  labels: labels,\n  datasets: [{\n    label: 'My First dataset',\n    backgroundColor: 'rgba(54, 162, 235, 0.5)',\n    borderColor: 'rgb(54, 162, 235)',\n    borderWidth: 1,\n    data: [10, 20, 30, 40, 50, 0, 5],\n  }]\n};\n// </block:setup>\n\n// <block:config:0>\nconst config = {\n  type: 'radar',\n  data,\n  options: {\n    scales: {\n      r: {\n        pointLabels: {\n          color: 'red'\n        }\n      }\n    }\n  }\n};\n// </block:config>\n\nmodule.exports = {\n  actions: [],\n  config: config,\n};\n```\n\n----------------------------------------\n\nTITLE: Using Image Pattern Fill in Chart.js\nDESCRIPTION: This example demonstrates how to use an image pattern as a fill for a dataset in Chart.js by creating a CanvasPattern from an image.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/general/colors.md#2025-04-08_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst img = new Image();\nimg.src = 'https://example.com/my_image.png';\nimg.onload = () => {\n  const ctx = document.getElementById('canvas').getContext('2d');\n  const fillPattern = ctx.createPattern(img, 'repeat');\n\n  const chart = new Chart(ctx, {\n    data: {\n      labels: ['Item 1', 'Item 2', 'Item 3'],\n      datasets: [{\n        data: [10, 20, 30],\n        backgroundColor: fillPattern\n      }]\n    }\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Updating Default Linear Scale Configuration in Chart.js\nDESCRIPTION: This snippet demonstrates how to globally update the default configuration for all linear scales in Chart.js, setting the minimum value to 0.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/axes/index.md#2025-04-08_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nChart.defaults.scales.linear.min = 0;\n```\n\n----------------------------------------\n\nTITLE: Configuring Step Size for Linear Axis in Chart.js\nDESCRIPTION: This example sets up a chart with a y-axis that creates ticks at fixed intervals of 0.5 from 0 to 5. The stepSize property ensures consistent tick spacing regardless of the data range.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/axes/cartesian/linear.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet options = {\n    scales: {\n        y: {\n            max: 5,\n            min: 0,\n            ticks: {\n                stepSize: 0.5\n            }\n        }\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Fixed Step Size for Linear Radial Axis in Chart.js\nDESCRIPTION: This example configures a linear radial axis with fixed step size of 0.5, creating ticks at regular intervals from 0 to 5. The ticks will be placed at 0, 0.5, 1, 1.5, and so on up to 5.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/axes/radial/linear.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlet options = {\n    scales: {\n        r: {\n            max: 5,\n            min: 0,\n            ticks: {\n                stepSize: 0.5\n            }\n        }\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Forcing Colors Plugin Override in Chart.js\nDESCRIPTION: This snippet shows how to force the Colors plugin to always color datasets, useful for dynamic datasets at runtime, by setting the forceOverride option to true.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/general/colors.md#2025-04-08_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst options = {\n  plugins: {\n    colors: {\n      forceOverride: true\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Suggested Min and Max Values for Y-Axis in Chart.js\nDESCRIPTION: This example shows how to set suggested minimum and maximum values for the y-axis in a line chart, which expands the axis range while maintaining auto-fit behavior.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/axes/index.md#2025-04-08_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nlet chart = new Chart(ctx, {\n    type: 'line',\n    data: {\n        datasets: [{\n            label: 'First dataset',\n            data: [0, 20, 40, 50]\n        }],\n        labels: ['January', 'February', 'March', 'April']\n    },\n    options: {\n        scales: {\n            y: {\n                suggestedMin: 50,\n                suggestedMax: 100\n            }\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Line Chart with Default Scales in Chart.js\nDESCRIPTION: This snippet demonstrates how to create a simple line chart using Chart.js with default 'x' and 'y' scales.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/axes/index.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet chart = new Chart(ctx, {\n  type: 'line'\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Chart.js with Custom Property Objects\nDESCRIPTION: Demonstrates using object arrays with custom property names and nested values, using the parsing option to specify which properties to use for x and y axes. This allows reusing complex data objects.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/general/data-structures.md#2025-04-08_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst cfg = {\n  type: 'bar',\n  data: {\n    datasets: [{\n      data: [{id: 'Sales', nested: {value: 1500}}, {id: 'Purchases', nested: {value: 500}}]\n    }]\n  },\n  options: {\n    parsing: {\n      xAxisKey: 'id',\n      yAxisKey: 'nested.value'\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Exporting a Chart.js Line Chart in Node.js using skia-canvas\nDESCRIPTION: This code snippet demonstrates how to create a line chart using Chart.js in a Node.js environment, render it to a canvas using skia-canvas, and save the result as a PNG file. It includes importing necessary modules, registering Chart.js components, creating and configuring the chart, and exporting the chart as an image.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/getting-started/using-from-node-js.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {CategoryScale, Chart, LinearScale, LineController, LineElement, PointElement} from 'chart.js';\nimport {Canvas} from 'skia-canvas';\nimport fsp from 'node:fs/promises';\n\nChart.register([\n  CategoryScale,\n  LineController,\n  LineElement,\n  LinearScale,\n  PointElement\n]);\n\nconst canvas = new Canvas(400, 300);\nconst chart = new Chart(\n  canvas, // TypeScript needs \"as any\" here\n  {\n    type: 'line',\n    data: {\n      labels: ['Red', 'Blue', 'Yellow', 'Green', 'Purple', 'Orange'],\n      datasets: [{\n        label: '# of Votes',\n        data: [12, 19, 3, 5, 2, 3],\n        borderColor: 'red'\n      }]\n    }\n  }\n);\nconst pngBuffer = await canvas.toBuffer('png', {matte: 'white'});\nawait fsp.writeFile('output.png', pngBuffer);\nchart.destroy();\n```\n\n----------------------------------------\n\nTITLE: Using TypeScript with Custom Data Structures in Chart.js\nDESCRIPTION: Shows how to use TypeScript with custom data structures in Chart.js by passing the data structure type to the ChartData interface. This ensures proper type checking for non-default data structures.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/general/data-structures.md#2025-04-08_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport {ChartData} from 'chart.js';\n\nconst datasets: ChartData <'bar', {key: string, value: number} []> = {\n  datasets: [{\n    data: [{key: 'Sales', value: 20}, {key: 'Revenue', value: 10}],\n    parsing: {\n      xAxisKey: 'key',\n      yAxisKey: 'value'\n    }\n  }],\n};\n```\n\n----------------------------------------\n\nTITLE: Chart.js Axis Configuration Options Table\nDESCRIPTION: Markdown table documenting common configuration options available to all Chart.js axes under the options.scales[scaleId] namespace. Includes properties for controlling axis appearance, behavior, range settings, and styling.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/axes/_common.md#2025-04-08_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Default | Description\n| ---- | ---- | ------- | -----------\n| `type` | `string` | | Type of scale being employed. Custom scales can be created and registered with a string key. This allows changing the type of an axis for a chart.\n| `alignToPixels` | `boolean` | `false` | Align pixel values to device pixels.\n| `backgroundColor` | [`Color`](/general/colors.md) | | Background color of the scale area.\n| `border` | `object` | | Border configuration. [more...](/axes/styling.md#border-configuration)\n| `display` | `boolean`\\|`string` | `true` | Controls the axis global visibility (visible when `true`, hidden when `false`). When `display: 'auto'`, the axis is visible only if at least one associated dataset is visible.\n| `grid` | `object` | | Grid line configuration. [more...](/axes/styling.md#grid-line-configuration)\n| `min` | `number` | | User defined minimum number for the scale, overrides minimum value from data. [more...](/axes/index.md#axis-range-settings)\n| `max` | `number` | | User defined maximum number for the scale, overrides maximum value from data. [more...](/axes/index.md#axis-range-settings)\n| `reverse` | `boolean` | `false` | Reverse the scale.\n| `stacked` | `boolean`\\|`string` | `false` | Should the data be stacked. [more...](/axes/index.md#stacking)\n| `suggestedMax` | `number` | | Adjustment used when calculating the maximum data value. [more...](/axes/index.md#axis-range-settings)\n| `suggestedMin` | `number` | | Adjustment used when calculating the minimum data value. [more...](/axes/index.md#axis-range-settings)\n| `ticks` | `object` | | Tick configuration. [more...](/axes/index.md#tick-configuration)\n| `weight` | `number` | `0` | The weight used to sort the axis. Higher weights are further away from the chart area.\n```\n\n----------------------------------------\n\nTITLE: Setting Default Plugin Options in Chart.js\nDESCRIPTION: Shows how to implement a plugin with default options for background color. The plugin sets a canvas background color that can be overridden in chart configuration.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/developers/plugins.md#2025-04-08_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst plugin = {\n    id: 'custom_canvas_background_color',\n    beforeDraw: (chart, args, options) => {\n        const {ctx} = chart;\n        ctx.save();\n        ctx.globalCompositeOperation = 'destination-over';\n        ctx.fillStyle = options.color;\n        ctx.fillRect(0, 0, chart.width, chart.height);\n        ctx.restore();\n    },\n    defaults: {\n        color: 'lightGreen'\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Global and Specific Font Settings in Chart.js\nDESCRIPTION: This example demonstrates how to set a global font size default while overriding it specifically for legend labels. Global settings apply to all text elements unless they are overridden by more specific configuration options.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/general/fonts.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nChart.defaults.font.size = 16;\nlet chart = new Chart(ctx, {\n    type: 'line',\n    data: data,\n    options: {\n        plugins: {\n            legend: {\n                labels: {\n                    // This more specific font property overrides the global property\n                    font: {\n                        size: 14\n                    }\n                }\n            }\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Chart Action Handlers\nDESCRIPTION: This snippet creates an array of action objects that define interactive features for the chart. Each action has a name and a handler function that will be called when the action is triggered.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/samples/advanced/programmatic-events.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst actions = [\n  {\n    name: 'Trigger Hover',\n    handler: triggerHover\n  },\n  {\n    name: 'Trigger Tooltip',\n    handler: triggerTooltip\n  }\n];\n```\n\n----------------------------------------\n\nTITLE: Defining Common Cartesian Axis Options in Chart.js\nDESCRIPTION: This markdown table defines common configuration options for cartesian axes in Chart.js. It specifies the namespace and lists various properties with their types, default values, and descriptions. The options cover aspects like scale bounds, clipping, axis positioning, stacking, and scale titling.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/axes/cartesian/_common.md#2025-04-08_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Default | Description\n| ---- | ---- | ------- | -----------\n| `bounds` | `string` | `'ticks'` | Determines the scale bounds. [more...](./index.md#scale-bounds)\n| `clip` | `boolean` | `true` | If true, clip the dataset drawing against the size of the scale instead of chart area\n| `position` | `string` \\| `object` | | Position of the axis. [more...](./index.md#axis-position)\n| `stack` | `string` | | Stack group. Axes at the same `position` with same `stack` are stacked.\n| `stackWeight` | `number` | 1 | Weight of the scale in stack group. Used to determine the amount of allocated space for the scale within the group.\n| `axis` | `string` | | Which type of axis this is. Possible values are: `'x'`, `'y'`. If not set, this is inferred from the first character of the ID which should be `'x'` or `'y'`.\n| `offset` | `boolean` | `false` | If true, extra space is added to the both edges and the axis is scaled to fit into the chart area. This is set to `true` for a bar chart by default.\n| `title` | `object` | | Scale title configuration. [more...](../labelling.md#scale-title-configuration)\n```\n\n----------------------------------------\n\nTITLE: Registering Colors Plugin in Chart.js\nDESCRIPTION: This snippet shows how to import and register the Colors plugin in Chart.js, which provides a default color palette for charts.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/general/colors.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Colors } from 'chart.js';\n\nChart.register(Colors);\n```\n\n----------------------------------------\n\nTITLE: Disabling All Plugins for a Chart Instance\nDESCRIPTION: Demonstrates how to disable all plugins for a specific chart instance by setting options.plugins to false.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/developers/plugins.md#2025-04-08_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst chart = new Chart(ctx, {\n    options: {\n        plugins: false // all plugins are disabled for this instance\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Disabling Point Drawing in Chart.js\nDESCRIPTION: This snippet illustrates how to disable point rendering for datasets in Chart.js. This can significantly improve performance for charts with many data points by reducing the number of elements drawn on the canvas.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/general/performance.md#2025-04-08_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nnew Chart(ctx, {\n    type: 'line',\n    data: {\n        datasets: [{\n            pointRadius: 0 // disable for a single dataset\n        }]\n    },\n    options: {\n        datasets: {\n            line: {\n                pointRadius: 0 // disable for all `'line'` datasets\n            }\n        },\n        elements: {\n            point: {\n                radius: 0 // default to disabled in all datasets\n            }\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Border Configuration Options Table in Chart.js\nDESCRIPTION: Markdown table defining configuration options for axis borders in Chart.js, including display, color, width, and dash settings.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/axes/styling.md#2025-04-08_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Scriptable | Indexable | Default | Description\n| ---- | ---- | :-------------------------------: | :-----------------------------: | ------- | -----------\n| `display` | `boolean` | | | `true` | If true, draw a border at the edge between the axis and the chart area.\n| `color` | [`Color`](../general/colors.md) | | | `Chart.defaults.borderColor` | The color of the border line.\n| `width` | `number` | | | `1` | The width of the border line.\n| `dash` | `number[]` | Yes | | `[]` | Length and spacing of dashes on grid lines. See [MDN](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/setLineDash).\n| `dashOffset` | `number` | Yes | | `0.0` | Offset for line dashes. See [MDN](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineDashOffset).\n| `z` | `number` | | | `0` | z-index of the border layer. Values <= 0 are drawn under datasets, > 0 on top.\n```\n\n----------------------------------------\n\nTITLE: Disabling Global Plugins for Specific Chart Instances\nDESCRIPTION: Shows how to disable a globally registered plugin for a specific chart instance by setting its option to false.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/developers/plugins.md#2025-04-08_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nChart.register({\n    id: 'p1',\n    // ...\n});\n\nconst chart = new Chart(ctx, {\n    options: {\n        plugins: {\n            p1: false   // disable plugin 'p1' for this instance\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Transferring Canvas Control to Web Worker in Chart.js\nDESCRIPTION: This snippet illustrates how to transfer rendering control of a canvas to a web worker for parallel rendering in Chart.js. This can free up the main thread for other tasks.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/general/performance.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {};\nconst canvas = new HTMLCanvasElement();\nconst offscreenCanvas = canvas.transferControlToOffscreen();\n\nconst worker = new Worker('worker.js');\nworker.postMessage({canvas: offscreenCanvas, config}, [offscreenCanvas]);\n```\n\n----------------------------------------\n\nTITLE: Setting Global Bar Chart Border Width in Chart.js\nDESCRIPTION: This snippet demonstrates how to set the border width for all bar charts globally in Chart.js. It uses the Chart.defaults.elements.bar object to modify the borderWidth property.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/configuration/elements.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nChart.defaults.elements.bar.borderWidth = 2;\n```\n\n----------------------------------------\n\nTITLE: Web Worker Code for Chart.js Rendering\nDESCRIPTION: This code snippet shows the implementation of a web worker that receives an OffscreenCanvas and config object to render a Chart.js chart in a separate thread.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/general/performance.md#2025-04-08_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nonmessage = function(event) {\n    const {canvas, config} = event.data;\n    const chart = new Chart(canvas, config);\n\n    // Resizing the chart must be done manually, since OffscreenCanvas does not include event listeners.\n    canvas.width = 100;\n    canvas.height = 100;\n    chart.resize();\n};\n```\n\n----------------------------------------\n\nTITLE: Running Chart.js Documentation Server\nDESCRIPTION: Command to start the local documentation server using Vuepress for Chart.js documentation development.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/developers/contributing.md#2025-04-08_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n> pnpm run docs:dev\n```\n\n----------------------------------------\n\nTITLE: Specifying Min and Max for Scales in Chart.js\nDESCRIPTION: This code shows how to specify the min and max values for scales in Chart.js. By providing these values, the scale doesn't need to compute the range from the data, which can improve performance.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/general/performance.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nnew Chart(ctx, {\n    type: 'line',\n    data: data,\n    options: {\n        scales: {\n            x: {\n                type: 'time',\n                min: new Date('2019-01-01').valueOf(),\n                max: new Date('2019-12-31').valueOf()\n            },\n            y: {\n                type: 'linear',\n                min: 0,\n                max: 100\n            }\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Per-Dataset Colors in Chart.js\nDESCRIPTION: This example demonstrates how to set background and border colors for individual datasets in a Chart.js configuration object.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/general/colors.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = {\n  labels: ['A', 'B', 'C'],\n  datasets: [\n    {\n      label: 'Dataset 1',\n      data: [1, 2, 3],\n      borderColor: '#36A2EB',\n      backgroundColor: '#9BD0F5',\n    },\n    {\n      label: 'Dataset 2',\n      data: [2, 3, 4],\n      borderColor: '#FF6384',\n      backgroundColor: '#FFB1C1',\n    }\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing Tooltip Point Style in Chart.js\nDESCRIPTION: This snippet demonstrates how to use the labelPointStyle callback to change the shape of tooltip items. It sets the point style to a triangle for each item in the tooltip.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/configuration/tooltip.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst chart = new Chart(ctx, {\n    type: 'line',\n    data: data,\n    options: {\n        plugins: {\n            tooltip: {\n                usePointStyle: true,\n                callbacks: {\n                    labelPointStyle: function(context) {\n                        return {\n                            pointStyle: 'triangle',\n                            rotation: 0\n                        };\n                    }\n                }\n            }\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Chart.js Development Dependencies\nDESCRIPTION: Command to install local development dependencies for Chart.js using pnpm package manager.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/developers/contributing.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n> pnpm install\n```\n\n----------------------------------------\n\nTITLE: Disabling Animations in Chart.js\nDESCRIPTION: This snippet demonstrates how to disable animations in Chart.js to reduce CPU usage and improve page performance. Disabling animations means the chart only needs to be rendered once during an update.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/general/performance.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nnew Chart(ctx, {\n    type: 'line',\n    data: data,\n    options: {\n        animation: false\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing External HTML Tooltips in Chart.js\nDESCRIPTION: This comprehensive example shows how to create custom HTML tooltips using the external option. It creates a div element to display the tooltip and handles positioning and content updates.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/configuration/tooltip.md#2025-04-08_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst myPieChart = new Chart(ctx, {\n    type: 'pie',\n    data: data,\n    options: {\n        plugins: {\n            tooltip: {\n                // Disable the on-canvas tooltip\n                enabled: false,\n\n                external: function(context) {\n                    // Tooltip Element\n                    let tooltipEl = document.getElementById('chartjs-tooltip');\n\n                    // Create element on first render\n                    if (!tooltipEl) {\n                        tooltipEl = document.createElement('div');\n                        tooltipEl.id = 'chartjs-tooltip';\n                        tooltipEl.innerHTML = '<table></table>';\n                        document.body.appendChild(tooltipEl);\n                    }\n\n                    // Hide if no tooltip\n                    const tooltipModel = context.tooltip;\n                    if (tooltipModel.opacity === 0) {\n                        tooltipEl.style.opacity = 0;\n                        return;\n                    }\n\n                    // Set caret Position\n                    tooltipEl.classList.remove('above', 'below', 'no-transform');\n                    if (tooltipModel.yAlign) {\n                        tooltipEl.classList.add(tooltipModel.yAlign);\n                    } else {\n                        tooltipEl.classList.add('no-transform');\n                    }\n\n                    function getBody(bodyItem) {\n                        return bodyItem.lines;\n                    }\n\n                    // Set Text\n                    if (tooltipModel.body) {\n                        const titleLines = tooltipModel.title || [];\n                        const bodyLines = tooltipModel.body.map(getBody);\n\n                        let innerHtml = '<thead>';\n\n                        titleLines.forEach(function(title) {\n                            innerHtml += '<tr><th>' + title + '</th></tr>';\n                        });\n                        innerHtml += '</thead><tbody>';\n\n                        bodyLines.forEach(function(body, i) {\n                            const colors = tooltipModel.labelColors[i];\n                            let style = 'background:' + colors.backgroundColor;\n                            style += '; border-color:' + colors.borderColor;\n                            style += '; border-width: 2px';\n                            const span = '<span style=\"' + style + '\">' + body + '</span>';\n                            innerHtml += '<tr><td>' + span + '</td></tr>';\n                        });\n                        innerHtml += '</tbody>';\n\n                        let tableRoot = tooltipEl.querySelector('table');\n                        tableRoot.innerHTML = innerHtml;\n                    }\n\n                    const position = context.chart.canvas.getBoundingClientRect();\n                    const bodyFont = Chart.helpers.toFont(tooltipModel.options.bodyFont);\n\n                    // Display, position, and set styles for font\n                    tooltipEl.style.opacity = 1;\n                    tooltipEl.style.position = 'absolute';\n                    tooltipEl.style.left = position.left + window.pageXOffset + tooltipModel.caretX + 'px';\n                    tooltipEl.style.top = position.top + window.pageYOffset + tooltipModel.caretY + 'px';\n                    tooltipEl.style.font = bodyFont.string;\n                    tooltipEl.style.padding = tooltipModel.padding + 'px ' + tooltipModel.padding + 'px';\n                    tooltipEl.style.pointerEvents = 'none';\n                }\n            }\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Tooltip Positioner in Chart.js\nDESCRIPTION: This snippet demonstrates how to create a custom tooltip positioner function and use it in a Chart.js configuration. It defines a new positioner function and shows how to apply it to a chart instance.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/configuration/tooltip.md#2025-04-08_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Tooltip } from 'chart.js';\n\n/**\n * Custom positioner\n * @function Tooltip.positioners.myCustomPositioner\n * @param elements {Chart.Element[]} the tooltip elements\n * @param eventPosition {Point} the position of the event in canvas coordinates\n * @returns {TooltipPosition} the tooltip position\n */\nTooltip.positioners.myCustomPositioner = function(elements, eventPosition) {\n    // A reference to the tooltip model\n    const tooltip = this;\n\n    /* ... */\n\n    return {\n        x: 0,\n        y: 0\n        // You may also include xAlign and yAlign to override those tooltip options.\n    };\n};\n\n// Then, to use it...\nnew Chart(ctx, {\n    data,\n    options: {\n        plugins: {\n            tooltip: {\n                position: 'myCustomPositioner'\n            }\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Adding TypeScript Typings for Custom Chart Type\nDESCRIPTION: This TypeScript code demonstrates how to provide typings for a new chart type that extends from a bubble chart using declaration merging.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/developers/charts.md#2025-04-08_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ChartTypeRegistry } from 'chart.js';\n\ndeclare module 'chart.js' {\n    interface ChartTypeRegistry {\n        derivedBubble: ChartTypeRegistry['bubble']\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Tooltip Colors and Styles in Chart.js\nDESCRIPTION: This example shows how to use labelColor and labelTextColor callbacks to customize the appearance of tooltip items. It sets a red background with a blue dashed border for each item.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/configuration/tooltip.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst chart = new Chart(ctx, {\n    type: 'line',\n    data: data,\n    options: {\n        plugins: {\n            tooltip: {\n                callbacks: {\n                    labelColor: function(context) {\n                        return {\n                            borderColor: 'rgb(0, 0, 255)',\n                            backgroundColor: 'rgb(255, 0, 0)',\n                            borderWidth: 2,\n                            borderDash: [2, 2],\n                            borderRadius: 2,\n                        };\n                    },\n                    labelTextColor: function(context) {\n                        return '#543453';\n                    }\n                }\n            }\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Tooltip Positioner in TypeScript for Chart.js\nDESCRIPTION: This snippet shows how to register a custom tooltip positioner in TypeScript for Chart.js. It extends the TooltipPositionerMap interface to include the new custom positioner.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/configuration/tooltip.md#2025-04-08_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare module 'chart.js' {\n  interface TooltipPositionerMap {\n    myCustomPositioner: TooltipPositionerFunction<ChartType>;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Optional Methods for Dataset Controllers in JavaScript\nDESCRIPTION: This snippet shows optional methods that can be overridden by derived dataset controllers in Chart.js.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/developers/charts.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    // Draw the representation of the dataset. The base implementation works in most cases, and an example of a derived version\n    // can be found in the line controller\n    draw: function() {},\n\n    // Initializes the controller\n    initialize: function() {},\n\n    // Ensures that the dataset represented by this controller is linked to a scale. Overridden to helpers.noop in the polar area and doughnut controllers as these\n    // chart types using a single scale\n    linkScales: function() {},\n\n    // Parse the data into the controller meta data. The default implementation will work for cartesian parsing, but an example of an overridden\n    // version can be found in the doughnut controller\n    parse: function(start, count) {},\n}\n```\n\n----------------------------------------\n\nTITLE: Limiting Plugin Events in Chart.js\nDESCRIPTION: Example demonstrating how to limit events for specific plugins, in this case configuring the tooltip plugin to only receive click events.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/configuration/interactions.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst chart = new Chart(ctx, {\n  type: 'line',\n  data: data,\n  options: {\n    // All of these (default) events trigger a hover and are passed to all plugins,\n    // unless limited at plugin options\n    events: ['mousemove', 'mouseout', 'click', 'touchstart', 'touchmove'],\n    plugins: {\n      tooltip: {\n        // Tooltip will only receive click events\n        events: ['click']\n      }\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Replacement for getElementAtEvent in Chart.js v3\nDESCRIPTION: Shows how to replace the removed getElementAtEvent API with the new getElementsAtEventForMode method, using the 'nearest' mode with intersection enabled.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/migration/v3-migration.md#2025-04-08_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nchart.getElementsAtEventForMode(e, 'nearest', { intersect: true }, false)\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Font Settings for Tooltips in Chart.js\nDESCRIPTION: This snippet demonstrates how to override the default font settings for tooltips in Chart.js. It uses a function to return the desired font configuration, allowing for dynamic font settings.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/configuration/tooltip.md#2025-04-08_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nChart.defaults.plugins.tooltip.titleFont = () => ({ size: 20, lineHeight: 1.2, weight: 800 });\n```\n\n----------------------------------------\n\nTITLE: Capturing Non-ChartArea Events with Plugins in Chart.js\nDESCRIPTION: Example showing how to capture events that don't fire over the chart area (like mouseout) using a custom plugin with the beforeEvent hook.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/configuration/interactions.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst chart = new Chart(ctx, {\n  type: 'line',\n  data: data,\n  options: {\n    // these are the default events:\n    // events: ['mousemove', 'mouseout', 'click', 'touchstart', 'touchmove'],\n  },\n  plugins: [{\n    id: 'myEventCatcher',\n    beforeEvent(chart, args, pluginOptions) {\n      const event = args.event;\n      if (event.type === 'mouseout') {\n        // process the event\n      }\n    }\n  }]\n});\n```\n\n----------------------------------------\n\nTITLE: Dataset Controller Interface in JavaScript\nDESCRIPTION: This code block outlines the required interface for dataset controllers in Chart.js, including defaults and essential methods.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/developers/charts.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    // Defaults for charts of this type\n    defaults: {\n        // If set to `false` or `null`, no dataset level element is created.\n        // If set to a string, this is the type of element to create for the dataset.\n        // For example, a line create needs to create a line element so this is the string 'line'\n        datasetElementType: string | null | false,\n\n        // If set to `false` or `null`, no elements are created for each data value.\n        // If set to a string, this is the type of element to create for each data value.\n        // For example, a line create needs to create a point element so this is the string 'point'\n        dataElementType: string | null | false,\n    }\n\n    // ID of the controller\n    id: string;\n\n    // Update the elements in response to new data\n    // @param mode : update mode, core calls this method using any of `'active'`, `'hide'`, `'reset'`, `'resize'`, `'show'` or `undefined`\n    update: function(mode) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring X-Axis Interaction Mode in Chart.js\nDESCRIPTION: Configuration example for the 'x' interaction mode, which returns all items that intersect based on the X coordinate of the position, useful for vertical cursor implementations.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/configuration/interactions.md#2025-04-08_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst chart = new Chart(ctx, {\n    type: 'line',\n    data: data,\n    options: {\n        interaction: {\n            mode: 'x'\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Default Colors in Chart.js\nDESCRIPTION: This snippet shows how to reset the default colors for background, border, and font in Chart.js by updating the Chart.defaults object properties.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/general/colors.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nChart.defaults.backgroundColor = '#9BD0F5';\nChart.defaults.borderColor = '#36A2EB';\nChart.defaults.color = '#000';\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Scale with Chart.js\nDESCRIPTION: Demonstrates how to register a custom scale with the Chart.js registry. The example shows the standard registration method as well as the explicit method needed when the scale doesn't extend Chart.Scale.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/developers/axes.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nChart.register(MyScale);\n\n// If the new scale is not extending Chart.Scale, the prototype can not be used to detect what\n// you are trying to register - so you need to be explicit:\n\n// Chart.registry.addScales(MyScale);\n```\n\n----------------------------------------\n\nTITLE: TypeScript Declaration for Custom Interaction Mode in Chart.js\nDESCRIPTION: TypeScript example showing how to register a new custom interaction mode type in the InteractionModeMap interface.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/configuration/interactions.md#2025-04-08_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare module 'chart.js' {\n  interface InteractionModeMap {\n    myCustomMode: InteractionModeFunction;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Colors Plugin in Chart.js UMD Version\nDESCRIPTION: This code example demonstrates how to disable the Colors plugin in the UMD version of Chart.js by setting the enabled option to false.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/general/colors.md#2025-04-08_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst options = {\n  plugins: {\n    colors: {\n      enabled: false\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Adding TypeScript Typings for Chart.js Plugins\nDESCRIPTION: Demonstrates how to add TypeScript type definitions for a custom plugin using declaration merging. This example adds typings for a canvas background color plugin.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/developers/plugins.md#2025-04-08_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport {ChartType, Plugin} from 'chart.js';\n\ndeclare module 'chart.js' {\n  interface PluginOptionsByType<TType extends ChartType> {\n    customCanvasBackgroundColor?: {\n      color?: string\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Chart.Scale to Create a Custom Scale in Chart.js\nDESCRIPTION: Shows how to create a new scale by extending the Chart.Scale class. The example defines a new MyScale class, sets its ID and default configuration object, creating a new scale type that can be used in Chart.js.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/developers/axes.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyScale extends Chart.Scale {\n    /* extensions ... */\n}\nMyScale.id = 'myScale';\nMyScale.defaults = defaultConfigObject;\n\n// MyScale is now derived from Chart.Scale\n```\n\n----------------------------------------\n\nTITLE: Configuring Chart.js with Plugin Options\nDESCRIPTION: Shows how to configure multiple plugins with different options in a chart instance. Plugin options are scoped by the plugin ID under options.plugins.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/developers/plugins.md#2025-04-08_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst chart = new Chart(ctx, {\n    options: {\n        foo: { ... },           // chart 'foo' option\n        plugins: {\n            p1: {\n                foo: { ... },   // p1 plugin 'foo' option\n                bar: { ... }\n            },\n            p2: {\n                foo: { ... },   // p2 plugin 'foo' option\n                bla: { ... }\n            }\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Chart.js with Looping Animations\nDESCRIPTION: Defines the configuration for a Chart.js line chart with custom animations, particularly a looping radius animation. The config includes interactive features like custom hover effects and disables tooltips in favor of direct visual feedback.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/samples/animations/loop.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n  type: 'line',\n  data: data,\n  options: {\n    animations: {\n      radius: {\n        duration: 400,\n        easing: 'linear',\n        loop: (context) => context.active\n      }\n    },\n    hoverRadius: 12,\n    hoverBackgroundColor: 'yellow',\n    interaction: {\n      mode: 'nearest',\n      intersect: false,\n      axis: 'x'\n    },\n    plugins: {\n      tooltip: {\n        enabled: false\n      }\n    }\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Chart.js with Object Arrays - Numeric Values\nDESCRIPTION: Shows how to use arrays of objects with x/y properties for explicit coordinate data in a line chart. This format allows for more control over data point positions and supports null for skipped values.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/general/data-structures.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst cfg = {\n  type: 'line',\n  data: {\n    datasets: [{\n      data: [{x: 10, y: 20}, {x: 15, y: null}, {x: 20, y: 10}]\n    }]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Plugin Enablement in Chart.js\nDESCRIPTION: Checks if a plugin with a given ID is registered to the chart instance.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/developers/api.md#2025-04-08_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nchart.isPluginEnabled('filler');\n```\n\n----------------------------------------\n\nTITLE: Required Interface Methods for Custom Chart.js Scales\nDESCRIPTION: Defines the required methods that must be implemented by any custom scale to work with Chart.js. These methods handle data limits, tick generation, label creation, and coordinate/value conversions.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/developers/axes.md#2025-04-08_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    // Determines the data limits. Should set this.min and this.max to be the data max/min\n    determineDataLimits: function() {},\n\n    // Generate tick marks. this.chart is the chart instance. The data object can be accessed as this.chart.data\n    // buildTicks() should create a ticks array on the axis instance, if you intend to use any of the implementations from the base class\n    buildTicks: function() {},\n\n    // Get the label to show for the given value\n    getLabelForValue: function(value) {},\n\n    // Get the pixel (x coordinate for horizontal axis, y coordinate for vertical axis) for a given value\n    // @param index: index into the ticks array\n    getPixelForTick: function(index) {},\n\n    // Get the pixel (x coordinate for horizontal axis, y coordinate for vertical axis) for a given value\n    // @param value : the value to get the pixel for\n    // @param [index] : index into the data array of the value\n    getPixelForValue: function(value, index) {},\n\n    // Get the value for a given pixel (x coordinate for horizontal axis, y coordinate for vertical axis)\n    // @param pixel : pixel value\n    getValueForPixel: function(pixel) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Chart.js with Object Arrays - Date Values\nDESCRIPTION: Demonstrates using object arrays with date strings as x-values for time-based charts. This allows creating time series charts with specific date points.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/general/data-structures.md#2025-04-08_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst cfg = {\n  type: 'line',\n  data: {\n    datasets: [{\n      data: [{x: '2016-12-25', y: 20}, {x: '2016-12-26', y: 10}]\n    }]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Scale Properties in Chart.js\nDESCRIPTION: Defines the properties that are provided to scale instances during the fitting process. These properties include positioning coordinates (left, right, top, bottom), dimensions (width, height), margins, and padding values.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/developers/axes.md#2025-04-08_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    left: number, // left edge of the scale bounding box\n    right: number, // right edge of the bounding box\n    top: number,\n    bottom: number,\n    width: number, // the same as right - left\n    height: number, // the same as bottom - top\n\n    // Margin on each side. Like css, this is outside the bounding box.\n    margins: {\n        left: number,\n        right: number,\n        top: number,\n        bottom: number\n    },\n\n    // Amount of padding on the inside of the bounding box (like CSS)\n    paddingLeft: number,\n    paddingRight: number,\n    paddingTop: number,\n    paddingBottom: number\n}\n```\n\n----------------------------------------\n\nTITLE: Hiding Datasets or Data Elements in Chart.js\nDESCRIPTION: Hides a specific dataset or data element and triggers a 'hide' animation.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/developers/api.md#2025-04-08_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nchart.hide(1); // hides dataset at index 1 and does 'hide' animation.\nchart.hide(0, 2); // hides the data element at index 2 of the first dataset.\n```\n\n----------------------------------------\n\nTITLE: Configuring Chart.js Scales - v3 Format\nDESCRIPTION: Example showing the new Chart.js v3 configuration format for scales, using direct scale objects instead of axes arrays, with simplified structure and improved tick handling\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/migration/v3-migration.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\noptions: {\n  scales: {\n    x: {\n      type: 'time',\n      display: true,\n      title: {\n        display: true,\n        text: 'Date'\n      },\n      ticks: {\n        major: {\n          enabled: true\n        },\n        color: (context) => context.tick && context.tick.major && '#FF0000',\n        font: function(context) {\n          if (context.tick && context.tick.major) {\n            return {\n              weight: 'bold'\n            };\n          }\n        }\n      }\n    },\n    y: {\n      display: true,\n      title: {\n        display: true,\n        text: 'value'\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Chart.js Doughnut Charts with Custom Property Objects\nDESCRIPTION: Shows how to configure doughnut charts with custom property objects and nested values using the parsing key option. For pie/doughnut, radar, or polarArea charts, the parsing object needs a key property instead of axis keys.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/general/data-structures.md#2025-04-08_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst cfg = {\n  type: 'doughnut',\n  data: {\n    datasets: [{\n      data: [{id: 'Sales', nested: {value: 1500}}, {id: 'Purchases', nested: {value: 500}}]\n    }]\n  },\n  options: {\n    parsing: {\n      key: 'nested.value'\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Dataset Metadata in Chart.js\nDESCRIPTION: Retrieves metadata for a specific dataset index, including information about individual data points.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/developers/api.md#2025-04-08_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst meta = myChart.getDatasetMeta(0);\nconst x = meta.data[0].x;\n```\n\n----------------------------------------\n\nTITLE: Replacement for getElementsAtEvent in Chart.js v3\nDESCRIPTION: Shows how to replace the removed getElementsAtEvent API with the new getElementsAtEventForMode method, using the 'index' mode with intersection enabled.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/migration/v3-migration.md#2025-04-08_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nchart.getElementsAtEventForMode(e, 'index', { intersect: true }, false)\n```\n\n----------------------------------------\n\nTITLE: Configuring Tooltip Position Mode Actions in Chart.js\nDESCRIPTION: Defines action handlers that change the tooltip position mode between 'average', 'nearest', and a custom 'bottom' position. Each action updates the chart configuration and refreshes the display.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/samples/tooltip/position.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst actions = [\n  {\n    name: 'Position: average',\n    handler(chart) {\n      chart.options.plugins.tooltip.position = 'average';\n      chart.update();\n    }\n  },\n  {\n    name: 'Position: nearest',\n    handler(chart) {\n      chart.options.plugins.tooltip.position = 'nearest';\n      chart.update();\n    }\n  },\n  {\n    name: 'Position: bottom (custom)',\n    handler(chart) {\n      chart.options.plugins.tooltip.position = 'bottom';\n      chart.update();\n    }\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring Chart.js with Escaped Property Keys\nDESCRIPTION: Demonstrates how to use object data with property names containing dots by escaping them with double backslashes in the parsing configuration. This is necessary when working with dotted property names in data objects.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/general/data-structures.md#2025-04-08_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst cfg = {\n  type: 'line',\n  data: {\n    datasets: [{\n      data: [{'data.key': 'one', 'data.value': 20}, {'data.key': 'two', 'data.value': 30}]\n    }]\n  },\n  options: {\n    parsing: {\n      xAxisKey: 'data\\\\.key',\n      yAxisKey: 'data\\\\.value'\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Preventing Animations in Chart.js Updates (JavaScript)\nDESCRIPTION: A code snippet demonstrating how to update a Chart.js chart without triggering animations. This is achieved by passing 'none' as the mode parameter to the update method.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/developers/updates.md#2025-04-08_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmyChart.update('none');\n```\n\n----------------------------------------\n\nTITLE: Generating Base64 Image from Chart.js\nDESCRIPTION: Returns a base64 encoded string of the chart in its current state, with options for image type and quality.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/developers/api.md#2025-04-08_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nmyLineChart.toBase64Image();\n// => returns png data url of the image on the canvas\n\nmyLineChart.toBase64Image('image/jpeg', 1)\n// => returns a jpeg data url in the highest quality of the canvas\n```\n\n----------------------------------------\n\nTITLE: Updating Acquisitions Data Source\nDESCRIPTION: Modifies the acquisitions chart to use real data from the API instead of hardcoded values.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/getting-started/usage.md#2025-04-08_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { getAquisitionsByYear } from './api'\n\n// ...\n\nconst data = await getAquisitionsByYear();\n```\n\n----------------------------------------\n\nTITLE: Configuring Chart.js with Object Data\nDESCRIPTION: Shows how to use a simple object as data where property names become x-axis labels and values become y-axis values. This format is useful for simple key-value data representation.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/general/data-structures.md#2025-04-08_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst cfg = {\n  type: 'line',\n  data: {\n    datasets: [{\n      data: {\n        January: 10,\n        February: 20\n      }\n    }]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Chart.js with Specific Animation Mode\nDESCRIPTION: Demonstrates updating a chart with a specific animation mode ('active' in this case).\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/developers/api.md#2025-04-08_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmyChart.update('active');\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Chart.js Bar Chart\nDESCRIPTION: Initial JavaScript implementation of a basic Chart.js bar chart with dummy data and default configurations.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/getting-started/usage.md#2025-04-08_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport Chart from 'chart.js/auto'\n\n(async function() {\n  const data = [\n    { year: 2010, count: 10 },\n    { year: 2011, count: 20 },\n    { year: 2012, count: 15 },\n    { year: 2013, count: 25 },\n    { year: 2014, count: 22 },\n    { year: 2015, count: 30 },\n    { year: 2016, count: 28 },\n  ];\n\n  new Chart(\n    document.getElementById('acquisitions'),\n    {\n      type: 'bar',\n      data: {\n        labels: data.map(row => row.year),\n        datasets: [\n          {\n            label: 'Acquisitions by year',\n            data: data.map(row => row.count)\n          }\n        ]\n      }\n    }\n  );\n})();\n```\n\n----------------------------------------\n\nTITLE: Configuring Chart.js with Multiple Datasets from Same Data Source\nDESCRIPTION: Demonstrates how to create multiple datasets from the same data source by using different parsing keys. This approach is useful for creating multi-series charts from a single data array.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/general/data-structures.md#2025-04-08_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = [{x: 'Jan', net: 100, cogs: 50, gm: 50}, {x: 'Feb', net: 120, cogs: 55, gm: 75}];\nconst cfg = {\n  type: 'bar',\n  data: {\n    labels: ['Jan', 'Feb'],\n    datasets: [{\n      label: 'Net sales',\n      data: data,\n      parsing: {\n        yAxisKey: 'net'\n      }\n    }, {\n      label: 'Cost of goods sold',\n      data: data,\n      parsing: {\n        yAxisKey: 'cogs'\n      }\n    }, {\n      label: 'Gross margin',\n      data: data,\n      parsing: {\n        yAxisKey: 'gm'\n      }\n    }]\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Setting up HTML Structure for Chart.js\nDESCRIPTION: Basic HTML template that includes canvas elements for Chart.js rendering and module script imports.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/getting-started/usage.md#2025-04-08_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html lang=\"en\">\n  <head>\n    <title>Chart.js example</title>\n  </head>\n  <body>\n    <!-- <div style=\"width: 500px;\"><canvas id=\"dimensions\"></canvas></div><br/> -->\n    <div style=\"width: 800px;\"><canvas id=\"acquisitions\"></canvas></div>\n\n    <!-- <script type=\"module\" src=\"dimensions.js\"></script> -->\n    <script type=\"module\" src=\"acquisitions.js\"></script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Advanced Title Padding Configuration in Chart.js\nDESCRIPTION: Shows how to customize title padding with separate top and bottom values in Chart.js. This example demonstrates more granular control over title spacing.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/configuration/title.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst chart = new Chart(ctx, {\n    type: 'line',\n    data: data,\n    options: {\n        plugins: {\n            title: {\n                display: true,\n                text: 'Custom Chart Title',\n                padding: {\n                    top: 10,\n                    bottom: 30\n                }\n            }\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Chart Area Border Plugin in Chart.js\nDESCRIPTION: This snippet demonstrates how to create and apply a custom plugin to add a border around the chart area in Chart.js. It shows the plugin definition and how to include it in the chart configuration.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/getting-started/usage.md#2025-04-08_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nconst chartAreaBorder = {\n  id: 'chartAreaBorder',\n\n  beforeDraw(chart, args, options) {\n    const { ctx, chartArea: { left, top, width, height } } = chart;\n\n    ctx.save();\n    ctx.strokeStyle = options.borderColor;\n    ctx.lineWidth = options.borderWidth;\n    ctx.setLineDash(options.borderDash || []);\n    ctx.lineDashOffset = options.borderDashOffset;\n    ctx.strokeRect(left, top, width, height);\n    ctx.restore();\n  }\n};\n\nnew Chart(\n  document.getElementById('dimensions'),\n  {\n    type: 'bubble',\n    plugins: [ chartAreaBorder ],\n    options: {\n      plugins: {\n        chartAreaBorder: {\n          borderColor: 'red',\n          borderWidth: 2,\n          borderDash: [ 5, 5 ],\n          borderDashOffset: 2,\n        }\n      },\n      aspectRatio: 1,\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Implementing a Polar Area Chart with Chart.js in JavaScript\nDESCRIPTION: This code snippet provides a complete implementation of a polar area chart using Chart.js. It defines action handlers for data manipulation, sets up the initial dataset with color configuration, and specifies chart options including responsive behavior and plugins for title and legend display.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/samples/other-charts/polar-area.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// <block:actions:2>\nconst actions = [\n  {\n    name: 'Randomize',\n    handler(chart) {\n      chart.data.datasets.forEach(dataset => {\n        dataset.data = Utils.numbers({count: chart.data.labels.length, min: 0, max: 100});\n      });\n      chart.update();\n    }\n  },\n  {\n    name: 'Add Data',\n    handler(chart) {\n      const data = chart.data;\n      if (data.datasets.length > 0) {\n        data.labels.push('data #' + (data.labels.length + 1));\n\n        for (let index = 0; index < data.datasets.length; ++index) {\n          data.datasets[index].data.push(Utils.rand(0, 100));\n        }\n\n        chart.update();\n      }\n    }\n  },\n  {\n    name: 'Remove Data',\n    handler(chart) {\n      chart.data.labels.splice(-1, 1); // remove the label first\n\n      chart.data.datasets.forEach(dataset => {\n        dataset.data.pop();\n      });\n\n      chart.update();\n    }\n  }\n];\n// </block:actions>\n\n// <block:setup:1>\nconst DATA_COUNT = 5;\nconst NUMBER_CFG = {count: DATA_COUNT, min: 0, max: 100};\n\nconst labels = ['Red', 'Orange', 'Yellow', 'Green', 'Blue'];\nconst data = {\n  labels: labels,\n  datasets: [\n    {\n      label: 'Dataset 1',\n      data: Utils.numbers(NUMBER_CFG),\n      backgroundColor: [\n        Utils.transparentize(Utils.CHART_COLORS.red, 0.5),\n        Utils.transparentize(Utils.CHART_COLORS.orange, 0.5),\n        Utils.transparentize(Utils.CHART_COLORS.yellow, 0.5),\n        Utils.transparentize(Utils.CHART_COLORS.green, 0.5),\n        Utils.transparentize(Utils.CHART_COLORS.blue, 0.5),\n      ]\n    }\n  ]\n};\n// </block:setup>\n\n// <block:config:0>\nconst config = {\n  type: 'polarArea',\n  data: data,\n  options: {\n    responsive: true,\n    plugins: {\n      legend: {\n        position: 'top',\n      },\n      title: {\n        display: true,\n        text: 'Chart.js Polar Area Chart'\n      }\n    }\n  },\n};\n// </block:config>\n\nmodule.exports = {\n  actions: actions,\n  config: config,\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Scriptable Color Options in Chart.js\nDESCRIPTION: Demonstrates how to use scriptable options for dynamic color assignment based on data values and indices. Shows both direct color assignment and color derivation using another option's value.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/general/options.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncolor: function(context) {\n    const index = context.dataIndex;\n    const value = context.dataset.data[index];\n    return value < 0 ? 'red' :  // draw negative values in red\n        index % 2 ? 'blue' :    // else, alternate values in blue and green\n        'green';\n},\nborderColor: function(context, options) {\n    const color = options.color; // resolve the value of another scriptable option: 'red', 'blue' or 'green'\n    return Chart.helpers.color(color).lighten(0.2);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Chart.js Dataset Options\nDESCRIPTION: Demonstrates how to set default options for specific dataset types and override them at the individual dataset level. The example disables lines for all line datasets by default, then selectively enables them for a specific dataset.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/configuration/index.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Do not show lines for all datasets by default\nChart.defaults.datasets.line.showLine = false;\n\n// This chart would show a line only for the third dataset\nconst chart = new Chart(ctx, {\n    type: 'line',\n    data: {\n        datasets: [{\n            data: [0, 0],\n        }, {\n            data: [0, 1]\n        }, {\n            data: [1, 0],\n            showLine: true // overrides the `line` dataset default\n        }, {\n            type: 'scatter', // 'line' dataset default does not affect this dataset since it's a 'scatter'\n            data: [1, 1]\n        }]\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Bubble Chart with Chart.js\nDESCRIPTION: Implements a bubble chart visualization using Chart.js with customized aspect ratio, scales, and tick formatting.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/getting-started/usage.md#2025-04-08_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport Chart from 'chart.js/auto'\nimport { getDimensions } from './api'\n\n(async function() {\n  const data = await getDimensions();\n\n  new Chart(\n    document.getElementById('dimensions'),\n    {\n      type: 'bubble',\n      options: {\n        aspectRatio: 1,\n        scales: {\n          x: {\n            max: 500,\n            ticks: {\n              callback: value => `${value / 100} m`\n            }\n          },\n          y: {\n            max: 500,\n            ticks: {\n              callback: value => `${value / 100} m`\n            }\n          }\n        }\n      },\n      data: {\n        labels: data.map(x => x.year),\n        datasets: [\n          {\n            label: 'width = height',\n            data: data\n              .filter(row => row.width === row.height)\n              .map(row => ({\n                x: row.width,\n                y: row.height,\n                r: row.count\n              }))\n          },\n          {\n            label: 'width > height',\n            data: data\n              .filter(row => row.width > row.height)\n              .map(row => ({\n                x: row.width,\n                y: row.height,\n                r: row.count\n              }))\n          },\n          {\n            label: 'width < height',\n            data: data\n              .filter(row => row.width < row.height)\n              .map(row => ({\n                x: row.width,\n                y: row.height,\n                r: row.count\n              }))\n          }\n        ]\n      }\n    }\n  );\n})();\n```\n\n----------------------------------------\n\nTITLE: Configuring Chart Events in Chart.js\nDESCRIPTION: Example showing how to configure a Chart.js instance to only respond to click events instead of the default event set.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/configuration/interactions.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst chart = new Chart(ctx, {\n  type: 'line',\n  data: data,\n  options: {\n    // This chart will not respond to mousemove, etc\n    events: ['click']\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: HTML Template Update for Bubble Chart\nDESCRIPTION: Adds container elements for the bubble chart visualization to the HTML template.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/getting-started/usage.md#2025-04-08_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<div style=\"width: 500px;\"><canvas id=\"dimensions\"></canvas></div><br/>\n\n<script type=\"module\" src=\"dimensions.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Setting Global Chart.js Interaction Mode\nDESCRIPTION: Shows how to set global defaults for all charts and demonstrates how those defaults can be overridden at the chart instance level. The example sets the interaction mode to 'nearest' globally, then creates two charts with different interaction behaviors.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/configuration/index.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nChart.defaults.interaction.mode = 'nearest';\n\n// Interaction mode is set to nearest because it was not overridden here\nconst chartInteractionModeNearest = new Chart(ctx, {\n    type: 'line',\n    data: data\n});\n\n// This chart would have the interaction mode that was passed in\nconst chartDifferentInteractionMode = new Chart(ctx, {\n    type: 'line',\n    data: data,\n    options: {\n        interaction: {\n            // Overrides the global setting\n            mode: 'index'\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Chart.js Auto Import with Bundlers\nDESCRIPTION: Importing the complete Chart.js package with all features using modern bundlers like Webpack or Rollup.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/getting-started/integration.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport Chart from 'chart.js/auto';\n```\n\n----------------------------------------\n\nTITLE: Configuring Point Interaction Mode in Chart.js\nDESCRIPTION: Configuration example for the 'point' interaction mode, which finds all items that intersect with the cursor point.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/configuration/interactions.md#2025-04-08_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst chart = new Chart(ctx, {\n    type: 'line',\n    data: data,\n    options: {\n        interaction: {\n            mode: 'point'\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Scatter Chart Data Structure\nDESCRIPTION: Shows the required data structure format for scatter charts in Chart.js. Data points must be provided as objects containing x and y coordinates.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/charts/scatter.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ndata: [{\n        x: 10,\n        y: 20\n    }, {\n        x: 15,\n        y: 10\n    }]\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Chart.js Samples\nDESCRIPTION: Terminal commands for installing dependencies and running the Chart.js documentation locally to view samples.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/samples/information.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm ci\npnpm run docs:dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Radar Chart with Dynamic Styling in Chart.js\nDESCRIPTION: This snippet demonstrates the setup and configuration of a radar chart using Chart.js. It includes data generation, custom styling functions, and chart options. The chart features randomized data, alternating point styles, and dynamic radius adjustments based on data values.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/samples/scriptable/radar.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// <block:setup:2>\nconst DATA_COUNT = 7;\nUtils.srand(110);\n\nconst actions = [\n  {\n    name: 'Randomize',\n    handler(chart) {\n      chart.data.datasets.forEach(dataset => {\n        dataset.data = generateData();\n      });\n      chart.update();\n    }\n  },\n];\n// </block:setup>\n\n// <block:data:1>\nfunction generateData() {\n  return Utils.numbers({\n    count: DATA_COUNT,\n    min: 0,\n    max: 100\n  });\n}\n\nconst data = {\n  labels: [['Eating', 'Dinner'], ['Drinking', 'Water'], 'Sleeping', ['Designing', 'Graphics'], 'Coding', 'Cycling', 'Running'],\n  datasets: [{\n    data: generateData()\n  }]\n};\n// </block:data>\n\n// <block:options:0>\nfunction getLineColor(ctx) {\n  return Utils.color(ctx.datasetIndex);\n}\n\nfunction alternatePointStyles(ctx) {\n  const index = ctx.dataIndex;\n  return index % 2 === 0 ? 'circle' : 'rect';\n}\n\nfunction makeHalfAsOpaque(ctx) {\n  return Utils.transparentize(getLineColor(ctx));\n}\n\nfunction make20PercentOpaque(ctx) {\n  return Utils.transparentize(getLineColor(ctx), 0.8);\n}\n\nfunction adjustRadiusBasedOnData(ctx) {\n  const v = ctx.parsed.y;\n  return v < 10 ? 5\n    : v < 25 ? 7\n    : v < 50 ? 9\n    : v < 75 ? 11\n    : 15;\n}\n\nconst config = {\n  type: 'radar',\n  data: data,\n  options: {\n    plugins: {\n      legend: false,\n      tooltip: false,\n    },\n    elements: {\n      line: {\n        backgroundColor: make20PercentOpaque,\n        borderColor: getLineColor,\n      },\n      point: {\n        backgroundColor: getLineColor,\n        hoverBackgroundColor: makeHalfAsOpaque,\n        radius: adjustRadiusBasedOnData,\n        pointStyle: alternatePointStyles,\n        hoverRadius: 15,\n      }\n    }\n  }\n};\n// </block:options>\n\nmodule.exports = {\n  actions,\n  config,\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Index Interaction Mode in Chart.js\nDESCRIPTION: Configuration example for the 'index' interaction mode, which finds items at the same index across all datasets.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/configuration/interactions.md#2025-04-08_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst chart = new Chart(ctx, {\n    type: 'line',\n    data: data,\n    options: {\n        interaction: {\n            mode: 'index'\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Generating Random Data for Chart.js Line Chart\nDESCRIPTION: This snippet creates two arrays of data points with random fluctuations for use in a line chart. Each data point consists of an x-coordinate and a y-coordinate.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/samples/animations/progressive-line-easing.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = [];\nconst data2 = [];\nlet prev = 100;\nlet prev2 = 80;\nfor (let i = 0; i < 1000; i++) {\n  prev += 5 - Math.random() * 10;\n  data.push({x: i, y: prev});\n  prev2 += 5 - Math.random() * 10;\n  data2.push({x: i, y: prev2});\n}\n```\n\n----------------------------------------\n\nTITLE: Controlling Drawing Order in Mixed Charts with Chart.js\nDESCRIPTION: Shows how to control the drawing order of datasets in a mixed chart using the order property. Datasets with higher order values are drawn earlier (underneath), while those with lower order values are drawn later (on top).\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/charts/mixed.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst mixedChart = new Chart(ctx, {\n    type: 'bar',\n    data: {\n        datasets: [{\n            label: 'Bar Dataset',\n            data: [10, 20, 30, 40],\n            // this dataset is drawn below\n            order: 2\n        }, {\n            label: 'Line Dataset',\n            data: [10, 10, 10, 10],\n            type: 'line',\n            // this dataset is drawn on top\n            order: 1\n        }],\n        labels: ['January', 'February', 'March', 'April']\n    },\n    options: options\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Progressive Animation for Chart.js\nDESCRIPTION: This snippet defines the animation configuration for a progressive line chart. It uses easing functions and calculates duration and delay based on the data index to create a smooth animation effect.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/samples/animations/progressive-line-easing.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlet easing = helpers.easingEffects.easeOutQuad;\nlet restart = false;\nconst totalDuration = 5000;\nconst duration = (ctx) => easing(ctx.index / data.length) * totalDuration / data.length;\nconst delay = (ctx) => easing(ctx.index / data.length) * totalDuration;\nconst previousY = (ctx) => ctx.index === 0 ? ctx.chart.scales.y.getPixelForValue(100) : ctx.chart.getDatasetMeta(ctx.datasetIndex).data[ctx.index - 1].getProps(['y'], true).y;\nconst animation = {\n  x: {\n    type: 'number',\n    easing: 'linear',\n    duration: duration,\n    from: NaN, // the point is initially skipped\n    delay(ctx) {\n      if (ctx.type !== 'data' || ctx.xStarted) {\n        return 0;\n      }\n      ctx.xStarted = true;\n      return delay(ctx);\n    }\n  },\n  y: {\n    type: 'number',\n    easing: 'linear',\n    duration: duration,\n    from: previousY,\n    delay(ctx) {\n      if (ctx.type !== 'data' || ctx.yStarted) {\n        return 0;\n      }\n      ctx.yStarted = true;\n      return delay(ctx);\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Dataset Interaction Mode in Chart.js\nDESCRIPTION: Configuration example for the 'dataset' interaction mode, which finds items in the same dataset.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/configuration/interactions.md#2025-04-08_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst chart = new Chart(ctx, {\n    type: 'line',\n    data: data,\n    options: {\n        interaction: {\n            mode: 'dataset'\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Vertical Line Chart in Chart.js\nDESCRIPTION: Configuration for creating a vertical line chart with custom styling, colors, and axis settings. Uses indexAxis property set to 'y' for vertical orientation.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/charts/line.md#2025-04-08_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// <block:setup:1>\nconst labels = Utils.months({count: 7});\nconst data = {\n  labels: labels,\n  datasets: [{\n    axis: 'y',\n    label: 'My First Dataset',\n    data: [65, 59, 80, 81, 56, 55, 40],\n    fill: false,\n    backgroundColor: [\n      'rgba(255, 99, 132, 0.2)',\n      'rgba(255, 159, 64, 0.2)',\n      'rgba(255, 205, 86, 0.2)',\n      'rgba(75, 192, 192, 0.2)',\n      'rgba(54, 162, 235, 0.2)',\n      'rgba(153, 102, 255, 0.2)',\n      'rgba(201, 203, 207, 0.2)'\n    ],\n    borderColor: [\n      'rgb(255, 99, 132)',\n      'rgb(255, 159, 64)',\n      'rgb(255, 205, 86)',\n      'rgb(75, 192, 192)',\n      'rgb(54, 162, 235)',\n      'rgb(153, 102, 255)',\n      'rgb(201, 203, 207)'\n    ],\n    borderWidth: 1\n  }]\n};\n// </block:setup>\n\n// <block:config:0>\nconst config = {\n  type: 'line',\n  data: data,\n  options: {\n    indexAxis: 'y',\n    scales: {\n      x: {\n        beginAtZero: true\n      }\n    }\n  }\n};\n// </block:config>\n\nmodule.exports = {\n  actions: [],\n  config: config,\n};\n```\n\n----------------------------------------\n\nTITLE: Triggering Hover Events in Chart.js\nDESCRIPTION: This function toggles the hover state on chart elements. It either clears all active elements if some are already active, or sets specific elements (first elements of datasets 0 and 1) as active to simulate a hover event.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/samples/advanced/programmatic-events.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction triggerHover(chart) {\n  if (chart.getActiveElements().length > 0) {\n    chart.setActiveElements([]);\n  } else {\n    chart.setActiveElements([\n      {\n        datasetIndex: 0,\n        index: 0,\n      }, {\n        datasetIndex: 1,\n        index: 0,\n      }\n    ]);\n  }\n  chart.update();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Y-Axis Interaction Mode in Chart.js\nDESCRIPTION: Configuration example for the 'y' interaction mode, which returns all items that intersect based on the Y coordinate of the position, useful for horizontal cursor implementations.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/configuration/interactions.md#2025-04-08_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst chart = new Chart(ctx, {\n    type: 'line',\n    data: data,\n    options: {\n        interaction: {\n            mode: 'y'\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Exporting Chart Configuration and Actions\nDESCRIPTION: This module export provides the chart configuration and actions to the Chart.js framework. It makes the defined actions and chart configuration available for use in the application.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/samples/advanced/programmatic-events.md#2025-04-08_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  actions: actions,\n  config: config,\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring a Horizontal Bar Chart in Chart.js\nDESCRIPTION: A complete example of creating a horizontal bar chart by setting the indexAxis property to 'y'. Includes dataset configuration with colors, labels, and data values.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/charts/bar.md#2025-04-08_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// <block:setup:1>\nconst labels = Utils.months({count: 7});\nconst data = {\n  labels: labels,\n  datasets: [{\n    axis: 'y',\n    label: 'My First Dataset',\n    data: [65, 59, 80, 81, 56, 55, 40],\n    fill: false,\n    backgroundColor: [\n      'rgba(255, 99, 132, 0.2)',\n      'rgba(255, 159, 64, 0.2)',\n      'rgba(255, 205, 86, 0.2)',\n      'rgba(75, 192, 192, 0.2)',\n      'rgba(54, 162, 235, 0.2)',\n      'rgba(153, 102, 255, 0.2)',\n      'rgba(201, 203, 207, 0.2)'\n    ],\n    borderColor: [\n      'rgb(255, 99, 132)',\n      'rgb(255, 159, 64)',\n      'rgb(255, 205, 86)',\n      'rgb(75, 192, 192)',\n      'rgb(54, 162, 235)',\n      'rgb(153, 102, 255)',\n      'rgb(201, 203, 207)'\n    ],\n    borderWidth: 1\n  }]\n};\n// </block:setup>\n\n// <block:config:0>\nconst config = {\n  type: 'bar',\n  data,\n  options: {\n    indexAxis: 'y',\n  }\n};\n// </block:config>\n\nmodule.exports = {\n  actions: [],\n  config: config,\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Interactive Actions for Chart.js Bar Chart\nDESCRIPTION: This snippet defines a set of actions that can be performed on the chart, including randomizing data, adding/removing datasets and data points. These actions demonstrate the dynamic nature of Chart.js and how to update the chart programmatically.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/samples/bar/vertical.md#2025-04-08_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst actions = [\n  {\n    name: 'Randomize',\n    handler(chart) {\n      chart.data.datasets.forEach(dataset => {\n        dataset.data = Utils.numbers({count: chart.data.labels.length, min: -100, max: 100});\n      });\n      chart.update();\n    }\n  },\n  {\n    name: 'Add Dataset',\n    handler(chart) {\n      const data = chart.data;\n      const dsColor = Utils.namedColor(chart.data.datasets.length);\n      const newDataset = {\n        label: 'Dataset ' + (data.datasets.length + 1),\n        backgroundColor: Utils.transparentize(dsColor, 0.5),\n        borderColor: dsColor,\n        borderWidth: 1,\n        data: Utils.numbers({count: data.labels.length, min: -100, max: 100}),\n      };\n      chart.data.datasets.push(newDataset);\n      chart.update();\n    }\n  },\n  {\n    name: 'Add Data',\n    handler(chart) {\n      const data = chart.data;\n      if (data.datasets.length > 0) {\n        data.labels = Utils.months({count: data.labels.length + 1});\n\n        for (let index = 0; index < data.datasets.length; ++index) {\n          data.datasets[index].data.push(Utils.rand(-100, 100));\n        }\n\n        chart.update();\n      }\n    }\n  },\n  {\n    name: 'Remove Dataset',\n    handler(chart) {\n      chart.data.datasets.pop();\n      chart.update();\n    }\n  },\n  {\n    name: 'Remove Data',\n    handler(chart) {\n      chart.data.labels.splice(-1, 1); // remove the label first\n\n      chart.data.datasets.forEach(dataset => {\n        dataset.data.pop();\n      });\n\n      chart.update();\n    }\n  }\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring Chart.js Scales - v2 Format\nDESCRIPTION: Example showing the Chart.js v2 configuration format for scales, demonstrating xAxes and yAxes arrays with time scale settings and tick customization\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/migration/v3-migration.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\noptions: {\n  scales: {\n    xAxes: [{\n      id: 'x',\n      type: 'time',\n      display: true,\n      title: {\n        display: true,\n        text: 'Date'\n      },\n      ticks: {\n        major: {\n          enabled: true\n        },\n        font: function(context) {\n          if (context.tick && context.tick.major) {\n            return {\n              weight: 'bold',\n              color: '#FF0000'\n            };\n          }\n        }\n      }\n    }],\n    yAxes: [{\n      id: 'y',\n      display: true,\n      title: {\n        display: true,\n        text: 'value'\n      }\n    }]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Interaction Modes in Chart.js\nDESCRIPTION: Example showing how to define a custom interaction mode by adding a function to the Chart.Interaction.modes map and using the evaluateInteractionItems helper function.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/configuration/interactions.md#2025-04-08_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Interaction } from 'chart.js';\nimport { getRelativePosition } from 'chart.js/helpers';\n\n/**\n * Custom interaction mode\n * @function Interaction.modes.myCustomMode\n * @param {Chart} chart - the chart we are returning items from\n * @param {Event} e - the event we are find things at\n * @param {InteractionOptions} options - options to use\n * @param {boolean} [useFinalPosition] - use final element position (animation target)\n * @return {InteractionItem[]} - items that are found\n */\nInteraction.modes.myCustomMode = function(chart, e, options, useFinalPosition) {\n  const position = getRelativePosition(e, chart);\n\n  const items = [];\n  Interaction.evaluateInteractionItems(chart, 'x', position, (element, datasetIndex, index) => {\n    if (element.inXRange(position.x, useFinalPosition) && myCustomLogic(element)) {\n      items.push({element, datasetIndex, index});\n    }\n  });\n  return items;\n};\n\n// Then, to use it...\nnew Chart.js(ctx, {\n    type: 'line',\n    data: data,\n    options: {\n        interaction: {\n            mode: 'myCustomMode'\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Fill Configuration in Chart.js\nDESCRIPTION: Demonstrates different fill modes in Chart.js including origin filling, relative dataset filling, absolute dataset filling, and axis value filling.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/charts/area.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nnew Chart(ctx, {\n    data: {\n        datasets: [\n            {fill: 'origin'},      // 0: fill to 'origin'\n            {fill: '+2'},          // 1: fill to dataset 3\n            {fill: 1},             // 2: fill to dataset 1\n            {fill: false},         // 3: no fill\n            {fill: '-2'},          // 4: fill to dataset 2\n            {fill: {value: 25}}    // 5: fill to axis value 25\n        ]\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Exporting Chart.js Configuration and Actions\nDESCRIPTION: This snippet exports the actions and configuration objects for use in other parts of the application. It allows the chart setup and interactive functions to be imported and used elsewhere in the project.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/samples/bar/vertical.md#2025-04-08_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  actions: actions,\n  config: config,\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Inline Plugins in Chart.js\nDESCRIPTION: Shows how to define plugins directly in the chart configuration (inline plugins). This approach is suitable for chart-specific customizations but not ideal for changes that need to apply to many charts.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/developers/plugins.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst chart = new Chart(ctx, {\n    plugins: [{\n        beforeInit: function(chart, args, options) {\n            //.. \n        }\n    }]\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Chart.js Line Chart Options\nDESCRIPTION: This snippet defines the configuration object for the chart, including chart type, data, responsive behavior, plugins, interactions, and axis scales. It sets up a stacked line chart with customizable options.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/samples/area/line-stacked.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n  type: 'line',\n  data: data,\n  options: {\n    responsive: true,\n    plugins: {\n      title: {\n        display: true,\n        text: (ctx) => 'Chart.js Line Chart - stacked=' + ctx.chart.options.scales.y.stacked\n      },\n      tooltip: {\n        mode: 'index'\n      },\n    },\n    interaction: {\n      mode: 'nearest',\n      axis: 'x',\n      intersect: false\n    },\n    scales: {\n      x: {\n        title: {\n          display: true,\n          text: 'Month'\n        }\n      },\n      y: {\n        stacked: true,\n        title: {\n          display: true,\n          text: 'Value'\n        }\n      }\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Major Tick Configuration Options Table in Chart.js\nDESCRIPTION: Markdown table showing configuration options for major tick marks in Chart.js axes.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/axes/styling.md#2025-04-08_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Default | Description\n| ---- | ---- | ------- | -----------\n| `enabled` | `boolean` | `false` | If true, major ticks are generated. A major tick will affect autoskipping and `major` will be defined on ticks in the scriptable options context.\n```\n\n----------------------------------------\n\nTITLE: Exporting Chart.js Configuration\nDESCRIPTION: This snippet exports the actions and configuration objects for use in other parts of the application or for chart initialization.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/samples/area/line-stacked.md#2025-04-08_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  actions: actions,\n  config: config\n};\n```\n\n----------------------------------------\n\nTITLE: Registering Global Plugins in Chart.js\nDESCRIPTION: Demonstrates how to register plugins globally so they apply to all chart instances automatically.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/developers/plugins.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nChart.register({\n    // plugin implementation\n});\n```\n\n----------------------------------------\n\nTITLE: Grid Line Configuration Options Table in Chart.js\nDESCRIPTION: Markdown table defining configuration options for grid lines in Chart.js axes. Includes properties like circular, color, display, and various styling options.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/axes/styling.md#2025-04-08_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Scriptable | Indexable | Default | Description\n| ---- | ---- | :-------------------------------: | :-----------------------------: | ------- | -----------\n| `circular` | `boolean` | | | `false` | If true, gridlines are circular (on radar and polar area charts only).\n| `color` | [`Color`](../general/colors.md)  | Yes | Yes | `Chart.defaults.borderColor` | The color of the grid lines. If specified as an array, the first color applies to the first grid line, the second to the second grid line, and so on.\n| `display` | `boolean` | | | `true` | If false, do not display grid lines for this axis.\n| `drawOnChartArea` | `boolean` | | | `true` | If true, draw lines on the chart area inside the axis lines. This is useful when there are multiple axes and you need to control which grid lines are drawn.\n| `drawTicks` | `boolean` | | | `true` | If true, draw lines beside the ticks in the axis area beside the chart.\n| `lineWidth` | `number` | Yes | Yes | `1` | Stroke width of grid lines.\n| `offset` | `boolean` | | | `false` | If true, grid lines will be shifted to be between labels. This is set to `true` for a bar chart by default.\n| `tickBorderDash` | `number[]` | Yes | Yes | `[]` | Length and spacing of the tick mark line. If not set, defaults to the grid line `borderDash` value.\n| `tickBorderDashOffset` | `number` | Yes | Yes |  | Offset for the line dash of the tick mark. If unset, defaults to the grid line `borderDashOffset` value\n| `tickColor` | [`Color`](../general/colors.md) | Yes | Yes | | Color of the tick line. If unset, defaults to the grid line color.\n| `tickLength` | `number` | | | `8` | Length in pixels that the grid lines will draw into the axis area.\n| `tickWidth` | `number` | Yes | Yes | | Width of the tick mark in pixels. If unset, defaults to the grid line width.\n| `z` | `number` | | | `-1` | z-index of the gridline layer. Values <= 0 are drawn under datasets, > 0 on top.\n```\n\n----------------------------------------\n\nTITLE: Describing Chart.js Patch Version Release Process in Markdown\nDESCRIPTION: This snippet explains the steps for creating and releasing a patch version for an older release of Chart.js, including creating a branch, cherry-picking commits, and triggering the release process.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/MAINTAINING.md#2025-04-08_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n1. Create a branch for the patch version (without the `v` prefix)\n2. Cherry pick the needed commit(s) to that new branch from master\n3. Trigger the release-drafter workflow on that branch from the actions.\n4. Follow the procedure for [Releasing a New Version](#releasing-a-new-version)\n```\n\n----------------------------------------\n\nTITLE: Fill Propagation Configuration in Chart.js\nDESCRIPTION: Example showing how to configure fill propagation behavior when target datasets are hidden.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/charts/area.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nnew Chart(ctx, {\n    data: {\n        datasets: [\n            {fill: 'origin'},   // 0: fill to 'origin'\n            {fill: '-1'},       // 1: fill to dataset 0\n            {fill: 1},          // 2: fill to dataset 1\n            {fill: false},      // 3: no fill\n            {fill: '-2'}        // 4: fill to dataset 2\n        ]\n    },\n    options: {\n        plugins: {\n            filler: {\n                propagate: true\n            }\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Scale in a Chart.js Chart\nDESCRIPTION: Shows how to implement a custom scale in a Chart.js chart configuration. The example creates a line chart and specifies the custom scale type for the y-axis using the ID that was registered with the scale.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/developers/axes.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst lineChart = new Chart(ctx, {\n    data: data,\n    type: 'line',\n    options: {\n        scales: {\n            y: {\n                type: 'myScale' // this is the same id that was set on the scale\n            }\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Axis Range with suggestedMin and suggestedMax in Chart.js\nDESCRIPTION: This example demonstrates how to extend the axis range in a radar chart while maintaining auto-fit behavior using suggestedMin and suggestedMax properties. The data ranges from 0 to 50, but the axis is configured to display up to 100.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/axes/radial/linear.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet chart = new Chart(ctx, {\n    type: 'radar',\n    data: {\n        datasets: [{\n            label: 'First dataset',\n            data: [0, 20, 40, 50]\n        }],\n        labels: ['January', 'February', 'March', 'April']\n    },\n    options: {\n        scales: {\n            r: {\n                suggestedMin: 50,\n                suggestedMax: 100\n            }\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Optional Interface Methods for Chart.js Scales\nDESCRIPTION: Defines the optional methods that can be overridden in custom scale implementations. These methods handle tick label generation, label rotation, scale fitting and drawing, with default implementations provided by the Chart.Scale base class.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/developers/axes.md#2025-04-08_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    // Adds labels to objects in the ticks array. The default implementation simply calls this.options.ticks.callback(numericalTick, index, ticks);\n    generateTickLabels: function() {},\n\n    // Determine how much the labels will rotate by. The default implementation will only rotate labels if the scale is horizontal.\n    calculateLabelRotation: function() {},\n\n    // Fits the scale into the canvas.\n    // this.maxWidth and this.maxHeight will tell you the maximum dimensions the scale instance can be. Scales should endeavour to be as efficient as possible with canvas space.\n    // this.margins is the amount of space you have on either side of your scale that you may expand in to. This is used already for calculating the best label rotation\n    // You must set this.minSize to be the size of your scale. It must be an object containing 2 properties: width and height.\n    // You must set this.width to be the width and this.height to be the height of the scale\n    fit: function() {},\n\n    // Draws the scale onto the canvas. this.(left|right|top|bottom) will have been populated to tell you the area on the canvas to draw in\n    // @param chartArea : an object containing four properties: left, right, top, bottom. This is the rectangle that lines, bars, etc will be drawn in. It may be used, for example, to draw grid lines.\n    draw: function(chartArea) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Scale in a Radar Chart using Chart.js\nDESCRIPTION: This snippet demonstrates how to create a radar chart with a custom scale named 'myScale' explicitly set as a radial axis.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/axes/index.md#2025-04-08_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nlet chart = new Chart(ctx, {\n  type: 'radar',\n  scales: {\n    myScale: {\n      axis: 'r'\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Utility Methods Available in Chart.Scale Base Class\nDESCRIPTION: Shows the utility methods provided by the Core.Scale base class that can be used in custom scale implementations. These include methods to check if a scale is horizontal and to retrieve scale tick objects.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/developers/axes.md#2025-04-08_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    // Returns true if the scale instance is horizontal\n    isHorizontal: function() {},\n\n    // Returns the scale tick objects ({label, major})\n    getTicks: function() {}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Radar Chart with Default Scale in Chart.js\nDESCRIPTION: This example shows how to create a basic radar chart in Chart.js, which uses the default 'r' scale for radial charts.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/axes/index.md#2025-04-08_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nlet chart = new Chart(ctx, {\n  type: 'radar'\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Axis IDs in a Bar Chart with Chart.js\nDESCRIPTION: This snippet illustrates how to create a bar chart with custom axis IDs 'xAxis' and 'yAxis', including a time-based x-axis.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/axes/index.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nlet chart = new Chart(ctx, {\n  type: 'bar',\n  data: {\n    datasets: [{\n      yAxisID: 'yAxis'\n    }]\n  },\n  options: {\n    scales: {\n      xAxis: {\n        // The axis for this scale is determined from the first letter of the id as `'x'`\n        // It is recommended to specify `position` and / or `axis` explicitly.\n        type: 'time',\n      }\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Extending Bubble Chart Type in JavaScript\nDESCRIPTION: This example shows how to derive a new chart type that extends from a bubble chart, including custom drawing functionality.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/developers/charts.md#2025-04-08_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport {BubbleController} from 'chart.js';\nclass Custom extends BubbleController {\n    draw() {\n        // Call bubble controller method to draw all the points\n        super.draw(arguments);\n\n        // Now we can do some custom drawing for this dataset. Here we'll draw a red box around the first point in each dataset\n        const meta = this.getMeta();\n        const pt0 = meta.data[0];\n\n        const {x, y} = pt0.getProps(['x', 'y']);\n        const {radius} = pt0.options;\n\n        const ctx = this.chart.ctx;\n        ctx.save();\n        ctx.strokeStyle = 'red';\n        ctx.lineWidth = 1;\n        ctx.strokeRect(x - radius, y - radius, 2 * radius, 2 * radius);\n        ctx.restore();\n    }\n};\nCustom.id = 'derivedBubble';\nCustom.defaults = BubbleController.defaults;\n\n// Stores the controller so that the chart initialization routine can look it up\nChart.register(Custom);\n\n// Now we can create and use our new chart type\nnew Chart(ctx, {\n    type: 'derivedBubble',\n    data: data,\n    options: options\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Scales in a Bar Chart using Chart.js\nDESCRIPTION: This example shows how to create a bar chart with a custom logarithmic scale named 'myScale' positioned on the right side of the chart.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/axes/index.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlet chart = new Chart(ctx, {\n  type: 'bar',\n  data: {\n    datasets: [{\n      data: [1, 2, 3]\n    }]\n  },\n  options: {\n    scales: {\n      myScale: {\n        type: 'logarithmic',\n        position: 'right', // `axis` is determined by the position as `'y'`\n      }\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Updating a Specific Chart.js Scale (JavaScript)\nDESCRIPTION: Function to update a specific scale in a Chart.js chart by its ID. This example changes the y-axis scale to logarithmic.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/developers/updates.md#2025-04-08_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction updateScale(chart) {\n    chart.options.scales.y = {\n        type: 'logarithmic'\n    };\n    chart.update();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Time Unit for Chart.js Time Scale\nDESCRIPTION: This snippet demonstrates how to create a Chart.js chart with a time scale that always displays units per month. It sets the 'unit' option to 'month' in the time scale configuration.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/axes/cartesian/time.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst chart = new Chart(ctx, {\n    type: 'line',\n    data: data,\n    options: {\n        scales: {\n            x: {\n                type: 'time',\n                time: {\n                    unit: 'month'\n                }\n            }\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Resetting Chart.js to Initial State\nDESCRIPTION: Resets the chart to its state before the initial animation, allowing for a new animation to be triggered.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/developers/api.md#2025-04-08_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmyLineChart.reset();\n```\n\n----------------------------------------\n\nTITLE: Styling Ticks and Tick Marks in Chart.js\nDESCRIPTION: Example of customizing ticks and tick marks in Chart.js. The tick marks (extensions of grid lines) are colored red while the tick labels are colored blue.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/axes/cartesian/index.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// <block:setup:1>\nconst labels = Utils.months({count: 7});\nconst data = {\n  labels: labels,\n  datasets: [{\n    label: 'My First dataset',\n    backgroundColor: 'rgba(54, 162, 235, 0.5)',\n    borderColor: 'rgb(54, 162, 235)',\n    borderWidth: 1,\n    data: [10, 20, 30, 40, 50, 0, 5],\n  }]\n};\n// </block:setup>\n\n// <block:config:0>\nconst config = {\n  type: 'line',\n  data,\n  options: {\n    scales: {\n      x: {\n        grid: {\n          tickColor: 'red'\n        },\n        ticks: {\n          color: 'blue',\n        }\n      }\n    }\n  }\n};\n// </block:config>\n\nmodule.exports = {\n  actions: [],\n  config: config,\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Display Format for Chart.js Time Scale\nDESCRIPTION: This example shows how to set a custom display format for the 'quarter' unit in a Chart.js time scale. It configures the quarter format to show the month and year.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/axes/cartesian/time.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst chart = new Chart(ctx, {\n    type: 'line',\n    data: data,\n    options: {\n        scales: {\n            x: {\n                type: 'time',\n                time: {\n                    displayFormats: {\n                        quarter: 'MMM YYYY'\n                    }\n                }\n            }\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Stopping Chart.js Animation\nDESCRIPTION: Stops the current animation of the chart, pausing it at the current frame.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/developers/api.md#2025-04-08_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmyLineChart.stop();\n// => returns 'this' for chainability\n```\n\n----------------------------------------\n\nTITLE: Customizing Axis Border in Chart.js\nDESCRIPTION: Example of customizing the axis border in a Chart.js line chart. The border is drawn at the edge of the axis and is colored red in this example.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/axes/cartesian/index.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// <block:setup:1>\nconst labels = Utils.months({count: 7});\nconst data = {\n  labels: labels,\n  datasets: [{\n    label: 'My First dataset',\n    backgroundColor: 'rgba(54, 162, 235, 0.5)',\n    borderColor: 'rgb(54, 162, 235)',\n    borderWidth: 1,\n    data: [10, 20, 30, 40, 50, 0, 5],\n  }]\n};\n// </block:setup>\n\n// <block:config:0>\nconst config = {\n  type: 'line',\n  data,\n  options: {\n    scales: {\n      x: {\n        border: {\n          color: 'red'\n        }\n      }\n    }\n  }\n};\n// </block:config>\n\nmodule.exports = {\n  actions: [],\n  config: config,\n};\n```\n\n----------------------------------------\n\nTITLE: Clearing Chart.js Canvas\nDESCRIPTION: Clears the chart canvas, useful for internal operations between animation frames.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/developers/api.md#2025-04-08_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nmyLineChart.clear();\n// => returns 'this' for chainability\n```\n\n----------------------------------------\n\nTITLE: Chart.js Common Tick Options Configuration Table\nDESCRIPTION: A markdown table that documents all common tick options available to all axes in Chart.js. The table lists option names, data types, scriptable status, default values, and descriptions for each configuration property under the options.scales[scaleId].ticks namespace.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/axes/_common_ticks.md#2025-04-08_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Scriptable | Default | Description\n| ---- | ---- | :-------------------------------: | ------- | -----------\n| `backdropColor` | [`Color`](../../general/colors.md) | Yes | `'rgba(255, 255, 255, 0.75)'` | Color of label backdrops.\n| `backdropPadding` | [`Padding`](../../general/padding.md) | | `2` | Padding of label backdrop.\n| `callback` | `function` | | | Returns the string representation of the tick value as it should be displayed on the chart. See [callback](/axes/labelling.md#creating-custom-tick-formats).\n| `display` | `boolean` | | `true` | If true, show tick labels.\n| `color` | [`Color`](/general/colors.md) | Yes | `Chart.defaults.color` | Color of ticks.\n| `font` | `Font` | Yes | `Chart.defaults.font` | See [Fonts](/general/fonts.md)\n| `major` | `object` | | `{}` | [Major ticks configuration](/axes/styling.md#major-tick-configuration).\n| `padding` | `number` | | `3` | Sets the offset of the tick labels from the axis\n| `showLabelBackdrop` | `boolean` | Yes | `true` for radial scale, `false` otherwise | If true, draw a background behind the tick labels.\n| `textStrokeColor` | [`Color`](/general/colors.md) | Yes | `` | The color of the stroke around the text.\n| `textStrokeWidth` | `number` | Yes | `0` | Stroke width around the text.\n| `z` | `number` | | `0` | z-index of tick layer. Useful when ticks are drawn on chart area. Values &lt;= 0 are drawn under datasets, &gt; 0 on top.\n```\n\n----------------------------------------\n\nTITLE: Counting Visible Datasets in Chart.js\nDESCRIPTION: Returns the number of datasets that are currently not hidden in the chart.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/developers/api.md#2025-04-08_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst numberOfVisibleDatasets = chart.getVisibleDatasetCount();\n```\n\n----------------------------------------\n\nTITLE: Referencing Chart.js Utility Functions\nDESCRIPTION: A reference to the utils.js file that contains helper functions used in Chart.js sample pages. These functions are subject to change without notice and should not be used in production environments.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/samples/utils.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<<< @/scripts/utils.js\n```\n\n----------------------------------------\n\nTITLE: Customizing Grid Lines in Chart.js Radar Chart\nDESCRIPTION: This code snippet shows how to modify the grid lines of a radial axis in a Chart.js radar chart. It configures the chart to display red grid lines while maintaining the same dataset structure.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/axes/radial/index.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// <block:setup:1>\nconst labels = Utils.months({count: 7});\nconst data = {\n  labels: labels,\n  datasets: [{\n    label: 'My First dataset',\n    backgroundColor: 'rgba(54, 162, 235, 0.5)',\n    borderColor: 'rgb(54, 162, 235)',\n    borderWidth: 1,\n    data: [10, 20, 30, 40, 50, 0, 5],\n  }]\n};\n// </block:setup>\n\n// <block:config:0>\nconst config = {\n  type: 'radar',\n  data,\n  options: {\n    scales: {\n      r: {\n        grid: {\n          color: 'red'\n        }\n      }\n    }\n  }\n};\n// </block:config>\n\nmodule.exports = {\n  actions: [],\n  config: config,\n};\n```\n\n----------------------------------------\n\nTITLE: Checking Data Visibility in Chart.js\nDESCRIPTION: Returns the stored visibility state of a data index for all datasets.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/developers/api.md#2025-04-08_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst visible = chart.getDataVisibility(2);\n```\n\n----------------------------------------\n\nTITLE: Exporting Chart.js Line Chart Configuration in JavaScript\nDESCRIPTION: This snippet exports the actions and config objects as a module. These exported objects can be used to create and manipulate the line chart in other parts of the application.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/samples/line/line.md#2025-04-08_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  actions: actions,\n  config: config,\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Active Elements in Chart.js\nDESCRIPTION: Sets the active (hovered) elements for the chart programmatically.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/developers/api.md#2025-04-08_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nchart.setActiveElements([\n    {datasetIndex: 0, index: 1},\n]);\n```\n\n----------------------------------------\n\nTITLE: Defining Chart.js Line Chart Actions in JavaScript\nDESCRIPTION: This snippet defines an array of actions that can be performed on the chart, including randomizing data, adding/removing datasets, and adding/removing data points. Each action is an object with a name and a handler function.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/samples/line/line.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst actions = [\n  {\n    name: 'Randomize',\n    handler(chart) {\n      chart.data.datasets.forEach(dataset => {\n        dataset.data = Utils.numbers({count: chart.data.labels.length, min: -100, max: 100});\n      });\n      chart.update();\n    }\n  },\n  {\n    name: 'Add Dataset',\n    handler(chart) {\n      const data = chart.data;\n      const dsColor = Utils.namedColor(chart.data.datasets.length);\n      const newDataset = {\n        label: 'Dataset ' + (data.datasets.length + 1),\n        backgroundColor: Utils.transparentize(dsColor, 0.5),\n        borderColor: dsColor,\n        data: Utils.numbers({count: data.labels.length, min: -100, max: 100}),\n      };\n      chart.data.datasets.push(newDataset);\n      chart.update();\n    }\n  },\n  {\n    name: 'Add Data',\n    handler(chart) {\n      const data = chart.data;\n      if (data.datasets.length > 0) {\n        data.labels = Utils.months({count: data.labels.length + 1});\n\n        for (let index = 0; index < data.datasets.length; ++index) {\n          data.datasets[index].data.push(Utils.rand(-100, 100));\n        }\n\n        chart.update();\n      }\n    }\n  },\n  {\n    name: 'Remove Dataset',\n    handler(chart) {\n      chart.data.datasets.pop();\n      chart.update();\n    }\n  },\n  {\n    name: 'Remove Data',\n    handler(chart) {\n      chart.data.labels.splice(-1, 1); // remove the label first\n\n      chart.data.datasets.forEach(dataset => {\n        dataset.data.pop();\n      });\n\n      chart.update();\n    }\n  }\n];\n```\n\n----------------------------------------\n\nTITLE: Chart.js Helper Functions Usage\nDESCRIPTION: Example of using Chart.js helper functions for handling click events and converting event coordinates to data values.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/getting-started/integration.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport Chart from 'chart.js/auto';\nimport { getRelativePosition } from 'chart.js/helpers';\n\nconst chart = new Chart(ctx, {\n  type: 'line',\n  data: data,\n  options: {\n    onClick: (e) => {\n      const canvasPosition = getRelativePosition(e, chart);\n\n      // Substitute the appropriate scale IDs\n      const dataX = chart.scales.x.getValueForPixel(canvasPosition.x);\n      const dataY = chart.scales.y.getValueForPixel(canvasPosition.y);\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Up Data for Chart.js Line Chart\nDESCRIPTION: This snippet initializes the data structure for the chart, including labels and multiple datasets with random values. It uses utility functions to generate month labels and random numbers.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/samples/area/line-stacked.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst DATA_COUNT = 7;\nconst NUMBER_CFG = {count: DATA_COUNT, min: -100, max: 100};\n\nconst labels = Utils.months({count: 7});\nconst data = {\n  labels: labels,\n  datasets: [\n    {\n      label: 'My First dataset',\n      data: Utils.numbers(NUMBER_CFG),\n      borderColor: Utils.CHART_COLORS.red,\n      backgroundColor: Utils.CHART_COLORS.red,\n      fill: true\n    },\n    {\n      label: 'My Second dataset',\n      data: Utils.numbers(NUMBER_CFG),\n      borderColor: Utils.CHART_COLORS.blue,\n      backgroundColor: Utils.CHART_COLORS.blue,\n      fill: true\n    },\n    {\n      label: 'My Third dataset',\n      data: Utils.numbers(NUMBER_CFG),\n      borderColor: Utils.CHART_COLORS.green,\n      backgroundColor: Utils.CHART_COLORS.green,\n      fill: true\n    },\n    {\n      label: 'My Fourth dataset',\n      data: Utils.numbers(NUMBER_CFG),\n      borderColor: Utils.CHART_COLORS.yellow,\n      backgroundColor: Utils.CHART_COLORS.yellow,\n      fill: true\n    }\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Angle Lines in Chart.js Radar Chart\nDESCRIPTION: This snippet demonstrates how to customize the angle lines of a radial axis in a Chart.js radar chart. It sets up a basic dataset and configures the chart to display red angle lines.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/axes/radial/index.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// <block:setup:1>\nconst labels = Utils.months({count: 7});\nconst data = {\n  labels: labels,\n  datasets: [{\n    label: 'My First dataset',\n    backgroundColor: 'rgba(54, 162, 235, 0.5)',\n    borderColor: 'rgb(54, 162, 235)',\n    borderWidth: 1,\n    data: [10, 20, 30, 40, 50, 0, 5],\n  }]\n};\n// </block:setup>\n\n// <block:config:0>\nconst config = {\n  type: 'radar',\n  data,\n  options: {\n    scales: {\n      r: {\n        angleLines: {\n          color: 'red'\n        }\n      }\n    }\n  }\n};\n// </block:config>\n\nmodule.exports = {\n  actions: [],\n  config: config,\n};\n```\n\n----------------------------------------\n\nTITLE: Chart.js CommonJS Import\nDESCRIPTION: Dynamic importing of Chart.js in CommonJS environments using async/await syntax.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/getting-started/integration.md#2025-04-08_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Chart } = await import('chart.js');\n```\n\n----------------------------------------\n\nTITLE: Configuring Actions for Chart.js Line Chart\nDESCRIPTION: This snippet defines an array of actions that can be performed on the chart, such as toggling stacked mode, randomizing data, and adding/removing datasets.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/samples/area/line-stacked.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst actions = [\n  {\n    name: 'Stacked: true',\n    handler: (chart) => {\n      chart.options.scales.y.stacked = true;\n      chart.update();\n    }\n  },\n  {\n    name: 'Stacked: false (default)',\n    handler: (chart) => {\n      chart.options.scales.y.stacked = false;\n      chart.update();\n    }\n  },\n  {\n    name: 'Stacked Single',\n    handler: (chart) => {\n      chart.options.scales.y.stacked = 'single';\n      chart.update();\n    }\n  },\n  {\n    name: 'Randomize',\n    handler(chart) {\n      chart.data.datasets.forEach(dataset => {\n        dataset.data = Utils.numbers({count: chart.data.labels.length, min: -100, max: 100});\n      });\n      chart.update();\n    }\n  },\n  {\n    name: 'Add Dataset',\n    handler(chart) {\n      const data = chart.data;\n      const dsColor = Utils.namedColor(chart.data.datasets.length);\n      const newDataset = {\n        label: 'Dataset ' + (data.datasets.length + 1),\n        backgroundColor: dsColor,\n        borderColor: dsColor,\n        fill: true,\n        data: Utils.numbers({count: data.labels.length, min: -100, max: 100}),\n      };\n      chart.data.datasets.push(newDataset);\n      chart.update();\n    }\n  },\n  {\n    name: 'Add Data',\n    handler(chart) {\n      const data = chart.data;\n      if (data.datasets.length > 0) {\n        data.labels = Utils.months({count: data.labels.length + 1});\n\n        for (let index = 0; index < data.datasets.length; ++index) {\n          data.datasets[index].data.push(Utils.rand(-100, 100));\n        }\n\n        chart.update();\n      }\n    }\n  },\n  {\n    name: 'Remove Dataset',\n    handler(chart) {\n      chart.data.datasets.pop();\n      chart.update();\n    }\n  },\n  {\n    name: 'Remove Data',\n    handler(chart) {\n      chart.data.labels.splice(-1, 1); // remove the label first\n\n      chart.data.datasets.forEach(dataset => {\n        dataset.data.pop();\n      });\n\n      chart.update();\n    }\n  }\n];\n```\n\n----------------------------------------\n\nTITLE: Initializing Package Configuration for Chart.js Project\nDESCRIPTION: Package.json configuration for a Chart.js project setup using Parcel as bundler. Includes dependencies for Chart.js v4 and Cube.js client.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/getting-started/usage.md#2025-04-08_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"chartjs-example\",\n  \"version\": \"1.0.0\",\n  \"license\": \"MIT\",\n  \"scripts\": {\n    \"dev\": \"parcel src/index.html\",\n    \"build\": \"parcel build src/index.html\"\n  },\n  \"devDependencies\": {\n    \"parcel\": \"^2.6.2\"\n  },\n  \"dependencies\": {\n    \"@cubejs-client/core\": \"^0.31.0\",\n    \"chart.js\": \"^4.0.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Line Chart with drawTime Options in Chart.js\nDESCRIPTION: This snippet sets up a Chart.js line chart with two datasets and configurable drawTime options. It includes data generation, chart configuration, and interactive actions to modify chart properties such as drawTime, data randomization, and line smoothness.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/samples/area/line-drawtime.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// <block:setup:2>\nconst inputs = {\n  min: -100,\n  max: 100,\n  count: 8,\n  decimals: 2,\n  continuity: 1\n};\n\nconst generateLabels = () => {\n  return Utils.months({count: inputs.count});\n};\n\nUtils.srand(3);\nconst generateData = () => (Utils.numbers(inputs));\n// </block:setup>\n\n// <block:data:0>\nconst data = {\n  labels: generateLabels(),\n  datasets: [\n    {\n      label: 'Dataset 1',\n      data: generateData(),\n      borderColor: Utils.CHART_COLORS.red,\n      backgroundColor: Utils.CHART_COLORS.red,\n      fill: true\n    },\n    {\n      label: 'Dataset 2',\n      data: generateData(),\n      borderColor: Utils.CHART_COLORS.blue,\n      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.blue),\n      fill: true\n    }\n  ]\n};\n// </block:data>\n\n// <block:actions:3>\nlet smooth = false;\n\nconst actions = [\n  {\n    name: 'drawTime: beforeDatasetDraw (default)',\n    handler: (chart) => {\n      chart.options.plugins.filler.drawTime = 'beforeDatasetDraw';\n      chart.update();\n    }\n  },\n  {\n    name: 'drawTime: beforeDatasetsDraw',\n    handler: (chart) => {\n      chart.options.plugins.filler.drawTime = 'beforeDatasetsDraw';\n      chart.update();\n    }\n  },\n  {\n    name: 'drawTime: beforeDraw',\n    handler: (chart) => {\n      chart.options.plugins.filler.drawTime = 'beforeDraw';\n      chart.update();\n    }\n  },\n  {\n    name: 'Randomize',\n    handler(chart) {\n      chart.data.datasets.forEach(dataset => {\n        dataset.data = generateData();\n      });\n      chart.update();\n    }\n  },\n  {\n    name: 'Smooth',\n    handler(chart) {\n      smooth = !smooth;\n      chart.options.elements.line.tension = smooth ? 0.4 : 0;\n      chart.update();\n    }\n  }\n];\n// </block:actions>\n\n// <block:config:1>\nconst config = {\n  type: 'line',\n  data: data,\n  options: {\n    plugins: {\n      filler: {\n        propagate: false,\n      },\n      title: {\n        display: true,\n        text: (ctx) => 'drawTime: ' + ctx.chart.options.plugins.filler.drawTime\n      }\n    },\n    pointBackgroundColor: '#fff',\n    radius: 10,\n    interaction: {\n      intersect: false,\n    }\n  },\n};\n// </block:config>\n\nmodule.exports = {\n  actions: actions,\n  config: config,\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Data API Client in JavaScript\nDESCRIPTION: Sets up a Cube.js API client to fetch artwork data from MoMA's collection, including functions to get acquisition statistics and artwork dimensions.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/getting-started/usage.md#2025-04-08_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { CubejsApi } from '@cubejs-client/core';\n\nconst apiUrl = 'https://heavy-lansford.gcp-us-central1.cubecloudapp.dev/cubejs-api/v1';\nconst cubeToken = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjEwMDAwMDAwMDAsImV4cCI6NTAwMDAwMDAwMH0.OHZOpOBVKr-sCwn8sbZ5UFsqI3uCs6e4omT7P6WVMFw';\n\nconst cubeApi = new CubejsApi(cubeToken, { apiUrl });\n\nexport async function getAquisitionsByYear() {\n  const acquisitionsByYearQuery = {\n    dimensions: [\n      'Artworks.yearAcquired',\n    ],\n    measures: [\n      'Artworks.count'\n    ],\n    filters: [ {\n      member: 'Artworks.yearAcquired',\n      operator: 'set'\n    } ],\n    order: {\n      'Artworks.yearAcquired': 'asc'\n    }\n  };\n\n  const resultSet = await cubeApi.load(acquisitionsByYearQuery);\n\n  return resultSet.tablePivot().map(row => ({\n    year: parseInt(row['Artworks.yearAcquired']),\n    count: parseInt(row['Artworks.count'])\n  }));\n}\n\nexport async function getDimensions() {\n  const dimensionsQuery = {\n    dimensions: [\n      'Artworks.widthCm',\n      'Artworks.heightCm'\n    ],\n    measures: [\n      'Artworks.count'\n    ],\n    filters: [\n      {\n        member: 'Artworks.classification',\n        operator: 'equals',\n        values: [ 'Painting' ]\n      },\n      {\n        member: 'Artworks.widthCm',\n        operator: 'set'\n      },\n      {\n        member: 'Artworks.widthCm',\n        operator: 'lt',\n        values: [ '500' ]\n      },\n      {\n        member: 'Artworks.heightCm',\n        operator: 'set'\n      },\n      {\n        member: 'Artworks.heightCm',\n        operator: 'lt',\n        values: [ '500' ]\n      }\n    ]\n  };\n\n  const resultSet = await cubeApi.load(dimensionsQuery);\n\n  return resultSet.tablePivot().map(row => ({\n    width: parseInt(row['Artworks.widthCm']),\n    height: parseInt(row['Artworks.heightCm']),\n    count: parseInt(row['Artworks.count'])\n  }));\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Line Chart Datasets with Chart.js\nDESCRIPTION: This snippet sets up the data and configuration for a line chart with multiple datasets. It includes data generation functions, dataset styling, and chart options such as stacked axes and interaction settings.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/samples/area/line-datasets.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// <block:setup:2>\nconst inputs = {\n  min: 20,\n  max: 80,\n  count: 8,\n  decimals: 2,\n  continuity: 1\n};\n\nconst generateLabels = () => {\n  return Utils.months({count: inputs.count});\n};\n\nconst generateData = () => (Utils.numbers(inputs));\n\nUtils.srand(42);\n// </block:setup>\n\n// <block:data:0>\nconst data = {\n  labels: generateLabels(),\n  datasets: [\n    {\n      label: 'D0',\n      data: generateData(),\n      borderColor: Utils.CHART_COLORS.red,\n      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red),\n      hidden: true\n    },\n    {\n      label: 'D1',\n      data: generateData(),\n      borderColor: Utils.CHART_COLORS.orange,\n      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.orange),\n      fill: '-1'\n    },\n    {\n      label: 'D2',\n      data: generateData(),\n      borderColor: Utils.CHART_COLORS.yellow,\n      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.yellow),\n      hidden: true,\n      fill: 1\n    },\n    {\n      label: 'D3',\n      data: generateData(),\n      borderColor: Utils.CHART_COLORS.green,\n      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.green),\n      fill: '-1'\n    },\n    {\n      label: 'D4',\n      data: generateData(),\n      borderColor: Utils.CHART_COLORS.blue,\n      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.blue),\n      fill: '-1'\n    },\n    {\n      label: 'D5',\n      data: generateData(),\n      borderColor: Utils.CHART_COLORS.grey,\n      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.grey),\n      fill: '+2'\n    },\n    {\n      label: 'D6',\n      data: generateData(),\n      borderColor: Utils.CHART_COLORS.purple,\n      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.purple),\n      fill: false\n    },\n    {\n      label: 'D7',\n      data: generateData(),\n      borderColor: Utils.CHART_COLORS.red,\n      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red),\n      fill: 8\n    },\n    {\n      label: 'D8',\n      data: generateData(),\n      borderColor: Utils.CHART_COLORS.orange,\n      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.orange),\n      fill: 'end',\n      hidden: true\n    },\n    {\n      label: 'D9',\n      data: generateData(),\n      borderColor: Utils.CHART_COLORS.yellow,\n      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.yellow),\n      fill: {above: 'blue', below: 'red', target: {value: 350}}\n    }\n  ]\n};\n// </block:data>\n\n// <block:actions:3>\nlet smooth = false;\nlet propagate = false;\n\nconst actions = [\n  {\n    name: 'Randomize',\n    handler(chart) {\n      chart.data.datasets.forEach(dataset => {\n        dataset.data = generateData();\n      });\n      chart.update();\n    }\n  },\n  {\n    name: 'Propagate',\n    handler(chart) {\n      propagate = !propagate;\n      chart.options.plugins.filler.propagate = propagate;\n      chart.update();\n    }\n  },\n  {\n    name: 'Smooth',\n    handler(chart) {\n      smooth = !smooth;\n      chart.options.elements.line.tension = smooth ? 0.4 : 0;\n      chart.update();\n    }\n  }\n];\n// </block:actions>\n\n// <block:config:1>\nconst config = {\n  type: 'line',\n  data: data,\n  options: {\n    scales: {\n      y: {\n        stacked: true\n      }\n    },\n    plugins: {\n      filler: {\n        propagate: false\n      },\n      'samples-filler-analyser': {\n        target: 'chart-analyser'\n      }\n    },\n    interaction: {\n      intersect: false,\n    },\n  },\n};\n// </block:config>\n\nmodule.exports = {\n  actions: actions,\n  config: config,\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Action Handlers for Chart.js Easing Functions\nDESCRIPTION: This snippet defines action handlers for changing the easing function of the chart animation. It includes functions to restart animations and update the chart with different easing effects.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/samples/animations/progressive-line-easing.md#2025-04-08_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction restartAnims(chart) {\n  chart.stop();\n  const meta0 = chart.getDatasetMeta(0);\n  const meta1 = chart.getDatasetMeta(1);\n  for (let i = 0; i < data.length; i++) {\n    const ctx0 = meta0.controller.getContext(i);\n    const ctx1 = meta1.controller.getContext(i);\n    ctx0.xStarted = ctx0.yStarted = false;\n    ctx1.xStarted = ctx1.yStarted = false;\n  }\n  chart.update();\n}\n\nconst actions = [\n  {\n    name: 'easeOutQuad',\n    handler(chart) {\n      easing = helpers.easingEffects.easeOutQuad;\n      restartAnims(chart);\n    }\n  },\n  {\n    name: 'easeOutCubic',\n    handler(chart) {\n      easing = helpers.easingEffects.easeOutCubic;\n      restartAnims(chart);\n    }\n  },\n  {\n    name: 'easeOutQuart',\n    handler(chart) {\n      easing = helpers.easingEffects.easeOutQuart;\n      restartAnims(chart);\n    }\n  },\n  {\n    name: 'easeOutQuint',\n    handler(chart) {\n      easing = helpers.easingEffects.easeOutQuint;\n      restartAnims(chart);\n    }\n  },\n  {\n    name: 'easeInQuad',\n    handler(chart) {\n      easing = helpers.easingEffects.easeInQuad;\n      restartAnims(chart);\n    }\n  },\n  {\n    name: 'easeInCubic',\n    handler(chart) {\n      easing = helpers.easingEffects.easeInCubic;\n      restartAnims(chart);\n    }\n  },\n  {\n    name: 'easeInQuart',\n    handler(chart) {\n      easing = helpers.easingEffects.easeInQuart;\n      restartAnims(chart);\n    }\n  },\n  {\n    name: 'easeInQuint',\n    handler(chart) {\n      easing = helpers.easingEffects.easeInQuint;\n      restartAnims(chart);\n    }\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Comparing Bundle Sizes Before and After Tree-Shaking in Chart.js\nDESCRIPTION: These bash snippets show the output of the build process, comparing bundle sizes before and after implementing tree-shaking in a Chart.js application.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/getting-started/usage.md#2025-04-08_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n% yarn build\nyarn run v1.22.17\n$ parcel build src/index.html\n✨ Built in 88ms\n\ndist/index.html              381 B   164ms\ndist/index.74a47636.js   265.48 KB   1.25s\ndist/index.ba0c2e17.js       881 B    63ms\n✨ Done in 0.51s.\n```\n\nLANGUAGE: bash\nCODE:\n```\n% yarn build\nyarn run v1.22.17\n$ parcel build src/index.html\n✨ Built in 88ms\n\ndist/index.html              381 B   176ms\ndist/index.5888047.js    208.66 KB   1.23s\ndist/index.dcb2e865.js       932 B    58ms\n✨ Done in 0.51s.\n```\n\n----------------------------------------\n\nTITLE: Exporting Chart.js Configuration Module\nDESCRIPTION: Exports the actions and configuration objects as a module for use in the Chart.js application. This module pattern allows the chart configuration to be imported and used elsewhere in the application.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/samples/animations/loop.md#2025-04-08_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  actions: actions,\n  config: config,\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Scale Options for Radar Charts\nDESCRIPTION: Example showing how to customize the radial scale options for a radar chart. This code disables angle lines and sets suggested minimum and maximum values for the scale.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/charts/radar.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\noptions = {\n    scales: {\n        r: {\n            angleLines: {\n                display: false\n            },\n            suggestedMin: 50,\n            suggestedMax: 100\n        }\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Up Chart.js Data Structure with Multiple Datasets\nDESCRIPTION: Initializes the data structure for a Chart.js line chart with two datasets, each containing random numeric values. The setup includes defining labels, data points, colors, and line tension properties for visual styling.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/samples/animations/loop.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst DATA_COUNT = 7;\nconst NUMBER_CFG = {count: DATA_COUNT, min: -100, max: 100};\n\nconst labels = Utils.months({count: DATA_COUNT});\nconst data = {\n  labels: labels,\n  datasets: [\n    {\n      label: 'Dataset 1',\n      data: Utils.numbers(NUMBER_CFG),\n      borderColor: Utils.CHART_COLORS.red,\n      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red, 0.5),\n      tension: 0.4,\n    },\n    {\n      label: 'Dataset 2',\n      data: Utils.numbers(NUMBER_CFG),\n      borderColor: Utils.CHART_COLORS.blue,\n      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.blue, 0.5),\n      tension: 0.2,\n    }\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Scale Options for Bar Charts in JavaScript\nDESCRIPTION: Example of setting scale configuration options for a bar chart, specifically showing how to enable the grid offset property for the x-axis.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/charts/bar.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\noptions = {\n    scales: {\n        x: {\n            grid: {\n              offset: true\n            }\n        }\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Triggering Tooltip Display in Chart.js\nDESCRIPTION: This function toggles the tooltip display on chart elements. It either hides the tooltip by clearing active elements, or shows the tooltip at the center of the chart area by setting specific elements (third elements of datasets 0 and 1) as active.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/samples/advanced/programmatic-events.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction triggerTooltip(chart) {\n  const tooltip = chart.tooltip;\n  if (tooltip.getActiveElements().length > 0) {\n    tooltip.setActiveElements([], {x: 0, y: 0});\n  } else {\n    const chartArea = chart.chartArea;\n    tooltip.setActiveElements([\n      {\n        datasetIndex: 0,\n        index: 2,\n      }, {\n        datasetIndex: 1,\n        index: 2,\n      }\n    ],\n    {\n      x: (chartArea.left + chartArea.right) / 2,\n      y: (chartArea.top + chartArea.bottom) / 2,\n    });\n  }\n\n  chart.update();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Chart.js Radar Chart with Skipped Points\nDESCRIPTION: Creates a radar chart with three datasets, each skipping a data point at different positions (first, middle, and last). Includes randomization functionality and responsive chart configuration with customizable colors and transparency.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/samples/other-charts/radar-skip-points.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// <block:actions:2>\nconst actions = [\n  {\n    name: 'Randomize',\n    handler(chart) {\n      chart.data.datasets.forEach((dataset, i) => {\n        const data = Utils.numbers({count: chart.data.labels.length, min: 0, max: 100});\n\n        if (i === 0) {\n          data[0] = null;\n        } else if (i === 1) {\n          data[Number.parseInt(data.length / 2, 10)] = null;\n        } else {\n          data[data.length - 1] = null;\n        }\n\n        dataset.data = data;\n      });\n      chart.update();\n    }\n  }\n];\n// </block:actions>\n\n// <block:setup:1>\nconst DATA_COUNT = 7;\nconst NUMBER_CFG = {count: DATA_COUNT, min: 0, max: 100};\n\nconst labels = Utils.months({count: 7});\nconst dataFirstSkip = Utils.numbers(NUMBER_CFG);\nconst dataMiddleSkip = Utils.numbers(NUMBER_CFG);\nconst dataLastSkip = Utils.numbers(NUMBER_CFG);\n\ndataFirstSkip[0] = null;\ndataMiddleSkip[Number.parseInt(dataMiddleSkip.length / 2, 10)] = null;\ndataLastSkip[dataLastSkip.length - 1] = null;\n\nconst data = {\n  labels: labels,\n  datasets: [\n    {\n      label: 'Skip first dataset',\n      data: dataFirstSkip,\n      borderColor: Utils.CHART_COLORS.red,\n      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red, 0.5),\n    },\n    {\n      label: 'Skip mid dataset',\n      data: dataMiddleSkip,\n      borderColor: Utils.CHART_COLORS.blue,\n      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.blue, 0.5),\n    },\n    {\n      label: 'Skip last dataset',\n      data: dataLastSkip,\n      borderColor: Utils.CHART_COLORS.green,\n      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.green, 0.5),\n    }\n  ]\n};\n// </block:setup>\n\n// <block:config:0>\nconst config = {\n  type: 'radar',\n  data: data,\n  options: {\n    responsive: true,\n    plugins: {\n      title: {\n        display: true,\n        text: 'Chart.js Radar Skip Points Chart'\n      }\n    }\n  },\n};\n// </block:config>\n\nmodule.exports = {\n  actions: actions,\n  config: config\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Chart.js Time Scale with SpanGaps\nDESCRIPTION: Sets up a line chart with two datasets using time scale and spanGaps property. Includes randomization functionality, custom styling, and time axis configuration with major tick customization. The spanGaps is set to 2 days (172800000 milliseconds) to control line breaks between data points.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/samples/scales/time-max-span.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// <block:actions:2>\nconst actions = [\n  {\n    name: 'Randomize',\n    handler(chart) {\n      chart.data.datasets.forEach(dataset => {\n        dataset.data.forEach(function(dataObj, j) {\n          const newVal = Utils.rand(0, 100);\n\n          if (typeof dataObj === 'object') {\n            dataObj.y = newVal;\n          } else {\n            dataset.data[j] = newVal;\n          }\n        });\n      });\n      chart.update();\n    }\n  },\n];\n// </block:actions>\n\n// <block:setup:1>\nconst data = {\n  datasets: [{\n    label: 'Dataset with string point data',\n    backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red, 0.5),\n    borderColor: Utils.CHART_COLORS.red,\n    fill: false,\n    data: [{\n      x: Utils.newDateString(0),\n      y: Utils.rand(0, 100)\n    }, {\n      x: Utils.newDateString(2),\n      y: Utils.rand(0, 100)\n    }, {\n      x: Utils.newDateString(4),\n      y: Utils.rand(0, 100)\n    }, {\n      x: Utils.newDateString(6),\n      y: Utils.rand(0, 100)\n    }],\n  }, {\n    label: 'Dataset with date object point data',\n    backgroundColor: Utils.transparentize(Utils.CHART_COLORS.blue, 0.5),\n    borderColor: Utils.CHART_COLORS.blue,\n    fill: false,\n    data: [{\n      x: Utils.newDate(0),\n      y: Utils.rand(0, 100)\n    }, {\n      x: Utils.newDate(2),\n      y: Utils.rand(0, 100)\n    }, {\n      x: Utils.newDate(5),\n      y: Utils.rand(0, 100)\n    }, {\n      x: Utils.newDate(6),\n      y: Utils.rand(0, 100)\n    }]\n  }]\n};\n// </block:setup>\n\n// <block:config:0>\nconst config = {\n  type: 'line',\n  data: data,\n  options: {\n    spanGaps: 1000 * 60 * 60 * 24 * 2, // 2 days\n    responsive: true,\n    interaction: {\n      mode: 'nearest',\n    },\n    plugins: {\n      title: {\n        display: true,\n        text: 'Chart.js Time - spanGaps: 172800000 (2 days in ms)'\n      },\n    },\n    scales: {\n      x: {\n        type: 'time',\n        display: true,\n        title: {\n          display: true,\n          text: 'Date'\n        },\n        ticks: {\n          autoSkip: false,\n          maxRotation: 0,\n          major: {\n            enabled: true\n          },\n          font: function(context) {\n            if (context.tick && context.tick.major) {\n              return {\n                weight: 'bold',\n              };\n            }\n          }\n        }\n      },\n      y: {\n        display: true,\n        title: {\n          display: true,\n          text: 'value'\n        }\n      }\n    }\n  },\n};\n// </block:config>\n\nmodule.exports = {\n  actions: [],\n  config: config,\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Up Chart.js Configuration with Decimation\nDESCRIPTION: This code configures a Chart.js line chart with data decimation options. It includes settings for disabling animations and data parsing for performance, as well as configuring interaction modes and time-based x-axis.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/samples/advanced/data-decimation.md#2025-04-08_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n  type: 'line',\n  data: data,\n  options: {\n    animation: false,\n    parsing: false,\n\n    interaction: {\n      mode: 'nearest',\n      axis: 'x',\n      intersect: false\n    },\n    plugins: {\n      decimation: decimation,\n    },\n    scales: {\n      x: {\n        type: 'time',\n        ticks: {\n          source: 'auto',\n          maxRotation: 0,\n          autoSkip: true,\n        }\n      }\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Generating Large Dataset for Chart.js Decimation Example\nDESCRIPTION: This code generates a large dataset of 100,000 points for demonstrating data decimation in Chart.js. It creates time-based data points with random y-values, including some rare high-value points.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/samples/advanced/data-decimation.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst NUM_POINTS = 100000;\nUtils.srand(10);\n\nconst start = Utils.parseISODate('2021-04-01T00:00:00Z').toMillis();\nconst pointData = [];\n\nfor (let i = 0; i < NUM_POINTS; ++i) {\n  const max = Math.random() < 0.001 ? 100 : 20;\n  pointData.push({x: start + (i * 30000), y: Utils.rand(0, max)});\n}\n\nconst data = {\n  datasets: [{\n    borderColor: Utils.CHART_COLORS.red,\n    borderWidth: 1,\n    data: pointData,\n    label: 'Large Dataset',\n    radius: 0,\n  }]\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Data Decimation Actions in Chart.js\nDESCRIPTION: This snippet defines action handlers for toggling different data decimation methods in a Chart.js chart. It includes options for no decimation, min-max decimation, and LTTB decimation with 50 and 500 samples.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/samples/advanced/data-decimation.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst actions = [\n  {\n    name: 'No decimation (default)',\n    handler(chart) {\n      chart.options.plugins.decimation.enabled = false;\n      chart.update();\n    }\n  },\n  {\n    name: 'min-max decimation',\n    handler(chart) {\n      chart.options.plugins.decimation.algorithm = 'min-max';\n      chart.options.plugins.decimation.enabled = true;\n      chart.update();\n    },\n  },\n  {\n    name: 'LTTB decimation (50 samples)',\n    handler(chart) {\n      chart.options.plugins.decimation.algorithm = 'lttb';\n      chart.options.plugins.decimation.enabled = true;\n      chart.options.plugins.decimation.samples = 50;\n      chart.update();\n    }\n  },\n  {\n    name: 'LTTB decimation (500 samples)',\n    handler(chart) {\n      chart.options.plugins.decimation.algorithm = 'lttb';\n      chart.options.plugins.decimation.enabled = true;\n      chart.options.plugins.decimation.samples = 500;\n      chart.update();\n    }\n  }\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring Chart.js Axis Titles in JavaScript\nDESCRIPTION: A complete Chart.js implementation that creates a line chart with two datasets and demonstrates custom axis title configuration. The example shows how to set title text, color, font properties (family, size, weight, style, lineHeight), and padding for both x and y axes.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/samples/scale-options/titles.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// <block:setup:1>\nconst DATA_COUNT = 7;\nconst NUMBER_CFG = {count: DATA_COUNT, min: 0, max: 100};\nconst data = {\n  labels: Utils.months({count: DATA_COUNT}),\n  datasets: [\n    {\n      label: 'Dataset 1',\n      data: Utils.numbers(NUMBER_CFG),\n      fill: false,\n      borderColor: Utils.CHART_COLORS.red,\n      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red, 0.5),\n    },\n    {\n      label: 'Dataset 2',\n      data: Utils.numbers(NUMBER_CFG),\n      fill: false,\n      borderColor: Utils.CHART_COLORS.blue,\n      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.blue, 0.5),\n    }\n  ]\n};\n// </block:setup>\n\n// <block:config:0>\nconst config = {\n  type: 'line',\n  data: data,\n  options: {\n    responsive: true,\n    scales: {\n      x: {\n        display: true,\n        title: {\n          display: true,\n          text: 'Month',\n          color: '#911',\n          font: {\n            family: 'Comic Sans MS',\n            size: 20,\n            weight: 'bold',\n            lineHeight: 1.2,\n          },\n          padding: {top: 20, left: 0, right: 0, bottom: 0}\n        }\n      },\n      y: {\n        display: true,\n        title: {\n          display: true,\n          text: 'Value',\n          color: '#191',\n          font: {\n            family: 'Times',\n            size: 20,\n            style: 'normal',\n            lineHeight: 1.2\n          },\n          padding: {top: 30, left: 0, right: 0, bottom: 0}\n        }\n      }\n    }\n  },\n};\n// </block:config>\n\nmodule.exports = {\n  actions: [],\n  config: config,\n};\n```\n\n----------------------------------------\n\nTITLE: Replacement for getDatasetAtEvent in Chart.js v3\nDESCRIPTION: Shows how to replace the removed getDatasetAtEvent API with the new getElementsAtEventForMode method, using the 'dataset' mode with intersection enabled.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/migration/v3-migration.md#2025-04-08_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nchart.getElementsAtEventForMode(e, 'dataset', { intersect: true }, false)\n```\n\n----------------------------------------\n\nTITLE: Setting up Chart.js Data and Configuration\nDESCRIPTION: This snippet sets up the data and configuration for a Chart.js line chart. It defines two datasets with random data points and configures chart options including interaction mode, axis, and intersect behavior.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/samples/tooltip/interactions.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst DATA_COUNT = 7;\nconst NUMBER_CFG = {count: DATA_COUNT, min: -100, max: 100};\nconst data = {\n  labels: Utils.months({count: DATA_COUNT}),\n  datasets: [\n    {\n      label: 'Dataset 1',\n      data: Utils.numbers(NUMBER_CFG),\n      fill: false,\n      borderColor: Utils.CHART_COLORS.red,\n      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red, 0.5),\n    },\n    {\n      label: 'Dataset 2',\n      data: Utils.numbers(NUMBER_CFG),\n      fill: false,\n      borderColor: Utils.CHART_COLORS.blue,\n      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.blue, 0.5),\n    },\n  ]\n};\n\nconst config = {\n  type: 'line',\n  data: data,\n  options: {\n    interaction: {\n      intersect: false,\n      mode: 'index',\n    },\n    plugins: {\n      title: {\n        display: true,\n        text: (ctx) => {\n          const {axis = 'xy', intersect, mode} = ctx.chart.options.interaction;\n          return 'Mode: ' + mode + ', axis: ' + axis + ', intersect: ' + intersect;\n        }\n      },\n    }\n  }\n};\n\nmodule.exports = {\n  actions: actions,\n  config: config,\n};\n```\n\n----------------------------------------\n\nTITLE: Referencing Chart.js Components\nDESCRIPTION: A reference to the components.js file that creates a components object used in Chart.js samples. These components are normally accessible via the Chart object when Chart.js is included as a browser script.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/samples/utils.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<<< @/scripts/components.js\n```\n\n----------------------------------------\n\nTITLE: Registering Components in Chart.js 3.x\nDESCRIPTION: Demonstrates how to import and register specific Chart.js components for tree-shaking benefits. This example shows registering a line chart with its required controllers, elements, scales, and plugins.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/migration/v3-migration.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Chart, LineController, LineElement, PointElement, LinearScale, Title } from `chart.js`\n\nChart.register(LineController, LineElement, PointElement, LinearScale, Title);\n\nconst chart = new Chart(ctx, {\n    type: 'line',\n    // data: ...\n    options: {\n        plugins: {\n            title: {\n                display: true,\n                text: 'Chart Title'\n            }\n        },\n        scales: {\n            x: {\n                type: 'linear'\n            },\n            y: {\n                type: 'linear'\n            }\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Replacement for getElementsAtXAxis in Chart.js v3\nDESCRIPTION: Shows how to replace the removed getElementsAtXAxis API with the new getElementsAtEventForMode method, using the 'index' mode without intersection.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/migration/v3-migration.md#2025-04-08_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nchart.getElementsAtEventForMode(e, 'index', { intersect: false }, false)\n```\n\n----------------------------------------\n\nTITLE: Setting up Canvas Element for Chart.js\nDESCRIPTION: This HTML snippet shows how to create a canvas element for Chart.js. It's recommended to wrap the canvas in a container div for better responsiveness.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/getting-started/index.md#2025-04-08_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div>\n  <canvas id=\"myChart\"></canvas>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Updated Plugin Hook Signature in Chart.js TypeScript Interface\nDESCRIPTION: The unified plugin hook signature now accepts three parameters: chart instance, args object, and options. This includes modifications to event handling where events are now wrapped in an args object and changes to the update lifecycle hooks.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/migration/v3-migration.md#2025-04-08_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ninterface IPlugin {\n  beforeInit(chart: Chart, args: object, options: object): void;\n  afterInit(chart: Chart, args: object, options: object): void;\n  beforeUpdate(chart: Chart, args: object, options: object): void;\n  afterUpdate(chart: Chart, args: object, options: object): void;\n  beforeDatasetsUpdate(chart: Chart, args: object, options: object): void;\n  afterDatasetsUpdate(chart: Chart, args: object, options: object): void;\n  beforeEvent(chart: Chart, args: {event: {native: Event}}, options: object): void;\n  afterEvent(chart: Chart, args: {event: {native: Event}, changed: boolean}, options: object): void;\n  install(chart: Chart, args: object, options: object): void;\n  start(chart: Chart, args: object, options: object): void;\n  stop(chart: Chart, args: object, options: object): void;\n  uninstall(chart: Chart, args: object, options: object): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling spanGaps in Chart.js Line Charts\nDESCRIPTION: This snippet demonstrates how to enable spanGaps for improved performance in Chart.js line charts. This option disables line segmentation, which can be an unnecessary step for charts with many data points.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/general/performance.md#2025-04-08_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nnew Chart(ctx, {\n    type: 'line',\n    data: {\n        datasets: [{\n            spanGaps: true // enable for a single dataset\n        }]\n    },\n    options: {\n        spanGaps: true // enable for all datasets\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Derived Bubble Chart in Chart.js\nDESCRIPTION: This snippet sets up data and configuration for a derived bubble chart using Chart.js. It defines a dataset with custom styling and uses a 'derivedBubble' chart type. The chart is made responsive and includes a title plugin.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/samples/advanced/derived-chart-type.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// <block:setup:1>\nconst DATA_COUNT = 7;\nconst NUMBER_CFG = {count: DATA_COUNT, min: -100, max: 100, rmin: 1, rmax: 20};\nconst data = {\n  datasets: [\n    {\n      label: 'My First dataset',\n      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.blue, 0.5),\n      borderColor: Utils.CHART_COLORS.blue,\n      borderWidth: 1,\n      boxStrokeStyle: 'red',\n      data: Utils.bubbles(NUMBER_CFG)\n    }\n  ],\n};\n// </block:setup>\n\n// <block:config:0>\nconst config = {\n  type: 'derivedBubble',\n  data: data,\n  options: {\n    responsive: true,\n    plugins: {\n      title: {\n        display: true,\n        text: 'Derived Chart Type'\n      },\n    }\n  }\n};\n\n// </block:config>\n\nmodule.exports = {\n  actions: [],\n  config: config,\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring ESM Support in package.json for Chart.js 4.x\nDESCRIPTION: Chart.js 4.x becomes an ESM-only package, requiring projects to configure themselves as ES modules. This snippet shows the required configuration in package.json to support Chart.js as an ESM dependency.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/migration/v4-migration.md#2025-04-08_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"module\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Indexable Color Options in Chart.js\nDESCRIPTION: Shows how to define colors using an indexable array where each element corresponds to a data point. Colors are applied sequentially and loop if there are fewer colors than data points.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/general/options.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncolor: [\n    'red',    // color for data at index 0\n    'blue',   // color for data at index 1\n    'green',  // color for data at index 2\n    'black',  // color for data at index 3\n    //...\n]\n```\n\n----------------------------------------\n\nTITLE: Example of Canvas with Unhelpful Fallback Content in HTML\nDESCRIPTION: This example demonstrates a canvas with unhelpful fallback content that doesn't describe the actual chart data. The fallback message only indicates browser incompatibility rather than providing useful alternative information about the chart content.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/general/accessibility.md#2025-04-08_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<canvas id=\"badCanvas2\" width=\"400\" height=\"100\">Your browser does not support the canvas element.</canvas>\n```\n\n----------------------------------------\n\nTITLE: Chart.js RequireJS Integration\nDESCRIPTION: Loading Chart.js using RequireJS AMD module system, including example with date adapter dependencies.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/getting-started/integration.md#2025-04-08_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(['path/to/chartjs/dist/chart.umd.js'], function(Chart){\n    const myChart = new Chart(ctx, {...});\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(['chartjs'], function(Chart) {\n    require(['moment'], function() {\n        require(['chartjs-adapter-moment'], function() {\n            new Chart(ctx, {...});\n        });\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Rollup for Chart.js Extension Publishing\nDESCRIPTION: Rollup configuration example showing how to map Chart.js ESM helpers to their UMD equivalents using output.globals. This ensures compatibility between ESM and UMD bundle formats.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/developers/publishing.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  // ...\n  output: {\n    globals: {\n      'chart.js': 'Chart',\n      'chart.js/helpers': 'Chart.helpers'\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Y-Axis Index Interaction Mode in Chart.js\nDESCRIPTION: Configuration example for the 'index' interaction mode with y-axis direction, useful for horizontal bar charts where searching is done along the y-axis.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/configuration/interactions.md#2025-04-08_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst chart = new Chart(ctx, {\n    type: 'bar',\n    data: data,\n    options: {\n        interaction: {\n            mode: 'index',\n            axis: 'y'\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Listing Chart.js Release Steps in Markdown\nDESCRIPTION: This snippet outlines the steps for releasing a new version of Chart.js, including updating the release version on GitHub, publishing the release, and following the build process on GitHub Actions.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/MAINTAINING.md#2025-04-08_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. Update the release version on [GitHub](https://github.com/chartjs/Chart.js/releases/new) for the release drafted by the `release-drafter` tool\n2. Publish the release\n3. follow the build process on [GitHub Actions](https://github.com/chartjs/Chart.js/actions?query=workflow%3A%22Node.js+Package%22)\n```\n\n----------------------------------------\n\nTITLE: Configuring Chart Options\nDESCRIPTION: Defines chart configuration including type, data, and styling options with dynamic radial gradient backgrounds for arc elements.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/samples/advanced/radial-gradient.md#2025-04-08_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n  type: 'polarArea',\n  data: data,\n  options: {\n    plugins: {\n      legend: false,\n      tooltip: false,\n    },\n    elements: {\n      arc: {\n        backgroundColor: function(context) {\n          let c = colors[context.dataIndex];\n          if (!c) {\n            return;\n          }\n          if (context.active) {\n            c = helpers.getHoverColor(c);\n          }\n          const mid = helpers.color(c).desaturate(0.2).darken(0.2).rgbString();\n          const start = helpers.color(c).lighten(0.2).rotate(270).rgbString();\n          const end = helpers.color(c).lighten(0.1).rgbString();\n          return createRadialGradient3(context, start, mid, end);\n        },\n      }\n    }\n  }\n};\n\nmodule.exports = {\n  actions,\n  config,\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Chart.js Setup and Utils\nDESCRIPTION: Sets up initial variables and utility functions including color definitions, cache management, and randomization actions for the chart.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/samples/advanced/radial-gradient.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst DATA_COUNT = 5;\nUtils.srand(110);\n\nconst chartColors = Utils.CHART_COLORS;\nconst colors = [chartColors.red, chartColors.orange, chartColors.yellow, chartColors.green, chartColors.blue];\n\nconst cache = new Map();\nlet width = null;\nlet height = null;\n\nconst actions = [\n  {\n    name: 'Randomize',\n    handler(chart) {\n      chart.data.datasets.forEach(dataset => {\n        dataset.data = generateData();\n      });\n      chart.update();\n    }\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring a Bar Chart in Chart.js\nDESCRIPTION: This snippet defines the configuration for a bar chart using Chart.js. It specifies the chart type as 'bar' and connects to the previously defined data structure, with options left empty for default behavior.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/samples/advanced/programmatic-events.md#2025-04-08_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n  type: 'bar',\n  data: data,\n  options: {\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Positioning Axis with Data Value in Chart.js\nDESCRIPTION: Example of positioning an axis with respect to a data value in Chart.js. This configuration positions the axis at a value of -20 on the axis with ID \"x\".\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/axes/cartesian/index.md#2025-04-08_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    x: -20\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Axis Title in Chart.js\nDESCRIPTION: Example of adding and customizing a title for an axis in Chart.js. The title component is used to label the data, and is colored red in this example with the text \"Month\".\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/axes/cartesian/index.md#2025-04-08_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// <block:setup:1>\nconst labels = Utils.months({count: 7});\nconst data = {\n  labels: labels,\n  datasets: [{\n    label: 'My First dataset',\n    backgroundColor: 'rgba(54, 162, 235, 0.5)',\n    borderColor: 'rgb(54, 162, 235)',\n    borderWidth: 1,\n    data: [10, 20, 30, 40, 50, 0, 5],\n  }]\n};\n// </block:setup>\n\n// <block:config:0>\nconst config = {\n  type: 'line',\n  data,\n  options: {\n    scales: {\n      x: {\n        title: {\n          color: 'red',\n          display: true,\n          text: 'Month'\n        }\n      }\n    }\n  }\n};\n// </block:config>\n\nmodule.exports = {\n  actions: [],\n  config: config,\n};\n```\n\n----------------------------------------\n\nTITLE: Using Default Formatter with Custom Currency Format in Chart.js\nDESCRIPTION: Example demonstrating how to combine the default numeric formatter with custom formatting to add a currency symbol while maintaining standard number formatting.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/axes/labelling.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// call the default formatter, forwarding `this`\nreturn '$' + Chart.Ticks.formatters.numeric.apply(this, [value, index, ticks]);\n```\n\n----------------------------------------\n\nTITLE: Chart.js Development Commands\nDESCRIPTION: Available commands for building, testing, and linting Chart.js, including build distribution files, watch for changes, run tests, and perform code linting.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/developers/contributing.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n> pnpm run build             // build dist files in ./dist\n> pnpm run autobuild         // build and watch for source changes\n> pnpm run dev               // run tests and watch for source and test changes\n> pnpm run lint              // perform code linting (ESLint, tsc)\n> pnpm test                  // perform code linting and run unit tests with coverage\n```\n\n----------------------------------------\n\nTITLE: Configuring Chart.js Polar Area Chart with Centered Point Labels\nDESCRIPTION: This snippet sets up a Chart.js polar area chart with centered point labels. It includes data setup, chart configuration, and interactive actions. The chart uses a custom color scheme and enables centered point labels on the radial axis.\nSOURCE: https://github.com/chartjs/Chart.js/blob/master/docs/samples/other-charts/polar-area-center-labels.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// <block:actions:2>\nconst actions = [\n  {\n    name: 'Randomize',\n    handler(chart) {\n      chart.data.datasets.forEach(dataset => {\n        dataset.data = Utils.numbers({count: chart.data.labels.length, min: 0, max: 100});\n      });\n      chart.update();\n    }\n  },\n  {\n    name: 'Add Data',\n    handler(chart) {\n      const data = chart.data;\n      if (data.datasets.length > 0) {\n        data.labels.push('data #' + (data.labels.length + 1));\n\n        for (let index = 0; index < data.datasets.length; ++index) {\n          data.datasets[index].data.push(Utils.rand(0, 100));\n        }\n\n        chart.update();\n      }\n    }\n  },\n  {\n    name: 'Remove Data',\n    handler(chart) {\n      chart.data.labels.splice(-1, 1); // remove the label first\n\n      chart.data.datasets.forEach(dataset => {\n        dataset.data.pop();\n      });\n\n      chart.update();\n    }\n  }\n];\n// </block:actions>\n\n// <block:setup:1>\nconst DATA_COUNT = 5;\nconst NUMBER_CFG = {count: DATA_COUNT, min: 0, max: 100};\n\nconst labels = ['Red', 'Orange', 'Yellow', 'Green', 'Blue'];\nconst data = {\n  labels: labels,\n  datasets: [\n    {\n      label: 'Dataset 1',\n      data: Utils.numbers(NUMBER_CFG),\n      backgroundColor: [\n        Utils.transparentize(Utils.CHART_COLORS.red, 0.5),\n        Utils.transparentize(Utils.CHART_COLORS.orange, 0.5),\n        Utils.transparentize(Utils.CHART_COLORS.yellow, 0.5),\n        Utils.transparentize(Utils.CHART_COLORS.green, 0.5),\n        Utils.transparentize(Utils.CHART_COLORS.blue, 0.5),\n      ]\n    }\n  ]\n};\n// </block:setup>\n\n// <block:config:0>\nconst config = {\n  type: 'polarArea',\n  data: data,\n  options: {\n    responsive: true,\n    scales: {\n      r: {\n        pointLabels: {\n          display: true,\n          centerPointLabels: true,\n          font: {\n            size: 18\n          }\n        }\n      }\n    },\n    plugins: {\n      legend: {\n        position: 'top',\n      },\n      title: {\n        display: true,\n        text: 'Chart.js Polar Area Chart With Centered Point Labels'\n      }\n    }\n  },\n};\n// </block:config>\n\nmodule.exports = {\n  actions: actions,\n  config: config,\n};\n```"
  }
]