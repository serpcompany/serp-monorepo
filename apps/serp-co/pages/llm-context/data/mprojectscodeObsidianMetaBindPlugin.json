[
  {
    "owner": "mprojectscode",
    "repo": "obsidian-meta-bind-plugin",
    "content": "TITLE: Meta Bind Button to Increment Metadata\nDESCRIPTION: This snippet defines a Meta Bind button that increments a metadata field (count) by 1, ensuring it doesn't exceed 10. It uses the 'updateMetadata' action with 'evaluate: true' to execute the JavaScript expression.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/Buttons/Button Example.md#_snippet_16\n\nLANGUAGE: YAML\nCODE:\n```\nlabel: \"+1\"\nhidden: true\nid: \"count-increment\"\nstyle: default\nactions:\n  - type: updateMetadata\n    bindTarget: count\n    evaluate: true\n    value: Math.min(10, x + 1)\n```\n\n----------------------------------------\n\nTITLE: Creating Table with Obsidian Meta Bind API (JS)\nDESCRIPTION: This code snippet uses the `obsidian-meta-bind-plugin` API to create a dynamic table. It defines `tableOptions` which specify the data source (frontmatter 'activities'), table headers, and editable columns with specific input types (time and inline select) bound to properties within each 'activity' item.  It then creates a `mountable` object, wraps it in an MDRC (Meta Data Render Component) and mounts it to the `container`.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/Advanced Examples/Activity Tracker.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst mb = engine.getPlugin('obsidian-meta-bind-plugin').api;\n\nconst tableOptions = {\n\tbindTarget: mb.createBindTarget('frontmatter', context.file.path, ['activities']),\n\ttableHead: ['From', 'To', 'Activity', 'Status'],\n\tcolumns: [\n\t\t'INPUT[time:scope^from]',\n\t\t'INPUT[time:scope^to]',\n\t\t'INPUT[inlineSelect(option(youtube), option(sudying), option(linch)):scope^activity]',\n\t\t'INPUT[inlineSelect(option(-, unproductive), option(0, normal), option(+, productive)):scope^status]',\n\t],\n};\n\nconst mountable = mb.createTableMountable(context.file.path, tableOptions);\n\nmb.wrapInMDRC(mountable, container, component);\n```\n\n----------------------------------------\n\nTITLE: Toggle Field Rendering with Obsidian Meta Bind (JavaScript)\nDESCRIPTION: This snippet creates a toggle field that dynamically switches between a text input and a read-only view based on the 'locked' metadata value. It uses the Obsidian Meta Bind plugin API to parse a bind target, create inline fields, and manage the component's lifecycle. The `mb.wrapInMDRC` function renders the field within the specified container. Reactive rendering is managed via `engine.reactive` and `mb.subscribeToMetadata`.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/Advanced Examples/Using JS Engine for Complex things.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst mb = engine.getPlugin('obsidian-meta-bind-plugin').api;\n// a component for lifecycle management of the fields created in our render function\nconst comp = new obsidian.Component(component);\n\n// create a bind target to the property that we care about\nconst bindTarget = mb.parseBindTarget('locked', context.file.path);\n\n// the render function, it takes the locked value as the argument\nfunction render(value) {\n\t// first we unload the component to unload the content from the previous rerender\n\tcomp.unload();\n\t// then we load the component again for this rerender.\n\tcomp.load();\n\t// then we empty the element we render to to remove content created in the previous rerender\n\tcontainer.empty();\n\n\t// next we create the field based on the locked value\n\tlet field;\n\tif (value) {\n\t\tfield = mb.createInlineFieldFromString(\"VIEW[{text}][text]\", context.file.path, undefined);\n\t} else {\n\t\tfield = mb.createInlineFieldFromString(\"INPUT[text:text]\", context.file.path, undefined);\n\t}\n\n\t// and finally we render that field\n\tmb.wrapInMDRC(field, container, comp);\n}\n\n// we create a reactive component from the render function and the initial value will be the value of the bind target\nconst reactive = engine.reactive(render, mb.getMetadata(bindTarget));\n\n// then we subscribe to the metadata that the bind target points to and rerender the reactive component everythime the bind target value changes\nconst subscription = mb.subscribeToMetadata(\n\tbindTarget,\n\tcomponent,\n\t(value) => reactive.refresh(value)\n);\n\nreturn reactive;\n```\n\n----------------------------------------\n\nTITLE: Meta Bind Button Configuration - Replace Self with Templater Template (Wiki Link)\nDESCRIPTION: This configuration creates a Meta Bind Button that, when clicked, replaces itself with a wikilink to a Templater template.  The `replacement` field specifies the wikilink to the template. `templater: true` ensures the linked template is rendered by the Templater plugin.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/Buttons/Templater Buttons.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nlabel: Insert Text\nhidden: false\nclass: \"\"\ntooltip: \"\"\nid: \"\"\nstyle: default\naction:\n  type: \"replaceSelf\"\n  replacement: \"[[Templater Template]]\"\n  templater: true\n```\n\n----------------------------------------\n\nTITLE: Slider Input with Labels and Range\nDESCRIPTION: This example demonstrates a slider input field using the `INPUT` tag in Meta Bind. It sets the minimum and maximum values to 1 and 10, respectively, and adds labels. The slider is bound to the `slider1` frontmatter property.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/Examples.md#_snippet_0\n\nLANGUAGE: meta-bind\nCODE:\n```\nINPUT[slider(addLabels, minValue(1), maxValue(10)):slider1]\n```\n\n----------------------------------------\n\nTITLE: Reactive Metadata Retrieval for Year Fields (JavaScript)\nDESCRIPTION: This snippet uses Obsidian Meta Bind plugin API to reactively retrieve the 'from_year' and 'to_year' metadata fields.  It parses bind targets for both fields using `mb.parseBindTarget`.  The `mb.reactiveMetadata` function is used to create a reactive component that returns an array containing the values of the two fields, updating whenever either field changes.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/Advanced Examples/Using JS Engine for Complex things.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Grab metabind API and extract metadata fields\nconst mb     = engine.getPlugin('obsidian-meta-bind-plugin').api;\nconst mbFrom = mb.parseBindTarget('from_year', context.file.path);\nconst mbTo   = mb.parseBindTarget('to_year', context.file.path);\n\nreturn mb.reactiveMetadata([mbFrom, mbTo], component, (from, to) => {\n\treturn [from, to]\n})\n```\n\n----------------------------------------\n\nTITLE: Inline Select Input with Options and Escape Characters\nDESCRIPTION: This example demonstrates an inline select input with two options. It uses the `inlineSelect` input type and defines options with values and display text. The second option includes an escaped backslash. It binds to the `inlineSelect` frontmatter property.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/Examples.md#_snippet_2\n\nLANGUAGE: meta-bind\nCODE:\n```\nINPUT[inlineSelect(option(0, 'don't do this'), option(1, 'do this \\\\'), showcase):inlineSelect]\n```\n\n----------------------------------------\n\nTITLE: Create Enemy Table Mountable with Meta Bind API (js-engine)\nDESCRIPTION: This code snippet uses the Obsidian Meta Bind plugin API to create a table that dynamically displays and edits enemy data from the frontmatter of a file. It defines table options, including column definitions that use input fields for text, numbers, and select dropdowns. The created table mountable is then wrapped in a Markdown Render Child (MDRC) and added to the container and component.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/Advanced Examples/PF2e Encounter Calculator.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst mb = engine.getPlugin('obsidian-meta-bind-plugin').api;\n\nconst tableOptions = {\n\tbindTarget: mb.createBindTarget('frontmatter', context.file.path, ['enemy']),\n\ttableHead: ['Name', 'Level', 'Variant', 'Count'],\n\tcolumns: [\n\t\t'INPUT[text:scope^name]',\n\t\t'INPUT[number(class(meta-bind-small-width)):scope^level]',\n\t\t'INPUT[inlineSelect(option(-1, weak), option(0, normal), option(1, elite)):scope^variant]',\n\t\t'INPUT[number(class(meta-bind-small-width)):scope^count]',\n\t],\n};\n\nconst mountable = mb.createTableMountable(context.file.path, tableOptions);\n\nmb.wrapInMDRC(mountable, container, component);\n```\n\n----------------------------------------\n\nTITLE: Binding Input to Per-File Memory Cache\nDESCRIPTION: This snippet illustrates binding an input field to a per-file in-memory cache using the Obsidian Meta Bind plugin. The `INPUT` component is used with the `text` type and a key of `memory^test` within the per-file memory scope.  The data will be stored and available only within the current file.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/Alternative Metadata Storage/Other Note.md#_snippet_2\n\nLANGUAGE: Text\nCODE:\n```\n`INPUT[text:memory^test]`\n```\n\n----------------------------------------\n\nTITLE: Defining an inline list suggester with allowOther\nDESCRIPTION: This snippet defines an inline list suggester with the `allowOther` option. The user can enter values not present in suggestions. It retrieves options using `optionQuery(#example-note)` and defines static `option(something, other)`.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/Input Fields/List.md#_snippet_6\n\nLANGUAGE: meta-bind\nCODE:\n```\nINPUT[inlineListSuggester(optionQuery(#example-note), option(something, other), allowOther):list5]\n```\n\n----------------------------------------\n\nTITLE: Calculate and Save Result using Meta-Bind\nDESCRIPTION: This snippet demonstrates how to bind values from the frontmatter, perform a calculation, and save the result back to the frontmatter. It uses the `engine.markdown.create` function to create a markdown string containing the calculated value.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/View Fields/JS View Field.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n{number1} as n1\n{number2} as n2\nsave to {result}\n---\nreturn engine.markdown.create(`**${context.bound.n1 * context.bound.n2}** km`);\n```\n\n----------------------------------------\n\nTITLE: Meta Bind Button to Open Internal Link\nDESCRIPTION: This snippet defines a Meta Bind button that opens an internal link within Obsidian when clicked. The 'action' property is of type 'open' and specifies the link to open using Obsidian's internal link syntax.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/Buttons/Button Example.md#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\nstyle: primary\nid: open-button\nhidden: true\nlabel: Open File\naction:\n  type: open\n  link: \"[[View Fields/Other Note|Other Note]]\"\n```\n\n----------------------------------------\n\nTITLE: Meta Bind Button to Switch to Dark Mode\nDESCRIPTION: This snippet defines a Meta Bind button that switches the Obsidian theme to dark mode when clicked. It uses the 'command' action type to execute the 'theme:use-dark' command.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/Buttons/Button Example.md#_snippet_7\n\nLANGUAGE: YAML\nCODE:\n```\nlabel: Switch to Dark Mode\nhidden: false\nid: \"\"\nstyle: primary\nactions:\n  - type: command\n    command: theme:use-dark\n```\n\n----------------------------------------\n\nTITLE: Calculating and Displaying Skill Modifier\nDESCRIPTION: Calculates the skill modifier by multiplying the proficiency level with the proficiency modifier (`PROF_mod`) and adding the corresponding ability modifier stored in memory (e.g., `memory^DEX_mod` for Acrobatics). The result is then displayed. Uses the floor function to round the result to the nearest integer.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/Advanced Examples/DnD 5e Ability Scores and Modifiers.md#_snippet_3\n\nLANGUAGE: meta-bind\nCODE:\n```\nVIEW[floor({proficiency.acrobatics}*{PROF_mod})+{memory^DEX_mod}]\n```\n\nLANGUAGE: meta-bind\nCODE:\n```\nVIEW[floor({proficiency.arcana}*{PROF_mod})+{memory^INT_mod}]\n```\n\nLANGUAGE: meta-bind\nCODE:\n```\nVIEW[floor({proficiency.deception}*{PROF_mod})+{memory^CHR_mod}]\n```\n\nLANGUAGE: meta-bind\nCODE:\n```\nVIEW[floor({proficiency.perception}*{PROF_mod})+{memory^WIS_mod}]\n```\n\n----------------------------------------\n\nTITLE: MultiSelect Input Binding with Mixed Types\nDESCRIPTION: Defines a multiSelect input that utilizes numeric, boolean and null options. It further demonstrates the plugin's capability to handle different data types in a multiSelect input.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/Input Fields/Select and Multi Select.md#_snippet_4\n\nLANGUAGE: meta-bind\nCODE:\n```\nINPUT[multiSelect(\noption(1, option 1), \noption(false, option 2), \noption(null, option 3), \nshowcase\n):multiSelect3]\n```\n\n----------------------------------------\n\nTITLE: Meta-Bind Suggester with Static Options\nDESCRIPTION: This snippet demonstrates a simple suggester with predefined options. The `suggester` function takes a list of `option()` calls to define the available choices. The `showcase` parameter displays the suggester in the user interface. The result will be assigned to the `suggest` variable.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/Input Fields/Suggester.md#_snippet_0\n\nLANGUAGE: meta-bind\nCODE:\n```\nINPUT[suggester(\noption(option 1),\noption(option 2),\noption(option 3),\nshowcase\n):suggest]\n```\n\n----------------------------------------\n\nTITLE: Replace Other Text in Note with Meta Bind Button\nDESCRIPTION: This code snippet defines a meta-bind-button that replaces a specified range of lines (fromLine to toLine) in the note with a provided replacement string. It uses the `replaceInNote` action type, similar to the previous example, but with a different replacement string. This demonstrates replacing the 'other text tada' block.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/Buttons/Replace Buttons.md#_snippet_1\n\nLANGUAGE: meta-bind-button\nCODE:\n```\n```meta-bind-button\nlabel: Replace Other in Note\nhidden: false\nclass: \"\"\ntooltip: \"\"\nid: \"\"\nstyle: default\naction:\n  type: \"replaceInNote\"\n  fromLine: 3\n  toLine: 5\n  replacement: \"other\\ntext\\ntada\"\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Proficiency Modifier Input\nDESCRIPTION: Creates a number input field to define the proficiency modifier (`PROF_mod`). The user can enter any numerical value.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/Advanced Examples/DnD 5e Ability Scores and Modifiers.md#_snippet_4\n\nLANGUAGE: meta-bind\nCODE:\n```\nINPUT[number:PROF_mod]\n```\n\n----------------------------------------\n\nTITLE: Meta-Bind Suggester with Allow Other Option\nDESCRIPTION: This snippet shows how to configure the suggester to allow the user to enter values not present in the predefined list. The `allowOther` parameter enables this functionality. The `showcase` parameter displays the suggester. The result will be assigned to the `suggest` variable.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/Input Fields/Suggester.md#_snippet_1\n\nLANGUAGE: meta-bind\nCODE:\n```\nINPUT[suggester(\noption(option 1),\noption(option 2),\noption(option 3),\nallowOther,\nshowcase\n):suggest]\n```\n\n----------------------------------------\n\nTITLE: Text Input with Showcase Property\nDESCRIPTION: This example shows a text input field bound to a nested frontmatter property. It uses the `text` input type and the `showcase` property (unspecified function of showcase). It binds to the `object` property within the `nested` frontmatter object.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/Examples.md#_snippet_1\n\nLANGUAGE: meta-bind\nCODE:\n```\nINPUT[text(showcase):nested[\"object\"]]\n```\n\n----------------------------------------\n\nTITLE: Slider with Custom Min/Max - Meta-Bind (slider2)\nDESCRIPTION: This snippet demonstrates how to define custom minimum and maximum values for a slider using the meta-bind plugin. The `minValue()` and `maxValue()` options are used to set the slider's range. This example binds to the 'slider2' variable from the frontmatter and includes labels.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/Input Fields/Slider.md#_snippet_2\n\nLANGUAGE: meta-bind\nCODE:\n```\nINPUT[slider(addLabels, minValue(-20), maxValue(20), showcase):slider2]\n```\n\n----------------------------------------\n\nTITLE: Slider with Custom Step Size - Meta-Bind\nDESCRIPTION: This snippet illustrates how to set a custom step size for a slider using the meta-bind plugin. The `stepSize()` option specifies the increment by which the slider value changes. The slider is bound to the 'slider4' variable from the frontmatter and utilizes labels, as well as custom min and max values.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/Input Fields/Slider.md#_snippet_4\n\nLANGUAGE: meta-bind\nCODE:\n```\nINPUT[slider(addLabels, minValue(0), maxValue(10), stepSize(0.1), showcase):slider4]\n```\n\n----------------------------------------\n\nTITLE: Slider with Custom Min/Max - Meta-Bind (slider3)\nDESCRIPTION: This snippet demonstrates how to define custom minimum and maximum values for a slider using the meta-bind plugin. The `minValue()` and `maxValue()` options are used to set the slider's range. This example binds to the 'slider3' variable from the frontmatter and includes labels.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/Input Fields/Slider.md#_snippet_3\n\nLANGUAGE: meta-bind\nCODE:\n```\nINPUT[slider(addLabels, minValue(0), maxValue(1000), showcase):slider3]\n```\n\n----------------------------------------\n\nTITLE: Date Input using Meta Bind Plugin\nDESCRIPTION: This snippet demonstrates how to create a date input field using the Meta Bind plugin. It utilizes the `INPUT[date(showcase):date1]` syntax to bind the input to the `date1` property and display it within the \"showcase\" group.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/Input Fields/Date and Time.md#_snippet_0\n\nLANGUAGE: meta-bind\nCODE:\n```\nINPUT[date(showcase):date1]\n```\n\n----------------------------------------\n\nTITLE: Defining a list suggester with option query\nDESCRIPTION: This snippet defines a list suggester input using the meta-bind plugin. It uses `listSuggester` and the `optionQuery` function to retrieve options that match `#example-note`. The `showcase` option enables a visually appealing presentation. It binds to the variable `list2`. The `VIEW` tag displays the variable `list2` as links.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/Input Fields/List.md#_snippet_2\n\nLANGUAGE: meta-bind\nCODE:\n```\nINPUT[listSuggester(optionQuery(#example-note), showcase):list2]\n```\n\nLANGUAGE: meta-bind\nCODE:\n```\nVIEW[{list2}][link]\n```\n\n----------------------------------------\n\nTITLE: Meta-Bind Inline Select with Time Options\nDESCRIPTION: This snippet defines an inline select element using the Meta-Bind plugin. It uses the `inlineSelect` function with two time-based options ('1 hour' and '2 hours') and corresponding display values ('a' and 'b'). The selected value is bound to the `select3` metadata field. The `showcase` parameter affects how options are rendered.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/Input Fields/Inline Select.md#_snippet_2\n\nLANGUAGE: meta-bind\nCODE:\n```\nINPUT[inlineSelect(option(1 hour, a), option(2 hours, b), showcase):select3]\n```\n\n----------------------------------------\n\nTITLE: Meta Bind Text Input with Limit\nDESCRIPTION: Defines a text input with a character limit using the Meta Bind plugin.  This binds the input to the 'text' variable and limits the input to 10 characters using 'limit(10)'. It also uses 'showcase' to possibly define a showcase display setting.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/Input Fields/Text.md#_snippet_1\n\nLANGUAGE: meta-bind\nCODE:\n```\nINPUT[text(showcase, limit(10)):text]\n```\n\n----------------------------------------\n\nTITLE: Time Input using Meta Bind Plugin\nDESCRIPTION: This snippet demonstrates creating a time input field using the Meta Bind plugin. It utilizes the `INPUT[time(showcase):time]` syntax to bind the input to the `time` property and display it within the \"showcase\" group.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/Input Fields/Date and Time.md#_snippet_3\n\nLANGUAGE: meta-bind\nCODE:\n```\nINPUT[time(showcase):time]\n```\n\n----------------------------------------\n\nTITLE: Meta-Bind Number Input with Placeholder and Default Value\nDESCRIPTION: Creates a number input field bound to the 'number3' property, with a placeholder text 'test' and a default value of -1. This shows how to customize the input field's appearance and provide a fallback value if the property is initially undefined.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/Input Fields/Number.md#_snippet_2\n\nLANGUAGE: meta-bind\nCODE:\n```\nINPUT[number(showcase, placeholder(test), defaultValue(-1)):number3]\n```\n\n----------------------------------------\n\nTITLE: Defining an inline list suggester with options\nDESCRIPTION: This snippet defines an inline list suggester input using the meta-bind plugin. It uses `inlineListSuggester`, `optionQuery` to retrieve options matching `#example-note`, and `option(something, other)` to provide additional options. `useLinks(false)` disables links and `showcase` enhances the display. The input binds to the variable `list4`.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/Input Fields/List.md#_snippet_5\n\nLANGUAGE: meta-bind\nCODE:\n```\nINPUT[inlineListSuggester(optionQuery(#example-note), option(something, other), useLinks(false), showcase):list4]\n```\n\nLANGUAGE: meta-bind\nCODE:\n```\nINPUT[inlineListSuggester(optionQuery(#example-note), option(something, other), useLinks(false)):list4]\n```\n\n----------------------------------------\n\nTITLE: Meta-Bind Toggle with Custom On/Off Values\nDESCRIPTION: This snippet demonstrates creating a toggle that maps to numerical values (1 and 0) instead of booleans using the Meta Bind plugin. The 'onValue' parameter sets the Obsidian property 'toggle2' to 1 when the toggle is on and 'offValue' sets it to 0 when the toggle is off. The 'defaultValue' ensures the initial value of 'toggle2' is 1 if it's not already defined.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/Input Fields/Toggle.md#_snippet_1\n\nLANGUAGE: meta-bind\nCODE:\n```\nINPUT[toggle(showcase, onValue(1), offValue(0), defaultValue(1)):toggle2]\n```\n\n----------------------------------------\n\nTITLE: Meta-Bind Input Binding for Editor\nDESCRIPTION: This snippet defines a Meta-Bind input binding. It maps the content of an editor (presumably within Obsidian) to a variable or field named 'editor'. The 'showcase' modifier might indicate that this input is intended for demonstration or display purposes.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/Input Fields/Editor.md#_snippet_1\n\nLANGUAGE: Meta-Bind\nCODE:\n```\n```meta-bind\nINPUT[editor(showcase):editor]\n```\n```\n\n----------------------------------------\n\nTITLE: Replace Text in Note with Meta Bind Button\nDESCRIPTION: This code snippet defines a meta-bind-button that replaces a specified range of lines (fromLine to toLine) in the note with a provided replacement string. It uses the `replaceInNote` action type. The replacement string can include newline characters to insert multi-line text.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/Buttons/Replace Buttons.md#_snippet_0\n\nLANGUAGE: meta-bind-button\nCODE:\n```\n```meta-bind-button\nlabel: Replace in Note\nhidden: false\nclass: \"\"\ntooltip: \"\"\nid: \"\"\nstyle: default\naction:\n  type: \"replaceInNote\"\n  fromLine: 3\n  toLine: 5\n  replacement: \"some\\ntext\\nwow\"\n```\n```\n\n----------------------------------------\n\nTITLE: Recreate Button with Regexp and Meta Bind Button\nDESCRIPTION: This code snippet defines a meta-bind-button that recreates a previous button using regular expression replacement. It relies on the previous button having been replaced by text. It replaces the 'i am no longer a button nice' text block with the original button's code. It uses `regexpReplaceInNote` action type.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/Buttons/Replace Buttons.md#_snippet_5\n\nLANGUAGE: meta-bind-button\nCODE:\n```\n```meta-bind-button\nlabel: Recreate Button with Regexp\nhidden: false\nclass: \"\"\ntooltip: \"\"\nid: \"\"\nstyle: default\naction:\n  type: \"regexpReplaceInNote\"\n  regexp: \"i am no longer a button\\s+nice\\n\"\n  replacement: |-\n    ```meta-bind-button\n    label: Replace Self\n    hidden: false\n    class: \"\"\n    tooltip: \"\"\n    id: \"\"\n    style: default\n    action:\n      type: \"replaceSelf\"\n      replacement: \"i am no longer a button\\n\\nnice\"\n    ```\n```\n```\n\n----------------------------------------\n\nTITLE: MultiSelect Input Binding\nDESCRIPTION: Defines a multiSelect input with string options. This demonstrates the configuration of multiple selectable values. It showcases the use of string values for options and uses `multiSelect2` as the key.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/Input Fields/Select and Multi Select.md#_snippet_3\n\nLANGUAGE: meta-bind\nCODE:\n```\nINPUT[multiSelect(\noption(option 1), \noption(option 2), \noption(option 3), \noption(option 3), \noption(option 2), \nshowcase\n):multiSelect2]\n```\n\n----------------------------------------\n\nTITLE: Viewing Per-File Memory Cache Value\nDESCRIPTION: This snippet demonstrates how to display the value stored in the per-file in-memory cache using the `VIEW` component. It references the same `memory^test` key as the input field and the static text \"123\" before the cached value. The  `text:memory^test123` represents displaying the value with that key.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/Alternative Metadata Storage/Other Note.md#_snippet_3\n\nLANGUAGE: Text\nCODE:\n```\n`VIEW[{memory^test} 123][text:memory^test123]`\n```\n\n----------------------------------------\n\nTITLE: Meta-Bind Suggester with Dataview Query\nDESCRIPTION: This snippet utilizes a Dataview query to populate the suggester options dynamically. The `optionQuery(#example-note)` retrieves notes tagged with `#example-note`. The `showcase` parameter renders the suggester. This requires the Dataview plugin to be enabled.  The result will be assigned to the `fileSuggest` variable.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/Input Fields/Suggester.md#_snippet_2\n\nLANGUAGE: meta-bind\nCODE:\n```\nINPUT[suggester(optionQuery(#example-note), showcase):fileSuggest]\n```\n\n----------------------------------------\n\nTITLE: Toggle Input with NonExistant Template\nDESCRIPTION: This example demonstrates a toggle input field with a nonexistent template. It uses the `toggle` input type and tries to load a template named `nonExistantTemplate`.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/Examples.md#_snippet_11\n\nLANGUAGE: meta-bind\nCODE:\n```\nINPUT[nonExistantTemplate][toggle:toggle1]\n```\n\n----------------------------------------\n\nTITLE: Meta-Bind Inline Select with Null Option\nDESCRIPTION: This snippet defines an inline select element using the Meta-Bind plugin that includes a null option. It uses the `inlineSelect` function with a null option associated with the display value 'nothing' and another option 'foo' linked to 'something'. The `select4` metadata field will store the selected value.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/Input Fields/Inline Select.md#_snippet_3\n\nLANGUAGE: meta-bind\nCODE:\n```\nINPUT[inlineSelect(option(null, nothing), option(foo, something), showcase):select4]\n```\n\n----------------------------------------\n\nTITLE: Meta Bind Button to Reset Metadata\nDESCRIPTION: This snippet defines a Meta Bind button that resets a metadata field (count) to 0. It uses the 'updateMetadata' action with 'evaluate: false' to set the value directly.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/Buttons/Button Example.md#_snippet_18\n\nLANGUAGE: YAML\nCODE:\n```\nlabel: \"Reset\"\nhidden: true\nid: \"count-reset\"\nstyle: default\nactions:\n  - type: updateMetadata\n    bindTarget: count\n    evaluate: false\n    value: 0\n```\n\n----------------------------------------\n\nTITLE: Meta-Bind Inline Select with Numeric Options\nDESCRIPTION: This snippet defines an inline select element using the Meta-Bind plugin. It uses the `inlineSelect` function with two numeric options (1 and 2) and corresponding display values ('a' and 'b'). The selected value will be bound to the `select2` metadata field. The `showcase` parameter controls the presentation.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/Input Fields/Inline Select.md#_snippet_1\n\nLANGUAGE: meta-bind\nCODE:\n```\nINPUT[inlineSelect(option(1, a), option(2, b), showcase):select2]\n```\n\n----------------------------------------\n\nTITLE: Meta-Bind Number Input with Placeholder and Null Default Value\nDESCRIPTION: Creates a number input field bound to the 'number4' property, with a placeholder text 'test' and a default value of null. Demonstrates handling potentially null default values in the meta-bind configuration.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/Input Fields/Number.md#_snippet_3\n\nLANGUAGE: meta-bind\nCODE:\n```\nINPUT[number(showcase, placeholder(test), defaultValue(null)):number4]\n```\n\n----------------------------------------\n\nTITLE: Meta-Bind Progress Bar with Min/Max/Step Value\nDESCRIPTION: This snippet defines a progress bar connected to the `progress2` metadata field, with a minimum value of 0, a maximum value of 1, and a step size of 0.1.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/Input Fields/Progress Bar.md#_snippet_1\n\nLANGUAGE: meta-bind\nCODE:\n```\nINPUT[progressBar(showcase, minValue(0), maxValue(1), stepSize(0.1)):progress2]\n```\n\n----------------------------------------\n\nTITLE: Simple Slider Implementation - Meta-Bind\nDESCRIPTION: This snippet demonstrates a basic slider implementation using the meta-bind plugin. The `INPUT[slider(showcase):slider1]` directive binds the slider to the 'slider1' variable defined in the frontmatter.  It provides a simple interactive slider interface without any additional customizations.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/Input Fields/Slider.md#_snippet_0\n\nLANGUAGE: meta-bind\nCODE:\n```\nINPUT[slider(showcase):slider1]\n```\n\n----------------------------------------\n\nTITLE: Calculate Encounter XP with Meta Bind (meta-bind-js-view)\nDESCRIPTION: This code snippet defines a Meta Bind JavaScript view that calculates the total experience points (XP) for an encounter based on the player level and the attributes of each enemy. It retrieves enemy data and player level from the bound context and uses helper function `getXP` to determine the XP value of each enemy type. The calculated total XP is then returned as a formatted Markdown string.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/Advanced Examples/PF2e Encounter Calculator.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n{enemy} and children as enemies\n{playerLevel} as playerLevel\n---\n\nfunction getXP(enemyLevel) {\n\tconst diff = enemyLevel - context.bound.playerLevel;\n\tif (diff === -4) {\n\t\treturn 10;\n\t}\n\tif (diff === -3) {\n\t\treturn 15;\n\t}\n\tif (diff === -2) {\n\t\treturn 20;\n\t}\n\tif (diff === -1) {\n\t\treturn 30;\n\t}\n\tif (diff === 0) {\n\t\treturn 40;\n\t}\n\tif (diff === 1) {\n\t\treturn 60;\n\t}\n\tif (diff === 2) {\n\t\treturn 80;\n\t}\n\tif (diff === 3) {\n\t\treturn 120;\n\t}\n\tif (diff === 4) {\n\t\treturn 160;\n\t}\n\treturn -1;\n}\n\nfunction calculateTotalXP() {\n\tlet acc = 0;\n\tfor (const enemy of context.bound.enemies) {\n\t\tconst xp = getXP((enemy.level ?? 0) + (enemy.variant ?? 0));\n\t\tif (xp === -1) {\n\t\t\treturn -1;\n\t\t}\n\t\tacc += xp * (enemy.count ?? 0);\n\t}\n\treturn acc;\n}\n\nreturn engine.markdown.create(`Encounter XP: **${calculateTotalXP()}**`);\n```\n\n----------------------------------------\n\nTITLE: Date Picker with Default Null Value using Meta Bind Plugin\nDESCRIPTION: This snippet creates a date picker input field with a default value set to null. It uses the `INPUT[datePicker(showcase, defaultValue(null)):date3]` syntax, binding the input to `date3`, displaying it in the \"showcase\" group and setting default value to null.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/Input Fields/Date and Time.md#_snippet_2\n\nLANGUAGE: meta-bind\nCODE:\n```\nINPUT[datePicker(showcase, defaultValue(null)):date3]\n```\n\n----------------------------------------\n\nTITLE: Meta-Bind Progress Bar with Min/Max Value & Negative Step\nDESCRIPTION: This snippet creates a progress bar bound to the `progress3` metadata.  It has a minimum value of 0, a maximum value of 10, and a step size of -1, which might cause unexpected behavior.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/Input Fields/Progress Bar.md#_snippet_2\n\nLANGUAGE: meta-bind\nCODE:\n```\nINPUT[progressBar(showcase, minValue(0), maxValue(10), stepSize(-1)):progress3]\n```\n\n----------------------------------------\n\nTITLE: Meta Bind Text Area with Classes\nDESCRIPTION: Defines a text area input with custom CSS classes using the Meta Bind plugin. This binds the input to the 'textArea' variable and applies the 'meta-bind-full-width' and 'meta-bind-high' CSS classes for styling the text area.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/Input Fields/Text.md#_snippet_2\n\nLANGUAGE: meta-bind\nCODE:\n```\nINPUT[textArea(showcase, class(meta-bind-full-width), class(meta-bind-high)):textArea]\n```\n\n----------------------------------------\n\nTITLE: Meta Bind Input Configuration\nDESCRIPTION: Configures an input field using the Meta Bind plugin to suggest images. The `imageSuggester` function is used to provide image options from the `Other/Images` directory, and the `showcase` option is enabled to display the selected image.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/Input Fields/Image Suggester.md#_snippet_0\n\nLANGUAGE: meta-bind\nCODE:\n```\nINPUT[imageSuggester(optionQuery(\"Other/Images\"), showcase):image]\n```\n\n----------------------------------------\n\nTITLE: Meta-Bind Progress Bar with Min/Max/Step Value (Positive)\nDESCRIPTION: This snippet shows a progress bar linked to `progress4` metadata with a minimum value of 0, a maximum value of 10, and a step size of 0.1.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/Input Fields/Progress Bar.md#_snippet_3\n\nLANGUAGE: meta-bind\nCODE:\n```\nINPUT[progressBar(showcase, minValue(0), maxValue(10), stepSize(0.1)):progress4]\n```\n\n----------------------------------------\n\nTITLE: Meta Bind Text Input\nDESCRIPTION: Defines a text input field using the Meta Bind plugin.  This binds the input to the 'text' variable and uses 'showcase' to possibly define a showcase display setting. The input will update the 'text' variable in Obsidian metadata.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/Input Fields/Text.md#_snippet_0\n\nLANGUAGE: meta-bind\nCODE:\n```\nINPUT[text(showcase):text]\n```\n\n----------------------------------------\n\nTITLE: Meta-Bind Toggle with Boolean Property\nDESCRIPTION: This snippet demonstrates how to create a basic toggle in Obsidian using the Meta Bind plugin, binding it to a boolean property named 'toggle1'. When the toggle is activated, the 'toggle1' property in the Obsidian frontmatter will be set to 'true'; when deactivated, it will be set to 'false'.  The 'showcase' parameter is likely a UI styling option provided by the Meta Bind plugin.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/Input Fields/Toggle.md#_snippet_0\n\nLANGUAGE: meta-bind\nCODE:\n```\nINPUT[toggle(showcase):toggle1]\n```\n\n----------------------------------------\n\nTITLE: Select Input Binding with Boolean and Null\nDESCRIPTION: Defines another select input using the meta-bind plugin, this time using a boolean (false) and a null option value.  It shows the plugin's ability to handle different data types for option values, though the null representation might need to be specifically handled.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/Input Fields/Select and Multi Select.md#_snippet_1\n\nLANGUAGE: meta-bind\nCODE:\n```\nINPUT[select(\noption(1, option 1), \noption(false, option 2), \noption(null, option 3), \nshowcase\n):select2]\n```\n\n----------------------------------------\n\nTITLE: Meta-Bind Number Input with Initial Value\nDESCRIPTION: Creates a number input field bound to the 'number2' property, which is initialized with the value 123 in the frontmatter. Demonstrates how the meta-bind plugin uses existing frontmatter values to populate input fields.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/Input Fields/Number.md#_snippet_1\n\nLANGUAGE: meta-bind\nCODE:\n```\nINPUT[number(showcase):number2]\n```\n\n----------------------------------------\n\nTITLE: Define Image List Input\nDESCRIPTION: Defines an input field that allows the user to select a list of images from the \"Other/Images\" directory using the `imageListSuggester`. This is useful for displaying multiple images in a single view field. The `optionQuery` parameter specifies the search path for available images.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/View Fields/View Field.md#_snippet_1\n\nLANGUAGE: meta-bind\nCODE:\n```\nINPUT[imageListSuggester(optionQuery(\"Other/Images\")):images]\n```\n\n----------------------------------------\n\nTITLE: Meta-Bind Progress Bar with Min/Max Value\nDESCRIPTION: This snippet creates a progress bar linked to the `progress1` metadata field. It sets the minimum value to -10 and the maximum value to 3.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/Input Fields/Progress Bar.md#_snippet_0\n\nLANGUAGE: meta-bind\nCODE:\n```\nINPUT[progressBar(showcase, minValue(-10), maxValue(3)):progress1]\n```\n\n----------------------------------------\n\nTITLE: Defining a list suggester without links\nDESCRIPTION: This snippet defines a list suggester input using the meta-bind plugin. It uses `listSuggester` and the `optionQuery` function to retrieve options that match `#example-note`. The `useLinks(false)` option disables the creation of links. `showcase` enables visual enhancement. It binds to the variable `list3`. The `VIEW` tag displays the variable `list3` as links.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/Input Fields/List.md#_snippet_3\n\nLANGUAGE: meta-bind\nCODE:\n```\nINPUT[listSuggester(optionQuery(#example-note), useLinks(false), showcase):list3]\n```\n\nLANGUAGE: meta-bind\nCODE:\n```\nVIEW[{list3}][link]\n```\n\n----------------------------------------\n\nTITLE: Meta-Bind Suggester with Dataview and Partial Links\nDESCRIPTION: This snippet uses a Dataview query and `useLinks(partial)` to populate the suggester, showing only the partial link from the dataview query results.  The `showcase` parameter renders the suggester. The result will be assigned to the `fileSuggest2` variable.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/Input Fields/Suggester.md#_snippet_3\n\nLANGUAGE: meta-bind\nCODE:\n```\nINPUT[suggester(optionQuery(#example-note), useLinks(partial), showcase):fileSuggest2]\n```\n\n----------------------------------------\n\nTITLE: Date Time Input using Meta Bind Plugin\nDESCRIPTION: This snippet illustrates how to create a date time input field using the Meta Bind plugin. It employs the `INPUT[dateTime(showcase):dateTime]` syntax, binding the input to the `dateTime` property and placing it within the \"showcase\" group.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/Input Fields/Date and Time.md#_snippet_4\n\nLANGUAGE: meta-bind\nCODE:\n```\nINPUT[dateTime(showcase):dateTime]\n```\n\n----------------------------------------\n\nTITLE: Defining a showcase list\nDESCRIPTION: This snippet defines a showcase list input using the meta-bind plugin. The `INPUT` tag specifies the type of input, which is `list` with the `showcase` option. It binds the input to a variable named `list`.  The corresponding `VIEW` tag displays the content of the variable `list` as links.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/Input Fields/List.md#_snippet_0\n\nLANGUAGE: meta-bind\nCODE:\n```\nINPUT[list(showcase):list]\n```\n\nLANGUAGE: meta-bind\nCODE:\n```\nVIEW[{list}][link]\n```\n\n----------------------------------------\n\nTITLE: Defining a multi-line showcase list\nDESCRIPTION: This snippet defines a multi-line showcase list input using the meta-bind plugin. The `INPUT` tag specifies the type of input, which is `list` with both `showcase` and `multiLine` options. It binds the input to a variable named `list`. The showcase option likely displays the list in a visually enhanced format.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/Input Fields/List.md#_snippet_1\n\nLANGUAGE: meta-bind\nCODE:\n```\nINPUT[list(showcase, multiLine):list]\n```\n\n----------------------------------------\n\nTITLE: Date Picker Input using Meta Bind Plugin\nDESCRIPTION: This snippet shows how to create a date picker input field using the Meta Bind plugin. It uses the `INPUT[datePicker(showcase):date2]` syntax, binding it to the `date2` property and placing it in the \"showcase\" group.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/Input Fields/Date and Time.md#_snippet_1\n\nLANGUAGE: meta-bind\nCODE:\n```\nINPUT[datePicker(showcase):date2]\n```\n\n----------------------------------------\n\nTITLE: Toggle Input with ToggleTemplate\nDESCRIPTION: This example demonstrates a toggle input field using a specified template name `toggleTemplate`. It assumes the template's logic is already setup in the plugin's settings\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/Examples.md#_snippet_12\n\nLANGUAGE: meta-bind\nCODE:\n```\nINPUT[toggleTemplate][]\n```\n\n----------------------------------------\n\nTITLE: Meta-Bind Select Input with Title\nDESCRIPTION: Defines a select input with a specified title and four options: option a, option b, option c, and option d. The 'title' function sets the label for the select input. The 'select' function creates a dropdown menu, and the selected value is bound to the 'select' metadata field.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/Other Note.md#_snippet_1\n\nLANGUAGE: meta-bind\nCODE:\n```\nINPUT[select(\ntitle(select with title),\noption(option a),\noption(option b),\noption(option c),\noption(option d)\n):select]\n```\n\n----------------------------------------\n\nTITLE: Meta-Bind Inline Select with String Options\nDESCRIPTION: This snippet defines an inline select element using the Meta-Bind plugin. It uses the `inlineSelect` function with two string options ('a' and 'b'). The selected value will be bound to the `select` metadata field. The `showcase` parameter determines how the options are displayed.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/Input Fields/Inline Select.md#_snippet_0\n\nLANGUAGE: meta-bind\nCODE:\n```\nINPUT[inlineSelect(option(a), option(b), showcase):select]\n```\n\n----------------------------------------\n\nTITLE: Meta-Bind Progress Bar with Default Value & Hidden Labels\nDESCRIPTION: This snippet creates a progress bar with a default value of 53 and hides the labels using the `addLabels(false)` option, binding it to the `progress5` metadata field.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/Input Fields/Progress Bar.md#_snippet_4\n\nLANGUAGE: meta-bind\nCODE:\n```\nINPUT[progressBar(defaultValue(53), addLabels(false)):progress5]\n```\n\n----------------------------------------\n\nTITLE: Meta-Bind Select Input\nDESCRIPTION: Defines a select input with four options: option a, option b, option c, and option d. This snippet uses the 'select' function of the Meta-Bind plugin to create a dropdown menu. The selected value is bound to the 'select' metadata field.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/Other Note.md#_snippet_0\n\nLANGUAGE: meta-bind\nCODE:\n```\nINPUT[\n\tselect(\n\t\toption(option a),\n\t\toption(option b),\n\t\toption(option c),\n\t\toption(option d)\n\t):select\n]\n```\n\n----------------------------------------\n\nTITLE: Retrieve Text from Another Note using Meta-Bind\nDESCRIPTION: This snippet retrieves the `text` property from the `Other Note` and binds it to a variable.  It assumes that 'Other Note' is the title of another Obsidian note, and 'text' is a property within that note's frontmatter.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/View Fields/JS View Field.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n{Other Note#text} as text\n---\nreturn context.bound.text\n```\n\n----------------------------------------\n\nTITLE: Defining an inline list\nDESCRIPTION: This snippet defines an inline list input using the meta-bind plugin.  It uses `inlineList` and binds the input to the variable `list5`. The content of this list will be displayed inline within the text.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/Input Fields/List.md#_snippet_4\n\nLANGUAGE: meta-bind\nCODE:\n```\nINPUT[inlineList:list5]\n```\n\n----------------------------------------\n\nTITLE: Select Input Binding with Showcase\nDESCRIPTION: Defines a select input field using the meta-bind plugin. It takes options with numeric values (1, 2, 3) and their corresponding labels (option 1, option 2, option 3). The 'showcase' parameter is included, but its specific effect isn't clear from this context.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/Input Fields/Select and Multi Select.md#_snippet_0\n\nLANGUAGE: meta-bind\nCODE:\n```\nINPUT[select(\noption(1, option 1), \noption(2, option 2), \noption(3, option 3), \nshowcase\n):select]\n```\n\n----------------------------------------\n\nTITLE: Accessing file title using Templater in Obsidian\nDESCRIPTION: This snippet demonstrates how to retrieve the title of the current file within an Obsidian note using the Templater plugin. It uses the `tp.file.title` function to access the title. The output will be the name of the current Obsidian note file.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/templates/templater/Templater Template.md#_snippet_0\n\nLANGUAGE: Templater\nCODE:\n```\n<% tp.file.title %>\n```\n\n----------------------------------------\n\nTITLE: Meta-Bind Suggester with Dataview and Full Links\nDESCRIPTION: This snippet utilizes a Dataview query and `useLinks(false)` to populate the suggester, displaying full links. `useLinks(false)` seems to indicate that the raw text should be returned instead of a link. The `showcase` parameter enables display. The result will be assigned to the `fileSuggest3` variable.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/Input Fields/Suggester.md#_snippet_4\n\nLANGUAGE: meta-bind\nCODE:\n```\nINPUT[suggester(optionQuery(#example-note), useLinks(false), showcase):fileSuggest3]\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration\nDESCRIPTION: This snippet defines YAML frontmatter configurations, likely for an Obsidian note. It includes 'editor' and 'editor2' fields which contain multi-line text content. These fields might be used to store or configure the content of an editor within Obsidian.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/Input Fields/Editor.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n---\neditor: |-\n  test\n\n  **test**\n\n  # Heading\neditor2: |-\n  asd\n\n  asd\n  asd\n\n  as\n  d\n  asd\n  as\n  d\n  as\n  da\n  sd\n\n  asd\n\n  as\n  d\n  as\n  d\n  as\n  d\n  as\n  d\n  as\n  d\n  a\n  d\n  as\n  d\n  as\n  dasda\n  \\\\asd\n  as\n  d\n  a\n  da\n  s\n  da\n  sd\n  a\n  d\n  a\n  sd\n  a\n  sd\n\n  asd\n\n  asd\n---\n```\n\n----------------------------------------\n\nTITLE: Slider with Labels - Meta-Bind\nDESCRIPTION: This snippet shows how to create a slider with labels using the meta-bind plugin. The `addLabels` option within the `slider()` function enables the display of labels along the slider. The slider is bound to the 'slider1' variable from the frontmatter.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/Input Fields/Slider.md#_snippet_1\n\nLANGUAGE: meta-bind\nCODE:\n```\nINPUT[slider(addLabels, showcase):slider1]\n```\n\n----------------------------------------\n\nTITLE: Reactive Text Update with Obsidian Meta Bind (JavaScript)\nDESCRIPTION: This snippet creates a reactive text field that updates based on changes to the 'text' metadata field. It uses the Obsidian Meta Bind plugin API to parse the bind target, create a reactive component using `engine.reactive`, and subscribe to metadata changes using `mb.subscribeToMetadata`. The `onUpdate` function formats the value to string.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/Advanced Examples/Using JS Engine for Complex things.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst mb = engine.getPlugin('obsidian-meta-bind-plugin').api;\n\nconst bindTarget = mb.parseBindTarget('text', context.file.path);\n\nfunction onUpdate(value) {\n\treturn value.toString();\n}\n\nconst reactive = engine.reactive(onUpdate, mb.getMetadata(bindTarget));\n\nconst subscription = mb.subscribeToMetadata(\n\tbindTarget,\n\tcomponent,\n\t(value) => reactive.refresh(value)\n);\n\nreturn reactive;\n```\n\n----------------------------------------\n\nTITLE: Creating Select Input Field using JS Engine and Meta Bind\nDESCRIPTION: This JavaScript code snippet creates a select input field dynamically using the Meta Bind API within the JS Engine plugin for Obsidian. It defines options for the select field, sets a title, parses the bind target, creates a mountable element, and wraps it in an MDRC (Meta Data Render Component). The code leverages `engine.getPlugin` to access the Meta Bind API, `mb.parseBindTarget` to create the binding target, and `mb.createInputFieldMountable` to construct the input field. The created field will be a block element and bound to the 'select' property of the current file. Dependencies include the 'obsidian-meta-bind-plugin' and 'obsidian-js-engine-plugin'.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/Meta Bind API.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst mb = engine.getPlugin('obsidian-meta-bind-plugin').api;\n\nconst options = ['a', 'b', 'c'];\n\nconst arguments = options.map(x => ({\n\tname: 'option',\n\tvalue: [x],\n}));\n\narguments.push({\n\tname: 'title',\n\tvalue: ['I was created using JS Engine and the Meta Bind API'],\n});\n\nconst bindTarget = mb.parseBindTarget('select', context.file.path);\n\nconst mountable = mb.createInputFieldMountable(context.file.path, {\n\trenderChildType: 'block',\n\tdeclaration: {\n\t\tinputFieldType: 'select',\n\t\tbindTarget: bindTarget,\n\t\targuments: arguments,\n\t},\n});\n\nmb.wrapInMDRC(mountable, container, component);\n```\n\n----------------------------------------\n\nTITLE: Select Input Binding with Duplicate Options\nDESCRIPTION: Defines a select input utilizing duplicate options (option 3, option 2). This shows how the plugin handles multiple options with the same values. It includes showcase parameter and uses the 'select3' key.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/Input Fields/Select and Multi Select.md#_snippet_2\n\nLANGUAGE: meta-bind\nCODE:\n```\nINPUT[select(\noption(1, option 1), \noption(2, option 2), \noption(3, option 3), \noption(3, option 3), \noption(2, option 2), \nshowcase\n):select3]\n```\n\n----------------------------------------\n\nTITLE: Dynamically Update CSS Classes using Meta-Bind\nDESCRIPTION: This snippet demonstrates how to dynamically add or remove CSS classes from a note's frontmatter based on the value of `number1`. It retrieves existing CSS classes, adds or removes the `test-class` based on a condition, and saves the updated class list.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/View Fields/JS View Field.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n{number1} as n1\nsave to {cssclasses}\n---\nconst CLASS = 'test-class';\n\nlet classes = new Set(context.metadata.frontmatter.cssclasses ?? []);\n\nif (context.bound.n1 >= 100) {\n    classes.add(CLASS);\n} else {\n    classes.delete(CLASS);\n}\n\nreturn [...classes.values()];\n```\n\n----------------------------------------\n\nTITLE: Defining a showcase list with null values\nDESCRIPTION: This snippet defines a showcase list with null values bound to the 'list6' variable. It demonstrates how the meta-bind plugin handles empty list entries. The `list6` variable likely contains empty strings, and this configuration is used to showcase such cases.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/Input Fields/List.md#_snippet_7\n\nLANGUAGE: meta-bind\nCODE:\n```\nINPUT[list(showcase):list6]\n```\n\n----------------------------------------\n\nTITLE: Meta-Bind Select Input Definition\nDESCRIPTION: This snippet defines a `select` input using the Meta Bind syntax. It specifies two options, 'a' and 'b', within the select element. The select element is bound to the identifier 'select'.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/templates/Other Template.md#_snippet_0\n\nLANGUAGE: Meta-Bind\nCODE:\n```\nINPUT[select(option(a), option(b)):select]\n```\n\n----------------------------------------\n\nTITLE: Slider Input with NonExistantArgument\nDESCRIPTION: This example demonstrates the generation of an error message when a slider input attempts to access a nonexistent argument.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/Examples.md#_snippet_13\n\nLANGUAGE: meta-bind\nCODE:\n```\nINPUT[slider(nonExistantArgument)]\n```\n\n----------------------------------------\n\nTITLE: Meta-Bind Number Input\nDESCRIPTION: Creates a number input field bound to the 'number' property. This simple example showcases the basic syntax for binding a number input to a property using the meta-bind plugin in Obsidian.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/Input Fields/Number.md#_snippet_0\n\nLANGUAGE: meta-bind\nCODE:\n```\nINPUT[number(showcase):number]\n```\n\n----------------------------------------\n\nTITLE: Clone Variable Value using Meta-Bind\nDESCRIPTION: This snippet clones the value of the `number1` variable from the frontmatter and saves it to the `n1clone` variable. The `hidden` keyword prevents the script from displaying its result in the note content.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/View Fields/JS View Field.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n{number1} as n1\nsave to {n1clone}\nhidden\n---\nreturn context.bound.n1;\n```\n\n----------------------------------------\n\nTITLE: Meta-Bind Progress Bar with Custom CSS Class\nDESCRIPTION: This snippet defines a progress bar with a default value of 53 and applies a custom CSS class named `red-progress-bar` for styling purposes, linking it to the `progress6` metadata field.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/Input Fields/Progress Bar.md#_snippet_5\n\nLANGUAGE: meta-bind\nCODE:\n```\nINPUT[progressBar(defaultValue(53), class(red-progress-bar)):progress6]\n```\n\n----------------------------------------\n\nTITLE: Slider Input without Arguments\nDESCRIPTION: This example demonstrates the generation of an error message when a slider input is used without any arguments.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/Examples.md#_snippet_14\n\nLANGUAGE: meta-bind\nCODE:\n```\nINPUT[slider]\n```\n\n----------------------------------------\n\nTITLE: Meta Bind Button: Scroll to Middle\nDESCRIPTION: This code snippet defines a meta-bind-button that, when clicked, scrolls the user to the section titled \"This is a Heading in the Middle\" within the same Obsidian note. The button's label is set to \"Scroll to Middle\", and its style is set to \"default\". The `newTab` property is set to `false`, ensuring the target section is opened in the current tab.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/Buttons/In Note Navigation.md#_snippet_0\n\nLANGUAGE: meta-bind-button\nCODE:\n```\nlabel: Scroll to Middle\nstyle: default\nactions:\n  - type: open\n    link: \"[[#This is a Heading in the Middle]]\"\n    newTab: false\n```\n\n----------------------------------------\n\nTITLE: Remove Inserted Lines with Regexp and Meta Bind Button\nDESCRIPTION: This code snippet defines a meta-bind-button that removes previously inserted lines using a regular expression. It utilizes the `regexpReplaceInNote` action type. The `regexp` parameter defines the regular expression to match the text to be removed, and the `replacement` parameter specifies the text to replace the matched content with, effectively removing the inserted lines.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/Buttons/Replace Buttons.md#_snippet_3\n\nLANGUAGE: meta-bind-button\nCODE:\n```\n```meta-bind-button\nlabel: Remove inserted lines\nhidden: false\nclass: \"\"\ntooltip: \"\"\nid: \"\"\nstyle: default\naction:\n  type: \"regexpReplaceInNote\"\n  regexp: \"Insert below this line:\\n(i am inserted\\n)+\"\n  replacement: \"Insert below this line:\\n\"\n```\n```\n\n----------------------------------------\n\nTITLE: Embedding Template in Obsidian\nDESCRIPTION: This code snippet demonstrates how to embed another Obsidian template within the current note using the Meta Bind plugin. The `[[Other Template]]` will be rendered in place of the code block.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/templates/Test Template.md#_snippet_0\n\nLANGUAGE: meta-bind-embed\nCODE:\n```\n[[Other Template]]\n```\n\n----------------------------------------\n\nTITLE: Resulting Input Field Configuration with JS Engine\nDESCRIPTION: This JavaScript code represents the resulting configuration for the dynamically created input field using JS Engine. It mirrors the previous code snippet, demonstrating the final state of the input field setup. The important aspect is how it reinforces the creation of options 'a', 'b', 'c' and binds them to the `select` target. It showcases the configuration created by the Meta Bind API and JS Engine plugin, making it easier to understand the underlying structure of the generated input field. The arguments include `name` and `value` pairs that drive the select's functionality.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/Meta Bind API.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst mb = engine.getPlugin('obsidian-meta-bind-plugin').api;\n\nconst options = ['a', 'b', 'c'];\n\nconst arguments = options.map(x => ({\n\tname: 'option',\n\tvalue: [x],\n}));\n\narguments.push({\n\tname: 'title',\n\tvalue: ['I was created using JS Engine and the Meta Bind API'],\n});\n\nconst bindTarget = mb.parseBindTarget('select', context.file.path);\n\nconst mountable = mb.createInputFieldMountable(context.file.path, {\n\trenderChildType: 'block',\n\tdeclaration: {\n\t\tinputFieldType: 'select',\n\t\tbindTarget: bindTarget,\n\t\targuments: arguments,\n\t},\n});\n\nmb.wrapInMDRC(mountable, container, component);\n```\n\n----------------------------------------\n\nTITLE: Meta-Bind Input Binding for Editor2\nDESCRIPTION: This snippet defines another Meta-Bind input binding, similar to the previous one. It maps the content of an editor (presumably within Obsidian) to a variable or field named 'editor2', and it also uses 'showcase'.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/Input Fields/Editor.md#_snippet_2\n\nLANGUAGE: Meta-Bind\nCODE:\n```\n```meta-bind\nINPUT[editor(showcase):editor2]\n```\n```\n\n----------------------------------------\n\nTITLE: Calculating Ability Modifiers\nDESCRIPTION: Calculates the ability modifier for a given ability score using the formula (score - 10) / 2 and stores the result in memory using the `math(hidden):memory^` syntax. The modifier is calculated using the floor function to round down to the nearest integer. The hidden attribute prevents the value from being displayed directly.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/Advanced Examples/DnD 5e Ability Scores and Modifiers.md#_snippet_0\n\nLANGUAGE: meta-bind\nCODE:\n```\nVIEW[ floor(({STR} - 10) / 2) ][math(hidden):memory^STR_mod]\n```\n\nLANGUAGE: meta-bind\nCODE:\n```\nVIEW[ floor(({DEX} - 10) / 2) ][math(hidden):memory^DEX_mod]\n```\n\nLANGUAGE: meta-bind\nCODE:\n```\nVIEW[ floor(({CON} - 10) / 2) ][math(hidden):memory^CON_mod]\n```\n\nLANGUAGE: meta-bind\nCODE:\n```\nVIEW[ floor(({INT} - 10) / 2) ][math(hidden):memory^INT_mod]\n```\n\nLANGUAGE: meta-bind\nCODE:\n```\nVIEW[ floor(({WIS} - 10) / 2) ][math(hidden):memory^WIS_mod]\n```\n\nLANGUAGE: meta-bind\nCODE:\n```\nVIEW[ floor(({CHR} - 10) / 2) ][math(hidden):memory^CHR_mod]\n```\n\n----------------------------------------\n\nTITLE: Define Image Input\nDESCRIPTION: Defines an input field using the `imageSuggester` to select an image from the \"Other/Images\" directory. This allows the user to select an image which can be used in other view fields. The `optionQuery` parameter specifies the search path for available images.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/View Fields/View Field.md#_snippet_0\n\nLANGUAGE: meta-bind\nCODE:\n```\nINPUT[imageSuggester(optionQuery(\"Other/Images\")):image]\n```\n\n----------------------------------------\n\nTITLE: Defining Skill Proficiency Input\nDESCRIPTION: Creates an inline select input for defining skill proficiency levels. Options include \"not proficient\", \"half proficient\", \"proficient\", and \"expertise\", mapped to numerical values 0, 0.5, 1, and 2, respectively. The selected proficiency is styled using the `dnd5e-skill-prof` class.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/Advanced Examples/DnD 5e Ability Scores and Modifiers.md#_snippet_2\n\nLANGUAGE: meta-bind\nCODE:\n```\nINPUT[inlineSelect(option(0,not proficienct), option(0.5,half proficienct), option(1,proficient), option(2,experties), defaultValue(0), class(dnd5e-skill-prof)):proficiency.acrobatics]\n```\n\nLANGUAGE: meta-bind\nCODE:\n```\nINPUT[inlineSelect(option(0,not proficienct), option(0.5,half proficienct), option(1,proficient), option(2,experties), defaultValue(0), class(dnd5e-skill-prof)):proficiency.arcana]\n```\n\nLANGUAGE: meta-bind\nCODE:\n```\nINPUT[inlineSelect(option(0,not proficienct), option(0.5,half proficienct), option(1,proficient), option(2,experties), defaultValue(0), class(dnd5e-skill-prof)):proficiency.deception]\n```\n\nLANGUAGE: meta-bind\nCODE:\n```\nINPUT[inlineSelect(option(0,not proficienct), option(0.5,half proficienct), option(1,proficient), option(2,experties), defaultValue(0), class(dnd5e-skill-prof)):proficiency.perception]\n```\n\n----------------------------------------\n\nTITLE: Invalid Inline Select Input\nDESCRIPTION: This example demonstrates the generation of an error when an inline select input is improperly configured, missing parenthesis around the whole option list.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/Examples.md#_snippet_15\n\nLANGUAGE: meta-bind\nCODE:\n```\nINPUT[inlineSelect(option(a), option(b), option(c)]\n```\n\n----------------------------------------\n\nTITLE: Meta Bind Button: Scroll to Bottom\nDESCRIPTION: This code snippet configures a meta-bind-button to scroll to the section titled \"This is a Heading at the Bottom\" within the current Obsidian note. The button's label is \"Scroll to Bottom\", using the default style. The action defined opens the link in the same tab, as `newTab` is set to `false`.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/Buttons/In Note Navigation.md#_snippet_1\n\nLANGUAGE: meta-bind-button\nCODE:\n```\nlabel: Scroll to Bottom\nstyle: default\nactions:\n  - type: open\n    link: \"[[#This is a Heading at the Bottom]]\"\n    newTab: false\n```\n\n----------------------------------------\n\nTITLE: Viewing Chained Per-File Memory Cache Value\nDESCRIPTION: This snippet showcases the chained usage of `VIEW` components. It references the value from `memory^test123` (defined in a previous snippet and set to '123') and displays the static text \"456\" before its value. The `text` parameter without a specified key implies displaying only the provided static text.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/Alternative Metadata Storage/Other Note.md#_snippet_4\n\nLANGUAGE: Text\nCODE:\n```\n`VIEW[{memory^test123}456][text]`\n```\n\n----------------------------------------\n\nTITLE: Viewing Global Memory Cache Value\nDESCRIPTION: This snippet shows how to display the value stored in the global in-memory cache using the `VIEW` component. It references the same `globalMemory^test` key as the input field, and displays the static text \"123\" before the cached value. The `text:globalMemory^test123` represents displaying the value with that key. \nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/Alternative Metadata Storage/Other Note.md#_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\n`VIEW[{globalMemory^test} 123][text:globalMemory^test123]`\n```\n\n----------------------------------------\n\nTITLE: Displaying a Notice in Obsidian\nDESCRIPTION: This snippet demonstrates how to create and display a simple notification in Obsidian using the `Notice` API. It is wrapped in Obsidian's templating syntax (`<%* ... -%>`) to allow execution within the Obsidian environment. The notification will display the message \"Hello!\".\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/templates/templater/Say Hello Command.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n<%* \nnew Notice(\"Hello!\");\n-%>\n```\n\n----------------------------------------\n\nTITLE: Meta Bind Button: Scroll to Labeled Section\nDESCRIPTION: This code snippet defines a meta-bind-button which scrolls the user to a section labeled with the ID \"section-1\" within the note. The button's label is \"Scroll to Labeled Section\", and its style is \"default\". The link opens within the same tab due to `newTab: false`.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/Buttons/In Note Navigation.md#_snippet_2\n\nLANGUAGE: meta-bind-button\nCODE:\n```\nlabel: Scroll to Labeled Section\nstyle: default\nactions:\n  - type: open\n    link: \"[[#^section-1]]\"\n    newTab: false\n```\n\n----------------------------------------\n\nTITLE: Binding Input to Global Memory Cache\nDESCRIPTION: This snippet demonstrates how to bind an input field to a global in-memory cache using the Obsidian Meta Bind plugin. The `INPUT` component is used with the `text` type and a key of `globalMemory^test` within the global memory scope. This means the value will be stored globally and accessible across different files.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/Alternative Metadata Storage/Other Note.md#_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n`INPUT[text:globalMemory^test]`\n```\n\n----------------------------------------\n\nTITLE: Meta Bind Button Configuration - Replace Self with Templater Template\nDESCRIPTION: This configuration creates a Meta Bind Button that, when clicked, replaces itself with the content of the specified Templater template. The `replacement` field specifies the path to the template file, and `templater: true` enables Templater processing for the inserted content.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/Buttons/Templater Buttons.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nlabel: Insert Text\nhidden: false\nclass: \"\"\ntooltip: \"\"\nid: \"\"\nstyle: default\naction:\n  type: \"replaceSelf\"\n  replacement: \"templates/templater/Templater Template.md\"\n  templater: true\n```\n\n----------------------------------------\n\nTITLE: Replace Self with Meta Bind Button\nDESCRIPTION: This code snippet defines a meta-bind-button that replaces itself with the specified replacement text. It uses the `replaceSelf` action type. When the button is clicked, the entire code block defining the button is replaced by the text defined in the `replacement` parameter.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/Buttons/Replace Buttons.md#_snippet_4\n\nLANGUAGE: meta-bind-button\nCODE:\n```\n```meta-bind-button\nlabel: Replace Self\nhidden: false\nclass: \"\"\ntooltip: \"\"\nid: \"\"\nstyle: default\naction:\n  type: \"replaceSelf\"\n  replacement: \"i am no longer a button\\n\\nnice\"\n```\n```\n\n----------------------------------------\n\nTITLE: Meta Bind Button to Open Internal Link in New Tab\nDESCRIPTION: This snippet defines a Meta Bind button that opens an internal link in a new tab within Obsidian when clicked. The 'action' property is of type 'open', 'newTab' is set to true and specifies the link to open using Obsidian's internal link syntax.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/Buttons/Button Example.md#_snippet_4\n\nLANGUAGE: YAML\nCODE:\n```\nstyle: primary\nid: open-tab-button\nhidden: true\nlabel: Open File new Tab\naction:\n  type: open\n  newTab: true\n  link: \"[[View Fields/Other Note|Other Note]]\"\n```\n\n----------------------------------------\n\nTITLE: Text Area Input Binding to Another Note\nDESCRIPTION: This example demonstrates a text area input field bound to a different note's frontmatter. It uses the `textArea` input type and sets the title and CSS classes for styling. It binds to the `title` property in the `other note`.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/Examples.md#_snippet_4\n\nLANGUAGE: meta-bind\nCODE:\n```\nINPUT[textArea(\ntitle(text area),\nclass(meta-bind-full-width),\nclass(meta-bind-high)\n):other note#title]\n```\n\n----------------------------------------\n\nTITLE: Insert Text into Note with Meta Bind Button\nDESCRIPTION: This code snippet defines a meta-bind-button that inserts a specified value into the note at the given line number. It uses the `insertIntoNote` action type. The `line` parameter indicates the line number where the text will be inserted.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/Buttons/Replace Buttons.md#_snippet_2\n\nLANGUAGE: meta-bind-button\nCODE:\n```\n```meta-bind-button\nlabel: Insert Text\nhidden: false\nclass: \"\"\ntooltip: \"\"\nid: \"\"\nstyle: default\naction:\n  type: \"insertIntoNote\"\n  line: 38\n  value: \"i am inserted\"\n```\n```\n\n----------------------------------------\n\nTITLE: Meta Bind Button to Add Current Time to List\nDESCRIPTION: This snippet defines a Meta Bind button that adds the current timestamp to a list stored in metadata field 'someList'.  It uses a JavaScript expression to either initialize the array if it's null, or append the current timestamp otherwise.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/Buttons/Button Example.md#_snippet_20\n\nLANGUAGE: YAML\nCODE:\n```\nlabel: Add Current Time to List\nhidden: false\nclass: \"\"\ntooltip: \"\"\nid: \"\"\nstyle: primary\nactions:\n  - type: updateMetadata\n    bindTarget: someList\n    evaluate: true\n    value: \"x == null ? [Date.now()] : [...x, Date.now()]\"\n```\n\n----------------------------------------\n\nTITLE: Multi-Select Input Binding to Another Note\nDESCRIPTION: This example demonstrates a multi-select input field bound to a different note's frontmatter. It uses the `multiSelect` input type, sets a title, and defines four options. It binds to the `multi-select` property in the `other note`.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/Examples.md#_snippet_6\n\nLANGUAGE: meta-bind\nCODE:\n```\nINPUT[multiSelect(\ntitle(A multi select input),\noption(option a),\noption(option b),\noption(option c),\noption(option d)\n):other note#multi-select]\n```\n\n----------------------------------------\n\nTITLE: Meta Bind Button with Multiple Actions\nDESCRIPTION: This snippet defines a Meta Bind button that performs multiple actions when clicked. It first opens a new tab using the 'workspace:new-tab' command and then executes a custom JavaScript file using the 'js' action type.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/Buttons/Button Example.md#_snippet_8\n\nLANGUAGE: YAML\nCODE:\n```\nlabel: This is a button\nclass: test-class\nhidden: false\nid: \"\"\nstyle: primary\nactions:\n  - type: command\n    command: workspace:new-tab\n  - type: js\n    file: \"testJsFile.js\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Ability Scores and Modifiers\nDESCRIPTION: Displays the ability score and its corresponding modifier. The ability score is displayed using `VIEW[**{SCORE}**][text(renderMarkdown)]` to render the score in bold markdown. The modifier is displayed with a `+/-` sign using `concat(isPositive({memory^MOD}) ? '+' : '', string({memory^MOD}))`.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/Advanced Examples/DnD 5e Ability Scores and Modifiers.md#_snippet_1\n\nLANGUAGE: meta-bind\nCODE:\n```\nVIEW[ concat(isPositive({memory^STR_mod}) ? '+' : '', string({memory^STR_mod})) ][math]\n```\n\nLANGUAGE: meta-bind\nCODE:\n```\nVIEW[ concat(isPositive({memory^DEX_mod}) ? '+' : '', string({memory^DEX_mod})) ][math]\n```\n\nLANGUAGE: meta-bind\nCODE:\n```\nVIEW[ concat(isPositive({memory^CON_mod}) ? '+' : '', string({memory^CON_mod})) ][math]\n```\n\nLANGUAGE: meta-bind\nCODE:\n```\nVIEW[ concat(isPositive({memory^INT_mod}) ? '+' : '', string({memory^INT_mod})) ][math]\n```\n\nLANGUAGE: meta-bind\nCODE:\n```\nVIEW[ concat(isPositive({memory^WIS_mod}) ? '+' : '', string({memory^WIS_mod})) ][math]\n```\n\nLANGUAGE: meta-bind\nCODE:\n```\nVIEW[ concat(isPositive({memory^CHR_mod}) ? '+' : '', string({memory^CHR_mod})) ][math]\n```\n\n----------------------------------------\n\nTITLE: Meta Bind Button with Templater Action\nDESCRIPTION: This snippet defines a Meta Bind button that runs a Templater file when clicked. The 'actions' property contains a list of actions, where the first action is of type 'runTemplaterFile' and specifies the path to the Templater template file.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/Buttons/Button Example.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nstyle: default\nlabel: \"Run a templater file\"\nactions:\n  - type: runTemplaterFile\n    templateFile: \"templates/templater/Say Hello Command.md\"\n```\n\n----------------------------------------\n\nTITLE: Meta Bind Button with Custom JS Action\nDESCRIPTION: This snippet defines a Meta Bind button that executes custom JavaScript code when clicked. The 'action' property is of type 'js' and specifies the path to the JavaScript file. It also includes arguments that can be passed to the JavaScript function.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/Buttons/Button Example.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\nstyle: default\nlabel: Run Custom JS\naction:\n  type: js\n  file: testJsFile.js\n  args: \n    greeting: \"Meta Bind User\"\n```\n\n----------------------------------------\n\nTITLE: Meta Bind Button to Add Count to Count2\nDESCRIPTION: This snippet defines a Meta Bind button that adds the value of the 'count' metadata field to the 'count2' metadata field. It utilizes the 'getMetadata' function within the 'value' property to retrieve the current value of 'count'.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/Buttons/Button Example.md#_snippet_19\n\nLANGUAGE: YAML\nCODE:\n```\nlabel: \"Add count to count2\"\nhidden: false\nstyle: default\nactions:\n  - type: updateMetadata\n    bindTarget: count2\n    evaluate: true\n    value: \"x + getMetadata('count')\"\n```\n\n----------------------------------------\n\nTITLE: Meta Bind Button to Decrement Metadata\nDESCRIPTION: This snippet defines a Meta Bind button that decrements a metadata field (count) by 1, ensuring it doesn't go below 0. It uses the 'updateMetadata' action with 'evaluate: true' to execute the JavaScript expression.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/Buttons/Button Example.md#_snippet_17\n\nLANGUAGE: YAML\nCODE:\n```\nlabel: \"-1\"\nhidden: true\nid: \"count-decrement\"\nstyle: default\nactions:\n  - type: updateMetadata\n    bindTarget: count\n    evaluate: true\n    value: Math.max(0, x - 1)\n```\n\n----------------------------------------\n\nTITLE: Number Input Binding to Number1\nDESCRIPTION: This example demonstrates a number input field bound to the `number1` frontmatter property.  The `VIEW` uses slider1 which is a slider input and multiplies the value from slider1 with the number1 value. The resulting value is bound to the `number2` property.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/Examples.md#_snippet_9\n\nLANGUAGE: meta-bind\nCODE:\n```\nINPUT[number:number1]\n```\n\n----------------------------------------\n\nTITLE: Meta Bind Button: Deal Damage\nDESCRIPTION: This snippet defines a meta-bind-button to deal damage to a health property. It updates the `health` metadata property by subtracting the `damage` metadata property. The button is initially hidden and has a destructive style.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/Advanced Examples/Health Tracker.md#_snippet_0\n\nLANGUAGE: meta-bind-button\nCODE:\n```\nlabel: \"Deal\"\nstyle: destructive\nhidden: true\nid: \"deal-damage\"\nactions:\n  - type: updateMetadata\n    bindTarget: health\n    evaluate: true\n    value: x - getMetadata('damage')\n```\n\n----------------------------------------\n\nTITLE: Inline Input Field Example\nDESCRIPTION: This snippet shows how to create a toggle inside a note, that is bound to a frontmatter property named `done`. When the toggle is clicked, the `done` property will switch between `true` and `false`.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/README.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nINPUT[toggle:done]\n```\n\n----------------------------------------\n\nTITLE: Select Input Binding to Another Note\nDESCRIPTION: This example demonstrates a select input field bound to a different note's frontmatter. It uses the `select` input type and defines four options. It binds to the `select` property in the `other note`.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/Examples.md#_snippet_5\n\nLANGUAGE: meta-bind\nCODE:\n```\nINPUT[select(\noption(option a),\noption(option b),\noption(option c),\noption(option d)\n):other note#select]\n```\n\n----------------------------------------\n\nTITLE: Binding Input to Per-File Memory Cache\nDESCRIPTION: These `INPUT` directives demonstrate how to bind a text input element to a per-file in-memory cache using the `memory` keyword. The value entered in the input will be stored and retrieved only within the context of the current file.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/Alternative Metadata Storage/Alternative Metadata Storage.md#_snippet_2\n\nLANGUAGE: Obsidian Meta Bind\nCODE:\n```\n`INPUT[text:memory^test]`\n```\n\nLANGUAGE: Obsidian Meta Bind\nCODE:\n```\n`INPUT[text:memory^test]`\n```\n\n----------------------------------------\n\nTITLE: Meta Bind Button: Reset Health\nDESCRIPTION: This snippet defines a meta-bind-button to reset the health. It updates the `health` metadata property to the value of the `max_health` metadata property. The button is initially hidden and has a primary style.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/Advanced Examples/Health Tracker.md#_snippet_1\n\nLANGUAGE: meta-bind-button\nCODE:\n```\nlabel: \"Reset\"\nstyle: primary\nhidden: true\nid: \"reset-health\"\nactions:\n  - type: updateMetadata\n    bindTarget: health\n    evaluate: true\n    value: getMetadata('max_health')\n```\n\n----------------------------------------\n\nTITLE: Binding Input to Global Memory Cache\nDESCRIPTION: These `INPUT` directives demonstrate how to bind a text input element to a global in-memory cache using the `globalMemory` keyword. The value entered in the input will be stored and retrieved globally within the Obsidian environment.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/Alternative Metadata Storage/Alternative Metadata Storage.md#_snippet_0\n\nLANGUAGE: Obsidian Meta Bind\nCODE:\n```\n`INPUT[text:globalMemory^test]`\n```\n\nLANGUAGE: Obsidian Meta Bind\nCODE:\n```\n`INPUT[text:globalMemory^test]`\n```\n\n----------------------------------------\n\nTITLE: Meta Bind Button to Open External Link\nDESCRIPTION: This snippet defines a Meta Bind button that opens an external link in the default browser when clicked. The 'action' property is of type 'open' and specifies the URL to open.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/Buttons/Button Example.md#_snippet_5\n\nLANGUAGE: YAML\nCODE:\n```\nstyle: default\nid: docs-button\nhidden: true\nlabel: Open External Link\naction:\n  type: open\n  link: https://www.moritzjung.dev/obsidian-meta-bind-plugin-docs/\n```\n\n----------------------------------------\n\nTITLE: Meta Bind Button with Multiple Actions (Sleep, Input)\nDESCRIPTION: This snippet defines a Meta Bind button that opens the quick switcher, waits for 500ms, and then inputs 'PF2e'.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/Buttons/Button Example.md#_snippet_12\n\nLANGUAGE: YAML\nCODE:\n```\nlabel: Show PF2e Examples with Delay\nhidden: false\nid: \"\"\nstyle: default\nactions:\n  - type: command\n    command: switcher:open\n  - type: sleep\n    ms: 500\n  - type: input\n    str: PF2e\n```\n\n----------------------------------------\n\nTITLE: Meta Bind Button Definition\nDESCRIPTION: This snippet defines a Meta Bind button with a specified style, label, class, and action. The action is of type 'command' and executes a specific Obsidian command when the button is clicked.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/Buttons/Button Example.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nstyle: primary\nlabel: Open Meta Bind Playground\nclass: green-button\naction:\n  type: command\n  command: obsidian-meta-bind-plugin:open-playground\n```\n\n----------------------------------------\n\nTITLE: Date Picker Input Binding to Another Note\nDESCRIPTION: This example demonstrates a date picker input field bound to a different note's frontmatter. It uses the `datePicker` input type and binds to the `date` property in the `other note`.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/Examples.md#_snippet_8\n\nLANGUAGE: meta-bind\nCODE:\n```\nINPUT[datePicker():other note#date]\n```\n\n----------------------------------------\n\nTITLE: Viewing Global Memory Cache Value\nDESCRIPTION: This `VIEW` directive displays the value stored in a global in-memory cache. It retrieves the value associated with the key `globalMemory^test123` and displays it as text, followed by the string '456'.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/Alternative Metadata Storage/Alternative Metadata Storage.md#_snippet_1\n\nLANGUAGE: Obsidian Meta Bind\nCODE:\n```\n`VIEW[{globalMemory^test123}456][text]`\n```\n\n----------------------------------------\n\nTITLE: Meta Bind Button with Sleep and Input Actions\nDESCRIPTION: This snippet defines a Meta Bind button that opens the command palette, waits for 1 second, and then types 'help'.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/Buttons/Button Example.md#_snippet_11\n\nLANGUAGE: YAML\nCODE:\n```\nlabel: Sleep\nhidden: false\nid: \"\"\nstyle: default\nactions:\n  - type: command\n    command: command-palette:open\n  - type: sleep\n    ms: 1000\n  - type: input\n    str: help\n```\n\n----------------------------------------\n\nTITLE: Meta Bind Button to Switch to Light Mode\nDESCRIPTION: This snippet defines a Meta Bind button that switches the Obsidian theme to light mode when clicked. It uses the 'command' action type to execute the 'theme:use-light' command.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/Buttons/Button Example.md#_snippet_6\n\nLANGUAGE: YAML\nCODE:\n```\nlabel: Switch to Light Mode\nhidden: false\nid: \"\"\nstyle: destructive\nactions:\n  - type: command\n    command: theme:use-light\n```\n\n----------------------------------------\n\nTITLE: Text Input with Unicode Characters\nDESCRIPTION: This example shows a text input field bound to a frontmatter property with Unicode characters. It uses the `text` input type and binds to the `こんにちは` (Konnichiwa) frontmatter property.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/Examples.md#_snippet_3\n\nLANGUAGE: meta-bind\nCODE:\n```\nINPUT[text:こんにちは]\n```\n\n----------------------------------------\n\nTITLE: Date Input Binding to Another Note\nDESCRIPTION: This example demonstrates a date input field bound to a different note's frontmatter. It uses the `date` input type and binds to the `date` property in the `other note`.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/Examples.md#_snippet_7\n\nLANGUAGE: meta-bind\nCODE:\n```\nINPUT[date():other note#date]\n```\n\n----------------------------------------\n\nTITLE: Meta Bind Button with Sleep and Command Actions\nDESCRIPTION: This snippet defines a Meta Bind button that waits for 1 second and then opens the Meta Bind help.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/Buttons/Button Example.md#_snippet_13\n\nLANGUAGE: YAML\nCODE:\n```\nlabel: Test\nhidden: false\nid: \"\"\nstyle: default\nactions:\n  - type: sleep\n    ms: 1000\n  - type: command\n    command: obsidian-meta-bind-plugin:open-help\n```\n\n----------------------------------------\n\nTITLE: Toggle Input Binding to Toggle1\nDESCRIPTION: This example demonstrates a toggle input field bound to the `toggle1` frontmatter property. It uses the `toggle` input type and uses an empty template.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/Examples.md#_snippet_10\n\nLANGUAGE: meta-bind\nCODE:\n```\nINPUT[][toggle:toggle1]\n```\n\n----------------------------------------\n\nTITLE: Meta Bind Button with Input Action\nDESCRIPTION: This snippet defines a Meta Bind button that opens the command palette and then types 'help'.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/Buttons/Button Example.md#_snippet_9\n\nLANGUAGE: YAML\nCODE:\n```\nlabel: Input\nhidden: false\ntooltip: \"Open command palette and then search for 'help'\"\nid: \"\"\nstyle: default\nactions:\n  - type: command\n    command: command-palette:open\n  - type: input\n    str: help\n```\n\n----------------------------------------\n\nTITLE: Fix Code Quality Issues\nDESCRIPTION: This command automatically fixes formatting and linting errors, checks for type errors, and runs the tests to improve code quality.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/README.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nbun run check:fix\n```\n\n----------------------------------------\n\nTITLE: Install Pack Dependencies with Bun\nDESCRIPTION: This command install pack dependencies for the plugin using Bun. It should be run in the root directory of the project after `bun install`\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nbun run pack:i\n```\n\n----------------------------------------\n\nTITLE: Run Plugin in Dev Mode\nDESCRIPTION: This command builds the plugin in development mode, watches for changes, and builds directly into the example vault inside of the repository.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/README.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nbun run dev\n```\n\n----------------------------------------\n\nTITLE: Meta Bind Button with Create Note Action\nDESCRIPTION: This snippet defines a Meta Bind button that creates a new note in a specified folder.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/Buttons/Button Example.md#_snippet_14\n\nLANGUAGE: YAML\nCODE:\n```\nlabel: Create new Note\nhidden: false\nclass: \"\"\ntooltip: \"\"\nid: \"\"\nstyle: default\nactions:\n  - type: createNote\n    folderPath: templates\n    fileName: asdasd\n    openNote: false\n    openIfAlreadyExists: true\n```\n\n----------------------------------------\n\nTITLE: Meta Bind Button with Templater Create Note Action\nDESCRIPTION: This snippet defines a Meta Bind button that creates a new note using a Templater template.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/Buttons/Button Example.md#_snippet_10\n\nLANGUAGE: YAML\nCODE:\n```\nlabel: Templater\nhidden: false\nid: \"\"\nstyle: default\nactions:\n  - type: templaterCreateNote\n    templateFile: \"templates/templater/Templater Template.md\"\n    fileName: Button Templater Test\n```\n\n----------------------------------------\n\nTITLE: Install Dependencies with Bun\nDESCRIPTION: This command installs the necessary dependencies for the plugin using Bun.  It should be run in the root directory of the project.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nbun install\n```\n\n----------------------------------------\n\nTITLE: Check Code Quality\nDESCRIPTION: This command checks for formatting, linting, type errors, and runs the tests to ensure code quality.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/README.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nbun run check\n```\n\n----------------------------------------\n\nTITLE: Meta Bind Button with Inline JS Action\nDESCRIPTION: This snippet defines a Meta Bind button that executes inline JavaScript code.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/exampleVault/Buttons/Button Example.md#_snippet_15\n\nLANGUAGE: YAML\nCODE:\n```\nlabel: Inline Js\nicon: \"file-code\"\nhidden: false\nclass: \"\"\ntooltip: \"\"\nid: \"\"\nstyle: default\nactions:\n  - type: inlineJS\n    code: console.log(\"Hello world\")\n```\n\n----------------------------------------\n\nTITLE: Build Plugin in Production Mode\nDESCRIPTION: This command builds the plugin in production mode and outputs the built files to the root directory of the repository.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/README.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nbun run build\n```\n\n----------------------------------------\n\nTITLE: Run Tests\nDESCRIPTION: This command executes the test suite for the plugin.\nSOURCE: https://github.com/mprojectscode/obsidian-meta-bind-plugin/blob/undefined/README.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nbun run test\n```"
  }
]