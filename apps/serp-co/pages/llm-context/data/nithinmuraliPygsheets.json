[
  {
    "owner": "nithinmurali",
    "repo": "pygsheets",
    "content": "TITLE: Operations on Worksheet with pygsheets\nDESCRIPTION: This snippet shows how to perform various operations on a worksheet within a Google Spreadsheet using pygsheets, including getting and updating values, inserting rows, resizing, clearing, exporting, finding/replacing cells, and more. It assumes the pygsheets library is imported and authorized and that a worksheet is selected.\nSOURCE: https://github.com/nithinmurali/pygsheets/blob/staging/README.md#_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\n# Get values as 2d array('matrix') which can easily be converted to an numpy aray or as 'cell' list\nvalues_mat = wks.get_values(start=(1,1), end=(20,20), returnas='matrix')\n\n# Get values of - rows A1 to B10, column C, 1st row, 10th row\nwks.get_values_batch(['A1:B10', 'C', '1', (10, None)])\n\n# Get all values of sheet as 2d list of cells\ncell_matrix = wks.get_all_values(returnas='matrix')\n\n# update a range of values with a cell list or matrix\nwks.update_values(crange='A1:E10', values=values_mat)\n\n# update multiple ranges with bath update\nwks.update_values_batch(['A1:A2', 'B1:B2'], [[[1],[2]], [[3],[4]]])\n\n# Insert 2 rows after 20th row and fill with values\nwks.insert_rows(row=20, number=2, values=values_list)\n\n# resize by changing rows and colums\nwks.rows=30\n\n# use the worksheet as a csv\nfor row in wks:\n    print(row)\n\n# get values by indexes\n A1_value = wks[0][0]\n\n# clear all values\nwks.clear()\n\n# Search for a table in the worksheet and append a row to it\nwks.append_table(values=[1,2,3,4])\n\n# export a worksheet as csv\nwks.export(pygsheets.ExportType.CSV)\n\n# Find/Replace cells with string value\ncell_list = worksheet.find(\"query string\")\n\n# Find/Replace cells with regexp\nfilter_re = re.compile(r'(small|big) house')\ncell_list = worksheet.find(filter_re, searchByRegex=True)\ncell_list = worksheet.replace(filter_re, 'some house', searchByRegex=True)\n\n# Move a worksheet in the same spreadsheet (update index)\nwks.index = 2 # index start at 1 , not 0\n\n# Update title\nwks.title = \"NewTitle\"\n\n# Update hidden state\nwks.hidden = False\n\n# working with named ranges\nwks.create_named_range('A1', 'A10', 'prices')\nwks.get_named_range('prices')\nwks.get_named_ranges()  # will return a list of DataRange objects\nwks.delete_named_range('prices')\n\n# apply format\nwks.apply_format(['A1:B1', 'D:E'], [\"NUMBER\", \"TEXT\"])\n\n# Plot a chart/graph\nwks.add_chart(('A1', 'A6'), [('B1', 'B6')], 'Health Trend')\n\n# create drop-downs\nwks.set_data_validation(start='C4', end='E7', condition_type='NUMBER_BETWEEN', condition_values=[2,10], strict=True, showCustomUi=True, inputMessage=\"inut between 2 and 10\")\n\n# set a formula and extend it to more cells\ncell = wks.cell('C1')\ncell.value = '=A1+B1'\nwks.apply_format('C1:C10', cell, 'userEnteredValue.formulaValue')\n```\n\n----------------------------------------\n\nTITLE: Cell Operations with pygsheets\nDESCRIPTION: This snippet shows how to perform operations on individual cells in pygsheets, including updating values, applying formulas, getting neighboring cells, setting number formats, writing notes, setting colors, setting text formats, and syncing changes. It demonstrates both linked and unlinked cell operations.\nSOURCE: https://github.com/nithinmurali/pygsheets/blob/staging/README.md#_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\n# using linked cells\nc1 = worksheet.cell('B1') # created from worksheet, so linked cell\nc1.col = 5  # Now c1 correponds to E1\nc1.value = \"hoho\"  # will change the value of E1\n\n# Or onliner\nworksheet.update_value('B1', 'hehe')\n\n# get a range of cells\ncell_list = worksheet.range('A1:C7')\ncell_list = worksheet.get_values(start='A1', end='C7', returnas='cells')\ncell_list = worksheet.get_row(2, returnas='cells')\n\n\n# add formula\nc1.formula = 'A1+C2'\nc1.formula # '=A1+C2'\n\n# get neighbouring cells\nc2 = c1.neighbour('topright') # you can also specify relative position as tuple eg (1,1)\n\n# set cell format\nc1.set_number_format(pygsheets.FormatType.NUMBER, '00.0000')\n\n# write notes on cell\nc1.note = \"yo mom\"\n\n# set cell color\nc1.color = (1.0, 1.0, 1.0, 1.0) # Red, Green, Blue, Alpha\n\n# set text format\nc1.text_format['fontSize'] = 14\nc1.set_text_format('bold', True)\n\n# sync the changes\n c1.update()\n\n# you can unlink a cell and set all required properties and then link it\n```\n\n----------------------------------------\n\nTITLE: Operations on Spreadsheet with pygsheets\nDESCRIPTION: This snippet shows how to perform various operations on a Google Spreadsheet using pygsheets, including adding, deleting, and unsharing worksheets.  It assumes that the pygsheets library is already imported and authorized and that a spreadsheet is opened.\nSOURCE: https://github.com/nithinmurali/pygsheets/blob/staging/README.md#_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nimport pygsheets\nc = pygsheets.authorize()\nsh = c.open('spreadsheet')\n\n# create a new sheet with 50 rows and 60 colums\nwks = sh.add_worksheet(\"new sheet\",rows=50,cols=60)\n\n# create a new sheet with 50 rows and 60 colums at the begin of worksheets\nwks = sh.add_worksheet(\"new sheet\",rows=50,cols=60,index=0)\n\n# or copy from another worksheet\nwks = sh.add_worksheet(\"new sheet\", src_worksheet='<other worksheet instance>')\n\n# delete this wroksheet\nsh.del_worksheet(wks)\n\n# unshare the sheet\nsh.remove_permissions(\"myNotSoFriend@gmail.com\")\n```\n\n----------------------------------------\n\nTITLE: Getting Cell Objects with pygsheets\nDESCRIPTION: This snippet shows how to obtain cell objects in pygsheets, including creating unlinked cells, linked cells, and retrieving cell values, unformatted values, formulas, notes, and addresses.  Also, it demonstrates getting a range of cells or cells from a specific column.\nSOURCE: https://github.com/nithinmurali/pygsheets/blob/staging/README.md#_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\nc1 = Cell('A1',\"hello\")  # create a unlinked cell\nc1 = worksheet.cell('A1')  # creates a linked cell whose changes syncs instantanously\ncl.value  # Getting cell value\nc1.value_unformatted #Getting cell unformatted value\nc1.formula # Getting cell formula if any\nc1.note # any notes on the cell\nc1.address # address object with cell position\n\ncell_list = worksheet.range('A1:C7')  # get a range of cells \ncell_list = worksheet.col(5, returnas='cell')  # return all cells in 5th column(E)\n```\n\n----------------------------------------\n\nTITLE: Pandas Integration with pygsheets\nDESCRIPTION: This snippet demonstrates how to integrate Pandas DataFrames with pygsheets. It shows how to set the values of a Pandas DataFrame to a worksheet and how to retrieve the values of a worksheet as a DataFrame. Requires the pandas library.\nSOURCE: https://github.com/nithinmurali/pygsheets/blob/staging/README.md#_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\n#set the values of a pandas dataframe to sheet\nwks.set_dataframe(df,(1,1))\n\n#you can also get the values of sheet as dataframe\ndf = wks.get_as_df()\n```\n\n----------------------------------------\n\nTITLE: Opening a Spreadsheet with pygsheets\nDESCRIPTION: This snippet demonstrates different ways to open a Google Spreadsheet using pygsheets, including opening by title, key, enabling TeamDrive support, and creating a new sheet in a specific folder. The code assumes that the pygsheets library is already imported and authorized.\nSOURCE: https://github.com/nithinmurali/pygsheets/blob/staging/README.md#_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\n# You can open a spreadsheet by its title as it appears in Google Docs \nsh = gc.open(\"pygsheetTest\")\n\n# If you want to be specific, use a key\nsht1 = gc.open_by_key('1mwA-NmvjDqd3A65c8hsxOpqdfdggPR0fgfg5nXRKScZAuM')\n\n# open enable TeamDrive support\ngc.drive.enable_team_drive(\"Dqd3A65c8hsxOpqdfdggPR0fgfg\")\n\n# create a spreadsheet in a folder (by id)\nsht2 = gc.create(\"new sheet\", folder=\"<your_folder_id>\")\n```\n\n----------------------------------------\n\nTITLE: Selecting a Worksheet with pygsheets\nDESCRIPTION: This snippet shows how to select a worksheet within a Google Spreadsheet using pygsheets by title, index, or other properties. It assumes the pygsheets library is imported and authorized and that a spreadsheet is opened.\nSOURCE: https://github.com/nithinmurali/pygsheets/blob/staging/README.md#_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nimport pygsheets\nc = pygsheets.authorize()\nsh = c.open('spreadsheet')\n\n# Select worksheet by id, index, title.\nwks = sh.worksheet_by_title(\"my test sheet\")\n\n# By any property\nwks = sh.worksheet('index', 0)\n\n# Get a list of all worksheets\nwks_list = sh.worksheets()\n\n# Or just\nwks = sh[0]\n```\n\n----------------------------------------\n\nTITLE: Getting and Manipulating DataRange pygsheets\nDESCRIPTION: This snippet demonstrates how to get a Range object, make it unbounded, create named ranges, protect ranges, and set format to multiple cells in one go using pygsheets. It shows how to use Datarange object and its methods.\nSOURCE: https://github.com/nithinmurali/pygsheets/blob/staging/README.md#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n# Getting a Range object\nrng = wks.get_values('A1', 'C5', returnas='range')\nrng.start_addr = 'A' # make the range unbounded on rows <Datarange Sheet1!A:B>\ndrange.end_addr = None # make the range unbounded on both axes <Datarange Sheet1>\n\n# Named ranges\nrng.name = 'pricesRange'  # will make this range a named range\nrng = wks.get_named_ranges('commodityCount') # directly get a named range\nrng.name = ''  # will delete this named range\n\n#Protected ranges\nrng.protected = True\nrng.editors = ('users', 'someemail@gmail.com')\n\n# Setting Format\n # first create a model cell with required properties\nmodel_cell = Cell('A1')\nmodel_cell.color = (1.0,0,1.0,1.0) # rose color cell\nmodel_cell.format = (pygsheets.FormatType.PERCENT, '')\n\n # Setting format to multiple cells in one go\nrng.apply_format(model_cell)  # will make all cell in this range rose color and percent format\n# Or if you just want to apply format, you can skip fetching data while creating datarange\nDatarange('A1','A10', worksheet=wks).apply_format(model_cell)\n\n# get cells in range\ncell = rng[0][1]\n```\n\n----------------------------------------\n\nTITLE: Sharing NumPy Array with pygsheets\nDESCRIPTION: This snippet demonstrates how to use pygsheets to open a spreadsheet, update a cell, populate a worksheet with data from a NumPy array, and share the sheet with another user. It requires the pygsheets and NumPy libraries.\nSOURCE: https://github.com/nithinmurali/pygsheets/blob/staging/README.md#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nimport pygsheets\nimport numpy as np\n\ngc = pygsheets.authorize()\n\n# Open spreadsheet and then worksheet\nsh = gc.open('my new sheet')\nwks = sh.sheet1\n\n# Update a cell with value (just to let him know values is updated ;) )\nwks.update_value('A1', \"Hey yank this numpy array\")\nmy_nparray = np.random.randint(10, size=(3, 4))\n\n# update the sheet with array\nwks.update_values('A2', my_nparray.tolist())\n\n# share the sheet with your friend\nsh.share(\"myFriend@gmail.com\")\n```\n\n----------------------------------------\n\nTITLE: Protecting a Sheet in pygsheets\nDESCRIPTION: This example shows how to protect an entire sheet using pygsheets. It creates a `Datarange` object representing the whole sheet and then sets its `protected` property to `True`, restricting editing access.\nSOURCE: https://github.com/nithinmurali/pygsheets/blob/staging/docs/source/examples.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nr = Datarange(worksheet=wks)\n>>> r # this is a datarange unbounded on both indexes\n<Datarange Sheet1>\n>>> r.protected = True # this will make the whole sheet protected\n```\n\n----------------------------------------\n\nTITLE: Batching Spreadsheet Calls pygsheets\nDESCRIPTION: This snippet demonstrates how to batch multiple spreadsheet modification functions into a single call using pygsheets.  It uses `gc.set_batch_mode()` and `gc.run_batch()` to group operations for efficiency. Requires a `cell` object.\nSOURCE: https://github.com/nithinmurali/pygsheets/blob/staging/README.md#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\ngc.set_batch_mode(True)\nwks.merge_cells(\"A1\", \"A2\")\nwks.merge_cells(\"B1\", \"B2\")\nDatarange(\"D1\", \"D5\", wks).apply_format(cell)\ngc.run_batch() # All the above requests are executed here\ngc.set_batch_mode(False)\n```\n\n----------------------------------------\n\nTITLE: Batch API Calls in pygsheets\nDESCRIPTION: This example demonstrates how to batch API calls in pygsheets. Instead of making individual API calls for each update, the changes are queued and then sent in a single batch when `wks.link()` is called, improving efficiency.\nSOURCE: https://github.com/nithinmurali/pygsheets/blob/staging/docs/source/examples.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nwks.unlink()\nfor i in range(10):\n    wks.update_value((1, i), i) # wont call api\nwks.link() # will do all the updates\n```\n\n----------------------------------------\n\nTITLE: Share Numpy Array Example (pygsheets)\nDESCRIPTION: This code snippet demonstrates how to use the pygsheets library to authorize access to Google Sheets, open a specific spreadsheet, update cell values with a string and a NumPy array converted to a list, and then share the spreadsheet with a friend, granting both read and write access.\nSOURCE: https://github.com/nithinmurali/pygsheets/blob/staging/docs/source/index.rst#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport pygsheets\n\nclient = pygsheets.authorize()\n\n# Open the spreadsheet and the first sheet.\nsh = client.open('spreadsheet-title')\nwks = sh.sheet1\n\n# Update a single cell.\nwks.update_value('A1', \"Numbers on Stuff\")\n\n# Update the worksheet with the numpy array values. Beginning at cell 'A2'.\nwks.update_values('A2', my_numpy_array.to_list())\n\n# Share the sheet with your friend. (read access only)\nsh.share('friend@gmail.com')\n# sharing with write access\nsh.share('friend@gmail.com', role='writer')\n```\n\n----------------------------------------\n\nTITLE: Authorize pygsheets with service account file path\nDESCRIPTION: This snippet demonstrates how to authorize pygsheets using a service account's JSON file. It specifies the path to the service account credentials file. The service account authentication is more secure than OAuth.\nSOURCE: https://github.com/nithinmurali/pygsheets/blob/staging/docs/source/authorization.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ngc = pygsheets.authorize(service_file='path/to/service_account_credentials.json')\n```\n\n----------------------------------------\n\nTITLE: Setting Heights of Students using pygsheets\nDESCRIPTION: This code snippet demonstrates how to update cell values and formats, create named ranges, and calculate averages within a Google Sheet using the pygsheets library. The snippet involves setting header styles, updating values for names and heights, and using a named range to calculate the average height.\nSOURCE: https://github.com/nithinmurali/pygsheets/blob/staging/README.md#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n## import pygsheets and open the sheet as given above\n\nheader = wks.cell('A1')\nheader.value = 'Names'\nheader.text_format['bold'] = True # make the header bold\nheader.update()\n\n# or achive the same in oneliner\nwks.cell('B1').set_text_format('bold', True).value = 'heights'\n\n# set the names\nwks.update_values('A2:A5',[['name1'],['name2'],['name3'],['name4']])\n\n# set the heights\nheights = wks.range('B2:B5', returnas='range')  # get the range as DataRange object\nheights.name = \"heights\"  # name the range\nheights.update_values([[50],[60],[67],[66]]) # update the values\nwks.update_value('B6','=average(heights)') # set the avg value of heights using named range\n```\n\n----------------------------------------\n\nTITLE: Data Storage and Formatting Example (pygsheets)\nDESCRIPTION: This code shows how to open a worksheet using pygsheets, set the value and formatting (bold) of a cell, update values in a range of cells, name a range, and set the average of the named range in another cell. It depends on an existing worksheet connection.\nSOURCE: https://github.com/nithinmurali/pygsheets/blob/staging/docs/source/index.rst#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n# open a worksheet as in the first example.\n\nheader = wks.cell('A1')\nheader.value = 'Names'\nheader.text_format['bold'] = True # make the header bold\nheader.update()\n\n# The same can be achieved in one line\nwks.cell('B1').set_text_format('bold', True).value = 'heights'\n\n# set the names\nwks.update_values('A2:A5',[['name1'],['name2'],['name3'],['name4']])\n\n# set the heights\nheights = wks.range('B2:B5', returnas='range')  # get the range\nheights.name = \"heights\"  # name the range\nheights.update_values([[50],[60],[67],[66]]) # update the values\nwks.update_value('B6','=average(heights)') # set get the avg value\n```\n\n----------------------------------------\n\nTITLE: Iterating through rows in a worksheet using pygsheets (Python)\nDESCRIPTION: This code snippet demonstrates how to iterate through each row in a pygsheets worksheet (wks) and print the value of the first cell in each row (row[0]). It assumes that 'wks' is a Worksheet object obtained from a pygsheets Spreadsheet object.\nSOURCE: https://github.com/nithinmurali/pygsheets/blob/staging/docs/source/tips.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfor row in wks:\n    print(row[0])\n```\n\n----------------------------------------\n\nTITLE: Formatting Columns in pygsheets\nDESCRIPTION: This example demonstrates how to format columns in a pygsheets worksheet. It sets column A as percentage format and column B as currency format, then alternates row 1 as white and row 2 as gray. It utilizes DataRange and Cell objects to apply formatting.\nSOURCE: https://github.com/nithinmurali/pygsheets/blob/staging/docs/source/examples.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nmodel_cell = pygsheets.Cell(\"A1\")\n\nmodel_cell.set_number_format(\n    format_type = pygsheets.FormatType.PERCENT,\n    pattern = \"0%\"\n)\n# first apply the percentage formatting\npygsheets.DataRange(\n    left_corner_cell , right_corner_cell , worksheet = wks\n ).apply_format(model_cell)\n\n# now apply the row-colouring interchangeably\ngray_cell = pygsheets.Cell(\"A1\")\ngray_cell.color = (0.9529412, 0.9529412, 0.9529412, 0)\n\nwhite_cell = pygsheets.Cell(\"A2\")\nwhite_cell.color = (1, 1, 1, 0)\n\ncells = [gray_cell, white_cell]\n\nfor r in range(start_row, end_row + 1):\n    print(f\"Doing row {r} ...\", flush = True, end = \"\\r\")\n    wks.get_row(r, returnas = \"range\").apply_format(cells[ r % 2 ], fields = \"userEnteredFormat.backgroundColor\")\n```\n\n----------------------------------------\n\nTITLE: Unlinking and Linking Sheets pygsheets\nDESCRIPTION: This snippet demonstrates how to unlink a sheet, add a note to a cell, and link the cell to multiple worksheets. It showcases basic operations on Cell objects.\nSOURCE: https://github.com/nithinmurali/pygsheets/blob/staging/README.md#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nc.unlink()\nc.note = \"offine note\"\nc.link(wks1, True)\nc.link(wks2, True)\n```\n\n----------------------------------------\n\nTITLE: Authorize pygsheets with service account from environment variable\nDESCRIPTION: This snippet illustrates how to authorize pygsheets using service account credentials stored in an environment variable.  It retrieves the credentials from the specified environment variable. Assumes an environment variable named `GDRIVE_API_CREDENTIALS` is set with content of a service account `.json` file.\nSOURCE: https://github.com/nithinmurali/pygsheets/blob/staging/docs/source/authorization.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ngc = pygsheets.authorize(service_account_env_var = 'GDRIVE_API_CREDENTIALS')\n```\n\n----------------------------------------\n\nTITLE: Authorize pygsheets with client secret path (OAuth)\nDESCRIPTION: This snippet shows how to authorize pygsheets using the client secret file obtained via OAuth. It specifies the path to the client_secret.json file.  It assumes you've downloaded a `client_secret[...].json` file and replaces the default file location.\nSOURCE: https://github.com/nithinmurali/pygsheets/blob/staging/docs/source/authorization.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ngc = pygsheets.authorize(client_secret='path/to/client_secret[...].json')\n```\n\n----------------------------------------\n\nTITLE: Conditional Formatting in pygsheets\nDESCRIPTION: This example shows how to apply conditional formatting to cells in a pygsheets worksheet. It sets the background color of cells A1 to A4 to red if their value is between 1 and 5.\nSOURCE: https://github.com/nithinmurali/pygsheets/blob/staging/docs/source/examples.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nwks.add_conditional_formatting('A1', 'A4', 'NUMBER_BETWEEN', {'backgroundColor':{'red':1}}, ['1','5'])\n```\n\n----------------------------------------\n\nTITLE: Authorize pygsheets with custom credentials object\nDESCRIPTION: This snippet shows how to authorize pygsheets using a custom credentials object.  This allows for more advanced authentication methods and ignores any other authorization parameters. You need to define `my_credentials` before calling `authorize`.\nSOURCE: https://github.com/nithinmurali/pygsheets/blob/staging/docs/source/authorization.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ngc = pygsheets.authorize(custom_credentials=my_credentials)\n```\n\n----------------------------------------\n\nTITLE: Create custom credentials from secret dict\nDESCRIPTION: This snippet demonstrates creating custom credentials from a secret dictionary and then authorizing pygsheets. This provides an example of creating a `service_account.Credentials` object. Requires the `json` and `google.oauth2.service_account` modules.\nSOURCE: https://github.com/nithinmurali/pygsheets/blob/staging/docs/source/authorization.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nSCOPES = ('https://www.googleapis.com/auth/spreadsheets', 'https://www.googleapis.com/auth/drive')\nservice_account_info = json.loads(secret_dict)\nmy_credentials = service_account.Credentials.from_service_account_info(service_account_info, scopes=SCOPES)\ngc = pygsheets.authorize(custom_credentials=my_credentials)\n```\n\n----------------------------------------\n\nTITLE: Accessing a worksheet by index in pygsheets (Python)\nDESCRIPTION: This snippet shows how to access a worksheet within a pygsheets Spreadsheet object (ss) using its index. In this case, it accesses the first worksheet (index 0) and assigns it to the variable 'wks1'. It's important to note that pygsheets uses zero-based indexing for accessing worksheets.\nSOURCE: https://github.com/nithinmurali/pygsheets/blob/staging/docs/source/tips.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nwks1 = ss[0]\n```\n\n----------------------------------------\n\nTITLE: Installing pygsheets from PyPi (Stable)\nDESCRIPTION: This snippet shows how to install the latest stable version of the pygsheets library from PyPi using pip. This is the recommended method for most users.\nSOURCE: https://github.com/nithinmurali/pygsheets/blob/staging/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\npip install pygsheets\n```\n\n----------------------------------------\n\nTITLE: Installing pygsheets from GitHub (Staging)\nDESCRIPTION: This snippet shows how to install the pygsheets library directly from the staging branch on GitHub using pip. This is useful for accessing the latest features and bug fixes, but may be less stable than the PyPi version.\nSOURCE: https://github.com/nithinmurali/pygsheets/blob/staging/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\npip install https://github.com/nithinmurali/pygsheets/archive/staging.zip\n```\n\n----------------------------------------\n\nTITLE: Install Stable pygsheets\nDESCRIPTION: This command installs the stable version of the pygsheets library using pip from PyPI.\nSOURCE: https://github.com/nithinmurali/pygsheets/blob/staging/docs/source/index.rst#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\npip install pygsheets\n```\n\n----------------------------------------\n\nTITLE: Install pygsheets from GitHub\nDESCRIPTION: This command installs the latest version of the pygsheets library directly from the GitHub repository using pip.\nSOURCE: https://github.com/nithinmurali/pygsheets/blob/staging/docs/source/index.rst#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\npip install https://github.com/nithinmurali/pygsheets/archive/master.zip\n```"
  }
]