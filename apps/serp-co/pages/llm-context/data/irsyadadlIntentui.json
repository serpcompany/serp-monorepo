[
  {
    "owner": "irsyadadl",
    "repo": "intentui",
    "content": "TITLE: Setting up Intent UI with Next.js Starter Kit\nDESCRIPTION: Command to create a new Next.js application using the Intent UI starter kit template. This provides a pre-configured Next.js project with Intent UI already integrated and ready to use.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/getting-started/nextjs.mdx#2025-04-15_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app@latest -e https://github.com/intentuilabs/next.js app\n```\n\n----------------------------------------\n\nTITLE: Demonstrating CLI Output for Initial Setup\nDESCRIPTION: Shows the terminal output when running the initial setup command, including the prompt for folder locations and theme selection.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/getting-started/installation.mdx#2025-04-15_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n✔ Initializing.\n? Components folder: src/components\n? Utils folder: src/utils\n? Where would you like to place the CSS file? src/app/globals.css\n? Select a base gray: (Use arrow keys)\n❯ zinc\n  gray\n  slate\n  neutral\n  stone\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Basic Button Usage\nDESCRIPTION: Example of basic Button component usage.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/buttons/button.mdx#2025-04-15_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<How toUse=\"buttons/button/button-basic-demo\" />\n```\n\n----------------------------------------\n\nTITLE: Component Selection Interface in CLI\nDESCRIPTION: Shows the interactive component selection interface displayed when running the add command without specifying components.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/getting-started/installation.mdx#2025-04-15_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n? Select components to add: (Press <space> to select, <a> to toggle all, <i> to invert selection, and <enter> to\n  proceed)\n  ◯ dropdown\n  ◯ dialog\n  ◯ field\n  ◯ forms\n  ◯ collections\n  ◯ date-and-time\n```\n\n----------------------------------------\n\nTITLE: React Hook Form Integration\nDESCRIPTION: Comprehensive example showing integration between React Hook Form and React Aria Components, including validation handling and form submission.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/forms/form.mdx#2025-04-15_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Button, FieldError, Form, Input, Label, TextField } from \"react-aria-components\"\nimport { Controller, useForm } from \"react-hook-form\"\n\nfunction App() {\n  const { handleSubmit, control } = useForm({\n    defaultValues: {\n      name: \"\"\n    }\n  })\n  const onSubmit = (data) => {\n    // Do something with the form data\n  }\n\n  return (\n    <Form onSubmit={handleSubmit(onSubmit)}>\n      <Controller\n        control={control}\n        name=\"name\"\n        rules={{ required: \"Name is required.\" }}\n        render={({\n          field: { name, value, onChange, onBlur, ref },\n          fieldState: { invalid, error }\n        }) => (\n          <TextField\n            name={name}\n            value={value}\n            onChange={onChange}\n            onBlur={onBlur}\n            isRequired\n            validationBehavior=\"aria\"\n            isInvalid={invalid}\n          >\n            <Label>Name</Label>\n            <Input ref={ref} />\n            <FieldError>{error?.message}</FieldError>\n          </TextField>\n        )}\n      />\n      <Button type=\"submit\">Submit</Button>\n    </Form>\n  )\n```\n\n----------------------------------------\n\nTITLE: Form Validation Error Handling\nDESCRIPTION: Demonstrates how to handle validation errors in the Form component and TextField.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/forms/form.mdx#2025-04-15_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Form validationErrors={errors} onSubmit={() => {}}/>\n```\n\nLANGUAGE: tsx\nCODE:\n```\n<TextField errorMessage={errors.name} label=\"Name\" isRequired/>\n```\n\n----------------------------------------\n\nTITLE: Initial Setup Output Example - Next.js Project\nDESCRIPTION: Example output showing the initialization process for Intent UI in a Next.js project, including folder configuration and file creation.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/getting-started/cli.mdx#2025-04-15_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n✔ Initializing.\n? Components folder: src/components\n? Utils folder: src/utils\n? Where would you like to place the CSS file? src/app/globals.css\n✔ Installing dependencies.\n✔ Configuring.\n✔ UI folder created at `src/components/ui`\n✔ Primitive file saved to `src/components/ui/primitive.tsx`\n✔ Classes file saved to `src/utils/classes.ts`\n✔ Theme Provider file saved to `\"src/components/theme-provider.tsx\"`\n✔ Providers file saved to `\"src/components/providers.tsx\"`\n✔ Configuration saved to `intentui.json`\n✔ Installation complete.\n```\n\n----------------------------------------\n\nTITLE: Configuring Root Layout with Theme Provider in Next.js\nDESCRIPTION: Shows how to set up the root layout component with theme provider integration for dark mode support. Uses the Providers component to wrap the application content and includes hydration warning suppression.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/dark-mode/next-js.mdx#2025-04-15_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Providers } from '@/components/providers'\n\nexport default function RootLayout({ children }: Readonly<{ children: React.ReactNode }>) {\n  return (\n    <html lang=\"en\" suppressHydrationWarning>\n      <body>\n        <Providers>\n          {children}\n        </Providers>\n      </body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Intent UI Remix Template\nDESCRIPTION: Command to create a new Remix project using the official Intent UI template. This creates a fully configured Remix project with Intent UI already set up.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/getting-started/remix.mdx#2025-04-15_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-remix@latest --template intentuilabs/remix\n```\n\n----------------------------------------\n\nTITLE: New Project Setup Dialog\nDESCRIPTION: Interactive dialog shown when setting up a new project with Intent UI, demonstrating framework and configuration options.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/getting-started/cli.mdx#2025-04-15_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n? No setup project detected. Do you want to start a new project? (yes/no) yes\n? Which framework do you want to use? Next.js\n? Which package manager do you want to use? Bun\n? Enter the name of your new project: new-project\n? Which Tailwind version do you want to use? (3/4) 4\n...\n...\nProject setup complete!\nTo get started, run: `cd new-project && npm run dev`\n```\n\n----------------------------------------\n\nTITLE: Tanstack Router Provider Implementation\nDESCRIPTION: Provider component for Tanstack Router integration with React Aria Components. This component uses Tanstack Router's navigate function for client-side navigation.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/getting-started/client-side-routing.mdx#2025-04-15_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RouterProvider } from 'react-aria-components';\nimport { Router, RouterProvider as TanstackRouterProvider } from '@tanstack/react-router';\nimport { StrictMode } from 'react';\nimport ReactDOM from 'react-dom/client';\n\nimport { routeTree } from './routeTree.gen';\n\nconst router = new Router({ routeTree });\n\ndeclare module '@tanstack/react-router' {\n  interface Register {\n    router: typeof router;\n  }\n}\n\nconst rootElement = document.getElementById('app')!;\nif (!rootElement.innerHTML) {\n  const root = ReactDOM.createRoot(rootElement);\n  root.render(\n    <StrictMode>\n      <TanstackRouterProvider router={router}>\n        <RouterProvider\n          navigate={(href) => {\n            router.navigate({ to: href });\n            return false;\n          }}\n        >\n          <RouterComponent />\n        </RouterProvider>\n      </TanstackRouterProvider>\n    </StrictMode>,\n  );\n}\n\nfunction RouterComponent() {\n  return router.state.status === 'pending' ? (\n    'Loading...'\n  ) : (\n    <router.outlet />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Intent UI using CLI in Next.js\nDESCRIPTION: Command to initialize a new Intent UI project using the Intent CLI. After running this command, the CLI will guide you through a series of setup questions to configure your project.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/getting-started/nextjs.mdx#2025-04-15_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @intentui/cli@latest init\n```\n\n----------------------------------------\n\nTITLE: Creating UI Component Index for Exports\nDESCRIPTION: Shows how to create an index.ts file in the UI folder to export all components for easier imports throughout the application.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/getting-started/installation.mdx#2025-04-15_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nexport * from \"./primitive\";\nexport * from \"./sidebar\";\nexport * from \"./navbar\";\nexport * from \"./tree\";\nexport * from \"./table\";\nexport * from \"./text-field\";\nexport * from \"./button\";\nexport * from \"./card\";\n// ...\n```\n\n----------------------------------------\n\nTITLE: Installing Intent UI Astro Starter Kit\nDESCRIPTION: Command to create a new Astro project using the Intent UI starter template, providing a pre-configured setup for Intent UI integration\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/getting-started/astro.mdx#2025-04-15_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create astro@latest -- --template intentuilabs/astro\n```\n\n----------------------------------------\n\nTITLE: CLI Setup Process for Intent UI\nDESCRIPTION: Example of the CLI setup process showing the interactive prompts when initializing a new Intent UI project. This demonstrates selecting TypeScript as the language and Next.js as the framework.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/getting-started/nextjs.mdx#2025-04-15_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n✔ No setup project detected. Do you want to start a new project? (Y/n) Yes\n✔ What language do you want to use? TypeScript\n? Which framework do you want to use?\n  Laravel\n❯ Next.js\n  Remix\n  Vite\n```\n\n----------------------------------------\n\nTITLE: Integrating Theme Provider in Root Layout Component\nDESCRIPTION: Sets up the root layout component with ThemeProvider integration. It retrieves the theme from the session, provides it to the ThemeProvider, and renders the application with proper theme context.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/dark-mode/remix.mdx#2025-04-15_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { cssBundleHref } from \"@remix-run/css-bundle\";\nimport {\n  Link,\n  Links,\n  LiveReload,\n  Meta,\n  Outlet,\n  Scripts,\n  ScrollRestoration,\n  json,\n  useLoaderData,\n} from \"@remix-run/react\";\nimport { LinksFunction, LoaderArgs, MetaFunction } from \"@remix-run/node\";\nimport { ThemeProvider, useTheme } from \"~/theme-provider\";\nimport { themeStorage } from \"~/sessions.server\";\nimport { Theme } from \"remix-themes\";\n\nexport const links: LinksFunction = () => [\n  ...(cssBundleHref ? [{ rel: \"stylesheet\", href: cssBundleHref }] : []),\n];\n\nexport const meta: MetaFunction = () => {\n  return [\n    { title: \"New Remix App\" },\n    { name: \"description\", content: \"Welcome to Remix!\" },\n  ];\n};\n\nexport async function loader({ request }: LoaderArgs) {\n  const session = await themeStorage.getSession(request.headers.get(\"Cookie\"));\n  const theme = session.get(\"theme\") || Theme.LIGHT;\n  return json({ theme });\n}\n\nfunction App() {\n  const [theme] = useTheme();\n  return (\n    <html lang=\"en\" className={theme ?? \"\"}>\n      <head>\n        <meta charSet=\"utf-8\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n        <Meta />\n        <Links />\n      </head>\n      <body>\n        <Outlet />\n        <ScrollRestoration />\n        <Scripts />\n        <LiveReload />\n      </body>\n    </html>\n  );\n}\n\nexport default function AppWithProviders() {\n  const data = useLoaderData<typeof loader>();\n  return (\n    <ThemeProvider specifiedTheme={data.theme}>\n      <App />\n    </ThemeProvider>\n  );\n}\n\n```\n\n----------------------------------------\n\nTITLE: Next.js App Layout Implementation\nDESCRIPTION: Example of using the Providers component in a Next.js application layout. This wraps the application with the combined RouterProvider and ThemeProvider.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/getting-started/client-side-routing.mdx#2025-04-15_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport '@/styles/globals.css';\nimport type { Metadata } from 'next';\nimport { Inter } from 'next/font/google';\nimport { Providers } from '@/providers';\n\nconst inter = Inter({ subsets: ['latin'] });\n\nexport const metadata: Metadata = {\n  title: 'Create Next App',\n  description: 'Generated by create next app',\n};\n\nexport default function RootLayout({ children }: { children: React.ReactNode }) {\n  return (\n    <html lang=\"en\">\n      <body className={inter.className}>\n        <Providers>\n          {children}\n        </Providers>\n      </body>\n    </html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Intent UI via CLI\nDESCRIPTION: Initialize a new Intent UI project using the CLI tool, which provides an interactive setup process with framework selection options\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/getting-started/laravel.mdx#2025-04-15_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n✔ No setup project detected. Do you want to start a new project? (Y/n) Yes\n✔ What language do you want to use? Typescript\n? Which framework do you want to use?\n❯ Laravel\n  Next.js\n  Remix\n  Vite\n```\n\n----------------------------------------\n\nTITLE: Next.js Theme Provider Implementation\nDESCRIPTION: Theme provider implementation for Next.js using React Aria Components. This component handles theme preferences and provides SSR support.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/getting-started/client-side-routing.mdx#2025-04-15_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useEffect, useState } from 'react';\nimport { OverlayProvider, ColorScheme, SSRProvider } from 'react-aria-components';\n\nexport function ThemeProvider({ children }: { children: React.ReactNode }) {\n    // Initialize with system color scheme\n    const [colorScheme, setColorScheme] = useState<ColorScheme>('light');\n\n    useEffect(() => {\n        // Update color scheme based on OS settings\n        const media = window.matchMedia('(prefers-color-scheme: dark)');\n        setColorScheme(media.matches ? 'dark' : 'light');\n\n        // Listen for changes\n        function onChange(event: MediaQueryListEvent) {\n            setColorScheme(event.matches ? 'dark' : 'light');\n        }\n\n        media.addEventListener('change', onChange);\n        return () => media.removeEventListener('change', onChange);\n    }, []);\n\n    return (\n        <SSRProvider>\n            <OverlayProvider className={colorScheme}>\n                {children}\n            </OverlayProvider>\n        </SSRProvider>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Running Intent UI Diff Command\nDESCRIPTION: Command to check for differences between Intent UI versions and apply updates to existing components. This helps migrate components to the new version.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/prologue/upgrade-guide.mdx#2025-04-15_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx @intentui/cli@latest diff\n```\n\n----------------------------------------\n\nTITLE: Implementing Inline Scripts for Dark Mode in Astro\nDESCRIPTION: This code snippet demonstrates how to use Astro's inline scripts to retrieve and set the theme preference from localStorage. It checks for user preferences and system settings to determine the initial theme.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/dark-mode/astro.mdx#2025-04-15_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\ndark-mode/astro/inline-script.tsx\n```\n\n----------------------------------------\n\nTITLE: Inertia.js RouterProvider Implementation\nDESCRIPTION: Provider component that combines RouterProvider with ThemeProvider for use with Inertia.js. The navigate function uses Ziggy's route function to handle client-side navigation.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/getting-started/client-side-routing.mdx#2025-04-15_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RouterProvider } from 'react-aria-components';\nimport { router } from '@inertiajs/react';\nimport { ThemeProvider } from './theme-provider';\n\nexport function Providers({ children }: { children: React.ReactNode }) {\n    return (\n        <ThemeProvider>\n            <RouterProvider\n                navigate={href => {\n                    // Check if the href is a route name or a URL\n                    const routePattern = /^[a-zA-Z0-9.]+$/;\n                    if (routePattern.test(href)) {\n                        // If it's a route name, use route() from Ziggy\n                        router.visit(route(href));\n                    } else {\n                        // Otherwise, treat it as a URL\n                        router.visit(href);\n                    }\n                    return false; // Prevent default navigation\n                }}\n            >\n                {children}\n            </RouterProvider>\n        </ThemeProvider>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite with React and Tailwind CSS\nDESCRIPTION: This snippet shows how to set up the Vite configuration file to use React and Tailwind CSS plugins. It imports necessary modules and defines the configuration using defineConfig.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/getting-started/vite.mdx#2025-04-15_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'vite'\nimport react from '@vitejs/plugin-react'\nimport tailwindcss from '@tailwindcss/vite'\n\n// https://vite.dev/config/\nexport default defineConfig({\n  plugins: [\n    tailwindcss(),\n    react()\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing React App with Dark Mode Support in Vite\nDESCRIPTION: Demonstrates how to wrap a React application with ThemeProvider to enable dark mode functionality in a Vite project. This example shows the integration point within the main app entry file.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/dark-mode/vite.mdx#2025-04-15_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react'\nimport ReactDOM from 'react-dom/client'\nimport App from './App.tsx'\nimport './index.css'\nimport { ThemeProvider } from './components/theme-provider.tsx'\n\nReactDOM.createRoot(document.getElementById('root')!).render(\n  <React.StrictMode>\n    <ThemeProvider>\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring RouterProvider with Client-Side Router\nDESCRIPTION: Basic example of setting up RouterProvider with a client-side router's navigate function. This component should be placed at the root of your application to make all React Aria components with href props work with your router.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/getting-started/client-side-routing.mdx#2025-04-15_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RouterProvider } from 'react-aria-components';\nimport { useNavigate } from 'your-router';\n\nexport default function Layout() {\n  let navigate = useNavigate();\n\n  return (\n    <RouterProvider navigate={navigate}>\n      {/* ... */}\n    </RouterProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Intent UI Components to TanStack Router Project\nDESCRIPTION: Command to add specific Intent UI components (text-field, button, and menu) to the TanStack Router project.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/getting-started/tanstack-router.mdx#2025-04-15_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpx @intentui/cli@latest add text-field button menu\n```\n\n----------------------------------------\n\nTITLE: Next.js RouterProvider Implementation\nDESCRIPTION: Provider component that combines RouterProvider with ThemeProvider for Next.js applications. It uses Next.js router for client-side navigation.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/getting-started/client-side-routing.mdx#2025-04-15_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RouterProvider } from 'react-aria-components';\nimport { useRouter } from 'next/navigation';\nimport { ThemeProvider } from './theme-provider';\n\nexport function Providers({ children }: { children: React.ReactNode }) {\n    const router = useRouter();\n\n    return (\n        <ThemeProvider>\n            <RouterProvider navigate={href => {\n                router.push(href);\n                return false; // Prevent default navigation\n            }}>\n                {children}\n            </RouterProvider>\n        </ThemeProvider>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Intent UI Components to Remix Project\nDESCRIPTION: Command to add Intent UI components to an existing Remix project. This interactive CLI tool helps select and add specific components as needed.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/getting-started/remix.mdx#2025-04-15_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx @intentui/cli@latest add\n```\n\n----------------------------------------\n\nTITLE: Inertia.js Application Implementation\nDESCRIPTION: Example of using the Providers component in an Inertia.js application. This wraps the application with the combined RouterProvider and ThemeProvider.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/getting-started/client-side-routing.mdx#2025-04-15_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport './css/app.css';\nimport { createRoot } from 'react-dom/client';\nimport { createInertiaApp } from '@inertiajs/react';\nimport { resolvePageComponent } from 'laravel-vite-plugin/inertia-helpers';\nimport { Providers } from './providers';\n\ncreateInertiaApp({\n    resolve: (name) => resolvePageComponent(`./pages/${name}.tsx`, import.meta.glob('./pages/**/*.tsx')),\n    setup({ el, App, props }) {\n        createRoot(el).render(\n            <Providers>\n                <App {...props} />\n            </Providers>\n        );\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Theme Switcher Component with IntentUI Icons\nDESCRIPTION: Implements a ThemeSwitcher component that toggles between light and dark themes. It uses the useTheme hook to manage theme state and IntentUI icons to display appropriate sun/moon icons.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/dark-mode/remix.mdx#2025-04-15_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { IconMoon, IconSun } from \"@intentui/icons\";\nimport { Theme, useTheme } from \"remix-themes\";\n\nexport function ThemeSwitcher() {\n  const [theme, setTheme] = useTheme();\n\n  const toggleTheme = () => {\n    setTheme((prevTheme) =>\n      prevTheme === Theme.LIGHT ? Theme.DARK : Theme.LIGHT\n    );\n  };\n\n  return (\n    <button\n      onClick={toggleTheme}\n      className=\"rounded-md p-2 hover:bg-gray-100 dark:hover:bg-gray-800\"\n    >\n      {theme === \"light\" ? (\n        <IconMoon className=\"h-5 w-5 text-gray-600 dark:text-gray-400\" />\n      ) : (\n        <IconSun className=\"h-5 w-5 text-gray-600 dark:text-gray-400\" />\n      )}\n    </button>\n  );\n}\n\n```\n\n----------------------------------------\n\nTITLE: Basic Toolbar Usage in React\nDESCRIPTION: Demonstrates the basic implementation of a Toolbar component, showcasing common use cases.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/controls/toolbar.mdx#2025-04-15_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<How isCenter={false} toUse=\"controls/toolbar/toolbar-demo\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Tailwind CSS v4 and Vite Plugin\nDESCRIPTION: Command to install the latest version of Tailwind CSS and the Vite plugin required for Tailwind v4 integration.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/prologue/upgrade-guide.mdx#2025-04-15_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install tailwindcss@next @tailwindcss/vite@next\n```\n\n----------------------------------------\n\nTITLE: Remix RouterProvider Implementation\nDESCRIPTION: Router provider component for Remix applications. This uses Remix's useNavigate hook to handle client-side navigation.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/getting-started/client-side-routing.mdx#2025-04-15_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RouterProvider } from 'react-aria-components';\nimport { useNavigate } from '@remix-run/react';\n\nexport function RouteProvider({ children }: { children: React.ReactNode }) {\n  const navigate = useNavigate();\n\n  return (\n    <RouterProvider\n      navigate={href => {\n        navigate(href);\n        return false;\n      }}\n    >\n      {children}\n    </RouterProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Link Usage in React\nDESCRIPTION: Demonstrates the basic usage of the Link component for navigation within a website or app.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/navigation/link.mdx#2025-04-15_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<How toUse=\"navigation/link/link-demo\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Utility Classes with tailwind-merge and clsx in TypeScript\nDESCRIPTION: This code defines a utility function 'cn' that merges Tailwind CSS classes using tailwind-merge and clsx libraries. It takes multiple class values as input and returns a merged string of CSS classes, handling conflicts appropriately.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/prologue/release-notes.mdx#2025-04-15_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {twMerge} from 'tailwind-merge'\nimport {type ClassValue, clsx} from 'clsx'\n\nexport const cn = (...inputs: ClassValue[]) => twMerge(clsx(inputs))\n```\n\n----------------------------------------\n\nTITLE: Creating Clickable Table Rows with href Property in React\nDESCRIPTION: Demonstrates how to create a clickable link within a table row using the href prop. This enables navigation when the user clicks on a table row.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/collections/table.mdx#2025-04-15_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<TableRow href='/collections/table-demo'/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Reusable Modal Action Component in React\nDESCRIPTION: This code defines a reusable ModalAction component that can be used to create modals with customizable content, actions, and states. It includes props for controlling the modal's open state, action type, and loading state.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/overlays/modal.mdx#2025-04-15_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\ninterface ModalActionProps {\n  state: string | null\n  onOpenChange: () => void\n  actionType: { description: string; action: () => void; confirmText: string; title: string }\n  disabled: boolean\n}\n\nconst ModalAction = (props: ModalActionProps) => (\n  <Modal.Content isOpen={props.state !== null} onOpenChange={props.onOpenChange}>\n    <Modal.Header>\n      <Modal.Title>{props.actionType?.title}</Modal.Title>\n      <Modal.Description>{props.actionType?.description}</Modal.Description>\n    </Modal.Header>\n    <Modal.Footer>\n      <Modal.Close>Cancel</Modal.Close>\n      <Button\n        intent={props.state === \"ban\" ? \"danger\" : \"primary\"}\n        className=\"min-w-24\"\n        isDisabled={props.disabled}\n        onPress={props.actionType?.action}\n      >\n        {props.disabled ? <Loader variant=\"spin\" /> : props.actionType?.confirmText}\n      </Button>\n    </Modal.Footer>\n  </Modal.Content>\n)\n```\n\n----------------------------------------\n\nTITLE: Integrating theme components in Inertia.js app.tsx\nDESCRIPTION: Shows how to implement the ThemeProvider in the main app.tsx file of an Inertia.js project, wrapping the application content to enable theme context throughout the application.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/dark-mode/inertia-js.mdx#2025-04-15_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\napp.tsx\n```\n\n----------------------------------------\n\nTITLE: Configuring Non-Dismissable Modal Overlay in React\nDESCRIPTION: This snippet demonstrates how to set up a modal overlay that cannot be dismissed by the user, typically used for alert dialogs or critical messages.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/overlays/modal.mdx#2025-04-15_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<ModalOverlay isDismissable={false}/>\n```\n\n----------------------------------------\n\nTITLE: Basic Tag Field Usage in React\nDESCRIPTION: Example showing how to import and implement the Tag Field component with a predefined list of tags using useListData for state management.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/forms/tag-field.mdx#2025-04-15_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { TagField } from 'ui'\n\nconst selectedItems = useListData({\n  initialItems: [\n    {\n      id: 1,\n      name: \"Laravel\"\n    },\n    // ...\n  ]\n})\n\n<TagField className=\"max-w-xs\" label=\"Add tag\" list={selectedItems} />\n```\n\n----------------------------------------\n\nTITLE: Creating a Theme Provider Component for Remix\nDESCRIPTION: Implements a ThemeProvider component using remix-themes to manage theme context and handle theme changes. It uses the useTheme hook to access the current theme state.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/dark-mode/remix.mdx#2025-04-15_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createContext, useContext, useState } from \"react\";\nimport { Theme, ThemeProvider as RemixThemeProvider } from \"remix-themes\";\n\ntype ThemeContextType = [\n  Theme | null,\n  React.Dispatch<React.SetStateAction<Theme | null>>\n];\n\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\nexport function ThemeProvider({\n  children,\n  specifiedTheme,\n}: {\n  children: React.ReactNode;\n  specifiedTheme: Theme | null;\n}) {\n  const [theme, setTheme] = useState<Theme | null>(() => {\n    return specifiedTheme;\n  });\n\n  return (\n    <ThemeContext.Provider value={[theme, setTheme]}>\n      <RemixThemeProvider specifiedTheme={theme} themeAction=\"/action/set-theme\">\n        {children}\n      </RemixThemeProvider>\n    </ThemeContext.Provider>\n  );\n}\n\nexport function useTheme() {\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n  }\n  return context;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Disabling Individual Tabs in TSX\nDESCRIPTION: This code snippet demonstrates how to disable specific tabs within a tab group by setting the isDisabled prop on individual Tab components. This allows for selectively disabling tabs while keeping others active.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/navigation/tabs.mdx#2025-04-15_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<Tab isDisabled id=\"c\">Contact</Tab>\n<Tab isDisabled id=\"a\">About Us</Tab>\n```\n\n----------------------------------------\n\nTITLE: Field Component MDX Documentation\nDESCRIPTION: MDX documentation file describing the Field component, its usage, installation options, and integration with other form components like TextField and Checkbox.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/forms/field.mdx#2025-04-15_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: \"Field\"\ndescription: Field's a core piece every other component uses. It flexes reusable styles, showing up in inputs, labels, descriptions, and more.\norder: 2\npublished: true\nstatus: primitive\n---\n\n## Basic\nThis is a basic component that can be integrated into other components such as [TextField](/docs/components/forms/text-field), [Checkbox](/docs/components/forms/checkbox), and more.\n<How minW72 toUse=\"forms/text-field/text-field-demo\" />\n\n## Installation\n<Installation options={{ isComponent: true }} items={['field']}/>\n\n## Manual Installation\n<Installation options={{ isManual: true }} items={['react-aria-components']}/>\n\n<SourceCode toShow='field'/>\n```\n\n----------------------------------------\n\nTITLE: Next.js Controlled Navbar\nDESCRIPTION: Implementation of controlled navbar state management with Next.js\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/layouts/navbar.mdx#2025-04-15_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { usePathname } from \"next/navigation\"\n\nexport function AppNavbar({ children, ...props }: React.ComponentProps<typeof Navbar>) {\n  const pathname = usePathname();\n  const [isOpen, setIsOpen] = useState(false);\n\n  React.useEffect(() => setIsOpen(false), [pathname]);\n\n  return (\n    <Navbar isOpen={isOpen} onOpenChange={setIsOpen} {...props}>\n```\n\n----------------------------------------\n\nTITLE: Creating a Theme Switcher Component in Astro\nDESCRIPTION: This code creates a theme switcher component that allows users to toggle between light and dark modes. It requires the @intentui/icons package for the sun and moon icons used in the toggle button.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/dark-mode/astro.mdx#2025-04-15_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\ndark-mode/astro/theme-switcher.tsx\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Label Color Picker in React\nDESCRIPTION: Example showing how to create a color picker with a dynamic label that updates based on the selected color value. Uses useState hook to manage the color state and displays the hex value as the label.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/colors/color-picker.mdx#2025-04-15_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ColorPicker, defaultColor } from \"ui\"\n\nconst [color, setColor] = useState(defaultColor)\nreturn <ColorPicker label={color.toString('hex')} value={color} onChange={setColor} />\n```\n\n----------------------------------------\n\nTITLE: Keyboard Component Documentation in Markdown\nDESCRIPTION: Documentation for keyboard navigation component including installation instructions and integration notes with other components like Menu and CommandMenu.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/controls/keyboard.mdx#2025-04-15_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: \"Keyboard\"\ndescription: Keyboard and focus support ensures smooth navigation with keys, essential for users without a mouse and appreciated by power users for quick access.\norder: 5\nreferences: [\"https://react-spectrum.adobe.com/react-aria/interactions.html#keyboard-and-focus-behavior\"]\npublished: true\nstatus: primitive\n---\n\n## Basic\nThere's not much to showcase here, but you can explore related components such as the [Menu](/docs/components/collections/menu) and [CommandMenu](/docs/components/controls/command-menu).\n\n<Note>\n  Just a heads up: incorporating components like **menu** or **command menu** automatically integrates the keyboard component as well. There's no need to install it separately.\n</Note>\n\n## Installation\n<Installation options={{ isComponent: true }} items={['keyboard']} />\n\n## Manual Installation\n<Installation options={{ isManual: true }} items={['react-aria-components']} />\n<SourceCode toShow='keyboard' />\n```\n\n----------------------------------------\n\nTITLE: Creating Stacked Area Chart in React\nDESCRIPTION: This snippet illustrates the implementation of a stacked area chart, which is useful for displaying multiple data sets on the same chart. It utilizes the Recharts library's stacking capabilities.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/charts/area-chart.mdx#2025-04-15_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<How withNoPadding={true} isCenter={false} toUse=\"charts/area/area-chart-stacked-demo\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Action Types for Modal in React\nDESCRIPTION: This function defines different action types for the modal, returning an object with title, description, confirm text, and action based on the provided state. It includes a default case for handling unknown states.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/overlays/modal.mdx#2025-04-15_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nconst actionType = (t: string | null) => {\n  const initialsState = {\n    title: '',\n    description: '',\n    confirmText: '',\n    action: () => {}\n  }\n\n  switch (t) {\n    case 'delete': ...\n    case 'ban': ...\n    case 'restore': ...\n    default:\n      return initialsState\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Remix Root Component Implementation\nDESCRIPTION: Example of using the RouteProvider component in a Remix application's root component. This wraps the application with RouterProvider to enable React Aria component navigation.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/getting-started/client-side-routing.mdx#2025-04-15_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport { cssBundleHref } from '@remix-run/css-bundle';\nimport type { LinksFunction } from '@remix-run/node';\nimport {\n  Links,\n  LiveReload,\n  Meta,\n  Outlet,\n  Scripts,\n  ScrollRestoration,\n} from '@remix-run/react';\nimport { RouteProvider } from './components/router-provider';\n\nexport const links: LinksFunction = () => [\n  ...(cssBundleHref ? [{ rel: 'stylesheet', href: cssBundleHref }] : []),\n];\n\nexport default function App() {\n  return (\n    <html lang=\"en\">\n      <head>\n        <meta charSet=\"utf-8\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n        <Meta />\n        <Links />\n      </head>\n      <body>\n        <RouteProvider>\n          <Outlet />\n        </RouteProvider>\n        <ScrollRestoration />\n        <Scripts />\n        <LiveReload />\n      </body>\n    </html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Basic Drawer Component in React\nDESCRIPTION: Demonstrates the basic usage of the Drawer component, which is a slide-in overlay for extra content or options. It's anchored to the screen edge for quick access.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/overlays/drawer.mdx#2025-04-15_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<How toUse=\"overlays/drawer/drawer-basic-demo\" />\n```\n\n----------------------------------------\n\nTITLE: Revealable Password Text Field\nDESCRIPTION: Implementation of a password text field with reveal functionality\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/forms/text-field.mdx#2025-04-15_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n<How minW72 toUse=\"forms/text-field/text-field-revealable-demo\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Color Swatch Picker Structure\nDESCRIPTION: Markdown documentation structure defining the component's features, installation process, and usage examples with references to Adobe's React Spectrum implementation.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/colors/color-swatch-picker.mdx#2025-04-15_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: \"Color Swatch Picker\"\ndescription: A grid-based selection tool that presents a set of predefined colors for easy and consistent color choices.\norder: 5\npublished: true\nreferences: [\"https://react-spectrum.adobe.com/react-aria/ColorSwatchPicker.html#props\"]\n---\n\n## Basic\nA color swatch picker allows users to choose a color from a predefined set.\n<How toUse=\"colors/color-swatch/color-swatch-picker-demo\" />\n\n## Installation\n<Installation options={{isComponent: true}} items={['color-swatch-picker']}/>\n\n## Composed Components\n<Composed components={['color-swatch']}/>\n\n## Manual Installation\n<Installation options={{isManual: true}} items={['react-aria-components']}/>\n<SourceCode toShow='color-swatch-picker'/>\n\n## Anatomy\n<Anatomy show='color-swatch-picker-anatomy'/>\n\n## Controlled\nThe color swatch can be managed in a controlled manner.\n<How toUse=\"colors/color-swatch/color-swatch-controlled-demo\" />\n\n## Disabled\nWhile you can disable individual picker items, disabling the entire picker is possible but generally not recommended.\n<How toUse=\"colors/color-swatch/color-swatch-picker-item-disabled-demo\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Collapsible Sidebar Groups\nDESCRIPTION: Creating collapsible groups within a sidebar using SidebarDisclosureGroup. This allows for organizing multiple items under expandable sections.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/layouts/sidebar.mdx#2025-04-15_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n{sections.map((section, sectionIndex) => (\n  <SidebarDisclosureGroup defaultExpandedKeys={[1, 2]} key={sectionIndex}>\n    <SidebarDisclosure id={sectionIndex + 1}>\n      <SidebarDisclosureTrigger>\n        <section.icon />\n        <SidebarLabel> {section.label}</SidebarLabel>\n      </SidebarDisclosureTrigger>\n      <SidebarDisclosurePanel>\n        {section.items.map((item, itemIndex) => (\n          <SidebarItem key={itemIndex} href=\"#\">\n            {({ isHovered }) => (\n              <>\n                <i aria-hidden className=\"content-center size-4\">\n                  <IconBullet className={`${isHovered ? \"fill-sky-500 text-sky-500\" : \"\"} size-2 m-auto`} />\n                </i>\n                <SidebarLabel>{item}</SidebarLabel>\n              </>\n            )}\n          </SidebarItem>\n        ))}\n      </SidebarDisclosurePanel>\n    </SidebarDisclosure>\n  </SidebarDisclosureGroup>\n))}\n\nconst sections = [\n  {\n    icon: IconNotes,\n    label: \"Blog\",\n    items: [\"Articles\", \"Categories\", \"Tags\", \"Comments\", \"Authors\"]\n  },\n  {\n    icon: IconStore,\n    label: \"Commerce\",\n    items: [\"Orders\", \"Products\", \"Customers\", \"Coupons\", \"Discounts\"]\n  },\n  {\n    icon: IconWhiteboard,\n    label: \"Analytics\",\n    items: [\"Reports\", \"Traffic\", \"Conversions\", \"Audience\", \"Engagement\"]\n  },\n  {\n    icon: IconSettings,\n    label: \"Settings\",\n    items: [\"General\", \"Profile\", \"Billing\", \"Notifications\", \"Integrations\"]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Setting up Intent UI with Laravel Installer\nDESCRIPTION: Create a new Laravel project with Intent UI pre-configured using the Laravel installer\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/getting-started/laravel.mdx#2025-04-15_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx @intentui/cli@latest init\n```\n\n----------------------------------------\n\nTITLE: Setting Disabled Menu Items in TSX\nDESCRIPTION: Example showing how to disable specific menu items using the disabledKeys prop in Menu.Content\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/collections/menu.mdx#2025-04-15_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<Menu.Content disabledKeys={['gsu']} />\n```\n\n----------------------------------------\n\nTITLE: Basic Toast Usage with Button\nDESCRIPTION: Demonstrates how to trigger a basic toast notification using a button click event.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/statuses/toast.mdx#2025-04-15_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n<Button onPress={() => toast('Someone requested to delete this product')}>\n  Delete\n</Button>\n```\n\n----------------------------------------\n\nTITLE: Defining CSS Variables for Sidebar Theming\nDESCRIPTION: CSS variables for styling the sidebar with light and dark mode support. Defines the base sidebar color and foreground color using OKLCH color space.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/layouts/sidebar.mdx#2025-04-15_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n@theme {\n  --color-sidebar: var(--sidebar);\n  --color-sidebar-fg: var(--sidebar-fg);\n}\n\n@layer base {\n  :root {\n    --sidebar: oklch(0.967 0.001 286.375);\n    --sidebar-fg: oklch(0.141 0.005 285.823);\n  }\n\n  .dark {\n    --sidebar: oklch(0.16 0.006 285.885);\n    --sidebar-fg: oklch(0.985 0 0);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Select Option with Icon in React\nDESCRIPTION: Demonstrates how to properly structure a Select Option that includes an icon alongside text. When an option includes non-text elements like icons or avatars, the Select.Label component must be explicitly used to wrap the text content.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/pickers/select.mdx#2025-04-15_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Select.Option id=\"discord\" textValue=\"Discord\">\n  <IconBrandDiscord />\n  <Select.Label>Discord</Select.Label>\n</Select.Option>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Button Intents\nDESCRIPTION: Example of Button component with different intents (color schemes).\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/buttons/button.mdx#2025-04-15_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<How toUse=\"buttons/button/button-intent-demo\" />\n```\n\n----------------------------------------\n\nTITLE: Using ModalAction Component in React\nDESCRIPTION: This snippet demonstrates how to use the ModalAction component, passing in the necessary props to control its behavior and content.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/overlays/modal.mdx#2025-04-15_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<ModalAction\n  state={state}\n  onOpenChange={closeModal}\n  actionType={actionType(state)}\n  disabled={loading}\n/>\n```\n\n----------------------------------------\n\nTITLE: Setting Dock Collapsible Sidebar\nDESCRIPTION: Implementation of a collapsible sidebar that docks to a minimal state showing only icons when toggled. Hovering over an icon reveals a tooltip.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/layouts/sidebar.mdx#2025-04-15_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<Sidebar intent=\"dock\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Default Sidebar Intent\nDESCRIPTION: Basic usage of the Sidebar component with the default intent. This sets the appearance to a traditional sidebar layout often used for navigation.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/layouts/sidebar.mdx#2025-04-15_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Sidebar intent=\"default\" />\n```\n\n----------------------------------------\n\nTITLE: Nesting Disclosure Groups in React with IntentUI\nDESCRIPTION: Demonstrates how to create nested disclosure groups using the DisclosurePanel and DisclosureGroup components. The code shows the structure for nesting, including the use of a span within the trigger for proper styling.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/navigation/disclosure-group.mdx#2025-04-15_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<DisclosurePanel className=\"bg-muted\">\n  <DisclosureGroup allowsMultipleExpanded>\n    {item.children.map((child, childIndex) => (\n      <Disclosure key={childIndex} id={childIndex}>\n        <DisclosureTrigger>\n          <span>\n\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Input OTP Component in React\nDESCRIPTION: Demonstrates the basic implementation of the Input OTP component. This snippet shows how to integrate the component into a React application for handling one-time password inputs.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/forms/input-otp.mdx#2025-04-15_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<How toUse=\"forms/input-otp/input-otp-demo\"/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Separator in Input OTP Component\nDESCRIPTION: Demonstrates how to add separators between OTP input groups using the InputOTPSeparator component, enhancing the visual structure of the input field.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/forms/input-otp.mdx#2025-04-15_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<How toUse=\"forms/input-otp/input-otp-separator-demo\"/>\n```\n\n----------------------------------------\n\nTITLE: Creating Controlled Input OTP Component\nDESCRIPTION: Shows how to implement a controlled version of the Input OTP component using the 'value' and 'onChange' props, allowing for more advanced state management and validation.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/forms/input-otp.mdx#2025-04-15_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<How toUse=\"forms/input-otp/input-otp-controlled-demo\"/>\n```\n\n----------------------------------------\n\nTITLE: Adding Badges to Sidebar Items\nDESCRIPTION: Implementing badge indicators in sidebar items to show counts, notifications, or status. The badge prop can accept different formats including numbers and strings.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/layouts/sidebar.mdx#2025-04-15_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n<SidebarSection>\n  {navigation.map((item, index) => (\n    <SidebarItem key={index} isCurrent={item.isCurrent} href=\"#\" badge={item?.badge}>\n      {item.icon}\n      <SidebarLabel>{item.label}</SidebarLabel>\n    </SidebarItem>\n  ))}\n</SidebarSection>\n\nconst navigation = [\n  { label: \"Overview\", icon: <IconDashboard />, isCurrent: true, badge: undefined },\n  { label: \"Orders\", icon: <IconCart />, isCurrent: false, badge: 24 },\n  { label: \"Products\", icon: <IconCube />, isCurrent: false, badge: \"31.51K\" },\n  { label: \"Customers\", icon: <IconPeople />, isCurrent: false, badge: \"12K\" },\n  { label: \"Reports\", icon: <IconChartBar />, isCurrent: false, badge: 3 },\n  { label: \"Settings\", icon: <IconGear />, isCurrent: false, badge: undefined }\n]\n```\n\n----------------------------------------\n\nTITLE: Implementing ShowMore Component with Icon Animation in React\nDESCRIPTION: Example of how to use the ShowMore component with a chevron icon that rotates when the component is expanded. The component uses a render prop to access the selected state and conditionally render content and transform the icon.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/surfaces/show-more.mdx#2025-04-15_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { IconChevronLgDown } from \"@intentui/icons\"\nimport { ShowMore } from \"@/components/ui/show-more\"\nimport { twMerge } from \"tailwind-merge\"\n\n<ShowMore>\n  {({ isSelected }) => (\n    <>\n      Show {isSelected ? \"less\" : \"more\"}\n      <IconChevronLgDown\n        className={twMerge(\n          isSelected ? \"rotate-180\" : \"\",\n          \"size-4 transition-transform duration-200\"\n        )}\n      />\n    </>\n  )}\n</ShowMore>\n```\n\n----------------------------------------\n\nTITLE: Controlled Checkbox in React\nDESCRIPTION: Shows how to create a controlled Checkbox component using the 'value' prop.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/forms/checkbox.mdx#2025-04-15_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<How minW72 toUse=\"forms/checkbox/checkbox-controlled-demo\" />\n```\n\n----------------------------------------\n\nTITLE: Basic Date Range Picker Implementation\nDESCRIPTION: Basic usage example of the Date Range Picker component that allows users to select a range of dates in a single interaction.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/date-and-time/date-range-picker.mdx#2025-04-15_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<DateRangePicker />\n```\n\n----------------------------------------\n\nTITLE: Custom Validation in Date Range Picker\nDESCRIPTION: Example of implementing custom validation rules using the validate function to evaluate the selected date range.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/date-and-time/date-range-picker.mdx#2025-04-15_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<DateRangePicker validate={value => validateDateRange(value)} />\n```\n\n----------------------------------------\n\nTITLE: Handling Command Menu Actions to Close Palette\nDESCRIPTION: Example of using the onAction prop to close the command palette when a specific action type is performed.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/controls/command-menu.mdx#2025-04-15_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<CommandMenu\n  onAction={(action) => {\n    if (action.type === 'close') {\n      setIsOpen(false)\n    }\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Setting Sidebar Position with the 'side' Prop\nDESCRIPTION: Shows how to configure the side position of the Sidebar component, allowing it to be placed on either the left or right side of the page.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/layouts/sidebar.mdx#2025-04-15_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<Sidebar side='left | right'/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Theme Session Management in Remix\nDESCRIPTION: Sets up session management for theme preferences using the createCookieSessionStorage function to store and retrieve theme information.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/dark-mode/remix.mdx#2025-04-15_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createCookieSessionStorage } from \"@remix-run/node\";\n\nexport const themeStorage = createCookieSessionStorage({\n  cookie: {\n    name: \"theme\",\n    secure: true,\n    secrets: [\"s3cr3t\"],\n    sameSite: \"lax\",\n    path: \"/\",\n    httpOnly: true,\n  },\n});\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite for Tailwind CSS v4\nDESCRIPTION: Updated Vite configuration file that includes the Tailwind CSS plugin for v4. The highlighted lines show the import and usage of the plugin.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/prologue/upgrade-guide.mdx#2025-04-15_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'vite';\nimport tailwindcss from '@tailwindcss/vite';\n\nexport default defineConfig({\n  plugins: [\n    tailwindcss()\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Icons to Area Chart in React\nDESCRIPTION: This snippet illustrates how to add icons to an area chart, enhancing its visual appeal and information density. It integrates custom icons with the Recharts library's area chart component.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/charts/area-chart.mdx#2025-04-15_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<How withNoPadding={true} isCenter={false} toUse=\"charts/area/area-chart-icon-demo\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Expanded Stacked Area Chart in React\nDESCRIPTION: This code demonstrates how to create an expanded stacked area chart, which provides a different visualization of multiple data sets. It uses the stackedExpanded property of the Recharts library.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/charts/area-chart.mdx#2025-04-15_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<How withNoPadding={true} isCenter={false} toUse=\"charts/area/area-chart-stacked-expanded-demo\" />\n```\n\n----------------------------------------\n\nTITLE: Inertia.js Layout Integration\nDESCRIPTION: Demonstrates how to implement a persistent layout with Inertia.js\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/layouts/navbar.mdx#2025-04-15_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nHome.layout = (page: React.ReactNode) => <AppLayout children={page} />\n```\n\n----------------------------------------\n\nTITLE: Closing Command Palette on Navigation in Next.js\nDESCRIPTION: Implementation for automatically closing the command palette when navigating to a new page using Next.js hooks.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/controls/command-menu.mdx#2025-04-15_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nexport function CommandPalette({ open, setOpen }: Props) {\n  const pathname = usePathname()\n\n  useEffect(() => {\n    setOpen(false)\n  }, [pathname])\n  return (...)\n```\n\n----------------------------------------\n\nTITLE: Implementing Disabled ListBox Item in React TSX\nDESCRIPTION: Example of creating a disabled ListBox item using the isDisabled prop. This prevents user interaction with the specific item while maintaining visibility.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/collections/list-box.mdx#2025-04-15_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<ListBoxItem isDisabled>Disabled</ListBoxItem>\n```\n\n----------------------------------------\n\nTITLE: Configuring Local Fonts in Next.js\nDESCRIPTION: Shows how to configure and import local fonts in a Next.js application using the next/font/local API.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/getting-started/installation.mdx#2025-04-15_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport localFont from 'next/font/local'\n\nconst fontSans = localFont({\n  src: [{path: './fonts/Inter.woff2'}],\n  variable: '--font-sans'\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Sidebar Footer with User Profile\nDESCRIPTION: Adding a footer to the sidebar containing a user profile menu. The footer adapts to the sidebar's collapsed state and provides access to user-related actions.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/layouts/sidebar.mdx#2025-04-15_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\n<Sidebar {...props}>\n  ...\n  <SidebarFooter>\n    <Menu>\n      <Menu.Trigger aria-label=\"Profile\" data-slot=\"menu-trigger\">\n        <Avatar shape=\"square\" src=\"/images/avatar/cobain.jpg\" />\n        <div className=\"group-data-[collapsible=dock]:hidden text-sm\">\n          Kurt Cobain\n          <span className=\"block -mt-0.5 text-muted-fg\">kurt@cobain.com</span>\n        </div>\n        <IconChevronLgDown className=\"absolute right-3 transition-transform size-4 group-pressed:rotate-180\" />\n      </Menu.Trigger>\n      <Menu.Content placement=\"bottom right\" className=\"sm:min-w-(--trigger-width)\">\n        <Menu.Item/>\n      </Menu.Content>\n    </Menu>\n  </SidebarFooter>\n</Sidebar>\n```\n\n----------------------------------------\n\nTITLE: Sticky Navbar Implementation\nDESCRIPTION: Demonstrates how to make the navbar sticky\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/layouts/navbar.mdx#2025-04-15_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Navbar isSticky />\n```\n\n----------------------------------------\n\nTITLE: Manual Installation of Button Dependencies\nDESCRIPTION: Instructions for manually installing the required dependencies for the Button component.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/buttons/button.mdx#2025-04-15_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Installation options={{isManual: true}} items={['react-aria-components', 'tailwind-variants']}/>\n```\n\n----------------------------------------\n\nTITLE: Using Controlled Drawer Component in React\nDESCRIPTION: Demonstrates how to control the Drawer's state programmatically.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/overlays/drawer.mdx#2025-04-15_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<How toUse=\"overlays/drawer/drawer-controlled-demo\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Intent UI in TanStack Router Project\nDESCRIPTION: Command to initialize Intent UI in the TanStack Router project, which will prompt for setup questions and configure the project accordingly.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/getting-started/tanstack-router.mdx#2025-04-15_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpx @intentui/cli@latest init --force\n```\n\n----------------------------------------\n\nTITLE: Basic Pie Chart Component Usage\nDESCRIPTION: Implementation instructions for a basic pie chart visualization using the recharts library to display part-to-whole relationships.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/charts/pie-chart.mdx#2025-04-15_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<How withNoPadding={true} isCenter={false} toUse=\"charts/pie/pie-chart-basic-demo\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Non-Auto-Closing Toast\nDESCRIPTION: Shows how to create a toast that doesn't automatically close and includes action buttons.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/statuses/toast.mdx#2025-04-15_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\ntoast('Someone requested to delete this product', {\n    duration: Infinity,\n    cancel: {\n        label: 'Cancel',\n        onClick: () => alert('Cancelled')\n    },\n    action: {\n        label: 'Delete',\n        onClick: () => alert('Deleted')\n    },\n})\n```\n\n----------------------------------------\n\nTITLE: Displaying Button Source Code\nDESCRIPTION: Component to display the source code of the Button component.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/buttons/button.mdx#2025-04-15_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<SourceCode toShow='button'/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested Drawers in React\nDESCRIPTION: Shows how to nest Drawer components inside each other for more complex layouts.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/overlays/drawer.mdx#2025-04-15_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n<How toUse=\"overlays/drawer/drawer-nested-demo\" />\n```\n\n----------------------------------------\n\nTITLE: Controlled Toggle State\nDESCRIPTION: Implementation of a controlled toggle button using the isSelected prop.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/buttons/toggle.mdx#2025-04-15_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<How toUse=\"buttons/toggle/toggle-controlled-demo\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Intent UI via Composer\nDESCRIPTION: Set up a new Laravel project with Intent UI using Composer package manager\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/getting-started/laravel.mdx#2025-04-15_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncomposer create-project intentui/laravel app\n```\n\n----------------------------------------\n\nTITLE: Basic Sheet Header Usage with String Title\nDESCRIPTION: Demonstrates the simplest way to use Sheet.Header by directly passing a string as its child, which automatically renders as the title.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/overlays/sheet.mdx#2025-04-15_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Sheet.Header>\n  Title\n</Sheet.Header>\n```\n\n----------------------------------------\n\nTITLE: Controlled Pie Chart Component\nDESCRIPTION: Implementation of a controlled pie chart with dynamic data management capabilities.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/charts/pie-chart.mdx#2025-04-15_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n<How withNoPadding={true} isCenter={false} toUse=\"charts/pie/pie-chart-controlled-demo\"/>\n```\n\n----------------------------------------\n\nTITLE: Displaying Button Anatomy\nDESCRIPTION: Component to show the anatomy of the Button component.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/buttons/button.mdx#2025-04-15_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Anatomy show='button-anatomy'/>\n```\n\n----------------------------------------\n\nTITLE: Customizing Letter Spacing for Headings in React\nDESCRIPTION: This snippet shows how to adjust letter spacing for headings. It uses the 'tracking' prop to customize the letter spacing and demonstrates this feature using a custom How component.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/surfaces/heading.mdx#2025-04-15_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<How toUse=\"surfaces/heading/heading-tracking-demo\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Disabled Context Menu Items with disabledKeys Prop\nDESCRIPTION: This snippet demonstrates how to disable specific context menu items by passing an array of keys to the disabledKeys prop of the ContextMenu.Content component. In this example, an item with the key 'gsu' is disabled.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/controls/context-menu.mdx#2025-04-15_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<ContextMenu.Content disabledKeys={['gsu']} />\n```\n\n----------------------------------------\n\nTITLE: Configuring Sidebar Keyboard Shortcut\nDESCRIPTION: Demonstrates how to customize the keyboard shortcut used to collapse the sidebar. The default shortcut is ⌘B, but this example shows how to change it to a different key.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/layouts/sidebar.mdx#2025-04-15_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n<Sidebar shortcut=\"1\" />\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Button Sizes\nDESCRIPTION: Example of Button component in different sizes.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/buttons/button.mdx#2025-04-15_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<How toUse=\"buttons/button/button-size-demo\" />\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Button with Icon\nDESCRIPTION: Example of Button component with an icon.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/buttons/button.mdx#2025-04-15_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n<How toUse=\"buttons/button/button-icon-demo\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Sidebar Header\nDESCRIPTION: Adding a custom header to the sidebar for branding or navigation purposes. The header adjusts its appearance based on the sidebar's collapsed state.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/layouts/sidebar.mdx#2025-04-15_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n<Sidebar {...props}>\n  <SidebarHeader>\n    <Link\n      className=\"flex items-center group-data-[collapsible=dock]:size-10 group-data-[collapsible=dock]:justify-center gap-x-2\"\n      href=\"/docs/components/layouts/sidebar\"\n    >\n      <IconBrandApple className=\"size-5\" />\n      <SidebarLabel className=\"font-medium\">Apple</SidebarLabel>\n    </Link>\n  </SidebarHeader>\n  ...\n</Sidebar>\n```\n\n----------------------------------------\n\nTITLE: Configuring Intent UI via JSON Configuration\nDESCRIPTION: Demonstrates the intentui.json configuration file that gets created after initialization, containing project settings like paths and preferences.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/getting-started/installation.mdx#2025-04-15_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://intentui.com/schema.json\",\n  \"ui\": \"src/components/ui\",\n  \"utils\": \"src/utils\",\n  \"gray\": \"zinc\",\n  \"css\": \"src/app/globals.css\",\n  \"alias\": \"@\",\n  \"language\": \"typescript\",\n}\n```\n\n----------------------------------------\n\nTITLE: Uncontrolled Checkbox in React\nDESCRIPTION: Illustrates the usage of an uncontrolled Checkbox component with the 'defaultValue' prop.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/forms/checkbox.mdx#2025-04-15_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<How toUse=\"forms/checkbox/checkbox-uncontrolled-demo\" />\n```\n\n----------------------------------------\n\nTITLE: Using Drawer with Sticky Content in React\nDESCRIPTION: Demonstrates the Drawer's capability to handle long content with a sticky behavior.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/overlays/drawer.mdx#2025-04-15_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n<How toUse=\"overlays/drawer/drawer-sticky-demo\" />\n```\n\n----------------------------------------\n\nTITLE: Customizing Current Breadcrumb with Conditional Content\nDESCRIPTION: Example of rendering conditional content inside the current breadcrumb item by using a render prop pattern that provides the isCurrent state to determine what to display.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/navigation/breadcrumbs.mdx#2025-04-15_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Breadcrumbs.Item className=\"data-current:text-primary\">\n  {({ isCurrent }: { isCurrent: boolean }) => (\n    <span className=\"flex items-center gap-x-2\">\n      Navbar\n      {isCurrent && <IconChevronLgDown />}\n    </span>\n  )}\n</Breadcrumbs.Item>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Button with Loader\nDESCRIPTION: Example of Button component with a loader.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/buttons/button.mdx#2025-04-15_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\n<How toUse=\"buttons/button/button-loader-demo\" />\n```\n\n----------------------------------------\n\nTITLE: PaginationList Implementation with Router Options\nDESCRIPTION: Example of implementing PaginationList with custom router options for series navigation.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/navigation/pagination.mdx#2025-04-15_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<PaginationList aria-label=\"Pagination Segment\" items={paginate.pages}>\n  {(item) => (\n    <PaginationItem\n      routerOptions={{ only: ['series'] }}\n      id={item.label.toString()}\n      isCurrent={item.isCurrent}\n      href={item.url ?? ''}\n    >\n      {item.label}\n    </PaginationItem>\n  )}\n</PaginationList>\n```\n\n----------------------------------------\n\nTITLE: Initializing TanStack Router Project with Tailwind CSS\nDESCRIPTION: Command to create a new TanStack Router project with Tailwind CSS using a file-router template.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/getting-started/tanstack-router.mdx#2025-04-15_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx create-tsrouter-app@latest app --template file-router --tailwind\n```\n\n----------------------------------------\n\nTITLE: Setting Hidden Collapsible Sidebar\nDESCRIPTION: Implementation of a collapsible sidebar that hides completely when toggled using the 'hidden' value for the collapsible prop.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/layouts/sidebar.mdx#2025-04-15_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<Sidebar collapsible=\"hidden\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Gradient Area Chart in React\nDESCRIPTION: This code shows how to create an area chart with a gradient fill. It uses the Recharts library to render a visually appealing chart with color gradients.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/charts/area-chart.mdx#2025-04-15_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<How withNoPadding={true} isCenter={false} toUse=\"charts/area/area-chart-gradient-demo\" />\n```\n\n----------------------------------------\n\nTITLE: Toggle Source Code Display\nDESCRIPTION: Component for displaying the toggle button source code.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/buttons/toggle.mdx#2025-04-15_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<SourceCode toShow='toggle'/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Read-Only Checkbox Group in JSX\nDESCRIPTION: This snippet demonstrates how to create a read-only Checkbox Group component using the 'isReadOnly' prop. This is useful when you want to display selected options without allowing user interaction.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/forms/checkbox-group.mdx#2025-04-15_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<CheckboxGroup isReadOnly/>\n```\n\n----------------------------------------\n\nTITLE: Setting up folder structure for theme components in Inertia.js\nDESCRIPTION: Demonstrates the recommended folder structure for organizing theme-related components in an Inertia.js project, with a providers directory for the theme provider and a Components directory for the theme switcher.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/dark-mode/inertia-js.mdx#2025-04-15_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nresources/js\n├── Components\n│   └── theme-switcher.tsx\n│   └── ...\n├── providers\n│   └── theme-provider.tsx\n│   ...\n```\n\n----------------------------------------\n\nTITLE: Customized Sheet Header with Title and Description Props\nDESCRIPTION: Shows how to use the title and description props for a more customized Sheet.Header implementation.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/overlays/sheet.mdx#2025-04-15_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Sheet.Header title='Title' description='Description' />\n```\n\n----------------------------------------\n\nTITLE: Disabling Toolbar in React\nDESCRIPTION: Shows how to disable the Toolbar component either as a group or individual items using the isDisabled prop.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/controls/toolbar.mdx#2025-04-15_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<How isCenter={false} toUse=\"controls/toolbar/toolbar-disabled-demo\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Dropdown Component in IntentUI\nDESCRIPTION: Instructions for installing the Dropdown component in an IntentUI project. The Installation component accepts options to specify component installation and an items array listing 'dropdown'.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/collections/dropdown.mdx#2025-04-15_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Installation options={{ isComponent: true }} items={['dropdown']} />\n```\n\n----------------------------------------\n\nTITLE: TSConfig for Ziggy Integration\nDESCRIPTION: TypeScript configuration for integrating Ziggy in a Laravel application with Inertia.js. This includes necessary type declarations and path mappings.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/getting-started/client-side-routing.mdx#2025-04-15_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"target\": \"ES2020\",\n    \"useDefineForClassFields\": true,\n    \"lib\": [\"ES2020\", \"DOM\", \"DOM.Iterable\"],\n    \"module\": \"ESNext\",\n    \"skipLibCheck\": true,\n    \"moduleResolution\": \"bundler\",\n    \"allowImportingTsExtensions\": true,\n    \"resolveJsonModule\": true,\n    \"isolatedModules\": true,\n    \"noEmit\": true,\n    \"jsx\": \"react-jsx\",\n    \"strict\": true,\n    \"noUnusedLocals\": true,\n    \"noUnusedParameters\": true,\n    \"noFallthroughCasesInSwitch\": true,\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"@/*\": [\"./resources/ts/*\"],\n      \"ziggy-js\": [\"./vendor/tightenco/ziggy/dist/index.d.ts\"]\n    },\n    \"typeRoots\": [\"./resources/ts/types\", \"./node_modules/@types\"],\n    \"allowSyntheticDefaultImports\": true\n  },\n  \"include\": [\"resources/ts/**/*.ts\", \"resources/ts/**/*.tsx\", \"resources/ts/**/*.d.ts\"],\n  \"references\": [{ \"path\": \"./tsconfig.node.json\" }]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite for Ziggy Integration\nDESCRIPTION: Vite configuration for integrating Ziggy in a Laravel application with Inertia.js. This sets up aliases and includes Ziggy types for TypeScript support.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/getting-started/client-side-routing.mdx#2025-04-15_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport { defineConfig } from 'vite';\nimport laravel from 'laravel-vite-plugin';\nimport react from '@vitejs/plugin-react';\n\nexport default defineConfig({\n    plugins: [\n        laravel({\n            input: ['resources/css/app.css', 'resources/ts/app.tsx'],\n            refresh: true,\n        }),\n        react(),\n    ],\n    resolve: {\n        alias: {\n            '@': '/resources/ts',\n            ziggy: '/vendor/tightenco/ziggy/dist',\n            'ziggy-js': '/vendor/tightenco/ziggy/dist/vue',\n        },\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Scroll Preservation with Remix\nDESCRIPTION: Example of pagination implementation with Remix scroll preservation using preventScrollReset prop.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/navigation/pagination.mdx#2025-04-15_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<PaginationList aria-label=\"Pagination Segment\" items={pages}>\n  {(item) => (\n    <PaginationItem\n      routerOptions={{ preventScrollReset: true }}\n      id={item.label.toString()}\n      isCurrent={item.isCurrent}\n      href={item.url ?? ''}\n    >\n```\n\n----------------------------------------\n\nTITLE: Implementing Legend in Area Chart using React\nDESCRIPTION: This code shows how to add a legend to an area chart, which is crucial for identifying different data series in multi-series charts. It utilizes the legend component of the Recharts library.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/charts/area-chart.mdx#2025-04-15_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<How withNoPadding={true} isCenter={false} toUse=\"charts/area/area-chart-legend-demo\" />\n```\n\n----------------------------------------\n\nTITLE: Composed Components with Dropdown in IntentUI\nDESCRIPTION: Specifies that the Dropdown component is composed with the 'keyboard' component, indicating that keyboard navigation functionality is integrated with dropdown behavior.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/collections/dropdown.mdx#2025-04-15_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Composed components={['keyboard']}/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Disabled Items with disabledKeys in Grid List\nDESCRIPTION: Example showing how to disable specific items in a Grid List using the disabledKeys prop on the parent component, highlighting line 5 which specifies which items to disable by their indices.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/collections/grid-list.mdx#2025-04-15_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<GridList\n  items={items}\n  aria-label=\"Select your favorite bands\"\n  selectionMode=\"multiple\"\n  disabledKeys={[2,5]}\n  className=\"min-w-64\"\n>\n  {(item) => <GridListItem id={item.id}>{item.name}</GridListItem>}\n</GridList>\n```\n\n----------------------------------------\n\nTITLE: Configuring Sidebar's Initial State\nDESCRIPTION: Setting the initial state of the sidebar using the SidebarProvider with defaultOpen prop. This example keeps the sidebar docked initially.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/layouts/sidebar.mdx#2025-04-15_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<SidebarProvider defaultOpen={false}>\n  <Sidebar collapsible=\"dock\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Tailwind CSS v4 with PostCSS Plugin\nDESCRIPTION: Command to install the latest version of Tailwind CSS and the PostCSS plugin needed for Next.js or other PostCSS-based setups.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/prologue/upgrade-guide.mdx#2025-04-15_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install tailwindcss@next @tailwindcss/postcss@next\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Separator for Breadcrumb Item\nDESCRIPTION: Example of adding a custom slash separator for an individual breadcrumb item by setting the separator prop directly on the item.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/navigation/breadcrumbs.mdx#2025-04-15_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Breadcrumbs.Item href=\"#\" separator=\"slash\"/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Grid List Item with IDs in TSX\nDESCRIPTION: Example of how to properly implement Grid List Items with explicit IDs, which is recommended although items have default IDs.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/collections/grid-list.mdx#2025-04-15_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n{(item) => <GridListItem id={item.name}>{item.name}</GridListItem>}\n```\n\n----------------------------------------\n\nTITLE: Showing Dropdown Source Code\nDESCRIPTION: Component that displays the source code for the Dropdown implementation, allowing developers to examine its implementation details.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/collections/dropdown.mdx#2025-04-15_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<SourceCode toShow='dropdown' />\n```\n\n----------------------------------------\n\nTITLE: Unstyled Link Usage in React\nDESCRIPTION: Demonstrates how to use the Link component without default styles, allowing for custom styling.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/navigation/link.mdx#2025-04-15_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<How toUse=\"navigation/link/link-unstyled-demo\" />\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Basic Description List Usage\nDESCRIPTION: This code demonstrates the basic usage of the Description List component. It uses a custom How component to display the demo.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/surfaces/description-list.mdx#2025-04-15_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<How isCenter={false} toUse=\"surfaces/description-list/description-list-demo\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Toolbar Orientation in React\nDESCRIPTION: Demonstrates how to change the orientation of the Toolbar from horizontal to vertical using the orientation prop.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/controls/toolbar.mdx#2025-04-15_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<How isCenter={false} toUse=\"controls/toolbar/toolbar-orientation-demo\" />\n```\n\n----------------------------------------\n\nTITLE: Disabling Individual Choicebox Items in React\nDESCRIPTION: This code shows how to disable specific items in a Choicebox component by using the disabledKeys prop. The example demonstrates disabling items with keys 'sm' and 'lg'.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/collections/choicebox.mdx#2025-04-15_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<Choicebox disabledKeys={['sm', 'lg']} />\n```\n\n----------------------------------------\n\nTITLE: Customizing Modal Header in React\nDESCRIPTION: These examples show different ways to customize the Modal header, including using a simple string as the title or specifying title and description props for more detailed headers.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/overlays/modal.mdx#2025-04-15_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Modal.Header>\n  Title\n</Modal.Header>\n```\n\nLANGUAGE: tsx\nCODE:\n```\n<Modal.Header title='Title' description='Description' />\n```\n\n----------------------------------------\n\nTITLE: Hiding Toast Icon with Custom Classes\nDESCRIPTION: Demonstrates how to hide the status icon in a toast notification using custom class names.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/statuses/toast.mdx#2025-04-15_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\ntoast.success(`Copied ${text} to clipboard`, {\n  classNames: {\n    toast: '[&:has([data-icon])_[data-content]]:ml-0',\n    icon: 'hidden'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Intent UI Installation Process Output\nDESCRIPTION: Example output of the Intent UI installation process, showing the setup questions and configuration steps.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/getting-started/tanstack-router.mdx#2025-04-15_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n✔ Initializing.\n✔ Components folder: src/components\n✔ Utils folder: src/utils\n✔ Where would you like to place the CSS file? src/styles.css\n✔ Pick your desired base gray: zinc\n✔ Installing dependencies.\n✔ Configuring.\n✔ UI folder created at `src/components/ui`\n✔ Primitive file saved to `src/components/ui/primitive.tsx`\n✔ Theme Provider file saved to `\"src/components/theme-provider.ts\"`\n✔ Providers file saved to `\"src/components/providers.tsx\"`\n✔ Configuration saved to `intentui.json`\n✔ Installation complete.\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Basic Meter Usage\nDESCRIPTION: An example showing how to use the basic Meter component in a React application.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/statuses/meter.mdx#2025-04-15_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<How toUse=\"statuses/meter/meter-demo\" />\n```\n\n----------------------------------------\n\nTITLE: Adding Separators to Sidebar Content\nDESCRIPTION: Using SidebarSeparator to visually divide different sections of the sidebar. This helps organize content and improve visual hierarchy.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/layouts/sidebar.mdx#2025-04-15_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n<SidebarContent>\n  <SidebarSection/>\n  <SidebarSeparator />\n  <SidebarSection/>\n  <SidebarSection/>\n  <SidebarSeparator />\n  <SidebarSectionGroup/>\n  <SidebarSectionGroup/>\n  <SidebarSeparator />\n  <SidebarSectionGroup/>\n</SidebarContent>\n```\n\n----------------------------------------\n\nTITLE: Text Field Component Integration\nDESCRIPTION: Shows the composition of the text field component with field component\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/forms/text-field.mdx#2025-04-15_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<Composed components={['field']}/>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Heading Levels in React\nDESCRIPTION: This code demonstrates the usage of different heading levels. It uses a custom How component to display a demo of various heading levels from 1 to 4 in IntentUI.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/surfaces/heading.mdx#2025-04-15_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<How toUse=\"surfaces/heading/heading-level-demo\" />\n```\n\n----------------------------------------\n\nTITLE: Navbar Logo Implementation\nDESCRIPTION: Shows how to add a logo to the navbar with brand icon\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/layouts/navbar.mdx#2025-04-15_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Navbar>\n  <Navbar.Nav>\n    <Navbar.Logo href=\"#\">\n      <IconBrandApple className=\"size-5\" />\n    </Navbar.Logo>\n    <Navbar.Section>\n      <Navbar.Item href=\"#\">Store</Navbar.Item>\n```\n\n----------------------------------------\n\nTITLE: Implementing Scroll Preservation with Next.js\nDESCRIPTION: Example of pagination implementation with Next.js scroll preservation using scroll prop.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/navigation/pagination.mdx#2025-04-15_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<PaginationList aria-label=\"Pagination Segment\" items={pages}>\n  {(item) => (\n    <PaginationItem\n      routerOptions={{ scroll: false }}\n      id={item.label.toString()}\n      isCurrent={item.isCurrent}\n      href={item.url ?? ''}\n    >\n```\n\n----------------------------------------\n\nTITLE: Text Field with Prefix and Suffix Demo\nDESCRIPTION: Example showing how to use prefix and suffix elements in the text field component\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/forms/text-field.mdx#2025-04-15_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n<How minW72 toUse=\"forms/text-field/text-field-prefix-suffix-demo\" />\n```\n\n----------------------------------------\n\nTITLE: Rendering Combo Box Option with Avatar in React\nDESCRIPTION: This snippet demonstrates how to render a combo box option with an avatar and a label. It's used when including additional elements like icons or avatars in the option.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/pickers/combo-box.mdx#2025-04-15_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ComboBox.Option id={item.id} textValue={item.name}>\n  <Avatar src={item.image_url} />\n  <ComboBox.Label>{item.name}</ComboBox.Label>\n</ComboBox.Option>\n```\n\n----------------------------------------\n\nTITLE: Manual Installation of Input OTP Component\nDESCRIPTION: Provides instructions for manually installing the Input OTP component and its dependencies. It also includes a link to view the source code of the component.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/forms/input-otp.mdx#2025-04-15_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Installation options={{ isManual: true }} items={['input-otp', '@intentui/icons']}/>\n<SourceCode toShow='input-otp'/>\n```\n\n----------------------------------------\n\nTITLE: Toggle Shape Configuration\nDESCRIPTION: Demonstration of different toggle button shapes using the shape prop.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/buttons/toggle.mdx#2025-04-15_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<How toUse=\"buttons/toggle/toggle-shape-demo\" />\n```\n\n----------------------------------------\n\nTITLE: Disabled Link Usage in React\nDESCRIPTION: Illustrates how to disable a Link component using the isDisabled prop.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/navigation/link.mdx#2025-04-15_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<How toUse=\"navigation/link/link-disabled-demo\" />\n```\n\n----------------------------------------\n\nTITLE: Customizing Value Label in Meter\nDESCRIPTION: Example showing how to customize the value label of the Meter component.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/statuses/meter.mdx#2025-04-15_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<How toUse=\"statuses/meter/meter-value-label-demo\" />\n```\n\n----------------------------------------\n\nTITLE: Link Component Installation\nDESCRIPTION: Shows how to install the Link component using a custom Installation component.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/navigation/link.mdx#2025-04-15_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Installation options={{ isComponent: true }} items={['link']}/>\n```\n\n----------------------------------------\n\nTITLE: Disabled Date Range Picker\nDESCRIPTION: Implementation of a disabled Date Range Picker that becomes non-interactive and shows a disabled visual state.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/date-and-time/date-range-picker.mdx#2025-04-15_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<DateRangePicker isDisabled />\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Pending Button State\nDESCRIPTION: Example of Button component in a pending state.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/buttons/button.mdx#2025-04-15_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\n<How toUse=\"buttons/button/button-pending-demo\" />\n```\n\n----------------------------------------\n\nTITLE: Adding Link to Carousel Item in React\nDESCRIPTION: Example of how to add a link to a carousel item using the href prop.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/media/carousel.mdx#2025-04-15_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<CarouselItem href=\"/path/to/page\"/>\n```\n\n----------------------------------------\n\nTITLE: Showing Link Component Anatomy\nDESCRIPTION: Utilizes an Anatomy component to display the structure of the Link component.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/navigation/link.mdx#2025-04-15_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Anatomy show='link-anatomy'/>\n```\n\n----------------------------------------\n\nTITLE: Using the Container Component with Constrained Property in JSX\nDESCRIPTION: Example code showing how to implement the Container component with the constrained property set to true. When constrained is true, the container won't have padding on mobile devices.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/layouts/container.mdx#2025-04-15_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Container constrained />\n```\n\n----------------------------------------\n\nTITLE: CSS for Hiding Scrollbar in Command Menu\nDESCRIPTION: CSS utility class definition to hide scrollbars across different browsers, useful for creating a cleaner command menu interface.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/controls/command-menu.mdx#2025-04-15_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n@utility scrollbar-hidden {\n  -ms-overflow-style: none; /* Internet Explorer and Edge */\n  scrollbar-width: none; /* Firefox */\n  &::-webkit-scrollbar {\n    display: none; /* Safari and Chrome */\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Global Type Declaration for Inertia.js\nDESCRIPTION: Global TypeScript declarations for Inertia.js integration, defining types for the route function and other Ziggy-related globals.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/getting-started/client-side-routing.mdx#2025-04-15_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nimport { Config, RouteParamsWithQueryOverload, RouteParam } from 'ziggy-js';\n\ndeclare global {\n    function route(): Config;\n    function route(name: string, params?: RouteParamsWithQueryOverload, absolute?: boolean): string;\n    function route(name: string, params?: RouteParam[], absolute?: boolean): string;\n\n    var Ziggy: Config;\n\n    // Optionally, if you use TypeScript and want intellisense for route names\n    // Add this interface to extend the route names\n    interface Routes {\n        // Define your routes here\n        // e.g., 'login': { uri: 'login', methods: ['GET', 'HEAD'] }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Donut Chart Implementation\nDESCRIPTION: Shows how to create a donut-style pie chart for a more modern visualization approach.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/charts/pie-chart.mdx#2025-04-15_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<How withNoPadding={true} isCenter={false} toUse=\"charts/pie/pie-chart-donut-demo\"/>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Link Styled as Button\nDESCRIPTION: Example of a link styled as a Button component.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/buttons/button.mdx#2025-04-15_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\n<How toUse=\"buttons/button/button-link-demo\" />\n```\n\n----------------------------------------\n\nTITLE: Displaying Drawer Anatomy\nDESCRIPTION: Illustrates the anatomy of the Drawer component using a custom Anatomy component.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/overlays/drawer.mdx#2025-04-15_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Anatomy show='drawer-anatomy'/>\n```\n\n----------------------------------------\n\nTITLE: Note Intent Variations Demo\nDESCRIPTION: Example demonstrating different intent variations of the Note component.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/statuses/note.mdx#2025-04-15_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n<How toUse=\"statuses/note/note-intent-demo\" />\n```\n\n----------------------------------------\n\nTITLE: Registry Directory Structure\nDESCRIPTION: Shows the registry folder structure containing component files used to generate documentation, UI components, blocks and anatomies. Generated via the build-registry.ts script.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/prologue/contribution-guide.mdx#2025-04-15_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\npublic/registry\n├── anatomies\n├── blocks\n│   ├── navbar ...\n│   └── sidebar ...\n├── demo\n│   ├── buttons ...\n│   ├── charts ...\n│   ├── collections ...\n│   ├── colors ...\n│   ├── controls ...\n│   ├── date-and-time ...\n│   ├── drag-and-drop\n│   ├── forms ...\n│   ├── media\n│   ├── navigation ...\n│   ├── outside\n│   ├── overlays ...\n│   ├── pickers ...\n│   ├── statuses ...\n│   └── surfaces ...\n├── docs\n│   └── installation\n└── ui\n```\n\n----------------------------------------\n\nTITLE: Inertia.js Controlled Navbar\nDESCRIPTION: Implementation of controlled navbar state management with Inertia.js\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/layouts/navbar.mdx#2025-04-15_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { usePage } from '@inertiajs/react';\n\nexport function AppNavbar({ children, ...props }: React.ComponentProps<typeof Navbar>) {\n  const page = usePage();\n  const [isOpen, setIsOpen] = useState(false);\n\n  React.useEffect(() => setIsOpen(false), [page.url]);\n\n  return (\n    <Navbar isOpen={isOpen} onOpenChange={setIsOpen} {...props}/>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Label to Checkbox in React\nDESCRIPTION: Demonstrates how to add a label to a Checkbox component using the 'label' prop.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/forms/checkbox.mdx#2025-04-15_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Checkbox label=\"Enable Notifications\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Drawer Without Notch in React\nDESCRIPTION: Shows how to disable the notch on the Drawer by setting the withNotch prop to false.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/overlays/drawer.mdx#2025-04-15_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<How toUse=\"overlays/drawer/drawer-without-notch-demo\" />\n```\n\n----------------------------------------\n\nTITLE: Date Range Picker with Visible Duration\nDESCRIPTION: Configuration of visible date range duration using the visibleDuration prop to control the displayed calendar period.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/date-and-time/date-range-picker.mdx#2025-04-15_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<DateRangePicker visibleDuration={{ months: 2 }} />\n```\n\n----------------------------------------\n\nTITLE: Showing Toolbar Anatomy\nDESCRIPTION: Displays the anatomy or structure of the Toolbar component.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/controls/toolbar.mdx#2025-04-15_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Anatomy show='toolbar-anatomy'/>\n```\n\n----------------------------------------\n\nTITLE: Displaying Anatomy of Description List Component\nDESCRIPTION: This snippet shows how to display the anatomy of the Description List component using a custom Anatomy component.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/surfaces/description-list.mdx#2025-04-15_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Anatomy show='description-list-anatomy'/>\n```\n\n----------------------------------------\n\nTITLE: Components Directory Structure\nDESCRIPTION: Shows the main components folder structure including UI components, documentation, and block components. The core UI components are in components/ui while documentation demos are in components/docs.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/prologue/contribution-guide.mdx#2025-04-15_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncomponents\n├── blocks\n├── code\n├── docs\n│   ├── anatomies\n│   ├── buttons ...\n│   ├── charts ...\n│   ├── collections ...\n│   ├── colors ...\n│   ├── controls ...\n│   ├── date-and-time ...\n│   ├── drag-and-drop ...\n│   ├── forms ...\n│   ├── media ...\n│   ├── navigation ...\n│   ├── outside ...\n│   ├── overlays ...\n│   ├── pickers ...\n│   ├── statuses ...\n│   └── surfaces ...\n├── experimental\n└── ui\n```\n\n----------------------------------------\n\nTITLE: Toggle Size Adjustment\nDESCRIPTION: Example of different toggle button sizes using the size prop.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/buttons/toggle.mdx#2025-04-15_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<How toUse=\"buttons/toggle/toggle-size-demo\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Card Header Component in JSX\nDESCRIPTION: Example of using CardHeader component with title and description. The component supports a withoutPadding prop and custom className for styling.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/surfaces/card.mdx#2025-04-15_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<CardHeader\n  className='mb-6'\n  title=\"List Daemons\"\n  description=\"List of daemons to use in your sites.\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Custom Label Implementation\nDESCRIPTION: Shows how to implement custom labels in a pie chart for better data context.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/charts/pie-chart.mdx#2025-04-15_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n<How withNoPadding={true} isCenter={false} toUse=\"charts/pie/pie-chart-custom-label-demo\"/>\n```\n\n----------------------------------------\n\nTITLE: Installing Overlay Components Output\nDESCRIPTION: Displays the CLI output when installing all components under the overlays namespace using the add command.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/getting-started/installation.mdx#2025-04-15_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n✓ button created\n✓ dialog created\n✓ modal created\n✓ sheet created\n✓ drawer created\n✓ popover created\n✓ tooltip created\n```\n\n----------------------------------------\n\nTITLE: Disabled Toggle State\nDESCRIPTION: Example of a disabled toggle button using the disabled prop.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/buttons/toggle.mdx#2025-04-15_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n<How toUse=\"buttons/toggle/toggle-disabled-demo\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Description List Component in React\nDESCRIPTION: This snippet shows how to install the Description List component. It uses a custom Installation component to display installation options.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/surfaces/description-list.mdx#2025-04-15_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Installation options={{ isComponent: true }} items={['description-list']} />\n```\n\n----------------------------------------\n\nTITLE: Implementing Scroll Preservation with Inertia.js\nDESCRIPTION: Example of pagination implementation with Inertia.js scroll preservation using preserveScroll prop.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/navigation/pagination.mdx#2025-04-15_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<PaginationList aria-label=\"Pagination Segment\" items={pages}>\n  {(item) => (\n    <PaginationItem\n      routerOptions={{ preserveScroll: true }}\n      id={item.label.toString()}\n      isCurrent={item.isCurrent}\n      href={item.url ?? ''}\n    >\n```\n\n----------------------------------------\n\nTITLE: CLI Output for Component Installation\nDESCRIPTION: Shows the terminal output when installing components, including the dependency installation and file creation process.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/getting-started/installation.mdx#2025-04-15_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n✔ Checking.\n✔ Installing dependencies.\n✔ Created 7 files:\n  - src/components/ui/combo-box.tsx\n  - src/components/ui/field.tsx\n  - src/components/ui/list-box.tsx\n  - src/components/ui/dropdown.tsx\n  - src/components/ui/popover.tsx\n  - src/components/ui/dialog.tsx\n  - src/components/ui/button.tsx\n```\n\n----------------------------------------\n\nTITLE: CLI Alias Configuration\nDESCRIPTION: Shell configuration for creating an alias to simplify Intent UI CLI commands.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/getting-started/cli.mdx#2025-04-15_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nalias intentui='npx @intentui/cli@latest'\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Disabled Button\nDESCRIPTION: Example of a disabled Button component.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/buttons/button.mdx#2025-04-15_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\n<How toUse=\"buttons/button/button-disabled-demo\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Toolbar Component\nDESCRIPTION: Shows how to install the Toolbar component, with options for component-based installation.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/controls/toolbar.mdx#2025-04-15_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Installation options={{ isComponent: true }} items={['toolbar']}/>\n```\n\n----------------------------------------\n\nTITLE: Listing Composed Components for Toolbar\nDESCRIPTION: Lists the components that are composed within the Toolbar, such as Toggle and Separator.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/controls/toolbar.mdx#2025-04-15_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Composed components={['toggle', 'separator']}/>\n```\n\n----------------------------------------\n\nTITLE: Defining CSS Font Face for Styling\nDESCRIPTION: Shows how to define a @font-face rule in CSS for the Inter font with variable weights for consistent typography.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/getting-started/installation.mdx#2025-04-15_snippet_7\n\nLANGUAGE: css\nCODE:\n```\n@font-face {\n  font-family: 'Inter';\n  font-style: normal;\n  font-weight: 100 900;\n  font-display: swap;\n  src: url(\"InterVariable.woff2\") format(\"woff2\");\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Linear Area Chart in React\nDESCRIPTION: This snippet shows the implementation of a linear area chart, which is useful for displaying trends over time or continuous data. It utilizes the linear interpolation feature of the Recharts library.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/charts/area-chart.mdx#2025-04-15_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<How withNoPadding={true} isCenter={false} toUse=\"charts/area/area-chart-linear-demo\" />\n```\n\n----------------------------------------\n\nTITLE: Manual Installation of Meter Component Dependencies\nDESCRIPTION: Steps for manually installing the required dependencies for the Meter component, including react-aria-components, @intentui/icons, and motion libraries.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/statuses/meter.mdx#2025-04-15_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Installation options={{ isManual: true }} items={['react-aria-components', '@intentui/icons', 'motion']}/>\n```\n\n----------------------------------------\n\nTITLE: Text Field with Button Suffix Demo\nDESCRIPTION: Demonstration of adding a button as a suffix element to the text field\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/forms/text-field.mdx#2025-04-15_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n<How minW72 toUse=\"forms/text-field/text-field-suffix-button-demo\" />\n```\n\n----------------------------------------\n\nTITLE: Toggle Button Component Installation\nDESCRIPTION: Shows the component installation process with configuration options.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/buttons/toggle.mdx#2025-04-15_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Installation options={{isComponent: true}} items={['toggle']}/>\n```\n\n----------------------------------------\n\nTITLE: Defining CSS Font Variables in Theme\nDESCRIPTION: Shows how to define CSS custom properties for fonts in a theme configuration, using font variables from Next.js.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/getting-started/installation.mdx#2025-04-15_snippet_10\n\nLANGUAGE: css\nCODE:\n```\n@theme {\n  --font-sans: var(--font-inter-sans), ui-sans-serif, system-ui, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\",\n  \"Segoe UI Symbol\", \"Noto Color Emoji\";\n  --font-mono: var(--font-geist-mono), ui-sans-serif, system-ui, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\",\n  \"Segoe UI Symbol\", \"Noto Color Emoji\";\n\n  // Your other variables\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Step Area Chart in React\nDESCRIPTION: This code demonstrates how to create a step area chart, which is useful for displaying data that changes at irregular intervals. It uses the step interpolation feature of the Recharts library.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/charts/area-chart.mdx#2025-04-15_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<How withNoPadding={true} isCenter={false} toUse=\"charts/area/area-chart-step-demo\" />\n```\n\n----------------------------------------\n\nTITLE: Applying Currency Format to Meter\nDESCRIPTION: Demonstration of using the Meter component with currency format for value display.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/statuses/meter.mdx#2025-04-15_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<How toUse=\"statuses/meter/meter-currency-format-demo\" />\n```\n\n----------------------------------------\n\nTITLE: Displaying Drawer Source Code\nDESCRIPTION: Shows the source code of the Drawer component using a custom SourceCode component.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/overlays/drawer.mdx#2025-04-15_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<SourceCode toShow='drawer'/>\n```\n\n----------------------------------------\n\nTITLE: Displaying Composed Components for Drawer\nDESCRIPTION: Lists the components that are composed to create the Drawer, including button and dialog.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/overlays/drawer.mdx#2025-04-15_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Composed components={['button', 'dialog']}/>\n```\n\n----------------------------------------\n\nTITLE: Closing Command Palette on Navigation in Inertia.js\nDESCRIPTION: Implementation for automatically closing the command palette when navigating to a new page using Inertia.js router events.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/controls/command-menu.mdx#2025-04-15_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nexport function CommandPalette({ open, setOpen }: Props) {\n  React.useEffect(() => {\n    router.on('navigate', () => setOpen(false))\n  }, [pathname, setOpen])\n  return (...)\n```\n\n----------------------------------------\n\nTITLE: Basic Note Component Usage\nDESCRIPTION: Example showing the basic implementation of the Note component with title and description for highlighting information.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/statuses/note.mdx#2025-04-15_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<How isCenter={false} toUse=\"statuses/note/note-demo\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Color Constants for Intent UI in JavaScript\nDESCRIPTION: This code snippet defines a set of color constants for the Intent UI framework. It includes primary, secondary, and neutral colors with their shades, as well as specific colors for UI states like success, warning, and error.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/app/(app)/colors/twitter-image.alt.txt#2025-04-15_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const colors = {\n  primary: {\n    50: '#eef2ff',\n    100: '#e0e7ff',\n    200: '#c7d2fe',\n    300: '#a5b4fc',\n    400: '#818cf8',\n    500: '#6366f1',\n    600: '#4f46e5',\n    700: '#4338ca',\n    800: '#3730a3',\n    900: '#312e81',\n    950: '#1e1b4b',\n  },\n  secondary: {\n    50: '#f0fdfa',\n    100: '#ccfbf1',\n    200: '#99f6e4',\n    300: '#5eead4',\n    400: '#2dd4bf',\n    500: '#14b8a6',\n    600: '#0d9488',\n    700: '#0f766e',\n    800: '#115e59',\n    900: '#134e4a',\n    950: '#042f2e',\n  },\n  neutral: {\n    50: '#fafafa',\n    100: '#f5f5f5',\n    200: '#e5e5e5',\n    300: '#d4d4d4',\n    400: '#a3a3a3',\n    500: '#737373',\n    600: '#525252',\n    700: '#404040',\n    800: '#262626',\n    900: '#171717',\n    950: '#0a0a0a',\n  },\n  success: '#22c55e',\n  warning: '#eab308',\n  error: '#ef4444',\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying CLI Success Message\nDESCRIPTION: Shows the success message displayed after completing the initialization process, with guidance on next steps.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/getting-started/installation.mdx#2025-04-15_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nNot sure what to do next?\nVisit our documentation at: https://intentui.com\n\nNow try to add some components to your project\nby running: npx @intentui/cli@latest add\n```\n\n----------------------------------------\n\nTITLE: Setting up NEXT_PUBLIC_APP_V1_URL environment variable\nDESCRIPTION: This code snippet shows the required content for the .env file needed to set up the development environment for the intentui.com project.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/CONTRIBUTING.md#2025-04-15_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nNEXT_PUBLIC_APP_V1_URL=https://1x.intentui.com\n```\n\n----------------------------------------\n\nTITLE: Applying Scrollbar Hidden Class to Command Menu List\nDESCRIPTION: How to apply the scrollbar-hidden CSS class to hide scrollbars in the CommandMenu.List component.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/controls/command-menu.mdx#2025-04-15_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<CommandMenu.List className=\"scrollbar-hidden\">\n```\n\n----------------------------------------\n\nTITLE: Basic Skeleton Component Implementation\nDESCRIPTION: Demonstrates basic usage of the Skeleton component as a loading placeholder to improve perceived performance.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/statuses/skeleton.mdx#2025-04-15_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<How toUse=\"statuses/skeleton-demo\" />\n```\n\n----------------------------------------\n\nTITLE: Router Options Implementation in ListBox\nDESCRIPTION: Example of implementing router options in a ListBox component with scroll preservation.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/navigation/pagination.mdx#2025-04-15_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst renderListItem = (\n  props: ListBoxItemProps & {\n    textValue?: string\n    ariaCurrent?: string | undefined\n    isDisabled?: boolean\n    className?: string\n  },\n  children: React.ReactNode\n) => (\n  <ListBoxItem routerOptions={{ preserveScroll: true, ...props.routerOptions }} {...props}>\n    {children}\n  </ListBoxItem>\n)\n```\n\n----------------------------------------\n\nTITLE: Component Installation Instructions\nDESCRIPTION: Installation code for the Note component using the package installation component.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/statuses/note.mdx#2025-04-15_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<Installation options={{ isComponent: true }} items={['note']}/>\n```\n\n----------------------------------------\n\nTITLE: Installing Text Field Component and Dependencies\nDESCRIPTION: Installation instructions for the text field component and its required dependencies including react-aria-components and intentui icons\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/forms/text-field.mdx#2025-04-15_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<Installation options={{ isComponent: true }} items={['text-field']}/>\n\n<Installation options={{ isManual: true }} items={['react-aria-components' ,'@intentui/icons']}/>\n```\n\n----------------------------------------\n\nTITLE: Shaped Skeleton Implementation\nDESCRIPTION: Demonstrates how to customize the Skeleton shape using parent styling, particularly for circular appearances.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/statuses/skeleton.mdx#2025-04-15_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<How toUse=\"statuses/skeleton-shape-demo\" />\n```\n\n----------------------------------------\n\nTITLE: Interactive Donut Chart with Active States\nDESCRIPTION: Implementation of a donut chart with interactive elements that highlight active segments.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/charts/pie-chart.mdx#2025-04-15_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n<How withNoPadding={true} isCenter={false} toUse=\"charts/pie/pie-chart-donut-active-demo\"/>\n```\n\n----------------------------------------\n\nTITLE: Manual Installation of Tag Group Dependencies\nDESCRIPTION: Steps for manually installing the required dependencies for the Tag Group component.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/collections/tag-group.mdx#2025-04-15_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install react-aria-components @intentui/icons\n```\n\n----------------------------------------\n\nTITLE: Switch Component Installation Instructions\nDESCRIPTION: Component import instructions using Installation component with switch-specific configuration.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/controls/switch.mdx#2025-04-15_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Installation options={{ isComponent: true }} items={['switch']}/>\n```\n\n----------------------------------------\n\nTITLE: Setting Float Sidebar Intent\nDESCRIPTION: Implementation of the Sidebar with the 'float' intent, which introduces an inner border within the sidebar while adding padding around the content.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/layouts/sidebar.mdx#2025-04-15_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Sidebar intent=\"float\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Toast Component in Layout\nDESCRIPTION: Shows how to integrate the Toast component into a React application layout to make it globally accessible.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/statuses/toast.mdx#2025-04-15_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Toast } from 'ui';\nexport default function Layout({ children }: Readonly<{ children: React.ReactNode }>) {\n  return (\n    <>\n      <Toast />\n      {children}\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Input OTP Component\nDESCRIPTION: Shows the installation process for the Input OTP component. This uses a custom Installation component to display the necessary steps for adding the component to a project.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/forms/input-otp.mdx#2025-04-15_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Installation options={{ isComponent: true }} items={['input-otp']}/>\n```\n\n----------------------------------------\n\nTITLE: Manual Toggle Dependencies Installation\nDESCRIPTION: Instructions for manually installing required dependencies like react-aria-components.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/buttons/toggle.mdx#2025-04-15_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Installation options={{isManual: true}} items={['react-aria-components']}/>\n```\n\n----------------------------------------\n\nTITLE: Manual Installation of React Aria Components\nDESCRIPTION: Illustrates the manual installation process for react-aria-components, which is likely a dependency for the Link component.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/navigation/link.mdx#2025-04-15_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Installation options={{ isManual: true }} items={['react-aria-components']}/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Color Field Component\nDESCRIPTION: Example showing how to disable the color picker functionality in the ColorField component.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/colors/color-field.mdx#2025-04-15_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ColorField enableColorPicker={false}/>\n```\n\n----------------------------------------\n\nTITLE: Current Item Implementation\nDESCRIPTION: Shows how to highlight the current page in navigation\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/layouts/navbar.mdx#2025-04-15_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Navbar.Item isCurrent href=\"#\"/>\n```\n\n----------------------------------------\n\nTITLE: Creating Sidebar Sections\nDESCRIPTION: Creating organized sections within the sidebar. The SidebarSection component can take an optional title prop to display as a heading.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/layouts/sidebar.mdx#2025-04-15_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<SidebarSection>\n  <SidebarItem isCurrent href=\"#\">\n    <SidebarLabel>Item 1</SidebarLabel>\n  </SidebarItem>\n</SidebarSection>\n<SidebarSection title=\"Other Section\">\n  <SidebarItem isCurrent href=\"#\">\n    <SidebarLabel>Item 1</SidebarLabel>\n  </SidebarItem>\n</SidebarSection>\n```\n\n----------------------------------------\n\nTITLE: Skeleton Component Installation\nDESCRIPTION: Shows the component installation syntax using the provided installation helper.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/statuses/skeleton.mdx#2025-04-15_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Installation options={{ isComponent: true }} items={['skeleton']}/>\n```\n\n----------------------------------------\n\nTITLE: Installing Drawer Component\nDESCRIPTION: Shows how to install the Drawer component using a custom Installation component.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/overlays/drawer.mdx#2025-04-15_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Installation options={{ isComponent: true }} items={['drawer']}/>\n```\n\n----------------------------------------\n\nTITLE: Date Range Picker with Required Validation\nDESCRIPTION: Implementation of Date Range Picker with required field validation using the isRequired prop.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/date-and-time/date-range-picker.mdx#2025-04-15_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<DateRangePicker isRequired />\n```\n\n----------------------------------------\n\nTITLE: Implementing Theme Toggle Action Route in Remix\nDESCRIPTION: Creates a route action that handles theme switching requests. It updates the theme preference in the session and returns a 204 No Content response.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/dark-mode/remix.mdx#2025-04-15_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport { json, redirect } from \"@remix-run/node\";\nimport { Theme, isTheme } from \"remix-themes\";\nimport { themeStorage } from \"~/sessions.server\";\n\nexport async function action({ request }: { request: Request }) {\n  const session = await themeStorage.getSession(request.headers.get(\"Cookie\"));\n  const requestText = await request.text();\n  const form = new URLSearchParams(requestText);\n  const theme = form.get(\"theme\");\n\n  if (!isTheme(theme)) {\n    return json({\n      success: false,\n      message: `theme value of ${theme} is not a valid theme`,\n    });\n  }\n\n  session.set(\"theme\", theme);\n  return new Response(null, {\n    status: 204,\n    headers: {\n      \"Set-Cookie\": await themeStorage.commitSession(session),\n    },\n  });\n}\n\n```\n\n----------------------------------------\n\nTITLE: Skeleton Component Anatomy\nDESCRIPTION: Visualizes the structural anatomy of the Skeleton component.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/statuses/skeleton.mdx#2025-04-15_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Anatomy show='skeleton-anatomy'/>\n```\n\n----------------------------------------\n\nTITLE: Manual Installation of Drawer Dependencies\nDESCRIPTION: Provides instructions for manually installing the required dependencies for the Drawer component.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/overlays/drawer.mdx#2025-04-15_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Installation options={{ isManual: true }} items={['react-aria-components', 'motion']}/>\n```\n\n----------------------------------------\n\nTITLE: Controlled Date Range Picker\nDESCRIPTION: Example of a controlled Date Range Picker component where the value is managed through props.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/date-and-time/date-range-picker.mdx#2025-04-15_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<DateRangePicker value={dateRange} onChange={setDateRange} />\n```\n\n----------------------------------------\n\nTITLE: Setting Inset Sidebar Intent\nDESCRIPTION: Implementation of the Sidebar with the 'inset' intent. This variation adds padding to the main content for a visually distinct layout.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/layouts/sidebar.mdx#2025-04-15_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Sidebar intent=\"inset\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring PostCSS for Tailwind CSS v4\nDESCRIPTION: Updated PostCSS configuration file that includes the Tailwind CSS plugin for v4. The highlighted line shows the plugin integration.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/prologue/upgrade-guide.mdx#2025-04-15_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  plugins: {\n    '@tailwindcss/postcss': {},\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Displaying Toolbar Source Code\nDESCRIPTION: Renders the source code for the Toolbar component.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/controls/toolbar.mdx#2025-04-15_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<SourceCode toShow='toolbar'/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Decimal Format in Meter\nDESCRIPTION: Example of using the Meter component with decimal format for displaying values.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/statuses/meter.mdx#2025-04-15_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<How toUse=\"statuses/meter/meter-decimal-format-demo\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Carousel Component\nDESCRIPTION: Instructions for installing the carousel component and its dependencies using a package manager.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/media/carousel.mdx#2025-04-15_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install embla-carousel-autoplay\n```\n\n----------------------------------------\n\nTITLE: Configuring package.json for Recharts with React 19\nDESCRIPTION: This configuration adds an override in package.json to ensure Recharts v2.15.0 works properly with React 19. It specifically sets react-is to version 19.0.0 or higher to maintain compatibility.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/getting-started/react-19.mdx#2025-04-15_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"overrides\": {\n  \"react-is\": \"^19.0.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Meter Component Source Code\nDESCRIPTION: A component or function call to display the source code of the Meter component.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/statuses/meter.mdx#2025-04-15_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<SourceCode toShow='meter'/>\n```\n\n----------------------------------------\n\nTITLE: Note Without Indicator Demo\nDESCRIPTION: Example showing how to disable the indicator in the Note component.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/statuses/note.mdx#2025-04-15_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n<How isCenter={false} toUse=\"statuses/note/note-no-indicator-demo\" />\n```\n\n----------------------------------------\n\nTITLE: Displaying Basic Scatter Chart Demo in Intent UI\nDESCRIPTION: This code demonstrates how to display a basic scatter chart demo using the How component with specific configuration options. It renders the scatter-chart-basic-demo with no padding and without centering.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/charts/scatter-chart.mdx#2025-04-15_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<How withNoPadding={true} isCenter={false} toUse=\"charts/scatter/scatter-chart-basic-demo\" />\n```\n\n----------------------------------------\n\nTITLE: Soft Skeleton Implementation\nDESCRIPTION: Shows how to implement a soft variant of the Skeleton component with darker appearance.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/statuses/skeleton.mdx#2025-04-15_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<How toUse=\"statuses/skeleton-soft-demo\" />\n```\n\n----------------------------------------\n\nTITLE: Inertia.js Theme Provider Implementation\nDESCRIPTION: Theme provider implementation for React Aria Components with Inertia.js. This component sets up color scheme preferences and handles theme changes via OS settings.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/getting-started/client-side-routing.mdx#2025-04-15_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useEffect, useState } from 'react';\nimport { OverlayProvider, ColorScheme, SSRProvider } from 'react-aria-components';\n\nexport function ThemeProvider({ children }: { children: React.ReactNode }) {\n    // Initialize with system color scheme\n    const [colorScheme, setColorScheme] = useState<ColorScheme>('light');\n\n    useEffect(() => {\n        // Update color scheme based on OS settings\n        const media = window.matchMedia('(prefers-color-scheme: dark)');\n        setColorScheme(media.matches ? 'dark' : 'light');\n\n        // Listen for changes\n        function onChange(event: MediaQueryListEvent) {\n            setColorScheme(event.matches ? 'dark' : 'light');\n        }\n\n        media.addEventListener('change', onChange);\n        return () => media.removeEventListener('change', onChange);\n    }, []);\n\n    return (\n        <SSRProvider>\n            <OverlayProvider className={colorScheme}>\n                {children}\n            </OverlayProvider>\n        </SSRProvider>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Note Component Anatomy Display\nDESCRIPTION: Visualization of the Note component's structure and anatomy.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/statuses/note.mdx#2025-04-15_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n<Anatomy show='note-anatomy'/>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Description List within a Card\nDESCRIPTION: This code demonstrates how to use the Description List component within a card. It uses a custom How component to display the demo.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/surfaces/description-list.mdx#2025-04-15_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<How isCenter={false} toUse=\"surfaces/description-list/description-list-card-demo\" />\n```\n\n----------------------------------------\n\nTITLE: Manual Installation of Recharts Library\nDESCRIPTION: Code for manually installing the Recharts library which is required for scatter charts. It uses the Installation component with the manual installation option enabled.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/charts/scatter-chart.mdx#2025-04-15_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Installation options={{ isManual: true }} items={['recharts']}/>\n```\n\n----------------------------------------\n\nTITLE: Hiding Escape Button in Command Menu\nDESCRIPTION: Example of how to configure a CommandMenu to hide the escape button by setting the escapeButton prop to false.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/controls/command-menu.mdx#2025-04-15_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<CommandMenu\n  escapeButton={false}\n  isOpen={isOpen}\n  onOpenChange={setIsOpen}\n/>\n```\n\n----------------------------------------\n\nTITLE: Color Area Component Configuration\nDESCRIPTION: YAML frontmatter configuration for the Color Area component documentation, defining metadata like title, description, order, and external references.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/colors/color-area.mdx#2025-04-15_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: \"Color Area\"\ndescription: An interactive color selection tool that enables users to pick a color by adjusting both hue and saturation within a 2D space.\norder: 3\npublished: true\nreferences: [\"https://react-spectrum.adobe.com/react-aria/ColorArea.html#props\"]\n---\n```\n\n----------------------------------------\n\nTITLE: Displaying Source Code for Description List Component\nDESCRIPTION: This code snippet is used to show the source code for the Description List component. It utilizes a custom SourceCode component.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/surfaces/description-list.mdx#2025-04-15_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<SourceCode toShow='description-list' />\n```\n\n----------------------------------------\n\nTITLE: Importing Area Chart Component in React\nDESCRIPTION: This snippet demonstrates how to import and use the Area Chart component in a React application. It includes options for customizing the chart's appearance and behavior.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/charts/area-chart.mdx#2025-04-15_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<How withNoPadding={true} isCenter={false} toUse=\"charts/area/area-chart-basic-demo\" />\n```\n\n----------------------------------------\n\nTITLE: Toggle Button Basic Implementation\nDESCRIPTION: Demonstrates how to use the basic toggle button component for enabling/disabling features.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/buttons/toggle.mdx#2025-04-15_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<How toUse=\"buttons/toggle/toggle-demo\" />\n```\n\n----------------------------------------\n\nTITLE: Manual Skeleton Installation Reference\nDESCRIPTION: Displays the source code for manual installation of the Skeleton component.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/statuses/skeleton.mdx#2025-04-15_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<SourceCode toShow='skeleton'/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Switch Component Metadata\nDESCRIPTION: Frontmatter configuration for the Switch component documentation, including title, description, ordering, and external references.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/controls/switch.mdx#2025-04-15_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: \"Switch\"\ndescription: A toggle component that allows users to enable or disable a setting with a smooth transition effect.\norder: 2\npublished: true\nreferences: [\"https://react-spectrum.adobe.com/react-aria/Switch.html#props\"]\n---\n```\n\n----------------------------------------\n\nTITLE: Displaying Source Code for Heading Component\nDESCRIPTION: This snippet shows how to display the source code for the Heading component. It uses a custom SourceCode component to render the code for the heading component.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/surfaces/heading.mdx#2025-04-15_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<SourceCode toShow='heading' />\n```\n\n----------------------------------------\n\nTITLE: Components Folder Structure\nDESCRIPTION: This code snippet displays the folder structure of the components directory, which is the core of the project. It shows the organization of UI components, documentation components, and blocks.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/CONTRIBUTING.md#2025-04-15_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncomponents\n├── blocks\n├── code\n├── docs\n│   ├── anatomies\n│   ├── buttons ...\n│   ├── charts ...\n│   ├── collections ...\n│   ├── colors ...\n│   ├── controls ...\n│   ├── date-and-time ...\n│   ├── drag-and-drop ...\n│   ├── forms ...\n│   ├── media ...\n│   ├── navigation ...\n│   ├── outside ...\n│   ├── overlays ...\n│   ├── pickers ...\n│   ├── statuses ...\n│   └── surfaces ...\n├── experimental\n└── ui\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter for Intent Release Post\nDESCRIPTION: YAML frontmatter metadata for a blog post announcing Intent v1.0.0 release, including title, description, publication date and author information.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/blog/first-release.mdx#2025-04-15_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: \"First Release: Intent v1.0.0\"\ndescription: This is the first release of Intent. It includes all the components and utilities that you need to build your next project.\npublished: 2024-07-05\nauthor: irsyadadl\n---\n```\n\n----------------------------------------\n\nTITLE: Installing Heading Component in React\nDESCRIPTION: This code demonstrates how to install the Heading component. It uses a custom Installation component to display the installation instructions for the heading component in IntentUI.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/surfaces/heading.mdx#2025-04-15_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Installation options={{ isComponent: true }} items={['heading']} />\n```\n\n----------------------------------------\n\nTITLE: Toggle Intent Customization\nDESCRIPTION: Example of customizing toggle button appearance using the intent prop.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/buttons/toggle.mdx#2025-04-15_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<How toUse=\"buttons/toggle/toggle-appearance-demo\" />\n```\n\n----------------------------------------\n\nTITLE: Release Documentation in Markdown\nDESCRIPTION: Front matter and changelog documentation for IntentUI v2.0.1 release, including new features, component changes, and contributor information.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/blog/release-v201.mdx#2025-04-15_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Release 2.0.1\ndescription: This release resolves bugs in certain components and introduces a new autocomplete feature from React Aria components, now integrated into the command menu.\npublished: 2025-01-16\nauthor: irsyadadl\n---\n```\n\n----------------------------------------\n\nTITLE: Component Installation\nDESCRIPTION: Shows the installation setup for the Separator component using the built-in Installation component.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/surfaces/separator.mdx#2025-04-15_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Installation options={{ isComponent: true }} items={['separator']}/>\n```\n\n----------------------------------------\n\nTITLE: Registry Folder Structure\nDESCRIPTION: This code snippet illustrates the organization of the registry directory that contains all components and their files. The registry is used to generate various sections of the documentation.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/CONTRIBUTING.md#2025-04-15_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npublic/registry\n├── anatomies\n├── blocks\n│   ├── navbar ...\n│   └── sidebar ...\n├── demo\n│   ├── buttons ...\n│   ├── charts ...\n│   ├── collections ...\n│   ├── colors ...\n│   ├── controls ...\n│   ├── date-and-time ...\n│   ├── drag-and-drop\n│   ├── forms ...\n│   ├── media\n│   ├── navigation ...\n│   ├── outside\n│   ├── overlays ...\n│   ├── pickers ...\n│   ├── statuses ...\n│   └── surfaces ...\n├── docs\n│   └── installation\n└── ui\n```\n\n----------------------------------------\n\nTITLE: Manual Dependency Installation\nDESCRIPTION: Demonstrates manual installation of required dependencies, specifically react-aria-components.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/surfaces/separator.mdx#2025-04-15_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Installation options={{ isManual: true }} items={['react-aria-components']}/>\n<SourceCode toShow='separator'/>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Basic Heading Usage in React\nDESCRIPTION: This snippet showcases the basic usage of the Heading component. It demonstrates how to implement a standard heading in a React application using IntentUI.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/surfaces/heading.mdx#2025-04-15_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<How toUse=\"surfaces/heading/heading-demo\" />\n```\n\n----------------------------------------\n\nTITLE: Adding Intent UI Components\nDESCRIPTION: Command to add new Intent UI components to an existing project\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/getting-started/laravel.mdx#2025-04-15_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx @intentui/cli@latest add table\n```\n\n----------------------------------------\n\nTITLE: Running the Intent UI CLI to Change Gray Scale\nDESCRIPTION: Command to execute the Intent UI CLI for changing the gray scale in your project. The CLI allows selection between different Tailwind gray variants such as gray, slate, zinc, stone, and neutral.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/getting-started/colors.mdx#2025-04-15_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @intentui/cli@latest change-gray\n```\n\n----------------------------------------\n\nTITLE: Applying Font Variables to HTML Body\nDESCRIPTION: Demonstrates how to apply the configured font to the body element in a Next.js application for consistent typography throughout the site.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/getting-started/installation.mdx#2025-04-15_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n<body\n  className={`font-sans antialiased ${fontSans.variable}`}\n/>\n```\n\n----------------------------------------\n\nTITLE: Using Link as a Button in React\nDESCRIPTION: Shows how to style a Link component to look like a button using the buttonStyles prop.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/navigation/link.mdx#2025-04-15_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<How toUse=\"navigation/link/link-button-demo\" />\n```\n\n----------------------------------------\n\nTITLE: Switch Component Source Code Display\nDESCRIPTION: Component for displaying the switch component source code.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/controls/switch.mdx#2025-04-15_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<SourceCode toShow='switch'/>\n```\n\n----------------------------------------\n\nTITLE: Manual Dependency Installation\nDESCRIPTION: Instructions for manually installing required dependencies using the Installation component.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/controls/switch.mdx#2025-04-15_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Installation options={{ isManual: true }} items={['react-aria-components']}/>\n```\n\n----------------------------------------\n\nTITLE: Basic Separator Usage\nDESCRIPTION: Demonstrates the basic implementation of the Separator component to divide content sections.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/surfaces/separator.mdx#2025-04-15_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<How isCenter={false} toUse=\"surfaces/separator/separator-demo\" />\n```\n\n----------------------------------------\n\nTITLE: Displaying Input OTP Component Anatomy\nDESCRIPTION: Utilizes a custom Anatomy component to visually represent the structure and layout of the Input OTP component, helping developers understand its composition.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/forms/input-otp.mdx#2025-04-15_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Anatomy show='input-otp-anatomy'/>\n```\n\n----------------------------------------\n\nTITLE: Basic Form Component Import and Usage\nDESCRIPTION: Shows the basic import and usage of the Form component from the UI library.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/forms/form.mdx#2025-04-15_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Form } from 'ui'\n\n<Form/>\n```\n\n----------------------------------------\n\nTITLE: Separator Orientation Demo\nDESCRIPTION: Demonstrates the different orientation options (horizontal and vertical) available for the Separator component.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/surfaces/separator.mdx#2025-04-15_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<How toUse=\"surfaces/separator/separator-orientation-demo\" />\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Description List with Heading\nDESCRIPTION: This snippet shows how to use the Description List component with a heading. It uses a custom How component to display the demo.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/surfaces/description-list.mdx#2025-04-15_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<How isCenter={false} toUse=\"surfaces/description-list/description-list-heading-demo\" />\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Button Shapes\nDESCRIPTION: Example of Button component with various shapes.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/buttons/button.mdx#2025-04-15_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<How toUse=\"buttons/button/button-shape-demo\" />\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Icon-Only Button\nDESCRIPTION: Example of Button component with only an icon.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/buttons/button.mdx#2025-04-15_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n<How toUse=\"buttons/button/button-only-icon-demo\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Button Component in IntentUI\nDESCRIPTION: Instructions for installing the Button component using the provided Installation component.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/buttons/button.mdx#2025-04-15_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Installation options={{isComponent: true}} items={['button']}/>\n```\n\n----------------------------------------\n\nTITLE: Displaying Chart Source Code\nDESCRIPTION: This code renders the source code for the chart component using the SourceCode component, which helps users understand how to implement the chart in their own projects.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/charts/scatter-chart.mdx#2025-04-15_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<SourceCode toShow={'chart'} />\n```\n\n----------------------------------------\n\nTITLE: Configuring Expandable Toast\nDESCRIPTION: Shows how to configure a toast to be expandable to show more content.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/statuses/toast.mdx#2025-04-15_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Toast expand />\n```\n\n----------------------------------------\n\nTITLE: Installing Meter Component in React\nDESCRIPTION: Instructions for installing the Meter component and its dependencies using a package manager.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/statuses/meter.mdx#2025-04-15_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Installation options={{ isComponent: true }} items={['meter']}/>\n```\n\n----------------------------------------\n\nTITLE: Installing Intent UI Chart Component\nDESCRIPTION: Code for installing the chart component of Intent UI. It uses the Installation component with the chart option specified as a component installation.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/charts/scatter-chart.mdx#2025-04-15_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Installation options={{ isComponent: true }} items={['chart']}/>\n```\n\n----------------------------------------\n\nTITLE: Labeled Donut Chart\nDESCRIPTION: Example of a donut chart with integrated text labels for enhanced data presentation.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/charts/pie-chart.mdx#2025-04-15_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n<How withNoPadding={true} isCenter={false} toUse=\"charts/pie/pie-chart-donut-with-text-demo\"/>\n```\n\n----------------------------------------\n\nTITLE: Manual Dependencies Installation\nDESCRIPTION: Instructions for manually installing required dependencies including react-aria-components and IntentUI icons.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/statuses/note.mdx#2025-04-15_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n<Installation options={{ isManual: true }} items={['react-aria-components', '@intentui/icons']}/>\n<SourceCode toShow='note'/>\n```\n\n----------------------------------------\n\nTITLE: Dialog Component Definition\nDESCRIPTION: Basic structure and metadata for the Dialog component documentation, including status and relationships to other components.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/overlays/dialog.mdx#2025-04-15_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: \"Dialog\"\ndescription: A small, interactive UI element that overlays content to display important information or actions.\norder: 2\npublished: true\nstatus: primitive\n---\n```\n\n----------------------------------------\n\nTITLE: Displaying Link Component Source Code\nDESCRIPTION: Uses a custom SourceCode component to show the source code of the Link component.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/navigation/link.mdx#2025-04-15_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<SourceCode toShow='link'/>\n```\n\n----------------------------------------\n\nTITLE: Component Anatomy Display\nDESCRIPTION: Shows the structural anatomy of the Separator component using the Anatomy component.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/surfaces/separator.mdx#2025-04-15_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Anatomy show='separator-anatomy'/>\n```\n\n----------------------------------------\n\nTITLE: CLI Alias Usage Example\nDESCRIPTION: Example showing how to use the Intent UI CLI alias.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/getting-started/cli.mdx#2025-04-15_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nintentui [command]\n```\n\n----------------------------------------\n\nTITLE: Implementing Command Item Action Handler in React\nDESCRIPTION: Code snippet showing how to add an action handler to a CommandItem component that logs a message when the item is selected.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/controls/command-menu.mdx#2025-04-15_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<CommandItem onAction={() => console.log('share intentui.com/d/command')} />\n```\n\n----------------------------------------\n\nTITLE: Manual Installation of Dropdown Dependencies\nDESCRIPTION: Instructions for manually installing the required dependencies for using the Dropdown component, including React Aria Components and IntentUI Icons packages.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/collections/dropdown.mdx#2025-04-15_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Installation options={{ isManual: true }} items={['react-aria-components', '@intentui/icons']} />\n```\n\n----------------------------------------\n\nTITLE: Installing Tag Group Component in React\nDESCRIPTION: Instructions for installing the Tag Group component using a package manager.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/collections/tag-group.mdx#2025-04-15_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @your-package/tag-group\n```\n\n----------------------------------------\n\nTITLE: Manual Installation of Toolbar Dependencies\nDESCRIPTION: Provides instructions for manually installing the required dependencies, specifically react-aria-components.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/controls/toolbar.mdx#2025-04-15_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Installation options={{ isManual: true }} items={['react-aria-components']}/>\n```\n\n----------------------------------------\n\nTITLE: Basic Layout Implementation\nDESCRIPTION: Shows the basic implementation of wrapping content with the AppLayout component\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/components/layouts/navbar.mdx#2025-04-15_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<AppLayout>\n  {/* your main content */}\n</AppLayout>\n```\n\n----------------------------------------\n\nTITLE: Intent CLI Initialization Output\nDESCRIPTION: This snippet displays the output of running the Intent CLI initialization command. It shows the setup process, including folder selection, configuration updates, and file creation.\nSOURCE: https://github.com/irsyadadl/intentui/blob/2.x/resources/content/docs/2.x/getting-started/vite.mdx#2025-04-15_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n✔ Initializing.\n✔ Components folder: src/components\n✔ Utils folder: src/utils\n✔ Where would you like to place the CSS file? src/index.css\n✔ Paths added to tsconfig.app.json.\n✔ Pick your desired base gray: zinc\n✔ Installing dependencies.\n✔ Configuring.\n✔ UI folder created at `src/components/ui`\n✔ Primitive file saved to `src/components/ui/primitive.tsx`\n✔ Theme Provider file saved to `\"src/components/theme-provider.ts\"`\n✔ Providers file saved to `\"src/components/providers.tsx\"`\n✔ Configuration saved to `intentui.json`\n✔ Installation complete.\n```"
  }
]