[
  {
    "owner": "snoai",
    "repo": "magi-markdown",
    "content": "TITLE: AI Script Block JSON Example\nDESCRIPTION: Demonstrates the structure of a JSON object embedded within an `ai-script` Markdown code block for specifying instructions to an AI processor.  It includes fields like `script-id`, `prompt`, `model-name`, and `parameters`. This example shows basic AI processing setup with temperature setting.\nSOURCE: https://github.com/snoai/magi-markdown/blob/main/docs/specification.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"script-id\": \"summary-request-001\",\n  \"prompt\": \"Summarize this section.\",\n  \"model-name\": \"gpt-4o\",\n  \"parameters\": {\n    \"temperature\": 0.7\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding AI Instructions with ai-script Block\nDESCRIPTION: Illustrates how to embed AI instructions within a MAGI file using an `ai-script` block. The example defines a script with an ID, prompt, priority, and auto-run setting for AI processing.\nSOURCE: https://github.com/snoai/magi-markdown/blob/main/docs/quickstart.mdx#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"script-id\": \"summary-request\",\n  \"prompt\": \"Summarize this document briefly.\",\n  \"priority\": \"medium\",\n  \"auto-run\": true\n}\n\n```\n\n----------------------------------------\n\nTITLE: Summarizing Market Trends with AI Script\nDESCRIPTION: This ai-script block instructs the AI to summarize market trends from the preceding paragraph. It defines the prompt, priority (high), maximum tokens, runtime environment (server), and output format (text). The 'auto-run' is set to true, indicating it will execute automatically.\nSOURCE: https://github.com/snoai/magi-markdown/blob/main/docs/mda-examples/dynamic-content-generation.mdx#_snippet_1\n\nLANGUAGE: ai-script\nCODE:\n```\n{\n  \"script-id\": \"summarize-market-trends-v2\",\n  \"prompt\": \"Provide a 2-sentence summary of the key market trends discussed in the preceding paragraph.\",\n  \"priority\": \"high\",\n  \"auto-run\": true,\n  \"parameters\": {\n    \"max-tokens\": 50\n  },\n  \"runtime-env\": \"server\",\n  \"output-format\": \"text\"\n}\n```\n\n----------------------------------------\n\nTITLE: Explaining Quantum Entanglement with AI Script\nDESCRIPTION: This ai-script block defines instructions for simplifying an explanation of quantum entanglement. It specifies the prompt, priority, AI provider (Anthropic), model (Claude-3-Sonnet), temperature, and output format (Markdown). The 'auto-run' is set to false, indicating it requires manual execution.\nSOURCE: https://github.com/snoai/magi-markdown/blob/main/docs/mda-examples/dynamic-content-generation.mdx#_snippet_0\n\nLANGUAGE: ai-script\nCODE:\n```\n<!-- AI-PROCESSOR: The block below asks for a simplified explanation -->\n{\n  \"script-id\": \"explain-entanglement-simple-v1\",\n  \"prompt\": \"Explain the concept of quantum entanglement described above in simpler terms, suitable for a high school student.\",\n  \"priority\": \"medium\",\n  \"auto-run\": false,\n  \"provider\": \"anthropic\",\n  \"model-name\": \"claude-3-sonnet\",\n  \"parameters\": {\n    \"temperature\": 0.6\n  },\n  \"output-format\": \"markdown\"\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering AI Script Results (React)\nDESCRIPTION: This React code snippet handles rendering the results of an AI script. It displays a loading state, error messages, streamed content using a MarkdownRenderer or pre tag, and final results including handling structured JSON output. It uses the `scriptData` prop to determine output format and schema.\nSOURCE: https://github.com/snoai/magi-markdown/blob/main/docs/mdx/mda-mdx-conversion.mdx#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n{isLoading ? 'Processing...' : label}\n                    </button>\n                  )}\n                  {/* Add other interactive types if needed */}\n\n                  {error && <div className=\"error\">{error}</div>}\n\n                  {/* Render streamed content if applicable */}\n                  {streamedContent && !result && (\n                    <div className=\"result stream\">\n                      {scriptData.outputFormat === 'markdown' ? (\n                         <MarkdownRenderer content={streamedContent} />\n                      ) : (\n                         <pre>{streamedContent}</pre>\n                      )}\n                    </div>\n                  )}\n\n                  {/* Render final result (non-streamed or structured) */}\n                  {result && (\n                    <div className=\"result final\">\n                      {/* Handle structured JSON output */}\n                      {scriptData.outputSchema && typeof result.content === 'object' ? (\n                        <pre>{JSON.stringify(result.content, null, 2)}</pre>\n                      ) : result.format === 'markdown' ? (\n                        <MarkdownRenderer content={result.content} />\n                      ) : (\n                        <pre>{result.content}</pre>\n                      )}\n                    </div>\n                  )}\n```\n\n----------------------------------------\n\nTITLE: MDX Footnote Conversion - Custom React Component\nDESCRIPTION: This MDX snippet demonstrates replacing footnote references directly with a custom React component (DocLink) to handle linking and relationship information display. The DocLink component would render the link text/number and implement tooltip/popover logic, offering flexibility for custom UI and behavior.\nSOURCE: https://github.com/snoai/magi-markdown/blob/main/docs/mdx/mda-mdx-conversion.mdx#_snippet_4\n\nLANGUAGE: mdx\nCODE:\n```\nimport { DocLink } from '@/components';\n\nThis document references specifications <DocLink docId=\"SPEC-UUID-123\" relType=\"cites\" relDesc=\"Cites the core specification\" /> and related guides <DocLink sourceUrl=\"https://example.com/guide\" relType=\"related\" relDesc=\"Related implementation guide\" />.\n\n{/* The DocLink component would handle rendering the link text/number and tooltip/popover logic. */}\n```\n\n----------------------------------------\n\nTITLE: Define Footnote with JSON Payload (AIMD)\nDESCRIPTION: This snippet shows how to define a footnote in AIMD with a JSON payload that describes the relationship to another document. The `rel-type` specifies the relationship type, `doc-id` identifies the target document, and `rel-desc` provides a description.\nSOURCE: https://github.com/snoai/magi-markdown/blob/main/docs/mda-examples/technical-doc-2.mdx#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[^core-spec]: `{\"rel-type\":\"reference\",\"doc-id\":\"c5a6b7d8-1e2f-3a4b-5c6d-7e8f9a0b1c2d\",\"rel-desc\":\"Core technical specification overview\"}`\n```\n\n----------------------------------------\n\nTITLE: Defining Footnote Relationships in AIMD\nDESCRIPTION: These footnotes define relationships between the current document and other documents in the system. They use a JSON structure to specify the relationship type, the document ID of the related document, and a description of the relationship. This structured approach allows for machine-readable links and knowledge graph construction.\nSOURCE: https://github.com/snoai/magi-markdown/blob/main/docs/mda-examples/technical-doc.mdx#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[^fm]: `{\"rel-type\":\"related\",\"doc-id\":\"uuid-schema-spec-frontmatter\",\"rel-desc\":\"See Front Matter schema for field details\"}`\n```\n\nLANGUAGE: json\nCODE:\n```\n[^ai]: `{\"rel-type\":\"child\",\"doc-id\":\"uuid-schema-spec-ai-script\",\"rel-desc\":\"Detailed AI Script Block specification\"}`\n```\n\nLANGUAGE: json\nCODE:\n```\n[^kg]: `{\"rel-type\":\"related\",\"doc-id\":\"uuid-concept-knowledge-graph\",\"rel-desc\":\"Overview of Knowledge Graph integration\"}`\n```\n\n----------------------------------------\n\nTITLE: Using Interactive AI Script Component (MDX)\nDESCRIPTION: This MDX code shows how to use the InteractiveAIScript component. It passes an `initialContext` prop to provide context for the AI script. The component likely handles the AI script execution and result rendering.\nSOURCE: https://github.com/snoai/magi-markdown/blob/main/docs/mdx/mda-mdx-conversion.mdx#_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n<InteractiveAIScript_summary_request_001 initialContext={\"Some context before the script.\"} />\n```\n\n----------------------------------------\n\nTITLE: Extract Action Items AI Script\nDESCRIPTION: This AI script extracts action items from the meeting minutes document. It is configured to run automatically with medium priority and output the extracted action items in JSON format. The script specifically targets the 'Action Items' section and lists each item with the assigned person.\nSOURCE: https://github.com/snoai/magi-markdown/blob/main/docs/mda-examples/simple-meeting-minutes.mdx#_snippet_0\n\nLANGUAGE: ai-script\nCODE:\n```\n{\n  \"script-id\": \"extract-action-items-projX-01\",\n  \"prompt\": \"Extract all action items from the 'Action Items' section above. List each item clearly with the assigned person. Format as a JSON list.\",\n  \"priority\": \"medium\",\n  \"auto-run\": true,\n  \"output-format\": \"json\"\n}\n```\n\n----------------------------------------\n\nTITLE: MAGI Footnote Example (Markdown)\nDESCRIPTION: This snippet illustrates how MAGI uses JSON within Markdown footnotes to define typed relationships between documents. These relationships can be converted to enhanced links or custom React components in MDX.\nSOURCE: https://github.com/snoai/magi-markdown/blob/main/docs/mdx/mda-mdx-conversion.mdx#_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nThis document references specifications[^spec1] and related guides[^guide2].\n\n[^spec1]: `{\"rel-type\": \"cites\", \"doc-id\": \"SPEC-UUID-123\", \"rel-desc\": \"Cites the core specification\"}`\n[^guide2]: `{\"rel-type\": \"related\", \"source-url\": \"https://example.com/guide\", \"rel-desc\": \"Related implementation guide\"}`\n```\n\n----------------------------------------\n\nTITLE: Define 'related' Footnote with Strength (AIMD)\nDESCRIPTION: This snippet defines a 'related' footnote with an additional `rel-strength` parameter.  This parameter indicates the strength or relevance of the relationship. The `rel-type` is set to 'related', and a `doc-id` and `rel-desc` are provided as well.\nSOURCE: https://github.com/snoai/magi-markdown/blob/main/docs/mda-examples/technical-doc-2.mdx#_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[^dyn-gen]: `{\"rel-type\":\"related\",\"doc-id\":\"da7b1a9e-4f8c-4b7d-8e1f-9c0a2d3b4c5d\",\"rel-desc\":\"Dynamic content generation example\",\"rel-strength\":0.7}`\n```\n\n----------------------------------------\n\nTITLE: Define 'citation' Footnote with URL (AIMD)\nDESCRIPTION: This snippet defines a 'citation' footnote that links to an external resource using a `source-url`. The `rel-type` is set to 'citation', and a `rel-desc` provides a description of the cited resource.\nSOURCE: https://github.com/snoai/magi-markdown/blob/main/docs/mda-examples/technical-doc-2.mdx#_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n[^md-guide]: `{\"rel-type\":\"citation\",\"source-url\":\"https://www.markdownguide.org/basic-syntax/\",\"rel-desc\":\"Official Markdown syntax guide (external)\"}`\n```\n\n----------------------------------------\n\nTITLE: Decoding MAGI with Python (Conceptual)\nDESCRIPTION: This Python snippet outlines a conceptual command-line script for decoding MAGI files. It reads MAGI content from either a file path provided as a command-line argument or from standard input. It then uses a `decode_magi` function (assumed to be defined elsewhere) to parse the MAGI content and outputs the structured data as a JSON object to standard output using `json.dumps`.\nSOURCE: https://github.com/snoai/magi-markdown/blob/main/docs/mdx/developer-guide.mdx#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Example: cli_decoder.py (requires decode_magi function from above)\nimport sys\nimport json\n# from your_module import decode_magi # Assuming decode_magi is available\n\nif __name__ == \"__main__\":\n    if len(sys.argv) > 1:\n        file_path = sys.argv[1]\n        with open(file_path, 'r', encoding='utf-8') as f:\n            magi_content = f.read()\n    else:\n        # Read from stdin if no file provided\n        magi_content = sys.stdin.read()\n\n    decoded_data = decode_magi(magi_content)\n    # Output the structured data as JSON to stdout\n    print(json.dumps(decoded_data, indent=2))\n\n# Usage: python cli_decoder.py input.mda > output.json\n# Or: cat input.mda | python cli_decoder.py > output.json\n```\n\n----------------------------------------\n\nTITLE: MAGI Front Matter to MDX Front Matter Conversion (YAML)\nDESCRIPTION: This snippet shows the conversion of MAGI YAML front matter to MDX YAML front matter. It highlights the potential need for case conversion from kebab-case to camelCase for better JavaScript/TypeScript compatibility. A pre-processor during the build step should handle the parsing and injection.\nSOURCE: https://github.com/snoai/magi-markdown/blob/main/docs/mdx/mda-mdx-conversion.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndoc-id: \"38f5a922-81b2-4f1a-8d8c-3a5be4ea7511\"\ntitle: \"Introduction to MAGI\"\ndescription: \"Explains the MAGI format.\"\ntags: [\"markdown\", \"ai\", \"rag\"]\ncreated-date: \"2024-01-15T09:00:00Z\"\nupdated-date: \"2024-06-01T15:30:00Z\"\n# ... other fields\n---\n\nStandard Markdown content...\n```\n\n----------------------------------------\n\nTITLE: MDX Front Matter Example (YAML)\nDESCRIPTION: This snippet demonstrates an example of MDX YAML front matter, highlighting the potential for camelCase naming conventions.  The front matter data can be accessed within MDX components.  A build step processes the MAGI YAML front matter and injects it into the MDX file.\nSOURCE: https://github.com/snoai/magi-markdown/blob/main/docs/mdx/mda-mdx-conversion.mdx#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndocId: \"38f5a922-81b2-4f1a-8d8c-3a5be4ea7511\" # Note: Consider consistent casing (e.g., camelCase)\ntitle: \"Introduction to MAGI\"\ndescription: \"Explains the MAGI format.\"\ntags: [\"markdown\", \"ai\", \"rag\"]\ncreatedDate: \"2024-01-15T09:00:00Z\"\nupdatedDate: \"2024-06-01T15:30:00Z\"\n# ... other fields mapped\n---\n\nimport { SomeComponent } from '@/components';\n\nStandard Markdown content...\n\n<SomeComponent data={frontmatter} />\n```\n\n----------------------------------------\n\nTITLE: Fetching Basic MAGI Conversion via cURL\nDESCRIPTION: This snippet demonstrates how to fetch a basic MAGI conversion for a given URL using `curl`. It sends a POST request to the specified worker URL with the URL to be converted and options to disable subpage conversion and LLM filtering. The output is then processed using `jq` to extract the MAGI content from the JSON response.\nSOURCE: https://github.com/snoai/magi-markdown/blob/main/docs/mdx/developer-guide.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\necho \"Fetching basic MAGI conversion for $TARGET_URL...\"\ncurl -s -X POST \"$WORKER_URL\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"url\": \"'\"$TARGET_URL\"'\",\n    \"subpages\": false,       # Convert only the specified URL\n    \"llmFilter\": false       # Don't use experimental LLM filtering\n  }' | jq '.mdaContent' # Extract the MAGI string from the JSON response\n```\n\n----------------------------------------\n\nTITLE: Decoding MAGI via Python Script\nDESCRIPTION: This snippet illustrates a conceptual Python script (`cli_decoder.py`) for decoding MAGI files from the command line. The script reads the MAGI content from a file or stdin, decodes it using a `decode_magi` function (assumed to be defined elsewhere), and outputs the decoded data as JSON to stdout. It requires the `sys` and `json` modules.\nSOURCE: https://github.com/snoai/magi-markdown/blob/main/docs/developer-guide.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Example: cli_decoder.py (requires decode_magi function from above)\nimport sys\nimport json\n# from your_module import decode_magi # Assuming decode_magi is available\n\nif __name__ == \"__main__\":\n    if len(sys.argv) > 1:\n        file_path = sys.argv[1]\n        with open(file_path, 'r', encoding='utf-8') as f:\n            magi_content = f.read()\n    else:\n        # Read from stdin if no file provided\n        magi_content = sys.stdin.read()\n\n    decoded_data = decode_magi(magi_content)\n    # Output the structured data as JSON to stdout\n    print(json.dumps(decoded_data, indent=2))\n\n# Usage: python cli_decoder.py input.mda > output.json\n# Or: cat input.mda | python cli_decoder.py > output.json\n```\n\n----------------------------------------\n\nTITLE: Cloning and Running url2mda Locally\nDESCRIPTION: Provides the steps to clone the MAGI Markdown repository, navigate to the url2mda directory, install dependencies using pnpm, and run the service locally for web content conversion.\nSOURCE: https://github.com/snoai/magi-markdown/blob/main/docs/quickstart.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/snoai/magi-markdown\n```\n\nLANGUAGE: bash\nCODE:\n```\ncd magi-markdown/apps/url2mda\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Fetching Basic MAGI Conversion using curl\nDESCRIPTION: This snippet demonstrates how to fetch a basic MAGI conversion from a specified URL using `curl`. It sends a POST request with a JSON payload containing the target URL and specifies options to disable subpage conversion and LLM filtering. The resulting MAGI string is extracted from the JSON response using `jq`.\nSOURCE: https://github.com/snoai/magi-markdown/blob/main/docs/developer-guide.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\necho \"Fetching basic MAGI conversion for $TARGET_URL...\"\ncurl -s -X POST \"$WORKER_URL\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"url\": \"'\"$TARGET_URL\"'\",\n    \"subpages\": false,       # Convert only the specified URL\n    \"llmFilter\": false       # Don't use experimental LLM filtering\n  }' | jq '.mdaContent' # Extract the MAGI string from the JSON response\n```\n\n----------------------------------------\n\nTITLE: Fetching MAGI with LLM Filtering via cURL\nDESCRIPTION: This snippet demonstrates fetching a MAGI conversion with LLM filtering enabled. It sends a POST request to the worker URL with the URL to be converted and the `llmFilter` option set to `true`. This enables experimental LLM-based content refinement, which requires proper setup on the server side. The output is then processed using `jq` to extract the MAGI content.\nSOURCE: https://github.com/snoai/magi-markdown/blob/main/docs/mdx/developer-guide.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\necho \"\\\\nFetching conversion with HTML details and LLM filter...\"\ncurl -s -X POST \"$WORKER_URL\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"url\": \"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\",\n    \"llmFilter\": true   # Attempt LLM-based content refinement (requires setup)\n  }' | jq '.mdaContent'\n```\n\n----------------------------------------\n\nTITLE: Requesting Plain Text MAGI Conversion via curl\nDESCRIPTION: This snippet shows how to request a plain text MAGI conversion using the `Accept` header in a `curl` request.  It sends a POST request with a JSON payload containing the URL, and it specifies that the response should be in `text/plain` format.\nSOURCE: https://github.com/snoai/magi-markdown/blob/main/docs/developer-guide.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\necho \"\\\\nFetching plain text MAGI conversion...\"\ncurl -s -X POST \"$WORKER_URL\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: text/plain\" \\\n  -d '{\"url\": \"'\"$TARGET_URL\"'\"}'\n```\n\n----------------------------------------\n\nTITLE: Fetching Plain Text MAGI via cURL (Accept Header)\nDESCRIPTION: This snippet shows how to fetch plain text MAGI conversion using the `Accept` header in the `curl` request. It sends a POST request to the worker URL with the content type set to `application/json` and the `Accept` header set to `text/plain`. This instructs the server to return the MAGI content directly without wrapping it in a JSON response.\nSOURCE: https://github.com/snoai/magi-markdown/blob/main/docs/mdx/developer-guide.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\necho \"\\\\nFetching plain text MAGI conversion...\"\ncurl -s -X POST \"$WORKER_URL\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: text/plain\" \\\n  -d '{\"url\": \"'\"$TARGET_URL\"'\"}'\n```\n\n----------------------------------------\n\nTITLE: Fetching MAGI Conversion with LLM Filter via curl\nDESCRIPTION: This snippet demonstrates how to request a MAGI conversion with HTML details and LLM filtering using `curl`. It sends a POST request with a JSON payload including the URL and enables the LLM filter. The `jq` command extracts the MAGI content from the JSON response.\nSOURCE: https://github.com/snoai/magi-markdown/blob/main/docs/developer-guide.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\necho \"\\\\nFetching conversion with HTML details and LLM filter...\"\ncurl -s -X POST \"$WORKER_URL\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"url\": \"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\",\n    \"llmFilter\": true   # Attempt LLM-based content refinement (requires setup)\n  }' | jq '.mdaContent'\n```\n\n----------------------------------------\n\nTITLE: AI Script Block JSON Example\nDESCRIPTION: Demonstrates a valid JSON object for an `ai-script` block, including a unique ID, prompt, and optional parameters for AI processing. The JSON object defines the instructions for the AI agent.\nSOURCE: https://github.com/snoai/magi-markdown/blob/main/docs/mdx/specification.mdx#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"script-id\": \"summary-request-001\",\n  \"prompt\": \"Summarize this section.\",\n  \"priority\": \"medium\",\n  \"auto-run\": true,\n  \"provider\": \"openai\",\n  \"model-name\": \"gpt-4o\",\n  \"system-prompt\": \"Act as a helpful assistant.\",\n  \"parameters\": {\n    \"temperature\": 0.7\n  },\n  \"retry-times\": 3,\n  \"runtime-env\": \"server\",\n  \"output-format\": \"markdown\",\n  \"output-schema\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"summary\": {\n        \"type\": \"string\"\n      }\n    }\n  },\n  \"stream\": true,\n  \"interactive-type\": \"button\",\n  \"interactive-label\": \"Run Summary\",\n  \"interactive-placeholder\": \"Enter your query...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a MAGI File (MDA) in Markdown\nDESCRIPTION: Demonstrates the basic structure of a MAGI (.mda) file, including YAML front matter for metadata and placeholders for content and AI scripts. The example shows fields like doc-id, title, description, and tags.\nSOURCE: https://github.com/snoai/magi-markdown/blob/main/docs/quickstart.mdx#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ndoc-id: \"example-123\"\ntitle: \"My First MAGI Document\"\ndescription: \"A simple example of MAGI format\"\ntags: [\"example\", \"getting-started\"]\ncreated-date: \"2024-06-10T10:00:00Z\"\n---\n\n# Hello MAGI\n\nThis is standard Markdown content.\n\n(Your ai-script block would go here - see below)\n\nThis document is related to our documentation[^ref1].\n\n[^ref1]: See JSON definition below.\n\n```\n\n----------------------------------------\n\nTITLE: MDX Footnote Conversion - Enhanced <a> Tags\nDESCRIPTION: This MDX snippet shows the conversion of MAGI footnotes into standard Markdown links enhanced with custom data attributes to hold relationship metadata. It utilizes a Tooltip component to display the metadata. A Remark/Rehype plugin or post-processing step is needed to handle the link rendering.\nSOURCE: https://github.com/snoai/magi-markdown/blob/main/docs/mdx/mda-mdx-conversion.mdx#_snippet_3\n\nLANGUAGE: mdx\nCODE:\n```\nimport { Tooltip } from '@/components'; // Example component\n\nThis document references specifications<Tooltip content='{\"rel-type\": \"cites\", \"doc-id\": \"SPEC-UUID-123\", \"rel-desc\": \"Cites the core specification\"}'><sup>[1]</sup></Tooltip> and related guides<Tooltip content='{\"rel-type\": \"related\", \"source-url\": \"https://example.com/guide\", \"rel-desc\": \"Related implementation guide\"}'><sup>[2]</sup></Tooltip>.\n\n{/* Link rendering could be handled by a Remark/Rehype plugin or post-processing */}\n{/* Actual links would point to resolved internal paths or external URLs */}\n\n[1]: /path/to/spec/SPEC-UUID-123 (Cites the core specification)\n[2]: https://example.com/guide (Related implementation guide)\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with PNPM\nDESCRIPTION: This command uses PNPM to install all the necessary dependencies for the AI-Markdown project.  Dependencies are listed in `package.json` and are required for building, testing, and running the project.\nSOURCE: https://github.com/snoai/magi-markdown/blob/main/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Running Tests\nDESCRIPTION: This command executes the test suite for the AI-Markdown project. Passing tests are essential before submitting changes to ensure the new code doesn't introduce regressions.\nSOURCE: https://github.com/snoai/magi-markdown/blob/main/CONTRIBUTING.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm run test        # Run tests\n```\n\n----------------------------------------\n\nTITLE: Footnote Relationship JSON Example\nDESCRIPTION: Shows the format for a JSON object embedded within a footnote definition to define a relationship between documents. The JSON contains the `rel-type`, `doc-id` or `source-url`, and `rel-desc` fields. This snippet helps to structure linked data with appropriate relationship types.\nSOURCE: https://github.com/snoai/magi-markdown/blob/main/docs/specification.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"rel-type\": \"parent\",\n  \"doc-id\": \"UUID-of-target-document\",\n  \"rel-desc\": \"Derived from primary SEC documentation\"\n}\n```\n\n----------------------------------------\n\nTITLE: Footnote Relationship JSON Example\nDESCRIPTION: Illustrates the structure of a JSON object embedded within a Markdown footnote to define a relationship between documents. It showcases the use of `rel-type`, `doc-id`, and other fields to specify the nature and context of the link.\nSOURCE: https://github.com/snoai/magi-markdown/blob/main/docs/mdx/specification.mdx#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"rel-type\": \"parent\",\n  \"doc-id\": \"UUID-of-target-document\",\n  \"rel-desc\": \"Derived from primary SEC documentation\",\n  \"rel-strength\": 0.8,\n  \"bi-directional\": true,\n  \"context\": {\n    \"section\": \"Introduction\",\n    \"relevance\": \"High\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Prettier\nDESCRIPTION: This command runs Prettier to automatically format the codebase according to the project's code style. This ensures consistent code formatting across the project.\nSOURCE: https://github.com/snoai/magi-markdown/blob/main/CONTRIBUTING.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npnpm prettier --write .\n```\n\n----------------------------------------\n\nTITLE: Type Checking\nDESCRIPTION: This command performs static type checking on the codebase using TypeScript.  It helps to catch type-related errors early in the development process.\nSOURCE: https://github.com/snoai/magi-markdown/blob/main/CONTRIBUTING.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npnpm run type-check  # Check types\n```\n\n----------------------------------------\n\nTITLE: Cloning Repository\nDESCRIPTION: This command is used to clone the forked repository from GitHub to your local machine. This is the first step in setting up the development environment for contributing to the project.\nSOURCE: https://github.com/snoai/magi-markdown/blob/main/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/snoai/ai-markdown.git\n```\n\n----------------------------------------\n\nTITLE: Creating Git Branch\nDESCRIPTION: This command is used to create a new branch for your feature or fix. It helps to isolate your changes and makes it easier to submit a pull request. Use `feature/` for new features and `fix/` for bug fixes.\nSOURCE: https://github.com/snoai/magi-markdown/blob/main/CONTRIBUTING.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b feature/your-feature-name\n# or\ngit checkout -b fix/your-fix-name\n```\n\n----------------------------------------\n\nTITLE: Previewing Documentation Locally\nDESCRIPTION: This command uses Mintlify to start a local development server for previewing documentation changes. This allows contributors to verify that documentation renders correctly before submitting their changes.\nSOURCE: https://github.com/snoai/magi-markdown/blob/main/CONTRIBUTING.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npnpm exec mintlify dev  # Preview documentation locally\n```\n\n----------------------------------------\n\nTITLE: Converting Web Content with url2mda using cURL\nDESCRIPTION: Shows how to use the `url2mda` service to convert web pages to MAGI format using a cURL request. It includes the necessary headers and JSON payload with the URL to convert and whether to include subpages.\nSOURCE: https://github.com/snoai/magi-markdown/blob/main/docs/quickstart.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://url2mda.sno.ai/convert \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"url\": \"https://example.com\",\n    \"subpages\": false\n  }'\n\n```\n\n----------------------------------------\n\nTITLE: Pushing Changes to Fork\nDESCRIPTION: This command pushes the changes from your local branch to your forked repository on GitHub. This is a necessary step before creating a pull request.\nSOURCE: https://github.com/snoai/magi-markdown/blob/main/CONTRIBUTING.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngit push origin feature/your-feature-name\n```"
  }
]