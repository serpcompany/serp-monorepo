[
  {
    "owner": "imerica",
    "repo": "dj-rest-auth",
    "content": "TITLE: Defining Python Package Dependencies for dj-rest-auth\nDESCRIPTION: A requirements file listing the necessary Python packages and their versions for the dj-rest-auth project. It includes testing tools, authentication libraries, and other utilities with specific version constraints.\nSOURCE: https://github.com/imerica/dj-rest-auth/blob/master/dj_rest_auth/tests/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncoveralls==1.11.1\ndjango-allauth[socialaccount]>=64.0.0\ndjangorestframework-simplejwt>=5.3.1\nflake8==7.1.1\nresponses==0.12.1\nunittest-xml-reporting==3.2.0\n```\n\n----------------------------------------\n\nTITLE: Configuring dj-rest-auth Settings in Django\nDESCRIPTION: This code snippet shows the default configuration for dj-rest-auth in a Django project's settings.py file. It includes settings for serializers, token models, JWT authentication, and various security options.\nSOURCE: https://github.com/imerica/dj-rest-auth/blob/master/docs/configuration.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Django project settings.py\n\n...\n\nREST_AUTH = {\n    'LOGIN_SERIALIZER': 'dj_rest_auth.serializers.LoginSerializer',\n    'TOKEN_SERIALIZER': 'dj_rest_auth.serializers.TokenSerializer',\n    'JWT_SERIALIZER': 'dj_rest_auth.serializers.JWTSerializer',\n    'JWT_SERIALIZER_WITH_EXPIRATION': 'dj_rest_auth.serializers.JWTSerializerWithExpiration',\n    'JWT_TOKEN_CLAIMS_SERIALIZER': 'rest_framework_simplejwt.serializers.TokenObtainPairSerializer',\n    'USER_DETAILS_SERIALIZER': 'dj_rest_auth.serializers.UserDetailsSerializer',\n    'PASSWORD_RESET_SERIALIZER': 'dj_rest_auth.serializers.PasswordResetSerializer',\n    'PASSWORD_RESET_CONFIRM_SERIALIZER': 'dj_rest_auth.serializers.PasswordResetConfirmSerializer',\n    'PASSWORD_CHANGE_SERIALIZER': 'dj_rest_auth.serializers.PasswordChangeSerializer',\n\n    'REGISTER_SERIALIZER': 'dj_rest_auth.registration.serializers.RegisterSerializer',\n\n    'REGISTER_PERMISSION_CLASSES': ('rest_framework.permissions.AllowAny',),\n\n    'TOKEN_MODEL': 'rest_framework.authtoken.models.Token',\n    'TOKEN_CREATOR': 'dj_rest_auth.utils.default_create_token',\n\n    'PASSWORD_RESET_USE_SITES_DOMAIN': False,\n    'OLD_PASSWORD_FIELD_ENABLED': False,\n    'LOGOUT_ON_PASSWORD_CHANGE': False,\n    'SESSION_LOGIN': True,\n    'USE_JWT': False,\n\n    'JWT_AUTH_COOKIE': None,\n    'JWT_AUTH_REFRESH_COOKIE': None,\n    'JWT_AUTH_REFRESH_COOKIE_PATH': '/',\n    'JWT_AUTH_SECURE': False,\n    'JWT_AUTH_HTTPONLY': True,\n    'JWT_AUTH_SAMESITE': 'Lax',\n    'JWT_AUTH_COOKIE_DOMAIN' : None,\n    'JWT_AUTH_RETURN_EXPIRATION': False,\n    'JWT_AUTH_COOKIE_USE_CSRF': False,\n    'JWT_AUTH_COOKIE_ENFORCE_CSRF_ON_UNAUTHENTICATED': False,\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JWT Http-Only cookies for dj-rest-auth\nDESCRIPTION: Optional configuration that enables JWT (JSON Web Token) authentication with Http-Only cookies for enhanced security. This setting helps prevent XSS attacks by making cookies inaccessible to JavaScript.\nSOURCE: https://github.com/imerica/dj-rest-auth/blob/master/README.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nREST_AUTH = {\n    'USE_JWT': True,\n    'JWT_AUTH_COOKIE': 'jwt-auth',\n}\n```\n\n----------------------------------------\n\nTITLE: Adding dj-rest-auth to Django INSTALLED_APPS\nDESCRIPTION: Configuration for adding the dj-rest-auth app and its dependencies to the INSTALLED_APPS setting in Django's settings.py file.\nSOURCE: https://github.com/imerica/dj-rest-auth/blob/master/docs/installation.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nINSTALLED_APPS = (\n    ...,\n    'rest_framework',\n    'rest_framework.authtoken',\n    ...,\n    'dj_rest_auth'\n)\n```\n\n----------------------------------------\n\nTITLE: Adding dj-rest-auth to Django's INSTALLED_APPS\nDESCRIPTION: Configuration required to add dj-rest-auth to the INSTALLED_APPS list in Django settings.py. This enables the authentication functionality within the Django project.\nSOURCE: https://github.com/imerica/dj-rest-auth/blob/master/README.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nINSTALLED_APPS = (\n    ...,\n    'rest_framework',\n    'rest_framework.authtoken',\n    ...,\n    'dj_rest_auth'\n)\n```\n\n----------------------------------------\n\nTITLE: Adding dj-rest-auth URL patterns to Django URLs\nDESCRIPTION: Configuration for adding dj-rest-auth URL patterns to Django's URL configuration. This includes all the authentication endpoints provided by the package.\nSOURCE: https://github.com/imerica/dj-rest-auth/blob/master/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nurlpatterns = [\n    path('dj-rest-auth/', include('dj_rest_auth.urls')),\n]\n```\n\n----------------------------------------\n\nTITLE: Enabling JWT Authentication in dj-rest-auth Settings\nDESCRIPTION: This snippet shows how to enable JWT authentication in dj-rest-auth by configuring the REST_AUTH settings.\nSOURCE: https://github.com/imerica/dj-rest-auth/blob/master/docs/installation.rst#2025-04-23_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nREST_AUTH = {\n    ...\n    'USE_JWT': True,\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Django REST Framework for JWT Authentication\nDESCRIPTION: This snippet shows how to configure Django REST Framework to use JWT authentication with dj-rest-auth.\nSOURCE: https://github.com/imerica/dj-rest-auth/blob/master/docs/installation.rst#2025-04-23_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nREST_FRAMEWORK = {\n    ...\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        ...\n        'dj_rest_auth.jwt_auth.JWTCookieAuthentication',\n    )\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JWT Cookies in dj-rest-auth Settings\nDESCRIPTION: This snippet demonstrates how to configure the cookie names for JWT authentication and refresh tokens in dj-rest-auth.\nSOURCE: https://github.com/imerica/dj-rest-auth/blob/master/docs/installation.rst#2025-04-23_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nREST_AUTH = {\n    ...\n    'JWT_AUTH_COOKIE': 'my-app-auth',\n    'JWT_AUTH_REFRESH_COOKIE': 'my-refresh-token',\n}\n```\n\n----------------------------------------\n\nTITLE: Adding dj-rest-auth URLs to Django URL Patterns\nDESCRIPTION: URL configuration to include dj-rest-auth endpoints in the Django project's URL patterns.\nSOURCE: https://github.com/imerica/dj-rest-auth/blob/master/docs/installation.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nurlpatterns = [\n    ...,\n    path('dj-rest-auth/', include('dj_rest_auth.urls'))\n]\n```\n\n----------------------------------------\n\nTITLE: Adding Registration URLs to Django URL Patterns\nDESCRIPTION: URL configuration to include both basic dj-rest-auth endpoints and registration endpoints in the Django project's URL patterns.\nSOURCE: https://github.com/imerica/dj-rest-auth/blob/master/docs/installation.rst#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nurlpatterns = [\n    ...,\n    path('dj-rest-auth/', include('dj_rest_auth.urls')),\n    path('dj-rest-auth/registration/', include('dj_rest_auth.registration.urls'))\n]\n```\n\n----------------------------------------\n\nTITLE: Installing dj-rest-auth Package with pip\nDESCRIPTION: Command to install the dj-rest-auth package using pip package manager.\nSOURCE: https://github.com/imerica/dj-rest-auth/blob/master/docs/installation.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npip install dj-rest-auth\n```\n\n----------------------------------------\n\nTITLE: Configuring INSTALLED_APPS for Registration Support\nDESCRIPTION: Configuration for adding django-allauth and related apps to INSTALLED_APPS in settings.py when enabling user registration functionality.\nSOURCE: https://github.com/imerica/dj-rest-auth/blob/master/docs/installation.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nINSTALLED_APPS = (\n    ...,\n    'django.contrib.sites',\n    'allauth',\n    'allauth.account',\n    'allauth.socialaccount',\n    'dj_rest_auth.registration',\n)\n\nSITE_ID = 1\n```\n\n----------------------------------------\n\nTITLE: Running Database Migrations for dj-rest-auth\nDESCRIPTION: Command to apply database migrations required by dj-rest-auth.\nSOURCE: https://github.com/imerica/dj-rest-auth/blob/master/docs/installation.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\npython manage.py migrate\n```\n\n----------------------------------------\n\nTITLE: Defining Python Package Dependencies for Django REST Auth\nDESCRIPTION: Specifies the required Python packages and their versions for a Django REST authentication system. Includes Django, DRF, JWT support, social authentication, API documentation, and CORS handling capabilities.\nSOURCE: https://github.com/imerica/dj-rest-auth/blob/master/demo/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndjango>=5.0.0\ndjangorestframework>=3.11.0\ndjangorestframework-simplejwt==5.3.1\ndjango-allauth[socialaccount]>=64.0.0\ndrf-yasg==1.21.7\ndjango-cors-headers==4.4.0\ncoreapi==2.3.3\nsetuptools==75.1.0\n-e ./.. \n```\n\n----------------------------------------\n\nTITLE: Configuring User Details Serializer in Django Settings\nDESCRIPTION: This snippet demonstrates how to configure the USER_DETAILS_SERIALIZER in Django settings to use the custom UserSerializer for Django Rest Auth.\nSOURCE: https://github.com/imerica/dj-rest-auth/blob/master/docs/faq.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nREST_AUTH = {\n    ...\n    'USER_DETAILS_SERIALIZER': 'demo.serializers.UserSerializer',\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom User Serializer for Django Rest Auth\nDESCRIPTION: This snippet shows how to create a custom UserSerializer that includes UserProfile data. It extends the UserDetailsSerializer and adds a nested UserProfileSerializer to handle profile updates.\nSOURCE: https://github.com/imerica/dj-rest-auth/blob/master/docs/faq.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom rest_framework import serializers\nfrom dj_rest_auth.serializers import UserDetailsSerializer\n\nclass UserProfileSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = UserProfile\n        fields = ('company_name',)\n\nclass UserSerializer(UserDetailsSerializer):\n\n    profile = UserProfileSerializer(source=\"userprofile\")\n\n    class Meta(UserDetailsSerializer.Meta):\n        fields = UserDetailsSerializer.Meta.fields + ('profile',)\n\n    def update(self, instance, validated_data):\n        userprofile_serializer = self.fields['profile']\n        userprofile_instance = instance.userprofile\n        userprofile_data = validated_data.pop('userprofile', {})\n        \n        # to access the 'company_name' field in here\n        # company_name = userprofile_data.get('company_name')\n        \n        # update the userprofile fields\n        userprofile_serializer.update(userprofile_instance, userprofile_data) \n        \n        instance = super().update(instance, validated_data)\n        return instance\n```\n\n----------------------------------------\n\nTITLE: Defining Account Confirmation URL in Django Rest Auth\nDESCRIPTION: This snippet shows how to define the account_confirm_email URL in Django Rest Auth. It uses a TemplateView to allow reverse() calls when sending verification emails.\nSOURCE: https://github.com/imerica/dj-rest-auth/blob/master/docs/faq.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nurl(r'^account-confirm-email/(?P<key>[-:\\w]+)/$', TemplateView.as_view(),\n    name='account_confirm_email'),\n```\n\n----------------------------------------\n\nTITLE: Configuring INSTALLED_APPS for Social Authentication\nDESCRIPTION: Configuration for adding social authentication providers (Facebook and Twitter) to INSTALLED_APPS in settings.py.\nSOURCE: https://github.com/imerica/dj-rest-auth/blob/master/docs/installation.rst#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nINSTALLED_APPS = (\n    ...,\n    'rest_framework',\n    'rest_framework.authtoken',\n    'dj_rest_auth'\n    ...,\n    'django.contrib.sites',\n    'allauth',\n    'allauth.account',\n    'dj_rest_auth.registration',\n    ...,\n    'allauth.socialaccount',\n    'allauth.socialaccount.providers.facebook',\n    'allauth.socialaccount.providers.twitter',\n\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Facebook Social Login View\nDESCRIPTION: Creating a custom view for Facebook authentication by subclassing SocialLoginView with the Facebook OAuth2 adapter.\nSOURCE: https://github.com/imerica/dj-rest-auth/blob/master/docs/installation.rst#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom allauth.socialaccount.providers.facebook.views import FacebookOAuth2Adapter\nfrom dj_rest_auth.registration.views import SocialLoginView\n\nclass FacebookLogin(SocialLoginView):\n    adapter_class = FacebookOAuth2Adapter\n```\n\n----------------------------------------\n\nTITLE: Adding Facebook Login URL to Django URL Patterns\nDESCRIPTION: URL configuration to include the custom Facebook login endpoint in the Django project's URL patterns.\nSOURCE: https://github.com/imerica/dj-rest-auth/blob/master/docs/installation.rst#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nurlpatterns += [\n    ...,\n    path('dj-rest-auth/facebook/', FacebookLogin.as_view(), name='fb_login')\n]\n```\n\n----------------------------------------\n\nTITLE: Implementing Twitter Social Login View\nDESCRIPTION: Creating a custom view for Twitter authentication using OAuth 1.0 by subclassing SocialLoginView with the Twitter OAuth adapter and a custom serializer.\nSOURCE: https://github.com/imerica/dj-rest-auth/blob/master/docs/installation.rst#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom allauth.socialaccount.providers.twitter.views import TwitterOAuthAdapter\nfrom dj_rest_auth.registration.views import SocialLoginView\nfrom dj_rest_auth.social_serializers import TwitterLoginSerializer\n\nclass TwitterLogin(SocialLoginView):\n    serializer_class = TwitterLoginSerializer\n    adapter_class = TwitterOAuthAdapter\n```\n\n----------------------------------------\n\nTITLE: Adding Twitter Login URL to Django URL Patterns\nDESCRIPTION: URL configuration to include the custom Twitter login endpoint in the Django project's URL patterns.\nSOURCE: https://github.com/imerica/dj-rest-auth/blob/master/docs/installation.rst#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nurlpatterns += [\n    ...,\n    path('dj-rest-auth/twitter/', TwitterLogin.as_view(), name='twitter_login')\n]\n```\n\n----------------------------------------\n\nTITLE: Implementing GitHub Social Login View\nDESCRIPTION: Creating a custom view for GitHub authentication by subclassing SocialLoginView with the GitHub OAuth2 adapter and specifying a callback URL and OAuth2 client.\nSOURCE: https://github.com/imerica/dj-rest-auth/blob/master/docs/installation.rst#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom allauth.socialaccount.providers.github.views import GitHubOAuth2Adapter\nfrom allauth.socialaccount.providers.oauth2.client import OAuth2Client\nfrom dj_rest_auth.registration.views import SocialLoginView\n\nclass GitHubLogin(SocialLoginView):\n    adapter_class = GitHubOAuth2Adapter\n    callback_url = CALLBACK_URL_YOU_SET_ON_GITHUB\n    client_class = OAuth2Client\n```\n\n----------------------------------------\n\nTITLE: Adding GitHub Login URL to Django URL Patterns\nDESCRIPTION: URL configuration to include the custom GitHub login endpoint in the Django project's URL patterns.\nSOURCE: https://github.com/imerica/dj-rest-auth/blob/master/docs/installation.rst#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nurlpatterns += [\n    ...,\n    path('dj-rest-auth/github/', GitHubLogin.as_view(), name='github_login')\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring INSTALLED_APPS for Google OAuth2 in Django Settings\nDESCRIPTION: This snippet shows how to configure the INSTALLED_APPS setting in Django's settings.py to include the necessary apps for Google OAuth2 integration with dj-rest-auth.\nSOURCE: https://github.com/imerica/dj-rest-auth/blob/master/docs/installation.rst#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nINSTALLED_APPS = (\n    ...,\n    'rest_framework',\n    'rest_framework.authtoken',\n    'dj_rest_auth'\n    ...,\n    'django.contrib.sites',\n    'allauth',\n    'allauth.account',\n    'dj_rest_auth.registration',\n    ...,\n    'allauth.socialaccount',\n    'allauth.socialaccount.providers.google',\n\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Google OAuth2 Login View with dj-rest-auth\nDESCRIPTION: This code demonstrates how to create a Google login view by subclassing SocialLoginView from dj-rest-auth, using either the Authorization Code Grant or Implicit Grant flow.\nSOURCE: https://github.com/imerica/dj-rest-auth/blob/master/docs/installation.rst#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom allauth.socialaccount.providers.google.views import GoogleOAuth2Adapter\nfrom allauth.socialaccount.providers.oauth2.client import OAuth2Client\nfrom dj_rest_auth.registration.views import SocialLoginView\n\nclass GoogleLogin(SocialLoginView): # if you want to use Authorization Code Grant, use this\n    adapter_class = GoogleOAuth2Adapter\n    callback_url = CALLBACK_URL_YOU_SET_ON_GOOGLE\n    client_class = OAuth2Client\n\nclass GoogleLogin(SocialLoginView): # if you want to use Implicit Grant, use this\n    adapter_class = GoogleOAuth2Adapter\n```\n\n----------------------------------------\n\nTITLE: Adding Google OAuth2 URL Pattern in Django URLs\nDESCRIPTION: This snippet shows how to add a URL pattern for the GoogleLogin view in Django's urls.py file.\nSOURCE: https://github.com/imerica/dj-rest-auth/blob/master/docs/installation.rst#2025-04-23_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nurlpatterns += [\n    ...,\n    path('dj-rest-auth/google/', GoogleLogin.as_view(), name='google_login')\n]\n```\n\n----------------------------------------\n\nTITLE: Implementing Social Connect Views for Multiple Providers\nDESCRIPTION: This code shows how to create social connect views for Facebook, Twitter, and GitHub by subclassing SocialConnectView from dj-rest-auth.\nSOURCE: https://github.com/imerica/dj-rest-auth/blob/master/docs/installation.rst#2025-04-23_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nfrom allauth.socialaccount.providers.facebook.views import FacebookOAuth2Adapter\nfrom allauth.socialaccount.providers.github.views import GitHubOAuth2Adapter\nfrom allauth.socialaccount.providers.twitter.views import TwitterOAuthAdapter\nfrom allauth.socialaccount.providers.oauth2.client import OAuth2Client\nfrom dj_rest_auth.registration.views import SocialConnectView\nfrom dj_rest_auth.social_serializers import TwitterConnectSerializer\n\nclass FacebookConnect(SocialConnectView):\n    adapter_class = FacebookOAuth2Adapter\n\nclass TwitterConnect(SocialConnectView):\n    serializer_class = TwitterConnectSerializer\n    adapter_class = TwitterOAuthAdapter\n\nclass GithubConnect(SocialConnectView):\n    adapter_class = GitHubOAuth2Adapter\n    callback_url = CALLBACK_URL_YOU_SET_ON_GITHUB\n    client_class = OAuth2Client\n```\n\n----------------------------------------\n\nTITLE: Adding Social Connect URL Patterns in Django URLs\nDESCRIPTION: This snippet demonstrates how to add URL patterns for social connect views in Django's urls.py file.\nSOURCE: https://github.com/imerica/dj-rest-auth/blob/master/docs/installation.rst#2025-04-23_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nurlpatterns += [\n    ...,\n    path('dj-rest-auth/facebook/connect/', FacebookConnect.as_view(), name='fb_connect')\n    path('dj-rest-auth/twitter/connect/', TwitterConnect.as_view(), name='twitter_connect')\n    path('dj-rest-auth/github/connect/', GithubConnect.as_view(), name='github_connect')\n]\n```\n\n----------------------------------------\n\nTITLE: Adding Social Account List and Disconnect Views\nDESCRIPTION: This code shows how to add views for listing all connected social accounts and disconnecting specific social accounts.\nSOURCE: https://github.com/imerica/dj-rest-auth/blob/master/docs/installation.rst#2025-04-23_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nfrom dj_rest_auth.registration.views import (\n    SocialAccountListView, SocialAccountDisconnectView\n)\n\nurlpatterns += [\n    ...,\n    path(\n        'socialaccounts/',\n        SocialAccountListView.as_view(),\n        name='social_account_list'\n    ),\n    path(\n        'socialaccounts/<int:pk>/disconnect/',\n        SocialAccountDisconnectView.as_view(),\n        name='social_account_disconnect'\n    )\n]\n```\n\n----------------------------------------\n\nTITLE: Defining UserProfile Model in Django\nDESCRIPTION: This snippet demonstrates how to define a UserProfile model in Django, which is associated with the User model through a OneToOneField relationship.\nSOURCE: https://github.com/imerica/dj-rest-auth/blob/master/docs/faq.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import models\nfrom django.contrib.auth.models import User\n\nclass UserProfile(models.Model):\n    user = models.OneToOneField(User, related_name='userprofile')\n    # custom fields for user\n    company_name = models.CharField(max_length=100)\n```\n\n----------------------------------------\n\nTITLE: Setting up Django Backend for DJ-Rest-Auth Demo in Python\nDESCRIPTION: Commands to clone the repository, navigate to the demo directory, install required dependencies, migrate the database, and run the Django server with specific settings.\nSOURCE: https://github.com/imerica/dj-rest-auth/blob/master/docs/demo.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ncd /tmp\ngit clone https://github.com/iMerica/dj-rest-auth.git\ncd dj-rest-auth/demo/\npip install -r requirements.txt\npython manage.py migrate --settings=demo.settings --noinput\npython manage.py runserver --settings=demo.settings\n```\n\n----------------------------------------\n\nTITLE: Setting up React SPA Frontend for DJ-Rest-Auth Demo in Python\nDESCRIPTION: Commands to navigate to the React SPA directory, install JavaScript dependencies using yarn or npm, and start the React development server.\nSOURCE: https://github.com/imerica/dj-rest-auth/blob/master/docs/demo.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ncd react-spa/\nyarn # or npm install\nyarn run start\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents in reStructuredText for dj-rest-auth Documentation\nDESCRIPTION: This snippet defines the table of contents for the dj-rest-auth documentation using reStructuredText directives. It specifies the maximum depth of the table and lists the various sections of the documentation.\nSOURCE: https://github.com/imerica/dj-rest-auth/blob/master/docs/index.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n   :maxdepth: 2\n\n   Introduction <introduction>\n   Installation <installation>\n   API endpoints <api_endpoints>\n   Configuration <configuration>\n   Demo project <demo>\n   FAQ <faq>\n   Disclosure Policy <disclosure>\n```\n\n----------------------------------------\n\nTITLE: Running development server with Yarn in React\nDESCRIPTION: Command to start the React application in development mode. Opens the app on localhost:3000 and provides hot-reloading for edits and lint error reporting.\nSOURCE: https://github.com/imerica/dj-rest-auth/blob/master/demo/react-spa/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Running tests with Yarn in React\nDESCRIPTION: Command to launch the test runner in interactive watch mode. Allows for running automated tests with real-time feedback when changes are made.\nSOURCE: https://github.com/imerica/dj-rest-auth/blob/master/demo/react-spa/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn test\n```\n\n----------------------------------------\n\nTITLE: Building production bundle with Yarn in React\nDESCRIPTION: Command to build the React app for production. Creates optimized, minified bundles with hashed filenames in the build folder, ready for deployment.\nSOURCE: https://github.com/imerica/dj-rest-auth/blob/master/demo/react-spa/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn build\n```\n\n----------------------------------------\n\nTITLE: Ejecting from Create React App with Yarn\nDESCRIPTION: Command to eject from Create React App configuration. This irreversible operation exposes all configuration files and transitive dependencies for full customization control.\nSOURCE: https://github.com/imerica/dj-rest-auth/blob/master/demo/react-spa/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn eject\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Robot.txt Rules\nDESCRIPTION: This snippet defines the default rules for web crawlers. It allows all user agents (*) and does not disallow any paths, effectively granting full access to the website.\nSOURCE: https://github.com/imerica/dj-rest-auth/blob/master/demo/react-spa/public/robots.txt#2025-04-23_snippet_0\n\nLANGUAGE: robotstxt\nCODE:\n```\n# https://www.robotstxt.org/robotstxt.html\nUser-agent: *\nDisallow:\n```"
  }
]