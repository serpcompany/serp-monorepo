[
  {
    "owner": "pmndrs",
    "repo": "react-three-a11y",
    "content": "TITLE: Setting up A11yAnnouncer Component with React Three Fiber Canvas\nDESCRIPTION: Basic setup showing how to place the A11yAnnouncer component alongside the R3F Canvas. The A11yAnnouncer component is essential for managing screen reader features.\nSOURCE: https://github.com/pmndrs/react-three-a11y/blob/main/docs/introduction.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Canvas } from '@react-three/fiber';\nimport { A11yAnnouncer } from '@react-three/a11y';\n\nfunction App() {\n  return (\n    <>\n      <Canvas />\n      <A11yAnnouncer />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up A11yAnnouncer Component with React Three Fiber Canvas\nDESCRIPTION: Basic setup of the A11yAnnouncer component alongside the React Three Fiber Canvas component. This is crucial for managing screen-reader features.\nSOURCE: https://github.com/pmndrs/react-three-a11y/blob/main/README.md#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Canvas } from '@react-three/fiber';\nimport { A11yAnnouncer } from '@react-three/a11y';\n\nfunction App() {\n  return (\n    <>\n      <Canvas />\n      <A11yAnnouncer />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Accessible Sections with A11ySection Component\nDESCRIPTION: Example showing how to use the A11ySection component to group related UI elements and provide additional context for screen reader users. This is useful for explaining how to interact with complex or unconventional interfaces.\nSOURCE: https://github.com/pmndrs/react-three-a11y/blob/main/docs/introduction.mdx#2025-04-11_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\n<A11ySection\n  label=\"Shape carousel\"\n  description=\"This carousel contains 5 shapes. Use the Previous and Next buttons to cycle through all the shapes.\"\n>\n  [...]\n</A11ySection>\n```\n\n----------------------------------------\n\nTITLE: Wrapping Components with A11y to Make Them Accessible\nDESCRIPTION: Basic example showing how to wrap a component with the A11y component to make it focusable in the WebGL context. This is the foundation for adding accessibility to 3D objects.\nSOURCE: https://github.com/pmndrs/react-three-a11y/blob/main/docs/introduction.mdx#2025-04-11_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { A11y } from '@react-three/a11y'\n[...]\n<A11y>\n  <MyComponent />\n</A11y>\n```\n\n----------------------------------------\n\nTITLE: Implementing Accessible Button with A11y Component in React Three Fiber\nDESCRIPTION: This snippet demonstrates how to use the A11y component to create an accessible button in a React Three Fiber application. It shows the basic props needed for button functionality and accessibility.\nSOURCE: https://github.com/pmndrs/react-three-a11y/blob/main/docs/roles/button.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<A11y\n  role=\"button\"\n  description=\"Send email\"\n  activationMsg=\"Sending email\"\n  actionCall={()=>sendEmail()}\n  ... >\n  <Some3DComponent />\n</A11y>\n```\n\n----------------------------------------\n\nTITLE: Implementing Toggle Button with A11y Component in React Three Fiber\nDESCRIPTION: This snippet demonstrates how to use the A11y component with the 'togglebutton' role to create an accessible toggle button. It includes props for description, initial state, and action call.\nSOURCE: https://github.com/pmndrs/react-three-a11y/blob/main/docs/roles/togglebutton.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<A11y\n  role=\"togglebutton\"\n  description=\"Dark theme\"\n  startPressed={false}\n  actionCall=\"()=>switchTheme()\"\n  ...>\n  <Some3DComponent />\n</A11y>\n```\n\n----------------------------------------\n\nTITLE: Implementing Link Role with A11y Component in React Three Fiber\nDESCRIPTION: This snippet shows how to implement a link in a 3D environment using the A11y component with the 'link' role. It demonstrates setting up navigation by providing an href attribute and an actionCall function that uses a router to navigate to the specified path.\nSOURCE: https://github.com/pmndrs/react-three-a11y/blob/main/docs/roles/link.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<A11y\n  role=\"link\"\n  href=\"/page\"\n  actionCall={() => {\n    router.push(`/page`);\n  }}\n>\n  <Some3DComponent />\n</A11y>\n```\n\n----------------------------------------\n\nTITLE: Setting up A11yUserPreferences Component in React Three Fiber\nDESCRIPTION: This snippet demonstrates how to wrap 3D objects with the A11yUserPreferences component to enable accessibility preference detection in a react-three-fiber application.\nSOURCE: https://github.com/pmndrs/react-three-a11y/blob/main/docs/access-user-preferences.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<A11yUserPreferences>\n  <My3dObject />\n  <MySecond3dObject />\n  [...]\n</A11yUserPreferences>\n```\n\n----------------------------------------\n\nTITLE: Adding Descriptions to A11y Components for Screen Readers\nDESCRIPTION: Examples showing how to provide descriptions for A11y components that will be announced by screen readers. The showAltText prop can also display the description visually on hover.\nSOURCE: https://github.com/pmndrs/react-three-a11y/blob/main/docs/introduction.mdx#2025-04-11_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n// Reads \"A rotating red square\" to screen readers on focus / hover while also showing it on mouseover\n<A11y role=\"content\" description=\"A rotating red square\" showAltText ... />\n// Reads \"Button, open menu + (description on how to activate depending on the screen reader)\" to screen readers on focus / hover\n<A11y role=\"button\" description=\"open menu\" actionCall={()=>{someFunction()}} ... />\n```\n\n----------------------------------------\n\nTITLE: Using A11ySection for Screen Reader Context\nDESCRIPTION: Example of wrapping components with A11ySection to provide additional context and instructions for screen reader users.\nSOURCE: https://github.com/pmndrs/react-three-a11y/blob/main/README.md#2025-04-11_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n<A11ySection\n  label=\"Shape carousel\"\n  description=\"This carousel contains 5 shapes. Use the Previous and Next buttons to cycle through all the shapes.\"\n>\n  [...]\n</A11ySection>\n```\n\n----------------------------------------\n\nTITLE: Using Button Role with A11y Component\nDESCRIPTION: Example of using the 'button' role with the A11y component. This configuration enables button-like behavior for 3D objects, including proper cursor style and keyboard activation.\nSOURCE: https://github.com/pmndrs/react-three-a11y/blob/main/docs/introduction.mdx#2025-04-11_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<A11y\n  role=\"button\"\n  description=\"Send email\"\n  activationMsg=\"Sending email\" ... />\n```\n\n----------------------------------------\n\nTITLE: Using ToggleButton Role with A11y Component\nDESCRIPTION: Example of using the 'togglebutton' role with the A11y component. This creates a button with two states that uses the aria-pressed attribute and supports different messages for activation and deactivation.\nSOURCE: https://github.com/pmndrs/react-three-a11y/blob/main/docs/introduction.mdx#2025-04-11_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n<A11y\n  role=\"togglebutton\"\n  description=\"Dark theme \"\n  activationMsg=\"Switched to dark theme\"\n  deactivationMsg=\"Switched to light theme\" ... />\n```\n\n----------------------------------------\n\nTITLE: Using Link Role with A11y Component\nDESCRIPTION: Example of using the 'link' role with the A11y component. This emulates HTML link behavior and requires the href attribute for proper screen reader announcement, though it doesn't handle the navigation itself.\nSOURCE: https://github.com/pmndrs/react-three-a11y/blob/main/docs/introduction.mdx#2025-04-11_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n<A11y role=\"link\" href=\"https://url.com\" ... />\n```\n\n----------------------------------------\n\nTITLE: Wrapping Components with A11y for Accessibility\nDESCRIPTION: Example of how to wrap a component with the A11y component to make it focusable and add accessibility features.\nSOURCE: https://github.com/pmndrs/react-three-a11y/blob/main/README.md#2025-04-11_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { A11y } from '@react-three/a11y'\n[...]\n<A11y>\n  <MyComponent />\n</A11y>\n```\n\n----------------------------------------\n\nTITLE: Enhancing 3D Component Accessibility with useA11y Hook in React Three Fiber\nDESCRIPTION: This code sample illustrates how to use the useA11y hook within a 3D component to adjust rendering based on hover and focus states, improving accessibility. It changes the material properties of a mesh based on the accessibility state.\nSOURCE: https://github.com/pmndrs/react-three-a11y/blob/main/docs/roles/button.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Some3DComponent() {\n  const a11y = useA11y()\n  return (\n    <mesh>\n      <boxBufferGeometry />\n      <meshStandardMaterial\n        metalness={1}\n        roughness={0.8}\n        color={a11y.focus || a11y.hover ? '#cc66dd' : '#ffffff'}\n        emissive={a11y.focus ? '#cc4444' : a11y.hover ? '#339922' : '#003399'}\n      />\n    </mesh>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Toggle Button with useA11y Hook in React Three Fiber\nDESCRIPTION: This example shows how to use the useA11y hook to style a 3D component based on its accessibility states (pressed, hover, focus). It adjusts the material properties of a mesh based on these states.\nSOURCE: https://github.com/pmndrs/react-three-a11y/blob/main/docs/roles/togglebutton.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Some3DComponent() {\n  const a11y = useA11y(); // access pressed, hover and focus\n  return (\n    <mesh>\n      <boxBufferGeometry />\n      <meshStandardMaterial\n        metalness={1}\n        roughness={0.8}\n        color={a11y.focus || a11y.hover ? '#cc66dd' : '#ffffff'}\n        emissive={a11y.focus ? '#cc4444' : a11y.hover ? '#339922' : '#003399'}\n      />\n    </mesh>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using useA11y Hook for Visual Feedback in 3D Components\nDESCRIPTION: This snippet demonstrates how to use the useA11y hook to provide visual feedback for hover and focus states in a 3D component. It changes the material colors based on the accessibility state, enhancing user experience for all types of users.\nSOURCE: https://github.com/pmndrs/react-three-a11y/blob/main/docs/roles/link.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Some3DComponent() {\n  const a11y = useA11y();\n  return (\n    <mesh>\n      <boxBufferGeometry />\n      <meshStandardMaterial\n        metalness={1}\n        roughness={0.8}\n        color={a11y.focus || a11y.hover ? '#cc66dd' : '#ffffff'}\n        emissive={a11y.focus ? '#cc4444' : a11y.hover ? '#339922' : '#003399'}\n      />\n    </mesh>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Reduced Motion Support in a 3D Object\nDESCRIPTION: This code shows how to access user motion preferences and conditionally disable animations when a user has indicated they prefer reduced motion, using the useUserPreferences hook.\nSOURCE: https://github.com/pmndrs/react-three-a11y/blob/main/docs/access-user-preferences.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst My3dObject = () => {\n  // this const will give you access to the user preferences\n  const { a11yPrefersState } = useUserPreferences()\n  const mesh = useRef()\n\n  // Rotate mesh every frame\n  useFrame(() => {\n    //unless the user prefers reduced motion\n    if (!a11yPrefersState.prefersReducedMotion) {\n      mesh.current.rotation.x = mesh.current.rotation.y += 0.01\n    }\n  })\n\n  return (\n    <mesh ref={mesh}>\n      <boxBufferGeometry args={[1, 1, 1]} />\n      <meshStandardMaterial />\n    </mesh>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Adapting Color Scheme Based on User Preferences\nDESCRIPTION: This snippet demonstrates how to adjust the color scheme of a 3D object based on the user's preferred color scheme (light or dark) using the useUserPreferences hook.\nSOURCE: https://github.com/pmndrs/react-three-a11y/blob/main/docs/access-user-preferences.mdx#2025-04-11_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst My3dObject = () => {\n  // this const will give you access to the user preferences\n  const { a11yPrefersState } = useUserPreferences()\n  const mesh = useRef()\n\n  return (\n    <mesh ref={mesh}>\n      <boxBufferGeometry args={[1, 1, 1]} />\n      <meshStandardMaterial color={a11yPrefersState.prefersDarkScheme ? 'darkblue' : 'lightblue'} />\n    </mesh>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Click/Keyboard Activation Callback to A11y Component\nDESCRIPTION: Example of using the actionCall prop to execute a function when the A11y component is clicked or activated via keyboard.\nSOURCE: https://github.com/pmndrs/react-three-a11y/blob/main/README.md#2025-04-11_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<A11y role=\"button\" actionCall={()=> console.log(\"clicked\")} ... />\n```\n\n----------------------------------------\n\nTITLE: Providing Description for A11y Component\nDESCRIPTION: Examples of using the description prop to provide accessibility information for screen readers and visual users.\nSOURCE: https://github.com/pmndrs/react-three-a11y/blob/main/README.md#2025-04-11_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n// Reads \"A rotating red square\" to screen readers on focus / hover while also showing it on mouseover\n<A11y role=\"content\" description=\"A rotating red square\" showAltText ... />\n// Reads \"Button, open menu + (description on how to activate depending on the screen reader)\" to screen readers on focus / hover\n<A11y role=\"button\" description=\"open menu\" actionCall={()=>{someFunction()}} ... />\n```\n\n----------------------------------------\n\nTITLE: Implementing A11y Button Role\nDESCRIPTION: Example of using the A11y component with a button role, including description and activation message.\nSOURCE: https://github.com/pmndrs/react-three-a11y/blob/main/README.md#2025-04-11_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<A11y\n  role=\"button\"\n  description=\"Send email\"\n  activationMsg=\"Sending email\" ... />\n```\n\n----------------------------------------\n\nTITLE: Implementing A11y ToggleButton Role\nDESCRIPTION: Example of using the A11y component with a togglebutton role, including description, activation, and deactivation messages.\nSOURCE: https://github.com/pmndrs/react-three-a11y/blob/main/README.md#2025-04-11_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<A11y\n  role=\"togglebutton\"\n  description=\"Dark theme \"\n  activationMsg=\"Switched to dark theme\"\n  deactivationMsg=\"Switched to light theme\" ... />\n```\n\n----------------------------------------\n\nTITLE: Implementing A11y Link Role\nDESCRIPTION: Example of using the A11y component with a link role, including the required href attribute for screen reader compatibility.\nSOURCE: https://github.com/pmndrs/react-three-a11y/blob/main/README.md#2025-04-11_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n<A11y role=\"link\" href=\"https://url.com\" ... />\n```\n\n----------------------------------------\n\nTITLE: Adding Focus Callback to A11y Component\nDESCRIPTION: Example showing how to add a callback function that triggers when an A11y component receives focus. This is useful for handling focus-related behaviors.\nSOURCE: https://github.com/pmndrs/react-three-a11y/blob/main/docs/introduction.mdx#2025-04-11_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<A11y role=\"content\" focusCall={()=> console.log(\"in focus\")} ... />\n```\n\n----------------------------------------\n\nTITLE: Adding Action Callback to A11y Component\nDESCRIPTION: Example showing how to add a callback function that triggers when an A11y component is clicked or activated via keyboard. This enables interactive behavior for accessible 3D objects.\nSOURCE: https://github.com/pmndrs/react-three-a11y/blob/main/docs/introduction.mdx#2025-04-11_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<A11y role=\"button\" actionCall={()=> console.log(\"clicked\")} ... />\n```\n\n----------------------------------------\n\nTITLE: Using Content Role with A11y Component\nDESCRIPTION: Example of using the 'content' role with the A11y component. This role is used for informational elements that provide information but aren't meant to be interactive.\nSOURCE: https://github.com/pmndrs/react-three-a11y/blob/main/docs/introduction.mdx#2025-04-11_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<A11y role=\"content\" ... />\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Content Role with A11y in React Three Fiber\nDESCRIPTION: A simple example of making 3D text accessible to screen readers using the A11y component with 'content' role. This adds a description that will be read by screen readers via a paragraph element in the DOM.\nSOURCE: https://github.com/pmndrs/react-three-a11y/blob/main/docs/roles/content.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<A11y role=\"content\" description=\"Welcome to my website\">\n  <Some3DComponentShowingText />\n</A11y>\n```\n\n----------------------------------------\n\nTITLE: Adding Tab Navigation to A11y Content in React Three Fiber\nDESCRIPTION: An advanced example that makes 3D content accessible while also supporting keyboard navigation. It uses tabIndex for keyboard focus and focusCall to trigger functions (like camera movement) when the element receives focus.\nSOURCE: https://github.com/pmndrs/react-three-a11y/blob/main/docs/roles/content.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<A11y\n  role=\"content\"\n  description=\"The second text of my site\"\n  tabIndex={0}\n  focusCall={() => someFunction()}\n>\n  <SomeOther3DComponentWithText />\n</A11y>\n```\n\n----------------------------------------\n\nTITLE: Adding Focus Callback to A11y Component\nDESCRIPTION: Demonstration of using the focusCall prop to execute a function when the A11y component receives focus.\nSOURCE: https://github.com/pmndrs/react-three-a11y/blob/main/README.md#2025-04-11_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<A11y role=\"content\" focusCall={()=> console.log(\"in focus\")} ... />\n```\n\n----------------------------------------\n\nTITLE: Implementing Screen Reader Announcer Element in HTML\nDESCRIPTION: HTML structure for the A11yAnnouncer component that communicates with screen readers through an aria-live region\nSOURCE: https://github.com/pmndrs/react-three-a11y/blob/main/docs/advanced/how-it-works.mdx#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div aria-atomic=\"true\" aria-live=\"polite\">{message}</div>\n```\n\n----------------------------------------\n\nTITLE: Structuring Accessible Section Layout in HTML\nDESCRIPTION: Example DOM structure generated by A11ySection component showing how accessibility elements are organized within sections\nSOURCE: https://github.com/pmndrs/react-three-a11y/blob/main/docs/advanced/how-it-works.mdx#2025-04-11_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<section aria-label=\"label\">\n  <p>description</p>\n  <button></button>\n  <p></p>\n  <button></button>\n</section>\n```\n\n----------------------------------------\n\nTITLE: Setting Up Media Query Listeners in JavaScript\nDESCRIPTION: JavaScript code showing how A11yUserPreferences component monitors user preference changes through media queries\nSOURCE: https://github.com/pmndrs/react-three-a11y/blob/main/docs/advanced/how-it-works.mdx#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.matchMedia('(prefers-reduced-motion: reduce)')\nwindow.matchMedia('(prefers-color-scheme: dark)')\n```\n\n----------------------------------------\n\nTITLE: Configuring A11y Component with ToggleButton in React Three Fiber\nDESCRIPTION: This snippet demonstrates how to wrap a ToggleButton component with an A11y component, using various props to enhance accessibility. The 'a11yElStyle' prop is used to adjust the position of the accessible DOM element.\nSOURCE: https://github.com/pmndrs/react-three-a11y/blob/main/docs/advanced/gotchas.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<A11y\n  role=\"togglebutton\"\n  description=\"Light intensity\"\n  actionCall={() => (state.dark = !snap.dark)}\n  activationMsg=\"Lower light disabled\"\n  deactivationMsg=\"Lower light enabled\"\n  a11yElStyle={{ marginLeft: '-40px' }}\n>\n  <ToggleButton position={[0, -3, 9]} />\n</A11y>\n```\n\n----------------------------------------\n\nTITLE: Generated HTML for Accessible Button in react-three-a11y\nDESCRIPTION: This HTML snippet shows the DOM structure generated by react-three-a11y for an accessible button. It demonstrates how the library creates an HTML button element to represent the 3D object for accessibility purposes.\nSOURCE: https://github.com/pmndrs/react-three-a11y/blob/main/docs/advanced/gotchas.mdx#2025-04-11_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<button aria-pressed=\"false\">Light intensity</button>\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Tab Index for A11y Component\nDESCRIPTION: Example of setting a custom tab index for an A11y component, with a caution about using values greater than 0.\nSOURCE: https://github.com/pmndrs/react-three-a11y/blob/main/README.md#2025-04-11_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\n<A11y tabIndex={-1} ... />\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Tab Index for A11y Components\nDESCRIPTION: Example showing how to set a custom tabIndex for A11y components. The documentation warns against using values greater than 0 as it can disrupt the natural tab order and cause accessibility issues.\nSOURCE: https://github.com/pmndrs/react-three-a11y/blob/main/docs/introduction.mdx#2025-04-11_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\n<A11y tabIndex={-1} ... />\n```\n\n----------------------------------------\n\nTITLE: Installing React Three A11y Package\nDESCRIPTION: Command to install the @react-three/a11y package using npm.\nSOURCE: https://github.com/pmndrs/react-three-a11y/blob/main/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @react-three/a11y\n```\n\n----------------------------------------\n\nTITLE: Installing @react-three/a11y with npm\nDESCRIPTION: Command to install the @react-three/a11y package using npm. This library provides accessibility features for WebGL content in React applications.\nSOURCE: https://github.com/pmndrs/react-three-a11y/blob/main/docs/introduction.mdx#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @react-three/a11y\n```"
  }
]