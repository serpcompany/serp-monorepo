[
  {
    "owner": "ezyang",
    "repo": "codemcp",
    "content": "TITLE: Complete codemcp.toml Configuration Options\nDESCRIPTION: Full example of all configuration options available in codemcp.toml, including project prompt customization and command definitions with their execution arrays.\nSOURCE: https://github.com/ezyang/codemcp/blob/main/README.md#2025-04-22_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\nproject_prompt = \"\"\"\nBefore beginning work on this feature, write a short haiku.  Do this only once.\n\"\"\"\n\n[commands]\nformat = [\"./run_format.sh\"]\ntest = [\"./run_test.sh\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Project Prompt in codemcp.toml\nDESCRIPTION: Sets up the project-specific instructions that will be included in system prompts to Claude. This allows for customized guidance based on project needs.\nSOURCE: https://github.com/ezyang/codemcp/blob/main/ARCHITECTURE.md#2025-04-22_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\nproject_prompt = \"\"\"\nProject-specific instructions for Claude go here.\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Basic Project Configuration for codemcp\nDESCRIPTION: Sample TOML configuration file (codemcp.toml) that defines commands for formatting and testing code in a project. This file should be placed in the Git repository root.\nSOURCE: https://github.com/ezyang/codemcp/blob/main/README.md#2025-04-22_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\nformat = [\"./run_format.sh\"]\ntest = [\"./run_test.sh\"]\n```\n\n----------------------------------------\n\nTITLE: Defining Commands in codemcp.toml\nDESCRIPTION: Configures shell commands that can be executed by specialized tools at specific times. The example shows how to set up a format command that runs a shell script.\nSOURCE: https://github.com/ezyang/codemcp/blob/main/ARCHITECTURE.md#2025-04-22_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[commands]\nformat = [\"./run_format.sh\"]\n```\n\n----------------------------------------\n\nTITLE: Advanced Command Configuration with Documentation\nDESCRIPTION: Example of a more verbose command configuration syntax that includes documentation for the command. This allows providing specific instructions to the LLM about how to use the command.\nSOURCE: https://github.com/ezyang/codemcp/blob/main/README.md#2025-04-22_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\n[commands.test]\ncommand = [\"./run_test.sh\"]\ndoc = \"Accepts a pytest-style test selector as an argument to run a specific test.\"\n```\n\n----------------------------------------\n\nTITLE: Starting the codemcp SSE Server for Claude Web Interface\nDESCRIPTION: Command to run codemcp as a server for integration with the Claude web interface. This starts a local SSE server that claude.ai can connect to.\nSOURCE: https://github.com/ezyang/codemcp/blob/main/README.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncodemcp serve\n```\n\n----------------------------------------\n\nTITLE: Configuring Python Environment for Local CodeMCP Development\nDESCRIPTION: JSON configuration for setting up a Python virtual environment for local development of CodeMCP. It specifies the command path to a Python interpreter in a uv-based virtual environment and the arguments to run the codemcp module.\nSOURCE: https://github.com/ezyang/codemcp/blob/main/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n    \"codemcp\": {\n      \"command\": \"/Users/ezyang/Dev/codemcp-prod/.venv/bin/python\",\n      \"args\": [\n        \"-m\",\n        \"codemcp\"\n      ]\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring Claude Desktop MCP Server with uv\nDESCRIPTION: JSON configuration to add codemcp to Claude Desktop using uv as the package manager. This goes in the claude_desktop_config.json file and specifies how to run the codemcp server.\nSOURCE: https://github.com/ezyang/codemcp/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"codemcp\": {\n      \"command\": \"/Users/<username>/.local/bin/uvx\",\n      \"args\": [\n        \"--from\",\n        \"git+https://github.com/ezyang/codemcp@prod\",\n        \"codemcp\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running codemcp Server in Development Mode\nDESCRIPTION: Command to run the codemcp server in development mode with inspector enabled, useful for debugging and development purposes.\nSOURCE: https://github.com/ezyang/codemcp/blob/main/README.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nPYTHONPATH=. mcp dev codemcp/__main__.py\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom SSE Server Settings for Claude Web Interface\nDESCRIPTION: Command showing how to customize the codemcp SSE server settings including host, port, and allowed CORS origins for integration with claude.ai and other websites.\nSOURCE: https://github.com/ezyang/codemcp/blob/main/README.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncodemcp serve --host 0.0.0.0 --port 8765 --cors-origin https://claude.ai --cors-origin https://example.com\n```\n\n----------------------------------------\n\nTITLE: Configuring Claude Desktop MCP Server with Global pip Installation\nDESCRIPTION: JSON configuration for using codemcp with Claude Desktop when installed globally via pip instead of uv. This setup uses Python's module system to launch the server.\nSOURCE: https://github.com/ezyang/codemcp/blob/main/README.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"mcpServers\": {\n         \"codemcp\": {\n               \"command\": \"python\",\n               \"args\": [\"-m\", \"codemcp\"]\n            }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Type Checking for codemcp Development\nDESCRIPTION: Command to run the type checking script for the codemcp project, ensuring code changes maintain type safety according to the pyright configuration.\nSOURCE: https://github.com/ezyang/codemcp/blob/main/README.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n./run_typecheck.sh\n```\n\n----------------------------------------\n\nTITLE: Configuring pytest with native traceback in Python\nDESCRIPTION: This snippet shows how to configure pytest to use native tracebacks for improved readability in test output. It's recommended to use '--tb=native' to reduce the length of backtraces and prevent overwhelming the model's context.\nSOURCE: https://github.com/ezyang/codemcp/blob/main/codemcp/templates/README.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npytest --tb=native\n```\n\n----------------------------------------\n\nTITLE: Enabling parallel testing with pytest-xdist in Python\nDESCRIPTION: This configuration enables parallel testing using pytest-xdist. While it significantly improves test execution speed, it requires tests to be parallel-safe. The snippet highlights the importance of considering this trade-off early in the project.\nSOURCE: https://github.com/ezyang/codemcp/blob/main/codemcp/templates/README.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npytest-xdist\n```\n\n----------------------------------------\n\nTITLE: Installing codemcp with pip\nDESCRIPTION: Command to install codemcp globally using pip from the GitHub repository. This global installation method is sometimes easier on Windows systems.\nSOURCE: https://github.com/ezyang/codemcp/blob/main/README.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\npip install git+https://github.com/ezyang/codemcp@prod\n```\n\n----------------------------------------\n\nTITLE: Global codemcp Configuration for Logging\nDESCRIPTION: Example of a global configuration file (~/.codemcprc) in TOML format that sets the logging verbosity level. This affects how detailed the logs written to ~/.codemcp/codemcp.log will be.\nSOURCE: https://github.com/ezyang/codemcp/blob/main/README.md#2025-04-22_snippet_7\n\nLANGUAGE: toml\nCODE:\n```\n[logger]\nverbosity = \"INFO\"  # Can be DEBUG, INFO, WARNING, ERROR, or CRITICAL\n```\n\n----------------------------------------\n\nTITLE: Upgrading codemcp with pip\nDESCRIPTION: Command to upgrade an existing pip installation of codemcp to the latest version from the GitHub repository.\nSOURCE: https://github.com/ezyang/codemcp/blob/main/README.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\npip install --upgrade git+https://github.com/ezyang/codemcp@prod\n```\n\n----------------------------------------\n\nTITLE: Configuring Windows Path for Claude Desktop MCP Server\nDESCRIPTION: Example path format for Windows configuration in Claude Desktop, showing the required double backslash escaping for Windows file paths.\nSOURCE: https://github.com/ezyang/codemcp/blob/main/README.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nC:\\\\Users\\\\<username>\\\\.local\\\\bin\\\\uvx.exe\n```\n\n----------------------------------------\n\nTITLE: Referencing CODING.md File in Markdown\nDESCRIPTION: This snippet mentions the CODING.md file, which is used to store important project information and coding preferences. It's automatically added to the context when present in the current working directory.\nSOURCE: https://github.com/ezyang/codemcp/blob/main/prompt.txt#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Memory\nIf the current working directory contains a file called CODING.md, it will be automatically added to your context. This file serves multiple purposes:\n1. Recording the user's code style preferences (naming conventions, preferred libraries, etc.)\n2. Maintaining useful information about the codebase structure and organization\n```\n\n----------------------------------------\n\nTITLE: Initializing Project README with Placeholder\nDESCRIPTION: Basic markdown template for a project README file with a placeholder project name and a TODO reminder to add project description.\nSOURCE: https://github.com/ezyang/codemcp/blob/main/codemcp/templates/python/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# __PROJECT_NAME__\n\nTODO: Write project description\n\n```\n\n----------------------------------------\n\nTITLE: Grep Command JSON Structure for LLM Affordance\nDESCRIPTION: This JSON structure represents a grep command for LLM affordance. It specifies the command type, search pattern, and file path to search in.\nSOURCE: https://github.com/ezyang/codemcp/blob/main/TODO.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"command\": \"Grep\",\n  \"pattern\": \"self\\\\.assertIn.*normalized_result\",\n  \"path\": \"/Users/ezyang/Dev/codemcp/test/test_mcp_e2e.py\"\n}\n```"
  }
]