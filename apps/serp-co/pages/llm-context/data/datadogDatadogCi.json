[
  {
    "owner": "datadog",
    "repo": "datadog-ci",
    "content": "TITLE: Running Synthetic Tests with Datadog CI\nDESCRIPTION: Example of running synthetic tests using the datadog-ci CLI tool with a configuration file. The output shows the test execution process, including test triggering, waiting for results, and displaying the final report with test failures.\nSOURCE: https://github.com/datadog/datadog-ci/blob/master/src/commands/synthetics/README.md#2025-04-22_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\n  yarn datadog-ci synthetics run-tests --config global-config.json\n  yarn run v1.22.4\n  $ /Users/demo.user/go/src/github.com/Datadog/tmp/test/testDemo/node_modules/.bin/datadog-ci synthetics run-tests --config global-config.json\n  Finding files matching /Users/demo.user/go/src/github.com/Datadog/tmp/test/testDemo/{,!(node_modules)/**/}*.synthetics.json\n\n  Got test files:\n    - user.synthetics.json\n\n  [2cj-h3c-39x] Trigger test \"Test CI connection\"\n  [2cj-h3c-39x] Waiting results for \"Test CI connection\"\n\n  === REPORT ===\n  Took 2242ms\n\n  x  [2cj-h3c-39x] | Test CI connection\n    * location: 30019\n      ⎋ total duration: 32.6 ms - result url: https://app.datadoghq.com/synthetics/details/2cj-h3c-39x?resultId=122140688175981634\n      x GET - https://www.datadoghq.com\n        [INCORRECT_ASSUMPTION] - [{\"index\":1,\"operator\":\"is\",\"property\":\"content-type\",\"type\":\"header\",\"target\":\"text/html\",\"valid\":false,\"actual\":\"text/html\"; charset=utf-8\"}] \n  error Command failed with exit code 1.\n  info Visit https://yarnpkg.com/en/docs/cli/run for documentation about this command.\n```\n\n----------------------------------------\n\nTITLE: Running Datadog CI CLI in Docker Container\nDESCRIPTION: Example of running a Datadog CI CLI command using the official Docker container, passing API and app keys as environment variables and mounting the current directory.\nSOURCE: https://github.com/datadog/datadog-ci/blob/master/README.md#2025-04-22_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nexport DD_API_KEY=$(cat /secret/dd_api_key)\nexport DD_APP_KEY=$(cat /secret/dd_app_key)\ndocker run --rm -it -v $(pwd):/w -e DD_API_KEY -e DD_APP_KEY datadog/ci synthetics run-tests -p pub-lic-id1\n```\n\n----------------------------------------\n\nTITLE: Installing Datadog CI CLI with NPM or Yarn\nDESCRIPTION: Commands to install the Datadog CI CLI tool using NPM or Yarn package managers. The tool can be installed as a dev dependency or globally.\nSOURCE: https://github.com/datadog/datadog-ci/blob/master/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# NPM\nnpm install --save-dev @datadog/datadog-ci\n\n# Yarn\nyarn add --dev @datadog/datadog-ci\n```\n\n----------------------------------------\n\nTITLE: Marking Deployments with Datadog CI\nDESCRIPTION: Command syntax for marking a deployment in Datadog CI. Shows the basic command structure with all available options including environment, revision, service name, rollback status, tags, and failure handling.\nSOURCE: https://github.com/datadog/datadog-ci/blob/master/src/commands/deployment/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndatadog-ci deployment mark [--env] [--revision] [--service] [--is-rollback] [--tags] [--no-fail]\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Datadog CI CLI\nDESCRIPTION: The basic command structure for using the Datadog CI CLI, showing the general format for executing commands and subcommands.\nSOURCE: https://github.com/datadog/datadog-ci/blob/master/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nUsage: datadog-ci <command> [<subcommand>] [options]\n```\n\n----------------------------------------\n\nTITLE: Using Datadog-CI as a Library in Node.js\nDESCRIPTION: JavaScript code example showing how to use the datadog-ci package as a library to trigger synthetic tests programmatically.\nSOURCE: https://github.com/datadog/datadog-ci/blob/master/src/commands/synthetics/README.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { synthetics } from '@datadog/datadog-ci'\n\nconst { results, summary } = await synthetics.executeTests(...)\n```\n\n----------------------------------------\n\nTITLE: Uploading React Native Source Maps for AppCenter CodePush Build\nDESCRIPTION: This command uploads JavaScript source maps and bundle files to Datadog after an AppCenter CodePush build. It sets the release version to a specific format and requires several parameters including platform, service, bundle path, sourcemap path, app name, and deployment.\nSOURCE: https://github.com/datadog/datadog-ci/blob/master/src/commands/react-native/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndatadog-ci react-native codepush --platform ios --service com.company.app --bundle ./build/main.jsbundle --sourcemap ./build/main.jsbundle.map --app Company/AppNameiOS --deployment Staging\n```\n\n----------------------------------------\n\nTITLE: Uploading Code Coverage Reports with datadog-ci\nDESCRIPTION: This command uploads code coverage reports to Datadog. It supports multiple file paths, tags, and various options for customization.\nSOURCE: https://github.com/datadog/datadog-ci/blob/master/src/commands/coverage/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndatadog-ci coverage upload [--dry-run] [--tags] <path> <another_path>\n```\n\n----------------------------------------\n\nTITLE: Instrumenting AWS Lambda Functions with Datadog CLI\nDESCRIPTION: Examples of using the datadog-ci lambda instrument command to add Datadog monitoring to Lambda functions. The command supports specifying functions by name, ARN, regex pattern, and includes an interactive mode and dry run option.\nSOURCE: https://github.com/datadog/datadog-ci/blob/master/src/commands/lambda/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Instrument multiple functions specified by names\ndatadog-ci lambda instrument -f <function-name> -f <another-function-name> -r us-east-1 -v 81 -e 49\n\n# Instrument multiple functions specified by full ARNs\ndatadog-ci lambda instrument -f <lambda-arn> -f <another-lambda-arn> -f <a-third-lambda-arn> -v 81 -e 49\n\n# Instrument function(s) in interactive mode\ndatadog-ci lambda instrument -i\n\n# Instrument multiple functions that match a regex pattern\ndatadog-ci lambda instrument --functions-regex <valid-regex-pattern> -r us-east-1 -v 81 -e 49\n\n# Dry run of all updates\ndatadog-ci lambda instrument -f <function-name> -f <another-function-name> -r us-east-1 -v 81 -e 49 --dry-run\n```\n\n----------------------------------------\n\nTITLE: Running Synthetics Tests with Search Query\nDESCRIPTION: Example of using the testSearchQuery parameter to run specific Synthetic tests using the CLI command with team, tag and managed-by filters.\nSOURCE: https://github.com/datadog/datadog-ci/blob/master/src/commands/synthetics/README.md#2025-04-22_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\ndatadog-ci synthetics run-tests --search 'team:unicorn tag:e2e-tests tag:\"managedBy:terraform\"'\n```\n\n----------------------------------------\n\nTITLE: Complete Global Configuration File Example\nDESCRIPTION: Comprehensive example of a global configuration file for datadog-ci with all available options for test execution and overrides.\nSOURCE: https://github.com/datadog/datadog-ci/blob/master/src/commands/synthetics/README.md#2025-04-22_snippet_5\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"apiKey\": \"<DATADOG_API_KEY>\",\n  \"appKey\": \"<DATADOG_APPLICATION_KEY>\",\n  \"batchTimeout\": 180000,\n  \"datadogSite\": \"datadoghq.com\", // You can use another Datadog site in https://docs.datadoghq.com/getting_started/site/. By default, requests are sent to Datadog US1. \n  \"defaultTestOverrides\": {\n    \"allowInsecureCertificates\": true,\n    \"basicAuth\": {\"username\": \"test\", \"password\": \"test\"},\n    \"body\": \"{\\\"fakeContent\\\":true}\",\n    \"bodyType\": \"application/json\",\n    \"cookies\": \"name1=value1;name2=value2;\",\n    \"setCookies\": \"name1=value1 \\n name2=value2; Domain=example.com \\n name3=value3; Secure; HttpOnly\",\n    \"defaultStepTimeout\": 15,\n    \"deviceIds\": [\"chrome.laptop_large\"],\n    \"executionRule\": \"skipped\",\n    \"followRedirects\": true,\n    \"headers\": {\"NEW_HEADER\": \"NEW VALUE\"},\n    \"locations\": [\"aws:us-east-1\"],\n    \"mobileApplicationVersion\": \"01234567-8888-9999-abcd-efffffffffff\",\n    \"mobileApplicationVersionFilePath\": \"path/to/application.apk\",\n    \"retry\": {\"count\": 2, \"interval\": 300},\n    \"startUrl\": \"{{URL}}?static_hash={{STATIC_HASH}}\",\n    \"startUrlSubstitutionRegex\": \"s/(https://www.)(.*)/$1extra-$2/\",\n    \"testTimeout\": 300,\n    \"variables\": {\"NEW_VARIABLE\": \"NEW VARIABLE\"}\n  },\n  \"failOnCriticalErrors\": true,\n  \"failOnMissingTests\": true,\n  \"failOnTimeout\": true,\n  \"files\": [\"{,!(node_modules)/**/}*.synthetics.json\"],\n  \"proxy\": {\n    \"auth\": {\n      \"username\": \"login\",\n      \"password\": \"pwd\"\n    },\n    \"host\": \"127.0.0.1\",\n    \"port\": 3128,\n    \"protocol\": \"http\"\n  },\n  \"subdomain\": \"subdomainname\",\n  \"tunnel\": true\n}\n```\n\n----------------------------------------\n\nTITLE: End-to-End Test Execution in Bash\nDESCRIPTION: Example of running Synthetics tests using environment variables and verifying the command execution.\nSOURCE: https://github.com/datadog/datadog-ci/blob/master/src/commands/synthetics/README.md#2025-04-22_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\nexport DATADOG_API_KEY='<API_KEY>'\nexport DATADOG_APP_KEY='<APPLICATION_KEY>'\n\nyarn datadog-ci synthetics run-tests --public-id abc-def-ghi\n```\n\n----------------------------------------\n\nTITLE: Example Deployment Mark Command\nDESCRIPTION: Practical example of marking a production deployment for a payment service with specific version, team tag, and failure handling configuration.\nSOURCE: https://github.com/datadog/datadog-ci/blob/master/src/commands/deployment/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndatadog-ci deployment mark --env prod --service payment-service --revision v1.1.0 --tags team:backend --no-fail\n```\n\n----------------------------------------\n\nTITLE: Uploading git metadata to Datadog (Bash)\nDESCRIPTION: This command uploads the current commit details to Datadog, creating links to your repositories in Datadog's UI. It should be run inside a local git repository with git program available.\nSOURCE: https://github.com/datadog/datadog-ci/blob/master/src/commands/git-metadata/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndatadog-ci git-metadata upload\n```\n\n----------------------------------------\n\nTITLE: Complete DORA Deployment Command Example in Bash\nDESCRIPTION: A fully configured example of the DORA deployment command with all main parameters set, including service name, environment, timestamp information, and git repository details.\nSOURCE: https://github.com/datadog/datadog-ci/blob/master/src/commands/dora/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport DD_BETA_COMMANDS_ENABLED=1\n\ndatadog-ci dora deployment --service my-service --env prod \\\n    --started-at 1699960648 --finished-at 1699961048 \\\n    --git-repository-url https://github.com/my-organization/my-repository \\\n    --git-commit-sha 102836a25f5477e571c73d489b3f0f183687068e\n```\n\n----------------------------------------\n\nTITLE: Uploading SBOM Files with datadog-ci Command\nDESCRIPTION: This command uploads SBOM files to the Datadog intake endpoint. It supports optional arguments for environment, CI tags, Git repository, and debug mode. The command requires specific environment variables to be set for authentication and site configuration.\nSOURCE: https://github.com/datadog/datadog-ci/blob/master/src/commands/sbom/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndatadog-ci sbom upload [--env] [--no-ci-tags] [--git-repository] [--debug] <path/to/sbom.json>\n```\n\n----------------------------------------\n\nTITLE: Using the evaluate command for Quality Gates\nDESCRIPTION: The basic syntax for the evaluate command in datadog-ci gate with available options including scope, tags, dry-run, fail-if-unavailable, fail-on-empty, and no-wait flags.\nSOURCE: https://github.com/datadog/datadog-ci/blob/master/src/commands/gate/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndatadog-ci gate evaluate [--scope] [--tags] [--dry-run] [--fail-if-unavailable] [--fail-on-empty] [--no-wait]\n```\n\n----------------------------------------\n\nTITLE: End-to-End Testing Process\nDESCRIPTION: Complete test script to verify sourcemaps upload functionality by creating temporary test files and uploading them to Datadog.\nSOURCE: https://github.com/datadog/datadog-ci/blob/master/src/commands/sourcemaps/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport DATADOG_API_KEY='<API key>'\nexport DATADOG_APP_KEY='<application key>'\n\nTEMP_DIR=$(mktemp -d)\necho '{}' > $TEMP_DIR/fake.js\necho '{\"version\":3,\"file\":\"out.js\",\"sourceRoot\":\"\",\"sources\":[\"fake.js\"],\"names\":[\"src\"],\"mappings\":\"AAgBC\"}' > $TEMP_DIR/fake.js.map\nyarn launch sourcemaps upload $TEMP_DIR/ --service test_datadog-ci --release-version 0.0.1 --minified-path-prefix https://fake.website\nrm -rf $TEMP_DIR\n```\n\n----------------------------------------\n\nTITLE: End-to-end testing with dry-run flag\nDESCRIPTION: Example showing how to test the gate command using the dry-run flag, including setting required environment variables for API and App keys.\nSOURCE: https://github.com/datadog/datadog-ci/blob/master/src/commands/gate/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport DD_API_KEY='<API key>'\nexport DD_APP_KEY='<App key>'\n\nyarn launch gate evaluate --scope team:backend --dry-run\n```\n\n----------------------------------------\n\nTITLE: Executing Cloud Run Flare Commands in Bash\nDESCRIPTION: Examples of using the datadog-ci cloud-run flare command with various options including basic usage, log collection, and dry run mode. The command collects diagnostic data from Cloud Run services and sends it to Datadog support.\nSOURCE: https://github.com/datadog/datadog-ci/blob/master/src/commands/cloud-run/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Collect and send files to Datadog support for a single service\ndatadog-ci cloud-run -s <service> -p <project> -r <region/location> -c <case-id> -e <email-on-case-id>\n\n# Include recent logs\ndatadog-ci cloud-run -s <service> -p <project> -r <region/location> -c <case-id> -e <email-on-case-id> --with-logs\n\n# Dry run: collect data, but don't send to Datadog support\ndatadog-ci cloud-run -s <service> -p <project> -r <region/location> -c <case-id> -e <email-on-case-id> --with-logs --dry-run\n```\n\n----------------------------------------\n\nTITLE: Uploading Flutter Symbol Files to Datadog\nDESCRIPTION: Command for uploading Dart symbol files, iOS dSYMs, and Android Proguard mapping files after building a Flutter app with obfuscation enabled.\nSOURCE: https://github.com/datadog/datadog-ci/blob/master/src/commands/flutter-symbols/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndatadog-ci flutter-symbols upload --dart-symbols-location ./debug-info --service-name com.companyname.application --ios-dsyms --android-mapping\n```\n\n----------------------------------------\n\nTITLE: Running Tests Matching a Search Query\nDESCRIPTION: Command to run Datadog synthetic tests matching a specific tag using the search parameter.\nSOURCE: https://github.com/datadog/datadog-ci/blob/master/src/commands/synthetics/README.md#2025-04-22_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nyarn datadog-ci synthetics run-tests -s 'tag:e2e-tests'\n```\n\n----------------------------------------\n\nTITLE: Defining 'instrument' Command Arguments Table in Markdown\nDESCRIPTION: This snippet presents a markdown table listing all available arguments for the 'instrument' command, including their descriptions and default values. It covers function selection, AWS configuration, Datadog integration settings, and various instrumentation options.\nSOURCE: https://github.com/datadog/datadog-ci/blob/master/src/commands/lambda/README.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Argument                       | Shorthand | Description                                                                                                                                                                                                                                                                                                                                   | Default |\n| ------------------------------ | --------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------- |\n| `--function`                   | `-f`      | The ARN of the Lambda function to be **instrumented**, or the name of the Lambda function (`--region` must be defined).                                                                                                                                                                                                                       |         |\n| `--functions-regex`            |           | A regex pattern to match with the Lambda function name.                                                                                                                                                                                                                                                                                       |         |\n| `--interactive`                | `-i`      | Allows the user to interactively choose how their function gets instrumented. There is no need to provide any other flags if you choose to use interactive mode since you will be prompted for the information instead.                                                                                                                       |         |\n| `--region`                     | `-r`      | Default region to use, when `--function` is specified by the function name instead of the ARN.                                                                                                                                                                                                                                                |         |\n| `--service`                    |           | Use `--service` to group related functions belonging to similar workloads. Learn more about the `service` tag [here][8].                                                                                                                                                                                                                      |         |\n| `--version`                    |           | Add the `--version` tag to correlate spikes in latency, load or errors to new versions. Learn more about the `version` tag [here][7].                                                                                                                                                                                                         |         |\n| `--env`                        |           | Use `--env` to separate out your staging, development, and production environments. Learn more about the `env` tag [here][6].                                                                                                                                                                                                                 |         |\n| `--extra-tags`                 |           | Add custom tags to your Lambda function in Datadog. Must be a list of `<key>:<value>` separated by commas such as: `layer:api,team:intake`.                                                                                                                                                                                                   |         |\n| `--profile`                    |           | Specify the AWS named profile credentials to use to instrument. Learn more about AWS named profiles [here][11].                                                                                                                                                                                                                               |         |\n| `--layer-version`              | `-v`      | Version of the Datadog Lambda Library layer to apply. This varies between runtimes. To see the latest layer version check the [JS][2] or [python][3] datadog-lambda-layer repo release notes.                                                                                                                                                 |         |\n| `--extension-version`          | `-e`      | Version of the Datadog Lambda Extension layer to apply. When `extension-version` is set, make sure to export `DATADOG_API_KEY` (or if encrypted, `DATADOG_KMS_API_KEY` or `DATADOG_API_KEY_SECRET_ARN`) in your environment as well. While using `extension-version`, leave out `forwarder`. Learn more about the Lambda Extension [here][4]. |         |\n| `--tracing`                    |           | Whether to enable dd-trace tracing on your Lambda.                                                                                                                                                                                                                                                                                            | `true`  |\n| `--merge-xray-traces`          |           | Whether to join dd-trace traces to AWS X-Ray traces. Useful for tracing API Gateway spans.                                                                                                                                                                                                                                                    | `false` |\n| `--flush-metrics-to-logs`      |           | Whether to send metrics via the Datadog Forwarder [asynchronously][10]. If you disable this parameter, it's required to export `DATADOG_API_KEY` (or if encrypted, `DATADOG_KMS_API_KEY` or `DATADOG_API_KEY_SECRET_ARN`).                                                                                                                    | `true`  |\n| `--capture-lambda-payload`     |           | Whether to capture and store the payload and response of a lambda invocation.                                                                                                                                                                                                                                                                 | `false` |\n| `--forwarder`                  |           | The ARN of the [datadog forwarder][9] to attach this function's LogGroup to.                                                                                                                                                                                                                                                                  |         |\n| `--dry-run`                    | `-d`      | Preview changes running command would apply.                                                                                                                                                                                                                                                                                                  | `false` |\n| `--log-level`                  |           | Set to `debug` to see additional output from the Datadog Lambda Library and/or Lambda Extension for troubleshooting purposes.                                                                                                                                                                                                                 |         |\n| `--source-code-integration`    | `-s`      | Whether to enable [Datadog Source Code Integration][12]. This will tag your lambda(s) with the Git repository URL and the latest commit hash of the current local directory. **Note**: Git repository must not be ahead of remote, and must not be dirty.                                                                                     | `true`  |\n| `--no-source-code-integration` |           | Disables Datadog Source Code Integration.                                                                                                                                                                                                                                                                                                     |         |\n| `--upload-git-metadata`        | `-u`      | Whether to enable Git metadata uploading, as a part of source code integration. Git metadata uploading is only required if you don't have the Datadog Github Integration installed.                                                                                                                                                           | `true`  |\n| `--no-upload-git-metadata`     |           | Disables Git metadata uploading, as a part of source code integration. Use this flag if you have the Datadog Github Integration installed, as it renders Git metadata uploading unnecessary.                                                                                                                                                  |         |\n```\n\n----------------------------------------\n\nTITLE: Testing React Native Upload Command with Datadog CI\nDESCRIPTION: This bash script demonstrates how to test the Datadog CI React Native upload command. It creates temporary files, sets the API key, and executes the upload command with various parameters.\nSOURCE: https://github.com/datadog/datadog-ci/blob/master/src/commands/react-native/README.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nexport DATADOG_API_KEY='<API key>'\n\nTEMP_DIR=$(mktemp -d)\necho '{}' > $TEMP_DIR/fake.js\necho '{\"version\":3,\"file\":\"out.js\",\"sourceRoot\":\"\",\"sources\":[\"fake.js\"],\"names\":[\"src\"],\"mappings\":\"AAgBC\"}' > $TEMP_DIR/fake.js.map\nyarn launch react-native upload --platform ios --service com.company.app --bundle $TEMP_DIR/fake.js --sourcemap $TEMP_DIR/fake.js.map --release-version 0.0.1 --build-version 000001\nrm -rf $TEMP_DIR\n```\n\n----------------------------------------\n\nTITLE: Simple Span Command Example\nDESCRIPTION: Demonstrates a basic usage example of the span command to report a span named 'Say Hello' with an 800ms duration and a custom tag.\nSOURCE: https://github.com/datadog/datadog-ci/blob/master/src/commands/span/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndatadog-ci trace span --name \"Say Hello\" --duration 800 --tags responded-hello-too:true\n```\n\n----------------------------------------\n\nTITLE: Uploading ELF Symbol Files Using Datadog CI Command in Bash\nDESCRIPTION: Executes the ELF symbol upload command with beta features enabled. This command scans the specified directory recursively for ELF files, extracts debug information, and uploads it to Datadog for profile symbolication.\nSOURCE: https://github.com/datadog/datadog-ci/blob/master/src/commands/elf-symbols/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nDD_BETA_COMMANDS_ENABLED=1 datadog-ci elf-symbols upload ~/your/build/bin/\n```\n\n----------------------------------------\n\nTITLE: Uploading Android Source Maps to Datadog\nDESCRIPTION: Command to upload Android source maps and bundle file to Datadog for error un-minification.\nSOURCE: https://github.com/datadog/datadog-ci/blob/master/src/commands/react-native/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndatadog-ci react-native upload --platform android --service com.company.app --bundle ./index.android.bundle --sourcemap ./index.android.bundle.map --release-version 1.23.4 --build-version 1234\n```\n\n----------------------------------------\n\nTITLE: Uploading Android symbols to Datadog\nDESCRIPTION: Command to upload Android .so files, Proguard mapping files, and IL2CPP mapping files to Datadog for deobfuscation of Android app crashes.\nSOURCE: https://github.com/datadog/datadog-ci/blob/master/src/commands/unity-symbols/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndatadog unity-symbols upload --android\n```\n\n----------------------------------------\n\nTITLE: Configuring XCode Build Phase for React Native >= 0.69\nDESCRIPTION: This XCode build phase script sets up the environment and executes the custom React Native XCode script for source map generation and upload. It's used for React Native versions 0.69 and above.\nSOURCE: https://github.com/datadog/datadog-ci/blob/master/src/commands/react-native/README.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nset -e\nexport SOURCEMAP_FILE=$DERIVED_FILE_DIR/main.jsbundle.map\nWITH_ENVIRONMENT=\"../node_modules/react-native/scripts/xcode/with-environment.sh\"\nREACT_NATIVE_XCODE=\"./custom-react-native-xcode.sh\"\n\n/bin/sh -c \"$WITH_ENVIRONMENT $REACT_NATIVE_XCODE\"\n```\n\n----------------------------------------\n\nTITLE: Uploading iOS symbols to Datadog\nDESCRIPTION: Command to upload iOS dSYMs and IL2CPP mapping files to Datadog for symbolication of iOS app crashes.\nSOURCE: https://github.com/datadog/datadog-ci/blob/master/src/commands/unity-symbols/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndatadog-ci unity-symbols upload --ios\n```\n\n----------------------------------------\n\nTITLE: Test Configuration File Example in JSONC\nDESCRIPTION: Example of a test configuration file showing various test overrides and settings for multiple Synthetics tests.\nSOURCE: https://github.com/datadog/datadog-ci/blob/master/src/commands/synthetics/README.md#2025-04-22_snippet_22\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"tests\": [\n    {\n      \"id\": \"<TEST_PUBLIC_ID_1>\",\n      \"testOverrides\": {\n        \"allowInsecureCertificates\": true,\n        \"basicAuth\": {\"username\": \"test\", \"password\": \"test\"},\n        \"body\": \"{\\\"fakeContent\\\":true}\",\n        \"bodyType\": \"application/json\",\n        \"cookies\": \"name1=value1;name2=value2;\",\n        \"defaultStepTimeout\": 15,\n        \"deviceIds\": [\"chrome.laptop_large\"],\n        \"executionRule\": \"skipped\",\n        \"followRedirects\": true,\n        \"headers\": {\"NEW_HEADER\": \"NEW VALUE\"},\n        \"locations\": [\"aws:us-east-1\"],\n        \"mobileApplicationVersion\": \"01234567-8888-9999-abcd-efffffffffff\",\n        \"mobileApplicationVersionFilePath\": \"path/to/application.apk\",\n        \"retry\": {\"count\": 2, \"interval\": 300},\n        \"startUrl\": \"{{URL}}?static_hash={{STATIC_HASH}}\",\n        \"startUrlSubstitutionRegex\": \"s/(https://www.)(.*)/$1extra-$2/\",\n        \"testTimeout\": 300,\n        \"variables\": {\"MY_VARIABLE\": \"new title\"}\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Correlating GitOps Deployments\nDESCRIPTION: Example of correlating an ArgoCD deployment with a CI pipeline. This command helps connect GitOps deployments to application repository pipelines for better visibility in Datadog's UI.\nSOURCE: https://github.com/datadog/datadog-ci/blob/master/src/commands/deployment/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndatadog-ci deployment correlate --provider argocd\n```\n\n----------------------------------------\n\nTITLE: Upload Application Command Example in Bash\nDESCRIPTION: Example command for uploading a mobile application version using the Datadog CI Synthetics CLI.\nSOURCE: https://github.com/datadog/datadog-ci/blob/master/src/commands/synthetics/README.md#2025-04-22_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\ndatadog-ci synthetics upload-application                \\\n  --mobileApplicationId '123-123-123'                   \\\n  --mobileApplicationVersionFilePath example/test.apk   \\\n  --versionName 'example 1.0'                           \\\n  --latest\n```\n\n----------------------------------------\n\nTITLE: Example of Uploading SARIF Reports with Tags\nDESCRIPTION: This example demonstrates how to upload multiple SARIF reports from different directories and files, while applying tags to the results.\nSOURCE: https://github.com/datadog/datadog-ci/blob/master/src/commands/sarif/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndatadog-ci sarif upload --tags key1:value1 --tags key2:value2 sarif-reports/go-reports sarif-reports/java-reports sarif-report/single-report.sarif\n```\n\n----------------------------------------\n\nTITLE: DORA Deployment Dry Run Test in Bash\nDESCRIPTION: Example of testing the deployment command with the dry-run flag to verify functionality without actually sending events. Uses environment variables for configuration and captures the current timestamp dynamically.\nSOURCE: https://github.com/datadog/datadog-ci/blob/master/src/commands/dora/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport DD_API_KEY='<API key>'\nexport DD_BETA_COMMANDS_ENABLED=1\n\nyarn launch dora deployment --service test-service --started-at `date +%s` --dry-run\n```\n\n----------------------------------------\n\nTITLE: Running Datadog CI Synthetics via NPM Script\nDESCRIPTION: Command to execute the datadog-ci synthetics tests using the configured NPM script.\nSOURCE: https://github.com/datadog/datadog-ci/blob/master/src/commands/synthetics/README.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nnpm run datadog-ci-synthetics\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Code Coverage Upload Command\nDESCRIPTION: This example demonstrates how to use the coverage upload command with multiple paths and tags.\nSOURCE: https://github.com/datadog/datadog-ci/blob/master/src/commands/coverage/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndatadog-ci coverage upload --tags key1:value1 --tags key2:value2 unit-tests/coverage-reports acceptance-tests/coverage-reports e2e-tests/coverage-report.xml\n```\n\n----------------------------------------\n\nTITLE: Configuring Datadog-CI for Lambda Instrumentation in JSON\nDESCRIPTION: JSON configuration file structure for Datadog-CI Lambda instrumentation. Specifies various settings including layer versions, function ARNs, tracing options, and AWS credentials profile.\nSOURCE: https://github.com/datadog/datadog-ci/blob/master/src/commands/lambda/README.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"lambda\": {\n        \"layerVersion\": 10,\n        \"extensionVersion\": 8,\n        \"functions\": [\"arn:aws:lambda:us-east-1:000000000000:function:autoinstrument\"],\n        \"region\": \"us-east-1\",\n        \"tracing\": true,\n        \"mergeXrayTraces\": true,\n        \"captureLambdaPayload\": true,\n        \"forwarder\": \"arn:aws:lambda:us-east-1:000000000000:function:datadog-forwarder\",\n        \"logLevel\": \"debug\",\n        \"service\": \"some-service\",\n        \"version\": \"b17s47h3w1n\",\n        \"profile\": \"my-credentials\",\n        \"environment\": \"staging\",\n        \"extraTags\": \"layer:api,team:intake\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Commands in Development Environment using yarn launch\nDESCRIPTION: This command demonstrates how to run the DataDog CI tool in development mode using yarn launch, which uses ts-node to avoid building the project for every change.\nSOURCE: https://github.com/datadog/datadog-ci/blob/master/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn launch synthetics run-tests --config dev/global.config.json\n```\n\n----------------------------------------\n\nTITLE: Setting Datadog API Keys as Environment Variables\nDESCRIPTION: Bash commands to set the Datadog API and application keys as environment variables.\nSOURCE: https://github.com/datadog/datadog-ci/blob/master/src/commands/synthetics/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nexport DATADOG_API_KEY=\"<API_KEY>\"\nexport DATADOG_APP_KEY=\"<APPLICATION_KEY>\"\n```\n\n----------------------------------------\n\nTITLE: Uploading dSYM files from App Store Connect zip file\nDESCRIPTION: Shows how to upload dSYM files for Bitcode-enabled apps using a zip file downloaded from App Store Connect.\nSOURCE: https://github.com/datadog/datadog-ci/blob/master/src/commands/dsyms/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndatadog-ci dsyms upload ~/Downloads/appDsyms.zip\n```\n\n----------------------------------------\n\nTITLE: Setting up environment variables for Datadog API (Bash)\nDESCRIPTION: This snippet shows how to set up the required DATADOG_API_KEY environment variable for using the git-metadata command.\nSOURCE: https://github.com/datadog/datadog-ci/blob/master/src/commands/git-metadata/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Environment setup\nexport DATADOG_API_KEY=\"<API KEY>\"\n```\n\n----------------------------------------\n\nTITLE: Setting Datadog API Key in Bash Environment\nDESCRIPTION: Sets the DATADOG_API_KEY environment variable for authentication with Datadog services.\nSOURCE: https://github.com/datadog/datadog-ci/blob/master/src/commands/react-native/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Environment setup\nexport DATADOG_API_KEY=\"<API KEY>\"\n```\n\n----------------------------------------\n\nTITLE: Basic DORA Deployment Command Usage in Bash\nDESCRIPTION: Shows the basic syntax for the DORA deployment command in datadog-ci, highlighting the beta nature of the command and required environment variable.\nSOURCE: https://github.com/datadog/datadog-ci/blob/master/src/commands/dora/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ DD_BETA_COMMANDS_ENABLED=1 datadog-ci dora deployment [--service #0] [--env #0] [--dry-run]\n```\n\n----------------------------------------\n\nTITLE: End-to-end testing process for dSYMs upload\nDESCRIPTION: Provides a step-by-step process to verify the dSYMs upload command works correctly, including setting the API key and running the upload command.\nSOURCE: https://github.com/datadog/datadog-ci/blob/master/src/commands/dsyms/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nexport DATADOG_API_KEY='<API key>'\n\n// at this point, build any project in Xcode so that it produces dSYM files in Derived Data path\n// assuming your Derived Data path is ~/Library/Developer/Xcode/DerivedData/\n\nyarn launch dsyms upload ~/Library/Developer/Xcode/DerivedData/\n```\n\n----------------------------------------\n\nTITLE: Installing @datadog/datadog-ci Package with NPM\nDESCRIPTION: Command to install the @datadog/datadog-ci package using NPM as a development dependency.\nSOURCE: https://github.com/datadog/datadog-ci/blob/master/src/commands/synthetics/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @datadog/datadog-ci\n```\n\n----------------------------------------\n\nTITLE: Building and Linking Datadog CI Package\nDESCRIPTION: These bash commands show how to build and link the local Datadog CI package for development and testing purposes.\nSOURCE: https://github.com/datadog/datadog-ci/blob/master/src/commands/react-native/README.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nyarn build\nyarn link\n```\n\n----------------------------------------\n\nTITLE: Basic JUnit Upload Command Structure\nDESCRIPTION: Basic command syntax for uploading JUnit XML test reports using datadog-ci CLI.\nSOURCE: https://github.com/datadog/datadog-ci/blob/master/src/commands/junit/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndatadog-ci junit upload [--service] [--max-concurrency] [--dry-run] [--tags] <paths>\n```\n\n----------------------------------------\n\nTITLE: Setting Datadog Subdomain Environment Variable in Bash\nDESCRIPTION: Sets the custom subdomain environment variable for organizations using a custom Datadog subdomain. Required for proper test results URL display when accessing Datadog through a custom subdomain.\nSOURCE: https://github.com/datadog/datadog-ci/blob/master/src/commands/synthetics/README.md#2025-04-22_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nexport DATADOG_SUBDOMAIN=\"myorg\"\n```\n\n----------------------------------------\n\nTITLE: Structured Version History Array in JSON\nDESCRIPTION: JSON array containing version deployment records with install metrics, timestamps, and status indicators. Each record includes version number, deployment date, version string, and formatted status message with ANSI color codes.\nSOURCE: https://github.com/datadog/datadog-ci/blob/master/src/commands/react-native/__tests__/fixtures/codepush-deployment-history/valid-deployment.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  [\n    \"v1\",\n    \"Jun 07, 05:35 PM\",\n    \"0.0.1\",\n    \"No\",\n    null,\n    \"\\u001b[32mActive: \\u001b[39m0% (0 of 5)\\n\\u001b[32mInstalled: \\u001b[39m1\"\n  ],\n  [\n    \"v2\",\n    \"Jun 07, 05:41 PM\",\n    \"0.0.1\",\n    \"No\",\n    null,\n    \"\\u001b[32mActive: \\u001b[39m0% (0 of 5)\\n\\u001b[32mInstalled: \\u001b[39m5\"\n  ],\n  [\n    \"v3\",\n    \"Jun 08, 04:28 PM\",\n    \"0.0.1\",\n    \"No\",\n    null,\n    \"\\u001b[32mActive: \\u001b[39m20% (1 of 5)\\n\\u001b[32mInstalled: \\u001b[39m3\"\n  ],\n  [\n    \"v4\",\n    \"Jun 09, 10:30 AM\",\n    \"0.0.1\",\n    \"No\",\n    null,\n    \"\\u001b[32mActive: \\u001b[39m0% (0 of 5)\\n\\u001b[32mInstalled: \\u001b[39m1\\n\\u001b[32mRollbacks: \\u001b[39m\\u001b[31m1\\u001b[39m\"\n  ],\n  [\n    \"v5\",\n    \"Jun 16, 04:34 PM\",\n    \"0.0.1\",\n    \"No\",\n    null,\n    \"\\u001b[32mActive: \\u001b[39m100% (5 of 5)\\n\\u001b[32mInstalled: \\u001b[39m17 (18 pending)\"\n  ],\n  [\n    \"v6\",\n    \"Sep 05, 02:19 PM\",\n    \"1.0\",\n    \"No\",\n    null,\n    \"\\u001b[35mNo installs recorded\\u001b[39m\"\n  ],\n  [\n    \"v7\",\n    \"Sep 05, 02:27 PM\",\n    \"1.0\",\n    \"No\",\n    null,\n    \"\\u001b[35mNo installs recorded\\u001b[39m\"\n  ]\n]\n```\n\n----------------------------------------\n\nTITLE: Using Datadog CI CLI with npx or Global Installation\nDESCRIPTION: Commands to use the Datadog CI CLI tool with npx or after installing it globally using NPM or Yarn.\nSOURCE: https://github.com/datadog/datadog-ci/blob/master/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n# npx\nnpx @datadog/datadog-ci [command]\n\n# NPM install globally\nnpm install -g @datadog/datadog-ci\n\n# Yarn v1 add globally\nyarn global add @datadog/datadog-ci\n```\n\n----------------------------------------\n\nTITLE: Basic Trace Command Structure in Bash\nDESCRIPTION: Shows the basic command structure for the datadog-ci trace command with available options including name, tags, measures, no-fail, and dry-run flags.\nSOURCE: https://github.com/datadog/datadog-ci/blob/master/src/commands/trace/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndatadog-ci trace [--name <name>] [--tags] [--measures] [--no-fail] [--dry-run] -- <command>\n```\n\n----------------------------------------\n\nTITLE: Instrumenting Step Functions with Datadog CLI\nDESCRIPTION: Command to subscribe a Step Function log group to a Datadog Forwarder. This enables instrumentation by configuring logging settings and subscribing to the specified forwarder.\nSOURCE: https://github.com/datadog/datadog-ci/blob/master/src/commands/stepfunctions/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndatadog-ci stepfunctions instrument --step-function <step-function-arn> --forwarder <forwarder-arn> [--service] [--env] [--dry-run]\n```\n\n----------------------------------------\n\nTITLE: Running Synthetic Tests with Specific Public ID\nDESCRIPTION: Command to run a specific Datadog synthetic test by its public ID using the CLI.\nSOURCE: https://github.com/datadog/datadog-ci/blob/master/src/commands/synthetics/README.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nyarn datadog-ci synthetics run-tests --public-id pub-lic-id1\n```\n\n----------------------------------------\n\nTITLE: Basic Span Command Usage Syntax\nDESCRIPTION: Shows the complete syntax for the datadog-ci trace span command with all available options including name, timing parameters, tags, measures, and dry-run flag.\nSOURCE: https://github.com/datadog/datadog-ci/blob/master/src/commands/span/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndatadog-ci trace span [--name <name>] [--start-time <ms>] [--end-time <ms>] [--duration <ms>] [--tags] [--measures] [--dry-run]\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of the Datadog CI Tag Command\nDESCRIPTION: Basic syntax for using the datadog-ci tag command which allows adding tags to pipeline and job spans.\nSOURCE: https://github.com/datadog/datadog-ci/blob/master/src/commands/tag/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndatadog-ci tag [--no-fail] [--level <pipeline|job>] [--tags]\n```\n\n----------------------------------------\n\nTITLE: Example of evaluate command with specific team scopes\nDESCRIPTION: An example of the evaluate command targeting multiple teams (backend and frontend) with the fail-on-empty flag to ensure rules exist for evaluation.\nSOURCE: https://github.com/datadog/datadog-ci/blob/master/src/commands/gate/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndatadog-ci gate evaluate --scope team:backend --scope team:frontend --fail-on-empty\n```\n\n----------------------------------------\n\nTITLE: Creating Custom React Native XCode Script for Datadog CI\nDESCRIPTION: This script is used for React Native versions 0.69 and above to ensure proper propagation of environment variables in the XCode build phase. It combines the standard React Native XCode script with the Datadog CI command.\nSOURCE: https://github.com/datadog/datadog-ci/blob/master/src/commands/react-native/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/sh\nREACT_NATIVE_XCODE=\"../node_modules/react-native/scripts/react-native-xcode.sh\"\nDATADOG_XCODE=\"../node_modules/.bin/datadog-ci react-native xcode\"\n\n/bin/sh -c \"$DATADOG_XCODE $REACT_NATIVE_XCODE\"\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Datadog CI Tag Command with Job-Level Tags\nDESCRIPTION: Example showing how to add a go.version tag to a job-level span using the command line.\nSOURCE: https://github.com/datadog/datadog-ci/blob/master/src/commands/tag/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndatadog-ci tag --level job --tags \"go.version:`go version`\"\n```\n\n----------------------------------------\n\nTITLE: Running Synthetic Tests with CLI Parameters\nDESCRIPTION: Command to run Datadog synthetic tests using CLI parameters for API and application keys.\nSOURCE: https://github.com/datadog/datadog-ci/blob/master/src/commands/synthetics/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nyarn datadog-ci synthetics run-tests --apiKey \"<API_KEY>\" --appKey \"<APPLICATION_KEY>\"\n```\n\n----------------------------------------\n\nTITLE: Uploading Sourcemaps Command Example\nDESCRIPTION: Example command for uploading JavaScript sourcemaps to Datadog with required parameters including service name, minified path prefix, and release version.\nSOURCE: https://github.com/datadog/datadog-ci/blob/master/src/commands/sourcemaps/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndatadog-ci sourcemaps upload ./build --service my-service --minified-path-prefix https://static.datadog.com --release-version 1.234\n```\n\n----------------------------------------\n\nTITLE: End-to-End Testing of SARIF Upload Command\nDESCRIPTION: This snippet shows how to perform a dry run of the SARIF upload command for testing purposes. It sets the required API key and uses a sample SARIF file.\nSOURCE: https://github.com/datadog/datadog-ci/blob/master/src/commands/sarif/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport DATADOG_API_KEY='<API key>'\n\nyarn launch sarif upload ./src/commands/sarif/__tests__/fixtures/valid-results.sarif --dry-run\n```\n\n----------------------------------------\n\nTITLE: Setting up environment variables for Datadog API Key and Site\nDESCRIPTION: Sets the required DATADOG_API_KEY environment variable and optionally configures the DATADOG_SITE for non-US1 deployments.\nSOURCE: https://github.com/datadog/datadog-ci/blob/master/src/commands/dsyms/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Environment setup\nexport DATADOG_API_KEY=\"<API KEY>\"\n```\n\nLANGUAGE: bash\nCODE:\n```\n# Example environment setup for US5\nexport DATADOG_SITE=\"us5.datadoghq.com\"\n```\n\n----------------------------------------\n\nTITLE: End-to-End Testing of Datadog CI Measure Command in Bash\nDESCRIPTION: Provides a series of bash commands to test the measure command in a mock pipeline environment. It sets required environment variables and uses the command to add a measure to a pipeline span.\nSOURCE: https://github.com/datadog/datadog-ci/blob/master/src/commands/measure/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport DD_API_KEY='<API key>'\nexport BUILDKITE=true\nexport BUILDKITE_BUILD_ID=uuid\n\nyarn launch measure --level pipeline --measures foo:1\n```\n\n----------------------------------------\n\nTITLE: Setting Up Environment Variables for Datadog ELF Symbol Upload in Bash\nDESCRIPTION: Sets up the required API key environment variable for authenticating with Datadog services. This is a prerequisite for using the ELF symbol upload functionality.\nSOURCE: https://github.com/datadog/datadog-ci/blob/master/src/commands/elf-symbols/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Environment setup\nexport DATADOG_API_KEY=\"<API KEY>\"\n```\n\n----------------------------------------\n\nTITLE: Dry Run Example for Testing\nDESCRIPTION: Example showing how to test the JUnit upload command using dry-run mode with API key configuration.\nSOURCE: https://github.com/datadog/datadog-ci/blob/master/src/commands/junit/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport DD_API_KEY='<API key>'\n\nyarn launch junit upload ./src/commands/junit/__tests__/fixtures/java-report.xml --service example-upload --dry-run\n```\n\n----------------------------------------\n\nTITLE: JUnit Upload Command with Tags Example\nDESCRIPTION: Example command showing how to upload multiple JUnit XML reports with service name and custom tags.\nSOURCE: https://github.com/datadog/datadog-ci/blob/master/src/commands/junit/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndatadog-ci junit upload --service my-service --tags key1:value1 --tags key2:value2 unit-tests/junit-reports acceptance-tests/junit-reports e2e-tests/single-report.xml\n```\n\n----------------------------------------\n\nTITLE: Setting up Datadog API Key for Flutter Symbols Upload\nDESCRIPTION: Environment configuration for the Datadog API key required for using the datadog-ci tool.\nSOURCE: https://github.com/datadog/datadog-ci/blob/master/src/commands/flutter-symbols/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Environment setup\nexport DATADOG_API_KEY=\"<API KEY>\"\n```\n\n----------------------------------------\n\nTITLE: End-to-End Testing Example in Bash\nDESCRIPTION: Shows how to test the trace command functionality by setting required environment variables and executing a test command.\nSOURCE: https://github.com/datadog/datadog-ci/blob/master/src/commands/trace/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport DD_API_KEY='<API key>'\nexport CIRCLECI=true\n\nyarn launch trace --name \"Say Hello\" echo \"Hello World\"\n```\n\n----------------------------------------\n\nTITLE: Uninstrumenting AWS Lambda Functions with Datadog CLI\nDESCRIPTION: Examples of using the datadog-ci lambda uninstrument command to remove Datadog instrumentation from Lambda functions. The command removes Datadog layers and configuration, and supports function names, regex patterns, interactive mode, and dry run.\nSOURCE: https://github.com/datadog/datadog-ci/blob/master/src/commands/lambda/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Uninstrument multiple functions specified by names\ndatadog-ci lambda uninstrument -f <function-name> -f <another-function-name> -r us-east-1\n\n# Uninstrument function(s) in interactive mode\ndatadog-ci lambda uninstrument -i\n\n# Uninstrument multiple functions that match a regex pattern\ndatadog-ci lambda uninstrument --functions-regex <valid-regex-pattern> -r us-east-1\n\n# Dry run of all updates\ndatadog-ci lambda uninstrument -f <function-name> -f <another-function-name> -r us-east-1 --dry-run\n```\n\n----------------------------------------\n\nTITLE: End-to-end testing of git-metadata command (Bash)\nDESCRIPTION: This snippet demonstrates how to perform an end-to-end test of the git-metadata upload command. It sets the DATADOG_API_KEY and runs the command using yarn.\nSOURCE: https://github.com/datadog/datadog-ci/blob/master/src/commands/git-metadata/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport DATADOG_API_KEY='<API key>'\n\nyarn launch git-metadata upload\n```\n\n----------------------------------------\n\nTITLE: Using Datadog CI Measure Command in Bash\nDESCRIPTION: Demonstrates the basic usage of the datadog-ci measure command. It shows how to add a measure to a job span with a specific key-value pair.\nSOURCE: https://github.com/datadog/datadog-ci/blob/master/src/commands/measure/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndatadog-ci measure --level job --measures binary.size:1024\n```\n\n----------------------------------------\n\nTITLE: End-to-End Testing Example for Datadog CI Tag Command\nDESCRIPTION: A complete example demonstrating how to test the tag command by setting up necessary environment variables and running the command to tag a mock pipeline.\nSOURCE: https://github.com/datadog/datadog-ci/blob/master/src/commands/tag/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nexport DD_API_KEY='<API key>'\nexport BUILDKITE=true\nexport BUILDKITE_BUILD_ID=uuid\n\nyarn launch tag --level pipeline --tags foo:bar\n```\n\n----------------------------------------\n\nTITLE: Dry Run Test for Code Coverage Upload\nDESCRIPTION: This command demonstrates how to perform a dry run test of the coverage upload process using an environment variable for the API key.\nSOURCE: https://github.com/datadog/datadog-ci/blob/master/src/commands/coverage/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport DD_API_KEY='<API key>'\n\nyarn launch coverage upload --dry-run ./src/commands/coverage/__tests__/fixtures/jacoco-report.xml\n```\n\n----------------------------------------\n\nTITLE: JSON Structure for Tags File in Datadog CI\nDESCRIPTION: Example of the JSON structure required for the --tags-file parameter, showing a flat key-value structure for tags.\nSOURCE: https://github.com/datadog/datadog-ci/blob/master/src/commands/tag/README.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"key1\": \"value1\",\n  \"key2\": \"value2\"\n}\n```\n\n----------------------------------------\n\nTITLE: End-to-End Testing Example\nDESCRIPTION: Shows how to test the span command using dry-run mode with environment variables for CI integration testing.\nSOURCE: https://github.com/datadog/datadog-ci/blob/master/src/commands/span/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport DD_API_KEY='<API key>'\nexport CIRCLECI=true\n\nGITLAB_CI=1 yarn launch trace span --name hello --duration 618 --dry-run\n```\n\n----------------------------------------\n\nTITLE: Test Override Cookie Configuration\nDESCRIPTION: Configuration examples for overriding cookies in test configurations using both string and object formats.\nSOURCE: https://github.com/datadog/datadog-ci/blob/master/src/commands/synthetics/README.md#2025-04-22_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n\"cookies\": \"name1=value1;name2=value2\"\n```\n\nLANGUAGE: json\nCODE:\n```\n\"cookies\": {\"append\": true, \"value\": \"name1=value1;name2=value2\"}\n```\n\n----------------------------------------\n\nTITLE: Setting up Datadog API environment variable in bash\nDESCRIPTION: Configures the DATADOG_API_KEY environment variable required for authentication with Datadog's services.\nSOURCE: https://github.com/datadog/datadog-ci/blob/master/src/commands/unity-symbols/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Environment setup\nexport DATADOG_API_KEY=\"<API KEY>\"\n```\n\n----------------------------------------\n\nTITLE: Uploading PE Symbols to Datadog using CLI\nDESCRIPTION: Demonstrates the command to upload Windows PE debug info files to Datadog. It requires setting the DD_BETA_COMMANDS_ENABLED flag.\nSOURCE: https://github.com/datadog/datadog-ci/blob/master/src/commands/pe-symbols/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nDD_BETA_COMMANDS_ENABLED=1 datadog-ci pe-symbols upload ~/your/build/bin/\n```\n\n----------------------------------------\n\nTITLE: Uninstrumenting Step Functions with Datadog CLI\nDESCRIPTION: Command to unsubscribe a Step Function log group from a Datadog Forwarder while maintaining the AWS log group and logging configuration.\nSOURCE: https://github.com/datadog/datadog-ci/blob/master/src/commands/stepfunctions/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndatadog-ci stepfunctions uninstrument --step-function <step-function-arn> --forwarder <forwarder-arn> [--dry-run]\n```\n\n----------------------------------------\n\nTITLE: Setting up Datadog API Environment Variables\nDESCRIPTION: Configuration of environment variables needed for Datadog sourcemaps upload functionality.\nSOURCE: https://github.com/datadog/datadog-ci/blob/master/src/commands/sourcemaps/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Environment setup\nexport DATADOG_API_KEY=\"<API KEY>\"\n```\n\n----------------------------------------\n\nTITLE: Uploading SARIF Reports using datadog-ci CLI\nDESCRIPTION: This command uploads SARIF reports to Datadog. It supports various options like tagging, concurrency control, dry run mode, and report validation.\nSOURCE: https://github.com/datadog/datadog-ci/blob/master/src/commands/sarif/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndatadog-ci sarif upload [--max-concurrency] [--dry-run] [--no-verify] [--tags] <paths>\n```\n\n----------------------------------------\n\nTITLE: Expected Output Example in Bash\nDESCRIPTION: Shows the expected output when successfully running a traced command.\nSOURCE: https://github.com/datadog/datadog-ci/blob/master/src/commands/trace/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nHello World\n```\n\n----------------------------------------\n\nTITLE: Sample output from dry-run evaluation\nDESCRIPTION: Example output from a dry run evaluation that shows the matched repository, branch, and scope information without actually evaluating the rules.\nSOURCE: https://github.com/datadog/datadog-ci/blob/master/src/commands/gate/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nℹ️ Evaluating rules matching the following information:\nRepository: git@github.com:DataDog/datadog-ci.git\nBranch: master\nteam: backend\n\nDry run mode is enabled. Not evaluating the rules.\n```\n\n----------------------------------------\n\nTITLE: Structuring Measures File in JSON for Datadog CI\nDESCRIPTION: Shows the JSON structure for a measures file that can be used with the --measures-file option. The file should contain key-value pairs where values are numeric measures to be added to the pipeline or job span.\nSOURCE: https://github.com/datadog/datadog-ci/blob/master/src/commands/measure/README.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"image.size\": 5000,\n  \"another_measure\": 123\n}\n```\n\n----------------------------------------\n\nTITLE: Troubleshooting Datadog CI Command Not Found\nDESCRIPTION: These bash commands provide a solution for when the 'datadog-ci' command is not found. They set the correct permissions and copy the CLI file to the project's node_modules/.bin directory.\nSOURCE: https://github.com/datadog/datadog-ci/blob/master/src/commands/react-native/README.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nchmod +x /path/to/datadog-ci/dist/cli.js\ncp /path/to/datadog-ci/dist/cli.js /path/to/project/node_modules/.bin/datadog-ci\n```\n\n----------------------------------------\n\nTITLE: Creating a Datadog CI Configuration File\nDESCRIPTION: JSON configuration file format for storing API key and site information securely at the project root.\nSOURCE: https://github.com/datadog/datadog-ci/blob/master/src/commands/flutter-symbols/README.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"apiKey\": \"<DATADOG_API_KEY>\",\n  \"datadogSite\": \"<DATADOG_SITE>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuration Priority Order in YAML\nDESCRIPTION: Shows the precedence order of different configuration methods for Datadog CI Synthetics tests.\nSOURCE: https://github.com/datadog/datadog-ci/blob/master/src/commands/synthetics/README.md#2025-04-22_snippet_21\n\nLANGUAGE: yml\nCODE:\n```\nGlobal Config < Environment variables < CLI parameters < Test Config\n```\n\n----------------------------------------\n\nTITLE: Configuring NPM Script for Datadog CI Synthetics\nDESCRIPTION: JSON configuration to add a script in package.json for running datadog-ci synthetics tests.\nSOURCE: https://github.com/datadog/datadog-ci/blob/master/src/commands/synthetics/README.md#2025-04-22_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"datadog-ci-synthetics\": \"datadog-ci synthetics run-tests\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Expected Output for Successful Tag Command Execution\nDESCRIPTION: The expected console output when the tag command successfully sends tags to Datadog.\nSOURCE: https://github.com/datadog/datadog-ci/blob/master/src/commands/tag/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nTags sent\n```\n\n----------------------------------------\n\nTITLE: Configuring Datadog API Keys in JSON\nDESCRIPTION: JSON configuration file example showing how to configure Datadog API and application keys.\nSOURCE: https://github.com/datadog/datadog-ci/blob/master/src/commands/synthetics/README.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"apiKey\": \"<API_KEY>\",\n  \"appKey\": \"<APPLICATION_KEY>\",\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Datadog CI JSON File\nDESCRIPTION: Creates a datadog-ci.json file at the project root to store API key and site configuration securely.\nSOURCE: https://github.com/datadog/datadog-ci/blob/master/src/commands/react-native/README.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"apiKey\": \"<DATADOG_API_KEY>\",\n  \"datadogSite\": \"<DATADOG_SITE>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Command Structure for DataDog CI\nDESCRIPTION: Shows the expected folder structure for creating a new command in the DataDog CI tool, including test folders and required files.\nSOURCE: https://github.com/datadog/datadog-ci/blob/master/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsrc/\n└── commands/\n    └── fakeCommand/\n         ├── __tests__/\n         │   └── index.test.ts\n         ├── README.md\n         └── index.ts\n```\n\n----------------------------------------\n\nTITLE: Building Custom Datadog CI CLI Docker Image\nDESCRIPTION: Commands to build a custom Docker image for Datadog CI CLI using the provided Dockerfile, with an optional version specification.\nSOURCE: https://github.com/datadog/datadog-ci/blob/master/README.md#2025-04-22_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ncd container\ndocker build --tag datadog-ci .\n\n# Optionally, specify a version\ndocker build --build-arg \"VERSION=v1.14\" --t datadog-ci .\n```\n\n----------------------------------------\n\nTITLE: Creating a Hello World Command for DataDog CI\nDESCRIPTION: Sample TypeScript code for creating a basic command class that extends the Command class from clipanion. This example shows the minimum required implementation for a new command.\nSOURCE: https://github.com/datadog/datadog-ci/blob/master/CONTRIBUTING.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Command} from 'clipanion'\n\nexport class HelloWorldCommand extends Command {\n  public async execute() {\n    this.context.stdout.write('Hello world!')\n  }\n}\n\nmodule.exports = [HelloWorldCommand]\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTPS Proxy Environment Variable\nDESCRIPTION: Bash command to set the HTTPS_PROXY environment variable for proxy configuration.\nSOURCE: https://github.com/datadog/datadog-ci/blob/master/src/commands/synthetics/README.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nexport HTTPS_PROXY=http://login:pwd@127.0.0.1:3128\n```\n\n----------------------------------------\n\nTITLE: Installing Datadog CI CLI Binary on Linux\nDESCRIPTION: Command to download and install the standalone Datadog CI CLI binary on Linux systems, placing it in /usr/local/bin and making it executable.\nSOURCE: https://github.com/datadog/datadog-ci/blob/master/README.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncurl -L --fail \"https://github.com/DataDog/datadog-ci/releases/latest/download/datadog-ci_linux-x64\" --output \"/usr/local/bin/datadog-ci\" && chmod +x /usr/local/bin/datadog-ci\n```\n\n----------------------------------------\n\nTITLE: Global Configuration File Example in JSON\nDESCRIPTION: Example of a global configuration file for mobile application upload command showing various configuration options.\nSOURCE: https://github.com/datadog/datadog-ci/blob/master/src/commands/synthetics/README.md#2025-04-22_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"apiKey\": \"<DATADOG_API_KEY>\",\n  \"appKey\": \"<DATADOG_APPLICATION_KEY>\",\n  \"mobileApplicationVersionFilePath\": \"example_path/example_app.apk\",\n  \"mobileApplicationId\": \"example-abc\",\n  \"versionName\": \"example\",\n  \"latest\": true\n}\n```\n\n----------------------------------------\n\nTITLE: DataDog CI Development Workflow Commands\nDESCRIPTION: Lists the essential yarn commands used for development workflow, including compiling, watching for changes, running tests, building code, and making the binary executable.\nSOURCE: https://github.com/datadog/datadog-ci/blob/master/CONTRIBUTING.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Compile and watch\nyarn watch\n\n# Run the tests\nyarn test\n\n# Build code\nyarn build\n\n# Make bin executable\nyarn prepack\n```\n\n----------------------------------------\n\nTITLE: Installing Datadog CI CLI Binary on MacOS\nDESCRIPTION: Command to download and install the standalone Datadog CI CLI binary on MacOS systems, placing it in /usr/local/bin and making it executable.\nSOURCE: https://github.com/datadog/datadog-ci/blob/master/README.md#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ncurl -L --fail \"https://github.com/DataDog/datadog-ci/releases/latest/download/datadog-ci_darwin-x64\" --output \"/usr/local/bin/datadog-ci\" && chmod +x /usr/local/bin/datadog-ci\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Usage Example\nDESCRIPTION: Shows the transition from old to new environment variable for locations configuration in Synthetics tests.\nSOURCE: https://github.com/datadog/datadog-ci/blob/master/MIGRATING.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Old (removed)\nDATADOG_SYNTHETICS_LOCATIONS\n\n// New\nDATADOG_SYNTHETICS_OVERRIDE_LOCATIONS\n```\n\n----------------------------------------\n\nTITLE: Version Install Status Array JSON Structure\nDESCRIPTION: JSON array containing version install records with ANSI color escape codes for status messages. Each record has version ID, timestamp, version number, installation flag, and formatted status message.\nSOURCE: https://github.com/datadog/datadog-ci/blob/master/src/commands/react-native/__tests__/fixtures/codepush-deployment-history/valid-deployment-with-invalid-version.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  [\n    \"v1\",\n    \"Sep 05, 02:19 PM\",\n    \"1.0\",\n    \"No\",\n    null,\n    \"\\u001b[35mNo installs recorded\\u001b[39m\"\n  ],\n  [\n    \"v2\",\n    \"Sep 05, 02:27 PM\",\n    \"#??0.0.1\",\n    \"No\",\n    null,\n    \"\\u001b[35mNo installs recorded\\u001b[39m\"\n  ]\n]\n```\n\n----------------------------------------\n\nTITLE: Installing Datadog CI CLI Binary on Windows\nDESCRIPTION: PowerShell command to download the standalone Datadog CI CLI binary on Windows systems, saving it as datadog-ci.exe in the current directory.\nSOURCE: https://github.com/datadog/datadog-ci/blob/master/README.md#2025-04-22_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nInvoke-WebRequest -Uri \"https://github.com/DataDog/datadog-ci/releases/latest/download/datadog-ci_win-x64\" -OutFile \"datadog-ci.exe\"\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Test File Patterns\nDESCRIPTION: Command to run Datadog synthetic tests with custom file pattern globs for specific components.\nSOURCE: https://github.com/datadog/datadog-ci/blob/master/src/commands/synthetics/README.md#2025-04-22_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nyarn datadog-ci synthetics run-tests -f ./component-1/**/*.synthetics.json -f ./component-2/**/*.synthetics.json\n```\n\n----------------------------------------\n\nTITLE: Running Specific Tests with Public IDs\nDESCRIPTION: Command to run multiple specific Datadog synthetic tests by their public IDs using Yarn.\nSOURCE: https://github.com/datadog/datadog-ci/blob/master/src/commands/synthetics/README.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nyarn datadog-ci synthetics run-tests --public-id pub-lic-id1 --public-id pub-lic-id2\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Test Locations in Bash\nDESCRIPTION: Sets override locations for Synthetics tests execution using environment variables. Locations are specified using AWS region identifiers and separated by semicolons.\nSOURCE: https://github.com/datadog/datadog-ci/blob/master/src/commands/synthetics/README.md#2025-04-22_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\nexport DATADOG_SYNTHETICS_OVERRIDE_LOCATIONS=\"aws:us-east-1;aws:us-east-2\"\n```\n\n----------------------------------------\n\nTITLE: Simple Trace Command Example in Bash\nDESCRIPTION: Demonstrates a basic example of using the trace command to trace an echo command with a custom name.\nSOURCE: https://github.com/datadog/datadog-ci/blob/master/src/commands/trace/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndatadog-ci trace --name \"Say Hello\" -- echo \"Hello World\"\n```\n\n----------------------------------------\n\nTITLE: Developing SBOM Upload Command with Yarn\nDESCRIPTION: This command is used during development to test the SBOM upload functionality. It uses yarn to launch the sbom upload command with a specified SBOM file path.\nSOURCE: https://github.com/datadog/datadog-ci/blob/master/src/commands/sbom/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn launch sbom upload /path/to/sbom.json\n```\n\n----------------------------------------\n\nTITLE: Uploading iOS Source Maps to Datadog\nDESCRIPTION: Command to upload iOS source maps and bundle file to Datadog for error un-minification.\nSOURCE: https://github.com/datadog/datadog-ci/blob/master/src/commands/react-native/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndatadog-ci react-native upload --platform ios --service com.company.app --bundle ./main.jsbundle --sourcemap ./main.jsbundle.map --release-version 1.23.4 --build-version 1234\n```\n\n----------------------------------------\n\nTITLE: Setting up Datadog API Key in Bash\nDESCRIPTION: Demonstrates how to set the DATADOG_API_KEY environment variable for authentication with Datadog.\nSOURCE: https://github.com/datadog/datadog-ci/blob/master/src/commands/pe-symbols/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Environment setup\nexport DATADOG_API_KEY=\"<API KEY>\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Datadog CI JSON File\nDESCRIPTION: Shows the structure of the datadog-ci.json file used for storing API key and site configuration securely.\nSOURCE: https://github.com/datadog/datadog-ci/blob/master/src/commands/pe-symbols/README.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"apiKey\": \"<DATADOG_API_KEY>\",\n  \"datadogSite\": \"<DATADOG_SITE>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Datadog Settings with JSON Configuration File\nDESCRIPTION: Creates a JSON configuration file that stores API key and site information. This approach is recommended for securely storing credentials and configuration.\nSOURCE: https://github.com/datadog/datadog-ci/blob/master/src/commands/elf-symbols/README.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"apiKey\": \"<DATADOG_API_KEY>\",\n  \"datadogSite\": \"<DATADOG_SITE>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an encrypted configuration file for Datadog CI\nDESCRIPTION: Creates a JSON configuration file that stores API credentials and site information securely at the project root.\nSOURCE: https://github.com/datadog/datadog-ci/blob/master/src/commands/unity-symbols/README.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"apiKey\": \"<DATADOG_API_KEY>\",\n  \"datadogSite\": \"<DATADOG_SITE>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Proxy Agent Debugging\nDESCRIPTION: Command to enable debugging for the proxy-agent library when running datadog-ci synthetic tests.\nSOURCE: https://github.com/datadog/datadog-ci/blob/master/src/commands/synthetics/README.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nDEBUG=proxy-agent yarn datadog-ci synthetics run-tests\n```\n\n----------------------------------------\n\nTITLE: Setting CA Certificate for Proxy Configuration\nDESCRIPTION: Environment variable to set the CA certificate path for proxy trust in datadog-ci.\nSOURCE: https://github.com/datadog/datadog-ci/blob/master/src/commands/synthetics/README.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nexport NODE_EXTRA_CA_CERTS=/path/to/your-ca-cert.pem\n```\n\n----------------------------------------\n\nTITLE: Setting Datadog Site Environment Variable\nDESCRIPTION: Bash command to set the Datadog site as an environment variable for configuration.\nSOURCE: https://github.com/datadog/datadog-ci/blob/master/src/commands/synthetics/README.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nexport DATADOG_SITE=datadoghq.com\n```\n\n----------------------------------------\n\nTITLE: Installing @datadog/datadog-ci Package with Yarn\nDESCRIPTION: Command to install the @datadog/datadog-ci package using Yarn as a development dependency.\nSOURCE: https://github.com/datadog/datadog-ci/blob/master/src/commands/synthetics/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add --dev @datadog/datadog-ci\n```\n\n----------------------------------------\n\nTITLE: Configuring Datadog Site for Non-US1 Regions\nDESCRIPTION: Example environment configuration for specifying a Datadog site other than the default US1 site.\nSOURCE: https://github.com/datadog/datadog-ci/blob/master/src/commands/flutter-symbols/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Example environment setup for US5\nexport DATADOG_SITE=\"us5.datadoghq.com\"\n```\n\n----------------------------------------\n\nTITLE: Uploading dSYM files from Xcode's Derived Data path\nDESCRIPTION: Demonstrates how to use the datadog-ci dsyms upload command to upload dSYM files from the default Xcode Derived Data directory.\nSOURCE: https://github.com/datadog/datadog-ci/blob/master/src/commands/dsyms/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndatadog-ci dsyms upload ~/Library/Developer/Xcode/DerivedData/\n```\n\n----------------------------------------\n\nTITLE: Updated Files Configuration in JSON\nDESCRIPTION: Example showing the new format for specifying files in the global configuration file. The simple string format is replaced with an array of strings.\nSOURCE: https://github.com/datadog/datadog-ci/blob/master/MIGRATING.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"files\": [\"{,!(node_modules)/**/}*.synthetics.json\"]\n```\n\n----------------------------------------\n\nTITLE: Sample output of successful git-metadata upload (Bash)\nDESCRIPTION: This snippet shows an example of the expected output when the git-metadata upload command is successful. It includes information about the reported commit, tracked file paths, and upload duration.\nSOURCE: https://github.com/datadog/datadog-ci/blob/master/src/commands/git-metadata/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nReporting commit fceed94376fc50dea8ba6d6310002dcf1efcc06e from repository git@github.com:DataDog/datadog-ci.git.\n180 tracked file paths will be reported.\n✅ Uploaded in 0.736 seconds.\n✨  Done in 4.27s\n```\n\n----------------------------------------\n\nTITLE: Parsing AppCenter CLI Error Response in JSON\nDESCRIPTION: This JSON object represents an error response from the AppCenter CLI when trying to access a non-existent app. It includes error details and instructions for the user.\nSOURCE: https://github.com/datadog/datadog-ci/blob/master/src/commands/react-native/__tests__/fixtures/codepush-deployment-history/wrong-app-name.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"succeeded\": false,\n  \"errorCode\": 6,\n  \"errorMessage\": \"The app FakeOrg/WrongAppName does not exist. Please double check the name, and provide it in the form owner/appname. \\nRun the command \\u001b[1mappcenter apps list\\u001b[22m to see what apps you have access to.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Release Version Information in Plaintext\nDESCRIPTION: This code snippet represents a table of release version information, including version numbers, release dates, compatibility requirements, and installation statistics. It uses ANSI color codes for formatting in terminal output.\nSOURCE: https://github.com/datadog/datadog-ci/blob/master/src/commands/react-native/__tests__/fixtures/codepush-deployment-history/valid-deployment-with-prefix-symbols.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n[\n  [\n    \"v5\",\n    \"Jun 16, 04:34 PM\",\n    \"<0.0.1\",\n    \"No\",\n    null,\n    \"\\u001b[32mActive: \\u001b[39m100% (5 of 5)\\n\\u001b[32mInstalled: \\u001b[39m17 (18 pending)\"\n  ],\n  [\n    \"v6\",\n    \"Sep 05, 02:19 PM\",\n    \"1.0\",\n    \"No\",\n    null,\n    \"\\u001b[35mNo installs recorded\\u001b[39m\"\n  ],\n  [\n    \"v7\",\n    \"Sep 05, 02:27 PM\",\n    \">\\u003d2.0\",\n    \"No\",\n    null,\n    \"\\u001b[35mNo installs recorded\\u001b[39m\"\n  ]\n]\n```\n\n----------------------------------------\n\nTITLE: AppCenter Authentication Error JSON Response\nDESCRIPTION: Standard error response object from AppCenter CLI indicating an authentication error when trying to access CodePush deployment history. The response includes a success flag, error code, and descriptive error message.\nSOURCE: https://github.com/datadog/datadog-ci/blob/master/src/commands/react-native/__tests__/fixtures/codepush-deployment-history/not-logged-in.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\"succeeded\":false,\"errorCode\":5,\"errorMessage\":\"Command 'appcenter codepush deployment history' requires a logged in user. Use the 'appcenter login' command to log in.\"}\n```\n\n----------------------------------------\n\nTITLE: Parsing CodePush Deployment History Error Response in JSON\nDESCRIPTION: JSON structure representing an error response from a CodePush deployment history command execution. The response includes success status, error code, error message, and an empty exception object.\nSOURCE: https://github.com/datadog/datadog-ci/blob/master/src/commands/react-native/__tests__/fixtures/codepush-deployment-history/no-network.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\"succeeded\":false,\"errorCode\":3,\"errorMessage\":\"Command 'codepush deployment history Production --app FakeOrg/NoNetwork --output json' failed with exception \\\"Cannot read properties of undefined (reading 'body')\\\"\",\"exception\":{}}\n```\n\n----------------------------------------\n\nTITLE: Linking Datadog CI in Project\nDESCRIPTION: This bash command demonstrates how to link the Datadog CI package in your project for local development and testing.\nSOURCE: https://github.com/datadog/datadog-ci/blob/master/src/commands/react-native/README.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nyarn link @datadog/datadog-ci\n```\n\n----------------------------------------\n\nTITLE: Configuring XCode Build Phase for React Native < 0.69\nDESCRIPTION: This XCode build phase script directly executes the datadog-ci command along with the React Native XCode script for source map generation and upload. It's used for React Native versions below 0.69.\nSOURCE: https://github.com/datadog/datadog-ci/blob/master/src/commands/react-native/README.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nset -e\n../node_modules/.bin/datadog-ci react-native xcode ../node_modules/react-native/scripts/react-native-xcode.sh\n```"
  }
]