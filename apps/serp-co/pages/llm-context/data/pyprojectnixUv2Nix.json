[
  {
    "owner": "pyproject-nix",
    "repo": "uv2nix",
    "content": "TITLE: Configuring Nix Flake for UV2Nix Hello World Example\nDESCRIPTION: Defines a Nix flake configuration for a Python project using uv2nix. Sets up development shells and outputs that build a virtual environment based on uv.lock.\nSOURCE: https://github.com/pyproject-nix/uv2nix/blob/master/doc/src/usage/hello-world.md#2025-04-16_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\n{{#include ../../../templates/hello-world/flake.nix}}\n```\n\n----------------------------------------\n\nTITLE: Configuring Project with Private Dependencies in TOML\nDESCRIPTION: TOML configuration for a Python project that uses a private dependency. Demonstrates how to set up a custom PyPI index with the uv tool and configure a specific package to use that authenticated index.\nSOURCE: https://github.com/pyproject-nix/uv2nix/blob/master/doc/src/patterns/private-deps.md#2025-04-16_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[project]\nname = \"with-private-deps\"\nversion = \"0.1.0\"\nrequires-python = \">=3.12\"\ndependencies = [\"iniconfig\"]\n\n[[tool.uv.index]]\nname = \"my-index\"\nurl = \"https://pypi-proxy.fly.dev/basic-auth/simple\"\nexplicit = true\n\n[tool.uv.sources]\niniconfig = { index = \"my-index\" }\n\n[build-system]\nrequires = [\"setuptools>=42\"]\nbuild-backend = \"setuptools.build_meta\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Django Web Application with flake.nix\nDESCRIPTION: Nix flake configuration for setting up a Django web application. This file defines the project dependencies and build configuration using uv2nix.\nSOURCE: https://github.com/pyproject-nix/uv2nix/blob/master/doc/src/showcases/django.md#2025-04-16_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\n{{#include ../../../templates/django-webapp/flake.nix}}\n```\n\n----------------------------------------\n\nTITLE: Creating Python Application Packages with mkApplication in Nix\nDESCRIPTION: This snippet demonstrates how to use the mkApplication utility from pyproject.nix to create a standalone application package from a Python virtual environment. It creates a derivation that only links package content present in the specified Python package, excluding virtual environment components like Python interpreters and activation scripts.\nSOURCE: https://github.com/pyproject-nix/uv2nix/blob/master/doc/src/patterns/applications.md#2025-04-16_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\n{\n    packages = forAllSystems (\n      system:\n      let\n        pythonSet = pythonSets.${system};\n        pkgs = nixpkgs.legacyPackages.${system};\n        inherit (pkgs.callPackages pyproject-nix.build.util { }) mkApplication;\n      in\n      {\n        # Create a derivation that wraps the venv but that only links package\n        # content present in pythonSet.hello-world.\n        #\n        # This means that files such as:\n        # - Python interpreters\n        # - Activation scripts\n        # - pyvenv.cfg\n        #\n        # Are excluded but things like binaries, man pages, systemd units etc are included.\n        default = util.mkApplication {\n          venv = pythonSet.mkVirtualEnv \"application-env\" workspace.deps.default;\n          package = pythonSet.hello-world;\n      };\n}\n```\n\n----------------------------------------\n\nTITLE: Building Redistributable Wheels in Nix\nDESCRIPTION: Configuration to build a redistributable wheel using pyprojectDistHook. The build process includes safety checks to prevent Nix store path references from being included in the wheel file.\nSOURCE: https://github.com/pyproject-nix/uv2nix/blob/master/doc/src/patterns/dist.md#2025-04-16_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\npythonSet.hello-world.override {\n  pyprojectHook = pythonSet.pyprojectDistHook;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Nix Flake for Python Development Scripts\nDESCRIPTION: This flake.nix configuration sets up a development environment for Python scripts. It defines inputs, creates a devShell with Python and poetry, and sets up app definitions for running scripts from the 'examples' directory.\nSOURCE: https://github.com/pyproject-nix/uv2nix/blob/master/doc/src/patterns/scripts.md#2025-04-16_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\n{{#include ../../../templates/development-scripts/flake.nix}}\n```\n\n----------------------------------------\n\nTITLE: Implementing Build System Overrides in Nix\nDESCRIPTION: This Nix code defines an overlay that provides a declarative approach to overriding multiple build systems. It uses a set of predefined build system overrides and applies them to packages based on their build system type.\nSOURCE: https://github.com/pyproject-nix/uv2nix/blob/master/doc/src/patterns/overriding-build-systems.md#2025-04-16_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\n{{#include ../../../dev/build-system-overrides.nix}}\n```\n\n----------------------------------------\n\nTITLE: Basic UV2NIX Command Usage Example\nDESCRIPTION: Shows the basic command structure for using uv2nix to generate a Nix derivation from Python project requirements. The example demonstrates generating a package for a simple Flask application.\nSOURCE: https://github.com/pyproject-nix/uv2nix/blob/master/lib/fixtures/workspace-flat/README.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nuv2nix --extras dev,test > package.nix\n```\n\n----------------------------------------\n\nTITLE: Defining uv2nix Function in Nix\nDESCRIPTION: This snippet defines the main uv2nix function that takes various parameters to create a Nix derivation for a Python project using uv. It handles dependency resolution, environment setup, and package building.\nSOURCE: https://github.com/pyproject-nix/uv2nix/blob/master/lib/fixtures/workspace-flat/packages/pkg-b/README.md#2025-04-16_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\n{ lib, stdenv, python3, uv, makeWrapper, fetchurl, fetchzip, fetchFromGitHub, fetchgit, }:\n\n{ src ? null\n, pname ? null\n, version ? null\n, pyproject ? null\n, pythonPackages ? python3.pkgs\n, pythonInterpreter ? python3\n, buildInputs ? [ ]\n, propagatedBuildInputs ? [ ]\n, nativeBuildInputs ? [ ]\n, doCheck ? false\n, format ? null\n, checkPhase ? null\n, nativeCheckInputs ? [ ]\n, pythonImportsCheck ? [ ]\n, makeWrapperArgs ? [ ]\n, ...  # This is the \"@\" syntax\n}@args:\n\nlet\n  uvBin = \"${uv}/bin/uv\";\n  # Assuming python3Packages is available in the scope\n  python = pythonInterpreter;\n  inherit (python.passthru) pkgs;\n  # Ensure we have a src\n  package = if src == null then throw \"src must be specified\" else src;\n```\n\n----------------------------------------\n\nTITLE: Defining Python Project Dependencies in pyproject.toml\nDESCRIPTION: Specifies Python project metadata, dependencies, and development dependencies in pyproject.toml format for use with uv2nix.\nSOURCE: https://github.com/pyproject-nix/uv2nix/blob/master/doc/src/usage/hello-world.md#2025-04-16_snippet_1\n\nLANGUAGE: nix\nCODE:\n```\n{{#include ../../../templates/hello-world/pyproject.toml}}\n```\n\n----------------------------------------\n\nTITLE: Defining Package Representation Classes for Nix Integration\nDESCRIPTION: Defines dataclasses that represent Python packages and their metadata. These structures store information about package names, versions, hashes, URLs, and dependencies needed for Nix integration.\nSOURCE: https://github.com/pyproject-nix/uv2nix/blob/master/lib/fixtures/multi-pythons/packages/multi-depends/README.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@dataclass\nclass Source:\n    url: str\n    hash: str\n\n\n@dataclass\nclass Package:\n    name: str\n    version: str\n    build_system: str = \"\"  # pip, setuptools, flit, hatchling, pdm, maturin, etc.\n    is_root: bool = False\n    sources: List[Source] = field(default_factory=list)\n    # Original requirements, including version specifiers\n    requirements: List[str] = field(default_factory=list)\n    # Parsed requirements, just the package names\n    dependencies: List[str] = field(default_factory=list)\n```\n\n----------------------------------------\n\nTITLE: Python Project Configuration with pyproject.toml\nDESCRIPTION: Python project configuration file defining package metadata, dependencies, and build requirements for a Django web application.\nSOURCE: https://github.com/pyproject-nix/uv2nix/blob/master/doc/src/showcases/django.md#2025-04-16_snippet_1\n\nLANGUAGE: nix\nCODE:\n```\n{{#include ../../../templates/django-webapp/pyproject.toml}}\n```\n\n----------------------------------------\n\nTITLE: Main Function for uv2nix Execution in Python\nDESCRIPTION: The main function orchestrates the uv2nix process. It determines the project root, calls the uv export function, generates Nix expressions, and prints the result. It also handles command-line arguments for specifying the project root.\nSOURCE: https://github.com/pyproject-nix/uv2nix/blob/master/lib/fixtures/optional-deps/README.md#2025-04-16_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\ndef main():\n    import sys\n\n    if len(sys.argv) > 1:\n        project_root = Path(sys.argv[1])\n    else:\n        project_root = Path.cwd()\n\n    data = get_uv_export(project_root)\n    exprs = gen_nix_exprs(data)\n    print(json.dumps(exprs, indent=2))\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n----------------------------------------\n\nTITLE: Generating Nix Expressions from Python Dependencies with uv2nix\nDESCRIPTION: This command demonstrates how to use uv2nix to convert Python package dependencies into Nix expressions. It takes project dependencies from a requirements.txt file and generates a corresponding Nix file (default.nix) using the Python 3.11 interpreter.\nSOURCE: https://github.com/pyproject-nix/uv2nix/blob/master/lib/fixtures/with-extra/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nuv2nix -r requirements.txt -o default.nix -p python311\n```\n\n----------------------------------------\n\nTITLE: Generating Nix Expression for Python Packages in Python\nDESCRIPTION: This function creates a Nix expression for Python packages based on the parsed UV lockfile data. It handles package names, versions, and dependencies to generate a valid Nix structure.\nSOURCE: https://github.com/pyproject-nix/uv2nix/blob/master/lib/fixtures/kitchen-sink/a/README.md#2025-04-16_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\ndef generate_nix_expression(packages: Dict[str, Any], metadata: Dict[str, Any]) -> str:\n    nix_packages = []\n    for name, pkg_info in packages.items():\n        version = pkg_info[\"version\"]\n        dependencies = pkg_info.get(\"dependencies\", [])\n        nix_package = f'\n    {name} = python.pkgs.buildPythonPackage rec {{\n      pname = \"{name}\";\n      version = \"{version}\";\n      src = python.pkgs.fetchPypi {{\n        inherit pname version;\n        sha256 = \"0000000000000000000000000000000000000000000000000000\";\n      }};\n      propagatedBuildInputs = with python.pkgs; [\n        {\" \".join(dependencies)}\n      ];\n    }};'\n        nix_packages.append(nix_package)\n\n    nix_expression = f'''\n{{ pkgs ? import <nixpkgs> {{}}, python ? pkgs.python3 }}:\nwith pkgs;\npython.pkgs.buildPythonApplication {{\n  pname = \"{metadata['project_name']}\";\n  version = \"{metadata['version']}\";\n  src = ./.;\n  propagatedBuildInputs = with python.pkgs; [\n    {\" \".join(nix_packages)}\n  ];\n}}\n'''\n    return nix_expression\n```\n\n----------------------------------------\n\nTITLE: Installing uv2nix using Nix commands\nDESCRIPTION: Command to install uv2nix directly from GitHub using Nix package manager. This uses the nix-community/nixpkgs-python repository.\nSOURCE: https://github.com/pyproject-nix/uv2nix/blob/master/lib/fixtures/dynamic-version/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnix run github:nix-community/nixpkgs-python#uv2nix -- --help\n```\n\n----------------------------------------\n\nTITLE: Overriding Source Fetching in Nix\nDESCRIPTION: Nix code snippet that overrides the source fetching configuration for a package to use netrc authentication. Configures curl options to use the netrc file and enables TLS verification for secure credential transmission.\nSOURCE: https://github.com/pyproject-nix/uv2nix/blob/master/doc/src/patterns/private-deps.md#2025-04-16_snippet_2\n\nLANGUAGE: nix\nCODE:\n```\nlet\n  pyprojectOverrides = _final: prev: {\n    iniconfig = prev.iniconfig.overrideAttrs(old: {\n      src = old.src.overrideAttrs(_: {\n        # Make curl use our netrc file.\n        curlOpts = \"--netrc-file /etc/nix/netrc\";\n        # By default pkgs.fetchurl will fetch _without_ TLS verification for reproducibility.\n        # Since we are transferring credentials we want to verify certificates.\n        SSL_CERT_FILE = \"${pkgs.cacert}/etc/ssl/certs/ca-bundle.crt\";\n      });\n    });\n  };\nin ...\n```\n\n----------------------------------------\n\nTITLE: Importing uv2nix with Classic Nix\nDESCRIPTION: This snippet demonstrates how to import uv2nix without using Nix Flakes by fetching the repositories directly with builtins.fetchGit. It shows how to import pyproject-nix, uv2nix, and pyproject-build-systems from their respective GitHub repositories.\nSOURCE: https://github.com/pyproject-nix/uv2nix/blob/master/doc/src/install.md#2025-04-16_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\nlet\n  pkgs = import <nixpkgs> { };\n  inherit (pkgs) lib;\n\n  pyproject-nix = import (builtins.fetchGit {\n    url = \"https://github.com/pyproject-nix/pyproject.nix.git\";\n  }) {\n    inherit lib;\n  };\n\n  uv2nix = import (builtins.fetchGit {\n    url = \"https://github.com/pyproject-nix/uv2nix.git\";\n  }) {\n    inherit pyproject-nix lib;\n  };\n\n  pyproject-build-systems = import (builtins.fetchGit {\n    url = \"https://github.com/pyproject-nix/build-system-pkgs.git\";\n  }) {\n    inherit pyproject-nix uv2nix lib;\n  };\n\nin\n  ...\n```\n\n----------------------------------------\n\nTITLE: Overriding Python Wheel Packages in UV2Nix\nDESCRIPTION: Nix expression showing how to override pre-built binary wheels in UV2Nix. Contains customizations for wheel package builds.\nSOURCE: https://github.com/pyproject-nix/uv2nix/blob/master/doc/src/overriding/index.md#2025-04-16_snippet_1\n\nLANGUAGE: nix\nCODE:\n```\n{{#include ./overrides-wheels.nix}}\n```\n\n----------------------------------------\n\nTITLE: Installing UV2NIX with Nix Flakes\nDESCRIPTION: This snippet demonstrates how to install UV2NIX using Nix flakes. It shows the command to add the uv2nix package to the user's environment using the nix profile install command.\nSOURCE: https://github.com/pyproject-nix/uv2nix/blob/master/lib/fixtures/workspace-flat/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnix profile install github:berberman/uv2nix\n```\n\n----------------------------------------\n\nTITLE: Overriding Python Source Distributions in UV2Nix\nDESCRIPTION: Nix expression demonstrating how to override source builds (sdists) in UV2Nix. This file contains package-specific build modifications.\nSOURCE: https://github.com/pyproject-nix/uv2nix/blob/master/doc/src/overriding/index.md#2025-04-16_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\n{{#include ./overrides-sdist.nix}}\n```\n\n----------------------------------------\n\nTITLE: Running uv2nix to generate Nix expressions\nDESCRIPTION: This command demonstrates how to use uv2nix to generate Nix expressions from a uv lockfile. It takes the lockfile as input and outputs the Nix expressions to stdout.\nSOURCE: https://github.com/pyproject-nix/uv2nix/blob/master/lib/fixtures/no-deps/README.md#2025-04-16_snippet_1\n\nLANGUAGE: nix\nCODE:\n```\nuv2nix pyproject.toml uv.lock > nix/python-packages.nix\n```\n\n----------------------------------------\n\nTITLE: Fetching Dependencies in Nix for uv2nix\nDESCRIPTION: This function fetches dependencies for a Python project using uv. It handles different source types (URL, Git, GitHub) and returns a list of fetched dependencies.\nSOURCE: https://github.com/pyproject-nix/uv2nix/blob/master/lib/fixtures/workspace-flat/packages/pkg-b/README.md#2025-04-16_snippet_2\n\nLANGUAGE: nix\nCODE:\n```\n  fetchDeps = { name, requirements ? [ ] }:\n    let\n      deps = builtins.fromJSON (builtins.readFile (stdenv.mkDerivation {\n        name = \"${name}-deps.json\";\n        nativeBuildInputs = [ uv python ];\n        buildCommand = ''\n          mkdir -p $out\n          ${uvBin} pip sync ${lib.escapeShellArgs requirements} --print-only --index-url https://pypi.org/simple > $out/deps.json\n        '';\n      } + \"/deps.json\"));\n    in\n    map\n      (dep:\n        let\n          pname = dep.name;\n          version = dep.version;\n          url = dep.url;\n        in\n        if builtins.match \"https://.*(.tar.gz|.zip)\" url != null then\n          fetchurl {\n            inherit url pname version;\n            sha256 = dep.hash;\n          }\n        else if builtins.match \"https://github.com/.*\" url != null then\n          fetchFromGitHub {\n            owner = builtins.elemAt (builtins.match \"https://github.com/([^/]*)/([^/]*).*\" url) 0;\n            repo = builtins.elemAt (builtins.match \"https://github.com/([^/]*)/([^/]*).*\" url) 1;\n            rev = dep.hash;\n            sha256 = \"\";\n          }\n        else\n          fetchgit {\n            url = url;\n            rev = dep.hash;\n            sha256 = \"\";\n          }\n      )\n      deps;\n```\n\n----------------------------------------\n\nTITLE: Converting pyproject.toml to Nix Expression\nDESCRIPTION: Command to parse a pyproject.toml file and generate a corresponding Nix expression. This allows for managing Python project dependencies through Nix.\nSOURCE: https://github.com/pyproject-nix/uv2nix/blob/master/lib/fixtures/dynamic-version/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nuv2nix -p pyproject.toml > ./pkgs/deps.nix\n```\n\n----------------------------------------\n\nTITLE: Creating uv Environment in Nix\nDESCRIPTION: This function creates a uv environment by setting up a virtual environment, installing dependencies, and generating scripts for activating the environment.\nSOURCE: https://github.com/pyproject-nix/uv2nix/blob/master/lib/fixtures/workspace-flat/packages/pkg-b/README.md#2025-04-16_snippet_1\n\nLANGUAGE: nix\nCODE:\n```\n  mkUvEnv = { name, python, requirements ? [ ], pythonPath ? [ ] }:\n    stdenv.mkDerivation {\n      inherit name;\n      nativeBuildInputs = [ uv python makeWrapper ];\n      buildCommand = ''\n        mkdir -p $out/bin\n        ${uvBin} venv $out/venv\n        export PATH=\"$out/venv/bin:$PATH\"\n        ${uvBin} pip install ${lib.escapeShellArgs requirements}\n        ln -s $out/venv/bin/* $out/bin/\n        # Create a wrapped Python interpreter\n        makeWrapper $out/venv/bin/python $out/bin/python \\\n          --set PYTHONPATH \"${lib.makeSearchPath python.sitePackages pythonPath}:$PYTHONPATH\"\n        # Create an activation script\n        cat > $out/bin/activate << EOF\n        export PATH=\"$out/bin:$PATH\"\n        export PYTHONPATH=\"${lib.makeSearchPath python.sitePackages pythonPath}:$PYTHONPATH\"\n        EOF\n      '';\n    };\n```\n\n----------------------------------------\n\nTITLE: Creating Nix expressions from Requirements Files\nDESCRIPTION: Example of using uv2nix to convert Python requirements files into Nix expressions. This creates a Nix file that can be used to build a Python environment.\nSOURCE: https://github.com/pyproject-nix/uv2nix/blob/master/lib/fixtures/dynamic-version/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nuv2nix -r requirements.txt > ./pkgs/deps.nix\n```\n\n----------------------------------------\n\nTITLE: Configuring Flake for Testing in uv2nix Projects\nDESCRIPTION: This snippet demonstrates how to configure a flake.nix file to implement tests for uv2nix projects. It shows how to set up inputs, outputs, and create testing derivatives that can be used in CI checks.\nSOURCE: https://github.com/pyproject-nix/uv2nix/blob/master/doc/src/patterns/testing.md#2025-04-16_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\n{{#include ../../../templates/testing/flake.nix}}\n```\n\n----------------------------------------\n\nTITLE: Creating a Netrc File for Authentication\nDESCRIPTION: Sample netrc file configuration that provides authentication credentials for a private PyPI server. Contains machine name, login username, and password that curl will use for authentication.\nSOURCE: https://github.com/pyproject-nix/uv2nix/blob/master/doc/src/patterns/private-deps.md#2025-04-16_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nmachine pypi-proxy.fly.dev\nlogin public\npassword heron\n```\n\n----------------------------------------\n\nTITLE: Main Function for UV2NIX Execution Flow\nDESCRIPTION: Defines the main execution flow of the UV2NIX script. Parses command-line arguments, processes package dependencies using UV, converts them to Nix format, and outputs the result as JSON.\nSOURCE: https://github.com/pyproject-nix/uv2nix/blob/master/lib/fixtures/multi-pythons/packages/multi-depends/README.md#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef main():\n    parser = argparse.ArgumentParser(description=\"Convert Python dependencies to Nix format\")\n    parser.add_argument(\n        \"input\",\n        help=\"Input file (requirements.txt) or quoted package spec ('package>=1.0')\",\n    )\n    parser.add_argument(\n        \"-o\", \"--output\", help=\"Output file (default: stdout)\", default=None\n    )\n    args = parser.parse_args()\n\n    # Process dependencies\n    packages, _ = get_packages(args.input)\n    nix_data = convert_to_nix(packages)\n\n    # Output result\n    json_output = json.dumps(nix_data, indent=2)\n    if args.output:\n        with open(args.output, \"w\") as f:\n            f.write(json_output)\n    else:\n        print(json_output)\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n----------------------------------------\n\nTITLE: Nix Overlay for Dependency Patching\nDESCRIPTION: Nix configuration that demonstrates how to apply a patch to the arpeggio library while building from source distribution (sdist). Includes build system specification requirement.\nSOURCE: https://github.com/pyproject-nix/uv2nix/blob/master/doc/src/patterns/patching-deps.md#2025-04-16_snippet_1\n\nLANGUAGE: nix\nCODE:\n```\n{{#include ../../../dev/patching-deps.nix}}\n```\n\n----------------------------------------\n\nTITLE: UV2NIX Nix Expression Integration Example\nDESCRIPTION: This snippet demonstrates how to use the generated package.nix file within a Nix expression. It shows importing the generated file and using it to create a Python application with the specified dependencies.\nSOURCE: https://github.com/pyproject-nix/uv2nix/blob/master/lib/fixtures/workspace-flat/README.md#2025-04-16_snippet_2\n\nLANGUAGE: nix\nCODE:\n```\n{ pkgs ? import <nixpkgs> {} }:\n\nlet\n  package = import ./package.nix { inherit pkgs; };\nin pkgs.python3.withPackages (ps: [\n  (package ps)\n])\n```\n\n----------------------------------------\n\nTITLE: Importing generated Nix expressions in a Nix file\nDESCRIPTION: This Nix code snippet shows how to import and use the generated Nix expressions in a Nix file. It creates a Python environment with the specified packages and any additional packages needed.\nSOURCE: https://github.com/pyproject-nix/uv2nix/blob/master/lib/fixtures/no-deps/README.md#2025-04-16_snippet_2\n\nLANGUAGE: nix\nCODE:\n```\n{ pkgs ? import <nixpkgs> {} }:\n\nlet\n  python-packages = import ./nix/python-packages.nix { inherit pkgs; };\nin pkgs.mkShell {\n  packages = [\n    (pkgs.python3.withPackages (ps: [\n      ps.pip\n      ps.virtualenv\n    ] ++ python-packages))\n  ];\n}\n```\n\n----------------------------------------\n\nTITLE: Main Function for UV to Nix Conversion Process in Python\nDESCRIPTION: This is the main function that orchestrates the UV to Nix conversion process. It takes command-line arguments for input and output files, calls the parsing and generation functions, and handles potential errors.\nSOURCE: https://github.com/pyproject-nix/uv2nix/blob/master/lib/fixtures/kitchen-sink/a/README.md#2025-04-16_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\ndef main():\n    if len(sys.argv) != 3:\n        print(\"Usage: python uv2nix.py <input_lockfile> <output_nix_file>\")\n        sys.exit(1)\n\n    input_lockfile = sys.argv[1]\n    output_nix_file = sys.argv[2]\n\n    try:\n        packages, metadata = parse_uv_lockfile(input_lockfile)\n        nix_expression = generate_nix_expression(packages, metadata)\n\n        with open(output_nix_file, \"w\") as f:\n            f.write(nix_expression)\n\n        print(f\"Successfully converted {input_lockfile} to {output_nix_file}\")\n    except ConversionError as e:\n        print(f\"Error: {e}\", file=sys.stderr)\n        sys.exit(1)\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n----------------------------------------\n\nTITLE: Overriding Python Virtual Environment Attributes with Meta Information in Nix\nDESCRIPTION: This snippet demonstrates how to add metadata to Python virtual environment derivations in Nix. It defines an 'addMeta' function that overrides attributes to set meta.mainProgram (allowing 'nix run' to work) and passes through test information from the package to the virtualenv.\nSOURCE: https://github.com/pyproject-nix/uv2nix/blob/master/doc/src/patterns/meta.md#2025-04-16_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\n{\n    # Expose Python virtual environments as packages.\n    packages = forAllSystems (\n      system:\n      let\n        pythonSet = pythonSets.${system};\n\n        # Add metadata attributes to the virtual environment.\n        # This is useful to inject meta and other attributes onto the virtual environment derivation.\n        #\n        # See\n        # - https://nixos.org/manual/nixpkgs/unstable/#chap-passthru\n        # - https://nixos.org/manual/nixpkgs/unstable/#chap-meta\n        addMeta =\n          drv:\n          drv.overrideAttrs (old: {\n            # Pass through tests from our package into the virtualenv so they can be discovered externally.\n            passthru = lib.recursiveUpdate (old.passthru or { }) {\n              inherit (pythonSet.testing.passthru) tests;\n            };\n\n            # Set meta.mainProgram for commands like `nix run`.\n            # https://nixos.org/manual/nixpkgs/stable/#var-meta-mainProgram\n            meta = (old.meta or { }) // {\n              mainProgram = \"hello\";\n            };\n          });\n\n      in\n      {\n        default = addMeta (pythonSet.mkVirtualEnv \"testing-env\" workspace.deps.default);\n        full = addMeta (pythonSet.mkVirtualEnv \"testing-env-full\" workspace.deps.all);\n      }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Nix Flake for UV2Nix\nDESCRIPTION: Nix flake configuration file for managing UV-locked Python scripts. Used for setting up the build environment and package dependencies.\nSOURCE: https://github.com/pyproject-nix/uv2nix/blob/master/doc/src/usage/inline-metadata.md#2025-04-16_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\n{{#include ../../../templates/inline-metadata/flake.nix}}\n```\n\n----------------------------------------\n\nTITLE: Building Source Distribution (sdist) in Nix\nDESCRIPTION: Configuration to build a source distribution instead of a wheel by overriding the uvBuildType attribute to 'sdist'. This modification changes the default wheel build behavior to produce an sdist package.\nSOURCE: https://github.com/pyproject-nix/uv2nix/blob/master/doc/src/patterns/dist.md#2025-04-16_snippet_1\n\nLANGUAGE: nix\nCODE:\n```\n(pythonSet.hello-world.override {\n  pyprojectHook = pythonSet.pyprojectDistHook;\n}).overrideAttrs(old: {\n  env.uvBuildType = \"sdist\";\n})\n```\n\n----------------------------------------\n\nTITLE: Generating Nix Expressions from uv Export Data in Python\nDESCRIPTION: This function takes the processed uv export data and generates Nix expressions for each package. It utilizes the 'nix' module from pyproject_nix to create the expressions and handles package naming conventions.\nSOURCE: https://github.com/pyproject-nix/uv2nix/blob/master/lib/fixtures/optional-deps/README.md#2025-04-16_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\ndef gen_nix_exprs(data: dict) -> dict:\n    exprs = {}\n    for name, pkg in data.items():\n        nix_name = nix.normalize_pkg_name(name)\n        exprs[nix_name] = nix.mk_pkg_expr(\n            name=name,\n            version=pkg[\"version\"],\n            hash=pkg[\"hash\"],\n        )\n    return exprs\n```\n\n----------------------------------------\n\nTITLE: Installing Nixpkgs Wheels Using UV_FIND_LINKS\nDESCRIPTION: Creates a Nix shell environment that makes nixpkgs-built wheels available to uv through UV_FIND_LINKS. This approach sets up a symlink to the dist output of the seccomp package and configures the environment to find packages there.\nSOURCE: https://github.com/pyproject-nix/uv2nix/blob/master/doc/src/patterns/nixpkgs-wheels.md#2025-04-16_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\nlet\n  python = pkgs.python3;\n\n  uv-links = pkgs.symlinkJoin {\n    name = \"uv-links\";\n    paths = [\n      # Note: Using the dist output which contains a wheel\n      python.pkgs.seccomp.dist\n    ];\n  };\n\nin\nmkShell {\n  packages = [ pkgs.uv python ];\n  shellHook = ''\n    ln -sfn ${uv-links} .uv-links\n    export UV_FIND_LINKS=$(realpath -s .uv-links)\n  '';\n}\n```\n\n----------------------------------------\n\nTITLE: Traversing Directory Structure to Find Files in Python\nDESCRIPTION: This function navigates up the directory tree from a target directory, searching for specified files at each level. It returns the directory path where any of the target files are found, or None if no matches are found before reaching the root directory.\nSOURCE: https://github.com/pyproject-nix/uv2nix/blob/master/lib/fixtures/multi-pythons/README.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef find_in_parents(dir_path, filenames):\n    \"\"\"Find any of the given file names in the dir_path or any parent directory, stopping at root.\n\n    Args:\n        dir_path: Directory to search upward from\n        filenames: Filenames to look for\n\n    Returns:\n        Path to directory containing any of the filenames, or None if no match\n    \"\"\"\n    from pathlib import Path\n\n    current = Path(dir_path).absolute()\n    root = Path(current.root)\n\n    while current != root:\n        for filename in filenames:\n            if (current / filename).is_file():\n                return current\n        current = current.parent\n\n    # Also check root\n    for filename in filenames:\n        if (root / filename).is_file():\n            return root\n\n    return None\n```\n\n----------------------------------------\n\nTITLE: Using pyproject.nix Hacks with Nixpkgs Prebuilt Packages\nDESCRIPTION: An alternative approach that uses pyproject.nix's hacks module to directly incorporate prebuilt packages from nixpkgs. This method bypasses uv's package management for the specified package and directly pulls it from nixpkgs.\nSOURCE: https://github.com/pyproject-nix/uv2nix/blob/master/doc/src/patterns/nixpkgs-wheels.md#2025-04-16_snippet_2\n\nLANGUAGE: nix\nCODE:\n```\nlet\n  pyprojectOverrides = final: prev: {\n    seccomp = hacks.nixpkgsPrebuilt {\n      from = python.pkgs.seccomp;\n    };\n  };\n\n  pythonSet' = pythonSet.overrideScope pyprojectOverrides;\nin\n  pythonSet.mkVirtualEnv \"seccomp-env\" {\n    seccomp = [ ];\n  }\n```\n\n----------------------------------------\n\nTITLE: Configuring Python Project Metadata for uv2nix\nDESCRIPTION: This TOML file defines the Python project metadata for uv2nix, including project information, dependencies, and development tools configuration.\nSOURCE: https://github.com/pyproject-nix/uv2nix/blob/master/lib/fixtures/only-wheels/README.md#2025-04-16_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[tool.poetry]\nname = \"uv2nix\"\nversion = \"0.1.0\"\ndescription = \"\"\"\nA tool to generate nix expressions from pyproject.toml files\nusing uv to resolve dependencies.\n\"\"\"\nauthors = [\"Your Name <you@example.com>\"]\nreadme = \"README.md\"\npackages = [{include = \"uv2nix\"}]\n\n[tool.poetry.dependencies]\npython = \"^3.11\"\n\n[tool.poetry.group.dev.dependencies]\nruff = \"^0.1.6\"\nblack = \"^23.11.0\"\nmypy = \"^1.7.1\"\n\n[build-system]\nrequires = [\"poetry-core\"]\nbuild-backend = \"poetry.core.masonry.api\"\n\n[tool.ruff]\nline-length = 88\nindent-width = 4\n\n[tool.ruff.lint]\nselect = [\n    # pycodestyle\n    \"E\",\n    # Pyflakes\n    \"F\",\n    # pyupgrade\n    \"UP\",\n    # flake8-bugbear\n    \"B\",\n    # flake8-simplify\n    \"SIM\",\n    # isort\n    \"I\",\n]\nignore = []\n\n[tool.ruff.format]\nquote-style = \"double\"\nindent-style = \"space\"\nline-ending = \"auto\"\n\n[tool.mypy]\nstrict = true\n```\n\n----------------------------------------\n\nTITLE: Configuring Nix Development Environment for uv2nix\nDESCRIPTION: This Nix expression sets up the development environment for the uv2nix project. It defines the Python version, development dependencies, and shell configuration.\nSOURCE: https://github.com/pyproject-nix/uv2nix/blob/master/lib/fixtures/only-wheels/README.md#2025-04-16_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\n{\n  description = \"A uv2nix development environment\";\n  inputs = {\n    nixpkgs.url = \"github:NixOS/nixpkgs/nixos-unstable\";\n    flake-utils.url = \"github:numtide/flake-utils\";\n  };\n  outputs = { self, nixpkgs, flake-utils }:\n    flake-utils.lib.eachDefaultSystem (system:\n      let\n        pkgs = nixpkgs.legacyPackages.${system};\n        python = pkgs.python311;\n      in\n      {\n        devShells.default = pkgs.mkShell {\n          packages = with pkgs; [\n            python\n            poetry\n            ruff\n            black\n            mypy\n          ];\n          shellHook = ''\n            ${python.interpreter} -m venv .venv\n            source .venv/bin/activate\n            pip install -e .\n          '';\n        };\n      }\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Linux Kernel Version for PEP-508 Markers\nDESCRIPTION: Shows how to override the Linux kernel version used for marker evaluation by setting the platform_release environment variable in the mkPyprojectOverlay configuration.\nSOURCE: https://github.com/pyproject-nix/uv2nix/blob/master/doc/src/platform-quirks.md#2025-04-16_snippet_1\n\nLANGUAGE: nix\nCODE:\n```\nlet\n  overlay = workspace.mkPyprojectOverlay {\n    sourcePreference = \"wheel\";\n    environ = {\n      platform_release = \"5.10.65\";\n    };\n  }\nin ...\n```\n\n----------------------------------------\n\nTITLE: Creating pyproject.toml Configuration for Testing\nDESCRIPTION: This snippet shows the configuration for a Python project's pyproject.toml file in the context of uv2nix testing. It defines project metadata, dependencies, and test requirements.\nSOURCE: https://github.com/pyproject-nix/uv2nix/blob/master/doc/src/patterns/testing.md#2025-04-16_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n{{#include ../../../templates/testing/pyproject.toml}}\n```\n\n----------------------------------------\n\nTITLE: Generating Nix Expressions from Python Dependencies\nDESCRIPTION: This command utilizes pip2nix to create Nix expressions from Python package dependencies. It specifically targets the 'dev' group and outputs the result to a designated overlay file.\nSOURCE: https://github.com/pyproject-nix/uv2nix/blob/master/lib/fixtures/with-tool-uv-devdeps/README.md#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npip2nix generate -f \".[dev]\" -o nix/overlay.nix\n```\n\n----------------------------------------\n\nTITLE: Configuring MacOS SDK Version in Nix\nDESCRIPTION: Demonstrates how to override the MacOS SDK version for marker evaluation and wheel compatibility checks by modifying the stdenv.targetPlatform configuration. Sets the darwinSdkVersion to specify MacOS version 15.1 (Darwin 24).\nSOURCE: https://github.com/pyproject-nix/uv2nix/blob/master/doc/src/platform-quirks.md#2025-04-16_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\npkgs.callPackage pyproject-nix.build.packages {\n  inherit python;\n  stdenv = pkgs.stdenv.override {\n    targetPlatform = pkgs.stdenv.targetPlatform // {\n      # Sets MacOS SDK version to 15.1 which implies Darwin version 24.\n      # See https://en.wikipedia.org/wiki/MacOS_version_history#Releases for more background on version numbers.\n      darwinSdkVersion = \"15.1\";\n    };\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Pip Requirements File from pyproject.toml with UV\nDESCRIPTION: This command uses uv to generate a requirements.txt file from a pyproject.toml configuration. It captures package dependencies including their specific versions for reproducible builds.\nSOURCE: https://github.com/pyproject-nix/uv2nix/blob/master/lib/fixtures/with-tool-uv-devdeps/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nuv pip compile --generate-hashes pyproject.toml -o requirements.txt\n```\n\n----------------------------------------\n\nTITLE: UV2NIX Package Override Example in Nix\nDESCRIPTION: This snippet shows how to override specific packages when using uv2nix-generated dependencies. It demonstrates replacing the flask package with a custom version while maintaining the dependency structure.\nSOURCE: https://github.com/pyproject-nix/uv2nix/blob/master/lib/fixtures/workspace-flat/README.md#2025-04-16_snippet_3\n\nLANGUAGE: nix\nCODE:\n```\n{ pkgs ? import <nixpkgs> {} }:\n\nlet\n  package = import ./package.nix { \n    inherit pkgs; \n    overrides = self: super: {\n      flask = self.callPackage ./my-flask.nix {};\n    };\n  };\nin pkgs.python3.withPackages (ps: [\n  (package ps)\n])\n```\n\n----------------------------------------\n\nTITLE: Example Python Script Configuration\nDESCRIPTION: Example script configuration showing how to structure Python scripts with UV locked dependencies in the Nix environment.\nSOURCE: https://github.com/pyproject-nix/uv2nix/blob/master/doc/src/usage/inline-metadata.md#2025-04-16_snippet_1\n\nLANGUAGE: nix\nCODE:\n```\n{{#include ../../../templates/inline-metadata/scripts/example.py}}\n```\n\n----------------------------------------\n\nTITLE: Overriding Package Sources for Flake Evaluation\nDESCRIPTION: Overrides the seccomp package to ensure its sources can be properly accessed during Flake evaluation. This is necessary because the .uv-links directory isn't tracked in Git, which would cause issues in pure Flake evaluations.\nSOURCE: https://github.com/pyproject-nix/uv2nix/blob/master/doc/src/patterns/nixpkgs-wheels.md#2025-04-16_snippet_1\n\nLANGUAGE: nix\nCODE:\n```\nlet\n  pyprojectOverrides = final: prev: {\n    seccomp = prev.seccomp.overrideAttrs(old: {\n      buildInputs = (old.buildInputs or []) ++ python.pkgs.seccomp.buildInputs;\n      src = python.pkgs.seccomp.dist;\n    });\n  };\nin ...\n```\n\n----------------------------------------\n\nTITLE: Including Arpeggio Patch File Reference\nDESCRIPTION: Reference to include an external patch file for the arpeggio library.\nSOURCE: https://github.com/pyproject-nix/uv2nix/blob/master/doc/src/patterns/patching-deps.md#2025-04-16_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n{{#include ../../../dev/arpeggio.patch}}\n```\n\n----------------------------------------\n\nTITLE: Defining UV2NIX Overlays in Nix\nDESCRIPTION: This snippet defines a set of overlays for the UV2NIX project. It includes configurations for Python, development tools, and project-specific packages. The overlays are designed to be composable and can be used to customize the build environment.\nSOURCE: https://github.com/pyproject-nix/uv2nix/blob/master/doc/src/lib/overlays.md#2025-04-16_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\n{\n  overlays = {\n    python = import ./python.nix;\n    dev = import ./dev.nix;\n    packages = import ./packages.nix;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Installing uv2nix using Nix\nDESCRIPTION: This snippet shows how to install uv2nix using the Nix package manager. It uses the nix-env command to install the package from a specific GitHub repository.\nSOURCE: https://github.com/pyproject-nix/uv2nix/blob/master/lib/fixtures/no-deps/README.md#2025-04-16_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\nnix-env -if https://github.com/astro/uv2nix/archive/main.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Including Build Systems Configuration in NIX\nDESCRIPTION: Template for including build system configurations. Shows how to override build systems for both build host and target host during cross compilation.\nSOURCE: https://github.com/pyproject-nix/uv2nix/blob/master/doc/src/patterns/cross/index.md#2025-04-16_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\n{{#include ./build-systems.nix}}\n```\n\n----------------------------------------\n\nTITLE: Installing uv2nix via Nix Command\nDESCRIPTION: This command shows how to install the uv2nix tool using Nix's flake-based installation mechanism. It fetches the tool directly from GitHub and makes it available in the user's environment.\nSOURCE: https://github.com/pyproject-nix/uv2nix/blob/master/lib/fixtures/with-extra/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnix profile install github:bigmailer/uv2nix\n```\n\n----------------------------------------\n\nTITLE: Including Native Build Dependencies in NIX\nDESCRIPTION: Template for including native build dependencies configuration file in the NIX build system.\nSOURCE: https://github.com/pyproject-nix/uv2nix/blob/master/doc/src/patterns/cross/index.md#2025-04-16_snippet_1\n\nLANGUAGE: nix\nCODE:\n```\n{{#include ./build-depends.nix}}\n```\n\n----------------------------------------\n\nTITLE: Importing Required Modules for UV to Nix Conversion in Python\nDESCRIPTION: This snippet imports necessary Python modules for file handling, JSON parsing, and system operations. It also defines custom exceptions for error handling in the conversion process.\nSOURCE: https://github.com/pyproject-nix/uv2nix/blob/master/lib/fixtures/kitchen-sink/a/README.md#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport json\nimport os\nimport sys\nfrom typing import Any, Dict, List, Optional, Tuple\n\n\nclass ConversionError(Exception):\n    pass\n\n\nclass MissingMetadataError(ConversionError):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Running Integration Tests in uv2nix\nDESCRIPTION: Command for running integration tests that verify environment construction and builds. These tests are executed through Flake checks.\nSOURCE: https://github.com/pyproject-nix/uv2nix/blob/master/doc/src/HACKING.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ nix flake check\n```\n\n----------------------------------------\n\nTITLE: Building Python Package with uv2nix in Nix\nDESCRIPTION: This function builds a Python package using uv. It sets up the build environment, installs dependencies, and creates the final package structure.\nSOURCE: https://github.com/pyproject-nix/uv2nix/blob/master/lib/fixtures/workspace-flat/packages/pkg-b/README.md#2025-04-16_snippet_3\n\nLANGUAGE: nix\nCODE:\n```\n  buildPythonPackage = { pname, version, format ? \"pyproject\", src, buildInputs ? [ ], propagatedBuildInputs ? [ ], nativeBuildInputs ? [ ], ... }@args:\n    stdenv.mkDerivation (args // {\n      name = \"${pname}-${version}\";\n\n      nativeBuildInputs = [ uv python makeWrapper ] ++ nativeBuildInputs;\n\n      buildInputs = buildInputs ++ [\n        python\n      ];\n\n      propagatedBuildInputs = propagatedBuildInputs;\n\n      buildPhase = ''\n        runHook preBuild\n        ${uvBin} venv venv\n        export PATH=\"$PWD/venv/bin:$PATH\"\n        ${uvBin} pip install .\n        runHook postBuild\n      '';\n\n      installPhase = ''\n        runHook preInstall\n        mkdir -p $out/${python.sitePackages}\n        cp -r venv/lib/python*/site-packages/* $out/${python.sitePackages}\n        mkdir -p $out/bin\n        for f in venv/bin/*; do\n          if [[ -f $f && -x $f ]]; then\n            makeWrapper $f $out/bin/$(basename $f) \\\n              --set PYTHONPATH \"$out/${python.sitePackages}:$PYTHONPATH\"\n          fi\n        done\n        runHook postInstall\n      '';\n    });\n```\n\n----------------------------------------\n\nTITLE: Formatting uv2nix Code\nDESCRIPTION: Command for formatting code before submitting a PR. The nix fmt command is used to ensure consistent code style across the project.\nSOURCE: https://github.com/pyproject-nix/uv2nix/blob/master/doc/src/HACKING.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ nix fmt\n```\n\n----------------------------------------\n\nTITLE: Returning uv2nix Derivation in Nix\nDESCRIPTION: This snippet returns the final uv2nix derivation, combining all the previously defined functions to create a complete Python package build process using uv.\nSOURCE: https://github.com/pyproject-nix/uv2nix/blob/master/lib/fixtures/workspace-flat/packages/pkg-b/README.md#2025-04-16_snippet_4\n\nLANGUAGE: nix\nCODE:\n```\nin\nbuildPythonPackage (args // {\n  inherit pname version src;\n\n  format = \"pyproject\";\n\n  nativeBuildInputs = [ uv python makeWrapper ] ++ nativeBuildInputs;\n\n  buildInputs = buildInputs ++ [\n    python\n  ];\n\n  propagatedBuildInputs = propagatedBuildInputs;\n\n  # Add any additional configuration or overrides here\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Python Dependencies with UV\nDESCRIPTION: This command installs Python packages from a requirements.txt file using UV. It ensures consistent dependency installation across different environments.\nSOURCE: https://github.com/pyproject-nix/uv2nix/blob/master/lib/fixtures/with-tool-uv-devdeps/README.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nuv pip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Building Python Package with PEP 517 and UV\nDESCRIPTION: Command for building a Python package using UV according to PEP 517 standards. It outputs the built package to the dist directory, following modern Python packaging conventions.\nSOURCE: https://github.com/pyproject-nix/uv2nix/blob/master/lib/fixtures/with-tool-uv-devdeps/README.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nuv pip build --wheel .\n```\n\n----------------------------------------\n\nTITLE: Installing Development Dependencies with UV\nDESCRIPTION: Command for installing both regular and development dependencies using UV. It specifically targets the 'dev' dependency group defined in the project configuration file.\nSOURCE: https://github.com/pyproject-nix/uv2nix/blob/master/lib/fixtures/with-tool-uv-devdeps/README.md#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nuv pip install -e \".[dev]\"\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests in uv2nix\nDESCRIPTION: Commands for running the unit test suite either completely or for specific functions. The tests are executed using nix-unit against the libTests flake.\nSOURCE: https://github.com/pyproject-nix/uv2nix/blob/master/doc/src/HACKING.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ nix-unit --flake .#libTests\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ nix-unit --flake .#libTests.lock.mkOverlay\n```\n\n----------------------------------------\n\nTITLE: Defining CLI Arguments for UV2NIX Python Integration Tool\nDESCRIPTION: Sets up command-line interface arguments for the uv2nix tool, allowing users to specify input/output paths and customize the NIX expression generation process. Includes options for project specification, output file location, and import mode selection.\nSOURCE: https://github.com/pyproject-nix/uv2nix/blob/master/lib/fixtures/trivial/README.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nparser = argparse.ArgumentParser(description='UV python project to nix derivation converter')\nparser.add_argument('--requirements', required=False, help='Path to requirements.txt file')\nparser.add_argument('--pyproject', required=False, help='Path to pyproject.toml file')\nparser.add_argument('--out', required=True, help='Path to output python-packages.nix file')\nparser.add_argument('--with-default-overlay', action='store_true', required=False, help='Whether to use default-overlay.nix (a default output) for patching packages')\nparser.add_argument('--with-setuptools-src', action='store_true', required=False, help='Whether to use setuptools-src.nix (a default output) for setuptools source files')\nparser.add_argument('--with-patches', type=Path, required=False, help='Path to existing default-overlay.nix file for patching packages')\nparser.add_argument('--with-setuptools-srcs', type=Path, required=False, help='Path to existing setuptools-src.nix file')\nparser.add_argument('--pythoneda-shared-pythonlang-banner', required=False, help='The PythonEDA shared-pythonlang banner python package')\nparser.add_argument('--pythoneda-shared-pythonlang-domain', required=False, help='The PythonEDA shared-pythonlang domain python package')\nparser.add_argument('--filter', action='append', help='Package names to include')\nparser.add_argument('--output-filtering-rules', action='store_true', required=False, help='Whether to output the filtering rules to a file')\nparser.add_argument('--with-filtering-rules', type=Path, required=False, help='Path to existing filtering rules file')\nargs = parser.parse_args()\n```\n\n----------------------------------------\n\nTITLE: Executing UV Package Manager and Processing Dependencies\nDESCRIPTION: Runs the UV package manager to resolve dependencies and build a package. Captures the output and extracts necessary information like package versions and requirements for Nix integration.\nSOURCE: https://github.com/pyproject-nix/uv2nix/blob/master/lib/fixtures/multi-pythons/packages/multi-depends/README.md#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef get_packages(pip_attr: str) -> Tuple[Dict[str, Package], Set[str]]:\n    with tempfile.TemporaryDirectory() as tmp_dir:\n        # Create a basic pyproject.toml that just has our dependencies\n        pyproject_path = os.path.join(tmp_dir, \"pyproject.toml\")\n        if os.path.exists(pip_attr):\n            subprocess.run([\"cp\", pip_attr, pyproject_path], check=True)\n        else:\n            with open(pyproject_path, \"w\") as f:\n                f.write(\n                    f\"\"\"\n[project]\nname = \"uv2nix\"\nversion = \"0.1.0\"\ndependencies = [{pip_attr}]\n\"\"\"\n                )\n\n        # Use uv to resolve dependencies\n        requirements_path = os.path.join(tmp_dir, \"requirements.txt\")\n        subprocess.run(\n            [\n                \"uv\",\n                \"pip\",\n                \"compile\",\n                \"-o\",\n                requirements_path,\n                pyproject_path,\n                \"--resolution=highest\",\n                \"--all-extras\",\n            ],\n            check=True,\n        )\n\n        # Read the exported requirements file\n        dependencies = set()\n        packages: Dict[str, Package] = {}\n        with open(requirements_path, \"r\") as f:\n            for line in f:\n                line = line.strip()\n                if not line or line.startswith((\"#\", \"-e\", \"--\")):\n                    continue\n\n                # Parse out package name and version\n                if \"@\" in line:\n                    # Handle direct references (git+https://, etc.)\n                    url_part = line.split(\"@\", 1)[1]\n                    name_part = line.split(\"#\", 1)[1] if \"#\" in line else \"\"\n                    # Try to extract name from egg or name part\n                    if \"egg=\" in name_part:\n                        name = name_part.split(\"egg=\", 1)[1].split(\"&\", 1)[0]\n                    else:\n                        # Just use the last part of the URL\n                        name = url_part.rstrip(\"/\").split(\"/\")[-1]\n                    version = \"0.0.0\"  # Can't determine version for direct references\n                else:\n                    # Regular package==version format\n                    parts = line.split(\"==\", 1)\n                    if len(parts) == 2:\n                        name, version = parts\n                    else:\n                        # Handle packages without version constraints\n                        name = parts[0]\n                        # Need to query PyPI for latest version\n                        version = \"latest\"  # Placeholder\n\n                # Normalize package name\n                name = name.lower().replace(\"_\", \"-\")\n                dependencies.add(name)\n\n                try:\n                    # Get source URLs from PyPI\n                    sources = get_package_urls(name, version)\n                    packages[name] = Package(\n                        name=name,\n                        version=version,\n                        sources=sources,\n                    )\n                except Exception as e:\n                    print(f\"Error fetching {name}=={version}: {e}\", file=sys.stderr)\n                    packages[name] = Package(\n                        name=name,\n                        version=version,\n                    )\n\n        return packages, dependencies\n```\n\n----------------------------------------\n\nTITLE: Converting Package Data to Nix Format\nDESCRIPTION: Transforms Python package data into Nix expressions that can be used in the Nix ecosystem. Converts package metadata, sources, and dependencies into a Nix-compatible JSON structure.\nSOURCE: https://github.com/pyproject-nix/uv2nix/blob/master/lib/fixtures/multi-pythons/packages/multi-depends/README.md#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef convert_to_nix(packages: Dict[str, Package]) -> Dict[str, Any]:\n    result = {}\n    for name, pkg in packages.items():\n        # Skip packages with no sources (couldn't fetch from PyPI)\n        if not pkg.sources:\n            continue\n\n        # Prepare sources list\n        sources = []\n        for source in pkg.sources:\n            sources.append({\n                \"url\": source.url,\n                \"sha256\": source.hash,\n            })\n\n        # Add package info to result\n        result[name] = {\n            \"pname\": name,\n            \"version\": pkg.version,\n            \"sources\": sources,\n            \"dependencies\": pkg.dependencies,\n        }\n\n    return result\n```\n\n----------------------------------------\n\nTITLE: Resolving PyPI Package URLs with Multiple Format Support\nDESCRIPTION: Implements a function to determine package URLs and hashes from PyPI. Handles different package formats (wheels, sdist) and attempts to find compatible distributions based on system platform and Python version.\nSOURCE: https://github.com/pyproject-nix/uv2nix/blob/master/lib/fixtures/multi-pythons/packages/multi-depends/README.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef get_package_urls(name: str, version: str) -> List[Source]:\n    pypi_url = f\"https://pypi.org/pypi/{name}/{version}/json\"\n    with request.urlopen(pypi_url) as f:\n        pypi_data = json.loads(f.read().decode(\"utf-8\"))\n\n    sources = []\n    for url_data in pypi_data[\"urls\"]:\n        sources.append(\n            Source(\n                url=url_data[\"url\"],\n                hash=f\"{url_data['digests']['sha256']}\",\n            )\n        )\n    return sources\n```\n\n----------------------------------------\n\nTITLE: Writing NIX Expression Header with Documentation and Imports\nDESCRIPTION: Generates the header portion of the NIX expression file, including documentation comments, function parameters, and import statements. Sets up the basic structure for the NIX expression that will define Python packages.\nSOURCE: https://github.com/pyproject-nix/uv2nix/blob/master/lib/fixtures/trivial/README.md#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nwith open(args.out, \"w\") as package_nix:\n    package_nix.write(f'''\n# This file has been generated using uv2nix.\n#\n# uv2nix is a tool used to help nixify Python projects.\n# Feel free to modify this file to fit your needs.\n\n# see https://github.com/pythoneda-tools-pyprojects/uv2nix\n\n{{ pkgs, python, extras ? [] }}:\n\nlet\n  pythonPackages = python.pkgs;\n{chr(10).join(import_statements)}\n  buildPythonPackage = pythonPackages.buildPythonPackage;\n  fetchPypi = pythonPackages.fetchPypi;\n  setuptools = pythonPackages.setuptools;\n  setuptools-scm = pythonPackages.setuptools-scm;\n  wheel = pythonPackages.wheel;\n  overrides = {{}};\nin\n''')\n```\n\n----------------------------------------\n\nTITLE: Generating NIX Import Statements Based on Configuration\nDESCRIPTION: Creates NIX import statements for the output file based on user-specified options. Handles importing default overlay files, setuptools source files, and PythonEDA dependencies when specified in the command-line arguments.\nSOURCE: https://github.com/pyproject-nix/uv2nix/blob/master/lib/fixtures/trivial/README.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport_statements = []\nif args.with_default_overlay:\n    import_statements.append('  nixOverlay = import ./default-overlay.nix { inherit pkgs pythonPackages; };')\nelif args.with_patches:\n    import_statements.append(f'  nixOverlay = import {args.with_patches} {{ inherit pkgs pythonPackages; }};')\nelse:\n    import_statements.append('  nixOverlay = {};')\n\nif args.with_setuptools_src:\n    import_statements.append('  setuptools-src = import ./setuptools-src.nix { inherit pkgs pythonPackages; };')\nelif args.with_setuptools_srcs:\n    import_statements.append(f'  setuptools-src = import {args.with_setuptools_srcs} {{ inherit pkgs pythonPackages; }};')\nelse:\n    import_statements.append('  setuptools-src = {};')\n\nif args.pythoneda_shared_pythonlang_banner:\n    import_statements.append(f'  pythoneda-shared-pythonlang-banner = import {args.pythoneda_shared_pythonlang_banner} {{ inherit pkgs python; }};')\nelse:\n    import_statements.append('  # pythoneda-shared-pythonlang-banner = import path/to/pythoneda-shared-pythonlang-banner/nix/package.nix { inherit pkgs python; };')\n\nif args.pythoneda_shared_pythonlang_domain:\n    import_statements.append(f'  pythoneda-shared-pythonlang-domain = import {args.pythoneda_shared_pythonlang_domain} {{ inherit pkgs python; }};')\nelse:\n    import_statements.append('  # pythoneda-shared-pythonlang-domain = import path/to/pythoneda-shared-pythonlang-domain/nix/package.nix { inherit pkgs python; };')\n```\n\n----------------------------------------\n\nTITLE: Processing Package Filtering Rules from File or Command Line\nDESCRIPTION: Handles package filtering rules that determine which packages to include in the NIX output. Can either load rules from an existing file or use command-line arguments to create new filtering rules, with an option to save them for future use.\nSOURCE: https://github.com/pyproject-nix/uv2nix/blob/master/lib/fixtures/trivial/README.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfiltering_rules = None\nif args.with_filtering_rules:\n    with open(args.with_filtering_rules) as f:\n        filtering_rules = json.load(f)\nelse:\n    if args.filter:\n        filtering_rules = {\n            \"include\": args.filter\n        }\n    if args.output_filtering_rules and filtering_rules:\n        with open(Path(args.out).parent / \"filtering-rules.json\", \"w\") as f:\n            json.dump(filtering_rules, f, indent=2)\n```\n\n----------------------------------------\n\nTITLE: Parsing UV Lockfile and Extracting Package Information in Python\nDESCRIPTION: This function reads a UV lockfile, parses its JSON content, and extracts relevant package information. It handles potential errors and returns a tuple containing package data and metadata.\nSOURCE: https://github.com/pyproject-nix/uv2nix/blob/master/lib/fixtures/kitchen-sink/a/README.md#2025-04-16_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ndef parse_uv_lockfile(lockfile_path: str) -> Tuple[Dict[str, Any], Dict[str, Any]]:\n    try:\n        with open(lockfile_path, \"r\") as f:\n            lockfile_contents = json.load(f)\n    except json.JSONDecodeError as e:\n        raise ConversionError(f\"Failed to parse UV lockfile: {e}\")\n    except IOError as e:\n        raise ConversionError(f\"Failed to read UV lockfile: {e}\")\n\n    if \"metadata\" not in lockfile_contents:\n        raise MissingMetadataError(\"UV lockfile is missing metadata section\")\n\n    return lockfile_contents[\"package\"], lockfile_contents[\"metadata\"]\n```\n\n----------------------------------------\n\nTITLE: Executing uv Command and Processing Output in Python\nDESCRIPTION: This function executes the 'uv export' command, captures its JSON output, and processes it to extract package information. It handles potential errors and returns a dictionary of package data.\nSOURCE: https://github.com/pyproject-nix/uv2nix/blob/master/lib/fixtures/optional-deps/README.md#2025-04-16_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ndef get_uv_export(project_root: Path) -> dict:\n    try:\n        result = subprocess.run(\n            [\"uv\", \"export\", \"-f\", \"json\"],\n            cwd=project_root,\n            capture_output=True,\n            text=True,\n            check=True,\n        )\n    except subprocess.CalledProcessError as e:\n        print(f\"Error running 'uv export': {e}\")\n        print(f\"stdout: {e.stdout}\")\n        print(f\"stderr: {e.stderr}\")\n        raise\n\n    data = json.loads(result.stdout)\n    return {pkg[\"name\"]: pkg for pkg in data}\n```\n\n----------------------------------------\n\nTITLE: Importing Required Modules for uv2nix in Python\nDESCRIPTION: This snippet imports necessary Python modules for the uv2nix tool. It includes standard libraries for JSON handling, subprocess execution, and path manipulation, as well as custom modules for Nix expression generation.\nSOURCE: https://github.com/pyproject-nix/uv2nix/blob/master/lib/fixtures/optional-deps/README.md#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport json\nimport subprocess\nfrom pathlib import Path\n\nfrom pyproject_nix import nix\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for UV2NIX Python Script\nDESCRIPTION: Imports necessary libraries for working with file systems, json processing, argparse for command-line arguments, and the UV Python package manager. Sets up the foundation for the script's functionality.\nSOURCE: https://github.com/pyproject-nix/uv2nix/blob/master/lib/fixtures/multi-pythons/packages/multi-depends/README.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n#!/usr/bin/env python3\n\nimport os\nimport sys\nimport json\nimport hashlib\nimport tempfile\nimport argparse\nimport subprocess\nfrom pathlib import Path\nfrom urllib import request\nfrom dataclasses import dataclass, field\nfrom typing import Iterable, List, Dict, Optional, Any, Set, Tuple\n```\n\n----------------------------------------\n\nTITLE: Examining Package Entry Structure in Python Lock File\nDESCRIPTION: A sample entry from a Python package lock file showing the structure of how dependencies are recorded. It demonstrates the format that includes package name, version, and other metadata like source information.\nSOURCE: https://github.com/pyproject-nix/uv2nix/blob/master/lib/fixtures/kitchen-sink/b/README.md#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n\"httpcore\": {\n        \"dependencies\": [\n            \"anyio\",\n            \"certifi\",\n            \"h11\"\n        ],\n        \"editable\": false,\n        \"extras\": [],\n        \"marker\": null,\n        \"platform\": null,\n        \"python\": \">=3.8\",\n        \"source\": {\n            \"ref\": null,\n            \"ref_type\": null,\n            \"resolved_ref\": null,\n            \"source\": \"pypi\",\n            \"url\": null\n        },\n        \"version\": \"1.0.2\"\n    },\n```\n\n----------------------------------------\n\nTITLE: Generating Workspace Documentation Command\nDESCRIPTION: HTML comment containing a command to run nixdoc tool for generating workspace documentation from a specified Nix file\nSOURCE: https://github.com/pyproject-nix/uv2nix/blob/master/doc/src/lib/workspace.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- cmdrun nixdoc --category workspace --description workspace --file ../../../lib/workspace.nix -->\n```\n\n----------------------------------------\n\nTITLE: Package Reference Example in Markdown\nDESCRIPTION: Example showing how to reference a package variable in the documentation context.\nSOURCE: https://github.com/pyproject-nix/uv2nix/blob/master/doc/src/FAQ.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nuv2nix\n```\n\n----------------------------------------\n\nTITLE: Specifying tqdm Package Dependency for UV2NIX Project\nDESCRIPTION: This snippet specifies 'tqdm' as a dependency for the UV2NIX Python project. tqdm is a fast, extensible progress bar library for Python and CLI that allows tracking progress of loops and iterations.\nSOURCE: https://github.com/pyproject-nix/uv2nix/blob/master/lib/fixtures/dynamic-dependencies/dynamic-deps/requirements.txt#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ntqdm\n```"
  }
]